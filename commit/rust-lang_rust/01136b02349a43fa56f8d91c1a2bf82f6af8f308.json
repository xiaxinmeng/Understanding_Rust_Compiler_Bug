{"sha": "01136b02349a43fa56f8d91c1a2bf82f6af8f308", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMTM2YjAyMzQ5YTQzZmE1NmY4ZDkxYzFhMmJmODJmNmFmOGYzMDg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-29T13:48:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-29T13:48:40Z"}, "message": "Merge #2673\n\n2673: Don't add non-impl/trait containers to scope r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "a522ad3465b276113ce20582656d39a481eb9fd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a522ad3465b276113ce20582656d39a481eb9fd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01136b02349a43fa56f8d91c1a2bf82f6af8f308", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeCK64CRBK7hj4Ov3rIwAAdHIIAJYJFaFbXv8wOephxFQXf6vb\nowIGgmRpw2LJT4TdPgYSJdX8UYWZ6J2a6ULFrnqV0owdFd6HPT+Y7Y1QTtlDaszr\ndW8m3qjtN2EPO1TlwJ0xJ9I6zjWXCU5oFrHqfOqG681MFDvrRiQFiGaiuNvmvePU\noY9wRhLwxYFzZbRRsnTtZlAGUfOfMDRbOspRF2e8eSedMt6PRuwJVHTQo4RlmEPG\n9kwY4KNw7x8b6ZBi2NTUeYxSYdU/uYCkSE3YvvQp46nqYt4YK/d3nDF75T27nVRN\nhrdqmHYPycfHSZZb8uF1pe2nxHzXISb904XC+RFDT0gjgi7furiHHRG7vDViURY=\n=lPrk\n-----END PGP SIGNATURE-----\n", "payload": "tree a522ad3465b276113ce20582656d39a481eb9fd2\nparent dc48f89581843248660ceb755bb20469ab6ac0c9\nparent 8f36f768e1ca2654da4c22983fe3c8bc3ad059a9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1577627320 +0000\ncommitter GitHub <noreply@github.com> 1577627320 +0000\n\nMerge #2673\n\n2673: Don't add non-impl/trait containers to scope r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01136b02349a43fa56f8d91c1a2bf82f6af8f308", "html_url": "https://github.com/rust-lang/rust/commit/01136b02349a43fa56f8d91c1a2bf82f6af8f308", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01136b02349a43fa56f8d91c1a2bf82f6af8f308/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc48f89581843248660ceb755bb20469ab6ac0c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc48f89581843248660ceb755bb20469ab6ac0c9", "html_url": "https://github.com/rust-lang/rust/commit/dc48f89581843248660ceb755bb20469ab6ac0c9"}, {"sha": "8f36f768e1ca2654da4c22983fe3c8bc3ad059a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f36f768e1ca2654da4c22983fe3c8bc3ad059a9", "html_url": "https://github.com/rust-lang/rust/commit/8f36f768e1ca2654da4c22983fe3c8bc3ad059a9"}], "stats": {"total": 121, "additions": 96, "deletions": 25}, "files": [{"sha": "5d16dd0871eddd24234c5c9bc5eacee1baa9b381", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01136b02349a43fa56f8d91c1a2bf82f6af8f308/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01136b02349a43fa56f8d91c1a2bf82f6af8f308/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=01136b02349a43fa56f8d91c1a2bf82f6af8f308", "patch": "@@ -644,7 +644,7 @@ impl HasResolver for ContainerId {\n     fn resolver(self, db: &impl DefDatabase) -> Resolver {\n         match self {\n             ContainerId::ModuleId(it) => it.resolver(db),\n-            ContainerId::DefWithBodyId(it) => it.resolver(db),\n+            ContainerId::DefWithBodyId(it) => it.module(db).resolver(db),\n         }\n     }\n }"}, {"sha": "d1f10e675226ec98362e0833a6b82f1885082697", "filename": "crates/ra_hir_ty/src/tests.rs", "status": "modified", "additions": 57, "deletions": 23, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/01136b02349a43fa56f8d91c1a2bf82f6af8f308/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01136b02349a43fa56f8d91c1a2bf82f6af8f308/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs?ref=01136b02349a43fa56f8d91c1a2bf82f6af8f308", "patch": "@@ -11,8 +11,8 @@ use std::fmt::Write;\n use std::sync::Arc;\n \n use hir_def::{\n-    body::BodySourceMap, child_by_source::ChildBySource, db::DefDatabase, keys,\n-    nameres::CrateDefMap, AssocItemId, DefWithBodyId, LocalModuleId, Lookup, ModuleDefId,\n+    body::BodySourceMap, child_by_source::ChildBySource, db::DefDatabase, item_scope::ItemScope,\n+    keys, nameres::CrateDefMap, AssocItemId, DefWithBodyId, LocalModuleId, Lookup, ModuleDefId,\n };\n use hir_expand::InFile;\n use insta::assert_snapshot;\n@@ -163,35 +163,69 @@ fn visit_module(\n     module_id: LocalModuleId,\n     cb: &mut dyn FnMut(DefWithBodyId),\n ) {\n-    for decl in crate_def_map[module_id].scope.declarations() {\n-        match decl {\n-            ModuleDefId::FunctionId(it) => cb(it.into()),\n-            ModuleDefId::ConstId(it) => cb(it.into()),\n-            ModuleDefId::StaticId(it) => cb(it.into()),\n-            ModuleDefId::TraitId(it) => {\n-                let trait_data = db.trait_data(it);\n-                for &(_, item) in trait_data.items.iter() {\n-                    match item {\n-                        AssocItemId::FunctionId(it) => cb(it.into()),\n-                        AssocItemId::ConstId(it) => cb(it.into()),\n-                        AssocItemId::TypeAliasId(_) => (),\n-                    }\n-                }\n-            }\n-            ModuleDefId::ModuleId(it) => visit_module(db, crate_def_map, it.local_id, cb),\n-            _ => (),\n-        }\n-    }\n+    visit_scope(db, crate_def_map, &crate_def_map[module_id].scope, cb);\n     for impl_id in crate_def_map[module_id].scope.impls() {\n         let impl_data = db.impl_data(impl_id);\n         for &item in impl_data.items.iter() {\n             match item {\n-                AssocItemId::FunctionId(it) => cb(it.into()),\n-                AssocItemId::ConstId(it) => cb(it.into()),\n+                AssocItemId::FunctionId(it) => {\n+                    let def = it.into();\n+                    cb(def);\n+                    let body = db.body(def);\n+                    visit_scope(db, crate_def_map, &body.item_scope, cb);\n+                }\n+                AssocItemId::ConstId(it) => {\n+                    let def = it.into();\n+                    cb(def);\n+                    let body = db.body(def);\n+                    visit_scope(db, crate_def_map, &body.item_scope, cb);\n+                }\n                 AssocItemId::TypeAliasId(_) => (),\n             }\n         }\n     }\n+\n+    fn visit_scope(\n+        db: &TestDB,\n+        crate_def_map: &CrateDefMap,\n+        scope: &ItemScope,\n+        cb: &mut dyn FnMut(DefWithBodyId),\n+    ) {\n+        for decl in scope.declarations() {\n+            match decl {\n+                ModuleDefId::FunctionId(it) => {\n+                    let def = it.into();\n+                    cb(def);\n+                    let body = db.body(def);\n+                    visit_scope(db, crate_def_map, &body.item_scope, cb);\n+                }\n+                ModuleDefId::ConstId(it) => {\n+                    let def = it.into();\n+                    cb(def);\n+                    let body = db.body(def);\n+                    visit_scope(db, crate_def_map, &body.item_scope, cb);\n+                }\n+                ModuleDefId::StaticId(it) => {\n+                    let def = it.into();\n+                    cb(def);\n+                    let body = db.body(def);\n+                    visit_scope(db, crate_def_map, &body.item_scope, cb);\n+                }\n+                ModuleDefId::TraitId(it) => {\n+                    let trait_data = db.trait_data(it);\n+                    for &(_, item) in trait_data.items.iter() {\n+                        match item {\n+                            AssocItemId::FunctionId(it) => cb(it.into()),\n+                            AssocItemId::ConstId(it) => cb(it.into()),\n+                            AssocItemId::TypeAliasId(_) => (),\n+                        }\n+                    }\n+                }\n+                ModuleDefId::ModuleId(it) => visit_module(db, crate_def_map, it.local_id, cb),\n+                _ => (),\n+            }\n+        }\n+    }\n }\n \n fn ellipsize(mut text: String, max_len: usize) -> String {"}, {"sha": "8b3aa856424ba3ce5058c9cc7305f0caeb0517a8", "filename": "crates/ra_hir_ty/src/tests/regression.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/01136b02349a43fa56f8d91c1a2bf82f6af8f308/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01136b02349a43fa56f8d91c1a2bf82f6af8f308/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=01136b02349a43fa56f8d91c1a2bf82f6af8f308", "patch": "@@ -1,7 +1,8 @@\n-use super::infer;\n use insta::assert_snapshot;\n use test_utils::covers;\n \n+use super::infer;\n+\n #[test]\n fn bug_484() {\n     assert_snapshot!(\n@@ -331,3 +332,36 @@ pub fn main_loop() {\n     \"###\n     );\n }\n+\n+#[test]\n+fn issue_2669() {\n+    assert_snapshot!(\n+        infer(\n+            r#\"trait A {}\n+    trait Write {}\n+    struct Response<T> {}\n+\n+    trait D {\n+        fn foo();\n+    }\n+\n+    impl<T:A> D for Response<T> {\n+        fn foo() {\n+            end();\n+            fn end<W: Write>() {\n+                let _x: T =  loop {};\n+            }\n+        }\n+    }\"#\n+        ),\n+        @r###\"\n+    [147; 262) '{     ...     }': ()\n+    [161; 164) 'end': fn end<{unknown}>() -> ()\n+    [161; 166) 'end()': ()\n+    [199; 252) '{     ...     }': ()\n+    [221; 223) '_x': !\n+    [230; 237) 'loop {}': !\n+    [235; 237) '{}': ()\n+    \"###\n+    )\n+}"}, {"sha": "00134c99b7bd2ebe8c95e8fe5012441fa0fe8aa3", "filename": "crates/ra_hir_ty/src/tests/simple.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/01136b02349a43fa56f8d91c1a2bf82f6af8f308/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01136b02349a43fa56f8d91c1a2bf82f6af8f308/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=01136b02349a43fa56f8d91c1a2bf82f6af8f308", "patch": "@@ -1518,6 +1518,7 @@ fn test() {\n     [167; 179) 'GLOBAL_CONST': u32\n     [189; 191) 'id': u32\n     [194; 210) 'Foo::A..._CONST': u32\n+    [126; 128) '99': u32\n     \"###\n     );\n }\n@@ -1549,6 +1550,8 @@ fn test() {\n     [233; 246) 'GLOBAL_STATIC': u32\n     [256; 257) 'w': u32\n     [260; 277) 'GLOBAL...IC_MUT': u32\n+    [118; 120) '99': u32\n+    [161; 163) '99': u32\n     \"###\n     );\n }"}]}