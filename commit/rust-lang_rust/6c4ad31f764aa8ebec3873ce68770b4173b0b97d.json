{"sha": "6c4ad31f764aa8ebec3873ce68770b4173b0b97d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNGFkMzFmNzY0YWE4ZWJlYzM4NzNjZTY4NzcwYjQxNzNiMGI5N2Q=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-19T01:45:33Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-19T03:08:14Z"}, "message": "core: Add type params to condition handling so interface is safe.", "tree": {"sha": "7413b327e7046aa34e73b30348a086735b2c93e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7413b327e7046aa34e73b30348a086735b2c93e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c4ad31f764aa8ebec3873ce68770b4173b0b97d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c4ad31f764aa8ebec3873ce68770b4173b0b97d", "html_url": "https://github.com/rust-lang/rust/commit/6c4ad31f764aa8ebec3873ce68770b4173b0b97d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c4ad31f764aa8ebec3873ce68770b4173b0b97d/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34aabe5051c1d9666ac673d9da2e8413a694a169", "url": "https://api.github.com/repos/rust-lang/rust/commits/34aabe5051c1d9666ac673d9da2e8413a694a169", "html_url": "https://github.com/rust-lang/rust/commit/34aabe5051c1d9666ac673d9da2e8413a694a169"}], "stats": {"total": 49, "additions": 25, "deletions": 24}, "files": [{"sha": "d50c01683d80b984a075c1cfa3d58e1f5d81e3df", "filename": "src/libcore/condition.rs", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/6c4ad31f764aa8ebec3873ce68770b4173b0b97d/src%2Flibcore%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4ad31f764aa8ebec3873ce68770b4173b0b97d/src%2Flibcore%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcondition.rs?ref=6c4ad31f764aa8ebec3873ce68770b4173b0b97d", "patch": "@@ -1,23 +1,23 @@\n // helper for transmutation, shown below.\n type RustClosure = (int,int);\n \n-struct Condition {\n-    key: task::local_data::LocalDataKey<Handler>\n+struct Condition<T, U:Copy> {\n+    key: task::local_data::LocalDataKey<Handler<T,U>>\n }\n \n-struct Handler {\n+struct Handler<T, U:Copy> {\n     handle: RustClosure,\n-    prev: Option<@Handler>\n+    prev: Option<@Handler<T, U>>\n }\n \n \n-struct ProtectBlock {\n-    cond: &Condition,\n+struct ProtectBlock<T, U:Copy> {\n+    cond: &Condition<T, U>,\n     inner: RustClosure\n }\n \n-struct PopHandler {\n-    cond: &Condition,\n+struct PopHandler<T, U:Copy> {\n+    cond: &Condition<T,U>,\n     drop {\n         unsafe {\n             debug!(\"PopHandler: popping handler from TLS\");\n@@ -35,9 +35,9 @@ struct PopHandler {\n     }\n }\n \n-struct HandleBlock {\n-    pb: &ProtectBlock,\n-    handler: @Handler,\n+struct HandleBlock<T, U:Copy> {\n+    pb: &ProtectBlock<T,U>,\n+    handler: @Handler<T,U>,\n     drop {\n         unsafe {\n             debug!(\"HandleBlock: pushing handler to TLS\");\n@@ -54,8 +54,8 @@ struct HandleBlock {\n     }\n }\n \n-impl ProtectBlock {\n-    fn handle<T, U: Copy>(&self, h: &self/fn(&T) ->U) -> HandleBlock/&self {\n+impl<T, U: Copy> ProtectBlock<T,U> {\n+    fn handle(&self, h: &self/fn(&T) ->U) -> HandleBlock/&self<T,U> {\n         unsafe {\n             debug!(\"ProtectBlock.handle: setting up handler block\");\n             let p : *RustClosure = ::cast::transmute(&h);\n@@ -67,9 +67,9 @@ impl ProtectBlock {\n }\n \n \n-impl Condition {\n+impl<T, U: Copy>  Condition<T,U> {\n \n-    fn protect(&self, inner: &self/fn()) -> ProtectBlock/&self {\n+    fn protect(&self, inner: &self/fn()) -> ProtectBlock/&self<T,U> {\n         unsafe {\n             // transmutation to avoid copying non-copyable, should\n             // be fixable by tracking closure pointees in regionck.\n@@ -80,7 +80,7 @@ impl Condition {\n         }\n     }\n \n-    fn raise<T, U: Copy>(t:&T) -> U {\n+    fn raise(t:&T) -> U {\n         unsafe {\n             match task::local_data::local_data_get(self.key) {\n                 None => {\n@@ -100,15 +100,13 @@ impl Condition {\n \n \n #[cfg(test)]\n-fn happiness_key(_x: @Handler) { }\n-\n-#[cfg(test)]\n-fn sadness_key(_x: @Handler) { }\n+fn sadness_key(_x: @Handler<int,int>) { }\n \n #[cfg(test)]\n fn trouble(i: int) {\n     // Condition should work as a const, just limitations in consts.\n-    let sadness_condition : Condition = Condition { key: sadness_key };\n+    let sadness_condition : Condition<int,int> =\n+        Condition { key: sadness_key };\n     debug!(\"trouble: raising conition\");\n     let j = sadness_condition.raise(&i);\n     debug!(\"trouble: handler recovered with %d\", j);\n@@ -117,7 +115,8 @@ fn trouble(i: int) {\n #[test]\n fn test1() {\n \n-    let sadness_condition : Condition = Condition { key: sadness_key };\n+    let sadness_condition : Condition<int,int> =\n+        Condition { key: sadness_key };\n \n     let mut i = 10;\n \n@@ -138,7 +137,8 @@ fn test1() {\n }\n #[cfg(test)]\n fn nested_test_inner() {\n-    let sadness_condition : Condition = Condition { key: sadness_key };\n+    let sadness_condition : Condition<int,int> =\n+        Condition { key: sadness_key };\n \n     let mut inner_trapped = false;\n \n@@ -159,7 +159,8 @@ fn nested_test_inner() {\n #[test]\n fn nested_test_outer() {\n \n-    let sadness_condition : Condition = Condition { key: sadness_key };\n+    let sadness_condition : Condition<int,int> =\n+        Condition { key: sadness_key };\n \n     let mut outer_trapped = false;\n "}]}