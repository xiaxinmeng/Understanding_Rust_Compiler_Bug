{"sha": "e58c48bddae60e21dc8958407dadf6d187b78ea9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1OGM0OGJkZGFlNjBlMjFkYzg5NTg0MDdkYWRmNmQxODdiNzhlYTk=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-08-24T11:53:34Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-08-24T11:57:27Z"}, "message": "Optimize += [x] into a simple push operation\n\nThis is a preparation for making vectors always-on-the-heap again,\nwhich would cause way too much malloc traffic for this idiom. I will\nadd an efficient std::vec::push in the future, and migrate += [x] to\nthat instead.\n\nReduces compiler code size by 3%", "tree": {"sha": "9e56cc68bbabf7e8904f321112341e5a389fc143", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e56cc68bbabf7e8904f321112341e5a389fc143"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e58c48bddae60e21dc8958407dadf6d187b78ea9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e58c48bddae60e21dc8958407dadf6d187b78ea9", "html_url": "https://github.com/rust-lang/rust/commit/e58c48bddae60e21dc8958407dadf6d187b78ea9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e58c48bddae60e21dc8958407dadf6d187b78ea9/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bead045f2724e3a256a2123a844b079f82047dd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bead045f2724e3a256a2123a844b079f82047dd4", "html_url": "https://github.com/rust-lang/rust/commit/bead045f2724e3a256a2123a844b079f82047dd4"}], "stats": {"total": 96, "additions": 82, "deletions": 14}, "files": [{"sha": "3ff3371c3b0db1ae8bc29aa27731c35d232e8632", "filename": "src/comp/back/upcall.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e58c48bddae60e21dc8958407dadf6d187b78ea9/src%2Fcomp%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58c48bddae60e21dc8958407dadf6d187b78ea9/src%2Fcomp%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fupcall.rs?ref=e58c48bddae60e21dc8958407dadf6d187b78ea9", "patch": "@@ -43,6 +43,7 @@ type upcalls =\n      ivec_spill: ValueRef,\n      ivec_resize_shared: ValueRef,\n      ivec_spill_shared: ValueRef,\n+     ivec_push: ValueRef,\n      cmp_type: ValueRef,\n      log_type: ValueRef,\n      dynastack_mark: ValueRef,\n@@ -101,6 +102,9 @@ fn declare_upcalls(_tn: type_names, tydesc_type: TypeRef,\n           ivec_spill_shared:\n               d(\"ivec_spill_shared\", [T_ptr(T_opaque_ivec()), T_int()],\n                 T_void()),\n+          ivec_push:\n+              d(\"ivec_push\", [T_ptr(T_opaque_ivec()), T_ptr(tydesc_type),\n+                              T_ptr(T_i8())], T_void()),\n           cmp_type:\n               dr(\"cmp_type\",\n                  [T_ptr(T_i1()), taskptr_type, T_ptr(tydesc_type),"}, {"sha": "8899f207a660aca486faa95b17c7eb334cf0cb27", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e58c48bddae60e21dc8958407dadf6d187b78ea9/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58c48bddae60e21dc8958407dadf6d187b78ea9/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=e58c48bddae60e21dc8958407dadf6d187b78ea9", "patch": "@@ -4351,16 +4351,32 @@ fn trans_expr_out(cx: &@block_ctxt, e: &@ast::expr, output: out_method) ->\n         ret rslt(bcx, C_nil());\n       }\n       ast::expr_assign_op(op, dst, src) {\n-        let t = ty::expr_ty(bcx_tcx(cx), src);\n+        let tcx = bcx_tcx(cx);\n+        let t = ty::expr_ty(tcx, src);\n         let lhs_res = trans_lval(cx, dst);\n         assert (lhs_res.is_mem);\n-        // FIXME Fill in lhs_res.res.bcx.sp\n \n+        // Special case for `+= [x]`\n+        alt ty::struct(tcx, t) {\n+          ty::ty_vec(_) {\n+            alt src.node {\n+              ast::expr_vec(args, _) {\n+                let bcx = ivec::trans_append_literal\n+                    (lhs_res.res.bcx, lhs_res.res.val, t, args);\n+                ret rslt(bcx, C_nil());\n+              }\n+              _ {}\n+            }\n+          }\n+          _ {}\n+        }\n+\n+        // FIXME Fill in lhs_res.res.bcx.sp\n         let rhs_res = trans_expr(lhs_res.res.bcx, src);\n-        if ty::type_is_sequence(bcx_tcx(cx), t) {\n+        if ty::type_is_sequence(tcx, t) {\n             alt op {\n               ast::add. {\n-                if ty::sequence_is_interior(bcx_tcx(cx), t) {\n+                if ty::sequence_is_interior(tcx, t) {\n                     ret ivec::trans_append(rhs_res.bcx, t, lhs_res.res.val,\n                                            rhs_res.val);\n                 }"}, {"sha": "8c15d3b023be0690f5b2b43df7cbe898f104ea7d", "filename": "src/comp/middle/trans_ivec.rs", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e58c48bddae60e21dc8958407dadf6d187b78ea9/src%2Fcomp%2Fmiddle%2Ftrans_ivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58c48bddae60e21dc8958407dadf6d187b78ea9/src%2Fcomp%2Fmiddle%2Ftrans_ivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_ivec.rs?ref=e58c48bddae60e21dc8958407dadf6d187b78ea9", "patch": "@@ -11,9 +11,6 @@ import trans::{call_memmove, trans_shared_malloc, llsize_of,\n                new_sub_block_ctxt};\n import trans_common::*;\n \n-export trans_ivec, get_len_and_data, duplicate_heap_part, trans_add,\n-trans_append, alloc_with_heap;\n-\n fn alloc_with_heap(bcx: @block_ctxt, typ: &ty::t, vecsz: uint) ->\n     {bcx: @block_ctxt,\n      unit_ty: ty::t,\n@@ -342,15 +339,13 @@ fn reserve_space(cx: &@block_ctxt, llunitty: TypeRef, v: ValueRef,\n                            stack_no_spill_cx.llbb, stack_spill_cx.llbb]);\n     ret rslt(next_cx, data_ptr);\n }\n-fn trans_append(cx: &@block_ctxt, t: ty::t, orig_lhs: ValueRef,\n-                orig_rhs: ValueRef) -> result {\n+fn trans_append(cx: &@block_ctxt, t: ty::t, lhs: ValueRef,\n+                rhs: ValueRef) -> result {\n     // Cast to opaque interior vector types if necessary.\n-    let lhs;\n-    let rhs;\n     if ty::type_has_dynamic_size(bcx_tcx(cx), t) {\n-        lhs = cx.build.PointerCast(orig_lhs, T_ptr(T_opaque_ivec()));\n-        rhs = cx.build.PointerCast(orig_rhs, T_ptr(T_opaque_ivec()));\n-    } else { lhs = orig_lhs; rhs = orig_rhs; }\n+        lhs = cx.build.PointerCast(lhs, T_ptr(T_opaque_ivec()));\n+        rhs = cx.build.PointerCast(rhs, T_ptr(T_opaque_ivec()));\n+    }\n \n     let unit_ty = ty::sequence_element_type(bcx_tcx(cx), t);\n     let llunitty = type_of_or_i8(cx, unit_ty);\n@@ -448,6 +443,24 @@ fn trans_append(cx: &@block_ctxt, t: ty::t, orig_lhs: ValueRef,\n     ret rslt(next_cx, C_nil());\n }\n \n+fn trans_append_literal(bcx: &@block_ctxt, v: ValueRef, vec_ty: ty::t,\n+                        vals: &[@ast::expr]) -> @block_ctxt {\n+    let elt_ty = ty::sequence_element_type(bcx_tcx(bcx), vec_ty);\n+    let ti = none;\n+    let {bcx, val: td} = get_tydesc(bcx, elt_ty, false, ti).result;\n+    trans::lazily_emit_all_tydesc_glue(bcx, ti);\n+    let opaque_v = bcx.build.PointerCast(v, T_ptr(T_opaque_ivec()));\n+    for val in vals {\n+        let {bcx: e_bcx, val: elt} = trans::trans_expr(bcx, val);\n+        bcx = e_bcx;\n+        let spilled = trans::spill_if_immediate(bcx, elt, elt_ty);\n+        bcx.build.Call(bcx_ccx(bcx).upcalls.ivec_push,\n+                       [bcx.fcx.lltaskptr, opaque_v, td,\n+                        bcx.build.PointerCast(spilled, T_ptr(T_i8()))]);\n+    }\n+    ret bcx;\n+}\n+\n type alloc_result =\n     {bcx: @block_ctxt,\n      llptr: ValueRef,\n@@ -756,3 +769,13 @@ fn duplicate_heap_part(cx: &@block_ctxt, orig_vptr: ValueRef,\n \n     ret rslt(next_cx, C_nil());\n }\n+//\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// End:\n+//"}, {"sha": "174855cac23aa0d900a903cc3180b037917e08af", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e58c48bddae60e21dc8958407dadf6d187b78ea9/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e58c48bddae60e21dc8958407dadf6d187b78ea9/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=e58c48bddae60e21dc8958407dadf6d187b78ea9", "patch": "@@ -394,6 +394,30 @@ upcall_ivec_spill_shared(rust_task *task,\n     v->payload.ptr = heap_part;\n }\n \n+extern \"C\" CDECL void\n+upcall_ivec_push(rust_task* task, rust_ivec* v, type_desc* elt_ty, void* x) {\n+    LOG_UPCALL_ENTRY(task);\n+    bool is_interior = v->fill || !v->payload.ptr;\n+    size_t sz = elt_ty->size;\n+    size_t old_fill = is_interior ? v->fill : v->payload.ptr->fill;\n+    size_t new_sz = sz + old_fill;\n+    if (new_sz > v->alloc) {\n+        if (is_interior) {\n+            upcall_ivec_spill_shared(task, v, new_sz);\n+            is_interior = false;\n+        } else {\n+            upcall_ivec_resize_shared(task, v, new_sz);\n+        }\n+    } else {\n+        if (is_interior) v->fill = new_sz;\n+        else v->payload.ptr->fill = new_sz;\n+    }\n+    uint8_t* dataptr = is_interior ? &v->payload.data[0]\n+                                   : &v->payload.ptr->data[0];\n+    copy_elements(task, elt_ty, dataptr + old_fill, x, sz);\n+}\n+\n+\n /**\n  * Returns a token that can be used to deallocate all of the allocated space\n  * space in the dynamic stack."}, {"sha": "a3ecebf22a9797f90c451fe68fbc30f1630ebd69", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e58c48bddae60e21dc8958407dadf6d187b78ea9/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/e58c48bddae60e21dc8958407dadf6d187b78ea9/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=e58c48bddae60e21dc8958407dadf6d187b78ea9", "patch": "@@ -89,6 +89,7 @@ upcall_get_type_desc\n upcall_grow_task\n upcall_ivec_resize_shared\n upcall_ivec_spill_shared\n+upcall_ivec_push\n upcall_kill\n upcall_log_double\n upcall_log_float"}]}