{"sha": "be30e4044052fb0c74166a761eaec69c17fd2d54", "node_id": "C_kwDOAAsO6NoAKGJlMzBlNDA0NDA1MmZiMGM3NDE2NmE3NjFlYWVjNjljMTdmZDJkNTQ", "commit": {"author": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2022-04-17T04:37:42Z"}, "committer": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2022-04-17T04:39:43Z"}, "message": "Reword clarification on lifetime for ptr->ref safety docs", "tree": {"sha": "52a5e1076265df8b60cdee0f96eafddaa7963659", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52a5e1076265df8b60cdee0f96eafddaa7963659"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be30e4044052fb0c74166a761eaec69c17fd2d54", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEh0+qV0hta6XFe2D54u/UMJ4RyKgFAmJbmg8ACgkQ4u/UMJ4R\nyKh/fw//XI0A/sUtip9Pi0skkzuG1kbLGOrOeSIv7eu8+hOilI6mpzdR2Kq5fCqo\nHSGJJH6s4ieC8MVz0UUU0PTJFXZD9Etb/E53cXf/ZVu9u/zYRkJyynNnReUh2HP5\no+lPVN75qGqkQmt/Sn2xB9bOQD6hsPpIXPcFyzlNYKTqXINYJO8GGV7BOYvb0B8+\np8HDl1uZV7QhA9M+Zgi2KS4oMS475jabNdEcNpMbjvfkbZU+LTfO33ABVoTRRm3b\nIEk/18FDqLG37s3KmxTPSJh1wO9hxpMzOjsG0A9Ntw8tjzwMo2yudDglbNt1J8yA\nOsqHSmn3lQ70H9mVXVN4RMoT/s5cjW+/9uztqtHspCbwqkLu21A9GopO4eM3essP\n4qicxnb36/Ipbm3k8994PPPsjb7tNqBazarjdqQbXjdCDMDue1qVnxfNqivICY3q\nQZXyBUdtOhwggFBfyhu3YT5qqrY8liYySzOepAT7J00b/xjZhAVT38TOfU5macXg\nEtBlu7xqhRx1/zsZcEvY2ViqY4dNCwhTO20b3zDWCepOZLrZCT0lsqcLwtUw5SO6\nEKoLb8pHQpG3SOv8dMcPf23+C2jc57c8rxQX2J7iK/mevP6dUwQVwIEKPHpQSNQW\n1CGcb96ZxJZtL8WOlHhE0xstMB/V0qYvmPZ2i3oH0Zf7XyXGa9M=\n=Wxvu\n-----END PGP SIGNATURE-----", "payload": "tree 52a5e1076265df8b60cdee0f96eafddaa7963659\nparent 2c28b0eaf9843ec0f493fca2dba506fe4d9174fb\nauthor Thom Chiovoloni <chiovolonit@gmail.com> 1650170262 -0700\ncommitter Thom Chiovoloni <chiovolonit@gmail.com> 1650170383 -0700\n\nReword clarification on lifetime for ptr->ref safety docs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be30e4044052fb0c74166a761eaec69c17fd2d54", "html_url": "https://github.com/rust-lang/rust/commit/be30e4044052fb0c74166a761eaec69c17fd2d54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be30e4044052fb0c74166a761eaec69c17fd2d54/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c28b0eaf9843ec0f493fca2dba506fe4d9174fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c28b0eaf9843ec0f493fca2dba506fe4d9174fb", "html_url": "https://github.com/rust-lang/rust/commit/2c28b0eaf9843ec0f493fca2dba506fe4d9174fb"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "7ef2e95542bba6b3a0ec1e7fb92491cc88c240dc", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be30e4044052fb0c74166a761eaec69c17fd2d54/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be30e4044052fb0c74166a761eaec69c17fd2d54/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=be30e4044052fb0c74166a761eaec69c17fd2d54", "patch": "@@ -295,7 +295,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n-    ///   In particular, for the duration of this lifetime, the memory the pointer points to must\n+    ///   In particular, while this reference exists, the memory the pointer points to must\n     ///   not get mutated (except inside `UnsafeCell`).\n     ///\n     /// This applies even if the result of this method is unused!\n@@ -358,7 +358,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n-    ///   In particular, for the duration of this lifetime, the memory the pointer points to must\n+    ///   In particular, while this reference exists, the memory the pointer points to must\n     ///   not get mutated (except inside `UnsafeCell`).\n     ///\n     /// This applies even if the result of this method is unused!\n@@ -1188,7 +1188,7 @@ impl<T> *const [T] {\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n-    ///   In particular, for the duration of this lifetime, the memory the pointer points to must\n+    ///   In particular, while this reference exists, the memory the pointer points to must\n     ///   not get mutated (except inside `UnsafeCell`).\n     ///\n     /// This applies even if the result of this method is unused!"}, {"sha": "56f9c84f5af6f3341db11472f75528917fc9b76e", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be30e4044052fb0c74166a761eaec69c17fd2d54/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be30e4044052fb0c74166a761eaec69c17fd2d54/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=be30e4044052fb0c74166a761eaec69c17fd2d54", "patch": "@@ -302,7 +302,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n-    ///   In particular, for the duration of this lifetime, the memory the pointer points to must\n+    ///   In particular, while this reference exists, the memory the pointer points to must\n     ///   not get mutated (except inside `UnsafeCell`).\n     ///\n     /// This applies even if the result of this method is unused!\n@@ -368,7 +368,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n-    ///   In particular, for the duration of this lifetime, the memory the pointer points to must\n+    ///   In particular, while this reference exists, the memory the pointer points to must\n     ///   not get mutated (except inside `UnsafeCell`).\n     ///\n     /// This applies even if the result of this method is unused!\n@@ -550,7 +550,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n-    ///   In particular, for the duration of this lifetime, the memory the pointer points to must\n+    ///   In particular, while this reference exists, the memory the pointer points to must\n     ///   not get accessed (read or written) through any other pointer.\n     ///\n     /// This applies even if the result of this method is unused!\n@@ -615,7 +615,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n-    ///   In particular, for the duration of this lifetime, the memory the pointer points to must\n+    ///   In particular, while this reference exists, the memory the pointer points to must\n     ///   not get accessed (read or written) through any other pointer.\n     ///\n     /// This applies even if the result of this method is unused!\n@@ -1461,7 +1461,7 @@ impl<T> *mut [T] {\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n-    ///   In particular, for the duration of this lifetime, the memory the pointer points to must\n+    ///   In particular, while this reference exists, the memory the pointer points to must\n     ///   not get mutated (except inside `UnsafeCell`).\n     ///\n     /// This applies even if the result of this method is unused!\n@@ -1513,7 +1513,7 @@ impl<T> *mut [T] {\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n-    ///   In particular, for the duration of this lifetime, the memory the pointer points to must\n+    ///   In particular, while this reference exists, the memory the pointer points to must\n     ///   not get accessed (read or written) through any other pointer.\n     ///\n     /// This applies even if the result of this method is unused!"}, {"sha": "5ebe61509063f3a7807bacdc5ace278d7666366b", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/be30e4044052fb0c74166a761eaec69c17fd2d54/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be30e4044052fb0c74166a761eaec69c17fd2d54/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=be30e4044052fb0c74166a761eaec69c17fd2d54", "patch": "@@ -114,7 +114,7 @@ impl<T: Sized> NonNull<T> {\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n-    ///   In particular, for the duration of this lifetime, the memory the pointer points to must\n+    ///   In particular, while this reference exists, the memory the pointer points to must\n     ///   not get mutated (except inside `UnsafeCell`).\n     ///\n     /// This applies even if the result of this method is unused!\n@@ -148,7 +148,7 @@ impl<T: Sized> NonNull<T> {\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n-    ///   In particular, for the duration of this lifetime, the memory the pointer points to must\n+    ///   In particular, while this reference exists, the memory the pointer points to must\n     ///   not get accessed (read or written) through any other pointer.\n     ///\n     /// This applies even if the result of this method is unused!\n@@ -350,7 +350,7 @@ impl<T: ?Sized> NonNull<T> {\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n-    ///   In particular, for the duration of this lifetime, the memory the pointer points to must\n+    ///   In particular, while this reference exists, the memory the pointer points to must\n     ///   not get mutated (except inside `UnsafeCell`).\n     ///\n     /// This applies even if the result of this method is unused!\n@@ -400,7 +400,7 @@ impl<T: ?Sized> NonNull<T> {\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n-    ///   In particular, for the duration of this lifetime, the memory the pointer points to must\n+    ///   In particular, while this reference exists, the memory the pointer points to must\n     ///   not get accessed (read or written) through any other pointer.\n     ///\n     /// This applies even if the result of this method is unused!\n@@ -580,7 +580,7 @@ impl<T> NonNull<[T]> {\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n-    ///   In particular, for the duration of this lifetime, the memory the pointer points to must\n+    ///   In particular, while this reference exists, the memory the pointer points to must\n     ///   not get mutated (except inside `UnsafeCell`).\n     ///\n     /// This applies even if the result of this method is unused!\n@@ -626,7 +626,7 @@ impl<T> NonNull<[T]> {\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n-    ///   In particular, for the duration of this lifetime, the memory the pointer points to must\n+    ///   In particular, while this reference exists, the memory the pointer points to must\n     ///   not get accessed (read or written) through any other pointer.\n     ///\n     /// This applies even if the result of this method is unused!"}]}