{"sha": "17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3ZWViMmE2ZDJlYTgxYjMwMmI2NzA3YzYzYmY4ZmJhNDg5YzJiZGQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-13T19:08:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-13T19:08:29Z"}, "message": "Merge #8001\n\n8001: More Chalk IDs r=flodiebold a=flodiebold\n\n\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "a2e152f5f16dd92f4c4be011be2399998dc7eb6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2e152f5f16dd92f4c4be011be2399998dc7eb6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgTQ2tCRBK7hj4Ov3rIwAAdHIIAEtdt/rI/Z/C8EUfjrDYXOrF\nak0tI1sbYduYSmn4TfHoYuBtTKhdfnHQip/ccYHqNjgaLX2KDIe44Gn0k9+em7Hq\n7TgvVis1Bw+hty/aScVv+UQcUwvqR9VBOz+J/iOywNSUJGkpHD+o3j+brQjR6jfR\n3o0DZYk+qp9lDXYZCJuLFJ5v4RsSGNGui9HpqRX/44mBr4N3p7Tayf/TCLzZZX4x\njazXfjuAF1MzzvWhfYv5qnqmlFLuiDLb0PgR/FrzxGi0/bR3Ww0B3026Iarri5NC\nVgHv3EwWflAThNffr6OOCmVeYcg5UypNzQmy9a0QXjmoW6Vg9MTqZWJDMRI5eaQ=\n=eFIL\n-----END PGP SIGNATURE-----\n", "payload": "tree a2e152f5f16dd92f4c4be011be2399998dc7eb6f\nparent be7a31fbd64943f71afe11b0413c99496526dddc\nparent b035c314b4b0ecd2477fde216dbe7e8801f94d0d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615662509 +0000\ncommitter GitHub <noreply@github.com> 1615662509 +0000\n\nMerge #8001\n\n8001: More Chalk IDs r=flodiebold a=flodiebold\n\n\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd", "html_url": "https://github.com/rust-lang/rust/commit/17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be7a31fbd64943f71afe11b0413c99496526dddc", "url": "https://api.github.com/repos/rust-lang/rust/commits/be7a31fbd64943f71afe11b0413c99496526dddc", "html_url": "https://github.com/rust-lang/rust/commit/be7a31fbd64943f71afe11b0413c99496526dddc"}, {"sha": "b035c314b4b0ecd2477fde216dbe7e8801f94d0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b035c314b4b0ecd2477fde216dbe7e8801f94d0d", "html_url": "https://github.com/rust-lang/rust/commit/b035c314b4b0ecd2477fde216dbe7e8801f94d0d"}], "stats": {"total": 251, "additions": 122, "deletions": 129}, "files": [{"sha": "571b89bc3a6d4828d15d65449ba10f0beb905b91", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd", "patch": "@@ -1384,7 +1384,7 @@ impl TypeParam {\n     pub fn ty(self, db: &dyn HirDatabase) -> Type {\n         let resolver = self.id.parent.resolver(db.upcast());\n         let krate = self.id.parent.module(db.upcast()).krate();\n-        let ty = TyKind::Placeholder(self.id).intern(&Interner);\n+        let ty = TyKind::Placeholder(hir_ty::to_placeholder_idx(db, self.id)).intern(&Interner);\n         Type::new_with_resolver_inner(db, krate, &resolver, ty)\n     }\n "}, {"sha": "8a3cc0283acde09880d9ab30aba547d6cf8f4f04", "filename": "crates/hir_ty/src/db.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdb.rs?ref=17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd", "patch": "@@ -12,7 +12,7 @@ use la_arena::ArenaMap;\n use crate::{\n     method_resolution::{InherentImpls, TraitImpls},\n     traits::chalk,\n-    Binders, CallableDefId, FnDefId, GenericPredicate, InferenceResult, OpaqueTyId, PolyFnSig,\n+    Binders, CallableDefId, FnDefId, GenericPredicate, ImplTraitId, InferenceResult, PolyFnSig,\n     ReturnTypeImplTraits, TraitRef, Ty, TyDefId, ValueTyDefId,\n };\n use hir_expand::name::Name;\n@@ -81,11 +81,11 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     #[salsa::interned]\n     fn intern_callable_def(&self, callable_def: CallableDefId) -> InternedCallableDefId;\n     #[salsa::interned]\n-    fn intern_type_param_id(&self, param_id: TypeParamId) -> GlobalTypeParamId;\n+    fn intern_type_param_id(&self, param_id: TypeParamId) -> InternedTypeParamId;\n     #[salsa::interned]\n-    fn intern_impl_trait_id(&self, id: OpaqueTyId) -> InternedOpaqueTyId;\n+    fn intern_impl_trait_id(&self, id: ImplTraitId) -> InternedOpaqueTyId;\n     #[salsa::interned]\n-    fn intern_closure(&self, id: (DefWithBodyId, ExprId)) -> ClosureId;\n+    fn intern_closure(&self, id: (DefWithBodyId, ExprId)) -> InternedClosureId;\n \n     #[salsa::invoke(chalk::associated_ty_data_query)]\n     fn associated_ty_data(&self, id: chalk::AssocTypeId) -> Arc<chalk::AssociatedTyDatum>;\n@@ -149,16 +149,16 @@ fn hir_database_is_object_safe() {\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct GlobalTypeParamId(salsa::InternId);\n-impl_intern_key!(GlobalTypeParamId);\n+pub struct InternedTypeParamId(salsa::InternId);\n+impl_intern_key!(InternedTypeParamId);\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct InternedOpaqueTyId(salsa::InternId);\n impl_intern_key!(InternedOpaqueTyId);\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct ClosureId(salsa::InternId);\n-impl_intern_key!(ClosureId);\n+pub struct InternedClosureId(salsa::InternId);\n+impl_intern_key!(InternedClosureId);\n \n /// This exists just for Chalk, because Chalk just has a single `FnDefId` where\n /// we have different IDs for struct and enum variant constructors."}, {"sha": "e6473586ba0bd6b00dc7b4e6113da3897375cc52", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 31, "deletions": 24, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd", "patch": "@@ -11,10 +11,10 @@ use hir_def::{\n use hir_expand::name::Name;\n \n use crate::{\n-    db::HirDatabase, from_assoc_type_id, from_foreign_def_id, primitive, to_assoc_type_id,\n-    traits::chalk::from_chalk, utils::generics, AdtId, AliasTy, CallableDefId, CallableSig,\n-    GenericPredicate, Interner, Lifetime, Obligation, OpaqueTy, OpaqueTyId, ProjectionTy, Scalar,\n-    Substs, TraitRef, Ty, TyKind,\n+    db::HirDatabase, from_assoc_type_id, from_foreign_def_id, from_placeholder_idx, primitive,\n+    to_assoc_type_id, traits::chalk::from_chalk, utils::generics, AdtId, AliasTy, CallableDefId,\n+    CallableSig, GenericPredicate, ImplTraitId, Interner, Lifetime, Obligation, OpaqueTy,\n+    ProjectionTy, Scalar, Substs, TraitRef, Ty, TyKind,\n };\n \n pub struct HirFormatter<'a> {\n@@ -313,22 +313,26 @@ impl HirDisplay for Ty {\n                     )?;\n                 }\n \n+                // FIXME: all this just to decide whether to use parentheses...\n                 let datas;\n                 let predicates = match t.interned(&Interner) {\n                     TyKind::Dyn(predicates) if predicates.len() > 1 => {\n                         Cow::Borrowed(predicates.as_ref())\n                     }\n-                    &TyKind::Alias(AliasTy::Opaque(OpaqueTy {\n-                        opaque_ty_id: OpaqueTyId::ReturnTypeImplTrait(func, idx),\n-                        ref parameters,\n-                    })) => {\n-                        datas =\n-                            f.db.return_type_impl_traits(func).expect(\"impl trait id without data\");\n-                        let data = (*datas)\n-                            .as_ref()\n-                            .map(|rpit| rpit.impl_traits[idx as usize].bounds.clone());\n-                        let bounds = data.subst(parameters);\n-                        Cow::Owned(bounds.value)\n+                    &TyKind::Alias(AliasTy::Opaque(OpaqueTy { opaque_ty_id, ref parameters })) => {\n+                        let impl_trait_id = f.db.lookup_intern_impl_trait_id(opaque_ty_id.into());\n+                        if let ImplTraitId::ReturnTypeImplTrait(func, idx) = impl_trait_id {\n+                            datas =\n+                                f.db.return_type_impl_traits(func)\n+                                    .expect(\"impl trait id without data\");\n+                            let data = (*datas)\n+                                .as_ref()\n+                                .map(|rpit| rpit.impl_traits[idx as usize].bounds.clone());\n+                            let bounds = data.subst(parameters);\n+                            Cow::Owned(bounds.value)\n+                        } else {\n+                            Cow::Borrowed(&[][..])\n+                        }\n                     }\n                     _ => Cow::Borrowed(&[][..]),\n                 };\n@@ -499,8 +503,9 @@ impl HirDisplay for Ty {\n                 write!(f, \"{}\", type_alias.name)?;\n             }\n             TyKind::OpaqueType(opaque_ty_id, parameters) => {\n-                match opaque_ty_id {\n-                    &OpaqueTyId::ReturnTypeImplTrait(func, idx) => {\n+                let impl_trait_id = f.db.lookup_intern_impl_trait_id((*opaque_ty_id).into());\n+                match impl_trait_id {\n+                    ImplTraitId::ReturnTypeImplTrait(func, idx) => {\n                         let datas =\n                             f.db.return_type_impl_traits(func).expect(\"impl trait id without data\");\n                         let data = (*datas)\n@@ -510,7 +515,7 @@ impl HirDisplay for Ty {\n                         write_bounds_like_dyn_trait_with_prefix(\"impl\", &bounds.value, f)?;\n                         // FIXME: it would maybe be good to distinguish this from the alias type (when debug printing), and to show the substitution\n                     }\n-                    OpaqueTyId::AsyncBlockTypeImplTrait(..) => {\n+                    ImplTraitId::AsyncBlockTypeImplTrait(..) => {\n                         write!(f, \"impl Future<Output = \")?;\n                         parameters[0].hir_fmt(f)?;\n                         write!(f, \">\")?;\n@@ -541,16 +546,17 @@ impl HirDisplay for Ty {\n                     write!(f, \"{{closure}}\")?;\n                 }\n             }\n-            TyKind::Placeholder(id) => {\n+            TyKind::Placeholder(idx) => {\n+                let id = from_placeholder_idx(f.db, *idx);\n                 let generics = generics(f.db.upcast(), id.parent);\n                 let param_data = &generics.params.types[id.local_id];\n                 match param_data.provenance {\n                     TypeParamProvenance::TypeParamList | TypeParamProvenance::TraitSelf => {\n                         write!(f, \"{}\", param_data.name.clone().unwrap_or_else(Name::missing))?\n                     }\n                     TypeParamProvenance::ArgumentImplTrait => {\n-                        let bounds = f.db.generic_predicates_for_param(*id);\n-                        let substs = Substs::type_params_for_generics(&generics);\n+                        let bounds = f.db.generic_predicates_for_param(id);\n+                        let substs = Substs::type_params_for_generics(f.db, &generics);\n                         write_bounds_like_dyn_trait_with_prefix(\n                             \"impl\",\n                             &bounds.iter().map(|b| b.clone().subst(&substs)).collect::<Vec<_>>(),\n@@ -565,8 +571,9 @@ impl HirDisplay for Ty {\n             }\n             TyKind::Alias(AliasTy::Projection(p_ty)) => p_ty.hir_fmt(f)?,\n             TyKind::Alias(AliasTy::Opaque(opaque_ty)) => {\n-                match opaque_ty.opaque_ty_id {\n-                    OpaqueTyId::ReturnTypeImplTrait(func, idx) => {\n+                let impl_trait_id = f.db.lookup_intern_impl_trait_id(opaque_ty.opaque_ty_id.into());\n+                match impl_trait_id {\n+                    ImplTraitId::ReturnTypeImplTrait(func, idx) => {\n                         let datas =\n                             f.db.return_type_impl_traits(func).expect(\"impl trait id without data\");\n                         let data = (*datas)\n@@ -575,7 +582,7 @@ impl HirDisplay for Ty {\n                         let bounds = data.subst(&opaque_ty.parameters);\n                         write_bounds_like_dyn_trait_with_prefix(\"impl\", &bounds.value, f)?;\n                     }\n-                    OpaqueTyId::AsyncBlockTypeImplTrait(..) => {\n+                    ImplTraitId::AsyncBlockTypeImplTrait(..) => {\n                         write!(f, \"{{async block}}\")?;\n                     }\n                 };"}, {"sha": "4f746342280363a089fe7ee91a04357df282cd94", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd", "patch": "@@ -454,7 +454,7 @@ impl<'a> InferenceContext<'a> {\n             }\n             TypeNs::SelfType(impl_id) => {\n                 let generics = crate::utils::generics(self.db.upcast(), impl_id.into());\n-                let substs = Substs::type_params_for_generics(&generics);\n+                let substs = Substs::type_params_for_generics(self.db, &generics);\n                 let ty = self.db.impl_self_ty(impl_id).subst(&substs);\n                 match unresolved {\n                     None => {"}, {"sha": "eee3e6ec5dc3c368fff7620a5730c84d0bc46ab7", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd", "patch": "@@ -21,8 +21,8 @@ use crate::{\n     to_assoc_type_id,\n     traits::{chalk::from_chalk, FnTrait, InEnvironment},\n     utils::{generics, variant_data, Generics},\n-    AdtId, Binders, CallableDefId, FnPointer, FnSig, Interner, Obligation, OpaqueTyId, Rawness,\n-    Scalar, Substs, TraitRef, Ty, TyKind,\n+    AdtId, Binders, CallableDefId, FnPointer, FnSig, Interner, Obligation, Rawness, Scalar, Substs,\n+    TraitRef, Ty, TyKind,\n };\n \n use super::{\n@@ -179,7 +179,8 @@ impl<'a> InferenceContext<'a> {\n                 // Use the first type parameter as the output type of future.\n                 // existenail type AsyncBlockImplTrait<InnerType>: Future<Output = InnerType>\n                 let inner_ty = self.infer_expr(*body, &Expectation::none());\n-                let opaque_ty_id = OpaqueTyId::AsyncBlockTypeImplTrait(self.owner, *body);\n+                let impl_trait_id = crate::ImplTraitId::AsyncBlockTypeImplTrait(self.owner, *body);\n+                let opaque_ty_id = self.db.intern_impl_trait_id(impl_trait_id).into();\n                 TyKind::OpaqueType(opaque_ty_id, Substs::single(inner_ty)).intern(&Interner)\n             }\n             Expr::Loop { body, label } => {\n@@ -264,8 +265,9 @@ impl<'a> InferenceContext<'a> {\n                     substs: Substs(sig_tys.clone().into()),\n                 })\n                 .intern(&Interner);\n+                let closure_id = self.db.intern_closure((self.owner, tgt_expr)).into();\n                 let closure_ty =\n-                    TyKind::Closure(self.owner, tgt_expr, Substs::single(sig_ty)).intern(&Interner);\n+                    TyKind::Closure(closure_id, Substs::single(sig_ty)).intern(&Interner);\n \n                 // Eagerly try to relate the closure type with the expected\n                 // type, otherwise we often won't have enough information to"}, {"sha": "c6681834c16d8f221dd6995e78ac18cfed6b84e6", "filename": "crates/hir_ty/src/infer/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd", "patch": "@@ -79,7 +79,7 @@ impl<'a> InferenceContext<'a> {\n             }\n             ValueNs::ImplSelf(impl_id) => {\n                 let generics = crate::utils::generics(self.db.upcast(), impl_id.into());\n-                let substs = Substs::type_params_for_generics(&generics);\n+                let substs = Substs::type_params_for_generics(self.db, &generics);\n                 let ty = self.db.impl_self_ty(impl_id).subst(&substs);\n                 if let Some((AdtId::StructId(struct_id), substs)) = ty.as_adt() {\n                     let ty = self.db.value_ty(struct_id.into()).subst(&substs);"}, {"sha": "d6ff968f00c798639553202dddbdc12701cb9e88", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 40, "deletions": 21, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd", "patch": "@@ -27,9 +27,8 @@ use std::{iter, mem, ops::Deref, sync::Arc};\n \n use base_db::salsa;\n use hir_def::{\n-    builtin_type::BuiltinType, expr::ExprId, type_ref::Rawness, AssocContainerId, DefWithBodyId,\n-    FunctionId, GenericDefId, HasModule, LifetimeParamId, Lookup, TraitId, TypeAliasId,\n-    TypeParamId,\n+    builtin_type::BuiltinType, expr::ExprId, type_ref::Rawness, AssocContainerId, FunctionId,\n+    GenericDefId, HasModule, LifetimeParamId, Lookup, TraitId, TypeAliasId, TypeParamId,\n };\n use itertools::Itertools;\n \n@@ -53,7 +52,10 @@ pub use crate::traits::chalk::Interner;\n \n pub type ForeignDefId = chalk_ir::ForeignDefId<Interner>;\n pub type AssocTypeId = chalk_ir::AssocTypeId<Interner>;\n-pub(crate) type FnDefId = chalk_ir::FnDefId<Interner>;\n+pub type FnDefId = chalk_ir::FnDefId<Interner>;\n+pub type ClosureId = chalk_ir::ClosureId<Interner>;\n+pub type OpaqueTyId = chalk_ir::OpaqueTyId<Interner>;\n+pub type PlaceholderIndex = chalk_ir::PlaceholderIndex;\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub enum Lifetime {\n@@ -195,7 +197,7 @@ pub enum TyKind {\n     ///\n     /// The closure signature is stored in a `FnPtr` type in the first type\n     /// parameter.\n-    Closure(DefWithBodyId, ExprId, Substs),\n+    Closure(ClosureId, Substs),\n \n     /// Represents a foreign type declared in external blocks.\n     ForeignType(ForeignDefId),\n@@ -220,7 +222,7 @@ pub enum TyKind {\n     /// {}` when we're type-checking the body of that function. In this\n     /// situation, we know this stands for *some* type, but don't know the exact\n     /// type.\n-    Placeholder(TypeParamId),\n+    Placeholder(PlaceholderIndex),\n \n     /// A bound type variable. This is used in various places: when representing\n     /// some polymorphic type like the type of function `fn f<T>`, the type\n@@ -310,19 +312,22 @@ impl Substs {\n     }\n \n     /// Return Substs that replace each parameter by itself (i.e. `Ty::Param`).\n-    pub(crate) fn type_params_for_generics(generic_params: &Generics) -> Substs {\n+    pub(crate) fn type_params_for_generics(\n+        db: &dyn HirDatabase,\n+        generic_params: &Generics,\n+    ) -> Substs {\n         Substs(\n             generic_params\n                 .iter()\n-                .map(|(id, _)| TyKind::Placeholder(id).intern(&Interner))\n+                .map(|(id, _)| TyKind::Placeholder(to_placeholder_idx(db, id)).intern(&Interner))\n                 .collect(),\n         )\n     }\n \n     /// Return Substs that replace each parameter by itself (i.e. `Ty::Param`).\n     pub fn type_params(db: &dyn HirDatabase, def: impl Into<GenericDefId>) -> Substs {\n         let params = generics(db.upcast(), def.into());\n-        Substs::type_params_for_generics(&params)\n+        Substs::type_params_for_generics(db, &params)\n     }\n \n     /// Return Substs that replace each parameter by a bound variable.\n@@ -734,9 +739,7 @@ impl Ty {\n                 ty_id == ty_id2\n             }\n             (TyKind::ForeignType(ty_id, ..), TyKind::ForeignType(ty_id2, ..)) => ty_id == ty_id2,\n-            (TyKind::Closure(def, expr, _), TyKind::Closure(def2, expr2, _)) => {\n-                expr == expr2 && def == def2\n-            }\n+            (TyKind::Closure(id1, _), TyKind::Closure(id2, _)) => id1 == id2,\n             (TyKind::Ref(mutability, ..), TyKind::Ref(mutability2, ..))\n             | (TyKind::Raw(mutability, ..), TyKind::Raw(mutability2, ..)) => {\n                 mutability == mutability2\n@@ -873,8 +876,8 @@ impl Ty {\n     pub fn impl_trait_bounds(&self, db: &dyn HirDatabase) -> Option<Vec<GenericPredicate>> {\n         match self.interned(&Interner) {\n             TyKind::OpaqueType(opaque_ty_id, ..) => {\n-                match opaque_ty_id {\n-                    OpaqueTyId::AsyncBlockTypeImplTrait(def, _expr) => {\n+                match db.lookup_intern_impl_trait_id((*opaque_ty_id).into()) {\n+                    ImplTraitId::AsyncBlockTypeImplTrait(def, _expr) => {\n                         let krate = def.module(db.upcast()).krate();\n                         if let Some(future_trait) = db\n                             .lang_item(krate, \"future_trait\".into())\n@@ -892,12 +895,13 @@ impl Ty {\n                             None\n                         }\n                     }\n-                    OpaqueTyId::ReturnTypeImplTrait(..) => None,\n+                    ImplTraitId::ReturnTypeImplTrait(..) => None,\n                 }\n             }\n             TyKind::Alias(AliasTy::Opaque(opaque_ty)) => {\n-                let predicates = match opaque_ty.opaque_ty_id {\n-                    OpaqueTyId::ReturnTypeImplTrait(func, idx) => {\n+                let predicates = match db.lookup_intern_impl_trait_id(opaque_ty.opaque_ty_id.into())\n+                {\n+                    ImplTraitId::ReturnTypeImplTrait(func, idx) => {\n                         db.return_type_impl_traits(func).map(|it| {\n                             let data = (*it)\n                                 .as_ref()\n@@ -906,18 +910,19 @@ impl Ty {\n                         })\n                     }\n                     // It always has an parameter for Future::Output type.\n-                    OpaqueTyId::AsyncBlockTypeImplTrait(..) => unreachable!(),\n+                    ImplTraitId::AsyncBlockTypeImplTrait(..) => unreachable!(),\n                 };\n \n                 predicates.map(|it| it.value)\n             }\n-            TyKind::Placeholder(id) => {\n+            TyKind::Placeholder(idx) => {\n+                let id = from_placeholder_idx(db, *idx);\n                 let generic_params = db.generic_params(id.parent);\n                 let param_data = &generic_params.types[id.local_id];\n                 match param_data.provenance {\n                     hir_def::generics::TypeParamProvenance::ArgumentImplTrait => {\n                         let predicates = db\n-                            .generic_predicates_for_param(*id)\n+                            .generic_predicates_for_param(id)\n                             .into_iter()\n                             .map(|pred| pred.value.clone())\n                             .collect_vec();\n@@ -1120,7 +1125,7 @@ impl<T: TypeWalk> TypeWalk for Vec<T> {\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Debug, Hash)]\n-pub enum OpaqueTyId {\n+pub enum ImplTraitId {\n     ReturnTypeImplTrait(hir_def::FunctionId, u16),\n     AsyncBlockTypeImplTrait(hir_def::DefWithBodyId, ExprId),\n }\n@@ -1150,3 +1155,17 @@ pub fn to_assoc_type_id(id: TypeAliasId) -> AssocTypeId {\n pub fn from_assoc_type_id(id: AssocTypeId) -> TypeAliasId {\n     salsa::InternKey::from_intern_id(id.0)\n }\n+\n+pub fn from_placeholder_idx(db: &dyn HirDatabase, idx: PlaceholderIndex) -> TypeParamId {\n+    assert_eq!(idx.ui, chalk_ir::UniverseIndex::ROOT);\n+    let interned_id = salsa::InternKey::from_intern_id(salsa::InternId::from(idx.idx));\n+    db.lookup_intern_type_param_id(interned_id)\n+}\n+\n+pub fn to_placeholder_idx(db: &dyn HirDatabase, id: TypeParamId) -> PlaceholderIndex {\n+    let interned_id = db.intern_type_param_id(id);\n+    PlaceholderIndex {\n+        ui: chalk_ir::UniverseIndex::ROOT,\n+        idx: salsa::InternKey::as_intern_id(&interned_id).as_usize(),\n+    }\n+}"}, {"sha": "e57d5970f8cfc189afb47ce2af531dc4e6bdc2b3", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd", "patch": "@@ -27,14 +27,14 @@ use stdx::impl_from;\n \n use crate::{\n     db::HirDatabase,\n-    to_assoc_type_id,\n+    to_assoc_type_id, to_placeholder_idx,\n     traits::chalk::{Interner, ToChalk},\n     utils::{\n         all_super_trait_refs, associated_type_by_name_including_super_traits, generics,\n         make_mut_slice, variant_data,\n     },\n     AliasTy, Binders, BoundVar, CallableSig, DebruijnIndex, FnPointer, FnSig, GenericPredicate,\n-    OpaqueTy, OpaqueTyId, PolyFnSig, ProjectionPredicate, ProjectionTy, ReturnTypeImplTrait,\n+    ImplTraitId, OpaqueTy, PolyFnSig, ProjectionPredicate, ProjectionTy, ReturnTypeImplTrait,\n     ReturnTypeImplTraits, Substs, TraitEnvironment, TraitRef, Ty, TyKind, TypeWalk,\n };\n \n@@ -228,14 +228,12 @@ impl Ty {\n                             Some(GenericDefId::FunctionId(f)) => f,\n                             _ => panic!(\"opaque impl trait lowering in non-function\"),\n                         };\n-                        let impl_trait_id = OpaqueTyId::ReturnTypeImplTrait(func, idx);\n+                        let impl_trait_id = ImplTraitId::ReturnTypeImplTrait(func, idx);\n+                        let opaque_ty_id = ctx.db.intern_impl_trait_id(impl_trait_id).into();\n                         let generics = generics(ctx.db.upcast(), func.into());\n                         let parameters = Substs::bound_vars(&generics, ctx.in_binders);\n-                        TyKind::Alias(AliasTy::Opaque(OpaqueTy {\n-                            opaque_ty_id: impl_trait_id,\n-                            parameters,\n-                        }))\n-                        .intern(&Interner)\n+                        TyKind::Alias(AliasTy::Opaque(OpaqueTy { opaque_ty_id, parameters }))\n+                            .intern(&Interner)\n                     }\n                     ImplTraitLoweringMode::Param => {\n                         let idx = ctx.impl_trait_counter.get();\n@@ -249,7 +247,9 @@ impl Ty {\n                                     data.provenance == TypeParamProvenance::ArgumentImplTrait\n                                 })\n                                 .nth(idx as usize)\n-                                .map_or(TyKind::Unknown, |(id, _)| TyKind::Placeholder(id));\n+                                .map_or(TyKind::Unknown, |(id, _)| {\n+                                    TyKind::Placeholder(to_placeholder_idx(ctx.db, id))\n+                                });\n                             param.intern(&Interner)\n                         } else {\n                             TyKind::Unknown.intern(&Interner)\n@@ -384,7 +384,9 @@ impl Ty {\n                     ctx.resolver.generic_def().expect(\"generics in scope\"),\n                 );\n                 match ctx.type_param_mode {\n-                    TypeParamLoweringMode::Placeholder => TyKind::Placeholder(param_id),\n+                    TypeParamLoweringMode::Placeholder => {\n+                        TyKind::Placeholder(to_placeholder_idx(ctx.db, param_id))\n+                    }\n                     TypeParamLoweringMode::Variable => {\n                         let idx = generics.param_idx(param_id).expect(\"matching generics\");\n                         TyKind::BoundVar(BoundVar::new(ctx.in_binders, idx))\n@@ -396,7 +398,7 @@ impl Ty {\n                 let generics = generics(ctx.db.upcast(), impl_id.into());\n                 let substs = match ctx.type_param_mode {\n                     TypeParamLoweringMode::Placeholder => {\n-                        Substs::type_params_for_generics(&generics)\n+                        Substs::type_params_for_generics(ctx.db, &generics)\n                     }\n                     TypeParamLoweringMode::Variable => {\n                         Substs::bound_vars(&generics, ctx.in_binders)\n@@ -408,7 +410,7 @@ impl Ty {\n                 let generics = generics(ctx.db.upcast(), adt.into());\n                 let substs = match ctx.type_param_mode {\n                     TypeParamLoweringMode::Placeholder => {\n-                        Substs::type_params_for_generics(&generics)\n+                        Substs::type_params_for_generics(ctx.db, &generics)\n                     }\n                     TypeParamLoweringMode::Variable => {\n                         Substs::bound_vars(&generics, ctx.in_binders)\n@@ -689,8 +691,9 @@ impl GenericPredicate {\n                         let generics = generics(ctx.db.upcast(), generic_def);\n                         let param_id =\n                             hir_def::TypeParamId { parent: generic_def, local_id: *param_id };\n+                        let placeholder = to_placeholder_idx(ctx.db, param_id);\n                         match ctx.type_param_mode {\n-                            TypeParamLoweringMode::Placeholder => TyKind::Placeholder(param_id),\n+                            TypeParamLoweringMode::Placeholder => TyKind::Placeholder(placeholder),\n                             TypeParamLoweringMode::Variable => {\n                                 let idx = generics.param_idx(param_id).expect(\"matching generics\");\n                                 TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, idx))"}, {"sha": "1f3e1c07a8ded0130bb868daef505ca2283161ee", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd", "patch": "@@ -177,10 +177,9 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n     }\n \n     fn opaque_ty_data(&self, id: chalk_ir::OpaqueTyId<Interner>) -> Arc<OpaqueTyDatum> {\n-        let interned_id = crate::db::InternedOpaqueTyId::from(id);\n-        let full_id = self.db.lookup_intern_impl_trait_id(interned_id);\n+        let full_id = self.db.lookup_intern_impl_trait_id(id.into());\n         let bound = match full_id {\n-            crate::OpaqueTyId::ReturnTypeImplTrait(func, idx) => {\n+            crate::ImplTraitId::ReturnTypeImplTrait(func, idx) => {\n                 let datas = self\n                     .db\n                     .return_type_impl_traits(func)\n@@ -202,7 +201,7 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n                 let num_vars = datas.num_binders;\n                 make_binders(bound, num_vars)\n             }\n-            crate::OpaqueTyId::AsyncBlockTypeImplTrait(..) => {\n+            crate::ImplTraitId::AsyncBlockTypeImplTrait(..) => {\n                 if let Some((future_trait, future_output)) = self\n                     .db\n                     .lang_item(self.krate, \"future_trait\".into())\n@@ -716,14 +715,14 @@ impl From<crate::db::InternedOpaqueTyId> for OpaqueTyId {\n     }\n }\n \n-impl From<chalk_ir::ClosureId<Interner>> for crate::db::ClosureId {\n+impl From<chalk_ir::ClosureId<Interner>> for crate::db::InternedClosureId {\n     fn from(id: chalk_ir::ClosureId<Interner>) -> Self {\n         Self::from_intern_id(id.0)\n     }\n }\n \n-impl From<crate::db::ClosureId> for chalk_ir::ClosureId<Interner> {\n-    fn from(id: crate::db::ClosureId) -> Self {\n+impl From<crate::db::InternedClosureId> for chalk_ir::ClosureId<Interner> {\n+    fn from(id: crate::db::InternedClosureId) -> Self {\n         chalk_ir::ClosureId(id.as_intern_id())\n     }\n }"}, {"sha": "2a66a23106674bddaf9abb15358631275f2bd6e3", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 12, "deletions": 49, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=17eeb2a6d2ea81b302b6707c63bf8fba489c2bdd", "patch": "@@ -3,10 +3,7 @@\n //! Chalk (in both directions); plus some helper functions for more specialized\n //! conversions.\n \n-use chalk_ir::{\n-    cast::Cast, fold::shift::Shift, interner::HasInterner, LifetimeData, PlaceholderIndex,\n-    UniverseIndex,\n-};\n+use chalk_ir::{cast::Cast, fold::shift::Shift, interner::HasInterner, LifetimeData};\n use chalk_solve::rust_ir;\n \n use base_db::salsa::InternKey;\n@@ -18,7 +15,7 @@ use crate::{\n     primitive::UintTy,\n     traits::{Canonical, Obligation},\n     AliasTy, CallableDefId, FnPointer, FnSig, GenericPredicate, InEnvironment, OpaqueTy,\n-    OpaqueTyId, ProjectionPredicate, ProjectionTy, Scalar, Substs, TraitRef, Ty,\n+    ProjectionPredicate, ProjectionTy, Scalar, Substs, TraitRef, Ty,\n };\n \n use super::interner::*;\n@@ -44,8 +41,7 @@ impl ToChalk for Ty {\n                 chalk_ir::TyKind::AssociatedType(assoc_type_id, substitution).intern(&Interner)\n             }\n \n-            TyKind::OpaqueType(impl_trait_id, substs) => {\n-                let id = impl_trait_id.to_chalk(db);\n+            TyKind::OpaqueType(id, substs) => {\n                 let substitution = substs.to_chalk(db);\n                 chalk_ir::TyKind::OpaqueType(id, substitution).intern(&Interner)\n             }\n@@ -72,10 +68,9 @@ impl ToChalk for Ty {\n             }\n             TyKind::Never => chalk_ir::TyKind::Never.intern(&Interner),\n \n-            TyKind::Closure(def, expr, substs) => {\n-                let closure_id = db.intern_closure((def, expr));\n+            TyKind::Closure(closure_id, substs) => {\n                 let substitution = substs.to_chalk(db);\n-                chalk_ir::TyKind::Closure(closure_id.into(), substitution).intern(&Interner)\n+                chalk_ir::TyKind::Closure(closure_id, substitution).intern(&Interner)\n             }\n \n             TyKind::Adt(adt_id, substs) => {\n@@ -92,14 +87,7 @@ impl ToChalk for Ty {\n                 .cast(&Interner)\n                 .intern(&Interner)\n             }\n-            TyKind::Placeholder(id) => {\n-                let interned_id = db.intern_type_param_id(id);\n-                PlaceholderIndex {\n-                    ui: UniverseIndex::ROOT,\n-                    idx: interned_id.as_intern_id().as_usize(),\n-                }\n-                .to_ty::<Interner>(&Interner)\n-            }\n+            TyKind::Placeholder(idx) => idx.to_ty::<Interner>(&Interner),\n             TyKind::BoundVar(idx) => chalk_ir::TyKind::BoundVar(idx).intern(&Interner),\n             TyKind::InferenceVar(..) => panic!(\"uncanonicalized infer ty\"),\n             TyKind::Dyn(predicates) => {\n@@ -114,7 +102,7 @@ impl ToChalk for Ty {\n                 chalk_ir::TyKind::Dyn(bounded_ty).intern(&Interner)\n             }\n             TyKind::Alias(AliasTy::Opaque(opaque_ty)) => {\n-                let opaque_ty_id = opaque_ty.opaque_ty_id.to_chalk(db);\n+                let opaque_ty_id = opaque_ty.opaque_ty_id;\n                 let substitution = opaque_ty.parameters.to_chalk(db);\n                 chalk_ir::TyKind::Alias(chalk_ir::AliasTy::Opaque(chalk_ir::OpaqueTy {\n                     opaque_ty_id,\n@@ -129,22 +117,16 @@ impl ToChalk for Ty {\n         match chalk.data(&Interner).kind.clone() {\n             chalk_ir::TyKind::Error => TyKind::Unknown,\n             chalk_ir::TyKind::Array(ty, _size) => TyKind::Array(Substs::single(from_chalk(db, ty))),\n-            chalk_ir::TyKind::Placeholder(idx) => {\n-                assert_eq!(idx.ui, UniverseIndex::ROOT);\n-                let interned_id = crate::db::GlobalTypeParamId::from_intern_id(\n-                    crate::salsa::InternId::from(idx.idx),\n-                );\n-                TyKind::Placeholder(db.lookup_intern_type_param_id(interned_id))\n-            }\n+            chalk_ir::TyKind::Placeholder(idx) => TyKind::Placeholder(idx),\n             chalk_ir::TyKind::Alias(chalk_ir::AliasTy::Projection(proj)) => {\n                 let associated_ty = proj.associated_ty_id;\n                 let parameters = from_chalk(db, proj.substitution);\n                 TyKind::Alias(AliasTy::Projection(ProjectionTy { associated_ty, parameters }))\n             }\n             chalk_ir::TyKind::Alias(chalk_ir::AliasTy::Opaque(opaque_ty)) => {\n-                let impl_trait_id = from_chalk(db, opaque_ty.opaque_ty_id);\n+                let opaque_ty_id = opaque_ty.opaque_ty_id;\n                 let parameters = from_chalk(db, opaque_ty.substitution);\n-                TyKind::Alias(AliasTy::Opaque(OpaqueTy { opaque_ty_id: impl_trait_id, parameters }))\n+                TyKind::Alias(AliasTy::Opaque(OpaqueTy { opaque_ty_id, parameters }))\n             }\n             chalk_ir::TyKind::Function(chalk_ir::FnPointer {\n                 num_binders,\n@@ -182,7 +164,7 @@ impl ToChalk for Ty {\n             }\n \n             chalk_ir::TyKind::OpaqueType(opaque_type_id, subst) => {\n-                TyKind::OpaqueType(from_chalk(db, opaque_type_id), from_chalk(db, subst))\n+                TyKind::OpaqueType(opaque_type_id, from_chalk(db, subst))\n             }\n \n             chalk_ir::TyKind::Scalar(scalar) => TyKind::Scalar(scalar),\n@@ -203,11 +185,7 @@ impl ToChalk for Ty {\n                 TyKind::FnDef(fn_def_id, from_chalk(db, subst))\n             }\n \n-            chalk_ir::TyKind::Closure(id, subst) => {\n-                let id: crate::db::ClosureId = id.into();\n-                let (def, expr) = db.lookup_intern_closure(id);\n-                TyKind::Closure(def, expr, from_chalk(db, subst))\n-            }\n+            chalk_ir::TyKind::Closure(id, subst) => TyKind::Closure(id, from_chalk(db, subst)),\n \n             chalk_ir::TyKind::Foreign(foreign_def_id) => TyKind::ForeignType(foreign_def_id),\n             chalk_ir::TyKind::Generator(_, _) => unimplemented!(), // FIXME\n@@ -289,21 +267,6 @@ impl ToChalk for hir_def::TraitId {\n     }\n }\n \n-impl ToChalk for OpaqueTyId {\n-    type Chalk = chalk_ir::OpaqueTyId<Interner>;\n-\n-    fn to_chalk(self, db: &dyn HirDatabase) -> chalk_ir::OpaqueTyId<Interner> {\n-        db.intern_impl_trait_id(self).into()\n-    }\n-\n-    fn from_chalk(\n-        db: &dyn HirDatabase,\n-        opaque_ty_id: chalk_ir::OpaqueTyId<Interner>,\n-    ) -> OpaqueTyId {\n-        db.lookup_intern_impl_trait_id(opaque_ty_id.into())\n-    }\n-}\n-\n impl ToChalk for hir_def::ImplId {\n     type Chalk = ImplId;\n "}]}