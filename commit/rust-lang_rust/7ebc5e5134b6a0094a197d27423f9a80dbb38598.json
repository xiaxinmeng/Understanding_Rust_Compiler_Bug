{"sha": "7ebc5e5134b6a0094a197d27423f9a80dbb38598", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYmM1ZTUxMzRiNmEwMDk0YTE5N2QyNzQyM2Y5YTgwZGJiMzg1OTg=", "commit": {"author": {"name": "Dylan McKay", "email": "dylanmckay34@gmail.com", "date": "2015-08-15T05:17:17Z"}, "committer": {"name": "Dylan McKay", "email": "dylanmckay34@gmail.com", "date": "2015-08-15T07:19:13Z"}, "message": "Reduce libcore/liballoc's dependence on pointer sizes", "tree": {"sha": "4d2cbf88d2c6b419d6d29c51612408ca98fa4252", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d2cbf88d2c6b419d6d29c51612408ca98fa4252"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ebc5e5134b6a0094a197d27423f9a80dbb38598", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ebc5e5134b6a0094a197d27423f9a80dbb38598", "html_url": "https://github.com/rust-lang/rust/commit/7ebc5e5134b6a0094a197d27423f9a80dbb38598", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ebc5e5134b6a0094a197d27423f9a80dbb38598/comments", "author": null, "committer": null, "parents": [{"sha": "1e1b7f30228782ebf6168a5e20e63cdd7b9763ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e1b7f30228782ebf6168a5e20e63cdd7b9763ff", "html_url": "https://github.com/rust-lang/rust/commit/1e1b7f30228782ebf6168a5e20e63cdd7b9763ff"}], "stats": {"total": 32, "additions": 14, "deletions": 18}, "files": [{"sha": "2db9cc7c4d8deb9e1342ace2e14d6b351a57ccb8", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ebc5e5134b6a0094a197d27423f9a80dbb38598/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebc5e5134b6a0094a197d27423f9a80dbb38598/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=7ebc5e5134b6a0094a197d27423f9a80dbb38598", "patch": "@@ -83,6 +83,7 @@\n #![feature(lang_items)]\n #![feature(no_std)]\n #![feature(nonzero)]\n+#![feature(num_bits_bytes)]\n #![feature(optin_builtin_traits)]\n #![feature(placement_in_syntax)]\n #![feature(placement_new_protocol)]"}, {"sha": "97acd0db52478348da758770ee7e4a4b4ddf39d7", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ebc5e5134b6a0094a197d27423f9a80dbb38598/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebc5e5134b6a0094a197d27423f9a80dbb38598/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=7ebc5e5134b6a0094a197d27423f9a80dbb38598", "patch": "@@ -15,6 +15,7 @@ use heap;\n use super::oom;\n use super::boxed::Box;\n use core::ops::Drop;\n+use core;\n \n /// A low-level utility for more ergonomically allocating, reallocating, and deallocating a\n /// a buffer of memory on the heap without having to worry about all the corner cases\n@@ -443,11 +444,8 @@ impl<T> Drop for RawVec<T> {\n // user-space. e.g. PAE or x32\n \n #[inline]\n-#[cfg(target_pointer_width = \"64\")]\n-fn alloc_guard(_alloc_size: usize) { }\n-\n-#[inline]\n-#[cfg(target_pointer_width = \"32\")]\n fn alloc_guard(alloc_size: usize) {\n-    assert!(alloc_size <= ::core::isize::MAX as usize, \"capacity overflow\");\n+    if core::usize::BITS < 64 {\n+        assert!(alloc_size <= ::core::isize::MAX as usize, \"capacity overflow\");\n+    }\n }"}, {"sha": "86700583f2dc68e9e2690b0f129272ba61881157", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ebc5e5134b6a0094a197d27423f9a80dbb38598/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebc5e5134b6a0094a197d27423f9a80dbb38598/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=7ebc5e5134b6a0094a197d27423f9a80dbb38598", "patch": "@@ -1340,12 +1340,7 @@ impl<T> Pointer for *const T {\n             f.flags |= 1 << (FlagV1::SignAwareZeroPad as u32);\n \n             if let None = f.width {\n-                // The formats need two extra bytes, for the 0x\n-                if cfg!(target_pointer_width = \"32\") {\n-                    f.width = Some(10);\n-                } else {\n-                    f.width = Some(18);\n-                }\n+                f.width = Some((::usize::BITS/4) + 2);\n             }\n         }\n         f.flags |= 1 << (FlagV1::Alternate as u32);"}, {"sha": "2a4c909d6384c5b877ade8e2970e2a2e0d4dd245", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ebc5e5134b6a0094a197d27423f9a80dbb38598/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebc5e5134b6a0094a197d27423f9a80dbb38598/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=7ebc5e5134b6a0094a197d27423f9a80dbb38598", "patch": "@@ -144,11 +144,11 @@ pub trait Hasher {\n     #[inline]\n     #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_usize(&mut self, i: usize) {\n-        if cfg!(target_pointer_width = \"32\") {\n-            self.write_u32(i as u32)\n-        } else {\n-            self.write_u64(i as u64)\n-        }\n+        let bytes = unsafe {\n+            ::slice::from_raw_parts(&i as *const usize as *const u8,\n+                                    mem::size_of::<usize>())\n+        };\n+        self.write(bytes);\n     }\n \n     /// Write a single `i8` into this hasher."}, {"sha": "b800ec24a95a72d61d35eb7c2378213da09be0ba", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ebc5e5134b6a0094a197d27423f9a80dbb38598/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebc5e5134b6a0094a197d27423f9a80dbb38598/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=7ebc5e5134b6a0094a197d27423f9a80dbb38598", "patch": "@@ -2234,7 +2234,9 @@ step_impl_signed!(isize i8 i16 i32);\n step_impl_unsigned!(u64);\n #[cfg(target_pointer_width = \"64\")]\n step_impl_signed!(i64);\n-#[cfg(target_pointer_width = \"32\")]\n+// If the target pointer width is not 64-bits, we\n+// assume here that it is less than 64-bits.\n+#[cfg(not(target_pointer_width = \"64\"))]\n step_impl_no_between!(u64 i64);\n \n /// An adapter for stepping range iterators by a custom amount."}]}