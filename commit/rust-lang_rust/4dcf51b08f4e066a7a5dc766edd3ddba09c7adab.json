{"sha": "4dcf51b08f4e066a7a5dc766edd3ddba09c7adab", "node_id": "C_kwDOAAsO6NoAKDRkY2Y1MWIwOGY0ZTA2NmE3YTVkYzc2NmVkZDNkZGJhMDljN2FkYWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-20T11:09:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-20T11:09:41Z"}, "message": "Auto merge of #2606 - cbiffle:nostdio, r=RalfJung\n\nMagic functions for writing to stdout/stderr.\n\nThis enables I/O in no_std contexts (or, really, any Miri-specific OS-independent context). Combined with the `abort` intrinsic it should allow a reasonable test framework in no_std.\n\n**Question for maintainers:** So, the `no_std` panic test needs work, for two reasons:\n\n- First, its stdout includes Miri's whole message about the abort intrinsic having been used. I guess whatever panic handler you use in `std` contexts exits cleanly without triggering this message. Comparing the entire output with backtrace as golden seems fragile.\n- Second, likely for the same reason, the test framework appears to expect the test to exit successfully, when in fact it exits with status 1 due to the abort. This means the test doesn't actually pass right now.\n\nWhat shall I do there?", "tree": {"sha": "1bea68fb4df0a54130a690194ec2d6baee4b171a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bea68fb4df0a54130a690194ec2d6baee4b171a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dcf51b08f4e066a7a5dc766edd3ddba09c7adab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dcf51b08f4e066a7a5dc766edd3ddba09c7adab", "html_url": "https://github.com/rust-lang/rust/commit/4dcf51b08f4e066a7a5dc766edd3ddba09c7adab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dcf51b08f4e066a7a5dc766edd3ddba09c7adab/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43de83e02d50c85ccf427ca64c2a0ca2f77161ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/43de83e02d50c85ccf427ca64c2a0ca2f77161ad", "html_url": "https://github.com/rust-lang/rust/commit/43de83e02d50c85ccf427ca64c2a0ca2f77161ad"}, {"sha": "845662e1c0f2315980592ef57beb2e087d3c181c", "url": "https://api.github.com/repos/rust-lang/rust/commits/845662e1c0f2315980592ef57beb2e087d3c181c", "html_url": "https://github.com/rust-lang/rust/commit/845662e1c0f2315980592ef57beb2e087d3c181c"}], "stats": {"total": 114, "additions": 111, "deletions": 3}, "files": [{"sha": "4f5d406288ff9093452d0cb152f8574abf36c5ac", "filename": "src/tools/miri/README.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4dcf51b08f4e066a7a5dc766edd3ddba09c7adab/src%2Ftools%2Fmiri%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/4dcf51b08f4e066a7a5dc766edd3ddba09c7adab/src%2Ftools%2Fmiri%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FREADME.md?ref=4dcf51b08f4e066a7a5dc766edd3ddba09c7adab", "patch": "@@ -542,6 +542,16 @@ extern \"Rust\" {\n     /// In particular, users should be aware that Miri will periodically attempt to garbage collect the\n     /// contents of all stacks. Callers of this function may wish to pass `-Zmiri-tag-gc=0` to disable the GC.\n     fn miri_print_stacks(alloc_id: u64);\n+\n+    /// Miri-provided extern function to print (from the interpreter, not the\n+    /// program) the contents of a section of program memory, as bytes. Bytes\n+    /// written using this function will emerge from the interpreter's stdout.\n+    fn miri_write_to_stdout(bytes: &[u8]);\n+\n+    /// Miri-provided extern function to print (from the interpreter, not the\n+    /// program) the contents of a section of program memory, as bytes. Bytes\n+    /// written using this function will emerge from the interpreter's stderr.\n+    fn miri_write_to_stderr(bytes: &[u8]);\n }\n ```\n "}, {"sha": "a49e6ba4ce386911a66146346048781df6df349b", "filename": "src/tools/miri/src/shims/foreign_items.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4dcf51b08f4e066a7a5dc766edd3ddba09c7adab/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dcf51b08f4e066a7a5dc766edd3ddba09c7adab/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fforeign_items.rs?ref=4dcf51b08f4e066a7a5dc766edd3ddba09c7adab", "patch": "@@ -1,4 +1,4 @@\n-use std::{collections::hash_map::Entry, iter};\n+use std::{collections::hash_map::Entry, io::Write, iter};\n \n use log::trace;\n \n@@ -462,6 +462,23 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 this.handle_miri_resolve_frame_names(abi, link_name, args)?;\n             }\n \n+            // Writes some bytes to the interpreter's stdout/stderr. See the\n+            // README for details.\n+            \"miri_write_to_stdout\" | \"miri_write_to_stderr\" => {\n+                let [bytes] = this.check_shim(abi, Abi::Rust, link_name, args)?;\n+                let (ptr, len) = this.read_immediate(bytes)?.to_scalar_pair();\n+                let ptr = ptr.to_pointer(this)?;\n+                let len = len.to_machine_usize(this)?;\n+                let msg = this.read_bytes_ptr_strip_provenance(ptr, Size::from_bytes(len))?;\n+\n+                // Note: we're ignoring errors writing to host stdout/stderr.\n+                let _ignore = match link_name.as_str() {\n+                    \"miri_write_to_stdout\" => std::io::stdout().write_all(msg),\n+                    \"miri_write_to_stderr\" => std::io::stderr().write_all(msg),\n+                    _ => unreachable!(),\n+                };\n+            }\n+\n             // Standard C allocation\n             \"malloc\" => {\n                 let [size] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;"}, {"sha": "b6a5c0755701e9388e3cd55f0ed56454b1ffe44a", "filename": "src/tools/miri/tests/fail/panic/no_std.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4dcf51b08f4e066a7a5dc766edd3ddba09c7adab/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fno_std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dcf51b08f4e066a7a5dc766edd3ddba09c7adab/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fno_std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fno_std.rs?ref=4dcf51b08f4e066a7a5dc766edd3ddba09c7adab", "patch": "@@ -0,0 +1,41 @@\n+#![feature(lang_items, start, core_intrinsics)]\n+#![no_std]\n+// windows tls dtors go through libstd right now, thus this test\n+// cannot pass. When windows tls dtors go through the special magic\n+// windows linker section, we can run this test on windows again.\n+//@ignore-target-windows\n+\n+// Plumbing to let us use `writeln!` to host stderr:\n+\n+extern \"Rust\" {\n+    fn miri_write_to_stderr(bytes: &[u8]);\n+}\n+\n+struct HostErr;\n+\n+use core::fmt::Write;\n+\n+impl Write for HostErr {\n+    fn write_str(&mut self, s: &str) -> core::fmt::Result {\n+        unsafe {\n+            miri_write_to_stderr(s.as_bytes());\n+        }\n+        Ok(())\n+    }\n+}\n+\n+// Aaaand the test:\n+\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n+    panic!(\"blarg I am dead\")\n+}\n+\n+#[panic_handler]\n+fn panic_handler(panic_info: &core::panic::PanicInfo) -> ! {\n+    writeln!(HostErr, \"{panic_info}\").ok();\n+    core::intrinsics::abort(); //~ ERROR: the program aborted execution\n+}\n+\n+#[lang = \"eh_personality\"]\n+fn eh_personality() {}"}, {"sha": "568b286e1d3bf5733984e3273f00801d74b8282a", "filename": "src/tools/miri/tests/fail/panic/no_std.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4dcf51b08f4e066a7a5dc766edd3ddba09c7adab/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fno_std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4dcf51b08f4e066a7a5dc766edd3ddba09c7adab/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fno_std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fno_std.stderr?ref=4dcf51b08f4e066a7a5dc766edd3ddba09c7adab", "patch": "@@ -0,0 +1,19 @@\n+panicked at 'blarg I am dead', $DIR/no_std.rs:LL:CC\n+error: abnormal termination: the program aborted execution\n+  --> $DIR/no_std.rs:LL:CC\n+   |\n+LL |     core::intrinsics::abort();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ the program aborted execution\n+   |\n+   = note: inside `panic_handler` at $DIR/no_std.rs:LL:CC\n+note: inside `start` at RUSTLIB/core/src/panic.rs:LL:CC\n+  --> $DIR/no_std.rs:LL:CC\n+   |\n+LL |     panic!(\"blarg I am dead\")\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "0203edfe1818081962dabce6566d9b0e4d222b44", "filename": "src/tools/miri/tests/pass/no_std.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4dcf51b08f4e066a7a5dc766edd3ddba09c7adab/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fno_std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dcf51b08f4e066a7a5dc766edd3ddba09c7adab/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fno_std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fno_std.rs?ref=4dcf51b08f4e066a7a5dc766edd3ddba09c7adab", "patch": "@@ -5,10 +5,30 @@\n // windows linker section, we can run this test on windows again.\n //@ignore-target-windows\n \n+// Plumbing to let us use `writeln!` to host stdout:\n+\n+extern \"Rust\" {\n+    fn miri_write_to_stdout(bytes: &[u8]);\n+}\n+\n+struct Host;\n+\n+use core::fmt::Write;\n+\n+impl Write for Host {\n+    fn write_str(&mut self, s: &str) -> core::fmt::Result {\n+        unsafe {\n+            miri_write_to_stdout(s.as_bytes());\n+        }\n+        Ok(())\n+    }\n+}\n+\n+// Aaaand the test:\n+\n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {\n-    for _ in 0..10 {}\n-\n+    writeln!(Host, \"hello, world!\").unwrap();\n     0\n }\n "}, {"sha": "270c611ee72c567bc1b2abec4cbc345bab9f15ba", "filename": "src/tools/miri/tests/pass/no_std.stdout", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4dcf51b08f4e066a7a5dc766edd3ddba09c7adab/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fno_std.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/4dcf51b08f4e066a7a5dc766edd3ddba09c7adab/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fno_std.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fno_std.stdout?ref=4dcf51b08f4e066a7a5dc766edd3ddba09c7adab", "patch": "@@ -0,0 +1 @@\n+hello, world!"}]}