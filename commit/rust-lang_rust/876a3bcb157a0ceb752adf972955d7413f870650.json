{"sha": "876a3bcb157a0ceb752adf972955d7413f870650", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NmEzYmNiMTU3YTBjZWI3NTJhZGY5NzI5NTVkNzQxM2Y4NzA2NTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-12T08:59:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-12T08:59:03Z"}, "message": "Auto merge of #59622 - GuillaumeGomez:improve-one-char-search, r=QuietMisdreavus\n\nEnsure that exact matches come first in rustdoc search\n\nFixes #59287.\n\ncc @scottmcm\n\nr? @QuietMisdreavus", "tree": {"sha": "02d092be85a9b0d0122e233f3d5e4c21b84d6366", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02d092be85a9b0d0122e233f3d5e4c21b84d6366"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/876a3bcb157a0ceb752adf972955d7413f870650", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/876a3bcb157a0ceb752adf972955d7413f870650", "html_url": "https://github.com/rust-lang/rust/commit/876a3bcb157a0ceb752adf972955d7413f870650", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/876a3bcb157a0ceb752adf972955d7413f870650/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2226c09699a96520238e162777f44504f4a0a1a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2226c09699a96520238e162777f44504f4a0a1a7", "html_url": "https://github.com/rust-lang/rust/commit/2226c09699a96520238e162777f44504f4a0a1a7"}, {"sha": "19073676bf75f9b8b1a0fb1cabde852845bc96b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/19073676bf75f9b8b1a0fb1cabde852845bc96b2", "html_url": "https://github.com/rust-lang/rust/commit/19073676bf75f9b8b1a0fb1cabde852845bc96b2"}], "stats": {"total": 86, "additions": 83, "deletions": 3}, "files": [{"sha": "00ca78b749e9d9c4098ec78cda02ebfd125c015b", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/876a3bcb157a0ceb752adf972955d7413f870650/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/876a3bcb157a0ceb752adf972955d7413f870650/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=876a3bcb157a0ceb752adf972955d7413f870650", "patch": "@@ -930,10 +930,10 @@ if (!DOMTokenList.prototype.remove) {\n                     returned = checkReturned(ty, output, true);\n                     if (output.name === \"*\" || returned === true) {\n                         in_args = false;\n-                        var module = false;\n+                        var is_module = false;\n \n                         if (input === \"*\") {\n-                            module = true;\n+                            is_module = true;\n                         } else {\n                             var allFound = true;\n                             for (var it = 0; allFound === true && it < inputs.length; it++) {\n@@ -955,7 +955,7 @@ if (!DOMTokenList.prototype.remove) {\n                                 dontValidate: true,\n                             };\n                         }\n-                        if (module === true) {\n+                        if (is_module === true) {\n                             results[fullId] = {\n                                 id: i,\n                                 index: -1,\n@@ -1073,6 +1073,10 @@ if (!DOMTokenList.prototype.remove) {\n                     if (index !== -1 || lev <= MAX_LEV_DISTANCE) {\n                         if (index !== -1 && paths.length < 2) {\n                             lev = 0;\n+                        } else if (searchWords[j] === val) {\n+                            // Small trick to fix when you're looking for a one letter type\n+                            // and there are other short named types.\n+                            lev = -1;\n                         }\n                         if (results[fullId] === undefined) {\n                             results[fullId] = {"}, {"sha": "0ebf4860cfa583ad08a64c9b6c83148726bc71d7", "filename": "src/test/rustdoc-js/search-short-types.js", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/876a3bcb157a0ceb752adf972955d7413f870650/src%2Ftest%2Frustdoc-js%2Fsearch-short-types.js", "raw_url": "https://github.com/rust-lang/rust/raw/876a3bcb157a0ceb752adf972955d7413f870650/src%2Ftest%2Frustdoc-js%2Fsearch-short-types.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fsearch-short-types.js?ref=876a3bcb157a0ceb752adf972955d7413f870650", "patch": "@@ -0,0 +1,8 @@\n+const QUERY = 'P';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'search_short_types', 'name': 'P' },\n+        { 'path': 'search_short_types', 'name': 'Ap' },\n+    ],\n+};"}, {"sha": "2eacc0a358284f07a4dd63f0ddb9be58f6a8bbbe", "filename": "src/test/rustdoc-js/search-short-types.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/876a3bcb157a0ceb752adf972955d7413f870650/src%2Ftest%2Frustdoc-js%2Fsearch-short-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876a3bcb157a0ceb752adf972955d7413f870650/src%2Ftest%2Frustdoc-js%2Fsearch-short-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fsearch-short-types.rs?ref=876a3bcb157a0ceb752adf972955d7413f870650", "patch": "@@ -0,0 +1,68 @@\n+macro_rules! imp {\n+    ($name:ident) => {\n+        pub struct $name {\n+            pub op: usize,\n+        }\n+        impl $name {\n+            pub fn op() {}\n+            pub fn cmp() {}\n+            pub fn map() {}\n+            pub fn pop() {}\n+            pub fn ptr() {}\n+            pub fn rpo() {}\n+            pub fn drop() {}\n+            pub fn copy() {}\n+            pub fn zip() {}\n+            pub fn sup() {}\n+            pub fn pa() {}\n+            pub fn pb() {}\n+            pub fn pc() {}\n+            pub fn pd() {}\n+            pub fn pe() {}\n+            pub fn pf() {}\n+            pub fn pg() {}\n+            pub fn ph() {}\n+            pub fn pi() {}\n+            pub fn pj() {}\n+            pub fn pk() {}\n+            pub fn pl() {}\n+            pub fn pm() {}\n+            pub fn pn() {}\n+            pub fn po() {}\n+        }\n+    };\n+    ($name:ident, $($names:ident),*) => {\n+        imp!($name);\n+        imp!($($names),*);\n+    };\n+}\n+macro_rules! en {\n+    ($name:ident) => {\n+        pub enum $name {\n+            Ptr,\n+            Rp,\n+            Rpo,\n+            Pt,\n+            Drop,\n+            Dr,\n+            Dro,\n+            Sup,\n+            Op,\n+            Cmp,\n+            Map,\n+            Mp,\n+        }\n+    };\n+    ($name:ident, $($names:ident),*) => {\n+        en!($name);\n+        en!($($names),*);\n+    };\n+}\n+\n+imp!(Ot, Foo, Cmp, Map, Loc, Lac, Toc, Si, Sig, Sip, Psy, Psi, Py, Pi, Pa, Pb, Pc, Pd);\n+imp!(Pe, Pf, Pg, Ph, Pj, Pk, Pl, Pm, Pn, Po, Pq, Pr, Ps, Pt, Pu, Pv, Pw, Px, Pz, Ap, Bp, Cp);\n+imp!(Dp, Ep, Fp, Gp, Hp, Ip, Jp, Kp, Lp, Mp, Np, Op, Pp, Qp, Rp, Sp, Tp, Up, Vp, Wp, Xp, Yp, Zp);\n+\n+en!(Place, Plac, Plae, Plce, Pace, Scalar, Scalr, Scaar, Sclar, Salar);\n+\n+pub struct P;"}]}