{"sha": "3fd8cbb404666e0b979efa9a886674b4a9f58868", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZDhjYmI0MDQ2NjZlMGI5NzllZmE5YTg4NjY3NGI0YTlmNTg4Njg=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-07-21T20:43:19Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-07-25T10:26:03Z"}, "message": "clippy::useless_format", "tree": {"sha": "104e7558927243e7acf683190c4d6120b91ef953", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/104e7558927243e7acf683190c4d6120b91ef953"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fd8cbb404666e0b979efa9a886674b4a9f58868", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fd8cbb404666e0b979efa9a886674b4a9f58868", "html_url": "https://github.com/rust-lang/rust/commit/3fd8cbb404666e0b979efa9a886674b4a9f58868", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fd8cbb404666e0b979efa9a886674b4a9f58868/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0a8a12dc60cb87325386be73aad7a398e1d30b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0a8a12dc60cb87325386be73aad7a398e1d30b3", "html_url": "https://github.com/rust-lang/rust/commit/d0a8a12dc60cb87325386be73aad7a398e1d30b3"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "55961636f3216bd8b27c9bc0a84cecd14378e543", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fd8cbb404666e0b979efa9a886674b4a9f58868/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd8cbb404666e0b979efa9a886674b4a9f58868/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=3fd8cbb404666e0b979efa9a886674b4a9f58868", "patch": "@@ -906,7 +906,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                     } else {\n                         return FfiUnsafe {\n                             ty,\n-                            reason: format!(\"box cannot be represented as a single pointer\"),\n+                            reason: \"box cannot be represented as a single pointer\".to_string(),\n                             help: None,\n                         };\n                     }"}, {"sha": "c52304e54742112b0d548877e0288766f7bdc71f", "filename": "compiler/rustc_macros/src/symbols.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fd8cbb404666e0b979efa9a886674b4a9f58868/compiler%2Frustc_macros%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd8cbb404666e0b979efa9a886674b4a9f58868/compiler%2Frustc_macros%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fsymbols.rs?ref=3fd8cbb404666e0b979efa9a886674b4a9f58868", "patch": "@@ -135,7 +135,7 @@ fn symbols_with_errors(input: TokenStream) -> (TokenStream, Vec<syn::Error>) {\n     let mut check_dup = |span: Span, str: &str, errors: &mut Errors| {\n         if let Some(prev_span) = keys.get(str) {\n             errors.error(span, format!(\"Symbol `{}` is duplicated\", str));\n-            errors.error(*prev_span, format!(\"location of previous definition\"));\n+            errors.error(*prev_span, \"location of previous definition\".to_string());\n         } else {\n             keys.insert(str.to_string(), span);\n         }"}, {"sha": "e43973b8db40c53c7a38c0bd7636121e72875f0b", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fd8cbb404666e0b979efa9a886674b4a9f58868/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd8cbb404666e0b979efa9a886674b4a9f58868/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=3fd8cbb404666e0b979efa9a886674b4a9f58868", "patch": "@@ -320,7 +320,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                         .map(|n| format!(\"`{}`\", n))\n                                         .unwrap_or_else(|| \"the mutable reference\".to_string()),\n                                 ),\n-                                format!(\"&mut *\"),\n+                                \"&mut *\".to_string(),\n                                 Applicability::MachineApplicable,\n                             );\n                         }"}, {"sha": "d3f9e49816ade304bf2393abe25422a84c81d80e", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fd8cbb404666e0b979efa9a886674b4a9f58868/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd8cbb404666e0b979efa9a886674b4a9f58868/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=3fd8cbb404666e0b979efa9a886674b4a9f58868", "patch": "@@ -721,7 +721,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     if suggestions.peek().is_some() {\n                         err.span_suggestions(\n                             path_segment.ident.span,\n-                            &format!(\"use mutable method\"),\n+                            \"use mutable method\",\n                             suggestions,\n                             Applicability::MaybeIncorrect,\n                         );"}, {"sha": "92de8bd292c3d96ee28d7ec2692d2d9ccac39bee", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fd8cbb404666e0b979efa9a886674b4a9f58868/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd8cbb404666e0b979efa9a886674b4a9f58868/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=3fd8cbb404666e0b979efa9a886674b4a9f58868", "patch": "@@ -255,7 +255,7 @@ impl NonConstOp for CellBorrow {\n         );\n         err.span_label(\n             span,\n-            format!(\"this borrow of an interior mutable value may end up in the final value\"),\n+            \"this borrow of an interior mutable value may end up in the final value\",\n         );\n         if let hir::ConstContext::Static(_) = ccx.const_kind() {\n             err.help("}, {"sha": "6fd7d29d7779712860d0c0be87da30b943d36e37", "filename": "compiler/rustc_mir/src/transform/coverage/debug.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fd8cbb404666e0b979efa9a886674b4a9f58868/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd8cbb404666e0b979efa9a886674b4a9f58868/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs?ref=3fd8cbb404666e0b979efa9a886674b4a9f58868", "patch": "@@ -344,7 +344,7 @@ impl DebugCounters {\n                 return if counter_format.id {\n                     format!(\"{}#{}\", block_label, id.index())\n                 } else {\n-                    format!(\"{}\", block_label)\n+                    block_label.to_string()\n                 };\n             }\n         }\n@@ -369,7 +369,7 @@ impl DebugCounters {\n                     }\n                     return format!(\"({})\", self.format_counter_kind(counter_kind));\n                 }\n-                return format!(\"{}\", self.format_counter_kind(counter_kind));\n+                return self.format_counter_kind(counter_kind).to_string();\n             }\n         }\n         format!(\"#{}\", operand.index().to_string())"}, {"sha": "aff2df31b1c96cb4f0ae80e2419761f7e2652668", "filename": "compiler/rustc_mir/src/transform/lower_intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fd8cbb404666e0b979efa9a886674b4a9f58868/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd8cbb404666e0b979efa9a886674b4a9f58868/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs?ref=3fd8cbb404666e0b979efa9a886674b4a9f58868", "patch": "@@ -147,8 +147,8 @@ fn validate_simd_shuffle(tcx: TyCtxt<'tcx>, args: &[Operand<'tcx>], span: Span)\n     match &args[2] {\n         Operand::Constant(_) => {} // all good\n         _ => {\n-            let msg = format!(\"last argument of `simd_shuffle` is required to be a `const` item\");\n-            tcx.sess.span_err(span, &msg);\n+            let msg = \"last argument of `simd_shuffle` is required to be a `const` item\";\n+            tcx.sess.span_err(span, msg);\n         }\n     }\n }"}, {"sha": "7598a011bb6771619541fbab1865cdcd1b2f23da", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fd8cbb404666e0b979efa9a886674b4a9f58868/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd8cbb404666e0b979efa9a886674b4a9f58868/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=3fd8cbb404666e0b979efa9a886674b4a9f58868", "patch": "@@ -479,7 +479,7 @@ impl Visitor<'tcx> for ExtraComments<'tcx> {\n                     uv.promoted\n                 ),\n                 ty::ConstKind::Value(val) => format!(\"Value({:?})\", val),\n-                ty::ConstKind::Error(_) => format!(\"Error\"),\n+                ty::ConstKind::Error(_) => \"Error\".to_string(),\n             };\n             self.push(&format!(\"+ val: {}\", val));\n         }"}, {"sha": "cd3e6e2f48cfd801af3f1321352c8946b2780bda", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fd8cbb404666e0b979efa9a886674b4a9f58868/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd8cbb404666e0b979efa9a886674b4a9f58868/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=3fd8cbb404666e0b979efa9a886674b4a9f58868", "patch": "@@ -855,7 +855,7 @@ impl CheckAttrVisitor<'tcx> {\n                         hir_id,\n                         meta.span(),\n                         |lint| {\n-                            lint.build(&format!(\"invalid `doc` attribute\")).emit();\n+                            lint.build(&\"invalid `doc` attribute\").emit();\n                         },\n                     );\n                     is_valid = false;"}, {"sha": "0b5dcd1a087dd7ade873564acc394e83962c3345", "filename": "compiler/rustc_passes/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fd8cbb404666e0b979efa9a886674b4a9f58868/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd8cbb404666e0b979efa9a886674b4a9f58868/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fentry.rs?ref=3fd8cbb404666e0b979efa9a886674b4a9f58868", "patch": "@@ -229,7 +229,7 @@ fn no_main_err(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) {\n     if let Some(main_def) = tcx.resolutions(()).main_def {\n         if main_def.opt_fn_def_id().is_none() {\n             // There is something at `crate::main`, but it is not a function definition.\n-            err.span_label(main_def.span, &format!(\"non-function item at `crate::main` is found\"));\n+            err.span_label(main_def.span, \"non-function item at `crate::main` is found\");\n         }\n     }\n "}, {"sha": "a0c2b3d82abce1a8bf30850f940c6420d53927d4", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fd8cbb404666e0b979efa9a886674b4a9f58868/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd8cbb404666e0b979efa9a886674b4a9f58868/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=3fd8cbb404666e0b979efa9a886674b4a9f58868", "patch": "@@ -618,8 +618,8 @@ fn incremental_verify_ich<CTX, K, V: Debug>(\n         };\n         tcx.sess().struct_err(&format!(\"internal compiler error: encountered incremental compilation error with {:?}\", dep_node))\n             .help(&format!(\"This is a known issue with the compiler. Run {} to allow your project to compile\", run_cmd))\n-            .note(&format!(\"Please follow the instructions below to create a bug report with the provided information\"))\n-            .note(&format!(\"See <https://github.com/rust-lang/rust/issues/84970> for more information\"))\n+            .note(&\"Please follow the instructions below to create a bug report with the provided information\")\n+            .note(&\"See <https://github.com/rust-lang/rust/issues/84970> for more information\")\n             .emit();\n         panic!(\"Found unstable fingerprints for {:?}: {:?}\", dep_node, result);\n     }"}, {"sha": "e3ab858541af412c73bf4882a00637c925f4316f", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fd8cbb404666e0b979efa9a886674b4a9f58868/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd8cbb404666e0b979efa9a886674b4a9f58868/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=3fd8cbb404666e0b979efa9a886674b4a9f58868", "patch": "@@ -1061,7 +1061,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         }\n                         err.span_suggestion(\n                             span,\n-                            &format!(\"use this syntax instead\"),\n+                            &\"use this syntax instead\",\n                             format!(\"{path_str}\"),\n                             Applicability::MaybeIncorrect,\n                         );"}, {"sha": "7f349ef10d348ddd8799540b6baae5d2b759e96c", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fd8cbb404666e0b979efa9a886674b4a9f58868/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd8cbb404666e0b979efa9a886674b4a9f58868/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=3fd8cbb404666e0b979efa9a886674b4a9f58868", "patch": "@@ -2018,7 +2018,7 @@ impl Target {\n \n         if base.is_builtin {\n             // This can cause unfortunate ICEs later down the line.\n-            return Err(format!(\"may not set is_builtin for targets not built-in\"));\n+            return Err(\"may not set is_builtin for targets not built-in\".to_string());\n         }\n         // Each field should have been read using `Json::remove_key` so any keys remaining are unused.\n         let remaining_keys = obj.as_object().ok_or(\"Expected JSON object for target\")?.keys();"}, {"sha": "f4644f7514d2a94c52f7aed81594e4df6da8e0bd", "filename": "compiler/rustc_typeck/src/check/method/prelude2021.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fd8cbb404666e0b979efa9a886674b4a9f58868/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd8cbb404666e0b979efa9a886674b4a9f58868/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs?ref=3fd8cbb404666e0b979efa9a886674b4a9f58868", "patch": "@@ -342,7 +342,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if let Ok(expr_text) = self.sess().source_map().span_to_snippet(expr.span) {\n                 (expr_text, true)\n             } else {\n-                (format!(\"(..)\"), false)\n+                (\"(..)\".to_string(), false)\n             };\n \n         let adjusted_text = if let Some(probe::AutorefOrPtrAdjustment::ToConstPtr) ="}]}