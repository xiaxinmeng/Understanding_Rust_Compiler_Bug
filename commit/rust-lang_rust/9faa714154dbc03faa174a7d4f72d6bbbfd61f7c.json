{"sha": "9faa714154dbc03faa174a7d4f72d6bbbfd61f7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmYWE3MTQxNTRkYmMwM2ZhYTE3NGE3ZDRmNzJkNmJiYmZkNjFmN2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-21T23:35:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-21T23:35:54Z"}, "message": "Auto merge of #88075 - Xuanwo:vec_deque_retain, r=dtolnay\n\nOptimize unnecessary check in VecDeque::retain\n\nThis pr is highly inspired by https://github.com/rust-lang/rust/pull/88060 which shared the same idea: we can split the `for` loop into stages so that we can remove unnecessary checks like `del > 0`.\n\n## Benchmarks\n\nBefore\n\n```rust\ntest collections::vec_deque::tests::bench_retain_half_10000  ... bench:     290,125 ns/iter (+/- 8,717)\ntest collections::vec_deque::tests::bench_retain_odd_10000   ... bench:     291,588 ns/iter (+/- 9,621)\ntest collections::vec_deque::tests::bench_retain_whole_10000 ... bench:     287,426 ns/iter (+/- 9,009)\n```\n\nAfter\n\n```rust\ntest collections::vec_deque::tests::bench_retain_half_10000  ... bench:     243,940 ns/iter (+/- 8,563)\ntest collections::vec_deque::tests::bench_retain_odd_10000   ... bench:     242,768 ns/iter (+/- 3,903)\ntest collections::vec_deque::tests::bench_retain_whole_10000 ... bench:     202,926 ns/iter (+/- 6,332)\n```\n\nBased on the current benchmark, this PR will improve the perf of `VecDeque::retain` by around 16%. For special cases, the improvement will be up to 30%.\n\nSigned-off-by: Xuanwo <github@xuanwo.io>", "tree": {"sha": "1777530d1b9e9c53d01d6025aee0e8f4800763d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1777530d1b9e9c53d01d6025aee0e8f4800763d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9faa714154dbc03faa174a7d4f72d6bbbfd61f7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9faa714154dbc03faa174a7d4f72d6bbbfd61f7c", "html_url": "https://github.com/rust-lang/rust/commit/9faa714154dbc03faa174a7d4f72d6bbbfd61f7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9faa714154dbc03faa174a7d4f72d6bbbfd61f7c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3e2578c31688619ddc0a10ddf8543bf4ebcba5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3e2578c31688619ddc0a10ddf8543bf4ebcba5b", "html_url": "https://github.com/rust-lang/rust/commit/d3e2578c31688619ddc0a10ddf8543bf4ebcba5b"}, {"sha": "e32f4c06d34ecb4b55b678bbff35d8a77f81cf16", "url": "https://api.github.com/repos/rust-lang/rust/commits/e32f4c06d34ecb4b55b678bbff35d8a77f81cf16", "html_url": "https://github.com/rust-lang/rust/commit/e32f4c06d34ecb4b55b678bbff35d8a77f81cf16"}], "stats": {"total": 65, "additions": 57, "deletions": 8}, "files": [{"sha": "e4b28204158d9d3372ade952b5487eb1e96ebfd7", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9faa714154dbc03faa174a7d4f72d6bbbfd61f7c/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faa714154dbc03faa174a7d4f72d6bbbfd61f7c/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=9faa714154dbc03faa174a7d4f72d6bbbfd61f7c", "patch": "@@ -2129,16 +2129,32 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         F: FnMut(&T) -> bool,\n     {\n         let len = self.len();\n-        let mut del = 0;\n-        for i in 0..len {\n-            if !f(&self[i]) {\n-                del += 1;\n-            } else if del > 0 {\n-                self.swap(i - del, i);\n+        let mut idx = 0;\n+        let mut cur = 0;\n+\n+        // Stage 1: All values are retained.\n+        while cur < len {\n+            if !f(&self[cur]) {\n+                cur += 1;\n+                break;\n             }\n+            cur += 1;\n+            idx += 1;\n         }\n-        if del > 0 {\n-            self.truncate(len - del);\n+        // Stage 2: Swap retained value into current idx.\n+        while cur < len {\n+            if !f(&self[cur]) {\n+                cur += 1;\n+                continue;\n+            }\n+\n+            self.swap(idx, cur);\n+            cur += 1;\n+            idx += 1;\n+        }\n+        // Stage 3: Trancate all values after idx.\n+        if cur != idx {\n+            self.truncate(idx);\n         }\n     }\n "}, {"sha": "56257e434625467fcdf0a0a79e70c23b68306fd6", "filename": "library/alloc/src/collections/vec_deque/tests.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9faa714154dbc03faa174a7d4f72d6bbbfd61f7c/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faa714154dbc03faa174a7d4f72d6bbbfd61f7c/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs?ref=9faa714154dbc03faa174a7d4f72d6bbbfd61f7c", "patch": "@@ -40,6 +40,39 @@ fn bench_pop_back_100(b: &mut test::Bencher) {\n     })\n }\n \n+#[bench]\n+#[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n+fn bench_retain_whole_10000(b: &mut test::Bencher) {\n+    let v = (1..100000).collect::<VecDeque<u32>>();\n+\n+    b.iter(|| {\n+        let mut v = v.clone();\n+        v.retain(|x| *x > 0)\n+    })\n+}\n+\n+#[bench]\n+#[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n+fn bench_retain_odd_10000(b: &mut test::Bencher) {\n+    let v = (1..100000).collect::<VecDeque<u32>>();\n+\n+    b.iter(|| {\n+        let mut v = v.clone();\n+        v.retain(|x| x & 1 == 0)\n+    })\n+}\n+\n+#[bench]\n+#[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n+fn bench_retain_half_10000(b: &mut test::Bencher) {\n+    let v = (1..100000).collect::<VecDeque<u32>>();\n+\n+    b.iter(|| {\n+        let mut v = v.clone();\n+        v.retain(|x| *x > 50000)\n+    })\n+}\n+\n #[bench]\n #[cfg_attr(miri, ignore)] // isolated Miri does not support benchmarks\n fn bench_pop_front_100(b: &mut test::Bencher) {"}]}