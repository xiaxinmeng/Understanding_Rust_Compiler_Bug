{"sha": "a66ab2bedcc2ac34086d17753f777ffe31dc6349", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NmFiMmJlZGNjMmFjMzQwODZkMTc3NTNmNzc3ZmZlMzFkYzYzNDk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-17T22:23:43Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-19T13:34:28Z"}, "message": "skip user-type annotations if they don't have regions", "tree": {"sha": "3d5d005e0bb321cd2dac736160138c5b246bc96d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d5d005e0bb321cd2dac736160138c5b246bc96d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a66ab2bedcc2ac34086d17753f777ffe31dc6349", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a66ab2bedcc2ac34086d17753f777ffe31dc6349", "html_url": "https://github.com/rust-lang/rust/commit/a66ab2bedcc2ac34086d17753f777ffe31dc6349", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a66ab2bedcc2ac34086d17753f777ffe31dc6349/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5d5e8c5f52ccc5f88f8cf691118e364e64bf75b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5d5e8c5f52ccc5f88f8cf691118e364e64bf75b", "html_url": "https://github.com/rust-lang/rust/commit/d5d5e8c5f52ccc5f88f8cf691118e364e64bf75b"}], "stats": {"total": 98, "additions": 43, "deletions": 55}, "files": [{"sha": "820822b7f5bbde45382465ef4a35ce3183580a52", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a66ab2bedcc2ac34086d17753f777ffe31dc6349/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66ab2bedcc2ac34086d17753f777ffe31dc6349/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=a66ab2bedcc2ac34086d17753f777ffe31dc6349", "patch": "@@ -139,35 +139,39 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n             ExprKind::PlaceTypeAscription { source, user_ty } => {\n                 let place = unpack!(block = this.as_place(block, source));\n-                this.cfg.push(\n-                    block,\n-                    Statement {\n-                        source_info,\n-                        kind: StatementKind::AscribeUserType(\n-                            place.clone(),\n-                            Variance::Invariant,\n-                            user_ty,\n-                        ),\n-                    },\n-                );\n+                if let Some(user_ty) = user_ty {\n+                    this.cfg.push(\n+                        block,\n+                        Statement {\n+                            source_info,\n+                            kind: StatementKind::AscribeUserType(\n+                                place.clone(),\n+                                Variance::Invariant,\n+                                user_ty,\n+                            ),\n+                        },\n+                    );\n+                }\n                 block.and(place)\n             }\n             ExprKind::ValueTypeAscription { source, user_ty } => {\n                 let source = this.hir.mirror(source);\n                 let temp = unpack!(\n                     block = this.as_temp(block, source.temp_lifetime, source, mutability)\n                 );\n-                this.cfg.push(\n-                    block,\n-                    Statement {\n-                        source_info,\n-                        kind: StatementKind::AscribeUserType(\n-                            Place::Local(temp.clone()),\n-                            Variance::Invariant,\n-                            user_ty,\n-                        ),\n-                    },\n-                );\n+                if let Some(user_ty) = user_ty {\n+                    this.cfg.push(\n+                        block,\n+                        Statement {\n+                            source_info,\n+                            kind: StatementKind::AscribeUserType(\n+                                Place::Local(temp.clone()),\n+                                Variance::Invariant,\n+                                user_ty,\n+                            ),\n+                        },\n+                    );\n+                }\n                 block.and(Place::Local(temp))\n             }\n "}, {"sha": "5adaad15e4cc7ab033e59dc6a4397fcc45034d0e", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a66ab2bedcc2ac34086d17753f777ffe31dc6349/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66ab2bedcc2ac34086d17753f777ffe31dc6349/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=a66ab2bedcc2ac34086d17753f777ffe31dc6349", "patch": "@@ -749,23 +749,15 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n \n                 ExprKind::ValueTypeAscription {\n                     source: cast_expr.to_ref(),\n-                    user_ty: user_ty,\n+                    user_ty: Some(user_ty),\n                 }\n             } else {\n                 cast\n             }\n         }\n         hir::ExprKind::Type(ref source, ref ty) => {\n             let user_provided_tys = cx.tables.user_provided_tys();\n-            let user_ty = UserTypeAnnotation::Ty(\n-                *user_provided_tys\n-                    .get(ty.hir_id)\n-                    .expect(&format!(\n-                        \"{:?} not found in user_provided_tys, source: {:?}\",\n-                        ty,\n-                        source,\n-                    ))\n-            );\n+            let user_ty = user_provided_tys.get(ty.hir_id).map(|&c_ty| UserTypeAnnotation::Ty(c_ty));\n             if source.is_place_expr() {\n                 ExprKind::PlaceTypeAscription {\n                     source: source.to_ref(),"}, {"sha": "788db5c0b7e5217ac94d32940b12df8e17ad0ea8", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a66ab2bedcc2ac34086d17753f777ffe31dc6349/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66ab2bedcc2ac34086d17753f777ffe31dc6349/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=a66ab2bedcc2ac34086d17753f777ffe31dc6349", "patch": "@@ -276,12 +276,12 @@ pub enum ExprKind<'tcx> {\n     PlaceTypeAscription {\n         source: ExprRef<'tcx>,\n         /// Type that the user gave to this expression\n-        user_ty: UserTypeAnnotation<'tcx>,\n+        user_ty: Option<UserTypeAnnotation<'tcx>>,\n     },\n     ValueTypeAscription {\n         source: ExprRef<'tcx>,\n         /// Type that the user gave to this expression\n-        user_ty: UserTypeAnnotation<'tcx>,\n+        user_ty: Option<UserTypeAnnotation<'tcx>>,\n     },\n     Closure {\n         closure_id: DefId,"}, {"sha": "ff92104d127f16b31cb3722b89943b7781dfc5d3", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a66ab2bedcc2ac34086d17753f777ffe31dc6349/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66ab2bedcc2ac34086d17753f777ffe31dc6349/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a66ab2bedcc2ac34086d17753f777ffe31dc6349", "patch": "@@ -2359,8 +2359,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n     pub fn to_ty_saving_user_provided_ty(&self, ast_ty: &hir::Ty) -> Ty<'tcx> {\n         let ty = self.to_ty(ast_ty);\n-        let c_ty = self.infcx.canonicalize_response(&ty);\n-        self.tables.borrow_mut().user_provided_tys_mut().insert(ast_ty.hir_id, c_ty);\n+\n+        // If the type given by the user has free regions, save it for\n+        // later, since NLL would like to enforce those. Other sorts\n+        // of things are already sufficiently enforced. =)\n+        if ty.has_free_regions() {\n+            let c_ty = self.infcx.canonicalize_response(&ty);\n+            self.tables.borrow_mut().user_provided_tys_mut().insert(ast_ty.hir_id, c_ty);\n+        }\n+\n         ty\n     }\n "}, {"sha": "8142ed0155aaebc581d2d990c98886c6f6821111", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a66ab2bedcc2ac34086d17753f777ffe31dc6349/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66ab2bedcc2ac34086d17753f777ffe31dc6349/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.rs?ref=a66ab2bedcc2ac34086d17753f777ffe31dc6349", "patch": "@@ -14,7 +14,6 @@ const X: u32 = 5;\n const Y: u32 = 6;\n const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n //~^ WARN this constant cannot be used\n-//~| ERROR\n \n fn main() {\n     println!(\"{}\", FOO);"}, {"sha": "29f5f8e2ade59198d3eb2182f7942da7691f4f84", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a66ab2bedcc2ac34086d17753f777ffe31dc6349/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a66ab2bedcc2ac34086d17753f777ffe31dc6349/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr?ref=a66ab2bedcc2ac34086d17753f777ffe31dc6349", "patch": "@@ -13,28 +13,20 @@ LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n \n error[E0080]: referenced constant has errors\n-  --> $DIR/conditional_array_execution.rs:20:20\n+  --> $DIR/conditional_array_execution.rs:19:20\n    |\n LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n    |                   ----- attempt to subtract with overflow\n ...\n LL |     println!(\"{}\", FOO);\n    |                    ^^^\n \n-error[E0080]: could not evaluate constant\n-  --> $DIR/conditional_array_execution.rs:20:20\n+error[E0080]: erroneous constant used\n+  --> $DIR/conditional_array_execution.rs:19:20\n    |\n LL |     println!(\"{}\", FOO);\n    |                    ^^^ referenced constant has errors\n \n-error[E0080]: constant evaluation error\n-  --> $DIR/conditional_array_execution.rs:15:1\n-   |\n-LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n-   | ^^^^^^^^^^^^^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |                   |\n-   |                   attempt to subtract with overflow\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "85b5696be947cf2097f546f22cc790387da1737f", "filename": "src/test/ui/consts/const-eval/promoted_errors.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a66ab2bedcc2ac34086d17753f777ffe31dc6349/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a66ab2bedcc2ac34086d17753f777ffe31dc6349/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr?ref=a66ab2bedcc2ac34086d17753f777ffe31dc6349", "patch": "@@ -34,12 +34,6 @@ warning: attempt to divide by zero\n LL |     println!(\"{}\", 1/(false as u32));\n    |                    ^^^^^^^^^^^^^^^^\n \n-warning: this expression will panic at runtime\n-  --> $DIR/promoted_errors.rs:24:20\n-   |\n-LL |     println!(\"{}\", 1/(false as u32));\n-   |                    ^^^^^^^^^^^^^^^^ attempt to divide by zero\n-\n warning: attempt to divide by zero\n   --> $DIR/promoted_errors.rs:26:14\n    |"}]}