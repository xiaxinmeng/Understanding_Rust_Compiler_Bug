{"sha": "8a746f4ac3a489efb724cde813607f3b96c2df7b", "node_id": "C_kwDOAAsO6NoAKDhhNzQ2ZjRhYzNhNDg5ZWZiNzI0Y2RlODEzNjA3ZjNiOTZjMmRmN2I", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-20T10:20:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-20T10:20:27Z"}, "message": "Auto merge of #105940 - matthiaskrgr:rollup-ho4po1t, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #105901 (Don't panic on stable since miri is not available there)\n - #105912 (rustdoc: force pre tags to have the default line height)\n - #105914 (rustdoc: Simplify CSS for scraped code examples code blocks)\n - #105933 (Add readable rustdoc display for tvOS and watchOS)\n - #105935 (docs/test: add UI test and long-form error docs for `E0377`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "c1a88a68650bff13ac0b61a0195f89c58e1a850a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1a88a68650bff13ac0b61a0195f89c58e1a850a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a746f4ac3a489efb724cde813607f3b96c2df7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a746f4ac3a489efb724cde813607f3b96c2df7b", "html_url": "https://github.com/rust-lang/rust/commit/8a746f4ac3a489efb724cde813607f3b96c2df7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a746f4ac3a489efb724cde813607f3b96c2df7b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb9e5e711d3eef1998ff24ac2bc57386662652e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb9e5e711d3eef1998ff24ac2bc57386662652e9", "html_url": "https://github.com/rust-lang/rust/commit/eb9e5e711d3eef1998ff24ac2bc57386662652e9"}, {"sha": "051c52a72705035e1d18b4204de6ae4c8248aca0", "url": "https://api.github.com/repos/rust-lang/rust/commits/051c52a72705035e1d18b4204de6ae4c8248aca0", "html_url": "https://github.com/rust-lang/rust/commit/051c52a72705035e1d18b4204de6ae4c8248aca0"}], "stats": {"total": 108, "additions": 90, "deletions": 18}, "files": [{"sha": "4e149fc2b9973c1aed2ba0c20a6051fa71203d74", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a746f4ac3a489efb724cde813607f3b96c2df7b/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a746f4ac3a489efb724cde813607f3b96c2df7b/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=8a746f4ac3a489efb724cde813607f3b96c2df7b", "patch": "@@ -184,6 +184,7 @@ E0373: include_str!(\"./error_codes/E0373.md\"),\n E0374: include_str!(\"./error_codes/E0374.md\"),\n E0375: include_str!(\"./error_codes/E0375.md\"),\n E0376: include_str!(\"./error_codes/E0376.md\"),\n+E0377: include_str!(\"./error_codes/E0377.md\"),\n E0378: include_str!(\"./error_codes/E0378.md\"),\n E0379: include_str!(\"./error_codes/E0379.md\"),\n E0380: include_str!(\"./error_codes/E0380.md\"),\n@@ -579,8 +580,6 @@ E0791: include_str!(\"./error_codes/E0791.md\"),\n //  E0315, // cannot invoke closure outside of its lifetime\n //  E0319, // trait impls for defaulted traits allowed just for structs/enums\n //  E0372, // coherence not object safe\n-    E0377, // the trait `CoerceUnsized` may only be implemented for a coercion\n-           // between structures with the same definition\n //  E0385, // {} in an aliasable location\n //  E0402, // cannot use an outer type parameter in this context\n //  E0406, // merged into 420"}, {"sha": "b1d36406332bdb08bc071867da0d3791d72f2028", "filename": "compiler/rustc_error_codes/src/error_codes/E0377.md", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8a746f4ac3a489efb724cde813607f3b96c2df7b/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0377.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a746f4ac3a489efb724cde813607f3b96c2df7b/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0377.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0377.md?ref=8a746f4ac3a489efb724cde813607f3b96c2df7b", "patch": "@@ -0,0 +1,29 @@\n+The trait `CoerceUnsized` may only be implemented for a coercion between\n+structures with the same definition.\n+\n+Example of erroneous code:\n+\n+```compile_fail,E0377\n+#![feature(coerce_unsized)]\n+use std::ops::CoerceUnsized;\n+\n+pub struct Foo<T: ?Sized> {\n+    field_with_unsized_type: T,\n+}\n+\n+pub struct Bar<T: ?Sized> {\n+    field_with_unsized_type: T,\n+}\n+\n+// error: the trait `CoerceUnsized` may only be implemented for a coercion\n+//        between structures with the same definition\n+impl<T, U> CoerceUnsized<Bar<U>> for Foo<T> where T: CoerceUnsized<U> {}\n+```\n+\n+When attempting to implement `CoerceUnsized`, the `impl` signature must look\n+like: `impl CoerceUnsized<Type<U>> for Type<T> where T: CoerceUnsized<U>`;\n+the *implementer* and *`CoerceUnsized` type parameter* must be the same\n+type. In this example, `Bar` and `Foo` (even though structurally identical)\n+are *not* the same type and are rejected. Learn more about the `CoerceUnsized`\n+trait and DST coercion in\n+[the `CoerceUnsized` docs](../std/ops/trait.CoerceUnsized.html)."}, {"sha": "1815a0973072bd741e4699332268aa3c7ce77f5b", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a746f4ac3a489efb724cde813607f3b96c2df7b/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a746f4ac3a489efb724cde813607f3b96c2df7b/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=8a746f4ac3a489efb724cde813607f3b96c2df7b", "patch": "@@ -200,10 +200,14 @@ install!((self, builder, _config),\n         install_sh(builder, \"clippy\", self.compiler.stage, Some(self.target), &tarball);\n     };\n     Miri, alias = \"miri\", Self::should_build(_config), only_hosts: true, {\n-        let tarball = builder\n-            .ensure(dist::Miri { compiler: self.compiler, target: self.target })\n-            .expect(\"missing miri\");\n-        install_sh(builder, \"miri\", self.compiler.stage, Some(self.target), &tarball);\n+        if let Some(tarball) = builder.ensure(dist::Miri { compiler: self.compiler, target: self.target }) {\n+            install_sh(builder, \"miri\", self.compiler.stage, Some(self.target), &tarball);\n+        } else {\n+            // Miri is only available on nightly\n+            builder.info(\n+                &format!(\"skipping Install miri stage{} ({})\", self.compiler.stage, self.target),\n+            );\n+        }\n     };\n     LlvmTools, alias = \"llvm-tools\", Self::should_build(_config), only_hosts: true, {\n         let tarball = builder"}, {"sha": "f1853f3697df2fe9c20c7ad398e42877263c154e", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a746f4ac3a489efb724cde813607f3b96c2df7b/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a746f4ac3a489efb724cde813607f3b96c2df7b/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=8a746f4ac3a489efb724cde813607f3b96c2df7b", "patch": "@@ -507,7 +507,9 @@ impl<'a> fmt::Display for Display<'a> {\n                         \"openbsd\" => \"OpenBSD\",\n                         \"redox\" => \"Redox\",\n                         \"solaris\" => \"Solaris\",\n+                        \"tvos\" => \"tvOS\",\n                         \"wasi\" => \"WASI\",\n+                        \"watchos\" => \"watchOS\",\n                         \"windows\" => \"Windows\",\n                         _ => \"\",\n                     },"}, {"sha": "11e34a3fc7d1f4a82f4a406a4be8a2a835bb5bfe", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a746f4ac3a489efb724cde813607f3b96c2df7b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/8a746f4ac3a489efb724cde813607f3b96c2df7b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=8a746f4ac3a489efb724cde813607f3b96c2df7b", "patch": "@@ -338,6 +338,7 @@ code, pre, a.test-arrow, .code-header {\n }\n pre {\n \tpadding: 14px;\n+\tline-height: 1.5; /* https://github.com/rust-lang/rust/issues/105906 */\n }\n .item-decl pre {\n \toverflow-x: auto;\n@@ -1972,10 +1973,7 @@ in storage.js\n }\n \n .scraped-example .code-wrapper .example-wrap {\n-\tdisplay: grid;\n-\tgrid-template-columns: max-content auto;\n \twidth: 100%;\n-\toverflow-x: auto;\n \toverflow-y: hidden;\n \tmargin-bottom: 0;\n }\n@@ -1984,13 +1982,6 @@ in storage.js\n \toverflow-x: hidden;\n }\n \n-.scraped-example .code-wrapper .example-wrap pre.rust {\n-\toverflow-x: inherit;\n-\twidth: inherit;\n-\toverflow-y: hidden;\n-}\n-\n-\n .more-examples-toggle {\n \tmax-width: calc(100% + 25px);\n \tmargin-top: 10px;"}, {"sha": "cbd314d27915ec41fd7f1fcb46c5614dddd57400", "filename": "src/test/rustdoc-gui/codeblock-sub.goml", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a746f4ac3a489efb724cde813607f3b96c2df7b/src%2Ftest%2Frustdoc-gui%2Fcodeblock-sub.goml", "raw_url": "https://github.com/rust-lang/rust/raw/8a746f4ac3a489efb724cde813607f3b96c2df7b/src%2Ftest%2Frustdoc-gui%2Fcodeblock-sub.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcodeblock-sub.goml?ref=8a746f4ac3a489efb724cde813607f3b96c2df7b", "patch": "@@ -0,0 +1,5 @@\n+// Test that code blocks nested within <sub> do not have a line height of 0.\n+goto: \"file://\" + |DOC_PATH| + \"/test_docs/codeblock_sub/index.html\"\n+\n+store-property: (codeblock_sub_1, \"#codeblock-sub-1\", \"offsetHeight\")\n+assert-property-false: (\"#codeblock-sub-3\", { \"offsetHeight\": |codeblock_sub_1| })"}, {"sha": "51250439694b054d85f3c85110ac67ac3692a5da", "filename": "src/test/rustdoc-gui/src/test_docs/lib.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8a746f4ac3a489efb724cde813607f3b96c2df7b/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a746f4ac3a489efb724cde813607f3b96c2df7b/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs?ref=8a746f4ac3a489efb724cde813607f3b96c2df7b", "patch": "@@ -455,3 +455,22 @@ impl TypeWithImplDoc {\n     /// fn doc\n     pub fn test_fn() {}\n }\n+\n+/// <sub id=\"codeblock-sub-1\">\n+///\n+/// ```\n+/// one\n+/// ```\n+///\n+/// </sub>\n+///\n+/// <sub id=\"codeblock-sub-3\">\n+///\n+/// ```\n+/// one\n+/// two\n+/// three\n+/// ```\n+///\n+/// </sub>\n+pub mod codeblock_sub {}"}, {"sha": "6da2c20956adb7c66d8df9e0add3706bed3d32cf", "filename": "src/test/ui/error-codes/E0377.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a746f4ac3a489efb724cde813607f3b96c2df7b/src%2Ftest%2Fui%2Ferror-codes%2FE0377.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a746f4ac3a489efb724cde813607f3b96c2df7b/src%2Ftest%2Fui%2Ferror-codes%2FE0377.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0377.rs?ref=8a746f4ac3a489efb724cde813607f3b96c2df7b", "patch": "@@ -0,0 +1,14 @@\n+#![feature(coerce_unsized)]\n+use std::ops::CoerceUnsized;\n+\n+pub struct Foo<T: ?Sized> {\n+    field_with_unsized_type: T,\n+}\n+\n+pub struct Bar<T: ?Sized> {\n+    field_with_unsized_type: T,\n+}\n+\n+impl<T, U> CoerceUnsized<Bar<U>> for Foo<T> where T: CoerceUnsized<U> {} //~ ERROR E0377\n+\n+fn main() {}"}, {"sha": "bf7d8c8d39d2a09259ba6921f801e8010e556558", "filename": "src/test/ui/error-codes/E0377.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8a746f4ac3a489efb724cde813607f3b96c2df7b/src%2Ftest%2Fui%2Ferror-codes%2FE0377.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a746f4ac3a489efb724cde813607f3b96c2df7b/src%2Ftest%2Fui%2Ferror-codes%2FE0377.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0377.stderr?ref=8a746f4ac3a489efb724cde813607f3b96c2df7b", "patch": "@@ -0,0 +1,9 @@\n+error[E0377]: the trait `CoerceUnsized` may only be implemented for a coercion between structures with the same definition; expected `Foo`, found `Bar`\n+  --> $DIR/E0377.rs:12:1\n+   |\n+LL | impl<T, U> CoerceUnsized<Bar<U>> for Foo<T> where T: CoerceUnsized<U> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0377`."}, {"sha": "1b119e4113e32bf9543255aae9810fd742b437da", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a746f4ac3a489efb724cde813607f3b96c2df7b/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a746f4ac3a489efb724cde813607f3b96c2df7b/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=8a746f4ac3a489efb724cde813607f3b96c2df7b", "patch": "@@ -11,8 +11,8 @@ use regex::Regex;\n \n // A few of those error codes can't be tested but all the others can and *should* be tested!\n const EXEMPTED_FROM_TEST: &[&str] = &[\n-    \"E0313\", \"E0377\", \"E0461\", \"E0462\", \"E0465\", \"E0476\", \"E0490\", \"E0514\", \"E0519\", \"E0523\",\n-    \"E0554\", \"E0640\", \"E0717\", \"E0729\", \"E0789\",\n+    \"E0313\", \"E0461\", \"E0462\", \"E0465\", \"E0476\", \"E0490\", \"E0514\", \"E0519\", \"E0523\", \"E0554\",\n+    \"E0640\", \"E0717\", \"E0729\", \"E0789\",\n ];\n \n // Some error codes don't have any tests apparently..."}]}