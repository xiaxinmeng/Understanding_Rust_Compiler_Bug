{"sha": "056cfffd1ba69e2e80d87c728d8475944dfbe050", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1NmNmZmZkMWJhNjllMmU4MGQ4N2M3MjhkODQ3NTk0NGRmYmUwNTA=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-10-03T15:47:23Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-10-05T10:04:53Z"}, "message": "Unit tests for issue #54556. Some were also taken from issues #21114, #46413.", "tree": {"sha": "98e5cec8e2c19050e89133e95b7d65abcf46d37e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98e5cec8e2c19050e89133e95b7d65abcf46d37e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/056cfffd1ba69e2e80d87c728d8475944dfbe050", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/056cfffd1ba69e2e80d87c728d8475944dfbe050", "html_url": "https://github.com/rust-lang/rust/commit/056cfffd1ba69e2e80d87c728d8475944dfbe050", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/056cfffd1ba69e2e80d87c728d8475944dfbe050/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37f100312183364d52fe1468dc81a693783e4387", "url": "https://api.github.com/repos/rust-lang/rust/commits/37f100312183364d52fe1468dc81a693783e4387", "html_url": "https://github.com/rust-lang/rust/commit/37f100312183364d52fe1468dc81a693783e4387"}], "stats": {"total": 529, "additions": 529, "deletions": 0}, "files": [{"sha": "f5738968746ee66a5687df782cf751fda6fd3ea7", "filename": "src/test/ui/nll/issue-21114-ebfull.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-21114-ebfull.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-21114-ebfull.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21114-ebfull.rs?ref=056cfffd1ba69e2e80d87c728d8475944dfbe050", "patch": "@@ -0,0 +1,20 @@\n+// (this works, but only in NLL)\n+// compile-pass\n+#![feature(nll)]\n+\n+use std::collections::HashMap;\n+use std::sync::Mutex;\n+\n+fn i_used_to_be_able_to(foo: &Mutex<HashMap<usize, usize>>) -> Vec<(usize, usize)> {\n+    let mut foo = foo.lock().unwrap();\n+\n+    foo.drain().collect()\n+}\n+\n+fn but_after_nightly_update_now_i_gotta(foo: &Mutex<HashMap<usize, usize>>) -> Vec<(usize, usize)> {\n+    let mut foo = foo.lock().unwrap();\n+\n+    return foo.drain().collect();\n+}\n+\n+fn main() {}"}, {"sha": "2add951b70bc0a6f867a6d13272dbd50e5aa157c", "filename": "src/test/ui/nll/issue-21114-kixunil.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-21114-kixunil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-21114-kixunil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21114-kixunil.rs?ref=056cfffd1ba69e2e80d87c728d8475944dfbe050", "patch": "@@ -0,0 +1,19 @@\n+// (this works, but only in NLL)\n+// compile-pass\n+#![feature(nll)]\n+\n+fn from_stdin(min: u64) -> Vec<u64> {\n+    use std::io::BufRead;\n+\n+    let stdin = std::io::stdin();\n+    let stdin = stdin.lock();\n+\n+    stdin.lines()\n+        .map(Result::unwrap)\n+        .map(|val| val.parse())\n+        .map(Result::unwrap)\n+        .filter(|val| *val >= min)\n+        .collect()\n+}\n+\n+fn main() {}"}, {"sha": "40cd04de5ecc14919d9525590538e2d4fb01b5ce", "filename": "src/test/ui/nll/issue-54556-niconii.nll.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.nll.stderr?ref=056cfffd1ba69e2e80d87c728d8475944dfbe050", "patch": "@@ -0,0 +1,20 @@\n+error[E0597]: `counter` does not live long enough\n+  --> $DIR/issue-54556-niconii.rs:22:20\n+   |\n+LL |     if let Ok(_) = counter.lock() { }\n+   |                    ^^^^^^^-------\n+   |                    |\n+   |                    borrowed value does not live long enough\n+   |                    a temporary with access to the borrow is created here ...\n+...\n+LL | }\n+   | -\n+   | |\n+   | `counter` dropped here while still borrowed\n+   | ... and the borrow might be used here, when that temporary is dropped and runs the destructor for type `std::result::Result<MutexGuard<'_>, ()>`\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "49b063f44f427a3ae963d97762ad7d4e7ba13965", "filename": "src/test/ui/nll/issue-54556-niconii.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.rs?ref=056cfffd1ba69e2e80d87c728d8475944dfbe050", "patch": "@@ -0,0 +1,31 @@\n+// This is a reduction of a concrete test illustrating a case that was\n+// annoying to Rust developer niconii (see comment thread on #21114).\n+//\n+// With resolving issue #54556, pnkfelix hopes that the new diagnostic\n+// output produced by NLL helps to *explain* the semantic significance\n+// of temp drop order, and thus why inserting a semi-colon after the\n+// `if let` expression in `main` works.\n+\n+struct Mutex;\n+struct MutexGuard<'a>(&'a Mutex);\n+\n+impl Drop for Mutex { fn drop(&mut self) { println!(\"Mutex::drop\"); } }\n+impl<'a> Drop for MutexGuard<'a> { fn drop(&mut self) { println!(\"MutexGuard::drop\");  } }\n+\n+impl Mutex {\n+    fn lock(&self) -> Result<MutexGuard, ()> { Ok(MutexGuard(self)) }\n+}\n+\n+fn main() {\n+    let counter = Mutex;\n+\n+    if let Ok(_) = counter.lock() { }\n+\n+    // With this code as written, the dynamic semantics here implies\n+    // that `Mutex::drop` for `counter` runs *before*\n+    // `MutexGuard::drop`, which would be unsound since `MutexGuard`\n+    // still has a reference to `counter`.\n+    //\n+    // The goal of #54556 is to explain that within a compiler\n+    // diagnostic.\n+}"}, {"sha": "2d0de26ab309a00c7768cb945a718c0b8cbb32c0", "filename": "src/test/ui/nll/issue-54556-niconii.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.stderr?ref=056cfffd1ba69e2e80d87c728d8475944dfbe050", "patch": "@@ -0,0 +1,14 @@\n+error[E0597]: `counter` does not live long enough\n+  --> $DIR/issue-54556-niconii.rs:22:20\n+   |\n+LL |     if let Ok(_) = counter.lock() { }\n+   |                    ^^^^^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `counter` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "0bf76485eef2ae505f08be843462b7feda9425ef", "filename": "src/test/ui/nll/issue-54556-stephaneyfx.nll.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.nll.stderr?ref=056cfffd1ba69e2e80d87c728d8475944dfbe050", "patch": "@@ -0,0 +1,19 @@\n+error[E0597]: `stmt` does not live long enough\n+  --> $DIR/issue-54556-stephaneyfx.rs:27:21\n+   |\n+LL |     let rows = Rows(&stmt);\n+   |                     ^^^^^ borrowed value does not live long enough\n+LL |     rows.map(|row| row).next()\n+   |     ------------------- a temporary with access to the borrow is created here ...\n+...\n+LL | }\n+   | -\n+   | |\n+   | `stmt` dropped here while still borrowed\n+   | ... and the borrow might be used here, when that temporary is dropped and runs the destructor for type `std::iter::Map<Rows<'_>, [closure@$DIR/issue-54556-stephaneyfx.rs:28:14: 28:23]>`\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider forcing this temporary to be dropped sooner, before the block's local variables are dropped. For example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block.\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "10a4e21497c73321f4dabfc157372322fdf2f14e", "filename": "src/test/ui/nll/issue-54556-stephaneyfx.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.rs?ref=056cfffd1ba69e2e80d87c728d8475944dfbe050", "patch": "@@ -0,0 +1,35 @@\n+// This is a reduction of a concrete test illustrating a case that was\n+// annoying to Rust developer stephaneyfx (see issue #46413).\n+//\n+// With resolving issue #54556, pnkfelix hopes that the new diagnostic\n+// output produced by NLL helps to *explain* the semantic significance\n+// of temp drop order, and thus why storing the result in `x` and then\n+// returning `x` works.\n+\n+pub struct Statement;\n+\n+pub struct Rows<'stmt>(&'stmt Statement);\n+\n+impl<'stmt> Drop for Rows<'stmt> {\n+    fn drop(&mut self) {}\n+}\n+\n+impl<'stmt> Iterator for Rows<'stmt> {\n+    type Item = String;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        None\n+    }\n+}\n+\n+fn get_names() -> Option<String> {\n+    let stmt = Statement;\n+    let rows = Rows(&stmt);\n+    rows.map(|row| row).next()\n+    // let x = rows.map(|row| row).next();\n+    // x\n+    //\n+    // Removing the map works too as does removing the Drop impl.\n+}\n+\n+fn main() {}"}, {"sha": "4e581a516b2d3651dc401a9b1b12b2294ae4b853", "filename": "src/test/ui/nll/issue-54556-stephaneyfx.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-stephaneyfx.stderr?ref=056cfffd1ba69e2e80d87c728d8475944dfbe050", "patch": "@@ -0,0 +1,14 @@\n+error[E0597]: `stmt` does not live long enough\n+  --> $DIR/issue-54556-stephaneyfx.rs:27:22\n+   |\n+LL |     let rows = Rows(&stmt);\n+   |                      ^^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `stmt` dropped here while still borrowed\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "513dca7950af92ef170f22acddb4196a0c151c51", "filename": "src/test/ui/nll/issue-54556-temps-in-tail-diagnostic.nll.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.nll.stderr?ref=056cfffd1ba69e2e80d87c728d8475944dfbe050", "patch": "@@ -0,0 +1,19 @@\n+error[E0597]: `_thing1` does not live long enough\n+  --> $DIR/issue-54556-temps-in-tail-diagnostic.rs:5:11\n+   |\n+LL |         D(&_thing1).end()\n+   |         --^^^^^^^^-\n+   |         | |\n+   |         | borrowed value does not live long enough\n+   |         a temporary with access to the borrow is created here ...\n+LL |     }\n+   |     - `_thing1` dropped here while still borrowed\n+LL | \n+LL |     ;\n+   |     - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "63b04333de4be25199f1a3882696681d56e531e0", "filename": "src/test/ui/nll/issue-54556-temps-in-tail-diagnostic.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.rs?ref=056cfffd1ba69e2e80d87c728d8475944dfbe050", "patch": "@@ -0,0 +1,23 @@\n+fn main() {\n+    {\n+        let mut _thing1 = D(Box::new(\"thing1\"));\n+        // D(\"other\").next(&_thing1).end()\n+        D(&_thing1).end()\n+    }\n+\n+    ;\n+}\n+\n+#[derive(Debug)]\n+struct D<T: std::fmt::Debug>(T);\n+\n+impl<T: std::fmt::Debug>  Drop for D<T> {\n+    fn drop(&mut self) {\n+        println!(\"dropping {:?})\", self);\n+    }\n+}\n+\n+impl<T: std::fmt::Debug> D<T> {\n+    fn next<U: std::fmt::Debug>(&self, _other: U) -> D<U> { D(_other) }\n+    fn end(&self) { }\n+}"}, {"sha": "a74970f71182a77cfb3719d1e6d4467a9610aa32", "filename": "src/test/ui/nll/issue-54556-temps-in-tail-diagnostic.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.stderr?ref=056cfffd1ba69e2e80d87c728d8475944dfbe050", "patch": "@@ -0,0 +1,14 @@\n+error[E0597]: `_thing1` does not live long enough\n+  --> $DIR/issue-54556-temps-in-tail-diagnostic.rs:5:12\n+   |\n+LL |         D(&_thing1).end()\n+   |            ^^^^^^^ borrowed value does not live long enough\n+LL |     }\n+   |     - `_thing1` dropped here while still borrowed\n+LL | \n+LL |     ;\n+   |     - borrowed value needs to live until here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "9911fc9729190a08b256dd1e31f55dd2872a8ae7", "filename": "src/test/ui/nll/issue-54556-used-vs-unused-tails.nll.stderr", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.nll.stderr?ref=056cfffd1ba69e2e80d87c728d8475944dfbe050", "patch": "@@ -0,0 +1,113 @@\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:10:55\n+   |\n+LL |     {              let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; // suggest `;`\n+   |                                                     --^^^^-          - - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n+   |                                                     | |              |\n+   |                                                     | |              `_t1` dropped here while still borrowed\n+   |                                                     | borrowed value does not live long enough\n+   |                                                     a temporary with access to the borrow is created here ...\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\n+\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:12:55\n+   |\n+LL |     {            { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() }  } ; // suggest `;`\n+   |                                                     --^^^^-       -    - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n+   |                                                     | |           |\n+   |                                                     | |           `_t1` dropped here while still borrowed\n+   |                                                     | borrowed value does not live long enough\n+   |                                                     a temporary with access to the borrow is created here ...\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\n+\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:14:55\n+   |\n+LL |     {            { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() }; }   // suggest `;`\n+   |                                                     --^^^^-       -- ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n+   |                                                     | |           |\n+   |                                                     | |           `_t1` dropped here while still borrowed\n+   |                                                     | borrowed value does not live long enough\n+   |                                                     a temporary with access to the borrow is created here ...\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\n+\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:16:55\n+   |\n+LL |     let _ =      { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; // suggest `;`\n+   |                                                     --^^^^-          - - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n+   |                                                     | |              |\n+   |                                                     | |              `_t1` dropped here while still borrowed\n+   |                                                     | borrowed value does not live long enough\n+   |                                                     a temporary with access to the borrow is created here ...\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\n+\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:18:55\n+   |\n+LL |     let _u =     { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).unit()   } ; // suggest `;`\n+   |                                                     --^^^^-          - - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n+   |                                                     | |              |\n+   |                                                     | |              `_t1` dropped here while still borrowed\n+   |                                                     | borrowed value does not live long enough\n+   |                                                     a temporary with access to the borrow is created here ...\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\n+\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:20:55\n+   |\n+LL |     let _x =     { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; // `let x = ...; x`\n+   |                                                     --^^^^-          - - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n+   |                                                     | |              |\n+   |                                                     | |              `_t1` dropped here while still borrowed\n+   |                                                     | borrowed value does not live long enough\n+   |                                                     a temporary with access to the borrow is created here ...\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider forcing this temporary to be dropped sooner, before the block's local variables are dropped. For example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block.\n+\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:24:55\n+   |\n+LL |     _y =         { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() } ; // `let x = ...; x`\n+   |                                                     --^^^^-       - - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n+   |                                                     | |           |\n+   |                                                     | |           `_t1` dropped here while still borrowed\n+   |                                                     | borrowed value does not live long enough\n+   |                                                     a temporary with access to the borrow is created here ...\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider forcing this temporary to be dropped sooner, before the block's local variables are dropped. For example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block.\n+\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:30:55\n+   |\n+LL | fn f_local_ref() { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).unit()   }  // suggest `;`\n+   |                                                     --^^^^-          -\n+   |                                                     | |              |\n+   |                                                     | |              `_t1` dropped here while still borrowed\n+   |                                                     | |              ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n+   |                                                     | borrowed value does not live long enough\n+   |                                                     a temporary with access to the borrow is created here ...\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped.\n+\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:32:55\n+   |\n+LL | fn f() -> String { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()   }   // `let x = ...; x`\n+   |                                                     --^^^^-         -\n+   |                                                     | |             |\n+   |                                                     | |             `_t1` dropped here while still borrowed\n+   |                                                     | |             ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n+   |                                                     | borrowed value does not live long enough\n+   |                                                     a temporary with access to the borrow is created here ...\n+   |\n+   = note: The temporary is part of an expression at the end of a block. Consider forcing this temporary to be dropped sooner, before the block's local variables are dropped. For example, you could save the expression's value in a new local variable `x` and then make `x` be the expression at the end of the block.\n+\n+error: aborting due to 9 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "64e4f75724aada39c867190435cb2d57bc07f4c5", "filename": "src/test/ui/nll/issue-54556-used-vs-unused-tails.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.rs?ref=056cfffd1ba69e2e80d87c728d8475944dfbe050", "patch": "@@ -0,0 +1,48 @@\n+// Ths test case is exploring the space of how blocs with tail\n+// expressions and statements can be composed, trying to keep each\n+// case on one line so that we can compare them via a vertical scan\n+// with the human eye.\n+\n+// Each comment on the right side of the line is summarizing the\n+// expected suggestion from the diagnostic for issue #54556.\n+\n+fn main() {\n+    {              let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; // suggest `;`\n+\n+    {            { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() }  } ; // suggest `;`\n+\n+    {            { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() }; }   // suggest `;`\n+\n+    let _ =      { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; // suggest `;`\n+\n+    let _u =     { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).unit()   } ; // suggest `;`\n+\n+    let _x =     { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; // `let x = ...; x`\n+    let _x =     { let mut _t1 = D(Box::new(\"t1\")); let x = D(&_t1).end(); x } ; // no error\n+\n+    let mut _y;\n+    _y =         { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() } ; // `let x = ...; x`\n+    _y =         { let mut _t1 = D(Box::new(\"t1\")); let x = D(&_t1).end(); x } ; // no error\n+}\n+\n+fn f_param_ref(_t1: D<Box<&'static str>>) {         D(&_t1).unit()   }  // no error\n+\n+fn f_local_ref() { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).unit()   }  // suggest `;`\n+\n+fn f() -> String { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()   }   // `let x = ...; x`\n+\n+\n+#[derive(Debug)]\n+struct D<T: std::fmt::Debug>(T);\n+\n+impl<T: std::fmt::Debug>  Drop for D<T> {\n+    fn drop(&mut self) {\n+        println!(\"dropping {:?})\", self);\n+    }\n+}\n+\n+impl<T: std::fmt::Debug> D<T> {\n+    fn next<U: std::fmt::Debug>(&self, _other: U) -> D<U> { D(_other) }\n+    fn end(&self) -> String { format!(\"End({:?})\", self.0) }\n+    fn unit(&self) { }\n+}"}, {"sha": "c75707b2aee172d9167cf8c790e26112f641e8de", "filename": "src/test/ui/nll/issue-54556-used-vs-unused-tails.stderr", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-used-vs-unused-tails.stderr?ref=056cfffd1ba69e2e80d87c728d8475944dfbe050", "patch": "@@ -0,0 +1,86 @@\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:10:56\n+   |\n+LL |     {              let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; // suggest `;`\n+   |                                                        ^^^           - - borrowed value needs to live until here\n+   |                                                        |             |\n+   |                                                        |             `_t1` dropped here while still borrowed\n+   |                                                        borrowed value does not live long enough\n+\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:12:56\n+   |\n+LL |     {            { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() }  } ; // suggest `;`\n+   |                                                        ^^^        -    - borrowed value needs to live until here\n+   |                                                        |          |\n+   |                                                        |          `_t1` dropped here while still borrowed\n+   |                                                        borrowed value does not live long enough\n+\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:14:56\n+   |\n+LL |     {            { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() }; }   // suggest `;`\n+   |                                                        ^^^        -- borrowed value needs to live until here\n+   |                                                        |          |\n+   |                                                        |          `_t1` dropped here while still borrowed\n+   |                                                        borrowed value does not live long enough\n+\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:16:56\n+   |\n+LL |     let _ =      { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; // suggest `;`\n+   |                                                        ^^^           - - borrowed value needs to live until here\n+   |                                                        |             |\n+   |                                                        |             `_t1` dropped here while still borrowed\n+   |                                                        borrowed value does not live long enough\n+\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:18:56\n+   |\n+LL |     let _u =     { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).unit()   } ; // suggest `;`\n+   |                                                        ^^^           - - borrowed value needs to live until here\n+   |                                                        |             |\n+   |                                                        |             `_t1` dropped here while still borrowed\n+   |                                                        borrowed value does not live long enough\n+\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:20:56\n+   |\n+LL |     let _x =     { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()    } ; // `let x = ...; x`\n+   |                                                        ^^^           - - borrowed value needs to live until here\n+   |                                                        |             |\n+   |                                                        |             `_t1` dropped here while still borrowed\n+   |                                                        borrowed value does not live long enough\n+\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:24:56\n+   |\n+LL |     _y =         { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end() } ; // `let x = ...; x`\n+   |                                                        ^^^        - - borrowed value needs to live until here\n+   |                                                        |          |\n+   |                                                        |          `_t1` dropped here while still borrowed\n+   |                                                        borrowed value does not live long enough\n+\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:30:56\n+   |\n+LL | fn f_local_ref() { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).unit()   }  // suggest `;`\n+   |                                                        ^^^           - `_t1` dropped here while still borrowed\n+   |                                                        |\n+   |                                                        borrowed value does not live long enough\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error[E0597]: `_t1` does not live long enough\n+  --> $DIR/issue-54556-used-vs-unused-tails.rs:32:56\n+   |\n+LL | fn f() -> String { let mut _t1 = D(Box::new(\"t1\")); D(&_t1).end()   }   // `let x = ...; x`\n+   |                                                        ^^^          - `_t1` dropped here while still borrowed\n+   |                                                        |\n+   |                                                        borrowed value does not live long enough\n+   |\n+   = note: values in a scope are dropped in the opposite order they are created\n+\n+error: aborting due to 9 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "a13e59fa48b5cc984e82e24fb751b081cd412be7", "filename": "src/test/ui/nll/issue-54556-wrap-it-up.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-54556-wrap-it-up.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-54556-wrap-it-up.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-wrap-it-up.nll.stderr?ref=056cfffd1ba69e2e80d87c728d8475944dfbe050", "patch": "@@ -0,0 +1,14 @@\n+error[E0506]: cannot assign to `x` because it is borrowed\n+  --> $DIR/issue-54556-wrap-it-up.rs:27:5\n+   |\n+LL |     let wrap = Wrap { p: &mut x };\n+   |                          ------ borrow of `x` occurs here\n+...\n+LL |     x = 1; //~ ERROR cannot assign to `x` because it is borrowed [E0506]\n+   |     ^^^^^ assignment to borrowed `x` occurs here\n+LL | }\n+   | - borrow might be used here, when `foo` is dropped and runs the destructor for type `Foo<'_>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "11dbef0d8646098d83b6c8b480baf8ac4b73f75b", "filename": "src/test/ui/nll/issue-54556-wrap-it-up.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-54556-wrap-it-up.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-54556-wrap-it-up.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-wrap-it-up.rs?ref=056cfffd1ba69e2e80d87c728d8475944dfbe050", "patch": "@@ -0,0 +1,28 @@\n+// This is testing how the diagnostic from issue #54556 behaves when\n+// the destructor code is attached to a place held in a field of the\n+// temporary being dropped.\n+//\n+// Eventually it would be nice if the diagnostic would actually report\n+// that specific place and its type that implements the `Drop` trait.\n+// But for the short term, it is acceptable to just print out the\n+// whole type of the temporary.\n+\n+#![allow(warnings)]\n+\n+struct Wrap<'p> { p: &'p mut i32 }\n+\n+impl<'p> Drop for Wrap<'p> {\n+    fn drop(&mut self) {\n+        *self.p += 1;\n+    }\n+}\n+\n+struct Foo<'p> { a: String, b: Wrap<'p> }\n+\n+fn main() {\n+    let mut x = 0;\n+    let wrap = Wrap { p: &mut x };\n+    let s = String::from(\"str\");\n+    let foo = Foo { a: s, b: wrap };\n+    x = 1; //~ ERROR cannot assign to `x` because it is borrowed [E0506]\n+}"}, {"sha": "a0c19b96387980796b68a28e174b035d259bd790", "filename": "src/test/ui/nll/issue-54556-wrap-it-up.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-54556-wrap-it-up.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/056cfffd1ba69e2e80d87c728d8475944dfbe050/src%2Ftest%2Fui%2Fnll%2Fissue-54556-wrap-it-up.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-wrap-it-up.stderr?ref=056cfffd1ba69e2e80d87c728d8475944dfbe050", "patch": "@@ -0,0 +1,12 @@\n+error[E0506]: cannot assign to `x` because it is borrowed\n+  --> $DIR/issue-54556-wrap-it-up.rs:27:5\n+   |\n+LL |     let wrap = Wrap { p: &mut x };\n+   |                               - borrow of `x` occurs here\n+...\n+LL |     x = 1; //~ ERROR cannot assign to `x` because it is borrowed [E0506]\n+   |     ^^^^^ assignment to borrowed `x` occurs here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}]}