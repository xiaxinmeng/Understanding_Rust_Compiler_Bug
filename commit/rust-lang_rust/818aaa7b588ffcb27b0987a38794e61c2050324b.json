{"sha": "818aaa7b588ffcb27b0987a38794e61c2050324b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxOGFhYTdiNTg4ZmZjYjI3YjA5ODdhMzg3OTRlNjFjMjA1MDMyNGI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-07-02T11:15:05Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-07-02T11:15:05Z"}, "message": "Clean up E0716 explanation", "tree": {"sha": "89aaa4c1aab4f450e5aa2c022bfedf96288bc9e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89aaa4c1aab4f450e5aa2c022bfedf96288bc9e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/818aaa7b588ffcb27b0987a38794e61c2050324b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/818aaa7b588ffcb27b0987a38794e61c2050324b", "html_url": "https://github.com/rust-lang/rust/commit/818aaa7b588ffcb27b0987a38794e61c2050324b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/818aaa7b588ffcb27b0987a38794e61c2050324b/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c86039b33343de264d8b3b1a9e3591b10d5615e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c86039b33343de264d8b3b1a9e3591b10d5615e8", "html_url": "https://github.com/rust-lang/rust/commit/c86039b33343de264d8b3b1a9e3591b10d5615e8"}], "stats": {"total": 55, "additions": 25, "deletions": 30}, "files": [{"sha": "c6d0337ddda56d0c10efa53e415cb69d9eb5b35a", "filename": "src/librustc_error_codes/error_codes/E0716.md", "status": "modified", "additions": 25, "deletions": 30, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/818aaa7b588ffcb27b0987a38794e61c2050324b/src%2Flibrustc_error_codes%2Ferror_codes%2FE0716.md", "raw_url": "https://github.com/rust-lang/rust/raw/818aaa7b588ffcb27b0987a38794e61c2050324b/src%2Flibrustc_error_codes%2Ferror_codes%2FE0716.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0716.md?ref=818aaa7b588ffcb27b0987a38794e61c2050324b", "patch": "@@ -1,5 +1,4 @@\n-This error indicates that a temporary value is being dropped\n-while a borrow is still in active use.\n+A temporary value is being dropped while a borrow is still in active use.\n \n Erroneous code example:\n \n@@ -11,12 +10,11 @@ let p = bar(&foo());\n let q = *p;\n ```\n \n-Here, the expression `&foo()` is borrowing the expression\n-`foo()`. As `foo()` is a call to a function, and not the name of\n-a variable, this creates a **temporary** -- that temporary stores\n-the return value from `foo()` so that it can be borrowed.\n-You could imagine that `let p = bar(&foo());` is equivalent\n-to this:\n+Here, the expression `&foo()` is borrowing the expression `foo()`. As `foo()` is\n+a call to a function, and not the name of a variable, this creates a\n+**temporary** -- that temporary stores the return value from `foo()` so that it\n+can be borrowed. You could imagine that `let p = bar(&foo());` is equivalent to\n+this:\n \n ```compile_fail,E0597\n # fn foo() -> i32 { 22 }\n@@ -28,16 +26,14 @@ let p = {\n let q = p;\n ```\n \n-Whenever a temporary is created, it is automatically dropped (freed)\n-according to fixed rules. Ordinarily, the temporary is dropped\n-at the end of the enclosing statement -- in this case, after the `let`.\n-This is illustrated in the example above by showing that `tmp` would\n-be freed as we exit the block.\n+Whenever a temporary is created, it is automatically dropped (freed) according\n+to fixed rules. Ordinarily, the temporary is dropped at the end of the enclosing\n+statement -- in this case, after the `let`. This is illustrated in the example\n+above by showing that `tmp` would be freed as we exit the block.\n \n-To fix this problem, you need to create a local variable\n-to store the value in rather than relying on a temporary.\n-For example, you might change the original program to\n-the following:\n+To fix this problem, you need to create a local variable to store the value in\n+rather than relying on a temporary. For example, you might change the original\n+program to the following:\n \n ```\n fn foo() -> i32 { 22 }\n@@ -47,16 +43,15 @@ let p = bar(&value);\n let q = *p;\n ```\n \n-By introducing the explicit `let value`, we allocate storage\n-that will last until the end of the enclosing block (when `value`\n-goes out of scope). When we borrow `&value`, we are borrowing a\n-local variable that already exists, and hence no temporary is created.\n+By introducing the explicit `let value`, we allocate storage that will last\n+until the end of the enclosing block (when `value` goes out of scope). When we\n+borrow `&value`, we are borrowing a local variable that already exists, and\n+hence no temporary is created.\n \n-Temporaries are not always dropped at the end of the enclosing\n-statement. In simple cases where the `&` expression is immediately\n-stored into a variable, the compiler will automatically extend\n-the lifetime of the temporary until the end of the enclosing\n-block. Therefore, an alternative way to fix the original\n+Temporaries are not always dropped at the end of the enclosing statement. In\n+simple cases where the `&` expression is immediately stored into a variable, the\n+compiler will automatically extend the lifetime of the temporary until the end\n+of the enclosing block. Therefore, an alternative way to fix the original\n program is to write `let tmp = &foo()` and not `let tmp = foo()`:\n \n ```\n@@ -67,10 +62,10 @@ let p = bar(value);\n let q = *p;\n ```\n \n-Here, we are still borrowing `foo()`, but as the borrow is assigned\n-directly into a variable, the temporary will not be dropped until\n-the end of the enclosing block. Similar rules apply when temporaries\n-are stored into aggregate structures like a tuple or struct:\n+Here, we are still borrowing `foo()`, but as the borrow is assigned directly\n+into a variable, the temporary will not be dropped until the end of the\n+enclosing block. Similar rules apply when temporaries are stored into aggregate\n+structures like a tuple or struct:\n \n ```\n // Here, two temporaries are created, but"}]}