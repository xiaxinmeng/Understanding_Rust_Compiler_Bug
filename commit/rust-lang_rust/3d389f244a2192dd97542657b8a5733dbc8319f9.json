{"sha": "3d389f244a2192dd97542657b8a5733dbc8319f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMzg5ZjI0NGEyMTkyZGQ5NzU0MjY1N2I4YTU3MzNkYmM4MzE5Zjk=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-03-26T17:39:03Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-03-26T17:39:03Z"}, "message": "Test the size_hint of empty ranges too", "tree": {"sha": "542aedb4357b80456b6b21a92e46c4a2d073ed9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/542aedb4357b80456b6b21a92e46c4a2d073ed9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d389f244a2192dd97542657b8a5733dbc8319f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d389f244a2192dd97542657b8a5733dbc8319f9", "html_url": "https://github.com/rust-lang/rust/commit/3d389f244a2192dd97542657b8a5733dbc8319f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d389f244a2192dd97542657b8a5733dbc8319f9/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01162d86c533cfb08221bb9475042ca94d1fd002", "url": "https://api.github.com/repos/rust-lang/rust/commits/01162d86c533cfb08221bb9475042ca94d1fd002", "html_url": "https://github.com/rust-lang/rust/commit/01162d86c533cfb08221bb9475042ca94d1fd002"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "d5b581d336d2f6f254a4fd7e10c6d6c418ca18f2", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3d389f244a2192dd97542657b8a5733dbc8319f9/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d389f244a2192dd97542657b8a5733dbc8319f9/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=3d389f244a2192dd97542657b8a5733dbc8319f9", "patch": "@@ -1804,20 +1804,24 @@ fn test_range_inclusive_folds() {\n #[test]\n fn test_range_size_hint() {\n     use core::usize::MAX as UMAX;\n+    assert_eq!((0..0usize).size_hint(), (0, Some(0)));\n     assert_eq!((0..100usize).size_hint(), (100, Some(100)));\n     assert_eq!((0..UMAX).size_hint(), (UMAX, Some(UMAX)));\n \n     let umax = u128::try_from(UMAX).unwrap();\n+    assert_eq!((0..0u128).size_hint(), (0, Some(0)));\n     assert_eq!((0..100u128).size_hint(), (100, Some(100)));\n     assert_eq!((0..umax).size_hint(), (UMAX, Some(UMAX)));\n     assert_eq!((0..umax + 1).size_hint(), (UMAX, None));\n \n     use core::isize::{MAX as IMAX, MIN as IMIN};\n+    assert_eq!((0..0isize).size_hint(), (0, Some(0)));\n     assert_eq!((-100..100isize).size_hint(), (200, Some(200)));\n     assert_eq!((IMIN..IMAX).size_hint(), (UMAX, Some(UMAX)));\n \n     let imin = i128::try_from(IMIN).unwrap();\n     let imax = i128::try_from(IMAX).unwrap();\n+    assert_eq!((0..0i128).size_hint(), (0, Some(0)));\n     assert_eq!((-100..100i128).size_hint(), (200, Some(200)));\n     assert_eq!((imin..imax).size_hint(), (UMAX, Some(UMAX)));\n     assert_eq!((imin..imax + 1).size_hint(), (UMAX, None));\n@@ -1826,23 +1830,31 @@ fn test_range_size_hint() {\n #[test]\n fn test_range_inclusive_size_hint() {\n     use core::usize::MAX as UMAX;\n+    assert_eq!((1..=0usize).size_hint(), (0, Some(0)));\n+    assert_eq!((0..=0usize).size_hint(), (1, Some(1)));\n     assert_eq!((0..=100usize).size_hint(), (101, Some(101)));\n     assert_eq!((0..=UMAX - 1).size_hint(), (UMAX, Some(UMAX)));\n     assert_eq!((0..=UMAX).size_hint(), (UMAX, None));\n \n     let umax = u128::try_from(UMAX).unwrap();\n+    assert_eq!((1..=0u128).size_hint(), (0, Some(0)));\n+    assert_eq!((0..=0u128).size_hint(), (1, Some(1)));\n     assert_eq!((0..=100u128).size_hint(), (101, Some(101)));\n     assert_eq!((0..=umax - 1).size_hint(), (UMAX, Some(UMAX)));\n     assert_eq!((0..=umax).size_hint(), (UMAX, None));\n     assert_eq!((0..=umax + 1).size_hint(), (UMAX, None));\n \n     use core::isize::{MAX as IMAX, MIN as IMIN};\n+    assert_eq!((0..=-1isize).size_hint(), (0, Some(0)));\n+    assert_eq!((0..=0isize).size_hint(), (1, Some(1)));\n     assert_eq!((-100..=100isize).size_hint(), (201, Some(201)));\n     assert_eq!((IMIN..=IMAX - 1).size_hint(), (UMAX, Some(UMAX)));\n     assert_eq!((IMIN..=IMAX).size_hint(), (UMAX, None));\n \n     let imin = i128::try_from(IMIN).unwrap();\n     let imax = i128::try_from(IMAX).unwrap();\n+    assert_eq!((0..=-1i128).size_hint(), (0, Some(0)));\n+    assert_eq!((0..=0i128).size_hint(), (1, Some(1)));\n     assert_eq!((-100..=100i128).size_hint(), (201, Some(201)));\n     assert_eq!((imin..=imax - 1).size_hint(), (UMAX, Some(UMAX)));\n     assert_eq!((imin..=imax).size_hint(), (UMAX, None));"}]}