{"sha": "572a4b71d5a906ab25a30025fc87529f123ee020", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MmE0YjcxZDVhOTA2YWIyNWEzMDAyNWZjODc1MjlmMTIzZWUwMjA=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-23T21:20:19Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-23T21:20:19Z"}, "message": "Make AddIncomingToPhi take single values rather than arrays", "tree": {"sha": "956c04e9f2647d2f8d689f4a16f84b26ce700f13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/956c04e9f2647d2f8d689f4a16f84b26ce700f13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/572a4b71d5a906ab25a30025fc87529f123ee020", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/572a4b71d5a906ab25a30025fc87529f123ee020", "html_url": "https://github.com/rust-lang/rust/commit/572a4b71d5a906ab25a30025fc87529f123ee020", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/572a4b71d5a906ab25a30025fc87529f123ee020/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64c69aa7b88b3ef66167f26cf681aaeeed33180e", "url": "https://api.github.com/repos/rust-lang/rust/commits/64c69aa7b88b3ef66167f26cf681aaeeed33180e", "html_url": "https://github.com/rust-lang/rust/commit/64c69aa7b88b3ef66167f26cf681aaeeed33180e"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "6495ded7d1cede910a25d197a91092e72637bfd5", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/572a4b71d5a906ab25a30025fc87529f123ee020/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572a4b71d5a906ab25a30025fc87529f123ee020/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=572a4b71d5a906ab25a30025fc87529f123ee020", "patch": "@@ -2455,7 +2455,7 @@ fn join_returns(parent_cx: @block_ctxt, in_cxs: [@block_ctxt],\n                 if option::is_none(phi) {\n                     phi = some(EmptyPhi(out, val_ty(*cell)));\n                 }\n-                AddIncomingToPhi(option::get(phi), [*cell], [cx.llbb]);\n+                AddIncomingToPhi(option::get(phi), *cell, cx.llbb);\n               }\n               _ {}\n             }"}, {"sha": "384cbb49ff9593f6a9ac3958e901f95fd1f95dc2", "filename": "src/comp/middle/trans_build.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/572a4b71d5a906ab25a30025fc87529f123ee020/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572a4b71d5a906ab25a30025fc87529f123ee020/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_build.rs?ref=572a4b71d5a906ab25a30025fc87529f123ee020", "patch": "@@ -465,13 +465,11 @@ fn Phi(cx: @block_ctxt, Ty: TypeRef, vals: [ValueRef], bbs: [BasicBlockRef])\n     ret phi;\n }\n \n-// FIXME we typically need only a single val and bb. With std::ptr::addr_of\n-// and a count of 1, we should be able to avoid the overhead of creating vecs.\n-fn AddIncomingToPhi(phi: ValueRef, vals: [ValueRef], bbs: [BasicBlockRef]) {\n+fn AddIncomingToPhi(phi: ValueRef, val: ValueRef, bb: BasicBlockRef) {\n     if llvm::LLVMIsUndef(phi) == lib::llvm::True { ret; }\n-    assert (vec::len::<ValueRef>(vals) == vec::len::<BasicBlockRef>(bbs));\n-    llvm::LLVMAddIncoming(phi, vec::to_ptr(vals), vec::to_ptr(bbs),\n-                          vec::len(vals));\n+    let valptr = std::unsafe::reinterpret_cast(std::ptr::addr_of(val));\n+    let bbptr = std::unsafe::reinterpret_cast(std::ptr::addr_of(bb));\n+    llvm::LLVMAddIncoming(phi, valptr, bbptr, 1u);\n }\n \n fn _UndefReturn(Fn: ValueRef) -> ValueRef {"}, {"sha": "a969649efb1db0914228dbbcbeb1067c8c0acf10", "filename": "src/comp/middle/trans_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/572a4b71d5a906ab25a30025fc87529f123ee020/src%2Fcomp%2Fmiddle%2Ftrans_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/572a4b71d5a906ab25a30025fc87529f123ee020/src%2Fcomp%2Fmiddle%2Ftrans_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_vec.rs?ref=572a4b71d5a906ab25a30025fc87529f123ee020", "patch": "@@ -289,8 +289,8 @@ fn iter_vec_raw(bcx: @block_ctxt, vptrptr: ValueRef, vec_ty: ty::t,\n         if ty::type_has_dynamic_size(bcx_tcx(bcx), unit_ty) {\n             unit_sz\n         } else { C_int(1) };\n-    AddIncomingToPhi(data_ptr, [InBoundsGEP(body_cx, data_ptr, [increment])],\n-                     [body_cx.llbb]);\n+    AddIncomingToPhi(data_ptr, InBoundsGEP(body_cx, data_ptr, [increment]),\n+                     body_cx.llbb);\n     Br(body_cx, header_cx.llbb);\n     ret next_cx;\n }"}]}