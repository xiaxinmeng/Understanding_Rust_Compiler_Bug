{"sha": "aeb5d6491246fcf53d6cb11bb3035d30580570e7", "node_id": "C_kwDOAAsO6NoAKGFlYjVkNjQ5MTI0NmZjZjUzZDZjYjExYmIzMDM1ZDMwNTgwNTcwZTc", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-02T15:58:21Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-02T22:44:26Z"}, "message": "Implement ToDef for ast::Attr", "tree": {"sha": "2c88458f266b288b5410be2697eb7422a87dc149", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c88458f266b288b5410be2697eb7422a87dc149"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aeb5d6491246fcf53d6cb11bb3035d30580570e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aeb5d6491246fcf53d6cb11bb3035d30580570e7", "html_url": "https://github.com/rust-lang/rust/commit/aeb5d6491246fcf53d6cb11bb3035d30580570e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aeb5d6491246fcf53d6cb11bb3035d30580570e7/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b7b09d329c174590a52ba570e20def528ea216a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b7b09d329c174590a52ba570e20def528ea216a", "html_url": "https://github.com/rust-lang/rust/commit/6b7b09d329c174590a52ba570e20def528ea216a"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "9be1619228cdf41d8faf70c8af79273ce08b9b8e", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aeb5d6491246fcf53d6cb11bb3035d30580570e7/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeb5d6491246fcf53d6cb11bb3035d30580570e7/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=aeb5d6491246fcf53d6cb11bb3035d30580570e7", "patch": "@@ -476,12 +476,12 @@ impl<'db> SemanticsImpl<'db> {\n     }\n \n     fn derive_macro_calls(&self, attr: &ast::Attr) -> Option<Vec<Option<MacroCallId>>> {\n-        let item = attr.syntax().parent().and_then(ast::Item::cast)?;\n-        let file_id = self.find_file(item.syntax()).file_id;\n-        let item = InFile::new(file_id, &item);\n+        let adt = attr.syntax().parent().and_then(ast::Adt::cast)?;\n+        let file_id = self.find_file(adt.syntax()).file_id;\n+        let adt = InFile::new(file_id, &adt);\n         let src = InFile::new(file_id, attr.clone());\n         self.with_ctx(|ctx| {\n-            let res = ctx.attr_to_derive_macro_call(item, src)?;\n+            let res = ctx.attr_to_derive_macro_call(adt, src)?;\n             Some(res.to_vec())\n         })\n     }\n@@ -909,17 +909,8 @@ impl<'db> SemanticsImpl<'db> {\n             return None;\n         }\n \n-        // Fetch hir::Attr definition\n-        // FIXME: Move this to ToDef impl?\n-        let adt = attr.syntax().parent().and_then(ast::Adt::cast)?;\n-        let attr_pos = adt.attrs().position(|it| it == attr)?;\n-        let attrs = {\n-            let file_id = self.find_file(adt.syntax()).file_id;\n-            let adt = InFile::new(file_id, adt);\n-            let def = self.with_ctx(|ctx| ctx.adt_to_def(adt))?;\n-            self.db.attrs(def.into())\n-        };\n-        let attr_def = attrs.get(attr_pos)?;\n+        let attr_def =\n+            ast::Attr::to_def(self, self.find_file(attr.syntax()).with_value(attr.clone()))?;\n \n         let mut derive_paths = attr_def.parse_path_comma_token_tree()?;\n         let derives = self.resolve_derive_macro(&attr)?;\n@@ -1214,6 +1205,7 @@ to_def_impls![\n     (crate::Local, ast::SelfParam, self_param_to_def),\n     (crate::Label, ast::Label, label_to_def),\n     (crate::Adt, ast::Adt, adt_to_def),\n+    (crate::Attr, ast::Attr, attr_to_def),\n ];\n \n fn find_root(node: &SyntaxNode) -> SyntaxNode {"}, {"sha": "fbce53eb166cdd31288ced36dd5767fe0ee47a52", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aeb5d6491246fcf53d6cb11bb3035d30580570e7/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeb5d6491246fcf53d6cb11bb3035d30580570e7/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=aeb5d6491246fcf53d6cb11bb3035d30580570e7", "patch": "@@ -210,6 +210,19 @@ impl SourceToDefCtx<'_, '_> {\n             ast::Adt::Union(it) => self.union_to_def(InFile::new(file_id, it)).map(AdtId::UnionId),\n         }\n     }\n+    pub(super) fn attr_to_def(\n+        &mut self,\n+        InFile { file_id, value }: InFile<ast::Attr>,\n+    ) -> Option<crate::Attr> {\n+        // FIXME: Use dynmap?\n+        let adt = value.syntax().parent().and_then(ast::Adt::cast)?;\n+        let attr_pos = ast::HasAttrs::attrs(&adt).position(|it| it == value)?;\n+        let attrs = {\n+            let def = self.adt_to_def(InFile::new(file_id, adt))?;\n+            self.db.attrs(def.into())\n+        };\n+        attrs.get(attr_pos).cloned()\n+    }\n     pub(super) fn bind_pat_to_def(\n         &mut self,\n         src: InFile<ast::IdentPat>,\n@@ -246,7 +259,7 @@ impl SourceToDefCtx<'_, '_> {\n \n     pub(super) fn attr_to_derive_macro_call(\n         &mut self,\n-        item: InFile<&ast::Item>,\n+        item: InFile<&ast::Adt>,\n         src: InFile<ast::Attr>,\n     ) -> Option<&[Option<MacroCallId>]> {\n         let map = self.dyn_map(item)?;"}]}