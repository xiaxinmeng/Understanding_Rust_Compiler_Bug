{"sha": "658169b7db0c09cb7d67d906b1caa68c0c4b020d", "node_id": "C_kwDOAAsO6NoAKDY1ODE2OWI3ZGIwYzA5Y2I3ZDY3ZDkwNmIxY2FhNjhjMGM0YjAyMGQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-12T05:41:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-12T05:41:25Z"}, "message": "Rollup merge of #102811 - the8472:bufread-memset, r=m-ou-se\n\nUse memset to initialize readbuf\n\nThe write loop was found to be slow in #102727\n\nThe proper fix is in #102760 but this might still help debug builds and code running under miri by using the write_bytes intrinsic instead of writing one byte at a time.", "tree": {"sha": "cce5c18fcf8ee24d1bbe67d26cbc6759f56ff50e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cce5c18fcf8ee24d1bbe67d26cbc6759f56ff50e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/658169b7db0c09cb7d67d906b1caa68c0c4b020d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjRlOFCRBK7hj4Ov3rIwAA0IUIADgTo4fi7crZ3Vvmrm2hd6dl\nbQzJRM3BLmJ5Cn1SljTh9oBTuT8mGbsdcV/oM47BibGhdfrWpGm5o9GGZLNwqvcp\nKusXtSDIUxXMt8xFbHy/DiTI3Nn4mybB/aOY1gLO2RmipFr6o5W//uAprj5fu+ff\nRm4EOfL5YeJW0EqOUUFjGH3X/5C18S72g2ZkPZUVGivXfF7+mzW1Dl1cleVZAnhm\nShV7wkIDjpZ283w1Di8L6pGgKxcYLutz0d+3dq04zPpz9GVDkPsZdHjyopOLy+va\n8CKzHLKAj1+1PDfCb/1mkEnMX1yGSaQ1QxYTIsToIdl5PZdKxnqDfAa4H/Ot2Yg=\n=AP2R\n-----END PGP SIGNATURE-----\n", "payload": "tree cce5c18fcf8ee24d1bbe67d26cbc6759f56ff50e\nparent d8091f89919957339929fb2f2cb7b05bc2e1f116\nparent b9e4a1cf264f9e8902ec5676a72a377ba4a9179c\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1665553285 +0530\ncommitter GitHub <noreply@github.com> 1665553285 +0530\n\nRollup merge of #102811 - the8472:bufread-memset, r=m-ou-se\n\nUse memset to initialize readbuf\n\nThe write loop was found to be slow in #102727\n\nThe proper fix is in #102760 but this might still help debug builds and code running under miri by using the write_bytes intrinsic instead of writing one byte at a time.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/658169b7db0c09cb7d67d906b1caa68c0c4b020d", "html_url": "https://github.com/rust-lang/rust/commit/658169b7db0c09cb7d67d906b1caa68c0c4b020d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/658169b7db0c09cb7d67d906b1caa68c0c4b020d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8091f89919957339929fb2f2cb7b05bc2e1f116", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8091f89919957339929fb2f2cb7b05bc2e1f116", "html_url": "https://github.com/rust-lang/rust/commit/d8091f89919957339929fb2f2cb7b05bc2e1f116"}, {"sha": "b9e4a1cf264f9e8902ec5676a72a377ba4a9179c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9e4a1cf264f9e8902ec5676a72a377ba4a9179c", "html_url": "https://github.com/rust-lang/rust/commit/b9e4a1cf264f9e8902ec5676a72a377ba4a9179c"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "4800eeda022bb7753ed60a1e051bb0393380086a", "filename": "library/std/src/io/readbuf.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/658169b7db0c09cb7d67d906b1caa68c0c4b020d/library%2Fstd%2Fsrc%2Fio%2Freadbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/658169b7db0c09cb7d67d906b1caa68c0c4b020d/library%2Fstd%2Fsrc%2Fio%2Freadbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Freadbuf.rs?ref=658169b7db0c09cb7d67d906b1caa68c0c4b020d", "patch": "@@ -3,10 +3,10 @@\n #[cfg(test)]\n mod tests;\n \n-use crate::cmp;\n use crate::fmt::{self, Debug, Formatter};\n use crate::io::{Result, Write};\n use crate::mem::{self, MaybeUninit};\n+use crate::{cmp, ptr};\n \n /// A borrowed byte buffer which is incrementally filled and initialized.\n ///\n@@ -250,8 +250,11 @@ impl<'a> BorrowedCursor<'a> {\n     /// Initializes all bytes in the cursor.\n     #[inline]\n     pub fn ensure_init(&mut self) -> &mut Self {\n-        for byte in self.uninit_mut() {\n-            byte.write(0);\n+        let uninit = self.uninit_mut();\n+        // SAFETY: 0 is a valid value for MaybeUninit<u8> and the length matches the allocation\n+        // since it is comes from a slice reference.\n+        unsafe {\n+            ptr::write_bytes(uninit.as_mut_ptr(), 0, uninit.len());\n         }\n         self.buf.init = self.buf.capacity();\n "}]}