{"sha": "b1ea2618d3fef50981c566564cf234b4b98f6328", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxZWEyNjE4ZDNmZWY1MDk4MWM1NjY1NjRjZjIzNGI0Yjk4ZjYzMjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-04T11:15:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-04T11:15:17Z"}, "message": "Auto merge of #83839 - ldm0:deref, r=petrochenkov\n\nRemove unneeded type resolving\n\nsmall optimization.", "tree": {"sha": "1e814d3cc71efe42434c2e1e14d5a4c1af26a01c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e814d3cc71efe42434c2e1e14d5a4c1af26a01c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1ea2618d3fef50981c566564cf234b4b98f6328", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1ea2618d3fef50981c566564cf234b4b98f6328", "html_url": "https://github.com/rust-lang/rust/commit/b1ea2618d3fef50981c566564cf234b4b98f6328", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1ea2618d3fef50981c566564cf234b4b98f6328/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f98135b7a24a54964f83ca1dc2dfb6bd1d35b1bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f98135b7a24a54964f83ca1dc2dfb6bd1d35b1bd", "html_url": "https://github.com/rust-lang/rust/commit/f98135b7a24a54964f83ca1dc2dfb6bd1d35b1bd"}, {"sha": "3982ac22497efda2bddf261021e88aa37b55e47b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3982ac22497efda2bddf261021e88aa37b55e47b", "html_url": "https://github.com/rust-lang/rust/commit/3982ac22497efda2bddf261021e88aa37b55e47b"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "e9e810344776b963d52a0eeb85fbd6ecbcc8c376", "filename": "compiler/rustc_typeck/src/check/expectation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1ea2618d3fef50981c566564cf234b4b98f6328/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpectation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1ea2618d3fef50981c566564cf234b4b98f6328/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpectation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpectation.rs?ref=b1ea2618d3fef50981c566564cf234b4b98f6328", "patch": "@@ -104,8 +104,8 @@ impl<'a, 'tcx> Expectation<'tcx> {\n     /// for the program to type-check). `only_has_type` will return\n     /// such a constraint, if it exists.\n     pub(super) fn only_has_type(self, fcx: &FnCtxt<'a, 'tcx>) -> Option<Ty<'tcx>> {\n-        match self.resolve(fcx) {\n-            ExpectHasType(ty) => Some(ty),\n+        match self {\n+            ExpectHasType(ty) => Some(fcx.resolve_vars_if_possible(ty)),\n             NoExpectation | ExpectCastableToType(_) | ExpectRvalueLikeUnsized(_) | IsLast(_) => {\n                 None\n             }"}, {"sha": "67714b714c9d02ee9aa8fdc4bf6f617fc376dc1d", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1ea2618d3fef50981c566564cf234b4b98f6328/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1ea2618d3fef50981c566564cf234b4b98f6328/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=b1ea2618d3fef50981c566564cf234b4b98f6328", "patch": "@@ -161,7 +161,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &'tcx hir::Expr<'tcx>,\n         expected: Expectation<'tcx>,\n     ) -> Ty<'tcx> {\n-        debug!(\">> type-checking: expr={:?} expected={:?}\", expr, expected);\n+        debug!(\">> type-checking: expected={:?}, expr={:?} \", expected, expr);\n \n         // True if `expr` is a `Try::from_ok(())` that is a result of desugaring a try block\n         // without the final expr (e.g. `try { return; }`). We don't want to generate an\n@@ -224,7 +224,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &'tcx hir::Expr<'tcx>,\n         expected: Expectation<'tcx>,\n     ) -> Ty<'tcx> {\n-        debug!(\"check_expr_kind(expr={:?}, expected={:?})\", expr, expected);\n+        debug!(\"check_expr_kind(expected={:?}, expr={:?})\", expected, expr);\n \n         let tcx = self.tcx;\n         match expr.kind {"}]}