{"sha": "3bfd0c9f0725b8fb096ea38446b4dcc2a3f90980", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZmQwYzlmMDcyNWI4ZmIwOTZlYTM4NDQ2YjRkY2MyYTNmOTA5ODA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-21T16:22:30Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-21T16:22:30Z"}, "message": "remove switch_ty reliance in codegen", "tree": {"sha": "219a687f01d1bef28ae44afcd82b648adaeffe1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/219a687f01d1bef28ae44afcd82b648adaeffe1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bfd0c9f0725b8fb096ea38446b4dcc2a3f90980", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bfd0c9f0725b8fb096ea38446b4dcc2a3f90980", "html_url": "https://github.com/rust-lang/rust/commit/3bfd0c9f0725b8fb096ea38446b4dcc2a3f90980", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bfd0c9f0725b8fb096ea38446b4dcc2a3f90980/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38bd83df88288f2f8d1fc2dd317189cac3825920", "url": "https://api.github.com/repos/rust-lang/rust/commits/38bd83df88288f2f8d1fc2dd317189cac3825920", "html_url": "https://github.com/rust-lang/rust/commit/38bd83df88288f2f8d1fc2dd317189cac3825920"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "5125ce779ed8e35d450279d132e4d89da282dcf5", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bfd0c9f0725b8fb096ea38446b4dcc2a3f90980/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfd0c9f0725b8fb096ea38446b4dcc2a3f90980/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=3bfd0c9f0725b8fb096ea38446b4dcc2a3f90980", "patch": "@@ -200,6 +200,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         targets: &Vec<mir::BasicBlock>,\n     ) {\n         let discr = self.codegen_operand(&mut bx, &discr);\n+        // `switch_ty` is redundant, sanity-check that.\n+        assert_eq!(discr.layout.ty, switch_ty);\n         if targets.len() == 2 {\n             // If there are two targets, emit br instead of switch\n             let lltrue = helper.llblock(self, targets[0]);"}, {"sha": "649766547990f264bf5b81fbcdd0705e383bebc6", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bfd0c9f0725b8fb096ea38446b4dcc2a3f90980/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfd0c9f0725b8fb096ea38446b4dcc2a3f90980/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=3bfd0c9f0725b8fb096ea38446b4dcc2a3f90980", "patch": "@@ -1075,6 +1075,8 @@ pub enum TerminatorKind<'tcx> {\n         discr: Operand<'tcx>,\n \n         /// The type of value being tested.\n+        /// This is always the same as the type of `discr`.\n+        /// FIXME: remove this redundant information. Currently, it is relied on by pretty-printing.\n         switch_ty: Ty<'tcx>,\n \n         /// Possible values. The locations to branch to in each case"}, {"sha": "a3cb450ff2860dea220bd37ca48045342c45297c", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3bfd0c9f0725b8fb096ea38446b4dcc2a3f90980/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bfd0c9f0725b8fb096ea38446b4dcc2a3f90980/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=3bfd0c9f0725b8fb096ea38446b4dcc2a3f90980", "patch": "@@ -24,9 +24,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n             Goto { target } => self.go_to_block(target),\n \n-            SwitchInt { ref discr, ref values, ref targets, .. } => {\n+            SwitchInt { ref discr, ref values, ref targets, switch_ty } => {\n                 let discr = self.read_immediate(self.eval_operand(discr, None)?)?;\n                 trace!(\"SwitchInt({:?})\", *discr);\n+                assert_eq!(discr.layout.ty, switch_ty);\n \n                 // Branch to the `otherwise` case by default, if no match is found.\n                 assert!(!targets.is_empty());\n@@ -55,7 +56,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 ref args,\n                 destination,\n                 ref cleanup,\n-                from_hir_call: _from_hir_call,\n+                from_hir_call: _,\n                 fn_span: _,\n             } => {\n                 let old_stack = self.frame_idx();"}]}