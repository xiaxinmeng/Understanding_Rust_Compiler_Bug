{"sha": "8404ea0c8af1e5006faa8aad0b4b2ab718204902", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0MDRlYTBjOGFmMWU1MDA2ZmFhOGFhZDBiNGIyYWI3MTgyMDQ5MDI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-21T04:10:59Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-21T04:11:13Z"}, "message": "doc: Fix more language ref tests", "tree": {"sha": "98f5e4eaa30701f988b980c5f440cd25280ab4b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98f5e4eaa30701f988b980c5f440cd25280ab4b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8404ea0c8af1e5006faa8aad0b4b2ab718204902", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8404ea0c8af1e5006faa8aad0b4b2ab718204902", "html_url": "https://github.com/rust-lang/rust/commit/8404ea0c8af1e5006faa8aad0b4b2ab718204902", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8404ea0c8af1e5006faa8aad0b4b2ab718204902/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfcbec3cc3bde0b8e811520e3bd842f53c2c9e26", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfcbec3cc3bde0b8e811520e3bd842f53c2c9e26", "html_url": "https://github.com/rust-lang/rust/commit/cfcbec3cc3bde0b8e811520e3bd842f53c2c9e26"}], "stats": {"total": 78, "additions": 37, "deletions": 41}, "files": [{"sha": "26d4db3adeb729fa249a074a1275fe992ca40d9a", "filename": "doc/rust.md", "status": "modified", "additions": 37, "deletions": 41, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/8404ea0c8af1e5006faa8aad0b4b2ab718204902/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/8404ea0c8af1e5006faa8aad0b4b2ab718204902/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=8404ea0c8af1e5006faa8aad0b4b2ab718204902", "patch": "@@ -1328,7 +1328,7 @@ native mod kernel32 { }\n The `link_name` attribute allows the default library naming behavior to\n be overriden by explicitly specifying the name of the library.\n \n-~~~\n+~~~{.xfail-test}\n #[link_name = \"crypto\"]\n native mod mycrypto { }\n ~~~\n@@ -2714,11 +2714,11 @@ order specified by the tuple type.\n \n An example of a tuple type and its use:\n \n-~~~~{.xfail-test}\n+~~~~\n type pair = (int,str);\n let p: pair = (10,\"hello\");\n let (a, b) = p;\n-assert (b == \"world\");\n+assert b != \"world\";\n ~~~~\n \n ### Vector types\n@@ -2741,8 +2741,8 @@ behaviour supports idiomatic in-place \"growth\" of a mutable slot holding a\n vector:\n \n \n-~~~~{.xfail-test}\n-let v: mutable [int] = [1, 2, 3];\n+~~~~\n+let mut v: [int] = [1, 2, 3];\n v += [4, 5, 6];\n ~~~~\n \n@@ -2796,12 +2796,12 @@ consists of a sequence of input slots, an optional set of\n \n An example of a `fn` type:\n \n-~~~~~~~~{.xfail-test}\n+~~~~~~~~\n fn add(x: int, y: int) -> int {\n   ret x + y;\n }\n \n-let int x = add(5,7);\n+let x = add(5,7);\n \n type binop = fn(int,int) -> int;\n let bo: binop = add;\n@@ -2879,9 +2879,11 @@ has a set of points before and after it in the implied control flow.\n \n For example, this code:\n \n-~~~~~~~~{.xfail-test}\n- s = \"hello, world\";\n- print(s);\n+~~~~~~~~\n+# let s;\n+\n+s = \"hello, world\";\n+io::println(s);\n ~~~~~~~~\n \n Consists of 2 statements, 3 expressions and 12 points:\n@@ -2904,8 +2906,11 @@ Consists of 2 statements, 3 expressions and 12 points:\n Whereas this code:\n \n \n-~~~~~~~~{.xfail-test}\n-print(x() + y());\n+~~~~~~~~\n+# fn x() -> str { \"\" }\n+# fn y() -> str { \"\" }\n+\n+io::println(x() + y());\n ~~~~~~~~\n \n Consists of 1 statement, 7 expressions and 14 points:\n@@ -3200,19 +3205,12 @@ let x: @int = @10;\n let x: ~int = ~10;\n ~~~~~~~~\n \n-Some operations implicitly dereference boxes. Examples of such @dfn{implicit\n-dereference} operations are:\n-\n-* arithmetic operators (`x + y - z`)\n-* field selection (`x.y.z`)\n-\n-\n-An example of an implicit-dereference operation performed on box values:\n+Some operations (such as field selection) implicitly dereference boxes. An\n+example of an @dfn{implicit dereference} operation performed on box values:\n \n-~~~~~~~~{.xfail-test}\n-let x: @int = @10;\n-let y: @int = @12;\n-assert (x + y == 22);\n+~~~~~~~~\n+let x = @{y: 10};\n+assert x.y == 10;\n ~~~~~~~~\n \n Other operations act on box values as single-word-sized address values. For\n@@ -3383,20 +3381,17 @@ The result of a `spawn` call is a `core::task::task` value.\n \n An example of a `spawn` call:\n \n-~~~~{.xfail-test}\n-import task::*;\n-import comm::*;\n-\n-let p = port();\n-let c = chan(p);\n+~~~~\n+let po = comm::port();\n+let ch = comm::chan(po);\n \n-spawn {||\n+task::spawn {||\n     // let task run, do other things\n     // ...\n-    send(c, true);\n+    comm::send(ch, true);\n };\n \n-let result = recv(p);\n+let result = comm::recv(po);\n ~~~~\n \n \n@@ -3408,10 +3403,10 @@ channel's outgoing buffer.\n \n An example of a send:\n \n-~~~~{.xfail-test}\n-import comm::*;\n-let c: chan<str> = ...;\n-send(c, \"hello, world\");\n+~~~~\n+let po = comm::port();\n+let ch = comm::chan(po);\n+comm::send(ch, \"hello, world\");\n ~~~~\n \n \n@@ -3424,10 +3419,11 @@ time the port deques a value to return, and un-blocks the receiving task.\n \n An example of a *receive*:\n \n-~~~~~~~~{.xfail-test}\n-import comm::*;\n-let p: port<str> = ...;\n-let s = recv(p);\n+~~~~~~~~\n+# let po = comm::port();\n+# let ch = comm::chan(po);\n+# comm::send(ch, \"\");\n+let s = comm::recv(po);\n ~~~~~~~~\n \n "}]}