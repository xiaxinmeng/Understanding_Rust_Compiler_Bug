{"sha": "8d9bb17204c0b3b9c8ade3569ac4501fac18b885", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkOWJiMTcyMDRjMGIzYjljOGFkZTM1NjlhYzQ1MDFmYWMxOGI4ODU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-05T20:50:34Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-05T20:50:34Z"}, "message": "Extend the solution to encompass HRTB", "tree": {"sha": "33409da07ba25f0b4f078be7abffe73887c65be4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33409da07ba25f0b4f078be7abffe73887c65be4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d9bb17204c0b3b9c8ade3569ac4501fac18b885", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d9bb17204c0b3b9c8ade3569ac4501fac18b885", "html_url": "https://github.com/rust-lang/rust/commit/8d9bb17204c0b3b9c8ade3569ac4501fac18b885", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d9bb17204c0b3b9c8ade3569ac4501fac18b885/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be8d9bb98a140d4a4df762e2ea44109c2f05ce6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/be8d9bb98a140d4a4df762e2ea44109c2f05ce6c", "html_url": "https://github.com/rust-lang/rust/commit/be8d9bb98a140d4a4df762e2ea44109c2f05ce6c"}], "stats": {"total": 58, "additions": 54, "deletions": 4}, "files": [{"sha": "be8a4fbb1a82101cd82b14230c590ba191a5367a", "filename": "src/librustc/middle/traits/util.rs", "status": "modified", "additions": 45, "deletions": 4, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/8d9bb17204c0b3b9c8ade3569ac4501fac18b885/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9bb17204c0b3b9c8ade3569ac4501fac18b885/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs?ref=8d9bb17204c0b3b9c8ade3569ac4501fac18b885", "patch": "@@ -22,6 +22,47 @@ use util::ppaux::Repr;\n use super::{Obligation, ObligationCause, PredicateObligation,\n             VtableImpl, VtableParam, VtableImplData};\n \n+struct PredicateSet<'a,'tcx:'a> {\n+    tcx: &'a ty::ctxt<'tcx>,\n+    set: FnvHashSet<ty::Predicate<'tcx>>,\n+}\n+\n+impl<'a,'tcx> PredicateSet<'a,'tcx> {\n+    fn new(tcx: &'a ty::ctxt<'tcx>) -> PredicateSet<'a,'tcx> {\n+        PredicateSet { tcx: tcx, set: FnvHashSet() }\n+    }\n+\n+    fn insert(&mut self, pred: &ty::Predicate<'tcx>) -> bool {\n+        // We have to be careful here because we want\n+        //\n+        //    for<'a> Foo<&'a int>\n+        //\n+        // and\n+        //\n+        //    for<'b> Foo<&'b int>\n+        //\n+        // to be considered equivalent. So normalize all late-bound\n+        // regions before we throw things into the underlying set.\n+        let normalized_pred = match *pred {\n+            ty::Predicate::Trait(ref data) =>\n+                ty::Predicate::Trait(ty::anonymize_late_bound_regions(self.tcx, data)),\n+\n+            ty::Predicate::Equate(ref data) =>\n+                ty::Predicate::Equate(ty::anonymize_late_bound_regions(self.tcx, data)),\n+\n+            ty::Predicate::RegionOutlives(ref data) =>\n+                ty::Predicate::RegionOutlives(ty::anonymize_late_bound_regions(self.tcx, data)),\n+\n+            ty::Predicate::TypeOutlives(ref data) =>\n+                ty::Predicate::TypeOutlives(ty::anonymize_late_bound_regions(self.tcx, data)),\n+\n+            ty::Predicate::Projection(ref data) =>\n+                ty::Predicate::Projection(ty::anonymize_late_bound_regions(self.tcx, data)),\n+        };\n+        self.set.insert(normalized_pred)\n+    }\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n // `Elaboration` iterator\n ///////////////////////////////////////////////////////////////////////////\n@@ -36,7 +77,7 @@ use super::{Obligation, ObligationCause, PredicateObligation,\n pub struct Elaborator<'cx, 'tcx:'cx> {\n     tcx: &'cx ty::ctxt<'tcx>,\n     stack: Vec<StackEntry<'tcx>>,\n-    visited: FnvHashSet<ty::Predicate<'tcx>>,\n+    visited: PredicateSet<'cx,'tcx>,\n }\n \n struct StackEntry<'tcx> {\n@@ -68,8 +109,8 @@ pub fn elaborate_predicates<'cx, 'tcx>(\n     mut predicates: Vec<ty::Predicate<'tcx>>)\n     -> Elaborator<'cx, 'tcx>\n {\n-    let mut visited = FnvHashSet();\n-    predicates.retain(|pred| visited.insert(pred.clone()));\n+    let mut visited = PredicateSet::new(tcx);\n+    predicates.retain(|pred| visited.insert(pred));\n     let entry = StackEntry { position: 0, predicates: predicates };\n     Elaborator { tcx: tcx, stack: vec![entry], visited: visited }\n }\n@@ -91,7 +132,7 @@ impl<'cx, 'tcx> Elaborator<'cx, 'tcx> {\n                 // recursion in some cases.  One common case is when\n                 // people define `trait Sized: Sized { }` rather than `trait\n                 // Sized { }`.\n-                predicates.retain(|r| self.visited.insert(r.clone()));\n+                predicates.retain(|r| self.visited.insert(r));\n \n                 self.stack.push(StackEntry { position: 0,\n                                              predicates: predicates });"}, {"sha": "f4b765d14b0724abd06f2a363d2ee5369592ae8a", "filename": "src/test/run-pass/associated-types-duplicate-binding-in-env-hrtb.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8d9bb17204c0b3b9c8ade3569ac4501fac18b885/src%2Ftest%2Frun-pass%2Fassociated-types-duplicate-binding-in-env-hrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9bb17204c0b3b9c8ade3569ac4501fac18b885/src%2Ftest%2Frun-pass%2Fassociated-types-duplicate-binding-in-env-hrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-duplicate-binding-in-env-hrtb.rs?ref=8d9bb17204c0b3b9c8ade3569ac4501fac18b885", "patch": "@@ -0,0 +1,9 @@\n+fn foo<T>(t: T) -> i32\n+    where T : for<'a> Fn(&'a u8) -> i32,\n+          T : for<'b> Fn(&'b u8) -> i32,\n+{\n+    t(&3)\n+}\n+\n+fn main() {\n+}"}]}