{"sha": "b651c1cebe5f365201d568507ddb49ca343f2e7d", "node_id": "C_kwDOAAsO6NoAKGI2NTFjMWNlYmU1ZjM2NTIwMWQ1Njg1MDdkZGI0OWNhMzQzZjJlN2Q", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2022-05-03T20:23:03Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2022-08-12T04:48:39Z"}, "message": "Check attributes on struct expression fields.\n\nAttributes on struct expression fields were not being checked for\nvalidity. This adds the fields as HIR nodes so that `CheckAttrVisitor`\ncan visit those nodes to check their attributes.", "tree": {"sha": "b26963368c9baa9a06e22ff73ee8aa64a0f6e5fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b26963368c9baa9a06e22ff73ee8aa64a0f6e5fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b651c1cebe5f365201d568507ddb49ca343f2e7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b651c1cebe5f365201d568507ddb49ca343f2e7d", "html_url": "https://github.com/rust-lang/rust/commit/b651c1cebe5f365201d568507ddb49ca343f2e7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b651c1cebe5f365201d568507ddb49ca343f2e7d/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b464c73b7f5223d85eb2380af7f448c4be6baf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b464c73b7f5223d85eb2380af7f448c4be6baf4", "html_url": "https://github.com/rust-lang/rust/commit/1b464c73b7f5223d85eb2380af7f448c4be6baf4"}], "stats": {"total": 65, "additions": 47, "deletions": 18}, "files": [{"sha": "32dbd2ff47d6b98349cd4a51a65e13734a3b3107", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b651c1cebe5f365201d568507ddb49ca343f2e7d/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b651c1cebe5f365201d568507ddb49ca343f2e7d/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=b651c1cebe5f365201d568507ddb49ca343f2e7d", "patch": "@@ -1406,8 +1406,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     }\n \n     fn lower_expr_field(&mut self, f: &ExprField) -> hir::ExprField<'hir> {\n+        let hir_id = self.lower_node_id(f.id);\n+        self.lower_attrs(hir_id, &f.attrs);\n         hir::ExprField {\n-            hir_id: self.next_id(),\n+            hir_id,\n             ident: self.lower_ident(f.ident),\n             expr: self.lower_expr(&f.expr),\n             span: self.lower_span(f.span),"}, {"sha": "ea35cf3de0455731191b8059a6d9d1866fe14a6b", "filename": "compiler/rustc_ast_lowering/src/index.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b651c1cebe5f365201d568507ddb49ca343f2e7d/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b651c1cebe5f365201d568507ddb49ca343f2e7d/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs?ref=b651c1cebe5f365201d568507ddb49ca343f2e7d", "patch": "@@ -224,6 +224,11 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n \n     fn visit_expr(&mut self, expr: &'hir Expr<'hir>) {\n         self.insert(expr.span, expr.hir_id, Node::Expr(expr));\n+        if let ExprKind::Struct(_, fields, _) = expr.kind {\n+            for field in fields {\n+                self.insert(field.span, field.hir_id, Node::ExprField(field));\n+            }\n+        }\n \n         self.with_parent(expr.hir_id, |this| {\n             intravisit::walk_expr(this, expr);"}, {"sha": "2610d0b92d8f39e9e29494aa0e7e4c01ac1d161d", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b651c1cebe5f365201d568507ddb49ca343f2e7d/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b651c1cebe5f365201d568507ddb49ca343f2e7d/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=b651c1cebe5f365201d568507ddb49ca343f2e7d", "patch": "@@ -3332,6 +3332,7 @@ pub enum Node<'hir> {\n     Field(&'hir FieldDef<'hir>),\n     AnonConst(&'hir AnonConst),\n     Expr(&'hir Expr<'hir>),\n+    ExprField(&'hir ExprField<'hir>),\n     Stmt(&'hir Stmt<'hir>),\n     PathSegment(&'hir PathSegment<'hir>),\n     Ty(&'hir Ty<'hir>),\n@@ -3390,6 +3391,7 @@ impl<'hir> Node<'hir> {\n             | Node::Ctor(..)\n             | Node::Pat(..)\n             | Node::PatField(..)\n+            | Node::ExprField(..)\n             | Node::Arm(..)\n             | Node::Local(..)\n             | Node::Crate(..)"}, {"sha": "78bfd7191dba9b3f713377ff4830ac3667644988", "filename": "compiler/rustc_hir/src/target.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b651c1cebe5f365201d568507ddb49ca343f2e7d/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b651c1cebe5f365201d568507ddb49ca343f2e7d/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs?ref=b651c1cebe5f365201d568507ddb49ca343f2e7d", "patch": "@@ -57,6 +57,7 @@ pub enum Target {\n     MacroDef,\n     Param,\n     PatField,\n+    ExprField,\n }\n \n impl Display for Target {\n@@ -185,6 +186,7 @@ impl Target {\n             Target::MacroDef => \"macro def\",\n             Target::Param => \"function param\",\n             Target::PatField => \"pattern field\",\n+            Target::ExprField => \"struct field\",\n         }\n     }\n }"}, {"sha": "fde073296f999bd34830a054ee4ec482f7b3b919", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b651c1cebe5f365201d568507ddb49ca343f2e7d/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b651c1cebe5f365201d568507ddb49ca343f2e7d/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=b651c1cebe5f365201d568507ddb49ca343f2e7d", "patch": "@@ -83,6 +83,7 @@ impl<'a> State<'a> {\n             Node::Variant(a) => self.print_variant(a),\n             Node::AnonConst(a) => self.print_anon_const(a),\n             Node::Expr(a) => self.print_expr(a),\n+            Node::ExprField(a) => self.print_expr_field(&a),\n             Node::Stmt(a) => self.print_stmt(a),\n             Node::PathSegment(a) => self.print_path_segment(a),\n             Node::Ty(a) => self.print_type(a),\n@@ -1124,20 +1125,7 @@ impl<'a> State<'a> {\n     ) {\n         self.print_qpath(qpath, true);\n         self.word(\"{\");\n-        self.commasep_cmnt(\n-            Consistent,\n-            fields,\n-            |s, field| {\n-                s.ibox(INDENT_UNIT);\n-                if !field.is_shorthand {\n-                    s.print_ident(field.ident);\n-                    s.word_space(\":\");\n-                }\n-                s.print_expr(field.expr);\n-                s.end()\n-            },\n-            |f| f.span,\n-        );\n+        self.commasep_cmnt(Consistent, fields, |s, field| s.print_expr_field(field), |f| f.span);\n         if let Some(expr) = wth {\n             self.ibox(INDENT_UNIT);\n             if !fields.is_empty() {\n@@ -1154,6 +1142,20 @@ impl<'a> State<'a> {\n         self.word(\"}\");\n     }\n \n+    fn print_expr_field(&mut self, field: &hir::ExprField<'_>) {\n+        if self.attrs(field.hir_id).is_empty() {\n+            self.space();\n+        }\n+        self.cbox(INDENT_UNIT);\n+        self.print_outer_attributes(&self.attrs(field.hir_id));\n+        if !field.is_shorthand {\n+            self.print_ident(field.ident);\n+            self.word_space(\":\");\n+        }\n+        self.print_expr(&field.expr);\n+        self.end()\n+    }\n+\n     fn print_expr_tup(&mut self, exprs: &[hir::Expr<'_>]) {\n         self.popen();\n         self.commasep_exprs(Inconsistent, exprs);"}, {"sha": "79e6804a28992c74f6d8a24f5adaa4e2a4ece81d", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b651c1cebe5f365201d568507ddb49ca343f2e7d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b651c1cebe5f365201d568507ddb49ca343f2e7d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=b651c1cebe5f365201d568507ddb49ca343f2e7d", "patch": "@@ -298,6 +298,7 @@ impl<'hir> Map<'hir> {\n             | Node::TraitRef(_)\n             | Node::Pat(_)\n             | Node::PatField(_)\n+            | Node::ExprField(_)\n             | Node::Local(_)\n             | Node::Param(_)\n             | Node::Arm(_)\n@@ -1021,6 +1022,7 @@ impl<'hir> Map<'hir> {\n             Node::Field(field) => field.span,\n             Node::AnonConst(constant) => self.body(constant.body).value.span,\n             Node::Expr(expr) => expr.span,\n+            Node::ExprField(field) => field.span,\n             Node::Stmt(stmt) => stmt.span,\n             Node::PathSegment(seg) => {\n                 let ident_span = seg.ident.span;\n@@ -1243,6 +1245,7 @@ fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n         }\n         Some(Node::AnonConst(_)) => node_str(\"const\"),\n         Some(Node::Expr(_)) => node_str(\"expr\"),\n+        Some(Node::ExprField(_)) => node_str(\"expr field\"),\n         Some(Node::Stmt(_)) => node_str(\"stmt\"),\n         Some(Node::PathSegment(_)) => node_str(\"path segment\"),\n         Some(Node::Ty(_)) => node_str(\"type\"),"}, {"sha": "0eb6f401b381775355389b72f63b79e7608cce17", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b651c1cebe5f365201d568507ddb49ca343f2e7d/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b651c1cebe5f365201d568507ddb49ca343f2e7d/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=b651c1cebe5f365201d568507ddb49ca343f2e7d", "patch": "@@ -653,7 +653,8 @@ impl CheckAttrVisitor<'_> {\n             | Target::ForeignTy\n             | Target::GenericParam(..)\n             | Target::MacroDef\n-            | Target::PatField => None,\n+            | Target::PatField\n+            | Target::ExprField => None,\n         } {\n             tcx.sess.emit_err(errors::DocAliasBadLocation { span, attr_str, location });\n             return false;\n@@ -2064,6 +2065,11 @@ impl<'tcx> Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n         };\n \n         self.check_attributes(expr.hir_id, expr.span, target, None);\n+        if let hir::ExprKind::Struct(_, fields, _) = expr.kind {\n+            for field in fields {\n+                self.check_attributes(field.hir_id, field.span, Target::PatField, None);\n+            }\n+        }\n         intravisit::walk_expr(self, expr)\n     }\n "}, {"sha": "3e96b3ffb0940e7b41228728ab0bf58704872dd5", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b651c1cebe5f365201d568507ddb49ca343f2e7d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b651c1cebe5f365201d568507ddb49ca343f2e7d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=b651c1cebe5f365201d568507ddb49ca343f2e7d", "patch": "@@ -257,6 +257,7 @@ impl<'a, 'tcx> DropRangeVisitor<'a, 'tcx> {\n                 | hir::Node::TraitRef(..)\n                 | hir::Node::Pat(..)\n                 | hir::Node::PatField(..)\n+                | hir::Node::ExprField(..)\n                 | hir::Node::Arm(..)\n                 | hir::Node::Local(..)\n                 | hir::Node::Ctor(..)"}, {"sha": "51f868706b69b76402f5be9d07c6a27624409706", "filename": "src/test/ui/lint/unused/unused_attributes-must_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b651c1cebe5f365201d568507ddb49ca343f2e7d/src%2Ftest%2Fui%2Flint%2Funused%2Funused_attributes-must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b651c1cebe5f365201d568507ddb49ca343f2e7d/src%2Ftest%2Fui%2Flint%2Funused%2Funused_attributes-must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused_attributes-must_use.rs?ref=b651c1cebe5f365201d568507ddb49ca343f2e7d", "patch": "@@ -126,6 +126,6 @@ fn main() {\n     struct PatternField {\n         foo: i32,\n     }\n-    let s = PatternField { foo: 123 };\n+    let s = PatternField { #[must_use]  foo: 123 }; //~ ERROR `#[must_use]` has no effect\n     let PatternField { #[must_use] foo } = s; //~ ERROR `#[must_use]` has no effect\n }"}, {"sha": "69cd5302c5c34507ab7b2e491f7128106118a3cf", "filename": "src/test/ui/lint/unused/unused_attributes-must_use.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b651c1cebe5f365201d568507ddb49ca343f2e7d/src%2Ftest%2Fui%2Flint%2Funused%2Funused_attributes-must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b651c1cebe5f365201d568507ddb49ca343f2e7d/src%2Ftest%2Fui%2Flint%2Funused%2Funused_attributes-must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused_attributes-must_use.stderr?ref=b651c1cebe5f365201d568507ddb49ca343f2e7d", "patch": "@@ -105,6 +105,12 @@ error: `#[must_use]` has no effect when applied to an match arm\n LL |         #[must_use]\n    |         ^^^^^^^^^^^\n \n+error: `#[must_use]` has no effect when applied to a pattern field\n+  --> $DIR/unused_attributes-must_use.rs:129:28\n+   |\n+LL |     let s = PatternField { #[must_use]  foo: 123 };\n+   |                            ^^^^^^^^^^^\n+\n error: `#[must_use]` has no effect when applied to a pattern field\n   --> $DIR/unused_attributes-must_use.rs:130:24\n    |\n@@ -177,5 +183,5 @@ error: unused return value of `Use::get_four` that must be used\n LL |     ().get_four();\n    |     ^^^^^^^^^^^^^^\n \n-error: aborting due to 27 previous errors\n+error: aborting due to 28 previous errors\n "}]}