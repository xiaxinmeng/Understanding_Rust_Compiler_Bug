{"sha": "d0a9a39b1eb6a5fd152332392b7c4b1cd08a92c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwYTlhMzliMWViNmE1ZmQxNTIzMzIzOTJiN2M0YjFjZDA4YTkyYzY=", "commit": {"author": {"name": "Ms2ger", "email": "ms2ger@gmail.com", "date": "2015-01-24T17:58:07Z"}, "committer": {"name": "Ms2ger", "email": "ms2ger@gmail.com", "date": "2015-01-28T08:37:04Z"}, "message": "Rename found_ast to FoundAst and qualify uses.\n\nThis matches contemporary Rust style.", "tree": {"sha": "0fb1c90abe18b234849db30cdfdf8d6f3c57cdb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fb1c90abe18b234849db30cdfdf8d6f3c57cdb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0a9a39b1eb6a5fd152332392b7c4b1cd08a92c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0a9a39b1eb6a5fd152332392b7c4b1cd08a92c6", "html_url": "https://github.com/rust-lang/rust/commit/d0a9a39b1eb6a5fd152332392b7c4b1cd08a92c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0a9a39b1eb6a5fd152332392b7c4b1cd08a92c6/comments", "author": {"login": "Ms2ger", "id": 111161, "node_id": "MDQ6VXNlcjExMTE2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/111161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ms2ger", "html_url": "https://github.com/Ms2ger", "followers_url": "https://api.github.com/users/Ms2ger/followers", "following_url": "https://api.github.com/users/Ms2ger/following{/other_user}", "gists_url": "https://api.github.com/users/Ms2ger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ms2ger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ms2ger/subscriptions", "organizations_url": "https://api.github.com/users/Ms2ger/orgs", "repos_url": "https://api.github.com/users/Ms2ger/repos", "events_url": "https://api.github.com/users/Ms2ger/events{/privacy}", "received_events_url": "https://api.github.com/users/Ms2ger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ms2ger", "id": 111161, "node_id": "MDQ6VXNlcjExMTE2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/111161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ms2ger", "html_url": "https://github.com/Ms2ger", "followers_url": "https://api.github.com/users/Ms2ger/followers", "following_url": "https://api.github.com/users/Ms2ger/following{/other_user}", "gists_url": "https://api.github.com/users/Ms2ger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ms2ger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ms2ger/subscriptions", "organizations_url": "https://api.github.com/users/Ms2ger/orgs", "repos_url": "https://api.github.com/users/Ms2ger/repos", "events_url": "https://api.github.com/users/Ms2ger/events{/privacy}", "received_events_url": "https://api.github.com/users/Ms2ger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a530cc9706324ad44dba464d541a807eb5afdb08", "url": "https://api.github.com/repos/rust-lang/rust/commits/a530cc9706324ad44dba464d541a807eb5afdb08", "html_url": "https://github.com/rust-lang/rust/commit/a530cc9706324ad44dba464d541a807eb5afdb08"}], "stats": {"total": 44, "additions": 20, "deletions": 24}, "files": [{"sha": "1295970d667b06b57f8e503e2b6c0b3b467da5b5", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d0a9a39b1eb6a5fd152332392b7c4b1cd08a92c6/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a9a39b1eb6a5fd152332392b7c4b1cd08a92c6/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=d0a9a39b1eb6a5fd152332392b7c4b1cd08a92c6", "patch": "@@ -10,10 +10,6 @@\n \n // Searching for information from the cstore\n \n-#![allow(non_camel_case_types)]\n-\n-pub use self::found_ast::*;\n-\n use metadata::common::*;\n use metadata::cstore;\n use metadata::decoder;\n@@ -101,18 +97,18 @@ pub fn get_item_path(tcx: &ty::ctxt, def: ast::DefId) -> Vec<ast_map::PathElem>\n     r\n }\n \n-pub enum found_ast<'ast> {\n-    found(&'ast ast::InlinedItem),\n-    found_parent(ast::DefId, &'ast ast::InlinedItem),\n-    not_found,\n+pub enum FoundAst<'ast> {\n+    Found(&'ast ast::InlinedItem),\n+    FoundParent(ast::DefId, &'ast ast::InlinedItem),\n+    NotFound,\n }\n \n // Finds the AST for this item in the crate metadata, if any.  If the item was\n // not marked for inlining, then the AST will not be present and hence none\n // will be returned.\n pub fn maybe_get_item_ast<'tcx>(tcx: &ty::ctxt<'tcx>, def: ast::DefId,\n                                 decode_inlined_item: decoder::DecodeInlinedItem)\n-                                -> found_ast<'tcx> {\n+                                -> FoundAst<'tcx> {\n     let cstore = &tcx.sess.cstore;\n     let cdata = cstore.get_crate_data(def.krate);\n     decoder::maybe_get_item_ast(&*cdata, tcx, def.node, decode_inlined_item)"}, {"sha": "b573c54ef855bcb363fa79798a4aee7eb7264571", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d0a9a39b1eb6a5fd152332392b7c4b1cd08a92c6/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a9a39b1eb6a5fd152332392b7c4b1cd08a92c6/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=d0a9a39b1eb6a5fd152332392b7c4b1cd08a92c6", "patch": "@@ -693,23 +693,23 @@ pub type DecodeInlinedItem<'a> =\n \n pub fn maybe_get_item_ast<'tcx>(cdata: Cmd, tcx: &ty::ctxt<'tcx>, id: ast::NodeId,\n                                 mut decode_inlined_item: DecodeInlinedItem)\n-                                -> csearch::found_ast<'tcx> {\n+                                -> csearch::FoundAst<'tcx> {\n     debug!(\"Looking up item: {}\", id);\n     let item_doc = lookup_item(id, cdata.data());\n     let path = item_path(item_doc).init().to_vec();\n     match decode_inlined_item(cdata, tcx, path, item_doc) {\n-        Ok(ii) => csearch::found(ii),\n+        Ok(ii) => csearch::FoundAst::Found(ii),\n         Err(path) => {\n             match item_parent_item(item_doc) {\n                 Some(did) => {\n                     let did = translate_def_id(cdata, did);\n                     let parent_item = lookup_item(did.node, cdata.data());\n                     match decode_inlined_item(cdata, tcx, path, parent_item) {\n-                        Ok(ii) => csearch::found_parent(did, ii),\n-                        Err(_) => csearch::not_found\n+                        Ok(ii) => csearch::FoundAst::FoundParent(did, ii),\n+                        Err(_) => csearch::FoundAst::NotFound\n                     }\n                 }\n-                None => csearch::not_found\n+                None => csearch::FoundAst::NotFound\n             }\n         }\n     }"}, {"sha": "00141903c7c3be894b337740e6c6a5a6dcdbfa71", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0a9a39b1eb6a5fd152332392b7c4b1cd08a92c6/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a9a39b1eb6a5fd152332392b7c4b1cd08a92c6/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=d0a9a39b1eb6a5fd152332392b7c4b1cd08a92c6", "patch": "@@ -133,7 +133,7 @@ fn lookup_variant_by_id<'a>(tcx: &'a ty::ctxt,\n         }\n         let expr_id = match csearch::maybe_get_item_ast(tcx, enum_def,\n             box |a, b, c, d| astencode::decode_inlined_item(a, b, c, d)) {\n-            csearch::found(&ast::IIItem(ref item)) => match item.node {\n+            csearch::FoundAst::Found(&ast::IIItem(ref item)) => match item.node {\n                 ast::ItemEnum(ast::EnumDef { ref variants }, _) => {\n                     // NOTE this doesn't do the right thing, it compares inlined\n                     // NodeId's to the original variant_def's NodeId, but they\n@@ -173,7 +173,7 @@ pub fn lookup_const_by_id<'a>(tcx: &'a ty::ctxt, def_id: ast::DefId)\n         }\n         let expr_id = match csearch::maybe_get_item_ast(tcx, def_id,\n             box |a, b, c, d| astencode::decode_inlined_item(a, b, c, d)) {\n-            csearch::found(&ast::IIItem(ref item)) => match item.node {\n+            csearch::FoundAst::Found(&ast::IIItem(ref item)) => match item.node {\n                 ast::ItemConst(_, ref const_expr) => Some(const_expr.id),\n                 _ => None\n             },"}, {"sha": "ea6d9b88e117e2981db9c5d5a08d3f0e6dab8a57", "filename": "src/librustc_trans/trans/inline.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d0a9a39b1eb6a5fd152332392b7c4b1cd08a92c6/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a9a39b1eb6a5fd152332392b7c4b1cd08a92c6/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Finline.rs?ref=d0a9a39b1eb6a5fd152332392b7c4b1cd08a92c6", "patch": "@@ -43,11 +43,11 @@ fn instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n             box |a,b,c,d| astencode::decode_inlined_item(a, b, c, d));\n \n     let inline_def = match csearch_result {\n-        csearch::not_found => {\n+        csearch::FoundAst::NotFound => {\n             ccx.external().borrow_mut().insert(fn_id, None);\n             return None;\n         }\n-        csearch::found(&ast::IIItem(ref item)) => {\n+        csearch::FoundAst::Found(&ast::IIItem(ref item)) => {\n             ccx.external().borrow_mut().insert(fn_id, Some(item.id));\n             ccx.external_srcs().borrow_mut().insert(item.id, fn_id);\n \n@@ -90,12 +90,12 @@ fn instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n \n             local_def(item.id)\n         }\n-        csearch::found(&ast::IIForeign(ref item)) => {\n+        csearch::FoundAst::Found(&ast::IIForeign(ref item)) => {\n             ccx.external().borrow_mut().insert(fn_id, Some(item.id));\n             ccx.external_srcs().borrow_mut().insert(item.id, fn_id);\n             local_def(item.id)\n         }\n-        csearch::found_parent(parent_id, &ast::IIItem(ref item)) => {\n+        csearch::FoundAst::FoundParent(parent_id, &ast::IIItem(ref item)) => {\n             ccx.external().borrow_mut().insert(parent_id, Some(item.id));\n             ccx.external_srcs().borrow_mut().insert(item.id, parent_id);\n \n@@ -124,11 +124,11 @@ fn instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n           trans_item(ccx, &**item);\n           local_def(my_id)\n         }\n-        csearch::found_parent(_, _) => {\n-            ccx.sess().bug(\"maybe_get_item_ast returned a found_parent \\\n+        csearch::FoundAst::FoundParent(_, _) => {\n+            ccx.sess().bug(\"maybe_get_item_ast returned a FoundParent \\\n              with a non-item parent\");\n         }\n-        csearch::found(&ast::IITraitItem(_, ref trait_item)) => {\n+        csearch::FoundAst::Found(&ast::IITraitItem(_, ref trait_item)) => {\n             match *trait_item {\n                 ast::RequiredMethod(_) => ccx.sess().bug(\"found RequiredMethod IITraitItem\"),\n                 ast::ProvidedMethod(ref mth) => {\n@@ -147,7 +147,7 @@ fn instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n                 }\n             }\n         }\n-        csearch::found(&ast::IIImplItem(impl_did, ref impl_item)) => {\n+        csearch::FoundAst::Found(&ast::IIImplItem(impl_did, ref impl_item)) => {\n             match *impl_item {\n                 ast::MethodImplItem(ref mth) => {\n                     ccx.external().borrow_mut().insert(fn_id, Some(mth.id));"}]}