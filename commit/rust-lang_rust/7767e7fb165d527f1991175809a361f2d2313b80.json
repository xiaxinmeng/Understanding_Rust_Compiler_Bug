{"sha": "7767e7fb165d527f1991175809a361f2d2313b80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NjdlN2ZiMTY1ZDUyN2YxOTkxMTc1ODA5YTM2MWYyZDIzMTNiODA=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-08-21T00:23:46Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-09-24T10:56:44Z"}, "message": "Stabilize `str::len`, `[T]::len`, `is_empty` and `str::as_bytes` as const fn", "tree": {"sha": "e2e776a76307c183bb2a762a2b1f630b71339b68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2e776a76307c183bb2a762a2b1f630b71339b68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7767e7fb165d527f1991175809a361f2d2313b80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7767e7fb165d527f1991175809a361f2d2313b80", "html_url": "https://github.com/rust-lang/rust/commit/7767e7fb165d527f1991175809a361f2d2313b80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7767e7fb165d527f1991175809a361f2d2313b80/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fdea7a72abb9f5a58fdc19c0a298042291c53b2", "html_url": "https://github.com/rust-lang/rust/commit/7fdea7a72abb9f5a58fdc19c0a298042291c53b2"}], "stats": {"total": 192, "additions": 114, "deletions": 78}, "files": [{"sha": "8221df56a5142069bcff558e53a0549b2d95dbcd", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7767e7fb165d527f1991175809a361f2d2313b80/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7767e7fb165d527f1991175809a361f2d2313b80/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=7767e7fb165d527f1991175809a361f2d2313b80", "patch": "@@ -120,9 +120,9 @@\n #![feature(rtm_target_feature)]\n #![feature(f16c_target_feature)]\n #![feature(hexagon_target_feature)]\n-#![feature(const_slice_len)]\n-#![feature(const_str_as_bytes)]\n-#![feature(const_str_len)]\n+#![cfg_attr(bootstrap, feature(const_slice_len))]\n+#![cfg_attr(bootstrap, feature(const_str_as_bytes))]\n+#![cfg_attr(bootstrap, feature(const_str_len))]\n #![feature(const_int_conversion)]\n #![feature(const_transmute)]\n #![feature(non_exhaustive)]"}, {"sha": "0c2a4e086727bd97517a21fc9d8aafea6940cde7", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7767e7fb165d527f1991175809a361f2d2313b80/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7767e7fb165d527f1991175809a361f2d2313b80/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=7767e7fb165d527f1991175809a361f2d2313b80", "patch": "@@ -62,7 +62,9 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"const_slice_len\")]\n+    #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_slice_len\"))]\n+    // SAFETY: const sound because we transmute out the length field as a usize (which it must be)\n+    #[cfg_attr(not(bootstrap), allow_internal_unstable(const_fn_union))]\n     pub const fn len(&self) -> usize {\n         unsafe {\n             crate::ptr::Repr { rust: self }.raw.len\n@@ -79,7 +81,7 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"const_slice_len\")]\n+    #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_slice_len\"))]\n     pub const fn is_empty(&self) -> bool {\n         self.len() == 0\n     }"}, {"sha": "a6ec757faf1d60b3d9cb6d05a1709ab6f2668ec3", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7767e7fb165d527f1991175809a361f2d2313b80/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7767e7fb165d527f1991175809a361f2d2313b80/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=7767e7fb165d527f1991175809a361f2d2313b80", "patch": "@@ -2090,7 +2090,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"const_str_len\")]\n+    #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_str_len\"))]\n     pub const fn len(&self) -> usize {\n         self.as_bytes().len()\n     }\n@@ -2110,7 +2110,7 @@ impl str {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_str_len\")]\n+    #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_str_len\"))]\n     pub const fn is_empty(&self) -> bool {\n         self.len() == 0\n     }\n@@ -2168,7 +2168,9 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline(always)]\n-    #[rustc_const_unstable(feature=\"const_str_as_bytes\")]\n+    #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_str_as_bytes\"))]\n+    // SAFETY: const sound because we transmute two types with the same layout\n+    #[cfg_attr(not(bootstrap), allow_internal_unstable(const_fn_union))]\n     pub const fn as_bytes(&self) -> &[u8] {\n         #[repr(C)]\n         union Slices<'a> {"}, {"sha": "61e32ca8de5229562ecc340de4772fb36bf9cc4c", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7767e7fb165d527f1991175809a361f2d2313b80/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7767e7fb165d527f1991175809a361f2d2313b80/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=7767e7fb165d527f1991175809a361f2d2313b80", "patch": "@@ -305,15 +305,15 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                                     \"assignment to non-`Copy` union field\",\n                                     \"the previous content of the field will be dropped, which \\\n                                      causes undefined behavior if the field was not properly \\\n-                                     initialized\", UnsafetyViolationKind::General)\n+                                     initialized\", UnsafetyViolationKind::GeneralAndConstFn)\n                             } else {\n                                 // write to non-move union, safe\n                             }\n                         } else {\n                             self.require_unsafe(\"access to union field\",\n                                 \"the field may not be properly initialized: using \\\n                                  uninitialized data will cause undefined behavior\",\n-                                 UnsafetyViolationKind::General)\n+                                 UnsafetyViolationKind::GeneralAndConstFn)\n                         }\n                     }\n                 }"}, {"sha": "be83c823d4242dd505811453acc51b03e72ff41a", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 57, "deletions": 24, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/7767e7fb165d527f1991175809a361f2d2313b80/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7767e7fb165d527f1991175809a361f2d2313b80/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=7767e7fb165d527f1991175809a361f2d2313b80", "patch": "@@ -5,6 +5,8 @@ use rustc::ty::{self, Predicate, Ty, TyCtxt, adjustment::{PointerCast}};\n use rustc_target::spec::abi;\n use std::borrow::Cow;\n use syntax_pos::Span;\n+use syntax::symbol::{sym, Symbol};\n+use syntax::attr;\n \n type McfResult = Result<(), (Span, Cow<'static, str>)>;\n \n@@ -67,9 +69,9 @@ pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, def_id: DefId, body: &'a Body<'tcx>) -\n     )?;\n \n     for bb in body.basic_blocks() {\n-        check_terminator(tcx, body, bb.terminator())?;\n+        check_terminator(tcx, body, def_id, bb.terminator())?;\n         for stmt in &bb.statements {\n-            check_statement(tcx, body, stmt)?;\n+            check_statement(tcx, body, def_id, stmt)?;\n         }\n     }\n     Ok(())\n@@ -121,16 +123,17 @@ fn check_ty(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, span: Span, fn_def_id: DefId) -> Mc\n \n fn check_rvalue(\n     tcx: TyCtxt<'tcx>,\n-    body: &'a Body<'tcx>,\n+    body: &Body<'tcx>,\n+    def_id: DefId,\n     rvalue: &Rvalue<'tcx>,\n     span: Span,\n ) -> McfResult {\n     match rvalue {\n         Rvalue::Repeat(operand, _) | Rvalue::Use(operand) => {\n-            check_operand(operand, span)\n+            check_operand(tcx, operand, span, def_id, body)\n         }\n         Rvalue::Len(place) | Rvalue::Discriminant(place) | Rvalue::Ref(_, _, place) => {\n-            check_place(place, span)\n+            check_place(tcx, place, span, def_id, body)\n         }\n         Rvalue::Cast(CastKind::Misc, operand, cast_ty) => {\n             use rustc::ty::cast::CastTy;\n@@ -144,11 +147,11 @@ fn check_rvalue(\n                 (CastTy::RPtr(_), CastTy::Float) => bug!(),\n                 (CastTy::RPtr(_), CastTy::Int(_)) => bug!(),\n                 (CastTy::Ptr(_), CastTy::RPtr(_)) => bug!(),\n-                _ => check_operand(operand, span),\n+                _ => check_operand(tcx, operand, span, def_id, body),\n             }\n         }\n         Rvalue::Cast(CastKind::Pointer(PointerCast::MutToConstPointer), operand, _) => {\n-            check_operand(operand, span)\n+            check_operand(tcx, operand, span, def_id, body)\n         }\n         Rvalue::Cast(CastKind::Pointer(PointerCast::UnsafeFnPointer), _, _) |\n         Rvalue::Cast(CastKind::Pointer(PointerCast::ClosureFnPointer(_)), _, _) |\n@@ -162,8 +165,8 @@ fn check_rvalue(\n         )),\n         // binops are fine on integers\n         Rvalue::BinaryOp(_, lhs, rhs) | Rvalue::CheckedBinaryOp(_, lhs, rhs) => {\n-            check_operand(lhs, span)?;\n-            check_operand(rhs, span)?;\n+            check_operand(tcx, lhs, span, def_id, body)?;\n+            check_operand(tcx, rhs, span, def_id, body)?;\n             let ty = lhs.ty(body, tcx);\n             if ty.is_integral() || ty.is_bool() || ty.is_char() {\n                 Ok(())\n@@ -182,7 +185,7 @@ fn check_rvalue(\n         Rvalue::UnaryOp(_, operand) => {\n             let ty = operand.ty(body, tcx);\n             if ty.is_integral() || ty.is_bool() {\n-                check_operand(operand, span)\n+                check_operand(tcx, operand, span, def_id, body)\n             } else {\n                 Err((\n                     span,\n@@ -192,7 +195,7 @@ fn check_rvalue(\n         }\n         Rvalue::Aggregate(_, operands) => {\n             for operand in operands {\n-                check_operand(operand, span)?;\n+                check_operand(tcx, operand, span, def_id, body)?;\n             }\n             Ok(())\n         }\n@@ -201,21 +204,22 @@ fn check_rvalue(\n \n fn check_statement(\n     tcx: TyCtxt<'tcx>,\n-    body: &'a Body<'tcx>,\n+    body: &Body<'tcx>,\n+    def_id: DefId,\n     statement: &Statement<'tcx>,\n ) -> McfResult {\n     let span = statement.source_info.span;\n     match &statement.kind {\n         StatementKind::Assign(box(place, rval)) => {\n-            check_place(place, span)?;\n-            check_rvalue(tcx, body, rval, span)\n+            check_place(tcx, place, span, def_id, body)?;\n+            check_rvalue(tcx, body, def_id, rval, span)\n         }\n \n         StatementKind::FakeRead(FakeReadCause::ForMatchedPlace, _) => {\n             Err((span, \"loops and conditional expressions are not stable in const fn\".into()))\n         }\n \n-        StatementKind::FakeRead(_, place) => check_place(place, span),\n+        StatementKind::FakeRead(_, place) => check_place(tcx, place, span, def_id, body),\n \n         // just an assignment\n         StatementKind::SetDiscriminant { .. } => Ok(()),\n@@ -234,30 +238,48 @@ fn check_statement(\n }\n \n fn check_operand(\n+    tcx: TyCtxt<'tcx>,\n     operand: &Operand<'tcx>,\n     span: Span,\n+    def_id: DefId,\n+    body: &Body<'tcx>\n ) -> McfResult {\n     match operand {\n         Operand::Move(place) | Operand::Copy(place) => {\n-            check_place(place, span)\n+            check_place(tcx, place, span, def_id, body)\n         }\n         Operand::Constant(_) => Ok(()),\n     }\n }\n \n fn check_place(\n+    tcx: TyCtxt<'tcx>,\n     place: &Place<'tcx>,\n     span: Span,\n+    def_id: DefId,\n+    body: &Body<'tcx>\n ) -> McfResult {\n-    for elem in place.projection.iter() {\n+    let mut cursor = &*place.projection;\n+    while let [proj_base @ .., elem] = cursor {\n+        cursor = proj_base;\n         match elem {\n             ProjectionElem::Downcast(..) => {\n                 return Err((span, \"`match` or `if let` in `const fn` is unstable\".into()));\n             }\n+            ProjectionElem::Field(..) => {\n+                let base_ty = Place::ty_from(&place.base, &proj_base, body, tcx).ty;\n+                if let Some(def) = base_ty.ty_adt_def() {\n+                    // No union field accesses in `const fn`\n+                    if def.is_union() {\n+                        if !feature_allowed(tcx, def_id, sym::const_fn_union) {\n+                            return Err((span, \"accessing union fields is unstable\".into()));\n+                        }\n+                    }\n+                }\n+            }\n             ProjectionElem::ConstantIndex { .. }\n             | ProjectionElem::Subslice { .. }\n             | ProjectionElem::Deref\n-            | ProjectionElem::Field(..)\n             | ProjectionElem::Index(_) => {}\n         }\n     }\n@@ -271,9 +293,20 @@ fn check_place(\n     }\n }\n \n+/// Returns whether `allow_internal_unstable(..., <feature_gate>, ...)` is present.\n+fn feature_allowed(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: DefId,\n+    feature_gate: Symbol,\n+) -> bool {\n+    attr::allow_internal_unstable(&tcx.get_attrs(def_id), &tcx.sess.diagnostic())\n+        .map_or(false, |mut features| features.any(|name| name == feature_gate))\n+}\n+\n fn check_terminator(\n     tcx: TyCtxt<'tcx>,\n     body: &'a Body<'tcx>,\n+    def_id: DefId,\n     terminator: &Terminator<'tcx>,\n ) -> McfResult {\n     let span = terminator.source_info.span;\n@@ -283,11 +316,11 @@ fn check_terminator(\n         | TerminatorKind::Resume => Ok(()),\n \n         TerminatorKind::Drop { location, .. } => {\n-            check_place(location, span)\n+            check_place(tcx, location, span, def_id, body)\n         }\n         TerminatorKind::DropAndReplace { location, value, .. } => {\n-            check_place(location, span)?;\n-            check_operand(value, span)\n+            check_place(tcx, location, span, def_id, body)?;\n+            check_operand(tcx, value, span, def_id, body)\n         },\n \n         TerminatorKind::FalseEdges { .. } | TerminatorKind::SwitchInt { .. } => Err((\n@@ -339,10 +372,10 @@ fn check_terminator(\n                     )),\n                 }\n \n-                check_operand(func, span)?;\n+                check_operand(tcx, func, span, def_id, body)?;\n \n                 for arg in args {\n-                    check_operand(arg, span)?;\n+                    check_operand(tcx, arg, span, def_id, body)?;\n                 }\n                 Ok(())\n             } else {\n@@ -356,7 +389,7 @@ fn check_terminator(\n             msg: _,\n             target: _,\n             cleanup: _,\n-        } => check_operand(cond, span),\n+        } => check_operand(tcx, cond, span, def_id, body),\n \n         TerminatorKind::FalseUnwind { .. } => {\n             Err((span, \"loops are not allowed in const fn\".into()))"}, {"sha": "9d06b926f972e9033d0fedd4f4208f5845a2fb01", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7767e7fb165d527f1991175809a361f2d2313b80/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7767e7fb165d527f1991175809a361f2d2313b80/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=7767e7fb165d527f1991175809a361f2d2313b80", "patch": "@@ -433,6 +433,30 @@ pub fn find_by_name(attrs: &[Attribute], name: Symbol) -> Option<&Attribute> {\n     attrs.iter().find(|attr| attr.check_name(name))\n }\n \n+pub fn allow_internal_unstable<'a>(\n+    attrs: &[Attribute],\n+    span_diagnostic: &'a errors::Handler,\n+) -> Option<impl Iterator<Item = Symbol> + 'a> {\n+    find_by_name(attrs, sym::allow_internal_unstable).and_then(|attr| {\n+        attr.meta_item_list().or_else(|| {\n+            span_diagnostic.span_err(\n+                attr.span,\n+                \"allow_internal_unstable expects list of feature names\"\n+            );\n+            None\n+        }).map(|features| features.into_iter().filter_map(move |it| {\n+            let name = it.ident().map(|ident| ident.name);\n+            if name.is_none() {\n+                span_diagnostic.span_err(\n+                    it.span(),\n+                    \"`allow_internal_unstable` expects feature names\",\n+                )\n+            }\n+            name\n+        }))\n+    })\n+}\n+\n pub fn filter_by_name(attrs: &[Attribute], name: Symbol)\n                       -> impl Iterator<Item=&Attribute> {\n     attrs.iter().filter(move |attr| attr.check_name(name))"}, {"sha": "e189d8f86362e04c71363e18a0ccacb1ac0cdf38", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7767e7fb165d527f1991175809a361f2d2313b80/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7767e7fb165d527f1991175809a361f2d2313b80/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=7767e7fb165d527f1991175809a361f2d2313b80", "patch": "@@ -762,33 +762,9 @@ impl SyntaxExtension {\n         name: Name,\n         attrs: &[ast::Attribute],\n     ) -> SyntaxExtension {\n-        let allow_internal_unstable =\n-            attr::find_by_name(attrs, sym::allow_internal_unstable).map(|attr| {\n-                attr.meta_item_list()\n-                    .map(|list| {\n-                        list.iter()\n-                            .filter_map(|it| {\n-                                let name = it.ident().map(|ident| ident.name);\n-                                if name.is_none() {\n-                                    sess.span_diagnostic.span_err(\n-                                        it.span(), \"allow internal unstable expects feature names\"\n-                                    )\n-                                }\n-                                name\n-                            })\n-                            .collect::<Vec<Symbol>>()\n-                            .into()\n-                    })\n-                    .unwrap_or_else(|| {\n-                        sess.span_diagnostic.span_warn(\n-                            attr.span,\n-                            \"allow_internal_unstable expects list of feature names. In the future \\\n-                             this will become a hard error. Please use `allow_internal_unstable(\\\n-                             foo, bar)` to only allow the `foo` and `bar` features\",\n-                        );\n-                        vec![sym::allow_internal_unstable_backcompat_hack].into()\n-                    })\n-            });\n+        let allow_internal_unstable = attr::allow_internal_unstable(\n+            &attrs, &sess.span_diagnostic,\n+        ).map(|features| features.collect::<Vec<Symbol>>().into());\n \n         let mut local_inner_macros = false;\n         if let Some(macro_export) = attr::find_by_name(attrs, sym::macro_export) {"}, {"sha": "7b14a52354348dca2566be3dbc76aeaaa961811d", "filename": "src/test/ui/consts/const-eval/strlen.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7767e7fb165d527f1991175809a361f2d2313b80/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstrlen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7767e7fb165d527f1991175809a361f2d2313b80/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstrlen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fstrlen.rs?ref=7767e7fb165d527f1991175809a361f2d2313b80", "patch": "@@ -1,9 +1,11 @@\n // run-pass\n \n-#![feature(const_str_len, const_str_as_bytes)]\n-\n const S: &str = \"foo\";\n pub const B: &[u8] = S.as_bytes();\n+pub const C: usize = B.len();\n+pub const D: bool = B.is_empty();\n+pub const E: bool = S.is_empty();\n+pub const F: usize = S.len();\n \n pub fn foo() -> [u8; S.len()] {\n     let mut buf = [0; S.len()];\n@@ -20,4 +22,10 @@ fn main() {\n     assert_eq!(LEN, S.len());\n     assert_eq!(B, foo());\n     assert_eq!(B, b\"foo\");\n+    assert_eq!(C, 3);\n+    assert_eq!(F, 3);\n+    assert!(!D);\n+    assert!(!E);\n+    const EMPTY: bool = \"\".is_empty();\n+    assert!(EMPTY);\n }"}, {"sha": "0b1ab1c34ff2f3dc7b44277ef29d82cca41441f9", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe_bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7767e7fb165d527f1991175809a361f2d2313b80/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7767e7fb165d527f1991175809a361f2d2313b80/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.rs?ref=7767e7fb165d527f1991175809a361f2d2313b80", "patch": "@@ -12,5 +12,5 @@ fn main() {}\n const unsafe fn no_union() {\n     union Foo { x: (), y: () }\n     Foo { x: () }.y\n-    //~^ unions in const fn\n+    //~^ accessing union fields is unstable\n }"}, {"sha": "2a4c627438d61bedd12ce0528d52f4372091209a", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe_bad.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7767e7fb165d527f1991175809a361f2d2313b80/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7767e7fb165d527f1991175809a361f2d2313b80/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.stderr?ref=7767e7fb165d527f1991175809a361f2d2313b80", "patch": "@@ -25,14 +25,14 @@ LL | const unsafe fn bad_const_unsafe_deref_raw_ref(x: *mut usize) -> &'static u\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51911\n    = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n \n-error[E0658]: unions in const fn are unstable\n+error[E0723]: accessing union fields is unstable\n   --> $DIR/min_const_fn_unsafe_bad.rs:14:5\n    |\n LL |     Foo { x: () }.y\n    |     ^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/51909\n-   = help: add `#![feature(const_fn_union)]` to the crate attributes to enable\n+   = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n   --> $DIR/min_const_fn_unsafe_bad.rs:1:77\n@@ -44,5 +44,5 @@ LL | const fn bad_const_fn_deref_raw(x: *mut usize) -> &'static usize { unsafe {\n \n error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0133, E0658.\n+Some errors have detailed explanations: E0133, E0658, E0723.\n For more information about an error, try `rustc --explain E0133`."}, {"sha": "13b914c0331d1a29d559174aecc2843297b12c43", "filename": "src/test/ui/issues/issue-52060.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7767e7fb165d527f1991175809a361f2d2313b80/src%2Ftest%2Fui%2Fissues%2Fissue-52060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7767e7fb165d527f1991175809a361f2d2313b80/src%2Ftest%2Fui%2Fissues%2Fissue-52060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52060.rs?ref=7767e7fb165d527f1991175809a361f2d2313b80", "patch": "@@ -3,6 +3,5 @@\n static A: &'static [u32] = &[1];\n static B: [u32; 1] = [0; A.len()];\n //~^ ERROR [E0013]\n-//~| ERROR `core::slice::<impl [T]>::len` is not yet stable as a const fn\n \n fn main() {}"}, {"sha": "2f90f7f9e035b1befb39830a50518acd357fb655", "filename": "src/test/ui/issues/issue-52060.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7767e7fb165d527f1991175809a361f2d2313b80/src%2Ftest%2Fui%2Fissues%2Fissue-52060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7767e7fb165d527f1991175809a361f2d2313b80/src%2Ftest%2Fui%2Fissues%2Fissue-52060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52060.stderr?ref=7767e7fb165d527f1991175809a361f2d2313b80", "patch": "@@ -4,14 +4,6 @@ error[E0013]: constants cannot refer to statics, use a constant instead\n LL | static B: [u32; 1] = [0; A.len()];\n    |                          ^\n \n-error: `core::slice::<impl [T]>::len` is not yet stable as a const fn\n-  --> $DIR/issue-52060.rs:4:26\n-   |\n-LL | static B: [u32; 1] = [0; A.len()];\n-   |                          ^^^^^^^\n-   |\n-   = help: add `#![feature(const_slice_len)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0013`."}]}