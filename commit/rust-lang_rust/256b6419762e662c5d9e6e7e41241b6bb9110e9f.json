{"sha": "256b6419762e662c5d9e6e7e41241b6bb9110e9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NmI2NDE5NzYyZTY2MmM1ZDllNmU3ZTQxMjQxYjZiYjkxMTBlOWY=", "commit": {"author": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2019-01-13T11:52:51Z"}, "committer": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2019-01-13T11:52:51Z"}, "message": "Add run-rustfix to into_iter_on_ref", "tree": {"sha": "5f3f882bb4d99887a1e52ee24ff98422a37b11fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f3f882bb4d99887a1e52ee24ff98422a37b11fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/256b6419762e662c5d9e6e7e41241b6bb9110e9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/256b6419762e662c5d9e6e7e41241b6bb9110e9f", "html_url": "https://github.com/rust-lang/rust/commit/256b6419762e662c5d9e6e7e41241b6bb9110e9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/256b6419762e662c5d9e6e7e41241b6bb9110e9f/comments", "author": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "787f5a2c12e72af923c1b0983e0f5b97839bcd40", "url": "https://api.github.com/repos/rust-lang/rust/commits/787f5a2c12e72af923c1b0983e0f5b97839bcd40", "html_url": "https://github.com/rust-lang/rust/commit/787f5a2c12e72af923c1b0983e0f5b97839bcd40"}], "stats": {"total": 106, "additions": 77, "deletions": 29}, "files": [{"sha": "f5342be631b04888fb1ceddd7fe49fa3ff6f16a4", "filename": "tests/ui/into_iter_on_ref.fixed", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/256b6419762e662c5d9e6e7e41241b6bb9110e9f/tests%2Fui%2Finto_iter_on_ref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/256b6419762e662c5d9e6e7e41241b6bb9110e9f/tests%2Fui%2Finto_iter_on_ref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finto_iter_on_ref.fixed?ref=256b6419762e662c5d9e6e7e41241b6bb9110e9f", "patch": "@@ -0,0 +1,46 @@\n+// run-rustfix\n+#![allow(clippy::useless_vec)]\n+#![warn(clippy::into_iter_on_ref)]\n+#![deny(clippy::into_iter_on_array)]\n+\n+struct X;\n+use std::collections::*;\n+\n+fn main() {\n+    for _ in &[1, 2, 3] {}\n+    for _ in vec![X, X] {}\n+    for _ in &vec![X, X] {}\n+    for _ in [1, 2, 3].iter() {} //~ ERROR equivalent to .iter()\n+\n+    let _ = [1, 2, 3].iter(); //~ ERROR equivalent to .iter()\n+    let _ = vec![1, 2, 3].into_iter();\n+    let _ = (&vec![1, 2, 3]).iter(); //~ WARN equivalent to .iter()\n+    let _ = vec![1, 2, 3].into_boxed_slice().iter(); //~ WARN equivalent to .iter()\n+    let _ = std::rc::Rc::from(&[X][..]).iter(); //~ WARN equivalent to .iter()\n+    let _ = std::sync::Arc::from(&[X][..]).iter(); //~ WARN equivalent to .iter()\n+\n+    let _ = (&&&&&&&[1, 2, 3]).iter(); //~ ERROR equivalent to .iter()\n+    let _ = (&&&&mut &&&[1, 2, 3]).iter(); //~ ERROR equivalent to .iter()\n+    let _ = (&mut &mut &mut [1, 2, 3]).iter_mut(); //~ ERROR equivalent to .iter_mut()\n+\n+    let _ = (&Some(4)).iter(); //~ WARN equivalent to .iter()\n+    let _ = (&mut Some(5)).iter_mut(); //~ WARN equivalent to .iter_mut()\n+    let _ = (&Ok::<_, i32>(6)).iter(); //~ WARN equivalent to .iter()\n+    let _ = (&mut Err::<i32, _>(7)).iter_mut(); //~ WARN equivalent to .iter_mut()\n+    let _ = (&Vec::<i32>::new()).iter(); //~ WARN equivalent to .iter()\n+    let _ = (&mut Vec::<i32>::new()).iter_mut(); //~ WARN equivalent to .iter_mut()\n+    let _ = (&BTreeMap::<i32, u64>::new()).iter(); //~ WARN equivalent to .iter()\n+    let _ = (&mut BTreeMap::<i32, u64>::new()).iter_mut(); //~ WARN equivalent to .iter_mut()\n+    let _ = (&VecDeque::<i32>::new()).iter(); //~ WARN equivalent to .iter()\n+    let _ = (&mut VecDeque::<i32>::new()).iter_mut(); //~ WARN equivalent to .iter_mut()\n+    let _ = (&LinkedList::<i32>::new()).iter(); //~ WARN equivalent to .iter()\n+    let _ = (&mut LinkedList::<i32>::new()).iter_mut(); //~ WARN equivalent to .iter_mut()\n+    let _ = (&HashMap::<i32, u64>::new()).iter(); //~ WARN equivalent to .iter()\n+    let _ = (&mut HashMap::<i32, u64>::new()).iter_mut(); //~ WARN equivalent to .iter_mut()\n+\n+    let _ = (&BTreeSet::<i32>::new()).iter(); //~ WARN equivalent to .iter()\n+    let _ = (&BinaryHeap::<i32>::new()).iter(); //~ WARN equivalent to .iter()\n+    let _ = (&HashSet::<i32>::new()).iter(); //~ WARN equivalent to .iter()\n+    let _ = std::path::Path::new(\"12/34\").iter(); //~ WARN equivalent to .iter()\n+    let _ = std::path::PathBuf::from(\"12/34\").iter(); //~ ERROR equivalent to .iter()\n+}"}, {"sha": "5ec64dcf733a1c9a41c0c70de67f5593f8545d5b", "filename": "tests/ui/into_iter_on_ref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/256b6419762e662c5d9e6e7e41241b6bb9110e9f/tests%2Fui%2Finto_iter_on_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/256b6419762e662c5d9e6e7e41241b6bb9110e9f/tests%2Fui%2Finto_iter_on_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finto_iter_on_ref.rs?ref=256b6419762e662c5d9e6e7e41241b6bb9110e9f", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+#![allow(clippy::useless_vec)]\n #![warn(clippy::into_iter_on_ref)]\n #![deny(clippy::into_iter_on_array)]\n "}, {"sha": "931e4880f938b47c0ffb6277a75f3d01f1b41d62", "filename": "tests/ui/into_iter_on_ref.stderr", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/256b6419762e662c5d9e6e7e41241b6bb9110e9f/tests%2Fui%2Finto_iter_on_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/256b6419762e662c5d9e6e7e41241b6bb9110e9f/tests%2Fui%2Finto_iter_on_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finto_iter_on_ref.stderr?ref=256b6419762e662c5d9e6e7e41241b6bb9110e9f", "patch": "@@ -1,175 +1,175 @@\n error: this .into_iter() call is equivalent to .iter() and will not move the array\n-  --> $DIR/into_iter_on_ref.rs:11:24\n+  --> $DIR/into_iter_on_ref.rs:13:24\n    |\n LL |     for _ in [1, 2, 3].into_iter() {} //~ ERROR equivalent to .iter()\n    |                        ^^^^^^^^^ help: call directly: `iter`\n    |\n note: lint level defined here\n-  --> $DIR/into_iter_on_ref.rs:2:9\n+  --> $DIR/into_iter_on_ref.rs:4:9\n    |\n LL | #![deny(clippy::into_iter_on_array)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this .into_iter() call is equivalent to .iter() and will not move the array\n-  --> $DIR/into_iter_on_ref.rs:13:23\n+  --> $DIR/into_iter_on_ref.rs:15:23\n    |\n LL |     let _ = [1, 2, 3].into_iter(); //~ ERROR equivalent to .iter()\n    |                       ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the Vec\n-  --> $DIR/into_iter_on_ref.rs:15:30\n+  --> $DIR/into_iter_on_ref.rs:17:30\n    |\n LL |     let _ = (&vec![1, 2, 3]).into_iter(); //~ WARN equivalent to .iter()\n    |                              ^^^^^^^^^ help: call directly: `iter`\n    |\n    = note: `-D clippy::into-iter-on-ref` implied by `-D warnings`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the slice\n-  --> $DIR/into_iter_on_ref.rs:16:46\n+  --> $DIR/into_iter_on_ref.rs:18:46\n    |\n LL |     let _ = vec![1, 2, 3].into_boxed_slice().into_iter(); //~ WARN equivalent to .iter()\n    |                                              ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the slice\n-  --> $DIR/into_iter_on_ref.rs:17:41\n+  --> $DIR/into_iter_on_ref.rs:19:41\n    |\n LL |     let _ = std::rc::Rc::from(&[X][..]).into_iter(); //~ WARN equivalent to .iter()\n    |                                         ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the slice\n-  --> $DIR/into_iter_on_ref.rs:18:44\n+  --> $DIR/into_iter_on_ref.rs:20:44\n    |\n LL |     let _ = std::sync::Arc::from(&[X][..]).into_iter(); //~ WARN equivalent to .iter()\n    |                                            ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the array\n-  --> $DIR/into_iter_on_ref.rs:20:32\n+  --> $DIR/into_iter_on_ref.rs:22:32\n    |\n LL |     let _ = (&&&&&&&[1, 2, 3]).into_iter(); //~ ERROR equivalent to .iter()\n    |                                ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the array\n-  --> $DIR/into_iter_on_ref.rs:21:36\n+  --> $DIR/into_iter_on_ref.rs:23:36\n    |\n LL |     let _ = (&&&&mut &&&[1, 2, 3]).into_iter(); //~ ERROR equivalent to .iter()\n    |                                    ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the array\n-  --> $DIR/into_iter_on_ref.rs:22:40\n+  --> $DIR/into_iter_on_ref.rs:24:40\n    |\n LL |     let _ = (&mut &mut &mut [1, 2, 3]).into_iter(); //~ ERROR equivalent to .iter_mut()\n    |                                        ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the Option\n-  --> $DIR/into_iter_on_ref.rs:24:24\n+  --> $DIR/into_iter_on_ref.rs:26:24\n    |\n LL |     let _ = (&Some(4)).into_iter(); //~ WARN equivalent to .iter()\n    |                        ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the Option\n-  --> $DIR/into_iter_on_ref.rs:25:28\n+  --> $DIR/into_iter_on_ref.rs:27:28\n    |\n LL |     let _ = (&mut Some(5)).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                            ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the Result\n-  --> $DIR/into_iter_on_ref.rs:26:32\n+  --> $DIR/into_iter_on_ref.rs:28:32\n    |\n LL |     let _ = (&Ok::<_, i32>(6)).into_iter(); //~ WARN equivalent to .iter()\n    |                                ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the Result\n-  --> $DIR/into_iter_on_ref.rs:27:37\n+  --> $DIR/into_iter_on_ref.rs:29:37\n    |\n LL |     let _ = (&mut Err::<i32, _>(7)).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                     ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the Vec\n-  --> $DIR/into_iter_on_ref.rs:28:34\n+  --> $DIR/into_iter_on_ref.rs:30:34\n    |\n LL |     let _ = (&Vec::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                  ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the Vec\n-  --> $DIR/into_iter_on_ref.rs:29:38\n+  --> $DIR/into_iter_on_ref.rs:31:38\n    |\n LL |     let _ = (&mut Vec::<i32>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                      ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the BTreeMap\n-  --> $DIR/into_iter_on_ref.rs:30:44\n+  --> $DIR/into_iter_on_ref.rs:32:44\n    |\n LL |     let _ = (&BTreeMap::<i32, u64>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                            ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the BTreeMap\n-  --> $DIR/into_iter_on_ref.rs:31:48\n+  --> $DIR/into_iter_on_ref.rs:33:48\n    |\n LL |     let _ = (&mut BTreeMap::<i32, u64>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                                ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the VecDeque\n-  --> $DIR/into_iter_on_ref.rs:32:39\n+  --> $DIR/into_iter_on_ref.rs:34:39\n    |\n LL |     let _ = (&VecDeque::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                       ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the VecDeque\n-  --> $DIR/into_iter_on_ref.rs:33:43\n+  --> $DIR/into_iter_on_ref.rs:35:43\n    |\n LL |     let _ = (&mut VecDeque::<i32>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                           ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the LinkedList\n-  --> $DIR/into_iter_on_ref.rs:34:41\n+  --> $DIR/into_iter_on_ref.rs:36:41\n    |\n LL |     let _ = (&LinkedList::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                         ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the LinkedList\n-  --> $DIR/into_iter_on_ref.rs:35:45\n+  --> $DIR/into_iter_on_ref.rs:37:45\n    |\n LL |     let _ = (&mut LinkedList::<i32>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                             ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the HashMap\n-  --> $DIR/into_iter_on_ref.rs:36:43\n+  --> $DIR/into_iter_on_ref.rs:38:43\n    |\n LL |     let _ = (&HashMap::<i32, u64>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                           ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the HashMap\n-  --> $DIR/into_iter_on_ref.rs:37:47\n+  --> $DIR/into_iter_on_ref.rs:39:47\n    |\n LL |     let _ = (&mut HashMap::<i32, u64>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                               ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the BTreeSet\n-  --> $DIR/into_iter_on_ref.rs:39:39\n+  --> $DIR/into_iter_on_ref.rs:41:39\n    |\n LL |     let _ = (&BTreeSet::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                       ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the BinaryHeap\n-  --> $DIR/into_iter_on_ref.rs:40:41\n+  --> $DIR/into_iter_on_ref.rs:42:41\n    |\n LL |     let _ = (&BinaryHeap::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                         ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the HashSet\n-  --> $DIR/into_iter_on_ref.rs:41:38\n+  --> $DIR/into_iter_on_ref.rs:43:38\n    |\n LL |     let _ = (&HashSet::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                      ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the Path\n-  --> $DIR/into_iter_on_ref.rs:42:43\n+  --> $DIR/into_iter_on_ref.rs:44:43\n    |\n LL |     let _ = std::path::Path::new(\"12/34\").into_iter(); //~ WARN equivalent to .iter()\n    |                                           ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the PathBuf\n-  --> $DIR/into_iter_on_ref.rs:43:47\n+  --> $DIR/into_iter_on_ref.rs:45:47\n    |\n LL |     let _ = std::path::PathBuf::from(\"12/34\").into_iter(); //~ ERROR equivalent to .iter()\n    |                                               ^^^^^^^^^ help: call directly: `iter`"}]}