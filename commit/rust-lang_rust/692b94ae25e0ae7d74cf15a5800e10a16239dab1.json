{"sha": "692b94ae25e0ae7d74cf15a5800e10a16239dab1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5MmI5NGFlMjVlMGFlN2Q3NGNmMTVhNTgwMGUxMGExNjIzOWRhYjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-09T16:31:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-09T16:31:15Z"}, "message": "Auto merge of #45111 - aidanhs:aphs-bubble-worker-failures, r=alexcrichton\n\nDon't panic in the coordinator thread, bubble up the failure\n\nFixes #43402 (take 2)\n\nFollowup to #45019, this makes the coordinator thread not panic on worker failures since they can be reported reasonably back in the main thread.\n\nThe output also now has no evidence of backtraces at all, unlike the previous PR:\n```\n$ ./build/x86_64-unknown-linux-gnu/stage1/bin/rustc -o \"\" x.rs\nerror: could not write output to : No such file or directory\n\nerror: aborting due to previous error\n```\n\nr? @alexcrichton", "tree": {"sha": "4bd2f0ba7de2cec9de7f133b34d5146e1aee1bb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bd2f0ba7de2cec9de7f133b34d5146e1aee1bb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/692b94ae25e0ae7d74cf15a5800e10a16239dab1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/692b94ae25e0ae7d74cf15a5800e10a16239dab1", "html_url": "https://github.com/rust-lang/rust/commit/692b94ae25e0ae7d74cf15a5800e10a16239dab1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/692b94ae25e0ae7d74cf15a5800e10a16239dab1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72d65019c789138f555c7cf7139508d2f9f0dffe", "url": "https://api.github.com/repos/rust-lang/rust/commits/72d65019c789138f555c7cf7139508d2f9f0dffe", "html_url": "https://github.com/rust-lang/rust/commit/72d65019c789138f555c7cf7139508d2f9f0dffe"}, {"sha": "911d95bfe3076f2ed61798a1cf7373db9852c64f", "url": "https://api.github.com/repos/rust-lang/rust/commits/911d95bfe3076f2ed61798a1cf7373db9852c64f", "html_url": "https://github.com/rust-lang/rust/commit/911d95bfe3076f2ed61798a1cf7373db9852c64f"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "22b09a0e26931b4961432644a4891032ca6a4ab7", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/692b94ae25e0ae7d74cf15a5800e10a16239dab1/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/692b94ae25e0ae7d74cf15a5800e10a16239dab1/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=692b94ae25e0ae7d74cf15a5800e10a16239dab1", "patch": "@@ -1247,7 +1247,7 @@ fn start_executing_work(tcx: TyCtxt,\n                         modules_config: Arc<ModuleConfig>,\n                         metadata_config: Arc<ModuleConfig>,\n                         allocator_config: Arc<ModuleConfig>)\n-                        -> thread::JoinHandle<CompiledModules> {\n+                        -> thread::JoinHandle<Result<CompiledModules, ()>> {\n     let coordinator_send = tcx.tx_to_llvm_workers.clone();\n     let mut exported_symbols = FxHashMap();\n     exported_symbols.insert(LOCAL_CRATE, tcx.exported_symbols(LOCAL_CRATE));\n@@ -1695,7 +1695,7 @@ fn start_executing_work(tcx: TyCtxt,\n                 Message::Done { result: Err(()), worker_id: _ } => {\n                     shared_emitter.fatal(\"aborting due to worker thread failure\");\n                     // Exit the coordinator thread\n-                    panic!(\"aborting due to worker thread failure\")\n+                    return Err(())\n                 }\n                 Message::TranslateItem => {\n                     bug!(\"the coordinator should not receive translation requests\")\n@@ -1721,11 +1721,11 @@ fn start_executing_work(tcx: TyCtxt,\n         let compiled_metadata_module = compiled_metadata_module\n             .expect(\"Metadata module not compiled?\");\n \n-        CompiledModules {\n+        Ok(CompiledModules {\n             modules: compiled_modules,\n             metadata_module: compiled_metadata_module,\n             allocator_module: compiled_allocator_module,\n-        }\n+        })\n     });\n \n     // A heuristic that determines if we have enough LLVM WorkItems in the\n@@ -2018,15 +2018,19 @@ pub struct OngoingCrateTranslation {\n     coordinator_send: Sender<Box<Any + Send>>,\n     trans_worker_receive: Receiver<Message>,\n     shared_emitter_main: SharedEmitterMain,\n-    future: thread::JoinHandle<CompiledModules>,\n+    future: thread::JoinHandle<Result<CompiledModules, ()>>,\n     output_filenames: Arc<OutputFilenames>,\n }\n \n impl OngoingCrateTranslation {\n     pub fn join(self, sess: &Session, dep_graph: &DepGraph) -> CrateTranslation {\n         self.shared_emitter_main.check(sess, true);\n         let compiled_modules = match self.future.join() {\n-            Ok(compiled_modules) => compiled_modules,\n+            Ok(Ok(compiled_modules)) => compiled_modules,\n+            Ok(Err(())) => {\n+                sess.abort_if_errors();\n+                panic!(\"expected abort due to worker thread errors\")\n+            },\n             Err(_) => {\n                 sess.fatal(\"Error during translation/LLVM phase.\");\n             }"}]}