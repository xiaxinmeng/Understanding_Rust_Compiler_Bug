{"sha": "9e88b48133c703c04780a9474c029b4398ca3260", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllODhiNDgxMzNjNzAzYzA0NzgwYTk0NzRjMDI5YjQzOThjYTMyNjA=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-06-20T11:25:55Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-06-20T12:09:07Z"}, "message": "Refer just to the issue in the raw ptr cmp diagnostic instead of explaining everything in the diagnostic", "tree": {"sha": "17135c4aeba98a76df77634176c6b33d6262cecc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17135c4aeba98a76df77634176c6b33d6262cecc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e88b48133c703c04780a9474c029b4398ca3260", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e88b48133c703c04780a9474c029b4398ca3260", "html_url": "https://github.com/rust-lang/rust/commit/9e88b48133c703c04780a9474c029b4398ca3260", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e88b48133c703c04780a9474c029b4398ca3260/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84f1d73182f4882518d5eef067b18b49b49e985a", "url": "https://api.github.com/repos/rust-lang/rust/commits/84f1d73182f4882518d5eef067b18b49b49e985a", "html_url": "https://github.com/rust-lang/rust/commit/84f1d73182f4882518d5eef067b18b49b49e985a"}], "stats": {"total": 40, "additions": 9, "deletions": 31}, "files": [{"sha": "e1a040b2e0ea5d65de1d6c0c70ff114fbfeb255f", "filename": "src/librustc_mir/transform/check_consts/ops.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9e88b48133c703c04780a9474c029b4398ca3260/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e88b48133c703c04780a9474c029b4398ca3260/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs?ref=9e88b48133c703c04780a9474c029b4398ca3260", "patch": "@@ -287,26 +287,12 @@ impl NonConstOp for RawPtrComparison {\n     fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n         let mut err = ccx.tcx.sess.struct_span_err(\n             span,\n-            \"pointers cannot be compared in a meaningful way during const eval.\",\n+            \"pointers cannot be reliably compared during const eval.\",\n         );\n         err.note(\n             \"see issue #53020 <https://github.com/rust-lang/rust/issues/53020> \\\n             for more information\",\n         );\n-        err.note(\n-            \"It is conceptually impossible for const eval to know in all cases whether two \\\n-             pointers are equal. While sometimes it is clear (the address of a non-zst static item \\\n-             is never equal to the address of another non-zst static item), comparing an integer \\\n-             address with any allocation's address is impossible to do at compile-time.\",\n-        );\n-        if ccx.tcx.sess.parse_sess.unstable_features.is_nightly_build() {\n-            err.note(\n-                \"That said, there's the `<*const T>::guaranteed_eq` intrinsic which returns `true` \\\n-                for all comparisons where CTFE is sure that two addresses are equal. The mirror \\\n-                intrinsic `<*const T>::guaranteed_ne` returns `true` for all comparisons where \\\n-                CTFE is sure that two addresses are inequal.\",\n-            );\n-        }\n         err.emit();\n     }\n }"}, {"sha": "083ebfdd4da3f939863ec7a1d81f5824c7b282bc", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e88b48133c703c04780a9474c029b4398ca3260/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e88b48133c703c04780a9474c029b4398ca3260/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.rs?ref=9e88b48133c703c04780a9474c029b4398ca3260", "patch": "@@ -1,6 +1,6 @@\n fn main() {}\n \n // unconst and bad, will thus error in miri\n-const X: bool = unsafe { &1 as *const i32 == &2 as *const i32 }; //~ ERROR cannot be compared\n+const X: bool = unsafe { &1 as *const i32 == &2 as *const i32 }; //~ ERROR cannot be reliably compared\n // unconst and bad, will thus error in miri\n-const X2: bool = unsafe { 42 as *const i32 == 43 as *const i32 }; //~ ERROR cannot be compared\n+const X2: bool = unsafe { 42 as *const i32 == 43 as *const i32 }; //~ ERROR cannot be reliably compared"}, {"sha": "21d3f5e7e853651c48fdb33b532c68d8e6543288", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e88b48133c703c04780a9474c029b4398ca3260/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e88b48133c703c04780a9474c029b4398ca3260/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr?ref=9e88b48133c703c04780a9474c029b4398ca3260", "patch": "@@ -1,22 +1,18 @@\n-error: pointers cannot be compared in a meaningful way during const eval.\n+error: pointers cannot be reliably compared during const eval.\n   --> $DIR/const_raw_ptr_ops.rs:4:26\n    |\n LL | const X: bool = unsafe { &1 as *const i32 == &2 as *const i32 };\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n-   = note: It is conceptually impossible for const eval to know in all cases whether two pointers are equal. While sometimes it is clear (the address of a non-zst static item is never equal to the address of another non-zst static item), comparing an integer address with any allocation's address is impossible to do at compile-time.\n-   = note: That said, there's the `<*const T>::guaranteed_eq` intrinsic which returns `true` for all comparisons where CTFE is sure that two addresses are equal. The mirror intrinsic `<*const T>::guaranteed_ne` returns `true` for all comparisons where CTFE is sure that two addresses are inequal.\n \n-error: pointers cannot be compared in a meaningful way during const eval.\n+error: pointers cannot be reliably compared during const eval.\n   --> $DIR/const_raw_ptr_ops.rs:6:27\n    |\n LL | const X2: bool = unsafe { 42 as *const i32 == 43 as *const i32 };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n-   = note: It is conceptually impossible for const eval to know in all cases whether two pointers are equal. While sometimes it is clear (the address of a non-zst static item is never equal to the address of another non-zst static item), comparing an integer address with any allocation's address is impossible to do at compile-time.\n-   = note: That said, there's the `<*const T>::guaranteed_eq` intrinsic which returns `true` for all comparisons where CTFE is sure that two addresses are equal. The mirror intrinsic `<*const T>::guaranteed_ne` returns `true` for all comparisons where CTFE is sure that two addresses are inequal.\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d2edd97efb232e6bd2a34d6053ea5a79f5a4672b", "filename": "src/test/ui/error-codes/E0395.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e88b48133c703c04780a9474c029b4398ca3260/src%2Ftest%2Fui%2Ferror-codes%2FE0395.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e88b48133c703c04780a9474c029b4398ca3260/src%2Ftest%2Fui%2Ferror-codes%2FE0395.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0395.rs?ref=9e88b48133c703c04780a9474c029b4398ca3260", "patch": "@@ -2,7 +2,7 @@ static FOO: i32 = 42;\n static BAR: i32 = 42;\n \n static BAZ: bool = unsafe { (&FOO as *const i32) == (&BAR as *const i32) };\n-//~^ ERROR pointers cannot be compared in a meaningful way during const eval\n+//~^ ERROR pointers cannot be reliably compared during const eval\n \n fn main() {\n }"}, {"sha": "674cc696450290625d5366140775b41f698da39e", "filename": "src/test/ui/error-codes/E0395.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e88b48133c703c04780a9474c029b4398ca3260/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e88b48133c703c04780a9474c029b4398ca3260/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr?ref=9e88b48133c703c04780a9474c029b4398ca3260", "patch": "@@ -1,12 +1,10 @@\n-error: pointers cannot be compared in a meaningful way during const eval.\n+error: pointers cannot be reliably compared during const eval.\n   --> $DIR/E0395.rs:4:29\n    |\n LL | static BAZ: bool = unsafe { (&FOO as *const i32) == (&BAR as *const i32) };\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n-   = note: It is conceptually impossible for const eval to know in all cases whether two pointers are equal. While sometimes it is clear (the address of a non-zst static item is never equal to the address of another non-zst static item), comparing an integer address with any allocation's address is impossible to do at compile-time.\n-   = note: That said, there's the `<*const T>::guaranteed_eq` intrinsic which returns `true` for all comparisons where CTFE is sure that two addresses are equal. The mirror intrinsic `<*const T>::guaranteed_ne` returns `true` for all comparisons where CTFE is sure that two addresses are inequal.\n \n error: aborting due to previous error\n "}, {"sha": "d1093c205798a0b8875111e57d65d23625d0e74b", "filename": "src/test/ui/issues/issue-25826.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e88b48133c703c04780a9474c029b4398ca3260/src%2Ftest%2Fui%2Fissues%2Fissue-25826.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e88b48133c703c04780a9474c029b4398ca3260/src%2Ftest%2Fui%2Fissues%2Fissue-25826.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25826.rs?ref=9e88b48133c703c04780a9474c029b4398ca3260", "patch": "@@ -1,6 +1,6 @@\n fn id<T>(t: T) -> T { t }\n fn main() {\n     const A: bool = unsafe { id::<u8> as *const () < id::<u16> as *const () };\n-    //~^ ERROR pointers cannot be compared in a meaningful way during const eval\n+    //~^ ERROR pointers cannot be reliably compared during const eval\n     println!(\"{}\", A);\n }"}, {"sha": "67d1b3ab9bed60589b671ed483f99bf91666f6ff", "filename": "src/test/ui/issues/issue-25826.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e88b48133c703c04780a9474c029b4398ca3260/src%2Ftest%2Fui%2Fissues%2Fissue-25826.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e88b48133c703c04780a9474c029b4398ca3260/src%2Ftest%2Fui%2Fissues%2Fissue-25826.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25826.stderr?ref=9e88b48133c703c04780a9474c029b4398ca3260", "patch": "@@ -1,12 +1,10 @@\n-error: pointers cannot be compared in a meaningful way during const eval.\n+error: pointers cannot be reliably compared during const eval.\n   --> $DIR/issue-25826.rs:3:30\n    |\n LL |     const A: bool = unsafe { id::<u8> as *const () < id::<u16> as *const () };\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n-   = note: It is conceptually impossible for const eval to know in all cases whether two pointers are equal. While sometimes it is clear (the address of a non-zst static item is never equal to the address of another non-zst static item), comparing an integer address with any allocation's address is impossible to do at compile-time.\n-   = note: That said, there's the `<*const T>::guaranteed_eq` intrinsic which returns `true` for all comparisons where CTFE is sure that two addresses are equal. The mirror intrinsic `<*const T>::guaranteed_ne` returns `true` for all comparisons where CTFE is sure that two addresses are inequal.\n \n error: aborting due to previous error\n "}]}