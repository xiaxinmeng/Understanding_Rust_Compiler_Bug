{"sha": "991cbd15034798e86de6823800b13c87fb3e904c", "node_id": "C_kwDOAAsO6NoAKDk5MWNiZDE1MDM0Nzk4ZTg2ZGU2ODIzODAwYjEzYzg3ZmIzZTkwNGM", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-10T14:32:45Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-17T17:06:27Z"}, "message": "Use Symbol for target features in asm handling\n\nThis saves a couple of Symbol::intern calls", "tree": {"sha": "cb22ef0a82dd1e9fa93bf9579ff1f49ddd4312b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb22ef0a82dd1e9fa93bf9579ff1f49ddd4312b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/991cbd15034798e86de6823800b13c87fb3e904c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/991cbd15034798e86de6823800b13c87fb3e904c", "html_url": "https://github.com/rust-lang/rust/commit/991cbd15034798e86de6823800b13c87fb3e904c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/991cbd15034798e86de6823800b13c87fb3e904c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a34c0797528172ede89480e3033f7a5e71ea4735", "url": "https://api.github.com/repos/rust-lang/rust/commits/a34c0797528172ede89480e3033f7a5e71ea4735", "html_url": "https://github.com/rust-lang/rust/commit/a34c0797528172ede89480e3033f7a5e71ea4735"}], "stats": {"total": 160, "additions": 91, "deletions": 69}, "files": [{"sha": "16a9631f84685893874421c6d1ae590b8e90863d", "filename": "compiler/rustc_ast_lowering/src/asm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fasm.rs?ref=991cbd15034798e86de6823800b13c87fb3e904c", "patch": "@@ -6,7 +6,7 @@ use rustc_data_structures::stable_set::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_session::parse::feature_err;\n-use rustc_span::{sym, Span, Symbol};\n+use rustc_span::{sym, Span};\n use rustc_target::asm;\n use std::collections::hash_map::Entry;\n use std::fmt::Write;\n@@ -66,7 +66,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             for (abi_name, abi_span) in &asm.clobber_abis {\n                 match asm::InlineAsmClobberAbi::parse(\n                     asm_arch,\n-                    |feature| self.sess.target_features.contains(&Symbol::intern(feature)),\n+                    |feature| self.sess.target_features.contains(&feature),\n                     &self.sess.target,\n                     *abi_name,\n                 ) {\n@@ -134,7 +134,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         asm::InlineAsmRegOrRegClass::Reg(if let Some(asm_arch) = asm_arch {\n                             asm::InlineAsmReg::parse(\n                                 asm_arch,\n-                                |feature| sess.target_features.contains(&Symbol::intern(feature)),\n+                                |feature| sess.target_features.contains(&feature),\n                                 &sess.target,\n                                 s,\n                             )"}, {"sha": "be39dbd2e2acbfde4610b6107f4b8c33d2bb12db", "filename": "compiler/rustc_codegen_cranelift/src/inline_asm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_codegen_cranelift%2Fsrc%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_codegen_cranelift%2Fsrc%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Finline_asm.rs?ref=991cbd15034798e86de6823800b13c87fb3e904c", "patch": "@@ -6,7 +6,7 @@ use std::fmt::Write;\n \n use rustc_ast::ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_middle::mir::InlineAsmOperand;\n-use rustc_span::Symbol;\n+use rustc_span::sym;\n use rustc_target::asm::*;\n \n pub(crate) fn codegen_inline_asm<'tcx>(\n@@ -184,7 +184,7 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n         let sess = self.tcx.sess;\n         let map = allocatable_registers(\n             self.arch,\n-            |feature| sess.target_features.contains(&Symbol::intern(feature)),\n+            |feature| sess.target_features.contains(&feature),\n             &sess.target,\n         );\n         let mut allocated = FxHashMap::<_, (bool, bool)>::default();\n@@ -319,9 +319,9 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n         // Allocate stack slots for saving clobbered registers\n         let abi_clobber = InlineAsmClobberAbi::parse(\n             self.arch,\n-            |feature| self.tcx.sess.target_features.contains(&Symbol::intern(feature)),\n+            |feature| self.tcx.sess.target_features.contains(&feature),\n             &self.tcx.sess.target,\n-            Symbol::intern(\"C\"),\n+            sym::C,\n         )\n         .unwrap()\n         .clobbered_regs();"}, {"sha": "b4213da6e05042b42476746a69024bff9ad8e7ee", "filename": "compiler/rustc_codegen_gcc/src/asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fasm.rs?ref=991cbd15034798e86de6823800b13c87fb3e904c", "patch": "@@ -5,7 +5,7 @@ use rustc_codegen_ssa::mir::place::PlaceRef;\n use rustc_codegen_ssa::traits::{AsmBuilderMethods, AsmMethods, BaseTypeMethods, BuilderMethods, GlobalAsmOperandRef, InlineAsmOperandRef};\n \n use rustc_middle::{bug, ty::Instance};\n-use rustc_span::{Span, Symbol};\n+use rustc_span::Span;\n use rustc_target::asm::*;\n \n use std::borrow::Cow;\n@@ -172,7 +172,7 @@ impl<'a, 'gcc, 'tcx> AsmBuilderMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n                             let is_target_supported = reg.reg_class().supported_types(asm_arch).iter()\n                                 .any(|&(_, feature)| {\n                                     if let Some(feature) = feature {\n-                                        self.tcx.sess.target_features.contains(&Symbol::intern(feature))\n+                                        self.tcx.sess.target_features.contains(&feature)\n                                     } else {\n                                         true // Register class is unconditionally supported\n                                     }"}, {"sha": "8b696dc6fba69a76257ab8b9394e32f5ebd95f7d", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=991cbd15034798e86de6823800b13c87fb3e904c", "patch": "@@ -13,7 +13,7 @@ use rustc_codegen_ssa::traits::*;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::ty::layout::TyAndLayout;\n use rustc_middle::{bug, span_bug, ty::Instance};\n-use rustc_span::{Pos, Span, Symbol};\n+use rustc_span::{Pos, Span};\n use rustc_target::abi::*;\n use rustc_target::asm::*;\n \n@@ -45,9 +45,8 @@ impl<'ll, 'tcx> AsmBuilderMethods<'tcx> for Builder<'_, 'll, 'tcx> {\n                         for &(_, feature) in reg_class.supported_types(asm_arch) {\n                             if let Some(feature) = feature {\n                                 let codegen_fn_attrs = self.tcx.codegen_fn_attrs(instance.def_id());\n-                                let feature_name = Symbol::intern(feature);\n-                                if self.tcx.sess.target_features.contains(&feature_name)\n-                                    || codegen_fn_attrs.target_features.contains(&feature_name)\n+                                if self.tcx.sess.target_features.contains(&feature)\n+                                    || codegen_fn_attrs.target_features.contains(&feature)\n                                 {\n                                     return true;\n                                 }"}, {"sha": "e4bc5120ff8d83c6e6f62596eebd0869625097ee", "filename": "compiler/rustc_passes/src/intrinsicck.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs?ref=991cbd15034798e86de6823800b13c87fb3e904c", "patch": "@@ -294,9 +294,8 @@ impl<'tcx> ExprVisitor<'tcx> {\n         // (!). In that case we still need the earlier check to verify that the\n         // register class is usable at all.\n         if let Some(feature) = feature {\n-            let feat_sym = Symbol::intern(feature);\n-            if !self.tcx.sess.target_features.contains(&feat_sym)\n-                && !target_features.contains(&feat_sym)\n+            if !self.tcx.sess.target_features.contains(&feature)\n+                && !target_features.contains(&feature)\n             {\n                 let msg = &format!(\"`{}` target feature is not enabled\", feature);\n                 let mut err = self.tcx.sess.struct_span_err(expr.span, msg);\n@@ -377,9 +376,8 @@ impl<'tcx> ExprVisitor<'tcx> {\n                     {\n                         match feature {\n                             Some(feature) => {\n-                                let feat_sym = Symbol::intern(feature);\n-                                if self.tcx.sess.target_features.contains(&feat_sym)\n-                                    || attrs.target_features.contains(&feat_sym)\n+                                if self.tcx.sess.target_features.contains(&feature)\n+                                    || attrs.target_features.contains(&feature)\n                                 {\n                                     missing_required_features.clear();\n                                     break;\n@@ -413,7 +411,7 @@ impl<'tcx> ExprVisitor<'tcx> {\n                             let msg = format!(\n                                 \"register class `{}` requires at least one of the following target features: {}\",\n                                 reg_class.name(),\n-                                features.join(\", \")\n+                                features.iter().map(|f| f.as_str()).collect::<Vec<_>>().join(\", \")\n                             );\n                             self.tcx.sess.struct_span_err(*op_sp, &msg).emit();\n                             // register isn't enabled, don't do more checks"}, {"sha": "6f9ce8ab1c015e2cc743d74bf40ae2d671481e1d", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=991cbd15034798e86de6823800b13c87fb3e904c", "patch": "@@ -316,6 +316,7 @@ symbols! {\n         allow_internal_unsafe,\n         allow_internal_unstable,\n         allowed,\n+        alu32,\n         always,\n         and,\n         and_then,\n@@ -361,7 +362,10 @@ symbols! {\n         augmented_assignments,\n         auto_traits,\n         automatically_derived,\n+        avx,\n         avx512_target_feature,\n+        avx512bw,\n+        avx512f,\n         await_macro,\n         bang,\n         begin_panic,\n@@ -592,6 +596,7 @@ symbols! {\n         dylib,\n         dyn_metadata,\n         dyn_trait,\n+        e,\n         edition_macro_pats,\n         edition_panic,\n         eh_catch_typeinfo,\n@@ -682,6 +687,7 @@ symbols! {\n         format_args_macro,\n         format_args_nl,\n         format_macro,\n+        fp,\n         freeze,\n         freg,\n         frem_fast,\n@@ -907,6 +913,7 @@ symbols! {\n         neg,\n         negate_unsigned,\n         negative_impls,\n+        neon,\n         never,\n         never_type,\n         never_type_fallback,\n@@ -1101,6 +1108,7 @@ symbols! {\n         repr_packed,\n         repr_simd,\n         repr_transparent,\n+        reserved_r9: \"reserved-r9\",\n         residual,\n         result,\n         rhs,\n@@ -1294,6 +1302,7 @@ symbols! {\n         sqrtf64,\n         sreg,\n         sreg_low16,\n+        sse,\n         sse4a_target_feature,\n         stable,\n         staged_api,\n@@ -1360,6 +1369,8 @@ symbols! {\n         thread,\n         thread_local,\n         thread_local_macro,\n+        thumb2,\n+        thumb_mode: \"thumb-mode\",\n         todo_macro,\n         tool_attributes,\n         tool_lints,\n@@ -1453,6 +1464,7 @@ symbols! {\n         vec,\n         vec_macro,\n         version,\n+        vfp2,\n         vis,\n         visible_private_types,\n         volatile,"}, {"sha": "2415b16d78278bb9ea2b54a0a6b80f4f0dc552a5", "filename": "compiler/rustc_target/src/asm/aarch64.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Faarch64.rs?ref=991cbd15034798e86de6823800b13c87fb3e904c", "patch": "@@ -1,6 +1,7 @@\n use super::{InlineAsmArch, InlineAsmType};\n use crate::spec::Target;\n use rustc_macros::HashStable_Generic;\n+use rustc_span::Symbol;\n use std::fmt;\n \n def_reg_class! {\n@@ -58,11 +59,11 @@ impl AArch64InlineAsmRegClass {\n     pub fn supported_types(\n         self,\n         _arch: InlineAsmArch,\n-    ) -> &'static [(InlineAsmType, Option<&'static str>)] {\n+    ) -> &'static [(InlineAsmType, Option<Symbol>)] {\n         match self {\n             Self::reg => types! { _: I8, I16, I32, I64, F32, F64; },\n             Self::vreg | Self::vreg_low16 => types! {\n-                \"fp\": I8, I16, I32, I64, F32, F64,\n+                fp: I8, I16, I32, I64, F32, F64,\n                     VecI8(8), VecI16(4), VecI32(2), VecI64(1), VecF32(2), VecF64(1),\n                     VecI8(16), VecI16(8), VecI32(4), VecI64(2), VecF32(4), VecF64(2);\n             },\n@@ -73,7 +74,7 @@ impl AArch64InlineAsmRegClass {\n \n pub fn reserved_x18(\n     _arch: InlineAsmArch,\n-    _has_feature: impl FnMut(&str) -> bool,\n+    _has_feature: impl FnMut(Symbol) -> bool,\n     target: &Target,\n ) -> Result<(), &'static str> {\n     if target.os == \"android\""}, {"sha": "83782206735d2375a25a3ab6b777807d92311471", "filename": "compiler/rustc_target/src/asm/arm.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs?ref=991cbd15034798e86de6823800b13c87fb3e904c", "patch": "@@ -1,6 +1,7 @@\n use super::{InlineAsmArch, InlineAsmType};\n use crate::spec::Target;\n use rustc_macros::HashStable_Generic;\n+use rustc_span::{sym, Symbol};\n use std::fmt;\n \n def_reg_class! {\n@@ -44,28 +45,28 @@ impl ArmInlineAsmRegClass {\n     pub fn supported_types(\n         self,\n         _arch: InlineAsmArch,\n-    ) -> &'static [(InlineAsmType, Option<&'static str>)] {\n+    ) -> &'static [(InlineAsmType, Option<Symbol>)] {\n         match self {\n             Self::reg => types! { _: I8, I16, I32, F32; },\n-            Self::sreg | Self::sreg_low16 => types! { \"vfp2\": I32, F32; },\n+            Self::sreg | Self::sreg_low16 => types! { vfp2: I32, F32; },\n             Self::dreg | Self::dreg_low16 | Self::dreg_low8 => types! {\n-                \"vfp2\": I64, F64, VecI8(8), VecI16(4), VecI32(2), VecI64(1), VecF32(2);\n+                vfp2: I64, F64, VecI8(8), VecI16(4), VecI32(2), VecI64(1), VecF32(2);\n             },\n             Self::qreg | Self::qreg_low8 | Self::qreg_low4 => types! {\n-                \"neon\": VecI8(16), VecI16(8), VecI32(4), VecI64(2), VecF32(4);\n+                neon: VecI8(16), VecI16(8), VecI32(4), VecI64(2), VecF32(4);\n             },\n         }\n     }\n }\n \n // This uses the same logic as useR7AsFramePointer in LLVM\n-fn frame_pointer_is_r7(mut has_feature: impl FnMut(&str) -> bool, target: &Target) -> bool {\n-    target.is_like_osx || (!target.is_like_windows && has_feature(\"thumb-mode\"))\n+fn frame_pointer_is_r7(mut has_feature: impl FnMut(Symbol) -> bool, target: &Target) -> bool {\n+    target.is_like_osx || (!target.is_like_windows && has_feature(sym::thumb_mode))\n }\n \n fn frame_pointer_r11(\n     _arch: InlineAsmArch,\n-    has_feature: impl FnMut(&str) -> bool,\n+    has_feature: impl FnMut(Symbol) -> bool,\n     target: &Target,\n ) -> Result<(), &'static str> {\n     if !frame_pointer_is_r7(has_feature, target) {\n@@ -77,7 +78,7 @@ fn frame_pointer_r11(\n \n fn frame_pointer_r7(\n     _arch: InlineAsmArch,\n-    has_feature: impl FnMut(&str) -> bool,\n+    has_feature: impl FnMut(Symbol) -> bool,\n     target: &Target,\n ) -> Result<(), &'static str> {\n     if frame_pointer_is_r7(has_feature, target) {\n@@ -89,10 +90,10 @@ fn frame_pointer_r7(\n \n fn not_thumb1(\n     _arch: InlineAsmArch,\n-    mut has_feature: impl FnMut(&str) -> bool,\n+    mut has_feature: impl FnMut(Symbol) -> bool,\n     _target: &Target,\n ) -> Result<(), &'static str> {\n-    if has_feature(\"thumb-mode\") && !has_feature(\"thumb2\") {\n+    if has_feature(sym::thumb_mode) && !has_feature(sym::thumb2) {\n         Err(\"high registers (r8+) cannot be used in Thumb-1 code\")\n     } else {\n         Ok(())\n@@ -101,14 +102,14 @@ fn not_thumb1(\n \n fn reserved_r9(\n     arch: InlineAsmArch,\n-    mut has_feature: impl FnMut(&str) -> bool,\n+    mut has_feature: impl FnMut(Symbol) -> bool,\n     target: &Target,\n ) -> Result<(), &'static str> {\n     not_thumb1(arch, &mut has_feature, target)?;\n \n     // We detect this using the reserved-r9 feature instead of using the target\n     // because the relocation model can be changed with compiler options.\n-    if has_feature(\"reserved-r9\") {\n+    if has_feature(sym::reserved_r9) {\n         Err(\"the RWPI static base register (r9) cannot be used as an operand for inline asm\")\n     } else {\n         Ok(())"}, {"sha": "9a96a61f5b2cdccb976ed6bfb8b9190917645146", "filename": "compiler/rustc_target/src/asm/avr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_target%2Fsrc%2Fasm%2Favr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_target%2Fsrc%2Fasm%2Favr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Favr.rs?ref=991cbd15034798e86de6823800b13c87fb3e904c", "patch": "@@ -1,5 +1,6 @@\n use super::{InlineAsmArch, InlineAsmType};\n use rustc_macros::HashStable_Generic;\n+use rustc_span::Symbol;\n use std::fmt;\n \n def_reg_class! {\n@@ -39,7 +40,7 @@ impl AvrInlineAsmRegClass {\n     pub fn supported_types(\n         self,\n         _arch: InlineAsmArch,\n-    ) -> &'static [(InlineAsmType, Option<&'static str>)] {\n+    ) -> &'static [(InlineAsmType, Option<Symbol>)] {\n         match self {\n             Self::reg => types! { _: I8; },\n             Self::reg_upper => types! { _: I8; },"}, {"sha": "f9a68731282f54e0acfbd37c1c943e0740718188", "filename": "compiler/rustc_target/src/asm/bpf.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_target%2Fsrc%2Fasm%2Fbpf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_target%2Fsrc%2Fasm%2Fbpf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fbpf.rs?ref=991cbd15034798e86de6823800b13c87fb3e904c", "patch": "@@ -1,5 +1,6 @@\n use super::{InlineAsmArch, InlineAsmType, Target};\n use rustc_macros::HashStable_Generic;\n+use rustc_span::{sym, Symbol};\n use std::fmt;\n \n def_reg_class! {\n@@ -33,20 +34,20 @@ impl BpfInlineAsmRegClass {\n     pub fn supported_types(\n         self,\n         _arch: InlineAsmArch,\n-    ) -> &'static [(InlineAsmType, Option<&'static str>)] {\n+    ) -> &'static [(InlineAsmType, Option<Symbol>)] {\n         match self {\n             Self::reg => types! { _: I8, I16, I32, I64; },\n-            Self::wreg => types! { \"alu32\": I8, I16, I32; },\n+            Self::wreg => types! { alu32: I8, I16, I32; },\n         }\n     }\n }\n \n fn only_alu32(\n     _arch: InlineAsmArch,\n-    mut has_feature: impl FnMut(&str) -> bool,\n+    mut has_feature: impl FnMut(Symbol) -> bool,\n     _target: &Target,\n ) -> Result<(), &'static str> {\n-    if !has_feature(\"alu32\") {\n+    if !has_feature(sym::alu32) {\n         Err(\"register can't be used without the `alu32` target feature\")\n     } else {\n         Ok(())"}, {"sha": "d20270ac9e95a111b5dc2f55089cf06996281210", "filename": "compiler/rustc_target/src/asm/hexagon.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_target%2Fsrc%2Fasm%2Fhexagon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_target%2Fsrc%2Fasm%2Fhexagon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fhexagon.rs?ref=991cbd15034798e86de6823800b13c87fb3e904c", "patch": "@@ -1,5 +1,6 @@\n use super::{InlineAsmArch, InlineAsmType};\n use rustc_macros::HashStable_Generic;\n+use rustc_span::Symbol;\n use std::fmt;\n \n def_reg_class! {\n@@ -32,7 +33,7 @@ impl HexagonInlineAsmRegClass {\n     pub fn supported_types(\n         self,\n         _arch: InlineAsmArch,\n-    ) -> &'static [(InlineAsmType, Option<&'static str>)] {\n+    ) -> &'static [(InlineAsmType, Option<Symbol>)] {\n         match self {\n             Self::reg => types! { _: I8, I16, I32, F32; },\n         }"}, {"sha": "b1e8737b52b90a45d0ecc3d49615d0f292518697", "filename": "compiler/rustc_target/src/asm/mips.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmips.rs?ref=991cbd15034798e86de6823800b13c87fb3e904c", "patch": "@@ -1,5 +1,6 @@\n use super::{InlineAsmArch, InlineAsmType};\n use rustc_macros::HashStable_Generic;\n+use rustc_span::Symbol;\n use std::fmt;\n \n def_reg_class! {\n@@ -33,7 +34,7 @@ impl MipsInlineAsmRegClass {\n     pub fn supported_types(\n         self,\n         arch: InlineAsmArch,\n-    ) -> &'static [(InlineAsmType, Option<&'static str>)] {\n+    ) -> &'static [(InlineAsmType, Option<Symbol>)] {\n         match (self, arch) {\n             (Self::reg, InlineAsmArch::Mips64) => types! { _: I8, I16, I32, I64, F32, F64; },\n             (Self::reg, _) => types! { _: I8, I16, I32, F32; },"}, {"sha": "33053089aa8e2591deaca419aa8421fac00227bb", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=991cbd15034798e86de6823800b13c87fb3e904c", "patch": "@@ -81,7 +81,7 @@ macro_rules! def_regs {\n \n             pub fn parse(\n                 _arch: super::InlineAsmArch,\n-                mut _has_feature: impl FnMut(&str) -> bool,\n+                mut _has_feature: impl FnMut(rustc_span::Symbol) -> bool,\n                 _target: &crate::spec::Target,\n                 name: &str,\n             ) -> Result<Self, &'static str> {\n@@ -102,7 +102,7 @@ macro_rules! def_regs {\n \n         pub(super) fn fill_reg_map(\n             _arch: super::InlineAsmArch,\n-            mut _has_feature: impl FnMut(&str) -> bool,\n+            mut _has_feature: impl FnMut(rustc_span::Symbol) -> bool,\n             _target: &crate::spec::Target,\n             _map: &mut rustc_data_structures::fx::FxHashMap<\n                 super::InlineAsmRegClass,\n@@ -130,7 +130,7 @@ macro_rules! def_regs {\n macro_rules! types {\n     (\n         $(_ : $($ty:expr),+;)?\n-        $($feature:literal: $($ty2:expr),+;)*\n+        $($feature:ident: $($ty2:expr),+;)*\n     ) => {\n         {\n             use super::InlineAsmType::*;\n@@ -139,7 +139,7 @@ macro_rules! types {\n                     ($ty, None),\n                 )*)?\n                 $($(\n-                    ($ty2, Some($feature)),\n+                    ($ty2, Some(rustc_span::sym::$feature)),\n                 )*)*\n             ]\n         }\n@@ -289,7 +289,7 @@ impl InlineAsmReg {\n \n     pub fn parse(\n         arch: InlineAsmArch,\n-        has_feature: impl FnMut(&str) -> bool,\n+        has_feature: impl FnMut(Symbol) -> bool,\n         target: &Target,\n         name: Symbol,\n     ) -> Result<Self, &'static str> {\n@@ -510,7 +510,7 @@ impl InlineAsmRegClass {\n     pub fn supported_types(\n         self,\n         arch: InlineAsmArch,\n-    ) -> &'static [(InlineAsmType, Option<&'static str>)] {\n+    ) -> &'static [(InlineAsmType, Option<Symbol>)] {\n         match self {\n             Self::X86(r) => r.supported_types(arch),\n             Self::Arm(r) => r.supported_types(arch),\n@@ -695,7 +695,7 @@ impl fmt::Display for InlineAsmType {\n // falling back to an external assembler.\n pub fn allocatable_registers(\n     arch: InlineAsmArch,\n-    has_feature: impl FnMut(&str) -> bool,\n+    has_feature: impl FnMut(Symbol) -> bool,\n     target: &crate::spec::Target,\n ) -> FxHashMap<InlineAsmRegClass, FxHashSet<InlineAsmReg>> {\n     match arch {\n@@ -794,7 +794,7 @@ impl InlineAsmClobberAbi {\n     /// clobber ABIs for the target.\n     pub fn parse(\n         arch: InlineAsmArch,\n-        has_feature: impl FnMut(&str) -> bool,\n+        has_feature: impl FnMut(Symbol) -> bool,\n         target: &Target,\n         name: Symbol,\n     ) -> Result<Self, &'static [&'static str]> {"}, {"sha": "8e1e91e7c5f1fec65ff83ac0b4d0dd3d5f221f14", "filename": "compiler/rustc_target/src/asm/nvptx.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_target%2Fsrc%2Fasm%2Fnvptx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_target%2Fsrc%2Fasm%2Fnvptx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fnvptx.rs?ref=991cbd15034798e86de6823800b13c87fb3e904c", "patch": "@@ -1,5 +1,6 @@\n use super::{InlineAsmArch, InlineAsmType};\n use rustc_macros::HashStable_Generic;\n+use rustc_span::Symbol;\n \n def_reg_class! {\n     Nvptx NvptxInlineAsmRegClass {\n@@ -33,7 +34,7 @@ impl NvptxInlineAsmRegClass {\n     pub fn supported_types(\n         self,\n         _arch: InlineAsmArch,\n-    ) -> &'static [(InlineAsmType, Option<&'static str>)] {\n+    ) -> &'static [(InlineAsmType, Option<Symbol>)] {\n         match self {\n             Self::reg16 => types! { _: I8, I16; },\n             Self::reg32 => types! { _: I8, I16, I32, F32; },"}, {"sha": "d3ccb30350a27dd3be00e6e678397f6876e5cada", "filename": "compiler/rustc_target/src/asm/powerpc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_target%2Fsrc%2Fasm%2Fpowerpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_target%2Fsrc%2Fasm%2Fpowerpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fpowerpc.rs?ref=991cbd15034798e86de6823800b13c87fb3e904c", "patch": "@@ -1,5 +1,6 @@\n use super::{InlineAsmArch, InlineAsmType};\n use rustc_macros::HashStable_Generic;\n+use rustc_span::Symbol;\n use std::fmt;\n \n def_reg_class! {\n@@ -36,7 +37,7 @@ impl PowerPCInlineAsmRegClass {\n     pub fn supported_types(\n         self,\n         arch: InlineAsmArch,\n-    ) -> &'static [(InlineAsmType, Option<&'static str>)] {\n+    ) -> &'static [(InlineAsmType, Option<Symbol>)] {\n         match self {\n             Self::reg | Self::reg_nonzero => {\n                 if arch == InlineAsmArch::PowerPC {"}, {"sha": "391b34aa05ce53cadeadd71f90f968600e4c01e9", "filename": "compiler/rustc_target/src/asm/riscv.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Friscv.rs?ref=991cbd15034798e86de6823800b13c87fb3e904c", "patch": "@@ -1,6 +1,7 @@\n use super::{InlineAsmArch, InlineAsmType};\n use crate::spec::Target;\n use rustc_macros::HashStable_Generic;\n+use rustc_span::{sym, Symbol};\n use std::fmt;\n \n def_reg_class! {\n@@ -35,7 +36,7 @@ impl RiscVInlineAsmRegClass {\n     pub fn supported_types(\n         self,\n         arch: InlineAsmArch,\n-    ) -> &'static [(InlineAsmType, Option<&'static str>)] {\n+    ) -> &'static [(InlineAsmType, Option<Symbol>)] {\n         match self {\n             Self::reg => {\n                 if arch == InlineAsmArch::RiscV64 {\n@@ -44,18 +45,18 @@ impl RiscVInlineAsmRegClass {\n                     types! { _: I8, I16, I32, F32; }\n                 }\n             }\n-            Self::freg => types! { \"f\": F32; \"d\": F64; },\n+            Self::freg => types! { f: F32; d: F64; },\n             Self::vreg => &[],\n         }\n     }\n }\n \n fn not_e(\n     _arch: InlineAsmArch,\n-    mut has_feature: impl FnMut(&str) -> bool,\n+    mut has_feature: impl FnMut(Symbol) -> bool,\n     _target: &Target,\n ) -> Result<(), &'static str> {\n-    if has_feature(\"e\") {\n+    if has_feature(sym::e) {\n         Err(\"register can't be used with the `e` target feature\")\n     } else {\n         Ok(())"}, {"sha": "0a50064f58755cea2844589c0854ac4031d8d00c", "filename": "compiler/rustc_target/src/asm/s390x.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_target%2Fsrc%2Fasm%2Fs390x.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_target%2Fsrc%2Fasm%2Fs390x.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fs390x.rs?ref=991cbd15034798e86de6823800b13c87fb3e904c", "patch": "@@ -1,5 +1,6 @@\n use super::{InlineAsmArch, InlineAsmType};\n use rustc_macros::HashStable_Generic;\n+use rustc_span::Symbol;\n use std::fmt;\n \n def_reg_class! {\n@@ -33,7 +34,7 @@ impl S390xInlineAsmRegClass {\n     pub fn supported_types(\n         self,\n         arch: InlineAsmArch,\n-    ) -> &'static [(InlineAsmType, Option<&'static str>)] {\n+    ) -> &'static [(InlineAsmType, Option<Symbol>)] {\n         match (self, arch) {\n             (Self::reg, _) => types! { _: I8, I16, I32, I64; },\n             (Self::freg, _) => types! { _: F32, F64; },"}, {"sha": "31073da10b21b5b153b81c20067a2f30883a2cac", "filename": "compiler/rustc_target/src/asm/spirv.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_target%2Fsrc%2Fasm%2Fspirv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_target%2Fsrc%2Fasm%2Fspirv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fspirv.rs?ref=991cbd15034798e86de6823800b13c87fb3e904c", "patch": "@@ -1,5 +1,6 @@\n use super::{InlineAsmArch, InlineAsmType};\n use rustc_macros::HashStable_Generic;\n+use rustc_span::Symbol;\n \n def_reg_class! {\n     SpirV SpirVInlineAsmRegClass {\n@@ -31,7 +32,7 @@ impl SpirVInlineAsmRegClass {\n     pub fn supported_types(\n         self,\n         _arch: InlineAsmArch,\n-    ) -> &'static [(InlineAsmType, Option<&'static str>)] {\n+    ) -> &'static [(InlineAsmType, Option<Symbol>)] {\n         match self {\n             Self::reg => {\n                 types! { _: I8, I16, I32, I64, F32, F64; }"}, {"sha": "f095b7c6e118ca9010b058c9fa16d06f571d1530", "filename": "compiler/rustc_target/src/asm/wasm.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_target%2Fsrc%2Fasm%2Fwasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_target%2Fsrc%2Fasm%2Fwasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fwasm.rs?ref=991cbd15034798e86de6823800b13c87fb3e904c", "patch": "@@ -1,5 +1,6 @@\n use super::{InlineAsmArch, InlineAsmType};\n use rustc_macros::HashStable_Generic;\n+use rustc_span::Symbol;\n \n def_reg_class! {\n     Wasm WasmInlineAsmRegClass {\n@@ -31,7 +32,7 @@ impl WasmInlineAsmRegClass {\n     pub fn supported_types(\n         self,\n         _arch: InlineAsmArch,\n-    ) -> &'static [(InlineAsmType, Option<&'static str>)] {\n+    ) -> &'static [(InlineAsmType, Option<Symbol>)] {\n         match self {\n             Self::local => {\n                 types! { _: I8, I16, I32, I64, F32, F64; }"}, {"sha": "e77eb71e67019477f2b6dcd66d49ed584cff206e", "filename": "compiler/rustc_target/src/asm/x86.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/991cbd15034798e86de6823800b13c87fb3e904c/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fx86.rs?ref=991cbd15034798e86de6823800b13c87fb3e904c", "patch": "@@ -1,6 +1,7 @@\n use super::{InlineAsmArch, InlineAsmType};\n use crate::spec::Target;\n use rustc_macros::HashStable_Generic;\n+use rustc_span::Symbol;\n use std::fmt;\n \n def_reg_class! {\n@@ -101,7 +102,7 @@ impl X86InlineAsmRegClass {\n     pub fn supported_types(\n         self,\n         arch: InlineAsmArch,\n-    ) -> &'static [(InlineAsmType, Option<&'static str>)] {\n+    ) -> &'static [(InlineAsmType, Option<Symbol>)] {\n         match self {\n             Self::reg | Self::reg_abcd => {\n                 if arch == InlineAsmArch::X86_64 {\n@@ -112,23 +113,23 @@ impl X86InlineAsmRegClass {\n             }\n             Self::reg_byte => types! { _: I8; },\n             Self::xmm_reg => types! {\n-                \"sse\": I32, I64, F32, F64,\n+                sse: I32, I64, F32, F64,\n                   VecI8(16), VecI16(8), VecI32(4), VecI64(2), VecF32(4), VecF64(2);\n             },\n             Self::ymm_reg => types! {\n-                \"avx\": I32, I64, F32, F64,\n+                avx: I32, I64, F32, F64,\n                     VecI8(16), VecI16(8), VecI32(4), VecI64(2), VecF32(4), VecF64(2),\n                     VecI8(32), VecI16(16), VecI32(8), VecI64(4), VecF32(8), VecF64(4);\n             },\n             Self::zmm_reg => types! {\n-                \"avx512f\": I32, I64, F32, F64,\n+                avx512f: I32, I64, F32, F64,\n                     VecI8(16), VecI16(8), VecI32(4), VecI64(2), VecF32(4), VecF64(2),\n                     VecI8(32), VecI16(16), VecI32(8), VecI64(4), VecF32(8), VecF64(4),\n                     VecI8(64), VecI16(32), VecI32(16), VecI64(8), VecF32(16), VecF64(8);\n             },\n             Self::kreg => types! {\n-                \"avx512f\": I8, I16;\n-                \"avx512bw\": I32, I64;\n+                avx512f: I8, I16;\n+                avx512bw: I32, I64;\n             },\n             Self::mmx_reg | Self::x87_reg => &[],\n         }\n@@ -137,7 +138,7 @@ impl X86InlineAsmRegClass {\n \n fn x86_64_only(\n     arch: InlineAsmArch,\n-    _has_feature: impl FnMut(&str) -> bool,\n+    _has_feature: impl FnMut(Symbol) -> bool,\n     _target: &Target,\n ) -> Result<(), &'static str> {\n     match arch {\n@@ -149,7 +150,7 @@ fn x86_64_only(\n \n fn high_byte(\n     arch: InlineAsmArch,\n-    _has_feature: impl FnMut(&str) -> bool,\n+    _has_feature: impl FnMut(Symbol) -> bool,\n     _target: &Target,\n ) -> Result<(), &'static str> {\n     match arch {\n@@ -160,7 +161,7 @@ fn high_byte(\n \n fn rbx_reserved(\n     arch: InlineAsmArch,\n-    _has_feature: impl FnMut(&str) -> bool,\n+    _has_feature: impl FnMut(Symbol) -> bool,\n     _target: &Target,\n ) -> Result<(), &'static str> {\n     match arch {\n@@ -174,7 +175,7 @@ fn rbx_reserved(\n \n fn esi_reserved(\n     arch: InlineAsmArch,\n-    _has_feature: impl FnMut(&str) -> bool,\n+    _has_feature: impl FnMut(Symbol) -> bool,\n     _target: &Target,\n ) -> Result<(), &'static str> {\n     match arch {"}]}