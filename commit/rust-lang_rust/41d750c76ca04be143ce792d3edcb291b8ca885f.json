{"sha": "41d750c76ca04be143ce792d3edcb291b8ca885f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxZDc1MGM3NmNhMDRiZTE0M2NlNzkyZDNlZGNiMjkxYjhjYTg4NWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-22T22:45:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-22T22:45:43Z"}, "message": "Auto merge of #6619 - camsteffen:collapsible-match, r=camsteffen\n\nImprove collapsible_match\n\nchangelog: Fix collapsible_match false negatives\n\nAllow `&` and/or `*` on the binding and make sure the type still matches.", "tree": {"sha": "bb02e1c21117b459e54dabb6a7194654e6249340", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb02e1c21117b459e54dabb6a7194654e6249340"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41d750c76ca04be143ce792d3edcb291b8ca885f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41d750c76ca04be143ce792d3edcb291b8ca885f", "html_url": "https://github.com/rust-lang/rust/commit/41d750c76ca04be143ce792d3edcb291b8ca885f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41d750c76ca04be143ce792d3edcb291b8ca885f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c3f4a75b4f2747a36cf2066af747f47542fdb93", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c3f4a75b4f2747a36cf2066af747f47542fdb93", "html_url": "https://github.com/rust-lang/rust/commit/3c3f4a75b4f2747a36cf2066af747f47542fdb93"}, {"sha": "50abde20c901cf815480f0b494234025c315cc7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/50abde20c901cf815480f0b494234025c315cc7f", "html_url": "https://github.com/rust-lang/rust/commit/50abde20c901cf815480f0b494234025c315cc7f"}], "stats": {"total": 108, "additions": 95, "deletions": 13}, "files": [{"sha": "604ba1020469714be54f7911ccbb082e5a271a55", "filename": "clippy_lints/src/collapsible_match.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/41d750c76ca04be143ce792d3edcb291b8ca885f/clippy_lints%2Fsrc%2Fcollapsible_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41d750c76ca04be143ce792d3edcb291b8ca885f/clippy_lints%2Fsrc%2Fcollapsible_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_match.rs?ref=41d750c76ca04be143ce792d3edcb291b8ca885f", "patch": "@@ -2,7 +2,7 @@ use crate::utils::visitors::LocalUsedVisitor;\n use crate::utils::{span_lint_and_then, SpanlessEq};\n use if_chain::if_chain;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n-use rustc_hir::{Arm, Expr, ExprKind, Guard, HirId, Pat, PatKind, QPath, StmtKind};\n+use rustc_hir::{Arm, Expr, ExprKind, Guard, HirId, Pat, PatKind, QPath, StmtKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{DefIdTree, TyCtxt};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -72,8 +72,7 @@ fn check_arm(arm: &Arm<'_>, wild_outer_arm: &Arm<'_>, cx: &LateContext<'_>) {\n         if arms_inner.iter().all(|arm| arm.guard.is_none());\n         // match expression must be a local binding\n         // match <local> { .. }\n-        if let ExprKind::Path(QPath::Resolved(None, path)) = expr_in.kind;\n-        if let Res::Local(binding_id) = path.res;\n+        if let Some(binding_id) = addr_adjusted_binding(expr_in, cx);\n         // one of the branches must be \"wild-like\"\n         if let Some(wild_inner_arm_idx) = arms_inner.iter().rposition(|arm_inner| arm_is_wild_like(arm_inner, cx.tcx));\n         let (wild_inner_arm, non_wild_inner_arm) =\n@@ -85,7 +84,12 @@ fn check_arm(arm: &Arm<'_>, wild_outer_arm: &Arm<'_>, cx: &LateContext<'_>) {\n         // the \"wild-like\" branches must be equal\n         if SpanlessEq::new(cx).eq_expr(wild_inner_arm.body, wild_outer_arm.body);\n         // the binding must not be used in the if guard\n-        if !matches!(arm.guard, Some(Guard::If(guard)) if LocalUsedVisitor::new(binding_id).check_expr(guard));\n+        if match arm.guard {\n+            None => true,\n+            Some(Guard::If(expr) | Guard::IfLet(_, expr)) => {\n+                !LocalUsedVisitor::new(binding_id).check_expr(expr)\n+            }\n+        };\n         // ...or anywhere in the inner match\n         if !arms_inner.iter().any(|arm| LocalUsedVisitor::new(binding_id).check_arm(arm));\n         then {\n@@ -170,3 +174,20 @@ fn is_none_ctor(res: Res, tcx: TyCtxt<'_>) -> bool {\n     }\n     false\n }\n+\n+/// Retrieves a binding ID with optional `&` and/or `*` operators removed. (e.g. `&**foo`)\n+/// Returns `None` if a non-reference type is de-referenced.\n+/// For example, if `Vec` is de-referenced to a slice, `None` is returned.\n+fn addr_adjusted_binding(mut expr: &Expr<'_>, cx: &LateContext<'_>) -> Option<HirId> {\n+    loop {\n+        match expr.kind {\n+            ExprKind::AddrOf(_, _, e) => expr = e,\n+            ExprKind::Path(QPath::Resolved(None, path)) => match path.res {\n+                Res::Local(binding_id) => break Some(binding_id),\n+                _ => break None,\n+            },\n+            ExprKind::Unary(UnOp::UnDeref, e) if cx.typeck_results().expr_ty(e).is_ref() => expr = e,\n+            _ => break None,\n+        }\n+    }\n+}"}, {"sha": "1ed3f3de839085d3e73510edc49921738d6ec003", "filename": "clippy_lints/src/main_recursion.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/41d750c76ca04be143ce792d3edcb291b8ca885f/clippy_lints%2Fsrc%2Fmain_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41d750c76ca04be143ce792d3edcb291b8ca885f/clippy_lints%2Fsrc%2Fmain_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmain_recursion.rs?ref=41d750c76ca04be143ce792d3edcb291b8ca885f", "patch": "@@ -43,8 +43,7 @@ impl LateLintPass<'_> for MainRecursion {\n \n         if_chain! {\n             if let ExprKind::Call(func, _) = &expr.kind;\n-            if let ExprKind::Path(path) = &func.kind;\n-            if let QPath::Resolved(_, path) = &path;\n+            if let ExprKind::Path(QPath::Resolved(_, path)) = &func.kind;\n             if let Some(def_id) = path.res.opt_def_id();\n             if is_entrypoint_fn(cx, def_id);\n             then {"}, {"sha": "b5aa34111402c9e1c408b136e15748fa923665db", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/41d750c76ca04be143ce792d3edcb291b8ca885f/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41d750c76ca04be143ce792d3edcb291b8ca885f/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=41d750c76ca04be143ce792d3edcb291b8ca885f", "patch": "@@ -263,8 +263,7 @@ fn check_fn(cx: &LateContext<'_>, decl: &FnDecl<'_>, fn_id: HirId, opt_body_id:\n             } else if match_type(cx, ty, &paths::COW) {\n                 if_chain! {\n                     if let TyKind::Rptr(_, MutTy { ref ty, ..} ) = arg.kind;\n-                    if let TyKind::Path(ref path) = ty.kind;\n-                    if let QPath::Resolved(None, ref pp) = *path;\n+                    if let TyKind::Path(QPath::Resolved(None, ref pp)) = ty.kind;\n                     if let [ref bx] = *pp.segments;\n                     if let Some(ref params) = bx.args;\n                     if !params.parenthesized;"}, {"sha": "bb71d95a7e2b4bcf1ba929039faa6f5487293b2f", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/41d750c76ca04be143ce792d3edcb291b8ca885f/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41d750c76ca04be143ce792d3edcb291b8ca885f/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=41d750c76ca04be143ce792d3edcb291b8ca885f", "patch": "@@ -158,8 +158,7 @@ pub fn for_loop<'tcx>(\n /// `while cond { body }` becomes `(cond, body)`.\n pub fn while_loop<'tcx>(expr: &'tcx hir::Expr<'tcx>) -> Option<(&'tcx hir::Expr<'tcx>, &'tcx hir::Expr<'tcx>)> {\n     if_chain! {\n-        if let hir::ExprKind::Loop(block, _, hir::LoopSource::While) = &expr.kind;\n-        if let hir::Block { expr: Some(expr), .. } = &**block;\n+        if let hir::ExprKind::Loop(hir::Block { expr: Some(expr), .. }, _, hir::LoopSource::While) = &expr.kind;\n         if let hir::ExprKind::Match(cond, arms, hir::MatchSource::WhileDesugar) = &expr.kind;\n         if let hir::ExprKind::DropTemps(cond) = &cond.kind;\n         if let [hir::Arm { body, .. }, ..] = &arms[..];"}, {"sha": "991fae6b1aaa621bd67cb5a2e6db03e647ee3420", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/41d750c76ca04be143ce792d3edcb291b8ca885f/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41d750c76ca04be143ce792d3edcb291b8ca885f/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=41d750c76ca04be143ce792d3edcb291b8ca885f", "patch": "@@ -1126,8 +1126,7 @@ pub fn is_self(slf: &Param<'_>) -> bool {\n \n pub fn is_self_ty(slf: &hir::Ty<'_>) -> bool {\n     if_chain! {\n-        if let TyKind::Path(ref qp) = slf.kind;\n-        if let QPath::Resolved(None, ref path) = *qp;\n+        if let TyKind::Path(QPath::Resolved(None, ref path)) = slf.kind;\n         if let Res::SelfTy(..) = path.res;\n         then {\n             return true"}, {"sha": "8372a21247734626ebae426ea0cdac42b9e79a13", "filename": "tests/ui/collapsible_match2.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/41d750c76ca04be143ce792d3edcb291b8ca885f/tests%2Fui%2Fcollapsible_match2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41d750c76ca04be143ce792d3edcb291b8ca885f/tests%2Fui%2Fcollapsible_match2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_match2.rs?ref=41d750c76ca04be143ce792d3edcb291b8ca885f", "patch": "@@ -40,6 +40,35 @@ fn lint_cases(opt_opt: Option<Option<u32>>, res_opt: Result<Option<u32>, String>\n         // there is still a better way to write this.\n         mac!(res_opt => Ok(val), val => Some(n), foo(n));\n     }\n+\n+    // deref reference value\n+    match Some(&[1]) {\n+        Some(s) => match *s {\n+            [n] => foo(n),\n+            _ => (),\n+        },\n+        _ => (),\n+    }\n+\n+    // ref pattern and deref\n+    match Some(&[1]) {\n+        Some(ref s) => match &*s {\n+            [n] => foo(n),\n+            _ => (),\n+        },\n+        _ => (),\n+    }\n+}\n+\n+fn no_lint() {\n+    // deref inner value (cannot pattern match with Vec)\n+    match Some(vec![1]) {\n+        Some(s) => match *s {\n+            [n] => foo(n),\n+            _ => (),\n+        },\n+        _ => (),\n+    }\n }\n \n fn make<T>() -> T {"}, {"sha": "b2eb457d1732622898250d32158c696db3e2a3b3", "filename": "tests/ui/collapsible_match2.stderr", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/41d750c76ca04be143ce792d3edcb291b8ca885f/tests%2Fui%2Fcollapsible_match2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41d750c76ca04be143ce792d3edcb291b8ca885f/tests%2Fui%2Fcollapsible_match2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_match2.stderr?ref=41d750c76ca04be143ce792d3edcb291b8ca885f", "patch": "@@ -57,5 +57,41 @@ LL |         mac!(res_opt => Ok(val), val => Some(n), foo(n));\n    |                            Replace this binding\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 3 previous errors\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match2.rs:46:20\n+   |\n+LL |           Some(s) => match *s {\n+   |  ____________________^\n+LL | |             [n] => foo(n),\n+LL | |             _ => (),\n+LL | |         },\n+   | |_________^\n+   |\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match2.rs:46:14\n+   |\n+LL |         Some(s) => match *s {\n+   |              ^ Replace this binding\n+LL |             [n] => foo(n),\n+   |             ^^^ with this pattern\n+\n+error: Unnecessary nested match\n+  --> $DIR/collapsible_match2.rs:55:24\n+   |\n+LL |           Some(ref s) => match &*s {\n+   |  ________________________^\n+LL | |             [n] => foo(n),\n+LL | |             _ => (),\n+LL | |         },\n+   | |_________^\n+   |\n+help: The outer pattern can be modified to include the inner pattern.\n+  --> $DIR/collapsible_match2.rs:55:14\n+   |\n+LL |         Some(ref s) => match &*s {\n+   |              ^^^^^ Replace this binding\n+LL |             [n] => foo(n),\n+   |             ^^^ with this pattern\n+\n+error: aborting due to 5 previous errors\n "}]}