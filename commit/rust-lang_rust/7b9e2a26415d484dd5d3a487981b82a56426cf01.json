{"sha": "7b9e2a26415d484dd5d3a487981b82a56426cf01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiOWUyYTI2NDE1ZDQ4NGRkNWQzYTQ4Nzk4MWI4MmE1NjQyNmNmMDE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-29T18:18:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-29T18:18:40Z"}, "message": "Merge #8243\n\n8243: Remove code duplication in highlight injection r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "b5459fd182f22450277e1822eaf2f612b1c8c9c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5459fd182f22450277e1822eaf2f612b1c8c9c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b9e2a26415d484dd5d3a487981b82a56426cf01", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgYhoACRBK7hj4Ov3rIwAAdHIIAIQz+oYRGll1TX6+Biuf/uUD\nvxoETeBcB/hJuZFC9eCFL/x5AoUd+xQNMbg2Ct6AxsPpbS/1C9E3JPur/qLOm5cb\nJZ9m9i89VksUnI/d+GBaDHdCbyAWn/YY6zmIuEJrtOhD8YsZg8yEp267viO08BKh\nKQn+ElF71YpyKSA7DzIuGffC4eYxRyAJHBeVsxBb6hpvtfnHAMCKArD3usgvLAIH\npDhlgfY1zr+304zxM3oZG3eqIDCXZ1KwdsSF2Iqid1lfwcV1M+gsKDqVVIIOpiiY\njXVtyr5jQV8dT7zQPVITa4KpEVSLnk0k9W/Q0OzhHAFfL83tVRdKKIKaAnIUqGI=\n=fH33\n-----END PGP SIGNATURE-----\n", "payload": "tree b5459fd182f22450277e1822eaf2f612b1c8c9c8\nparent 95107a7ccfcb27510884e2c4eaeba369854b4787\nparent 6b8358d4d9317c13593ae15e6065d67eecb85296\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617041920 +0000\ncommitter GitHub <noreply@github.com> 1617041920 +0000\n\nMerge #8243\n\n8243: Remove code duplication in highlight injection r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b9e2a26415d484dd5d3a487981b82a56426cf01", "html_url": "https://github.com/rust-lang/rust/commit/7b9e2a26415d484dd5d3a487981b82a56426cf01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b9e2a26415d484dd5d3a487981b82a56426cf01/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95107a7ccfcb27510884e2c4eaeba369854b4787", "url": "https://api.github.com/repos/rust-lang/rust/commits/95107a7ccfcb27510884e2c4eaeba369854b4787", "html_url": "https://github.com/rust-lang/rust/commit/95107a7ccfcb27510884e2c4eaeba369854b4787"}, {"sha": "6b8358d4d9317c13593ae15e6065d67eecb85296", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b8358d4d9317c13593ae15e6065d67eecb85296", "html_url": "https://github.com/rust-lang/rust/commit/6b8358d4d9317c13593ae15e6065d67eecb85296"}], "stats": {"total": 95, "additions": 35, "deletions": 60}, "files": [{"sha": "99276168fb498e7b5a806c619d2eba1ccce4504d", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 32, "deletions": 31, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/7b9e2a26415d484dd5d3a487981b82a56426cf01/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b9e2a26415d484dd5d3a487981b82a56426cf01/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=7b9e2a26415d484dd5d3a487981b82a56426cf01", "patch": "@@ -98,6 +98,29 @@ pub(crate) fn remove_links(markdown: &str) -> String {\n     out\n }\n \n+/// Retrieve a link to documentation for the given symbol.\n+pub(crate) fn external_docs(\n+    db: &RootDatabase,\n+    position: &FilePosition,\n+) -> Option<DocumentationLink> {\n+    let sema = Semantics::new(db);\n+    let file = sema.parse(position.file_id).syntax().clone();\n+    let token = pick_best(file.token_at_offset(position.offset))?;\n+    let token = sema.descend_into_macros(token);\n+\n+    let node = token.parent()?;\n+    let definition = match_ast! {\n+        match node {\n+            ast::NameRef(name_ref) => NameRefClass::classify(&sema, &name_ref).map(|d| d.referenced(sema.db)),\n+            ast::Name(name) => NameClass::classify(&sema, &name).map(|d| d.referenced_or_defined(sema.db)),\n+            _ => None,\n+        }\n+    };\n+\n+    get_doc_link(db, definition?)\n+}\n+\n+/// Extracts all links from a given markdown text.\n pub(crate) fn extract_definitions_from_markdown(\n     markdown: &str,\n ) -> Vec<(Range<usize>, String, Option<hir::Namespace>)> {\n@@ -178,15 +201,15 @@ pub(crate) fn resolve_doc_path_for_def(\n ) -> Option<hir::ModuleDef> {\n     match def {\n         Definition::ModuleDef(def) => match def {\n-            ModuleDef::Module(it) => it.resolve_doc_path(db, &link, ns),\n-            ModuleDef::Function(it) => it.resolve_doc_path(db, &link, ns),\n-            ModuleDef::Adt(it) => it.resolve_doc_path(db, &link, ns),\n-            ModuleDef::Variant(it) => it.resolve_doc_path(db, &link, ns),\n-            ModuleDef::Const(it) => it.resolve_doc_path(db, &link, ns),\n-            ModuleDef::Static(it) => it.resolve_doc_path(db, &link, ns),\n-            ModuleDef::Trait(it) => it.resolve_doc_path(db, &link, ns),\n-            ModuleDef::TypeAlias(it) => it.resolve_doc_path(db, &link, ns),\n-            ModuleDef::BuiltinType(_) => None,\n+            hir::ModuleDef::Module(it) => it.resolve_doc_path(db, &link, ns),\n+            hir::ModuleDef::Function(it) => it.resolve_doc_path(db, &link, ns),\n+            hir::ModuleDef::Adt(it) => it.resolve_doc_path(db, &link, ns),\n+            hir::ModuleDef::Variant(it) => it.resolve_doc_path(db, &link, ns),\n+            hir::ModuleDef::Const(it) => it.resolve_doc_path(db, &link, ns),\n+            hir::ModuleDef::Static(it) => it.resolve_doc_path(db, &link, ns),\n+            hir::ModuleDef::Trait(it) => it.resolve_doc_path(db, &link, ns),\n+            hir::ModuleDef::TypeAlias(it) => it.resolve_doc_path(db, &link, ns),\n+            hir::ModuleDef::BuiltinType(_) => None,\n         },\n         Definition::Macro(it) => it.resolve_doc_path(db, &link, ns),\n         Definition::Field(it) => it.resolve_doc_path(db, &link, ns),\n@@ -328,28 +351,6 @@ fn rewrite_url_link(db: &RootDatabase, def: ModuleDef, target: &str) -> Option<S\n         .map(|url| url.into_string())\n }\n \n-/// Retrieve a link to documentation for the given symbol.\n-pub(crate) fn external_docs(\n-    db: &RootDatabase,\n-    position: &FilePosition,\n-) -> Option<DocumentationLink> {\n-    let sema = Semantics::new(db);\n-    let file = sema.parse(position.file_id).syntax().clone();\n-    let token = pick_best(file.token_at_offset(position.offset))?;\n-    let token = sema.descend_into_macros(token);\n-\n-    let node = token.parent()?;\n-    let definition = match_ast! {\n-        match node {\n-            ast::NameRef(name_ref) => NameRefClass::classify(&sema, &name_ref).map(|d| d.referenced(sema.db)),\n-            ast::Name(name) => NameClass::classify(&sema, &name).map(|d| d.referenced_or_defined(sema.db)),\n-            _ => None,\n-        }\n-    };\n-\n-    get_doc_link(db, definition?)\n-}\n-\n /// Rewrites a markdown document, applying 'callback' to each link.\n fn map_links<'e>(\n     events: impl Iterator<Item = Event<'e>>,"}, {"sha": "b62d43256ccb4a97814d56d8226f1ad35de7da14", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 3, "deletions": 29, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7b9e2a26415d484dd5d3a487981b82a56426cf01/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b9e2a26415d484dd5d3a487981b82a56426cf01/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=7b9e2a26415d484dd5d3a487981b82a56426cf01", "patch": "@@ -11,7 +11,8 @@ use syntax::{\n };\n \n use crate::{\n-    doc_links::extract_definitions_from_markdown, Analysis, HlMod, HlRange, HlTag, RootDatabase,\n+    doc_links::{extract_definitions_from_markdown, resolve_doc_path_for_def},\n+    Analysis, HlMod, HlRange, HlTag, RootDatabase,\n };\n \n use super::{highlights::Highlights, injector::Injector};\n@@ -190,7 +191,7 @@ pub(super) fn doc_comment(\n                         extract_definitions_from_markdown(line)\n                             .into_iter()\n                             .filter_map(|(range, link, ns)| {\n-                                Some(range).zip(validate_intra_doc_link(sema.db, &def, &link, ns))\n+                                Some(range).zip(resolve_doc_path_for_def(sema.db, def, &link, ns))\n                             })\n                             .map(|(Range { start, end }, def)| {\n                                 (\n@@ -283,33 +284,6 @@ fn find_doc_string_in_attr(attr: &hir::Attr, it: &ast::Attr) -> Option<ast::Stri\n     }\n }\n \n-fn validate_intra_doc_link(\n-    db: &RootDatabase,\n-    def: &Definition,\n-    link: &str,\n-    ns: Option<hir::Namespace>,\n-) -> Option<hir::ModuleDef> {\n-    match def {\n-        Definition::ModuleDef(def) => match def {\n-            hir::ModuleDef::Module(it) => it.resolve_doc_path(db, &link, ns),\n-            hir::ModuleDef::Function(it) => it.resolve_doc_path(db, &link, ns),\n-            hir::ModuleDef::Adt(it) => it.resolve_doc_path(db, &link, ns),\n-            hir::ModuleDef::Variant(it) => it.resolve_doc_path(db, &link, ns),\n-            hir::ModuleDef::Const(it) => it.resolve_doc_path(db, &link, ns),\n-            hir::ModuleDef::Static(it) => it.resolve_doc_path(db, &link, ns),\n-            hir::ModuleDef::Trait(it) => it.resolve_doc_path(db, &link, ns),\n-            hir::ModuleDef::TypeAlias(it) => it.resolve_doc_path(db, &link, ns),\n-            hir::ModuleDef::BuiltinType(_) => None,\n-        },\n-        Definition::Macro(it) => it.resolve_doc_path(db, &link, ns),\n-        Definition::Field(it) => it.resolve_doc_path(db, &link, ns),\n-        Definition::SelfType(_)\n-        | Definition::Local(_)\n-        | Definition::GenericParam(_)\n-        | Definition::Label(_) => None,\n-    }\n-}\n-\n fn module_def_to_hl_tag(def: hir::ModuleDef) -> HlTag {\n     let symbol = match def {\n         hir::ModuleDef::Module(_) => SymbolKind::Module,"}]}