{"sha": "adaae45c3e15f95b052648f3511a1097155296b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkYWFlNDVjM2UxNWY5NWIwNTI2NDhmMzUxMWExMDk3MTU1Mjk2Yjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-21T03:31:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-21T03:31:26Z"}, "message": "auto merge of #6604 : bjz/rust/ptr-to-option, r=brson", "tree": {"sha": "3447e81204ff60c99dd7274542bfe43d7b729044", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3447e81204ff60c99dd7274542bfe43d7b729044"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adaae45c3e15f95b052648f3511a1097155296b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adaae45c3e15f95b052648f3511a1097155296b9", "html_url": "https://github.com/rust-lang/rust/commit/adaae45c3e15f95b052648f3511a1097155296b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adaae45c3e15f95b052648f3511a1097155296b9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c0a4693c94ffbb5601b59d0c82c7785d347107d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c0a4693c94ffbb5601b59d0c82c7785d347107d", "html_url": "https://github.com/rust-lang/rust/commit/6c0a4693c94ffbb5601b59d0c82c7785d347107d"}, {"sha": "eef03c39cf2f25f2e2182a68d0fcad14f378d5ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/eef03c39cf2f25f2e2182a68d0fcad14f378d5ac", "html_url": "https://github.com/rust-lang/rust/commit/eef03c39cf2f25f2e2182a68d0fcad14f378d5ac"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "f6cc00ccc8681ca9dbdb8895302eff9be9d12374", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/adaae45c3e15f95b052648f3511a1097155296b9/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adaae45c3e15f95b052648f3511a1097155296b9/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=adaae45c3e15f95b052648f3511a1097155296b9", "patch": "@@ -13,6 +13,7 @@\n use cast;\n use libc;\n use libc::{c_void, size_t};\n+use option::{Option, Some, None};\n use sys;\n \n #[cfg(not(test))] use cmp::{Eq, Ord};\n@@ -209,6 +210,7 @@ pub unsafe fn array_each<T>(arr: **T, cb: &fn(*T)) {\n pub trait Ptr<T> {\n     fn is_null(&const self) -> bool;\n     fn is_not_null(&const self) -> bool;\n+    unsafe fn to_option(&const self) -> Option<&T>;\n     fn offset(&self, count: uint) -> Self;\n }\n \n@@ -222,6 +224,23 @@ impl<T> Ptr<T> for *T {\n     #[inline(always)]\n     fn is_not_null(&const self) -> bool { is_not_null(*self) }\n \n+    ///\n+    /// Returns `None` if the pointer is null, or else returns the value wrapped\n+    /// in `Some`.\n+    ///\n+    /// # Safety Notes\n+    ///\n+    /// While this method is useful for null-safety, it is important to note\n+    /// that this is still an unsafe operation because the returned value could\n+    /// be pointing to invalid memory.\n+    ///\n+    #[inline(always)]\n+    unsafe fn to_option(&const self) -> Option<&T> {\n+        if self.is_null() { None } else {\n+            Some(cast::transmute(*self))\n+        }\n+    }\n+\n     /// Calculates the offset from a pointer.\n     #[inline(always)]\n     fn offset(&self, count: uint) -> *T { offset(*self, count) }\n@@ -237,6 +256,23 @@ impl<T> Ptr<T> for *mut T {\n     #[inline(always)]\n     fn is_not_null(&const self) -> bool { is_not_null(*self) }\n \n+    ///\n+    /// Returns `None` if the pointer is null, or else returns the value wrapped\n+    /// in `Some`.\n+    ///\n+    /// # Safety Notes\n+    ///\n+    /// While this method is useful for null-safety, it is important to note\n+    /// that this is still an unsafe operation because the returned value could\n+    /// be pointing to invalid memory.\n+    ///\n+    #[inline(always)]\n+    unsafe fn to_option(&const self) -> Option<&T> {\n+        if self.is_null() { None } else {\n+            Some(cast::transmute(*self))\n+        }\n+    }\n+\n     /// Calculates the offset from a mutable pointer.\n     #[inline(always)]\n     fn offset(&self, count: uint) -> *mut T { mut_offset(*self, count) }\n@@ -423,6 +459,21 @@ pub mod ptr_tests {\n         assert!(mq.is_not_null());\n     }\n \n+    #[test]\n+    fn test_to_option() {\n+        let p: *int = null();\n+        // FIXME (#6641): Usage of unsafe methods in safe code doesn't cause an error.\n+        assert_eq!(p.to_option(), None);\n+\n+        let q: *int = &2;\n+        assert_eq!(q.to_option().unwrap(), &2);     // FIXME (#6641)\n+\n+        let p: *mut int = mut_null();\n+        assert_eq!(p.to_option(), None);            // FIXME (#6641)\n+\n+        let q: *mut int = &mut 2;\n+        assert_eq!(q.to_option().unwrap(), &2);     // FIXME (#6641)\n+    }\n \n     #[test]\n     fn test_ptr_array_each_with_len() {"}]}