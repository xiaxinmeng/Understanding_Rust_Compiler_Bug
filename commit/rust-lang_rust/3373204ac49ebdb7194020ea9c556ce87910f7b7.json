{"sha": "3373204ac49ebdb7194020ea9c556ce87910f7b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNzMyMDRhYzQ5ZWJkYjcxOTQwMjBlYTljNTU2Y2U4NzkxMGY3Yjc=", "commit": {"author": {"name": "Mike Hommey", "email": "mh@glandium.org", "date": "2018-05-31T07:10:01Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-06-11T20:47:23Z"}, "message": "Replace `impl GlobalAlloc for Global` with a set of free functions", "tree": {"sha": "051b58bf4a75f04dc771f1638003802295592a96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/051b58bf4a75f04dc771f1638003802295592a96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3373204ac49ebdb7194020ea9c556ce87910f7b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3373204ac49ebdb7194020ea9c556ce87910f7b7", "html_url": "https://github.com/rust-lang/rust/commit/3373204ac49ebdb7194020ea9c556ce87910f7b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3373204ac49ebdb7194020ea9c556ce87910f7b7/comments", "author": {"login": "glandium", "id": 1038527, "node_id": "MDQ6VXNlcjEwMzg1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1038527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glandium", "html_url": "https://github.com/glandium", "followers_url": "https://api.github.com/users/glandium/followers", "following_url": "https://api.github.com/users/glandium/following{/other_user}", "gists_url": "https://api.github.com/users/glandium/gists{/gist_id}", "starred_url": "https://api.github.com/users/glandium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glandium/subscriptions", "organizations_url": "https://api.github.com/users/glandium/orgs", "repos_url": "https://api.github.com/users/glandium/repos", "events_url": "https://api.github.com/users/glandium/events{/privacy}", "received_events_url": "https://api.github.com/users/glandium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6ab74b8e7efed01c1045773b6693f23f6ebd93c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6ab74b8e7efed01c1045773b6693f23f6ebd93c", "html_url": "https://github.com/rust-lang/rust/commit/f6ab74b8e7efed01c1045773b6693f23f6ebd93c"}], "stats": {"total": 55, "additions": 29, "deletions": 26}, "files": [{"sha": "8c2dda772268d5500553c0ff540ba445755fe3b0", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/3373204ac49ebdb7194020ea9c556ce87910f7b7/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3373204ac49ebdb7194020ea9c556ce87910f7b7/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=3373204ac49ebdb7194020ea9c556ce87910f7b7", "patch": "@@ -49,37 +49,39 @@ pub type Heap = Global;\n #[allow(non_upper_case_globals)]\n pub const Heap: Global = Global;\n \n-unsafe impl GlobalAlloc for Global {\n-    #[inline]\n-    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n-        __rust_alloc(layout.size(), layout.align())\n-    }\n+#[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+#[inline]\n+pub unsafe fn alloc(layout: Layout) -> *mut u8 {\n+    __rust_alloc(layout.size(), layout.align())\n+}\n \n-    #[inline]\n-    unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {\n-        __rust_dealloc(ptr, layout.size(), layout.align())\n-    }\n+#[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+#[inline]\n+pub unsafe fn dealloc(ptr: *mut u8, layout: Layout) {\n+    __rust_dealloc(ptr, layout.size(), layout.align())\n+}\n \n-    #[inline]\n-    unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {\n-        __rust_realloc(ptr, layout.size(), layout.align(), new_size)\n-    }\n+#[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+#[inline]\n+pub unsafe fn realloc(ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {\n+    __rust_realloc(ptr, layout.size(), layout.align(), new_size)\n+}\n \n-    #[inline]\n-    unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {\n-        __rust_alloc_zeroed(layout.size(), layout.align())\n-    }\n+#[unstable(feature = \"allocator_api\", issue = \"32838\")]\n+#[inline]\n+pub unsafe fn alloc_zeroed(layout: Layout) -> *mut u8 {\n+    __rust_alloc_zeroed(layout.size(), layout.align())\n }\n \n unsafe impl Alloc for Global {\n     #[inline]\n     unsafe fn alloc(&mut self, layout: Layout) -> Result<NonNull<u8>, AllocErr> {\n-        NonNull::new(GlobalAlloc::alloc(self, layout)).ok_or(AllocErr)\n+        NonNull::new(alloc(layout)).ok_or(AllocErr)\n     }\n \n     #[inline]\n     unsafe fn dealloc(&mut self, ptr: NonNull<u8>, layout: Layout) {\n-        GlobalAlloc::dealloc(self, ptr.as_ptr(), layout)\n+        dealloc(ptr.as_ptr(), layout)\n     }\n \n     #[inline]\n@@ -89,12 +91,12 @@ unsafe impl Alloc for Global {\n                       new_size: usize)\n                       -> Result<NonNull<u8>, AllocErr>\n     {\n-        NonNull::new(GlobalAlloc::realloc(self, ptr.as_ptr(), layout, new_size)).ok_or(AllocErr)\n+        NonNull::new(realloc(ptr.as_ptr(), layout, new_size)).ok_or(AllocErr)\n     }\n \n     #[inline]\n     unsafe fn alloc_zeroed(&mut self, layout: Layout) -> Result<NonNull<u8>, AllocErr> {\n-        NonNull::new(GlobalAlloc::alloc_zeroed(self, layout)).ok_or(AllocErr)\n+        NonNull::new(alloc_zeroed(layout)).ok_or(AllocErr)\n     }\n }\n \n@@ -108,7 +110,7 @@ unsafe fn exchange_malloc(size: usize, align: usize) -> *mut u8 {\n         align as *mut u8\n     } else {\n         let layout = Layout::from_size_align_unchecked(size, align);\n-        let ptr = Global.alloc(layout);\n+        let ptr = alloc(layout);\n         if !ptr.is_null() {\n             ptr\n         } else {\n@@ -126,7 +128,7 @@ pub(crate) unsafe fn box_free<T: ?Sized>(ptr: Unique<T>) {\n     // We do not allocate for Box<T> when T is ZST, so deallocation is also not necessary.\n     if size != 0 {\n         let layout = Layout::from_size_align_unchecked(size, align);\n-        Global.dealloc(ptr as *mut u8, layout);\n+        dealloc(ptr as *mut u8, layout);\n     }\n }\n "}, {"sha": "3f31fa8e1dd16bbdf5450bfb4e58c18df2b70d10", "filename": "src/libstd/alloc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3373204ac49ebdb7194020ea9c556ce87910f7b7/src%2Flibstd%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3373204ac49ebdb7194020ea9c556ce87910f7b7/src%2Flibstd%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Falloc.rs?ref=3373204ac49ebdb7194020ea9c556ce87910f7b7", "patch": "@@ -14,6 +14,7 @@\n \n #[doc(inline)] #[allow(deprecated)] pub use alloc_crate::alloc::Heap;\n #[doc(inline)] pub use alloc_crate::alloc::{Global, Layout, oom};\n+#[doc(inline)] pub use alloc_crate::alloc::{alloc, alloc_zeroed, dealloc, realloc};\n #[doc(inline)] pub use alloc_system::System;\n #[doc(inline)] pub use core::alloc::*;\n "}, {"sha": "fbde7e855c2b06cdbb36c47d25779a211f436b6d", "filename": "src/test/run-pass/allocator/xcrate-use2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3373204ac49ebdb7194020ea9c556ce87910f7b7/src%2Ftest%2Frun-pass%2Fallocator%2Fxcrate-use2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3373204ac49ebdb7194020ea9c556ce87910f7b7/src%2Ftest%2Frun-pass%2Fallocator%2Fxcrate-use2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fallocator%2Fxcrate-use2.rs?ref=3373204ac49ebdb7194020ea9c556ce87910f7b7", "patch": "@@ -19,7 +19,7 @@ extern crate custom;\n extern crate custom_as_global;\n extern crate helper;\n \n-use std::alloc::{Global, Alloc, GlobalAlloc, System, Layout};\n+use std::alloc::{alloc, dealloc, GlobalAlloc, System, Layout};\n use std::sync::atomic::{Ordering, ATOMIC_USIZE_INIT};\n \n static GLOBAL: custom::A = custom::A(ATOMIC_USIZE_INIT);\n@@ -30,10 +30,10 @@ fn main() {\n         let layout = Layout::from_size_align(4, 2).unwrap();\n \n         // Global allocator routes to the `custom_as_global` global\n-        let ptr = Global.alloc(layout.clone());\n+        let ptr = alloc(layout.clone());\n         helper::work_with(&ptr);\n         assert_eq!(custom_as_global::get(), n + 1);\n-        Global.dealloc(ptr, layout.clone());\n+        dealloc(ptr, layout.clone());\n         assert_eq!(custom_as_global::get(), n + 2);\n \n         // Usage of the system allocator avoids all globals"}]}