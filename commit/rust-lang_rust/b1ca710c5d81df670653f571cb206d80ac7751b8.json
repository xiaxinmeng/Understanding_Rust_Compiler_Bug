{"sha": "b1ca710c5d81df670653f571cb206d80ac7751b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxY2E3MTBjNWQ4MWRmNjcwNjUzZjU3MWNiMjA2ZDgwYWM3NzUxYjg=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-08-07T08:55:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-07T08:55:40Z"}, "message": "Rollup merge of #53052 - redroc:master, r=QuietMisdreavus\n\nfixed broken links to char\n\nfixes https://github.com/rust-lang/rust/issues/32129", "tree": {"sha": "8da9df52e568a82f9319f4a64142bb74089e65c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8da9df52e568a82f9319f4a64142bb74089e65c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1ca710c5d81df670653f571cb206d80ac7751b8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbaV6MCRBK7hj4Ov3rIwAAdHIIAH2MxzphawsL2/HOn2Nzp8S3\nNsxoDvq5/NBb9PvrxaRsZZ3SlgNaXIobn0nQFNKUQOKDuTSyuAehTGLyVtIG716k\nUa8H5q5TVu6EEwShMpRzcqMqIvIudEH0yA5lSps42rE0BSxa4XeSIw+lp+kQMowF\nvMf81qMDYN+ufX9XISiUg1n3Ue9tKc+GtF0PqLi0AtQvLA0bca+bcYG/MIXWvKsb\npRw+i8EaGn9CfAD5m8E5vywVuq/vz0zuyK7n+C04oCVvwmAqR3+CdVijqAwniWW1\nNXZqTVc/1cUKQv9rA3ROpPfh/RQudfwInVmUKNnG9O6UEqpqOE52ni12q28B+zU=\n=B2U8\n-----END PGP SIGNATURE-----\n", "payload": "tree 8da9df52e568a82f9319f4a64142bb74089e65c5\nparent 35d752f130946d5d65058ca20f8bf7afb297e954\nparent 616970758b438322d36bb903fcb6422575b12216\nauthor kennytm <kennytm@gmail.com> 1533632140 +0800\ncommitter GitHub <noreply@github.com> 1533632140 +0800\n\nRollup merge of #53052 - redroc:master, r=QuietMisdreavus\n\nfixed broken links to char\n\nfixes https://github.com/rust-lang/rust/issues/32129\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1ca710c5d81df670653f571cb206d80ac7751b8", "html_url": "https://github.com/rust-lang/rust/commit/b1ca710c5d81df670653f571cb206d80ac7751b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1ca710c5d81df670653f571cb206d80ac7751b8/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35d752f130946d5d65058ca20f8bf7afb297e954", "url": "https://api.github.com/repos/rust-lang/rust/commits/35d752f130946d5d65058ca20f8bf7afb297e954", "html_url": "https://github.com/rust-lang/rust/commit/35d752f130946d5d65058ca20f8bf7afb297e954"}, {"sha": "616970758b438322d36bb903fcb6422575b12216", "url": "https://api.github.com/repos/rust-lang/rust/commits/616970758b438322d36bb903fcb6422575b12216", "html_url": "https://github.com/rust-lang/rust/commit/616970758b438322d36bb903fcb6422575b12216"}], "stats": {"total": 33, "additions": 0, "deletions": 33}, "files": [{"sha": "356534a91879cde36e2ef26405b6e1030c910a7b", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b1ca710c5d81df670653f571cb206d80ac7751b8/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1ca710c5d81df670653f571cb206d80ac7751b8/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=b1ca710c5d81df670653f571cb206d80ac7751b8", "patch": "@@ -2117,8 +2117,6 @@ impl str {\n     /// This length is in bytes, not [`char`]s or graphemes. In other words,\n     /// it may not be what a human considers the length of the string.\n     ///\n-    /// [`char`]: primitive.char.html\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -2590,8 +2588,6 @@ impl str {\n     /// Value, and may not match your idea of what a 'character' is. Iteration\n     /// over grapheme clusters may be what you actually want.\n     ///\n-    /// [`char`]: primitive.char.html\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -2643,8 +2639,6 @@ impl str {\n     /// The iterator yields tuples. The position is first, the [`char`] is\n     /// second.\n     ///\n-    /// [`char`]: primitive.char.html\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -2946,7 +2940,6 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines if\n     /// a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n     /// [`None`]: option/enum.Option.html#variant.None\n     ///\n     /// # Examples\n@@ -2994,7 +2987,6 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines if\n     /// a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n     /// [`None`]: option/enum.Option.html#variant.None\n     ///\n     /// # Examples\n@@ -3050,7 +3042,6 @@ impl str {\n     /// If the pattern allows a reverse search but its results might differ\n     /// from a forward search, the [`rsplit`] method can be used.\n     ///\n-    /// [`char`]: primitive.char.html\n     /// [`rsplit`]: #method.rsplit\n     ///\n     /// # Examples\n@@ -3157,8 +3148,6 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines the\n     /// split.\n     ///\n-    /// [`char`]: primitive.char.html\n-    ///\n     /// # Iterator behavior\n     ///\n     /// The returned iterator requires that the pattern supports a reverse\n@@ -3224,7 +3213,6 @@ impl str {\n     /// elements. This is true for, eg, [`char`] but not for `&str`.\n     ///\n     /// [`DoubleEndedIterator`]: iter/trait.DoubleEndedIterator.html\n-    /// [`char`]: primitive.char.html\n     ///\n     /// If the pattern allows a reverse search but its results might differ\n     /// from a forward search, the [`rsplit_terminator`] method can be used.\n@@ -3259,8 +3247,6 @@ impl str {\n     /// Additional libraries might provide more complex patterns like\n     /// regular expressions.\n     ///\n-    /// [`char`]: primitive.char.html\n-    ///\n     /// Equivalent to [`split`], except that the trailing substring is\n     /// skipped if empty.\n     ///\n@@ -3306,8 +3292,6 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines the\n     /// split.\n     ///\n-    /// [`char`]: primitive.char.html\n-    ///\n     /// # Iterator behavior\n     ///\n     /// The returned iterator will not be double ended, because it is\n@@ -3361,8 +3345,6 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that\n     /// determines the split.\n     ///\n-    /// [`char`]: primitive.char.html\n-    ///\n     /// # Iterator behavior\n     ///\n     /// The returned iterator will not be double ended, because it is not\n@@ -3407,16 +3389,13 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that\n     /// determines if a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    ///\n     /// # Iterator behavior\n     ///\n     /// The returned iterator will be a [`DoubleEndedIterator`] if the pattern\n     /// allows a reverse search and forward/reverse search yields the same\n     /// elements. This is true for, eg, [`char`] but not for `&str`.\n     ///\n     /// [`DoubleEndedIterator`]: iter/trait.DoubleEndedIterator.html\n-    /// [`char`]: primitive.char.html\n     ///\n     /// If the pattern allows a reverse search but its results might differ\n     /// from a forward search, the [`rmatches`] method can be used.\n@@ -3446,8 +3425,6 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines if\n     /// a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    ///\n     /// # Iterator behavior\n     ///\n     /// The returned iterator requires that the pattern supports a reverse\n@@ -3488,8 +3465,6 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines\n     /// if a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    ///\n     /// # Iterator behavior\n     ///\n     /// The returned iterator will be a [`DoubleEndedIterator`] if the pattern\n@@ -3532,8 +3507,6 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines if a\n     /// character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    ///\n     /// # Iterator behavior\n     ///\n     /// The returned iterator requires that the pattern supports a reverse\n@@ -3665,8 +3638,6 @@ impl str {\n     /// The pattern can be a [`char`] or a closure that determines if a\n     /// character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    ///\n     /// # Examples\n     ///\n     /// Simple patterns:\n@@ -3711,8 +3682,6 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines if\n     /// a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    ///\n     /// # Text directionality\n     ///\n     /// A string is a sequence of bytes. 'Left' in this context means the first\n@@ -3750,8 +3719,6 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that\n     /// determines if a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    ///\n     /// # Text directionality\n     ///\n     /// A string is a sequence of bytes. 'Right' in this context means the last"}]}