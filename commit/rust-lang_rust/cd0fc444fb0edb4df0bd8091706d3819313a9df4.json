{"sha": "cd0fc444fb0edb4df0bd8091706d3819313a9df4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMGZjNDQ0ZmIwZWRiNGRmMGJkODA5MTcwNmQzODE5MzEzYTlkZjQ=", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-08-20T03:30:33Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-08-27T21:50:51Z"}, "message": "Note that type aliases cannot be recursive", "tree": {"sha": "a27934154a2d45e254f98fca1c13aa3bac3ea79d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a27934154a2d45e254f98fca1c13aa3bac3ea79d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd0fc444fb0edb4df0bd8091706d3819313a9df4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd0fc444fb0edb4df0bd8091706d3819313a9df4", "html_url": "https://github.com/rust-lang/rust/commit/cd0fc444fb0edb4df0bd8091706d3819313a9df4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd0fc444fb0edb4df0bd8091706d3819313a9df4/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f48bfa88c1c742ed058fc8af096d8cedc138434", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f48bfa88c1c742ed058fc8af096d8cedc138434", "html_url": "https://github.com/rust-lang/rust/commit/2f48bfa88c1c742ed058fc8af096d8cedc138434"}], "stats": {"total": 86, "additions": 84, "deletions": 2}, "files": [{"sha": "40b820c8d8eed5c8c57dfc7a787a3742cfa29b15", "filename": "compiler/rustc_query_impl/src/keys.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cd0fc444fb0edb4df0bd8091706d3819313a9df4/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd0fc444fb0edb4df0bd8091706d3819313a9df4/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs?ref=cd0fc444fb0edb4df0bd8091706d3819313a9df4", "patch": "@@ -20,6 +20,12 @@ pub trait Key {\n     /// In the event that a cycle occurs, if no explicit span has been\n     /// given for a query with key `self`, what span should we use?\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span;\n+\n+    /// If the key is a [`DefId`] or `DefId`--equivalent, return that `DefId`.\n+    /// Otherwise, return `None`.\n+    fn key_as_def_id(&self) -> Option<DefId> {\n+        None\n+    }\n }\n \n impl Key for () {\n@@ -95,6 +101,9 @@ impl Key for LocalDefId {\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.to_def_id().default_span(tcx)\n     }\n+    fn key_as_def_id(&self) -> Option<DefId> {\n+        Some(self.to_def_id())\n+    }\n }\n \n impl Key for DefId {\n@@ -105,6 +114,10 @@ impl Key for DefId {\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         tcx.def_span(*self)\n     }\n+    #[inline(always)]\n+    fn key_as_def_id(&self) -> Option<DefId> {\n+        Some(*self)\n+    }\n }\n \n impl Key for ty::WithOptConstParam<LocalDefId> {"}, {"sha": "bb0e65111596cb290ec8c73b9a045a68f0062821", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd0fc444fb0edb4df0bd8091706d3819313a9df4/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd0fc444fb0edb4df0bd8091706d3819313a9df4/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=cd0fc444fb0edb4df0bd8091706d3819313a9df4", "patch": "@@ -51,6 +51,8 @@ pub use on_disk_cache::OnDiskCache;\n mod profiling_support;\n pub use self::profiling_support::alloc_self_profile_query_strings;\n \n+mod util;\n+\n rustc_query_append! { [define_queries!][<'tcx>] }\n \n impl<'tcx> Queries<'tcx> {"}, {"sha": "476085c8725eacab0f9c3f2d29b1c671708a3078", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd0fc444fb0edb4df0bd8091706d3819313a9df4/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd0fc444fb0edb4df0bd8091706d3819313a9df4/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=cd0fc444fb0edb4df0bd8091706d3819313a9df4", "patch": "@@ -337,6 +337,11 @@ macro_rules! define_queries {\n                 } else {\n                     Some(key.default_span(*tcx))\n                 };\n+                let def_id = key.key_as_def_id();\n+                let def_kind = def_id.map(|def_id| {\n+                    let def_kind = tcx.def_kind(def_id);\n+                    $crate::util::def_kind_to_simple_def_kind(def_kind)\n+                });\n                 let hash = || {\n                     let mut hcx = tcx.create_stable_hashing_context();\n                     let mut hasher = StableHasher::new();\n@@ -345,7 +350,7 @@ macro_rules! define_queries {\n                     hasher.finish::<u64>()\n                 };\n \n-                QueryStackFrame::new(name, description, span, hash)\n+                QueryStackFrame::new(name, description, span, def_kind, hash)\n             })*\n         }\n "}, {"sha": "517c107b5d9af83738636312c0ce574277c2849a", "filename": "compiler/rustc_query_impl/src/util.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cd0fc444fb0edb4df0bd8091706d3819313a9df4/compiler%2Frustc_query_impl%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd0fc444fb0edb4df0bd8091706d3819313a9df4/compiler%2Frustc_query_impl%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Futil.rs?ref=cd0fc444fb0edb4df0bd8091706d3819313a9df4", "patch": "@@ -0,0 +1,18 @@\n+use rustc_hir::def::DefKind;\n+use rustc_query_system::query::SimpleDefKind;\n+\n+/// Convert a [`DefKind`] to a [`SimpleDefKind`].\n+///\n+/// *See [`SimpleDefKind`]'s docs for more information.*\n+pub(crate) fn def_kind_to_simple_def_kind(def_kind: DefKind) -> SimpleDefKind {\n+    match def_kind {\n+        DefKind::Struct => SimpleDefKind::Struct,\n+        DefKind::Enum => SimpleDefKind::Enum,\n+        DefKind::Union => SimpleDefKind::Union,\n+        DefKind::Trait => SimpleDefKind::Trait,\n+        DefKind::TyAlias => SimpleDefKind::TyAlias,\n+        DefKind::TraitAlias => SimpleDefKind::TraitAlias,\n+\n+        _ => SimpleDefKind::Other,\n+    }\n+}"}, {"sha": "f8ba0babab08a70f35b1acfdcda73bf2a56c69ab", "filename": "compiler/rustc_query_system/src/query/job.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cd0fc444fb0edb4df0bd8091706d3819313a9df4/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd0fc444fb0edb4df0bd8091706d3819313a9df4/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs?ref=cd0fc444fb0edb4df0bd8091706d3819313a9df4", "patch": "@@ -1,6 +1,6 @@\n use crate::dep_graph::DepContext;\n use crate::query::plumbing::CycleError;\n-use crate::query::{QueryContext, QueryStackFrame};\n+use crate::query::{QueryContext, QueryStackFrame, SimpleDefKind};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{struct_span_err, Diagnostic, DiagnosticBuilder, Handler, Level};\n@@ -600,6 +600,18 @@ pub(crate) fn report_cycle<'a>(\n         ));\n     }\n \n+    if !stack.is_empty()\n+        && stack.iter().all(|entry| {\n+            entry.query.def_kind.map_or(false, |def_kind| {\n+                matches!(def_kind, SimpleDefKind::TyAlias | SimpleDefKind::TraitAlias)\n+            })\n+        })\n+    {\n+        err.note(\"type aliases cannot be recursive\");\n+        err.help(\"consider using a struct, enum, or union instead to break the cycle\");\n+        err.help(\"see <https://doc.rust-lang.org/reference/types.html#recursive-types> for more information\");\n+    }\n+\n     if let Some((span, query)) = usage {\n         err.span_note(fix_span(span, &query), &format!(\"cycle used when {}\", query.description));\n     }"}, {"sha": "dffe7f3689ff4b52f80c4ff8af04b823a29bd9db", "filename": "compiler/rustc_query_system/src/query/mod.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/cd0fc444fb0edb4df0bd8091706d3819313a9df4/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd0fc444fb0edb4df0bd8091706d3819313a9df4/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs?ref=cd0fc444fb0edb4df0bd8091706d3819313a9df4", "patch": "@@ -29,24 +29,53 @@ pub struct QueryStackFrame {\n     pub name: &'static str,\n     pub description: String,\n     span: Option<Span>,\n+    /// The `DefKind` this query frame is associated with, if applicable.\n+    ///\n+    /// We can't use `rustc_hir::def::DefKind` because `rustc_hir` is not\n+    /// available in `rustc_query_system`. Instead, we have a simplified\n+    /// custom version of it, called [`SimpleDefKind`].\n+    def_kind: Option<SimpleDefKind>,\n     /// This hash is used to deterministically pick\n     /// a query to remove cycles in the parallel compiler.\n     #[cfg(parallel_compiler)]\n     hash: u64,\n }\n \n+/// A simplified version of `rustc_hir::def::DefKind`.\n+///\n+/// It was added to help improve cycle errors caused by recursive type aliases.\n+/// As of August 2021, `rustc_query_system` cannot depend on `rustc_hir`\n+/// because it would create a dependency cycle. So, instead, a simplified\n+/// version of `DefKind` was added to `rustc_query_system`.\n+///\n+/// `DefKind`s are converted to `SimpleDefKind`s in `rustc_query_impl`.\n+#[derive(Debug, Copy, Clone)]\n+pub enum SimpleDefKind {\n+    Struct,\n+    Enum,\n+    Union,\n+    Trait,\n+    TyAlias,\n+    TraitAlias,\n+\n+    // FIXME: add more from `rustc_hir::def::DefKind` and then remove `Other`\n+    Other,\n+}\n+\n impl QueryStackFrame {\n     #[inline]\n     pub fn new(\n         name: &'static str,\n         description: String,\n         span: Option<Span>,\n+        def_kind: Option<SimpleDefKind>,\n         _hash: impl FnOnce() -> u64,\n     ) -> Self {\n         Self {\n             name,\n             description,\n             span,\n+            def_kind,\n             #[cfg(parallel_compiler)]\n             hash: _hash(),\n         }"}, {"sha": "1e487a5b11c2af4eb287f5d208baaf47c8bbb9b7", "filename": "src/test/ui/infinite/infinite-vec-type-recursion.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cd0fc444fb0edb4df0bd8091706d3819313a9df4/src%2Ftest%2Fui%2Finfinite%2Finfinite-vec-type-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd0fc444fb0edb4df0bd8091706d3819313a9df4/src%2Ftest%2Fui%2Finfinite%2Finfinite-vec-type-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-vec-type-recursion.stderr?ref=cd0fc444fb0edb4df0bd8091706d3819313a9df4", "patch": "@@ -5,6 +5,9 @@ LL | type X = Vec<X>;\n    |              ^\n    |\n    = note: ...which immediately requires expanding type alias `X` again\n+   = note: type aliases cannot be recursive\n+   = help: consider using a struct, enum, or union instead to break the cycle\n+   = help: see <https://doc.rust-lang.org/reference/types.html#recursive-types> for more information\n note: cycle used when collecting item types in top-level module\n   --> $DIR/infinite-vec-type-recursion.rs:1:1\n    |"}]}