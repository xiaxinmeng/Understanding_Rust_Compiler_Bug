{"sha": "9a855668fcc918071ecd1573abdeaccc6a99cbbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhODU1NjY4ZmNjOTE4MDcxZWNkMTU3M2FiZGVhY2NjNmE5OWNiYmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-23T09:06:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-23T09:06:24Z"}, "message": "Auto merge of #29194 - chrisccerami:clarify-headers-in-traits-docs, r=Manishearth\n\nIt's possible that there is some meaning I'm not grasping from the headers \"Traits bounds for generic functions\" and \"Traits bounds for generic structs\", but they seem to me like they could be clearer and more grammatically correct.", "tree": {"sha": "2028840c7593e63689469733b463d2be7a872e4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2028840c7593e63689469733b463d2be7a872e4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a855668fcc918071ecd1573abdeaccc6a99cbbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a855668fcc918071ecd1573abdeaccc6a99cbbb", "html_url": "https://github.com/rust-lang/rust/commit/9a855668fcc918071ecd1573abdeaccc6a99cbbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a855668fcc918071ecd1573abdeaccc6a99cbbb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f37f5a443e3f0fa91b1787117cb89a0a8aa666d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f37f5a443e3f0fa91b1787117cb89a0a8aa666d", "html_url": "https://github.com/rust-lang/rust/commit/3f37f5a443e3f0fa91b1787117cb89a0a8aa666d"}, {"sha": "00c1419e32e4c8fcb7947545a7d33e71e38801c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/00c1419e32e4c8fcb7947545a7d33e71e38801c5", "html_url": "https://github.com/rust-lang/rust/commit/00c1419e32e4c8fcb7947545a7d33e71e38801c5"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "0956580ade0bb0ea3f88fc27a64e22c2a4342549", "filename": "src/doc/trpl/glossary.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a855668fcc918071ecd1573abdeaccc6a99cbbb/src%2Fdoc%2Ftrpl%2Fglossary.md", "raw_url": "https://github.com/rust-lang/rust/raw/9a855668fcc918071ecd1573abdeaccc6a99cbbb/src%2Fdoc%2Ftrpl%2Fglossary.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fglossary.md?ref=9a855668fcc918071ecd1573abdeaccc6a99cbbb", "patch": "@@ -38,6 +38,14 @@ let z = (8, 2, 6);\n \n In the example above `x` and `y` have arity 2. `z` has arity 3.\n \n+### Bounds\n+\n+Bounds are constraints on a type or [trait][traits]. For example, if a bound\n+is placed on the argument a function takes, types passed to that function\n+must abide by that constraint.\n+\n+[traits]: traits.html\n+\n ### DST (Dynamically Sized Type)\n \n A type without a statically known size or alignment. ([more info][link])"}, {"sha": "7b6d0b730a30462b137295e82b8ea351a82e7f88", "filename": "src/doc/trpl/traits.md", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9a855668fcc918071ecd1573abdeaccc6a99cbbb/src%2Fdoc%2Ftrpl%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/9a855668fcc918071ecd1573abdeaccc6a99cbbb/src%2Fdoc%2Ftrpl%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftraits.md?ref=9a855668fcc918071ecd1573abdeaccc6a99cbbb", "patch": "@@ -47,12 +47,14 @@ As you can see, the `trait` block looks very similar to the `impl` block,\n but we don\u2019t define a body, just a type signature. When we `impl` a trait,\n we use `impl Trait for Item`, rather than just `impl Item`.\n \n-## Traits bounds for generic functions\n+## Trait bounds on generic functions\n \n Traits are useful because they allow a type to make certain promises about its\n-behavior. Generic functions can exploit this to constrain the types they\n+behavior. Generic functions can exploit this to constrain, or [bound][bounds], the types they\n accept. Consider this function, which does not compile:\n \n+[bounds]: glossary.html#bounds\n+\n ```rust,ignore\n fn print_area<T>(shape: T) {\n     println!(\"This shape has an area of {}\", shape.area());\n@@ -66,7 +68,7 @@ error: no method named `area` found for type `T` in the current scope\n ```\n \n Because `T` can be any type, we can\u2019t be sure that it implements the `area`\n-method. But we can add a \u2018trait constraint\u2019 to our generic `T`, ensuring\n+method. But we can add a trait bound to our generic `T`, ensuring\n that it does:\n \n ```rust\n@@ -155,10 +157,10 @@ We get a compile-time error:\n error: the trait `HasArea` is not implemented for the type `_` [E0277]\n ```\n \n-## Traits bounds for generic structs\n+## Trait bounds on generic structs\n \n-Your generic structs can also benefit from trait constraints. All you need to\n-do is append the constraint when you declare type parameters. Here is a new\n+Your generic structs can also benefit from trait bounds. All you need to\n+do is append the bound when you declare type parameters. Here is a new\n type `Rectangle<T>` and its operation `is_square()`:\n \n ```rust"}]}