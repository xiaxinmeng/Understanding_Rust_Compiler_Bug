{"sha": "f0112928cb13dbf8936c79d31badf3b684bdda10", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwMTEyOTI4Y2IxM2RiZjg5MzZjNzlkMzFiYWRmM2I2ODRiZGRhMTA=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-03T18:32:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-03T18:32:36Z"}, "message": "Rollup merge of #78626 - fusion-engineering-forks:deprecated-trait-impl, r=estebank\n\nImprove errors about #[deprecated] attribute\n\nThis change:\n\n1. Turns `#[deprecated]` on a trait impl block into an error, which fixes #78625;\n2. Changes these and other errors about `#[deprecated]` to use the span of the attribute instead of the item; and\n3. Turns this error into a lint, to make sure it can be capped with `--cap-lints` and doesn't break any existing dependencies.\n\nCan be reviewed per commit.\n\n---\nExample:\n```rust\nstruct X;\n\n#[deprecated = \"a\"]\nimpl Default for X {\n    #[deprecated = \"b\"]\n    fn default() -> Self {\n        X\n    }\n}\n```\n\nBefore:\n```\nerror: This deprecation annotation is useless\n --> src/main.rs:6:5\n  |\n6 | /     fn default() -> Self {\n7 | |         X\n8 | |     }\n  | |_____^\n```\n\nAfter:\n```\nerror: this `#[deprecated]' annotation has no effect\n --> src/main.rs:3:1\n  |\n3 | #[deprecated = \"a\"]\n  | ^^^^^^^^^^^^^^^^^^^ help: try removing the deprecation attribute\n  |\n  = note: `#[deny(useless_deprecated)]` on by default\n\nerror: this `#[deprecated]' annotation has no effect\n --> src/main.rs:5:5\n  |\n5 |     #[deprecated = \"b\"]\n  |     ^^^^^^^^^^^^^^^^^^^ help: try removing the deprecation attribute\n```", "tree": {"sha": "21ed8acc3d2f48b62adbc65b674c43ad365e4250", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21ed8acc3d2f48b62adbc65b674c43ad365e4250"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0112928cb13dbf8936c79d31badf3b684bdda10", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfoaJFCRBK7hj4Ov3rIwAAdHIIAAWRX64RhPnWgY38/Xcwn2mL\n9zpVMvt/FYZ2hhaLTL3W/zswBsITZ4lBi945AEQuxy6FCq6ZMvpGRyCoBamqq0dg\n3XGUOTcoRsLCuxGMSjgxYNZRol6dFrWtl/bichD3Do1HFptLqrMXPOHrwn11RDjV\nHVk4gedhjgUPR72IsR6XWOlhUbivxm+hR4oFDqts909oCPEDkeIJcCPr5AVcohob\ntUtOi8pVuX07VhfgAQqHuuL6PPlXWOJ7B3tPfFHKRPdk/swFlGeCQe9mSgqFhqkD\nqtdFfmy4C48f9VxKzACen1A5vaVZoVKp3wEo8ftycNW+m6LQUnBpe+usQQpmxsY=\n=LZ0c\n-----END PGP SIGNATURE-----\n", "payload": "tree 21ed8acc3d2f48b62adbc65b674c43ad365e4250\nparent 39f5563e73a46f3393d33f501e51be59a4927f98\nparent 9c647d102168f0344bf895aedf96dd52c193aa25\nauthor Mara Bos <m-ou.se@m-ou.se> 1604428356 +0100\ncommitter GitHub <noreply@github.com> 1604428356 +0100\n\nRollup merge of #78626 - fusion-engineering-forks:deprecated-trait-impl, r=estebank\n\nImprove errors about #[deprecated] attribute\n\nThis change:\n\n1. Turns `#[deprecated]` on a trait impl block into an error, which fixes #78625;\n2. Changes these and other errors about `#[deprecated]` to use the span of the attribute instead of the item; and\n3. Turns this error into a lint, to make sure it can be capped with `--cap-lints` and doesn't break any existing dependencies.\n\nCan be reviewed per commit.\n\n---\nExample:\n```rust\nstruct X;\n\n#[deprecated = \"a\"]\nimpl Default for X {\n    #[deprecated = \"b\"]\n    fn default() -> Self {\n        X\n    }\n}\n```\n\nBefore:\n```\nerror: This deprecation annotation is useless\n --> src/main.rs:6:5\n  |\n6 | /     fn default() -> Self {\n7 | |         X\n8 | |     }\n  | |_____^\n```\n\nAfter:\n```\nerror: this `#[deprecated]' annotation has no effect\n --> src/main.rs:3:1\n  |\n3 | #[deprecated = \"a\"]\n  | ^^^^^^^^^^^^^^^^^^^ help: try removing the deprecation attribute\n  |\n  = note: `#[deny(useless_deprecated)]` on by default\n\nerror: this `#[deprecated]' annotation has no effect\n --> src/main.rs:5:5\n  |\n5 |     #[deprecated = \"b\"]\n  |     ^^^^^^^^^^^^^^^^^^^ help: try removing the deprecation attribute\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0112928cb13dbf8936c79d31badf3b684bdda10", "html_url": "https://github.com/rust-lang/rust/commit/f0112928cb13dbf8936c79d31badf3b684bdda10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0112928cb13dbf8936c79d31badf3b684bdda10/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39f5563e73a46f3393d33f501e51be59a4927f98", "url": "https://api.github.com/repos/rust-lang/rust/commits/39f5563e73a46f3393d33f501e51be59a4927f98", "html_url": "https://github.com/rust-lang/rust/commit/39f5563e73a46f3393d33f501e51be59a4927f98"}, {"sha": "9c647d102168f0344bf895aedf96dd52c193aa25", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c647d102168f0344bf895aedf96dd52c193aa25", "html_url": "https://github.com/rust-lang/rust/commit/9c647d102168f0344bf895aedf96dd52c193aa25"}], "stats": {"total": 134, "additions": 96, "deletions": 38}, "files": [{"sha": "2fd625c2a6c260a6fefda2f61555f3d0c2981374", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f0112928cb13dbf8936c79d31badf3b684bdda10/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0112928cb13dbf8936c79d31badf3b684bdda10/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=f0112928cb13dbf8936c79d31badf3b684bdda10", "patch": "@@ -637,19 +637,15 @@ pub struct Deprecation {\n }\n \n /// Finds the deprecation attribute. `None` if none exists.\n-pub fn find_deprecation(sess: &Session, attrs: &[Attribute], item_sp: Span) -> Option<Deprecation> {\n-    find_deprecation_generic(sess, attrs.iter(), item_sp)\n+pub fn find_deprecation(sess: &Session, attrs: &[Attribute]) -> Option<(Deprecation, Span)> {\n+    find_deprecation_generic(sess, attrs.iter())\n }\n \n-fn find_deprecation_generic<'a, I>(\n-    sess: &Session,\n-    attrs_iter: I,\n-    item_sp: Span,\n-) -> Option<Deprecation>\n+fn find_deprecation_generic<'a, I>(sess: &Session, attrs_iter: I) -> Option<(Deprecation, Span)>\n where\n     I: Iterator<Item = &'a Attribute>,\n {\n-    let mut depr: Option<Deprecation> = None;\n+    let mut depr: Option<(Deprecation, Span)> = None;\n     let diagnostic = &sess.parse_sess.span_diagnostic;\n \n     'outer: for attr in attrs_iter {\n@@ -658,8 +654,11 @@ where\n             continue;\n         }\n \n-        if depr.is_some() {\n-            struct_span_err!(diagnostic, item_sp, E0550, \"multiple deprecated attributes\").emit();\n+        if let Some((_, span)) = &depr {\n+            struct_span_err!(diagnostic, attr.span, E0550, \"multiple deprecated attributes\")\n+                .span_label(attr.span, \"repeated deprecation attribute\")\n+                .span_label(*span, \"first deprecation attribute\")\n+                .emit();\n             break;\n         }\n \n@@ -780,7 +779,7 @@ where\n         sess.mark_attr_used(&attr);\n \n         let is_since_rustc_version = sess.check_name(attr, sym::rustc_deprecated);\n-        depr = Some(Deprecation { since, note, suggestion, is_since_rustc_version });\n+        depr = Some((Deprecation { since, note, suggestion, is_since_rustc_version }, attr.span));\n     }\n \n     depr"}, {"sha": "b435def87ac84c7a5c98901cd39fc2871d6ba8bc", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0112928cb13dbf8936c79d31badf3b684bdda10/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0112928cb13dbf8936c79d31badf3b684bdda10/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=f0112928cb13dbf8936c79d31badf3b684bdda10", "patch": "@@ -793,7 +793,7 @@ impl SyntaxExtension {\n             allow_internal_unsafe: sess.contains_name(attrs, sym::allow_internal_unsafe),\n             local_inner_macros,\n             stability,\n-            deprecation: attr::find_deprecation(&sess, attrs, span),\n+            deprecation: attr::find_deprecation(&sess, attrs).map(|(d, _)| d),\n             helper_attrs,\n             edition,\n             is_builtin,"}, {"sha": "a1b7c13e4c0f0e690564f826f8261eb786af93ee", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f0112928cb13dbf8936c79d31badf3b684bdda10/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0112928cb13dbf8936c79d31badf3b684bdda10/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=f0112928cb13dbf8936c79d31badf3b684bdda10", "patch": "@@ -2705,6 +2705,32 @@ declare_lint! {\n     };\n }\n \n+declare_lint! {\n+    /// The `useless_deprecated` lint detects deprecation attributes with no effect.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// struct X;\n+    ///\n+    /// #[deprecated = \"message\"]\n+    /// impl Default for X {\n+    ///     fn default() -> Self {\n+    ///         X\n+    ///     }\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Deprecation attributes have no effect on trait implementations.\n+    pub USELESS_DEPRECATED,\n+    Deny,\n+    \"detects deprecation attributes with no effect\",\n+}\n+\n declare_tool_lint! {\n     pub rustc::INEFFECTIVE_UNSTABLE_TRAIT_IMPL,\n     Deny,\n@@ -2792,6 +2818,7 @@ declare_lint_pass! {\n         INEFFECTIVE_UNSTABLE_TRAIT_IMPL,\n         UNINHABITED_STATIC,\n         FUNCTION_ITEM_REFERENCES,\n+        USELESS_DEPRECATED,\n     ]\n }\n "}, {"sha": "04b5c65e464fb5e52eec4ad4396ac17c29a3c604", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f0112928cb13dbf8936c79d31badf3b684bdda10/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0112928cb13dbf8936c79d31badf3b684bdda10/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=f0112928cb13dbf8936c79d31badf3b684bdda10", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::middle::stability::{DeprecationEntry, Index};\n use rustc_middle::ty::{self, query::Providers, TyCtxt};\n use rustc_session::lint;\n-use rustc_session::lint::builtin::INEFFECTIVE_UNSTABLE_TRAIT_IMPL;\n+use rustc_session::lint::builtin::{INEFFECTIVE_UNSTABLE_TRAIT_IMPL, USELESS_DEPRECATED};\n use rustc_session::parse::feature_err;\n use rustc_session::Session;\n use rustc_span::symbol::{sym, Symbol};\n@@ -31,6 +31,8 @@ enum AnnotationKind {\n     Required,\n     // Annotation is useless, reject it\n     Prohibited,\n+    // Deprecation annotation is useless, reject it. (Stability attribute is still required.)\n+    DeprecationProhibited,\n     // Annotation itself is useless, but it can be propagated to children\n     Container,\n }\n@@ -83,14 +85,22 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n             did_error = self.forbid_staged_api_attrs(hir_id, attrs, inherit_deprecation.clone());\n         }\n \n-        let depr =\n-            if did_error { None } else { attr::find_deprecation(&self.tcx.sess, attrs, item_sp) };\n+        let depr = if did_error { None } else { attr::find_deprecation(&self.tcx.sess, attrs) };\n         let mut is_deprecated = false;\n-        if let Some(depr) = &depr {\n+        if let Some((depr, span)) = &depr {\n             is_deprecated = true;\n \n-            if kind == AnnotationKind::Prohibited {\n-                self.tcx.sess.span_err(item_sp, \"This deprecation annotation is useless\");\n+            if kind == AnnotationKind::Prohibited || kind == AnnotationKind::DeprecationProhibited {\n+                self.tcx.struct_span_lint_hir(USELESS_DEPRECATED, hir_id, *span, |lint| {\n+                    lint.build(\"this `#[deprecated]` annotation has no effect\")\n+                        .span_suggestion_short(\n+                            *span,\n+                            \"remove the unnecessary deprecation attribute\",\n+                            String::new(),\n+                            rustc_errors::Applicability::MachineApplicable,\n+                        )\n+                        .emit()\n+                });\n             }\n \n             // `Deprecation` is just two pointers, no need to intern it\n@@ -114,7 +124,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n             }\n         } else {\n             self.recurse_with_stability_attrs(\n-                depr.map(|d| DeprecationEntry::local(d, hir_id)),\n+                depr.map(|(d, _)| DeprecationEntry::local(d, hir_id)),\n                 None,\n                 None,\n                 visit_children,\n@@ -139,11 +149,11 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n             }\n         }\n \n-        if depr.as_ref().map_or(false, |d| d.is_since_rustc_version) {\n+        if let Some((rustc_attr::Deprecation { is_since_rustc_version: true, .. }, span)) = &depr {\n             if stab.is_none() {\n                 struct_span_err!(\n                     self.tcx.sess,\n-                    item_sp,\n+                    *span,\n                     E0549,\n                     \"rustc_deprecated attribute must be paired with \\\n                     either stable or unstable attribute\"\n@@ -166,7 +176,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n             // Check if deprecated_since < stable_since. If it is,\n             // this is *almost surely* an accident.\n             if let (&Some(dep_since), &attr::Stable { since: stab_since }) =\n-                (&depr.as_ref().and_then(|d| d.since), &stab.level)\n+                (&depr.as_ref().and_then(|(d, _)| d.since), &stab.level)\n             {\n                 // Explicit version of iter::order::lt to handle parse errors properly\n                 for (dep_v, stab_v) in\n@@ -212,7 +222,7 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n         }\n \n         self.recurse_with_stability_attrs(\n-            depr.map(|d| DeprecationEntry::local(d, hir_id)),\n+            depr.map(|(d, _)| DeprecationEntry::local(d, hir_id)),\n             stab,\n             const_stab,\n             visit_children,\n@@ -322,6 +332,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n             }\n             hir::ItemKind::Impl { of_trait: Some(_), .. } => {\n                 self.in_trait_impl = true;\n+                kind = AnnotationKind::DeprecationProhibited;\n             }\n             hir::ItemKind::Struct(ref sd, _) => {\n                 if let Some(ctor_hir_id) = sd.ctor_hir_id() {"}, {"sha": "4fc3fddadb99ee279f568b83eaad84b846af206f", "filename": "src/test/ui/deprecation/deprecation-sanity.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f0112928cb13dbf8936c79d31badf3b684bdda10/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0112928cb13dbf8936c79d31badf3b684bdda10/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.rs?ref=f0112928cb13dbf8936c79d31badf3b684bdda10", "patch": "@@ -24,10 +24,19 @@ mod bogus_attribute_types_1 {\n }\n \n #[deprecated(since = \"a\", note = \"b\")]\n-#[deprecated(since = \"a\", note = \"b\")]\n-fn multiple1() { } //~ ERROR multiple deprecated attributes\n+#[deprecated(since = \"a\", note = \"b\")] //~ ERROR multiple deprecated attributes\n+fn multiple1() { }\n \n #[deprecated(since = \"a\", since = \"b\", note = \"c\")] //~ ERROR multiple 'since' items\n fn f1() { }\n \n+struct X;\n+\n+#[deprecated = \"hello\"] //~ ERROR this `#[deprecated]` annotation has no effect\n+impl Default for X {\n+    fn default() -> Self {\n+        X\n+    }\n+}\n+\n fn main() { }"}, {"sha": "7e70c35eeabdf37b11fcba42dd2395eebb66819a", "filename": "src/test/ui/deprecation/deprecation-sanity.stderr", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f0112928cb13dbf8936c79d31badf3b684bdda10/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0112928cb13dbf8936c79d31badf3b684bdda10/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.stderr?ref=f0112928cb13dbf8936c79d31badf3b684bdda10", "patch": "@@ -41,18 +41,28 @@ LL |     #[deprecated(\"test\")]\n    |                  ^^^^^^\n \n error[E0550]: multiple deprecated attributes\n-  --> $DIR/deprecation-sanity.rs:28:1\n+  --> $DIR/deprecation-sanity.rs:27:1\n    |\n-LL | fn multiple1() { }\n-   | ^^^^^^^^^^^^^^^^^^\n+LL | #[deprecated(since = \"a\", note = \"b\")]\n+   | -------------------------------------- first deprecation attribute\n+LL | #[deprecated(since = \"a\", note = \"b\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ repeated deprecation attribute\n \n error[E0538]: multiple 'since' items\n   --> $DIR/deprecation-sanity.rs:30:27\n    |\n LL | #[deprecated(since = \"a\", since = \"b\", note = \"c\")]\n    |                           ^^^^^^^^^^^\n \n-error: aborting due to 9 previous errors\n+error: this `#[deprecated]` annotation has no effect\n+  --> $DIR/deprecation-sanity.rs:35:1\n+   |\n+LL | #[deprecated = \"hello\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ help: remove the unnecessary deprecation attribute\n+   |\n+   = note: `#[deny(useless_deprecated)]` on by default\n+\n+error: aborting due to 10 previous errors\n \n Some errors have detailed explanations: E0538, E0541, E0550, E0551, E0565.\n For more information about an error, try `rustc --explain E0538`."}, {"sha": "abd603b356ee68ee7e12795119e55161e01e05e3", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0112928cb13dbf8936c79d31badf3b684bdda10/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0112928cb13dbf8936c79d31badf3b684bdda10/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs?ref=f0112928cb13dbf8936c79d31badf3b684bdda10", "patch": "@@ -59,14 +59,14 @@ fn multiple3() { }\n \n #[stable(feature = \"a\", since = \"b\")]\n #[rustc_deprecated(since = \"b\", reason = \"text\")]\n-#[rustc_deprecated(since = \"b\", reason = \"text\")]\n+#[rustc_deprecated(since = \"b\", reason = \"text\")] //~ ERROR multiple deprecated attributes\n #[rustc_const_unstable(feature = \"c\", issue = \"none\")]\n #[rustc_const_unstable(feature = \"d\", issue = \"none\")] //~ ERROR multiple stability levels\n-pub const fn multiple4() { } //~ ERROR multiple deprecated attributes\n+pub const fn multiple4() { }\n //~^ ERROR Invalid stability or deprecation version found\n \n #[rustc_deprecated(since = \"a\", reason = \"text\")]\n fn deprecated_without_unstable_or_stable() { }\n-//~^ ERROR rustc_deprecated attribute must be paired with either stable or unstable attribute\n+//~^^ ERROR rustc_deprecated attribute must be paired with either stable or unstable attribute\n \n fn main() { }"}, {"sha": "bf2436a535fd46cf96f83de95539b028f3aafc0f", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f0112928cb13dbf8936c79d31badf3b684bdda10/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0112928cb13dbf8936c79d31badf3b684bdda10/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr?ref=f0112928cb13dbf8936c79d31badf3b684bdda10", "patch": "@@ -83,10 +83,12 @@ LL | #[stable(feature = \"a\", since = \"b\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0550]: multiple deprecated attributes\n-  --> $DIR/stability-attribute-sanity.rs:65:1\n+  --> $DIR/stability-attribute-sanity.rs:62:1\n    |\n-LL | pub const fn multiple4() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[rustc_deprecated(since = \"b\", reason = \"text\")]\n+   | ------------------------------------------------- first deprecation attribute\n+LL | #[rustc_deprecated(since = \"b\", reason = \"text\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ repeated deprecation attribute\n \n error[E0544]: multiple stability levels\n   --> $DIR/stability-attribute-sanity.rs:64:1\n@@ -101,10 +103,10 @@ LL | pub const fn multiple4() { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0549]: rustc_deprecated attribute must be paired with either stable or unstable attribute\n-  --> $DIR/stability-attribute-sanity.rs:69:1\n+  --> $DIR/stability-attribute-sanity.rs:68:1\n    |\n-LL | fn deprecated_without_unstable_or_stable() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[rustc_deprecated(since = \"a\", reason = \"text\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 18 previous errors\n "}]}