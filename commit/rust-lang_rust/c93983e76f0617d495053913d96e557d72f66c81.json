{"sha": "c93983e76f0617d495053913d96e557d72f66c81", "node_id": "C_kwDOAAsO6NoAKGM5Mzk4M2U3NmYwNjE3ZDQ5NTA1MzkxM2Q5NmU1NTdkNzJmNjZjODE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-30T14:37:32Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-30T14:37:32Z"}, "message": "Fix for-loop expressions breaking with BlockExpr iterable", "tree": {"sha": "ce4fa8b7f7e400c310cb0347a7736f28822bf224", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce4fa8b7f7e400c310cb0347a7736f28822bf224"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c93983e76f0617d495053913d96e557d72f66c81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c93983e76f0617d495053913d96e557d72f66c81", "html_url": "https://github.com/rust-lang/rust/commit/c93983e76f0617d495053913d96e557d72f66c81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c93983e76f0617d495053913d96e557d72f66c81/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9fa37f5b4e452a496bd7c4baeba08cbdebf6336", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9fa37f5b4e452a496bd7c4baeba08cbdebf6336", "html_url": "https://github.com/rust-lang/rust/commit/b9fa37f5b4e452a496bd7c4baeba08cbdebf6336"}], "stats": {"total": 49, "additions": 44, "deletions": 5}, "files": [{"sha": "4a0a5d6fa1f413cb8c5a194678e3df81aba2f9c9", "filename": "crates/hir_ty/src/tests/regression.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c93983e76f0617d495053913d96e557d72f66c81/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c93983e76f0617d495053913d96e557d72f66c81/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=c93983e76f0617d495053913d96e557d72f66c81", "patch": "@@ -1221,3 +1221,27 @@ fn mamba(a: U32!(), p: u32) -> u32 {\n     \"#,\n     )\n }\n+\n+#[test]\n+fn for_loop_block_expr_iterable() {\n+    check_infer(\n+        r#\"\n+fn test() {\n+    for _ in { let x = 0; } {\n+        let y = 0;\n+    }\n+}\n+        \"#,\n+        expect![[r#\"\n+            10..68 '{     ...   } }': ()\n+            16..66 'for _ ...     }': ()\n+            20..21 '_': {unknown}\n+            25..39 '{ let x = 0; }': ()\n+            31..32 'x': i32\n+            35..36 '0': i32\n+            40..66 '{     ...     }': ()\n+            54..55 'y': i32\n+            58..59 '0': i32\n+        \"#]],\n+    );\n+}"}, {"sha": "18a6e1410ddc3dc431b704e237aab8bbceba65b1", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c93983e76f0617d495053913d96e557d72f66c81/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c93983e76f0617d495053913d96e557d72f66c81/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=c93983e76f0617d495053913d96e557d72f66c81", "patch": "@@ -850,7 +850,6 @@ pub struct ForExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n impl ast::HasAttrs for ForExpr {}\n-impl ast::HasLoopBody for ForExpr {}\n impl ForExpr {\n     pub fn for_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![for]) }\n     pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }"}, {"sha": "98d142da3f75d855438b41405403e0e7029f1d2c", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c93983e76f0617d495053913d96e557d72f66c81/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c93983e76f0617d495053913d96e557d72f66c81/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=c93983e76f0617d495053913d96e557d72f66c81", "patch": "@@ -754,6 +754,15 @@ impl ast::GenericParamList {\n     }\n }\n \n+impl ast::HasLoopBody for ast::ForExpr {\n+    fn loop_body(&self) -> Option<ast::BlockExpr> {\n+        let mut exprs = support::children(self.syntax());\n+        let first = exprs.next();\n+        let second = exprs.next();\n+        second.or(first)\n+    }\n+}\n+\n impl ast::HasDocComments for ast::SourceFile {}\n impl ast::HasDocComments for ast::Fn {}\n impl ast::HasDocComments for ast::Struct {}"}, {"sha": "dcd813bbe039e8de83f9466934663e04ffa0eb65", "filename": "crates/syntax/src/tests/sourcegen_ast.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c93983e76f0617d495053913d96e557d72f66c81/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c93983e76f0617d495053913d96e557d72f66c81/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs?ref=c93983e76f0617d495053913d96e557d72f66c81", "patch": "@@ -81,10 +81,17 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: &AstSrc) -> String {\n         .map(|node| {\n             let name = format_ident!(\"{}\", node.name);\n             let kind = format_ident!(\"{}\", to_upper_snake_case(&node.name));\n-            let traits = node.traits.iter().map(|trait_name| {\n-                let trait_name = format_ident!(\"{}\", trait_name);\n-                quote!(impl ast::#trait_name for #name {})\n-            });\n+            let traits = node\n+                .traits\n+                .iter()\n+                .filter(|trait_name| {\n+                    // For loops have two expressions so this might collide, therefor manual impl it\n+                    node.name != \"ForExpr\" || trait_name.as_str() != \"HasLoopBody\"\n+                })\n+                .map(|trait_name| {\n+                    let trait_name = format_ident!(\"{}\", trait_name);\n+                    quote!(impl ast::#trait_name for #name {})\n+                });\n \n             let methods = node.fields.iter().map(|field| {\n                 let method_name = field.method_name();"}]}