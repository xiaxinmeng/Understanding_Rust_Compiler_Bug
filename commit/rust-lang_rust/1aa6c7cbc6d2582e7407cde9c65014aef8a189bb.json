{"sha": "1aa6c7cbc6d2582e7407cde9c65014aef8a189bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhYTZjN2NiYzZkMjU4MmU3NDA3Y2RlOWM2NTAxNGFlZjhhMTg5YmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-02T05:40:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-02T05:40:51Z"}, "message": "Auto merge of #80182 - in42:stack_trace, r=tmandry\n\nImplement printing of stack traces on LLVM segfaults and aborts\n\nImplement #79153\n\nBased on discussion, try to extend the rust_backtrace=1 feature to handle segfault or aborts in the llvm backend", "tree": {"sha": "f7c795a3e32056a059f9631b21a4e4e7127cb397", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7c795a3e32056a059f9631b21a4e4e7127cb397"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1aa6c7cbc6d2582e7407cde9c65014aef8a189bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1aa6c7cbc6d2582e7407cde9c65014aef8a189bb", "html_url": "https://github.com/rust-lang/rust/commit/1aa6c7cbc6d2582e7407cde9c65014aef8a189bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1aa6c7cbc6d2582e7407cde9c65014aef8a189bb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46ae6ee65df19c6a3fb683499c1203e749975e60", "url": "https://api.github.com/repos/rust-lang/rust/commits/46ae6ee65df19c6a3fb683499c1203e749975e60", "html_url": "https://github.com/rust-lang/rust/commit/46ae6ee65df19c6a3fb683499c1203e749975e60"}, {"sha": "162ed4d7da65b6949ec8256825aa749245564d31", "url": "https://api.github.com/repos/rust-lang/rust/commits/162ed4d7da65b6949ec8256825aa749245564d31", "html_url": "https://github.com/rust-lang/rust/commit/162ed4d7da65b6949ec8256825aa749245564d31"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "326fefa59ab0576606321958686833549d2bd9f5", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1aa6c7cbc6d2582e7407cde9c65014aef8a189bb/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa6c7cbc6d2582e7407cde9c65014aef8a189bb/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=1aa6c7cbc6d2582e7407cde9c65014aef8a189bb", "patch": "@@ -1305,10 +1305,60 @@ pub fn init_env_logger(env: &str) {\n     tracing::subscriber::set_global_default(subscriber).unwrap();\n }\n \n+#[cfg(all(unix, any(target_env = \"gnu\", target_os = \"macos\")))]\n+mod signal_handler {\n+    extern \"C\" {\n+        fn backtrace_symbols_fd(\n+            buffer: *const *mut libc::c_void,\n+            size: libc::c_int,\n+            fd: libc::c_int,\n+        );\n+    }\n+\n+    extern \"C\" fn print_stack_trace(_: libc::c_int) {\n+        const MAX_FRAMES: usize = 256;\n+        static mut STACK_TRACE: [*mut libc::c_void; MAX_FRAMES] =\n+            [std::ptr::null_mut(); MAX_FRAMES];\n+        unsafe {\n+            let depth = libc::backtrace(STACK_TRACE.as_mut_ptr(), MAX_FRAMES as i32);\n+            if depth == 0 {\n+                return;\n+            }\n+            backtrace_symbols_fd(STACK_TRACE.as_ptr(), depth, 2);\n+        }\n+    }\n+\n+    // When an error signal (such as SIGABRT or SIGSEGV) is delivered to the\n+    // process, print a stack trace and then exit.\n+    pub(super) fn install() {\n+        unsafe {\n+            const ALT_STACK_SIZE: usize = libc::MINSIGSTKSZ + 64 * 1024;\n+            let mut alt_stack: libc::stack_t = std::mem::zeroed();\n+            alt_stack.ss_sp =\n+                std::alloc::alloc(std::alloc::Layout::from_size_align(ALT_STACK_SIZE, 1).unwrap())\n+                    as *mut libc::c_void;\n+            alt_stack.ss_size = ALT_STACK_SIZE;\n+            libc::sigaltstack(&mut alt_stack, std::ptr::null_mut());\n+\n+            let mut sa: libc::sigaction = std::mem::zeroed();\n+            sa.sa_sigaction = print_stack_trace as libc::sighandler_t;\n+            sa.sa_flags = libc::SA_NODEFER | libc::SA_RESETHAND | libc::SA_ONSTACK;\n+            libc::sigemptyset(&mut sa.sa_mask);\n+            libc::sigaction(libc::SIGSEGV, &sa, std::ptr::null_mut());\n+        }\n+    }\n+}\n+\n+#[cfg(not(all(unix, any(target_env = \"gnu\", target_os = \"macos\"))))]\n+mod signal_handler {\n+    pub(super) fn install() {}\n+}\n+\n pub fn main() -> ! {\n     let start_time = Instant::now();\n     let start_rss = get_resident_set_size();\n     init_rustc_env_logger();\n+    signal_handler::install();\n     let mut callbacks = TimePassesCallbacks::default();\n     install_ice_hook();\n     let exit_code = catch_with_exit_code(|| {"}]}