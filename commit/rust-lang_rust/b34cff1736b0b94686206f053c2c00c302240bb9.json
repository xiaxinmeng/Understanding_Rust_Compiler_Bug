{"sha": "b34cff1736b0b94686206f053c2c00c302240bb9", "node_id": "C_kwDOAAsO6NoAKGIzNGNmZjE3MzZiMGI5NDY4NjIwNmYwNTNjMmMwMGMzMDIyNDBiYjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-01T22:39:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-01T22:39:59Z"}, "message": "Auto merge of #102193 - ferrocene:pa-remote-test-server-improvements, r=Mark-Simulacrum\n\nChange argument handling in `remote-test-server` and add new flags\n\nThis PR updates `remote-test-server` to add two new flags:\n\n* `--sequential` disables parallel test execution, accepting one connection at the time instead. We need this for Ferrocene as one of our emulators occasionally deadlocks when running multiple tests in parallel.\n* `--bind <ip:port>` allows customizing the IP and port `remote-test-server` binds to, rather than using the default value.\n\nWhile I was changing the flags, and [after chatting on what to do on Zulip](https://rust-lang.zulipchat.com/#narrow/stream/326414-t-infra.2Fbootstrap/topic/remote-test-server.20flags),  I took this opportunity to cleanup argument handling in `remote-test-server`, which is a breaking change:\n\n* The `verbose` argument has been renamed to the `--verbose` flag.\n* The `remote` argument has been removed in favor of the `--bind 0.0.0.0:12345` flag. The only thing the argument did was to change the bound IP to 0.0.0.0, which can easily be replicated with `--bind` and also is not secure as our \"remote\" default.\n\nI'm also open to keep the old arguments with deprecation warnings.\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "10e0f795f7e874e52e55d4c3d78deda91cfe4f07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10e0f795f7e874e52e55d4c3d78deda91cfe4f07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b34cff1736b0b94686206f053c2c00c302240bb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b34cff1736b0b94686206f053c2c00c302240bb9", "html_url": "https://github.com/rust-lang/rust/commit/b34cff1736b0b94686206f053c2c00c302240bb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b34cff1736b0b94686206f053c2c00c302240bb9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57f097ea25f2c05f424fc9b9dc50dbd6d399845c", "url": "https://api.github.com/repos/rust-lang/rust/commits/57f097ea25f2c05f424fc9b9dc50dbd6d399845c", "html_url": "https://github.com/rust-lang/rust/commit/57f097ea25f2c05f424fc9b9dc50dbd6d399845c"}, {"sha": "20638eba8029ba471233ced4f38efade33a6dea7", "url": "https://api.github.com/repos/rust-lang/rust/commits/20638eba8029ba471233ced4f38efade33a6dea7", "html_url": "https://github.com/rust-lang/rust/commit/20638eba8029ba471233ced4f38efade33a6dea7"}], "stats": {"total": 50, "additions": 33, "deletions": 17}, "files": [{"sha": "64b74ecc9defda3dbe4faaba34eaf5cd6b2440a4", "filename": "src/bootstrap/CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b34cff1736b0b94686206f053c2c00c302240bb9/src%2Fbootstrap%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/b34cff1736b0b94686206f053c2c00c302240bb9/src%2Fbootstrap%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCHANGELOG.md?ref=b34cff1736b0b94686206f053c2c00c302240bb9", "patch": "@@ -13,6 +13,8 @@ The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n - Change the names for `dist` commands to match the component they generate. [#90684](https://github.com/rust-lang/rust/pull/90684)\n - The `build.fast-submodules` option has been removed. Fast submodule checkouts are enabled unconditionally. Automatic submodule handling can still be disabled with `build.submodules = false`.\n - Several unsupported `./configure` options have been removed: `optimize`, `parallel-compiler`. These can still be enabled with `--set`, although it isn't recommended.\n+- `remote-test-server`'s `verbose` argument has been removed in favor of the `--verbose` flag\n+- `remote-test-server`'s `remote` argument has been removed in favor of the `--bind` flag. Use `--bind 0.0.0.0:12345` to replicate the behavior of the `remote` argument.\n \n ### Non-breaking changes\n "}, {"sha": "0c60d500a80bf14ee0e81063be0576565ee467e3", "filename": "src/tools/remote-test-server/src/main.rs", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b34cff1736b0b94686206f053c2c00c302240bb9/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b34cff1736b0b94686206f053c2c00c302240bb9/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs?ref=b34cff1736b0b94686206f053c2c00c302240bb9", "patch": "@@ -12,6 +12,7 @@\n \n #[cfg(not(windows))]\n use std::fs::Permissions;\n+use std::net::SocketAddr;\n #[cfg(not(windows))]\n use std::os::unix::prelude::*;\n \n@@ -41,30 +42,44 @@ static TEST: AtomicUsize = AtomicUsize::new(0);\n \n #[derive(Copy, Clone)]\n struct Config {\n-    pub remote: bool,\n-    pub verbose: bool,\n+    verbose: bool,\n+    sequential: bool,\n+    bind: SocketAddr,\n }\n \n impl Config {\n     pub fn default() -> Config {\n-        Config { remote: false, verbose: false }\n+        Config {\n+            verbose: false,\n+            sequential: false,\n+            bind: if cfg!(target_os = \"android\") || cfg!(windows) {\n+                ([0, 0, 0, 0], 12345).into()\n+            } else {\n+                ([10, 0, 2, 15], 12345).into()\n+            },\n+        }\n     }\n \n     pub fn parse_args() -> Config {\n         let mut config = Config::default();\n \n         let args = env::args().skip(1);\n+        let mut next_is_bind = false;\n         for argument in args {\n             match &argument[..] {\n-                \"remote\" => {\n-                    config.remote = true;\n-                }\n-                \"verbose\" | \"-v\" => {\n-                    config.verbose = true;\n+                bind if next_is_bind => {\n+                    config.bind = t!(bind.parse());\n+                    next_is_bind = false;\n                 }\n+                \"--bind\" => next_is_bind = true,\n+                \"--sequential\" => config.sequential = true,\n+                \"--verbose\" | \"-v\" => config.verbose = true,\n                 arg => panic!(\"unknown argument: {}\", arg),\n             }\n         }\n+        if next_is_bind {\n+            panic!(\"missing value for --bind\");\n+        }\n \n         config\n     }\n@@ -81,13 +96,7 @@ fn main() {\n \n     let config = Config::parse_args();\n \n-    let bind_addr = if cfg!(target_os = \"android\") || cfg!(windows) || config.remote {\n-        \"0.0.0.0:12345\"\n-    } else {\n-        \"10.0.2.15:12345\"\n-    };\n-\n-    let listener = t!(TcpListener::bind(bind_addr));\n+    let listener = t!(TcpListener::bind(config.bind));\n     let (work, tmp): (PathBuf, PathBuf) = if cfg!(target_os = \"android\") {\n         (\"/data/tmp/work\".into(), \"/data/tmp/work/tmp\".into())\n     } else {\n@@ -97,7 +106,7 @@ fn main() {\n         tmp_dir.push(\"tmp\");\n         (work_dir, tmp_dir)\n     };\n-    println!(\"listening on {}!\", bind_addr);\n+    println!(\"listening on {}!\", config.bind);\n \n     t!(fs::create_dir_all(&work));\n     t!(fs::create_dir_all(&tmp));\n@@ -119,7 +128,12 @@ fn main() {\n             let lock = lock.clone();\n             let work = work.clone();\n             let tmp = tmp.clone();\n-            thread::spawn(move || handle_run(socket, &work, &tmp, &lock, config));\n+            let f = move || handle_run(socket, &work, &tmp, &lock, config);\n+            if config.sequential {\n+                f();\n+            } else {\n+                thread::spawn(f);\n+            }\n         } else {\n             panic!(\"unknown command {:?}\", buf);\n         }"}]}