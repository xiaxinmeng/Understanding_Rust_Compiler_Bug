{"sha": "93d369bc2b65e822d001a8d08f99c6bbaf105ee5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZDM2OWJjMmI2NWU4MjJkMDAxYThkMDhmOTljNmJiYWYxMDVlZTU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-19T21:24:28Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-21T08:53:39Z"}, "message": "resolve/expand: Rename some things for clarity and add comments", "tree": {"sha": "681c8db7b1769acdee08a225892adbb2ed3d56f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/681c8db7b1769acdee08a225892adbb2ed3d56f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93d369bc2b65e822d001a8d08f99c6bbaf105ee5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93d369bc2b65e822d001a8d08f99c6bbaf105ee5", "html_url": "https://github.com/rust-lang/rust/commit/93d369bc2b65e822d001a8d08f99c6bbaf105ee5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93d369bc2b65e822d001a8d08f99c6bbaf105ee5/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a83c35692fa5fc65ec9860599501f1a5a5e98214", "url": "https://api.github.com/repos/rust-lang/rust/commits/a83c35692fa5fc65ec9860599501f1a5a5e98214", "html_url": "https://github.com/rust-lang/rust/commit/a83c35692fa5fc65ec9860599501f1a5a5e98214"}], "stats": {"total": 47, "additions": 29, "deletions": 18}, "files": [{"sha": "719167eb057b21ded168838155838addc2efe1aa", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/93d369bc2b65e822d001a8d08f99c6bbaf105ee5/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d369bc2b65e822d001a8d08f99c6bbaf105ee5/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=93d369bc2b65e822d001a8d08f99c6bbaf105ee5", "patch": "@@ -140,11 +140,23 @@ impl<'a> base::Resolver for Resolver<'a> {\n         ImportResolver { r: self }.resolve_imports()\n     }\n \n-    fn resolve_macro_invocation(&mut self, invoc: &Invocation, invoc_id: ExpnId, force: bool)\n-                                -> Result<Option<Lrc<SyntaxExtension>>, Indeterminate> {\n-        let inherited_parent_scope = self.invocation_parent_scopes[&invoc_id];\n-        let parent_scope = *self.invocation_parent_scopes.entry(invoc.expansion_data.id)\n-                                                         .or_insert(inherited_parent_scope);\n+    fn resolve_macro_invocation(\n+        &mut self, invoc: &Invocation, eager_expansion_root: ExpnId, force: bool\n+    ) -> Result<Option<Lrc<SyntaxExtension>>, Indeterminate> {\n+        let invoc_id = invoc.expansion_data.id;\n+        let parent_scope = match self.invocation_parent_scopes.get(&invoc_id) {\n+            Some(parent_scope) => *parent_scope,\n+            None => {\n+                // If there's no entry in the table, then we are resolving an eagerly expanded\n+                // macro, which should inherit its parent scope from its eager expansion root -\n+                // the macro that requested this eager expansion.\n+                let parent_scope = *self.invocation_parent_scopes.get(&eager_expansion_root)\n+                    .expect(\"non-eager expansion without a parent scope\");\n+                self.invocation_parent_scopes.insert(invoc_id, parent_scope);\n+                parent_scope\n+            }\n+        };\n+\n         let (path, kind, derives, after_derive) = match invoc.kind {\n             InvocationKind::Attr { ref attr, ref derives, after_derive, .. } =>\n                 (&attr.path, MacroKind::Attr, self.arenas.alloc_ast_paths(derives), after_derive),\n@@ -163,7 +175,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n                         match self.resolve_macro_path(path, Some(MacroKind::Derive),\n                                                       &parent_scope, true, force) {\n                             Ok((Some(ref ext), _)) if ext.is_derive_copy => {\n-                                self.add_derives(invoc.expansion_data.id, SpecialDerives::COPY);\n+                                self.add_derives(invoc_id, SpecialDerives::COPY);\n                                 return Ok(None);\n                             }\n                             Err(Determinacy::Undetermined) => result = Err(Indeterminate),\n@@ -180,19 +192,15 @@ impl<'a> base::Resolver for Resolver<'a> {\n         let (ext, res) = self.smart_resolve_macro_path(path, kind, parent_scope, force)?;\n \n         let span = invoc.span();\n-        invoc.expansion_data.id.set_expn_data(\n-            ext.expn_data(parent_scope.expansion, span, fast_print_path(path))\n-        );\n+        invoc_id.set_expn_data(ext.expn_data(parent_scope.expansion, span, fast_print_path(path)));\n \n         if let Res::Def(_, def_id) = res {\n             if after_derive {\n                 self.session.span_err(span, \"macro attributes must be placed before `#[derive]`\");\n             }\n-            self.macro_defs.insert(invoc.expansion_data.id, def_id);\n-            let normal_module_def_id =\n-                self.macro_def_scope(invoc.expansion_data.id).normal_ancestor_id;\n-            self.definitions.add_parent_module_of_macro_def(invoc.expansion_data.id,\n-                                                            normal_module_def_id);\n+            self.macro_defs.insert(invoc_id, def_id);\n+            let normal_module_def_id = self.macro_def_scope(invoc_id).normal_ancestor_id;\n+            self.definitions.add_parent_module_of_macro_def(invoc_id, normal_module_def_id);\n         }\n \n         Ok(Some(ext))"}, {"sha": "075e6a80013364bdf99c153349a8b60642f62047", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93d369bc2b65e822d001a8d08f99c6bbaf105ee5/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d369bc2b65e822d001a8d08f99c6bbaf105ee5/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=93d369bc2b65e822d001a8d08f99c6bbaf105ee5", "patch": "@@ -682,8 +682,9 @@ pub trait Resolver {\n \n     fn resolve_imports(&mut self);\n \n-    fn resolve_macro_invocation(&mut self, invoc: &Invocation, invoc_id: ExpnId, force: bool)\n-                                -> Result<Option<Lrc<SyntaxExtension>>, Indeterminate>;\n+    fn resolve_macro_invocation(\n+        &mut self, invoc: &Invocation, eager_expansion_root: ExpnId, force: bool\n+    ) -> Result<Option<Lrc<SyntaxExtension>>, Indeterminate>;\n \n     fn check_unused_macros(&self);\n "}, {"sha": "72f2c1375e7a2d75cd1e98b95408c845b09d18c7", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93d369bc2b65e822d001a8d08f99c6bbaf105ee5/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d369bc2b65e822d001a8d08f99c6bbaf105ee5/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=93d369bc2b65e822d001a8d08f99c6bbaf105ee5", "patch": "@@ -305,9 +305,11 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 continue\n             };\n \n-            let scope =\n+            let eager_expansion_root =\n                 if self.monotonic { invoc.expansion_data.id } else { orig_expansion_data.id };\n-            let ext = match self.cx.resolver.resolve_macro_invocation(&invoc, scope, force) {\n+            let ext = match self.cx.resolver.resolve_macro_invocation(\n+                &invoc, eager_expansion_root, force\n+            ) {\n                 Ok(ext) => ext,\n                 Err(Indeterminate) => {\n                     undetermined_invocations.push(invoc);"}]}