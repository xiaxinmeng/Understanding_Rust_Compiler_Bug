{"sha": "eb45c0ac7fc34a01f27994e8776a2eb652cc6621", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNDVjMGFjN2ZjMzRhMDFmMjc5OTRlODc3NmEyZWI2NTJjYzY2MjE=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-09-15T02:32:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-09-15T02:32:36Z"}, "message": "Rollup merge of #44388 - tbu-:pr_doc_udp_connect_multiple, r=frewsxcv\n\nClarify the behavior of UDP sockets wrt. multiple addresses in `connect`\n\nCC @frewsxcv #22569 #44209", "tree": {"sha": "b14342d4752123f5dd2d13f34e128d1021499e44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b14342d4752123f5dd2d13f34e128d1021499e44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb45c0ac7fc34a01f27994e8776a2eb652cc6621", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb45c0ac7fc34a01f27994e8776a2eb652cc6621", "html_url": "https://github.com/rust-lang/rust/commit/eb45c0ac7fc34a01f27994e8776a2eb652cc6621", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb45c0ac7fc34a01f27994e8776a2eb652cc6621/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64690fe92ee366de227023028076608f9a299e5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/64690fe92ee366de227023028076608f9a299e5e", "html_url": "https://github.com/rust-lang/rust/commit/64690fe92ee366de227023028076608f9a299e5e"}, {"sha": "b4d0f6177188c6d00d124bd6246612bea6e3295b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4d0f6177188c6d00d124bd6246612bea6e3295b", "html_url": "https://github.com/rust-lang/rust/commit/b4d0f6177188c6d00d124bd6246612bea6e3295b"}], "stats": {"total": 25, "additions": 9, "deletions": 16}, "files": [{"sha": "a8a242846d7cedb6522ec40e27a501d485adb573", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/eb45c0ac7fc34a01f27994e8776a2eb652cc6621/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb45c0ac7fc34a01f27994e8776a2eb652cc6621/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=eb45c0ac7fc34a01f27994e8776a2eb652cc6621", "patch": "@@ -598,8 +598,11 @@ impl UdpSocket {\n     /// receive data from the specified address.\n     ///\n     /// If `addr` yields multiple addresses, `connect` will be attempted with\n-    /// each of the addresses until a connection is successful. If none of\n-    /// the addresses are able to be connected, the error returned from the\n+    /// each of the addresses until the underlying OS function returns no\n+    /// error. Note that usually, a successful `connect` call does not specify\n+    /// that there is a remote server listening on the port, rather, such an\n+    /// error would only be detected after the first send. If the OS returns an\n+    /// error for each of the specified addresses, the error returned from the\n     /// last connection attempt (the last address) is returned.\n     ///\n     /// # Examples\n@@ -614,20 +617,10 @@ impl UdpSocket {\n     /// socket.connect(\"127.0.0.1:8080\").expect(\"connect function failed\");\n     /// ```\n     ///\n-    /// Create a UDP socket bound to `127.0.0.1:3400` and connect the socket to\n-    /// `127.0.0.1:8080`. If that connection fails, then the UDP socket will\n-    /// connect to `127.0.0.1:8081`:\n-    ///\n-    /// ```no_run\n-    /// use std::net::{SocketAddr, UdpSocket};\n-    ///\n-    /// let socket = UdpSocket::bind(\"127.0.0.1:3400\").expect(\"couldn't bind to address\");\n-    /// let connect_addrs = [\n-    ///     SocketAddr::from(([127, 0, 0, 1], 8080)),\n-    ///     SocketAddr::from(([127, 0, 0, 1], 8081)),\n-    /// ];\n-    /// socket.connect(&connect_addrs[..]).expect(\"connect function failed\");\n-    /// ```\n+    /// Unlike in the TCP case, passing an array of addresses to the `connect`\n+    /// function of a UDP socket is not a useful thing to do: The OS will be\n+    /// unable to determine whether something is listening on the remote\n+    /// address without the application sending data.\n     #[stable(feature = \"net2_mutators\", since = \"1.9.0\")]\n     pub fn connect<A: ToSocketAddrs>(&self, addr: A) -> io::Result<()> {\n         super::each_addr(addr, |addr| self.0.connect(addr))"}]}