{"sha": "033047a72cd3129831d4c0ae59024d77f17106ec", "node_id": "C_kwDOAAsO6NoAKDAzMzA0N2E3MmNkMzEyOTgzMWQ0YzBhZTU5MDI0ZDc3ZjE3MTA2ZWM", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-01-23T14:34:11Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-01-23T14:58:28Z"}, "message": "`new_outside_solver` ->  `evaluate_root_goal`", "tree": {"sha": "4ac2aa63531d879b8a86144c8d860344c78cc4ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ac2aa63531d879b8a86144c8d860344c78cc4ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/033047a72cd3129831d4c0ae59024d77f17106ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/033047a72cd3129831d4c0ae59024d77f17106ec", "html_url": "https://github.com/rust-lang/rust/commit/033047a72cd3129831d4c0ae59024d77f17106ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/033047a72cd3129831d4c0ae59024d77f17106ec/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b3cd03fdb285781c60f5962194719fdfd46d910", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b3cd03fdb285781c60f5962194719fdfd46d910", "html_url": "https://github.com/rust-lang/rust/commit/6b3cd03fdb285781c60f5962194719fdfd46d910"}], "stats": {"total": 49, "additions": 32, "deletions": 17}, "files": [{"sha": "d59fa71406c31197c75a4bedbe1545463f302b8a", "filename": "compiler/rustc_trait_selection/src/solve/fulfill.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/033047a72cd3129831d4c0ae59024d77f17106ec/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033047a72cd3129831d4c0ae59024d77f17106ec/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs?ref=033047a72cd3129831d4c0ae59024d77f17106ec", "patch": "@@ -1,5 +1,6 @@\n use std::mem;\n \n+use super::{Certainty, InferCtxtEvalExt};\n use rustc_infer::{\n     infer::InferCtxt,\n     traits::{\n@@ -8,8 +9,6 @@ use rustc_infer::{\n     },\n };\n \n-use super::{search_graph, Certainty, EvalCtxt};\n-\n /// A trait engine using the new trait solver.\n ///\n /// This is mostly identical to how `evaluate_all` works inside of the\n@@ -66,9 +65,7 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentCtxt<'tcx> {\n             let mut has_changed = false;\n             for obligation in mem::take(&mut self.obligations) {\n                 let goal = obligation.clone().into();\n-                let search_graph = &mut search_graph::SearchGraph::new(infcx.tcx);\n-                let mut ecx = EvalCtxt::new_outside_solver(infcx, search_graph);\n-                let (changed, certainty) = match ecx.evaluate_goal(goal) {\n+                let (changed, certainty) = match infcx.evaluate_root_goal(goal) {\n                     Ok(result) => result,\n                     Err(NoSolution) => {\n                         errors.push(FulfillmentError {"}, {"sha": "70f094014453edfcca6960ef8a09c64a5ab4798f", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/033047a72cd3129831d4c0ae59024d77f17106ec/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033047a72cd3129831d4c0ae59024d77f17106ec/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=033047a72cd3129831d4c0ae59024d77f17106ec", "patch": "@@ -152,6 +152,36 @@ impl<'tcx> TyCtxtExt<'tcx> for TyCtxt<'tcx> {\n     }\n }\n \n+pub trait InferCtxtEvalExt<'tcx> {\n+    /// Evaluates a goal from **outside** of the trait solver.\n+    ///\n+    /// Using this while inside of the solver is wrong as it uses a new\n+    /// search graph which would break cycle detection.\n+    fn evaluate_root_goal(\n+        &self,\n+        goal: Goal<'tcx, ty::Predicate<'tcx>>,\n+    ) -> Result<(bool, Certainty), NoSolution>;\n+}\n+\n+impl<'tcx> InferCtxtEvalExt<'tcx> for InferCtxt<'tcx> {\n+    fn evaluate_root_goal(\n+        &self,\n+        goal: Goal<'tcx, ty::Predicate<'tcx>>,\n+    ) -> Result<(bool, Certainty), NoSolution> {\n+        let mut search_graph = search_graph::SearchGraph::new(self.tcx);\n+\n+        let result = EvalCtxt {\n+            search_graph: &mut search_graph,\n+            infcx: self,\n+            var_values: CanonicalVarValues::dummy(),\n+        }\n+        .evaluate_goal(goal);\n+\n+        assert!(search_graph.is_empty());\n+        result\n+    }\n+}\n+\n struct EvalCtxt<'a, 'tcx> {\n     infcx: &'a InferCtxt<'tcx>,\n     var_values: CanonicalVarValues<'tcx>,\n@@ -164,18 +194,6 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n         self.infcx.tcx\n     }\n \n-    /// Creates a new evaluation context outside of the trait solver.\n-    ///\n-    /// With this solver making a canonical response doesn't make much sense.\n-    /// The `search_graph` for this solver has to be completely empty.\n-    fn new_outside_solver(\n-        infcx: &'a InferCtxt<'tcx>,\n-        search_graph: &'a mut search_graph::SearchGraph<'tcx>,\n-    ) -> EvalCtxt<'a, 'tcx> {\n-        assert!(search_graph.is_empty());\n-        EvalCtxt { infcx, var_values: CanonicalVarValues::dummy(), search_graph }\n-    }\n-\n     #[instrument(level = \"debug\", skip(tcx, search_graph), ret)]\n     fn evaluate_canonical_goal(\n         tcx: TyCtxt<'tcx>,"}]}