{"sha": "d4e5943259de7573556711ed6496c409dd754ea3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZTU5NDMyNTlkZTc1NzM1NTY3MTFlZDY0OTZjNDA5ZGQ3NTRlYTM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-16T16:16:34Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-16T16:26:04Z"}, "message": "use real align_offset unless we symbolic alignment check is enabled", "tree": {"sha": "16dda6ed9a46e4eca2fb240cc85d09aa740d84f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16dda6ed9a46e4eca2fb240cc85d09aa740d84f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4e5943259de7573556711ed6496c409dd754ea3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4e5943259de7573556711ed6496c409dd754ea3", "html_url": "https://github.com/rust-lang/rust/commit/d4e5943259de7573556711ed6496c409dd754ea3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4e5943259de7573556711ed6496c409dd754ea3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "664706662ff1221e88e70dd5c6ceef391e2528a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/664706662ff1221e88e70dd5c6ceef391e2528a6", "html_url": "https://github.com/rust-lang/rust/commit/664706662ff1221e88e70dd5c6ceef391e2528a6"}], "stats": {"total": 65, "additions": 41, "deletions": 24}, "files": [{"sha": "eab27496cb28616435db2668d298b6cd0aa11521", "filename": "src/shims/mod.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d4e5943259de7573556711ed6496c409dd754ea3/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e5943259de7573556711ed6496c409dd754ea3/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=d4e5943259de7573556711ed6496c409dd754ea3", "patch": "@@ -13,8 +13,6 @@ pub mod tls;\n \n // End module management, begin local code\n \n-use std::convert::TryFrom;\n-\n use log::trace;\n \n use rustc_middle::{mir, ty};\n@@ -37,8 +35,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // There are some more lang items we want to hook that CTFE does not hook (yet).\n         if this.tcx.lang_items().align_offset_fn() == Some(instance.def.def_id()) {\n             let &[ptr, align] = check_arg_count(args)?;\n-            this.align_offset(ptr, align, ret, unwind)?;\n-            return Ok(None);\n+            if this.align_offset(ptr, align, ret, unwind)? {\n+                return Ok(None);\n+            }\n         }\n \n         // Try to see if we can do something about foreign items.\n@@ -56,46 +55,48 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(Some(&*this.load_mir(instance.def, None)?))\n     }\n \n+    /// Returns `true` if the computation was performed, and `false` if we should just evaluate\n+    /// the actual MIR of `align_offset`.\n     fn align_offset(\n         &mut self,\n         ptr_op: OpTy<'tcx, Tag>,\n         align_op: OpTy<'tcx, Tag>,\n         ret: Option<(PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n         unwind: Option<mir::BasicBlock>,\n-    ) -> InterpResult<'tcx> {\n+    ) -> InterpResult<'tcx, bool> {\n         let this = self.eval_context_mut();\n         let (dest, ret) = ret.unwrap();\n \n+        if this.memory.extra.check_alignment != AlignmentCheck::Symbolic {\n+            // Just use actual implementation.\n+            return Ok(false);\n+        }\n+\n         let req_align = this\n             .force_bits(this.read_scalar(align_op)?.check_init()?, this.pointer_size())?;\n \n         // Stop if the alignment is not a power of two.\n         if !req_align.is_power_of_two() {\n-            return this.start_panic(\"align_offset: align is not a power-of-two\", unwind);\n+            this.start_panic(\"align_offset: align is not a power-of-two\", unwind)?;\n+            return Ok(true); // nothing left to do\n         }\n \n         let ptr_scalar = this.read_scalar(ptr_op)?.check_init()?;\n \n-        // Default: no result.\n-        let mut result = this.machine_usize_max();\n         if let Ok(ptr) = this.force_ptr(ptr_scalar) {\n             // Only do anything if we can identify the allocation this goes to.\n             let cur_align =\n                 this.memory.get_size_and_align(ptr.alloc_id, AllocCheck::MaybeDead)?.1.bytes();\n             if u128::from(cur_align) >= req_align {\n                 // If the allocation alignment is at least the required alignment we use the\n-                // libcore implementation.\n-                // FIXME: is this correct in case of truncation?\n-                result = u64::try_from(\n-                    (this.force_bits(ptr_scalar, this.pointer_size())? as *const i8)\n-                        .align_offset(usize::try_from(req_align).unwrap())\n-                ).unwrap();\n+                // real implementation.\n+                return Ok(false);\n             }\n         }\n \n-        // Return result, and jump to caller.\n-        this.write_scalar(Scalar::from_machine_usize(result, this), dest)?;\n+        // Return error result (usize::MAX), and jump to caller.\n+        this.write_scalar(Scalar::from_machine_usize(this.machine_usize_max(), this), dest)?;\n         this.go_to_block(ret);\n-        Ok(())\n+        Ok(true)\n     }\n }"}, {"sha": "81e7e8c7ccac323185ce6d5fa0a6bb51b1baea88", "filename": "tests/run-pass/align.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d4e5943259de7573556711ed6496c409dd754ea3/tests%2Frun-pass%2Falign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e5943259de7573556711ed6496c409dd754ea3/tests%2Frun-pass%2Falign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Falign.rs?ref=d4e5943259de7573556711ed6496c409dd754ea3", "patch": "@@ -1,11 +1,25 @@\n-// This manually makes sure that we have a pointer with the proper alignment.\n-// Do this a couple times in a loop because it may work \"by chance\".\n+/// This manually makes sure that we have a pointer with the proper alignment.\n+fn manual_alignment() {\n+    let x = &mut [0u8; 3];\n+    let base_addr = x as *mut _ as usize;\n+    let base_addr_aligned = if base_addr % 2 == 0 { base_addr } else { base_addr+1 };\n+    let u16_ptr = base_addr_aligned as *mut u16;\n+    unsafe { *u16_ptr = 2; }\n+}\n+\n+/// Test standard library `align_to`.\n+fn align_to() {\n+    const LEN: usize = 128;\n+    let buf = &[0u8; LEN];\n+    let (l, m, r) = unsafe { buf.align_to::<i32>() };\n+    assert!(m.len()*4 >= LEN-4);\n+    assert!(l.len() + r.len() <= 4);\n+}\n+\n fn main() {\n+    // Do this a couple times in a loop because it may work \"by chance\".\n     for _ in 0..10 {\n-        let x = &mut [0u8; 3];\n-        let base_addr = x as *mut _ as usize;\n-        let base_addr_aligned = if base_addr % 2 == 0 { base_addr } else { base_addr+1 };\n-        let u16_ptr = base_addr_aligned as *mut u16;\n-        unsafe { *u16_ptr = 2; }\n+        manual_alignment();\n+        align_to();\n     }\n }"}, {"sha": "70b2e00896dc0efd8e326e68bde16265b45d72e7", "filename": "tests/run-pass/align_offset_symbolic.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4e5943259de7573556711ed6496c409dd754ea3/tests%2Frun-pass%2Falign_offset_symbolic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e5943259de7573556711ed6496c409dd754ea3/tests%2Frun-pass%2Falign_offset_symbolic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Falign_offset_symbolic.rs?ref=d4e5943259de7573556711ed6496c409dd754ea3", "patch": "@@ -1,3 +1,5 @@\n+// compile-flags: -Zmiri-symbolic-alignment-check\n+\n fn test_align_offset() {\n     let d = Box::new([0u32; 4]);\n     // Get u8 pointer to base", "previous_filename": "tests/run-pass/align_offset.rs"}, {"sha": "66d439948159632e13543778e040edd9f3cfca17", "filename": "tests/run-pass/align_offset_symbolic.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d4e5943259de7573556711ed6496c409dd754ea3/tests%2Frun-pass%2Falign_offset_symbolic.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d4e5943259de7573556711ed6496c409dd754ea3/tests%2Frun-pass%2Falign_offset_symbolic.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Falign_offset_symbolic.stdout?ref=d4e5943259de7573556711ed6496c409dd754ea3", "previous_filename": "tests/run-pass/align_offset.stdout"}]}