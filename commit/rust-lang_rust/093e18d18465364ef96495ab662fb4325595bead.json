{"sha": "093e18d18465364ef96495ab662fb4325595bead", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5M2UxOGQxODQ2NTM2NGVmOTY0OTVhYjY2MmZiNDMyNTU5NWJlYWQ=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-05-21T12:17:37Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-05-21T12:17:37Z"}, "message": "rustdoc: Skip types in impls in search index\n\nFor a trait *implementation* there are typedefs which are the types for\nthat particular trait and implementor. Skip these in the search index.\n\nThere were lots of dud items in the search index due to this (search for\nItem, Iterator's associated type).\n\nAdd a boolean to clean::TypedefItem so that it tracks whether the it is\na type alias on its own, or if it's a `type` item in a trait impl.\n\nFixes #22442", "tree": {"sha": "3ea08b506674a2e625d86089a1391fe24aa4087d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ea08b506674a2e625d86089a1391fe24aa4087d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/093e18d18465364ef96495ab662fb4325595bead", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/093e18d18465364ef96495ab662fb4325595bead", "html_url": "https://github.com/rust-lang/rust/commit/093e18d18465364ef96495ab662fb4325595bead", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/093e18d18465364ef96495ab662fb4325595bead/comments", "author": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "committer": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7185dcff12a6963535e73ed4b0f392da236068c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7185dcff12a6963535e73ed4b0f392da236068c", "html_url": "https://github.com/rust-lang/rust/commit/d7185dcff12a6963535e73ed4b0f392da236068c"}], "stats": {"total": 36, "additions": 25, "deletions": 11}, "files": [{"sha": "c5c0f4dd8db1c7dfdbcda37198429d5537305285", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/093e18d18465364ef96495ab662fb4325595bead/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/093e18d18465364ef96495ab662fb4325595bead/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=093e18d18465364ef96495ab662fb4325595bead", "patch": "@@ -216,7 +216,7 @@ fn build_type(cx: &DocContext, tcx: &ty::ctxt, did: ast::DefId) -> clean::ItemEn\n     clean::TypedefItem(clean::Typedef {\n         type_: t.ty.clean(cx),\n         generics: (&t.generics, &predicates, subst::TypeSpace).clean(cx),\n-    })\n+    }, false)\n }\n \n pub fn build_impls(cx: &DocContext, tcx: &ty::ctxt,\n@@ -368,7 +368,7 @@ pub fn build_impl(cx: &DocContext,\n                                subst::ParamSpace::TypeSpace).clean(cx);\n                 Some(clean::Item {\n                     name: Some(assoc_ty.name.clean(cx)),\n-                    inner: clean::TypedefItem(typedef),\n+                    inner: clean::TypedefItem(typedef, true),\n                     source: clean::Span::empty(),\n                     attrs: vec![],\n                     visibility: None,"}, {"sha": "d985fa4c8cc6c127618824c221878d0f2181f087", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/093e18d18465364ef96495ab662fb4325595bead/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/093e18d18465364ef96495ab662fb4325595bead/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=093e18d18465364ef96495ab662fb4325595bead", "patch": "@@ -343,7 +343,7 @@ pub enum ItemEnum {\n     EnumItem(Enum),\n     FunctionItem(Function),\n     ModuleItem(Module),\n-    TypedefItem(Typedef),\n+    TypedefItem(Typedef, bool /* is associated type */),\n     StaticItem(Static),\n     ConstantItem(Constant),\n     TraitItem(Trait),\n@@ -1282,7 +1282,7 @@ impl Clean<Item> for ast::ImplItem {\n                     type_params: Vec::new(),\n                     where_predicates: Vec::new()\n                 },\n-            }),\n+            }, true),\n             ast::MacImplItem(_) => {\n                 MacroItem(Macro {\n                     source: self.span.to_src(cx),\n@@ -2078,7 +2078,7 @@ impl Clean<Item> for doctree::Typedef {\n             inner: TypedefItem(Typedef {\n                 type_: self.ty.clean(cx),\n                 generics: self.gen.clean(cx),\n-            }),\n+            }, false),\n         }\n     }\n }\n@@ -2248,7 +2248,7 @@ fn build_deref_target_impls(cx: &DocContext,\n \n     for item in items {\n         let target = match item.inner {\n-            TypedefItem(ref t) => &t.type_,\n+            TypedefItem(ref t, true) => &t.type_,\n             _ => continue,\n         };\n         let primitive = match *target {"}, {"sha": "d82602c9bd0744f3cf9e532805b132107ab1487d", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/093e18d18465364ef96495ab662fb4325595bead/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/093e18d18465364ef96495ab662fb4325595bead/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=093e18d18465364ef96495ab662fb4325595bead", "patch": "@@ -870,7 +870,7 @@ impl DocFolder for Cache {\n             clean::StructItem(ref s)          => self.generics(&s.generics),\n             clean::EnumItem(ref e)            => self.generics(&e.generics),\n             clean::FunctionItem(ref f)        => self.generics(&f.generics),\n-            clean::TypedefItem(ref t)         => self.generics(&t.generics),\n+            clean::TypedefItem(ref t, _)      => self.generics(&t.generics),\n             clean::TraitItem(ref t)           => self.generics(&t.generics),\n             clean::ImplItem(ref i)            => self.generics(&i.generics),\n             clean::TyMethodItem(ref i)        => self.generics(&i.generics),\n@@ -936,6 +936,10 @@ impl DocFolder for Cache {\n                         ((Some(*last), path), true)\n                     }\n                 }\n+                clean::TypedefItem(_, true) => {\n+                    // skip associated types in impls\n+                    ((None, None), false)\n+                }\n                 _ => ((None, Some(&*self.stack)), false)\n             };\n             let hidden_field = match item.inner {\n@@ -1497,7 +1501,7 @@ impl<'a> fmt::Display for Item<'a> {\n             clean::TraitItem(ref t) => item_trait(fmt, self.cx, self.item, t),\n             clean::StructItem(ref s) => item_struct(fmt, self.item, s),\n             clean::EnumItem(ref e) => item_enum(fmt, self.item, e),\n-            clean::TypedefItem(ref t) => item_typedef(fmt, self.item, t),\n+            clean::TypedefItem(ref t, _) => item_typedef(fmt, self.item, t),\n             clean::MacroItem(ref m) => item_macro(fmt, self.item, m),\n             clean::PrimitiveItem(ref p) => item_primitive(fmt, self.item, p),\n             clean::StaticItem(ref i) | clean::ForeignStaticItem(ref i) =>\n@@ -2303,10 +2307,10 @@ fn render_deref_methods(w: &mut fmt::Formatter, impl_: &Impl) -> fmt::Result {\n     let deref_type = impl_.impl_.trait_.as_ref().unwrap();\n     let target = impl_.impl_.items.iter().filter_map(|item| {\n         match item.inner {\n-            clean::TypedefItem(ref t) => Some(&t.type_),\n+            clean::TypedefItem(ref t, true) => Some(&t.type_),\n             _ => None,\n         }\n-    }).next().unwrap();\n+    }).next().expect(\"Expected associated type binding\");\n     let what = AssocItemRender::DerefFor { trait_: deref_type, type_: target };\n     match *target {\n         clean::ResolvedPath { did, .. } => render_assoc_items(w, did, what),\n@@ -2350,7 +2354,7 @@ fn render_impl(w: &mut fmt::Formatter, i: &Impl, link: AssocItemLink,\n                 try!(render_assoc_item(w, item, link));\n                 try!(write!(w, \"</code></h4>\\n\"));\n             }\n-            clean::TypedefItem(ref tydef) => {\n+            clean::TypedefItem(ref tydef, _) => {\n                 let name = item.name.as_ref().unwrap();\n                 try!(write!(w, \"<h4 id='assoc_type.{}' class='{}'><code>\",\n                             *name,"}, {"sha": "70b77f6760d8b24299a4ebdb8afcd3a05e538e7c", "filename": "src/test/rustdoc/search-index.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/093e18d18465364ef96495ab662fb4325595bead/src%2Ftest%2Frustdoc%2Fsearch-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/093e18d18465364ef96495ab662fb4325595bead/src%2Ftest%2Frustdoc%2Fsearch-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsearch-index.rs?ref=093e18d18465364ef96495ab662fb4325595bead", "patch": "@@ -10,6 +10,8 @@\n \n #![crate_name = \"rustdoc_test\"]\n \n+use std::ops::Deref;\n+\n // @has search-index.js Foo\n pub use private::Foo;\n \n@@ -24,3 +26,11 @@ mod private {\n         fn trait_method(&self) {} // @!has - priv_method\n     }\n }\n+\n+pub struct Bar;\n+\n+impl Deref for Bar {\n+    // @!has search-index.js Target\n+    type Target = Bar;\n+    fn deref(&self) -> &Bar { self }\n+}"}]}