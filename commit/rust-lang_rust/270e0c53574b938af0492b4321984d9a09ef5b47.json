{"sha": "270e0c53574b938af0492b4321984d9a09ef5b47", "node_id": "C_kwDOAAsO6NoAKDI3MGUwYzUzNTc0YjkzOGFmMDQ5MmI0MzIxOTg0ZDlhMDllZjViNDc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-28T05:06:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-28T05:06:42Z"}, "message": "Rollup merge of #103283 - nbarrios1337:unsafe-impl-suggestions, r=cjgillot\n\nAdd suggestions for unsafe impl error codes\n\nAdds suggestions for users to add `unsafe` to trait impls that should be `unsafe`, and remove `unsafe` from trait impls that do not require `unsafe`\n\nWith the folllowing code:\n\n```rust\nstruct Foo {}\n\nstruct Bar {}\n\ntrait Safe {}\n\nunsafe trait Unsafe {}\n\nimpl Safe for Foo {} // ok\n\nimpl Unsafe for Foo {} // E0200\n\nunsafe impl Safe for Bar {} // E0199\n\nunsafe impl Unsafe for Bar {} // ok\n\n// omitted empty main fn\n```\n\nThe current rustc output is:\n```\nerror[E0199]: implementing the trait `Safe` is not unsafe\n  --> e0200.rs:13:1\n   |\n13 | unsafe impl Safe for Bar {} // E0199\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0200]: the trait `Unsafe` requires an `unsafe impl` declaration\n  --> e0200.rs:11:1\n   |\n11 | impl Unsafe for Foo {} // E0200\n   | ^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0199, E0200.\nFor more information about an error, try `rustc --explain E0199`.\n```\n\nWith this PR, the future rustc output would be:\n```\nerror[E0199]: implementing the trait `Safe` is not unsafe\n  --> ../../temp/e0200.rs:13:1\n   |\n13 | unsafe impl Safe for Bar {} // E0199\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: remove `unsafe` from this trait implementation\n   |\n13 - unsafe impl Safe for Bar {} // E0199\n13 + impl Safe for Bar {} // E0199\n   |\n\nerror[E0200]: the trait `Unsafe` requires an `unsafe impl` declaration\n  --> ../../temp/e0200.rs:11:1\n   |\n11 | impl Unsafe for Foo {} // E0200\n   | ^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: the trait `Unsafe` enforces invariants that the compiler can't check. Review the trait documentation and make sure this implementation upholds those invariants before adding the `unsafe` keyword\nhelp: add `unsafe` to this trait implementation\n   |\n11 | unsafe impl Unsafe for Foo {} // E0200\n   | ++++++\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0199, E0200.\nFor more information about an error, try `rustc --explain E0199`.\n```\n\n``@rustbot`` label +T-compiler +A-diagnostics +A-suggestion-diagnostics", "tree": {"sha": "c383aa725ee76bd5f73072fe8c7e408643db3e6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c383aa725ee76bd5f73072fe8c7e408643db3e6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/270e0c53574b938af0492b4321984d9a09ef5b47", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjW2NiCRBK7hj4Ov3rIwAAidgIAFi0N/5zqiR5UUKPm2eIJiQK\nX6x42HE45OY3uzDLabijGBMtGZ2keYSJpNURc8bcy5gWZUX3pk+M/OyVn2rHJXaS\nfVi3TNlcr4JBJvuJ+bT2C8L9jcosKUl5CGroyMrxd8gqfNWYmlDYRVG0IicwjiJk\nrC4RsgNlKBJ9E7g0YUzGpXP4M6tKH6tjopBXaOzQtAZZhc6wcR5FLnPljSxsyWfU\nvJa1nXCtKtOkvbWqHT1sUjnBsZU22+SLAOsa8XS3GuynUuS5pvh5Ap5Qm8fp/t/E\nuvGE42FmyWb3bfegnr+ecAeYG2//HZGq9b4Z9ZuYtUG0vSdEDzyHHeRgToIkzio=\n=8Lf9\n-----END PGP SIGNATURE-----\n", "payload": "tree c383aa725ee76bd5f73072fe8c7e408643db3e6a\nparent c404092084c518d126f77c1369ab63e340ce693e\nparent 770538ef9b9a93038983ee5d82e07754c279df06\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1666933602 +0200\ncommitter GitHub <noreply@github.com> 1666933602 +0200\n\nRollup merge of #103283 - nbarrios1337:unsafe-impl-suggestions, r=cjgillot\n\nAdd suggestions for unsafe impl error codes\n\nAdds suggestions for users to add `unsafe` to trait impls that should be `unsafe`, and remove `unsafe` from trait impls that do not require `unsafe`\n\nWith the folllowing code:\n\n```rust\nstruct Foo {}\n\nstruct Bar {}\n\ntrait Safe {}\n\nunsafe trait Unsafe {}\n\nimpl Safe for Foo {} // ok\n\nimpl Unsafe for Foo {} // E0200\n\nunsafe impl Safe for Bar {} // E0199\n\nunsafe impl Unsafe for Bar {} // ok\n\n// omitted empty main fn\n```\n\nThe current rustc output is:\n```\nerror[E0199]: implementing the trait `Safe` is not unsafe\n  --> e0200.rs:13:1\n   |\n13 | unsafe impl Safe for Bar {} // E0199\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0200]: the trait `Unsafe` requires an `unsafe impl` declaration\n  --> e0200.rs:11:1\n   |\n11 | impl Unsafe for Foo {} // E0200\n   | ^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0199, E0200.\nFor more information about an error, try `rustc --explain E0199`.\n```\n\nWith this PR, the future rustc output would be:\n```\nerror[E0199]: implementing the trait `Safe` is not unsafe\n  --> ../../temp/e0200.rs:13:1\n   |\n13 | unsafe impl Safe for Bar {} // E0199\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\nhelp: remove `unsafe` from this trait implementation\n   |\n13 - unsafe impl Safe for Bar {} // E0199\n13 + impl Safe for Bar {} // E0199\n   |\n\nerror[E0200]: the trait `Unsafe` requires an `unsafe impl` declaration\n  --> ../../temp/e0200.rs:11:1\n   |\n11 | impl Unsafe for Foo {} // E0200\n   | ^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: the trait `Unsafe` enforces invariants that the compiler can't check. Review the trait documentation and make sure this implementation upholds those invariants before adding the `unsafe` keyword\nhelp: add `unsafe` to this trait implementation\n   |\n11 | unsafe impl Unsafe for Foo {} // E0200\n   | ++++++\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0199, E0200.\nFor more information about an error, try `rustc --explain E0199`.\n```\n\n``@rustbot`` label +T-compiler +A-diagnostics +A-suggestion-diagnostics\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/270e0c53574b938af0492b4321984d9a09ef5b47", "html_url": "https://github.com/rust-lang/rust/commit/270e0c53574b938af0492b4321984d9a09ef5b47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/270e0c53574b938af0492b4321984d9a09ef5b47/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c404092084c518d126f77c1369ab63e340ce693e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c404092084c518d126f77c1369ab63e340ce693e", "html_url": "https://github.com/rust-lang/rust/commit/c404092084c518d126f77c1369ab63e340ce693e"}, {"sha": "770538ef9b9a93038983ee5d82e07754c279df06", "url": "https://api.github.com/repos/rust-lang/rust/commits/770538ef9b9a93038983ee5d82e07754c279df06", "html_url": "https://github.com/rust-lang/rust/commit/770538ef9b9a93038983ee5d82e07754c279df06"}], "stats": {"total": 84, "additions": 84, "deletions": 0}, "files": [{"sha": "25b2ed76adf2c41acec2332b78a2f8e530789ef4", "filename": "compiler/rustc_hir_analysis/src/coherence/unsafety.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/270e0c53574b938af0492b4321984d9a09ef5b47/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270e0c53574b938af0492b4321984d9a09ef5b47/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Funsafety.rs?ref=270e0c53574b938af0492b4321984d9a09ef5b47", "patch": "@@ -26,6 +26,12 @@ pub(super) fn check_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n                     \"implementing the trait `{}` is not unsafe\",\n                     trait_ref.print_only_trait_path()\n                 )\n+                .span_suggestion_verbose(\n+                    item.span.with_hi(item.span.lo() + rustc_span::BytePos(7)),\n+                    \"remove `unsafe` from this trait implementation\",\n+                    \"\",\n+                    rustc_errors::Applicability::MachineApplicable,\n+                )\n                 .emit();\n             }\n \n@@ -37,6 +43,18 @@ pub(super) fn check_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n                     \"the trait `{}` requires an `unsafe impl` declaration\",\n                     trait_ref.print_only_trait_path()\n                 )\n+                .note(format!(\n+                    \"the trait `{}` enforces invariants that the compiler can't check. \\\n+                    Review the trait documentation and make sure this implementation \\\n+                    upholds those invariants before adding the `unsafe` keyword\",\n+                    trait_ref.print_only_trait_path()\n+                ))\n+                .span_suggestion_verbose(\n+                    item.span.shrink_to_lo(),\n+                    \"add `unsafe` to this trait implementation\",\n+                    \"unsafe \",\n+                    rustc_errors::Applicability::MaybeIncorrect,\n+                )\n                 .emit();\n             }\n \n@@ -48,6 +66,18 @@ pub(super) fn check_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n                     \"requires an `unsafe impl` declaration due to `#[{}]` attribute\",\n                     attr_name\n                 )\n+                .note(format!(\n+                    \"the trait `{}` enforces invariants that the compiler can't check. \\\n+                    Review the trait documentation and make sure this implementation \\\n+                    upholds those invariants before adding the `unsafe` keyword\",\n+                    trait_ref.print_only_trait_path()\n+                ))\n+                .span_suggestion_verbose(\n+                    item.span.shrink_to_lo(),\n+                    \"add `unsafe` to this trait implementation\",\n+                    \"unsafe \",\n+                    rustc_errors::Applicability::MaybeIncorrect,\n+                )\n                 .emit();\n             }\n "}, {"sha": "6320187827256a9224b66e2b2b2454d8ad4b1534", "filename": "src/test/ui/coherence/coherence-default-trait-impl.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/270e0c53574b938af0492b4321984d9a09ef5b47/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/270e0c53574b938af0492b4321984d9a09ef5b47/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.stderr?ref=270e0c53574b938af0492b4321984d9a09ef5b47", "patch": "@@ -3,12 +3,24 @@ error[E0199]: implementing the trait `MySafeTrait` is not unsafe\n    |\n LL | unsafe impl MySafeTrait for Foo {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: remove `unsafe` from this trait implementation\n+   |\n+LL - unsafe impl MySafeTrait for Foo {}\n+LL + impl MySafeTrait for Foo {}\n+   |\n \n error[E0200]: the trait `MyUnsafeTrait` requires an `unsafe impl` declaration\n   --> $DIR/coherence-default-trait-impl.rs:13:1\n    |\n LL | impl MyUnsafeTrait for Foo {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the trait `MyUnsafeTrait` enforces invariants that the compiler can't check. Review the trait documentation and make sure this implementation upholds those invariants before adding the `unsafe` keyword\n+help: add `unsafe` to this trait implementation\n+   |\n+LL | unsafe impl MyUnsafeTrait for Foo {}\n+   | ++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "82169ee01bedd7b76ede76f5bc29d0f5f8053391", "filename": "src/test/ui/dropck/dropck-eyepatch-implies-unsafe-impl.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/270e0c53574b938af0492b4321984d9a09ef5b47/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-implies-unsafe-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/270e0c53574b938af0492b4321984d9a09ef5b47/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-implies-unsafe-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-implies-unsafe-impl.stderr?ref=270e0c53574b938af0492b4321984d9a09ef5b47", "patch": "@@ -8,6 +8,12 @@ LL | |     // (unsafe to access self.1  due to #[may_dangle] on A)\n LL | |     fn drop(&mut self) { println!(\"drop {} {:?}\", self.0, self.2); }\n LL | | }\n    | |_^\n+   |\n+   = note: the trait `Drop` enforces invariants that the compiler can't check. Review the trait documentation and make sure this implementation upholds those invariants before adding the `unsafe` keyword\n+help: add `unsafe` to this trait implementation\n+   |\n+LL | unsafe impl<#[may_dangle] A, B: fmt::Debug> Drop for Pt<A, B> {\n+   | ++++++\n \n error[E0569]: requires an `unsafe impl` declaration due to `#[may_dangle]` attribute\n   --> $DIR/dropck-eyepatch-implies-unsafe-impl.rs:27:1\n@@ -19,6 +25,12 @@ LL | |     // (unsafe to access self.1 due to #[may_dangle] on 'a)\n LL | |     fn drop(&mut self) { println!(\"drop {} {:?}\", self.0, self.2); }\n LL | | }\n    | |_^\n+   |\n+   = note: the trait `Drop` enforces invariants that the compiler can't check. Review the trait documentation and make sure this implementation upholds those invariants before adding the `unsafe` keyword\n+help: add `unsafe` to this trait implementation\n+   |\n+LL | unsafe impl<#[may_dangle] 'a, 'b, B: fmt::Debug> Drop for Pr<'a, 'b, B> {\n+   | ++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "99d808c0d4b1e115947acdbf76c2e9f55f23b19c", "filename": "src/test/ui/error-codes/E0199.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/270e0c53574b938af0492b4321984d9a09ef5b47/src%2Ftest%2Fui%2Ferror-codes%2FE0199.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/270e0c53574b938af0492b4321984d9a09ef5b47/src%2Ftest%2Fui%2Ferror-codes%2FE0199.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0199.stderr?ref=270e0c53574b938af0492b4321984d9a09ef5b47", "patch": "@@ -3,6 +3,12 @@ error[E0199]: implementing the trait `Bar` is not unsafe\n    |\n LL | unsafe impl Bar for Foo { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: remove `unsafe` from this trait implementation\n+   |\n+LL - unsafe impl Bar for Foo { }\n+LL + impl Bar for Foo { }\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "1fd86aecee177a787d507289349ce8a10106d9b5", "filename": "src/test/ui/error-codes/E0200.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/270e0c53574b938af0492b4321984d9a09ef5b47/src%2Ftest%2Fui%2Ferror-codes%2FE0200.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/270e0c53574b938af0492b4321984d9a09ef5b47/src%2Ftest%2Fui%2Ferror-codes%2FE0200.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0200.stderr?ref=270e0c53574b938af0492b4321984d9a09ef5b47", "patch": "@@ -3,6 +3,12 @@ error[E0200]: the trait `Bar` requires an `unsafe impl` declaration\n    |\n LL | impl Bar for Foo { }\n    | ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the trait `Bar` enforces invariants that the compiler can't check. Review the trait documentation and make sure this implementation upholds those invariants before adding the `unsafe` keyword\n+help: add `unsafe` to this trait implementation\n+   |\n+LL | unsafe impl Bar for Foo { }\n+   | ++++++\n \n error: aborting due to previous error\n "}, {"sha": "0b1fb30478ff682667923f9791e7276a949f1e31", "filename": "src/test/ui/traits/safety-trait-impl-cc.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/270e0c53574b938af0492b4321984d9a09ef5b47/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl-cc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/270e0c53574b938af0492b4321984d9a09ef5b47/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl-cc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl-cc.stderr?ref=270e0c53574b938af0492b4321984d9a09ef5b47", "patch": "@@ -7,6 +7,12 @@ LL | |         panic!();\n LL | |     }\n LL | | }\n    | |_^\n+   |\n+   = note: the trait `Foo` enforces invariants that the compiler can't check. Review the trait documentation and make sure this implementation upholds those invariants before adding the `unsafe` keyword\n+help: add `unsafe` to this trait implementation\n+   |\n+LL | unsafe impl lib::Foo for Bar {\n+   | ++++++\n \n error: aborting due to previous error\n "}, {"sha": "721e2b48b954fa3db2194291f8a1b43069260434", "filename": "src/test/ui/traits/safety-trait-impl.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/270e0c53574b938af0492b4321984d9a09ef5b47/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/270e0c53574b938af0492b4321984d9a09ef5b47/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsafety-trait-impl.stderr?ref=270e0c53574b938af0492b4321984d9a09ef5b47", "patch": "@@ -3,12 +3,24 @@ error[E0200]: the trait `UnsafeTrait` requires an `unsafe impl` declaration\n    |\n LL | impl UnsafeTrait for u16 { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the trait `UnsafeTrait` enforces invariants that the compiler can't check. Review the trait documentation and make sure this implementation upholds those invariants before adding the `unsafe` keyword\n+help: add `unsafe` to this trait implementation\n+   |\n+LL | unsafe impl UnsafeTrait for u16 { }\n+   | ++++++\n \n error[E0199]: implementing the trait `SafeTrait` is not unsafe\n   --> $DIR/safety-trait-impl.rs:16:1\n    |\n LL | unsafe impl SafeTrait for u32 { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: remove `unsafe` from this trait implementation\n+   |\n+LL - unsafe impl SafeTrait for u32 { }\n+LL + impl SafeTrait for u32 { }\n+   |\n \n error: aborting due to 2 previous errors\n "}]}