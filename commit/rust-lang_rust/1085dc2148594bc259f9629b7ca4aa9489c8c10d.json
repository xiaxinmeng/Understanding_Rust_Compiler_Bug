{"sha": "1085dc2148594bc259f9629b7ca4aa9489c8c10d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwODVkYzIxNDg1OTRiYzI1OWY5NjI5YjdjYTRhYTk0ODljOGMxMGQ=", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-08-31T03:53:57Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-09-12T20:27:11Z"}, "message": "Rename `is_generic()` to `is_assoc_ty()`\n\nThe new name is more accurate than the previous one.", "tree": {"sha": "0d262a86985be530ee60732bf6e04b7007bd832f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d262a86985be530ee60732bf6e04b7007bd832f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1085dc2148594bc259f9629b7ca4aa9489c8c10d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1085dc2148594bc259f9629b7ca4aa9489c8c10d", "html_url": "https://github.com/rust-lang/rust/commit/1085dc2148594bc259f9629b7ca4aa9489c8c10d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1085dc2148594bc259f9629b7ca4aa9489c8c10d/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07d6454a0fe1f34096a5c20d3f59d8c20e8a0823", "url": "https://api.github.com/repos/rust-lang/rust/commits/07d6454a0fe1f34096a5c20d3f59d8c20e8a0823", "html_url": "https://github.com/rust-lang/rust/commit/07d6454a0fe1f34096a5c20d3f59d8c20e8a0823"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "0139c4e879a70c31889baecbfb4e7632c4c01e0c", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1085dc2148594bc259f9629b7ca4aa9489c8c10d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1085dc2148594bc259f9629b7ca4aa9489c8c10d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=1085dc2148594bc259f9629b7ca4aa9489c8c10d", "patch": "@@ -1498,9 +1498,9 @@ impl Type {\n         }\n     }\n \n-    crate fn is_generic(&self) -> bool {\n+    crate fn is_assoc_ty(&self) -> bool {\n         match self {\n-            ResolvedPath { path, .. } => path.is_generic(),\n+            ResolvedPath { path, .. } => path.is_assoc_ty(),\n             _ => false,\n         }\n     }\n@@ -1990,7 +1990,7 @@ impl Path {\n             + &self.segments.iter().map(|s| s.name.to_string()).collect::<Vec<_>>().join(\"::\")\n     }\n \n-    crate fn is_generic(&self) -> bool {\n+    crate fn is_assoc_ty(&self) -> bool {\n         match self.res {\n             Res::SelfTy(..) if self.segments.len() != 1 => true,\n             Res::Def(DefKind::TyParam, _) if self.segments.len() != 1 => true,"}, {"sha": "d11781581a8df6c61daa151e3d22eb257bd1899f", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1085dc2148594bc259f9629b7ca4aa9489c8c10d/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1085dc2148594bc259f9629b7ca4aa9489c8c10d/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=1085dc2148594bc259f9629b7ca4aa9489c8c10d", "patch": "@@ -754,7 +754,7 @@ fn fmt_type<'cx>(\n         clean::Generic(name) => write!(f, \"{}\", name),\n         clean::ResolvedPath { did, ref path } => {\n             // Paths like `T::Output` and `Self::Output` should be rendered with all segments.\n-            resolved_path(f, did, path, path.is_generic(), use_absolute, cx)\n+            resolved_path(f, did, path, path.is_assoc_ty(), use_absolute, cx)\n         }\n         clean::DynTrait(ref bounds, ref lt) => {\n             f.write_str(\"dyn \")?;\n@@ -826,7 +826,7 @@ fn fmt_type<'cx>(\n                 hir::Mutability::Not => \"const\",\n             };\n \n-            if matches!(**t, clean::Generic(_)) || t.is_generic() {\n+            if matches!(**t, clean::Generic(_)) || t.is_assoc_ty() {\n                 let text = if f.alternate() {\n                     format!(\"*{} {:#}\", m, t.print(cx))\n                 } else {"}, {"sha": "1906a7bc3f31f4cb8d0f255fdb684dcdcdad4972", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1085dc2148594bc259f9629b7ca4aa9489c8c10d/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1085dc2148594bc259f9629b7ca4aa9489c8c10d/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=1085dc2148594bc259f9629b7ca4aa9489c8c10d", "patch": "@@ -715,7 +715,7 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n                 clean::ResolvedPath { ref path, did, .. }\n                 | clean::BorrowedRef {\n                     type_: box clean::ResolvedPath { ref path, did, .. }, ..\n-                } if !path.is_generic() => {\n+                } if !path.is_assoc_ty() => {\n                     let &mut (prev_did, ref mut has_duplicates) =\n                         implementor_dups.entry(path.last()).or_insert((did, false));\n                     if prev_did != did {\n@@ -1411,7 +1411,7 @@ fn render_implementor(\n     let use_absolute = match implementor.inner_impl().for_ {\n         clean::ResolvedPath { ref path, .. }\n         | clean::BorrowedRef { type_: box clean::ResolvedPath { ref path, .. }, .. }\n-            if !path.is_generic() =>\n+            if !path.is_assoc_ty() =>\n         {\n             implementor_dups[&path.last()].1\n         }"}, {"sha": "90300dbd16b136261991b283abfeda085b8f6578", "filename": "src/librustdoc/passes/stripper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1085dc2148594bc259f9629b7ca4aa9489c8c10d/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1085dc2148594bc259f9629b7ca4aa9489c8c10d/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=1085dc2148594bc259f9629b7ca4aa9489c8c10d", "patch": "@@ -128,7 +128,7 @@ impl<'a> DocFolder for ImplStripper<'a> {\n                 return None;\n             }\n             if let Some(did) = imp.for_.def_id() {\n-                if did.is_local() && !imp.for_.is_generic() && !self.retained.contains(&did.into())\n+                if did.is_local() && !imp.for_.is_assoc_ty() && !self.retained.contains(&did.into())\n                 {\n                     debug!(\"ImplStripper: impl item for stripped type; removing\");\n                     return None;"}]}