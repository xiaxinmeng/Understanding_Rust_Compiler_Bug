{"sha": "d6a18b6baf40b48abce2de5747d187a7bbad293d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2YTE4YjZiYWY0MGI0OGFiY2UyZGU1NzQ3ZDE4N2E3YmJhZDI5M2Q=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-25T04:18:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-25T04:18:09Z"}, "message": "Rollup merge of #65742 - Centril:gate-pre-expansion-subset, r=davidtwco\n\nPre-expansion gate most of the things\n\nThis is a subset of https://github.com/rust-lang/rust/pull/64672. A crater run has already been done and this PR implements conclusions according to https://github.com/rust-lang/rust/pull/64672#issuecomment-542703363.\n\nr? @davidtwco\ncc @petrochenkov", "tree": {"sha": "c633afa2e2d4a69ce731623362fad60a23e526bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c633afa2e2d4a69ce731623362fad60a23e526bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6a18b6baf40b48abce2de5747d187a7bbad293d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdsneCCRBK7hj4Ov3rIwAAdHIIACpfO0tQEgzakAFYr1WtbGao\n07DfxxpHjojxgzNzqio7oRN2VVIwBqyX/5Bffhc5otqtM+j2ImaCmw/HgH7Bf/Kg\nlaBJIVfCr7CsSpWppr8DNmZkzcSLVMUFiCjZd8buzcYYJ/l/FsKgm/WqX1fKqZll\nP9CrxlcCdxK/juuZt3rt0NQB1MWUIKSBEEXHEO416WX4C1zYyjAxSXok3QRsAiOt\n18/0Sb1ErAasWl29jcRBVEb8znpDRbnURNa69SkihQjttQbNtRrO4Ptui/Zab3G8\nc24a9vFqD9rGwPrNHZuMpNYbK3WVLjjwmne5wNwb7QgGx/z+6b0EzNKW0DDAb1c=\n=tGz1\n-----END PGP SIGNATURE-----\n", "payload": "tree c633afa2e2d4a69ce731623362fad60a23e526bb\nparent fb602c7e4f5f01203c63e9c6939efa8c8f7c962a\nparent 15a6c09b6e8a977f2c6f5a73de01a20d00b37930\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1571977089 +0200\ncommitter GitHub <noreply@github.com> 1571977089 +0200\n\nRollup merge of #65742 - Centril:gate-pre-expansion-subset, r=davidtwco\n\nPre-expansion gate most of the things\n\nThis is a subset of https://github.com/rust-lang/rust/pull/64672. A crater run has already been done and this PR implements conclusions according to https://github.com/rust-lang/rust/pull/64672#issuecomment-542703363.\n\nr? @davidtwco\ncc @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6a18b6baf40b48abce2de5747d187a7bbad293d", "html_url": "https://github.com/rust-lang/rust/commit/d6a18b6baf40b48abce2de5747d187a7bbad293d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6a18b6baf40b48abce2de5747d187a7bbad293d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb602c7e4f5f01203c63e9c6939efa8c8f7c962a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb602c7e4f5f01203c63e9c6939efa8c8f7c962a", "html_url": "https://github.com/rust-lang/rust/commit/fb602c7e4f5f01203c63e9c6939efa8c8f7c962a"}, {"sha": "15a6c09b6e8a977f2c6f5a73de01a20d00b37930", "url": "https://api.github.com/repos/rust-lang/rust/commits/15a6c09b6e8a977f2c6f5a73de01a20d00b37930", "html_url": "https://github.com/rust-lang/rust/commit/15a6c09b6e8a977f2c6f5a73de01a20d00b37930"}], "stats": {"total": 477, "additions": 295, "deletions": 182}, "files": [{"sha": "2894cd1c1f685e7de1e34b7639fce595104c99e8", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -220,7 +220,7 @@\n \n #![cfg_attr(test, feature(print_internals, set_stdio, update_panic_count))]\n #![cfg_attr(all(target_vendor = \"fortanix\", target_env = \"sgx\"),\n-            feature(slice_index_methods, decl_macro, coerce_unsized,\n+            feature(slice_index_methods, coerce_unsized,\n                     sgx_platform, ptr_wrapping_offset_from))]\n #![cfg_attr(all(test, target_vendor = \"fortanix\", target_env = \"sgx\"),\n             feature(fixed_size_array, maybe_uninit_extra))]\n@@ -251,6 +251,7 @@\n #![feature(container_error_extra)]\n #![feature(core_intrinsics)]\n #![feature(custom_test_frameworks)]\n+#![feature(decl_macro)]\n #![feature(doc_alias)]\n #![feature(doc_cfg)]\n #![feature(doc_keyword)]"}, {"sha": "502b1c0f7437157eb90be023383a9fd5b05e4ddb", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 39, "deletions": 111, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -3,12 +3,8 @@ use super::accepted::ACCEPTED_FEATURES;\n use super::removed::{REMOVED_FEATURES, STABLE_REMOVED_FEATURES};\n use super::builtin_attrs::{AttributeGate, BUILTIN_ATTRIBUTE_MAP};\n \n-use crate::ast::{\n-    self, AssocTyConstraint, AssocTyConstraintKind, NodeId, GenericParam, GenericParamKind,\n-    PatKind, RangeEnd, VariantData,\n-};\n+use crate::ast::{self, NodeId, PatKind, VariantData};\n use crate::attr::{self, check_builtin_attribute};\n-use crate::source_map::Spanned;\n use crate::edition::{ALL_EDITIONS, Edition};\n use crate::visit::{self, FnKind, Visitor};\n use crate::parse::token;\n@@ -157,9 +153,6 @@ fn leveled_feature_err<'a, S: Into<MultiSpan>>(\n \n }\n \n-const EXPLAIN_BOX_SYNTAX: &str =\n-    \"box expression syntax is experimental; you can call `Box::new` instead\";\n-\n pub const EXPLAIN_STMT_ATTR_SYNTAX: &str =\n     \"attributes on expressions are experimental\";\n \n@@ -291,6 +284,25 @@ impl<'a> PostExpansionVisitor<'a> {\n             err.emit();\n         }\n     }\n+\n+    fn check_gat(&self, generics: &ast::Generics, span: Span) {\n+        if !generics.params.is_empty() {\n+            gate_feature_post!(\n+                &self,\n+                generic_associated_types,\n+                span,\n+                \"generic associated types are unstable\"\n+            );\n+        }\n+        if !generics.where_clause.predicates.is_empty() {\n+            gate_feature_post!(\n+                &self,\n+                generic_associated_types,\n+                span,\n+                \"where clauses on associated types are unstable\"\n+            );\n+        }\n+    }\n }\n \n impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n@@ -423,20 +435,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                    \"auto traits are experimental and possibly buggy\");\n             }\n \n-            ast::ItemKind::TraitAlias(..) => {\n-                gate_feature_post!(\n-                    &self,\n-                    trait_alias,\n-                    i.span,\n-                    \"trait aliases are experimental\"\n-                );\n-            }\n-\n-            ast::ItemKind::MacroDef(ast::MacroDef { legacy: false, .. }) => {\n-                let msg = \"`macro` is experimental\";\n-                gate_feature_post!(&self, decl_macro, i.span, msg);\n-            }\n-\n             ast::ItemKind::OpaqueTy(..) => {\n                 gate_feature_post!(\n                     &self,\n@@ -500,37 +498,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         }\n     }\n \n-    fn visit_expr(&mut self, e: &'a ast::Expr) {\n-        match e.kind {\n-            ast::ExprKind::Box(_) => {\n-                gate_feature_post!(&self, box_syntax, e.span, EXPLAIN_BOX_SYNTAX);\n-            }\n-            ast::ExprKind::Type(..) => {\n-                // To avoid noise about type ascription in common syntax errors, only emit if it\n-                // is the *only* error.\n-                if self.parse_sess.span_diagnostic.err_count() == 0 {\n-                    gate_feature_post!(&self, type_ascription, e.span,\n-                                       \"type ascription is experimental\");\n-                }\n-            }\n-            ast::ExprKind::TryBlock(_) => {\n-                gate_feature_post!(&self, try_blocks, e.span, \"`try` expression is experimental\");\n-            }\n-            ast::ExprKind::Block(_, opt_label) => {\n-                if let Some(label) = opt_label {\n-                    gate_feature_post!(&self, label_break_value, label.ident.span,\n-                                    \"labels on blocks are unstable\");\n-                }\n-            }\n-            _ => {}\n-        }\n-        visit::walk_expr(self, e)\n-    }\n-\n-    fn visit_arm(&mut self, arm: &'a ast::Arm) {\n-        visit::walk_arm(self, arm)\n-    }\n-\n     fn visit_pat(&mut self, pattern: &'a ast::Pat) {\n         match &pattern.kind {\n             PatKind::Slice(pats) => {\n@@ -550,25 +517,12 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     }\n                 }\n             }\n-            PatKind::Box(..) => {\n-                gate_feature_post!(&self, box_patterns,\n-                                  pattern.span,\n-                                  \"box pattern syntax is experimental\");\n-            }\n-            PatKind::Range(_, _, Spanned { node: RangeEnd::Excluded, .. }) => {\n-                gate_feature_post!(&self, exclusive_range_pattern, pattern.span,\n-                                   \"exclusive range pattern syntax is experimental\");\n-            }\n             _ => {}\n         }\n         visit::walk_pat(self, pattern)\n     }\n \n-    fn visit_fn(&mut self,\n-                fn_kind: FnKind<'a>,\n-                fn_decl: &'a ast::FnDecl,\n-                span: Span,\n-                _node_id: NodeId) {\n+    fn visit_fn(&mut self, fn_kind: FnKind<'a>, fn_decl: &'a ast::FnDecl, span: Span, _: NodeId) {\n         if let Some(header) = fn_kind.header() {\n             // Stability of const fn methods are covered in\n             // `visit_trait_item` and `visit_impl_item` below; this is\n@@ -583,26 +537,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         visit::walk_fn(self, fn_kind, fn_decl, span)\n     }\n \n-    fn visit_generic_param(&mut self, param: &'a GenericParam) {\n-        match param.kind {\n-            GenericParamKind::Const { .. } =>\n-                gate_feature_post!(&self, const_generics, param.ident.span,\n-                    \"const generics are unstable\"),\n-            _ => {}\n-        }\n-        visit::walk_generic_param(self, param)\n-    }\n-\n-    fn visit_assoc_ty_constraint(&mut self, constraint: &'a AssocTyConstraint) {\n-        match constraint.kind {\n-            AssocTyConstraintKind::Bound { .. } =>\n-                gate_feature_post!(&self, associated_type_bounds, constraint.span,\n-                    \"associated type bounds are unstable\"),\n-            _ => {}\n-        }\n-        visit::walk_assoc_ty_constraint(self, constraint)\n-    }\n-\n     fn visit_trait_item(&mut self, ti: &'a ast::TraitItem) {\n         match ti.kind {\n             ast::TraitItemKind::Method(ref sig, ref block) => {\n@@ -624,14 +558,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     gate_feature_post!(&self, associated_type_defaults, ti.span,\n                                        \"associated type defaults are unstable\");\n                 }\n-                if !ti.generics.params.is_empty() {\n-                    gate_feature_post!(&self, generic_associated_types, ti.span,\n-                                       \"generic associated types are unstable\");\n-                }\n-                if !ti.generics.where_clause.predicates.is_empty() {\n-                    gate_feature_post!(&self, generic_associated_types, ti.span,\n-                                       \"where clauses on associated types are unstable\");\n-                }\n+                self.check_gat(&ti.generics, ti.span);\n             }\n             _ => {}\n         }\n@@ -661,27 +588,12 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 );\n             }\n             ast::ImplItemKind::TyAlias(_) => {\n-                if !ii.generics.params.is_empty() {\n-                    gate_feature_post!(&self, generic_associated_types, ii.span,\n-                                       \"generic associated types are unstable\");\n-                }\n-                if !ii.generics.where_clause.predicates.is_empty() {\n-                    gate_feature_post!(&self, generic_associated_types, ii.span,\n-                                       \"where clauses on associated types are unstable\");\n-                }\n+                self.check_gat(&ii.generics, ii.span);\n             }\n             _ => {}\n         }\n         visit::walk_impl_item(self, ii)\n     }\n-\n-    fn visit_vis(&mut self, vis: &'a ast::Visibility) {\n-        if let ast::VisibilityKind::Crate(ast::CrateSugar::JustCrate) = vis.node {\n-            gate_feature_post!(&self, crate_visibility_modifier, vis.span,\n-                               \"`crate` visibility modifier is experimental\");\n-        }\n-        visit::walk_vis(self, vis)\n-    }\n }\n \n pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n@@ -867,6 +779,22 @@ pub fn check_crate(krate: &ast::Crate,\n     gate_all!(yields, generators, \"yield syntax is experimental\");\n     gate_all!(or_patterns, \"or-patterns syntax is experimental\");\n     gate_all!(const_extern_fn, \"`const extern fn` definitions are unstable\");\n+    gate_all!(trait_alias, \"trait aliases are experimental\");\n+    gate_all!(associated_type_bounds, \"associated type bounds are unstable\");\n+    gate_all!(crate_visibility_modifier, \"`crate` visibility modifier is experimental\");\n+    gate_all!(const_generics, \"const generics are unstable\");\n+    gate_all!(decl_macro, \"`macro` is experimental\");\n+    gate_all!(box_patterns, \"box pattern syntax is experimental\");\n+    gate_all!(exclusive_range_pattern, \"exclusive range pattern syntax is experimental\");\n+    gate_all!(try_blocks, \"`try` blocks are unstable\");\n+    gate_all!(label_break_value, \"labels on blocks are unstable\");\n+    gate_all!(box_syntax, \"box expression syntax is experimental; you can call `Box::new` instead\");\n+\n+    // To avoid noise about type ascription in common syntax errors,\n+    // only emit if it is the *only* error. (Also check it last.)\n+    if parse_sess.span_diagnostic.err_count() == 0 {\n+        gate_all!(type_ascription, \"type ascription is experimental\");\n+    }\n \n     visit::walk_crate(&mut visitor, krate);\n }"}, {"sha": "f25224d1e36f5d2ab0b949c9df840aee578ab14c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -1122,6 +1122,7 @@ impl<'a> Parser<'a> {\n         self.expected_tokens.push(TokenType::Keyword(kw::Crate));\n         if self.is_crate_vis() {\n             self.bump(); // `crate`\n+            self.sess.gated_spans.crate_visibility_modifier.borrow_mut().push(self.prev_span);\n             return Ok(respan(self.prev_span, VisibilityKind::Crate(CrateSugar::JustCrate)));\n         }\n "}, {"sha": "97b1092452aafa22214905be4e5ec47852579274", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -252,6 +252,7 @@ impl<'a> Parser<'a> {\n                 self.last_type_ascription = Some((self.prev_span, maybe_path));\n \n                 lhs = self.parse_assoc_op_cast(lhs, lhs_span, ExprKind::Type)?;\n+                self.sess.gated_spans.type_ascription.borrow_mut().push(lhs.span);\n                 continue\n             } else if op == AssocOp::DotDot || op == AssocOp::DotDotEq {\n                 // If we didn\u2019t have to handle `x..`/`x..=`, it would be pretty easy to\n@@ -453,7 +454,9 @@ impl<'a> Parser<'a> {\n                 self.bump();\n                 let e = self.parse_prefix_expr(None);\n                 let (span, e) = self.interpolated_or_expr_span(e)?;\n-                (lo.to(span), ExprKind::Box(e))\n+                let span = lo.to(span);\n+                self.sess.gated_spans.box_syntax.borrow_mut().push(span);\n+                (span, ExprKind::Box(e))\n             }\n             token::Ident(..) if self.token.is_ident_named(sym::not) => {\n                 // `not` is just an ordinary identifier in Rust-the-language,\n@@ -1260,6 +1263,10 @@ impl<'a> Parser<'a> {\n         blk_mode: BlockCheckMode,\n         outer_attrs: ThinVec<Attribute>,\n     ) -> PResult<'a, P<Expr>> {\n+        if let Some(label) = opt_label {\n+            self.sess.gated_spans.label_break_value.borrow_mut().push(label.ident.span);\n+        }\n+\n         self.expect(&token::OpenDelim(token::Brace))?;\n \n         let mut attrs = outer_attrs;\n@@ -1646,7 +1653,9 @@ impl<'a> Parser<'a> {\n             error.emit();\n             Err(error)\n         } else {\n-            Ok(self.mk_expr(span_lo.to(body.span), ExprKind::TryBlock(body), attrs))\n+            let span = span_lo.to(body.span);\n+            self.sess.gated_spans.try_blocks.borrow_mut().push(span);\n+            Ok(self.mk_expr(span, ExprKind::TryBlock(body), attrs))\n         }\n     }\n "}, {"sha": "51caae69c86a4e4b60a7639f3ee9a9a466227742", "filename": "src/libsyntax/parse/parser/generics.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Flibsyntax%2Fparse%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Flibsyntax%2Fparse%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fgenerics.rs?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -55,11 +55,15 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_const_param(&mut self, preceding_attrs: Vec<Attribute>) -> PResult<'a, GenericParam> {\n+        let lo = self.token.span;\n+\n         self.expect_keyword(kw::Const)?;\n         let ident = self.parse_ident()?;\n         self.expect(&token::Colon)?;\n         let ty = self.parse_ty()?;\n \n+        self.sess.gated_spans.const_generics.borrow_mut().push(lo.to(self.prev_span));\n+\n         Ok(GenericParam {\n             ident,\n             id: ast::DUMMY_NODE_ID,"}, {"sha": "95bddb5afdd08dcd76ddbdf69b2dea16e17758cb", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -211,7 +211,7 @@ impl<'a> Parser<'a> {\n         {\n             // UNSAFE TRAIT ITEM\n             self.bump(); // `unsafe`\n-            let info = self.parse_item_trait(Unsafety::Unsafe)?;\n+            let info = self.parse_item_trait(lo, Unsafety::Unsafe)?;\n             return self.mk_item_with_info(attrs, lo, vis, info);\n         }\n \n@@ -289,7 +289,7 @@ impl<'a> Parser<'a> {\n                 && self.is_keyword_ahead(1, &[kw::Trait]))\n         {\n             // TRAIT ITEM\n-            let info = self.parse_item_trait(Unsafety::Normal)?;\n+            let info = self.parse_item_trait(lo, Unsafety::Normal)?;\n             return self.mk_item_with_info(attrs, lo, vis, info);\n         }\n \n@@ -780,7 +780,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses `auto? trait Foo { ... }` or `trait Foo = Bar;`.\n-    fn parse_item_trait(&mut self, unsafety: Unsafety) -> PResult<'a, ItemInfo> {\n+    fn parse_item_trait(&mut self, lo: Span, unsafety: Unsafety) -> PResult<'a, ItemInfo> {\n         // Parse optional `auto` prefix.\n         let is_auto = if self.eat_keyword(kw::Auto) {\n             IsAuto::Yes\n@@ -793,29 +793,43 @@ impl<'a> Parser<'a> {\n         let mut tps = self.parse_generics()?;\n \n         // Parse optional colon and supertrait bounds.\n-        let bounds = if self.eat(&token::Colon) {\n+        let had_colon = self.eat(&token::Colon);\n+        let span_at_colon = self.prev_span;\n+        let bounds = if had_colon {\n             self.parse_generic_bounds(Some(self.prev_span))?\n         } else {\n             Vec::new()\n         };\n \n+        let span_before_eq = self.prev_span;\n         if self.eat(&token::Eq) {\n             // It's a trait alias.\n+            if had_colon {\n+                let span = span_at_colon.to(span_before_eq);\n+                self.struct_span_err(span, \"bounds are not allowed on trait aliases\")\n+                    .emit();\n+            }\n+\n             let bounds = self.parse_generic_bounds(None)?;\n             tps.where_clause = self.parse_where_clause()?;\n             self.expect(&token::Semi)?;\n+\n+            let whole_span = lo.to(self.prev_span);\n             if is_auto == IsAuto::Yes {\n                 let msg = \"trait aliases cannot be `auto`\";\n-                self.struct_span_err(self.prev_span, msg)\n-                    .span_label(self.prev_span, msg)\n+                self.struct_span_err(whole_span, msg)\n+                    .span_label(whole_span, msg)\n                     .emit();\n             }\n             if unsafety != Unsafety::Normal {\n                 let msg = \"trait aliases cannot be `unsafe`\";\n-                self.struct_span_err(self.prev_span, msg)\n-                    .span_label(self.prev_span, msg)\n+                self.struct_span_err(whole_span, msg)\n+                    .span_label(whole_span, msg)\n                     .emit();\n             }\n+\n+            self.sess.gated_spans.trait_alias.borrow_mut().push(whole_span);\n+\n             Ok((ident, ItemKind::TraitAlias(tps, bounds), None))\n         } else {\n             // It's a normal trait.\n@@ -1692,6 +1706,11 @@ impl<'a> Parser<'a> {\n         };\n \n         let span = lo.to(self.prev_span);\n+\n+        if !def.legacy {\n+            self.sess.gated_spans.decl_macro.borrow_mut().push(span);\n+        }\n+\n         Ok(Some(self.mk_item(span, ident, ItemKind::MacroDef(def), vis.clone(), attrs.to_vec())))\n     }\n "}, {"sha": "969d5dd8374805668d010553aa47cccd627101d7", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -324,7 +324,9 @@ impl<'a> Parser<'a> {\n                 self.parse_pat_ident(BindingMode::ByRef(mutbl))?\n             } else if self.eat_keyword(kw::Box) {\n                 // Parse `box pat`\n-                PatKind::Box(self.parse_pat_with_range_pat(false, None)?)\n+                let pat = self.parse_pat_with_range_pat(false, None)?;\n+                self.sess.gated_spans.box_patterns.borrow_mut().push(lo.to(self.prev_span));\n+                PatKind::Box(pat)\n             } else if self.can_be_ident_pat() {\n                 // Parse `ident @ pat`\n                 // This can give false positives and parse nullary enums,\n@@ -609,6 +611,11 @@ impl<'a> Parser<'a> {\n         Ok(PatKind::Mac(mac))\n     }\n \n+    fn excluded_range_end(&self, span: Span) -> RangeEnd {\n+        self.sess.gated_spans.exclusive_range_pattern.borrow_mut().push(span);\n+        RangeEnd::Excluded\n+    }\n+\n     /// Parse a range pattern `$path $form $end?` where `$form = \"..\" | \"...\" | \"..=\" ;`.\n     /// The `$path` has already been parsed and the next token is the `$form`.\n     fn parse_pat_range_starting_with_path(\n@@ -618,7 +625,7 @@ impl<'a> Parser<'a> {\n         path: Path\n     ) -> PResult<'a, PatKind> {\n         let (end_kind, form) = match self.token.kind {\n-            token::DotDot => (RangeEnd::Excluded, \"..\"),\n+            token::DotDot => (self.excluded_range_end(self.token.span), \"..\"),\n             token::DotDotDot => (RangeEnd::Included(RangeSyntax::DotDotDot), \"...\"),\n             token::DotDotEq => (RangeEnd::Included(RangeSyntax::DotDotEq), \"..=\"),\n             _ => panic!(\"can only parse `..`/`...`/`..=` for ranges (checked above)\"),\n@@ -641,7 +648,7 @@ impl<'a> Parser<'a> {\n         } else if self.eat(&token::DotDotEq) {\n             (RangeEnd::Included(RangeSyntax::DotDotEq), \"..=\")\n         } else if self.eat(&token::DotDot) {\n-            (RangeEnd::Excluded, \"..\")\n+            (self.excluded_range_end(op_span), \"..\")\n         } else {\n             panic!(\"impossible case: we already matched on a range-operator token\")\n         };"}, {"sha": "77709a2295339fb5ac5765852f451004090fac45", "filename": "src/libsyntax/parse/parser/path.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -404,8 +404,9 @@ impl<'a> Parser<'a> {\n                 // Parse lifetime argument.\n                 args.push(GenericArg::Lifetime(self.expect_lifetime()));\n                 misplaced_assoc_ty_constraints.append(&mut assoc_ty_constraints);\n-            } else if self.check_ident() && self.look_ahead(1,\n-                    |t| t == &token::Eq || t == &token::Colon) {\n+            } else if self.check_ident()\n+                && self.look_ahead(1, |t| t == &token::Eq || t == &token::Colon)\n+            {\n                 // Parse associated type constraint.\n                 let lo = self.token.span;\n                 let ident = self.parse_ident()?;\n@@ -420,7 +421,14 @@ impl<'a> Parser<'a> {\n                 } else {\n                     unreachable!();\n                 };\n+\n                 let span = lo.to(self.prev_span);\n+\n+                // Gate associated type bounds, e.g., `Iterator<Item: Ord>`.\n+                if let AssocTyConstraintKind::Bound { .. } = kind {\n+                    self.sess.gated_spans.associated_type_bounds.borrow_mut().push(span);\n+                }\n+\n                 constraints.push(AssocTyConstraint {\n                     id: ast::DUMMY_NODE_ID,\n                     ident,"}, {"sha": "28a0868d5dd1ea055edb880b444e326de0019205", "filename": "src/libsyntax/sess.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Flibsyntax%2Fsess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Flibsyntax%2Fsess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsess.rs?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -30,6 +30,28 @@ crate struct GatedSpans {\n     crate or_patterns: Lock<Vec<Span>>,\n     /// Spans collected for gating `const_extern_fn`, e.g. `const extern fn foo`.\n     crate const_extern_fn: Lock<Vec<Span>>,\n+    /// Spans collected for gating `trait_alias`, e.g. `trait Foo = Ord + Eq;`.\n+    pub trait_alias: Lock<Vec<Span>>,\n+    /// Spans collected for gating `associated_type_bounds`, e.g. `Iterator<Item: Ord>`.\n+    pub associated_type_bounds: Lock<Vec<Span>>,\n+    /// Spans collected for gating `crate_visibility_modifier`, e.g. `crate fn`.\n+    pub crate_visibility_modifier: Lock<Vec<Span>>,\n+    /// Spans collected for gating `const_generics`, e.g. `const N: usize`.\n+    pub const_generics: Lock<Vec<Span>>,\n+    /// Spans collected for gating `decl_macro`, e.g. `macro m() {}`.\n+    pub decl_macro: Lock<Vec<Span>>,\n+    /// Spans collected for gating `box_patterns`, e.g. `box 0`.\n+    pub box_patterns: Lock<Vec<Span>>,\n+    /// Spans collected for gating `exclusive_range_pattern`, e.g. `0..2`.\n+    pub exclusive_range_pattern: Lock<Vec<Span>>,\n+    /// Spans collected for gating `try_blocks`, e.g. `try { a? + b? }`.\n+    pub try_blocks: Lock<Vec<Span>>,\n+    /// Spans collected for gating `label_break_value`, e.g. `'label: { ... }`.\n+    pub label_break_value: Lock<Vec<Span>>,\n+    /// Spans collected for gating `box_syntax`, e.g. `box $expr`.\n+    pub box_syntax: Lock<Vec<Span>>,\n+    /// Spans collected for gating `type_ascription`, e.g. `42: usize`.\n+    pub type_ascription: Lock<Vec<Span>>,\n }\n \n /// Info about a parsing session."}, {"sha": "330c93e83b5e7d1f2230cbd27f001af1a15ff3b0", "filename": "src/test/ui/const-generics/const-param-in-trait-ungated.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait-ungated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait-ungated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait-ungated.stderr?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: const generics are unstable\n-  --> $DIR/const-param-in-trait-ungated.rs:1:19\n+  --> $DIR/const-param-in-trait-ungated.rs:1:13\n    |\n LL | trait Trait<const T: ()> {}\n-   |                   ^\n+   |             ^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44580\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable"}, {"sha": "e34a2da24cecc8d3daef20dc866d672ef398d5b0", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param-ungated.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: const generics are unstable\n-  --> $DIR/const-param-type-depends-on-type-param-ungated.rs:3:19\n+  --> $DIR/const-param-type-depends-on-type-param-ungated.rs:3:13\n    |\n LL | struct B<T, const N: T>(PhantomData<[T; N]>);\n-   |                   ^\n+   |             ^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44580\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable"}, {"sha": "5223c8c5137aeae97552db686946db730a7a0b71", "filename": "src/test/ui/const-generics/issues/issue-60263.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60263.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60263.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60263.stderr?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: const generics are unstable\n-  --> $DIR/issue-60263.rs:1:16\n+  --> $DIR/issue-60263.rs:1:10\n    |\n LL | struct B<const I: u8>;\n-   |                ^\n+   |          ^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44580\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable"}, {"sha": "00737d8428b3da9c87be6e03aff4de9f15f6074b", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -70,3 +70,7 @@ fn main() {\n     // FIXME: uncomment when `impl_trait_in_bindings` feature is fixed.\n     // let _: &dyn Tr1<As1: Copy> = &S1;\n }\n+\n+macro_rules! accept_path { ($p:path) => {} }\n+accept_path!(Iterator<Item: Ord>);\n+//~^ ERROR associated type bounds are unstable"}, {"sha": "a7ab7614d7b78c646dfc42c044f8e971baef3689", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -115,6 +115,15 @@ LL |     let _: impl Tr1<As1: Copy> = S1;\n    = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n+error[E0658]: associated type bounds are unstable\n+  --> $DIR/feature-gate-associated_type_bounds.rs:75:23\n+   |\n+LL | accept_path!(Iterator<Item: Ord>);\n+   |                       ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n+   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n+\n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/feature-gate-associated_type_bounds.rs:54:14\n    |\n@@ -139,7 +148,7 @@ LL |     let _: impl Tr1<As1: Copy> = S1;\n    |\n    = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n-error: aborting due to 16 previous errors\n+error: aborting due to 17 previous errors\n \n Some errors have detailed explanations: E0562, E0658.\n For more information about an error, try `rustc --explain E0562`."}, {"sha": "c5b926d5af28c86c1cc1ade736b83cb358034075", "filename": "src/test/ui/feature-gates/feature-gate-box_patterns.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_patterns.rs?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -2,3 +2,6 @@ fn main() {\n     let box x = Box::new('c'); //~ ERROR box pattern syntax is experimental\n     println!(\"x: {}\", x);\n }\n+\n+macro_rules! accept_pat { ($p:pat) => {} }\n+accept_pat!(box 0); //~ ERROR box pattern syntax is experimental"}, {"sha": "1e47bd41e88705a7cc0f8330877fa5ddcc531cd5", "filename": "src/test/ui/feature-gates/feature-gate-box_patterns.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_patterns.stderr?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -7,6 +7,15 @@ LL |     let box x = Box::new('c');\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29641\n    = help: add `#![feature(box_patterns)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: box pattern syntax is experimental\n+  --> $DIR/feature-gate-box_patterns.rs:7:13\n+   |\n+LL | accept_pat!(box 0);\n+   |             ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29641\n+   = help: add `#![feature(box_patterns)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "c23953a9e099e1dfa279390e63506790b6ea8aa9", "filename": "src/test/ui/feature-gates/feature-gate-box_syntax.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.rs?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -1,6 +1,9 @@\n // Test that the use of the box syntax is gated by `box_syntax` feature gate.\n \n-fn main() {\n+#[cfg(FALSE)]\n+fn foo() {\n     let x = box 3;\n     //~^ ERROR box expression syntax is experimental; you can call `Box::new` instead\n }\n+\n+fn main() {}"}, {"sha": "cbafa50257706e53cb7efde0f8de5fd1360310ed", "filename": "src/test/ui/feature-gates/feature-gate-box_syntax.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.stderr?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: box expression syntax is experimental; you can call `Box::new` instead\n-  --> $DIR/feature-gate-box_syntax.rs:4:13\n+  --> $DIR/feature-gate-box_syntax.rs:5:13\n    |\n LL |     let x = box 3;\n    |             ^^^^^"}, {"sha": "790bc33e2683e717e7138ba287ea8f8c35f4af1d", "filename": "src/test/ui/feature-gates/feature-gate-const_generics-ptr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics-ptr.stderr?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -1,17 +1,17 @@\n error[E0658]: const generics are unstable\n-  --> $DIR/feature-gate-const_generics-ptr.rs:1:22\n+  --> $DIR/feature-gate-const_generics-ptr.rs:1:16\n    |\n LL | struct ConstFn<const F: fn()>;\n-   |                      ^\n+   |                ^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44580\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n error[E0658]: const generics are unstable\n-  --> $DIR/feature-gate-const_generics-ptr.rs:5:23\n+  --> $DIR/feature-gate-const_generics-ptr.rs:5:17\n    |\n LL | struct ConstPtr<const P: *const u32>;\n-   |                       ^\n+   |                 ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44580\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable"}, {"sha": "0adc9902a6937462f490e2899006484868f81f22", "filename": "src/test/ui/feature-gates/feature-gate-const_generics.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.rs?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -2,4 +2,9 @@ fn foo<const X: ()>() {} //~ ERROR const generics are unstable\n \n struct Foo<const X: usize>([(); X]); //~ ERROR const generics are unstable\n \n+macro_rules! accept_item { ($i:item) => {} }\n+accept_item! {\n+    impl<const X: ()> A {} //~ ERROR const generics are unstable\n+}\n+\n fn main() {}"}, {"sha": "f0154ed289f140c73d276444f301a4d5f681fabe", "filename": "src/test/ui/feature-gates/feature-gate-const_generics.stderr", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.stderr?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -1,21 +1,30 @@\n error[E0658]: const generics are unstable\n-  --> $DIR/feature-gate-const_generics.rs:1:14\n+  --> $DIR/feature-gate-const_generics.rs:1:8\n    |\n LL | fn foo<const X: ()>() {}\n-   |              ^\n+   |        ^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44580\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n error[E0658]: const generics are unstable\n-  --> $DIR/feature-gate-const_generics.rs:3:18\n+  --> $DIR/feature-gate-const_generics.rs:3:12\n    |\n LL | struct Foo<const X: usize>([(); X]);\n-   |                  ^\n+   |            ^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44580\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n-error: aborting due to 2 previous errors\n+error[E0658]: const generics are unstable\n+  --> $DIR/feature-gate-const_generics.rs:7:10\n+   |\n+LL |     impl<const X: ()> A {}\n+   |          ^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/44580\n+   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "7517fb280ea785487ba19b2ad2a3d67c40315848", "filename": "src/test/ui/feature-gates/feature-gate-crate_visibility_modifier.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.rs?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -5,4 +5,7 @@ crate struct Bender { //~ ERROR `crate` visibility modifier is experimental\n     water: bool,\n }\n \n+macro_rules! accept_vis { ($v:vis) => {} }\n+accept_vis!(crate);  //~ ERROR `crate` visibility modifier is experimental\n+\n fn main() {}"}, {"sha": "b317872cea81729bdb872e7ed4630355f4290aa2", "filename": "src/test/ui/feature-gates/feature-gate-crate_visibility_modifier.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.stderr?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -7,6 +7,15 @@ LL | crate struct Bender {\n    = note: for more information, see https://github.com/rust-lang/rust/issues/53120\n    = help: add `#![feature(crate_visibility_modifier)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: `crate` visibility modifier is experimental\n+  --> $DIR/feature-gate-crate_visibility_modifier.rs:9:13\n+   |\n+LL | accept_vis!(crate);\n+   |             ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/53120\n+   = help: add `#![feature(crate_visibility_modifier)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "b208a047481a4b35183ab4921e49712127f2bfcf", "filename": "src/test/ui/feature-gates/feature-gate-decl_macro.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-decl_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-decl_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-decl_macro.rs?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -2,4 +2,8 @@\n \n macro m() {} //~ ERROR `macro` is experimental\n \n+macro_rules! accept_item { ($i:item) => {} }\n+accept_item! {\n+    macro m() {} //~ ERROR `macro` is experimental\n+}\n fn main() {}"}, {"sha": "c6690ebd4d91779186143f076e2bf106fe350905", "filename": "src/test/ui/feature-gates/feature-gate-decl_macro.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-decl_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-decl_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-decl_macro.stderr?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -7,6 +7,15 @@ LL | macro m() {}\n    = note: for more information, see https://github.com/rust-lang/rust/issues/39412\n    = help: add `#![feature(decl_macro)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: `macro` is experimental\n+  --> $DIR/feature-gate-decl_macro.rs:7:5\n+   |\n+LL |     macro m() {}\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/39412\n+   = help: add `#![feature(decl_macro)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "594ec73fe26f7954948392b138944aa7852e3133", "filename": "src/test/ui/feature-gates/feature-gate-exclusive-range-pattern.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exclusive-range-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exclusive-range-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exclusive-range-pattern.rs?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -1,6 +1,10 @@\n-pub fn main() {\n+#[cfg(FALSE)]\n+fn foo() {\n     match 22 {\n         0 .. 3 => {} //~ ERROR exclusive range pattern syntax is experimental\n+        PATH .. 3 => {} //~ ERROR exclusive range pattern syntax is experimental\n         _ => {}\n     }\n }\n+\n+fn main() {}"}, {"sha": "075fdbed90d6c7b0c6ae58824c8591a5a28e47f6", "filename": "src/test/ui/feature-gates/feature-gate-exclusive-range-pattern.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exclusive-range-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exclusive-range-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exclusive-range-pattern.stderr?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -1,12 +1,21 @@\n error[E0658]: exclusive range pattern syntax is experimental\n-  --> $DIR/feature-gate-exclusive-range-pattern.rs:3:9\n+  --> $DIR/feature-gate-exclusive-range-pattern.rs:4:11\n    |\n LL |         0 .. 3 => {}\n-   |         ^^^^^^\n+   |           ^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/37854\n    = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: exclusive range pattern syntax is experimental\n+  --> $DIR/feature-gate-exclusive-range-pattern.rs:5:14\n+   |\n+LL |         PATH .. 3 => {}\n+   |              ^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/37854\n+   = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "8d7ecd27b450fd0e035304515b54674ee8a683b5", "filename": "src/test/ui/feature-gates/feature-gate-label_break_value.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-label_break_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-label_break_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-label_break_value.rs?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -1,5 +1,8 @@\n-pub fn main() {\n+#[cfg(FALSE)]\n+pub fn foo() {\n     'a: { //~ ERROR labels on blocks are unstable\n         break 'a;\n     }\n }\n+\n+fn main() {}"}, {"sha": "6a861d3e04f92be31a72b983ecdf1564e65dc1f9", "filename": "src/test/ui/feature-gates/feature-gate-label_break_value.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-label_break_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-label_break_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-label_break_value.stderr?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: labels on blocks are unstable\n-  --> $DIR/feature-gate-label_break_value.rs:2:5\n+  --> $DIR/feature-gate-label_break_value.rs:3:5\n    |\n LL |     'a: {\n    |     ^^"}, {"sha": "4b94d7d6d3bdad3f8e879c319b025cd198d42701", "filename": "src/test/ui/feature-gates/feature-gate-trait-alias.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trait-alias.rs?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -1,4 +1,13 @@\n trait Foo = Default;\n //~^ ERROR trait aliases are experimental\n \n+macro_rules! accept_item {\n+    ($i:item) => {}\n+}\n+\n+accept_item! {\n+    trait Foo = Ord + Eq;\n+    //~^ ERROR trait aliases are experimental\n+}\n+\n fn main() {}"}, {"sha": "b1bf6ad3491293ff9e809ddfbdb946f17e5dc05a", "filename": "src/test/ui/feature-gates/feature-gate-trait-alias.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trait-alias.stderr?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -7,6 +7,15 @@ LL | trait Foo = Default;\n    = note: for more information, see https://github.com/rust-lang/rust/issues/41517\n    = help: add `#![feature(trait_alias)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: trait aliases are experimental\n+  --> $DIR/feature-gate-trait-alias.rs:9:5\n+   |\n+LL |     trait Foo = Ord + Eq;\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/41517\n+   = help: add `#![feature(trait_alias)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "b451ba84a15654eec1efacbb552b8c614098cfc5", "filename": "src/test/ui/feature-gates/feature-gate-try_blocks.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_blocks.rs?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -1,9 +1,12 @@\n // compile-flags: --edition 2018\n \n-pub fn main() {\n-    let try_result: Option<_> = try { //~ ERROR `try` expression is experimental\n+#[cfg(FALSE)]\n+fn foo() {\n+    let try_result: Option<_> = try { //~ ERROR `try` blocks are unstable\n         let x = 5;\n         x\n     };\n     assert_eq!(try_result, Some(5));\n }\n+\n+fn main() {}"}, {"sha": "44a7d9b9043fd352e058e359e2fef94b1f8c550a", "filename": "src/test/ui/feature-gates/feature-gate-try_blocks.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_blocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_blocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_blocks.stderr?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -1,5 +1,5 @@\n-error[E0658]: `try` expression is experimental\n-  --> $DIR/feature-gate-try_blocks.rs:4:33\n+error[E0658]: `try` blocks are unstable\n+  --> $DIR/feature-gate-try_blocks.rs:5:33\n    |\n LL |       let try_result: Option<_> = try {\n    |  _________________________________^"}, {"sha": "655891d802c1ceda3cc54331dedd4bd8106e8262", "filename": "src/test/ui/feature-gates/feature-gate-type_ascription.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_ascription.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_ascription.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_ascription.rs?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -1,5 +1,8 @@\n // Type ascription is unstable\n \n-fn main() {\n+#[cfg(FALSE)]\n+fn foo() {\n     let a = 10: u8; //~ ERROR type ascription is experimental\n }\n+\n+fn main() {}"}, {"sha": "d63d624c6c112bfd74ac6602f6196778dc51ec72", "filename": "src/test/ui/feature-gates/feature-gate-type_ascription.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_ascription.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_ascription.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_ascription.stderr?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: type ascription is experimental\n-  --> $DIR/feature-gate-type_ascription.rs:4:13\n+  --> $DIR/feature-gate-type_ascription.rs:5:13\n    |\n LL |     let a = 10: u8;\n    |             ^^^^^^"}, {"sha": "9667711242ce61d57d9594051811c1bde10c98fd", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-pass.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.rs?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -4,6 +4,7 @@\n // check-pass\n \n #![feature(or_patterns)]\n+#![feature(box_patterns)]\n \n fn main() {}\n "}, {"sha": "6b8c146949aecc5916581e1fe1760d4f55ca480a", "filename": "src/test/ui/parser/pat-tuple-4.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.rs?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -4,7 +4,6 @@ fn main() {\n     match 0 {\n         (.. PAT) => {}\n         //~^ ERROR `..X` range patterns are not supported\n-        //~| ERROR exclusive range pattern syntax is experimental\n     }\n }\n "}, {"sha": "1962dc4ff20a87d29016b3894f14dc373e105c62", "filename": "src/test/ui/parser/pat-tuple-4.stderr", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.stderr?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -4,25 +4,15 @@ error: `..X` range patterns are not supported\n LL |         (.. PAT) => {}\n    |          ^^^^^^ help: try using the minimum value for the type: `MIN..PAT`\n \n-error[E0658]: exclusive range pattern syntax is experimental\n-  --> $DIR/pat-tuple-4.rs:5:10\n-   |\n-LL |         (.. PAT) => {}\n-   |          ^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/37854\n-   = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable\n-\n error[E0308]: mismatched types\n-  --> $DIR/pat-tuple-4.rs:11:30\n+  --> $DIR/pat-tuple-4.rs:10:30\n    |\n LL | const RECOVERY_WITNESS: () = 0;\n    |                              ^ expected (), found integer\n    |\n    = note: expected type `()`\n               found type `{integer}`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0308, E0658.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "17155b4dd49544050eb5772e3d2b4347bde3cc16", "filename": "src/test/ui/parser/pat-tuple-5.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.stderr?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -5,10 +5,10 @@ LL |         (PAT ..) => {}\n    |          ^^^^^^ help: try using the maximum value for the type: `PAT..MAX`\n \n error[E0658]: exclusive range pattern syntax is experimental\n-  --> $DIR/pat-tuple-5.rs:5:10\n+  --> $DIR/pat-tuple-5.rs:5:14\n    |\n LL |         (PAT ..) => {}\n-   |          ^^^^^^\n+   |              ^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/37854\n    = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable"}, {"sha": "45b31f6125374254c69dcecb8879fc1c4bebe8f5", "filename": "src/test/ui/pattern/rest-pat-syntactic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Fpattern%2Frest-pat-syntactic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Fpattern%2Frest-pat-syntactic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Frest-pat-syntactic.rs?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -3,6 +3,8 @@\n \n // check-pass\n \n+#![feature(box_patterns)]\n+\n fn main() {}\n \n macro_rules! accept_pat {"}, {"sha": "039bbce8c1ed0f279237e20da56fe8ea0b72cf91", "filename": "src/test/ui/traits/trait-alias/trait-alias-syntax-fail.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-syntax-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-syntax-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-syntax-fail.rs?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -4,4 +4,7 @@ trait Foo {}\n auto trait A = Foo; //~ ERROR trait aliases cannot be `auto`\n unsafe trait B = Foo; //~ ERROR trait aliases cannot be `unsafe`\n \n+trait C: Ord = Eq; //~ ERROR bounds are not allowed on trait aliases\n+trait D: = Eq; //~ ERROR bounds are not allowed on trait aliases\n+\n fn main() {}"}, {"sha": "18c22133bc780ca3f40d8fc412c2c106f11b519d", "filename": "src/test/ui/traits/trait-alias/trait-alias-syntax-fail.stderr", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-syntax-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6a18b6baf40b48abce2de5747d187a7bbad293d/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-syntax-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-syntax-fail.stderr?ref=d6a18b6baf40b48abce2de5747d187a7bbad293d", "patch": "@@ -1,14 +1,26 @@\n error: trait aliases cannot be `auto`\n-  --> $DIR/trait-alias-syntax-fail.rs:4:19\n+  --> $DIR/trait-alias-syntax-fail.rs:4:1\n    |\n LL | auto trait A = Foo;\n-   |                   ^ trait aliases cannot be `auto`\n+   | ^^^^^^^^^^^^^^^^^^^ trait aliases cannot be `auto`\n \n error: trait aliases cannot be `unsafe`\n-  --> $DIR/trait-alias-syntax-fail.rs:5:21\n+  --> $DIR/trait-alias-syntax-fail.rs:5:1\n    |\n LL | unsafe trait B = Foo;\n-   |                     ^ trait aliases cannot be `unsafe`\n+   | ^^^^^^^^^^^^^^^^^^^^^ trait aliases cannot be `unsafe`\n \n-error: aborting due to 2 previous errors\n+error: bounds are not allowed on trait aliases\n+  --> $DIR/trait-alias-syntax-fail.rs:7:8\n+   |\n+LL | trait C: Ord = Eq;\n+   |        ^^^^^\n+\n+error: bounds are not allowed on trait aliases\n+  --> $DIR/trait-alias-syntax-fail.rs:8:8\n+   |\n+LL | trait D: = Eq;\n+   |        ^\n+\n+error: aborting due to 4 previous errors\n "}]}