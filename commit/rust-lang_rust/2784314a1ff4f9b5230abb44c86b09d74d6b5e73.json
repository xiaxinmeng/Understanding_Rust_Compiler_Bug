{"sha": "2784314a1ff4f9b5230abb44c86b09d74d6b5e73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ODQzMTRhMWZmNGY5YjUyMzBhYmI0NGM4NmIwOWQ3NGQ2YjVlNzM=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2012-02-13T04:05:55Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2012-02-13T04:05:55Z"}, "message": "Merge pull request #1826 from brson/iter\n\nVarious additions to core::iter", "tree": {"sha": "006a7f7caf6e549b3e17826a92ee9657cf9cf9fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/006a7f7caf6e549b3e17826a92ee9657cf9cf9fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2784314a1ff4f9b5230abb44c86b09d74d6b5e73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2784314a1ff4f9b5230abb44c86b09d74d6b5e73", "html_url": "https://github.com/rust-lang/rust/commit/2784314a1ff4f9b5230abb44c86b09d74d6b5e73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2784314a1ff4f9b5230abb44c86b09d74d6b5e73/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4eeb706e84bc9e32aa5057e32d567ccab2c3cc2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eeb706e84bc9e32aa5057e32d567ccab2c3cc2c", "html_url": "https://github.com/rust-lang/rust/commit/4eeb706e84bc9e32aa5057e32d567ccab2c3cc2c"}, {"sha": "fde719f635955b1c3d76639062410262fd0df351", "url": "https://api.github.com/repos/rust-lang/rust/commits/fde719f635955b1c3d76639062410262fd0df351", "html_url": "https://github.com/rust-lang/rust/commit/fde719f635955b1c3d76639062410262fd0df351"}], "stats": {"total": 99, "additions": 97, "deletions": 2}, "files": [{"sha": "c2fc2838d70defe7b997d470fd5318336cd585bf", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 97, "deletions": 2, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/2784314a1ff4f9b5230abb44c86b09d74d6b5e73/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2784314a1ff4f9b5230abb44c86b09d74d6b5e73/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=2784314a1ff4f9b5230abb44c86b09d74d6b5e73", "patch": "@@ -65,18 +65,43 @@ fn flat_map<A,B,IA:iterable<A>,IB:iterable<B>>(\n     }\n }\n \n-fn foldl<A,B:copy,IA:iterable<A>>(self: IA, b0: B, blk: fn(B, A) -> B) -> B {\n-    let b = b0;\n+fn foldl<A,B,IA:iterable<A>>(self: IA, +b0: B, blk: fn(-B, A) -> B) -> B {\n+    let b <- b0;\n     self.iter {|a|\n         b = blk(b, a);\n     }\n     ret b;\n }\n \n+fn foldr<A:copy,B,IA:iterable<A>>(\n+    self: IA, +b0: B, blk: fn(A, -B) -> B) -> B {\n+\n+    let b <- b0;\n+    reverse(self) {|a|\n+        b = blk(a, b);\n+    }\n+    ret b;\n+}\n+\n fn to_list<A:copy,IA:iterable<A>>(self: IA) -> [A] {\n     foldl::<A,[A],IA>(self, [], {|r, a| r + [a]})\n }\n \n+// FIXME: This could be made more efficient with an riterable interface\n+fn reverse<A:copy,IA:iterable<A>>(self: IA, blk: fn(A)) {\n+    vec::riter(to_list(self), blk)\n+}\n+\n+fn count<A,IA:iterable<A>>(self: IA, x: A) -> uint {\n+    foldl(self, 0u) {|count, value|\n+        if value == x {\n+            count + 1u\n+        } else {\n+            count\n+        }\n+    }\n+}\n+\n fn repeat(times: uint, blk: fn()) {\n     let i = 0u;\n     while i < times {\n@@ -85,6 +110,35 @@ fn repeat(times: uint, blk: fn()) {\n     }\n }\n \n+fn min<A:copy,IA:iterable<A>>(self: IA) -> A {\n+    alt foldl::<A,option<A>,IA>(self, none) {|a, b|\n+        alt a {\n+          some(a_) if a_ < b {\n+            // FIXME: Not sure if this is successfully optimized to a move\n+            a\n+          }\n+          _ { some(b) }\n+        }\n+    } {\n+        some(val) { val }\n+        none { fail \"min called on empty iterator\" }\n+    }\n+}\n+\n+fn max<A:copy,IA:iterable<A>>(self: IA) -> A {\n+    alt foldl::<A,option<A>,IA>(self, none) {|a, b|\n+        alt a {\n+          some(a_) if a_ > b {\n+            // FIXME: Not sure if this is successfully optimized to a move\n+            a\n+          }\n+          _ { some(b) }\n+        }\n+    } {\n+        some(val) { val }\n+        none { fail \"max called on empty iterator\" }\n+    }\n+}\n \n #[test]\n fn test_enumerate() {\n@@ -168,4 +222,45 @@ fn test_repeat() {\n     assert c == [0u, 1u, 4u, 9u, 16u];\n }\n \n+#[test]\n+fn test_min() {\n+    assert min([5, 4, 1, 2, 3]) == 1;\n+}\n+\n+#[test]\n+#[should_fail]\n+#[ignore(cfg(target_os = \"win32\"))]\n+fn test_min_empty() {\n+    min::<int, [int]>([]);\n+}\n+\n+#[test]\n+fn test_max() {\n+    assert max([1, 2, 4, 2, 3]) == 4;\n+}\n+\n+#[test]\n+#[should_fail]\n+#[ignore(cfg(target_os = \"win32\"))]\n+fn test_max_empty() {\n+    max::<int, [int]>([]);\n+}\n \n+#[test]\n+fn test_reverse() {\n+    assert to_list(bind reverse([1, 2, 3], _)) == [3, 2, 1];\n+}\n+\n+#[test]\n+fn test_count() {\n+    assert count([1, 2, 1, 2, 1], 1) == 3u;\n+}\n+\n+#[test]\n+fn test_foldr() {\n+    fn sub(&&a: int, -b: int) -> int {\n+        a - b\n+    }\n+    let sum = foldr([1, 2, 3, 4], 0, sub);\n+    assert sum == -2;\n+}\n\\ No newline at end of file"}]}