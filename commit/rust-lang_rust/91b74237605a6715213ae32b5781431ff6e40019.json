{"sha": "91b74237605a6715213ae32b5781431ff6e40019", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxYjc0MjM3NjA1YTY3MTUyMTNhZTMyYjU3ODE0MzFmZjZlNDAwMTk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-25T23:11:21Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-25T23:11:21Z"}, "message": "Reject integer suffix when tuple indexing", "tree": {"sha": "e27ceb14d2ea6964c210ae01381f3c98bf2103ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e27ceb14d2ea6964c210ae01381f3c98bf2103ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91b74237605a6715213ae32b5781431ff6e40019", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91b74237605a6715213ae32b5781431ff6e40019", "html_url": "https://github.com/rust-lang/rust/commit/91b74237605a6715213ae32b5781431ff6e40019", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91b74237605a6715213ae32b5781431ff6e40019/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c27fb19ba15a2e45485e601a79914c6280196b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c27fb19ba15a2e45485e601a79914c6280196b0", "html_url": "https://github.com/rust-lang/rust/commit/4c27fb19ba15a2e45485e601a79914c6280196b0"}], "stats": {"total": 112, "additions": 69, "deletions": 43}, "files": [{"sha": "efeace4f05eccb9243f6068b74a94abdf18cd259", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 52, "deletions": 43, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/91b74237605a6715213ae32b5781431ff6e40019/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b74237605a6715213ae32b5781431ff6e40019/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=91b74237605a6715213ae32b5781431ff6e40019", "patch": "@@ -3196,51 +3196,60 @@ impl<'a> Parser<'a> {\n             // expr.f\n             if self.eat(&token::Dot) {\n                 match self.token {\n-                  token::Ident(..) => {\n-                    e = self.parse_dot_suffix(e, lo)?;\n-                  }\n-                  token::Literal(token::Integer(name), _) => {\n-                    let span = self.span;\n-                    self.bump();\n-                    let field = ExprKind::Field(e, Ident::new(name, span));\n-                    e = self.mk_expr(lo.to(span), field, ThinVec::new());\n-                  }\n-                  token::Literal(token::Float(n), _suf) => {\n-                    self.bump();\n-                    let fstr = n.as_str();\n-                    let mut err = self.diagnostic()\n-                        .struct_span_err(self.prev_span, &format!(\"unexpected token: `{}`\", n));\n-                    err.span_label(self.prev_span, \"unexpected token\");\n-                    if fstr.chars().all(|x| \"0123456789.\".contains(x)) {\n-                        let float = match fstr.parse::<f64>().ok() {\n-                            Some(f) => f,\n-                            None => continue,\n-                        };\n-                        let sugg = pprust::to_string(|s| {\n-                            use crate::print::pprust::PrintState;\n-                            s.popen()?;\n-                            s.print_expr(&e)?;\n-                            s.s.word( \".\")?;\n-                            s.print_usize(float.trunc() as usize)?;\n-                            s.pclose()?;\n-                            s.s.word(\".\")?;\n-                            s.s.word(fstr.splitn(2, \".\").last().unwrap().to_string())\n-                        });\n-                        err.span_suggestion(\n-                            lo.to(self.prev_span),\n-                            \"try parenthesizing the first index\",\n-                            sugg,\n-                            Applicability::MachineApplicable\n-                        );\n+                    token::Ident(..) => {\n+                        e = self.parse_dot_suffix(e, lo)?;\n                     }\n-                    return Err(err);\n+                    token::Literal(token::Integer(name), suffix) => {\n+                        let span = self.span;\n+                        self.bump();\n+                        let field = ExprKind::Field(e, Ident::new(name, span));\n+                        e = self.mk_expr(lo.to(span), field, ThinVec::new());\n \n-                  }\n-                  _ => {\n-                    // FIXME Could factor this out into non_fatal_unexpected or something.\n-                    let actual = self.this_token_to_string();\n-                    self.span_err(self.span, &format!(\"unexpected token: `{}`\", actual));\n-                  }\n+                        if let Some(suffix) = suffix {\n+                            let mut err = self.diagnostic().struct_span_err(\n+                                span,\n+                                \"tuple index with a suffix is invalid\",\n+                            );\n+                            err.span_label(span, format!(\"invalid suffix `{}`\", suffix));\n+                            err.emit();\n+                        }\n+                    }\n+                    token::Literal(token::Float(n), _suf) => {\n+                      self.bump();\n+                      let fstr = n.as_str();\n+                      let mut err = self.diagnostic()\n+                          .struct_span_err(self.prev_span, &format!(\"unexpected token: `{}`\", n));\n+                      err.span_label(self.prev_span, \"unexpected token\");\n+                      if fstr.chars().all(|x| \"0123456789.\".contains(x)) {\n+                          let float = match fstr.parse::<f64>().ok() {\n+                              Some(f) => f,\n+                              None => continue,\n+                          };\n+                          let sugg = pprust::to_string(|s| {\n+                              use crate::print::pprust::PrintState;\n+                              s.popen()?;\n+                              s.print_expr(&e)?;\n+                              s.s.word( \".\")?;\n+                              s.print_usize(float.trunc() as usize)?;\n+                              s.pclose()?;\n+                              s.s.word(\".\")?;\n+                              s.s.word(fstr.splitn(2, \".\").last().unwrap().to_string())\n+                          });\n+                          err.span_suggestion(\n+                              lo.to(self.prev_span),\n+                              \"try parenthesizing the first index\",\n+                              sugg,\n+                              Applicability::MachineApplicable\n+                          );\n+                      }\n+                      return Err(err);\n+\n+                    }\n+                    _ => {\n+                        // FIXME Could factor this out into non_fatal_unexpected or something.\n+                        let actual = self.this_token_to_string();\n+                        self.span_err(self.span, &format!(\"unexpected token: `{}`\", actual));\n+                    }\n                 }\n                 continue;\n             }"}, {"sha": "33ad11bb0b0117842c1ff50c0e94e5e060bf651e", "filename": "src/test/ui/parser/issue-59418.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/91b74237605a6715213ae32b5781431ff6e40019/src%2Ftest%2Fui%2Fparser%2Fissue-59418.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b74237605a6715213ae32b5781431ff6e40019/src%2Ftest%2Fui%2Fparser%2Fissue-59418.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-59418.rs?ref=91b74237605a6715213ae32b5781431ff6e40019", "patch": "@@ -0,0 +1,9 @@\n+struct X(i32,i32,i32);\n+\n+fn main() {\n+    let a = X(1, 2, 3);\n+    let b = a.1suffix;\n+    //~^ ERROR tuple index with a suffix is invalid\n+    println!(\"{}\", b);\n+}\n+"}, {"sha": "c06b950f6011930a22418ff28f62b3992c48e966", "filename": "src/test/ui/parser/issue-59418.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91b74237605a6715213ae32b5781431ff6e40019/src%2Ftest%2Fui%2Fparser%2Fissue-59418.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91b74237605a6715213ae32b5781431ff6e40019/src%2Ftest%2Fui%2Fparser%2Fissue-59418.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-59418.stderr?ref=91b74237605a6715213ae32b5781431ff6e40019", "patch": "@@ -0,0 +1,8 @@\n+error: tuple index with a suffix is invalid\n+  --> $DIR/issue-59418.rs:5:15\n+   |\n+LL |     let b = a.1suffix;\n+   |               ^^^^^^^ invalid suffix `suffix`\n+\n+error: aborting due to previous error\n+"}]}