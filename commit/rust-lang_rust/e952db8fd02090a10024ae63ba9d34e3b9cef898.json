{"sha": "e952db8fd02090a10024ae63ba9d34e3b9cef898", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5NTJkYjhmZDAyMDkwYTEwMDI0YWU2M2JhOWQzNGUzYjljZWY4OTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-22T04:07:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-22T04:07:05Z"}, "message": "Auto merge of #81732 - m-ou-se:inherit-overflow-checks, r=Mark-Simulacrum\n\nUse `#[rustc_inherit_overflow_checks]` instead of Add::add etc.\n\nSee https://github.com/rust-lang/rust/issues/81721", "tree": {"sha": "a162dde2f6e3c200046011c762799797f5a55f8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a162dde2f6e3c200046011c762799797f5a55f8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e952db8fd02090a10024ae63ba9d34e3b9cef898", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e952db8fd02090a10024ae63ba9d34e3b9cef898", "html_url": "https://github.com/rust-lang/rust/commit/e952db8fd02090a10024ae63ba9d34e3b9cef898", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e952db8fd02090a10024ae63ba9d34e3b9cef898/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24bfcee941d9f6d9900d3a02b12f6b14d00e0ffe", "url": "https://api.github.com/repos/rust-lang/rust/commits/24bfcee941d9f6d9900d3a02b12f6b14d00e0ffe", "html_url": "https://github.com/rust-lang/rust/commit/24bfcee941d9f6d9900d3a02b12f6b14d00e0ffe"}, {"sha": "053769dd53b403e2723a56a9b0cdc8bff7814dcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/053769dd53b403e2723a56a9b0cdc8bff7814dcc", "html_url": "https://github.com/rust-lang/rust/commit/053769dd53b403e2723a56a9b0cdc8bff7814dcc"}], "stats": {"total": 103, "additions": 65, "deletions": 38}, "files": [{"sha": "7522bb02c3dc02e00be2742c0b2e27659365d91f", "filename": "library/core/src/iter/adapters/enumerate.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e952db8fd02090a10024ae63ba9d34e3b9cef898/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e952db8fd02090a10024ae63ba9d34e3b9cef898/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs?ref=e952db8fd02090a10024ae63ba9d34e3b9cef898", "patch": "@@ -1,6 +1,6 @@\n use crate::iter::adapters::{zip::try_get_unchecked, SourceIter, TrustedRandomAccess};\n use crate::iter::{FusedIterator, InPlaceIterable, TrustedLen};\n-use crate::ops::{Add, AddAssign, Try};\n+use crate::ops::Try;\n \n /// An iterator that yields the current count and the element during iteration.\n ///\n@@ -39,11 +39,11 @@ where\n     ///\n     /// Might panic if the index of the element overflows a `usize`.\n     #[inline]\n+    #[rustc_inherit_overflow_checks]\n     fn next(&mut self) -> Option<(usize, <I as Iterator>::Item)> {\n         let a = self.iter.next()?;\n         let i = self.count;\n-        // Possible undefined overflow.\n-        AddAssign::add_assign(&mut self.count, 1);\n+        self.count += 1;\n         Some((i, a))\n     }\n \n@@ -53,11 +53,11 @@ where\n     }\n \n     #[inline]\n+    #[rustc_inherit_overflow_checks]\n     fn nth(&mut self, n: usize) -> Option<(usize, I::Item)> {\n         let a = self.iter.nth(n)?;\n-        // Possible undefined overflow.\n-        let i = Add::add(self.count, n);\n-        self.count = Add::add(i, 1);\n+        let i = self.count + n;\n+        self.count = i + 1;\n         Some((i, a))\n     }\n \n@@ -78,10 +78,10 @@ where\n             count: &'a mut usize,\n             mut fold: impl FnMut(Acc, (usize, T)) -> R + 'a,\n         ) -> impl FnMut(Acc, T) -> R + 'a {\n+            #[rustc_inherit_overflow_checks]\n             move |acc, item| {\n                 let acc = fold(acc, (*count, item));\n-                // Possible undefined overflow.\n-                AddAssign::add_assign(count, 1);\n+                *count += 1;\n                 acc\n             }\n         }\n@@ -99,25 +99,26 @@ where\n             mut count: usize,\n             mut fold: impl FnMut(Acc, (usize, T)) -> Acc,\n         ) -> impl FnMut(Acc, T) -> Acc {\n+            #[rustc_inherit_overflow_checks]\n             move |acc, item| {\n                 let acc = fold(acc, (count, item));\n-                // Possible undefined overflow.\n-                AddAssign::add_assign(&mut count, 1);\n+                count += 1;\n                 acc\n             }\n         }\n \n         self.iter.fold(init, enumerate(self.count, fold))\n     }\n \n+    #[rustc_inherit_overflow_checks]\n     unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> <Self as Iterator>::Item\n     where\n         Self: TrustedRandomAccess,\n     {\n         // SAFETY: the caller must uphold the contract for\n         // `Iterator::__iterator_get_unchecked`.\n         let value = unsafe { try_get_unchecked(&mut self.iter, idx) };\n-        (Add::add(self.count, idx), value)\n+        (self.count + idx, value)\n     }\n }\n "}, {"sha": "cc80e06decd48972ba6a6d9c428d50505afca515", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e952db8fd02090a10024ae63ba9d34e3b9cef898/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e952db8fd02090a10024ae63ba9d34e3b9cef898/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=e952db8fd02090a10024ae63ba9d34e3b9cef898", "patch": "@@ -1,7 +1,7 @@\n use crate::char;\n use crate::convert::TryFrom;\n use crate::mem;\n-use crate::ops::{self, Add, Sub, Try};\n+use crate::ops::{self, Try};\n \n use super::{FusedIterator, TrustedLen};\n \n@@ -201,23 +201,25 @@ macro_rules! step_identical_methods {\n \n         #[inline]\n         #[allow(arithmetic_overflow)]\n+        #[rustc_inherit_overflow_checks]\n         fn forward(start: Self, n: usize) -> Self {\n             // In debug builds, trigger a panic on overflow.\n             // This should optimize completely out in release builds.\n             if Self::forward_checked(start, n).is_none() {\n-                let _ = Add::add(Self::MAX, 1);\n+                let _ = Self::MAX + 1;\n             }\n             // Do wrapping math to allow e.g. `Step::forward(-128i8, 255)`.\n             start.wrapping_add(n as Self)\n         }\n \n         #[inline]\n         #[allow(arithmetic_overflow)]\n+        #[rustc_inherit_overflow_checks]\n         fn backward(start: Self, n: usize) -> Self {\n             // In debug builds, trigger a panic on overflow.\n             // This should optimize completely out in release builds.\n             if Self::backward_checked(start, n).is_none() {\n-                let _ = Sub::sub(Self::MIN, 1);\n+                let _ = Self::MIN - 1;\n             }\n             // Do wrapping math to allow e.g. `Step::backward(127i8, 255)`.\n             start.wrapping_sub(n as Self)"}, {"sha": "0a4210a78e3af8a35b45f921392b1ab79394ff5e", "filename": "library/core/src/iter/traits/accum.rs", "status": "modified", "additions": 40, "deletions": 10, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e952db8fd02090a10024ae63ba9d34e3b9cef898/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Faccum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e952db8fd02090a10024ae63ba9d34e3b9cef898/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Faccum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Faccum.rs?ref=e952db8fd02090a10024ae63ba9d34e3b9cef898", "patch": "@@ -1,6 +1,5 @@\n use crate::iter;\n use crate::num::Wrapping;\n-use crate::ops::{Add, Mul};\n \n /// Trait to represent types that can be created by summing up an iterator.\n ///\n@@ -37,34 +36,49 @@ pub trait Product<A = Self>: Sized {\n     fn product<I: Iterator<Item = A>>(iter: I) -> Self;\n }\n \n-// N.B., explicitly use Add and Mul here to inherit overflow checks\n macro_rules! integer_sum_product {\n     (@impls $zero:expr, $one:expr, #[$attr:meta], $($a:ty)*) => ($(\n         #[$attr]\n         impl Sum for $a {\n             fn sum<I: Iterator<Item=Self>>(iter: I) -> Self {\n-                iter.fold($zero, Add::add)\n+                iter.fold(\n+                    $zero,\n+                    #[rustc_inherit_overflow_checks]\n+                    |a, b| a + b,\n+                )\n             }\n         }\n \n         #[$attr]\n         impl Product for $a {\n             fn product<I: Iterator<Item=Self>>(iter: I) -> Self {\n-                iter.fold($one, Mul::mul)\n+                iter.fold(\n+                    $one,\n+                    #[rustc_inherit_overflow_checks]\n+                    |a, b| a * b,\n+                )\n             }\n         }\n \n         #[$attr]\n         impl<'a> Sum<&'a $a> for $a {\n             fn sum<I: Iterator<Item=&'a Self>>(iter: I) -> Self {\n-                iter.fold($zero, Add::add)\n+                iter.fold(\n+                    $zero,\n+                    #[rustc_inherit_overflow_checks]\n+                    |a, b| a + b,\n+                )\n             }\n         }\n \n         #[$attr]\n         impl<'a> Product<&'a $a> for $a {\n             fn product<I: Iterator<Item=&'a Self>>(iter: I) -> Self {\n-                iter.fold($one, Mul::mul)\n+                iter.fold(\n+                    $one,\n+                    #[rustc_inherit_overflow_checks]\n+                    |a, b| a * b,\n+                )\n             }\n         }\n     )*);\n@@ -83,28 +97,44 @@ macro_rules! float_sum_product {\n         #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n         impl Sum for $a {\n             fn sum<I: Iterator<Item=Self>>(iter: I) -> Self {\n-                iter.fold(0.0, Add::add)\n+                iter.fold(\n+                    0.0,\n+                    #[rustc_inherit_overflow_checks]\n+                    |a, b| a + b,\n+                )\n             }\n         }\n \n         #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n         impl Product for $a {\n             fn product<I: Iterator<Item=Self>>(iter: I) -> Self {\n-                iter.fold(1.0, Mul::mul)\n+                iter.fold(\n+                    1.0,\n+                    #[rustc_inherit_overflow_checks]\n+                    |a, b| a * b,\n+                )\n             }\n         }\n \n         #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n         impl<'a> Sum<&'a $a> for $a {\n             fn sum<I: Iterator<Item=&'a Self>>(iter: I) -> Self {\n-                iter.fold(0.0, Add::add)\n+                iter.fold(\n+                    0.0,\n+                    #[rustc_inherit_overflow_checks]\n+                    |a, b| a + b,\n+                )\n             }\n         }\n \n         #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n         impl<'a> Product<&'a $a> for $a {\n             fn product<I: Iterator<Item=&'a Self>>(iter: I) -> Self {\n-                iter.fold(1.0, Mul::mul)\n+                iter.fold(\n+                    1.0,\n+                    #[rustc_inherit_overflow_checks]\n+                    |a, b| a * b,\n+                )\n             }\n         }\n     )*)"}, {"sha": "f28c4673cc03370694efc15d857d00365363abbd", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e952db8fd02090a10024ae63ba9d34e3b9cef898/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e952db8fd02090a10024ae63ba9d34e3b9cef898/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=e952db8fd02090a10024ae63ba9d34e3b9cef898", "patch": "@@ -3,7 +3,7 @@\n // can't split that into multiple files.\n \n use crate::cmp::{self, Ordering};\n-use crate::ops::{Add, ControlFlow, Try};\n+use crate::ops::{ControlFlow, Try};\n \n use super::super::TrustedRandomAccess;\n use super::super::{Chain, Cloned, Copied, Cycle, Enumerate, Filter, FilterMap, Fuse};\n@@ -242,13 +242,11 @@ pub trait Iterator {\n     where\n         Self: Sized,\n     {\n-        #[inline]\n-        fn add1<T>(count: usize, _: T) -> usize {\n-            // Might overflow.\n-            Add::add(count, 1)\n-        }\n-\n-        self.fold(0, add1)\n+        self.fold(\n+            0,\n+            #[rustc_inherit_overflow_checks]\n+            |count, _| count + 1,\n+        )\n     }\n \n     /// Consumes the iterator, returning the last element.\n@@ -2475,13 +2473,9 @@ pub trait Iterator {\n         fn check<T>(\n             mut predicate: impl FnMut(T) -> bool,\n         ) -> impl FnMut(usize, T) -> ControlFlow<usize, usize> {\n-            // The addition might panic on overflow\n+            #[rustc_inherit_overflow_checks]\n             move |i, x| {\n-                if predicate(x) {\n-                    ControlFlow::Break(i)\n-                } else {\n-                    ControlFlow::Continue(Add::add(i, 1))\n-                }\n+                if predicate(x) { ControlFlow::Break(i) } else { ControlFlow::Continue(i + 1) }\n             }\n         }\n "}]}