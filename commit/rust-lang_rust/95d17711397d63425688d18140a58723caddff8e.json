{"sha": "95d17711397d63425688d18140a58723caddff8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZDE3NzExMzk3ZDYzNDI1Njg4ZDE4MTQwYTU4NzIzY2FkZGZmOGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-05T17:33:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-05T17:33:00Z"}, "message": "auto merge of #19233 : erickt/rust/bench-stats, r=erickt\n\nThere are a bunch stats that libtest keeps track of that we don't expose. This adds `--error-bar` and `--stats` to expose this to the users.", "tree": {"sha": "b533455b8b9c5091669c64490ea75cc776c62f0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b533455b8b9c5091669c64490ea75cc776c62f0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95d17711397d63425688d18140a58723caddff8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95d17711397d63425688d18140a58723caddff8e", "html_url": "https://github.com/rust-lang/rust/commit/95d17711397d63425688d18140a58723caddff8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95d17711397d63425688d18140a58723caddff8e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4573da6f4ffb276c31773679fd19581fc15ded8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4573da6f4ffb276c31773679fd19581fc15ded8f", "html_url": "https://github.com/rust-lang/rust/commit/4573da6f4ffb276c31773679fd19581fc15ded8f"}, {"sha": "d91331074862f13d87f67b85eeba2a1192c3a12d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d91331074862f13d87f67b85eeba2a1192c3a12d", "html_url": "https://github.com/rust-lang/rust/commit/d91331074862f13d87f67b85eeba2a1192c3a12d"}], "stats": {"total": 84, "additions": 73, "deletions": 11}, "files": [{"sha": "e28029c4d9d23cd29532d7f8143c3f8c36ad7e23", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95d17711397d63425688d18140a58723caddff8e/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95d17711397d63425688d18140a58723caddff8e/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=95d17711397d63425688d18140a58723caddff8e", "patch": "@@ -286,6 +286,9 @@ pub fn test_opts(config: &Config) -> test::TestOpts {\n         test_shard: config.test_shard.clone(),\n         nocapture: false,\n         color: test::AutoColor,\n+        show_boxplot: false,\n+        boxplot_width: 50,\n+        show_all_stats: false,\n     }\n }\n "}, {"sha": "cb9119b0c3cdc43aeb1d2e9882c480da5c05c0a8", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 64, "deletions": 5, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/95d17711397d63425688d18140a58723caddff8e/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95d17711397d63425688d18140a58723caddff8e/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=95d17711397d63425688d18140a58723caddff8e", "patch": "@@ -286,6 +286,9 @@ pub struct TestOpts {\n     pub logfile: Option<Path>,\n     pub nocapture: bool,\n     pub color: ColorConfig,\n+    pub show_boxplot: bool,\n+    pub boxplot_width: uint,\n+    pub show_all_stats: bool,\n }\n \n impl TestOpts {\n@@ -303,6 +306,9 @@ impl TestOpts {\n             logfile: None,\n             nocapture: false,\n             color: AutoColor,\n+            show_boxplot: false,\n+            boxplot_width: 50,\n+            show_all_stats: false,\n         }\n     }\n }\n@@ -333,7 +339,10 @@ fn optgroups() -> Vec<getopts::OptGroup> {\n       getopts::optopt(\"\", \"color\", \"Configure coloring of output:\n             auto   = colorize if stdout is a tty and tests are run on serially (default);\n             always = always colorize output;\n-            never  = never colorize output;\", \"auto|always|never\"))\n+            never  = never colorize output;\", \"auto|always|never\"),\n+      getopts::optflag(\"\", \"boxplot\", \"Display a boxplot of the benchmark statistics\"),\n+      getopts::optopt(\"\", \"boxplot-width\", \"Set the boxplot width (default 50)\", \"WIDTH\"),\n+      getopts::optflag(\"\", \"stats\", \"Display the benchmark min, max, and quartiles\"))\n }\n \n fn usage(binary: &str) {\n@@ -424,6 +433,21 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n                                             v))),\n     };\n \n+    let show_boxplot = matches.opt_present(\"boxplot\");\n+    let boxplot_width = match matches.opt_str(\"boxplot-width\") {\n+        Some(width) => {\n+            match FromStr::from_str(width.as_slice()) {\n+                Some(width) => width,\n+                None => {\n+                    return Some(Err(format!(\"argument for --boxplot-width must be a uint\")));\n+                }\n+            }\n+        }\n+        None => 50,\n+    };\n+\n+    let show_all_stats = matches.opt_present(\"stats\");\n+\n     let test_opts = TestOpts {\n         filter: filter,\n         run_ignored: run_ignored,\n@@ -436,6 +460,9 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n         logfile: logfile,\n         nocapture: nocapture,\n         color: color,\n+        show_boxplot: show_boxplot,\n+        boxplot_width: boxplot_width,\n+        show_all_stats: show_all_stats,\n     };\n \n     Some(Ok(test_opts))\n@@ -486,6 +513,9 @@ struct ConsoleTestState<T> {\n     log_out: Option<File>,\n     out: OutputLocation<T>,\n     use_color: bool,\n+    show_boxplot: bool,\n+    boxplot_width: uint,\n+    show_all_stats: bool,\n     total: uint,\n     passed: uint,\n     failed: uint,\n@@ -512,6 +542,9 @@ impl<T: Writer> ConsoleTestState<T> {\n             out: out,\n             log_out: log_out,\n             use_color: use_color(opts),\n+            show_boxplot: opts.show_boxplot,\n+            boxplot_width: opts.boxplot_width,\n+            show_all_stats: opts.show_all_stats,\n             total: 0u,\n             passed: 0u,\n             failed: 0u,\n@@ -607,8 +640,31 @@ impl<T: Writer> ConsoleTestState<T> {\n             }\n             TrBench(ref bs) => {\n                 try!(self.write_bench());\n-                self.write_plain(format!(\": {}\",\n-                                         fmt_bench_samples(bs)).as_slice())\n+\n+                if self.show_boxplot {\n+                    let mut wr = Vec::new();\n+\n+                    try!(stats::write_boxplot(&mut wr, &bs.ns_iter_summ, self.boxplot_width));\n+\n+                    let s = String::from_utf8(wr).unwrap();\n+\n+                    try!(self.write_plain(format!(\": {}\", s).as_slice()));\n+                }\n+\n+                if self.show_all_stats {\n+                    let mut wr = Vec::new();\n+\n+                    try!(stats::write_5_number_summary(&mut wr, &bs.ns_iter_summ));\n+\n+                    let s = String::from_utf8(wr).unwrap();\n+\n+                    try!(self.write_plain(format!(\": {}\", s).as_slice()));\n+                } else {\n+                    try!(self.write_plain(format!(\": {}\",\n+                                                  fmt_bench_samples(bs)).as_slice()));\n+                }\n+\n+                Ok(())\n             }\n         });\n         self.write_plain(\"\\n\")\n@@ -681,14 +737,14 @@ impl<T: Writer> ConsoleTestState<T> {\n                 }\n                 Improvement(pct) => {\n                     improved += 1;\n-                    try!(self.write_plain(format!(\": {}\", *k).as_slice()));\n+                    try!(self.write_plain(format!(\": {} \", *k).as_slice()));\n                     try!(self.write_improved());\n                     try!(self.write_plain(format!(\" by {:.2}%\\n\",\n                                                   pct as f64).as_slice()));\n                 }\n                 Regression(pct) => {\n                     regressed += 1;\n-                    try!(self.write_plain(format!(\": {}\", *k).as_slice()));\n+                    try!(self.write_plain(format!(\": {} \", *k).as_slice()));\n                     try!(self.write_regressed());\n                     try!(self.write_plain(format!(\" by {:.2}%\\n\",\n                                                   pct as f64).as_slice()));\n@@ -860,6 +916,9 @@ fn should_sort_failures_before_printing_them() {\n         log_out: None,\n         out: Raw(Vec::new()),\n         use_color: false,\n+        show_boxplot: false,\n+        boxplot_width: 0,\n+        show_all_stats: false,\n         total: 0u,\n         passed: 0u,\n         failed: 0u,"}, {"sha": "c157fb10bd4a7d8167cd274858f5d09369e9ff24", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/95d17711397d63425688d18140a58723caddff8e/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95d17711397d63425688d18140a58723caddff8e/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=95d17711397d63425688d18140a58723caddff8e", "patch": "@@ -331,8 +331,8 @@ pub fn winsorize<T: Float + FromPrimitive>(samples: &mut [T], pct: T) {\n }\n \n /// Render writes the min, max and quartiles of the provided `Summary` to the provided `Writer`.\n-pub fn write_5_number_summary<T: Float + Show>(w: &mut io::Writer,\n-                                               s: &Summary<T>) -> io::IoResult<()> {\n+pub fn write_5_number_summary<W: Writer, T: Float + Show>(w: &mut W,\n+                                                          s: &Summary<T>) -> io::IoResult<()> {\n     let (q1,q2,q3) = s.quartiles;\n     write!(w, \"(min={}, q1={}, med={}, q3={}, max={})\",\n                      s.min,\n@@ -353,8 +353,8 @@ pub fn write_5_number_summary<T: Float + Show>(w: &mut io::Writer,\n /// ```{.ignore}\n ///   10 |        [--****#******----------]          | 40\n /// ```\n-pub fn write_boxplot<T: Float + Show + FromPrimitive>(\n-                     w: &mut io::Writer,\n+pub fn write_boxplot<W: Writer, T: Float + Show + FromPrimitive>(\n+                     w: &mut W,\n                      s: &Summary<T>,\n                      width_hint: uint)\n                       -> io::IoResult<()> {\n@@ -473,7 +473,7 @@ mod tests {\n         let summ2 = Summary::new(samples);\n \n         let mut w = io::stdout();\n-        let w = &mut w as &mut io::Writer;\n+        let w = &mut w;\n         (write!(w, \"\\n\")).unwrap();\n         write_5_number_summary(w, &summ2).unwrap();\n         (write!(w, \"\\n\")).unwrap();\n@@ -1028,7 +1028,7 @@ mod tests {\n     fn test_boxplot_nonpositive() {\n         fn t(s: &Summary<f64>, expected: String) {\n             let mut m = Vec::new();\n-            write_boxplot(&mut m as &mut io::Writer, s, 30).unwrap();\n+            write_boxplot(&mut m, s, 30).unwrap();\n             let out = String::from_utf8(m).unwrap();\n             assert_eq!(out, expected);\n         }"}]}