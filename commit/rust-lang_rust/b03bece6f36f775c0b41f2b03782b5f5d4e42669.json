{"sha": "b03bece6f36f775c0b41f2b03782b5f5d4e42669", "node_id": "C_kwDOAAsO6NoAKGIwM2JlY2U2ZjM2Zjc3NWMwYjQxZjJiMDM3ODJiNWY1ZDRlNDI2Njk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-14T10:49:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-14T10:49:12Z"}, "message": "Rollup merge of #102847 - joshtriplett:bugfix-impl-fd-traits-for-io-types, r=m-ou-se\n\nimpl AsFd and AsRawFd for io::{Stdin, Stdout, Stderr}, not the sys versions\n\nhttps://github.com/rust-lang/rust/pull/100892 implemented AsFd for the\nsys versions, rather than for the public types. Change the\nimplementations to apply to the public types.", "tree": {"sha": "64dec3fbd5befecb50510a8d06d1fab9d53f8e35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64dec3fbd5befecb50510a8d06d1fab9d53f8e35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b03bece6f36f775c0b41f2b03782b5f5d4e42669", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjST6oCRBK7hj4Ov3rIwAAcuUIABqarpH7nvGu6Q7jBTcC6tP3\nWye/v0z3cfLap/2XUVipDZMujEqeuMdxox7Eap5DNCLQvz1Z36P9aKirODrkYv2D\n8aacF/a9sm5YtrhHavWTgV1wAMqWspXdnvtC4Epg56QXV+umocTjAsVIz2+01gwX\nAbuJadx5NGp4m7NyFWoGI9UPd0n7kB93XuWasb7vDcA/dqXh+1DubGavwhdhLWZr\nRyxte73GmWgDnOq5oKx1kfhRRdNEiDAwtXwMAw7t9ZMTS6BdXgFQ13abfWTs513W\np/7vY1wW9E2ZACbDLZxNO67ADWCg28D68QEPT8RZmZw0pVMszDebWkX3+NF5pNM=\n=z2Uh\n-----END PGP SIGNATURE-----\n", "payload": "tree 64dec3fbd5befecb50510a8d06d1fab9d53f8e35\nparent 32717603f61a566ff0b8293ef3177cb7c4f50fa9\nparent ef68327de76d5f2bb6f9b2a6fa47b92fbf3ff7cc\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1665744552 +0530\ncommitter GitHub <noreply@github.com> 1665744552 +0530\n\nRollup merge of #102847 - joshtriplett:bugfix-impl-fd-traits-for-io-types, r=m-ou-se\n\nimpl AsFd and AsRawFd for io::{Stdin, Stdout, Stderr}, not the sys versions\n\nhttps://github.com/rust-lang/rust/pull/100892 implemented AsFd for the\nsys versions, rather than for the public types. Change the\nimplementations to apply to the public types.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b03bece6f36f775c0b41f2b03782b5f5d4e42669", "html_url": "https://github.com/rust-lang/rust/commit/b03bece6f36f775c0b41f2b03782b5f5d4e42669", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b03bece6f36f775c0b41f2b03782b5f5d4e42669/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32717603f61a566ff0b8293ef3177cb7c4f50fa9", "url": "https://api.github.com/repos/rust-lang/rust/commits/32717603f61a566ff0b8293ef3177cb7c4f50fa9", "html_url": "https://github.com/rust-lang/rust/commit/32717603f61a566ff0b8293ef3177cb7c4f50fa9"}, {"sha": "ef68327de76d5f2bb6f9b2a6fa47b92fbf3ff7cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef68327de76d5f2bb6f9b2a6fa47b92fbf3ff7cc", "html_url": "https://github.com/rust-lang/rust/commit/ef68327de76d5f2bb6f9b2a6fa47b92fbf3ff7cc"}], "stats": {"total": 152, "additions": 54, "deletions": 98}, "files": [{"sha": "9d758320cfcc68f20cd32331ae53cb08342f7588", "filename": "library/std/src/os/fd/owned.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b03bece6f36f775c0b41f2b03782b5f5d4e42669/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03bece6f36f775c0b41f2b03782b5f5d4e42669/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs?ref=b03bece6f36f775c0b41f2b03782b5f5d4e42669", "patch": "@@ -6,6 +6,7 @@\n use super::raw::{AsRawFd, FromRawFd, IntoRawFd, RawFd};\n use crate::fmt;\n use crate::fs;\n+use crate::io;\n use crate::marker::PhantomData;\n use crate::mem::forget;\n #[cfg(not(any(target_arch = \"wasm32\", target_env = \"sgx\")))]\n@@ -385,3 +386,54 @@ impl<T: AsFd> AsFd for Box<T> {\n         (**self).as_fd()\n     }\n }\n+\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n+impl AsFd for io::Stdin {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        unsafe { BorrowedFd::borrow_raw(0) }\n+    }\n+}\n+\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n+impl<'a> AsFd for io::StdinLock<'a> {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        // SAFETY: user code should not close stdin out from under the standard library\n+        unsafe { BorrowedFd::borrow_raw(0) }\n+    }\n+}\n+\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n+impl AsFd for io::Stdout {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        unsafe { BorrowedFd::borrow_raw(1) }\n+    }\n+}\n+\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n+impl<'a> AsFd for io::StdoutLock<'a> {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        // SAFETY: user code should not close stdout out from under the standard library\n+        unsafe { BorrowedFd::borrow_raw(1) }\n+    }\n+}\n+\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n+impl AsFd for io::Stderr {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        unsafe { BorrowedFd::borrow_raw(2) }\n+    }\n+}\n+\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n+impl<'a> AsFd for io::StderrLock<'a> {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        // SAFETY: user code should not close stderr out from under the standard library\n+        unsafe { BorrowedFd::borrow_raw(2) }\n+    }\n+}"}, {"sha": "b3626c564e86aa030089f814d9e95b9e49f3c367", "filename": "library/std/src/sys/unix/stdio.rs", "status": "modified", "additions": 1, "deletions": 49, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b03bece6f36f775c0b41f2b03782b5f5d4e42669/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03bece6f36f775c0b41f2b03782b5f5d4e42669/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstdio.rs?ref=b03bece6f36f775c0b41f2b03782b5f5d4e42669", "patch": "@@ -1,6 +1,6 @@\n use crate::io::{self, IoSlice, IoSliceMut};\n use crate::mem::ManuallyDrop;\n-use crate::os::unix::io::{AsFd, BorrowedFd, FromRawFd};\n+use crate::os::unix::io::FromRawFd;\n use crate::sys::fd::FileDesc;\n \n pub struct Stdin(());\n@@ -91,51 +91,3 @@ pub const STDIN_BUF_SIZE: usize = crate::sys_common::io::DEFAULT_BUF_SIZE;\n pub fn panic_output() -> Option<impl io::Write> {\n     Some(Stderr::new())\n }\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl AsFd for io::Stdin {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        unsafe { BorrowedFd::borrow_raw(libc::STDIN_FILENO) }\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl<'a> AsFd for io::StdinLock<'a> {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        unsafe { BorrowedFd::borrow_raw(libc::STDIN_FILENO) }\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl AsFd for io::Stdout {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        unsafe { BorrowedFd::borrow_raw(libc::STDOUT_FILENO) }\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl<'a> AsFd for io::StdoutLock<'a> {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        unsafe { BorrowedFd::borrow_raw(libc::STDOUT_FILENO) }\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl AsFd for io::Stderr {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        unsafe { BorrowedFd::borrow_raw(libc::STDERR_FILENO) }\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl<'a> AsFd for io::StderrLock<'a> {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        unsafe { BorrowedFd::borrow_raw(libc::STDERR_FILENO) }\n-    }\n-}"}, {"sha": "4cc0e4ed5a45a775f2a9879153fcd31b4e2b526d", "filename": "library/std/src/sys/wasi/stdio.rs", "status": "modified", "additions": 1, "deletions": 49, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b03bece6f36f775c0b41f2b03782b5f5d4e42669/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03bece6f36f775c0b41f2b03782b5f5d4e42669/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs?ref=b03bece6f36f775c0b41f2b03782b5f5d4e42669", "patch": "@@ -4,7 +4,7 @@ use super::fd::WasiFd;\n use crate::io::{self, IoSlice, IoSliceMut};\n use crate::mem::ManuallyDrop;\n use crate::os::raw;\n-use crate::os::wasi::io::{AsFd, AsRawFd, BorrowedFd, FromRawFd};\n+use crate::os::wasi::io::{AsRawFd, FromRawFd};\n \n pub struct Stdin;\n pub struct Stdout;\n@@ -23,22 +23,6 @@ impl AsRawFd for Stdin {\n     }\n }\n \n-impl AsFd for Stdin {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        unsafe { BorrowedFd::borrow_raw(0) }\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl<'a> AsFd for io::StdinLock<'a> {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        // SAFETY: user code should not close stdin out from under the standard library\n-        unsafe { BorrowedFd::borrow_raw(0) }\n-    }\n-}\n-\n impl io::Read for Stdin {\n     fn read(&mut self, data: &mut [u8]) -> io::Result<usize> {\n         self.read_vectored(&mut [IoSliceMut::new(data)])\n@@ -67,22 +51,6 @@ impl AsRawFd for Stdout {\n     }\n }\n \n-impl AsFd for Stdout {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        unsafe { BorrowedFd::borrow_raw(1) }\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl<'a> AsFd for io::StdoutLock<'a> {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        // SAFETY: user code should not close stdout out from under the standard library\n-        unsafe { BorrowedFd::borrow_raw(1) }\n-    }\n-}\n-\n impl io::Write for Stdout {\n     fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n         self.write_vectored(&[IoSlice::new(data)])\n@@ -114,22 +82,6 @@ impl AsRawFd for Stderr {\n     }\n }\n \n-impl AsFd for Stderr {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        unsafe { BorrowedFd::borrow_raw(2) }\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl<'a> AsFd for io::StderrLock<'a> {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        // SAFETY: user code should not close stderr out from under the standard library\n-        unsafe { BorrowedFd::borrow_raw(2) }\n-    }\n-}\n-\n impl io::Write for Stderr {\n     fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n         self.write_vectored(&[IoSlice::new(data)])"}]}