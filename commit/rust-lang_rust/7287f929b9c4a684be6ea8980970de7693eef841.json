{"sha": "7287f929b9c4a684be6ea8980970de7693eef841", "node_id": "C_kwDOAAsO6NoAKDcyODdmOTI5YjljNGE2ODRiZTZlYTg5ODA5NzBkZTc2OTNlZWY4NDE", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-02-17T22:19:59Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2022-03-24T05:31:57Z"}, "message": "Emit structured suggestions for field accesses too", "tree": {"sha": "44eb3b06dac6e11e834d02e5082015fc8af4fe70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44eb3b06dac6e11e834d02e5082015fc8af4fe70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7287f929b9c4a684be6ea8980970de7693eef841", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7287f929b9c4a684be6ea8980970de7693eef841", "html_url": "https://github.com/rust-lang/rust/commit/7287f929b9c4a684be6ea8980970de7693eef841", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7287f929b9c4a684be6ea8980970de7693eef841/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67a9adbb541f7c62e993d05ff3687a8695d5d349", "url": "https://api.github.com/repos/rust-lang/rust/commits/67a9adbb541f7c62e993d05ff3687a8695d5d349", "html_url": "https://github.com/rust-lang/rust/commit/67a9adbb541f7c62e993d05ff3687a8695d5d349"}], "stats": {"total": 44, "additions": 20, "deletions": 24}, "files": [{"sha": "a8a1842f3771dc802b07eede0a120644551c2df0", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7287f929b9c4a684be6ea8980970de7693eef841/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7287f929b9c4a684be6ea8980970de7693eef841/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=7287f929b9c4a684be6ea8980970de7693eef841", "patch": "@@ -1266,45 +1266,36 @@ impl<'a> Parser<'a> {\n             Ok(base)\n         };\n \n-        let ExprKind::Path(_, path) = &base.kind\n-            else { return help_base_case(err, base) };\n-        let [segment] = path.segments.as_slice()\n-            else { return help_base_case(err, base) };\n-        let ident = segment.ident;\n-\n         // (pre, post)\n         let spans = match kind.fixity {\n-            UnaryFixity::Pre => (op_span, ident.span.shrink_to_hi()),\n-            UnaryFixity::Post => (ident.span.shrink_to_lo(), op_span),\n+            UnaryFixity::Pre => (op_span, base.span.shrink_to_hi()),\n+            UnaryFixity::Post => (base.span.shrink_to_lo(), op_span),\n         };\n \n-        if ident.is_reserved() {\n-            return help_base_case(err, base);\n-        }\n-\n         if kind.standalone {\n-            self.inc_dec_standalone_recovery(base, err, kind, spans)\n+            self.inc_dec_standalone_recovery(err, kind, spans)\n         } else {\n+            let Ok(base_src) = self.span_to_snippet(base.span)\n+                else { return help_base_case(err, base) };\n             match kind.fixity {\n-                UnaryFixity::Pre => self.prefix_inc_dec_suggest(base, err, kind, ident, spans),\n-                UnaryFixity::Post => self.postfix_inc_dec_suggest(base, err, kind, ident, spans),\n+                UnaryFixity::Pre => self.prefix_inc_dec_suggest(base_src, err, kind, spans),\n+                UnaryFixity::Post => self.postfix_inc_dec_suggest(base_src, err, kind, spans),\n             }\n         }\n     }\n \n     fn prefix_inc_dec_suggest(\n         &mut self,\n-        _base: P<Expr>,\n+        base_src: String,\n         mut err: DiagnosticBuilder<'a>,\n         kind: IncDecRecovery,\n-        ident: Ident,\n         (pre_span, post_span): (Span, Span),\n     ) -> PResult<'a, P<Expr>> {\n         err.multipart_suggestion(\n             &format!(\"use `{}= 1` instead\", kind.op.chr()),\n             vec![\n                 (pre_span, \"{ \".to_string()),\n-                (post_span, format!(\" {}= 1; {} }}\", kind.op.chr(), ident)),\n+                (post_span, format!(\" {}= 1; {} }}\", kind.op.chr(), base_src)),\n             ],\n             Applicability::MachineApplicable,\n         );\n@@ -1313,17 +1304,16 @@ impl<'a> Parser<'a> {\n \n     fn postfix_inc_dec_suggest(\n         &mut self,\n-        _base: P<Expr>,\n+        base_src: String,\n         mut err: DiagnosticBuilder<'a>,\n         kind: IncDecRecovery,\n-        ident: Ident,\n         (pre_span, post_span): (Span, Span),\n     ) -> PResult<'a, P<Expr>> {\n         err.multipart_suggestion(\n             &format!(\"use `{}= 1` instead\", kind.op.chr()),\n             vec![\n                 (pre_span, \"{ let tmp = \".to_string()),\n-                (post_span, format!(\"; {} {}= 1; tmp }}\", ident, kind.op.chr())),\n+                (post_span, format!(\"; {} {}= 1; tmp }}\", base_src, kind.op.chr())),\n             ],\n             Applicability::MachineApplicable,\n         );\n@@ -1332,7 +1322,6 @@ impl<'a> Parser<'a> {\n \n     fn inc_dec_standalone_recovery(\n         &mut self,\n-        _base: P<Expr>,\n         mut err: DiagnosticBuilder<'a>,\n         kind: IncDecRecovery,\n         (pre_span, post_span): (Span, Span),"}, {"sha": "3110e2427123507486f9ab24215d2a7c48be2bcc", "filename": "src/test/ui/parser/increment-notfixed.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7287f929b9c4a684be6ea8980970de7693eef841/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7287f929b9c4a684be6ea8980970de7693eef841/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.stderr?ref=7287f929b9c4a684be6ea8980970de7693eef841", "patch": "@@ -4,15 +4,22 @@ error: Rust has no postfix increment operator\n LL |     foo.bar.qux++;\n    |                ^^ not a valid postfix operator\n    |\n-   = help: use `+= 1` instead\n+help: use `+= 1` instead\n+   |\n+LL |     { let tmp = foo.bar.qux; foo.bar.qux += 1; tmp };\n+   |     +++++++++++            ~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: Rust has no prefix increment operator\n   --> $DIR/increment-notfixed.rs:18:5\n    |\n LL |     ++foo.bar.qux;\n    |     ^^ not a valid prefix operator\n    |\n-   = help: use `+= 1` instead\n+help: use `+= 1` instead\n+   |\n+LL -     ++foo.bar.qux;\n+LL +     foo.bar.qux += 1;\n+   | \n \n error: aborting due to 2 previous errors\n "}]}