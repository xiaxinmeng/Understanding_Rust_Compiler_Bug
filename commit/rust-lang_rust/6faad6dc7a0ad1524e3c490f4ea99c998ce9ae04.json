{"sha": "6faad6dc7a0ad1524e3c490f4ea99c998ce9ae04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYWFkNmRjN2EwYWQxNTI0ZTNjNDkwZjRlYTk5Yzk5OGNlOWFlMDQ=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-01-13T16:58:37Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-01-14T16:18:14Z"}, "message": "Untangle ZST validation from integer validation and generalize it to all zsts", "tree": {"sha": "df26f90db4a233b26bc9b771df8bd65a3b574666", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df26f90db4a233b26bc9b771df8bd65a3b574666"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6faad6dc7a0ad1524e3c490f4ea99c998ce9ae04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6faad6dc7a0ad1524e3c490f4ea99c998ce9ae04", "html_url": "https://github.com/rust-lang/rust/commit/6faad6dc7a0ad1524e3c490f4ea99c998ce9ae04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6faad6dc7a0ad1524e3c490f4ea99c998ce9ae04/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb6122db3fa22031c48ca6b332fc856b8d098027", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb6122db3fa22031c48ca6b332fc856b8d098027", "html_url": "https://github.com/rust-lang/rust/commit/cb6122db3fa22031c48ca6b332fc856b8d098027"}], "stats": {"total": 18, "additions": 7, "deletions": 11}, "files": [{"sha": "6934ec0bdb6aa56aad958961a8fbf5fc9552e0ac", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6faad6dc7a0ad1524e3c490f4ea99c998ce9ae04/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6faad6dc7a0ad1524e3c490f4ea99c998ce9ae04/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=6faad6dc7a0ad1524e3c490f4ea99c998ce9ae04", "patch": "@@ -587,12 +587,6 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                     // padding.\n                     match tys.kind {\n                         ty::Int(..) | ty::Uint(..) | ty::Float(..) => true,\n-                        ty::Tuple(tys) if tys.len() == 0 => true,\n-                        ty::Adt(adt_def, _)\n-                            if adt_def.is_struct() && adt_def.all_fields().next().is_none() =>\n-                        {\n-                            true\n-                        }\n                         _ => false,\n                     }\n                 } =>\n@@ -609,11 +603,6 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                 }\n                 // This is the element type size.\n                 let layout = self.ecx.layout_of(tys)?;\n-                // Empty tuples and fieldless structs (the only ZSTs that allow reaching this code)\n-                // have no data to be checked.\n-                if layout.is_zst() {\n-                    return Ok(());\n-                }\n                 // This is the size in bytes of the whole array.\n                 let size = layout.size * len;\n                 // Size is not 0, get a pointer.\n@@ -656,6 +645,13 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                     }\n                 }\n             }\n+            // Fast path for arrays and slices of ZSTs. We only need to check a single ZST element\n+            // of an array and not all of them, because there's only a single value of a specific\n+            // ZST type, so either validation fails for all elements or none.\n+            ty::Array(tys, ..) | ty::Slice(tys) if self.ecx.layout_of(tys)?.is_zst() => {\n+                // Validate just the first element\n+                self.walk_aggregate(op, fields.take(1))?\n+            }\n             _ => {\n                 self.walk_aggregate(op, fields)? // default handler\n             }"}]}