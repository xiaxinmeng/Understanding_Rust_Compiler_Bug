{"sha": "d2b8ca9b521af2f947fd2a7d5e803b9045b2e6c0", "node_id": "C_kwDOAAsO6NoAKGQyYjhjYTliNTIxYWYyZjk0N2ZkMmE3ZDVlODAzYjkwNDViMmU2YzA", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-25T14:43:04Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-10-25T14:43:49Z"}, "message": "fix: Implement most proc_macro span handling for other ABIs", "tree": {"sha": "608570f1dbe2a8faf1fcab0990396c1bce32d45b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/608570f1dbe2a8faf1fcab0990396c1bce32d45b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2b8ca9b521af2f947fd2a7d5e803b9045b2e6c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2b8ca9b521af2f947fd2a7d5e803b9045b2e6c0", "html_url": "https://github.com/rust-lang/rust/commit/d2b8ca9b521af2f947fd2a7d5e803b9045b2e6c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2b8ca9b521af2f947fd2a7d5e803b9045b2e6c0/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "142b6dc650deed819d52602f2a30105d668d7308", "url": "https://api.github.com/repos/rust-lang/rust/commits/142b6dc650deed819d52602f2a30105d668d7308", "html_url": "https://github.com/rust-lang/rust/commit/142b6dc650deed819d52602f2a30105d668d7308"}], "stats": {"total": 82, "additions": 40, "deletions": 42}, "files": [{"sha": "d3d021d808f025435d7d37c611cbf61d13781519", "filename": "crates/proc_macro_srv/src/abis/abi_1_47/rustc_server.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d2b8ca9b521af2f947fd2a7d5e803b9045b2e6c0/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_47%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2b8ca9b521af2f947fd2a7d5e803b9045b2e6c0/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_47%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_47%2Frustc_server.rs?ref=d2b8ca9b521af2f947fd2a7d5e803b9045b2e6c0", "patch": "@@ -423,19 +423,20 @@ impl server::Group for Rustc {\n         group.delimiter.map(|it| it.id).unwrap_or_else(tt::TokenId::unspecified)\n     }\n \n-    fn set_span(&mut self, _group: &mut Self::Group, _span: Self::Span) {\n-        // FIXME handle span\n+    fn set_span(&mut self, group: &mut Self::Group, span: Self::Span) {\n+        if let Some(delim) = &mut group.delimiter {\n+            delim.id = span;\n+        }\n     }\n \n-    fn span_open(&mut self, _group: &Self::Group) -> Self::Span {\n-        // FIXME handle span\n-        // MySpan(self.span_interner.intern(&MySpanData(group.span_open())))\n-        tt::TokenId::unspecified()\n+    fn span_open(&mut self, group: &Self::Group) -> Self::Span {\n+        // FIXME we only store one `TokenId` for the delimiters\n+        group.delimiter.map(|it| it.id).unwrap_or_else(tt::TokenId::unspecified)\n     }\n \n-    fn span_close(&mut self, _group: &Self::Group) -> Self::Span {\n-        // FIXME handle span\n-        tt::TokenId::unspecified()\n+    fn span_close(&mut self, group: &Self::Group) -> Self::Span {\n+        // FIXME we only store one `TokenId` for the delimiters\n+        group.delimiter.map(|it| it.id).unwrap_or_else(tt::TokenId::unspecified)\n     }\n }\n \n@@ -453,13 +454,11 @@ impl server::Punct for Rustc {\n     fn spacing(&mut self, punct: Self::Punct) -> bridge::Spacing {\n         spacing_to_external(punct.spacing)\n     }\n-    fn span(&mut self, _punct: Self::Punct) -> Self::Span {\n-        // FIXME handle span\n-        tt::TokenId::unspecified()\n+    fn span(&mut self, punct: Self::Punct) -> Self::Span {\n+        punct.id\n     }\n-    fn with_span(&mut self, punct: Self::Punct, _span: Self::Span) -> Self::Punct {\n-        // FIXME handle span\n-        punct\n+    fn with_span(&mut self, punct: Self::Punct, span: Self::Span) -> Self::Punct {\n+        tt::Punct { id: span, ..punct }\n     }\n }\n \n@@ -473,13 +472,13 @@ impl server::Ident for Rustc {\n         )\n     }\n \n-    fn span(&mut self, _ident: Self::Ident) -> Self::Span {\n-        // FIXME handle span\n-        tt::TokenId::unspecified()\n+    fn span(&mut self, ident: Self::Ident) -> Self::Span {\n+        self.ident_interner.get(ident.0).0.id\n     }\n-    fn with_span(&mut self, ident: Self::Ident, _span: Self::Span) -> Self::Ident {\n-        // FIXME handle span\n-        ident\n+    fn with_span(&mut self, ident: Self::Ident, span: Self::Span) -> Self::Ident {\n+        let data = self.ident_interner.get(ident.0);\n+        let new = IdentData(tt::Ident { id: span, ..data.0.clone() });\n+        IdentId(self.ident_interner.intern(&new))\n     }\n }\n "}, {"sha": "f8626c5f62f3eafa7e4c0ac9ad5d37f715e09bdd", "filename": "crates/proc_macro_srv/src/abis/abi_1_55/rustc_server.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d2b8ca9b521af2f947fd2a7d5e803b9045b2e6c0/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_55%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2b8ca9b521af2f947fd2a7d5e803b9045b2e6c0/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_55%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_55%2Frustc_server.rs?ref=d2b8ca9b521af2f947fd2a7d5e803b9045b2e6c0", "patch": "@@ -423,19 +423,20 @@ impl server::Group for Rustc {\n         group.delimiter.map(|it| it.id).unwrap_or_else(tt::TokenId::unspecified)\n     }\n \n-    fn set_span(&mut self, _group: &mut Self::Group, _span: Self::Span) {\n-        // FIXME handle span\n+    fn set_span(&mut self, group: &mut Self::Group, span: Self::Span) {\n+        if let Some(delim) = &mut group.delimiter {\n+            delim.id = span;\n+        }\n     }\n \n-    fn span_open(&mut self, _group: &Self::Group) -> Self::Span {\n-        // FIXME handle span\n-        // MySpan(self.span_interner.intern(&MySpanData(group.span_open())))\n-        tt::TokenId::unspecified()\n+    fn span_open(&mut self, group: &Self::Group) -> Self::Span {\n+        // FIXME we only store one `TokenId` for the delimiters\n+        group.delimiter.map(|it| it.id).unwrap_or_else(tt::TokenId::unspecified)\n     }\n \n-    fn span_close(&mut self, _group: &Self::Group) -> Self::Span {\n-        // FIXME handle span\n-        tt::TokenId::unspecified()\n+    fn span_close(&mut self, group: &Self::Group) -> Self::Span {\n+        // FIXME we only store one `TokenId` for the delimiters\n+        group.delimiter.map(|it| it.id).unwrap_or_else(tt::TokenId::unspecified)\n     }\n }\n \n@@ -453,13 +454,11 @@ impl server::Punct for Rustc {\n     fn spacing(&mut self, punct: Self::Punct) -> bridge::Spacing {\n         spacing_to_external(punct.spacing)\n     }\n-    fn span(&mut self, _punct: Self::Punct) -> Self::Span {\n-        // FIXME handle span\n-        tt::TokenId::unspecified()\n+    fn span(&mut self, punct: Self::Punct) -> Self::Span {\n+        punct.id\n     }\n-    fn with_span(&mut self, punct: Self::Punct, _span: Self::Span) -> Self::Punct {\n-        // FIXME handle span\n-        punct\n+    fn with_span(&mut self, punct: Self::Punct, span: Self::Span) -> Self::Punct {\n+        tt::Punct { id: span, ..punct }\n     }\n }\n \n@@ -473,13 +472,13 @@ impl server::Ident for Rustc {\n         )\n     }\n \n-    fn span(&mut self, _ident: Self::Ident) -> Self::Span {\n-        // FIXME handle span\n-        tt::TokenId::unspecified()\n+    fn span(&mut self, ident: Self::Ident) -> Self::Span {\n+        self.ident_interner.get(ident.0).0.id\n     }\n-    fn with_span(&mut self, ident: Self::Ident, _span: Self::Span) -> Self::Ident {\n-        // FIXME handle span\n-        ident\n+    fn with_span(&mut self, ident: Self::Ident, span: Self::Span) -> Self::Ident {\n+        let data = self.ident_interner.get(ident.0);\n+        let new = IdentData(tt::Ident { id: span, ..data.0.clone() });\n+        IdentId(self.ident_interner.intern(&new))\n     }\n }\n "}]}