{"sha": "4104596251818f4f588051c7a8172ca9f5a195bf", "node_id": "C_kwDOAAsO6NoAKDQxMDQ1OTYyNTE4MThmNGY1ODgwNTFjN2E4MTcyY2E5ZjVhMTk1YmY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-20T08:18:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-20T08:18:07Z"}, "message": "Auto merge of #98284 - JohnTitor:rollup-7lbs143, r=JohnTitor\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #98183 (Fix pretty printing of empty bound lists in where-clause)\n - #98268 (Improve `lifetime arguments are not allowed on` error message)\n - #98273 (Fix minor documentation typo)\n - #98274 (Minor improvements on error for `Self` type in items that don't allow it)\n - #98281 (Fix typo in `HashMap::drain` docs)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "bfb15d753508e3b53eb1448127441d8e574c9b36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfb15d753508e3b53eb1448127441d8e574c9b36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4104596251818f4f588051c7a8172ca9f5a195bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4104596251818f4f588051c7a8172ca9f5a195bf", "html_url": "https://github.com/rust-lang/rust/commit/4104596251818f4f588051c7a8172ca9f5a195bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4104596251818f4f588051c7a8172ca9f5a195bf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5c039cdb7431ddf3653c582b98ab6eb9af0701b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c039cdb7431ddf3653c582b98ab6eb9af0701b", "html_url": "https://github.com/rust-lang/rust/commit/a5c039cdb7431ddf3653c582b98ab6eb9af0701b"}, {"sha": "66dbc3fda7b454592150f54c4a734f94309e9a13", "url": "https://api.github.com/repos/rust-lang/rust/commits/66dbc3fda7b454592150f54c4a734f94309e9a13", "html_url": "https://github.com/rust-lang/rust/commit/66dbc3fda7b454592150f54c4a734f94309e9a13"}], "stats": {"total": 405, "additions": 265, "deletions": 140}, "files": [{"sha": "ad8dbfd506d212f32d9931d945995a597f0e515d", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 49, "deletions": 44, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -814,7 +814,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n     }\n \n     fn bounds_to_string(&self, bounds: &[ast::GenericBound]) -> String {\n-        Self::to_string(|s| s.print_type_bounds(\"\", bounds))\n+        Self::to_string(|s| s.print_type_bounds(bounds))\n     }\n \n     fn pat_to_string(&self, pat: &ast::Pat) -> String {\n@@ -991,7 +991,12 @@ impl<'a> State<'a> {\n                     Term::Const(c) => self.print_expr_anon_const(c, &[]),\n                 }\n             }\n-            ast::AssocConstraintKind::Bound { bounds } => self.print_type_bounds(\":\", &*bounds),\n+            ast::AssocConstraintKind::Bound { bounds } => {\n+                if !bounds.is_empty() {\n+                    self.word_nbsp(\":\");\n+                    self.print_type_bounds(&bounds);\n+                }\n+            }\n         }\n     }\n \n@@ -1045,11 +1050,14 @@ impl<'a> State<'a> {\n             }\n             ast::TyKind::Path(Some(ref qself), ref path) => self.print_qpath(path, qself, false),\n             ast::TyKind::TraitObject(ref bounds, syntax) => {\n-                let prefix = if syntax == ast::TraitObjectSyntax::Dyn { \"dyn\" } else { \"\" };\n-                self.print_type_bounds(prefix, &bounds);\n+                if syntax == ast::TraitObjectSyntax::Dyn {\n+                    self.word_nbsp(\"dyn\");\n+                }\n+                self.print_type_bounds(bounds);\n             }\n             ast::TyKind::ImplTrait(_, ref bounds) => {\n-                self.print_type_bounds(\"impl\", &bounds);\n+                self.word_nbsp(\"impl\");\n+                self.print_type_bounds(bounds);\n             }\n             ast::TyKind::Array(ref ty, ref length) => {\n                 self.word(\"[\");\n@@ -1549,29 +1557,24 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    pub fn print_type_bounds(&mut self, prefix: &'static str, bounds: &[ast::GenericBound]) {\n-        if !bounds.is_empty() {\n-            self.word(prefix);\n-            let mut first = true;\n-            for bound in bounds {\n-                if !(first && prefix.is_empty()) {\n-                    self.nbsp();\n-                }\n-                if first {\n-                    first = false;\n-                } else {\n-                    self.word_space(\"+\");\n-                }\n+    pub fn print_type_bounds(&mut self, bounds: &[ast::GenericBound]) {\n+        let mut first = true;\n+        for bound in bounds {\n+            if first {\n+                first = false;\n+            } else {\n+                self.nbsp();\n+                self.word_space(\"+\");\n+            }\n \n-                match bound {\n-                    GenericBound::Trait(tref, modifier) => {\n-                        if modifier == &TraitBoundModifier::Maybe {\n-                            self.word(\"?\");\n-                        }\n-                        self.print_poly_trait_ref(tref);\n+            match bound {\n+                GenericBound::Trait(tref, modifier) => {\n+                    if modifier == &TraitBoundModifier::Maybe {\n+                        self.word(\"?\");\n                     }\n-                    GenericBound::Outlives(lt) => self.print_lifetime(*lt),\n+                    self.print_poly_trait_ref(tref);\n                 }\n+                GenericBound::Outlives(lt) => self.print_lifetime(*lt),\n             }\n         }\n     }\n@@ -1580,22 +1583,14 @@ impl<'a> State<'a> {\n         self.print_name(lifetime.ident.name)\n     }\n \n-    pub(crate) fn print_lifetime_bounds(\n-        &mut self,\n-        lifetime: ast::Lifetime,\n-        bounds: &ast::GenericBounds,\n-    ) {\n-        self.print_lifetime(lifetime);\n-        if !bounds.is_empty() {\n-            self.word(\": \");\n-            for (i, bound) in bounds.iter().enumerate() {\n-                if i != 0 {\n-                    self.word(\" + \");\n-                }\n-                match bound {\n-                    ast::GenericBound::Outlives(lt) => self.print_lifetime(*lt),\n-                    _ => panic!(),\n-                }\n+    pub(crate) fn print_lifetime_bounds(&mut self, bounds: &ast::GenericBounds) {\n+        for (i, bound) in bounds.iter().enumerate() {\n+            if i != 0 {\n+                self.word(\" + \");\n+            }\n+            match bound {\n+                ast::GenericBound::Outlives(lt) => self.print_lifetime(*lt),\n+                _ => panic!(),\n             }\n         }\n     }\n@@ -1613,11 +1608,18 @@ impl<'a> State<'a> {\n             match param.kind {\n                 ast::GenericParamKind::Lifetime => {\n                     let lt = ast::Lifetime { id: param.id, ident: param.ident };\n-                    s.print_lifetime_bounds(lt, &param.bounds)\n+                    s.print_lifetime(lt);\n+                    if !param.bounds.is_empty() {\n+                        s.word_nbsp(\":\");\n+                        s.print_lifetime_bounds(&param.bounds)\n+                    }\n                 }\n                 ast::GenericParamKind::Type { ref default } => {\n                     s.print_ident(param.ident);\n-                    s.print_type_bounds(\":\", &param.bounds);\n+                    if !param.bounds.is_empty() {\n+                        s.word_nbsp(\":\");\n+                        s.print_type_bounds(&param.bounds);\n+                    }\n                     if let Some(ref default) = default {\n                         s.space();\n                         s.word_space(\"=\");\n@@ -1630,7 +1632,10 @@ impl<'a> State<'a> {\n                     s.space();\n                     s.word_space(\":\");\n                     s.print_type(ty);\n-                    s.print_type_bounds(\":\", &param.bounds);\n+                    if !param.bounds.is_empty() {\n+                        s.word_nbsp(\":\");\n+                        s.print_type_bounds(&param.bounds);\n+                    }\n                     if let Some(ref default) = default {\n                         s.space();\n                         s.word_space(\"=\");"}, {"sha": "f1caf22f3640fc9ced4e03f4df36e955e1ff58de", "filename": "compiler/rustc_ast_pretty/src/pprust/state/item.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -114,7 +114,10 @@ impl<'a> State<'a> {\n         self.word_space(\"type\");\n         self.print_ident(ident);\n         self.print_generic_params(&generics.params);\n-        self.print_type_bounds(\":\", bounds);\n+        if !bounds.is_empty() {\n+            self.word_nbsp(\":\");\n+            self.print_type_bounds(bounds);\n+        }\n         self.print_where_clause_parts(where_clauses.0.0, before_predicates);\n         if let Some(ty) = ty {\n             self.space();\n@@ -320,7 +323,10 @@ impl<'a> State<'a> {\n                         real_bounds.push(b.clone());\n                     }\n                 }\n-                self.print_type_bounds(\":\", &real_bounds);\n+                if !real_bounds.is_empty() {\n+                    self.word_nbsp(\":\");\n+                    self.print_type_bounds(&real_bounds);\n+                }\n                 self.print_where_clause(&generics.where_clause);\n                 self.word(\" \");\n                 self.bopen();\n@@ -347,7 +353,10 @@ impl<'a> State<'a> {\n                     }\n                 }\n                 self.nbsp();\n-                self.print_type_bounds(\"=\", &real_bounds);\n+                if !real_bounds.is_empty() {\n+                    self.word_nbsp(\"=\");\n+                    self.print_type_bounds(&real_bounds);\n+                }\n                 self.print_where_clause(&generics.where_clause);\n                 self.word(\";\");\n                 self.end(); // end inner head-block\n@@ -618,14 +627,23 @@ impl<'a> State<'a> {\n             }) => {\n                 self.print_formal_generic_params(bound_generic_params);\n                 self.print_type(bounded_ty);\n-                self.print_type_bounds(\":\", bounds);\n+                self.word(\":\");\n+                if !bounds.is_empty() {\n+                    self.nbsp();\n+                    self.print_type_bounds(bounds);\n+                }\n             }\n             ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate {\n                 lifetime,\n                 bounds,\n                 ..\n             }) => {\n-                self.print_lifetime_bounds(*lifetime, bounds);\n+                self.print_lifetime(*lifetime);\n+                self.word(\":\");\n+                if !bounds.is_empty() {\n+                    self.nbsp();\n+                    self.print_lifetime_bounds(bounds);\n+                }\n             }\n             ast::WherePredicate::EqPredicate(ast::WhereEqPredicate { lhs_ty, rhs_ty, .. }) => {\n                 self.print_type(lhs_ty);"}, {"sha": "ba325d704228da3d92de52cddf0c8b1c08d37774", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -1355,7 +1355,10 @@ impl<'a> Parser<'a> {\n                     s.print_mutability(mut_ty.mutbl, false);\n                     s.popen();\n                     s.print_type(&mut_ty.ty);\n-                    s.print_type_bounds(\" +\", &bounds);\n+                    if !bounds.is_empty() {\n+                        s.word(\" + \");\n+                        s.print_type_bounds(&bounds);\n+                    }\n                     s.pclose()\n                 });\n "}, {"sha": "86dbcba6c0d51226349ee4e886cab919dadb0933", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -1914,6 +1914,8 @@ impl<'a> Resolver<'a> {\n                 };\n             }\n             (msg, None)\n+        } else if ident.name == kw::SelfUpper {\n+            (\"`Self` is only available in impls, traits, and type definitions\".to_string(), None)\n         } else if ident.name.as_str().chars().next().map_or(false, |c| c.is_ascii_uppercase()) {\n             // Check whether the name refers to an item in the value namespace.\n             let binding = if let Some(ribs) = ribs {"}, {"sha": "27bce60df2b9b7e19244931208b6286778739f57", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -332,6 +332,16 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 span,\n                 \"`Self` is only available in impls, traits, and type definitions\".to_string(),\n             );\n+            if let Some(item_kind) = self.diagnostic_metadata.current_item {\n+                err.span_label(\n+                    item_kind.ident.span,\n+                    format!(\n+                        \"`Self` not allowed in {} {}\",\n+                        item_kind.kind.article(),\n+                        item_kind.kind.descr()\n+                    ),\n+                );\n+            }\n             return (err, Vec::new());\n         }\n         if is_self_value(path, ns) {\n@@ -389,6 +399,15 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         );\n                     }\n                 }\n+            } else if let Some(item_kind) = self.diagnostic_metadata.current_item {\n+                err.span_label(\n+                    item_kind.ident.span,\n+                    format!(\n+                        \"`self` not allowed in {} {}\",\n+                        item_kind.kind.article(),\n+                        item_kind.kind.descr()\n+                    ),\n+                );\n             }\n             return (err, Vec::new());\n         }\n@@ -1788,7 +1807,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         path: &[Segment],\n     ) -> Option<(Span, &'static str, String, Applicability)> {\n         let (ident, span) = match path {\n-            [segment] if !segment.has_generic_args => {\n+            [segment] if !segment.has_generic_args && segment.ident.name != kw::SelfUpper => {\n                 (segment.ident.to_string(), segment.ident.span)\n             }\n             _ => return None,"}, {"sha": "44ff3fd73061e87e8be7db9311b93e4e7ed7221e", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -1,4 +1,4 @@\n-//! This crates defines the trait resolution method.\n+//! This crate defines the trait resolution method.\n //!\n //! - **Traits.** Trait resolution is implemented in the `traits` module.\n //!"}, {"sha": "4641b36aad1d7e992c436b3b8fe856ab8807ef70", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -2195,8 +2195,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 \"{kind} arguments are not allowed on {this_type}\",\n             );\n             err.span_label(last_span, format!(\"{kind} argument{s} not allowed\"));\n-            for (_, span) in types_and_spans {\n-                err.span_label(span, \"not allowed on this\");\n+            for (what, span) in types_and_spans {\n+                err.span_label(span, format!(\"not allowed on {what}\"));\n             }\n             extend(&mut err);\n             err.emit();"}, {"sha": "237c5ee73409eacd6c373aa0d03abfd5b9b864a4", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -588,7 +588,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     ///\n     /// If the returned iterator is dropped before being fully consumed, it\n     /// drops the remaining key-value pairs. The returned iterator keeps a\n-    /// mutable borrow on the vector to optimize its implementation.\n+    /// mutable borrow on the map to optimize its implementation.\n     ///\n     /// # Examples\n     ///"}, {"sha": "4183799457b7fb0c744dc321fed0d1a92ee87185", "filename": "src/test/pretty/where-clauses.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fpretty%2Fwhere-clauses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fpretty%2Fwhere-clauses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fwhere-clauses.rs?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -2,4 +2,7 @@\n \n fn f<'a, 'b, T>(t: T) -> isize where T: 'a, 'a: 'b, T: Eq { 0 }\n \n+// This is legal syntax, sometimes generated by macros. `where T: $($bound+)*`\n+fn zero_bounds<'a, T>() where 'a:, T: {}\n+\n fn main() {}"}, {"sha": "e83bbb5b60d7e9d239a31092c413ab24cb7270b7", "filename": "src/test/ui/derives/issue-97343.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Fderives%2Fissue-97343.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Fderives%2Fissue-97343.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fissue-97343.stderr?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -4,7 +4,7 @@ error[E0109]: type arguments are not allowed on type parameter `Irrelevant`\n LL | #[derive(Debug)]\n    |          -----\n    |          |\n-   |          not allowed on this\n+   |          not allowed on type parameter `Irrelevant`\n    |          in this derive macro expansion\n LL | pub struct Irrelevant<Irrelevant> {\n    |                       ^^^^^^^^^^ type argument not allowed"}, {"sha": "da00fdde6bd0af5126a8305d4399a779b026c293", "filename": "src/test/ui/error-codes/E0109.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -4,7 +4,7 @@ error[E0109]: type arguments are not allowed on this type\n LL | type X = u32<i32>;\n    |          --- ^^^ type argument not allowed\n    |          |\n-   |          not allowed on this\n+   |          not allowed on this type\n    |\n help: primitive type `u32` doesn't have generic parameters\n    |"}, {"sha": "5babb5c2961b756397ca746089664a38885ba29b", "filename": "src/test/ui/error-codes/E0110.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -4,7 +4,7 @@ error[E0109]: lifetime arguments are not allowed on this type\n LL | type X = u32<'static>;\n    |          --- ^^^^^^^ lifetime argument not allowed\n    |          |\n-   |          not allowed on this\n+   |          not allowed on this type\n    |\n help: primitive type `u32` doesn't have generic parameters\n    |"}, {"sha": "4c99f9fcbf1dedbd72f5afc0538863b1bf392384", "filename": "src/test/ui/error-codes/E0411.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Ferror-codes%2FE0411.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Ferror-codes%2FE0411.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0411.stderr?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -1,6 +1,8 @@\n error[E0411]: cannot find type `Self` in this scope\n   --> $DIR/E0411.rs:2:6\n    |\n+LL | fn main() {\n+   |    ---- `Self` not allowed in a function\n LL |     <Self>::foo;\n    |      ^^^^ `Self` is only available in impls, traits, and type definitions\n "}, {"sha": "5366a36b1a689f4eb82a24be8d2c2c4c2228f5da", "filename": "src/test/ui/issues/issue-22706.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Fissues%2Fissue-22706.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Fissues%2Fissue-22706.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22706.stderr?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -4,7 +4,7 @@ error[E0109]: type arguments are not allowed on module `marker`\n LL | fn is_copy<T: ::std::marker<i32>::Copy>() {}\n    |                      ------ ^^^ type argument not allowed\n    |                      |\n-   |                      not allowed on this\n+   |                      not allowed on module `marker`\n \n error: aborting due to previous error\n "}, {"sha": "0323a4dfb8ad3b0c09d4aefd23d19d8312635ed7", "filename": "src/test/ui/issues/issue-57924.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Fissues%2Fissue-57924.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Fissues%2Fissue-57924.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57924.stderr?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -4,7 +4,7 @@ error[E0109]: type arguments are not allowed on self constructor\n LL |         Self::<E>(e)\n    |         ----   ^ type argument not allowed\n    |         |\n-   |         not allowed on this\n+   |         not allowed on self constructor\n \n error: aborting due to previous error\n "}, {"sha": "e0236567b2fa609bb33d8934ef1cd41e87575ebd", "filename": "src/test/ui/issues/issue-60989.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Fissues%2Fissue-60989.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Fissues%2Fissue-60989.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60989.stderr?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -4,15 +4,15 @@ error[E0109]: type arguments are not allowed on local variable\n LL |     c1::<()>;\n    |     --   ^^ type argument not allowed\n    |     |\n-   |     not allowed on this\n+   |     not allowed on local variable\n \n error[E0109]: type arguments are not allowed on local variable\n   --> $DIR/issue-60989.rs:16:10\n    |\n LL |     c1::<dyn Into<B>>;\n    |     --   ^^^^^^^^^^^ type argument not allowed\n    |     |\n-   |     not allowed on this\n+   |     not allowed on local variable\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5f3560dbe946edacfde1c25de35846bbfdf6e9d2", "filename": "src/test/ui/lifetimes/issue-97194.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Flifetimes%2Fissue-97194.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Flifetimes%2Fissue-97194.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-97194.rs?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -2,7 +2,7 @@ extern \"C\" {\n     fn bget(&self, index: [usize; Self::DIM]) -> bool {\n         //~^ ERROR incorrect function inside `extern` block\n         //~| ERROR `self` parameter is only allowed in associated functions\n-        //~| ERROR use of undeclared type `Self`\n+        //~| ERROR failed to resolve: `Self`\n         type T<'a> = &'a str;\n     }\n }"}, {"sha": "93bde285a9901d197ec095ce365871e64f6e249f", "filename": "src/test/ui/lifetimes/issue-97194.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Flifetimes%2Fissue-97194.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Flifetimes%2Fissue-97194.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-97194.stderr?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -25,11 +25,11 @@ LL |     fn bget(&self, index: [usize; Self::DIM]) -> bool {\n    |\n    = note: associated functions are those in `impl` or `trait` definitions\n \n-error[E0433]: failed to resolve: use of undeclared type `Self`\n+error[E0433]: failed to resolve: `Self` is only available in impls, traits, and type definitions\n   --> $DIR/issue-97194.rs:2:35\n    |\n LL |     fn bget(&self, index: [usize; Self::DIM]) -> bool {\n-   |                                   ^^^^ use of undeclared type `Self`\n+   |                                   ^^^^ `Self` is only available in impls, traits, and type definitions\n \n error: aborting due to 3 previous errors\n "}, {"sha": "cf61e94bd86cb4fbf37639168a884bf9c4788888", "filename": "src/test/ui/mod-subitem-as-enum-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Fmod-subitem-as-enum-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Fmod-subitem-as-enum-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmod-subitem-as-enum-variant.stderr?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -4,7 +4,7 @@ error[E0109]: type arguments are not allowed on module `Mod`\n LL |     Mod::<i32>::FakeVariant(0);\n    |     ---   ^^^ type argument not allowed\n    |     |\n-   |     not allowed on this\n+   |     not allowed on module `Mod`\n \n error: aborting due to previous error\n "}, {"sha": "19e16abcee3cbef2919eddd44aa9c376b8506c35", "filename": "src/test/ui/resolve/issue-24968.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.rs?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -1,5 +1,30 @@\n+// Also includes more Self usages per #93796\n+\n fn foo(_: Self) {\n //~^ ERROR cannot find type `Self`\n }\n \n+fn foo2() {\n+    let x: Self;\n+    //~^ ERROR cannot find type `Self`\n+}\n+\n+type Foo<T>\n+where\n+    Self: Clone,\n+//~^ ERROR cannot find type `Self`\n+= Vec<T>;\n+\n+const FOO: Self = 0;\n+//~^ ERROR cannot find type `Self`\n+\n+const FOO2: u32 = Self::bar();\n+//~^ ERROR failed to resolve: `Self`\n+\n+static FOO_S: Self = 0;\n+//~^ ERROR cannot find type `Self`\n+\n+static FOO_S2: u32 = Self::bar();\n+//~^ ERROR failed to resolve: `Self`\n+\n fn main() {}"}, {"sha": "7e539d258048e03989eb25fa94c9fbfac73baada", "filename": "src/test/ui/resolve/issue-24968.stderr", "status": "modified", "additions": 52, "deletions": 4, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.stderr?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -1,9 +1,57 @@\n+error[E0433]: failed to resolve: `Self` is only available in impls, traits, and type definitions\n+  --> $DIR/issue-24968.rs:21:19\n+   |\n+LL | const FOO2: u32 = Self::bar();\n+   |                   ^^^^ `Self` is only available in impls, traits, and type definitions\n+\n+error[E0433]: failed to resolve: `Self` is only available in impls, traits, and type definitions\n+  --> $DIR/issue-24968.rs:27:22\n+   |\n+LL | static FOO_S2: u32 = Self::bar();\n+   |                      ^^^^ `Self` is only available in impls, traits, and type definitions\n+\n error[E0411]: cannot find type `Self` in this scope\n-  --> $DIR/issue-24968.rs:1:11\n+  --> $DIR/issue-24968.rs:3:11\n    |\n LL | fn foo(_: Self) {\n-   |           ^^^^ `Self` is only available in impls, traits, and type definitions\n+   |    ---    ^^^^ `Self` is only available in impls, traits, and type definitions\n+   |    |\n+   |    `Self` not allowed in a function\n+\n+error[E0411]: cannot find type `Self` in this scope\n+  --> $DIR/issue-24968.rs:8:12\n+   |\n+LL | fn foo2() {\n+   |    ---- `Self` not allowed in a function\n+LL |     let x: Self;\n+   |            ^^^^ `Self` is only available in impls, traits, and type definitions\n+\n+error[E0411]: cannot find type `Self` in this scope\n+  --> $DIR/issue-24968.rs:14:5\n+   |\n+LL | type Foo<T>\n+   |      --- `Self` not allowed in a type alias\n+LL | where\n+LL |     Self: Clone,\n+   |     ^^^^ `Self` is only available in impls, traits, and type definitions\n+\n+error[E0411]: cannot find type `Self` in this scope\n+  --> $DIR/issue-24968.rs:18:12\n+   |\n+LL | const FOO: Self = 0;\n+   |       ---  ^^^^ `Self` is only available in impls, traits, and type definitions\n+   |       |\n+   |       `Self` not allowed in a constant item\n+\n+error[E0411]: cannot find type `Self` in this scope\n+  --> $DIR/issue-24968.rs:24:15\n+   |\n+LL | static FOO_S: Self = 0;\n+   |        -----  ^^^^ `Self` is only available in impls, traits, and type definitions\n+   |        |\n+   |        `Self` not allowed in a static item\n \n-error: aborting due to previous error\n+error: aborting due to 7 previous errors\n \n-For more information about this error, try `rustc --explain E0411`.\n+Some errors have detailed explanations: E0411, E0433.\n+For more information about an error, try `rustc --explain E0411`."}, {"sha": "bdce0e1b331b89a851e086b6db39ffa1bf918cdf", "filename": "src/test/ui/structs/struct-path-associated-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-associated-type.stderr?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -10,7 +10,7 @@ error[E0109]: type arguments are not allowed on this type\n LL |     let z = T::A::<u8> {};\n    |                -   ^^ type argument not allowed\n    |                |\n-   |                not allowed on this\n+   |                not allowed on this type\n \n error[E0071]: expected struct, variant or union type, found associated type\n   --> $DIR/struct-path-associated-type.rs:14:13\n@@ -30,7 +30,7 @@ error[E0109]: type arguments are not allowed on this type\n LL |     let z = T::A::<u8> {};\n    |                -   ^^ type argument not allowed\n    |                |\n-   |                not allowed on this\n+   |                not allowed on this type\n \n error[E0223]: ambiguous associated type\n   --> $DIR/struct-path-associated-type.rs:32:13"}, {"sha": "c2a8623f9b4108d3a5768c7229cc83d9c25029b1", "filename": "src/test/ui/structs/struct-path-self.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.stderr?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -10,7 +10,7 @@ error[E0109]: type arguments are not allowed on self type\n LL |         let z = Self::<u8> {};\n    |                 ----   ^^ type argument not allowed\n    |                 |\n-   |                 not allowed on this\n+   |                 not allowed on self type\n    |\n help: the `Self` type doesn't accept type parameters\n    |\n@@ -36,7 +36,7 @@ error[E0109]: type arguments are not allowed on self type\n LL |         let z = Self::<u8> {};\n    |                 ----   ^^ type argument not allowed\n    |                 |\n-   |                 not allowed on this\n+   |                 not allowed on self type\n    |\n note: `Self` is of type `S`\n   --> $DIR/struct-path-self.rs:1:8\n@@ -58,7 +58,7 @@ error[E0109]: type arguments are not allowed on self type\n LL |         let z = Self::<u8> {};\n    |                 ----   ^^ type argument not allowed\n    |                 |\n-   |                 not allowed on this\n+   |                 not allowed on self type\n    |\n note: `Self` is of type `S`\n   --> $DIR/struct-path-self.rs:1:8"}, {"sha": "9601bdce4c503768795871fdebc71120aa183dfb", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-generic-args.stderr", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -23,15 +23,15 @@ error[E0109]: type arguments are not allowed on this type\n LL |         Self::TSVariant::<()>(());\n    |               ---------   ^^ type argument not allowed\n    |               |\n-   |               not allowed on this\n+   |               not allowed on this type\n \n error[E0109]: type arguments are not allowed on self type\n   --> $DIR/enum-variant-generic-args.rs:17:16\n    |\n LL |         Self::<()>::TSVariant(());\n    |         ----   ^^ type argument not allowed\n    |         |\n-   |         not allowed on this\n+   |         not allowed on self type\n    |\n note: `Self` is of type `Enum<T>`\n   --> $DIR/enum-variant-generic-args.rs:7:6\n@@ -71,7 +71,7 @@ error[E0109]: type arguments are not allowed on self type\n LL |         Self::<()>::TSVariant::<()>(());\n    |         ----   ^^ type argument not allowed\n    |         |\n-   |         not allowed on this\n+   |         not allowed on self type\n    |\n note: `Self` is of type `Enum<T>`\n   --> $DIR/enum-variant-generic-args.rs:7:6\n@@ -92,7 +92,7 @@ error[E0109]: type arguments are not allowed on this type\n LL |         Self::<()>::TSVariant::<()>(());\n    |                     ---------   ^^ type argument not allowed\n    |                     |\n-   |                     not allowed on this\n+   |                     not allowed on this type\n \n error[E0308]: mismatched types\n   --> $DIR/enum-variant-generic-args.rs:26:29\n@@ -112,7 +112,7 @@ error[E0109]: type arguments are not allowed on this type\n LL |         Self::SVariant::<()> { v: () };\n    |               --------   ^^ type argument not allowed\n    |               |\n-   |               not allowed on this\n+   |               not allowed on this type\n    |\n    = note: enum variants can't have type parameters\n help: you might have meant to specity type parameters on enum `Enum`\n@@ -139,7 +139,7 @@ error[E0109]: type arguments are not allowed on self type\n LL |         Self::<()>::SVariant { v: () };\n    |         ----   ^^ type argument not allowed\n    |         |\n-   |         not allowed on this\n+   |         not allowed on self type\n    |\n note: `Self` is of type `Enum<T>`\n   --> $DIR/enum-variant-generic-args.rs:7:6\n@@ -172,7 +172,7 @@ error[E0109]: type arguments are not allowed on self type\n LL |         Self::<()>::SVariant::<()> { v: () };\n    |         ----   ^^ type argument not allowed\n    |         |\n-   |         not allowed on this\n+   |         not allowed on self type\n    |\n note: `Self` is of type `Enum<T>`\n   --> $DIR/enum-variant-generic-args.rs:7:6\n@@ -193,7 +193,7 @@ error[E0109]: type arguments are not allowed on this type\n LL |         Self::<()>::SVariant::<()> { v: () };\n    |                     --------   ^^ type argument not allowed\n    |                     |\n-   |                     not allowed on this\n+   |                     not allowed on this type\n    |\n    = note: enum variants can't have type parameters\n help: you might have meant to specity type parameters on enum `Enum`\n@@ -220,15 +220,15 @@ error[E0109]: type arguments are not allowed on this type\n LL |         Self::UVariant::<()>;\n    |               --------   ^^ type argument not allowed\n    |               |\n-   |               not allowed on this\n+   |               not allowed on this type\n \n error[E0109]: type arguments are not allowed on self type\n   --> $DIR/enum-variant-generic-args.rs:43:16\n    |\n LL |         Self::<()>::UVariant;\n    |         ----   ^^ type argument not allowed\n    |         |\n-   |         not allowed on this\n+   |         not allowed on self type\n    |\n note: `Self` is of type `Enum<T>`\n   --> $DIR/enum-variant-generic-args.rs:7:6\n@@ -249,7 +249,7 @@ error[E0109]: type arguments are not allowed on self type\n LL |         Self::<()>::UVariant::<()>;\n    |         ----   ^^ type argument not allowed\n    |         |\n-   |         not allowed on this\n+   |         not allowed on self type\n    |\n note: `Self` is of type `Enum<T>`\n   --> $DIR/enum-variant-generic-args.rs:7:6\n@@ -270,39 +270,39 @@ error[E0109]: type arguments are not allowed on this type\n LL |         Self::<()>::UVariant::<()>;\n    |                     --------   ^^ type argument not allowed\n    |                     |\n-   |                     not allowed on this\n+   |                     not allowed on this type\n \n error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:54:29\n    |\n LL |     Enum::<()>::TSVariant::<()>(());\n    |                 ---------   ^^ type argument not allowed\n    |                 |\n-   |                 not allowed on this\n+   |                 not allowed on this type\n \n error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:57:24\n    |\n LL |     Alias::TSVariant::<()>(());\n    |            ---------   ^^ type argument not allowed\n    |            |\n-   |            not allowed on this\n+   |            not allowed on this type\n \n error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:59:30\n    |\n LL |     Alias::<()>::TSVariant::<()>(());\n    |                  ---------   ^^ type argument not allowed\n    |                  |\n-   |                  not allowed on this\n+   |                  not allowed on this type\n \n error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:62:29\n    |\n LL |     AliasFixed::TSVariant::<()>(());\n    |                 ---------   ^^ type argument not allowed\n    |                 |\n-   |                 not allowed on this\n+   |                 not allowed on this type\n \n error[E0107]: this type alias takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/enum-variant-generic-args.rs:64:5\n@@ -338,15 +338,15 @@ error[E0109]: type arguments are not allowed on this type\n LL |     AliasFixed::<()>::TSVariant::<()>(());\n    |                       ---------   ^^ type argument not allowed\n    |                       |\n-   |                       not allowed on this\n+   |                       not allowed on this type\n \n error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:72:28\n    |\n LL |     Enum::<()>::SVariant::<()> { v: () };\n    |                 --------   ^^ type argument not allowed\n    |                 |\n-   |                 not allowed on this\n+   |                 not allowed on this type\n    |\n    = note: enum variants can't have type parameters\n \n@@ -356,7 +356,7 @@ error[E0109]: type arguments are not allowed on this type\n LL |     Alias::SVariant::<()> { v: () };\n    |            --------   ^^ type argument not allowed\n    |            |\n-   |            not allowed on this\n+   |            not allowed on this type\n    |\n    = note: enum variants can't have type parameters\n help: you might have meant to specity type parameters on enum `Enum`\n@@ -371,7 +371,7 @@ error[E0109]: type arguments are not allowed on this type\n LL |     Alias::<()>::SVariant::<()> { v: () };\n    |                  --------   ^^ type argument not allowed\n    |                  |\n-   |                  not allowed on this\n+   |                  not allowed on this type\n    |\n    = note: enum variants can't have type parameters\n help: you might have meant to specity type parameters on enum `Enum`\n@@ -386,7 +386,7 @@ error[E0109]: type arguments are not allowed on this type\n LL |     AliasFixed::SVariant::<()> { v: () };\n    |                 --------   ^^ type argument not allowed\n    |                 |\n-   |                 not allowed on this\n+   |                 not allowed on this type\n    |\n    = note: enum variants can't have type parameters\n help: you might have meant to specity type parameters on enum `Enum`\n@@ -429,7 +429,7 @@ error[E0109]: type arguments are not allowed on this type\n LL |     AliasFixed::<()>::SVariant::<()> { v: () };\n    |                       --------   ^^ type argument not allowed\n    |                       |\n-   |                       not allowed on this\n+   |                       not allowed on this type\n    |\n    = note: enum variants can't have type parameters\n help: you might have meant to specity type parameters on enum `Enum`\n@@ -444,31 +444,31 @@ error[E0109]: type arguments are not allowed on this type\n LL |     Enum::<()>::UVariant::<()>;\n    |                 --------   ^^ type argument not allowed\n    |                 |\n-   |                 not allowed on this\n+   |                 not allowed on this type\n \n error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:93:23\n    |\n LL |     Alias::UVariant::<()>;\n    |            --------   ^^ type argument not allowed\n    |            |\n-   |            not allowed on this\n+   |            not allowed on this type\n \n error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:95:29\n    |\n LL |     Alias::<()>::UVariant::<()>;\n    |                  --------   ^^ type argument not allowed\n    |                  |\n-   |                  not allowed on this\n+   |                  not allowed on this type\n \n error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:98:28\n    |\n LL |     AliasFixed::UVariant::<()>;\n    |                 --------   ^^ type argument not allowed\n    |                 |\n-   |                 not allowed on this\n+   |                 not allowed on this type\n \n error[E0107]: this type alias takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/enum-variant-generic-args.rs:100:5\n@@ -504,7 +504,7 @@ error[E0109]: type arguments are not allowed on this type\n LL |     AliasFixed::<()>::UVariant::<()>;\n    |                       --------   ^^ type argument not allowed\n    |                       |\n-   |                       not allowed on this\n+   |                       not allowed on this type\n \n error: aborting due to 39 previous errors\n "}, {"sha": "51b1c8a1068a9e6cae8768b6da1909a1ee449be7", "filename": "src/test/ui/type-alias-enum-variants/no-type-application-on-aliased-enum-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fno-type-application-on-aliased-enum-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fno-type-application-on-aliased-enum-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fno-type-application-on-aliased-enum-variant.stderr?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -4,7 +4,7 @@ error[E0109]: type arguments are not allowed on this type\n LL |     let _ = Alias::None::<u8>;\n    |                    ----   ^^ type argument not allowed\n    |                    |\n-   |                    not allowed on this\n+   |                    not allowed on this type\n \n error: aborting due to previous error\n "}, {"sha": "91522d8912f79713fa52281366d66a7f12b4e4ab", "filename": "src/test/ui/type-alias/issue-62263-self-in-atb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62263-self-in-atb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62263-self-in-atb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62263-self-in-atb.rs?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -3,6 +3,6 @@ pub trait Trait {\n }\n \n pub type Alias = dyn Trait<A = Self::A>;\n-//~^ ERROR failed to resolve: use of undeclared type `Self` [E0433]\n+//~^ ERROR failed to resolve: `Self`\n \n fn main() {}"}, {"sha": "c20074dc27ce77dae61f390ba8f1855dbdf0bbf5", "filename": "src/test/ui/type-alias/issue-62263-self-in-atb.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62263-self-in-atb.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62263-self-in-atb.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62263-self-in-atb.stderr?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -1,8 +1,8 @@\n-error[E0433]: failed to resolve: use of undeclared type `Self`\n+error[E0433]: failed to resolve: `Self` is only available in impls, traits, and type definitions\n   --> $DIR/issue-62263-self-in-atb.rs:5:32\n    |\n LL | pub type Alias = dyn Trait<A = Self::A>;\n-   |                                ^^^^ use of undeclared type `Self`\n+   |                                ^^^^ `Self` is only available in impls, traits, and type definitions\n \n error: aborting due to previous error\n "}, {"sha": "a4d9a285485e7eadaa4f5f5dedf13b16a60c525b", "filename": "src/test/ui/type-alias/issue-62305-self-assoc-ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62305-self-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62305-self-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62305-self-assoc-ty.rs?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -1,4 +1,4 @@\n type Alias = Self::Target;\n-//~^ ERROR failed to resolve: use of undeclared type `Self` [E0433]\n+//~^ ERROR failed to resolve: `Self`\n \n fn main() {}"}, {"sha": "f3da50df9269b30b01f78713e35da8528d1fc42e", "filename": "src/test/ui/type-alias/issue-62305-self-assoc-ty.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62305-self-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62305-self-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62305-self-assoc-ty.stderr?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -1,8 +1,8 @@\n-error[E0433]: failed to resolve: use of undeclared type `Self`\n+error[E0433]: failed to resolve: `Self` is only available in impls, traits, and type definitions\n   --> $DIR/issue-62305-self-assoc-ty.rs:1:14\n    |\n LL | type Alias = Self::Target;\n-   |              ^^^^ use of undeclared type `Self`\n+   |              ^^^^ `Self` is only available in impls, traits, and type definitions\n \n error: aborting due to previous error\n "}, {"sha": "7e15e42e3ccd9bc466a38a00ab99e70f42fdb029", "filename": "src/test/ui/type-alias/issue-62364-self-ty-arg.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62364-self-ty-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62364-self-ty-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias%2Fissue-62364-self-ty-arg.stderr?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -2,9 +2,9 @@ error[E0411]: cannot find type `Self` in this scope\n   --> $DIR/issue-62364-self-ty-arg.rs:5:29\n    |\n LL | type Alias<'a> = Struct<&'a Self>;\n-   |              -              ^^^^ `Self` is only available in impls, traits, and type definitions\n-   |              |\n-   |              help: you might be missing a type parameter: `, Self`\n+   |      -----                  ^^^^ `Self` is only available in impls, traits, and type definitions\n+   |      |\n+   |      `Self` not allowed in a type alias\n \n error: aborting due to previous error\n "}, {"sha": "e426f450b11bbb1134aad7fa628275c19f3e7d40", "filename": "src/test/ui/type/issue-91268.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Ftype%2Fissue-91268.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Ftype%2Fissue-91268.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-91268.stderr?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -41,7 +41,7 @@ error[E0109]: type arguments are not allowed on this type\n LL |     0: u8(\u0163\n    |        -- ^ type argument not allowed\n    |        |\n-   |        not allowed on this\n+   |        not allowed on this type\n    |\n help: primitive type `u8` doesn't have generic parameters\n    |"}, {"sha": "c45fd00bae9a544b238d04d5bad9435dcc9c8c84", "filename": "src/test/ui/typeck/prim-with-args.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.stderr?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -4,7 +4,7 @@ error[E0109]: type arguments are not allowed on this type\n LL | let _x: isize<isize>;\n    |         ----- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this\n+   |         not allowed on this type\n    |\n help: primitive type `isize` doesn't have generic parameters\n    |\n@@ -18,7 +18,7 @@ error[E0109]: type arguments are not allowed on this type\n LL | let _x: i8<isize>;\n    |         -- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this\n+   |         not allowed on this type\n    |\n help: primitive type `i8` doesn't have generic parameters\n    |\n@@ -32,7 +32,7 @@ error[E0109]: type arguments are not allowed on this type\n LL | let _x: i16<isize>;\n    |         --- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this\n+   |         not allowed on this type\n    |\n help: primitive type `i16` doesn't have generic parameters\n    |\n@@ -46,7 +46,7 @@ error[E0109]: type arguments are not allowed on this type\n LL | let _x: i32<isize>;\n    |         --- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this\n+   |         not allowed on this type\n    |\n help: primitive type `i32` doesn't have generic parameters\n    |\n@@ -60,7 +60,7 @@ error[E0109]: type arguments are not allowed on this type\n LL | let _x: i64<isize>;\n    |         --- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this\n+   |         not allowed on this type\n    |\n help: primitive type `i64` doesn't have generic parameters\n    |\n@@ -74,7 +74,7 @@ error[E0109]: type arguments are not allowed on this type\n LL | let _x: usize<isize>;\n    |         ----- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this\n+   |         not allowed on this type\n    |\n help: primitive type `usize` doesn't have generic parameters\n    |\n@@ -88,7 +88,7 @@ error[E0109]: type arguments are not allowed on this type\n LL | let _x: u8<isize>;\n    |         -- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this\n+   |         not allowed on this type\n    |\n help: primitive type `u8` doesn't have generic parameters\n    |\n@@ -102,7 +102,7 @@ error[E0109]: type arguments are not allowed on this type\n LL | let _x: u16<isize>;\n    |         --- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this\n+   |         not allowed on this type\n    |\n help: primitive type `u16` doesn't have generic parameters\n    |\n@@ -116,7 +116,7 @@ error[E0109]: type arguments are not allowed on this type\n LL | let _x: u32<isize>;\n    |         --- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this\n+   |         not allowed on this type\n    |\n help: primitive type `u32` doesn't have generic parameters\n    |\n@@ -130,7 +130,7 @@ error[E0109]: type arguments are not allowed on this type\n LL | let _x: u64<isize>;\n    |         --- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this\n+   |         not allowed on this type\n    |\n help: primitive type `u64` doesn't have generic parameters\n    |\n@@ -144,7 +144,7 @@ error[E0109]: type arguments are not allowed on this type\n LL | let _x: char<isize>;\n    |         ---- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this\n+   |         not allowed on this type\n    |\n help: primitive type `char` doesn't have generic parameters\n    |\n@@ -158,7 +158,7 @@ error[E0109]: lifetime arguments are not allowed on this type\n LL | let _x: isize<'static>;\n    |         ----- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this\n+   |         not allowed on this type\n    |\n help: primitive type `isize` doesn't have generic parameters\n    |\n@@ -172,7 +172,7 @@ error[E0109]: lifetime arguments are not allowed on this type\n LL | let _x: i8<'static>;\n    |         -- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this\n+   |         not allowed on this type\n    |\n help: primitive type `i8` doesn't have generic parameters\n    |\n@@ -186,7 +186,7 @@ error[E0109]: lifetime arguments are not allowed on this type\n LL | let _x: i16<'static>;\n    |         --- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this\n+   |         not allowed on this type\n    |\n help: primitive type `i16` doesn't have generic parameters\n    |\n@@ -200,7 +200,7 @@ error[E0109]: lifetime arguments are not allowed on this type\n LL | let _x: i32<'static>;\n    |         --- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this\n+   |         not allowed on this type\n    |\n help: primitive type `i32` doesn't have generic parameters\n    |\n@@ -214,7 +214,7 @@ error[E0109]: lifetime arguments are not allowed on this type\n LL | let _x: i64<'static>;\n    |         --- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this\n+   |         not allowed on this type\n    |\n help: primitive type `i64` doesn't have generic parameters\n    |\n@@ -228,7 +228,7 @@ error[E0109]: lifetime arguments are not allowed on this type\n LL | let _x: usize<'static>;\n    |         ----- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this\n+   |         not allowed on this type\n    |\n help: primitive type `usize` doesn't have generic parameters\n    |\n@@ -242,7 +242,7 @@ error[E0109]: lifetime arguments are not allowed on this type\n LL | let _x: u8<'static>;\n    |         -- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this\n+   |         not allowed on this type\n    |\n help: primitive type `u8` doesn't have generic parameters\n    |\n@@ -256,7 +256,7 @@ error[E0109]: lifetime arguments are not allowed on this type\n LL | let _x: u16<'static>;\n    |         --- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this\n+   |         not allowed on this type\n    |\n help: primitive type `u16` doesn't have generic parameters\n    |\n@@ -270,7 +270,7 @@ error[E0109]: lifetime arguments are not allowed on this type\n LL | let _x: u32<'static>;\n    |         --- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this\n+   |         not allowed on this type\n    |\n help: primitive type `u32` doesn't have generic parameters\n    |\n@@ -284,7 +284,7 @@ error[E0109]: lifetime arguments are not allowed on this type\n LL | let _x: u64<'static>;\n    |         --- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this\n+   |         not allowed on this type\n    |\n help: primitive type `u64` doesn't have generic parameters\n    |\n@@ -298,7 +298,7 @@ error[E0109]: lifetime arguments are not allowed on this type\n LL | let _x: char<'static>;\n    |         ---- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this\n+   |         not allowed on this type\n    |\n help: primitive type `char` doesn't have generic parameters\n    |"}, {"sha": "3b4ce429701977b3ffb896d1c13d92ac686b2920", "filename": "src/test/ui/use/use-self-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Fuse%2Fuse-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Fuse%2Fuse-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-self-type.rs?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -4,7 +4,7 @@ impl S {\n     fn f() {}\n     fn g() {\n         use Self::f; //~ ERROR unresolved import\n-        pub(in Self::f) struct Z; //~ ERROR use of undeclared type `Self`\n+        pub(in Self::f) struct Z; //~ ERROR failed to resolve: `Self`\n     }\n }\n "}, {"sha": "e615394115119d16928267421e27b29b62c64993", "filename": "src/test/ui/use/use-self-type.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Fuse%2Fuse-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Fuse%2Fuse-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-self-type.stderr?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -1,14 +1,14 @@\n-error[E0433]: failed to resolve: use of undeclared type `Self`\n+error[E0433]: failed to resolve: `Self` is only available in impls, traits, and type definitions\n   --> $DIR/use-self-type.rs:7:16\n    |\n LL |         pub(in Self::f) struct Z;\n-   |                ^^^^ use of undeclared type `Self`\n+   |                ^^^^ `Self` is only available in impls, traits, and type definitions\n \n error[E0432]: unresolved import `Self`\n   --> $DIR/use-self-type.rs:6:13\n    |\n LL |         use Self::f;\n-   |             ^^^^ use of undeclared type `Self`\n+   |             ^^^^ `Self` is only available in impls, traits, and type definitions\n \n error: aborting due to 2 previous errors\n "}, {"sha": "abe8c09b739f72a9d63119608458d64d0bda55fa", "filename": "src/test/ui/usize-generic-argument-parent.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Fusize-generic-argument-parent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4104596251818f4f588051c7a8172ca9f5a195bf/src%2Ftest%2Fui%2Fusize-generic-argument-parent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fusize-generic-argument-parent.stderr?ref=4104596251818f4f588051c7a8172ca9f5a195bf", "patch": "@@ -4,7 +4,7 @@ error[E0109]: const arguments are not allowed on this type\n LL |     let x: usize<foo>;\n    |            ----- ^^^ const argument not allowed\n    |            |\n-   |            not allowed on this\n+   |            not allowed on this type\n    |\n help: primitive type `usize` doesn't have generic parameters\n    |"}]}