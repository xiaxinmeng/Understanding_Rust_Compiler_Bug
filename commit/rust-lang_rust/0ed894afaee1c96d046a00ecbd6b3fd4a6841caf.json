{"sha": "0ed894afaee1c96d046a00ecbd6b3fd4a6841caf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlZDg5NGFmYWVlMWM5NmQwNDZhMDBlY2JkNmIzZmQ0YTY4NDFjYWY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-13T03:36:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-13T03:36:56Z"}, "message": "Rollup merge of #57815 - dotdash:asserts, r=sfackler\n\nSpeed up the fast path for assert_eq! and assert_ne!\n\nCurrently, the panic!() calls directly borrow the value bindings. This\ncauses those bindings to always be initialized, i.e. they're initialized\neven before the values are even compared. This causes noticeable\noverhead in what should be a really cheap operation.\n\nBy performing a reborrow of the value in the call to panic!(), we allow\nLLVM to optimize that code, so that the extra borrow only happens in the\nerror case.\n\nWe could achieve the same result by dereferencing the values passed to\npanic!(), as the format machinery borrows them anyway, but this causes\nassertions to fail to compile if one of the values is unsized, i.e. it\nwould be a breaking change.", "tree": {"sha": "706731506c57c727d601d175d2668ccd339622a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/706731506c57c727d601d175d2668ccd339622a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ed894afaee1c96d046a00ecbd6b3fd4a6841caf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcY5DYCRBK7hj4Ov3rIwAAdHIIAB8wmQjerQFgFIBx8Ji0yK7j\n1/p1K2bXKoc2LCQYZitWILLfMYVBlb8Z+fNiDhyAAVM+eW14dgBXzYe39EoXZHCD\nSa4cFEFZWNlp2MjBd6CHg6m3gzxdNuNWQfhJZW1b7D1SFqAbAbfiloIsxFVR5EiE\noLR71fQJ3D3racAHg6nn55jtxK7fT7Zkw5WL93T6aWKhYjFMHAL5lMjwe0B9xQqV\ntVnMHXzqsvIRoq42uRvh6jdl6pjH4IOa78pL1Mv6TyhWqxD+jziZjcKTe4AYVkGp\n71t3ab7grQU1XfDOFTedHcURBqtL/g+dhngXfacxrbJDEJdrsLQZJ2vyNLFQLb0=\n=M5uz\n-----END PGP SIGNATURE-----\n", "payload": "tree 706731506c57c727d601d175d2668ccd339622a9\nparent 734cc3e79ed2a599482a41ae5edd88338603d954\nparent 5a7cd848f740291f94f2400b50f41136fc8657bb\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1550029016 +0100\ncommitter GitHub <noreply@github.com> 1550029016 +0100\n\nRollup merge of #57815 - dotdash:asserts, r=sfackler\n\nSpeed up the fast path for assert_eq! and assert_ne!\n\nCurrently, the panic!() calls directly borrow the value bindings. This\ncauses those bindings to always be initialized, i.e. they're initialized\neven before the values are even compared. This causes noticeable\noverhead in what should be a really cheap operation.\n\nBy performing a reborrow of the value in the call to panic!(), we allow\nLLVM to optimize that code, so that the extra borrow only happens in the\nerror case.\n\nWe could achieve the same result by dereferencing the values passed to\npanic!(), as the format machinery borrows them anyway, but this causes\nassertions to fail to compile if one of the values is unsized, i.e. it\nwould be a breaking change.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ed894afaee1c96d046a00ecbd6b3fd4a6841caf", "html_url": "https://github.com/rust-lang/rust/commit/0ed894afaee1c96d046a00ecbd6b3fd4a6841caf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ed894afaee1c96d046a00ecbd6b3fd4a6841caf/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "734cc3e79ed2a599482a41ae5edd88338603d954", "url": "https://api.github.com/repos/rust-lang/rust/commits/734cc3e79ed2a599482a41ae5edd88338603d954", "html_url": "https://github.com/rust-lang/rust/commit/734cc3e79ed2a599482a41ae5edd88338603d954"}, {"sha": "5a7cd848f740291f94f2400b50f41136fc8657bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a7cd848f740291f94f2400b50f41136fc8657bb", "html_url": "https://github.com/rust-lang/rust/commit/5a7cd848f740291f94f2400b50f41136fc8657bb"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "b9b235969dad8d980d85e31b342f9b90a70d3dea", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0ed894afaee1c96d046a00ecbd6b3fd4a6841caf/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ed894afaee1c96d046a00ecbd6b3fd4a6841caf/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=0ed894afaee1c96d046a00ecbd6b3fd4a6841caf", "patch": "@@ -46,9 +46,12 @@ macro_rules! assert_eq {\n         match (&$left, &$right) {\n             (left_val, right_val) => {\n                 if !(*left_val == *right_val) {\n+                    // The reborrows below are intentional. Without them, the stack slot for the\n+                    // borrow is initialized even before the values are compared, leading to a\n+                    // noticeable slow down.\n                     panic!(r#\"assertion failed: `(left == right)`\n   left: `{:?}`,\n- right: `{:?}`\"#, left_val, right_val)\n+ right: `{:?}`\"#, &*left_val, &*right_val)\n                 }\n             }\n         }\n@@ -60,9 +63,12 @@ macro_rules! assert_eq {\n         match (&($left), &($right)) {\n             (left_val, right_val) => {\n                 if !(*left_val == *right_val) {\n+                    // The reborrows below are intentional. Without them, the stack slot for the\n+                    // borrow is initialized even before the values are compared, leading to a\n+                    // noticeable slow down.\n                     panic!(r#\"assertion failed: `(left == right)`\n   left: `{:?}`,\n- right: `{:?}`: {}\"#, left_val, right_val,\n+ right: `{:?}`: {}\"#, &*left_val, &*right_val,\n                            format_args!($($arg)+))\n                 }\n             }\n@@ -97,9 +103,12 @@ macro_rules! assert_ne {\n         match (&$left, &$right) {\n             (left_val, right_val) => {\n                 if *left_val == *right_val {\n+                    // The reborrows below are intentional. Without them, the stack slot for the\n+                    // borrow is initialized even before the values are compared, leading to a\n+                    // noticeable slow down.\n                     panic!(r#\"assertion failed: `(left != right)`\n   left: `{:?}`,\n- right: `{:?}`\"#, left_val, right_val)\n+ right: `{:?}`\"#, &*left_val, &*right_val)\n                 }\n             }\n         }\n@@ -111,9 +120,12 @@ macro_rules! assert_ne {\n         match (&($left), &($right)) {\n             (left_val, right_val) => {\n                 if *left_val == *right_val {\n+                    // The reborrows below are intentional. Without them, the stack slot for the\n+                    // borrow is initialized even before the values are compared, leading to a\n+                    // noticeable slow down.\n                     panic!(r#\"assertion failed: `(left != right)`\n   left: `{:?}`,\n- right: `{:?}`: {}\"#, left_val, right_val,\n+ right: `{:?}`: {}\"#, &*left_val, &*right_val,\n                            format_args!($($arg)+))\n                 }\n             }"}]}