{"sha": "0ef2b4a29bf70e8984d0d2febb7a546856c554a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlZjJiNGEyOWJmNzBlODk4NGQwZDJmZWJiN2E1NDY4NTZjNTU0YTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-17T12:31:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-17T12:31:56Z"}, "message": "Auto merge of #85755 - b-naber:unexpected_concrete_region, r=nikomatsakis\n\nReplace parent substs of associated types with inference vars in borrow checker\n\nFixes https://github.com/rust-lang/rust/issues/83190\nFixes https://github.com/rust-lang/rust/issues/78450\n\nWhen we normalize an associated type that refers to an opaque type, it can happen that the substs of the associated type do not occur in the projection (they are parent substs). We previously didn't replace those substs with inference vars, which left a concrete region after all regions should have already been replaced with inference vars and triggered a `delay_span_bug`. After we normalize the opaque type, we now try to replace any remaining concrete regions with inference vars.", "tree": {"sha": "a0572025f0b52531d684fae0549921a0add58bff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0572025f0b52531d684fae0549921a0add58bff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ef2b4a29bf70e8984d0d2febb7a546856c554a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ef2b4a29bf70e8984d0d2febb7a546856c554a0", "html_url": "https://github.com/rust-lang/rust/commit/0ef2b4a29bf70e8984d0d2febb7a546856c554a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ef2b4a29bf70e8984d0d2febb7a546856c554a0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b17d9c1332693fc386f5374f0d63aae0ce5abab5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b17d9c1332693fc386f5374f0d63aae0ce5abab5", "html_url": "https://github.com/rust-lang/rust/commit/b17d9c1332693fc386f5374f0d63aae0ce5abab5"}, {"sha": "09eed2889a2b959e35b6bed30ca4f53cc5a3e578", "url": "https://api.github.com/repos/rust-lang/rust/commits/09eed2889a2b959e35b6bed30ca4f53cc5a3e578", "html_url": "https://github.com/rust-lang/rust/commit/09eed2889a2b959e35b6bed30ca4f53cc5a3e578"}], "stats": {"total": 122, "additions": 49, "deletions": 73}, "files": [{"sha": "f2d69255d50ffb0f64a77f52b566c280c3bdcfb1", "filename": "compiler/rustc_mir/src/borrow_check/region_infer/opaque_types.rs", "status": "modified", "additions": 11, "deletions": 27, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0ef2b4a29bf70e8984d0d2febb7a546856c554a0/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ef2b4a29bf70e8984d0d2febb7a546856c554a0/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fopaque_types.rs?ref=0ef2b4a29bf70e8984d0d2febb7a546856c554a0", "patch": "@@ -60,33 +60,17 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 debug!(?concrete_type, ?substs);\n \n                 let mut subst_regions = vec![self.universal_regions.fr_static];\n-                let universal_substs =\n-                    infcx.tcx.fold_regions(substs, &mut false, |region, _| match *region {\n-                        ty::ReVar(vid) => {\n-                            subst_regions.push(vid);\n-                            self.definitions[vid].external_name.unwrap_or_else(|| {\n-                                infcx.tcx.sess.delay_span_bug(\n-                                    span,\n-                                    \"opaque type with non-universal region substs\",\n-                                );\n-                                infcx.tcx.lifetimes.re_static\n-                            })\n-                        }\n-                        // We don't fold regions in the predicates of opaque\n-                        // types to `ReVar`s. This means that in a case like\n-                        //\n-                        // fn f<'a: 'a>() -> impl Iterator<Item = impl Sized>\n-                        //\n-                        // The inner opaque type has `'static` in its substs.\n-                        ty::ReStatic => region,\n-                        _ => {\n-                            infcx.tcx.sess.delay_span_bug(\n-                                span,\n-                                &format!(\"unexpected concrete region in borrowck: {:?}\", region),\n-                            );\n-                            region\n-                        }\n-                    });\n+                let universal_substs = infcx.tcx.fold_regions(substs, &mut false, |region, _| {\n+                    let vid = self.universal_regions.to_region_vid(region);\n+                    subst_regions.push(vid);\n+                    self.definitions[vid].external_name.unwrap_or_else(|| {\n+                        infcx\n+                            .tcx\n+                            .sess\n+                            .delay_span_bug(span, \"opaque type with non-universal region substs\");\n+                        infcx.tcx.lifetimes.re_static\n+                    })\n+                });\n \n                 subst_regions.sort();\n                 subst_regions.dedup();"}, {"sha": "967d4c3f0f7f96cc7a2003a5911385fed0849480", "filename": "src/test/ui/type-alias-impl-trait/associated-type-lifetime-ice.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b17d9c1332693fc386f5374f0d63aae0ce5abab5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-lifetime-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17d9c1332693fc386f5374f0d63aae0ce5abab5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-lifetime-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-lifetime-ice.rs?ref=b17d9c1332693fc386f5374f0d63aae0ce5abab5", "patch": "@@ -1,33 +0,0 @@\n-// failure-status: 101\n-// rustc-env:RUST_BACKTRACE=0\n-// normalize-stderr-test \"note: .*\\n\\n\" -> \"\"\n-// normalize-stderr-test \"thread 'rustc' panicked.*\\n\" -> \"\"\n-\n-// compile-flags: --crate-type=rlib\n-\n-// Regression test for https://github.com/rust-lang/rust/issues/78450\n-\n-#![feature(min_type_alias_impl_trait)]\n-#![no_std]\n-\n-pub trait AssociatedImpl {\n-    type ImplTrait;\n-\n-    fn f() -> Self::ImplTrait;\n-}\n-\n-struct S<T>(T);\n-\n-trait Associated {\n-    type A;\n-}\n-\n-// ICE\n-impl<'a, T: Associated<A = &'a ()>> AssociatedImpl for S<T> {\n-    type ImplTrait = impl core::fmt::Debug;\n-\n-    fn f() -> Self::ImplTrait {\n-    //~^ ERROR unexpected concrete region in borrowck: ReEarlyBound(0, 'a)\n-        ()\n-    }\n-}"}, {"sha": "64ab7b70b1a98d4681584ed747ee096af445e6a5", "filename": "src/test/ui/type-alias-impl-trait/associated-type-lifetime-ice.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b17d9c1332693fc386f5374f0d63aae0ce5abab5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-lifetime-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b17d9c1332693fc386f5374f0d63aae0ce5abab5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-lifetime-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-lifetime-ice.stderr?ref=b17d9c1332693fc386f5374f0d63aae0ce5abab5", "patch": "@@ -1,13 +0,0 @@\n-error: internal compiler error: unexpected concrete region in borrowck: ReEarlyBound(0, 'a)\n-  --> $DIR/associated-type-lifetime-ice.rs:29:5\n-   |\n-LL | /     fn f() -> Self::ImplTrait {\n-LL | |\n-LL | |         ()\n-LL | |     }\n-   | |_____^\n-   |\n-   = error: internal compiler error: unexpected panic\n-\n-query stack during panic:\n-end of query stack"}, {"sha": "640f929f8f11bb902615b8f7a4f219bfe08ca437", "filename": "src/test/ui/type-alias-impl-trait/issue-78450.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0ef2b4a29bf70e8984d0d2febb7a546856c554a0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-78450.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ef2b4a29bf70e8984d0d2febb7a546856c554a0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-78450.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-78450.rs?ref=0ef2b4a29bf70e8984d0d2febb7a546856c554a0", "patch": "@@ -0,0 +1,27 @@\n+// check-pass\n+\n+#![feature(min_type_alias_impl_trait)]\n+#![feature(type_alias_impl_trait)]\n+//~^ WARNING: the feature `type_alias_impl_trait` is incomplete\n+\n+pub trait AssociatedImpl {\n+    type ImplTrait;\n+\n+    fn f() -> Self::ImplTrait;\n+}\n+\n+struct S<T>(T);\n+\n+trait Associated {\n+    type A;\n+}\n+\n+impl<'a, T: Associated<A = &'a ()>> AssociatedImpl for S<T> {\n+    type ImplTrait = impl core::fmt::Debug;\n+\n+    fn f() -> Self::ImplTrait {\n+        ()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "efccf6241fb7894f45ff706950bba6d0436bf8e1", "filename": "src/test/ui/type-alias-impl-trait/issue-78450.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0ef2b4a29bf70e8984d0d2febb7a546856c554a0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-78450.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ef2b4a29bf70e8984d0d2febb7a546856c554a0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-78450.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-78450.stderr?ref=0ef2b4a29bf70e8984d0d2febb7a546856c554a0", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-78450.rs:4:12\n+   |\n+LL | #![feature(type_alias_impl_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}]}