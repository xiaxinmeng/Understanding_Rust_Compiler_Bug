{"sha": "ea96c376c85e02ec86df5ff6522754395ad819e9", "node_id": "C_kwDOAAsO6NoAKGVhOTZjMzc2Yzg1ZTAyZWM4NmRmNWZmNjUyMjc1NDM5NWFkODE5ZTk", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-28T16:17:34Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-28T16:17:34Z"}, "message": "compress", "tree": {"sha": "e0fc3236e0472c44f5a9f02bcc9f8418de374708", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0fc3236e0472c44f5a9f02bcc9f8418de374708"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea96c376c85e02ec86df5ff6522754395ad819e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea96c376c85e02ec86df5ff6522754395ad819e9", "html_url": "https://github.com/rust-lang/rust/commit/ea96c376c85e02ec86df5ff6522754395ad819e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea96c376c85e02ec86df5ff6522754395ad819e9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "660cf34d8c905d96ad47b5107d58931203d68a35", "url": "https://api.github.com/repos/rust-lang/rust/commits/660cf34d8c905d96ad47b5107d58931203d68a35", "html_url": "https://github.com/rust-lang/rust/commit/660cf34d8c905d96ad47b5107d58931203d68a35"}], "stats": {"total": 62, "additions": 18, "deletions": 44}, "files": [{"sha": "503754afe7c26accea9f705aebc44c76f4666a4b", "filename": "crates/ide_ssr/src/fragments.rs", "status": "modified", "additions": 18, "deletions": 44, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/ea96c376c85e02ec86df5ff6522754395ad819e9/crates%2Fide_ssr%2Fsrc%2Ffragments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea96c376c85e02ec86df5ff6522754395ad819e9/crates%2Fide_ssr%2Fsrc%2Ffragments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Ffragments.rs?ref=ea96c376c85e02ec86df5ff6522754395ad819e9", "patch": "@@ -9,59 +9,19 @@\n use syntax::{ast, AstNode, SyntaxNode};\n \n pub(crate) fn ty(s: &str) -> Result<SyntaxNode, ()> {\n-    let template = \"type T = {};\";\n-    let input = template.replace(\"{}\", s);\n-    let parse = syntax::SourceFile::parse(&input);\n-    if !parse.errors().is_empty() {\n-        return Err(());\n-    }\n-    let node = parse.tree().syntax().descendants().find_map(ast::Type::cast).ok_or(())?;\n-    if node.to_string() != s {\n-        return Err(());\n-    }\n-    Ok(node.syntax().clone_subtree())\n+    fragment::<ast::Type>(\"type T = {};\", s)\n }\n \n pub(crate) fn item(s: &str) -> Result<SyntaxNode, ()> {\n-    let template = \"{}\";\n-    let input = template.replace(\"{}\", s);\n-    let parse = syntax::SourceFile::parse(&input);\n-    if !parse.errors().is_empty() {\n-        return Err(());\n-    }\n-    let node = parse.tree().syntax().descendants().find_map(ast::Item::cast).ok_or(())?;\n-    if node.to_string() != s {\n-        return Err(());\n-    }\n-    Ok(node.syntax().clone_subtree())\n+    fragment::<ast::Item>(\"{}\", s)\n }\n \n pub(crate) fn pat(s: &str) -> Result<SyntaxNode, ()> {\n-    let template = \"const _: () = {let {} = ();};\";\n-    let input = template.replace(\"{}\", s);\n-    let parse = syntax::SourceFile::parse(&input);\n-    if !parse.errors().is_empty() {\n-        return Err(());\n-    }\n-    let node = parse.tree().syntax().descendants().find_map(ast::Pat::cast).ok_or(())?;\n-    if node.to_string() != s {\n-        return Err(());\n-    }\n-    Ok(node.syntax().clone_subtree())\n+    fragment::<ast::Pat>(\"const _: () = {let {} = ();};\", s)\n }\n \n pub(crate) fn expr(s: &str) -> Result<SyntaxNode, ()> {\n-    let template = \"const _: () = {};\";\n-    let input = template.replace(\"{}\", s);\n-    let parse = syntax::SourceFile::parse(&input);\n-    if !parse.errors().is_empty() {\n-        return Err(());\n-    }\n-    let node = parse.tree().syntax().descendants().find_map(ast::Expr::cast).ok_or(())?;\n-    if node.to_string() != s {\n-        return Err(());\n-    }\n-    Ok(node.syntax().clone_subtree())\n+    fragment::<ast::Expr>(\"const _: () = {};\", s)\n }\n \n pub(crate) fn stmt(s: &str) -> Result<SyntaxNode, ()> {\n@@ -82,3 +42,17 @@ pub(crate) fn stmt(s: &str) -> Result<SyntaxNode, ()> {\n     }\n     Ok(node.syntax().clone_subtree())\n }\n+\n+fn fragment<T: AstNode>(template: &str, s: &str) -> Result<SyntaxNode, ()> {\n+    let s = s.trim();\n+    let input = template.replace(\"{}\", s);\n+    let parse = syntax::SourceFile::parse(&input);\n+    if !parse.errors().is_empty() {\n+        return Err(());\n+    }\n+    let node = parse.tree().syntax().descendants().find_map(T::cast).ok_or(())?;\n+    if node.syntax().text() != s {\n+        return Err(());\n+    }\n+    Ok(node.syntax().clone_subtree())\n+}"}]}