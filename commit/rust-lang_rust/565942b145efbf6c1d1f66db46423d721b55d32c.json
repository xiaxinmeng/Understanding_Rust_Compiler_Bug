{"sha": "565942b145efbf6c1d1f66db46423d721b55d32c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NTk0MmIxNDVlZmJmNmMxZDFmNjZkYjQ2NDIzZDcyMWI1NWQzMmM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-16T22:37:52Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-23T04:57:03Z"}, "message": "librustc: Fix privacy checking for cross-crate variants", "tree": {"sha": "69dddfbb0fc4f2b4c7729a84a8ad2c896ccd3740", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69dddfbb0fc4f2b4c7729a84a8ad2c896ccd3740"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/565942b145efbf6c1d1f66db46423d721b55d32c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/565942b145efbf6c1d1f66db46423d721b55d32c", "html_url": "https://github.com/rust-lang/rust/commit/565942b145efbf6c1d1f66db46423d721b55d32c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/565942b145efbf6c1d1f66db46423d721b55d32c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "211d038abc05c77785f72a31840016517cf218c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/211d038abc05c77785f72a31840016517cf218c2", "html_url": "https://github.com/rust-lang/rust/commit/211d038abc05c77785f72a31840016517cf218c2"}], "stats": {"total": 115, "additions": 81, "deletions": 34}, "files": [{"sha": "b21417f5100c68f4a09e73aa6aa8ff8543faf729", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/565942b145efbf6c1d1f66db46423d721b55d32c/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565942b145efbf6c1d1f66db46423d721b55d32c/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=565942b145efbf6c1d1f66db46423d721b55d32c", "patch": "@@ -52,9 +52,22 @@ pub fn each_lang_item(cstore: @mut cstore::CStore,\n }\n \n /// Iterates over all the paths in the given crate.\n+#[cfg(stage0)]\n pub fn each_path(cstore: @mut cstore::CStore,\n                  cnum: ast::crate_num,\n-                 f: &fn(&str, decoder::def_like) -> bool) -> bool {\n+                 f: &fn(&str, decoder::def_like, ast::visibility) -> bool) {\n+    let crate_data = cstore::get_crate_data(cstore, cnum);\n+    let get_crate_data: decoder::GetCrateDataCb = |cnum| {\n+        cstore::get_crate_data(cstore, cnum)\n+    };\n+    decoder::each_path(cstore.intr, crate_data, get_crate_data, f)\n+}\n+/// Iterates over all the paths in the given crate.\n+#[cfg(not(stage0))]\n+pub fn each_path(cstore: @mut cstore::CStore,\n+                 cnum: ast::crate_num,\n+                 f: &fn(&str, decoder::def_like, ast::visibility) -> bool)\n+                 -> bool {\n     let crate_data = cstore::get_crate_data(cstore, cnum);\n     let get_crate_data: decoder::GetCrateDataCb = |cnum| {\n         cstore::get_crate_data(cstore, cnum)"}, {"sha": "d6e7e64e4f801e258a74c8f9da928932bf583b00", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/565942b145efbf6c1d1f66db46423d721b55d32c/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565942b145efbf6c1d1f66db46423d721b55d32c/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=565942b145efbf6c1d1f66db46423d721b55d32c", "patch": "@@ -319,8 +319,7 @@ fn item_name(intr: @ident_interner, item: ebml::Doc) -> ast::ident {\n }\n \n fn item_to_def_like(item: ebml::Doc, did: ast::def_id, cnum: ast::crate_num)\n-    -> def_like\n-{\n+    -> def_like {\n     let fam = item_family(item);\n     match fam {\n         Const     => dl_def(ast::def_const(did)),\n@@ -474,9 +473,11 @@ pub fn each_lang_item(cdata: cmd, f: &fn(ast::node_id, uint) -> bool) -> bool {\n }\n \n /// Iterates over all the paths in the given crate.\n-pub fn _each_path(intr: @ident_interner, cdata: cmd,\n+pub fn _each_path(intr: @ident_interner,\n+                  cdata: cmd,\n                   get_crate_data: GetCrateDataCb,\n-                  f: &fn(&str, def_like) -> bool) -> bool {\n+                  f: &fn(&str, def_like, ast::visibility) -> bool)\n+                  -> bool {\n     let root = reader::Doc(cdata.data);\n     let items = reader::get_doc(root, tag_items);\n     let items_data = reader::get_doc(items, tag_items_data);\n@@ -497,8 +498,10 @@ pub fn _each_path(intr: @ident_interner, cdata: cmd,\n                 debug!(\"(each_path) yielding explicit item: %s\", path);\n                 let def_like = item_to_def_like(item_doc, def_id, cdata.cnum);\n \n+                let vis = item_visibility(item_doc);\n+\n                 // Hand the information off to the iteratee.\n-                if !f(path, def_like) {\n+                if !f(path, def_like, vis) {\n                     broken = true;      // FIXME #4572: This is awful.\n                 }\n             }\n@@ -548,7 +551,7 @@ pub fn _each_path(intr: @ident_interner, cdata: cmd,\n                             debug!(\"(each_path) yielding reexported \\\n                                     item: %s\", reexport_path);\n \n-                            if (!f(reexport_path, def_like)) {\n+                            if (!f(reexport_path, def_like, ast::public)) {\n                                 broken = true;  // FIXME #4572: This is awful.\n                             }\n                         }\n@@ -561,9 +564,19 @@ pub fn _each_path(intr: @ident_interner, cdata: cmd,\n     return broken;\n }\n \n-pub fn each_path(intr: @ident_interner, cdata: cmd,\n+#[cfg(stage0)]\n+pub fn each_path(intr: @ident_interner,\n+                 cdata: cmd,\n+                 get_crate_data: GetCrateDataCb,\n+                 f: &fn(&str, def_like, ast::visibility) -> bool) {\n+    _each_path(intr, cdata, get_crate_data, f);\n+}\n+#[cfg(not(stage0))]\n+pub fn each_path(intr: @ident_interner,\n+                 cdata: cmd,\n                  get_crate_data: GetCrateDataCb,\n-                 f: &fn(&str, def_like) -> bool) -> bool {\n+                 f: &fn(&str, def_like, ast::visibility) -> bool)\n+                 -> bool {\n     _each_path(intr, cdata, get_crate_data, f)\n }\n \n@@ -1127,7 +1140,7 @@ pub fn get_crate_vers(data: @~[u8]) -> @~str {\n fn iter_crate_items(intr: @ident_interner, cdata: cmd,\n                     get_crate_data: GetCrateDataCb,\n                     proc: &fn(path: &str, ast::def_id)) {\n-    for each_path(intr, cdata, get_crate_data) |path_string, def_like| {\n+    for each_path(intr, cdata, get_crate_data) |path_string, def_like, _| {\n         match def_like {\n             dl_impl(*) | dl_field => {}\n             dl_def(def) => {"}, {"sha": "297b0408dc524599ce51fd7d5830ab42d7ee0f5f", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/565942b145efbf6c1d1f66db46423d721b55d32c/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565942b145efbf6c1d1f66db46423d721b55d32c/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=565942b145efbf6c1d1f66db46423d721b55d32c", "patch": "@@ -316,6 +316,7 @@ fn encode_enum_variant_info(ecx: @EncodeContext,\n         encode_family(ebml_w, 'v');\n         encode_name(ecx, ebml_w, variant.node.name);\n         encode_parent_item(ebml_w, local_def(id));\n+        encode_visibility(ebml_w, variant.node.vis);\n         encode_type(ecx, ebml_w,\n                     node_id_to_type(ecx.tcx, variant.node.id));\n         match variant.node.kind {"}, {"sha": "306671641a384333df6bb7bef0482663f1e72ad6", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 29, "deletions": 23, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/565942b145efbf6c1d1f66db46423d721b55d32c/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565942b145efbf6c1d1f66db46423d721b55d32c/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=565942b145efbf6c1d1f66db46423d721b55d32c", "patch": "@@ -539,7 +539,8 @@ pub impl NameBindings {\n                 self.type_def = Some(TypeNsDef {\n                     privacy: privacy,\n                     module_def: Some(module),\n-                    type_def: None\n+                    type_def: None,\n+                    type_span: None,\n                 })\n             }\n             Some(type_def) => {\n@@ -549,7 +550,8 @@ pub impl NameBindings {\n                         self.type_def = Some(TypeNsDef {\n                             privacy: privacy,\n                             module_def: Some(module),\n-                            type_def: type_def.type_def\n+                            type_def: type_def.type_def,\n+                            type_span: None,\n                         })\n                     }\n                     Some(module_def) => module_def.kind = kind,\n@@ -1392,10 +1394,8 @@ pub impl Resolver {\n         }\n     }\n \n-    /**\n-     * Constructs the reduced graph for one 'view item'. View items consist\n-     * of imports and use directives.\n-     */\n+    /// Constructs the reduced graph for one 'view item'. View items consist\n+    /// of imports and use directives.\n     fn build_reduced_graph_for_view_item(@mut self,\n                                          view_item: @view_item,\n                                          parent: ReducedGraphParent,\n@@ -1551,11 +1551,13 @@ pub impl Resolver {\n \n     fn handle_external_def(@mut self,\n                            def: def,\n+                           visibility: ast::visibility,\n                            modules: &mut HashMap<def_id, @mut Module>,\n                            child_name_bindings: @mut NameBindings,\n                            final_ident: &str,\n                            ident: ident,\n                            new_parent: ReducedGraphParent) {\n+        let privacy = visibility_to_privacy(visibility);\n         match def {\n           def_mod(def_id) | def_foreign_mod(def_id) => {\n             match child_name_bindings.type_def {\n@@ -1573,7 +1575,7 @@ pub impl Resolver {\n \n                 // FIXME (#5074): this should be a match on find\n                 if !modules.contains_key(&def_id) {\n-                    child_name_bindings.define_module(Public,\n+                    child_name_bindings.define_module(privacy,\n                                                       parent_link,\n                                                       Some(def_id),\n                                                       NormalModuleKind,\n@@ -1582,9 +1584,9 @@ pub impl Resolver {\n                                    child_name_bindings.get_module());\n                 } else {\n                     let existing_module = *modules.get(&def_id);\n-                    // Create an import resolution to\n-                    // avoid creating cycles in the\n-                    // module graph.\n+\n+                    // Create an import resolution to avoid creating cycles in\n+                    // the module graph.\n \n                     let resolution = @mut ImportResolution(Public, 0);\n                     resolution.outstanding_references = 0;\n@@ -1610,11 +1612,19 @@ pub impl Resolver {\n               }\n             }\n           }\n-          def_fn(*) | def_static_method(*) | def_const(*) |\n           def_variant(*) => {\n+            debug!(\"(building reduced graph for external crate) building \\\n+                    variant %s\",\n+                   final_ident);\n+            // We assume the parent is visible, or else we wouldn't have seen\n+            // it.\n+            let privacy = variant_visibility_to_privacy(visibility, true);\n+            child_name_bindings.define_value(privacy, def, dummy_sp());\n+          }\n+          def_fn(*) | def_static_method(*) | def_const(*) => {\n             debug!(\"(building reduced graph for external \\\n                     crate) building value %s\", final_ident);\n-            child_name_bindings.define_value(Public, def, dummy_sp());\n+            child_name_bindings.define_value(privacy, def, dummy_sp());\n           }\n           def_trait(def_id) => {\n               debug!(\"(building reduced graph for external \\\n@@ -1651,11 +1661,11 @@ pub impl Resolver {\n                   }\n               }\n \n-              child_name_bindings.define_type(Public, def, dummy_sp());\n+              child_name_bindings.define_type(privacy, def, dummy_sp());\n \n               // Define a module if necessary.\n               let parent_link = self.get_parent_link(new_parent, ident);\n-              child_name_bindings.set_module_kind(Public,\n+              child_name_bindings.set_module_kind(privacy,\n                                                   parent_link,\n                                                   Some(def_id),\n                                                   TraitModuleKind,\n@@ -1665,13 +1675,13 @@ pub impl Resolver {\n               debug!(\"(building reduced graph for external \\\n                       crate) building type %s\", final_ident);\n \n-              child_name_bindings.define_type(Public, def, dummy_sp());\n+              child_name_bindings.define_type(privacy, def, dummy_sp());\n           }\n           def_struct(def_id) => {\n             debug!(\"(building reduced graph for external \\\n                     crate) building type %s\",\n                    final_ident);\n-            child_name_bindings.define_type(Public, def, dummy_sp());\n+            child_name_bindings.define_type(privacy, def, dummy_sp());\n             self.structs.insert(def_id);\n           }\n           def_self(*) | def_arg(*) | def_local(*) |\n@@ -1692,7 +1702,7 @@ pub impl Resolver {\n \n         // Create all the items reachable by paths.\n         for each_path(self.session.cstore, root.def_id.get().crate)\n-                |path_string, def_like| {\n+                |path_string, def_like, visibility| {\n \n             debug!(\"(building reduced graph for external crate) found path \\\n                         entry: %s (%?)\",\n@@ -1760,6 +1770,7 @@ pub impl Resolver {\n                                        dummy_sp());\n \n                     self.handle_external_def(def,\n+                                             visibility,\n                                              &mut modules,\n                                              child_name_bindings,\n                                              *self.session.str_of(\n@@ -2995,14 +3006,9 @@ pub impl Resolver {\n \n         // If this is a search of all imports, we should be done with glob\n         // resolution at this point.\n-<<<<<<< HEAD\n-        if name_search_type == SearchItemsAndAllImports {\n-            assert_eq!(module_.glob_count, 0);\n-=======\n         if name_search_type == PathPublicOrPrivateSearch ||\n                 name_search_type == PathPublicOnlySearch {\n-            assert!(module_.glob_count == 0);\n->>>>>>> librustc: Disallow `use` from reaching into impls or traits.\n+            assert_eq!(module_.glob_count, 0);\n         }\n \n         // Check the list of resolved imports."}, {"sha": "8870f0fdc57f0261824d2bb5acbf4226cdd8d04b", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/565942b145efbf6c1d1f66db46423d721b55d32c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565942b145efbf6c1d1f66db46423d721b55d32c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=565942b145efbf6c1d1f66db46423d721b55d32c", "patch": "@@ -975,7 +975,7 @@ pub impl CoherenceChecker {\n                                       def_id { crate: crate_number,\n                                                node: 0 });\n \n-            for each_path(crate_store, crate_number) |_p, def_like| {\n+            for each_path(crate_store, crate_number) |_, def_like, _| {\n                 match def_like {\n                     dl_def(def_mod(def_id)) => {\n                         self.add_impls_for_module(&mut impls_seen,"}, {"sha": "d7d55c691b6832b4cbec49b1cef4ec6f800885c9", "filename": "src/test/auxiliary/private_variant_xc.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/565942b145efbf6c1d1f66db46423d721b55d32c/src%2Ftest%2Fauxiliary%2Fprivate_variant_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565942b145efbf6c1d1f66db46423d721b55d32c/src%2Ftest%2Fauxiliary%2Fprivate_variant_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fprivate_variant_xc.rs?ref=565942b145efbf6c1d1f66db46423d721b55d32c", "patch": "@@ -0,0 +1,5 @@\n+pub enum Foo {\n+    pub Bar,\n+    priv Baz,\n+}\n+"}, {"sha": "c7838b98855080c4b51f1ed1554937f91709ea9b", "filename": "src/test/compile-fail/private-variant-xc.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/565942b145efbf6c1d1f66db46423d721b55d32c/src%2Ftest%2Fcompile-fail%2Fprivate-variant-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565942b145efbf6c1d1f66db46423d721b55d32c/src%2Ftest%2Fcompile-fail%2Fprivate-variant-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-variant-xc.rs?ref=565942b145efbf6c1d1f66db46423d721b55d32c", "patch": "@@ -0,0 +1,9 @@\n+// aux-build:private_variant_xc.rs\n+\n+extern mod private_variant_xc;\n+\n+pub fn main() {\n+    let _ = private_variant_xc::Bar;\n+    let _ = private_variant_xc::Baz;    //~ ERROR unresolved name\n+}\n+"}]}