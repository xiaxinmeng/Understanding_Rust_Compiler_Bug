{"sha": "42282a25c03182a19e80fb1a3294d3869859d6fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMjgyYTI1YzAzMTgyYTE5ZTgwZmIxYTMyOTRkMzg2OTg1OWQ2ZmE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-01T18:19:20Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-01T18:19:38Z"}, "message": "rustc: Resolve tag variant names", "tree": {"sha": "d1e68961c74eae3f52e5ab937121b62e562166a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1e68961c74eae3f52e5ab937121b62e562166a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42282a25c03182a19e80fb1a3294d3869859d6fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42282a25c03182a19e80fb1a3294d3869859d6fa", "html_url": "https://github.com/rust-lang/rust/commit/42282a25c03182a19e80fb1a3294d3869859d6fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42282a25c03182a19e80fb1a3294d3869859d6fa/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dc98e54d1191b5414e6e04367fd4e3d80311cfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dc98e54d1191b5414e6e04367fd4e3d80311cfa", "html_url": "https://github.com/rust-lang/rust/commit/4dc98e54d1191b5414e6e04367fd4e3d80311cfa"}], "stats": {"total": 83, "additions": 65, "deletions": 18}, "files": [{"sha": "06e80d7b4a9920944c5fd9cc67cb74f20665f9b2", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/42282a25c03182a19e80fb1a3294d3869859d6fa/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42282a25c03182a19e80fb1a3294d3869859d6fa/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=42282a25c03182a19e80fb1a3294d3869859d6fa", "patch": "@@ -30,7 +30,7 @@ tag def {\n     def_const(def_id);\n     def_arg(def_id);\n     def_local(def_id);\n-    def_variant(def_id);\n+    def_variant(def_id /* tag */, def_id /* variant */);\n     def_ty(def_id);\n     def_ty_arg(def_id);\n }\n@@ -175,8 +175,13 @@ type _fn = rec(vec[arg] inputs,\n                @ty output,\n                block body);\n \n+tag mod_index_entry {\n+    mie_item(uint);\n+    mie_tag_variant(uint /* tag item index */, uint /* variant index */);\n+}\n+\n type _mod = rec(vec[@item] items,\n-                hashmap[ident,uint] index);\n+                hashmap[ident,mod_index_entry] index);\n \n type variant = rec(str name, vec[@ty] args, def_id id);\n "}, {"sha": "eeb279a7688122f40175f7738bf32b274b8a7ac9", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 37, "deletions": 14, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/42282a25c03182a19e80fb1a3294d3869859d6fa/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42282a25c03182a19e80fb1a3294d3869859d6fa/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=42282a25c03182a19e80fb1a3294d3869859d6fa", "patch": "@@ -1155,7 +1155,7 @@ impure fn parse_ty_params(parser p) -> vec[ast.ty_param] {\n     ret ty_params;\n }\n \n-impure fn parse_item_fn(parser p) -> tup(ast.ident, @ast.item) {\n+impure fn parse_item_fn(parser p) -> @ast.item {\n     auto lo = p.get_span();\n     expect(p, token.FN);\n     auto id = parse_ident(p);\n@@ -1186,23 +1186,46 @@ impure fn parse_item_fn(parser p) -> tup(ast.ident, @ast.item) {\n                         body = body);\n \n     auto item = ast.item_fn(id, f, ty_params, p.next_def_id(), ast.ann_none);\n-    ret tup(id, @spanned(lo, body.span, item));\n+    ret @spanned(lo, body.span, item);\n }\n \n impure fn parse_mod_items(parser p, token.token term) -> ast._mod {\n-   let vec[@ast.item] items = vec();\n-    let hashmap[ast.ident,uint] index = new_str_hash[uint]();\n+    let vec[@ast.item] items = vec();\n+    auto index = new_str_hash[ast.mod_index_entry]();\n     let uint u = 0u;\n     while (p.peek() != term) {\n-        auto pair = parse_item(p);\n-        append[@ast.item](items, pair._1);\n-        index.insert(pair._0, u);\n+        auto item = parse_item(p);\n+        items += vec(item);\n+\n+        // Index the item.\n+        alt (item.node) {\n+            case (ast.item_fn(?id, _, _, _, _)) {\n+                index.insert(id, ast.mie_item(u));\n+            }\n+            case (ast.item_mod(?id, _, _)) {\n+                index.insert(id, ast.mie_item(u));\n+            }\n+            case (ast.item_ty(?id, _, _, _, _)) {\n+                index.insert(id, ast.mie_item(u));\n+            }\n+\n+            case (ast.item_tag(?id, ?variants, _, _)) {\n+                index.insert(id, ast.mie_item(u));\n+            \n+                let uint variant_idx = 0u;\n+                for (ast.variant v in variants) {\n+                    index.insert(v.name, ast.mie_tag_variant(u, variant_idx));\n+                    variant_idx += 1u;\n+                }\n+            }\n+        }\n+\n         u += 1u;\n     }\n     ret rec(items=items, index=index);\n  }\n \n-impure fn parse_item_mod(parser p) -> tup(ast.ident, @ast.item) {\n+impure fn parse_item_mod(parser p) -> @ast.item {\n     auto lo = p.get_span();\n     expect(p, token.MOD);\n     auto id = parse_ident(p);\n@@ -1211,10 +1234,10 @@ impure fn parse_item_mod(parser p) -> tup(ast.ident, @ast.item) {\n     auto hi = p.get_span();\n     expect(p, token.RBRACE);\n     auto item = ast.item_mod(id, m, p.next_def_id());\n-    ret tup(id, @spanned(lo, hi, item));\n+    ret @spanned(lo, hi, item);\n }\n \n-impure fn parse_item_type(parser p) -> tup(ast.ident, @ast.item) {\n+impure fn parse_item_type(parser p) -> @ast.item {\n     auto lo = p.get_span();\n     expect(p, token.TYPE);\n     auto id = parse_ident(p);\n@@ -1225,10 +1248,10 @@ impure fn parse_item_type(parser p) -> tup(ast.ident, @ast.item) {\n     auto hi = p.get_span();\n     expect(p, token.SEMI);\n     auto item = ast.item_ty(id, ty, tps, p.next_def_id(), ast.ann_none);\n-    ret tup(id, @spanned(lo, hi, item));\n+    ret @spanned(lo, hi, item);\n }\n \n-impure fn parse_item_tag(parser p) -> tup(ast.ident, @ast.item) {\n+impure fn parse_item_tag(parser p) -> @ast.item {\n     auto lo = p.get_span();\n     expect(p, token.TAG);\n     auto id = parse_ident(p);\n@@ -1273,10 +1296,10 @@ impure fn parse_item_tag(parser p) -> tup(ast.ident, @ast.item) {\n \n     auto hi = p.get_span();\n     auto item = ast.item_tag(id, variants, ty_params, p.next_def_id());\n-    ret tup(id, @spanned(lo, hi, item));\n+    ret @spanned(lo, hi, item);\n }\n \n-impure fn parse_item(parser p) -> tup(ast.ident, @ast.item) {\n+impure fn parse_item(parser p) -> @ast.item {\n     alt (p.peek()) {\n         case (token.FN) {\n             ret parse_item_fn(p);"}, {"sha": "2655a6c5726f17e9e8babc3f0665114c968bb8ac", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/42282a25c03182a19e80fb1a3294d3869859d6fa/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42282a25c03182a19e80fb1a3294d3869859d6fa/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=42282a25c03182a19e80fb1a3294d3869859d6fa", "patch": "@@ -38,6 +38,9 @@ fn lookup_name(&env e, ast.ident i) -> option.t[def] {\n             case (ast.item_ty(_, _, _, ?id, _)) {\n                 ret some[def](ast.def_ty(id));\n             }\n+            case (ast.item_tag(_, _, _, ?id)) {\n+                ret some[def](ast.def_ty(id));\n+            }\n         }\n     }\n \n@@ -59,8 +62,24 @@ fn lookup_name(&env e, ast.ident i) -> option.t[def] {\n \n     fn check_mod(ast.ident i, ast._mod m) -> option.t[def] {\n         alt (m.index.find(i)) {\n-            case (some[uint](?ix)) {\n-                ret found_def_item(m.items.(ix));\n+            case (some[ast.mod_index_entry](?ent)) {\n+                alt (ent) {\n+                    case (ast.mie_item(?ix)) {\n+                        ret found_def_item(m.items.(ix));\n+                    }\n+                    case (ast.mie_tag_variant(?item_idx, ?variant_idx)) {\n+                        alt (m.items.(item_idx).node) {\n+                            case (ast.item_tag(_, ?variants, _, ?tid)) {\n+                                auto vid = variants.(variant_idx).id;\n+                                ret some[def](ast.def_variant(tid, vid));\n+                            }\n+                            case (_) {\n+                                log \"tag item not actually a tag\";\n+                                fail;\n+                            }\n+                        }\n+                    }\n+                }\n             }\n         }\n         ret none[def];"}]}