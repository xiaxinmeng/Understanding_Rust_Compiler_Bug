{"sha": "b768d27f039e186d863c0fce332d87b9e63167e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NjhkMjdmMDM5ZTE4NmQ4NjNjMGZjZTMzMmQ4N2I5ZTYzMTY3ZTM=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-10-10T20:53:20Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-10-11T18:57:44Z"}, "message": "Format variadic arguments", "tree": {"sha": "d2f059ed719fc3f1e748d96667784a12ae049140", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2f059ed719fc3f1e748d96667784a12ae049140"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b768d27f039e186d863c0fce332d87b9e63167e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b768d27f039e186d863c0fce332d87b9e63167e3", "html_url": "https://github.com/rust-lang/rust/commit/b768d27f039e186d863c0fce332d87b9e63167e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b768d27f039e186d863c0fce332d87b9e63167e3/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47483866c630361f4a42d80c5e3122702b218a8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/47483866c630361f4a42d80c5e3122702b218a8f", "html_url": "https://github.com/rust-lang/rust/commit/47483866c630361f4a42d80c5e3122702b218a8f"}], "stats": {"total": 68, "additions": 59, "deletions": 9}, "files": [{"sha": "35d34bbb558861294e631160e633ef866bfd8db1", "filename": "src/items.rs", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b768d27f039e186d863c0fce332d87b9e63167e3/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b768d27f039e186d863c0fce332d87b9e63167e3/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=b768d27f039e186d863c0fce332d87b9e63167e3", "patch": "@@ -377,7 +377,8 @@ impl<'a> FmtVisitor<'a> {\n                                                  multi_line_budget,\n                                                  indent,\n                                                  arg_indent,\n-                                                 args_span));\n+                                                 args_span,\n+                                                 fd.variadic));\n         result.push_str(&arg_str);\n         if self.config.fn_args_layout == StructLitStyle::Block {\n             result.push('\\n');\n@@ -475,7 +476,8 @@ impl<'a> FmtVisitor<'a> {\n                     multi_line_budget: usize,\n                     indent: Indent,\n                     arg_indent: Indent,\n-                    span: Span)\n+                    span: Span,\n+                    variadic: bool)\n                     -> Option<String> {\n         let context = self.get_context();\n         let mut arg_item_strs = try_opt!(args.iter()\n@@ -506,27 +508,59 @@ impl<'a> FmtVisitor<'a> {\n         // without spans for the comment or parens, there is no chance of\n         // getting it right. You also don't get to put a comment on self, unless\n         // it is explicit.\n-        if args.len() >= min_args {\n+        if args.len() >= min_args || variadic {\n             let comment_span_start = if min_args == 2 {\n                 span_after(span, \",\", self.codemap)\n             } else {\n                 span.lo\n             };\n \n+            enum ArgumentKind<'a> {\n+                Regular(&'a ast::Arg),\n+                Variadic(BytePos),\n+            }\n+\n+            let variadic_arg = if variadic {\n+                let variadic_span = codemap::mk_sp(args.last().unwrap().ty.span.hi, span.hi);\n+                let variadic_start = span_after(variadic_span, \"...\", self.codemap) - BytePos(1);\n+                Some(ArgumentKind::Variadic(variadic_start))\n+            } else {\n+                None\n+            };\n+\n             let more_items = itemize_list(self.codemap,\n-                                          args[min_args - 1..].iter(),\n+                                          args[min_args - 1..]\n+                                              .iter()\n+                                              .map(ArgumentKind::Regular)\n+                                              .chain(variadic_arg),\n                                           \")\",\n-                                          |arg| span_lo_for_arg(arg),\n-                                          |arg| arg.ty.span.hi,\n-                                          |_| None,\n+                                          |arg| {\n+                                              match *arg {\n+                                                  ArgumentKind::Regular(arg) =>\n+                                                      span_lo_for_arg(arg),\n+                                                  ArgumentKind::Variadic(start) => start,\n+                                              }\n+                                          },\n+                                          |arg| {\n+                                              match *arg {\n+                                                  ArgumentKind::Regular(arg) => arg.ty.span.hi,\n+                                                  ArgumentKind::Variadic(start) =>\n+                                                      start + BytePos(3),\n+                                              }\n+                                          },\n+                                          |arg| {\n+                                              match *arg {\n+                                                  ArgumentKind::Regular(..) => None,\n+                                                  ArgumentKind::Variadic(..) =>\n+                                                      Some(\"...\".to_owned()),\n+                                              }\n+                                          },\n                                           comment_span_start,\n                                           span.hi);\n \n             arg_items.extend(more_items);\n         }\n \n-        assert_eq!(arg_item_strs.len(), arg_items.len());\n-\n         for (item, arg) in arg_items.iter_mut().zip(arg_item_strs) {\n             item.item = Some(arg);\n         }"}, {"sha": "7d3d0de620046a837c5be76fb924013e92a7f5c4", "filename": "tests/source/extern.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b768d27f039e186d863c0fce332d87b9e63167e3/tests%2Fsource%2Fextern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b768d27f039e186d863c0fce332d87b9e63167e3/tests%2Fsource%2Fextern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fextern.rs?ref=b768d27f039e186d863c0fce332d87b9e63167e3", "patch": "@@ -19,3 +19,10 @@ extern {\n extern \"Rust\" { static ext:  u32;\n     // Some comment.\n      pub static  mut var : SomeType ; }\n+\n+extern \"C\" {\n+            fn syscall(number: libc::c_long /* comment 1 */, /* comm 2 */ ... /* sup? */) -> libc::c_long;\n+\n+    fn  foo  (x:  *const c_char ,    ...   ) ->\n+libc::c_long;\n+        }"}, {"sha": "164a6302bb45bd833f951586efc12a114779e6ef", "filename": "tests/target/extern.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b768d27f039e186d863c0fce332d87b9e63167e3/tests%2Ftarget%2Fextern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b768d27f039e186d863c0fce332d87b9e63167e3/tests%2Ftarget%2Fextern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fextern.rs?ref=b768d27f039e186d863c0fce332d87b9e63167e3", "patch": "@@ -27,3 +27,12 @@ extern \"Rust\" {\n     // Some comment.\n     pub static mut var: SomeType;\n }\n+\n+extern {\n+    fn syscall(number: libc::c_long, // comment 1\n+               // comm 2\n+               ... /* sup? */)\n+               -> libc::c_long;\n+\n+    fn foo(x: *const c_char, ...) -> libc::c_long;\n+}"}]}