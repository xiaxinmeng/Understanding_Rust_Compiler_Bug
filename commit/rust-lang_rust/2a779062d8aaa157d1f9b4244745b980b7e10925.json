{"sha": "2a779062d8aaa157d1f9b4244745b980b7e10925", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNzc5MDYyZDhhYWExNTdkMWY5YjQyNDQ3NDViOTgwYjdlMTA5MjU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-09-20T13:47:24Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-09-22T16:58:29Z"}, "message": "Use Names in the remaining HIR structures with exception of...\nPathSegment, PatIdent, ExprWhile, ExprLoop, ExprBreak and ExprAgain - they need Idents for resolve", "tree": {"sha": "bbb2d118e228059655919484521aa5260ece59d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbb2d118e228059655919484521aa5260ece59d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a779062d8aaa157d1f9b4244745b980b7e10925", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a779062d8aaa157d1f9b4244745b980b7e10925", "html_url": "https://github.com/rust-lang/rust/commit/2a779062d8aaa157d1f9b4244745b980b7e10925", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a779062d8aaa157d1f9b4244745b980b7e10925/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a636a83caa483df687732649204d71dda66a5723", "url": "https://api.github.com/repos/rust-lang/rust/commits/a636a83caa483df687732649204d71dda66a5723", "html_url": "https://github.com/rust-lang/rust/commit/a636a83caa483df687732649204d71dda66a5723"}], "stats": {"total": 172, "additions": 86, "deletions": 86}, "files": [{"sha": "74fb1ce18b345e5c8ad2a8af03d97e3f088dc28f", "filename": "src/librustc/front/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs?ref=2a779062d8aaa157d1f9b4244745b980b7e10925", "patch": "@@ -483,7 +483,7 @@ impl<'ast> Map<'ast> {\n             NodeForeignItem(i) => PathName(i.name),\n             NodeImplItem(ii) => PathName(ii.name),\n             NodeTraitItem(ti) => PathName(ti.name),\n-            NodeVariant(v) => PathName(v.node.name.name),\n+            NodeVariant(v) => PathName(v.node.name),\n             NodeLifetime(lt) => PathName(lt.name),\n             _ => panic!(\"no path elem for {:?}\", node)\n         }\n@@ -710,7 +710,7 @@ impl<T:Named> Named for Spanned<T> { fn name(&self) -> Name { self.node.name() }\n \n impl Named for Item { fn name(&self) -> Name { self.name } }\n impl Named for ForeignItem { fn name(&self) -> Name { self.name } }\n-impl Named for Variant_ { fn name(&self) -> Name { self.name.name } }\n+impl Named for Variant_ { fn name(&self) -> Name { self.name } }\n impl Named for TraitItem { fn name(&self) -> Name { self.name } }\n impl Named for ImplItem { fn name(&self) -> Name { self.name } }\n "}, {"sha": "40d7b63cff9bb277d9b100722f180c3c15e75cf7", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=2a779062d8aaa157d1f9b4244745b980b7e10925", "patch": "@@ -526,7 +526,7 @@ fn construct_witness<'a,'tcx>(cx: &MatchCheckCtxt<'a,'tcx>, ctor: &Constructor,\n                     .map(|(field, pat)| Spanned {\n                         span: DUMMY_SP,\n                         node: hir::FieldPat {\n-                            ident: ast::Ident::new(field.name),\n+                            name: field.name,\n                             pat: pat,\n                             is_shorthand: false,\n                         }\n@@ -910,7 +910,7 @@ pub fn specialize<'a>(cx: &MatchCheckCtxt, r: &[&'a Pat],\n             let def_variant = adt.variant_of_def(def);\n             if variant.did == def_variant.did {\n                 Some(variant.fields.iter().map(|sf| {\n-                    match pattern_fields.iter().find(|f| f.node.ident.name == sf.name) {\n+                    match pattern_fields.iter().find(|f| f.node.name == sf.name) {\n                         Some(ref f) => &*f.node.pat,\n                         _ => DUMMY_WILD_PAT\n                     }"}, {"sha": "4894a78f1acb4b6fd9bd5a6884381b15f90aa65a", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=2a779062d8aaa157d1f9b4244745b980b7e10925", "patch": "@@ -314,7 +314,7 @@ pub fn const_expr_to_pat(tcx: &ty::ctxt, expr: &Expr, span: Span) -> P<hir::Pat>\n             let field_pats = fields.iter().map(|field| codemap::Spanned {\n                 span: codemap::DUMMY_SP,\n                 node: hir::FieldPat {\n-                    ident: ast::Ident::new(field.name.node),\n+                    name: field.name.node,\n                     pat: const_expr_to_pat(tcx, &*field.expr, span),\n                     is_shorthand: false,\n                 },"}, {"sha": "92592f049e0b19184d6644fb285cc36bb17e38e8", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=2a779062d8aaa157d1f9b4244745b980b7e10925", "patch": "@@ -137,7 +137,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n             if let hir::PatWild(hir::PatWildSingle) = pat.node.pat.node {\n                 continue;\n             }\n-            self.live_symbols.insert(variant.field_named(pat.node.ident.name).did.node);\n+            self.live_symbols.insert(variant.field_named(pat.node.name).did.node);\n         }\n     }\n \n@@ -443,7 +443,7 @@ impl<'a, 'tcx> DeadVisitor<'a, 'tcx> {\n     }\n \n     fn should_warn_about_field(&mut self, node: &hir::StructField_) -> bool {\n-        let is_named = node.ident().is_some();\n+        let is_named = node.name().is_some();\n         let field_type = self.tcx.node_id_to_type(node.id);\n         let is_marker_field = match field_type.ty_to_def_id() {\n             Some(def_id) => self.tcx.lang_items.items().any(|(_, item)| *item == Some(def_id)),\n@@ -529,7 +529,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for DeadVisitor<'a, 'tcx> {\n                     for variant in &enum_def.variants {\n                         if self.should_warn_about_variant(&variant.node) {\n                             self.warn_dead_code(variant.node.id, variant.span,\n-                                                variant.node.name.name, \"variant\");\n+                                                variant.node.name, \"variant\");\n                         }\n                     }\n                 },\n@@ -549,7 +549,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for DeadVisitor<'a, 'tcx> {\n     fn visit_struct_field(&mut self, field: &hir::StructField) {\n         if self.should_warn_about_field(&field.node) {\n             self.warn_dead_code(field.node.id, field.span,\n-                                field.node.ident().unwrap().name, \"struct field\");\n+                                field.node.name().unwrap(), \"struct field\");\n         }\n \n         visit::walk_struct_field(self, field);"}, {"sha": "fa2856e2f30c3793342c352359a24b5e09ce69ec", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=2a779062d8aaa157d1f9b4244745b980b7e10925", "patch": "@@ -1198,7 +1198,7 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n                                                       lifetime,\n                                                       region_names);\n             hir::TyParam {\n-                ident: ty_param.ident,\n+                name: ty_param.name,\n                 id: ty_param.id,\n                 bounds: bounds,\n                 default: ty_param.default.clone(),\n@@ -1541,7 +1541,7 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n                 let new_bindings = data.bindings.map(|b| {\n                     P(hir::TypeBinding {\n                         id: b.id,\n-                        ident: b.ident,\n+                        name: b.name,\n                         ty: self.rebuild_arg_ty_or_output(&*b.ty,\n                                                           lifetime,\n                                                           anon_nums,"}, {"sha": "2e7d9e89824439e075fe11a6a09ddb9d42e81680", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=2a779062d8aaa157d1f9b4244745b980b7e10925", "patch": "@@ -1272,7 +1272,7 @@ impl<'t, 'a,'tcx> MemCategorizationContext<'t, 'a, 'tcx> {\n             // {f1: p1, ..., fN: pN}\n             for fp in field_pats {\n                 let field_ty = try!(self.pat_ty(&*fp.node.pat)); // see (*2)\n-                let cmt_field = self.cat_field(pat, cmt.clone(), fp.node.ident.name, field_ty);\n+                let cmt_field = self.cat_field(pat, cmt.clone(), fp.node.name, field_ty);\n                 try!(self.cat_pattern_(cmt_field, &*fp.node.pat, op));\n             }\n           }"}, {"sha": "bc83f42b90860d734f4bfb34bcb632407f86cd81", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=2a779062d8aaa157d1f9b4244745b980b7e10925", "patch": "@@ -513,7 +513,7 @@ pub fn check_pat(tcx: &ty::ctxt, pat: &hir::Pat,\n         // Foo { a, b, c }\n         hir::PatStruct(_, ref pat_fields, _) => {\n             for field in pat_fields {\n-                let did = v.field_named(field.node.ident.name).did;\n+                let did = v.field_named(field.node.name).did;\n                 maybe_do_stability_check(tcx, did, field.span, cb);\n             }\n         }"}, {"sha": "b305114ced7fa1f48a9de30e25893b03e66083af", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=2a779062d8aaa157d1f9b4244745b980b7e10925", "patch": "@@ -355,9 +355,9 @@ pub fn noop_fold_decl<T: Folder>(d: P<Decl>, fld: &mut T) -> SmallVector<P<Decl>\n }\n \n pub fn noop_fold_ty_binding<T: Folder>(b: P<TypeBinding>, fld: &mut T) -> P<TypeBinding> {\n-    b.map(|TypeBinding { id, ident, ty, span }| TypeBinding {\n+    b.map(|TypeBinding { id, name, ty, span }| TypeBinding {\n         id: fld.new_id(id),\n-        ident: ident,\n+        name: name,\n         ty: fld.fold_ty(ty),\n         span: fld.new_span(span),\n     })\n@@ -576,10 +576,10 @@ pub fn noop_fold_ty_param_bound<T>(tpb: TyParamBound, fld: &mut T)\n }\n \n pub fn noop_fold_ty_param<T: Folder>(tp: TyParam, fld: &mut T) -> TyParam {\n-    let TyParam {id, ident, bounds, default, span} = tp;\n+    let TyParam {id, name, bounds, default, span} = tp;\n     TyParam {\n         id: fld.new_id(id),\n-        ident: ident,\n+        name: name,\n         bounds: fld.fold_bounds(bounds),\n         default: default.map(|x| fld.fold_ty(x)),\n         span: span\n@@ -1009,7 +1009,7 @@ pub fn noop_fold_pat<T: Folder>(p: P<Pat>, folder: &mut T) -> P<Pat> {\n                 let fs = fields.move_map(|f| {\n                     Spanned { span: folder.new_span(f.span),\n                               node: hir::FieldPat {\n-                                  ident: f.node.ident,\n+                                  name: f.node.name,\n                                   pat: folder.fold_pat(f.node.pat),\n                                   is_shorthand: f.node.is_shorthand,\n                               }}"}, {"sha": "4dfb80cce6da63c6196ceef79d36ce4b4af92d60", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=2a779062d8aaa157d1f9b4244745b980b7e10925", "patch": "@@ -244,7 +244,7 @@ pub type TyParamBounds = OwnedSlice<TyParamBound>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct TyParam {\n-    pub ident: Ident,\n+    pub name: Name,\n     pub id: NodeId,\n     pub bounds: TyParamBounds,\n     pub default: Option<P<Ty>>,\n@@ -378,7 +378,7 @@ impl fmt::Debug for Pat {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct FieldPat {\n     /// The identifier for the field\n-    pub ident: Ident,\n+    pub name: Name,\n     /// The pattern the field is destructured to\n     pub pat: P<Pat>,\n     pub is_shorthand: bool,\n@@ -791,7 +791,7 @@ pub enum ImplItem_ {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct TypeBinding {\n     pub id: NodeId,\n-    pub ident: Ident,\n+    pub name: Name,\n     pub ty: P<Ty>,\n     pub span: Span,\n }\n@@ -981,11 +981,11 @@ pub enum ExplicitSelf_ {\n     /// No self\n     SelfStatic,\n     /// `self`\n-    SelfValue(Ident),\n+    SelfValue(Name),\n     /// `&'lt self`, `&'lt mut self`\n-    SelfRegion(Option<Lifetime>, Mutability, Ident),\n+    SelfRegion(Option<Lifetime>, Mutability, Name),\n     /// `self: TYPE`\n-    SelfExplicit(P<Ty>, Ident),\n+    SelfExplicit(P<Ty>, Name),\n }\n \n pub type ExplicitSelf = Spanned<ExplicitSelf_>;\n@@ -1026,7 +1026,7 @@ pub struct EnumDef {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Variant_ {\n-    pub name: Ident,\n+    pub name: Name,\n     pub attrs: Vec<Attribute>,\n     pub kind: VariantKind,\n     pub id: NodeId,\n@@ -1133,9 +1133,9 @@ pub struct StructField_ {\n }\n \n impl StructField_ {\n-    pub fn ident(&self) -> Option<Ident> {\n+    pub fn name(&self) -> Option<Name> {\n         match self.kind {\n-            NamedField(ref ident, _) => Some(ident.clone()),\n+            NamedField(name, _) => Some(name),\n             UnnamedField(_) => None\n         }\n     }\n@@ -1145,7 +1145,7 @@ pub type StructField = Spanned<StructField_>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum StructFieldKind {\n-    NamedField(Ident, Visibility),\n+    NamedField(Name, Visibility),\n     /// Element of a tuple-like struct\n     UnnamedField(Visibility),\n }"}, {"sha": "4888ff93c997b1b0789964e5fdb93f380a1535ba", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=2a779062d8aaa157d1f9b4244745b980b7e10925", "patch": "@@ -76,7 +76,7 @@ pub fn lower_decl(d: &Decl) -> P<hir::Decl> {\n }\n \n pub fn lower_ty_binding(b: &TypeBinding) -> P<hir::TypeBinding> {\n-    P(hir::TypeBinding { id: b.id, ident: b.ident, ty: lower_ty(&b.ty), span: b.span })\n+    P(hir::TypeBinding { id: b.id, name: b.ident.name, ty: lower_ty(&b.ty), span: b.span })\n }\n \n pub fn lower_ty(t: &Ty) -> P<hir::Ty> {\n@@ -138,7 +138,7 @@ pub fn lower_variant(v: &Variant) -> P<hir::Variant> {\n     P(Spanned {\n         node: hir::Variant_ {\n             id: v.node.id,\n-            name: v.node.name,\n+            name: v.node.name.name,\n             attrs: v.node.attrs.clone(),\n             kind: match v.node.kind {\n                 TupleVariantKind(ref variant_args) => {\n@@ -209,12 +209,12 @@ pub fn lower_local(l: &Local) -> P<hir::Local> {\n pub fn lower_explicit_self_underscore(es: &ExplicitSelf_) -> hir::ExplicitSelf_ {\n     match *es {\n         SelfStatic => hir::SelfStatic,\n-        SelfValue(v) => hir::SelfValue(v),\n+        SelfValue(v) => hir::SelfValue(v.name),\n         SelfRegion(ref lifetime, m, ident) => {\n-            hir::SelfRegion(lower_opt_lifetime(lifetime), lower_mutability(m), ident)\n+            hir::SelfRegion(lower_opt_lifetime(lifetime), lower_mutability(m), ident.name)\n         }\n         SelfExplicit(ref typ, ident) => {\n-            hir::SelfExplicit(lower_ty(typ), ident)\n+            hir::SelfExplicit(lower_ty(typ), ident.name)\n         }\n     }\n }\n@@ -258,7 +258,7 @@ pub fn lower_ty_param_bound(tpb: &TyParamBound) -> hir::TyParamBound {\n pub fn lower_ty_param(tp: &TyParam) -> hir::TyParam {\n     hir::TyParam {\n         id: tp.id,\n-        ident: tp.ident,\n+        name: tp.ident.name,\n         bounds: lower_bounds(&tp.bounds),\n         default: tp.default.as_ref().map(|x| lower_ty(x)),\n         span: tp.span,\n@@ -665,7 +665,7 @@ pub fn lower_pat(p: &Pat) -> P<hir::Pat> {\n                 let fs = fields.iter().map(|f| {\n                     Spanned { span: f.span,\n                               node: hir::FieldPat {\n-                                  ident: f.node.ident,\n+                                  name: f.node.ident.name,\n                                   pat: lower_pat(&f.node.pat),\n                                   is_shorthand: f.node.is_shorthand,\n                               }}\n@@ -901,7 +901,7 @@ pub fn lower_binding_mode(b: &BindingMode) -> hir::BindingMode {\n \n pub fn lower_struct_field_kind(s: &StructFieldKind) -> hir::StructFieldKind {\n     match *s {\n-        NamedField(ident, vis) => hir::NamedField(ident, lower_visibility(vis)),\n+        NamedField(ident, vis) => hir::NamedField(ident.name, lower_visibility(vis)),\n         UnnamedField(vis) => hir::UnnamedField(lower_visibility(vis)),\n     }\n }"}, {"sha": "6f2ef8e8cbc48c8b71fad8e40b8a6a5205f609c0", "filename": "src/librustc_front/print/pprust.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fprint%2Fpprust.rs?ref=2a779062d8aaa157d1f9b4244745b980b7e10925", "patch": "@@ -926,12 +926,12 @@ impl<'a> State<'a> {\n             for field in &struct_def.fields {\n                 match field.node.kind {\n                     hir::UnnamedField(..) => panic!(\"unexpected unnamed field\"),\n-                    hir::NamedField(ident, visibility) => {\n+                    hir::NamedField(name, visibility) => {\n                         try!(self.hardbreak_if_not_bol());\n                         try!(self.maybe_print_comment(field.span.lo));\n                         try!(self.print_outer_attributes(&field.node.attrs));\n                         try!(self.print_visibility(visibility));\n-                        try!(self.print_ident(ident));\n+                        try!(self.print_name(name));\n                         try!(self.word_nbsp(\":\"));\n                         try!(self.print_type(&*field.node.ty));\n                         try!(word(&mut self.s, \",\"));\n@@ -946,7 +946,7 @@ impl<'a> State<'a> {\n     pub fn print_variant(&mut self, v: &hir::Variant) -> io::Result<()> {\n         match v.node.kind {\n             hir::TupleVariantKind(ref args) => {\n-                try!(self.print_ident(v.node.name));\n+                try!(self.print_name(v.node.name));\n                 if !args.is_empty() {\n                     try!(self.popen());\n                     try!(self.commasep(Consistent,\n@@ -958,7 +958,7 @@ impl<'a> State<'a> {\n             hir::StructVariantKind(ref struct_def) => {\n                 try!(self.head(\"\"));\n                 let generics = ::util::empty_generics();\n-                try!(self.print_struct(&**struct_def, &generics, v.node.name.name, v.span));\n+                try!(self.print_struct(&**struct_def, &generics, v.node.name, v.span));\n             }\n         }\n         match v.node.disr_expr {\n@@ -1699,7 +1699,7 @@ impl<'a> State<'a> {\n                     if comma {\n                         try!(self.word_space(\",\"))\n                     }\n-                    try!(self.print_ident(binding.ident));\n+                    try!(self.print_name(binding.name));\n                     try!(space(&mut self.s));\n                     try!(self.word_space(\"=\"));\n                     try!(self.print_type(&*binding.ty));\n@@ -1785,7 +1785,7 @@ impl<'a> State<'a> {\n                     |s, f| {\n                         try!(s.cbox(indent_unit));\n                         if !f.node.is_shorthand {\n-                            try!(s.print_ident(f.node.ident));\n+                            try!(s.print_name(f.node.name));\n                             try!(s.word_nbsp(\":\"));\n                         }\n                         try!(s.print_pat(&*f.node.pat));\n@@ -2111,7 +2111,7 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_ty_param(&mut self, param: &hir::TyParam) -> io::Result<()> {\n-        try!(self.print_ident(param.ident));\n+        try!(self.print_name(param.name));\n         try!(self.print_bounds(\":\", &param.bounds));\n         match param.default {\n             Some(ref default) => {"}, {"sha": "a167e962db0334b20b246a691ab517171af1f8e7", "filename": "src/librustc_front/visit.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_front%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_front%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fvisit.rs?ref=2a779062d8aaa157d1f9b4244745b980b7e10925", "patch": "@@ -299,7 +299,7 @@ pub fn walk_enum_def<'v, V: Visitor<'v>>(visitor: &mut V,\n pub fn walk_variant<'v, V: Visitor<'v>>(visitor: &mut V,\n                                         variant: &'v Variant,\n                                         generics: &'v Generics) {\n-    visitor.visit_name(variant.span, variant.node.name.name);\n+    visitor.visit_name(variant.span, variant.node.name);\n \n     match variant.node.kind {\n         TupleVariantKind(ref variant_arguments) => {\n@@ -309,7 +309,7 @@ pub fn walk_variant<'v, V: Visitor<'v>>(visitor: &mut V,\n         }\n         StructVariantKind(ref struct_definition) => {\n             visitor.visit_struct_def(&**struct_definition,\n-                                     variant.node.name.name,\n+                                     variant.node.name,\n                                      generics,\n                                      variant.node.id)\n         }\n@@ -441,7 +441,7 @@ pub fn walk_path_parameters<'v, V: Visitor<'v>>(visitor: &mut V,\n \n pub fn walk_assoc_type_binding<'v, V: Visitor<'v>>(visitor: &mut V,\n                                                    type_binding: &'v TypeBinding) {\n-    visitor.visit_name(type_binding.span, type_binding.ident.name);\n+    visitor.visit_name(type_binding.span, type_binding.name);\n     visitor.visit_ty(&*type_binding.ty);\n }\n \n@@ -539,7 +539,7 @@ pub fn walk_ty_param_bound<'v, V: Visitor<'v>>(visitor: &mut V,\n \n pub fn walk_generics<'v, V: Visitor<'v>>(visitor: &mut V, generics: &'v Generics) {\n     for param in generics.ty_params.iter() {\n-        visitor.visit_name(param.span, param.ident.name);\n+        visitor.visit_name(param.span, param.name);\n         walk_ty_param_bounds_helper(visitor, &param.bounds);\n         walk_ty_opt(visitor, &param.default);\n     }\n@@ -668,7 +668,7 @@ pub fn walk_struct_def<'v, V: Visitor<'v>>(visitor: &mut V,\n pub fn walk_struct_field<'v, V: Visitor<'v>>(visitor: &mut V,\n                                              struct_field: &'v StructField) {\n     if let NamedField(name, _) = struct_field.node.kind {\n-        visitor.visit_name(struct_field.span, name.name);\n+        visitor.visit_name(struct_field.span, name);\n     }\n \n     visitor.visit_ty(&*struct_field.node.ty);"}, {"sha": "d115c60f33cf4632ff628b77c1ce58b04f6a4a1f", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=2a779062d8aaa157d1f9b4244745b980b7e10925", "patch": "@@ -909,7 +909,7 @@ impl LateLintPass for NonShorthandFieldPatterns {\n             });\n             for fieldpat in field_pats {\n                 if let hir::PatIdent(_, ident, None) = fieldpat.node.pat.node {\n-                    if ident.node.name == fieldpat.node.ident.name {\n+                    if ident.node.name == fieldpat.node.name {\n                         // FIXME: should this comparison really be done on the name?\n                         // doing it on the ident will fail during compilation of libcore\n                         cx.span_lint(NON_SHORTHAND_FIELD_PATTERNS, fieldpat.span,"}, {"sha": "aeca15cb43c36392ed746f5676a4d2d6f8a18f44", "filename": "src/librustc_mir/tcx/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_mir%2Ftcx%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_mir%2Ftcx%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftcx%2Fpattern.rs?ref=2a779062d8aaa157d1f9b4244745b980b7e10925", "patch": "@@ -268,7 +268,7 @@ impl<'a,'tcx:'a> Mirror<Cx<'a,'tcx>> for PatNode<'tcx> {\n                 let subpatterns =\n                     fields.iter()\n                           .map(|field| FieldPatternRef {\n-                              field: Field::Named(field.node.ident.name),\n+                              field: Field::Named(field.node.name),\n                               pattern: self.pat_ref(&field.node.pat),\n                           })\n                           .collect();"}, {"sha": "dc74ba0ff8afbb0134e6391c3184b7567be65d02", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=2a779062d8aaa157d1f9b4244745b980b7e10925", "patch": "@@ -941,7 +941,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n                 let variant = adt.variant_of_def(def);\n                 for field in fields {\n                     self.check_field(pattern.span, adt, variant,\n-                                     NamedField(field.node.ident.name));\n+                                     NamedField(field.node.name));\n                 }\n             }\n "}, {"sha": "e3e1a26a6f6ebf9b55050967fc1b857c77c31eb9", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=2a779062d8aaa157d1f9b4244745b980b7e10925", "patch": "@@ -508,7 +508,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 // Record the def ID and fields of this struct.\n                 let named_fields = struct_def.fields.iter().filter_map(|f| {\n                     match f.node.kind {\n-                        NamedField(ident, _) => Some(ident.name),\n+                        NamedField(name, _) => Some(name),\n                         UnnamedField(_) => None\n                     }\n                 }).collect();\n@@ -578,7 +578,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                        variant: &Variant,\n                                        item_id: DefId,\n                                        parent: &Rc<Module>) {\n-        let name = variant.node.name.name;\n+        let name = variant.node.name;\n         let is_exported = match variant.node.kind {\n             TupleVariantKind(_) => false,\n             StructVariantKind(_) => {"}, {"sha": "f3789c773fb2d01153b9489d701c6f70e8df8405", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=2a779062d8aaa157d1f9b4244745b980b7e10925", "patch": "@@ -509,7 +509,7 @@ impl<'a, 'v, 'tcx> Visitor<'v> for Resolver<'a, 'tcx> {\n             }\n             hir::StructVariantKind(ref struct_definition) => {\n                 self.visit_struct_def(&**struct_definition,\n-                                      variant.node.name.name,\n+                                      variant.node.name,\n                                       generics,\n                                       variant.node.id);\n             }\n@@ -2264,7 +2264,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 let mut function_type_rib = Rib::new(rib_kind);\n                 let mut seen_bindings = HashSet::new();\n                 for (index, type_parameter) in generics.ty_params.iter().enumerate() {\n-                    let name = type_parameter.ident.name;\n+                    let name = type_parameter.name;\n                     debug!(\"with_type_parameter_rib: {}\", type_parameter.id);\n \n                     if seen_bindings.contains(&name) {\n@@ -2390,7 +2390,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n     fn resolve_generics(&mut self, generics: &Generics) {\n         for type_parameter in generics.ty_params.iter() {\n-            self.check_if_primitive_type_name(type_parameter.ident.name, type_parameter.span);\n+            self.check_if_primitive_type_name(type_parameter.name, type_parameter.span);\n         }\n         for predicate in &generics.where_clause.predicates {\n             match predicate {"}, {"sha": "af0780587e8b0ec9dba6c8898218dc37074b0c18", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=2a779062d8aaa157d1f9b4244745b980b7e10925", "patch": "@@ -1872,7 +1872,7 @@ pub fn bind_irrefutable_pat<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             let pat_repr = adt::represent_type(bcx.ccx(), pat_ty);\n             let pat_v = VariantInfo::of_node(tcx, pat_ty, pat.id);\n             for f in fields {\n-                let name = f.node.ident.name;\n+                let name = f.node.name;\n                 let fldptr = adt::trans_field_ptr(\n                     bcx,\n                     &*pat_repr,"}, {"sha": "ebd2b7ea41811cca722009cb569708412d3446e3", "filename": "src/librustc_trans/trans/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs?ref=2a779062d8aaa157d1f9b4244745b980b7e10925", "patch": "@@ -520,7 +520,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n         // Handle other generic parameters\n         let actual_types = param_substs.types.get_slice(subst::FnSpace);\n-        for (index, &hir::TyParam{ ident, .. }) in generics.ty_params.iter().enumerate() {\n+        for (index, &hir::TyParam{ name, .. }) in generics.ty_params.iter().enumerate() {\n             let actual_type = actual_types[index];\n             // Add actual type name to <...> clause of function name\n             let actual_type_name = compute_debuginfo_type_name(cx,\n@@ -535,7 +535,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             // Again, only create type information if full debuginfo is enabled\n             if cx.sess().opts.debuginfo == FullDebugInfo {\n                 let actual_type_metadata = type_metadata(cx, actual_type, codemap::DUMMY_SP);\n-                let name = CString::new(ident.name.as_str().as_bytes()).unwrap();\n+                let name = CString::new(name.as_str().as_bytes()).unwrap();\n                 let param_metadata = unsafe {\n                     llvm::LLVMDIBuilderCreateTemplateTypeParameter(\n                         DIB(cx),"}, {"sha": "df0323350fdee81b45a2401d7ee6185774bf53a3", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=2a779062d8aaa157d1f9b4244745b980b7e10925", "patch": "@@ -194,7 +194,7 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         }\n         hir_map::NodeVariant(v) => {\n             let variant = inlined_variant_def(ccx, fn_id.node);\n-            assert_eq!(v.node.name.name, variant.name);\n+            assert_eq!(v.node.name, variant.name);\n             let d = mk_lldecl(abi::Rust);\n             attributes::inline(d, attributes::InlineAttr::Hint);\n             trans_enum_variant(ccx, fn_id.node, variant.disr_val, psubsts, d);"}, {"sha": "5be450ea27832586ff460775821178d076ae5352", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=2a779062d8aaa157d1f9b4244745b980b7e10925", "patch": "@@ -545,7 +545,7 @@ fn convert_angle_bracketed_parameters<'tcx>(this: &AstConv<'tcx>,\n \n     let assoc_bindings: Vec<_> =\n         data.bindings.iter()\n-                     .map(|b| ConvertedBinding { item_name: b.ident.name,\n+                     .map(|b| ConvertedBinding { item_name: b.name,\n                                                  ty: ast_ty_to_ty(this, rscope, &*b.ty),\n                                                  span: b.span })\n                      .collect();"}, {"sha": "136b3c4405d5b989e9221ba06e5129d6203ec156", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=2a779062d8aaa157d1f9b4244745b980b7e10925", "patch": "@@ -706,25 +706,25 @@ pub fn check_struct_pat_fields<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n \n     // Typecheck each field.\n     for &Spanned { node: ref field, span } in fields {\n-        let field_ty = match used_fields.entry(field.ident.name) {\n+        let field_ty = match used_fields.entry(field.name) {\n             Occupied(occupied) => {\n                 span_err!(tcx.sess, span, E0025,\n                     \"field `{}` bound multiple times in the pattern\",\n-                    field.ident);\n+                    field.name);\n                 span_note!(tcx.sess, *occupied.get(),\n                     \"field `{}` previously bound here\",\n-                    field.ident);\n+                    field.name);\n                 tcx.types.err\n             }\n             Vacant(vacant) => {\n                 vacant.insert(span);\n-                field_map.get(&field.ident.name)\n+                field_map.get(&field.name)\n                     .map(|f| pcx.fcx.field_ty(span, f, substs))\n                     .unwrap_or_else(|| {\n                         span_err!(tcx.sess, span, E0026,\n                             \"struct `{}` does not have a field named `{}`\",\n                             tcx.item_path_str(variant.did),\n-                            field.ident);\n+                            field.name);\n                         tcx.types.err\n                     })\n             }"}, {"sha": "47ddbfdb8cc3c34d9267c54bdf7865eb45db9068", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2a779062d8aaa157d1f9b4244745b980b7e10925", "patch": "@@ -838,7 +838,7 @@ fn check_trait_on_unimplemented<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                         Position::ArgumentNamed(s) if s == \"Self\" => (),\n                         // So is `{A}` if A is a type parameter\n                         Position::ArgumentNamed(s) => match types.iter().find(|t| {\n-                            t.ident.name == s\n+                            t.name == s\n                         }) {\n                             Some(_) => (),\n                             None => {\n@@ -4938,7 +4938,7 @@ pub fn check_bounds_are_used<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         if !*b {\n             span_err!(ccx.tcx.sess, span, E0091,\n                 \"type parameter `{}` is unused\",\n-                tps[i].ident);\n+                tps[i].name);\n         }\n     }\n }"}, {"sha": "902ebcc3da87b7a1e77603fee4ee9fcf9bcdfc78", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=2a779062d8aaa157d1f9b4244745b980b7e10925", "patch": "@@ -324,7 +324,7 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n                 -> ty::ParamTy\n     {\n         let name = match space {\n-            TypeSpace => ast_generics.ty_params[index].ident.name,\n+            TypeSpace => ast_generics.ty_params[index].name,\n             SelfSpace => special_idents::type_self.name,\n             FnSpace => self.tcx().sess.bug(\"Fn space occupied?\"),\n         };"}, {"sha": "0e462b2a8525d8915ece80ae7c772f350154f47d", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=2a779062d8aaa157d1f9b4244745b980b7e10925", "patch": "@@ -431,7 +431,7 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n                 -> ty::ParamTy\n     {\n         let name = match space {\n-            TypeSpace => ast_generics.ty_params[index].ident.name,\n+            TypeSpace => ast_generics.ty_params[index].name,\n             SelfSpace => special_idents::type_self.name,\n             FnSpace => self.tcx().sess.bug(\"Fn space occupied?\"),\n         };"}, {"sha": "cd3c630c7abb5d579b753b81ec6d8dd1760d4aaf", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=2a779062d8aaa157d1f9b4244745b980b7e10925", "patch": "@@ -1099,18 +1099,18 @@ fn convert_struct_variant<'tcx>(tcx: &ty::ctxt<'tcx>,\n     let fields = def.fields.iter().map(|f| {\n         let fid = DefId::local(f.node.id);\n         match f.node.kind {\n-            hir::NamedField(ident, vis) => {\n-                let dup_span = seen_fields.get(&ident.name).cloned();\n+            hir::NamedField(name, vis) => {\n+                let dup_span = seen_fields.get(&name).cloned();\n                 if let Some(prev_span) = dup_span {\n                     span_err!(tcx.sess, f.span, E0124,\n                               \"field `{}` is already declared\",\n-                              ident.name);\n+                              name);\n                     span_note!(tcx.sess, prev_span, \"previously declared here\");\n                 } else {\n-                    seen_fields.insert(ident.name, f.span);\n+                    seen_fields.insert(name, f.span);\n                 }\n \n-                ty::FieldDefData::new(fid, ident.name, vis)\n+                ty::FieldDefData::new(fid, name, vis)\n             },\n             hir::UnnamedField(vis) => {\n                 ty::FieldDefData::new(fid, special_idents::unnamed_field.name, vis)\n@@ -1195,7 +1195,7 @@ fn convert_enum_def<'tcx>(tcx: &ty::ctxt<'tcx>,\n         if let Some(prev_disr_val) = prev_disr_val {\n             let result = repr_type.disr_incr(prev_disr_val);\n             if let None = result {\n-                report_discrim_overflow(tcx, v.span, &v.node.name.name.as_str(),\n+                report_discrim_overflow(tcx, v.span, &v.node.name.as_str(),\n                                              repr_type, prev_disr_val);\n             }\n             result\n@@ -1209,7 +1209,7 @@ fn convert_enum_def<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                   -> ty::VariantDefData<'tcx, 'tcx>\n     {\n         let did = DefId::local(v.node.id);\n-        let name = v.node.name.name;\n+        let name = v.node.name;\n         match v.node.kind {\n             hir::TupleVariantKind(ref va) => {\n                 ty::VariantDefData {\n@@ -1417,7 +1417,7 @@ fn trait_def_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                     .iter()\n                     .enumerate()\n                     .map(|(i, def)| tcx.mk_param(TypeSpace,\n-                                                 i as u32, def.ident.name))\n+                                                 i as u32, def.name))\n                     .collect();\n \n         // ...and also create the `Self` parameter.\n@@ -1862,7 +1862,7 @@ fn ty_generic_predicates<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n     // type parameter (e.g., `<T:Foo>`).\n     for (index, param) in ast_generics.ty_params.iter().enumerate() {\n         let index = index as u32;\n-        let param_ty = ty::ParamTy::new(space, index, param.ident.name).to_ty(ccx.tcx);\n+        let param_ty = ty::ParamTy::new(space, index, param.name).to_ty(ccx.tcx);\n         let bounds = compute_bounds(&ccx.icx(&(base_predicates, ast_generics)),\n                                     param_ty,\n                                     &param.bounds,\n@@ -2033,7 +2033,7 @@ fn get_or_create_type_parameter_def<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n     let def = ty::TypeParameterDef {\n         space: space,\n         index: index,\n-        name: param.ident.name,\n+        name: param.name,\n         def_id: DefId::local(param.id),\n         default_def_id: DefId::local(parent),\n         default: default,\n@@ -2415,7 +2415,7 @@ fn enforce_impl_params_are_constrained<'tcx>(tcx: &ty::ctxt<'tcx>,\n     for (index, ty_param) in ast_generics.ty_params.iter().enumerate() {\n         let param_ty = ty::ParamTy { space: TypeSpace,\n                                      idx: index as u32,\n-                                     name: ty_param.ident.name };\n+                                     name: ty_param.name };\n         if !input_parameters.contains(&ctp::Parameter::Type(param_ty)) {\n             report_unused_parameter(tcx, ty_param.span, \"type\", &param_ty.to_string());\n         }"}, {"sha": "14d5ed2eb507de4b17df948358aeb9d1400bfffc", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=2a779062d8aaa157d1f9b4244745b980b7e10925", "patch": "@@ -494,7 +494,7 @@ pub struct TyParam {\n impl Clean<TyParam> for hir::TyParam {\n     fn clean(&self, cx: &DocContext) -> TyParam {\n         TyParam {\n-            name: self.ident.clean(cx),\n+            name: self.name.clean(cx),\n             did: DefId { krate: LOCAL_CRATE, node: self.id },\n             bounds: self.bounds.clean(cx),\n             default: self.default.clean(cx),\n@@ -2547,7 +2547,7 @@ fn name_from_pat(p: &hir::Pat) -> String {\n         PatStruct(ref name, ref fields, etc) => {\n             format!(\"{} {{ {}{} }}\", path_to_string(name),\n                 fields.iter().map(|&Spanned { node: ref fp, .. }|\n-                                  format!(\"{}: {}\", fp.ident, name_from_pat(&*fp.pat)))\n+                                  format!(\"{}: {}\", fp.name, name_from_pat(&*fp.pat)))\n                              .collect::<Vec<String>>().join(\", \"),\n                 if etc { \", ...\" } else { \"\" }\n             )\n@@ -2840,7 +2840,7 @@ pub struct TypeBinding {\n impl Clean<TypeBinding> for hir::TypeBinding {\n     fn clean(&self, cx: &DocContext) -> TypeBinding {\n         TypeBinding {\n-            name: self.ident.clean(cx),\n+            name: self.name.clean(cx),\n             ty: self.ty.clean(cx)\n         }\n     }"}, {"sha": "c234ec01b88698d37dac2a510ff72241c5894d19", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a779062d8aaa157d1f9b4244745b980b7e10925/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=2a779062d8aaa157d1f9b4244745b980b7e10925", "patch": "@@ -17,7 +17,7 @@ use syntax;\n use syntax::codemap::Span;\n use syntax::abi;\n use syntax::ast;\n-use syntax::ast::{Ident, Name, NodeId};\n+use syntax::ast::{Name, NodeId};\n use syntax::attr;\n use syntax::ptr::P;\n use rustc_front::hir;\n@@ -117,7 +117,7 @@ pub struct Enum {\n }\n \n pub struct Variant {\n-    pub name: Ident,\n+    pub name: Name,\n     pub attrs: Vec<ast::Attribute>,\n     pub kind: hir::VariantKind,\n     pub id: ast::NodeId,"}]}