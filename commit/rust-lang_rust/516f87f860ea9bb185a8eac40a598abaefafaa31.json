{"sha": "516f87f860ea9bb185a8eac40a598abaefafaa31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNmY4N2Y4NjBlYTliYjE4NWE4ZWFjNDBhNTk4YWJhZWZhZmFhMzE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-01T06:17:43Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-01T07:45:51Z"}, "message": "rustdoc: Write markdown to a file instead of stdout", "tree": {"sha": "4a4a3d133bcf146ac41b9171f927b526a07e051c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a4a3d133bcf146ac41b9171f927b526a07e051c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/516f87f860ea9bb185a8eac40a598abaefafaa31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/516f87f860ea9bb185a8eac40a598abaefafaa31", "html_url": "https://github.com/rust-lang/rust/commit/516f87f860ea9bb185a8eac40a598abaefafaa31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/516f87f860ea9bb185a8eac40a598abaefafaa31/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad82a031f2e2c3612b0257f6727b8a379cb732d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad82a031f2e2c3612b0257f6727b8a379cb732d0", "html_url": "https://github.com/rust-lang/rust/commit/ad82a031f2e2c3612b0257f6727b8a379cb732d0"}], "stats": {"total": 54, "additions": 47, "deletions": 7}, "files": [{"sha": "06b1b0f4484ff6dec7635651e95a032bc0dc914b", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 47, "deletions": 7, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/516f87f860ea9bb185a8eac40a598abaefafaa31/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/516f87f860ea9bb185a8eac40a598abaefafaa31/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=516f87f860ea9bb185a8eac40a598abaefafaa31", "patch": "@@ -3,15 +3,15 @@\n export mk_pass;\n \n fn mk_pass(config: config::config) -> pass {\n-    mk_pass_(config, stdout_writer)\n+    mk_pass_(config, markdown_writer(config))\n }\n \n enum writeinstr {\n     write(str),\n     done\n }\n \n-type writer = fn~(writeinstr);\n+type writer = fn~(+writeinstr);\n \n impl writer for writer {\n     fn write_str(str: str) {\n@@ -27,13 +27,53 @@ impl writer for writer {\n     }\n }\n \n-fn stdout_writer(instr: writeinstr) {\n-    alt instr {\n-      write(str) { std::io::println(str); }\n-      done { }\n+fn markdown_writer(config: config::config) -> writer {\n+    let filename = make_filename(config);\n+    let ch = task::spawn_listener {|po: comm::port<writeinstr>|\n+        let markdown = \"\";\n+        let keep_going = true;\n+        while keep_going {\n+            alt comm::recv(po) {\n+              write(s) { markdown += s; }\n+              done { keep_going = false; }\n+            }\n+        }\n+        write_file(filename, markdown);\n+    };\n+\n+    fn~(+instr: writeinstr) {\n+        comm::send(ch, instr);\n     }\n }\n \n+fn make_filename(config: config::config) -> str {\n+    import std::fs;\n+    let cratefile = fs::basename(config.input_crate);\n+    let cratename = tuple::first(fs::splitext(cratefile));\n+    fs::connect(config.output_dir, cratename + \".md\")\n+}\n+\n+fn write_file(path: str, s: str) {\n+    import std::io;\n+    import std::io::writer_util;\n+\n+    alt io::file_writer(path, [io::create, io::truncate]) {\n+      result::ok(writer) {\n+        writer.write_str(s);\n+      }\n+      result::err(e) { fail e }\n+    }\n+}\n+\n+#[test]\n+fn should_use_markdown_file_name_based_off_crate() {\n+    let config = {\n+        output_dir: \"output/dir\"\n+        with config::default_config(\"input/test.rc\")\n+    };\n+    assert make_filename(config) == \"output/dir/test.md\";\n+}\n+\n // FIXME: This is a really convoluted interface to work around trying\n // to get a writer into a unique closure and then being able to test\n // what was written afterward\n@@ -881,7 +921,7 @@ mod test {\n     fn writer_future() -> (writer, future::future<str>) {\n         let port = comm::port();\n         let chan = comm::chan(port);\n-        let writer = fn~(instr: writeinstr) {\n+        let writer = fn~(+instr: writeinstr) {\n             comm::send(chan, copy instr);\n         };\n         let future = future::from_fn {||"}]}