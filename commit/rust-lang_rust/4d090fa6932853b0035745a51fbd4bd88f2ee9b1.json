{"sha": "4d090fa6932853b0035745a51fbd4bd88f2ee9b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkMDkwZmE2OTMyODUzYjAwMzU3NDVhNTFmYmQ0YmQ4OGYyZWU5YjE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-13T09:39:15Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-13T09:39:15Z"}, "message": "report better errors when using a fn ptr as memory and vice versa", "tree": {"sha": "2cd4819015f00a77857fbc8ca12c7dbdc8451268", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cd4819015f00a77857fbc8ca12c7dbdc8451268"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d090fa6932853b0035745a51fbd4bd88f2ee9b1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXXn9DAAoJEFbW7qD8Z6xGQ40P/iGy0qC2bJrd//ThoWxxGqHI\nP3WVXlrCdpJGHk1SJHVuxqzoYz/Mzfy2UG0d3lidBOnbdECnt7A4cfDCRMCs+9fD\nUyJWJ1NgVfip7zZkyU/I/b5794lNwPmeAqQiWqBJWssuTj++QLDXwP7N1CQ0TfPk\nAsiY8PIiRsDPmTnFbpeVFr5a/fUQu0X4bLWV92wbyJaLgToIWZHW14NsFnZSdL7i\ngPpQ4P6qoj0KWAg+U7TpNeknqMcjb/A7ttAfqCo31NMFrVYfnabCAKIW+hdKPv5W\n6YfrV92RxCsQlFPme0MaPb8/zmO3ZOrc8Gjs4G5yhWGdRhH/NHHg+neBvqVFDaIp\nrHuewwkGa3OlPXLeB/QPXn9o/OyZaTI+GaYS/6AB12wnISYc7b3Rf9mzGuh8dZXQ\n/KPy9qsn1kVHhHDtIc4IufKQTJLN0xCyuW7tkobFT6HRDqTkiuhbvXgaFsdkDQQC\nUvh8JQm91CrNdH25bDp6J3OqE0STfFXFdR6BJkqYofCZVnjagBRPE6CRtpuq/Btr\nVluZe2tvCnozC+dwahP2qS+iz/5QjZPI31CwUy3EBw2JRL+EyRhQ3qaFJpCL3FlQ\nCxVK6lHZnXk4BJ+QH2JE29uXM6YXbXEivV/frxOvh3HA99+Q2PTK1x+JJvLwTfSm\n8bMNQmnyEAy4nVmBy63s\n=3YLx\n-----END PGP SIGNATURE-----", "payload": "tree 2cd4819015f00a77857fbc8ca12c7dbdc8451268\nparent 875e00fd6e66571a8f0aff122550170c02ce8133\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1465810755 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1465810755 +0200\n\nreport better errors when using a fn ptr as memory and vice versa"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d090fa6932853b0035745a51fbd4bd88f2ee9b1", "html_url": "https://github.com/rust-lang/rust/commit/4d090fa6932853b0035745a51fbd4bd88f2ee9b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d090fa6932853b0035745a51fbd4bd88f2ee9b1/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "875e00fd6e66571a8f0aff122550170c02ce8133", "url": "https://api.github.com/repos/rust-lang/rust/commits/875e00fd6e66571a8f0aff122550170c02ce8133", "html_url": "https://github.com/rust-lang/rust/commit/875e00fd6e66571a8f0aff122550170c02ce8133"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "49fd8564be639441eec531fb801d21fdc239c98b", "filename": "src/error.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d090fa6932853b0035745a51fbd4bd88f2ee9b1/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d090fa6932853b0035745a51fbd4bd88f2ee9b1/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=4d090fa6932853b0035745a51fbd4bd88f2ee9b1", "patch": "@@ -20,6 +20,8 @@ pub enum EvalError {\n     ReadUndefBytes,\n     InvalidBoolOp(mir::BinOp),\n     Unimplemented(String),\n+    DerefFunctionPointer,\n+    ExecuteMemory,\n }\n \n pub type EvalResult<T> = Result<T, EvalError>;\n@@ -48,6 +50,10 @@ impl Error for EvalError {\n             EvalError::InvalidBoolOp(_) =>\n                 \"invalid boolean operation\",\n             EvalError::Unimplemented(ref msg) => msg,\n+            EvalError::DerefFunctionPointer =>\n+                \"tried to dereference a function pointer\",\n+            EvalError::ExecuteMemory =>\n+                \"tried to treat a memory pointer as a function pointer\",\n         }\n     }\n "}, {"sha": "2bc5ff184de086527c15e0d39407249374da7c47", "filename": "src/memory.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4d090fa6932853b0035745a51fbd4bd88f2ee9b1/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d090fa6932853b0035745a51fbd4bd88f2ee9b1/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=4d090fa6932853b0035745a51fbd4bd88f2ee9b1", "patch": "@@ -46,7 +46,10 @@ impl Pointer {\n ////////////////////////////////////////////////////////////////////////////////\n \n pub struct Memory<'tcx> {\n+    /// Actual memory allocations (arbitrary bytes, may contain pointers into other allocations)\n     alloc_map: HashMap<AllocId, Allocation>,\n+    /// Function \"allocations\". They exist solely so pointers have something to point to, and\n+    /// we can figure out what they point to.\n     functions: HashMap<AllocId, (DefId, &'tcx Substs<'tcx>)>,\n     next_id: AllocId,\n     pub pointer_size: usize,\n@@ -137,16 +140,34 @@ impl<'tcx> Memory<'tcx> {\n     ////////////////////////////////////////////////////////////////////////////////\n \n     pub fn get(&self, id: AllocId) -> EvalResult<&Allocation> {\n-        self.alloc_map.get(&id).ok_or(EvalError::DanglingPointerDeref)\n+        match self.alloc_map.get(&id) {\n+            Some(alloc) => Ok(alloc),\n+            None => match self.functions.get(&id) {\n+                Some(_) => Err(EvalError::DerefFunctionPointer),\n+                None => Err(EvalError::DanglingPointerDeref),\n+            }\n+        }\n     }\n \n     pub fn get_mut(&mut self, id: AllocId) -> EvalResult<&mut Allocation> {\n-        self.alloc_map.get_mut(&id).ok_or(EvalError::DanglingPointerDeref)\n+        match self.alloc_map.get_mut(&id) {\n+            Some(alloc) => Ok(alloc),\n+            None => match self.functions.get(&id) {\n+                Some(_) => Err(EvalError::DerefFunctionPointer),\n+                None => Err(EvalError::DanglingPointerDeref),\n+            }\n+        }\n     }\n \n     pub fn get_fn(&self, id: AllocId) -> EvalResult<(DefId, &'tcx Substs<'tcx>)> {\n         debug!(\"reading fn ptr: {}\", id);\n-        self.functions.get(&id).map(|&did| did).ok_or(EvalError::InvalidFunctionPointer)\n+        match self.functions.get(&id) {\n+            Some(&fn_id) => Ok(fn_id),\n+            None => match self.alloc_map.get(&id) {\n+                Some(_) => Err(EvalError::ExecuteMemory),\n+                None => Err(EvalError::InvalidFunctionPointer),\n+            }\n+        }\n     }\n \n     /// Print an allocation and all allocations it points to, recursively."}]}