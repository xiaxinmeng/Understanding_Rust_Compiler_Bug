{"sha": "e24cadb490ee3d912a500d8ae4f1455ece0d5e68", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyNGNhZGI0OTBlZTNkOTEyYTUwMGQ4YWU0ZjE0NTVlY2UwZDVlNjg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-01T12:10:56Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-01T12:10:56Z"}, "message": "Parser: more groundwork", "tree": {"sha": "b54ae4b2aacd58597df43de60ef4c30029a6e54b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b54ae4b2aacd58597df43de60ef4c30029a6e54b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e24cadb490ee3d912a500d8ae4f1455ece0d5e68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e24cadb490ee3d912a500d8ae4f1455ece0d5e68", "html_url": "https://github.com/rust-lang/rust/commit/e24cadb490ee3d912a500d8ae4f1455ece0d5e68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e24cadb490ee3d912a500d8ae4f1455ece0d5e68/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ed73378ce3343237bae39f6f9837aa18acbc9e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ed73378ce3343237bae39f6f9837aa18acbc9e7", "html_url": "https://github.com/rust-lang/rust/commit/9ed73378ce3343237bae39f6f9837aa18acbc9e7"}], "stats": {"total": 87, "additions": 83, "deletions": 4}, "files": [{"sha": "c6aacfefb0dbf96c76548a41915568a79665bf27", "filename": "src/parser/event_parser.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/e24cadb490ee3d912a500d8ae4f1455ece0d5e68/src%2Fparser%2Fevent_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24cadb490ee3d912a500d8ae4f1455ece0d5e68/src%2Fparser%2Fevent_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser.rs?ref=e24cadb490ee3d912a500d8ae4f1455ece0d5e68", "patch": "@@ -0,0 +1,66 @@\n+use {Token, TextUnit, SyntaxKind};\n+\n+use syntax_kinds::*;\n+\n+\n+pub(crate) enum Event {\n+    Start { kind: SyntaxKind },\n+    Finish,\n+    Token {\n+        kind: SyntaxKind,\n+        n_raw_tokens: u8,\n+    }\n+}\n+\n+pub(crate) fn parse<'t>(text: &'t str, raw_tokens: &'t [Token]) -> Vec<Event> {\n+    let mut parser = Parser::new(text, raw_tokens);\n+    parse_file(&mut parser);\n+    parser.events\n+}\n+\n+struct Parser<'t> {\n+    text: &'t str,\n+    raw_tokens: &'t [Token],\n+    non_ws_tokens: Vec<(usize, TextUnit)>,\n+\n+    pos: usize,\n+    events: Vec<Event>,\n+}\n+\n+impl<'t> Parser<'t> {\n+    fn new(text: &'t str, raw_tokens: &'t [Token]) -> Parser<'t> {\n+        let mut non_ws_tokens = Vec::new();\n+        let mut len = TextUnit::new(0);\n+        for (idx, &token) in raw_tokens.iter().enumerate() {\n+            match token.kind {\n+                WHITESPACE | COMMENT => (),\n+                _ => non_ws_tokens.push((idx, len)),\n+            }\n+            len += token.len;\n+        }\n+\n+        Parser {\n+            text,\n+            raw_tokens,\n+            non_ws_tokens,\n+\n+            pos: 0,\n+            events: Vec::new(),\n+        }\n+    }\n+\n+    fn start(&mut self, kind: SyntaxKind) {\n+        self.event(Event::Start { kind });\n+    }\n+    fn finish(&mut self) {\n+        self.event(Event::Finish);\n+    }\n+    fn event(&mut self, event: Event) {\n+        self.events.push(event)\n+    }\n+}\n+\n+fn parse_file(p: &mut Parser) {\n+    p.start(FILE);\n+    p.finish();\n+}\n\\ No newline at end of file"}, {"sha": "ccccd78f9ea628d42a896f47a5fb5875fa2365e8", "filename": "src/parser/mod.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e24cadb490ee3d912a500d8ae4f1455ece0d5e68/src%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24cadb490ee3d912a500d8ae4f1455ece0d5e68/src%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fmod.rs?ref=e24cadb490ee3d912a500d8ae4f1455ece0d5e68", "patch": "@@ -1,11 +1,24 @@\n-use {Token, File, FileBuilder, Sink};\n+use {Token, File, FileBuilder, Sink, SyntaxKind};\n \n use syntax_kinds::*;\n \n+mod event_parser;\n+use self::event_parser::Event;\n+\n \n pub fn parse(text: String, tokens: &[Token]) -> File {\n+    let events = event_parser::parse(&text, tokens);\n+    from_events_to_file(text, events)\n+}\n+\n+fn from_events_to_file(text: String, events: Vec<Event>) -> File {\n     let mut builder = FileBuilder::new(text);\n-    builder.start_internal(FILE);\n-    builder.finish_internal();\n+    for event in events {\n+        match event {\n+            Event::Start { kind } => builder.start_internal(kind),\n+            Event::Finish => builder.finish_internal(),\n+            Event::Token { .. } => unimplemented!(),\n+        }\n+    }\n     builder.finish()\n-}\n\\ No newline at end of file\n+}"}]}