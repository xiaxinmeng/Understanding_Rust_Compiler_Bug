{"sha": "ec11f66dbf68c7d0a958b28e520f547c885a3fde", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjMTFmNjZkYmY2OGM3ZDBhOTU4YjI4ZTUyMGY1NDdjODg1YTNmZGU=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-05T19:07:10Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-05T22:22:18Z"}, "message": "replace `f.call_mut(a, b, ..)` with `f(a, b, ..)`", "tree": {"sha": "a8a5c6239452c1f8d2836f3f955fba172c55e92e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8a5c6239452c1f8d2836f3f955fba172c55e92e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec11f66dbf68c7d0a958b28e520f547c885a3fde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec11f66dbf68c7d0a958b28e520f547c885a3fde", "html_url": "https://github.com/rust-lang/rust/commit/ec11f66dbf68c7d0a958b28e520f547c885a3fde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec11f66dbf68c7d0a958b28e520f547c885a3fde/comments", "author": null, "committer": null, "parents": [{"sha": "c98814b1243ddde1f41fbc86815397b3091f2215", "url": "https://api.github.com/repos/rust-lang/rust/commits/c98814b1243ddde1f41fbc86815397b3091f2215", "html_url": "https://github.com/rust-lang/rust/commit/c98814b1243ddde1f41fbc86815397b3091f2215"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "9053f97e8a7dd9368c3395160701510edf8b72e3", "filename": "src/test/compile-fail/moves-based-on-type-no-recursive-stack-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs?ref=ec11f66dbf68c7d0a958b28e520f547c885a3fde", "patch": "@@ -29,7 +29,7 @@ fn innocent_looking_victim() {\n         } else {\n             match x {\n                 Some(ref msg) => {\n-                    f.c.call_mut((f, true));\n+                    (f.c)(f, true);\n                     //~^ ERROR: cannot borrow `*f` as mutable more than once at a time\n                     println!(\"{}\", msg);\n                 },"}, {"sha": "a25d646486712fb30dccbb4121dc0540b2a598b4", "filename": "src/test/compile-fail/unboxed-closures-type-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Fcompile-fail%2Funboxed-closures-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Fcompile-fail%2Funboxed-closures-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-type-mismatch.rs?ref=ec11f66dbf68c7d0a958b28e520f547c885a3fde", "patch": "@@ -14,6 +14,6 @@ use std::ops::FnMut;\n \n pub fn main() {\n     let mut f = |&mut: x: int, y: int| -> int { x + y };\n-    let z = f.call_mut((1u, 2));    //~ ERROR type mismatch\n+    let z = f(1u, 2);    //~ ERROR type mismatch\n     println!(\"{}\", z);\n }"}, {"sha": "85b33f73bbcb7cdefbbc419691ba8738458206f8", "filename": "src/test/compile-fail/unboxed-closures-vtable-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Fcompile-fail%2Funboxed-closures-vtable-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Fcompile-fail%2Funboxed-closures-vtable-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-vtable-mismatch.rs?ref=ec11f66dbf68c7d0a958b28e520f547c885a3fde", "patch": "@@ -13,7 +13,7 @@\n use std::ops::FnMut;\n \n fn call_it<F:FnMut<(int,int),int>>(y: int, mut f: F) -> int {\n-    f.call_mut((2, y))\n+    f(2, y)\n }\n \n pub fn main() {"}, {"sha": "3bcce5388715d6e34df5117549980565e4d765ef", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=ec11f66dbf68c7d0a958b28e520f547c885a3fde", "patch": "@@ -18,7 +18,7 @@\n */\n \n pub fn map(filename: String, mut emit: map_reduce::putter) {\n-    emit.call_mut((filename, \"1\".to_string(),));\n+    emit(filename, \"1\".to_string());\n }\n \n mod map_reduce {"}, {"sha": "1febf33742974ba2e49616219c3367b2504648ff", "filename": "src/test/run-pass/issue-16668.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Frun-pass%2Fissue-16668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Frun-pass%2Fissue-16668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16668.rs?ref=ec11f66dbf68c7d0a958b28e520f547c885a3fde", "patch": "@@ -20,8 +20,8 @@ impl<'a, I, O: 'a> Parser<'a, I, O> {\n     fn compose<K: 'a>(mut self, mut rhs: Parser<'a, O, K>) -> Parser<'a, I, K> {\n         Parser {\n             parse: box move |&mut: x: I| {\n-                match (*self.parse).call_mut((x,)) {\n-                    Ok(r) => (*rhs.parse).call_mut((r,)),\n+                match (self.parse)(x) {\n+                    Ok(r) => (rhs.parse)(r),\n                     Err(e) => Err(e)\n                 }\n             }"}, {"sha": "528870d033476e70fcc0c1abb95af0489b0aaabc", "filename": "src/test/run-pass/issue-3424.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3424.rs?ref=ec11f66dbf68c7d0a958b28e520f547c885a3fde", "patch": "@@ -27,7 +27,7 @@ fn tester()\n     };\n \n     let path = path::Path::new(\"blah\");\n-    assert!(loader.call_mut((&path,)).is_ok());\n+    assert!(loader(&path).is_ok());\n }\n \n pub fn main() {}"}, {"sha": "bb5b88d3674a1b8d1d42be64c75ebfd5db397bc4", "filename": "src/test/run-pass/overloaded-calls-simple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Frun-pass%2Foverloaded-calls-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Frun-pass%2Foverloaded-calls-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-calls-simple.rs?ref=ec11f66dbf68c7d0a958b28e520f547c885a3fde", "patch": "@@ -50,7 +50,7 @@ fn main() {\n         x: 3,\n         y: 3,\n     };\n-    let ans = s.call_mut((3,));\n+    let ans = s(3);\n \n     assert_eq!(ans, 27);\n     let s = S2 {\n@@ -64,7 +64,7 @@ fn main() {\n         x: 3,\n         y: 3,\n     };\n-    let ans = s.call_once((3, 1));\n+    let ans = s(3, 1);\n     assert_eq!(ans, 27);\n }\n "}, {"sha": "bc397bb63196e193b6b188278af9d1ba7afdff52", "filename": "src/test/run-pass/trait-bounds-in-arc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs?ref=ec11f66dbf68c7d0a958b28e520f547c885a3fde", "patch": "@@ -42,19 +42,19 @@ struct Goldfyshe {\n }\n \n impl Pet for Catte {\n-    fn name(&self, mut blk: Box<FnMut(&str)>) { blk.call_mut((self.name.as_slice(),)) }\n+    fn name(&self, mut blk: Box<FnMut(&str)>) { blk(self.name.as_slice()) }\n     fn num_legs(&self) -> uint { 4 }\n     fn of_good_pedigree(&self) -> bool { self.num_whiskers >= 4 }\n }\n impl Pet for Dogge {\n-    fn name(&self, mut blk: Box<FnMut(&str)>) { blk.call_mut((self.name.as_slice(),)) }\n+    fn name(&self, mut blk: Box<FnMut(&str)>) { blk(self.name.as_slice()) }\n     fn num_legs(&self) -> uint { 4 }\n     fn of_good_pedigree(&self) -> bool {\n         self.bark_decibels < 70 || self.tricks_known > 20\n     }\n }\n impl Pet for Goldfyshe {\n-    fn name(&self, mut blk: Box<FnMut(&str)>) { blk.call_mut((self.name.as_slice(),)) }\n+    fn name(&self, mut blk: Box<FnMut(&str)>) { blk(self.name.as_slice()) }\n     fn num_legs(&self) -> uint { 0 }\n     fn of_good_pedigree(&self) -> bool { self.swim_speed >= 500 }\n }"}, {"sha": "60e59400e1a092d8149098acf1119a5463702917", "filename": "src/test/run-pass/unboxed-closures-boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Frun-pass%2Funboxed-closures-boxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Frun-pass%2Funboxed-closures-boxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-boxed.rs?ref=ec11f66dbf68c7d0a958b28e520f547c885a3fde", "patch": "@@ -19,7 +19,7 @@ use std::ops::FnMut;\n \n pub fn main() {\n     let mut adder = make_adder(3);\n-    let z = adder.call_mut((2,));\n+    let z = adder(2);\n     println!(\"{}\", z);\n     assert_eq!(z, 5);\n }"}, {"sha": "a25f5e265e81494a8f7eb4db4867f0d3e053a7b6", "filename": "src/test/run-pass/unboxed-closures-extern-fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Frun-pass%2Funboxed-closures-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Frun-pass%2Funboxed-closures-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-extern-fn.rs?ref=ec11f66dbf68c7d0a958b28e520f547c885a3fde", "patch": "@@ -18,15 +18,15 @@ use std::ops::{Fn,FnMut,FnOnce};\n fn square(x: int) -> int { x * x }\n \n fn call_it<F:Fn(int)->int>(f: &F, x: int) -> int {\n-    f.call((x,))\n+    f(x)\n }\n \n fn call_it_mut<F:FnMut(int)->int>(f: &mut F, x: int) -> int {\n-    f.call_mut((x,))\n+    f(x)\n }\n \n fn call_it_once<F:FnOnce(int)->int>(f: F, x: int) -> int {\n-    f.call_once((x,))\n+    f(x)\n }\n \n fn main() {"}, {"sha": "8af0547e5e57f6384d6d0c0a7c29a4ac6adb8116", "filename": "src/test/run-pass/unboxed-closures-fn-as-fnmut-and-fnonce.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Frun-pass%2Funboxed-closures-fn-as-fnmut-and-fnonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Frun-pass%2Funboxed-closures-fn-as-fnmut-and-fnonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-fn-as-fnmut-and-fnonce.rs?ref=ec11f66dbf68c7d0a958b28e520f547c885a3fde", "patch": "@@ -25,15 +25,15 @@ impl Fn<(int,),int> for S {\n }\n \n fn call_it<F:Fn(int)->int>(f: &F, x: int) -> int {\n-    f.call((x,))\n+    f(x)\n }\n \n fn call_it_mut<F:FnMut(int)->int>(f: &mut F, x: int) -> int {\n-    f.call_mut((x,))\n+    f(x)\n }\n \n fn call_it_once<F:FnOnce(int)->int>(f: F, x: int) -> int {\n-    f.call_once((x,))\n+    f(x)\n }\n \n fn main() {"}, {"sha": "068080e256dba3cd8d093b98ca1e02aa1a923b3f", "filename": "src/test/run-pass/unboxed-closures-fnmut-as-fnonce.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Frun-pass%2Funboxed-closures-fnmut-as-fnonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Frun-pass%2Funboxed-closures-fnmut-as-fnonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-fnmut-as-fnonce.rs?ref=ec11f66dbf68c7d0a958b28e520f547c885a3fde", "patch": "@@ -25,11 +25,11 @@ impl FnMut<(int,),int> for S {\n }\n \n fn call_it_mut<F:FnMut(int)->int>(f: &mut F, x: int) -> int {\n-    f.call_mut((x,))\n+    f(x)\n }\n \n fn call_it_once<F:FnOnce(int)->int>(f: F, x: int) -> int {\n-    f.call_once((x,))\n+    f(x)\n }\n \n fn main() {"}, {"sha": "0edeeb8d198dabe5f615765da529c803bead7a4f", "filename": "src/test/run-pass/unboxed-closures-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Frun-pass%2Funboxed-closures-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Frun-pass%2Funboxed-closures-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-generic.rs?ref=ec11f66dbf68c7d0a958b28e520f547c885a3fde", "patch": "@@ -13,7 +13,7 @@\n use std::ops::FnMut;\n \n fn call_it<F:FnMut<(int,int),int>>(y: int, mut f: F) -> int {\n-    f.call_mut((2, y))\n+    f(2, y)\n }\n \n pub fn main() {"}, {"sha": "88c9ceae4a1248154257d2b828253e7bc5cfa79c", "filename": "src/test/run-pass/unboxed-closures-manual-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Frun-pass%2Funboxed-closures-manual-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Frun-pass%2Funboxed-closures-manual-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-manual-impl.rs?ref=ec11f66dbf68c7d0a958b28e520f547c885a3fde", "patch": "@@ -22,11 +22,11 @@ impl FnMut<(int,),int> for S {\n }\n \n fn call_it<F:FnMut(int)->int>(mut f: F, x: int) -> int {\n-    f.call_mut((x,)) + 3\n+    f(x) + 3\n }\n \n fn call_box(f: &mut FnMut(int) -> int, x: int) -> int {\n-    f.call_mut((x,)) + 3\n+    f(x) + 3\n }\n \n fn main() {"}, {"sha": "d1bd7e908c826019c4088a1504a8d8b8ad03dba7", "filename": "src/test/run-pass/unboxed-closures-prelude.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Frun-pass%2Funboxed-closures-prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Frun-pass%2Funboxed-closures-prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-prelude.rs?ref=ec11f66dbf68c7d0a958b28e520f547c885a3fde", "patch": "@@ -17,12 +17,12 @@ fn main() {\n     task.call((0i, ));\n \n     let mut task: Box<FnMut(int) -> int> = box |&mut: x| x;\n-    task.call_mut((0i, ));\n+    task(0i);\n \n     call(|:x| x, 22);\n }\n \n fn call<F:FnOnce(int) -> int>(f: F, x: int) -> int {\n-    f.call_once((x,))\n+    f(x)\n }\n "}, {"sha": "c473db4586ff74283027b4873708ec42d9c0b244", "filename": "src/test/run-pass/unboxed-closures-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Frun-pass%2Funboxed-closures-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Frun-pass%2Funboxed-closures-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-simple.rs?ref=ec11f66dbf68c7d0a958b28e520f547c885a3fde", "patch": "@@ -14,6 +14,6 @@ use std::ops::FnMut;\n \n pub fn main() {\n     let mut f = |&mut: x: int, y: int| -> int { x + y };\n-    let z = f.call_mut((1, 2));\n+    let z = f(1, 2);\n     assert_eq!(z, 3);\n }"}, {"sha": "780a1e6cdf0340c7b249918e4188a4eca842a9b7", "filename": "src/test/run-pass/unboxed-closures-static-call-fn-once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Frun-pass%2Funboxed-closures-static-call-fn-once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec11f66dbf68c7d0a958b28e520f547c885a3fde/src%2Ftest%2Frun-pass%2Funboxed-closures-static-call-fn-once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-static-call-fn-once.rs?ref=ec11f66dbf68c7d0a958b28e520f547c885a3fde", "patch": "@@ -12,6 +12,6 @@\n \n fn main() {\n     let onetime = |: x| x;\n-    onetime.call_once((0i,));\n+    onetime(0i);\n }\n "}]}