{"sha": "3c7acc78783dfb2df5437d3a793fbd194f1ea785", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjN2FjYzc4NzgzZGZiMmRmNTQzN2QzYTc5M2ZiZDE5NGYxZWE3ODU=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-11-15T10:04:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-15T10:04:40Z"}, "message": "Rollup merge of #55852 - varkor:dotdotequals-lint, r=zackmdavis\n\nRewrite `...` as `..=` as a `MachineApplicable` 2018 idiom lint\n\nFixes https://github.com/rust-lang/rust/issues/51043.", "tree": {"sha": "2289c2ef12600b852d7c8665a821c35fd405b5be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2289c2ef12600b852d7c8665a821c35fd405b5be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c7acc78783dfb2df5437d3a793fbd194f1ea785", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb7US4CRBK7hj4Ov3rIwAAdHIIAFHYrpiNPR2rca8SLRDvCUmi\nHzJMKrUoTTKIbp6IzTy1lbLmhEs21Kvxeq1+iUgHFt0Z2q+TCH13KETGh9e7/16g\n91p9VD+szamqfeXvu2/994XYE+VrEmmB6itPgIKCoS7Mx3/kE9BgItOnoS7LaDH7\n9z2rhOu2vztF8ZVCqUMqDthgNOUyq16LABWC4Jq19usyT1fS3iNEe2Uwn3RkI2Ij\ngAICWlUVm2fYjbQN6/4DKX5Ysz0ApQ5KuZsCZHIdMh/Ad6MtH459yHHqcR8q6k0j\nS/IsS8I5riUdre0WcBCTdLKXmPrp/F+S3OiDKpe3lfmjo8mvGgHRtmWDwxhhxXI=\n=FRPe\n-----END PGP SIGNATURE-----\n", "payload": "tree 2289c2ef12600b852d7c8665a821c35fd405b5be\nparent 202724cddc826f898693177c2b1d990d366d8bcf\nparent c63df7c64fbb1cd010e24ac4eb66b87aab8e650f\nauthor Pietro Albini <pietro@pietroalbini.org> 1542276280 +0100\ncommitter GitHub <noreply@github.com> 1542276280 +0100\n\nRollup merge of #55852 - varkor:dotdotequals-lint, r=zackmdavis\n\nRewrite `...` as `..=` as a `MachineApplicable` 2018 idiom lint\n\nFixes https://github.com/rust-lang/rust/issues/51043.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c7acc78783dfb2df5437d3a793fbd194f1ea785", "html_url": "https://github.com/rust-lang/rust/commit/3c7acc78783dfb2df5437d3a793fbd194f1ea785", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c7acc78783dfb2df5437d3a793fbd194f1ea785/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "202724cddc826f898693177c2b1d990d366d8bcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/202724cddc826f898693177c2b1d990d366d8bcf", "html_url": "https://github.com/rust-lang/rust/commit/202724cddc826f898693177c2b1d990d366d8bcf"}, {"sha": "c63df7c64fbb1cd010e24ac4eb66b87aab8e650f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c63df7c64fbb1cd010e24ac4eb66b87aab8e650f", "html_url": "https://github.com/rust-lang/rust/commit/c63df7c64fbb1cd010e24ac4eb66b87aab8e650f"}], "stats": {"total": 91, "additions": 71, "deletions": 20}, "files": [{"sha": "8acbaaa844d74d06f64d4b52cd4c2843fcabd6f8", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3c7acc78783dfb2df5437d3a793fbd194f1ea785/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7acc78783dfb2df5437d3a793fbd194f1ea785/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=3c7acc78783dfb2df5437d3a793fbd194f1ea785", "patch": "@@ -1020,9 +1020,12 @@ impl<'a> ast_visit::Visitor<'a> for EarlyContext<'a> {\n     }\n \n     fn visit_pat(&mut self, p: &'a ast::Pat) {\n-        run_lints!(self, check_pat, p);\n+        let mut visit_subpats = true;\n+        run_lints!(self, check_pat, p, &mut visit_subpats);\n         self.check_id(p.id);\n-        ast_visit::walk_pat(self, p);\n+        if visit_subpats {\n+            ast_visit::walk_pat(self, p);\n+        }\n     }\n \n     fn visit_expr(&mut self, e: &'a ast::Expr) {"}, {"sha": "18922ec5d1739861c19c9de861441162979f2ef5", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c7acc78783dfb2df5437d3a793fbd194f1ea785/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7acc78783dfb2df5437d3a793fbd194f1ea785/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=3c7acc78783dfb2df5437d3a793fbd194f1ea785", "patch": "@@ -341,7 +341,7 @@ pub trait EarlyLintPass: LintPass {\n     fn check_block_post(&mut self, _: &EarlyContext<'_>, _: &ast::Block) { }\n     fn check_stmt(&mut self, _: &EarlyContext<'_>, _: &ast::Stmt) { }\n     fn check_arm(&mut self, _: &EarlyContext<'_>, _: &ast::Arm) { }\n-    fn check_pat(&mut self, _: &EarlyContext<'_>, _: &ast::Pat) { }\n+    fn check_pat(&mut self, _: &EarlyContext<'_>, _: &ast::Pat, _: &mut bool) { }\n     fn check_expr(&mut self, _: &EarlyContext<'_>, _: &ast::Expr) { }\n     fn check_expr_post(&mut self, _: &EarlyContext<'_>, _: &ast::Expr) { }\n     fn check_ty(&mut self, _: &EarlyContext<'_>, _: &ast::Ty) { }"}, {"sha": "696fee04273fdaa186aa1dcd907f9f04c94ee006", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 43, "deletions": 13, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/3c7acc78783dfb2df5437d3a793fbd194f1ea785/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7acc78783dfb2df5437d3a793fbd194f1ea785/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=3c7acc78783dfb2df5437d3a793fbd194f1ea785", "patch": "@@ -40,13 +40,16 @@ use rustc::util::nodemap::FxHashSet;\n \n use syntax::tokenstream::{TokenTree, TokenStream};\n use syntax::ast;\n+use syntax::ptr::P;\n+use syntax::ast::Expr;\n use syntax::attr;\n use syntax::source_map::Spanned;\n use syntax::edition::Edition;\n use syntax::feature_gate::{AttributeGate, AttributeType, Stability, deprecated_attributes};\n use syntax_pos::{BytePos, Span, SyntaxContext};\n use syntax::symbol::keywords;\n use syntax::errors::{Applicability, DiagnosticBuilder};\n+use syntax::print::pprust::expr_to_string;\n \n use rustc::hir::{self, GenericParamKind, PatKind};\n use rustc::hir::intravisit::FnKind;\n@@ -1407,21 +1410,48 @@ impl LintPass for EllipsisInclusiveRangePatterns {\n }\n \n impl EarlyLintPass for EllipsisInclusiveRangePatterns {\n-    fn check_pat(&mut self, cx: &EarlyContext, pat: &ast::Pat) {\n-        use self::ast::{PatKind, RangeEnd, RangeSyntax};\n+    fn check_pat(&mut self, cx: &EarlyContext, pat: &ast::Pat, visit_subpats: &mut bool) {\n+        use self::ast::{PatKind, RangeEnd, RangeSyntax::DotDotDot};\n+\n+        /// If `pat` is a `...` pattern, return the start and end of the range, as well as the span\n+        /// corresponding to the ellipsis.\n+        fn matches_ellipsis_pat(pat: &ast::Pat) -> Option<(&P<Expr>, &P<Expr>, Span)> {\n+            match &pat.node {\n+                PatKind::Range(a, b, Spanned { span, node: RangeEnd::Included(DotDotDot), .. }) => {\n+                    Some((a, b, *span))\n+                }\n+                _ => None,\n+            }\n+        }\n \n-        if let PatKind::Range(\n-            _, _, Spanned { span, node: RangeEnd::Included(RangeSyntax::DotDotDot) }\n-        ) = pat.node {\n+        let (parenthesise, endpoints) = match &pat.node {\n+            PatKind::Ref(subpat, _) => (true, matches_ellipsis_pat(&subpat)),\n+            _ => (false, matches_ellipsis_pat(pat)),\n+        };\n+\n+        if let Some((start, end, join)) = endpoints {\n             let msg = \"`...` range patterns are deprecated\";\n-            let mut err = cx.struct_span_lint(ELLIPSIS_INCLUSIVE_RANGE_PATTERNS, span, msg);\n-            err.span_suggestion_short_with_applicability(\n-                span, \"use `..=` for an inclusive range\", \"..=\".to_owned(),\n-                // FIXME: outstanding problem with precedence in ref patterns:\n-                // https://github.com/rust-lang/rust/issues/51043#issuecomment-392252285\n-                Applicability::MaybeIncorrect\n-            );\n-            err.emit()\n+            let suggestion = \"use `..=` for an inclusive range\";\n+            if parenthesise {\n+                *visit_subpats = false;\n+                let mut err = cx.struct_span_lint(ELLIPSIS_INCLUSIVE_RANGE_PATTERNS, pat.span, msg);\n+                err.span_suggestion_with_applicability(\n+                    pat.span,\n+                    suggestion,\n+                    format!(\"&({}..={})\", expr_to_string(&start), expr_to_string(&end)),\n+                    Applicability::MachineApplicable,\n+                );\n+                err.emit();\n+            } else {\n+                let mut err = cx.struct_span_lint(ELLIPSIS_INCLUSIVE_RANGE_PATTERNS, join, msg);\n+                err.span_suggestion_short_with_applicability(\n+                    join,\n+                    suggestion,\n+                    \"..=\".to_owned(),\n+                    Applicability::MachineApplicable,\n+                );\n+                err.emit();\n+            };\n         }\n     }\n }"}, {"sha": "7eab7d21002905778c494089850c05c9b957bdf4", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c7acc78783dfb2df5437d3a793fbd194f1ea785/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7acc78783dfb2df5437d3a793fbd194f1ea785/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=3c7acc78783dfb2df5437d3a793fbd194f1ea785", "patch": "@@ -396,12 +396,12 @@ impl EarlyLintPass for UnusedParens {\n         self.check_unused_parens_expr(cx, &value, msg, followed_by_block);\n     }\n \n-    fn check_pat(&mut self, cx: &EarlyContext, p: &ast::Pat) {\n+    fn check_pat(&mut self, cx: &EarlyContext, p: &ast::Pat, _: &mut bool) {\n         use ast::PatKind::{Paren, Range};\n         // The lint visitor will visit each subpattern of `p`. We do not want to lint any range\n         // pattern no matter where it occurs in the pattern. For something like `&(a..=b)`, there\n         // is a recursive `check_pat` on `a` and `b`, but we will assume that if there are\n-        // unnecessry parens they serve a purpose of readability.\n+        // unnecessary parens they serve a purpose of readability.\n         if let Paren(ref pat) = p.node {\n             match pat.node {\n                 Range(..) => {}"}, {"sha": "f0aee8a51f18b65e72547a25c31d0c1fb0e0076e", "filename": "src/test/ui/lint/inclusive-range-pattern-syntax.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c7acc78783dfb2df5437d3a793fbd194f1ea785/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3c7acc78783dfb2df5437d3a793fbd194f1ea785/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.fixed?ref=3c7acc78783dfb2df5437d3a793fbd194f1ea785", "patch": "@@ -20,4 +20,10 @@ fn main() {\n         //~^ WARN `...` range patterns are deprecated\n         _ => {}\n     }\n+\n+    match &despondency {\n+        &(1..=2) => {}\n+        //~^ WARN `...` range patterns are deprecated\n+        _ => {}\n+    }\n }"}, {"sha": "97bc04faa774b4da8c3932fe3d1262cc02ef8505", "filename": "src/test/ui/lint/inclusive-range-pattern-syntax.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c7acc78783dfb2df5437d3a793fbd194f1ea785/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c7acc78783dfb2df5437d3a793fbd194f1ea785/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.rs?ref=3c7acc78783dfb2df5437d3a793fbd194f1ea785", "patch": "@@ -20,4 +20,10 @@ fn main() {\n         //~^ WARN `...` range patterns are deprecated\n         _ => {}\n     }\n+\n+    match &despondency {\n+        &1...2 => {}\n+        //~^ WARN `...` range patterns are deprecated\n+        _ => {}\n+    }\n }"}, {"sha": "b13afdbc023d46e6394a7f1e492c9bd77e20bf53", "filename": "src/test/ui/lint/inclusive-range-pattern-syntax.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c7acc78783dfb2df5437d3a793fbd194f1ea785/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c7acc78783dfb2df5437d3a793fbd194f1ea785/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr?ref=3c7acc78783dfb2df5437d3a793fbd194f1ea785", "patch": "@@ -10,3 +10,9 @@ note: lint level defined here\n LL | #![warn(ellipsis_inclusive_range_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+warning: `...` range patterns are deprecated\n+  --> $DIR/inclusive-range-pattern-syntax.rs:25:9\n+   |\n+LL |         &1...2 => {}\n+   |         ^^^^^^ help: use `..=` for an inclusive range: `&(1..=2)`\n+"}, {"sha": "6fa67a5d4fa30c1295176e729670db0f49e60296", "filename": "src/test/ui/range/range-inclusive-pattern-precedence.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c7acc78783dfb2df5437d3a793fbd194f1ea785/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c7acc78783dfb2df5437d3a793fbd194f1ea785/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.stderr?ref=3c7acc78783dfb2df5437d3a793fbd194f1ea785", "patch": "@@ -11,10 +11,10 @@ LL |         box 10..=15 => {}\n    |             ^^^^^^^ help: add parentheses to clarify the precedence: `(10 ..=15)`\n \n warning: `...` range patterns are deprecated\n-  --> $DIR/range-inclusive-pattern-precedence.rs:24:11\n+  --> $DIR/range-inclusive-pattern-precedence.rs:24:9\n    |\n LL |         &0...9 => {}\n-   |           ^^^ help: use `..=` for an inclusive range\n+   |         ^^^^^^ help: use `..=` for an inclusive range: `&(0..=9)`\n    |\n note: lint level defined here\n   --> $DIR/range-inclusive-pattern-precedence.rs:19:9"}]}