{"sha": "c866efdf36139502ec824bc38892fb2bda14484f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4NjZlZmRmMzYxMzk1MDJlYzgyNGJjMzg4OTJmYjJiZGExNDQ4NGY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-22T10:58:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-22T10:58:19Z"}, "message": "Merge #2353\n\n2353: Add support for environment to CrateGraph r=matklad a=matklad\n\nbors r+\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "d2d9cfb6f56cfe83b801d6e118e03051207f75a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2d9cfb6f56cfe83b801d6e118e03051207f75a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c866efdf36139502ec824bc38892fb2bda14484f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd179LCRBK7hj4Ov3rIwAAdHIIAADEIMDdNdPTEkQSgY/C5YtY\ntuKBbd7MQmcNCkaa5NogWXTdlwynkxiP4FfNxRiQl9RpyKhmaef3P/bwHNV6ROsI\n+q6Wiyof28RK6NwOEb2GjSVlZcIE2yD8okIHSzcXVBUwccUNlBDDLJXTpqjPSddg\n852IwLQCYreSJ/c46Z8/9d2VJTwHOrkjjzoqJ425mwMQsWaygyFXYlj29Y4fLoxH\n3k2Jso/5s3W5Zh8e6H0T0z6wc8ZPQa7X0MQA8+JUxf2offUFxtxVqA9RRmfXhXsF\n7sM9fDFBSRrdF7+8KmCA92b8sBQnheJA8SGREVV+1ImC07aqXpWui07jaOsh4Lc=\n=Ue7+\n-----END PGP SIGNATURE-----\n", "payload": "tree d2d9cfb6f56cfe83b801d6e118e03051207f75a5\nparent 5be7bd605a09fafbc2bb91ebc3c4c3e35cf24110\nparent 2c48fa087b6cc79ebfd81af9daf4a07d8019fd67\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1574420299 +0000\ncommitter GitHub <noreply@github.com> 1574420299 +0000\n\nMerge #2353\n\n2353: Add support for environment to CrateGraph r=matklad a=matklad\n\nbors r+\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c866efdf36139502ec824bc38892fb2bda14484f", "html_url": "https://github.com/rust-lang/rust/commit/c866efdf36139502ec824bc38892fb2bda14484f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c866efdf36139502ec824bc38892fb2bda14484f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5be7bd605a09fafbc2bb91ebc3c4c3e35cf24110", "url": "https://api.github.com/repos/rust-lang/rust/commits/5be7bd605a09fafbc2bb91ebc3c4c3e35cf24110", "html_url": "https://github.com/rust-lang/rust/commit/5be7bd605a09fafbc2bb91ebc3c4c3e35cf24110"}, {"sha": "2c48fa087b6cc79ebfd81af9daf4a07d8019fd67", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c48fa087b6cc79ebfd81af9daf4a07d8019fd67", "html_url": "https://github.com/rust-lang/rust/commit/2c48fa087b6cc79ebfd81af9daf4a07d8019fd67"}], "stats": {"total": 107, "additions": 79, "deletions": 28}, "files": [{"sha": "e8f335e333c19f1c2bb91ed5955668bfb858aa47", "filename": "crates/ra_db/src/fixture.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c866efdf36139502ec824bc38892fb2bda14484f/crates%2Fra_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c866efdf36139502ec824bc38892fb2bda14484f/crates%2Fra_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffixture.rs?ref=c866efdf36139502ec824bc38892fb2bda14484f", "patch": "@@ -8,7 +8,7 @@ use rustc_hash::FxHashMap;\n use test_utils::{extract_offset, parse_fixture, CURSOR_MARKER};\n \n use crate::{\n-    CrateGraph, CrateId, Edition, FileId, FilePosition, RelativePathBuf, SourceDatabaseExt,\n+    CrateGraph, CrateId, Edition, Env, FileId, FilePosition, RelativePathBuf, SourceDatabaseExt,\n     SourceRoot, SourceRootId,\n };\n \n@@ -53,7 +53,12 @@ fn with_single_file(db: &mut dyn SourceDatabaseExt, text: &str) -> FileId {\n     source_root.insert_file(rel_path.clone(), file_id);\n \n     let mut crate_graph = CrateGraph::default();\n-    crate_graph.add_crate_root(file_id, Edition::Edition2018, CfgOptions::default());\n+    crate_graph.add_crate_root(\n+        file_id,\n+        Edition::Edition2018,\n+        CfgOptions::default(),\n+        Env::default(),\n+    );\n \n     db.set_file_text(file_id, Arc::new(text.to_string()));\n     db.set_file_relative_path(file_id, rel_path);\n@@ -93,7 +98,8 @@ fn with_files(db: &mut dyn SourceDatabaseExt, fixture: &str) -> Option<FilePosit\n         assert!(meta.path.starts_with(&source_root_prefix));\n \n         if let Some(krate) = meta.krate {\n-            let crate_id = crate_graph.add_crate_root(file_id, meta.edition, meta.cfg);\n+            let crate_id =\n+                crate_graph.add_crate_root(file_id, meta.edition, meta.cfg, Env::default());\n             let prev = crates.insert(krate.clone(), crate_id);\n             assert!(prev.is_none());\n             for dep in meta.deps {\n@@ -123,7 +129,12 @@ fn with_files(db: &mut dyn SourceDatabaseExt, fixture: &str) -> Option<FilePosit\n \n     if crates.is_empty() {\n         let crate_root = default_crate_root.unwrap();\n-        crate_graph.add_crate_root(crate_root, Edition::Edition2018, CfgOptions::default());\n+        crate_graph.add_crate_root(\n+            crate_root,\n+            Edition::Edition2018,\n+            CfgOptions::default(),\n+            Env::default(),\n+        );\n     } else {\n         for (from, to) in crate_deps {\n             let from_id = crates[&from];"}, {"sha": "0015d6b5eddb5866251c4d4396f511f4dee7d893", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c866efdf36139502ec824bc38892fb2bda14484f/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c866efdf36139502ec824bc38892fb2bda14484f/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=c866efdf36139502ec824bc38892fb2bda14484f", "patch": "@@ -114,17 +114,23 @@ impl FromStr for Edition {\n     }\n }\n \n+#[derive(Default, Debug, Clone, PartialEq, Eq)]\n+pub struct Env {\n+    entries: FxHashMap<String, String>,\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n struct CrateData {\n     file_id: FileId,\n     edition: Edition,\n     dependencies: Vec<Dependency>,\n     cfg_options: CfgOptions,\n+    env: Env,\n }\n \n impl CrateData {\n-    fn new(file_id: FileId, edition: Edition, cfg_options: CfgOptions) -> CrateData {\n-        CrateData { file_id, edition, dependencies: Vec::new(), cfg_options }\n+    fn new(file_id: FileId, edition: Edition, cfg_options: CfgOptions, env: Env) -> CrateData {\n+        CrateData { file_id, edition, dependencies: Vec::new(), cfg_options, env }\n     }\n \n     fn add_dep(&mut self, name: SmolStr, crate_id: CrateId) {\n@@ -150,9 +156,11 @@ impl CrateGraph {\n         file_id: FileId,\n         edition: Edition,\n         cfg_options: CfgOptions,\n+        env: Env,\n     ) -> CrateId {\n+        let data = CrateData::new(file_id, edition, cfg_options, env);\n         let crate_id = CrateId(self.arena.len() as u32);\n-        let prev = self.arena.insert(crate_id, CrateData::new(file_id, edition, cfg_options));\n+        let prev = self.arena.insert(crate_id, data);\n         assert!(prev.is_none());\n         crate_id\n     }\n@@ -241,14 +249,17 @@ impl CrateGraph {\n \n #[cfg(test)]\n mod tests {\n-    use super::{CfgOptions, CrateGraph, Edition::Edition2018, FileId, SmolStr};\n+    use super::{CfgOptions, CrateGraph, Edition::Edition2018, Env, FileId, SmolStr};\n \n     #[test]\n     fn it_should_panic_because_of_cycle_dependencies() {\n         let mut graph = CrateGraph::default();\n-        let crate1 = graph.add_crate_root(FileId(1u32), Edition2018, CfgOptions::default());\n-        let crate2 = graph.add_crate_root(FileId(2u32), Edition2018, CfgOptions::default());\n-        let crate3 = graph.add_crate_root(FileId(3u32), Edition2018, CfgOptions::default());\n+        let crate1 =\n+            graph.add_crate_root(FileId(1u32), Edition2018, CfgOptions::default(), Env::default());\n+        let crate2 =\n+            graph.add_crate_root(FileId(2u32), Edition2018, CfgOptions::default(), Env::default());\n+        let crate3 =\n+            graph.add_crate_root(FileId(3u32), Edition2018, CfgOptions::default(), Env::default());\n         assert!(graph.add_dep(crate1, SmolStr::new(\"crate2\"), crate2).is_ok());\n         assert!(graph.add_dep(crate2, SmolStr::new(\"crate3\"), crate3).is_ok());\n         assert!(graph.add_dep(crate3, SmolStr::new(\"crate1\"), crate1).is_err());\n@@ -257,9 +268,12 @@ mod tests {\n     #[test]\n     fn it_works() {\n         let mut graph = CrateGraph::default();\n-        let crate1 = graph.add_crate_root(FileId(1u32), Edition2018, CfgOptions::default());\n-        let crate2 = graph.add_crate_root(FileId(2u32), Edition2018, CfgOptions::default());\n-        let crate3 = graph.add_crate_root(FileId(3u32), Edition2018, CfgOptions::default());\n+        let crate1 =\n+            graph.add_crate_root(FileId(1u32), Edition2018, CfgOptions::default(), Env::default());\n+        let crate2 =\n+            graph.add_crate_root(FileId(2u32), Edition2018, CfgOptions::default(), Env::default());\n+        let crate3 =\n+            graph.add_crate_root(FileId(3u32), Edition2018, CfgOptions::default(), Env::default());\n         assert!(graph.add_dep(crate1, SmolStr::new(\"crate2\"), crate2).is_ok());\n         assert!(graph.add_dep(crate2, SmolStr::new(\"crate3\"), crate3).is_ok());\n     }"}, {"sha": "f9d012cb01acbd35e42dbda2a60ca5024a901762", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c866efdf36139502ec824bc38892fb2bda14484f/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c866efdf36139502ec824bc38892fb2bda14484f/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=c866efdf36139502ec824bc38892fb2bda14484f", "patch": "@@ -10,7 +10,7 @@ use ra_syntax::{ast, Parse, SourceFile, TextRange, TextUnit};\n \n pub use crate::{\n     cancellation::Canceled,\n-    input::{CrateGraph, CrateId, Dependency, Edition, FileId, SourceRoot, SourceRootId},\n+    input::{CrateGraph, CrateId, Dependency, Edition, Env, FileId, SourceRoot, SourceRootId},\n };\n pub use relative_path::{RelativePath, RelativePathBuf};\n pub use salsa;"}, {"sha": "cb6c24eaa584e6f720457ff556b2d65ada1cdf94", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c866efdf36139502ec824bc38892fb2bda14484f/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c866efdf36139502ec824bc38892fb2bda14484f/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=c866efdf36139502ec824bc38892fb2bda14484f", "patch": "@@ -54,7 +54,7 @@ use std::sync::Arc;\n use ra_cfg::CfgOptions;\n use ra_db::{\n     salsa::{self, ParallelDatabase},\n-    CheckCanceled, FileLoader, SourceDatabase,\n+    CheckCanceled, Env, FileLoader, SourceDatabase,\n };\n use ra_syntax::{SourceFile, TextRange, TextUnit};\n \n@@ -240,7 +240,7 @@ impl Analysis {\n         // Default to enable test for single file.\n         let mut cfg_options = CfgOptions::default();\n         cfg_options.insert_atom(\"test\".into());\n-        crate_graph.add_crate_root(file_id, Edition::Edition2018, cfg_options);\n+        crate_graph.add_crate_root(file_id, Edition::Edition2018, cfg_options, Env::default());\n         change.add_file(source_root, file_id, \"main.rs\".into(), Arc::new(text));\n         change.set_crate_graph(crate_graph);\n         host.apply_change(change);"}, {"sha": "bf8a5493242d1605d211925846f1baa4a14cbeff", "filename": "crates/ra_ide_api/src/mock_analysis.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c866efdf36139502ec824bc38892fb2bda14484f/crates%2Fra_ide_api%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c866efdf36139502ec824bc38892fb2bda14484f/crates%2Fra_ide_api%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fmock_analysis.rs?ref=c866efdf36139502ec824bc38892fb2bda14484f", "patch": "@@ -3,7 +3,7 @@\n use std::sync::Arc;\n \n use ra_cfg::CfgOptions;\n-use ra_db::RelativePathBuf;\n+use ra_db::{Env, RelativePathBuf};\n use test_utils::{extract_offset, extract_range, parse_fixture, CURSOR_MARKER};\n \n use crate::{\n@@ -96,9 +96,15 @@ impl MockAnalysis {\n             let file_id = FileId(i as u32 + 1);\n             let cfg_options = CfgOptions::default();\n             if path == \"/lib.rs\" || path == \"/main.rs\" {\n-                root_crate = Some(crate_graph.add_crate_root(file_id, Edition2018, cfg_options));\n+                root_crate = Some(crate_graph.add_crate_root(\n+                    file_id,\n+                    Edition2018,\n+                    cfg_options,\n+                    Env::default(),\n+                ));\n             } else if path.ends_with(\"/lib.rs\") {\n-                let other_crate = crate_graph.add_crate_root(file_id, Edition2018, cfg_options);\n+                let other_crate =\n+                    crate_graph.add_crate_root(file_id, Edition2018, cfg_options, Env::default());\n                 let crate_name = path.parent().unwrap().file_name().unwrap();\n                 if let Some(root_crate) = root_crate {\n                     crate_graph.add_dep(root_crate, crate_name.into(), other_crate).unwrap();"}, {"sha": "6027e7d54d143741d79d525f9a4ef287aeb694b7", "filename": "crates/ra_ide_api/src/parent_module.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c866efdf36139502ec824bc38892fb2bda14484f/crates%2Fra_ide_api%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c866efdf36139502ec824bc38892fb2bda14484f/crates%2Fra_ide_api%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fparent_module.rs?ref=c866efdf36139502ec824bc38892fb2bda14484f", "patch": "@@ -34,12 +34,14 @@ pub(crate) fn crate_for(db: &RootDatabase, file_id: FileId) -> Vec<CrateId> {\n \n #[cfg(test)]\n mod tests {\n+    use ra_cfg::CfgOptions;\n+    use ra_db::Env;\n+\n     use crate::{\n         mock_analysis::{analysis_and_position, MockAnalysis},\n         AnalysisChange, CrateGraph,\n         Edition::Edition2018,\n     };\n-    use ra_cfg::CfgOptions;\n \n     #[test]\n     fn test_resolve_parent_module() {\n@@ -87,7 +89,12 @@ mod tests {\n         assert!(host.analysis().crate_for(mod_file).unwrap().is_empty());\n \n         let mut crate_graph = CrateGraph::default();\n-        let crate_id = crate_graph.add_crate_root(root_file, Edition2018, CfgOptions::default());\n+        let crate_id = crate_graph.add_crate_root(\n+            root_file,\n+            Edition2018,\n+            CfgOptions::default(),\n+            Env::default(),\n+        );\n         let mut change = AnalysisChange::new();\n         change.set_crate_graph(crate_graph);\n         host.apply_change(change);"}, {"sha": "d04a8cbe27bab0a9a14d700d00996db3ba73d1ec", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c866efdf36139502ec824bc38892fb2bda14484f/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c866efdf36139502ec824bc38892fb2bda14484f/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=c866efdf36139502ec824bc38892fb2bda14484f", "patch": "@@ -13,7 +13,7 @@ use std::{\n };\n \n use ra_cfg::CfgOptions;\n-use ra_db::{CrateGraph, CrateId, Edition, FileId};\n+use ra_db::{CrateGraph, CrateId, Edition, Env, FileId};\n use rustc_hash::FxHashMap;\n use serde_json::from_reader;\n \n@@ -146,7 +146,12 @@ impl ProjectWorkspace {\n                         };\n                         crates.insert(\n                             crate_id,\n-                            crate_graph.add_crate_root(file_id, edition, cfg_options),\n+                            crate_graph.add_crate_root(\n+                                file_id,\n+                                edition,\n+                                cfg_options,\n+                                Env::default(),\n+                            ),\n                         );\n                     }\n                 }\n@@ -180,8 +185,12 @@ impl ProjectWorkspace {\n                             opts\n                         };\n \n-                        let crate_id =\n-                            crate_graph.add_crate_root(file_id, Edition::Edition2018, cfg_options);\n+                        let crate_id = crate_graph.add_crate_root(\n+                            file_id,\n+                            Edition::Edition2018,\n+                            cfg_options,\n+                            Env::default(),\n+                        );\n                         sysroot_crates.insert(krate, crate_id);\n                         names.insert(crate_id, krate.name(&sysroot).to_string());\n                     }\n@@ -216,8 +225,12 @@ impl ProjectWorkspace {\n                                 opts.insert_features(pkg.features(&cargo).iter().map(Into::into));\n                                 opts\n                             };\n-                            let crate_id =\n-                                crate_graph.add_crate_root(file_id, edition, cfg_options);\n+                            let crate_id = crate_graph.add_crate_root(\n+                                file_id,\n+                                edition,\n+                                cfg_options,\n+                                Env::default(),\n+                            );\n                             names.insert(crate_id, pkg.name(&cargo).to_string());\n                             if tgt.kind(&cargo) == TargetKind::Lib {\n                                 lib_tgt = Some(crate_id);"}]}