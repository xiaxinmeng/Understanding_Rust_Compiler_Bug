{"sha": "3f606ceaece4550d3cbf34bb44a9f4372ec9aacb", "node_id": "C_kwDOAAsO6NoAKDNmNjA2Y2VhZWNlNDU1MGQzY2JmMzRiYjQ0YTlmNDM3MmVjOWFhY2I", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-11T18:00:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-11T18:00:42Z"}, "message": "Rollup merge of #95864 - luqmana:inline-asm-unwind-store-miscompile, r=Amanieu\n\nFix miscompilation of inline assembly with outputs in cases where we emit an invoke instead of call instruction.\n\nWe ran into this bug where rustc would segfault while trying to compile certain uses of inline assembly.\n\nHere is a simple repro that demonstrates the issue:\n```rust\n#![feature(asm_unwind)]\n\nfn main() {\n    let _x = String::from(\"string here just cause we need something with a non-trivial drop\");\n    let foo: u64;\n    unsafe {\n        std::arch::asm!(\n            \"mov {}, 1\",\n            out(reg) foo,\n            options(may_unwind)\n        );\n    }\n    println!(\"{}\", foo);\n}\n```\n([playground link](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=7d6641e83370d2536a07234aca2498ff))\n\nBut crucially `feature(asm_unwind)` is not actually needed and this can be triggered on stable as a result of the way async functions/generators are handled in the compiler. e.g.:\n\n```rust\nextern crate futures; // 0.3.21\n\nasync fn bar() {\n    let foo: u64;\n    unsafe {\n        std::arch::asm!(\n            \"mov {}, 1\",\n            out(reg) foo,\n        );\n    }\n    println!(\"{}\", foo);\n}\n\nfn main() {\n    futures::executor::block_on(bar());\n}\n```\n([playground link](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=1c7781c34dd4a3e80ae4bd936a0c82fc))\n\nAn example of the incorrect LLVM generated:\n```llvm\nbb1:                                              ; preds = %start\n  %1 = invoke i64 asm sideeffect alignstack inteldialect unwind \"mov ${0:q}, 1\", \"=&r,~{dirflag},~{fpsr},~{flags},~{memory}\"()\n          to label %bb2 unwind label %cleanup, !srcloc !9\n  store i64 %1, i64* %foo, align 8\n\nbb2:\n[...snip...]\n```\n\nThe store should not be placed after the asm invoke but rather should be in the normal control flow basic block (`bb2` in this case).\n\n[Here](https://gist.github.com/luqmana/be1af5b64d2cda5a533e3e23a7830b44) is a writeup of the investigation that lead to finding this.", "tree": {"sha": "8eb5af5fa964403e0e45ae22a788374bf2266024", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8eb5af5fa964403e0e45ae22a788374bf2266024"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f606ceaece4550d3cbf34bb44a9f4372ec9aacb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiVGzKCRBK7hj4Ov3rIwAACv8IACgc2AgJ9P9BFwDGWmbmALYn\njfjOZHLxuqlhPY6Qe8v0JPzGKDaQ10tZLF0pXl0wK5lWAflMuuX2whbNUmExBgNE\njeYNST1fNh0Sp7JUeGFrdGGEc3CMd5rAh5VSWeNGrMeBeRH4gadyOi9mdUk6xCQg\n8zoztbXBNDu6eG9wNzzyaefp85fh+YFT9Nrk+4VzRiLK6sMghLqwuG1oMsSuawuT\nQM38yJIqcYp1fGyTKxNIfXJAWwxN97VRHBpQXWu1N/+FXV6BBx2ix+LzKA3oUoWZ\nQrxJduvAs3IVso+4sfznbQvPdz5UDUK0sUxMqAPl3p09R59DkGS3i8ZbSNRjmdk=\n=HI0t\n-----END PGP SIGNATURE-----\n", "payload": "tree 8eb5af5fa964403e0e45ae22a788374bf2266024\nparent a15ac301627b33f87ca6f166b7cdbcc453543ee3\nparent 0b2f3604fd733db5ad9498eaf129655879c242b3\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1649700042 +0200\ncommitter GitHub <noreply@github.com> 1649700042 +0200\n\nRollup merge of #95864 - luqmana:inline-asm-unwind-store-miscompile, r=Amanieu\n\nFix miscompilation of inline assembly with outputs in cases where we emit an invoke instead of call instruction.\n\nWe ran into this bug where rustc would segfault while trying to compile certain uses of inline assembly.\n\nHere is a simple repro that demonstrates the issue:\n```rust\n#![feature(asm_unwind)]\n\nfn main() {\n    let _x = String::from(\"string here just cause we need something with a non-trivial drop\");\n    let foo: u64;\n    unsafe {\n        std::arch::asm!(\n            \"mov {}, 1\",\n            out(reg) foo,\n            options(may_unwind)\n        );\n    }\n    println!(\"{}\", foo);\n}\n```\n([playground link](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=7d6641e83370d2536a07234aca2498ff))\n\nBut crucially `feature(asm_unwind)` is not actually needed and this can be triggered on stable as a result of the way async functions/generators are handled in the compiler. e.g.:\n\n```rust\nextern crate futures; // 0.3.21\n\nasync fn bar() {\n    let foo: u64;\n    unsafe {\n        std::arch::asm!(\n            \"mov {}, 1\",\n            out(reg) foo,\n        );\n    }\n    println!(\"{}\", foo);\n}\n\nfn main() {\n    futures::executor::block_on(bar());\n}\n```\n([playground link](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=1c7781c34dd4a3e80ae4bd936a0c82fc))\n\nAn example of the incorrect LLVM generated:\n```llvm\nbb1:                                              ; preds = %start\n  %1 = invoke i64 asm sideeffect alignstack inteldialect unwind \"mov ${0:q}, 1\", \"=&r,~{dirflag},~{fpsr},~{flags},~{memory}\"()\n          to label %bb2 unwind label %cleanup, !srcloc !9\n  store i64 %1, i64* %foo, align 8\n\nbb2:\n[...snip...]\n```\n\nThe store should not be placed after the asm invoke but rather should be in the normal control flow basic block (`bb2` in this case).\n\n[Here](https://gist.github.com/luqmana/be1af5b64d2cda5a533e3e23a7830b44) is a writeup of the investigation that lead to finding this.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f606ceaece4550d3cbf34bb44a9f4372ec9aacb", "html_url": "https://github.com/rust-lang/rust/commit/3f606ceaece4550d3cbf34bb44a9f4372ec9aacb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f606ceaece4550d3cbf34bb44a9f4372ec9aacb/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a15ac301627b33f87ca6f166b7cdbcc453543ee3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a15ac301627b33f87ca6f166b7cdbcc453543ee3", "html_url": "https://github.com/rust-lang/rust/commit/a15ac301627b33f87ca6f166b7cdbcc453543ee3"}, {"sha": "0b2f3604fd733db5ad9498eaf129655879c242b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b2f3604fd733db5ad9498eaf129655879c242b3", "html_url": "https://github.com/rust-lang/rust/commit/0b2f3604fd733db5ad9498eaf129655879c242b3"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "91d132eb34350d762d8cd688fa2d8d78e6b7a302", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3f606ceaece4550d3cbf34bb44a9f4372ec9aacb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f606ceaece4550d3cbf34bb44a9f4372ec9aacb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=3f606ceaece4550d3cbf34bb44a9f4372ec9aacb", "patch": "@@ -290,6 +290,11 @@ impl<'ll, 'tcx> AsmBuilderMethods<'tcx> for Builder<'_, 'll, 'tcx> {\n         }\n         attributes::apply_to_callsite(result, llvm::AttributePlace::Function, &{ attrs });\n \n+        // Switch to the 'normal' basic block if we did an `invoke` instead of a `call`\n+        if let Some((dest, _, _)) = dest_catch_funclet {\n+            self.switch_to_block(dest);\n+        }\n+\n         // Write results to outputs\n         for (idx, op) in operands.iter().enumerate() {\n             if let InlineAsmOperandRef::Out { reg, place: Some(place), .. }"}, {"sha": "bf4202764a7ec665ebdaa4ac97debda0a95b4b03", "filename": "src/test/codegen/asm-may_unwind.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3f606ceaece4550d3cbf34bb44a9f4372ec9aacb/src%2Ftest%2Fcodegen%2Fasm-may_unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f606ceaece4550d3cbf34bb44a9f4372ec9aacb/src%2Ftest%2Fcodegen%2Fasm-may_unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasm-may_unwind.rs?ref=3f606ceaece4550d3cbf34bb44a9f4372ec9aacb", "patch": "@@ -18,10 +18,23 @@ impl Drop for Foo {\n     }\n }\n \n-// CHECK-LABEL: @may_unwind\n+// CHECK-LABEL: @asm_may_unwind\n #[no_mangle]\n-pub unsafe fn may_unwind() {\n+pub unsafe fn asm_may_unwind() {\n     let _m = Foo;\n     // CHECK: invoke void asm sideeffect alignstack inteldialect unwind \"\"\n     asm!(\"\", options(may_unwind));\n }\n+\n+// CHECK-LABEL: @asm_with_result_may_unwind\n+#[no_mangle]\n+pub unsafe fn asm_with_result_may_unwind() -> u64 {\n+    let _m = Foo;\n+    let res: u64;\n+    // CHECK: [[RES:%[0-9]+]] = invoke i64 asm sideeffect alignstack inteldialect unwind\n+    // CHECK-NEXT: to label %[[NORMALBB:[a-b0-9]+]]\n+    asm!(\"mov {}, 1\", out(reg) res, options(may_unwind));\n+    // CHECK: [[NORMALBB]]:\n+    // CHECK: ret i64 [[RES:%[0-9]+]]\n+    res\n+}"}]}