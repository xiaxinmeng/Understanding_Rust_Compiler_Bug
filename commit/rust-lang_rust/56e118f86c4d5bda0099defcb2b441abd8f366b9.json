{"sha": "56e118f86c4d5bda0099defcb2b441abd8f366b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ZTExOGY4NmM0ZDViZGEwMDk5ZGVmY2IyYjQ0MWFiZDhmMzY2Yjk=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-27T06:29:02Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-27T06:29:02Z"}, "message": "Mark partially-overwritten relocations as undefined.", "tree": {"sha": "b7bc53f90a3c36b729275ea8dfab70cd27ba54da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7bc53f90a3c36b729275ea8dfab70cd27ba54da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56e118f86c4d5bda0099defcb2b441abd8f366b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56e118f86c4d5bda0099defcb2b441abd8f366b9", "html_url": "https://github.com/rust-lang/rust/commit/56e118f86c4d5bda0099defcb2b441abd8f366b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56e118f86c4d5bda0099defcb2b441abd8f366b9/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62fab9268e28be815bf4d81be763eca049e05cb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/62fab9268e28be815bf4d81be763eca049e05cb4", "html_url": "https://github.com/rust-lang/rust/commit/62fab9268e28be815bf4d81be763eca049e05cb4"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "76c41b0c814c3a340abfe3c3df8f4002c8253cef", "filename": "src/memory.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/56e118f86c4d5bda0099defcb2b441abd8f366b9/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e118f86c4d5bda0099defcb2b441abd8f366b9/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=56e118f86c4d5bda0099defcb2b441abd8f366b9", "patch": "@@ -292,13 +292,27 @@ impl Memory {\n         Ok(try!(self.get(ptr.alloc_id)).relocations.range(Included(&start), Excluded(&end)))\n     }\n \n-    // TODO(tsion): Mark partially-overwritten relocations as undefined.\n     fn clear_relocations(&mut self, ptr: Pointer, size: usize) -> EvalResult<()> {\n+        // Find all relocations overlapping the given range.\n         let keys: Vec<_> = try!(self.relocations(ptr, size)).map(|(&k, _)| k).collect();\n+        if keys.len() == 0 { return Ok(()); }\n+\n+        // Find the start and end of the given range and its outermost relocations.\n+        let start = ptr.offset;\n+        let end = start + size;\n+        let first = *keys.first().unwrap();\n+        let last = *keys.last().unwrap() + self.pointer_size;\n+\n         let alloc = try!(self.get_mut(ptr.alloc_id));\n-        for k in keys {\n-            alloc.relocations.remove(&k);\n-        }\n+\n+        // Mark parts of the outermost relocations as undefined if they partially fall outside the\n+        // given range.\n+        if first < start { alloc.mark_definedness(first, start, false); }\n+        if last > end { alloc.mark_definedness(end, last, false); }\n+\n+        // Forget all the relocations.\n+        for k in keys { alloc.relocations.remove(&k); }\n+\n         Ok(())\n     }\n \n@@ -329,7 +343,6 @@ impl Memory {\n     fn check_defined(&self, ptr: Pointer, size: usize) -> EvalResult<()> {\n         let alloc = try!(self.get(ptr.alloc_id));\n         if !alloc.is_range_defined(ptr.offset, ptr.offset + size) {\n-            panic!();\n             return Err(EvalError::ReadUndefBytes);\n         }\n         Ok(())"}]}