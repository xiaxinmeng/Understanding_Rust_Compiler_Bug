{"sha": "dab06ccdab57d160de2e9afea752929ad39ee534", "node_id": "C_kwDOAAsO6NoAKGRhYjA2Y2NkYWI1N2QxNjBkZTJlOWFmZWE3NTI5MjlhZDM5ZWU1MzQ", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2023-01-14T18:34:06Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2023-01-14T19:06:22Z"}, "message": "Emit only one nbsp error per file", "tree": {"sha": "51544803b3e6d1bbdf3573f5199f56674fa4e601", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51544803b3e6d1bbdf3573f5199f56674fa4e601"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dab06ccdab57d160de2e9afea752929ad39ee534", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmPC/S4ACgkQ+boUO5X/\nbYL0QA//RiiQ6rcFo73zqcaa4h35tjpENFRku1vYsX3BPbL1xhLvt9xnSYHep3v4\n+2q2OL6VtoBuKK4A4564rD8eLCTo5A5JEjzaYgYVrsN0zGwoObtlpezqkffBxhK5\nFPPTYkeYzGkuOyM5LwGQEBUKeu6F9pw71M3ryaisEBmjk2rQ8+F1vrdLLR7tGsBp\nFWpufE8sm4HCY0BRSXrajPpGF3Y9PD9uSMMgZP6ZpizPXHd/zX77R7iWo1sRRrMQ\nXIU5Y13TnNu1mSpLxHSViLFl3xrYnQu9kmETsmbrQCPzl8q7JF8WVFbDqcvIEZRa\n26oD5yg6Qo0CEjaILJedQMR+UTI6/hn30hubqMDH4bAH8KpGW7/YL0PrRkTOESru\nd9NbN0w8gOuYs7Yw2pO6TKhtXjYTcfR26foD+Lpur2ssMa0tUUk4txe2otNHHATv\n7RnoFYHRj5SDeVNpGGWANu2eDmXIxk1dfba1EOzeE5Osrb6grQsOYCOD+FVW/EPN\nIouHS2rgnTJglomnwkQ+J++vZduPmNlB3tCSgCtxSvrWcjkTMyrgX2ic+/CRbNrg\nAqYnD3QK5D41ErwxLM0UFqXEJDzJI+8Bo2r5zjrWrP6OXDa+owDZSQU7Hz4zOpt9\nKF6keEnxVBGqzw1ZppRWqAPZ4I/htBbfK+j3GIsT1cisuODvRPw=\n=rRAI\n-----END PGP SIGNATURE-----", "payload": "tree 51544803b3e6d1bbdf3573f5199f56674fa4e601\nparent 39edcfa84e7e715d6ac78f3dfdadfb1046d31b56\nauthor David Tolnay <dtolnay@gmail.com> 1673721246 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1673723182 -0800\n\nEmit only one nbsp error per file\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dab06ccdab57d160de2e9afea752929ad39ee534", "html_url": "https://github.com/rust-lang/rust/commit/dab06ccdab57d160de2e9afea752929ad39ee534", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dab06ccdab57d160de2e9afea752929ad39ee534/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39edcfa84e7e715d6ac78f3dfdadfb1046d31b56", "url": "https://api.github.com/repos/rust-lang/rust/commits/39edcfa84e7e715d6ac78f3dfdadfb1046d31b56", "html_url": "https://github.com/rust-lang/rust/commit/39edcfa84e7e715d6ac78f3dfdadfb1046d31b56"}], "stats": {"total": 72, "additions": 27, "deletions": 45}, "files": [{"sha": "9fe8d9836ba60ca8ecfb16eea7d0383617931c0e", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/dab06ccdab57d160de2e9afea752929ad39ee534/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab06ccdab57d160de2e9afea752929ad39ee534/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=dab06ccdab57d160de2e9afea752929ad39ee534", "patch": "@@ -52,8 +52,15 @@ pub(crate) fn parse_token_trees<'a>(\n     }\n \n     let cursor = Cursor::new(src);\n-    let string_reader =\n-        StringReader { sess, start_pos, pos: start_pos, src, cursor, override_span };\n+    let string_reader = StringReader {\n+        sess,\n+        start_pos,\n+        pos: start_pos,\n+        src,\n+        cursor,\n+        override_span,\n+        nbsp_is_whitespace: false,\n+    };\n     tokentrees::TokenTreesReader::parse_all_token_trees(string_reader)\n }\n \n@@ -68,6 +75,10 @@ struct StringReader<'a> {\n     /// Cursor for getting lexer tokens.\n     cursor: Cursor<'a>,\n     override_span: Option<Span>,\n+    /// When a \"unknown start of token: \\u{a0}\" has already been emitted earlier\n+    /// in this file, it's safe to treat further occurrences of the non-breaking\n+    /// space character as whitespace.\n+    nbsp_is_whitespace: bool,\n }\n \n impl<'a> StringReader<'a> {\n@@ -239,6 +250,16 @@ impl<'a> StringReader<'a> {\n                     }\n                     let mut it = self.str_from_to_end(start).chars();\n                     let c = it.next().unwrap();\n+                    if c == '\\u{00a0}' {\n+                        // If an error has already been reported on non-breaking\n+                        // space characters earlier in the file, treat all\n+                        // subsequent occurrences as whitespace.\n+                        if self.nbsp_is_whitespace {\n+                            preceded_by_whitespace = true;\n+                            continue;\n+                        }\n+                        self.nbsp_is_whitespace = true;\n+                    }\n                     let repeats = it.take_while(|c1| *c1 == c).count();\n                     let mut err =\n                         self.struct_err_span_char(start, self.pos + Pos::from_usize(repeats * c.len_utf8()), \"unknown start of token\", c);\n@@ -486,7 +507,7 @@ impl<'a> StringReader<'a> {\n \n     /// Slice of the source text from `start` up to but excluding `self.pos`,\n     /// meaning the slice does not include the character `self.ch`.\n-    fn str_from(&self, start: BytePos) -> &str {\n+    fn str_from(&self, start: BytePos) -> &'a str {\n         self.str_from_to(start, self.pos)\n     }\n \n@@ -497,12 +518,12 @@ impl<'a> StringReader<'a> {\n     }\n \n     /// Slice of the source text spanning from `start` up to but excluding `end`.\n-    fn str_from_to(&self, start: BytePos, end: BytePos) -> &str {\n+    fn str_from_to(&self, start: BytePos, end: BytePos) -> &'a str {\n         &self.src[self.src_index(start)..self.src_index(end)]\n     }\n \n     /// Slice of the source text spanning from `start` until the end\n-    fn str_from_to_end(&self, start: BytePos) -> &str {\n+    fn str_from_to_end(&self, start: BytePos) -> &'a str {\n         &self.src[self.src_index(start)..]\n     }\n "}, {"sha": "f0122561f463d9b70375d696ae3cae8178e848bb", "filename": "tests/ui/parser/unicode-chars.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dab06ccdab57d160de2e9afea752929ad39ee534/tests%2Fui%2Fparser%2Funicode-chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab06ccdab57d160de2e9afea752929ad39ee534/tests%2Fui%2Fparser%2Funicode-chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Funicode-chars.rs?ref=dab06ccdab57d160de2e9afea752929ad39ee534", "patch": "@@ -6,10 +6,4 @@ fn main() {\n     //~^ ERROR unknown start of token: \\u{a0}\n     //~^^ NOTE character appears 3 more times\n     //~^^^ HELP Unicode character '\u00a0' (No-Break Space) looks like ' ' (Space), but it is not\n-    //~^^^^ ERROR unknown start of token: \\u{a0}\n-    //~^^^^^ HELP Unicode character '\u00a0' (No-Break Space) looks like ' ' (Space), but it is not\n-    //~^^^^^^ ERROR unknown start of token: \\u{a0}\n-    //~^^^^^^^ HELP Unicode character '\u00a0' (No-Break Space) looks like ' ' (Space), but it is not\n-    //~^^^^^^^^ ERROR unknown start of token: \\u{a0}\n-    //~^^^^^^^^^ HELP Unicode character '\u00a0' (No-Break Space) looks like ' ' (Space), but it is not\n }"}, {"sha": "b1d4a0af7115493e4cb1d28e5cdc6b732dac4beb", "filename": "tests/ui/parser/unicode-chars.stderr", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/dab06ccdab57d160de2e9afea752929ad39ee534/tests%2Fui%2Fparser%2Funicode-chars.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dab06ccdab57d160de2e9afea752929ad39ee534/tests%2Fui%2Fparser%2Funicode-chars.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Funicode-chars.stderr?ref=dab06ccdab57d160de2e9afea752929ad39ee534", "patch": "@@ -21,38 +21,5 @@ help: Unicode character '\u00a0' (No-Break Space) looks like ' ' (Space), but it is\n LL |         let\u00a0x\u00a0=\u00a00;\n    |     ++++\n \n-error: unknown start of token: \\u{a0}\n-  --> $DIR/unicode-chars.rs:5:12\n-   |\n-LL |     \u00a0\u00a0\u00a0\u00a0let\u00a0x\u00a0=\u00a00;\n-   |            ^\n-   |\n-help: Unicode character '\u00a0' (No-Break Space) looks like ' ' (Space), but it is not\n-   |\n-LL |     \u00a0\u00a0\u00a0\u00a0let x\u00a0=\u00a00;\n-   |            +\n-\n-error: unknown start of token: \\u{a0}\n-  --> $DIR/unicode-chars.rs:5:14\n-   |\n-LL |     \u00a0\u00a0\u00a0\u00a0let\u00a0x\u00a0=\u00a00;\n-   |              ^\n-   |\n-help: Unicode character '\u00a0' (No-Break Space) looks like ' ' (Space), but it is not\n-   |\n-LL |     \u00a0\u00a0\u00a0\u00a0let\u00a0x =\u00a00;\n-   |              +\n-\n-error: unknown start of token: \\u{a0}\n-  --> $DIR/unicode-chars.rs:5:16\n-   |\n-LL |     \u00a0\u00a0\u00a0\u00a0let\u00a0x\u00a0=\u00a00;\n-   |                ^\n-   |\n-help: Unicode character '\u00a0' (No-Break Space) looks like ' ' (Space), but it is not\n-   |\n-LL |     \u00a0\u00a0\u00a0\u00a0let\u00a0x\u00a0= 0;\n-   |                +\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to 2 previous errors\n "}]}