{"sha": "6e0cefe3dbbfa981063028078aba94ada0dcb066", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMGNlZmUzZGJiZmE5ODEwNjMwMjgwNzhhYmE5NGFkYTBkY2IwNjY=", "commit": {"author": {"name": "Eh2406", "email": "YeomanYaacov@gmail.com", "date": "2018-06-27T22:57:11Z"}, "committer": {"name": "Eh2406", "email": "YeomanYaacov@gmail.com", "date": "2018-06-28T14:18:35Z"}, "message": "add comments", "tree": {"sha": "61937fb77b3cdfeacd6c0eaa1f309ac34d1278a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61937fb77b3cdfeacd6c0eaa1f309ac34d1278a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e0cefe3dbbfa981063028078aba94ada0dcb066", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e0cefe3dbbfa981063028078aba94ada0dcb066", "html_url": "https://github.com/rust-lang/rust/commit/6e0cefe3dbbfa981063028078aba94ada0dcb066", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e0cefe3dbbfa981063028078aba94ada0dcb066/comments", "author": {"login": "Eh2406", "id": 3709504, "node_id": "MDQ6VXNlcjM3MDk1MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3709504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eh2406", "html_url": "https://github.com/Eh2406", "followers_url": "https://api.github.com/users/Eh2406/followers", "following_url": "https://api.github.com/users/Eh2406/following{/other_user}", "gists_url": "https://api.github.com/users/Eh2406/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eh2406/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eh2406/subscriptions", "organizations_url": "https://api.github.com/users/Eh2406/orgs", "repos_url": "https://api.github.com/users/Eh2406/repos", "events_url": "https://api.github.com/users/Eh2406/events{/privacy}", "received_events_url": "https://api.github.com/users/Eh2406/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Eh2406", "id": 3709504, "node_id": "MDQ6VXNlcjM3MDk1MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3709504?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eh2406", "html_url": "https://github.com/Eh2406", "followers_url": "https://api.github.com/users/Eh2406/followers", "following_url": "https://api.github.com/users/Eh2406/following{/other_user}", "gists_url": "https://api.github.com/users/Eh2406/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eh2406/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eh2406/subscriptions", "organizations_url": "https://api.github.com/users/Eh2406/orgs", "repos_url": "https://api.github.com/users/Eh2406/repos", "events_url": "https://api.github.com/users/Eh2406/events{/privacy}", "received_events_url": "https://api.github.com/users/Eh2406/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad71cbfe66f29f9a9ba3c3d2af5d487d727edc1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad71cbfe66f29f9a9ba3c3d2af5d487d727edc1e", "html_url": "https://github.com/rust-lang/rust/commit/ad71cbfe66f29f9a9ba3c3d2af5d487d727edc1e"}], "stats": {"total": 9, "additions": 9, "deletions": 0}, "files": [{"sha": "78bd4504443102b724775340e77810829ef59f99", "filename": "src/librustc_mir/borrow_check/nll/constraint_set.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6e0cefe3dbbfa981063028078aba94ada0dcb066/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0cefe3dbbfa981063028078aba94ada0dcb066/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_set.rs?ref=6e0cefe3dbbfa981063028078aba94ada0dcb066", "patch": "@@ -38,6 +38,10 @@ impl ConstraintSet {\n         }\n     }\n \n+    /// Once all constraints have been added, `link()` is used to thread together the constraints\n+    /// based on which would be affected when a particular region changes. See the next field of\n+    /// `OutlivesContraint` for more details.\n+    /// link returns a map that is needed later by `each_affected_by_dirty`.\n     pub fn link(&mut self, len: usize) -> IndexVec<RegionVid, Option<ConstraintIndex>> {\n         let mut map = IndexVec::from_elem_n(None, len);\n \n@@ -51,6 +55,11 @@ impl ConstraintSet {\n         map\n     }\n \n+    /// When a region R1 changes, we need to reprocess all constraints R2: R1 to take into account\n+    /// any new elements that R1 now has. This method will quickly enumerate all such constraints\n+    /// (that is, constraints where R1 is in the \"subregion\" position).\n+    /// To use it, invoke with `map[R1]` where map is the map returned by `link`;\n+    /// the callback op will be invoked for each affected constraint.\n     pub fn each_affected_by_dirty(\n         &self,\n         mut opt_dep_idx: Option<ConstraintIndex>,"}]}