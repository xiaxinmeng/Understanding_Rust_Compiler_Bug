{"sha": "180b4cedec730d0c0127d0d41714abe4176d5365", "node_id": "C_kwDOAAsO6NoAKDE4MGI0Y2VkZWM3MzBkMGMwMTI3ZDBkNDE3MTRhYmU0MTc2ZDUzNjU", "commit": {"author": {"name": "Noritada Kobayashi", "email": "noritada.kobayashi@gmail.com", "date": "2022-11-07T10:25:07Z"}, "committer": {"name": "Noritada Kobayashi", "email": "noritada.kobayashi@gmail.com", "date": "2022-11-07T11:07:16Z"}, "message": "Fix the length displayed for byte string literals with escaped newlines\n\nThe length of byte strings containing escaped newlines is displayed two\nbytes longer when the first escaped character is a newline.\n\nThis is due to a small bug in handling the first escaped newline in\nstring literals.\n\nCloses #13567", "tree": {"sha": "ef1f298e905ee1de8b240642c2d63a882e0448e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef1f298e905ee1de8b240642c2d63a882e0448e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/180b4cedec730d0c0127d0d41714abe4176d5365", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/180b4cedec730d0c0127d0d41714abe4176d5365", "html_url": "https://github.com/rust-lang/rust/commit/180b4cedec730d0c0127d0d41714abe4176d5365", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/180b4cedec730d0c0127d0d41714abe4176d5365/comments", "author": {"login": "noritada", "id": 20850, "node_id": "MDQ6VXNlcjIwODUw", "avatar_url": "https://avatars.githubusercontent.com/u/20850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/noritada", "html_url": "https://github.com/noritada", "followers_url": "https://api.github.com/users/noritada/followers", "following_url": "https://api.github.com/users/noritada/following{/other_user}", "gists_url": "https://api.github.com/users/noritada/gists{/gist_id}", "starred_url": "https://api.github.com/users/noritada/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/noritada/subscriptions", "organizations_url": "https://api.github.com/users/noritada/orgs", "repos_url": "https://api.github.com/users/noritada/repos", "events_url": "https://api.github.com/users/noritada/events{/privacy}", "received_events_url": "https://api.github.com/users/noritada/received_events", "type": "User", "site_admin": false}, "committer": {"login": "noritada", "id": 20850, "node_id": "MDQ6VXNlcjIwODUw", "avatar_url": "https://avatars.githubusercontent.com/u/20850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/noritada", "html_url": "https://github.com/noritada", "followers_url": "https://api.github.com/users/noritada/followers", "following_url": "https://api.github.com/users/noritada/following{/other_user}", "gists_url": "https://api.github.com/users/noritada/gists{/gist_id}", "starred_url": "https://api.github.com/users/noritada/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/noritada/subscriptions", "organizations_url": "https://api.github.com/users/noritada/orgs", "repos_url": "https://api.github.com/users/noritada/repos", "events_url": "https://api.github.com/users/noritada/events{/privacy}", "received_events_url": "https://api.github.com/users/noritada/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d03c1c87d4ca2d524646316387d47b12524ac451", "url": "https://api.github.com/repos/rust-lang/rust/commits/d03c1c87d4ca2d524646316387d47b12524ac451", "html_url": "https://github.com/rust-lang/rust/commit/d03c1c87d4ca2d524646316387d47b12524ac451"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "22ad6db9aef37cec65100abf8e937388c2381f26", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/180b4cedec730d0c0127d0d41714abe4176d5365/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/180b4cedec730d0c0127d0d41714abe4176d5365/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=180b4cedec730d0c0127d0d41714abe4176d5365", "patch": "@@ -209,17 +209,19 @@ impl ast::String {\n         let text = &text[self.text_range_between_quotes()? - self.syntax().text_range().start()];\n \n         let mut buf = String::new();\n-        let mut text_iter = text.chars();\n+        let mut prev = 0;\n         let mut has_error = false;\n         unescape_literal(text, Mode::Str, &mut |char_range, unescaped_char| match (\n             unescaped_char,\n             buf.capacity() == 0,\n         ) {\n             (Ok(c), false) => buf.push(c),\n-            (Ok(c), true) if char_range.len() == 1 && Some(c) == text_iter.next() => (),\n+            (Ok(_), true) if char_range.len() == 1 && char_range.start == prev => {\n+                prev = char_range.end\n+            }\n             (Ok(c), true) => {\n                 buf.reserve_exact(text.len());\n-                buf.push_str(&text[..char_range.start]);\n+                buf.push_str(&text[..prev]);\n                 buf.push(c);\n             }\n             (Err(_), _) => has_error = true,\n@@ -252,17 +254,19 @@ impl ast::ByteString {\n         let text = &text[self.text_range_between_quotes()? - self.syntax().text_range().start()];\n \n         let mut buf: Vec<u8> = Vec::new();\n-        let mut text_iter = text.chars();\n+        let mut prev = 0;\n         let mut has_error = false;\n         unescape_literal(text, Mode::ByteStr, &mut |char_range, unescaped_char| match (\n             unescaped_char,\n             buf.capacity() == 0,\n         ) {\n             (Ok(c), false) => buf.push(c as u8),\n-            (Ok(c), true) if char_range.len() == 1 && Some(c) == text_iter.next() => (),\n+            (Ok(_), true) if char_range.len() == 1 && char_range.start == prev => {\n+                prev = char_range.end\n+            }\n             (Ok(c), true) => {\n                 buf.reserve_exact(text.len());\n-                buf.extend_from_slice(text[..char_range.start].as_bytes());\n+                buf.extend_from_slice(text[..prev].as_bytes());\n                 buf.push(c as u8);\n             }\n             (Err(_), _) => has_error = true,\n@@ -445,6 +449,12 @@ mod tests {\n         check_string_value(r\"\\foobar\", None);\n         check_string_value(r\"\\nfoobar\", \"\\nfoobar\");\n         check_string_value(r\"C:\\\\Windows\\\\System32\\\\\", \"C:\\\\Windows\\\\System32\\\\\");\n+        check_string_value(r\"\\x61bcde\", \"a\\x62cde\");\n+        check_string_value(\n+            r\"a\\\n+bcde\", \"a\\\n+bcde\",\n+        );\n     }\n \n     #[test]"}]}