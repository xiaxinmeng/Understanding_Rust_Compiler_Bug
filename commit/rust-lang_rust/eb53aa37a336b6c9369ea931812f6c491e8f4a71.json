{"sha": "eb53aa37a336b6c9369ea931812f6c491e8f4a71", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNTNhYTM3YTMzNmI2YzkzNjllYTkzMTgxMmY2YzQ5MWU4ZjRhNzE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-21T12:13:46Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-21T12:13:46Z"}, "message": "Split internal and user-visible ScopeDef", "tree": {"sha": "30d6f3818af29182f2dc69d4add2ad27a6538514", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30d6f3818af29182f2dc69d4add2ad27a6538514"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb53aa37a336b6c9369ea931812f6c491e8f4a71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb53aa37a336b6c9369ea931812f6c491e8f4a71", "html_url": "https://github.com/rust-lang/rust/commit/eb53aa37a336b6c9369ea931812f6c491e8f4a71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb53aa37a336b6c9369ea931812f6c491e8f4a71/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca1af86e7bb104533f9878f84a7a3a39e5107c30", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca1af86e7bb104533f9878f84a7a3a39e5107c30", "html_url": "https://github.com/rust-lang/rust/commit/ca1af86e7bb104533f9878f84a7a3a39e5107c30"}], "stats": {"total": 57, "additions": 40, "deletions": 17}, "files": [{"sha": "7ff0c43aef42d37b62c808340a39e70c90c10833", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/eb53aa37a336b6c9369ea931812f6c491e8f4a71/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb53aa37a336b6c9369ea931812f6c491e8f4a71/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=eb53aa37a336b6c9369ea931812f6c491e8f4a71", "patch": "@@ -19,7 +19,7 @@ use crate::{\n     code_model::Crate,\n     db::HirDatabase,\n     expr::{ExprScopes, PatId, ScopeId},\n-    DefWithBody, GenericDef, GenericParam, Local, MacroDef, PerNs, ScopeDef,\n+    DefWithBody, GenericDef, MacroDef, PerNs,\n };\n \n #[derive(Debug, Clone, Default)]\n@@ -377,6 +377,13 @@ impl Resolver {\n             _ => None,\n         })\n     }\n+\n+    pub(crate) fn body_owner(&self) -> Option<DefWithBodyId> {\n+        self.scopes.iter().find_map(|scope| match scope {\n+            Scope::ExprScope(it) => Some(it.owner),\n+            _ => None,\n+        })\n+    }\n }\n \n impl Resolver {\n@@ -420,6 +427,14 @@ impl Resolver {\n     }\n }\n \n+pub(crate) enum ScopeDef {\n+    PerNs(PerNs),\n+    ImplSelfType(ImplId),\n+    AdtSelfType(AdtId),\n+    GenericParam(u32),\n+    Local(PatId),\n+}\n+\n impl Scope {\n     fn process_names(&self, db: &impl DefDatabase2, f: &mut dyn FnMut(Name, ScopeDef)) {\n         match self {\n@@ -432,30 +447,24 @@ impl Scope {\n                 //     }),\n                 // );\n                 m.crate_def_map[m.module_id].scope.entries().for_each(|(name, res)| {\n-                    f(name.clone(), res.def.into());\n+                    f(name.clone(), ScopeDef::PerNs(res.def));\n                 });\n                 m.crate_def_map[m.module_id].scope.legacy_macros().for_each(|(name, macro_)| {\n-                    f(name.clone(), ScopeDef::MacroDef(macro_.into()));\n+                    f(name.clone(), ScopeDef::PerNs(PerNs::macros(macro_)));\n                 });\n                 m.crate_def_map.extern_prelude().iter().for_each(|(name, &def)| {\n-                    f(name.clone(), ScopeDef::ModuleDef(def.into()));\n+                    f(name.clone(), ScopeDef::PerNs(PerNs::types(def.into())));\n                 });\n                 if let Some(prelude) = m.crate_def_map.prelude() {\n                     let prelude_def_map = db.crate_def_map(prelude.krate);\n                     prelude_def_map[prelude.module_id].scope.entries().for_each(|(name, res)| {\n-                        f(name.clone(), res.def.into());\n+                        f(name.clone(), ScopeDef::PerNs(res.def));\n                     });\n                 }\n             }\n-            Scope::GenericParams { params, def } => {\n+            Scope::GenericParams { params, .. } => {\n                 for param in params.params.iter() {\n-                    f(\n-                        param.name.clone(),\n-                        ScopeDef::GenericParam(GenericParam {\n-                            parent: (*def).into(),\n-                            idx: param.idx,\n-                        }),\n-                    )\n+                    f(param.name.clone(), ScopeDef::GenericParam(param.idx))\n                 }\n             }\n             Scope::ImplBlockScope(i) => {\n@@ -466,8 +475,7 @@ impl Scope {\n             }\n             Scope::ExprScope(scope) => {\n                 scope.expr_scopes.entries(scope.scope_id).iter().for_each(|e| {\n-                    let local = Local { parent: scope.owner.into(), pat_id: e.pat() };\n-                    f(e.name().clone(), ScopeDef::Local(local));\n+                    f(e.name().clone(), ScopeDef::Local(e.pat()));\n                 });\n             }\n         }"}, {"sha": "f13d43740f9cc8c5010f050e3f643f1e3a1195f5", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/eb53aa37a336b6c9369ea931812f6c491e8f4a71/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb53aa37a336b6c9369ea931812f6c491e8f4a71/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=eb53aa37a336b6c9369ea931812f6c491e8f4a71", "patch": "@@ -23,7 +23,7 @@ use crate::{\n     db::HirDatabase,\n     expr::{BodySourceMap, ExprScopes, ScopeId},\n     ids::LocationCtx,\n-    resolve::{resolver_for_scope, HasResolver, TypeNs, ValueNs},\n+    resolve::{self, resolver_for_scope, HasResolver, TypeNs, ValueNs},\n     ty::method_resolution::{self, implements_trait},\n     Adt, AssocItem, Const, DefWithBody, Either, Enum, EnumVariant, FromSource, Function,\n     GenericParam, HasBody, HirFileId, Local, MacroDef, Module, Name, Path, Resolver, ScopeDef,\n@@ -310,7 +310,22 @@ impl SourceAnalyzer {\n     }\n \n     pub fn process_all_names(&self, db: &impl HirDatabase, f: &mut dyn FnMut(Name, ScopeDef)) {\n-        self.resolver.process_all_names(db, f)\n+        self.resolver.process_all_names(db, &mut |name, def| {\n+            let def = match def {\n+                resolve::ScopeDef::PerNs(it) => it.into(),\n+                resolve::ScopeDef::ImplSelfType(it) => ScopeDef::ImplSelfType(it.into()),\n+                resolve::ScopeDef::AdtSelfType(it) => ScopeDef::AdtSelfType(it.into()),\n+                resolve::ScopeDef::GenericParam(idx) => {\n+                    let parent = self.resolver.generic_def().unwrap().into();\n+                    ScopeDef::GenericParam(GenericParam { parent, idx })\n+                }\n+                resolve::ScopeDef::Local(pat_id) => {\n+                    let parent = self.resolver.body_owner().unwrap().into();\n+                    ScopeDef::Local(Local { parent, pat_id })\n+                }\n+            };\n+            f(name, def)\n+        })\n     }\n \n     // FIXME: we only use this in `inline_local_variable` assist, ideally, we"}]}