{"sha": "3c02afe965a2dcfecd42e27bb225f9d2af68e838", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMDJhZmU5NjVhMmRjZmVjZDQyZTI3YmIyMjVmOWQyYWY2OGU4Mzg=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-01-27T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-01-27T00:00:00Z"}, "message": "compiletest: Don't load TestProps from a directories", "tree": {"sha": "43d0e0863e3b67d1b0b09c728373659d2f5648a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43d0e0863e3b67d1b0b09c728373659d2f5648a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c02afe965a2dcfecd42e27bb225f9d2af68e838", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c02afe965a2dcfecd42e27bb225f9d2af68e838", "html_url": "https://github.com/rust-lang/rust/commit/3c02afe965a2dcfecd42e27bb225f9d2af68e838", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c02afe965a2dcfecd42e27bb225f9d2af68e838/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db7ee9534522196a9e750833c0303d8275c683bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/db7ee9534522196a9e750833c0303d8275c683bc", "html_url": "https://github.com/rust-lang/rust/commit/db7ee9534522196a9e750833c0303d8275c683bc"}], "stats": {"total": 208, "additions": 106, "deletions": 102}, "files": [{"sha": "817705c0bd6bf855d561591dc3a0eb03eb43fcbb", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 106, "deletions": 102, "changes": 208, "blob_url": "https://github.com/rust-lang/rust/blob/3c02afe965a2dcfecd42e27bb225f9d2af68e838/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c02afe965a2dcfecd42e27bb225f9d2af68e838/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=3c02afe965a2dcfecd42e27bb225f9d2af68e838", "patch": "@@ -391,139 +391,143 @@ impl TestProps {\n     /// `//[foo]`), then the property is ignored unless `cfg` is\n     /// `Some(\"foo\")`.\n     fn load_from(&mut self, testfile: &Path, cfg: Option<&str>, config: &Config) {\n-        let file = File::open(testfile).unwrap();\n-        iter_header(testfile, cfg, file, &mut |ln| {\n-            if let Some(ep) = config.parse_error_pattern(ln) {\n-                self.error_patterns.push(ep);\n-            }\n+        if !testfile.is_dir() {\n+            let file = File::open(testfile).unwrap();\n \n-            if let Some(flags) = config.parse_compile_flags(ln) {\n-                self.compile_flags.extend(flags.split_whitespace().map(|s| s.to_owned()));\n-            }\n+            iter_header(testfile, cfg, file, &mut |ln| {\n+                if let Some(ep) = config.parse_error_pattern(ln) {\n+                    self.error_patterns.push(ep);\n+                }\n \n-            if let Some(edition) = config.parse_edition(ln) {\n-                self.compile_flags.push(format!(\"--edition={}\", edition));\n-            }\n+                if let Some(flags) = config.parse_compile_flags(ln) {\n+                    self.compile_flags.extend(flags.split_whitespace().map(|s| s.to_owned()));\n+                }\n \n-            if let Some(r) = config.parse_revisions(ln) {\n-                self.revisions.extend(r);\n-            }\n+                if let Some(edition) = config.parse_edition(ln) {\n+                    self.compile_flags.push(format!(\"--edition={}\", edition));\n+                }\n \n-            if self.run_flags.is_none() {\n-                self.run_flags = config.parse_run_flags(ln);\n-            }\n+                if let Some(r) = config.parse_revisions(ln) {\n+                    self.revisions.extend(r);\n+                }\n \n-            if self.pp_exact.is_none() {\n-                self.pp_exact = config.parse_pp_exact(ln, testfile);\n-            }\n+                if self.run_flags.is_none() {\n+                    self.run_flags = config.parse_run_flags(ln);\n+                }\n \n-            if !self.should_ice {\n-                self.should_ice = config.parse_should_ice(ln);\n-            }\n+                if self.pp_exact.is_none() {\n+                    self.pp_exact = config.parse_pp_exact(ln, testfile);\n+                }\n \n-            if !self.build_aux_docs {\n-                self.build_aux_docs = config.parse_build_aux_docs(ln);\n-            }\n+                if !self.should_ice {\n+                    self.should_ice = config.parse_should_ice(ln);\n+                }\n \n-            if !self.force_host {\n-                self.force_host = config.parse_force_host(ln);\n-            }\n+                if !self.build_aux_docs {\n+                    self.build_aux_docs = config.parse_build_aux_docs(ln);\n+                }\n \n-            if !self.check_stdout {\n-                self.check_stdout = config.parse_check_stdout(ln);\n-            }\n+                if !self.force_host {\n+                    self.force_host = config.parse_force_host(ln);\n+                }\n \n-            if !self.check_run_results {\n-                self.check_run_results = config.parse_check_run_results(ln);\n-            }\n+                if !self.check_stdout {\n+                    self.check_stdout = config.parse_check_stdout(ln);\n+                }\n \n-            if !self.dont_check_compiler_stdout {\n-                self.dont_check_compiler_stdout = config.parse_dont_check_compiler_stdout(ln);\n-            }\n+                if !self.check_run_results {\n+                    self.check_run_results = config.parse_check_run_results(ln);\n+                }\n \n-            if !self.dont_check_compiler_stderr {\n-                self.dont_check_compiler_stderr = config.parse_dont_check_compiler_stderr(ln);\n-            }\n+                if !self.dont_check_compiler_stdout {\n+                    self.dont_check_compiler_stdout = config.parse_dont_check_compiler_stdout(ln);\n+                }\n \n-            if !self.no_prefer_dynamic {\n-                self.no_prefer_dynamic = config.parse_no_prefer_dynamic(ln);\n-            }\n+                if !self.dont_check_compiler_stderr {\n+                    self.dont_check_compiler_stderr = config.parse_dont_check_compiler_stderr(ln);\n+                }\n \n-            if !self.pretty_expanded {\n-                self.pretty_expanded = config.parse_pretty_expanded(ln);\n-            }\n+                if !self.no_prefer_dynamic {\n+                    self.no_prefer_dynamic = config.parse_no_prefer_dynamic(ln);\n+                }\n \n-            if let Some(m) = config.parse_pretty_mode(ln) {\n-                self.pretty_mode = m;\n-            }\n+                if !self.pretty_expanded {\n+                    self.pretty_expanded = config.parse_pretty_expanded(ln);\n+                }\n \n-            if !self.pretty_compare_only {\n-                self.pretty_compare_only = config.parse_pretty_compare_only(ln);\n-            }\n+                if let Some(m) = config.parse_pretty_mode(ln) {\n+                    self.pretty_mode = m;\n+                }\n \n-            if let Some(ab) = config.parse_aux_build(ln) {\n-                self.aux_builds.push(ab);\n-            }\n+                if !self.pretty_compare_only {\n+                    self.pretty_compare_only = config.parse_pretty_compare_only(ln);\n+                }\n \n-            if let Some(ac) = config.parse_aux_crate(ln) {\n-                self.aux_crates.push(ac);\n-            }\n+                if let Some(ab) = config.parse_aux_build(ln) {\n+                    self.aux_builds.push(ab);\n+                }\n \n-            if let Some(ee) = config.parse_env(ln, \"exec-env\") {\n-                self.exec_env.push(ee);\n-            }\n+                if let Some(ac) = config.parse_aux_crate(ln) {\n+                    self.aux_crates.push(ac);\n+                }\n \n-            if let Some(ee) = config.parse_env(ln, \"rustc-env\") {\n-                self.rustc_env.push(ee);\n-            }\n+                if let Some(ee) = config.parse_env(ln, \"exec-env\") {\n+                    self.exec_env.push(ee);\n+                }\n \n-            if let Some(ev) = config.parse_name_value_directive(ln, \"unset-rustc-env\") {\n-                self.unset_rustc_env.push(ev);\n-            }\n+                if let Some(ee) = config.parse_env(ln, \"rustc-env\") {\n+                    self.rustc_env.push(ee);\n+                }\n \n-            if let Some(cl) = config.parse_check_line(ln) {\n-                self.check_lines.push(cl);\n-            }\n+                if let Some(ev) = config.parse_name_value_directive(ln, \"unset-rustc-env\") {\n+                    self.unset_rustc_env.push(ev);\n+                }\n \n-            if let Some(of) = config.parse_forbid_output(ln) {\n-                self.forbid_output.push(of);\n-            }\n+                if let Some(cl) = config.parse_check_line(ln) {\n+                    self.check_lines.push(cl);\n+                }\n \n-            if !self.check_test_line_numbers_match {\n-                self.check_test_line_numbers_match = config.parse_check_test_line_numbers_match(ln);\n-            }\n+                if let Some(of) = config.parse_forbid_output(ln) {\n+                    self.forbid_output.push(of);\n+                }\n \n-            self.update_pass_mode(ln, cfg, config);\n-            self.update_fail_mode(ln, config);\n+                if !self.check_test_line_numbers_match {\n+                    self.check_test_line_numbers_match =\n+                        config.parse_check_test_line_numbers_match(ln);\n+                }\n \n-            if !self.ignore_pass {\n-                self.ignore_pass = config.parse_ignore_pass(ln);\n-            }\n+                self.update_pass_mode(ln, cfg, config);\n+                self.update_fail_mode(ln, config);\n \n-            if let Some(rule) = config.parse_custom_normalization(ln, \"normalize-stdout\") {\n-                self.normalize_stdout.push(rule);\n-            }\n-            if let Some(rule) = config.parse_custom_normalization(ln, \"normalize-stderr\") {\n-                self.normalize_stderr.push(rule);\n-            }\n+                if !self.ignore_pass {\n+                    self.ignore_pass = config.parse_ignore_pass(ln);\n+                }\n \n-            if let Some(code) = config.parse_failure_status(ln) {\n-                self.failure_status = code;\n-            }\n+                if let Some(rule) = config.parse_custom_normalization(ln, \"normalize-stdout\") {\n+                    self.normalize_stdout.push(rule);\n+                }\n+                if let Some(rule) = config.parse_custom_normalization(ln, \"normalize-stderr\") {\n+                    self.normalize_stderr.push(rule);\n+                }\n \n-            if !self.run_rustfix {\n-                self.run_rustfix = config.parse_run_rustfix(ln);\n-            }\n+                if let Some(code) = config.parse_failure_status(ln) {\n+                    self.failure_status = code;\n+                }\n \n-            if !self.rustfix_only_machine_applicable {\n-                self.rustfix_only_machine_applicable =\n-                    config.parse_rustfix_only_machine_applicable(ln);\n-            }\n+                if !self.run_rustfix {\n+                    self.run_rustfix = config.parse_run_rustfix(ln);\n+                }\n \n-            if self.assembly_output.is_none() {\n-                self.assembly_output = config.parse_assembly_output(ln);\n-            }\n-        });\n+                if !self.rustfix_only_machine_applicable {\n+                    self.rustfix_only_machine_applicable =\n+                        config.parse_rustfix_only_machine_applicable(ln);\n+                }\n+\n+                if self.assembly_output.is_none() {\n+                    self.assembly_output = config.parse_assembly_output(ln);\n+                }\n+            });\n+        }\n \n         if self.failure_status == -1 {\n             self.failure_status = match config.mode {"}]}