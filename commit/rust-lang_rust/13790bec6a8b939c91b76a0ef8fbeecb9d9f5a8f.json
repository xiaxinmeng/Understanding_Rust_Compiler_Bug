{"sha": "13790bec6a8b939c91b76a0ef8fbeecb9d9f5a8f", "node_id": "C_kwDOAAsO6NoAKDEzNzkwYmVjNmE4YjkzOWM5MWI3NmEwZWY4ZmJlZWNiOWQ5ZjVhOGY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-14T19:11:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-14T19:11:11Z"}, "message": "Rollup merge of #109272 - schneems:schneems/add-docs-to-command-env-methods, r=Amanieu\n\nAdd Command environment variable inheritance docs\n\nThe interaction between the environment variable methods can be confusing. Specifically `env_clear` and `remove_env` have a side effects not mentioned: they disable inheriting environment variables from the parent process. I wanted to fully document this behavior as well as explain relevant edge cases in each of the `Command` env methods.\n\nThis is further confused by the return of `get_envs` which will return key/None if `remove_env` has been used, but an empty iterator if `env_clear` has been called. Or a non-empty iterator if `env_clear` was called and later explicit mappings are added. Currently there is no way (that I'm able to find) of observing whether or not the internal `env_clear=true` been toggled on the `Command` struct via its public API.\n\nUltimately environment variable mappings can be in one of several states:\n\n- Explicitly set value (via `envs` / `env`) will take precedence over parent mapping\n- Not explicitly set, will inherit mapping from parent\n- Explicitly removed via `remove_env`, this single mapping will not inherit from parent\n- Implicitly removed via `env_clear`, no mappings will inherit from parent\n\nI tried to represent this in the relevant sections of the docs.\n\nThis is my second-ever doc PR (whoop!). I'm happy to take specific or general doc feedback. Also happy to explain the logic behind any changes or additions I made.", "tree": {"sha": "7a79b5bfef0dddfb0f3d1373f35b785f9a9cbae9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a79b5bfef0dddfb0f3d1373f35b785f9a9cbae9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13790bec6a8b939c91b76a0ef8fbeecb9d9f5a8f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkOaVPCRBK7hj4Ov3rIwAARMUIAGKThc0oP4Ezrm5dfNpPlYej\nAdc1uuPJ2E4Lv8WBrBeBhthdphXxIW42kmIt0mti/8JLijrOwSBqTvBcYrG0Bm+o\nn7T5Wq+qlL5qUEegiSxqmwJ8GtgNAOLQ4p/KKw/wuD0padJvZDqLYRX/cyfU0m9c\nItVY2+nj/wpXTr413tu1CUg4h76X77DUWPSR9AbCMrqDCA2/mCdpk7eXcuI+6+vX\nifD09ByJI7Avhk0diPiV1ogNVnFjurCL2il/6urI6n2ghlWrTlcs/KiGEppBFmzX\nUnN3LusZcUAUQfFOO2l3vEM8s69xxprChkilBgoWz8RatKtyw28wgMmgk0zOoY8=\n=AfrN\n-----END PGP SIGNATURE-----\n", "payload": "tree 7a79b5bfef0dddfb0f3d1373f35b785f9a9cbae9\nparent 7bfccb3d7f413821b1fbeb044a2d35b3bf4a035e\nparent e612d785d75b84832725f3c265592c0e512f2ed3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1681499471 +0200\ncommitter GitHub <noreply@github.com> 1681499471 +0200\n\nRollup merge of #109272 - schneems:schneems/add-docs-to-command-env-methods, r=Amanieu\n\nAdd Command environment variable inheritance docs\n\nThe interaction between the environment variable methods can be confusing. Specifically `env_clear` and `remove_env` have a side effects not mentioned: they disable inheriting environment variables from the parent process. I wanted to fully document this behavior as well as explain relevant edge cases in each of the `Command` env methods.\n\nThis is further confused by the return of `get_envs` which will return key/None if `remove_env` has been used, but an empty iterator if `env_clear` has been called. Or a non-empty iterator if `env_clear` was called and later explicit mappings are added. Currently there is no way (that I'm able to find) of observing whether or not the internal `env_clear=true` been toggled on the `Command` struct via its public API.\n\nUltimately environment variable mappings can be in one of several states:\n\n- Explicitly set value (via `envs` / `env`) will take precedence over parent mapping\n- Not explicitly set, will inherit mapping from parent\n- Explicitly removed via `remove_env`, this single mapping will not inherit from parent\n- Implicitly removed via `env_clear`, no mappings will inherit from parent\n\nI tried to represent this in the relevant sections of the docs.\n\nThis is my second-ever doc PR (whoop!). I'm happy to take specific or general doc feedback. Also happy to explain the logic behind any changes or additions I made.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13790bec6a8b939c91b76a0ef8fbeecb9d9f5a8f", "html_url": "https://github.com/rust-lang/rust/commit/13790bec6a8b939c91b76a0ef8fbeecb9d9f5a8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13790bec6a8b939c91b76a0ef8fbeecb9d9f5a8f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bfccb3d7f413821b1fbeb044a2d35b3bf4a035e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bfccb3d7f413821b1fbeb044a2d35b3bf4a035e", "html_url": "https://github.com/rust-lang/rust/commit/7bfccb3d7f413821b1fbeb044a2d35b3bf4a035e"}, {"sha": "e612d785d75b84832725f3c265592c0e512f2ed3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e612d785d75b84832725f3c265592c0e512f2ed3", "html_url": "https://github.com/rust-lang/rust/commit/e612d785d75b84832725f3c265592c0e512f2ed3"}], "stats": {"total": 76, "additions": 61, "deletions": 15}, "files": [{"sha": "0ab72f7ea7a6d34ff20628765838b55f816f2250", "filename": "library/std/src/process.rs", "status": "modified", "additions": 61, "deletions": 15, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/13790bec6a8b939c91b76a0ef8fbeecb9d9f5a8f/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13790bec6a8b939c91b76a0ef8fbeecb9d9f5a8f/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=13790bec6a8b939c91b76a0ef8fbeecb9d9f5a8f", "patch": "@@ -652,10 +652,19 @@ impl Command {\n         self\n     }\n \n-    /// Inserts or updates an environment variable mapping.\n+    /// Inserts or updates an explicit environment variable mapping.\n     ///\n-    /// Note that environment variable names are case-insensitive (but case-preserving) on Windows,\n-    /// and case-sensitive on all other platforms.\n+    /// This method allows you to add an environment variable mapping to the spawned process or\n+    /// overwrite a previously set value. You can use [`Command::envs`] to set multiple environment\n+    /// variables simultaneously.\n+    ///\n+    /// Child processes will inherit environment variables from their parent process by default.\n+    /// Environment variables explicitly set using [`Command::env`] take precedence over inherited\n+    /// variables. You can disable environment variable inheritance entirely using\n+    /// [`Command::env_clear`] or for a single key using [`Command::env_remove`].\n+    ///\n+    /// Note that environment variable names are case-insensitive (but\n+    /// case-preserving) on Windows and case-sensitive on all other platforms.\n     ///\n     /// # Examples\n     ///\n@@ -679,7 +688,19 @@ impl Command {\n         self\n     }\n \n-    /// Adds or updates multiple environment variable mappings.\n+    /// Inserts or updates multiple explicit environment variable mappings.\n+    ///\n+    /// This method allows you to add multiple environment variable mappings to the spawned process\n+    /// or overwrite previously set values. You can use [`Command::env`] to set a single environment\n+    /// variable.\n+    ///\n+    /// Child processes will inherit environment variables from their parent process by default.\n+    /// Environment variables explicitly set using [`Command::envs`] take precedence over inherited\n+    /// variables. You can disable environment variable inheritance entirely using\n+    /// [`Command::env_clear`] or for a single key using [`Command::env_remove`].\n+    ///\n+    /// Note that environment variable names are case-insensitive (but case-preserving) on Windows\n+    /// and case-sensitive on all other platforms.\n     ///\n     /// # Examples\n     ///\n@@ -716,7 +737,18 @@ impl Command {\n         self\n     }\n \n-    /// Removes an environment variable mapping.\n+    /// Removes an explicitly set environment variable and prevents inheriting it from a parent\n+    /// process.\n+    ///\n+    /// This method will remove the explicit value of an environment variable set via\n+    /// [`Command::env`] or [`Command::envs`]. In addition, it will prevent the spawned child\n+    /// process from inheriting that environment variable from its parent process.\n+    ///\n+    /// After calling [`Command::env_remove`], the value associated with its key from\n+    /// [`Command::get_envs`] will be [`None`].\n+    ///\n+    /// To clear all explicitly set environment variables and disable all environment variable\n+    /// inheritance, you can use [`Command::env_clear`].\n     ///\n     /// # Examples\n     ///\n@@ -736,7 +768,17 @@ impl Command {\n         self\n     }\n \n-    /// Clears the entire environment map for the child process.\n+    /// Clears all explicitly set environment variables and prevents inheriting any parent process\n+    /// environment variables.\n+    ///\n+    /// This method will remove all explicitly added environment variables set via [`Command::env`]\n+    /// or [`Command::envs`]. In addition, it will prevent the spawned child process from inheriting\n+    /// any environment variable from its parent process.\n+    ///\n+    /// After calling [`Command::env_remove`], the iterator from [`Command::get_envs`] will be\n+    /// empty.\n+    ///\n+    /// You can use [`Command::env_remove`] to clear a single mapping.\n     ///\n     /// # Examples\n     ///\n@@ -988,17 +1030,21 @@ impl Command {\n         CommandArgs { inner: self.inner.get_args() }\n     }\n \n-    /// Returns an iterator of the environment variables that will be set when\n-    /// the process is spawned.\n+    /// Returns an iterator of the environment variables explicitly set for the child process.\n+    ///\n+    /// Environment variables explicitly set using [`Command::env`], [`Command::envs`], and\n+    /// [`Command::env_remove`] can be retrieved with this method.\n+    ///\n+    /// Note that this output does not include environment variables inherited from the parent\n+    /// process.\n     ///\n-    /// Each element is a tuple `(&OsStr, Option<&OsStr>)`, where the first\n-    /// value is the key, and the second is the value, which is [`None`] if\n-    /// the environment variable is to be explicitly removed.\n+    /// Each element is a tuple key/value pair `(&OsStr, Option<&OsStr>)`. A [`None`] value\n+    /// indicates its key was explicitly removed via [`Command::env_remove`]. The associated key for\n+    /// the [`None`] value will no longer inherit from its parent process.\n     ///\n-    /// This only includes environment variables explicitly set with\n-    /// [`Command::env`], [`Command::envs`], and [`Command::env_remove`]. It\n-    /// does not include environment variables that will be inherited by the\n-    /// child process.\n+    /// An empty iterator can indicate that no explicit mappings were added or that\n+    /// [`Command::env_clear`] was called. After calling [`Command::env_clear`], the child process\n+    /// will not inherit any environment variables from its parent process.\n     ///\n     /// # Examples\n     ///"}]}