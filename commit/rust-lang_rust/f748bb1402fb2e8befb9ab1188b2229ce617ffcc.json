{"sha": "f748bb1402fb2e8befb9ab1188b2229ce617ffcc", "node_id": "C_kwDOAAsO6NoAKGY3NDhiYjE0MDJmYjJlOGJlZmI5YWIxMTg4YjIyMjljZTYxN2ZmY2M", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-09T07:03:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-09T07:03:46Z"}, "message": "Rollup merge of #111252 - matthewjasper:min-spec-improvements, r=compiler-errors\n\nMin specialization improvements\n\n- Don't allow specialization impls with no items, such implementations are probably not correct and only occur as mistakes in the compiler and standard library\n- Fix a missing normalization call\n- Adds spans for lifetime errors from overly general specializations\n\nCloses #79457\nCloses #109815", "tree": {"sha": "b579351fa4d79e4f390abeba8f6109c996b68bef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b579351fa4d79e4f390abeba8f6109c996b68bef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f748bb1402fb2e8befb9ab1188b2229ce617ffcc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkWfBSCRBK7hj4Ov3rIwAAOncIAE2NRYiqhbFl5iJ/EXSdQ2sX\n5sK57RLvjyRalsOeuFlpoPYxuoFLkEz0q2IAJB5W+Qw5H7sfUZCpQK2VAPdlxhki\n/5NdWFdn+WHSOTW27gDVwvfOsuphatyA/PeT83QJdLvQqkbc80+ktPXKsNOPdq1z\nNYbqUMsLelVr6zkrHCio6gjsKiArHhpB5BwgGq/2TqqFpgf+7BRRQ9o4Jmw5dMpA\njJUctbl9M5oVEwqtC/mI9WBa2tq7G0ig59Yie8n8gv4hdgLlCwxrZlNG5P78Q4TU\npPIap8HF9Vh2W97pGqJkEaFdY9nEiuOQ3oheh/mnUnk01vskPU9yeeGvygHt1wI=\n=gKMe\n-----END PGP SIGNATURE-----\n", "payload": "tree b579351fa4d79e4f390abeba8f6109c996b68bef\nparent 8c51701b8a5ac3a2fbfbad9f6d386ec443344293\nparent f46eabb9e56fab132ec8171d0e0239f42c986e52\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1683615826 +0530\ncommitter GitHub <noreply@github.com> 1683615826 +0530\n\nRollup merge of #111252 - matthewjasper:min-spec-improvements, r=compiler-errors\n\nMin specialization improvements\n\n- Don't allow specialization impls with no items, such implementations are probably not correct and only occur as mistakes in the compiler and standard library\n- Fix a missing normalization call\n- Adds spans for lifetime errors from overly general specializations\n\nCloses #79457\nCloses #109815\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f748bb1402fb2e8befb9ab1188b2229ce617ffcc", "html_url": "https://github.com/rust-lang/rust/commit/f748bb1402fb2e8befb9ab1188b2229ce617ffcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c51701b8a5ac3a2fbfbad9f6d386ec443344293", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c51701b8a5ac3a2fbfbad9f6d386ec443344293", "html_url": "https://github.com/rust-lang/rust/commit/8c51701b8a5ac3a2fbfbad9f6d386ec443344293"}, {"sha": "f46eabb9e56fab132ec8171d0e0239f42c986e52", "url": "https://api.github.com/repos/rust-lang/rust/commits/f46eabb9e56fab132ec8171d0e0239f42c986e52", "html_url": "https://github.com/rust-lang/rust/commit/f46eabb9e56fab132ec8171d0e0239f42c986e52"}], "stats": {"total": 394, "additions": 346, "deletions": 48}, "files": [{"sha": "311a42aa42a3d5f2cdbea48bbcd33fab2d32e299", "filename": "compiler/rustc_data_structures/src/owned_slice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fowned_slice.rs?ref=f748bb1402fb2e8befb9ab1188b2229ce617ffcc", "patch": "@@ -109,9 +109,11 @@ impl Borrow<[u8]> for OwnedSlice {\n }\n \n // Safety: `OwnedSlice` is conceptually `(&'self.1 [u8], Box<dyn Send + Sync>)`, which is `Send`\n+#[cfg(parallel_compiler)]\n unsafe impl Send for OwnedSlice {}\n \n // Safety: `OwnedSlice` is conceptually `(&'self.1 [u8], Box<dyn Send + Sync>)`, which is `Sync`\n+#[cfg(parallel_compiler)]\n unsafe impl Sync for OwnedSlice {}\n \n #[cfg(test)]"}, {"sha": "5e5c984a7ea15e75d302c0c2373e70f9365b20c1", "filename": "compiler/rustc_hir_analysis/messages.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/compiler%2Frustc_hir_analysis%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/compiler%2Frustc_hir_analysis%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fmessages.ftl?ref=f748bb1402fb2e8befb9ab1188b2229ce617ffcc", "patch": "@@ -279,6 +279,9 @@ hir_analysis_specialization_trait = implementing `rustc_specialization_trait` tr\n hir_analysis_closure_implicit_hrtb = implicit types in closure signatures are forbidden when `for<...>` is present\n     .label = `for<...>` is here\n \n+hir_analysis_empty_specialization = specialization impl does not specialize any associated items\n+    .note = impl is a specialization of this impl\n+\n hir_analysis_const_specialize = cannot specialize on const impl with non-const impl\n \n hir_analysis_static_specialize = cannot specialize on `'static` lifetime"}, {"sha": "6e7eb4f6cdcd8eba1fc0cfbf8e3654a2126bb76e", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=f748bb1402fb2e8befb9ab1188b2229ce617ffcc", "patch": "@@ -814,6 +814,15 @@ pub(crate) struct ClosureImplicitHrtb {\n     pub for_sp: Span,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_empty_specialization)]\n+pub(crate) struct EmptySpecialization {\n+    #[primary_span]\n+    pub span: Span,\n+    #[note]\n+    pub base_impl_span: Span,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(hir_analysis_const_specialize)]\n pub(crate) struct ConstSpecialize {"}, {"sha": "e84da2519ae812bce3b4a48c17dcb65948517ef5", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=f748bb1402fb2e8befb9ab1188b2229ce617ffcc", "patch": "@@ -80,7 +80,7 @@ use rustc_middle::ty::{self, TyCtxt, TypeVisitableExt};\n use rustc_span::Span;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt;\n use rustc_trait_selection::traits::outlives_bounds::InferCtxtExt as _;\n-use rustc_trait_selection::traits::{self, translate_substs, wf, ObligationCtxt};\n+use rustc_trait_selection::traits::{self, translate_substs_with_cause, wf, ObligationCtxt};\n \n pub(super) fn check_min_specialization(tcx: TyCtxt<'_>, impl_def_id: LocalDefId) {\n     if let Some(node) = parent_specialization_node(tcx, impl_def_id) {\n@@ -100,12 +100,19 @@ fn parent_specialization_node(tcx: TyCtxt<'_>, impl1_def_id: LocalDefId) -> Opti\n         // Implementing a normal trait isn't a specialization.\n         return None;\n     }\n+    if trait_def.is_marker {\n+        // Overlapping marker implementations are not really specializations.\n+        return None;\n+    }\n     Some(impl2_node)\n }\n \n /// Check that `impl1` is a sound specialization\n #[instrument(level = \"debug\", skip(tcx))]\n fn check_always_applicable(tcx: TyCtxt<'_>, impl1_def_id: LocalDefId, impl2_node: Node) {\n+    let span = tcx.def_span(impl1_def_id);\n+    check_has_items(tcx, impl1_def_id, impl2_node, span);\n+\n     if let Some((impl1_substs, impl2_substs)) = get_impl_substs(tcx, impl1_def_id, impl2_node) {\n         let impl2_def_id = impl2_node.def_id();\n         debug!(?impl2_def_id, ?impl2_substs);\n@@ -116,14 +123,20 @@ fn check_always_applicable(tcx: TyCtxt<'_>, impl1_def_id: LocalDefId, impl2_node\n             unconstrained_parent_impl_substs(tcx, impl2_def_id, impl2_substs)\n         };\n \n-        let span = tcx.def_span(impl1_def_id);\n         check_constness(tcx, impl1_def_id, impl2_node, span);\n         check_static_lifetimes(tcx, &parent_substs, span);\n         check_duplicate_params(tcx, impl1_substs, &parent_substs, span);\n         check_predicates(tcx, impl1_def_id, impl1_substs, impl2_node, impl2_substs, span);\n     }\n }\n \n+fn check_has_items(tcx: TyCtxt<'_>, impl1_def_id: LocalDefId, impl2_node: Node, span: Span) {\n+    if let Node::Impl(impl2_id) = impl2_node && tcx.associated_item_def_ids(impl1_def_id).is_empty() {\n+        let base_impl_span = tcx.def_span(impl2_id);\n+        tcx.sess.emit_err(errors::EmptySpecialization { span, base_impl_span });\n+    }\n+}\n+\n /// Check that the specializing impl `impl1` is at least as const as the base\n /// impl `impl2`\n fn check_constness(tcx: TyCtxt<'_>, impl1_def_id: LocalDefId, impl2_node: Node, span: Span) {\n@@ -167,8 +180,21 @@ fn get_impl_substs(\n         ocx.assumed_wf_types(param_env, tcx.def_span(impl1_def_id), impl1_def_id);\n \n     let impl1_substs = InternalSubsts::identity_for_item(tcx, impl1_def_id);\n-    let impl2_substs =\n-        translate_substs(infcx, param_env, impl1_def_id.to_def_id(), impl1_substs, impl2_node);\n+    let impl1_span = tcx.def_span(impl1_def_id);\n+    let impl2_substs = translate_substs_with_cause(\n+        infcx,\n+        param_env,\n+        impl1_def_id.to_def_id(),\n+        impl1_substs,\n+        impl2_node,\n+        |_, span| {\n+            traits::ObligationCause::new(\n+                impl1_span,\n+                impl1_def_id,\n+                traits::ObligationCauseCode::BindingObligation(impl2_node.def_id(), span),\n+            )\n+        },\n+    );\n \n     let errors = ocx.select_all_or_error();\n     if !errors.is_empty() {"}, {"sha": "f2841182a1a372aa537300b450e4cb06adc7b37a", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=f748bb1402fb2e8befb9ab1188b2229ce617ffcc", "patch": "@@ -2728,8 +2728,6 @@ pub struct UserTypeProjection {\n     pub projs: Vec<ProjectionKind>,\n }\n \n-impl Copy for ProjectionKind {}\n-\n impl UserTypeProjection {\n     pub(crate) fn index(mut self) -> Self {\n         self.projs.push(ProjectionElem::Index(()));"}, {"sha": "969e5fa64b0b16c147be1844c63d153cf0fcdec5", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=f748bb1402fb2e8befb9ab1188b2229ce617ffcc", "patch": "@@ -322,7 +322,9 @@ fn negative_impl(tcx: TyCtxt<'_>, impl1_def_id: DefId, impl2_def_id: DefId) -> b\n     let selcx = &mut SelectionContext::new(&infcx);\n     let impl2_substs = infcx.fresh_substs_for_item(DUMMY_SP, impl2_def_id);\n     let (subject2, obligations) =\n-        impl_subject_and_oblig(selcx, impl_env, impl2_def_id, impl2_substs);\n+        impl_subject_and_oblig(selcx, impl_env, impl2_def_id, impl2_substs, |_, _| {\n+            ObligationCause::dummy()\n+        });\n \n     !equate(&infcx, impl_env, subject1, subject2, obligations, impl1_def_id)\n }"}, {"sha": "38daca5377a8b88aff473a888b1ecee889eb6e65", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=f748bb1402fb2e8befb9ab1188b2229ce617ffcc", "patch": "@@ -55,7 +55,9 @@ pub use self::select::{EvaluationCache, SelectionCache, SelectionContext};\n pub use self::select::{EvaluationResult, IntercrateAmbiguityCause, OverflowError};\n pub use self::specialize::specialization_graph::FutureCompatOverlapError;\n pub use self::specialize::specialization_graph::FutureCompatOverlapErrorKind;\n-pub use self::specialize::{specialization_graph, translate_substs, OverlapError};\n+pub use self::specialize::{\n+    specialization_graph, translate_substs, translate_substs_with_cause, OverlapError,\n+};\n pub use self::structural_match::{\n     search_for_adt_const_param_violation, search_for_structural_match_violation,\n };"}, {"sha": "9a4b72013b88db225fefd83ef8097b7e3b28965f", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 51, "deletions": 18, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=f748bb1402fb2e8befb9ab1188b2229ce617ffcc", "patch": "@@ -82,6 +82,30 @@ pub fn translate_substs<'tcx>(\n     source_impl: DefId,\n     source_substs: SubstsRef<'tcx>,\n     target_node: specialization_graph::Node,\n+) -> SubstsRef<'tcx> {\n+    translate_substs_with_cause(\n+        infcx,\n+        param_env,\n+        source_impl,\n+        source_substs,\n+        target_node,\n+        |_, _| ObligationCause::dummy(),\n+    )\n+}\n+\n+/// Like [translate_substs], but obligations from the parent implementation\n+/// are registered with the provided `ObligationCause`.\n+///\n+/// This is for reporting *region* errors from those bounds. Type errors should\n+/// not happen because the specialization graph already checks for those, and\n+/// will result in an ICE.\n+pub fn translate_substs_with_cause<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    source_impl: DefId,\n+    source_substs: SubstsRef<'tcx>,\n+    target_node: specialization_graph::Node,\n+    cause: impl Fn(usize, Span) -> ObligationCause<'tcx>,\n ) -> SubstsRef<'tcx> {\n     debug!(\n         \"translate_substs({:?}, {:?}, {:?}, {:?})\",\n@@ -99,14 +123,13 @@ pub fn translate_substs<'tcx>(\n                 return source_substs;\n             }\n \n-            fulfill_implication(infcx, param_env, source_trait_ref, target_impl).unwrap_or_else(\n-                |()| {\n+            fulfill_implication(infcx, param_env, source_trait_ref, source_impl, target_impl, cause)\n+                .unwrap_or_else(|()| {\n                     bug!(\n                         \"When translating substitutions from {source_impl:?} to {target_impl:?}, \\\n                         the expected specialization failed to hold\"\n                     )\n-                },\n-            )\n+                })\n         }\n         specialization_graph::Node::Trait(..) => source_trait_ref.substs,\n     };\n@@ -153,20 +176,12 @@ pub(super) fn specializes(tcx: TyCtxt<'_>, (impl1_def_id, impl2_def_id): (DefId,\n \n     // Create an infcx, taking the predicates of impl1 as assumptions:\n     let infcx = tcx.infer_ctxt().build();\n-    let impl1_trait_ref =\n-        match traits::fully_normalize(&infcx, ObligationCause::dummy(), penv, impl1_trait_ref) {\n-            Ok(impl1_trait_ref) => impl1_trait_ref,\n-            Err(_errors) => {\n-                tcx.sess.delay_span_bug(\n-                    tcx.def_span(impl1_def_id),\n-                    format!(\"failed to fully normalize {impl1_trait_ref}\"),\n-                );\n-                impl1_trait_ref\n-            }\n-        };\n \n     // Attempt to prove that impl2 applies, given all of the above.\n-    fulfill_implication(&infcx, penv, impl1_trait_ref, impl2_def_id).is_ok()\n+    fulfill_implication(&infcx, penv, impl1_trait_ref, impl1_def_id, impl2_def_id, |_, _| {\n+        ObligationCause::dummy()\n+    })\n+    .is_ok()\n }\n \n /// Attempt to fulfill all obligations of `target_impl` after unification with\n@@ -178,23 +193,41 @@ fn fulfill_implication<'tcx>(\n     infcx: &InferCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     source_trait_ref: ty::TraitRef<'tcx>,\n+    source_impl: DefId,\n     target_impl: DefId,\n+    error_cause: impl Fn(usize, Span) -> ObligationCause<'tcx>,\n ) -> Result<SubstsRef<'tcx>, ()> {\n     debug!(\n         \"fulfill_implication({:?}, trait_ref={:?} |- {:?} applies)\",\n         param_env, source_trait_ref, target_impl\n     );\n \n+    let source_trait_ref = match traits::fully_normalize(\n+        &infcx,\n+        ObligationCause::dummy(),\n+        param_env,\n+        source_trait_ref,\n+    ) {\n+        Ok(source_trait_ref) => source_trait_ref,\n+        Err(_errors) => {\n+            infcx.tcx.sess.delay_span_bug(\n+                infcx.tcx.def_span(source_impl),\n+                format!(\"failed to fully normalize {source_trait_ref}\"),\n+            );\n+            source_trait_ref\n+        }\n+    };\n+\n     let source_trait = ImplSubject::Trait(source_trait_ref);\n \n     let selcx = &mut SelectionContext::new(&infcx);\n     let target_substs = infcx.fresh_substs_for_item(DUMMY_SP, target_impl);\n     let (target_trait, obligations) =\n-        util::impl_subject_and_oblig(selcx, param_env, target_impl, target_substs);\n+        util::impl_subject_and_oblig(selcx, param_env, target_impl, target_substs, error_cause);\n \n     // do the impls unify? If not, no specialization.\n     let Ok(InferOk { obligations: more_obligations, .. }) =\n-        infcx.at(&ObligationCause::dummy(), param_env, ).eq(DefineOpaqueTypes::No,source_trait, target_trait)\n+        infcx.at(&ObligationCause::dummy(), param_env).eq(DefineOpaqueTypes::No, source_trait, target_trait)\n     else {\n         debug!(\n             \"fulfill_implication: {:?} does not unify with {:?}\","}, {"sha": "82f3df401988dc94a4f43f766e8aa5d63d9d7c88", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=f748bb1402fb2e8befb9ab1188b2229ce617ffcc", "patch": "@@ -197,6 +197,7 @@ pub fn impl_subject_and_oblig<'a, 'tcx>(\n     param_env: ty::ParamEnv<'tcx>,\n     impl_def_id: DefId,\n     impl_substs: SubstsRef<'tcx>,\n+    cause: impl Fn(usize, Span) -> ObligationCause<'tcx>,\n ) -> (ImplSubject<'tcx>, impl Iterator<Item = PredicateObligation<'tcx>>) {\n     let subject = selcx.tcx().impl_subject(impl_def_id);\n     let subject = subject.subst(selcx.tcx(), impl_substs);\n@@ -208,8 +209,7 @@ pub fn impl_subject_and_oblig<'a, 'tcx>(\n     let predicates = predicates.instantiate(selcx.tcx(), impl_substs);\n     let InferOk { value: predicates, obligations: normalization_obligations2 } =\n         selcx.infcx.at(&ObligationCause::dummy(), param_env).normalize(predicates);\n-    let impl_obligations =\n-        super::predicates_for_generics(|_, _| ObligationCause::dummy(), param_env, predicates);\n+    let impl_obligations = super::predicates_for_generics(cause, param_env, predicates);\n \n     let impl_obligations = impl_obligations\n         .chain(normalization_obligations1.into_iter())"}, {"sha": "f31123f16f140696eecb4fe7e837508ae4df84ca", "filename": "tests/ui/rfc-2632-const-trait-impl/specialization/const-default-bound-non-const-specialized-bound.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-bound-non-const-specialized-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-bound-non-const-specialized-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-bound-non-const-specialized-bound.rs?ref=f748bb1402fb2e8befb9ab1188b2229ce617ffcc", "patch": "@@ -12,7 +12,9 @@ trait Specialize {}\n trait Foo {}\n \n #[const_trait]\n-trait Bar {}\n+trait Bar {\n+    fn bar();\n+}\n \n // bgr360: I was only able to exercise the code path that raises the\n // \"missing ~const qualifier\" error by making this base impl non-const, even\n@@ -21,26 +23,36 @@ trait Bar {}\n impl<T> Bar for T\n where\n     T: ~const Foo,\n-{}\n+{\n+    default fn bar() {}\n+}\n \n impl<T> Bar for T\n where\n     T: Foo, //~ ERROR missing `~const` qualifier\n     T: Specialize,\n-{}\n+{\n+    fn bar() {}\n+}\n \n #[const_trait]\n-trait Baz {}\n+trait Baz {\n+    fn baz();\n+}\n \n impl<T> const Baz for T\n where\n     T: ~const Foo,\n-{}\n+{\n+    default fn baz() {}\n+}\n \n impl<T> const Baz for T //~ ERROR conflicting implementations of trait `Baz`\n where\n     T: Foo,\n     T: Specialize,\n-{}\n+{\n+    fn baz() {}\n+}\n \n fn main() {}"}, {"sha": "057cf4aea8a0f4a29b12ad60db669d2b004eaa3e", "filename": "tests/ui/rfc-2632-const-trait-impl/specialization/const-default-bound-non-const-specialized-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-bound-non-const-specialized-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-bound-non-const-specialized-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fconst-default-bound-non-const-specialized-bound.stderr?ref=f748bb1402fb2e8befb9ab1188b2229ce617ffcc", "patch": "@@ -1,11 +1,11 @@\n error: missing `~const` qualifier for specialization\n-  --> $DIR/const-default-bound-non-const-specialized-bound.rs:28:8\n+  --> $DIR/const-default-bound-non-const-specialized-bound.rs:32:8\n    |\n LL |     T: Foo,\n    |        ^^^\n \n error[E0119]: conflicting implementations of trait `Baz`\n-  --> $DIR/const-default-bound-non-const-specialized-bound.rs:40:1\n+  --> $DIR/const-default-bound-non-const-specialized-bound.rs:50:1\n    |\n LL | impl<T> const Baz for T\n    | ----------------------- first implementation here"}, {"sha": "92d8be6bb166631593e5c161052c4afdb20d1abf", "filename": "tests/ui/rfc-2632-const-trait-impl/specialization/issue-95186-specialize-on-tilde-const.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fissue-95186-specialize-on-tilde-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fissue-95186-specialize-on-tilde-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fissue-95186-specialize-on-tilde-const.rs?ref=f748bb1402fb2e8befb9ab1188b2229ce617ffcc", "patch": "@@ -11,27 +11,39 @@\n trait Specialize {}\n \n #[const_trait]\n-trait Foo {}\n+trait Foo {\n+    fn foo();\n+}\n \n-impl<T> const Foo for T {}\n+impl<T> const Foo for T {\n+    default fn foo() {}\n+}\n \n impl<T> const Foo for T\n where\n     T: ~const Specialize,\n-{}\n+{\n+    fn foo() {}\n+}\n \n #[const_trait]\n-trait Bar {}\n+trait Bar {\n+    fn bar() {}\n+}\n \n impl<T> const Bar for T\n where\n     T: ~const Foo,\n-{}\n+{\n+    default fn bar() {}\n+}\n \n impl<T> const Bar for T\n where\n     T: ~const Foo,\n     T: ~const Specialize,\n-{}\n+{\n+    fn bar() {}\n+}\n \n fn main() {}"}, {"sha": "51bfaf73b57b45dae3024cd73cc2b040b333ca03", "filename": "tests/ui/rfc-2632-const-trait-impl/specialization/issue-95187-same-trait-bound-different-constness.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fissue-95187-same-trait-bound-different-constness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fissue-95187-same-trait-bound-different-constness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecialization%2Fissue-95187-same-trait-bound-different-constness.rs?ref=f748bb1402fb2e8befb9ab1188b2229ce617ffcc", "patch": "@@ -15,31 +15,43 @@ trait Specialize {}\n trait Foo {}\n \n #[const_trait]\n-trait Bar {}\n+trait Bar {\n+    fn bar();\n+}\n \n impl<T> Bar for T\n where\n     T: Foo,\n-{}\n+{\n+    default fn bar() {}\n+}\n \n impl<T> const Bar for T\n where\n     T: ~const Foo,\n     T: Specialize,\n-{}\n+{\n+    fn bar() {}\n+}\n \n #[const_trait]\n-trait Baz {}\n+trait Baz {\n+    fn baz();\n+}\n \n impl<T> const Baz for T\n where\n     T: Foo,\n-{}\n+{\n+    default fn baz() {}\n+}\n \n impl<T> const Baz for T\n where\n     T: ~const Foo,\n     T: Specialize,\n-{}\n+{\n+    fn baz() {}\n+}\n \n fn main() {}"}, {"sha": "c4960b0c28e786227d2ff8940216b9ba80f090e3", "filename": "tests/ui/specialization/min_specialization/specialize-associated-type.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize-associated-type.rs?ref=f748bb1402fb2e8befb9ab1188b2229ce617ffcc", "patch": "@@ -0,0 +1,37 @@\n+// Another regression test for #109815.\n+\n+// check-pass\n+\n+#![feature(min_specialization)]\n+#![feature(rustc_attrs)]\n+\n+#[rustc_specialization_trait]\n+trait X {}\n+trait Z {\n+    type Assoc: X;\n+}\n+struct A<T>(T);\n+\n+impl X for () {}\n+\n+impl<T: X> Z for A<T> {\n+    type Assoc = ();\n+}\n+\n+trait MyFrom<T> {\n+    fn from(other: T) -> Self;\n+}\n+\n+impl<T> MyFrom<()> for T {\n+    default fn from(other: ()) -> T {\n+        panic!();\n+    }\n+}\n+\n+impl<T: X> MyFrom<<A<T> as Z>::Assoc> for T {\n+    fn from(other: ()) -> T {\n+        panic!();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "ef92254d4651c74eae9d664568e3ed10e40b0bba", "filename": "tests/ui/specialization/min_specialization/specialize_nothing.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_nothing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_nothing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_nothing.rs?ref=f748bb1402fb2e8befb9ab1188b2229ce617ffcc", "patch": "@@ -0,0 +1,14 @@\n+#![feature(min_specialization)]\n+\n+trait Special {\n+    fn be_special();\n+}\n+\n+impl<T> Special for T {\n+    fn be_special() {}\n+}\n+\n+impl Special for usize {}\n+//~^ ERROR specialization impl does not specialize any associated items\n+\n+fn main() {}"}, {"sha": "65f73781cae22f0bf5811fe2564bedd7e2ea0e19", "filename": "tests/ui/specialization/min_specialization/specialize_nothing.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_nothing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_nothing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_nothing.stderr?ref=f748bb1402fb2e8befb9ab1188b2229ce617ffcc", "patch": "@@ -0,0 +1,14 @@\n+error: specialization impl does not specialize any associated items\n+  --> $DIR/specialize_nothing.rs:11:1\n+   |\n+LL | impl Special for usize {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: impl is a specialization of this impl\n+  --> $DIR/specialize_nothing.rs:7:1\n+   |\n+LL | impl<T> Special for T {\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "24e92a0abc33ba04914ec83143d79b9e0d6278a7", "filename": "tests/ui/specialization/min_specialization/specialize_on_type_error.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_on_type_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_on_type_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_on_type_error.rs?ref=f748bb1402fb2e8befb9ab1188b2229ce617ffcc", "patch": "@@ -0,0 +1,33 @@\n+// A regression test for #109815.\n+\n+#![feature(min_specialization)]\n+#![feature(rustc_attrs)]\n+\n+#[rustc_specialization_trait]\n+trait X {}\n+trait Y: X {}\n+trait Z {\n+    type Assoc: Y;\n+}\n+struct A<T>(T);\n+\n+impl<T: X> Z for A<T> {}\n+//~^ ERROR not all trait items implemented\n+\n+trait MyFrom<T> {\n+    fn from(other: T) -> Self;\n+}\n+\n+impl<T> MyFrom<T> for T {\n+    default fn from(other: T) -> T {\n+        other\n+    }\n+}\n+\n+impl<T: X> MyFrom<<A<T> as Z>::Assoc> for T {\n+    fn from(other: <A<T> as Z>::Assoc) -> T {\n+        other\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "cc12302bd8cf14b0efb9bd25a3f20cc8d69f8029", "filename": "tests/ui/specialization/min_specialization/specialize_on_type_error.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_on_type_error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_on_type_error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_on_type_error.stderr?ref=f748bb1402fb2e8befb9ab1188b2229ce617ffcc", "patch": "@@ -0,0 +1,12 @@\n+error[E0046]: not all trait items implemented, missing: `Assoc`\n+  --> $DIR/specialize_on_type_error.rs:14:1\n+   |\n+LL |     type Assoc: Y;\n+   |     ------------- `Assoc` from trait\n+...\n+LL | impl<T: X> Z for A<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^ missing `Assoc` in implementation\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0046`."}, {"sha": "d90b81f717a6c38454cf2900f2aecda88e833c25", "filename": "tests/ui/specialization/min_specialization/specialize_with_generalize_lifetimes.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_with_generalize_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_with_generalize_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_with_generalize_lifetimes.rs?ref=f748bb1402fb2e8befb9ab1188b2229ce617ffcc", "patch": "@@ -0,0 +1,50 @@\n+// Regression test for #79457.\n+\n+#![feature(min_specialization)]\n+\n+use std::any::Any;\n+\n+pub trait Tr {\n+    fn method(self) -> Box<dyn Any + 'static>;\n+    fn other(self);\n+}\n+\n+impl<T: Any + 'static> Tr for T {\n+    default fn method(self) -> Box<dyn Any + 'static> {\n+        Box::new(self)\n+    }\n+\n+    default fn other(self) {}\n+}\n+\n+impl<'a> Tr for &'a i32 {\n+    //~^ ERROR does not fulfill the required lifetime\n+    fn other(self) {}\n+}\n+\n+fn promote_to_static<'a>(i: &'a i32) -> &'static i32 {\n+    *i.method().downcast().unwrap()\n+}\n+\n+struct Wrapper<'a>(&'a i32);\n+\n+impl<'a> Tr for Wrapper<'a> {\n+    //~^ ERROR does not fulfill the required lifetime\n+    fn other(self) {}\n+}\n+\n+fn promote_to_static_2<'a>(w: Wrapper<'a>) -> Wrapper<'static> {\n+    *w.method().downcast().unwrap()\n+}\n+\n+fn main() {\n+    let i = Box::new(100_i32);\n+    let static_i: &'static i32 = promote_to_static(&*i);\n+    drop(i);\n+    println!(\"{}\", *static_i);\n+\n+    let j = Box::new(200_i32);\n+    let static_w: Wrapper<'static> = promote_to_static_2(Wrapper(&*j));\n+    drop(j);\n+    println!(\"{}\", *static_w.0);\n+}"}, {"sha": "2af75876d5b0a6bb9388b979f48583305a943e7e", "filename": "tests/ui/specialization/min_specialization/specialize_with_generalize_lifetimes.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_with_generalize_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f748bb1402fb2e8befb9ab1188b2229ce617ffcc/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_with_generalize_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fmin_specialization%2Fspecialize_with_generalize_lifetimes.stderr?ref=f748bb1402fb2e8befb9ab1188b2229ce617ffcc", "patch": "@@ -0,0 +1,27 @@\n+error[E0477]: the type `&'a i32` does not fulfill the required lifetime\n+  --> $DIR/specialize_with_generalize_lifetimes.rs:20:1\n+   |\n+LL | impl<'a> Tr for &'a i32 {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: type must satisfy the static lifetime as required by this binding\n+  --> $DIR/specialize_with_generalize_lifetimes.rs:12:15\n+   |\n+LL | impl<T: Any + 'static> Tr for T {\n+   |               ^^^^^^^\n+\n+error[E0477]: the type `Wrapper<'a>` does not fulfill the required lifetime\n+  --> $DIR/specialize_with_generalize_lifetimes.rs:31:1\n+   |\n+LL | impl<'a> Tr for Wrapper<'a> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: type must satisfy the static lifetime as required by this binding\n+  --> $DIR/specialize_with_generalize_lifetimes.rs:12:15\n+   |\n+LL | impl<T: Any + 'static> Tr for T {\n+   |               ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0477`."}]}