{"sha": "0d9924a87b862529591c3039959fef5bc7c95359", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkOTkyNGE4N2I4NjI1Mjk1OTFjMzAzOTk1OWZlZjViYzdjOTUzNTk=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-08-07T16:11:16Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-08-07T17:41:41Z"}, "message": "instance: always polymorphize substs\n\nBy always polymorphizing substitutions, functions which take closures as\narguments (e.g. `impl Fn()`) can have fewer mono items when some of the\nargument closures can be polymorphized.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "d8f244a15eb244b0a23360beb2c51c205fa35447", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8f244a15eb244b0a23360beb2c51c205fa35447"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d9924a87b862529591c3039959fef5bc7c95359", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl8tklUACgkQJZLnbIc4\nH9m22A/8CcRwUxoDLnVL0f+i8K6f3u5Gm8X66KqrDYwcQly2GY2JS5LO07iERPjC\n2FecwZOBA28QDO8VPZso/zmuFYp6wf20MbneVwHfAepJDZYIojT5GOU+z/hDRRjU\ncFZpfCKortQa/pgrxZi1bsKPbN1PT/zFTfr5EJ62B/tNYICSPtRiFI/YYqw0vMO+\nfNnGW2q4zEXZngXzoAj9v47j085G9Ke75JygQrQSgU6e2EX3teUQgr3nYgRqinZ2\nFupDDeA8/WpZDXokLzqZDNLLotsLjPjLPfCncGW6AYilDbvwnkvLKEmBCLS8/pSt\n6KI8DKD2GMTI/r19SfNZbnNS9ei8mMVsFGkUgHcBwOQdOimBIwl8wUppEToCmMhb\nlKDcCFlSZ2/elB2lIItL9de6iVS4ey79HItMhVW1BhBhCqhZl+4Acnu/4zh/FvhY\nZXZ4yNt6KDKHuyeuCULS6fpmy1Fe1k0rLFtBABa/UxnxBfn1n4pc3SL8M6QSoC4W\n31LUVG4J6/mh9GZsP4JW/6BLOZeovqmKYC+4+ncgvANE4T+5bECwWEqos923JYXE\nxGklXeXnuYZryH/Pu92tGmC/yxyhG8SVAnOCvOiW8sbp4IyF65lfqkM/e4owchvj\n3fdqs9SCZF3oovQvM4iDECFRWG51RAIBrAZwtLOHYPRl26S4l08=\n=bA3W\n-----END PGP SIGNATURE-----", "payload": "tree d8f244a15eb244b0a23360beb2c51c205fa35447\nparent d9decede3593e220d1a4f4a63b4c651b70073861\nauthor David Wood <david@davidtw.co> 1596816676 +0100\ncommitter David Wood <david@davidtw.co> 1596822101 +0100\n\ninstance: always polymorphize substs\n\nBy always polymorphizing substitutions, functions which take closures as\narguments (e.g. `impl Fn()`) can have fewer mono items when some of the\nargument closures can be polymorphized.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d9924a87b862529591c3039959fef5bc7c95359", "html_url": "https://github.com/rust-lang/rust/commit/0d9924a87b862529591c3039959fef5bc7c95359", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d9924a87b862529591c3039959fef5bc7c95359/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9decede3593e220d1a4f4a63b4c651b70073861", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9decede3593e220d1a4f4a63b4c651b70073861", "html_url": "https://github.com/rust-lang/rust/commit/d9decede3593e220d1a4f4a63b4c651b70073861"}], "stats": {"total": 83, "additions": 45, "deletions": 38}, "files": [{"sha": "294bdd76d93adbf2ff2810175ee03e50f3126a3c", "filename": "src/librustc_middle/ty/instance.rs", "status": "modified", "additions": 8, "deletions": 38, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0d9924a87b862529591c3039959fef5bc7c95359/src%2Flibrustc_middle%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d9924a87b862529591c3039959fef5bc7c95359/src%2Flibrustc_middle%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Finstance.rs?ref=0d9924a87b862529591c3039959fef5bc7c95359", "patch": "@@ -492,25 +492,6 @@ fn polymorphize<'tcx>(\n     let unused = tcx.unused_generic_params(def_id);\n     debug!(\"polymorphize: unused={:?}\", unused);\n \n-    if unused.is_empty() {\n-        // Exit early if every parameter was used.\n-        return substs;\n-    }\n-\n-    // If this is a closure or generator then we need to handle the case where another closure\n-    // from the function is captured as an upvar and hasn't been polymorphized. In this case,\n-    // the unpolymorphized upvar closure would result in a polymorphized closure producing\n-    // multiple mono items (and eventually symbol clashes).\n-    let upvars_ty = if tcx.is_closure(def_id) {\n-        Some(substs.as_closure().tupled_upvars_ty())\n-    } else if tcx.type_of(def_id).is_generator() {\n-        Some(substs.as_generator().tupled_upvars_ty())\n-    } else {\n-        None\n-    };\n-    let has_upvars = upvars_ty.map(|ty| ty.tuple_fields().count() > 0).unwrap_or(false);\n-    debug!(\"polymorphize: upvars_ty={:?} has_upvars={:?}\", upvars_ty, has_upvars);\n-\n     struct PolymorphizationFolder<'tcx> {\n         tcx: TyCtxt<'tcx>,\n     };\n@@ -540,31 +521,20 @@ fn polymorphize<'tcx>(\n         let is_unused = unused.contains(param.index).unwrap_or(false);\n         debug!(\"polymorphize: param={:?} is_unused={:?}\", param, is_unused);\n         match param.kind {\n-            // Upvar case: If parameter is a type parameter..\n-            ty::GenericParamDefKind::Type { .. } if\n-                // ..and has upvars..\n-                has_upvars &&\n-                // ..and this param has the same type as the tupled upvars..\n-                upvars_ty == Some(substs[param.index as usize].expect_ty()) => {\n-                    // ..then double-check that polymorphization marked it used..\n-                    debug_assert!(!is_unused);\n-                    // ..and polymorphize any closures/generators captured as upvars.\n-                    let upvars_ty = upvars_ty.unwrap();\n-                    let polymorphized_upvars_ty = upvars_ty.fold_with(\n-                        &mut PolymorphizationFolder { tcx });\n-                    debug!(\"polymorphize: polymorphized_upvars_ty={:?}\", polymorphized_upvars_ty);\n-                    ty::GenericArg::from(polymorphized_upvars_ty)\n-                },\n-\n-            // Simple case: If parameter is a const or type parameter..\n+            // If parameter is a const or type parameter..\n             ty::GenericParamDefKind::Const | ty::GenericParamDefKind::Type { .. } if\n                 // ..and is within range and unused..\n                 unused.contains(param.index).unwrap_or(false) =>\n                     // ..then use the identity for this parameter.\n                     tcx.mk_param_from_def(param),\n \n-            // Otherwise, use the parameter as before.\n-            _ => substs[param.index as usize],\n+            // Otherwise, use the parameter as before (polymorphizing any closures or generators).\n+            _ => {\n+                let arg = substs[param.index as usize];\n+                let polymorphized_arg = arg.fold_with(&mut PolymorphizationFolder { tcx });\n+                debug!(\"polymorphize: arg={:?} polymorphized_arg={:?}\", arg, polymorphized_arg);\n+                ty::GenericArg::from(polymorphized_arg)\n+            }\n         }\n     })\n }"}, {"sha": "ea9a6e8b181874806e45fa0d3af89f2c21aebf9e", "filename": "src/test/codegen-units/polymorphization/pr-75255.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0d9924a87b862529591c3039959fef5bc7c95359/src%2Ftest%2Fcodegen-units%2Fpolymorphization%2Fpr-75255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d9924a87b862529591c3039959fef5bc7c95359/src%2Ftest%2Fcodegen-units%2Fpolymorphization%2Fpr-75255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpolymorphization%2Fpr-75255.rs?ref=0d9924a87b862529591c3039959fef5bc7c95359", "patch": "@@ -0,0 +1,37 @@\n+// compile-flags:-Zpolymorphize=on -Zprint-mono-items=lazy -Copt-level=1\n+// ignore-tidy-linelength\n+\n+#![crate_type = \"rlib\"]\n+\n+// Test that only one copy of `Iter::map` is generated.\n+\n+fn foo<T>() {\n+    let x = [1, 2, 3, std::mem::size_of::<T>()];\n+    x.iter().map(|_| ());\n+}\n+\n+pub fn dispatch() {\n+    foo::<String>();\n+    foo::<Vec<String>>();\n+}\n+\n+//~ MONO_ITEM fn core::iter[0]::adapters[0]::{{impl}}[29]::new[0]<core::slice[0]::Iter[0]<usize>, pr_75255::foo[0]::{{closure}}[0]<T>> @@ pr_75255-cgu.0[External]\n+//~ MONO_ITEM fn core::iter[0]::traits[0]::iterator[0]::Iterator[0]::map[0]<core::slice[0]::Iter[0]<usize>, (), pr_75255::foo[0]::{{closure}}[0]<T>> @@ pr_75255-cgu.1[Internal]\n+\n+// These are all the items that aren't relevant to the test.\n+//~ MONO_ITEM fn core::mem[0]::size_of[0]<alloc::string[0]::String[0]> @@ pr_75255-cgu.1[Internal]\n+//~ MONO_ITEM fn core::mem[0]::size_of[0]<alloc::vec[0]::Vec[0]<alloc::string[0]::String[0]>> @@ pr_75255-cgu.1[Internal]\n+//~ MONO_ITEM fn core::mem[0]::size_of[0]<usize> @@ pr_75255-cgu.1[Internal]\n+//~ MONO_ITEM fn core::ptr[0]::const_ptr[0]::{{impl}}[0]::add[0]<usize> @@ pr_75255-cgu.1[Internal]\n+//~ MONO_ITEM fn core::ptr[0]::const_ptr[0]::{{impl}}[0]::is_null[0]<usize> @@ pr_75255-cgu.1[Internal]\n+//~ MONO_ITEM fn core::ptr[0]::const_ptr[0]::{{impl}}[0]::offset[0]<usize> @@ pr_75255-cgu.1[Internal]\n+//~ MONO_ITEM fn core::ptr[0]::const_ptr[0]::{{impl}}[0]::wrapping_add[0]<u8> @@ pr_75255-cgu.1[Internal]\n+//~ MONO_ITEM fn core::ptr[0]::const_ptr[0]::{{impl}}[0]::wrapping_offset[0]<u8> @@ pr_75255-cgu.1[Internal]\n+//~ MONO_ITEM fn core::ptr[0]::non_null[0]::{{impl}}[3]::new_unchecked[0]<usize> @@ pr_75255-cgu.1[Internal]\n+//~ MONO_ITEM fn core::ptr[0]::null[0]<u8> @@ pr_75255-cgu.1[Internal]\n+//~ MONO_ITEM fn core::slice[0]::{{impl}}[0]::as_ptr[0]<usize> @@ pr_75255-cgu.1[Internal]\n+//~ MONO_ITEM fn core::slice[0]::{{impl}}[0]::iter[0]<usize> @@ pr_75255-cgu.1[Internal]\n+//~ MONO_ITEM fn core::slice[0]::{{impl}}[0]::len[0]<usize> @@ pr_75255-cgu.1[Internal]\n+//~ MONO_ITEM fn pr_75255::dispatch[0] @@ pr_75255-cgu.1[External]\n+//~ MONO_ITEM fn pr_75255::foo[0]<alloc::string[0]::String[0]> @@ pr_75255-cgu.1[Internal]\n+//~ MONO_ITEM fn pr_75255::foo[0]<alloc::vec[0]::Vec[0]<alloc::string[0]::String[0]>> @@ pr_75255-cgu.1[Internal]"}]}