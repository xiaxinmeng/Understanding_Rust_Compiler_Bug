{"sha": "2312ac8db6afe6e2cc7ec2be47a2582777a2f8df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMTJhYzhkYjZhZmU2ZTJjYzdlYzJiZTQ3YTI1ODI3NzdhMmY4ZGY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-20T03:13:26Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-14T16:06:52Z"}, "message": "lvalue: refactoring to permit applying a mir projection to a miri lvalue", "tree": {"sha": "2abebb7913f3d474de8b2091fc6cd2fb1ef4422e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2abebb7913f3d474de8b2091fc6cd2fb1ef4422e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2312ac8db6afe6e2cc7ec2be47a2582777a2f8df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2312ac8db6afe6e2cc7ec2be47a2582777a2f8df", "html_url": "https://github.com/rust-lang/rust/commit/2312ac8db6afe6e2cc7ec2be47a2582777a2f8df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2312ac8db6afe6e2cc7ec2be47a2582777a2f8df/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56d4de303fb59a7235caa1bd2c8e32675428f421", "url": "https://api.github.com/repos/rust-lang/rust/commits/56d4de303fb59a7235caa1bd2c8e32675428f421", "html_url": "https://github.com/rust-lang/rust/commit/56d4de303fb59a7235caa1bd2c8e32675428f421"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "3aa3f01122ab7b7259ada97804cd86b891abb038", "filename": "src/lvalue.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2312ac8db6afe6e2cc7ec2be47a2582777a2f8df/src%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2312ac8db6afe6e2cc7ec2be47a2582777a2f8df/src%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flvalue.rs?ref=2312ac8db6afe6e2cc7ec2be47a2582777a2f8df", "patch": "@@ -189,7 +189,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             return Ok(val);\n         }\n         let lvalue = self.eval_lvalue(lvalue)?;\n+        self.read_lvalue(lvalue, ty)\n+    }\n \n+    fn read_lvalue(&self, lvalue: Lvalue<'tcx>, ty: Ty<'tcx>) -> EvalResult<'tcx, Value> {\n         if ty.is_never() {\n             return Err(EvalError::Unreachable);\n         }\n@@ -219,7 +222,11 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 Lvalue::Global(GlobalId { instance, promoted: None })\n             }\n \n-            Projection(ref proj) => return self.eval_lvalue_projection(proj),\n+            Projection(ref proj) => {\n+                let ty = self.lvalue_ty(&proj.base);\n+                let lvalue = self.eval_lvalue(&proj.base)?;\n+                return self.eval_lvalue_projection(lvalue, ty, &proj.elem);\n+            }\n         };\n \n         if log_enabled!(::log::LogLevel::Trace) {\n@@ -348,19 +355,17 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n     fn eval_lvalue_projection(\n         &mut self,\n-        proj: &mir::LvalueProjection<'tcx>,\n+        base: Lvalue<'tcx>,\n+        base_ty: Ty<'tcx>,\n+        proj_elem: &mir::ProjectionElem<'tcx, mir::Operand<'tcx>>,\n     ) -> EvalResult<'tcx, Lvalue<'tcx>> {\n         use rustc::mir::ProjectionElem::*;\n-        let (ptr, extra, aligned) = match proj.elem {\n+        let (ptr, extra, aligned) = match *proj_elem {\n             Field(field, field_ty) => {\n-                let base = self.eval_lvalue(&proj.base)?;\n-                let base_ty = self.lvalue_ty(&proj.base);\n                 return self.lvalue_field(base, field.index(), base_ty, field_ty);\n             }\n \n             Downcast(_, variant) => {\n-                let base = self.eval_lvalue(&proj.base)?;\n-                let base_ty = self.lvalue_ty(&proj.base);\n                 let base_layout = self.type_layout(base_ty)?;\n                 // FIXME(solson)\n                 let base = self.force_allocation(base)?;\n@@ -376,8 +381,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             Deref => {\n-                let base_ty = self.lvalue_ty(&proj.base);\n-                let val = self.eval_and_read_lvalue(&proj.base)?;\n+                let val = self.read_lvalue(base, base_ty)?;\n \n                 let pointee_type = match base_ty.sty {\n                     ty::TyRawPtr(ref tam) |\n@@ -402,8 +406,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             Index(ref operand) => {\n-                let base = self.eval_lvalue(&proj.base)?;\n-                let base_ty = self.lvalue_ty(&proj.base);\n                 // FIXME(solson)\n                 let base = self.force_allocation(base)?;\n                 let (base_ptr, _, aligned) = base.to_ptr_extra_aligned();\n@@ -419,8 +421,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             ConstantIndex { offset, min_length, from_end } => {\n-                let base = self.eval_lvalue(&proj.base)?;\n-                let base_ty = self.lvalue_ty(&proj.base);\n                 // FIXME(solson)\n                 let base = self.force_allocation(base)?;\n                 let (base_ptr, _, aligned) = base.to_ptr_extra_aligned();\n@@ -440,8 +440,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             Subslice { from, to } => {\n-                let base = self.eval_lvalue(&proj.base)?;\n-                let base_ty = self.lvalue_ty(&proj.base);\n                 // FIXME(solson)\n                 let base = self.force_allocation(base)?;\n                 let (base_ptr, _, aligned) = base.to_ptr_extra_aligned();"}]}