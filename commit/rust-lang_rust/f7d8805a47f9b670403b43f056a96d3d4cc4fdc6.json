{"sha": "f7d8805a47f9b670403b43f056a96d3d4cc4fdc6", "node_id": "C_kwDOAAsO6NoAKGY3ZDg4MDVhNDdmOWI2NzA0MDNiNDNmMDU2YTk2ZDNkNGNjNGZkYzY", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-06-25T12:35:51Z"}, "committer": {"name": "Christopher Hotchkiss", "email": "christopher.hotchkiss@gmail.com", "date": "2022-07-30T15:25:03Z"}, "message": "Fix `Ipv6Addr::is_global` to check for global reachability rather than global scope", "tree": {"sha": "82382f8c7629efb4b59c65a4868ebc85de0f3cf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82382f8c7629efb4b59c65a4868ebc85de0f3cf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7d8805a47f9b670403b43f056a96d3d4cc4fdc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7d8805a47f9b670403b43f056a96d3d4cc4fdc6", "html_url": "https://github.com/rust-lang/rust/commit/f7d8805a47f9b670403b43f056a96d3d4cc4fdc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7d8805a47f9b670403b43f056a96d3d4cc4fdc6/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chotchki", "id": 226950, "node_id": "MDQ6VXNlcjIyNjk1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/226950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chotchki", "html_url": "https://github.com/chotchki", "followers_url": "https://api.github.com/users/chotchki/followers", "following_url": "https://api.github.com/users/chotchki/following{/other_user}", "gists_url": "https://api.github.com/users/chotchki/gists{/gist_id}", "starred_url": "https://api.github.com/users/chotchki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chotchki/subscriptions", "organizations_url": "https://api.github.com/users/chotchki/orgs", "repos_url": "https://api.github.com/users/chotchki/repos", "events_url": "https://api.github.com/users/chotchki/events{/privacy}", "received_events_url": "https://api.github.com/users/chotchki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "110777b60c0c02a9bb62c6ffc081dc276de81210", "url": "https://api.github.com/repos/rust-lang/rust/commits/110777b60c0c02a9bb62c6ffc081dc276de81210", "html_url": "https://github.com/rust-lang/rust/commit/110777b60c0c02a9bb62c6ffc081dc276de81210"}], "stats": {"total": 195, "additions": 168, "deletions": 27}, "files": [{"sha": "0b141efbc181f95873ca3211ab0a24e43fa60787", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 80, "deletions": 15, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/f7d8805a47f9b670403b43f056a96d3d4cc4fdc6/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d8805a47f9b670403b43f056a96d3d4cc4fdc6/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=f7d8805a47f9b670403b43f056a96d3d4cc4fdc6", "patch": "@@ -1349,13 +1349,33 @@ impl Ipv6Addr {\n         u128::from_be_bytes(self.octets()) == u128::from_be_bytes(Ipv6Addr::LOCALHOST.octets())\n     }\n \n-    /// Returns [`true`] if the address appears to be globally routable.\n-    ///\n-    /// The following return [`false`]:\n-    ///\n-    /// - the loopback address\n-    /// - link-local and unique local unicast addresses\n-    /// - interface-, link-, realm-, admin- and site-local multicast addresses\n+    /// Returns [`true`] if the address appears to be globally reachable\n+    /// as specified by the [IANA IPv6 Special-Purpose Address Registry].\n+    /// Whether or not an address is practically reachable will depend on your network configuration.\n+    ///\n+    /// Most IPv6 addresses are globally reachable;\n+    /// unless they are specifically defined as *not* globally reachable.\n+    ///\n+    /// Non-exhaustive list of notable addresses that are not globally reachable:\n+    /// - The [unspecified address] ([`is_unspecified`](Ipv6Addr::is_unspecified))\n+    /// - The [loopback address] ([`is_loopback`](Ipv6Addr::is_loopback))\n+    /// - IPv4-mapped addresses\n+    /// - Addresses reserved for benchmarking\n+    /// - Addresses reserved for documentation ([`is_documentation`](Ipv6Addr::is_documentation))\n+    /// - Unique local addresses ([`is_unique_local`](Ipv6Addr::is_unique_local))\n+    /// - Unicast addresses with link-local scope ([`is_unicast_link_local`](Ipv6Addr::is_unicast_link_local))\n+    ///\n+    /// For the complete overview of which addresses are globally reachable, see the table at the [IANA IPv6 Special-Purpose Address Registry].\n+    ///\n+    /// Note that an address having global scope is not the same as being globally reachable,\n+    /// and there is no direct relation between the two concepts: There exist addresses with global scope\n+    /// that are not globally reachable (for example unique local addresses),\n+    /// and addresses that are globally reachable without having global scope\n+    /// (multicast addresses with non-global scope).\n+    ///\n+    /// [IANA IPv6 Special-Purpose Address Registry]: https://www.iana.org/assignments/iana-ipv6-special-registry/iana-ipv6-special-registry.xhtml\n+    /// [unspecified address]: Ipv6Addr::UNSPECIFIED\n+    /// [loopback address]: Ipv6Addr::LOCALHOST\n     ///\n     /// # Examples\n     ///\n@@ -1364,20 +1384,65 @@ impl Ipv6Addr {\n     ///\n     /// use std::net::Ipv6Addr;\n     ///\n-    /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_global(), true);\n-    /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0x1).is_global(), false);\n-    /// assert_eq!(Ipv6Addr::new(0, 0, 0x1c9, 0, 0, 0xafc8, 0, 0x1).is_global(), true);\n+    /// // Most IPv6 addresses are globally reachable:\n+    /// assert_eq!(Ipv6Addr::new(0x26, 0, 0x1c9, 0, 0, 0xafc8, 0x10, 0x1).is_global(), true);\n+    ///\n+    /// // However some addresses have been assigned a special meaning\n+    /// // that makes them not globally reachable. Some examples are:\n+    ///\n+    /// // The unspecified address (`::`)\n+    /// assert_eq!(Ipv6Addr::UNSPECIFIED.is_global(), false);\n+    ///\n+    /// // The loopback address (`::1`)\n+    /// assert_eq!(Ipv6Addr::LOCALHOST.is_global(), false);\n+    ///\n+    /// // IPv4-mapped addresses (`::ffff:0:0/96`)\n+    /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_global(), false);\n+    ///\n+    /// // Addresses reserved for benchmarking (`2001:2::/48`)\n+    /// assert_eq!(Ipv6Addr::new(0x2001, 2, 0, 0, 0, 0, 0, 1,).is_global(), false);\n+    ///\n+    /// // Addresses reserved for documentation (`2001:db8::/32`)\n+    /// assert_eq!(Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 1).is_global(), false);\n+    ///\n+    /// // Unique local addresses (`fc00::/7`)\n+    /// assert_eq!(Ipv6Addr::new(0xfc02, 0, 0, 0, 0, 0, 0, 1).is_global(), false);\n+    ///\n+    /// // Unicast addresses with link-local scope (`fe80::/10`)\n+    /// assert_eq!(Ipv6Addr::new(0xfe81, 0, 0, 0, 0, 0, 0, 1).is_global(), false);\n+    ///\n+    /// // For a complete overview see the IANA IPv6 Special-Purpose Address Registry.\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[must_use]\n     #[inline]\n     pub const fn is_global(&self) -> bool {\n-        match self.multicast_scope() {\n-            Some(Ipv6MulticastScope::Global) => true,\n-            None => self.is_unicast_global(),\n-            _ => false,\n-        }\n+        !(self.is_unspecified()\n+            || self.is_loopback()\n+            // IPv4-mapped Address (`::ffff:0:0/96`)\n+            || matches!(self.segments(), [0, 0, 0, 0, 0, 0xffff, _, _])\n+            // IPv4-IPv6 Translat. (`64:ff9b:1::/48`)\n+            || matches!(self.segments(), [0x64, 0xff9b, 1, _, _, _, _, _])\n+            // Discard-Only Address Block (`100::/64`)\n+            || matches!(self.segments(), [0x100, 0, 0, 0, _, _, _, _])\n+            // IETF Protocol Assignments (`2001::/23`)\n+            || (matches!(self.segments(), [0x2001, b, _, _, _, _, _, _] if b < 0x200)\n+                && !(\n+                    // Port Control Protocol Anycast (`2001:1::1`)\n+                    u128::from_be_bytes(self.octets()) == 0x2001_0001_0000_0000_0000_0000_0000_0001\n+                    // Traversal Using Relays around NAT Anycast (`2001:1::2`)\n+                    || u128::from_be_bytes(self.octets()) == 0x2001_0001_0000_0000_0000_0000_0000_0002\n+                    // AMT (`2001:3::/32`)\n+                    || matches!(self.segments(), [0x2001, 3, _, _, _, _, _, _])\n+                    // AS112-v6 (`2001:4:112::/48`)\n+                    || matches!(self.segments(), [0x2001, 4, 0x112, _, _, _, _, _])\n+                    // ORCHIDv2 (`2001:20::/28`)\n+                    || matches!(self.segments(), [0x2001, b, _, _, _, _, _, _] if b >= 0x20 && b <= 0x2F)\n+                ))\n+            || self.is_documentation()\n+            || self.is_unique_local()\n+            || self.is_unicast_link_local())\n     }\n \n     /// Returns [`true`] if this is a unique local address (`fc00::/7`)."}, {"sha": "0311efa862532e4713f91d7c6f5a3a0c122e9c1b", "filename": "library/std/src/net/ip/tests.rs", "status": "modified", "additions": 88, "deletions": 12, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/f7d8805a47f9b670403b43f056a96d3d4cc4fdc6/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d8805a47f9b670403b43f056a96d3d4cc4fdc6/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs?ref=f7d8805a47f9b670403b43f056a96d3d4cc4fdc6", "patch": "@@ -321,12 +321,12 @@ fn ip_properties() {\n     check!(\"fe80:ffff::\");\n     check!(\"febf:ffff::\");\n     check!(\"fec0::\", global);\n-    check!(\"ff01::\", multicast);\n-    check!(\"ff02::\", multicast);\n-    check!(\"ff03::\", multicast);\n-    check!(\"ff04::\", multicast);\n-    check!(\"ff05::\", multicast);\n-    check!(\"ff08::\", multicast);\n+    check!(\"ff01::\", global | multicast);\n+    check!(\"ff02::\", global | multicast);\n+    check!(\"ff03::\", global | multicast);\n+    check!(\"ff04::\", global | multicast);\n+    check!(\"ff05::\", global | multicast);\n+    check!(\"ff08::\", global | multicast);\n     check!(\"ff0e::\", global | multicast);\n     check!(\"2001:db8:85a3::8a2e:370:7334\", doc);\n     check!(\"2001:2::ac32:23ff:21\", global | benchmarking);\n@@ -609,6 +609,60 @@ fn ipv6_properties() {\n \n     check!(\"1::\", &[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], global | unicast_global);\n \n+    check!(\n+        \"::ffff:127.0.0.1\",\n+        &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff, 0x7f, 0, 0, 1],\n+        unicast_global\n+    );\n+\n+    check!(\n+        \"64:ff9b:1::\",\n+        &[0, 0x64, 0xff, 0x9b, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        unicast_global\n+    );\n+\n+    check!(\"100::\", &[0x01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], unicast_global);\n+\n+    check!(\"2001::\", &[0x20, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], unicast_global);\n+\n+    check!(\n+        \"2001:1::1\",\n+        &[0x20, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n+        global | unicast_global\n+    );\n+\n+    check!(\n+        \"2001:1::2\",\n+        &[0x20, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2],\n+        global | unicast_global\n+    );\n+\n+    check!(\n+        \"2001:3::\",\n+        &[0x20, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        global | unicast_global\n+    );\n+\n+    check!(\n+        \"2001:4:112::\",\n+        &[0x20, 1, 0, 4, 1, 0x12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        global | unicast_global\n+    );\n+\n+    check!(\n+        \"2001:20::\",\n+        &[0x20, 1, 0, 0x20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        global | unicast_global\n+    );\n+\n+    check!(\"2001:30::\", &[0x20, 1, 0, 0x30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], unicast_global);\n+\n+    check!(\n+        \"2001:200::\",\n+        &[0x20, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        global | unicast_global\n+    );\n+\n     check!(\"fc00::\", &[0xfc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], unique_local);\n \n     check!(\n@@ -666,21 +720,37 @@ fn ipv6_properties() {\n     check!(\n         \"ff01::\",\n         &[0xff, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        multicast_interface_local\n+        multicast_interface_local | global\n     );\n \n-    check!(\"ff02::\", &[0xff, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], multicast_link_local);\n+    check!(\n+        \"ff02::\",\n+        &[0xff, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        multicast_link_local | global\n+    );\n \n-    check!(\"ff03::\", &[0xff, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], multicast_realm_local);\n+    check!(\n+        \"ff03::\",\n+        &[0xff, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        multicast_realm_local | global\n+    );\n \n-    check!(\"ff04::\", &[0xff, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], multicast_admin_local);\n+    check!(\n+        \"ff04::\",\n+        &[0xff, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        multicast_admin_local | global\n+    );\n \n-    check!(\"ff05::\", &[0xff, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], multicast_site_local);\n+    check!(\n+        \"ff05::\",\n+        &[0xff, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n+        multicast_site_local | global\n+    );\n \n     check!(\n         \"ff08::\",\n         &[0xff, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n-        multicast_organization_local\n+        multicast_organization_local | global\n     );\n \n     check!(\n@@ -689,6 +759,12 @@ fn ipv6_properties() {\n         multicast_global | global\n     );\n \n+    check!(\n+        \"2001:2::ac32:23ff:21\",\n+        &[0x20, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0xac, 0x32, 0x23, 0xff, 0, 0x21],\n+        unicast_global\n+    );\n+\n     check!(\n         \"2001:db8:85a3::8a2e:370:7334\",\n         &[0x20, 1, 0xd, 0xb8, 0x85, 0xa3, 0, 0, 0, 0, 0x8a, 0x2e, 3, 0x70, 0x73, 0x34],"}]}