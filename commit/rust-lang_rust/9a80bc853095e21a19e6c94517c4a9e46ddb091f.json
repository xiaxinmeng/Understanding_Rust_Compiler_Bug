{"sha": "9a80bc853095e21a19e6c94517c4a9e46ddb091f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhODBiYzg1MzA5NWUyMWExOWU2Yzk0NTE3YzRhOWU0NmRkYjA5MWY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-22T17:45:47Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-22T17:45:47Z"}, "message": "Correctly output links for primitive types which enclose their contents", "tree": {"sha": "6e84e29463c1d469bced5306e23c0f0716946725", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e84e29463c1d469bced5306e23c0f0716946725"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a80bc853095e21a19e6c94517c4a9e46ddb091f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a80bc853095e21a19e6c94517c4a9e46ddb091f", "html_url": "https://github.com/rust-lang/rust/commit/9a80bc853095e21a19e6c94517c4a9e46ddb091f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a80bc853095e21a19e6c94517c4a9e46ddb091f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd1b845492e13ae9e0da382dc0ec09d676d2dd59", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd1b845492e13ae9e0da382dc0ec09d676d2dd59", "html_url": "https://github.com/rust-lang/rust/commit/cd1b845492e13ae9e0da382dc0ec09d676d2dd59"}], "stats": {"total": 31, "additions": 22, "deletions": 9}, "files": [{"sha": "2381895bda2f49a4224202bd071622554f954497", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9a80bc853095e21a19e6c94517c4a9e46ddb091f/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a80bc853095e21a19e6c94517c4a9e46ddb091f/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=9a80bc853095e21a19e6c94517c4a9e46ddb091f", "patch": "@@ -456,23 +456,36 @@ impl fmt::Display for clean::Type {\n                        decl.decl)\n             }\n             clean::Tuple(ref typs) => {\n-                primitive_link(f, clean::PrimitiveTuple,\n-                               &*match &**typs {\n-                                    [ref one] => format!(\"({},)\", one),\n-                                    many => format!(\"({})\", CommaSep(&many)),\n-                               })\n+                match &**typs {\n+                    [] => primitive_link(f, clean::PrimitiveTuple, \"()\"),\n+                    [ref one] => {\n+                        try!(primitive_link(f, clean::PrimitiveTuple, \"(\"));\n+                        try!(write!(f, \"{}\", one));\n+                        primitive_link(f, clean::PrimitiveTuple, \")\")\n+                    }\n+                    many => {\n+                        try!(primitive_link(f, clean::PrimitiveTuple, \"(\"));\n+                        try!(write!(f, \"{}\", CommaSep(&many)));\n+                        primitive_link(f, clean::PrimitiveTuple, \")\")\n+                    }\n+                }\n             }\n             clean::Vector(ref t) => {\n-                primitive_link(f, clean::Slice, &format!(\"[{}]\", **t))\n+                try!(primitive_link(f, clean::Slice, &format!(\"[\")));\n+                try!(write!(f, \"{}\", t));\n+                primitive_link(f, clean::Slice, &format!(\"]\"))\n             }\n             clean::FixedVector(ref t, ref s) => {\n+                try!(primitive_link(f, clean::PrimitiveType::Array, \"[\"));\n+                try!(write!(f, \"{}\", t));\n                 primitive_link(f, clean::PrimitiveType::Array,\n-                               &format!(\"[{}; {}]\", **t, *s))\n+                               &format!(\"; {}]\", *s))\n             }\n             clean::Bottom => f.write_str(\"!\"),\n             clean::RawPointer(m, ref t) => {\n-                primitive_link(f, clean::PrimitiveType::PrimitiveRawPointer,\n-                               &format!(\"*{}{}\", RawMutableSpace(m), **t))\n+                try!(primitive_link(f, clean::PrimitiveType::PrimitiveRawPointer,\n+                                    &format!(\"*{}\", RawMutableSpace(m))));\n+                write!(f, \"{}\", t)\n             }\n             clean::BorrowedRef{ lifetime: ref l, mutability, type_: ref ty} => {\n                 let lt = match *l {"}]}