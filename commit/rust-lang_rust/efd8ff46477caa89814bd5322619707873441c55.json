{"sha": "efd8ff46477caa89814bd5322619707873441c55", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZDhmZjQ2NDc3Y2FhODk4MTRiZDUzMjI2MTk3MDc4NzM0NDFjNTU=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-06-21T23:32:27Z"}, "committer": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-06-21T23:35:21Z"}, "message": "Comments for all the anon obj tests.", "tree": {"sha": "4c615bde5676b94de43afedee8a2b46a76803f7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c615bde5676b94de43afedee8a2b46a76803f7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efd8ff46477caa89814bd5322619707873441c55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efd8ff46477caa89814bd5322619707873441c55", "html_url": "https://github.com/rust-lang/rust/commit/efd8ff46477caa89814bd5322619707873441c55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efd8ff46477caa89814bd5322619707873441c55/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fb35ecf84c3fd5f92c2af287d478eb70cbacdbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fb35ecf84c3fd5f92c2af287d478eb70cbacdbd", "html_url": "https://github.com/rust-lang/rust/commit/7fb35ecf84c3fd5f92c2af287d478eb70cbacdbd"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "d534bd6db1345ccb3ce5fe9c4a259d9cb84528a4", "filename": "src/test/run-pass/anon-obj-degenerate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efd8ff46477caa89814bd5322619707873441c55/src%2Ftest%2Frun-pass%2Fanon-obj-degenerate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd8ff46477caa89814bd5322619707873441c55/src%2Ftest%2Frun-pass%2Fanon-obj-degenerate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-obj-degenerate.rs?ref=efd8ff46477caa89814bd5322619707873441c55", "patch": "@@ -19,8 +19,10 @@ fn main() {\n     // methods or fields.  Adding support for this is issue #539.\n     // (Making this work will also ensure that calls to anonymous\n     // objects \"fall through\" appropriately.)\n+\n     auto my_d = obj() { with my_a };\n \n+    // Right now, this fails with \"unknown method 'foo' of obj\".\n     assert (my_d.foo() == 2);\n     assert (my_d.bar() == 2);\n "}, {"sha": "343abc540229df44e425931a6f906257b6e851ea", "filename": "src/test/run-pass/anon-obj-overloading.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/efd8ff46477caa89814bd5322619707873441c55/src%2Ftest%2Frun-pass%2Fanon-obj-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd8ff46477caa89814bd5322619707873441c55/src%2Ftest%2Frun-pass%2Fanon-obj-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-obj-overloading.rs?ref=efd8ff46477caa89814bd5322619707873441c55", "patch": "@@ -30,5 +30,11 @@ fn main() {\n \n     // The tricky part -- have to be sure to tie the knot in the right\n     // place, so that bar() knows about the new foo().\n+\n+    // Right now, this just fails with \"unknown method 'bar' of obj\",\n+    // but that's the easier of our worries; that'll be fixed when\n+    // issue #539 is fixed.  The bigger problem will be when we do\n+    // 'fall through' to bar() on the original object -- then we have\n+    // to be sure that self refers to the extended object.\n     assert (my_b.bar() == 3);\n }"}, {"sha": "f5ab8e2ce68c5ad83791455f6783805f7683c15a", "filename": "src/test/run-pass/anon-obj-with-self-call.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/efd8ff46477caa89814bd5322619707873441c55/src%2Ftest%2Frun-pass%2Fanon-obj-with-self-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd8ff46477caa89814bd5322619707873441c55/src%2Ftest%2Frun-pass%2Fanon-obj-with-self-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-obj-with-self-call.rs?ref=efd8ff46477caa89814bd5322619707873441c55", "patch": "@@ -17,13 +17,16 @@ fn main() {\n \n     // Extending an object with a new method that contains a simple\n     // self-call.  Adding support for this is issue #540.\n+\n+    // Right now, this fails with a failed lookup in a hashmap; not\n+    // sure where, but I think it might be during typeck.\n     auto my_b = obj { \n         fn baz() -> int { \n             ret self.foo(); \n         } \n         with my_a \n     };\n \n-    assert (my_b.baz() == 2);\n+    assert my_b.baz() == 2);\n \n }"}, {"sha": "c4521926848abe3e76e33ac1d4227acdc37f13a1", "filename": "src/test/run-pass/anon-objs-with-fields.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efd8ff46477caa89814bd5322619707873441c55/src%2Ftest%2Frun-pass%2Fanon-objs-with-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd8ff46477caa89814bd5322619707873441c55/src%2Ftest%2Frun-pass%2Fanon-objs-with-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-objs-with-fields.rs?ref=efd8ff46477caa89814bd5322619707873441c55", "patch": "@@ -17,6 +17,8 @@ fn main() {\n \n     // Extending an object with a new field.  Adding support for this\n     // is issue #538.\n+\n+    // Right now, this fails with \"unresolved name: quux\".\n     auto my_c = obj(int quux = 3) {\n         fn baz() -> int {\n             ret quux + 4;"}]}