{"sha": "88c70edef66b6885dec6aa8f7a4e73eff2b745ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4YzcwZWRlZjY2YjY4ODVkZWM2YWE4ZjdhNGU3M2VmZjJiNzQ1ZWY=", "commit": {"author": {"name": "Paul Dicker", "email": "pitdicker@gmail.com", "date": "2019-10-23T08:10:36Z"}, "committer": {"name": "Paul Dicker", "email": "pitdicker@gmail.com", "date": "2019-10-24T15:57:05Z"}, "message": "In Waiter use interior mutability for thread", "tree": {"sha": "df38c657b77707f35eb9240737c9e6ef3176edef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df38c657b77707f35eb9240737c9e6ef3176edef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88c70edef66b6885dec6aa8f7a4e73eff2b745ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88c70edef66b6885dec6aa8f7a4e73eff2b745ef", "html_url": "https://github.com/rust-lang/rust/commit/88c70edef66b6885dec6aa8f7a4e73eff2b745ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88c70edef66b6885dec6aa8f7a4e73eff2b745ef/comments", "author": {"login": "pitdicker", "id": 6255050, "node_id": "MDQ6VXNlcjYyNTUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6255050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitdicker", "html_url": "https://github.com/pitdicker", "followers_url": "https://api.github.com/users/pitdicker/followers", "following_url": "https://api.github.com/users/pitdicker/following{/other_user}", "gists_url": "https://api.github.com/users/pitdicker/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitdicker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitdicker/subscriptions", "organizations_url": "https://api.github.com/users/pitdicker/orgs", "repos_url": "https://api.github.com/users/pitdicker/repos", "events_url": "https://api.github.com/users/pitdicker/events{/privacy}", "received_events_url": "https://api.github.com/users/pitdicker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pitdicker", "id": 6255050, "node_id": "MDQ6VXNlcjYyNTUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6255050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitdicker", "html_url": "https://github.com/pitdicker", "followers_url": "https://api.github.com/users/pitdicker/followers", "following_url": "https://api.github.com/users/pitdicker/following{/other_user}", "gists_url": "https://api.github.com/users/pitdicker/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitdicker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitdicker/subscriptions", "organizations_url": "https://api.github.com/users/pitdicker/orgs", "repos_url": "https://api.github.com/users/pitdicker/repos", "events_url": "https://api.github.com/users/pitdicker/events{/privacy}", "received_events_url": "https://api.github.com/users/pitdicker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b8da9ccd528d46637c88a40f6cdd0d634c0fb22", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b8da9ccd528d46637c88a40f6cdd0d634c0fb22", "html_url": "https://github.com/rust-lang/rust/commit/4b8da9ccd528d46637c88a40f6cdd0d634c0fb22"}], "stats": {"total": 28, "additions": 19, "deletions": 9}, "files": [{"sha": "ef8a95eed272c70cc8a37e4648c02c8cb469bc57", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/88c70edef66b6885dec6aa8f7a4e73eff2b745ef/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c70edef66b6885dec6aa8f7a4e73eff2b745ef/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=88c70edef66b6885dec6aa8f7a4e73eff2b745ef", "patch": "@@ -52,6 +52,7 @@\n // You'll find a few more details in the implementation, but that's the gist of\n // it!\n \n+use crate::cell::Cell;\n use crate::fmt;\n use crate::marker;\n use crate::ptr;\n@@ -132,9 +133,14 @@ const COMPLETE: usize = 0x3;\n // this is in the RUNNING state.\n const STATE_MASK: usize = 0x3;\n \n-// Representation of a node in the linked list of waiters in the RUNNING state.\n+// Representation of a node in the linked list of waiters, used while in the\n+// RUNNING state.\n+// Note: `Waiter` can't hold a mutable pointer to the next thread, because then\n+// `wait` would both hand out a mutable reference to its `Waiter` node, and keep\n+// a shared reference to check `signaled`. Instead we hold shared references and\n+// use interior mutability.\n struct Waiter {\n-    thread: Thread,\n+    thread: Cell<Option<Thread>>,\n     signaled: AtomicBool,\n     next: *const Waiter,\n }\n@@ -400,7 +406,7 @@ fn wait(state_and_queue: &AtomicUsize, current_state: usize) {\n     // Create the node for our current thread that we are going to try to slot\n     // in at the head of the linked list.\n     let mut node = Waiter {\n-        thread: thread::current(),\n+        thread: Cell::new(Some(thread::current())),\n         signaled: AtomicBool::new(false),\n         next: ptr::null(),\n     };\n@@ -453,18 +459,22 @@ impl Drop for WaiterQueue<'_> {\n         // We should only ever see an old state which was RUNNING.\n         assert_eq!(state_and_queue & STATE_MASK, RUNNING);\n \n-        // Decode the RUNNING to a list of waiters, then walk that entire list\n-        // and wake them up. Note that it is crucial that after we store `true`\n-        // in the node it can be free'd! As a result we load the `thread` to\n-        // signal ahead of time and then unpark it after the store.\n+        // Walk the entire linked list of waiters and wake them up (in lifo\n+        // order, last to register is first to wake up).\n         unsafe {\n+            // Right after setting `node.signaled = true` the other thread may\n+            // free `node` if there happens to be has a spurious wakeup.\n+            // So we have to take out the `thread` field and copy the pointer to\n+            // `next` first.\n             let mut queue = (state_and_queue & !STATE_MASK) as *const Waiter;\n             while !queue.is_null() {\n                 let next = (*queue).next;\n-                let thread = (*queue).thread.clone();\n+                let thread = (*queue).thread.replace(None).unwrap();\n                 (*queue).signaled.store(true, Ordering::SeqCst);\n-                thread.unpark();\n+                // ^- FIXME (maybe): This is another case of issue #55005\n+                // `store()` has a potentially dangling ref to `signaled`.\n                 queue = next;\n+                thread.unpark();\n             }\n         }\n     }"}]}