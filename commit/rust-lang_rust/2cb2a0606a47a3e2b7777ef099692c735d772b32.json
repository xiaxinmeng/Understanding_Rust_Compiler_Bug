{"sha": "2cb2a0606a47a3e2b7777ef099692c735d772b32", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjYjJhMDYwNmE0N2EzZTJiNzc3N2VmMDk5NjkyYzczNWQ3NzJiMzI=", "commit": {"author": {"name": "Federico Mena Quintero", "email": "federico@gnome.org", "date": "2017-09-25T01:12:51Z"}, "committer": {"name": "Federico Mena Quintero", "email": "federico@gnome.org", "date": "2017-09-25T18:51:48Z"}, "message": "Overhaul the ffi::CStr documentation.", "tree": {"sha": "a7d5bcfabb31ed895073b2881403a21716e3844a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7d5bcfabb31ed895073b2881403a21716e3844a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cb2a0606a47a3e2b7777ef099692c735d772b32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cb2a0606a47a3e2b7777ef099692c735d772b32", "html_url": "https://github.com/rust-lang/rust/commit/2cb2a0606a47a3e2b7777ef099692c735d772b32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cb2a0606a47a3e2b7777ef099692c735d772b32/comments", "author": {"login": "federicomenaquintero", "id": 7617, "node_id": "MDQ6VXNlcjc2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/7617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/federicomenaquintero", "html_url": "https://github.com/federicomenaquintero", "followers_url": "https://api.github.com/users/federicomenaquintero/followers", "following_url": "https://api.github.com/users/federicomenaquintero/following{/other_user}", "gists_url": "https://api.github.com/users/federicomenaquintero/gists{/gist_id}", "starred_url": "https://api.github.com/users/federicomenaquintero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/federicomenaquintero/subscriptions", "organizations_url": "https://api.github.com/users/federicomenaquintero/orgs", "repos_url": "https://api.github.com/users/federicomenaquintero/repos", "events_url": "https://api.github.com/users/federicomenaquintero/events{/privacy}", "received_events_url": "https://api.github.com/users/federicomenaquintero/received_events", "type": "User", "site_admin": false}, "committer": {"login": "federicomenaquintero", "id": 7617, "node_id": "MDQ6VXNlcjc2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/7617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/federicomenaquintero", "html_url": "https://github.com/federicomenaquintero", "followers_url": "https://api.github.com/users/federicomenaquintero/followers", "following_url": "https://api.github.com/users/federicomenaquintero/following{/other_user}", "gists_url": "https://api.github.com/users/federicomenaquintero/gists{/gist_id}", "starred_url": "https://api.github.com/users/federicomenaquintero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/federicomenaquintero/subscriptions", "organizations_url": "https://api.github.com/users/federicomenaquintero/orgs", "repos_url": "https://api.github.com/users/federicomenaquintero/repos", "events_url": "https://api.github.com/users/federicomenaquintero/events{/privacy}", "received_events_url": "https://api.github.com/users/federicomenaquintero/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8da694a42138ac74047d989abd3c7daf0edcbe93", "url": "https://api.github.com/repos/rust-lang/rust/commits/8da694a42138ac74047d989abd3c7daf0edcbe93", "html_url": "https://github.com/rust-lang/rust/commit/8da694a42138ac74047d989abd3c7daf0edcbe93"}], "stats": {"total": 76, "additions": 46, "deletions": 30}, "files": [{"sha": "a10d0a4214bdfa5066dc4c4c30996364229388e1", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 46, "deletions": 30, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/2cb2a0606a47a3e2b7777ef099692c735d772b32/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb2a0606a47a3e2b7777ef099692c735d772b32/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=2cb2a0606a47a3e2b7777ef099692c735d772b32", "patch": "@@ -128,17 +128,21 @@ pub struct CString {\n \n /// Representation of a borrowed C string.\n ///\n-/// This dynamically sized type is only safely constructed via a borrowed\n-/// version of an instance of `CString`. This type can be constructed from a raw\n-/// C string as well and represents a C string borrowed from another location.\n+/// This type represents a borrowed reference to a nul-terminated\n+/// array of bytes.  It can be constructed safely from a `&[`[`u8`]`]`\n+/// slice, or unsafely from a raw `*const c_char`.  It can then be\n+/// converted to a Rust [`&str`] by performing UTF-8 validation, or\n+/// into an owned [`CString`].\n+///\n+/// `CStr` is to [`CString`] as [`&str`] is to [`String`]: the former\n+/// in each pair are borrowed references; the latter are owned\n+/// strings.\n ///\n /// Note that this structure is **not** `repr(C)` and is not recommended to be\n-/// placed in the signatures of FFI functions. Instead safe wrappers of FFI\n+/// placed in the signatures of FFI functions. Instead, safe wrappers of FFI\n /// functions may leverage the unsafe [`from_ptr`] constructor to provide a safe\n /// interface to other consumers.\n ///\n-/// [`from_ptr`]: #method.from_ptr\n-///\n /// # Examples\n ///\n /// Inspecting a foreign C string:\n@@ -151,7 +155,7 @@ pub struct CString {\n ///\n /// unsafe {\n ///     let slice = CStr::from_ptr(my_string());\n-///     println!(\"string length: {}\", slice.to_bytes().len());\n+///     println!(\"string buffer size without nul terminator: {}\", slice.to_bytes().len());\n /// }\n /// ```\n ///\n@@ -173,8 +177,6 @@ pub struct CString {\n ///\n /// Converting a foreign C string into a Rust [`String`]:\n ///\n-/// [`String`]: ../string/struct.String.html\n-///\n /// ```no_run\n /// use std::ffi::CStr;\n /// use std::os::raw::c_char;\n@@ -189,6 +191,12 @@ pub struct CString {\n ///\n /// println!(\"string: {}\", my_string_safe());\n /// ```\n+///\n+/// [`u8`]: ../primitive.u8.html\n+/// [`&str`]: ../primitive.str.html\n+/// [`String`]: ../string/struct.String.html\n+/// [`CString`]: struct.CString.html\n+/// [`from_ptr`]: #method.from_ptr\n #[derive(Hash)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct CStr {\n@@ -215,8 +223,10 @@ pub struct CStr {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct NulError(usize, Vec<u8>);\n \n-/// An error returned from [`CStr::from_bytes_with_nul`] to indicate that a nul\n-/// byte was found too early in the slice provided or one wasn't found at all.\n+/// An error returned from [`CStr::from_bytes_with_nul`] to indicate\n+/// that a nul byte was found too early in the slice provided, or one\n+/// wasn't found at all.  The slice used to create a `CStr` must have one\n+/// and only one nul byte at the end of the slice.\n ///\n /// [`CStr::from_bytes_with_nul`]: struct.CStr.html#method.from_bytes_with_nul\n ///\n@@ -795,9 +805,9 @@ impl fmt::Display for IntoStringError {\n }\n \n impl CStr {\n-    /// Casts a raw C string to a safe C string wrapper.\n+    /// Wraps a raw C string with a safe C string wrapper.\n     ///\n-    /// This function will cast the provided `ptr` to the `CStr` wrapper which\n+    /// This function will wrap the provided `ptr` with a `CStr` wrapper, which\n     /// allows inspection and interoperation of non-owned C strings. This method\n     /// is unsafe for a number of reasons:\n     ///\n@@ -837,9 +847,9 @@ impl CStr {\n \n     /// Creates a C string wrapper from a byte slice.\n     ///\n-    /// This function will cast the provided `bytes` to a `CStr` wrapper after\n-    /// ensuring that it is null terminated and does not contain any interior\n-    /// nul bytes.\n+    /// This function will cast the provided `bytes` to a `CStr`\n+    /// wrapper after ensuring that the byte slice is nul-terminated\n+    /// and does not contain any interior nul bytes.\n     ///\n     /// # Examples\n     ///\n@@ -884,7 +894,7 @@ impl CStr {\n     /// Unsafely creates a C string wrapper from a byte slice.\n     ///\n     /// This function will cast the provided `bytes` to a `CStr` wrapper without\n-    /// performing any sanity checks. The provided slice must be null terminated\n+    /// performing any sanity checks. The provided slice **must** be nul-terminated\n     /// and not contain any interior nul bytes.\n     ///\n     /// # Examples\n@@ -906,7 +916,7 @@ impl CStr {\n \n     /// Returns the inner pointer to this C string.\n     ///\n-    /// The returned pointer will be valid for as long as `self` is and points\n+    /// The returned pointer will be valid for as long as `self` is, and points\n     /// to a contiguous region of memory terminated with a 0 byte to represent\n     /// the end of the string.\n     ///\n@@ -927,9 +937,9 @@ impl CStr {\n     /// ```\n     ///\n     /// This happens because the pointer returned by `as_ptr` does not carry any\n-    /// lifetime information and the string is deallocated immediately after\n+    /// lifetime information and the [`CString`] is deallocated immediately after\n     /// the `CString::new(\"Hello\").unwrap().as_ptr()` expression is evaluated.\n-    /// To fix the problem, bind the string to a local variable:\n+    /// To fix the problem, bind the `CString` to a local variable:\n     ///\n     /// ```no_run\n     /// use std::ffi::{CString};\n@@ -941,6 +951,11 @@ impl CStr {\n     ///     *ptr;\n     /// }\n     /// ```\n+    ///\n+    /// This way, the lifetime of the `CString` in `hello` encompasses\n+    /// the lifetime of `ptr` and the `unsafe` block.\n+    ///\n+    /// [`CString`]: struct.CString.html\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_ptr(&self) -> *const c_char {\n@@ -949,10 +964,6 @@ impl CStr {\n \n     /// Converts this C string to a byte slice.\n     ///\n-    /// This function will calculate the length of this string (which normally\n-    /// requires a linear amount of work to be done) and then return the\n-    /// resulting slice of `u8` elements.\n-    ///\n     /// The returned slice will **not** contain the trailing nul terminator that this C\n     /// string has.\n     ///\n@@ -1002,8 +1013,9 @@ impl CStr {\n \n     /// Yields a [`&str`] slice if the `CStr` contains valid UTF-8.\n     ///\n-    /// This function will calculate the length of this string and check for\n-    /// UTF-8 validity, and then return the [`&str`] if it's valid.\n+    /// If the contents of the `CStr` are valid UTF-8 data, this\n+    /// function will return the corresponding [`&str`] slice.  Otherwise,\n+    /// it will return an error with details of where UTF-8 validation failed.\n     ///\n     /// > **Note**: This method is currently implemented to check for validity\n     /// > after a 0-cost cast, but it is planned to alter its definition in the\n@@ -1031,18 +1043,22 @@ impl CStr {\n \n     /// Converts a `CStr` into a [`Cow`]`<`[`str`]`>`.\n     ///\n-    /// This function will calculate the length of this string (which normally\n-    /// requires a linear amount of work to be done) and then return the\n-    /// resulting slice as a [`Cow`]`<`[`str`]`>`, replacing any invalid UTF-8 sequences\n-    /// with `U+FFFD REPLACEMENT CHARACTER`.\n+    /// If the contents of the `CStr` are valid UTF-8 data, this\n+    /// function will return a [`Cow`]`::`[`Borrowed`]`(`[`&str`]`)`\n+    /// with the the corresponding [`&str`] slice.  Otherwise, it will\n+    /// replace any invalid UTF-8 sequences with `U+FFFD REPLACEMENT\n+    /// CHARACTER` and return a [`Cow`]`::`[`Owned`]`(`[`String`]`)`\n+    /// with the result.\n     ///\n     /// > **Note**: This method is currently implemented to check for validity\n     /// > after a 0-cost cast, but it is planned to alter its definition in the\n     /// > future to perform the length calculation in addition to the UTF-8\n     /// > check whenever this method is called.\n     ///\n     /// [`Cow`]: ../borrow/enum.Cow.html\n+    /// [`Borrowed`]: ../borrow/enum.Cow.html#variant.Borrowed\n     /// [`str`]: ../primitive.str.html\n+    /// [`String`]: ../string/struct.String.html\n     ///\n     /// # Examples\n     ///"}]}