{"sha": "87f864292def92dc8e2fe4782c4e8cce0db0fb0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3Zjg2NDI5MmRlZjkyZGM4ZTJmZTQ3ODJjNGU4Y2NlMGRiMGZiMGE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-03-07T23:37:05Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-03-08T14:54:20Z"}, "message": "std: Remove uses of DVec", "tree": {"sha": "2df1117df66e2b1d2873076b6f8db86e054a6195", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2df1117df66e2b1d2873076b6f8db86e054a6195"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87f864292def92dc8e2fe4782c4e8cce0db0fb0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87f864292def92dc8e2fe4782c4e8cce0db0fb0a", "html_url": "https://github.com/rust-lang/rust/commit/87f864292def92dc8e2fe4782c4e8cce0db0fb0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87f864292def92dc8e2fe4782c4e8cce0db0fb0a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ccb0e63c5d1372f970f592b2d0b531ce591a63d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ccb0e63c5d1372f970f592b2d0b531ce591a63d", "html_url": "https://github.com/rust-lang/rust/commit/7ccb0e63c5d1372f970f592b2d0b531ce591a63d"}], "stats": {"total": 137, "additions": 78, "deletions": 59}, "files": [{"sha": "b117834238f4b2cd3bdc9727c212b24f242d1c9c", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/87f864292def92dc8e2fe4782c4e8cce0db0fb0a/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87f864292def92dc8e2fe4782c4e8cce0db0fb0a/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=87f864292def92dc8e2fe4782c4e8cce0db0fb0a", "patch": "@@ -452,12 +452,13 @@ pub mod flatteners {\n \n     pub fn serialize_value<D: Encoder + FromWriter,\n                            T: Encodable<D>>(val: &T) -> ~[u8] {\n-        let bytes_writer = @BytesWriter();\n-        let writer = bytes_writer as @Writer;\n+        let mut bytes_writer = BytesWriter();\n+        let writer = @bytes_writer as @Writer;\n         let ser = FromWriter::from_writer(writer);\n         val.encode(&ser);\n-        let bytes = bytes_writer.bytes.check_out(|bytes| bytes);\n-        return bytes;\n+        let mut ret = ~[];\n+        ret <-> bytes_writer.bytes;\n+        return ret;\n     }\n \n     pub trait FromReader {"}, {"sha": "6506d8e3c41a66d4c156a0ca051b66de07eb76d2", "filename": "src/libstd/json.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/87f864292def92dc8e2fe4782c4e8cce0db0fb0a/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87f864292def92dc8e2fe4782c4e8cce0db0fb0a/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=87f864292def92dc8e2fe4782c4e8cce0db0fb0a", "patch": "@@ -27,7 +27,6 @@ use core::prelude::*;\n use core::hashmap::linear::LinearMap;\n use core::str;\n use core::to_str;\n-use core::vec;\n \n /// Represents a json value\n pub enum Json {"}, {"sha": "50de528762f26e716dcc553140ee0ccb6c2db6fa", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 46, "deletions": 54, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/87f864292def92dc8e2fe4782c4e8cce0db0fb0a/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87f864292def92dc8e2fe4782c4e8cce0db0fb0a/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=87f864292def92dc8e2fe4782c4e8cce0db0fb0a", "patch": "@@ -11,7 +11,6 @@\n //! Sorting methods\n \n use core::cmp::{Eq, Ord};\n-use core::dvec::DVec;\n use core::prelude::*;\n use core::util;\n use core::vec::{len, push};\n@@ -189,7 +188,7 @@ pub fn tim_sort<T:Copy + Ord>(array: &mut [T]) {\n         return;\n     }\n \n-    let ms = &MergeState();\n+    let mut ms = MergeState();\n     let min_run = min_run_length(size);\n \n     let mut idx = 0;\n@@ -392,66 +391,63 @@ struct RunState {\n }\n \n struct MergeState<T> {\n-    mut min_gallop: uint,\n-    runs: DVec<RunState>,\n+    min_gallop: uint,\n+    runs: ~[RunState],\n }\n \n // Fixme (#3853) Move into MergeState\n fn MergeState<T>() -> MergeState<T> {\n     MergeState {\n         min_gallop: MIN_GALLOP,\n-        runs: DVec(),\n+        runs: ~[],\n     }\n }\n \n-pub impl<T:Copy + Ord> MergeState<T> {\n-    fn push_run(&self, run_base: uint, run_len: uint) {\n+impl<T:Copy + Ord> MergeState<T> {\n+    fn push_run(&mut self, run_base: uint, run_len: uint) {\n         let tmp = RunState{base: run_base, len: run_len};\n         self.runs.push(tmp);\n     }\n \n-    fn merge_at(&self, n: uint, array: &mut [T]) {\n+    fn merge_at(&mut self, n: uint, array: &mut [T]) {\n         let mut size = self.runs.len();\n         fail_unless!(size >= 2);\n         fail_unless!(n == size-2 || n == size-3);\n \n-        do self.runs.borrow_mut |arr| {\n+        let mut b1 = self.runs[n].base;\n+        let mut l1 = self.runs[n].len;\n+        let b2 = self.runs[n+1].base;\n+        let l2 = self.runs[n+1].len;\n \n-            let mut b1 = arr[n].base;\n-            let mut l1 = arr[n].len;\n-            let b2 = arr[n+1].base;\n-            let l2 = arr[n+1].len;\n+        fail_unless!(l1 > 0 && l2 > 0);\n+        fail_unless!(b1 + l1 == b2);\n \n-            fail_unless!(l1 > 0 && l2 > 0);\n-            fail_unless!(b1 + l1 == b2);\n-\n-            arr[n].len = l1 + l2;\n-            if n == size-3 {\n-                arr[n+1].base = arr[n+2].base;\n-                arr[n+1].len = arr[n+2].len;\n-            }\n+        self.runs[n].len = l1 + l2;\n+        if n == size-3 {\n+            self.runs[n+1].base = self.runs[n+2].base;\n+            self.runs[n+1].len = self.runs[n+2].len;\n+        }\n \n-            let slice = vec::mut_slice(array, b1, b1+l1);\n-            let k = gallop_right(&const array[b2], slice, 0);\n-            b1 += k;\n-            l1 -= k;\n-            if l1 != 0 {\n-                let slice = vec::mut_slice(array, b2, b2+l2);\n-                let l2 = gallop_left(\n-                    &const array[b1+l1-1],slice,l2-1);\n-                if l2 > 0 {\n-                    if l1 <= l2 {\n-                        self.merge_lo(array, b1, l1, b2, l2);\n-                    } else {\n-                        self.merge_hi(array, b1, l1, b2, l2);\n-                    }\n+        let slice = vec::mut_slice(array, b1, b1+l1);\n+        let k = gallop_right(&const array[b2], slice, 0);\n+        b1 += k;\n+        l1 -= k;\n+        if l1 != 0 {\n+            let slice = vec::mut_slice(array, b2, b2+l2);\n+            let l2 = gallop_left(\n+                &const array[b1+l1-1],slice,l2-1);\n+            if l2 > 0 {\n+                if l1 <= l2 {\n+                    self.merge_lo(array, b1, l1, b2, l2);\n+                } else {\n+                    self.merge_hi(array, b1, l1, b2, l2);\n                 }\n             }\n         }\n         self.runs.pop();\n     }\n \n-    fn merge_lo(&self, array: &mut [T], base1: uint, len1: uint,\n+    fn merge_lo(&mut self, array: &mut [T], base1: uint, len1: uint,\n                 base2: uint, len2: uint) {\n         fail_unless!(len1 != 0 && len2 != 0 && base1+len1 == base2);\n \n@@ -554,7 +550,7 @@ pub impl<T:Copy + Ord> MergeState<T> {\n         }\n     }\n \n-    fn merge_hi(&self, array: &mut [T], base1: uint, len1: uint,\n+    fn merge_hi(&mut self, array: &mut [T], base1: uint, len1: uint,\n                 base2: uint, len2: uint) {\n         fail_unless!(len1 != 1 && len2 != 0 && base1 + len1 == base2);\n \n@@ -672,32 +668,28 @@ pub impl<T:Copy + Ord> MergeState<T> {\n         }\n     }\n \n-    fn merge_collapse(&self, array: &mut [T]) {\n+    fn merge_collapse(&mut self, array: &mut [T]) {\n         while self.runs.len() > 1 {\n             let mut n = self.runs.len()-2;\n-            let chk = do self.runs.borrow |arr| {\n-                if n > 0 && arr[n-1].len <= arr[n].len + arr[n+1].len {\n-                    if arr[n-1].len < arr[n+1].len { n -= 1; }\n-                    true\n-                } else if arr[n].len <= arr[n+1].len {\n-                    true\n-                } else {\n-                    false\n-                }\n-            };\n-            if !chk { break; }\n+            if n > 0 &&\n+                self.runs[n-1].len <= self.runs[n].len + self.runs[n+1].len\n+            {\n+                if self.runs[n-1].len < self.runs[n+1].len { n -= 1; }\n+            } else if self.runs[n].len <= self.runs[n+1].len {\n+                /* keep going */\n+            } else {\n+                break;\n+            }\n             self.merge_at(n, array);\n         }\n     }\n \n-    fn merge_force_collapse(&self, array: &mut [T]) {\n+    fn merge_force_collapse(&mut self, array: &mut [T]) {\n         while self.runs.len() > 1 {\n             let mut n = self.runs.len()-2;\n             if n > 0 {\n-                do self.runs.borrow |arr| {\n-                    if arr[n-1].len < arr[n+1].len {\n-                        n -= 1;\n-                    }\n+                if self.runs[n-1].len < self.runs[n+1].len {\n+                    n -= 1;\n                 }\n             }\n             self.merge_at(n, array);"}, {"sha": "ea8edf5156a63ae2378f0d57d4efde992f3fbcf1", "filename": "src/test/run-pass/issue-5275", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/87f864292def92dc8e2fe4782c4e8cce0db0fb0a/src%2Ftest%2Frun-pass%2Fissue-5275", "raw_url": "https://github.com/rust-lang/rust/raw/87f864292def92dc8e2fe4782c4e8cce0db0fb0a/src%2Ftest%2Frun-pass%2Fissue-5275", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5275?ref=87f864292def92dc8e2fe4782c4e8cce0db0fb0a"}, {"sha": "a1b93d99f281406499b6f1146695b3bc4752288f", "filename": "src/test/run-pass/issue-5275.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/87f864292def92dc8e2fe4782c4e8cce0db0fb0a/src%2Ftest%2Frun-pass%2Fissue-5275.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87f864292def92dc8e2fe4782c4e8cce0db0fb0a/src%2Ftest%2Frun-pass%2Fissue-5275.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5275.rs?ref=87f864292def92dc8e2fe4782c4e8cce0db0fb0a", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo(self: &A) -> int {\n+    if true {\n+        fail!()\n+    } else {\n+        *bar(self.bar)\n+    }\n+}\n+\n+pub fn main() {}\n+\n+fn bar(_: &r/mut int) -> &r/int {\n+    fail!()\n+}\n+\n+struct A {\n+  bar: @mut int,\n+}"}]}