{"sha": "70dbf35712888e035a9a8ffdc91315725303b12f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZGJmMzU3MTI4ODhlMDM1YTlhOGZmZGM5MTMxNTcyNTMwM2IxMmY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-31T09:11:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-31T09:11:53Z"}, "message": "Merge #10092\n\n10092: feat: Improve `extract_struct_from_enum_variant` output r=matklad a=DropDemBits\n\nImproves the struct generated by `extract_struct_from_enum_variant`.\r\n\r\nSummary of changes:\r\n\r\n- Indent the generated struct and enum to the same indent level\r\n- Preserve comments & attributes from the enum variant (something I missed when doing the same thing for the variant fields)\r\n- Use enum's visibility for fields without any visibility, instead of filling it in with `pub`\n\nCo-authored-by: DropDemBits <r3usrlnd@gmail.com>", "tree": {"sha": "66ba4d705e31250c8dd842af61c33e59b0343292", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66ba4d705e31250c8dd842af61c33e59b0343292"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70dbf35712888e035a9a8ffdc91315725303b12f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhLfJZCRBK7hj4Ov3rIwAAwzkIADxNA/aZZZKko0Z9utVgHwD+\nale+s2HnWrWp/WnbLs5wJ2GgXnaia4igmpOastMNIsPrLdQfAjQKmfWG4KsdHKhU\naeHb/UQq9a4eU7o2mbNlZgu2gyxVMTS6mrbD7ZBcliulkdBJJhOmGb8gaWPWqLUz\nlLR0Fcimlj3zal7CZCcuhGdbxCDPZwmqix/uj/eLPs0fGXRGJ8cXvduUIuJ1hYmw\nnjApDa5W37RH1ND6CTBpKGtI/f3whY4Q3NXOon2IZOBTXvu3Ep/YJM8cjA9ZfJVV\n01eApE/m+Ul6QWBc4lMI3ubf+OFusSttSNlgNCRXBiAk9rPtS8BXrORcLbUPEa0=\n=EwXv\n-----END PGP SIGNATURE-----\n", "payload": "tree 66ba4d705e31250c8dd842af61c33e59b0343292\nparent 20f3792d10bd92605b7e9c2677c87868eb8089d9\nparent 3bafb5f0253c2f9f96adba111dbe96dbd482ba36\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1630401113 +0000\ncommitter GitHub <noreply@github.com> 1630401113 +0000\n\nMerge #10092\n\n10092: feat: Improve `extract_struct_from_enum_variant` output r=matklad a=DropDemBits\n\nImproves the struct generated by `extract_struct_from_enum_variant`.\r\n\r\nSummary of changes:\r\n\r\n- Indent the generated struct and enum to the same indent level\r\n- Preserve comments & attributes from the enum variant (something I missed when doing the same thing for the variant fields)\r\n- Use enum's visibility for fields without any visibility, instead of filling it in with `pub`\n\nCo-authored-by: DropDemBits <r3usrlnd@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70dbf35712888e035a9a8ffdc91315725303b12f", "html_url": "https://github.com/rust-lang/rust/commit/70dbf35712888e035a9a8ffdc91315725303b12f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70dbf35712888e035a9a8ffdc91315725303b12f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20f3792d10bd92605b7e9c2677c87868eb8089d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/20f3792d10bd92605b7e9c2677c87868eb8089d9", "html_url": "https://github.com/rust-lang/rust/commit/20f3792d10bd92605b7e9c2677c87868eb8089d9"}, {"sha": "3bafb5f0253c2f9f96adba111dbe96dbd482ba36", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bafb5f0253c2f9f96adba111dbe96dbd482ba36", "html_url": "https://github.com/rust-lang/rust/commit/3bafb5f0253c2f9f96adba111dbe96dbd482ba36"}], "stats": {"total": 300, "additions": 240, "deletions": 60}, "files": [{"sha": "961158811034dfaba2bb8413f48aab4fe8a4b9d2", "filename": "crates/ide_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 239, "deletions": 59, "changes": 298, "blob_url": "https://github.com/rust-lang/rust/blob/70dbf35712888e035a9a8ffdc91315725303b12f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70dbf35712888e035a9a8ffdc91315725303b12f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=70dbf35712888e035a9a8ffdc91315725303b12f", "patch": "@@ -15,11 +15,12 @@ use itertools::Itertools;\n use rustc_hash::FxHashSet;\n use syntax::{\n     ast::{\n-        self, make, AstNode, AttrsOwner, GenericParamsOwner, NameOwner, TypeBoundsOwner,\n-        VisibilityOwner,\n+        self, edit::IndentLevel, edit_in_place::Indent, make, AstNode, AttrsOwner,\n+        GenericParamsOwner, NameOwner, TypeBoundsOwner, VisibilityOwner,\n     },\n     match_ast,\n     ted::{self, Position},\n+    SyntaxKind::*,\n     SyntaxNode, T,\n };\n \n@@ -34,7 +35,7 @@ use crate::{assist_context::AssistBuilder, AssistContext, AssistId, AssistKind,\n // ```\n // ->\n // ```\n-// struct One(pub u32, pub u32);\n+// struct One(u32, u32);\n //\n // enum A { One(One) }\n // ```\n@@ -89,6 +90,7 @@ pub(crate) fn extract_struct_from_enum_variant(\n                 });\n             }\n             builder.edit_file(ctx.frange.file_id);\n+\n             let variant = builder.make_mut(variant.clone());\n             if let Some(references) = def_file_references {\n                 let processed = process_references(\n@@ -104,10 +106,18 @@ pub(crate) fn extract_struct_from_enum_variant(\n                 });\n             }\n \n-            let def = create_struct_def(variant_name.clone(), &field_list, &enum_ast);\n+            let indent = enum_ast.indent_level();\n+            let def = create_struct_def(variant_name.clone(), &variant, &field_list, &enum_ast);\n+            def.reindent_to(indent);\n+\n             let start_offset = &variant.parent_enum().syntax().clone();\n-            ted::insert_raw(ted::Position::before(start_offset), def.syntax());\n-            ted::insert_raw(ted::Position::before(start_offset), &make::tokens::blank_line());\n+            ted::insert_all_raw(\n+                ted::Position::before(start_offset),\n+                vec![\n+                    def.syntax().clone().into(),\n+                    make::tokens::whitespace(&format!(\"\\n\\n{}\", indent)).into(),\n+                ],\n+            );\n \n             update_variant(&variant, enum_ast.generic_param_list());\n         },\n@@ -152,48 +162,81 @@ fn existing_definition(db: &RootDatabase, variant_name: &ast::Name, variant: &Va\n \n fn create_struct_def(\n     variant_name: ast::Name,\n+    variant: &ast::Variant,\n     field_list: &Either<ast::RecordFieldList, ast::TupleFieldList>,\n     enum_: &ast::Enum,\n ) -> ast::Struct {\n-    let pub_vis = make::visibility_pub();\n+    let enum_vis = enum_.visibility();\n \n-    let insert_pub = |node: &'_ SyntaxNode| {\n-        let pub_vis = pub_vis.clone_for_update();\n-        ted::insert(ted::Position::before(node), pub_vis.syntax());\n+    let insert_vis = |node: &'_ SyntaxNode, vis: &'_ SyntaxNode| {\n+        let vis = vis.clone_for_update();\n+        ted::insert(ted::Position::before(node), vis);\n     };\n \n-    // for fields without any existing visibility, use pub visibility\n-    let field_list = match field_list {\n+    // for fields without any existing visibility, use visibility of enum\n+    let field_list: ast::FieldList = match field_list {\n         Either::Left(field_list) => {\n             let field_list = field_list.clone_for_update();\n \n-            field_list\n-                .fields()\n-                .filter(|field| field.visibility().is_none())\n-                .filter_map(|field| field.name())\n-                .for_each(|it| insert_pub(it.syntax()));\n+            if let Some(vis) = &enum_vis {\n+                field_list\n+                    .fields()\n+                    .filter(|field| field.visibility().is_none())\n+                    .filter_map(|field| field.name())\n+                    .for_each(|it| insert_vis(it.syntax(), vis.syntax()));\n+            }\n \n             field_list.into()\n         }\n         Either::Right(field_list) => {\n             let field_list = field_list.clone_for_update();\n \n-            field_list\n-                .fields()\n-                .filter(|field| field.visibility().is_none())\n-                .filter_map(|field| field.ty())\n-                .for_each(|it| insert_pub(it.syntax()));\n+            if let Some(vis) = &enum_vis {\n+                field_list\n+                    .fields()\n+                    .filter(|field| field.visibility().is_none())\n+                    .filter_map(|field| field.ty())\n+                    .for_each(|it| insert_vis(it.syntax(), vis.syntax()));\n+            }\n \n             field_list.into()\n         }\n     };\n \n+    field_list.reindent_to(IndentLevel::single());\n+\n     // FIXME: This uses all the generic params of the enum, but the variant might not use all of them.\n-    let strukt =\n-        make::struct_(enum_.visibility(), variant_name, enum_.generic_param_list(), field_list)\n-            .clone_for_update();\n+    let strukt = make::struct_(enum_vis, variant_name, enum_.generic_param_list(), field_list)\n+        .clone_for_update();\n+\n+    // FIXME: Consider making this an actual function somewhere (like in `AttrsOwnerEdit`) after some deliberation\n+    let attrs_and_docs = |node: &SyntaxNode| {\n+        let mut select_next_ws = false;\n+        node.children_with_tokens().filter(move |child| {\n+            let accept = match child.kind() {\n+                ATTR | COMMENT => {\n+                    select_next_ws = true;\n+                    return true;\n+                }\n+                WHITESPACE if select_next_ws => true,\n+                _ => false,\n+            };\n+            select_next_ws = false;\n \n-    // copy attributes\n+            accept\n+        })\n+    };\n+\n+    // copy attributes & comments from variant\n+    let variant_attrs = attrs_and_docs(variant.syntax())\n+        .map(|tok| match tok.kind() {\n+            WHITESPACE => make::tokens::single_newline().into(),\n+            _ => tok.into(),\n+        })\n+        .collect();\n+    ted::insert_all(Position::first_child_of(strukt.syntax()), variant_attrs);\n+\n+    // copy attributes from enum\n     ted::insert_all(\n         Position::first_child_of(strukt.syntax()),\n         enum_.attrs().map(|it| it.syntax().clone_for_update().into()).collect(),\n@@ -310,7 +353,7 @@ mod tests {\n         check_assist(\n             extract_struct_from_enum_variant,\n             \"enum A { $0One(u32, u32) }\",\n-            r#\"struct One(pub u32, pub u32);\n+            r#\"struct One(u32, u32);\n \n enum A { One(One) }\"#,\n         );\n@@ -321,7 +364,7 @@ enum A { One(One) }\"#,\n         check_assist(\n             extract_struct_from_enum_variant,\n             \"enum A { $0One { foo: u32, bar: u32 } }\",\n-            r#\"struct One{ pub foo: u32, pub bar: u32 }\n+            r#\"struct One{ foo: u32, bar: u32 }\n \n enum A { One(One) }\"#,\n         );\n@@ -332,7 +375,7 @@ enum A { One(One) }\"#,\n         check_assist(\n             extract_struct_from_enum_variant,\n             \"enum A { $0One { foo: u32 } }\",\n-            r#\"struct One{ pub foo: u32 }\n+            r#\"struct One{ foo: u32 }\n \n enum A { One(One) }\"#,\n         );\n@@ -343,7 +386,7 @@ enum A { One(One) }\"#,\n         check_assist(\n             extract_struct_from_enum_variant,\n             r\"enum En<T> { Var { a: T$0 } }\",\n-            r#\"struct Var<T>{ pub a: T }\n+            r#\"struct Var<T>{ a: T }\n \n enum En<T> { Var(Var<T>) }\"#,\n         );\n@@ -356,14 +399,60 @@ enum En<T> { Var(Var<T>) }\"#,\n             r#\"#[derive(Debug)]\n #[derive(Clone)]\n enum Enum { Variant{ field: u32$0 } }\"#,\n-            r#\"#[derive(Debug)]#[derive(Clone)] struct Variant{ pub field: u32 }\n+            r#\"#[derive(Debug)]#[derive(Clone)] struct Variant{ field: u32 }\n \n #[derive(Debug)]\n #[derive(Clone)]\n enum Enum { Variant(Variant) }\"#,\n         );\n     }\n \n+    #[test]\n+    fn test_extract_struct_indent_to_parent_enum() {\n+        check_assist(\n+            extract_struct_from_enum_variant,\n+            r#\"\n+enum Enum {\n+    Variant {\n+        field: u32$0\n+    }\n+}\"#,\n+            r#\"\n+struct Variant{\n+    field: u32\n+}\n+\n+enum Enum {\n+    Variant(Variant)\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_extract_struct_indent_to_parent_enum_in_mod() {\n+        check_assist(\n+            extract_struct_from_enum_variant,\n+            r#\"\n+mod indenting {\n+    enum Enum {\n+        Variant {\n+            field: u32$0\n+        }\n+    }\n+}\"#,\n+            r#\"\n+mod indenting {\n+    struct Variant{\n+        field: u32\n+    }\n+\n+    enum Enum {\n+        Variant(Variant)\n+    }\n+}\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_extract_struct_keep_comments_and_attrs_one_field_named() {\n         check_assist(\n@@ -380,12 +469,12 @@ enum A {\n }\"#,\n             r#\"\n struct One{\n-        // leading comment\n-        /// doc comment\n-        #[an_attr]\n-        pub foo: u32\n-        // trailing comment\n-    }\n+    // leading comment\n+    /// doc comment\n+    #[an_attr]\n+    foo: u32\n+    // trailing comment\n+}\n \n enum A {\n     One(One)\n@@ -412,15 +501,15 @@ enum A {\n }\"#,\n             r#\"\n struct One{\n-        // comment\n-        /// doc\n-        #[attr]\n-        pub foo: u32,\n-        // comment\n-        #[attr]\n-        /// doc\n-        pub bar: u32\n-    }\n+    // comment\n+    /// doc\n+    #[attr]\n+    foo: u32,\n+    // comment\n+    #[attr]\n+    /// doc\n+    bar: u32\n+}\n \n enum A {\n     One(One)\n@@ -434,19 +523,73 @@ enum A {\n             extract_struct_from_enum_variant,\n             \"enum A { $0One(/* comment */ #[attr] u32, /* another */ u32 /* tail */) }\",\n             r#\"\n-struct One(/* comment */ #[attr] pub u32, /* another */ pub u32 /* tail */);\n+struct One(/* comment */ #[attr] u32, /* another */ u32 /* tail */);\n \n enum A { One(One) }\"#,\n         );\n     }\n \n+    #[test]\n+    fn test_extract_struct_keep_comments_and_attrs_on_variant_struct() {\n+        check_assist(\n+            extract_struct_from_enum_variant,\n+            r#\"\n+enum A {\n+    /* comment */\n+    // other\n+    /// comment\n+    #[attr]\n+    $0One {\n+        a: u32\n+    }\n+}\"#,\n+            r#\"\n+/* comment */\n+// other\n+/// comment\n+#[attr]\n+struct One{\n+    a: u32\n+}\n+\n+enum A {\n+    One(One)\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_extract_struct_keep_comments_and_attrs_on_variant_tuple() {\n+        check_assist(\n+            extract_struct_from_enum_variant,\n+            r#\"\n+enum A {\n+    /* comment */\n+    // other\n+    /// comment\n+    #[attr]\n+    $0One(u32, u32)\n+}\"#,\n+            r#\"\n+/* comment */\n+// other\n+/// comment\n+#[attr]\n+struct One(u32, u32);\n+\n+enum A {\n+    One(One)\n+}\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_extract_struct_keep_existing_visibility_named() {\n         check_assist(\n             extract_struct_from_enum_variant,\n-            \"enum A { $0One{ pub a: u32, pub(crate) b: u32, pub(super) c: u32, d: u32 } }\",\n+            \"enum A { $0One{ a: u32, pub(crate) b: u32, pub(super) c: u32, d: u32 } }\",\n             r#\"\n-struct One{ pub a: u32, pub(crate) b: u32, pub(super) c: u32, pub d: u32 }\n+struct One{ a: u32, pub(crate) b: u32, pub(super) c: u32, d: u32 }\n \n enum A { One(One) }\"#,\n         );\n@@ -456,9 +599,9 @@ enum A { One(One) }\"#,\n     fn test_extract_struct_keep_existing_visibility_tuple() {\n         check_assist(\n             extract_struct_from_enum_variant,\n-            \"enum A { $0One(pub u32, pub(crate) u32, pub(super) u32, u32) }\",\n+            \"enum A { $0One(u32, pub(crate) u32, pub(super) u32, u32) }\",\n             r#\"\n-struct One(pub u32, pub(crate) u32, pub(super) u32, pub u32);\n+struct One(u32, pub(crate) u32, pub(super) u32, u32);\n \n enum A { One(One) }\"#,\n         );\n@@ -471,7 +614,19 @@ enum A { One(One) }\"#,\n             r#\"const One: () = ();\n enum A { $0One(u32, u32) }\"#,\n             r#\"const One: () = ();\n-struct One(pub u32, pub u32);\n+struct One(u32, u32);\n+\n+enum A { One(One) }\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_extract_struct_no_visibility() {\n+        check_assist(\n+            extract_struct_from_enum_variant,\n+            \"enum A { $0One(u32, u32) }\",\n+            r#\"\n+struct One(u32, u32);\n \n enum A { One(One) }\"#,\n         );\n@@ -482,12 +637,37 @@ enum A { One(One) }\"#,\n         check_assist(\n             extract_struct_from_enum_variant,\n             \"pub enum A { $0One(u32, u32) }\",\n-            r#\"pub struct One(pub u32, pub u32);\n+            r#\"\n+pub struct One(pub u32, pub u32);\n \n pub enum A { One(One) }\"#,\n         );\n     }\n \n+    #[test]\n+    fn test_extract_struct_pub_in_mod_visibility() {\n+        check_assist(\n+            extract_struct_from_enum_variant,\n+            \"pub(in something) enum A { $0One{ a: u32, b: u32 } }\",\n+            r#\"\n+pub(in something) struct One{ pub(in something) a: u32, pub(in something) b: u32 }\n+\n+pub(in something) enum A { One(One) }\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_extract_struct_pub_crate_visibility() {\n+        check_assist(\n+            extract_struct_from_enum_variant,\n+            \"pub(crate) enum A { $0One{ a: u32, b: u32, c: u32 } }\",\n+            r#\"\n+pub(crate) struct One{ pub(crate) a: u32, pub(crate) b: u32, pub(crate) c: u32 }\n+\n+pub(crate) enum A { One(One) }\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_extract_struct_with_complex_imports() {\n         check_assist(\n@@ -527,7 +707,7 @@ mod my_mod {\n \n         pub struct MyField(pub u8, pub u8);\n \n-pub enum MyEnum {\n+        pub enum MyEnum {\n             MyField(MyField),\n         }\n     }\n@@ -553,7 +733,7 @@ fn f() {\n }\n \"#,\n             r#\"\n-struct V{ pub i: i32, pub j: i32 }\n+struct V{ i: i32, j: i32 }\n \n enum E {\n     V(V)\n@@ -580,7 +760,7 @@ fn f() {\n }\n \"#,\n             r#\"\n-struct V(pub i32, pub i32);\n+struct V(i32, i32);\n \n enum E {\n     V(V)\n@@ -612,7 +792,7 @@ fn f() {\n \"#,\n             r#\"\n //- /main.rs\n-struct V(pub i32, pub i32);\n+struct V(i32, i32);\n \n enum E {\n     V(V)\n@@ -647,7 +827,7 @@ fn f() {\n \"#,\n             r#\"\n //- /main.rs\n-struct V{ pub i: i32, pub j: i32 }\n+struct V{ i: i32, j: i32 }\n \n enum E {\n     V(V)\n@@ -677,7 +857,7 @@ fn foo() {\n }\n \"#,\n             r#\"\n-struct One{ pub a: u32, pub b: u32 }\n+struct One{ a: u32, b: u32 }\n \n enum A { One(One) }\n "}, {"sha": "28f74321dac1458039c3ab56f5b720d341b2bdac", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70dbf35712888e035a9a8ffdc91315725303b12f/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70dbf35712888e035a9a8ffdc91315725303b12f/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=70dbf35712888e035a9a8ffdc91315725303b12f", "patch": "@@ -448,7 +448,7 @@ fn doctest_extract_struct_from_enum_variant() {\n enum A { $0One(u32, u32) }\n \"#####,\n         r#####\"\n-struct One(pub u32, pub u32);\n+struct One(u32, u32);\n \n enum A { One(One) }\n \"#####,"}]}