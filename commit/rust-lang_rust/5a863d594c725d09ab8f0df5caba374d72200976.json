{"sha": "5a863d594c725d09ab8f0df5caba374d72200976", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhODYzZDU5NGM3MjVkMDlhYjhmMGRmNWNhYmEzNzRkNzIyMDA5NzY=", "commit": {"author": {"name": "Theodore Luo Wang", "email": "wangtheo662@gmail.com", "date": "2021-09-01T15:54:06Z"}, "committer": {"name": "Theodore Luo Wang", "email": "wangtheo662@gmail.com", "date": "2021-09-01T15:54:06Z"}, "message": "Add checks for a block before a unary plus. Fix failing tests", "tree": {"sha": "d28a9a6e49f245fe04115c05df353464723e0912", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d28a9a6e49f245fe04115c05df353464723e0912"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a863d594c725d09ab8f0df5caba374d72200976", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a863d594c725d09ab8f0df5caba374d72200976", "html_url": "https://github.com/rust-lang/rust/commit/5a863d594c725d09ab8f0df5caba374d72200976", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a863d594c725d09ab8f0df5caba374d72200976/comments", "author": {"login": "theo-lw", "id": 28904678, "node_id": "MDQ6VXNlcjI4OTA0Njc4", "avatar_url": "https://avatars.githubusercontent.com/u/28904678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theo-lw", "html_url": "https://github.com/theo-lw", "followers_url": "https://api.github.com/users/theo-lw/followers", "following_url": "https://api.github.com/users/theo-lw/following{/other_user}", "gists_url": "https://api.github.com/users/theo-lw/gists{/gist_id}", "starred_url": "https://api.github.com/users/theo-lw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theo-lw/subscriptions", "organizations_url": "https://api.github.com/users/theo-lw/orgs", "repos_url": "https://api.github.com/users/theo-lw/repos", "events_url": "https://api.github.com/users/theo-lw/events{/privacy}", "received_events_url": "https://api.github.com/users/theo-lw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "theo-lw", "id": 28904678, "node_id": "MDQ6VXNlcjI4OTA0Njc4", "avatar_url": "https://avatars.githubusercontent.com/u/28904678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theo-lw", "html_url": "https://github.com/theo-lw", "followers_url": "https://api.github.com/users/theo-lw/followers", "following_url": "https://api.github.com/users/theo-lw/following{/other_user}", "gists_url": "https://api.github.com/users/theo-lw/gists{/gist_id}", "starred_url": "https://api.github.com/users/theo-lw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theo-lw/subscriptions", "organizations_url": "https://api.github.com/users/theo-lw/orgs", "repos_url": "https://api.github.com/users/theo-lw/repos", "events_url": "https://api.github.com/users/theo-lw/events{/privacy}", "received_events_url": "https://api.github.com/users/theo-lw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7fb98e7258557034f0d0caf81a53b0070a87297", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7fb98e7258557034f0d0caf81a53b0070a87297", "html_url": "https://github.com/rust-lang/rust/commit/e7fb98e7258557034f0d0caf81a53b0070a87297"}], "stats": {"total": 126, "additions": 73, "deletions": 53}, "files": [{"sha": "c887f9fe0cf59041358aea0bae0522533b223deb", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5a863d594c725d09ab8f0df5caba374d72200976/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a863d594c725d09ab8f0df5caba374d72200976/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=5a863d594c725d09ab8f0df5caba374d72200976", "patch": "@@ -165,18 +165,24 @@ impl<'a> Parser<'a> {\n             if [token::DotDot, token::DotDotDot, token::DotDotEq].contains(&self.token.kind) {\n                 return self.parse_prefix_range_expr(attrs);\n             } else {\n-                self.parse_prefix_expr(attrs)?\n+                let result = self.parse_prefix_expr(attrs);\n+                debug!(\"parse_prefix_expr result: {:?}\", &result);\n+                result?\n             }\n         };\n+        debug!(\"parse_assoc_expr_with(lhs = {:?})\", &lhs);\n         let last_type_ascription_set = self.last_type_ascription.is_some();\n \n         if !self.should_continue_as_assoc_expr(&lhs) {\n             self.last_type_ascription = None;\n             return Ok(lhs);\n         }\n \n+        debug!(\"continue_as_assoc_expr\");\n+\n         self.expected_tokens.push(TokenType::Operator);\n         while let Some(op) = self.check_assoc_op() {\n+            debug!(\"op: {:?}\", op);\n             // Adjust the span for interpolated LHS to point to the `$lhs` token\n             // and not to what it refers to.\n             let lhs_span = match self.prev_token.kind {\n@@ -520,17 +526,25 @@ impl<'a> Parser<'a> {\n                 make_it!(this, attrs, |this, _| this.parse_borrow_expr(lo))\n             }\n             token::BinOp(token::Plus) => {\n-                this.struct_span_err(lo, \"leading `+` is not supported\")\n-                    .span_label(lo, \"unexpected `+`\")\n-                    .span_suggestion_short(\n+                debug!(\"leading + detected: {:?}\", lo);\n+                let mut err = this.struct_span_err(lo, \"leading `+` is not supported\");\n+                err.span_label(lo, \"unexpected `+`\");\n+\n+                // a block on the LHS might have been intended to be an expression instead\n+                let sp = this.sess.source_map().start_point(lo);\n+                if let Some(sp) = this.sess.ambiguous_block_expr_parse.borrow().get(&sp) {\n+                    this.sess.expr_parentheses_needed(&mut err, *sp);\n+                } else {\n+                   err.span_suggestion(\n                         lo,\n-                        \"remove the `+`\",\n+                        \"try removing the `+`\",\n                         \"\".to_string(),\n                         Applicability::MachineApplicable,\n-                    )\n-                    .emit();\n-                this.bump();\n+                    );\n+                }\n+                err.emit();\n \n+                this.bump();\n                 this.parse_prefix_expr(None)\n             } // `+expr`\n             token::Ident(..) if this.token.is_keyword(kw::Box) => {"}, {"sha": "329b60f9a87116ce4504bdb194f615b64151393f", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a863d594c725d09ab8f0df5caba374d72200976/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a863d594c725d09ab8f0df5caba374d72200976/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=5a863d594c725d09ab8f0df5caba374d72200976", "patch": "@@ -21,6 +21,8 @@ use rustc_span::symbol::{kw, sym};\n \n use std::mem;\n \n+use tracing::debug;\n+\n impl<'a> Parser<'a> {\n     /// Parses a statement. This stops just before trailing semicolons on everything but items.\n     /// e.g., a `StmtKind::Semi` parses to a `StmtKind::Expr`, leaving the trailing `;` unconsumed.\n@@ -418,6 +420,7 @@ impl<'a> Parser<'a> {\n             if self.token == token::Eof {\n                 break;\n             }\n+            debug!(\"parsing statements, stmts: {:?}\", &stmts);\n             let stmt = match self.parse_full_stmt(recover) {\n                 Err(mut err) if recover.yes() => {\n                     self.maybe_annotate_with_ascription(&mut err, false);"}, {"sha": "990ef09e3f7428ae64e0b5c726eb057a5d7088dd", "filename": "src/test/ui/associated-types/issue-36499.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5a863d594c725d09ab8f0df5caba374d72200976/src%2Ftest%2Fui%2Fassociated-types%2Fissue-36499.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a863d594c725d09ab8f0df5caba374d72200976/src%2Ftest%2Fui%2Fassociated-types%2Fissue-36499.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-36499.stderr?ref=5a863d594c725d09ab8f0df5caba374d72200976", "patch": "@@ -1,8 +1,11 @@\n-error: expected expression, found `+`\n+error: leading `+` is not supported\n   --> $DIR/issue-36499.rs:4:9\n    |\n LL |     2 + +2;\n-   |         ^ expected expression\n+   |         ^\n+   |         |\n+   |         unexpected `+`\n+   |         help: try removing the `+`\n \n error: aborting due to previous error\n "}, {"sha": "79d73090a042017ea6d6cac1b937c21440c528d2", "filename": "src/test/ui/parser/expr-as-stmt.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a863d594c725d09ab8f0df5caba374d72200976/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5a863d594c725d09ab8f0df5caba374d72200976/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed?ref=5a863d594c725d09ab8f0df5caba374d72200976", "patch": "@@ -5,18 +5,18 @@\n #![allow(unused_must_use)]\n \n fn foo() -> i32 {\n-    ({2}) + {2} //~ ERROR expected expression, found `+`\n+    ({2}) + {2} //~ ERROR leading `+` is not supported\n     //~^ ERROR mismatched types\n }\n \n fn bar() -> i32 {\n-    ({2}) + 2 //~ ERROR expected expression, found `+`\n+    ({2}) + 2 //~ ERROR leading `+` is not supported\n     //~^ ERROR mismatched types\n }\n \n fn zul() -> u32 {\n     let foo = 3;\n-    ({ 42 }) + foo; //~ ERROR expected expression, found `+`\n+    ({ 42 }) + foo; //~ ERROR leading `+` is not supported\n     //~^ ERROR mismatched types\n     32\n }"}, {"sha": "8698f99b81a410fd4aa294672f0931d5bfd5af8e", "filename": "src/test/ui/parser/expr-as-stmt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a863d594c725d09ab8f0df5caba374d72200976/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a863d594c725d09ab8f0df5caba374d72200976/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs?ref=5a863d594c725d09ab8f0df5caba374d72200976", "patch": "@@ -5,18 +5,18 @@\n #![allow(unused_must_use)]\n \n fn foo() -> i32 {\n-    {2} + {2} //~ ERROR expected expression, found `+`\n+    {2} + {2} //~ ERROR leading `+` is not supported\n     //~^ ERROR mismatched types\n }\n \n fn bar() -> i32 {\n-    {2} + 2 //~ ERROR expected expression, found `+`\n+    {2} + 2 //~ ERROR leading `+` is not supported\n     //~^ ERROR mismatched types\n }\n \n fn zul() -> u32 {\n     let foo = 3;\n-    { 42 } + foo; //~ ERROR expected expression, found `+`\n+    { 42 } + foo; //~ ERROR leading `+` is not supported\n     //~^ ERROR mismatched types\n     32\n }"}, {"sha": "91f97c4662a97d490d7448ad2682e69391d7b311", "filename": "src/test/ui/parser/expr-as-stmt.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a863d594c725d09ab8f0df5caba374d72200976/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a863d594c725d09ab8f0df5caba374d72200976/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr?ref=5a863d594c725d09ab8f0df5caba374d72200976", "patch": "@@ -1,30 +1,30 @@\n-error: expected expression, found `+`\n+error: leading `+` is not supported\n   --> $DIR/expr-as-stmt.rs:8:9\n    |\n LL |     {2} + {2}\n-   |         ^ expected expression\n+   |         ^ unexpected `+`\n    |\n help: parentheses are required to parse this as an expression\n    |\n LL |     ({2}) + {2}\n    |     +   +\n \n-error: expected expression, found `+`\n+error: leading `+` is not supported\n   --> $DIR/expr-as-stmt.rs:13:9\n    |\n LL |     {2} + 2\n-   |         ^ expected expression\n+   |         ^ unexpected `+`\n    |\n help: parentheses are required to parse this as an expression\n    |\n LL |     ({2}) + 2\n    |     +   +\n \n-error: expected expression, found `+`\n+error: leading `+` is not supported\n   --> $DIR/expr-as-stmt.rs:19:12\n    |\n LL |     { 42 } + foo;\n-   |            ^ expected expression\n+   |            ^ unexpected `+`\n    |\n help: parentheses are required to parse this as an expression\n    |"}, {"sha": "279cdb5060a42bde5923ba5450c7152233fd0a6a", "filename": "src/test/ui/parser/issue-88276-unary-plus.fixed", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a863d594c725d09ab8f0df5caba374d72200976/src%2Ftest%2Fui%2Fparser%2Fissue-88276-unary-plus.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5a863d594c725d09ab8f0df5caba374d72200976/src%2Ftest%2Fui%2Fparser%2Fissue-88276-unary-plus.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-88276-unary-plus.fixed?ref=5a863d594c725d09ab8f0df5caba374d72200976", "patch": "@@ -3,10 +3,10 @@\n fn main() {\n     let _ = 1; //~ ERROR leading `+` is not supported\n     let _ = -(1+2)*3; //~ ERROR leading `+` is not supported\n-    let _ = -(1+2)*3; //~ ERROR leading `+` is not supported\n-                        //~| ERROR leading `+` is not supported\n     let _ = --(1+2)*3; //~ ERROR leading `+` is not supported\n                          //~| ERROR leading `+` is not supported\n+    let _ = (1 + 2) * 3; //~ ERROR leading `+` is not supported\n+                           //~| ERROR leading `+` is not supported\n     let _ = (&\"hello\"); //~ ERROR leading `+` is not supported\n     let _ = [3, 4+6]; //~ ERROR leading `+` is not supported\n                         //~| ERROR leading `+` is not supported", "previous_filename": "src/test/ui/did_you_mean/issue-88276-unary-plus.fixed"}, {"sha": "a72dad4dc71989a55ad078e54a4407a5f61e7bfe", "filename": "src/test/ui/parser/issue-88276-unary-plus.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a863d594c725d09ab8f0df5caba374d72200976/src%2Ftest%2Fui%2Fparser%2Fissue-88276-unary-plus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a863d594c725d09ab8f0df5caba374d72200976/src%2Ftest%2Fui%2Fparser%2Fissue-88276-unary-plus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-88276-unary-plus.rs?ref=5a863d594c725d09ab8f0df5caba374d72200976", "patch": "@@ -3,10 +3,10 @@\n fn main() {\n     let _ = +1; //~ ERROR leading `+` is not supported\n     let _ = -+(1+2)*3; //~ ERROR leading `+` is not supported\n-    let _ = +-+(1+2)*3; //~ ERROR leading `+` is not supported\n-                        //~| ERROR leading `+` is not supported\n     let _ = -+-+(1+2)*3; //~ ERROR leading `+` is not supported\n                          //~| ERROR leading `+` is not supported\n+    let _ = (1 + +2) * +3; //~ ERROR leading `+` is not supported\n+                           //~| ERROR leading `+` is not supported\n     let _ = (+&\"hello\"); //~ ERROR leading `+` is not supported\n     let _ = +[+3, 4+6]; //~ ERROR leading `+` is not supported\n                         //~| ERROR leading `+` is not supported", "previous_filename": "src/test/ui/did_you_mean/issue-88276-unary-plus.rs"}, {"sha": "255839bc684b578fe96ee5656bfb607befaf90ca", "filename": "src/test/ui/parser/issue-88276-unary-plus.stderr", "status": "renamed", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5a863d594c725d09ab8f0df5caba374d72200976/src%2Ftest%2Fui%2Fparser%2Fissue-88276-unary-plus.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a863d594c725d09ab8f0df5caba374d72200976/src%2Ftest%2Fui%2Fparser%2Fissue-88276-unary-plus.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-88276-unary-plus.stderr?ref=5a863d594c725d09ab8f0df5caba374d72200976", "patch": "@@ -5,7 +5,7 @@ LL |     let _ = +1;\n    |             ^\n    |             |\n    |             unexpected `+`\n-   |             help: remove the `+`\n+   |             help: try removing the `+`\n \n error: leading `+` is not supported\n   --> $DIR/issue-88276-unary-plus.rs:5:14\n@@ -14,43 +14,43 @@ LL |     let _ = -+(1+2)*3;\n    |              ^\n    |              |\n    |              unexpected `+`\n-   |              help: remove the `+`\n+   |              help: try removing the `+`\n \n error: leading `+` is not supported\n-  --> $DIR/issue-88276-unary-plus.rs:6:13\n-   |\n-LL |     let _ = +-+(1+2)*3;\n-   |             ^\n-   |             |\n-   |             unexpected `+`\n-   |             help: remove the `+`\n-\n-error: leading `+` is not supported\n-  --> $DIR/issue-88276-unary-plus.rs:6:15\n-   |\n-LL |     let _ = +-+(1+2)*3;\n-   |               ^\n-   |               |\n-   |               unexpected `+`\n-   |               help: remove the `+`\n-\n-error: leading `+` is not supported\n-  --> $DIR/issue-88276-unary-plus.rs:8:14\n+  --> $DIR/issue-88276-unary-plus.rs:6:14\n    |\n LL |     let _ = -+-+(1+2)*3;\n    |              ^\n    |              |\n    |              unexpected `+`\n-   |              help: remove the `+`\n+   |              help: try removing the `+`\n \n error: leading `+` is not supported\n-  --> $DIR/issue-88276-unary-plus.rs:8:16\n+  --> $DIR/issue-88276-unary-plus.rs:6:16\n    |\n LL |     let _ = -+-+(1+2)*3;\n    |                ^\n    |                |\n    |                unexpected `+`\n-   |                help: remove the `+`\n+   |                help: try removing the `+`\n+\n+error: leading `+` is not supported\n+  --> $DIR/issue-88276-unary-plus.rs:8:18\n+   |\n+LL |     let _ = (1 + +2) * +3;\n+   |                  ^\n+   |                  |\n+   |                  unexpected `+`\n+   |                  help: try removing the `+`\n+\n+error: leading `+` is not supported\n+  --> $DIR/issue-88276-unary-plus.rs:8:24\n+   |\n+LL |     let _ = (1 + +2) * +3;\n+   |                        ^\n+   |                        |\n+   |                        unexpected `+`\n+   |                        help: try removing the `+`\n \n error: leading `+` is not supported\n   --> $DIR/issue-88276-unary-plus.rs:10:14\n@@ -59,7 +59,7 @@ LL |     let _ = (+&\"hello\");\n    |              ^\n    |              |\n    |              unexpected `+`\n-   |              help: remove the `+`\n+   |              help: try removing the `+`\n \n error: leading `+` is not supported\n   --> $DIR/issue-88276-unary-plus.rs:11:13\n@@ -68,7 +68,7 @@ LL |     let _ = +[+3, 4+6];\n    |             ^\n    |             |\n    |             unexpected `+`\n-   |             help: remove the `+`\n+   |             help: try removing the `+`\n \n error: leading `+` is not supported\n   --> $DIR/issue-88276-unary-plus.rs:11:15\n@@ -77,7 +77,7 @@ LL |     let _ = +[+3, 4+6];\n    |               ^\n    |               |\n    |               unexpected `+`\n-   |               help: remove the `+`\n+   |               help: try removing the `+`\n \n error: aborting due to 9 previous errors\n ", "previous_filename": "src/test/ui/did_you_mean/issue-88276-unary-plus.stderr"}]}