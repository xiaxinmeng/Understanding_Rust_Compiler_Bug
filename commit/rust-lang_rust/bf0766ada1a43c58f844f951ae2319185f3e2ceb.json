{"sha": "bf0766ada1a43c58f844f951ae2319185f3e2ceb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmMDc2NmFkYTFhNDNjNThmODQ0Zjk1MWFlMjMxOTE4NWYzZTJjZWI=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-11-06T07:20:16Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-11-19T04:24:35Z"}, "message": "rustdoc: fix fallout of ty::t -> Ty<'tcx>.", "tree": {"sha": "a2d0dad24dec23d2f80c805968ef79ab072ad936", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2d0dad24dec23d2f80c805968ef79ab072ad936"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf0766ada1a43c58f844f951ae2319185f3e2ceb", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf0766ada1a43c58f844f951ae2319185f3e2ceb", "html_url": "https://github.com/rust-lang/rust/commit/bf0766ada1a43c58f844f951ae2319185f3e2ceb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf0766ada1a43c58f844f951ae2319185f3e2ceb/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8accc7c38644a698b165de3a327c8e68c7836413", "url": "https://api.github.com/repos/rust-lang/rust/commits/8accc7c38644a698b165de3a327c8e68c7836413", "html_url": "https://github.com/rust-lang/rust/commit/8accc7c38644a698b165de3a327c8e68c7836413"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "209d8c7ca0f29395142f9d5e48c3f38cc60e4ece", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bf0766ada1a43c58f844f951ae2319185f3e2ceb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf0766ada1a43c58f844f951ae2319185f3e2ceb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=bf0766ada1a43c58f844f951ae2319185f3e2ceb", "patch": "@@ -478,7 +478,7 @@ impl Clean<TyParam> for ast::TyParam {\n     }\n }\n \n-impl Clean<TyParam> for ty::TypeParameterDef {\n+impl<'tcx> Clean<TyParam> for ty::TypeParameterDef<'tcx> {\n     fn clean(&self, cx: &DocContext) -> TyParam {\n         cx.external_typarams.borrow_mut().as_mut().unwrap()\n           .insert(self.def_id, self.name.clean(cx));\n@@ -567,7 +567,7 @@ impl Clean<TyParamBound> for ty::BuiltinBound {\n     }\n }\n \n-impl Clean<TyParamBound> for ty::TraitRef {\n+impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n     fn clean(&self, cx: &DocContext) -> TyParamBound {\n         let tcx = match cx.tcx_opt() {\n             Some(tcx) => tcx,\n@@ -588,7 +588,7 @@ impl Clean<TyParamBound> for ty::TraitRef {\n     }\n }\n \n-impl Clean<Vec<TyParamBound>> for ty::ParamBounds {\n+impl<'tcx> Clean<Vec<TyParamBound>> for ty::ParamBounds<'tcx> {\n     fn clean(&self, cx: &DocContext) -> Vec<TyParamBound> {\n         let mut v = Vec::new();\n         for b in self.builtin_bounds.iter() {\n@@ -606,7 +606,7 @@ impl Clean<Vec<TyParamBound>> for ty::ParamBounds {\n     }\n }\n \n-impl Clean<Option<Vec<TyParamBound>>> for subst::Substs {\n+impl<'tcx> Clean<Option<Vec<TyParamBound>>> for subst::Substs<'tcx> {\n     fn clean(&self, cx: &DocContext) -> Option<Vec<TyParamBound>> {\n         let mut v = Vec::new();\n         v.extend(self.regions().iter().filter_map(|r| r.clean(cx)).map(RegionBound));\n@@ -698,7 +698,7 @@ impl Clean<Generics> for ast::Generics {\n     }\n }\n \n-impl<'a> Clean<Generics> for (&'a ty::Generics, subst::ParamSpace) {\n+impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics<'tcx>, subst::ParamSpace) {\n     fn clean(&self, cx: &DocContext) -> Generics {\n         let (me, space) = *self;\n         Generics {\n@@ -877,7 +877,7 @@ impl Clean<FnDecl> for ast::FnDecl {\n     }\n }\n \n-impl<'a> Clean<Type> for ty::FnOutput {\n+impl<'tcx> Clean<Type> for ty::FnOutput<'tcx> {\n     fn clean(&self, cx: &DocContext) -> Type {\n         match *self {\n             ty::FnConverging(ty) => ty.clean(cx),\n@@ -886,7 +886,7 @@ impl<'a> Clean<Type> for ty::FnOutput {\n     }\n }\n \n-impl<'a> Clean<FnDecl> for (ast::DefId, &'a ty::FnSig) {\n+impl<'a, 'tcx> Clean<FnDecl> for (ast::DefId, &'a ty::FnSig<'tcx>) {\n     fn clean(&self, cx: &DocContext) -> FnDecl {\n         let (did, sig) = *self;\n         let mut names = if did.node != 0 {\n@@ -1036,7 +1036,7 @@ impl Clean<ImplMethod> for ast::ImplItem {\n     }\n }\n \n-impl Clean<Item> for ty::Method {\n+impl<'tcx> Clean<Item> for ty::Method<'tcx> {\n     fn clean(&self, cx: &DocContext) -> Item {\n         let (self_, sig) = match self.explicit_self {\n             ty::StaticExplicitSelfCategory => (ast::SelfStatic.clean(cx),\n@@ -1082,7 +1082,7 @@ impl Clean<Item> for ty::Method {\n     }\n }\n \n-impl Clean<Item> for ty::ImplOrTraitItem {\n+impl<'tcx> Clean<Item> for ty::ImplOrTraitItem<'tcx> {\n     fn clean(&self, cx: &DocContext) -> Item {\n         match *self {\n             ty::MethodTraitItem(ref mti) => mti.clean(cx),\n@@ -1257,7 +1257,7 @@ impl Clean<Type> for ast::Ty {\n     }\n }\n \n-impl Clean<Type> for Ty {\n+impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n     fn clean(&self, cx: &DocContext) -> Type {\n         match self.sty {\n             ty::ty_bool => Primitive(Bool),\n@@ -1506,7 +1506,7 @@ impl Clean<Item> for doctree::Variant {\n     }\n }\n \n-impl Clean<Item> for ty::VariantInfo {\n+impl<'tcx> Clean<Item> for ty::VariantInfo<'tcx> {\n     fn clean(&self, cx: &DocContext) -> Item {\n         // use syntax::parse::token::special_idents::unnamed_field;\n         let kind = match self.arg_names.as_ref().map(|s| s.as_slice()) {\n@@ -2255,7 +2255,7 @@ impl Clean<Item> for ast::Typedef {\n }\n \n fn lang_struct(cx: &DocContext, did: Option<ast::DefId>,\n-               t: Ty, name: &str,\n+               t: ty::Ty, name: &str,\n                fallback: fn(Box<Type>) -> Type) -> Type {\n     let did = match did {\n         Some(did) => did,"}]}