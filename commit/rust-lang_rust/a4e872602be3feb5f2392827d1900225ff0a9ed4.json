{"sha": "a4e872602be3feb5f2392827d1900225ff0a9ed4", "node_id": "C_kwDOAAsO6NoAKGE0ZTg3MjYwMmJlM2ZlYjVmMjM5MjgyN2QxOTAwMjI1ZmYwYTllZDQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-20T14:43:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-20T14:43:03Z"}, "message": "Auto merge of #9680 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nI ran out of time and will have to do the Clippy->Rust sync tomorrow.\n\nchangelog: none", "tree": {"sha": "9307ca0e2833eaec517a14e597fffa1490979040", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9307ca0e2833eaec517a14e597fffa1490979040"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4e872602be3feb5f2392827d1900225ff0a9ed4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4e872602be3feb5f2392827d1900225ff0a9ed4", "html_url": "https://github.com/rust-lang/rust/commit/a4e872602be3feb5f2392827d1900225ff0a9ed4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4e872602be3feb5f2392827d1900225ff0a9ed4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1afc7e227de5453ba98212f82c892522068ea830", "url": "https://api.github.com/repos/rust-lang/rust/commits/1afc7e227de5453ba98212f82c892522068ea830", "html_url": "https://github.com/rust-lang/rust/commit/1afc7e227de5453ba98212f82c892522068ea830"}, {"sha": "4ff2364ff76769e9942956d4f8a81fca77c72e22", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ff2364ff76769e9942956d4f8a81fca77c72e22", "html_url": "https://github.com/rust-lang/rust/commit/4ff2364ff76769e9942956d4f8a81fca77c72e22"}], "stats": {"total": 699, "additions": 187, "deletions": 512}, "files": [{"sha": "46a0bfcb9c9c2ff7f2a3c040b7204ac211157438", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -856,11 +856,10 @@ fn walk_parents<'tcx>(\n                                 // Trait methods taking `self`\n                                 arg_ty\n                             } && impl_ty.is_ref()\n-                            && cx.tcx.infer_ctxt().enter(|infcx|\n-                                infcx\n-                                    .type_implements_trait(trait_id, impl_ty, subs, cx.param_env)\n-                                    .must_apply_modulo_regions()\n-                            )\n+                            && let infcx = cx.tcx.infer_ctxt().build()\n+                            && infcx\n+                                .type_implements_trait(trait_id, impl_ty, subs, cx.param_env)\n+                                .must_apply_modulo_regions()\n                         {\n                             return Some(Position::MethodReceiverRefImpl)\n                         }\n@@ -1158,9 +1157,8 @@ fn needless_borrow_impl_arg_position<'tcx>(\n \n             let predicate = EarlyBinder(predicate).subst(cx.tcx, &substs_with_referent_ty);\n             let obligation = Obligation::new(ObligationCause::dummy(), cx.param_env, predicate);\n-            cx.tcx\n-                .infer_ctxt()\n-                .enter(|infcx| infcx.predicate_must_hold_modulo_regions(&obligation))\n+            let infcx = cx.tcx.infer_ctxt().build();\n+            infcx.predicate_must_hold_modulo_regions(&obligation)\n         })\n     };\n "}, {"sha": "eb0455ae404c1d4c9f369fe0ef70eb3bebb5d385", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -106,9 +106,8 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n         };\n \n         let fn_def_id = cx.tcx.hir().local_def_id(hir_id);\n-        cx.tcx.infer_ctxt().enter(|infcx| {\n-            ExprUseVisitor::new(&mut v, &infcx, fn_def_id, cx.param_env, cx.typeck_results()).consume_body(body);\n-        });\n+        let infcx = cx.tcx.infer_ctxt().build();\n+        ExprUseVisitor::new(&mut v, &infcx, fn_def_id, cx.param_env, cx.typeck_results()).consume_body(body);\n \n         for node in v.set {\n             span_lint_hir("}, {"sha": "0519f9ac24682f7cfda45b50228e8a1f1fdca93e", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -7,7 +7,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{EarlyBinder, Opaque, PredicateKind::Trait};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, Span};\n-use rustc_trait_selection::traits::error_reporting::suggestions::InferCtxtExt;\n+use rustc_trait_selection::traits::error_reporting::suggestions::TypeErrCtxtExt;\n use rustc_trait_selection::traits::{self, FulfillmentError};\n \n declare_clippy_lint! {\n@@ -77,29 +77,28 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n             if is_future {\n                 let send_trait = cx.tcx.get_diagnostic_item(sym::Send).unwrap();\n                 let span = decl.output.span();\n-                let send_errors = cx.tcx.infer_ctxt().enter(|infcx| {\n-                    let cause = traits::ObligationCause::misc(span, hir_id);\n-                    traits::fully_solve_bound(&infcx, cause, cx.param_env, ret_ty, send_trait)\n-                });\n+                let infcx = cx.tcx.infer_ctxt().build();\n+                let cause = traits::ObligationCause::misc(span, hir_id);\n+                let send_errors = traits::fully_solve_bound(&infcx, cause, cx.param_env, ret_ty, send_trait);\n                 if !send_errors.is_empty() {\n                     span_lint_and_then(\n                         cx,\n                         FUTURE_NOT_SEND,\n                         span,\n                         \"future cannot be sent between threads safely\",\n                         |db| {\n-                            cx.tcx.infer_ctxt().enter(|infcx| {\n-                                for FulfillmentError { obligation, .. } in send_errors {\n-                                    infcx.maybe_note_obligation_cause_for_async_await(db, &obligation);\n-                                    if let Trait(trait_pred) = obligation.predicate.kind().skip_binder() {\n-                                        db.note(&format!(\n-                                            \"`{}` doesn't implement `{}`\",\n-                                            trait_pred.self_ty(),\n-                                            trait_pred.trait_ref.print_only_trait_path(),\n-                                        ));\n-                                    }\n+                            for FulfillmentError { obligation, .. } in send_errors {\n+                                infcx\n+                                    .err_ctxt()\n+                                    .maybe_note_obligation_cause_for_async_await(db, &obligation);\n+                                if let Trait(trait_pred) = obligation.predicate.kind().skip_binder() {\n+                                    db.note(&format!(\n+                                        \"`{}` doesn't implement `{}`\",\n+                                        trait_pred.self_ty(),\n+                                        trait_pred.trait_ref.print_only_trait_path(),\n+                                    ));\n                                 }\n-                            });\n+                            }\n                         },\n                     );\n                 }"}, {"sha": "af40a5a8187ee5dfa4adae5bbc9d7d28d981eb1d", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -19,7 +19,6 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust,no_run\n-    /// # #![allow(const_err)]\n     /// let x = [1, 2, 3, 4];\n     ///\n     /// x[9];"}, {"sha": "f5ad52ba1892a508bdf9e02a7ee09ede16bd4893", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -113,7 +113,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(loops::EMPTY_LOOP),\n     LintId::of(loops::EXPLICIT_COUNTER_LOOP),\n     LintId::of(loops::FOR_KV_MAP),\n-    LintId::of(loops::FOR_LOOPS_OVER_FALLIBLES),\n     LintId::of(loops::ITER_NEXT_LOOP),\n     LintId::of(loops::MANUAL_FIND),\n     LintId::of(loops::MANUAL_FLATTEN),"}, {"sha": "8b96dfd5981be495287917f97f691d6da36aec2c", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -230,7 +230,6 @@ store.register_lints(&[\n     loops::EXPLICIT_INTO_ITER_LOOP,\n     loops::EXPLICIT_ITER_LOOP,\n     loops::FOR_KV_MAP,\n-    loops::FOR_LOOPS_OVER_FALLIBLES,\n     loops::ITER_NEXT_LOOP,\n     loops::MANUAL_FIND,\n     loops::MANUAL_FLATTEN,"}, {"sha": "b70c4bb73e57d129bbf291c7d6220f428e877a55", "filename": "clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -22,7 +22,6 @@ store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec!\n     LintId::of(formatting::SUSPICIOUS_ELSE_FORMATTING),\n     LintId::of(formatting::SUSPICIOUS_UNARY_OP_FORMATTING),\n     LintId::of(loops::EMPTY_LOOP),\n-    LintId::of(loops::FOR_LOOPS_OVER_FALLIBLES),\n     LintId::of(loops::MUT_RANGE_BOUND),\n     LintId::of(methods::NO_EFFECT_REPLACE),\n     LintId::of(methods::SUSPICIOUS_MAP),"}, {"sha": "b54ecd12313aa4e0704485c5d996f4e1139be9cf", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -482,7 +482,7 @@ pub fn read_conf(sess: &Session) -> Conf {\n     }\n \n     for warning in warnings {\n-        sess.struct_warn(&format!(\n+        sess.struct_warn(format!(\n             \"error reading Clippy's configuration file `{}`: {}\",\n             file_name.display(),\n             format_error(warning)"}, {"sha": "77de90fd7b94ac7fb196f388f21e29c097ba8e65", "filename": "clippy_lints/src/loops/for_loops_over_fallibles.rs", "status": "removed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/1afc7e227de5453ba98212f82c892522068ea830/clippy_lints%2Fsrc%2Floops%2Ffor_loops_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1afc7e227de5453ba98212f82c892522068ea830/clippy_lints%2Fsrc%2Floops%2Ffor_loops_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Ffor_loops_over_fallibles.rs?ref=1afc7e227de5453ba98212f82c892522068ea830", "patch": "@@ -1,65 +0,0 @@\n-use super::FOR_LOOPS_OVER_FALLIBLES;\n-use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::source::snippet;\n-use clippy_utils::ty::is_type_diagnostic_item;\n-use rustc_hir::{Expr, Pat};\n-use rustc_lint::LateContext;\n-use rustc_span::symbol::sym;\n-\n-/// Checks for `for` loops over `Option`s and `Result`s.\n-pub(super) fn check(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>, method_name: Option<&str>) {\n-    let ty = cx.typeck_results().expr_ty(arg);\n-    if is_type_diagnostic_item(cx, ty, sym::Option) {\n-        let help_string = if let Some(method_name) = method_name {\n-            format!(\n-                \"consider replacing `for {0} in {1}.{method_name}()` with `if let Some({0}) = {1}`\",\n-                snippet(cx, pat.span, \"_\"),\n-                snippet(cx, arg.span, \"_\")\n-            )\n-        } else {\n-            format!(\n-                \"consider replacing `for {0} in {1}` with `if let Some({0}) = {1}`\",\n-                snippet(cx, pat.span, \"_\"),\n-                snippet(cx, arg.span, \"_\")\n-            )\n-        };\n-        span_lint_and_help(\n-            cx,\n-            FOR_LOOPS_OVER_FALLIBLES,\n-            arg.span,\n-            &format!(\n-                \"for loop over `{0}`, which is an `Option`. This is more readably written as an \\\n-                `if let` statement\",\n-                snippet(cx, arg.span, \"_\")\n-            ),\n-            None,\n-            &help_string,\n-        );\n-    } else if is_type_diagnostic_item(cx, ty, sym::Result) {\n-        let help_string = if let Some(method_name) = method_name {\n-            format!(\n-                \"consider replacing `for {0} in {1}.{method_name}()` with `if let Ok({0}) = {1}`\",\n-                snippet(cx, pat.span, \"_\"),\n-                snippet(cx, arg.span, \"_\")\n-            )\n-        } else {\n-            format!(\n-                \"consider replacing `for {0} in {1}` with `if let Ok({0}) = {1}`\",\n-                snippet(cx, pat.span, \"_\"),\n-                snippet(cx, arg.span, \"_\")\n-            )\n-        };\n-        span_lint_and_help(\n-            cx,\n-            FOR_LOOPS_OVER_FALLIBLES,\n-            arg.span,\n-            &format!(\n-                \"for loop over `{0}`, which is a `Result`. This is more readably written as an \\\n-                `if let` statement\",\n-                snippet(cx, arg.span, \"_\")\n-            ),\n-            None,\n-            &help_string,\n-        );\n-    }\n-}"}, {"sha": "b8a263817d2971b218b922bdb55d090edcf30bce", "filename": "clippy_lints/src/loops/iter_next_loop.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Floops%2Fiter_next_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Floops%2Fiter_next_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fiter_next_loop.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -5,7 +5,7 @@ use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_span::sym;\n \n-pub(super) fn check(cx: &LateContext<'_>, arg: &Expr<'_>) -> bool {\n+pub(super) fn check(cx: &LateContext<'_>, arg: &Expr<'_>) {\n     if is_trait_method(cx, arg, sym::Iterator) {\n         span_lint(\n             cx,\n@@ -14,8 +14,5 @@ pub(super) fn check(cx: &LateContext<'_>, arg: &Expr<'_>) -> bool {\n             \"you are iterating over `Iterator::next()` which is an Option; this will compile but is \\\n             probably not what you want\",\n         );\n-        true\n-    } else {\n-        false\n     }\n }"}, {"sha": "bcf278d9c8339c374449c0168a885a139e98a74c", "filename": "clippy_lints/src/loops/mod.rs", "status": "modified", "additions": 2, "deletions": 55, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmod.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -3,7 +3,6 @@ mod explicit_counter_loop;\n mod explicit_into_iter_loop;\n mod explicit_iter_loop;\n mod for_kv_map;\n-mod for_loops_over_fallibles;\n mod iter_next_loop;\n mod manual_find;\n mod manual_flatten;\n@@ -173,49 +172,6 @@ declare_clippy_lint! {\n     \"for-looping over `_.next()` which is probably not intended\"\n }\n \n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for `for` loops over `Option` or `Result` values.\n-    ///\n-    /// ### Why is this bad?\n-    /// Readability. This is more clearly expressed as an `if\n-    /// let`.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// # let opt = Some(1);\n-    /// # let res: Result<i32, std::io::Error> = Ok(1);\n-    /// for x in opt {\n-    ///     // ..\n-    /// }\n-    ///\n-    /// for x in &res {\n-    ///     // ..\n-    /// }\n-    ///\n-    /// for x in res.iter() {\n-    ///     // ..\n-    /// }\n-    /// ```\n-    ///\n-    /// Use instead:\n-    /// ```rust\n-    /// # let opt = Some(1);\n-    /// # let res: Result<i32, std::io::Error> = Ok(1);\n-    /// if let Some(x) = opt {\n-    ///     // ..\n-    /// }\n-    ///\n-    /// if let Ok(x) = res {\n-    ///     // ..\n-    /// }\n-    /// ```\n-    #[clippy::version = \"1.45.0\"]\n-    pub FOR_LOOPS_OVER_FALLIBLES,\n-    suspicious,\n-    \"for-looping over an `Option` or a `Result`, which is more clearly expressed as an `if let`\"\n-}\n-\n declare_clippy_lint! {\n     /// ### What it does\n     /// Detects `loop + match` combinations that are easier\n@@ -648,7 +604,6 @@ declare_lint_pass!(Loops => [\n     EXPLICIT_ITER_LOOP,\n     EXPLICIT_INTO_ITER_LOOP,\n     ITER_NEXT_LOOP,\n-    FOR_LOOPS_OVER_FALLIBLES,\n     WHILE_LET_LOOP,\n     NEEDLESS_COLLECT,\n     EXPLICIT_COUNTER_LOOP,\n@@ -739,30 +694,22 @@ fn check_for_loop<'tcx>(\n     manual_find::check(cx, pat, arg, body, span, expr);\n }\n \n-fn check_for_loop_arg(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n-    let mut next_loop_linted = false; // whether or not ITER_NEXT_LOOP lint was used\n-\n+fn check_for_loop_arg(cx: &LateContext<'_>, _: &Pat<'_>, arg: &Expr<'_>) {\n     if let ExprKind::MethodCall(method, self_arg, [], _) = arg.kind {\n         let method_name = method.ident.as_str();\n         // check for looping over x.iter() or x.iter_mut(), could use &x or &mut x\n         match method_name {\n             \"iter\" | \"iter_mut\" => {\n                 explicit_iter_loop::check(cx, self_arg, arg, method_name);\n-                for_loops_over_fallibles::check(cx, pat, self_arg, Some(method_name));\n             },\n             \"into_iter\" => {\n                 explicit_iter_loop::check(cx, self_arg, arg, method_name);\n                 explicit_into_iter_loop::check(cx, self_arg, arg);\n-                for_loops_over_fallibles::check(cx, pat, self_arg, Some(method_name));\n             },\n             \"next\" => {\n-                next_loop_linted = iter_next_loop::check(cx, arg);\n+                iter_next_loop::check(cx, arg);\n             },\n             _ => {},\n         }\n     }\n-\n-    if !next_loop_linted {\n-        for_loops_over_fallibles::check(cx, pat, arg, None);\n-    }\n }"}, {"sha": "db73ab55b37cf8fa90bc62f1975e408e6d0b3731", "filename": "clippy_lints/src/loops/mut_range_bound.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -65,16 +65,15 @@ fn check_for_mutation<'tcx>(\n         span_low: None,\n         span_high: None,\n     };\n-    cx.tcx.infer_ctxt().enter(|infcx| {\n-        ExprUseVisitor::new(\n-            &mut delegate,\n-            &infcx,\n-            body.hir_id.owner.def_id,\n-            cx.param_env,\n-            cx.typeck_results(),\n-        )\n-        .walk_expr(body);\n-    });\n+    let infcx = cx.tcx.infer_ctxt().build();\n+    ExprUseVisitor::new(\n+        &mut delegate,\n+        &infcx,\n+        body.hir_id.owner.def_id,\n+        cx.param_env,\n+        cx.typeck_results(),\n+    )\n+    .walk_expr(body);\n \n     delegate.mutation_span()\n }"}, {"sha": "4b4f2f47b1d92e3b343a5df372c8d4456a5af84d", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -363,7 +363,7 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n                 && let output_ty = return_ty(cx, item.hir_id())\n                 && let local_def_id = cx.tcx.hir().local_def_id(item.hir_id())\n                 && Inherited::build(cx.tcx, local_def_id).enter(|inherited| {\n-                    let fn_ctxt = FnCtxt::new(&inherited, cx.param_env, item.hir_id());\n+                    let fn_ctxt = FnCtxt::new(inherited, cx.param_env, item.hir_id());\n                     fn_ctxt.can_coerce(ty, output_ty)\n                 }) {\n                     if has_lifetime(output_ty) && has_lifetime(ty) {\n@@ -420,9 +420,7 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n                         if trait_predicates.any(|predicate| {\n                             let predicate = EarlyBinder(predicate).subst(cx.tcx, new_subst);\n                             let obligation = Obligation::new(ObligationCause::dummy(), cx.param_env, predicate);\n-                            !cx.tcx\n-                                .infer_ctxt()\n-                                .enter(|infcx| infcx.predicate_must_hold_modulo_regions(&obligation))\n+                            !cx.tcx.infer_ctxt().build().predicate_must_hold_modulo_regions(&obligation)\n                         }) {\n                             return false;\n                         }"}, {"sha": "01c87f058adea16f0d2b3333f62f890deeffdda8", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -148,7 +148,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n \n         let desc = match impl_item.kind {\n             hir::ImplItemKind::Fn(..) => \"a method\",\n-            hir::ImplItemKind::Const(..) | hir::ImplItemKind::TyAlias(_) => return,\n+            hir::ImplItemKind::Const(..) | hir::ImplItemKind::Type(_) => return,\n         };\n \n         let assoc_item = cx.tcx.associated_item(impl_item.def_id);"}, {"sha": "7f881e27dd27c39e542ab9b96a1a79316d6df786", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -138,10 +138,8 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n             ..\n         } = {\n             let mut ctx = MovedVariablesCtxt::default();\n-            cx.tcx.infer_ctxt().enter(|infcx| {\n-                euv::ExprUseVisitor::new(&mut ctx, &infcx, fn_def_id, cx.param_env, cx.typeck_results())\n-                    .consume_body(body);\n-            });\n+            let infcx = cx.tcx.infer_ctxt().build();\n+            euv::ExprUseVisitor::new(&mut ctx, &infcx, fn_def_id, cx.param_env, cx.typeck_results()).consume_body(body);\n             ctx\n         };\n "}, {"sha": "c7e964cf23e2c00d62d7c2b7ada106b668768c11", "filename": "clippy_lints/src/operators/assign_op_pattern.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Foperators%2Fassign_op_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Foperators%2Fassign_op_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fassign_op_pattern.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -123,16 +123,15 @@ fn imm_borrows_in_expr(cx: &LateContext<'_>, e: &hir::Expr<'_>) -> hir::HirIdSet\n     }\n \n     let mut s = S(hir::HirIdSet::default());\n-    cx.tcx.infer_ctxt().enter(|infcx| {\n-        let mut v = ExprUseVisitor::new(\n-            &mut s,\n-            &infcx,\n-            cx.tcx.hir().body_owner_def_id(cx.enclosing_body.unwrap()),\n-            cx.param_env,\n-            cx.typeck_results(),\n-        );\n-        v.consume_expr(e);\n-    });\n+    let infcx = cx.tcx.infer_ctxt().build();\n+    let mut v = ExprUseVisitor::new(\n+        &mut s,\n+        &infcx,\n+        cx.tcx.hir().body_owner_def_id(cx.enclosing_body.unwrap()),\n+        cx.param_env,\n+        cx.typeck_results(),\n+    );\n+    v.consume_expr(e);\n     s.0\n }\n \n@@ -156,15 +155,14 @@ fn mut_borrows_in_expr(cx: &LateContext<'_>, e: &hir::Expr<'_>) -> hir::HirIdSet\n     }\n \n     let mut s = S(hir::HirIdSet::default());\n-    cx.tcx.infer_ctxt().enter(|infcx| {\n-        let mut v = ExprUseVisitor::new(\n-            &mut s,\n-            &infcx,\n-            cx.tcx.hir().body_owner_def_id(cx.enclosing_body.unwrap()),\n-            cx.param_env,\n-            cx.typeck_results(),\n-        );\n-        v.consume_expr(e);\n-    });\n+    let infcx = cx.tcx.infer_ctxt().build();\n+    let mut v = ExprUseVisitor::new(\n+        &mut s,\n+        &infcx,\n+        cx.tcx.hir().body_owner_def_id(cx.enclosing_body.unwrap()),\n+        cx.param_env,\n+        cx.typeck_results(),\n+    );\n+    v.consume_expr(e);\n     s.0\n }"}, {"sha": "40db315bf272612a86ab6b0b2aeff431e9159de5", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -689,23 +689,22 @@ fn matches_preds<'tcx>(\n     ty: Ty<'tcx>,\n     preds: &'tcx [Binder<'tcx, ExistentialPredicate<'tcx>>],\n ) -> bool {\n-    cx.tcx.infer_ctxt().enter(|infcx| {\n-        preds.iter().all(|&p| match cx.tcx.erase_late_bound_regions(p) {\n-            ExistentialPredicate::Trait(p) => infcx\n-                .type_implements_trait(p.def_id, ty, p.substs, cx.param_env)\n-                .must_apply_modulo_regions(),\n-            ExistentialPredicate::Projection(p) => infcx.predicate_must_hold_modulo_regions(&Obligation::new(\n-                ObligationCause::dummy(),\n-                cx.param_env,\n-                cx.tcx.mk_predicate(Binder::bind_with_vars(\n-                    PredicateKind::Projection(p.with_self_ty(cx.tcx, ty)),\n-                    List::empty(),\n-                )),\n+    let infcx = cx.tcx.infer_ctxt().build();\n+    preds.iter().all(|&p| match cx.tcx.erase_late_bound_regions(p) {\n+        ExistentialPredicate::Trait(p) => infcx\n+            .type_implements_trait(p.def_id, ty, p.substs, cx.param_env)\n+            .must_apply_modulo_regions(),\n+        ExistentialPredicate::Projection(p) => infcx.predicate_must_hold_modulo_regions(&Obligation::new(\n+            ObligationCause::dummy(),\n+            cx.param_env,\n+            cx.tcx.mk_predicate(Binder::bind_with_vars(\n+                PredicateKind::Projection(p.with_self_ty(cx.tcx, ty)),\n+                List::empty(),\n             )),\n-            ExistentialPredicate::AutoTrait(p) => infcx\n-                .type_implements_trait(p, ty, List::empty(), cx.param_env)\n-                .must_apply_modulo_regions(),\n-        })\n+        )),\n+        ExistentialPredicate::AutoTrait(p) => infcx\n+            .type_implements_trait(p, ty, List::empty(), cx.param_env)\n+            .must_apply_modulo_regions(),\n     })\n }\n "}, {"sha": "76d6ad0b23e6a82ffb31259f35dac6356fe45977", "filename": "clippy_lints/src/renamed_lints.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Frenamed_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Frenamed_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Frenamed_lints.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -11,8 +11,8 @@ pub static RENAMED_LINTS: &[(&str, &str)] = &[\n     (\"clippy::disallowed_method\", \"clippy::disallowed_methods\"),\n     (\"clippy::disallowed_type\", \"clippy::disallowed_types\"),\n     (\"clippy::eval_order_dependence\", \"clippy::mixed_read_write_in_expression\"),\n-    (\"clippy::for_loop_over_option\", \"clippy::for_loops_over_fallibles\"),\n-    (\"clippy::for_loop_over_result\", \"clippy::for_loops_over_fallibles\"),\n+    (\"clippy::for_loop_over_option\", \"for_loops_over_fallibles\"),\n+    (\"clippy::for_loop_over_result\", \"for_loops_over_fallibles\"),\n     (\"clippy::identity_conversion\", \"clippy::useless_conversion\"),\n     (\"clippy::if_let_some_result\", \"clippy::match_result_ok\"),\n     (\"clippy::logic_bug\", \"clippy::overly_complex_bool_expr\"),\n@@ -31,6 +31,7 @@ pub static RENAMED_LINTS: &[(&str, &str)] = &[\n     (\"clippy::to_string_in_display\", \"clippy::recursive_format_impl\"),\n     (\"clippy::zero_width_space\", \"clippy::invisible_characters\"),\n     (\"clippy::drop_bounds\", \"drop_bounds\"),\n+    (\"clippy::for_loops_over_fallibles\", \"for_loops_over_fallibles\"),\n     (\"clippy::into_iter_on_array\", \"array_into_iter\"),\n     (\"clippy::invalid_atomic_ordering\", \"invalid_atomic_ordering\"),\n     (\"clippy::invalid_ref\", \"invalid_value\"),"}, {"sha": "e94c73df0765881146131e6728910aad288bc372", "filename": "clippy_lints/src/transmute/utils.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -1,8 +1,5 @@\n use rustc_hir::Expr;\n-use rustc_hir_analysis::check::{\n-    cast::{self, CastCheckResult},\n-    FnCtxt, Inherited,\n-};\n+use rustc_hir_analysis::check::{cast, FnCtxt, Inherited};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{cast::CastKind, Ty};\n use rustc_span::DUMMY_SP;\n@@ -48,15 +45,15 @@ fn check_cast<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, from_ty: Ty<'tcx>\n     let local_def_id = hir_id.owner.def_id;\n \n     Inherited::build(cx.tcx, local_def_id).enter(|inherited| {\n-        let fn_ctxt = FnCtxt::new(&inherited, cx.param_env, hir_id);\n+        let fn_ctxt = FnCtxt::new(inherited, cx.param_env, hir_id);\n \n         // If we already have errors, we can't be sure we can pointer cast.\n         assert!(\n             !fn_ctxt.errors_reported_since_creation(),\n             \"Newly created FnCtxt contained errors\"\n         );\n \n-        if let CastCheckResult::Deferred(check) = cast::check_cast(\n+        if let Ok(check) = cast::CastCheck::new(\n             &fn_ctxt, e, from_ty, to_ty,\n             // We won't show any error to the user, so we don't care what the span is here.\n             DUMMY_SP, DUMMY_SP,"}, {"sha": "a06d1fffd8bdf88c5a36afc4647303c7a3f201f2", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -374,7 +374,7 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n             // Methods are covered by check_fn.\n             // Type aliases are ignored because oftentimes it's impossible to\n             // make type alias declaration in trait simpler, see #1013\n-            ImplItemKind::Fn(..) | ImplItemKind::TyAlias(..) => (),\n+            ImplItemKind::Fn(..) | ImplItemKind::Type(..) => (),\n         }\n     }\n "}, {"sha": "0133997560eae2120afcdc92060173576a4a7a03", "filename": "clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fast_utils.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -438,14 +438,14 @@ pub fn eq_assoc_item_kind(l: &AssocItemKind, r: &AssocItemKind) -> bool {\n             eq_defaultness(*ld, *rd) && eq_fn_sig(lf, rf) && eq_generics(lg, rg) && both(lb, rb, |l, r| eq_block(l, r))\n         },\n         (\n-            TyAlias(box ast::TyAlias {\n+            Type(box ast::TyAlias {\n                 defaultness: ld,\n                 generics: lg,\n                 bounds: lb,\n                 ty: lt,\n                 ..\n             }),\n-            TyAlias(box ast::TyAlias {\n+            Type(box ast::TyAlias {\n                 defaultness: rd,\n                 generics: rg,\n                 bounds: rb,"}, {"sha": "c6bf98b7b8bbd35fbf2b1c12994d94e2a7de6b59", "filename": "clippy_utils/src/check_proc_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fcheck_proc_macro.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -220,7 +220,7 @@ fn trait_item_search_pat(item: &TraitItem<'_>) -> (Pat, Pat) {\n fn impl_item_search_pat(item: &ImplItem<'_>) -> (Pat, Pat) {\n     let (start_pat, end_pat) = match &item.kind {\n         ImplItemKind::Const(..) => (Pat::Str(\"const\"), Pat::Str(\";\")),\n-        ImplItemKind::TyAlias(..) => (Pat::Str(\"type\"), Pat::Str(\";\")),\n+        ImplItemKind::Type(..) => (Pat::Str(\"type\"), Pat::Str(\";\")),\n         ImplItemKind::Fn(sig, ..) => (fn_header_search_pat(sig.header), Pat::Str(\"\")),\n     };\n     if item.vis_span.is_empty() {"}, {"sha": "14b1b6eacc6e1994db4fe440c3a89afa2bcfa323", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -2108,9 +2108,9 @@ pub fn fn_def_id(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<DefId> {\n     }\n }\n \n-/// Returns Option<String> where String is a textual representation of the type encapsulated in the\n-/// slice iff the given expression is a slice of primitives (as defined in the\n-/// `is_recursively_primitive_type` function) and None otherwise.\n+/// Returns `Option<String>` where String is a textual representation of the type encapsulated in\n+/// the slice iff the given expression is a slice of primitives (as defined in the\n+/// `is_recursively_primitive_type` function) and `None` otherwise.\n pub fn is_slice_of_primitives(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<String> {\n     let expr_type = cx.typeck_results().expr_ty_adjusted(expr);\n     let expr_kind = expr_type.kind();"}, {"sha": "45b63a4aa5df8bd79c27b32755b32e30ebfaf909", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -129,7 +129,12 @@ fn check_rvalue<'tcx>(\n         | Rvalue::Use(operand)\n         | Rvalue::Cast(\n             CastKind::PointerFromExposedAddress\n-            | CastKind::Misc\n+            | CastKind::IntToInt\n+            | CastKind::FloatToInt\n+            | CastKind::IntToFloat\n+            | CastKind::FloatToFloat\n+            | CastKind::FnPtrToPtr\n+            | CastKind::PtrToPtr\n             | CastKind::Pointer(PointerCast::MutToConstPointer | PointerCast::ArrayToPointer),\n             operand,\n             _,"}, {"sha": "01c2b11f65b08324a0dc5635776852e7ca9038b2", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -823,10 +823,9 @@ pub fn deref_closure_args<'tcx>(cx: &LateContext<'_>, closure: &'tcx hir::Expr<'\n         };\n \n         let fn_def_id = cx.tcx.hir().local_def_id(closure.hir_id);\n-        cx.tcx.infer_ctxt().enter(|infcx| {\n-            ExprUseVisitor::new(&mut visitor, &infcx, fn_def_id, cx.param_env, cx.typeck_results())\n-                .consume_body(closure_body);\n-        });\n+        let infcx = cx.tcx.infer_ctxt().build();\n+        ExprUseVisitor::new(&mut visitor, &infcx, fn_def_id, cx.param_env, cx.typeck_results())\n+            .consume_body(closure_body);\n \n         if !visitor.suggestion_start.is_empty() {\n             return Some(DerefClosure {"}, {"sha": "a15daec7c3ce3ed77f0a284c185c01eb5a07531d", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 23, "deletions": 25, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -172,11 +172,10 @@ pub fn implements_trait_with_env<'tcx>(\n         return false;\n     }\n     let ty_params = tcx.mk_substs(ty_params.iter());\n-    tcx.infer_ctxt().enter(|infcx| {\n-        infcx\n-            .type_implements_trait(trait_id, ty, ty_params, param_env)\n-            .must_apply_modulo_regions()\n-    })\n+    let infcx = tcx.infer_ctxt().build();\n+    infcx\n+        .type_implements_trait(trait_id, ty, ty_params, param_env)\n+        .must_apply_modulo_regions()\n }\n \n /// Checks whether this type implements `Drop`.\n@@ -242,27 +241,26 @@ fn is_normalizable_helper<'tcx>(\n     }\n     // prevent recursive loops, false-negative is better than endless loop leading to stack overflow\n     cache.insert(ty, false);\n-    let result = cx.tcx.infer_ctxt().enter(|infcx| {\n-        let cause = rustc_middle::traits::ObligationCause::dummy();\n-        if infcx.at(&cause, param_env).normalize(ty).is_ok() {\n-            match ty.kind() {\n-                ty::Adt(def, substs) => def.variants().iter().all(|variant| {\n-                    variant\n-                        .fields\n-                        .iter()\n-                        .all(|field| is_normalizable_helper(cx, param_env, field.ty(cx.tcx, substs), cache))\n-                }),\n-                _ => ty.walk().all(|generic_arg| match generic_arg.unpack() {\n-                    GenericArgKind::Type(inner_ty) if inner_ty != ty => {\n-                        is_normalizable_helper(cx, param_env, inner_ty, cache)\n-                    },\n-                    _ => true, // if inner_ty == ty, we've already checked it\n-                }),\n-            }\n-        } else {\n-            false\n+    let infcx = cx.tcx.infer_ctxt().build();\n+    let cause = rustc_middle::traits::ObligationCause::dummy();\n+    let result = if infcx.at(&cause, param_env).normalize(ty).is_ok() {\n+        match ty.kind() {\n+            ty::Adt(def, substs) => def.variants().iter().all(|variant| {\n+                variant\n+                    .fields\n+                    .iter()\n+                    .all(|field| is_normalizable_helper(cx, param_env, field.ty(cx.tcx, substs), cache))\n+            }),\n+            _ => ty.walk().all(|generic_arg| match generic_arg.unpack() {\n+                GenericArgKind::Type(inner_ty) if inner_ty != ty => {\n+                    is_normalizable_helper(cx, param_env, inner_ty, cache)\n+                },\n+                _ => true, // if inner_ty == ty, we've already checked it\n+            }),\n         }\n-    });\n+    } else {\n+        false\n+    };\n     cache.insert(ty, result);\n     result\n }"}, {"sha": "e32bae6ed1fd44af99562cff05263351f54ea1dc", "filename": "clippy_utils/src/usage.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/clippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fusage.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -18,16 +18,15 @@ pub fn mutated_variables<'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'tcx>) ->\n         used_mutably: HirIdSet::default(),\n         skip: false,\n     };\n-    cx.tcx.infer_ctxt().enter(|infcx| {\n-        ExprUseVisitor::new(\n-            &mut delegate,\n-            &infcx,\n-            expr.hir_id.owner.def_id,\n-            cx.param_env,\n-            cx.typeck_results(),\n-        )\n-        .walk_expr(expr);\n-    });\n+    let infcx = cx.tcx.infer_ctxt().build();\n+    ExprUseVisitor::new(\n+        &mut delegate,\n+        &infcx,\n+        expr.hir_id.owner.def_id,\n+        cx.param_env,\n+        cx.typeck_results(),\n+    )\n+    .walk_expr(expr);\n \n     if delegate.skip {\n         return None;"}, {"sha": "748d8a317160f415ec61252dd5f92e316dabaecc", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-10-06\"\n+channel = \"nightly-2022-10-20\"\n components = [\"cargo\", \"llvm-tools-preview\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "0a9fb1ecd840c5d586fe184b01b71aaa0cab8262", "filename": "src/docs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/src%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/src%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -172,7 +172,6 @@ docs! {\n     \"fn_to_numeric_cast_any\",\n     \"fn_to_numeric_cast_with_truncation\",\n     \"for_kv_map\",\n-    \"for_loops_over_fallibles\",\n     \"forget_copy\",\n     \"forget_non_drop\",\n     \"forget_ref\","}, {"sha": "c5a7508e45d40e58cef17a27e3f92a855dd0b398", "filename": "src/docs/for_loops_over_fallibles.txt", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1afc7e227de5453ba98212f82c892522068ea830/src%2Fdocs%2Ffor_loops_over_fallibles.txt", "raw_url": "https://github.com/rust-lang/rust/raw/1afc7e227de5453ba98212f82c892522068ea830/src%2Fdocs%2Ffor_loops_over_fallibles.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs%2Ffor_loops_over_fallibles.txt?ref=1afc7e227de5453ba98212f82c892522068ea830", "patch": "@@ -1,32 +0,0 @@\n-### What it does\n-Checks for `for` loops over `Option` or `Result` values.\n-\n-### Why is this bad?\n-Readability. This is more clearly expressed as an `if\n-let`.\n-\n-### Example\n-```\n-for x in opt {\n-    // ..\n-}\n-\n-for x in &res {\n-    // ..\n-}\n-\n-for x in res.iter() {\n-    // ..\n-}\n-```\n-\n-Use instead:\n-```\n-if let Some(x) = opt {\n-    // ..\n-}\n-\n-if let Ok(x) = res {\n-    // ..\n-}\n-```\n\\ No newline at end of file"}, {"sha": "9564e77c24b1cf64ad83b21c5a66165c6bd26097", "filename": "tests/ui/crashes/ice-9463.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/tests%2Fui%2Fcrashes%2Fice-9463.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/tests%2Fui%2Fcrashes%2Fice-9463.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-9463.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -1,4 +1,4 @@\n-#![deny(arithmetic_overflow, const_err)]\n+#![deny(arithmetic_overflow)]\n fn main() {\n     let _x = -1_i32 >> -1;\n     let _y = 1u32 >> 10000000000000u32;"}, {"sha": "2b425e85a27b5df0a087ea4b4a011fda909c3a18", "filename": "tests/ui/crashes/ice-9463.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/tests%2Fui%2Fcrashes%2Fice-9463.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/tests%2Fui%2Fcrashes%2Fice-9463.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-9463.stderr?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -7,7 +7,7 @@ LL |     let _x = -1_i32 >> -1;\n note: the lint level is defined here\n   --> $DIR/ice-9463.rs:1:9\n    |\n-LL | #![deny(arithmetic_overflow, const_err)]\n+LL | #![deny(arithmetic_overflow)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n error: this arithmetic operation will overflow"}, {"sha": "55fb3788a8b1a568c1e9b5d0c9be2327194f5238", "filename": "tests/ui/for_loop_unfixable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/tests%2Fui%2Ffor_loop_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/tests%2Fui%2Ffor_loop_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_unfixable.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -8,6 +8,7 @@\n     clippy::for_kv_map\n )]\n #[allow(clippy::linkedlist, clippy::unnecessary_mut_passed, clippy::similar_names)]\n+#[allow(for_loops_over_fallibles)]\n fn main() {\n     let vec = vec![1, 2, 3, 4];\n "}, {"sha": "50a86eaa68f7dffe5e4f632aea276cf3463a49bb", "filename": "tests/ui/for_loop_unfixable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/tests%2Fui%2Ffor_loop_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/tests%2Fui%2Ffor_loop_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_unfixable.stderr?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -1,5 +1,5 @@\n error: you are iterating over `Iterator::next()` which is an Option; this will compile but is probably not what you want\n-  --> $DIR/for_loop_unfixable.rs:14:15\n+  --> $DIR/for_loop_unfixable.rs:15:15\n    |\n LL |     for _v in vec.iter().next() {}\n    |               ^^^^^^^^^^^^^^^^^"}, {"sha": "4b2a9297d084eba02835154bcc81789962cb3f03", "filename": "tests/ui/for_loops_over_fallibles.rs", "status": "removed", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/1afc7e227de5453ba98212f82c892522068ea830/tests%2Fui%2Ffor_loops_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1afc7e227de5453ba98212f82c892522068ea830/tests%2Fui%2Ffor_loops_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loops_over_fallibles.rs?ref=1afc7e227de5453ba98212f82c892522068ea830", "patch": "@@ -1,73 +0,0 @@\n-#![warn(clippy::for_loops_over_fallibles)]\n-#![allow(clippy::uninlined_format_args)]\n-\n-fn for_loops_over_fallibles() {\n-    let option = Some(1);\n-    let mut result = option.ok_or(\"x not found\");\n-    let v = vec![0, 1, 2];\n-\n-    // check over an `Option`\n-    for x in option {\n-        println!(\"{}\", x);\n-    }\n-\n-    // check over an `Option`\n-    for x in option.iter() {\n-        println!(\"{}\", x);\n-    }\n-\n-    // check over a `Result`\n-    for x in result {\n-        println!(\"{}\", x);\n-    }\n-\n-    // check over a `Result`\n-    for x in result.iter_mut() {\n-        println!(\"{}\", x);\n-    }\n-\n-    // check over a `Result`\n-    for x in result.into_iter() {\n-        println!(\"{}\", x);\n-    }\n-\n-    for x in option.ok_or(\"x not found\") {\n-        println!(\"{}\", x);\n-    }\n-\n-    // make sure LOOP_OVER_NEXT lint takes clippy::precedence when next() is the last call\n-    // in the chain\n-    for x in v.iter().next() {\n-        println!(\"{}\", x);\n-    }\n-\n-    // make sure we lint when next() is not the last call in the chain\n-    for x in v.iter().next().and(Some(0)) {\n-        println!(\"{}\", x);\n-    }\n-\n-    for x in v.iter().next().ok_or(\"x not found\") {\n-        println!(\"{}\", x);\n-    }\n-\n-    // check for false positives\n-\n-    // for loop false positive\n-    for x in v {\n-        println!(\"{}\", x);\n-    }\n-\n-    // while let false positive for Option\n-    while let Some(x) = option {\n-        println!(\"{}\", x);\n-        break;\n-    }\n-\n-    // while let false positive for Result\n-    while let Ok(x) = result {\n-        println!(\"{}\", x);\n-        break;\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "f09adccabd1a8d15d25a36d937d02d61f2bbb025", "filename": "tests/ui/for_loops_over_fallibles.stderr", "status": "removed", "additions": 0, "deletions": 95, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/1afc7e227de5453ba98212f82c892522068ea830/tests%2Fui%2Ffor_loops_over_fallibles.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1afc7e227de5453ba98212f82c892522068ea830/tests%2Fui%2Ffor_loops_over_fallibles.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loops_over_fallibles.stderr?ref=1afc7e227de5453ba98212f82c892522068ea830", "patch": "@@ -1,95 +0,0 @@\n-error: for loop over `option`, which is an `Option`. This is more readably written as an `if let` statement\n-  --> $DIR/for_loops_over_fallibles.rs:10:14\n-   |\n-LL |     for x in option {\n-   |              ^^^^^^\n-   |\n-   = help: consider replacing `for x in option` with `if let Some(x) = option`\n-   = note: `-D clippy::for-loops-over-fallibles` implied by `-D warnings`\n-\n-error: for loop over `option`, which is an `Option`. This is more readably written as an `if let` statement\n-  --> $DIR/for_loops_over_fallibles.rs:15:14\n-   |\n-LL |     for x in option.iter() {\n-   |              ^^^^^^\n-   |\n-   = help: consider replacing `for x in option.iter()` with `if let Some(x) = option`\n-\n-error: for loop over `result`, which is a `Result`. This is more readably written as an `if let` statement\n-  --> $DIR/for_loops_over_fallibles.rs:20:14\n-   |\n-LL |     for x in result {\n-   |              ^^^^^^\n-   |\n-   = help: consider replacing `for x in result` with `if let Ok(x) = result`\n-\n-error: for loop over `result`, which is a `Result`. This is more readably written as an `if let` statement\n-  --> $DIR/for_loops_over_fallibles.rs:25:14\n-   |\n-LL |     for x in result.iter_mut() {\n-   |              ^^^^^^\n-   |\n-   = help: consider replacing `for x in result.iter_mut()` with `if let Ok(x) = result`\n-\n-error: for loop over `result`, which is a `Result`. This is more readably written as an `if let` statement\n-  --> $DIR/for_loops_over_fallibles.rs:30:14\n-   |\n-LL |     for x in result.into_iter() {\n-   |              ^^^^^^\n-   |\n-   = help: consider replacing `for x in result.into_iter()` with `if let Ok(x) = result`\n-\n-error: for loop over `option.ok_or(\"x not found\")`, which is a `Result`. This is more readably written as an `if let` statement\n-  --> $DIR/for_loops_over_fallibles.rs:34:14\n-   |\n-LL |     for x in option.ok_or(\"x not found\") {\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider replacing `for x in option.ok_or(\"x not found\")` with `if let Ok(x) = option.ok_or(\"x not found\")`\n-\n-error: you are iterating over `Iterator::next()` which is an Option; this will compile but is probably not what you want\n-  --> $DIR/for_loops_over_fallibles.rs:40:14\n-   |\n-LL |     for x in v.iter().next() {\n-   |              ^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[deny(clippy::iter_next_loop)]` on by default\n-\n-error: for loop over `v.iter().next().and(Some(0))`, which is an `Option`. This is more readably written as an `if let` statement\n-  --> $DIR/for_loops_over_fallibles.rs:45:14\n-   |\n-LL |     for x in v.iter().next().and(Some(0)) {\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider replacing `for x in v.iter().next().and(Some(0))` with `if let Some(x) = v.iter().next().and(Some(0))`\n-\n-error: for loop over `v.iter().next().ok_or(\"x not found\")`, which is a `Result`. This is more readably written as an `if let` statement\n-  --> $DIR/for_loops_over_fallibles.rs:49:14\n-   |\n-LL |     for x in v.iter().next().ok_or(\"x not found\") {\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider replacing `for x in v.iter().next().ok_or(\"x not found\")` with `if let Ok(x) = v.iter().next().ok_or(\"x not found\")`\n-\n-error: this loop never actually loops\n-  --> $DIR/for_loops_over_fallibles.rs:61:5\n-   |\n-LL | /     while let Some(x) = option {\n-LL | |         println!(\"{}\", x);\n-LL | |         break;\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: `#[deny(clippy::never_loop)]` on by default\n-\n-error: this loop never actually loops\n-  --> $DIR/for_loops_over_fallibles.rs:67:5\n-   |\n-LL | /     while let Ok(x) = result {\n-LL | |         println!(\"{}\", x);\n-LL | |         break;\n-LL | |     }\n-   | |_____^\n-\n-error: aborting due to 11 previous errors\n-"}, {"sha": "4476e0eb9220a636eb6c813ec414e661584c8c79", "filename": "tests/ui/indexing_slicing_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/tests%2Fui%2Findexing_slicing_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/tests%2Fui%2Findexing_slicing_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing_index.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -3,7 +3,7 @@\n // We also check the out_of_bounds_indexing lint here, because it lints similar things and\n // we want to avoid false positives.\n #![warn(clippy::out_of_bounds_indexing)]\n-#![allow(const_err, unconditional_panic, clippy::no_effect, clippy::unnecessary_operation)]\n+#![allow(unconditional_panic, clippy::no_effect, clippy::unnecessary_operation)]\n \n const ARR: [i32; 2] = [1, 2];\n const REF: &i32 = &ARR[idx()]; // Ok, should not produce stderr."}, {"sha": "da5bc38b3b66c1514cd2d1e3eb1744ac78de7dee", "filename": "tests/ui/indexing_slicing_index.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/tests%2Fui%2Findexing_slicing_index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/tests%2Fui%2Findexing_slicing_index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing_index.stderr?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -59,6 +59,12 @@ LL |     v[M];\n    |\n    = help: consider using `.get(n)` or `.get_mut(n)` instead\n \n-error: aborting due to 8 previous errors\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/indexing_slicing_index.rs:10:24\n+   |\n+LL | const REF_ERR: &i32 = &ARR[idx4()]; // Ok, let rustc handle const contexts.\n+   |                        ^^^^^^^^^^^ index out of bounds: the length is 2 but the index is 4\n+\n+error: aborting due to 9 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "e12ea7ec14500f956a9b29ae3ce4fcec41da63cb", "filename": "tests/ui/manual_map_option.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/tests%2Fui%2Fmanual_map_option.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/tests%2Fui%2Fmanual_map_option.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_map_option.fixed?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -7,7 +7,7 @@\n     clippy::unit_arg,\n     clippy::match_ref_pats,\n     clippy::redundant_pattern_matching,\n-    clippy::for_loops_over_fallibles,\n+    for_loops_over_fallibles,\n     dead_code\n )]\n "}, {"sha": "325a6db06c4e53a533348d41462e81dff808e09d", "filename": "tests/ui/manual_map_option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/tests%2Fui%2Fmanual_map_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/tests%2Fui%2Fmanual_map_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_map_option.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -7,7 +7,7 @@\n     clippy::unit_arg,\n     clippy::match_ref_pats,\n     clippy::redundant_pattern_matching,\n-    clippy::for_loops_over_fallibles,\n+    for_loops_over_fallibles,\n     dead_code\n )]\n "}, {"sha": "b4097fa96045e8bba47501bc2714557a1f55ba39", "filename": "tests/ui/match_overlapping_arm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/tests%2Fui%2Fmatch_overlapping_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/tests%2Fui%2Fmatch_overlapping_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_overlapping_arm.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -1,5 +1,4 @@\n #![feature(exclusive_range_pattern)]\n-#![feature(half_open_range_patterns)]\n #![warn(clippy::match_overlapping_arm)]\n #![allow(clippy::redundant_pattern_matching)]\n #![allow(clippy::if_same_then_else, clippy::equatable_if_let)]"}, {"sha": "b98d4799e42cad2c4370b4635f408cdc43bcb646", "filename": "tests/ui/match_overlapping_arm.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/tests%2Fui%2Fmatch_overlapping_arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/tests%2Fui%2Fmatch_overlapping_arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_overlapping_arm.stderr?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -1,96 +1,96 @@\n error: some ranges overlap\n-  --> $DIR/match_overlapping_arm.rs:13:9\n+  --> $DIR/match_overlapping_arm.rs:12:9\n    |\n LL |         0..=10 => println!(\"0..=10\"),\n    |         ^^^^^^\n    |\n note: overlaps with this\n-  --> $DIR/match_overlapping_arm.rs:14:9\n+  --> $DIR/match_overlapping_arm.rs:13:9\n    |\n LL |         0..=11 => println!(\"0..=11\"),\n    |         ^^^^^^\n    = note: `-D clippy::match-overlapping-arm` implied by `-D warnings`\n \n error: some ranges overlap\n-  --> $DIR/match_overlapping_arm.rs:19:9\n+  --> $DIR/match_overlapping_arm.rs:18:9\n    |\n LL |         0..=5 => println!(\"0..=5\"),\n    |         ^^^^^\n    |\n note: overlaps with this\n-  --> $DIR/match_overlapping_arm.rs:21:9\n+  --> $DIR/match_overlapping_arm.rs:20:9\n    |\n LL |         FOO..=11 => println!(\"FOO..=11\"),\n    |         ^^^^^^^^\n \n error: some ranges overlap\n-  --> $DIR/match_overlapping_arm.rs:56:9\n+  --> $DIR/match_overlapping_arm.rs:55:9\n    |\n LL |         0..11 => println!(\"0..11\"),\n    |         ^^^^^\n    |\n note: overlaps with this\n-  --> $DIR/match_overlapping_arm.rs:57:9\n+  --> $DIR/match_overlapping_arm.rs:56:9\n    |\n LL |         0..=11 => println!(\"0..=11\"),\n    |         ^^^^^^\n \n error: some ranges overlap\n-  --> $DIR/match_overlapping_arm.rs:81:9\n+  --> $DIR/match_overlapping_arm.rs:80:9\n    |\n LL |         0..=10 => println!(\"0..=10\"),\n    |         ^^^^^^\n    |\n note: overlaps with this\n-  --> $DIR/match_overlapping_arm.rs:80:9\n+  --> $DIR/match_overlapping_arm.rs:79:9\n    |\n LL |         5..14 => println!(\"5..14\"),\n    |         ^^^^^\n \n error: some ranges overlap\n-  --> $DIR/match_overlapping_arm.rs:86:9\n+  --> $DIR/match_overlapping_arm.rs:85:9\n    |\n LL |         0..7 => println!(\"0..7\"),\n    |         ^^^^\n    |\n note: overlaps with this\n-  --> $DIR/match_overlapping_arm.rs:87:9\n+  --> $DIR/match_overlapping_arm.rs:86:9\n    |\n LL |         0..=10 => println!(\"0..=10\"),\n    |         ^^^^^^\n \n error: some ranges overlap\n-  --> $DIR/match_overlapping_arm.rs:98:9\n+  --> $DIR/match_overlapping_arm.rs:97:9\n    |\n LL |         ..=23 => println!(\"..=23\"),\n    |         ^^^^^\n    |\n note: overlaps with this\n-  --> $DIR/match_overlapping_arm.rs:99:9\n+  --> $DIR/match_overlapping_arm.rs:98:9\n    |\n LL |         ..26 => println!(\"..26\"),\n    |         ^^^^\n \n error: some ranges overlap\n-  --> $DIR/match_overlapping_arm.rs:107:9\n+  --> $DIR/match_overlapping_arm.rs:106:9\n    |\n LL |         21..=30 => (),\n    |         ^^^^^^^\n    |\n note: overlaps with this\n-  --> $DIR/match_overlapping_arm.rs:108:9\n+  --> $DIR/match_overlapping_arm.rs:107:9\n    |\n LL |         21..=40 => (),\n    |         ^^^^^^^\n \n error: some ranges overlap\n-  --> $DIR/match_overlapping_arm.rs:121:9\n+  --> $DIR/match_overlapping_arm.rs:120:9\n    |\n LL |         0..=0x0000_0000_0000_00ff => (),\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: overlaps with this\n-  --> $DIR/match_overlapping_arm.rs:122:9\n+  --> $DIR/match_overlapping_arm.rs:121:9\n    |\n LL |         0..=0x0000_0000_0000_ffff => (),\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "edd2123d48a557fbdf4339e120acdb89b051e6ee", "filename": "tests/ui/out_of_bounds_indexing/issue-3102.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/tests%2Fui%2Fout_of_bounds_indexing%2Fissue-3102.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/tests%2Fui%2Fout_of_bounds_indexing%2Fissue-3102.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fout_of_bounds_indexing%2Fissue-3102.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::out_of_bounds_indexing)]\n-#![allow(clippy::no_effect, const_err)]\n+#![allow(clippy::no_effect)]\n \n fn main() {\n     let x = [1, 2, 3, 4];"}, {"sha": "4c541c23f5f472608eba394c39f180ee3ea7892f", "filename": "tests/ui/out_of_bounds_indexing/simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/tests%2Fui%2Fout_of_bounds_indexing%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/tests%2Fui%2Fout_of_bounds_indexing%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fout_of_bounds_indexing%2Fsimple.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::out_of_bounds_indexing)]\n-#![allow(clippy::no_effect, clippy::unnecessary_operation, const_err)]\n+#![allow(clippy::no_effect, clippy::unnecessary_operation)]\n \n fn main() {\n     let x = [1, 2, 3, 4];"}, {"sha": "8beae8dee08542e993e40136bfe0404fe8b5ff13", "filename": "tests/ui/rename.fixed", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/tests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/tests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.fixed?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -12,7 +12,7 @@\n #![allow(clippy::disallowed_methods)]\n #![allow(clippy::disallowed_types)]\n #![allow(clippy::mixed_read_write_in_expression)]\n-#![allow(clippy::for_loops_over_fallibles)]\n+#![allow(for_loops_over_fallibles)]\n #![allow(clippy::useless_conversion)]\n #![allow(clippy::match_result_ok)]\n #![allow(clippy::overly_complex_bool_expr)]\n@@ -45,8 +45,8 @@\n #![warn(clippy::disallowed_methods)]\n #![warn(clippy::disallowed_types)]\n #![warn(clippy::mixed_read_write_in_expression)]\n-#![warn(clippy::for_loops_over_fallibles)]\n-#![warn(clippy::for_loops_over_fallibles)]\n+#![warn(for_loops_over_fallibles)]\n+#![warn(for_loops_over_fallibles)]\n #![warn(clippy::useless_conversion)]\n #![warn(clippy::match_result_ok)]\n #![warn(clippy::overly_complex_bool_expr)]\n@@ -65,6 +65,7 @@\n #![warn(clippy::recursive_format_impl)]\n #![warn(clippy::invisible_characters)]\n #![warn(drop_bounds)]\n+#![warn(for_loops_over_fallibles)]\n #![warn(array_into_iter)]\n #![warn(invalid_atomic_ordering)]\n #![warn(invalid_value)]"}, {"sha": "9e665047baaeb93e8c779239a0e61aba8a8d41c9", "filename": "tests/ui/rename.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/tests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/tests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.rs?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -12,7 +12,7 @@\n #![allow(clippy::disallowed_methods)]\n #![allow(clippy::disallowed_types)]\n #![allow(clippy::mixed_read_write_in_expression)]\n-#![allow(clippy::for_loops_over_fallibles)]\n+#![allow(for_loops_over_fallibles)]\n #![allow(clippy::useless_conversion)]\n #![allow(clippy::match_result_ok)]\n #![allow(clippy::overly_complex_bool_expr)]\n@@ -65,6 +65,7 @@\n #![warn(clippy::to_string_in_display)]\n #![warn(clippy::zero_width_space)]\n #![warn(clippy::drop_bounds)]\n+#![warn(clippy::for_loops_over_fallibles)]\n #![warn(clippy::into_iter_on_array)]\n #![warn(clippy::invalid_atomic_ordering)]\n #![warn(clippy::invalid_ref)]"}, {"sha": "63eb565185f07b31af72b755650758dcc6f5eeae", "filename": "tests/ui/rename.stderr", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a4e872602be3feb5f2392827d1900225ff0a9ed4/tests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4e872602be3feb5f2392827d1900225ff0a9ed4/tests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.stderr?ref=a4e872602be3feb5f2392827d1900225ff0a9ed4", "patch": "@@ -54,17 +54,17 @@ error: lint `clippy::eval_order_dependence` has been renamed to `clippy::mixed_r\n LL | #![warn(clippy::eval_order_dependence)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::mixed_read_write_in_expression`\n \n-error: lint `clippy::for_loop_over_option` has been renamed to `clippy::for_loops_over_fallibles`\n+error: lint `clippy::for_loop_over_option` has been renamed to `for_loops_over_fallibles`\n   --> $DIR/rename.rs:48:9\n    |\n LL | #![warn(clippy::for_loop_over_option)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::for_loops_over_fallibles`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n-error: lint `clippy::for_loop_over_result` has been renamed to `clippy::for_loops_over_fallibles`\n+error: lint `clippy::for_loop_over_result` has been renamed to `for_loops_over_fallibles`\n   --> $DIR/rename.rs:49:9\n    |\n LL | #![warn(clippy::for_loop_over_result)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::for_loops_over_fallibles`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::identity_conversion` has been renamed to `clippy::useless_conversion`\n   --> $DIR/rename.rs:50:9\n@@ -174,59 +174,65 @@ error: lint `clippy::drop_bounds` has been renamed to `drop_bounds`\n LL | #![warn(clippy::drop_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `drop_bounds`\n \n-error: lint `clippy::into_iter_on_array` has been renamed to `array_into_iter`\n+error: lint `clippy::for_loops_over_fallibles` has been renamed to `for_loops_over_fallibles`\n   --> $DIR/rename.rs:68:9\n    |\n+LL | #![warn(clippy::for_loops_over_fallibles)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n+\n+error: lint `clippy::into_iter_on_array` has been renamed to `array_into_iter`\n+  --> $DIR/rename.rs:69:9\n+   |\n LL | #![warn(clippy::into_iter_on_array)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `array_into_iter`\n \n error: lint `clippy::invalid_atomic_ordering` has been renamed to `invalid_atomic_ordering`\n-  --> $DIR/rename.rs:69:9\n+  --> $DIR/rename.rs:70:9\n    |\n LL | #![warn(clippy::invalid_atomic_ordering)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_atomic_ordering`\n \n error: lint `clippy::invalid_ref` has been renamed to `invalid_value`\n-  --> $DIR/rename.rs:70:9\n+  --> $DIR/rename.rs:71:9\n    |\n LL | #![warn(clippy::invalid_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_value`\n \n error: lint `clippy::mem_discriminant_non_enum` has been renamed to `enum_intrinsics_non_enums`\n-  --> $DIR/rename.rs:71:9\n+  --> $DIR/rename.rs:72:9\n    |\n LL | #![warn(clippy::mem_discriminant_non_enum)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `enum_intrinsics_non_enums`\n \n error: lint `clippy::panic_params` has been renamed to `non_fmt_panics`\n-  --> $DIR/rename.rs:72:9\n+  --> $DIR/rename.rs:73:9\n    |\n LL | #![warn(clippy::panic_params)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `non_fmt_panics`\n \n error: lint `clippy::positional_named_format_parameters` has been renamed to `named_arguments_used_positionally`\n-  --> $DIR/rename.rs:73:9\n+  --> $DIR/rename.rs:74:9\n    |\n LL | #![warn(clippy::positional_named_format_parameters)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `named_arguments_used_positionally`\n \n error: lint `clippy::temporary_cstring_as_ptr` has been renamed to `temporary_cstring_as_ptr`\n-  --> $DIR/rename.rs:74:9\n+  --> $DIR/rename.rs:75:9\n    |\n LL | #![warn(clippy::temporary_cstring_as_ptr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `temporary_cstring_as_ptr`\n \n error: lint `clippy::unknown_clippy_lints` has been renamed to `unknown_lints`\n-  --> $DIR/rename.rs:75:9\n+  --> $DIR/rename.rs:76:9\n    |\n LL | #![warn(clippy::unknown_clippy_lints)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unknown_lints`\n \n error: lint `clippy::unused_label` has been renamed to `unused_labels`\n-  --> $DIR/rename.rs:76:9\n+  --> $DIR/rename.rs:77:9\n    |\n LL | #![warn(clippy::unused_label)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unused_labels`\n \n-error: aborting due to 38 previous errors\n+error: aborting due to 39 previous errors\n "}]}