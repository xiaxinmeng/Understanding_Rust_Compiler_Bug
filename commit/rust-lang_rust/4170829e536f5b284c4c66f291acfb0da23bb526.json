{"sha": "4170829e536f5b284c4c66f291acfb0da23bb526", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNzA4MjllNTM2ZjViMjg0YzRjNjZmMjkxYWNmYjBkYTIzYmI1MjY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-16T09:42:18Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-01-02T22:35:05Z"}, "message": "introduce ability to detect region constraints from snapshot", "tree": {"sha": "d5817f08de8e37a9fea6a26a1cc8d76683947d86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5817f08de8e37a9fea6a26a1cc8d76683947d86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4170829e536f5b284c4c66f291acfb0da23bb526", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4170829e536f5b284c4c66f291acfb0da23bb526", "html_url": "https://github.com/rust-lang/rust/commit/4170829e536f5b284c4c66f291acfb0da23bb526", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4170829e536f5b284c4c66f291acfb0da23bb526/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b5f274f90d3eb925bad9a1bfa6fe58209f6a6c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b5f274f90d3eb925bad9a1bfa6fe58209f6a6c8", "html_url": "https://github.com/rust-lang/rust/commit/4b5f274f90d3eb925bad9a1bfa6fe58209f6a6c8"}], "stats": {"total": 48, "additions": 40, "deletions": 8}, "files": [{"sha": "9a5e707b57d89f4c0f0facbe6e8ee8953238eecb", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4170829e536f5b284c4c66f291acfb0da23bb526/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4170829e536f5b284c4c66f291acfb0da23bb526/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=4170829e536f5b284c4c66f291acfb0da23bb526", "patch": "@@ -868,6 +868,15 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         r\n     }\n \n+    pub fn region_constraints_added_in_snapshot(\n+        &self,\n+        snapshot: &CombinedSnapshot<'a, 'tcx>,\n+    ) -> bool {\n+        self.borrow_region_constraints().region_constraints_added_in_snapshot(\n+            &snapshot.region_constraints_snapshot,\n+        )\n+    }\n+\n     pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {\n         self.borrow_region_constraints().add_given(sub, sup);\n     }"}, {"sha": "89086e66dffbfdf1d9e6da953661d0d42123f100", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4170829e536f5b284c4c66f291acfb0da23bb526/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4170829e536f5b284c4c66f291acfb0da23bb526/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=4170829e536f5b284c4c66f291acfb0da23bb526", "patch": "@@ -854,6 +854,15 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n         debug!(\"tainted: result={:?}\", taint_set);\n         return taint_set.into_set();\n     }\n+\n+    pub fn region_constraints_added_in_snapshot(&self, mark: &RegionSnapshot) -> bool {\n+        self.undo_log[mark.length..]\n+            .iter()\n+            .any(|&elt| match elt {\n+                AddConstraint(_) => true,\n+                _ => false,\n+            })\n+    }\n }\n \n impl fmt::Debug for RegionSnapshot {"}, {"sha": "6ba3e54eaca514369919473d1735fb6db6ac6b57", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4170829e536f5b284c4c66f291acfb0da23bb526/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4170829e536f5b284c4c66f291acfb0da23bb526/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=4170829e536f5b284c4c66f291acfb0da23bb526", "patch": "@@ -629,8 +629,22 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         &mut self,\n         obligation: &PredicateObligation<'tcx>,\n     ) -> Result<EvaluationResult, OverflowError> {\n-        self.infcx.probe(|_| {\n-            self.evaluate_predicate_recursively(TraitObligationStackList::empty(), obligation)\n+        self.evaluation_probe(|this| {\n+            this.evaluate_predicate_recursively(TraitObligationStackList::empty(), obligation)\n+        })\n+    }\n+\n+    fn evaluation_probe(\n+        &mut self,\n+        op: impl FnOnce(&mut Self) -> Result<EvaluationResult, OverflowError>,\n+    ) -> Result<EvaluationResult, OverflowError> {\n+        self.infcx.probe(|snapshot| -> Result<EvaluationResult, OverflowError> {\n+            let result = op(self)?;\n+            if !self.infcx.region_constraints_added_in_snapshot(snapshot) {\n+                Ok(result)\n+            } else {\n+                Ok(result.max(EvaluatedToOkModuloRegions))\n+            }\n         })\n     }\n \n@@ -988,10 +1002,10 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             \"evaluate_candidate: depth={} candidate={:?}\",\n             stack.obligation.recursion_depth, candidate\n         );\n-        let result = self.infcx.probe(|_| {\n+        let result = self.evaluation_probe(|this| {\n             let candidate = (*candidate).clone();\n-            match self.confirm_candidate(stack.obligation, candidate) {\n-                Ok(selection) => self.evaluate_predicates_recursively(\n+            match this.confirm_candidate(stack.obligation, candidate) {\n+                Ok(selection) => this.evaluate_predicates_recursively(\n                     stack.list(),\n                     selection.nested_obligations().iter(),\n                 ),\n@@ -1775,10 +1789,10 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         stack: &TraitObligationStack<'o, 'tcx>,\n         where_clause_trait_ref: ty::PolyTraitRef<'tcx>,\n     ) -> Result<EvaluationResult, OverflowError> {\n-        self.infcx.probe(|_| {\n-            match self.match_where_clause_trait_ref(stack.obligation, where_clause_trait_ref) {\n+        self.evaluation_probe(|this| {\n+            match this.match_where_clause_trait_ref(stack.obligation, where_clause_trait_ref) {\n                 Ok(obligations) => {\n-                    self.evaluate_predicates_recursively(stack.list(), obligations.iter())\n+                    this.evaluate_predicates_recursively(stack.list(), obligations.iter())\n                 }\n                 Err(()) => Ok(EvaluatedToErr),\n             }"}]}