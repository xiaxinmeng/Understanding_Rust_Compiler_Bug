{"sha": "d78718ad6317b21c58cfd6723501a9487378b0c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ODcxOGFkNjMxN2IyMWM1OGNmZDY3MjM1MDFhOTQ4NzM3OGIwYzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-14T12:56:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-14T12:56:18Z"}, "message": "auto merge of #14191 : luqmana/rust/eu, r=alexcrichton\n\nWe were correctly determining the attributes needed for the parameters for extern fns, but when that extern fn was from another crate we never bothered to pass that information along to LLVM. (i.e never called `foreign::add_argument_attributes`).\r\n\r\nI've just changed both local and non-local (crate) extern fn's to be dealt with together (through `foreign::register_foreign_item_fn`) so we don't run into something like again.\r\n\r\nFixes #14177.", "tree": {"sha": "bde3b5679847ae70d39e6f02df5525a271533700", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bde3b5679847ae70d39e6f02df5525a271533700"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d78718ad6317b21c58cfd6723501a9487378b0c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d78718ad6317b21c58cfd6723501a9487378b0c7", "html_url": "https://github.com/rust-lang/rust/commit/d78718ad6317b21c58cfd6723501a9487378b0c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d78718ad6317b21c58cfd6723501a9487378b0c7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9906813c8102c9c9e6ff2316a96e7a0e3f70af9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9906813c8102c9c9e6ff2316a96e7a0e3f70af9", "html_url": "https://github.com/rust-lang/rust/commit/d9906813c8102c9c9e6ff2316a96e7a0e3f70af9"}, {"sha": "589f4472992ff5e78087a990da58662a15d86fed", "url": "https://api.github.com/repos/rust-lang/rust/commits/589f4472992ff5e78087a990da58662a15d86fed", "html_url": "https://github.com/rust-lang/rust/commit/589f4472992ff5e78087a990da58662a15d86fed"}], "stats": {"total": 134, "additions": 109, "deletions": 25}, "files": [{"sha": "17aa0664d479410d8de9bb5bc587b6598962668a", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d78718ad6317b21c58cfd6723501a9487378b0c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d78718ad6317b21c58cfd6723501a9487378b0c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=d78718ad6317b21c58cfd6723501a9487378b0c7", "patch": "@@ -860,15 +860,8 @@ pub fn trans_external_path(ccx: &CrateContext, did: ast::DefId, t: ty::t) -> Val\n                                        did)\n                 }\n                 Some(..) | None => {\n-                    let c = foreign::llvm_calling_convention(ccx, fn_ty.abi);\n-                    let cconv = c.unwrap_or(lib::llvm::CCallConv);\n-                    let llty = type_of_fn_from_ty(ccx, t);\n-                    get_extern_fn(&mut *ccx.externs.borrow_mut(),\n-                                  ccx.llmod,\n-                                  name.as_slice(),\n-                                  cconv,\n-                                  llty,\n-                                  fn_ty.sig.output)\n+                    foreign::register_foreign_item_fn(ccx, fn_ty.abi, t,\n+                                                      name.as_slice(), None)\n                 }\n             }\n         }\n@@ -1976,7 +1969,11 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n             match ni.node {\n                 ast::ForeignItemFn(..) => {\n                     let abi = ccx.tcx.map.get_foreign_abi(id);\n-                    foreign::register_foreign_item_fn(ccx, abi, ni)\n+                    let ty = ty::node_id_to_type(ccx.tcx(), ni.id);\n+                    let name = foreign::link_name(ni);\n+                    foreign::register_foreign_item_fn(ccx, abi, ty,\n+                                                      name.get().as_slice(),\n+                                                      Some(ni.span))\n                 }\n                 ast::ForeignItemStatic(..) => {\n                     foreign::register_static(ccx, ni)"}, {"sha": "2c4043a62f5fcc97503de02868f1928010b1fca0", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d78718ad6317b21c58cfd6723501a9487378b0c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d78718ad6317b21c58cfd6723501a9487378b0c7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=d78718ad6317b21c58cfd6723501a9487378b0c7", "patch": "@@ -180,33 +180,42 @@ pub fn register_static(ccx: &CrateContext,\n     }\n }\n \n-pub fn register_foreign_item_fn(ccx: &CrateContext, abi: Abi,\n-                                foreign_item: &ast::ForeignItem) -> ValueRef {\n+pub fn register_foreign_item_fn(ccx: &CrateContext, abi: Abi, fty: ty::t,\n+                                name: &str, span: Option<Span>) -> ValueRef {\n     /*!\n      * Registers a foreign function found in a library.\n      * Just adds a LLVM global.\n      */\n \n     debug!(\"register_foreign_item_fn(abi={}, \\\n-            path={}, \\\n-            foreign_item.id={})\",\n+            ty={}, \\\n+            name={})\",\n            abi.repr(ccx.tcx()),\n-           ccx.tcx.map.path_to_str(foreign_item.id),\n-           foreign_item.id);\n+           fty.repr(ccx.tcx()),\n+           name);\n \n     let cc = match llvm_calling_convention(ccx, abi) {\n         Some(cc) => cc,\n         None => {\n-            ccx.sess().span_fatal(foreign_item.span,\n-                format!(\"ABI `{}` has no suitable calling convention \\\n-                      for target architecture\",\n-                      abi.user_string(ccx.tcx())));\n+            match span {\n+                Some(s) => {\n+                    ccx.sess().span_fatal(s,\n+                        format!(\"ABI `{}` has no suitable calling convention \\\n+                              for target architecture\",\n+                              abi.user_string(ccx.tcx())))\n+                }\n+                None => {\n+                    ccx.sess().fatal(\n+                        format!(\"ABI `{}` has no suitable calling convention \\\n+                              for target architecture\",\n+                              abi.user_string(ccx.tcx())))\n+                }\n+            }\n         }\n     };\n \n     // Register the function as a C extern fn\n-    let lname = link_name(foreign_item);\n-    let tys = foreign_types_for_id(ccx, foreign_item.id);\n+    let tys = foreign_types_for_fn_ty(ccx, fty);\n \n     // Make sure the calling convention is right for variadic functions\n     // (should've been caught if not in typeck)\n@@ -219,7 +228,7 @@ pub fn register_foreign_item_fn(ccx: &CrateContext, abi: Abi,\n \n     let llfn = base::get_extern_fn(&mut *ccx.externs.borrow_mut(),\n                                    ccx.llmod,\n-                                   lname.get(),\n+                                   name,\n                                    cc,\n                                    llfn_ty,\n                                    tys.fn_sig.output);\n@@ -433,17 +442,23 @@ pub fn trans_native_call<'a>(\n pub fn trans_foreign_mod(ccx: &CrateContext, foreign_mod: &ast::ForeignMod) {\n     let _icx = push_ctxt(\"foreign::trans_foreign_mod\");\n     for &foreign_item in foreign_mod.items.iter() {\n+        let lname = link_name(foreign_item);\n+\n         match foreign_item.node {\n             ast::ForeignItemFn(..) => {\n                 match foreign_mod.abi {\n                     Rust | RustIntrinsic => {}\n-                    abi => { register_foreign_item_fn(ccx, abi, foreign_item); }\n+                    abi => {\n+                        let ty = ty::node_id_to_type(ccx.tcx(), foreign_item.id);\n+                        register_foreign_item_fn(ccx, abi, ty,\n+                                                 lname.get().as_slice(),\n+                                                 Some(foreign_item.span));\n+                    }\n                 }\n             }\n             _ => {}\n         }\n \n-        let lname = link_name(foreign_item);\n         ccx.item_symbols.borrow_mut().insert(foreign_item.id,\n                                              lname.get().to_strbuf());\n     }"}, {"sha": "a325acbf687b54d01868aded39450f79a904fe3e", "filename": "src/test/run-make/extern-fn-with-union/Makefile", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d78718ad6317b21c58cfd6723501a9487378b0c7/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d78718ad6317b21c58cfd6723501a9487378b0c7/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2FMakefile?ref=d78718ad6317b21c58cfd6723501a9487378b0c7", "patch": "@@ -0,0 +1,8 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(CC) -std=c99 test.c -c -o $(TMPDIR)/test.o\n+\t$(AR) rcs $(TMPDIR)/libtest.a $(TMPDIR)/test.o\n+\t$(RUSTC) testcrate.rs -L $(TMPDIR)\n+\t$(RUSTC) test.rs -L $(TMPDIR)\n+\t$(call RUN,test) || exit 1"}, {"sha": "86cb64537236e1611f877a64a32a1b52d06c5904", "filename": "src/test/run-make/extern-fn-with-union/test.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d78718ad6317b21c58cfd6723501a9487378b0c7/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/d78718ad6317b21c58cfd6723501a9487378b0c7/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2Ftest.c?ref=d78718ad6317b21c58cfd6723501a9487378b0c7", "patch": "@@ -0,0 +1,10 @@\n+#include <stdio.h>\n+#include <stdint.h>\n+\n+typedef union TestUnion {\n+    uint64_t bits;\n+} TestUnion;\n+\n+uint64_t give_back(TestUnion tu) {\n+    return tu.bits;\n+}"}, {"sha": "81fe9085af74afa77a3171a953d51d5a7f7cbc33", "filename": "src/test/run-make/extern-fn-with-union/test.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d78718ad6317b21c58cfd6723501a9487378b0c7/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d78718ad6317b21c58cfd6723501a9487378b0c7/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2Ftest.rs?ref=d78718ad6317b21c58cfd6723501a9487378b0c7", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate testcrate;\n+\n+use std::mem;\n+\n+#[link(name = \"test\", kind = \"static\")]\n+extern {\n+    fn give_back(tu: testcrate::TestUnion) -> u64;\n+}\n+\n+fn main() {\n+    let magic: u64 = 0xDEADBEEF;\n+\n+    // Let's test calling it cross crate\n+    let back = unsafe {\n+        testcrate::give_back(mem::transmute(magic))\n+    };\n+    assert_eq!(magic, back);\n+\n+    // And just within this crate\n+    let back = unsafe {\n+        give_back(mem::transmute(magic))\n+    };\n+    assert_eq!(magic, back);\n+}"}, {"sha": "ebd62d902dfe7929e08f5ed9202d8d942e2b8fec", "filename": "src/test/run-make/extern-fn-with-union/testcrate.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d78718ad6317b21c58cfd6723501a9487378b0c7/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2Ftestcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d78718ad6317b21c58cfd6723501a9487378b0c7/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2Ftestcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-with-union%2Ftestcrate.rs?ref=d78718ad6317b21c58cfd6723501a9487378b0c7", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"lib\"]\n+\n+pub struct TestUnion {\n+    val: u64\n+}\n+\n+#[link(name = \"test\", kind = \"static\")]\n+extern {\n+    pub fn give_back(tu: TestUnion) -> u64;\n+}"}]}