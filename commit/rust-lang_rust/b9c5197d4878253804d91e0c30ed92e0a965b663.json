{"sha": "b9c5197d4878253804d91e0c30ed92e0a965b663", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5YzUxOTdkNDg3ODI1MzgwNGQ5MWUwYzMwZWQ5MmUwYTk2NWI2NjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-07T04:56:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-07T04:56:45Z"}, "message": "Auto merge of #39987 - japaric:used, r=arielb1\n\n#[used] attribute\n\n(For an explanation of what this feature does, read the commit message)\n\nI'd like to propose landing this as an experimental feature (experimental as in:\nno clear stabilization path -- like `asm!`, `#[linkage]`) as it's low\nmaintenance (I think) and relevant to the \"Usage in resource-constrained\nenvironments\" exploration area.\n\nThe main use case I see is running code before `main`. This could be used, for\ninstance, to cheaply initialize an allocator before `main` where the alternative\nis to use `lazy_static` to initialize the allocator on its first use which it's\nmore expensive (atomics) and doesn't work on ARM Cortex-M0 microcontrollers (no\n`AtomicUsize` on that platform)\n\nHere's a `std` example of that:\n\n``` rust\n\nunsafe extern \"C\" fn before_main_1() {\n    println!(\"Hello\");\n}\n\nunsafe extern \"C\" fn before_main_2() {\n    println!(\"World\");\n}\n\n#[link_section = \".init_arary\"]\n#[used]\nstatic INIT_ARRAY: [unsafe extern \"C\" fn(); 2] = [before_main_1, before_main_2];\n\nfn main() {\n    println!(\"Goodbye\");\n}\n```\n\n```\n$ rustc -C lto -C opt-level=3 before_main.rs\n$ ./before_main\nHello\nWorld\nGoodbye\n```\n\nIn general, this pattern could be used to let *dependencies* run code before\n`main` (which sounds like it could go very wrong in some cases). There are\nprobably other use cases; I hope that the people I have cc-ed can comment on\nthose.\n\nNote that I'm personally unsure if the above pattern is something we want to\npromote / allow and that's why I'm proposing this feature as experimental. If\nthis leads to more footguns than benefits then we can just axe the feature.\n\ncc @nikomatsakis ^ I know you have some thoughts on having a process for\nexperimental features though I'm fine with writing an RFC before landing this.\n\n- `dead_code` lint will have to be updated to special case `#[used]` symbols.\n\n- Should we extend `#[used]` to work on non-generic functions?\n\ncc rust-lang/rfcs#1002\ncc rust-lang/rfcs#1459\ncc @dpc @JinShil", "tree": {"sha": "bed96e3ef538a1ae2cb866b371745b517da1ae00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bed96e3ef538a1ae2cb866b371745b517da1ae00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9c5197d4878253804d91e0c30ed92e0a965b663", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9c5197d4878253804d91e0c30ed92e0a965b663", "html_url": "https://github.com/rust-lang/rust/commit/b9c5197d4878253804d91e0c30ed92e0a965b663", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9c5197d4878253804d91e0c30ed92e0a965b663/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2277f4bdcc1195a5f6c9c96d8d1fb32482cbd673", "url": "https://api.github.com/repos/rust-lang/rust/commits/2277f4bdcc1195a5f6c9c96d8d1fb32482cbd673", "html_url": "https://github.com/rust-lang/rust/commit/2277f4bdcc1195a5f6c9c96d8d1fb32482cbd673"}, {"sha": "98037ca43d4d96f93e73e1eb3df8e64372d8f929", "url": "https://api.github.com/repos/rust-lang/rust/commits/98037ca43d4d96f93e73e1eb3df8e64372d8f929", "html_url": "https://github.com/rust-lang/rust/commit/98037ca43d4d96f93e73e1eb3df8e64372d8f929"}], "stats": {"total": 239, "additions": 238, "deletions": 1}, "files": [{"sha": "20812de524add29aa089e6bdd28dabcc08b5771a", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9c5197d4878253804d91e0c30ed92e0a965b663/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/b9c5197d4878253804d91e0c30ed92e0a965b663/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=b9c5197d4878253804d91e0c30ed92e0a965b663", "patch": "@@ -205,6 +205,7 @@\n - [unwind_attributes](unwind-attributes.md)\n - [update_panic_count](update-panic-count.md)\n - [use_extern_macros](use-extern-macros.md)\n+- [used](used.md)\n - [utf8_error_error_len](utf8-error-error-len.md)\n - [vec_remove_item](vec-remove-item.md)\n - [windows_c](windows-c.md)"}, {"sha": "75a8b2774f42242e4790f7ca521c958c6f7f507d", "filename": "src/doc/unstable-book/src/used.md", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/b9c5197d4878253804d91e0c30ed92e0a965b663/src%2Fdoc%2Funstable-book%2Fsrc%2Fused.md", "raw_url": "https://github.com/rust-lang/rust/raw/b9c5197d4878253804d91e0c30ed92e0a965b663/src%2Fdoc%2Funstable-book%2Fsrc%2Fused.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fused.md?ref=b9c5197d4878253804d91e0c30ed92e0a965b663", "patch": "@@ -0,0 +1,153 @@\n+# `used`\n+\n+The tracking issue for this feature\n+is: [40289](https://github.com/rust-lang/rust/issues/40289).\n+\n+------------------------\n+\n+The `#[used]` attribute can be applied to `static` variables to prevent the Rust\n+compiler from optimizing them away even if they appear to be unused by the crate\n+(appear to be \"dead code\").\n+\n+``` rust\n+#![feature(used)]\n+\n+#[used]\n+static FOO: i32 = 1;\n+\n+static BAR: i32 = 2;\n+\n+fn main() {}\n+```\n+\n+If you compile this program into an object file, you'll see that `FOO` makes it\n+to the object file but `BAR` doesn't. Neither static variable is used by the\n+program.\n+\n+``` text\n+$ rustc -C opt-level=3 --emit=obj used.rs\n+\n+$ nm -C used.o\n+0000000000000000 T main\n+                 U std::rt::lang_start\n+0000000000000000 r used::FOO\n+0000000000000000 t used::main\n+```\n+\n+Note that the *linker* knows nothing about the `#[used]` attribute and will\n+remove `#[used]` symbols if they are not referenced by other parts of the\n+program:\n+\n+``` text\n+$ rustc -C opt-level=3 used.rs\n+\n+$ nm -C used | grep FOO\n+```\n+\n+\"This doesn't sound too useful then!\" you may think but keep reading.\n+\n+To preserve the symbols all the way to the final binary, you'll need the\n+cooperation of the linker. Here's one example:\n+\n+The ELF standard defines two special sections, `.init_array` and\n+`.pre_init_array`, that may contain function pointers which will be executed\n+*before* the `main` function is invoked. The linker will preserve symbols placed\n+in these sections (at least when linking programs that target the `*-*-linux-*`\n+targets).\n+\n+``` rust,ignore\n+#![feature(used)]\n+\n+extern \"C\" fn before_main() {\n+    println!(\"Hello, world!\");\n+}\n+\n+#[link_section = \".init_array\"]\n+#[used]\n+static INIT_ARRAY: [extern \"C\" fn(); 1] = [before_main];\n+\n+fn main() {}\n+```\n+\n+So, `#[used]` and `#[link_section]` can be combined to obtain \"life before\n+main\".\n+\n+``` text\n+$ rustc -C opt-level=3 before-main.rs\n+\n+$ ./before-main\n+Hello, world!\n+```\n+\n+Another example: ARM Cortex-M microcontrollers need their reset handler, a\n+pointer to the function that will executed right after the microcontroller is\n+turned on, to be placed near the start of their FLASH memory to boot properly.\n+\n+This condition can be met using `#[used]` and `#[link_section]` plus a linker\n+script.\n+\n+``` rust,ignore\n+#![feature(lang_items)]\n+#![feature(used)]\n+#![no_main]\n+#![no_std]\n+\n+extern \"C\" fn reset_handler() -> ! {\n+    loop {}\n+}\n+\n+#[link_section = \".reset_handler\"]\n+#[used]\n+static RESET_HANDLER: extern \"C\" fn() -> ! = reset_handler;\n+\n+#[lang = \"panic_fmt\"]\n+fn panic_fmt() {}\n+```\n+\n+``` text\n+MEMORY\n+{\n+  FLASH : ORIGIN = 0x08000000, LENGTH = 128K\n+  RAM : ORIGIN = 0x20000000, LENGTH = 20K\n+}\n+\n+SECTIONS\n+{\n+  .text ORIGIN(FLASH) :\n+  {\n+    /* Vector table */\n+    LONG(ORIGIN(RAM) + LENGTH(RAM)); /* initial SP value */\n+    KEEP(*(.reset_handler));\n+\n+    /* Omitted: The rest of the vector table */\n+\n+    *(.text.*);\n+  } > FLASH\n+\n+  /DISCARD/ :\n+  {\n+    /* Unused unwinding stuff */\n+    *(.ARM.exidx.*)\n+  }\n+}\n+```\n+\n+``` text\n+$ xargo rustc --target thumbv7m-none-eabi --release -- \\\n+    -C link-arg=-Tlink.x -C link-arg=-nostartfiles\n+\n+$ arm-none-eabi-objdump -Cd target/thumbv7m-none-eabi/release/app\n+./target/thumbv7m-none-eabi/release/app:     file format elf32-littlearm\n+\n+\n+Disassembly of section .text:\n+\n+08000000 <app::RESET_HANDLER-0x4>:\n+ 8000000:       20005000        .word   0x20005000\n+\n+08000004 <app::RESET_HANDLER>:\n+ 8000004:       08000009                                ....\n+\n+08000008 <app::reset_handler>:\n+ 8000008:       e7fe            b.n     8000008 <app::reset_handler>\n+```"}, {"sha": "d204703b775983ec2b74f60407e796373cf357d7", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b9c5197d4878253804d91e0c30ed92e0a965b663/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c5197d4878253804d91e0c30ed92e0a965b663/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=b9c5197d4878253804d91e0c30ed92e0a965b663", "patch": "@@ -50,7 +50,7 @@ use builder::Builder;\n use callee;\n use common::{C_bool, C_bytes_in_context, C_i32, C_uint};\n use collector::{self, TransItemCollectionMode};\n-use common::{C_struct_in_context, C_u64, C_undef};\n+use common::{C_struct_in_context, C_u64, C_undef, C_array};\n use common::CrateContext;\n use common::{type_is_zero_size, val_ty};\n use common;\n@@ -1187,6 +1187,23 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 }\n             }\n \n+            // Create the llvm.used variable\n+            // This variable has type [N x i8*] and is stored in the llvm.metadata section\n+            if !ccx.used_statics().borrow().is_empty() {\n+                let name = CString::new(\"llvm.used\").unwrap();\n+                let section = CString::new(\"llvm.metadata\").unwrap();\n+                let array = C_array(Type::i8(&ccx).ptr_to(), &*ccx.used_statics().borrow());\n+\n+                unsafe {\n+                    let g = llvm::LLVMAddGlobal(ccx.llmod(),\n+                                                val_ty(array).to_ref(),\n+                                                name.as_ptr());\n+                    llvm::LLVMSetInitializer(g, array);\n+                    llvm::LLVMRustSetLinkage(g, llvm::Linkage::AppendingLinkage);\n+                    llvm::LLVMSetSection(g, section.as_ptr());\n+                }\n+            }\n+\n             // Finalize debuginfo\n             if ccx.sess().opts.debuginfo != NoDebugInfo {\n                 debuginfo::finalize(&ccx);"}, {"sha": "daf1a1ba95f9a175991e2877cf2c9e4d2b0d889e", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b9c5197d4878253804d91e0c30ed92e0a965b663/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c5197d4878253804d91e0c30ed92e0a965b663/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=b9c5197d4878253804d91e0c30ed92e0a965b663", "patch": "@@ -276,6 +276,12 @@ pub fn trans_static<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n         base::set_link_section(ccx, g, attrs);\n \n+        if attr::contains_name(attrs, \"used\") {\n+            // This static will be stored in the llvm.used variable which is an array of i8*\n+            let cast = llvm::LLVMConstPointerCast(g, Type::i8p(ccx).to_ref());\n+            ccx.used_statics().borrow_mut().push(cast);\n+        }\n+\n         Ok(g)\n     }\n }"}, {"sha": "afb94f546abe894aeb9e001a8545e2bc51915803", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b9c5197d4878253804d91e0c30ed92e0a965b663/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c5197d4878253804d91e0c30ed92e0a965b663/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=b9c5197d4878253804d91e0c30ed92e0a965b663", "patch": "@@ -132,6 +132,10 @@ pub struct LocalCrateContext<'tcx> {\n     /// to constants.)\n     statics_to_rauw: RefCell<Vec<(ValueRef, ValueRef)>>,\n \n+    /// Statics that will be placed in the llvm.used variable\n+    /// See http://llvm.org/docs/LangRef.html#the-llvm-used-global-variable for details\n+    used_statics: RefCell<Vec<ValueRef>>,\n+\n     lltypes: RefCell<FxHashMap<Ty<'tcx>, Type>>,\n     llsizingtypes: RefCell<FxHashMap<Ty<'tcx>, Type>>,\n     type_hashcodes: RefCell<FxHashMap<Ty<'tcx>, String>>,\n@@ -587,6 +591,7 @@ impl<'tcx> LocalCrateContext<'tcx> {\n                 impl_method_cache: RefCell::new(FxHashMap()),\n                 closure_bare_wrapper_cache: RefCell::new(FxHashMap()),\n                 statics_to_rauw: RefCell::new(Vec::new()),\n+                used_statics: RefCell::new(Vec::new()),\n                 lltypes: RefCell::new(FxHashMap()),\n                 llsizingtypes: RefCell::new(FxHashMap()),\n                 type_hashcodes: RefCell::new(FxHashMap()),\n@@ -754,6 +759,10 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         &self.local().statics_to_rauw\n     }\n \n+    pub fn used_statics<'a>(&'a self) -> &'a RefCell<Vec<ValueRef>> {\n+        &self.local().used_statics\n+    }\n+\n     pub fn lltypes<'a>(&'a self) -> &'a RefCell<FxHashMap<Ty<'tcx>, Type>> {\n         &self.local().lltypes\n     }"}, {"sha": "550f1160bed858990976922e25509e1ce577e535", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b9c5197d4878253804d91e0c30ed92e0a965b663/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c5197d4878253804d91e0c30ed92e0a965b663/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=b9c5197d4878253804d91e0c30ed92e0a965b663", "patch": "@@ -334,11 +334,15 @@ declare_features! (\n     // `extern \"x86-interrupt\" fn()`\n     (active, abi_x86_interrupt, \"1.17.0\", Some(40180)),\n \n+\n     // Allows the `catch {...}` expression\n     (active, catch_expr, \"1.17.0\", Some(31436)),\n \n     // See rust-lang/rfcs#1414. Allows code like `let x: &'static u32 = &42` to work.\n     (active, rvalue_static_promotion, \"1.15.1\", Some(38865)),\n+\n+    // Used to preserve symbols (see llvm.used)\n+    (active, used, \"1.18.0\", Some(40289)),\n );\n \n declare_features! (\n@@ -746,6 +750,10 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                   \"unwind_attributes\",\n                                   \"#[unwind] is experimental\",\n                                   cfg_fn!(unwind_attributes))),\n+    (\"used\", Whitelisted, Gated(\n+        Stability::Unstable, \"used\",\n+        \"the `#[used]` attribute is an experimental feature\",\n+        cfg_fn!(used))),\n \n     // used in resolve\n     (\"prelude_import\", Whitelisted, Gated(Stability::Unstable,"}, {"sha": "68679d7dac896a22a04f855fdc6ca7aea911cf22", "filename": "src/test/compile-fail/feature-gate-used.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b9c5197d4878253804d91e0c30ed92e0a965b663/src%2Ftest%2Fcompile-fail%2Ffeature-gate-used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c5197d4878253804d91e0c30ed92e0a965b663/src%2Ftest%2Fcompile-fail%2Ffeature-gate-used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-used.rs?ref=b9c5197d4878253804d91e0c30ed92e0a965b663", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[used]\n+fn foo() {}\n+//~^^ ERROR the `#[used]` attribute is an experimental feature\n+\n+fn main() {}"}, {"sha": "9d7aa30f874825068620a0b87b21e71bac0502d7", "filename": "src/test/run-make/used/Makefile", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b9c5197d4878253804d91e0c30ed92e0a965b663/src%2Ftest%2Frun-make%2Fused%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b9c5197d4878253804d91e0c30ed92e0a965b663/src%2Ftest%2Frun-make%2Fused%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fused%2FMakefile?ref=b9c5197d4878253804d91e0c30ed92e0a965b663", "patch": "@@ -0,0 +1,11 @@\n+-include ../tools.mk\n+\n+ifdef IS_WINDOWS\n+# Do nothing on MSVC.\n+all:\n+\texit 0\n+else\n+all:\n+\t$(RUSTC) -C opt-level=3 --emit=obj used.rs\n+\tnm $(TMPDIR)/used.o | grep FOO\n+endif"}, {"sha": "186cd0fdf5e35874ab42ad21424f7db28350ab71", "filename": "src/test/run-make/used/used.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b9c5197d4878253804d91e0c30ed92e0a965b663/src%2Ftest%2Frun-make%2Fused%2Fused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c5197d4878253804d91e0c30ed92e0a965b663/src%2Ftest%2Frun-make%2Fused%2Fused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fused%2Fused.rs?ref=b9c5197d4878253804d91e0c30ed92e0a965b663", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"lib\"]\n+#![feature(used)]\n+\n+#[used]\n+static FOO: u32 = 0;\n+\n+static BAR: u32 = 0;"}]}