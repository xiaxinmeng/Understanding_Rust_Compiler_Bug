{"sha": "9e0e4c31aa88e5d510fdd0742808ec95329470e4", "node_id": "C_kwDOAAsO6NoAKDllMGU0YzMxYWE4OGU1ZDUxMGZkZDA3NDI4MDhlYzk1MzI5NDcwZTQ", "commit": {"author": {"name": "Andrew Xie", "email": "ndrew.xie@gmail.com", "date": "2023-04-12T22:03:11Z"}, "committer": {"name": "Andrew Xie", "email": "ndrew.xie@gmail.com", "date": "2023-04-12T22:03:11Z"}, "message": "Added diagnostic for pin! macro in addition to Box::pin if Unpin isn't implemented", "tree": {"sha": "253ec7eb6a766ba20932f59b3f21d34003189939", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/253ec7eb6a766ba20932f59b3f21d34003189939"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e0e4c31aa88e5d510fdd0742808ec95329470e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e0e4c31aa88e5d510fdd0742808ec95329470e4", "html_url": "https://github.com/rust-lang/rust/commit/9e0e4c31aa88e5d510fdd0742808ec95329470e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e0e4c31aa88e5d510fdd0742808ec95329470e4/comments", "author": {"login": "ndrewxie", "id": 32971598, "node_id": "MDQ6VXNlcjMyOTcxNTk4", "avatar_url": "https://avatars.githubusercontent.com/u/32971598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ndrewxie", "html_url": "https://github.com/ndrewxie", "followers_url": "https://api.github.com/users/ndrewxie/followers", "following_url": "https://api.github.com/users/ndrewxie/following{/other_user}", "gists_url": "https://api.github.com/users/ndrewxie/gists{/gist_id}", "starred_url": "https://api.github.com/users/ndrewxie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ndrewxie/subscriptions", "organizations_url": "https://api.github.com/users/ndrewxie/orgs", "repos_url": "https://api.github.com/users/ndrewxie/repos", "events_url": "https://api.github.com/users/ndrewxie/events{/privacy}", "received_events_url": "https://api.github.com/users/ndrewxie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ndrewxie", "id": 32971598, "node_id": "MDQ6VXNlcjMyOTcxNTk4", "avatar_url": "https://avatars.githubusercontent.com/u/32971598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ndrewxie", "html_url": "https://github.com/ndrewxie", "followers_url": "https://api.github.com/users/ndrewxie/followers", "following_url": "https://api.github.com/users/ndrewxie/following{/other_user}", "gists_url": "https://api.github.com/users/ndrewxie/gists{/gist_id}", "starred_url": "https://api.github.com/users/ndrewxie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ndrewxie/subscriptions", "organizations_url": "https://api.github.com/users/ndrewxie/orgs", "repos_url": "https://api.github.com/users/ndrewxie/repos", "events_url": "https://api.github.com/users/ndrewxie/events{/privacy}", "received_events_url": "https://api.github.com/users/ndrewxie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59a05ad118a5d85dd8998babbe5bcd3163303a43", "url": "https://api.github.com/repos/rust-lang/rust/commits/59a05ad118a5d85dd8998babbe5bcd3163303a43", "html_url": "https://github.com/rust-lang/rust/commit/59a05ad118a5d85dd8998babbe5bcd3163303a43"}], "stats": {"total": 62, "additions": 55, "deletions": 7}, "files": [{"sha": "3cd4f5104ce71ce5bdbdfedbe2b158d4410b2bbf", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e0e4c31aa88e5d510fdd0742808ec95329470e4/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e0e4c31aa88e5d510fdd0742808ec95329470e4/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=9e0e4c31aa88e5d510fdd0742808ec95329470e4", "patch": "@@ -823,7 +823,7 @@ unsafe impl<T: ?Sized> Freeze for &mut T {}\n /// [`pin` module]: crate::pin\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n #[rustc_on_unimplemented(\n-    note = \"consider using `Box::pin`\",\n+    note = \"consider using the `pin!` macro\\nconsider using `Box::pin` if you need to access the pinned value outside of the current scope\",\n     message = \"`{Self}` cannot be unpinned\"\n )]\n #[lang = \"unpin\"]"}, {"sha": "61126faf899261e731d3328a3492e731d7ce4e6a", "filename": "tests/ui/async-await/pin-needed-to-poll-2.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e0e4c31aa88e5d510fdd0742808ec95329470e4/tests%2Fui%2Fasync-await%2Fpin-needed-to-poll-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e0e4c31aa88e5d510fdd0742808ec95329470e4/tests%2Fui%2Fasync-await%2Fpin-needed-to-poll-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fpin-needed-to-poll-2.stderr?ref=9e0e4c31aa88e5d510fdd0742808ec95329470e4", "patch": "@@ -6,7 +6,8 @@ LL |         Pin::new(&mut self.sleep).poll(cx)\n    |         |\n    |         required by a bound introduced by this call\n    |\n-   = note: consider using `Box::pin`\n+   = note: consider using the `pin!` macro\n+           consider using `Box::pin` if you need to access the pinned value outside of the current scope\n note: required because it appears within the type `Sleep`\n   --> $DIR/pin-needed-to-poll-2.rs:8:8\n    |"}, {"sha": "7376116b3380a1e025a82245d09dff9082658a42", "filename": "tests/ui/generator/static-not-unpin.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e0e4c31aa88e5d510fdd0742808ec95329470e4/tests%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e0e4c31aa88e5d510fdd0742808ec95329470e4/tests%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr?ref=9e0e4c31aa88e5d510fdd0742808ec95329470e4", "patch": "@@ -6,7 +6,8 @@ LL |     assert_unpin(generator);\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = note: consider using `Box::pin`\n+   = note: consider using the `pin!` macro\n+           consider using `Box::pin` if you need to access the pinned value outside of the current scope\n note: required by a bound in `assert_unpin`\n   --> $DIR/static-not-unpin.rs:7:20\n    |"}, {"sha": "0232d4c8db694b8b32a1a6b9ca2d65ba5a497405", "filename": "tests/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e0e4c31aa88e5d510fdd0742808ec95329470e4/tests%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e0e4c31aa88e5d510fdd0742808ec95329470e4/tests%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=9e0e4c31aa88e5d510fdd0742808ec95329470e4", "patch": "@@ -50,7 +50,8 @@ LL |     Pin::new(x)\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = note: consider using `Box::pin`\n+   = note: consider using the `pin!` macro\n+           consider using `Box::pin` if you need to access the pinned value outside of the current scope\n note: required by a bound in `Pin::<P>::new`\n   --> $SRC_DIR/core/src/pin.rs:LL:COL\n \n@@ -62,7 +63,8 @@ LL |     Pin::new(Box::new(x))\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = note: consider using `Box::pin`\n+   = note: consider using the `pin!` macro\n+           consider using `Box::pin` if you need to access the pinned value outside of the current scope\n note: required by a bound in `Pin::<P>::new`\n   --> $SRC_DIR/core/src/pin.rs:LL:COL\n "}, {"sha": "b9473d43b0166935f5ea2c8240dd41b1031b162a", "filename": "tests/ui/suggestions/issue-84973-blacklist.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e0e4c31aa88e5d510fdd0742808ec95329470e4/tests%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e0e4c31aa88e5d510fdd0742808ec95329470e4/tests%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr?ref=9e0e4c31aa88e5d510fdd0742808ec95329470e4", "patch": "@@ -38,7 +38,8 @@ LL |     f_unpin(static || { yield; });\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = note: consider using `Box::pin`\n+   = note: consider using the `pin!` macro\n+           consider using `Box::pin` if you need to access the pinned value outside of the current scope\n note: required by a bound in `f_unpin`\n   --> $DIR/issue-84973-blacklist.rs:8:15\n    |"}, {"sha": "f5b96215925b71d95eb2a20d264a5f0219bbefa3", "filename": "tests/ui/suggestions/suggest-pin-macro.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9e0e4c31aa88e5d510fdd0742808ec95329470e4/tests%2Fui%2Fsuggestions%2Fsuggest-pin-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e0e4c31aa88e5d510fdd0742808ec95329470e4/tests%2Fui%2Fsuggestions%2Fsuggest-pin-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-pin-macro.rs?ref=9e0e4c31aa88e5d510fdd0742808ec95329470e4", "patch": "@@ -0,0 +1,23 @@\n+use std::pin::Pin;\n+use std::marker::PhantomPinned;\n+\n+#[derive(Debug)]\n+struct Test {\n+    _marker: PhantomPinned,\n+}\n+impl Test {\n+    fn new() -> Self {\n+        Test {\n+            _marker: PhantomPinned, // This makes our type `!Unpin`\n+        }\n+    }\n+}\n+\n+fn dummy(_: &mut Test) {}\n+\n+pub fn main() {\n+    let mut test1 = Test::new();\n+    let mut test1 = unsafe { Pin::new_unchecked(&mut test1) };\n+\n+    dummy(test1.get_mut()); //~ ERROR E0277\n+}"}, {"sha": "1220cf650cc3e585e5bd6c6b189b62ab3c2f9506", "filename": "tests/ui/suggestions/suggest-pin-macro.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9e0e4c31aa88e5d510fdd0742808ec95329470e4/tests%2Fui%2Fsuggestions%2Fsuggest-pin-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e0e4c31aa88e5d510fdd0742808ec95329470e4/tests%2Fui%2Fsuggestions%2Fsuggest-pin-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-pin-macro.stderr?ref=9e0e4c31aa88e5d510fdd0742808ec95329470e4", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: `PhantomPinned` cannot be unpinned\n+  --> $DIR/suggest-pin-macro.rs:22:17\n+   |\n+LL |     dummy(test1.get_mut());\n+   |                 ^^^^^^^ within `Test`, the trait `Unpin` is not implemented for `PhantomPinned`\n+   |\n+   = note: consider using the `pin!` macro\n+           consider using `Box::pin` if you need to access the pinned value outside of the current scope\n+note: required because it appears within the type `Test`\n+  --> $DIR/suggest-pin-macro.rs:5:8\n+   |\n+LL | struct Test {\n+   |        ^^^^\n+note: required by a bound in `Pin::<&'a mut T>::get_mut`\n+  --> $SRC_DIR/core/src/pin.rs:LL:COL\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "8586f522291b7af93f75a4064de7b3fca124e514", "filename": "tests/ui/typeck/issue-90164.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e0e4c31aa88e5d510fdd0742808ec95329470e4/tests%2Fui%2Ftypeck%2Fissue-90164.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e0e4c31aa88e5d510fdd0742808ec95329470e4/tests%2Fui%2Ftypeck%2Fissue-90164.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-90164.stderr?ref=9e0e4c31aa88e5d510fdd0742808ec95329470e4", "patch": "@@ -6,7 +6,8 @@ LL |     copy(r, w);\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = note: consider using `Box::pin`\n+   = note: consider using the `pin!` macro\n+           consider using `Box::pin` if you need to access the pinned value outside of the current scope\n note: required by a bound in `copy`\n   --> $DIR/issue-90164.rs:1:12\n    |"}]}