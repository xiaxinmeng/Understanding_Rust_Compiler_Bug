{"sha": "0f23bbac0104fe4c51923eb09b7a98c3e6239571", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMjNiYmFjMDEwNGZlNGM1MTkyM2ViMDliN2E5OGMzZTYyMzk1NzE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-06T23:30:39Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-06T23:30:39Z"}, "message": "Fix GenericOS.getenv returning a raw str, return an Option.t[str] instead.", "tree": {"sha": "0eab6391a37b71c753b5515358285163e93f76f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0eab6391a37b71c753b5515358285163e93f76f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f23bbac0104fe4c51923eb09b7a98c3e6239571", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f23bbac0104fe4c51923eb09b7a98c3e6239571", "html_url": "https://github.com/rust-lang/rust/commit/0f23bbac0104fe4c51923eb09b7a98c3e6239571", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f23bbac0104fe4c51923eb09b7a98c3e6239571/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2f7f11d471f30f49e858b88c0c0411fc5d5e187", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2f7f11d471f30f49e858b88c0c0411fc5d5e187", "html_url": "https://github.com/rust-lang/rust/commit/e2f7f11d471f30f49e858b88c0c0411fc5d5e187"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "15483cecdda952fc6c7a81008ab79f6d2cdbc5db", "filename": "src/comp/front/extenv.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0f23bbac0104fe4c51923eb09b7a98c3e6239571/src%2Fcomp%2Ffront%2Fextenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f23bbac0104fe4c51923eb09b7a98c3e6239571/src%2Fcomp%2Ffront%2Fextenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fextenv.rs?ref=0f23bbac0104fe4c51923eb09b7a98c3e6239571", "patch": "@@ -23,9 +23,18 @@ fn expand_syntax_ext(parser.parser p,\n         p.err(\"malformed #env call\");\n     }\n \n+    // FIXME: if this was more thorough it would manufacture an\n+    // Option.t[str] rather than just an maybe-empty string.\n+\n     auto var = expr_to_str(p, args.(0));\n-    auto val = GenericOS.getenv(var);\n-    ret make_new_str(sp, val);\n+    alt (GenericOS.getenv(var)) {\n+        case (Option.none[str]) {\n+            ret make_new_str(sp, \"\");\n+        }\n+        case (Option.some[str](?s)) {\n+            ret make_new_str(sp, s);\n+        }\n+    }\n }\n \n // FIXME: duplicate code copied from extfmt."}, {"sha": "30b1d1d09b7ce668d93048ba8e73ebfeb5ed84fc", "filename": "src/lib/GenericOS.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0f23bbac0104fe4c51923eb09b7a98c3e6239571/src%2Flib%2FGenericOS.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f23bbac0104fe4c51923eb09b7a98c3e6239571/src%2Flib%2FGenericOS.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2FGenericOS.rs?ref=0f23bbac0104fe4c51923eb09b7a98c3e6239571", "patch": "@@ -1,4 +1,9 @@\n-fn getenv(str n) -> str {\n-    ret Str.str_from_cstr(OS.libc.getenv(Str.buf(n)));\n+fn getenv(str n) -> Option.t[str] {\n+  auto s = OS.libc.getenv(Str.buf(n));\n+  if (s == 0 as Str.sbuf) {\n+    ret Option.none[str];\n+  } else {\n+    ret Option.some[str](Str.str_from_cstr(s));\n+  }\n }\n "}, {"sha": "b07dcc0c3dddb4706d974be61006f1d871fe3f88", "filename": "src/lib/Term.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f23bbac0104fe4c51923eb09b7a98c3e6239571/src%2Flib%2FTerm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f23bbac0104fe4c51923eb09b7a98c3e6239571/src%2Flib%2FTerm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2FTerm.rs?ref=0f23bbac0104fe4c51923eb09b7a98c3e6239571", "patch": "@@ -31,7 +31,7 @@ fn reset(IO.buf_writer writer) {\n }\n \n fn color_supported() -> bool {\n-    ret Str.eq(GenericOS.getenv(\"TERM\"), \"xterm-color\");\n+    ret GenericOS.getenv(\"TERM\") == Option.some[str](\"xterm-color\");\n }\n \n fn set_color(IO.buf_writer writer, u8 first_char, u8 color) {"}]}