{"sha": "5ee4f6f660f9e7516e0a188068c173b0d83347e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlZTRmNmY2NjBmOWU3NTE2ZTBhMTg4MDY4YzE3M2IwZDgzMzQ3ZTg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-15T23:43:37Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-18T14:08:25Z"}, "message": "fix pre-expansion linting infra", "tree": {"sha": "d45971dd584b15d7b9a06c961855c65bf05e0e44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d45971dd584b15d7b9a06c961855c65bf05e0e44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ee4f6f660f9e7516e0a188068c173b0d83347e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ee4f6f660f9e7516e0a188068c173b0d83347e8", "html_url": "https://github.com/rust-lang/rust/commit/5ee4f6f660f9e7516e0a188068c173b0d83347e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ee4f6f660f9e7516e0a188068c173b0d83347e8/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41a0b3ec53237ae844a741cffe727ee302b53a67", "url": "https://api.github.com/repos/rust-lang/rust/commits/41a0b3ec53237ae844a741cffe727ee302b53a67", "html_url": "https://github.com/rust-lang/rust/commit/41a0b3ec53237ae844a741cffe727ee302b53a67"}], "stats": {"total": 111, "additions": 67, "deletions": 44}, "files": [{"sha": "a0bdb1481c6b2460c2c3eb2140adb46ccedce5c5", "filename": "src/libpanic_unwind/emcc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ee4f6f660f9e7516e0a188068c173b0d83347e8/src%2Flibpanic_unwind%2Femcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ee4f6f660f9e7516e0a188068c173b0d83347e8/src%2Flibpanic_unwind%2Femcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Femcc.rs?ref=5ee4f6f660f9e7516e0a188068c173b0d83347e8", "patch": "@@ -6,8 +6,6 @@\n //! Emscripten's runtime always implements those APIs and does not\n //! implement libunwind.\n \n-#![allow(private_no_mangle_fns)]\n-\n use alloc::boxed::Box;\n use core::any::Any;\n use core::mem;"}, {"sha": "1622442a5eb450dae5058eb724f3aac8a878fd1b", "filename": "src/libpanic_unwind/gcc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ee4f6f660f9e7516e0a188068c173b0d83347e8/src%2Flibpanic_unwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ee4f6f660f9e7516e0a188068c173b0d83347e8/src%2Flibpanic_unwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fgcc.rs?ref=5ee4f6f660f9e7516e0a188068c173b0d83347e8", "patch": "@@ -36,8 +36,6 @@\n //! Once stack has been unwound down to the handler frame level, unwinding stops\n //! and the last personality routine transfers control to the catch block.\n \n-#![allow(private_no_mangle_fns)]\n-\n use alloc::boxed::Box;\n use core::any::Any;\n "}, {"sha": "10b765a5b411b60efe5f1484e5ab3c1c6228c98c", "filename": "src/libpanic_unwind/seh.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ee4f6f660f9e7516e0a188068c173b0d83347e8/src%2Flibpanic_unwind%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ee4f6f660f9e7516e0a188068c173b0d83347e8/src%2Flibpanic_unwind%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh.rs?ref=5ee4f6f660f9e7516e0a188068c173b0d83347e8", "patch": "@@ -45,7 +45,6 @@\n //! [llvm]: http://llvm.org/docs/ExceptionHandling.html#background-on-windows-exceptions\n \n #![allow(nonstandard_style)]\n-#![allow(private_no_mangle_fns)]\n \n use alloc::boxed::Box;\n use core::any::Any;"}, {"sha": "71622a3b7e657b3d6420c3cc0acf4e2df6599362", "filename": "src/librustc_builtin_macros/proc_macro_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ee4f6f660f9e7516e0a188068c173b0d83347e8/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ee4f6f660f9e7516e0a188068c173b0d83347e8/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fproc_macro_harness.rs?ref=5ee4f6f660f9e7516e0a188068c173b0d83347e8", "patch": "@@ -59,7 +59,7 @@ pub fn inject(\n     handler: &rustc_errors::Handler,\n ) -> ast::Crate {\n     let ecfg = ExpansionConfig::default(\"proc_macro\".to_string());\n-    let mut cx = ExtCtxt::new(sess, ecfg, resolver);\n+    let mut cx = ExtCtxt::new(sess, ecfg, resolver, None);\n \n     let mut collect = CollectProcMacros {\n         macros: Vec::new(),"}, {"sha": "f48fd6df9c98bd4e7d1797cf1a6fff4ee603b4cf", "filename": "src/librustc_builtin_macros/standard_library_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ee4f6f660f9e7516e0a188068c173b0d83347e8/src%2Flibrustc_builtin_macros%2Fstandard_library_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ee4f6f660f9e7516e0a188068c173b0d83347e8/src%2Flibrustc_builtin_macros%2Fstandard_library_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fstandard_library_imports.rs?ref=5ee4f6f660f9e7516e0a188068c173b0d83347e8", "patch": "@@ -39,7 +39,7 @@ pub fn inject(\n     let call_site = DUMMY_SP.with_call_site_ctxt(expn_id);\n \n     let ecfg = ExpansionConfig::default(\"std_lib_injection\".to_string());\n-    let cx = ExtCtxt::new(sess, ecfg, resolver);\n+    let cx = ExtCtxt::new(sess, ecfg, resolver, None);\n \n     // .rev() to preserve ordering above in combination with insert(0, ...)\n     for &name in names.iter().rev() {"}, {"sha": "b87767f4a4127f650f7037f29833c0b24c42fe77", "filename": "src/librustc_builtin_macros/test_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ee4f6f660f9e7516e0a188068c173b0d83347e8/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ee4f6f660f9e7516e0a188068c173b0d83347e8/src%2Flibrustc_builtin_macros%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest_harness.rs?ref=5ee4f6f660f9e7516e0a188068c173b0d83347e8", "patch": "@@ -202,7 +202,7 @@ fn generate_test_harness(\n     let mut econfig = ExpansionConfig::default(\"test\".to_string());\n     econfig.features = Some(features);\n \n-    let ext_cx = ExtCtxt::new(sess, econfig, resolver);\n+    let ext_cx = ExtCtxt::new(sess, econfig, resolver, None);\n \n     let expn_id = ext_cx.resolver.expansion_for_ast_pass(\n         DUMMY_SP,"}, {"sha": "74c304c96b9a45490d82dd6969abdc801c6580da", "filename": "src/librustc_expand/base.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ee4f6f660f9e7516e0a188068c173b0d83347e8/src%2Flibrustc_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ee4f6f660f9e7516e0a188068c173b0d83347e8/src%2Flibrustc_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbase.rs?ref=5ee4f6f660f9e7516e0a188068c173b0d83347e8", "patch": "@@ -926,19 +926,23 @@ pub struct ExtCtxt<'a> {\n     pub resolver: &'a mut dyn Resolver,\n     pub current_expansion: ExpansionData,\n     pub expansions: FxHashMap<Span, Vec<String>>,\n+    /// Called directly after having parsed an external `mod foo;` in expansion.\n+    pub(super) extern_mod_loaded: Option<&'a dyn Fn(&ast::Crate)>,\n }\n \n impl<'a> ExtCtxt<'a> {\n     pub fn new(\n         parse_sess: &'a ParseSess,\n         ecfg: expand::ExpansionConfig<'a>,\n         resolver: &'a mut dyn Resolver,\n+        extern_mod_loaded: Option<&'a dyn Fn(&ast::Crate)>,\n     ) -> ExtCtxt<'a> {\n         ExtCtxt {\n             parse_sess,\n             ecfg,\n-            root_path: PathBuf::new(),\n             resolver,\n+            extern_mod_loaded,\n+            root_path: PathBuf::new(),\n             current_expansion: ExpansionData {\n                 id: ExpnId::root(),\n                 depth: 0,"}, {"sha": "b6cc192cc33d6c6b86d64e4816aa8757b12252d3", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5ee4f6f660f9e7516e0a188068c173b0d83347e8/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ee4f6f660f9e7516e0a188068c173b0d83347e8/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=5ee4f6f660f9e7516e0a188068c173b0d83347e8", "patch": "@@ -1457,8 +1457,19 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                     // We have an outline `mod foo;` so we need to parse the file.\n                     let (new_mod, dir) =\n                         parse_external_mod(sess, ident, span, dir, &mut attrs, pushed);\n-                    *old_mod = new_mod;\n-                    item.attrs = attrs;\n+\n+                    let krate = ast::Crate {\n+                        span: new_mod.inner,\n+                        module: new_mod,\n+                        attrs,\n+                        proc_macros: vec![],\n+                    };\n+                    if let Some(extern_mod_loaded) = self.cx.extern_mod_loaded {\n+                        extern_mod_loaded(&krate);\n+                    }\n+\n+                    *old_mod = krate.module;\n+                    item.attrs = krate.attrs;\n                     // File can have inline attributes, e.g., `#![cfg(...)]` & co. => Reconfigure.\n                     item = match self.configure(item) {\n                         Some(node) => node,"}, {"sha": "93f0beaa48be8efb0b21e96a17ed840188896437", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5ee4f6f660f9e7516e0a188068c173b0d83347e8/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ee4f6f660f9e7516e0a188068c173b0d83347e8/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=5ee4f6f660f9e7516e0a188068c173b0d83347e8", "patch": "@@ -210,14 +210,7 @@ pub fn register_plugins<'a>(\n     Ok((krate, Lrc::new(lint_store)))\n }\n \n-fn configure_and_expand_inner<'a>(\n-    sess: &'a Session,\n-    lint_store: &'a LintStore,\n-    mut krate: ast::Crate,\n-    crate_name: &str,\n-    resolver_arenas: &'a ResolverArenas<'a>,\n-    metadata_loader: &'a MetadataLoaderDyn,\n-) -> Result<(ast::Crate, Resolver<'a>)> {\n+fn pre_expansion_lint(sess: &Session, lint_store: &LintStore, krate: &ast::Crate) {\n     sess.time(\"pre_AST_expansion_lint_checks\", || {\n         rustc_lint::check_ast_crate(\n             sess,\n@@ -228,6 +221,17 @@ fn configure_and_expand_inner<'a>(\n             rustc_lint::BuiltinCombinedPreExpansionLintPass::new(),\n         );\n     });\n+}\n+\n+fn configure_and_expand_inner<'a>(\n+    sess: &'a Session,\n+    lint_store: &'a LintStore,\n+    mut krate: ast::Crate,\n+    crate_name: &str,\n+    resolver_arenas: &'a ResolverArenas<'a>,\n+    metadata_loader: &'a MetadataLoaderDyn,\n+) -> Result<(ast::Crate, Resolver<'a>)> {\n+    pre_expansion_lint(sess, lint_store, &krate);\n \n     let mut resolver = Resolver::new(sess, &krate, crate_name, metadata_loader, &resolver_arenas);\n     rustc_builtin_macros::register_builtin_macros(&mut resolver, sess.edition());\n@@ -291,7 +295,8 @@ fn configure_and_expand_inner<'a>(\n             ..rustc_expand::expand::ExpansionConfig::default(crate_name.to_string())\n         };\n \n-        let mut ecx = ExtCtxt::new(&sess.parse_sess, cfg, &mut resolver);\n+        let extern_mod_loaded = |k: &ast::Crate| pre_expansion_lint(sess, lint_store, k);\n+        let mut ecx = ExtCtxt::new(&sess.parse_sess, cfg, &mut resolver, Some(&extern_mod_loaded));\n \n         // Expand macros now!\n         let krate = sess.time(\"expand_crate\", || ecx.monotonic_expander().expand_crate(krate));"}, {"sha": "34da29c9747775b61d47aebb114e80e243ddff56", "filename": "src/librustc_lint/early.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5ee4f6f660f9e7516e0a188068c173b0d83347e8/src%2Flibrustc_lint%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ee4f6f660f9e7516e0a188068c173b0d83347e8/src%2Flibrustc_lint%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fearly.rs?ref=5ee4f6f660f9e7516e0a188068c173b0d83347e8", "patch": "@@ -18,7 +18,7 @@ use crate::context::{EarlyContext, LintContext, LintStore};\n use crate::passes::{EarlyLintPass, EarlyLintPassObject};\n use rustc_ast::ast;\n use rustc_ast::visit as ast_visit;\n-use rustc_session::lint::{LintBuffer, LintPass};\n+use rustc_session::lint::{BufferedEarlyLint, LintBuffer, LintPass};\n use rustc_session::Session;\n use rustc_span::Span;\n \n@@ -37,13 +37,7 @@ struct EarlyContextAndPass<'a, T: EarlyLintPass> {\n impl<'a, T: EarlyLintPass> EarlyContextAndPass<'a, T> {\n     fn check_id(&mut self, id: ast::NodeId) {\n         for early_lint in self.context.buffered.take(id) {\n-            let rustc_session::lint::BufferedEarlyLint {\n-                span,\n-                msg,\n-                node_id: _,\n-                lint_id,\n-                diagnostic,\n-            } = early_lint;\n+            let BufferedEarlyLint { span, msg, node_id: _, lint_id, diagnostic } = early_lint;\n             self.context.lookup_with_diagnostics(\n                 lint_id.lint,\n                 Some(span),\n@@ -326,11 +320,9 @@ pub fn check_ast_crate<T: EarlyLintPass>(\n     lint_buffer: Option<LintBuffer>,\n     builtin_lints: T,\n ) {\n-    let mut passes: Vec<_> = if pre_expansion {\n-        lint_store.pre_expansion_passes.iter().map(|p| (p)()).collect()\n-    } else {\n-        lint_store.early_passes.iter().map(|p| (p)()).collect()\n-    };\n+    let passes =\n+        if pre_expansion { &lint_store.pre_expansion_passes } else { &lint_store.early_passes };\n+    let mut passes: Vec<_> = passes.iter().map(|p| (p)()).collect();\n     let mut buffered = lint_buffer.unwrap_or_default();\n \n     if !sess.opts.debugging_opts.no_interleave_lints {"}, {"sha": "9b3b381d6210ac4f81b73721bc00fa01054c850a", "filename": "src/test/incremental/change_symbol_export_status.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ee4f6f660f9e7516e0a188068c173b0d83347e8/src%2Ftest%2Fincremental%2Fchange_symbol_export_status.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ee4f6f660f9e7516e0a188068c173b0d83347e8/src%2Ftest%2Fincremental%2Fchange_symbol_export_status.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_symbol_export_status.rs?ref=5ee4f6f660f9e7516e0a188068c173b0d83347e8", "patch": "@@ -2,10 +2,8 @@\n // compile-flags: -Zquery-dep-graph\n \n #![feature(rustc_attrs)]\n-#![allow(private_no_mangle_fns)]\n-\n-#![rustc_partition_codegened(module=\"change_symbol_export_status-mod1\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"change_symbol_export_status-mod2\", cfg=\"rpass2\")]\n+#![rustc_partition_codegened(module = \"change_symbol_export_status-mod1\", cfg = \"rpass2\")]\n+#![rustc_partition_reused(module = \"change_symbol_export_status-mod2\", cfg = \"rpass2\")]\n \n // This test case makes sure that a change in symbol visibility is detected by\n // our dependency tracking. We do this by changing a module's visibility to"}, {"sha": "837ed1f002fc99b3bb1198397989ad9ffd087a73", "filename": "src/test/ui-fulldeps/auxiliary/linkage-visibility.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5ee4f6f660f9e7516e0a188068c173b0d83347e8/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flinkage-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ee4f6f660f9e7516e0a188068c173b0d83347e8/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flinkage-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flinkage-visibility.rs?ref=5ee4f6f660f9e7516e0a188068c173b0d83347e8", "patch": "@@ -2,16 +2,14 @@\n \n #![feature(rustc_private)]\n \n-// We're testing linkage visibility; the compiler warns us, but we want to\n-// do the runtime check that these functions aren't exported.\n-#![allow(private_no_mangle_fns)]\n-\n extern crate rustc_metadata;\n \n use rustc_metadata::dynamic_lib::DynamicLibrary;\n \n #[no_mangle]\n-pub fn foo() { bar(); }\n+pub fn foo() {\n+    bar();\n+}\n \n pub fn foo2<T>() {\n     fn bar2() {\n@@ -21,11 +19,11 @@ pub fn foo2<T>() {\n }\n \n #[no_mangle]\n-fn bar() { }\n+fn bar() {}\n \n #[allow(dead_code)]\n #[no_mangle]\n-fn baz() { }\n+fn baz() {}\n \n pub fn test() {\n     let lib = DynamicLibrary::open(None).unwrap();"}, {"sha": "30e2ed8b7a6233c31381c846ea2eb858f4688bbb", "filename": "src/test/ui/lint/lint-pre-expansion-extern-module.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5ee4f6f660f9e7516e0a188068c173b0d83347e8/src%2Ftest%2Fui%2Flint%2Flint-pre-expansion-extern-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ee4f6f660f9e7516e0a188068c173b0d83347e8/src%2Ftest%2Fui%2Flint%2Flint-pre-expansion-extern-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-pre-expansion-extern-module.rs?ref=5ee4f6f660f9e7516e0a188068c173b0d83347e8", "patch": "@@ -0,0 +1,7 @@\n+// check-pass\n+// compile-flags: -W rust-2018-compatibility\n+// error-pattern: `try` is a keyword in the 2018 edition\n+\n+fn main() {}\n+\n+mod lint_pre_expansion_extern_module_aux;"}, {"sha": "c683a3fa670ae36d0221836ce468b89fbdf57c12", "filename": "src/test/ui/lint/lint-pre-expansion-extern-module.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5ee4f6f660f9e7516e0a188068c173b0d83347e8/src%2Ftest%2Fui%2Flint%2Flint-pre-expansion-extern-module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ee4f6f660f9e7516e0a188068c173b0d83347e8/src%2Ftest%2Fui%2Flint%2Flint-pre-expansion-extern-module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-pre-expansion-extern-module.stderr?ref=5ee4f6f660f9e7516e0a188068c173b0d83347e8", "patch": "@@ -0,0 +1,10 @@\n+warning: `try` is a keyword in the 2018 edition\n+  --> $DIR/lint_pre_expansion_extern_module_aux.rs:3:8\n+   |\n+LL | pub fn try() {}\n+   |        ^^^ help: you can use a raw identifier to stay compatible: `r#try`\n+   |\n+   = note: `-W keyword-idents` implied by `-W rust-2018-compatibility`\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+"}, {"sha": "71dec40ea44f0d67ed0a8f533753f8763541bb7b", "filename": "src/test/ui/lint/lint_pre_expansion_extern_module_aux.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ee4f6f660f9e7516e0a188068c173b0d83347e8/src%2Ftest%2Fui%2Flint%2Flint_pre_expansion_extern_module_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ee4f6f660f9e7516e0a188068c173b0d83347e8/src%2Ftest%2Fui%2Flint%2Flint_pre_expansion_extern_module_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint_pre_expansion_extern_module_aux.rs?ref=5ee4f6f660f9e7516e0a188068c173b0d83347e8", "patch": "@@ -0,0 +1,3 @@\n+// ignore-test: not a test\n+\n+pub fn try() {}"}]}