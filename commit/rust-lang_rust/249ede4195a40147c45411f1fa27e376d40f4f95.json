{"sha": "249ede4195a40147c45411f1fa27e376d40f4f95", "node_id": "C_kwDOAAsO6NoAKDI0OWVkZTQxOTVhNDAxNDdjNDU0MTFmMWZhMjdlMzc2ZDQwZjRmOTU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-02T16:45:30Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-09T01:31:45Z"}, "message": "Address rebase issues, make async fn in trait work", "tree": {"sha": "9df04ee3ff708bee54da6933730118abb6a0b6cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9df04ee3ff708bee54da6933730118abb6a0b6cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/249ede4195a40147c45411f1fa27e376d40f4f95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/249ede4195a40147c45411f1fa27e376d40f4f95", "html_url": "https://github.com/rust-lang/rust/commit/249ede4195a40147c45411f1fa27e376d40f4f95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/249ede4195a40147c45411f1fa27e376d40f4f95/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5be30f9d79b2e08128704ddb29f7925e2fb3ef88", "url": "https://api.github.com/repos/rust-lang/rust/commits/5be30f9d79b2e08128704ddb29f7925e2fb3ef88", "html_url": "https://github.com/rust-lang/rust/commit/5be30f9d79b2e08128704ddb29f7925e2fb3ef88"}], "stats": {"total": 108, "additions": 89, "deletions": 19}, "files": [{"sha": "52273778dcc009233e9cfe554c97e13163e092de", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/249ede4195a40147c45411f1fa27e376d40f4f95/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249ede4195a40147c45411f1fa27e376d40f4f95/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=249ede4195a40147c45411f1fa27e376d40f4f95", "patch": "@@ -777,9 +777,15 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 (hir::Generics::empty(), hir::TraitItemKind::Const(ty, body), body.is_some())\n             }\n             AssocItemKind::Fn(box Fn { ref sig, ref generics, body: None, .. }) => {\n+                let asyncness = sig.header.asyncness;\n                 let names = self.lower_fn_params_to_names(&sig.decl);\n-                let (generics, sig) =\n-                    self.lower_method_sig(generics, sig, i.id, FnDeclKind::Trait, None);\n+                let (generics, sig) = self.lower_method_sig(\n+                    generics,\n+                    sig,\n+                    i.id,\n+                    FnDeclKind::Trait,\n+                    asyncness.opt_return_id(),\n+                );\n                 (generics, hir::TraitItemKind::Fn(sig, hir::TraitFn::Required(names)), false)\n             }\n             AssocItemKind::Fn(box Fn { ref sig, ref generics, body: Some(ref body), .. }) => {"}, {"sha": "8814d184c5589cbf8b932c8dd089aed7cff82bdf", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 76, "deletions": 16, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/249ede4195a40147c45411f1fa27e376d40f4f95/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249ede4195a40147c45411f1fa27e376d40f4f95/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=249ede4195a40147c45411f1fa27e376d40f4f95", "patch": "@@ -1358,7 +1358,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     }\n                     ImplTraitContext::InTrait => {\n                         // FIXME(RPITIT): Should we use def_node_id here?\n-                        self.lower_impl_trait_in_trait(span, def_node_id, bounds)\n+                        self.lower_impl_trait_in_trait(span, def_node_id, |lctx| {\n+                            lctx.lower_param_bounds(\n+                                bounds,\n+                                ImplTraitContext::Disallowed(ImplTraitPosition::Trait),\n+                            )\n+                        })\n                     }\n                     ImplTraitContext::Universal => {\n                         let span = t.span;\n@@ -1546,19 +1551,18 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         hir::TyKind::OpaqueDef(hir::ItemId { def_id: opaque_ty_def_id }, lifetimes)\n     }\n \n-    #[tracing::instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self, lower_bounds))]\n     fn lower_impl_trait_in_trait(\n         &mut self,\n         span: Span,\n         opaque_ty_node_id: NodeId,\n-        bounds: &GenericBounds,\n+        lower_bounds: impl FnOnce(&mut Self) -> hir::GenericBounds<'hir>,\n     ) -> hir::TyKind<'hir> {\n         let opaque_ty_def_id = self.local_def_id(opaque_ty_node_id);\n         self.with_hir_id_owner(opaque_ty_node_id, |lctx| {\n             // FIXME(RPITIT): This should be a more descriptive ImplTraitPosition, i.e. nested RPITIT\n             // FIXME(RPITIT): We _also_ should support this eventually\n-            let hir_bounds = lctx\n-                .lower_param_bounds(bounds, ImplTraitContext::Disallowed(ImplTraitPosition::Trait));\n+            let hir_bounds = lower_bounds(lctx);\n             let rpitit_placeholder = hir::ImplTraitPlaceholder { bounds: hir_bounds };\n             let rpitit_item = hir::Item {\n                 def_id: opaque_ty_def_id,\n@@ -1719,18 +1723,44 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }));\n \n         let output = if let Some((ret_id, span)) = make_ret_async {\n-            if !self.tcx.features().return_position_impl_trait_in_trait {\n-                self.tcx.sess.emit_feature_err(\n-                    TraitFnAsync { fn_span, span },\n-                    sym::return_position_impl_trait_in_trait,\n-                );\n+            match kind {\n+                FnDeclKind::Trait => {\n+                    if !kind.impl_trait_in_trait_allowed(self.tcx) {\n+                        self.tcx\n+                            .sess\n+                            .create_feature_err(\n+                                TraitFnAsync { fn_span, span },\n+                                sym::return_position_impl_trait_in_trait,\n+                            )\n+                            .emit();\n+                    }\n+                    self.lower_async_fn_ret_ty_in_trait(\n+                        &decl.output,\n+                        fn_node_id.expect(\"`make_ret_async` but no `fn_def_id`\"),\n+                        ret_id,\n+                    )\n+                }\n+                _ => {\n+                    if !kind.impl_trait_return_allowed(self.tcx) {\n+                        if kind == FnDeclKind::Impl {\n+                            self.tcx\n+                                .sess\n+                                .create_feature_err(\n+                                    TraitFnAsync { fn_span, span },\n+                                    sym::return_position_impl_trait_in_trait,\n+                                )\n+                                .emit();\n+                        } else {\n+                            self.tcx.sess.emit_err(TraitFnAsync { fn_span, span });\n+                        }\n+                    }\n+                    self.lower_async_fn_ret_ty(\n+                        &decl.output,\n+                        fn_node_id.expect(\"`make_ret_async` but no `fn_def_id`\"),\n+                        ret_id,\n+                    )\n+                }\n             }\n-\n-            self.lower_async_fn_ret_ty(\n-                &decl.output,\n-                fn_node_id.expect(\"`make_ret_async` but no `fn_def_id`\"),\n-                ret_id,\n-            )\n         } else {\n             match decl.output {\n                 FnRetTy::Ty(ref ty) => {\n@@ -2020,6 +2050,36 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         hir::FnRetTy::Return(self.arena.alloc(opaque_ty))\n     }\n \n+    // Transforms `-> T` for `async fn` into `-> OpaqueTy { .. }`\n+    // combined with the following definition of `OpaqueTy`:\n+    //\n+    //     type OpaqueTy<generics_from_parent_fn> = impl Future<Output = T>;\n+    //\n+    // `output`: unlowered output type (`T` in `-> T`)\n+    // `fn_def_id`: `DefId` of the parent function (used to create child impl trait definition)\n+    // `opaque_ty_node_id`: `NodeId` of the opaque `impl Trait` type that should be created\n+    #[instrument(level = \"debug\", skip(self))]\n+    fn lower_async_fn_ret_ty_in_trait(\n+        &mut self,\n+        output: &FnRetTy,\n+        fn_node_id: NodeId,\n+        opaque_ty_node_id: NodeId,\n+    ) -> hir::FnRetTy<'hir> {\n+        let span = output.span();\n+\n+        let opaque_ty_span = self.mark_span_with_reason(DesugaringKind::Async, span, None);\n+\n+        let fn_def_id = self.local_def_id(fn_node_id);\n+\n+        let kind = self.lower_impl_trait_in_trait(output.span(), opaque_ty_node_id, |lctx| {\n+            let bound =\n+                lctx.lower_async_fn_output_type_to_future_bound(output, fn_def_id, output.span());\n+            arena_vec![lctx; bound]\n+        });\n+        let opaque_ty = self.ty(opaque_ty_span, kind);\n+        hir::FnRetTy::Return(self.arena.alloc(opaque_ty))\n+    }\n+\n     /// Transforms `-> T` into `Future<Output = T>`.\n     fn lower_async_fn_output_type_to_future_bound(\n         &mut self,"}, {"sha": "d45d814c3b0f052d5e06fe53dea65426088fdcff", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/249ede4195a40147c45411f1fa27e376d40f4f95/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249ede4195a40147c45411f1fa27e376d40f4f95/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=249ede4195a40147c45411f1fa27e376d40f4f95", "patch": "@@ -1036,6 +1036,7 @@ fn should_encode_type(tcx: TyCtxt<'_>, def_id: LocalDefId, def_kind: DefKind) ->\n         | DefKind::Static(..)\n         | DefKind::TyAlias\n         | DefKind::OpaqueTy\n+        | DefKind::ImplTraitPlaceholder\n         | DefKind::ForeignTy\n         | DefKind::Impl\n         | DefKind::AssocFn\n@@ -1085,6 +1086,7 @@ fn should_encode_const(def_kind: DefKind) -> bool {\n         | DefKind::Static(..)\n         | DefKind::TyAlias\n         | DefKind::OpaqueTy\n+        | DefKind::ImplTraitPlaceholder\n         | DefKind::ForeignTy\n         | DefKind::Impl\n         | DefKind::AssocFn\n@@ -1497,7 +1499,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             }\n             hir::ItemKind::OpaqueTy(..) => {\n                 self.encode_explicit_item_bounds(def_id);\n-                EntryKind::OpaqueTy\n+            }\n+            hir::ItemKind::ImplTraitPlaceholder(..) => {\n+                self.encode_explicit_item_bounds(def_id);\n             }\n             hir::ItemKind::Enum(..) => {\n                 let adt_def = self.tcx.adt_def(def_id);"}]}