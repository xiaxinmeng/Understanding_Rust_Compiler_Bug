{"sha": "5581be26162fb34275538a7c4660b5f4e69a5d2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1ODFiZTI2MTYyZmIzNDI3NTUzOGE3YzQ2NjBiNWY0ZTY5YTVkMmE=", "commit": {"author": {"name": "Tibo", "email": "delor.thibault@gmail.com", "date": "2018-04-24T08:10:09Z"}, "committer": {"name": "Tibo", "email": "delor.thibault@gmail.com", "date": "2018-04-26T02:18:30Z"}, "message": "Use failure for FormattingError", "tree": {"sha": "10af11f8cc35f61283e2172e48f0313270a9ddab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10af11f8cc35f61283e2172e48f0313270a9ddab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5581be26162fb34275538a7c4660b5f4e69a5d2a", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEmVxnM0/G1oDSm5ipxT9CfVmUEWwFAlrhNvYACgkQxT9CfVmU\nEWwm2Af+PDU7Xq+5L1GPgmW7ulzyiRve45rGKrNqnXGgUn/PuvzKupVjEJUBv/qi\nti3zteXnvWFq9wf6AL6CCZD4YygNFrG9NSjUhD3J9jcSpiXRcmLH2oF5/Y3F0H29\nkJNbr/RiNJCB0TNYLkjrFqyc7AzIGznB7xg9NxDhuzw0aK5tAsNtbZkMpMiKluzS\n2SQGkxG+p8c5OIsmZD7aGVI7guePbpgUDTb+jTBf13cixW2rbChc+Z0W7yXFbkIr\nbD9ogP2/46S+x9yqaTc3FuzXQGuoLEsqdVgo95mo7ShR/oVT1lZAhKzVIt49VV1a\nNkLwITsDg7AnsLEgy2rxi3a8Qvl4gg==\n=gz0b\n-----END PGP SIGNATURE-----", "payload": "tree 10af11f8cc35f61283e2172e48f0313270a9ddab\nparent efb8069cfc8b587994d842936b4d14d257f480c4\nauthor Tibo <delor.thibault@gmail.com> 1524557409 +1000\ncommitter Tibo <delor.thibault@gmail.com> 1524709110 +1000\n\nUse failure for FormattingError\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5581be26162fb34275538a7c4660b5f4e69a5d2a", "html_url": "https://github.com/rust-lang/rust/commit/5581be26162fb34275538a7c4660b5f4e69a5d2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5581be26162fb34275538a7c4660b5f4e69a5d2a/comments", "author": {"login": "t-botz", "id": 693797, "node_id": "MDQ6VXNlcjY5Mzc5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/693797?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-botz", "html_url": "https://github.com/t-botz", "followers_url": "https://api.github.com/users/t-botz/followers", "following_url": "https://api.github.com/users/t-botz/following{/other_user}", "gists_url": "https://api.github.com/users/t-botz/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-botz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-botz/subscriptions", "organizations_url": "https://api.github.com/users/t-botz/orgs", "repos_url": "https://api.github.com/users/t-botz/repos", "events_url": "https://api.github.com/users/t-botz/events{/privacy}", "received_events_url": "https://api.github.com/users/t-botz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "t-botz", "id": 693797, "node_id": "MDQ6VXNlcjY5Mzc5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/693797?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-botz", "html_url": "https://github.com/t-botz", "followers_url": "https://api.github.com/users/t-botz/followers", "following_url": "https://api.github.com/users/t-botz/following{/other_user}", "gists_url": "https://api.github.com/users/t-botz/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-botz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-botz/subscriptions", "organizations_url": "https://api.github.com/users/t-botz/orgs", "repos_url": "https://api.github.com/users/t-botz/repos", "events_url": "https://api.github.com/users/t-botz/events{/privacy}", "received_events_url": "https://api.github.com/users/t-botz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efb8069cfc8b587994d842936b4d14d257f480c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/efb8069cfc8b587994d842936b4d14d257f480c4", "html_url": "https://github.com/rust-lang/rust/commit/efb8069cfc8b587994d842936b4d14d257f480c4"}], "stats": {"total": 27, "additions": 11, "deletions": 16}, "files": [{"sha": "9b1168f5d127945bf8fc340171757582df6e64fe", "filename": "src/lib.rs", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5581be26162fb34275538a7c4660b5f4e69a5d2a/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5581be26162fb34275538a7c4660b5f4e69a5d2a/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=5581be26162fb34275538a7c4660b5f4e69a5d2a", "patch": "@@ -19,6 +19,7 @@\n #[macro_use]\n extern crate derive_new;\n extern crate diff;\n+extern crate failure;\n extern crate getopts;\n extern crate itertools;\n #[cfg(test)]\n@@ -53,6 +54,7 @@ use syntax::errors::{DiagnosticBuilder, Handler};\n use syntax::parse::{self, ParseSess};\n \n use comment::{CharClasses, FullCodeCharKind, LineClasses};\n+use failure::Fail;\n use issues::{BadIssueSeeker, Issue};\n use shape::Indent;\n use utils::use_colored_tty;\n@@ -109,33 +111,26 @@ pub(crate) type FileMap = Vec<FileRecord>;\n \n pub(crate) type FileRecord = (FileName, String);\n \n-#[derive(Clone, Copy)]\n+#[derive(Fail, Debug, Clone, Copy)]\n pub enum ErrorKind {\n     // Line has exceeded character limit (found, maximum)\n+    #[fail(\n+        display = \"line formatted, but exceeded maximum width (maximum: {} (see `max_width` option), found: {})\",\n+        _0,\n+        _1\n+    )]\n     LineOverflow(usize, usize),\n     // Line ends in whitespace\n+    #[fail(display = \"left behind trailing whitespace\")]\n     TrailingWhitespace,\n     // TODO or FIXME item without an issue number\n+    #[fail(display = \"found {}\", _0)]\n     BadIssue(Issue),\n     // License check has failed\n+    #[fail(display = \"license check failed\")]\n     LicenseCheck,\n }\n \n-impl fmt::Display for ErrorKind {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n-        match *self {\n-            ErrorKind::LineOverflow(found, maximum) => write!(\n-                fmt,\n-                \"line formatted, but exceeded maximum width (maximum: {} (see `max_width` option), found: {})\",\n-                maximum, found,\n-            ),\n-            ErrorKind::TrailingWhitespace => write!(fmt, \"left behind trailing whitespace\"),\n-            ErrorKind::BadIssue(issue) => write!(fmt, \"found {}\", issue),\n-            ErrorKind::LicenseCheck => write!(fmt, \"license check failed\"),\n-        }\n-    }\n-}\n-\n // Formatting errors that are identified *after* rustfmt has run.\n struct FormattingError {\n     line: usize,"}]}