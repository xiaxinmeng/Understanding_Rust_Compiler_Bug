{"sha": "b60b4114959a0f0bfa4c1099c5c1af9a35edeb45", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MGI0MTE0OTU5YTBmMGJmYTRjMTA5OWM1YzFhZjlhMzVlZGViNDU=", "commit": {"author": {"name": "Ian Daniher", "email": "it.daniher@gmail.com", "date": "2013-11-17T01:26:01Z"}, "committer": {"name": "Ian Daniher", "email": "it.daniher@gmail.com", "date": "2013-11-17T01:26:01Z"}, "message": "fix 10468, propagate optimization level as rustc::driver::session::OptLevel", "tree": {"sha": "22581e8a6c6027a9857344672aa70c3407394c3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22581e8a6c6027a9857344672aa70c3407394c3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b60b4114959a0f0bfa4c1099c5c1af9a35edeb45", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b60b4114959a0f0bfa4c1099c5c1af9a35edeb45", "html_url": "https://github.com/rust-lang/rust/commit/b60b4114959a0f0bfa4c1099c5c1af9a35edeb45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b60b4114959a0f0bfa4c1099c5c1af9a35edeb45/comments", "author": {"login": "itdaniher", "id": 22683, "node_id": "MDQ6VXNlcjIyNjgz", "avatar_url": "https://avatars.githubusercontent.com/u/22683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itdaniher", "html_url": "https://github.com/itdaniher", "followers_url": "https://api.github.com/users/itdaniher/followers", "following_url": "https://api.github.com/users/itdaniher/following{/other_user}", "gists_url": "https://api.github.com/users/itdaniher/gists{/gist_id}", "starred_url": "https://api.github.com/users/itdaniher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itdaniher/subscriptions", "organizations_url": "https://api.github.com/users/itdaniher/orgs", "repos_url": "https://api.github.com/users/itdaniher/repos", "events_url": "https://api.github.com/users/itdaniher/events{/privacy}", "received_events_url": "https://api.github.com/users/itdaniher/received_events", "type": "User", "site_admin": false}, "committer": {"login": "itdaniher", "id": 22683, "node_id": "MDQ6VXNlcjIyNjgz", "avatar_url": "https://avatars.githubusercontent.com/u/22683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itdaniher", "html_url": "https://github.com/itdaniher", "followers_url": "https://api.github.com/users/itdaniher/followers", "following_url": "https://api.github.com/users/itdaniher/following{/other_user}", "gists_url": "https://api.github.com/users/itdaniher/gists{/gist_id}", "starred_url": "https://api.github.com/users/itdaniher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itdaniher/subscriptions", "organizations_url": "https://api.github.com/users/itdaniher/orgs", "repos_url": "https://api.github.com/users/itdaniher/repos", "events_url": "https://api.github.com/users/itdaniher/events{/privacy}", "received_events_url": "https://api.github.com/users/itdaniher/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90754ae9c95c18841c0200d77da917af5ecde5ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/90754ae9c95c18841c0200d77da917af5ecde5ee", "html_url": "https://github.com/rust-lang/rust/commit/90754ae9c95c18841c0200d77da917af5ecde5ee"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "31515f0cb727c23c43865cfe759d887ebb5da87b", "filename": "src/librustpkg/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b60b4114959a0f0bfa4c1099c5c1af9a35edeb45/src%2Flibrustpkg%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60b4114959a0f0bfa4c1099c5c1af9a35edeb45/src%2Flibrustpkg%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fcontext.rs?ref=b60b4114959a0f0bfa4c1099c5c1af9a35edeb45", "patch": "@@ -11,7 +11,7 @@\n // Context data structure used by rustpkg\n \n use extra::workcache;\n-use rustc::driver::session::{OptLevel, No};\n+use rustc::driver::session;\n \n use std::hashmap::HashSet;\n \n@@ -88,7 +88,7 @@ pub struct RustcFlags {\n     // Extra arguments to pass to rustc with the --link-args flag\n     link_args: Option<~str>,\n     // Optimization level. 0 = default. -O = 2.\n-    optimization_level: OptLevel,\n+    optimization_level: session::OptLevel,\n     // True if the user passed in --save-temps\n     save_temps: bool,\n     // Target (defaults to rustc's default target)\n@@ -224,7 +224,7 @@ impl RustcFlags {\n             linker: None,\n             link_args: None,\n             compile_upto: Nothing,\n-            optimization_level: No,\n+            optimization_level: session::Default,\n             save_temps: false,\n             target: None,\n             target_cpu: None,"}, {"sha": "6c5ac603dc44b02d9f437f4e388b44b858dbb6fc", "filename": "src/librustpkg/package_source.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b60b4114959a0f0bfa4c1099c5c1af9a35edeb45/src%2Flibrustpkg%2Fpackage_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60b4114959a0f0bfa4c1099c5c1af9a35edeb45/src%2Flibrustpkg%2Fpackage_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpackage_source.rs?ref=b60b4114959a0f0bfa4c1099c5c1af9a35edeb45", "patch": "@@ -28,6 +28,8 @@ use workcache_support::{digest_only_date, digest_file_with_date, crate_tag};\n use extra::workcache;\n use extra::treemap::TreeMap;\n \n+use rustc::driver::session;\n+\n // An enumeration of the unpacked source of a package workspace.\n // This contains a list of files found in the source workspace.\n #[deriving(Clone)]\n@@ -425,6 +427,7 @@ impl PkgSrc {\n                     }\n                     debug!(\"Compiling crate {}; its output will be in {}\",\n                            subpath.display(), sub_dir.display());\n+                    let opt: session::OptLevel = subcx.context.rustc_flags.optimization_level;\n                     let result = compile_crate(&subcx,\n                                                exec,\n                                                &id,\n@@ -433,7 +436,7 @@ impl PkgSrc {\n                                                &mut (sub_deps.clone()),\n                                                sub_flags,\n                                                subcfgs,\n-                                               false,\n+                                               opt,\n                                                what);\n                     // XXX: result is an Option<Path>. The following code did not take that\n                     // into account. I'm not sure if the workcache really likes seeing the"}, {"sha": "49c497584fd52193cf1e552b67e386bd55a32941", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b60b4114959a0f0bfa4c1099c5c1af9a35edeb45/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60b4114959a0f0bfa4c1099c5c1af9a35edeb45/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=b60b4114959a0f0bfa4c1099c5c1af9a35edeb45", "patch": "@@ -175,7 +175,7 @@ pub fn compile_input(context: &BuildContext,\n                      deps: &mut DepMap,\n                      flags: &[~str],\n                      cfgs: &[~str],\n-                     opt: bool,\n+                     opt: session::OptLevel,\n                      what: OutputType) -> Option<Path> {\n     assert!(in_file.component_iter().nth(1).is_some());\n     let input = driver::file_input(in_file.clone());\n@@ -241,7 +241,7 @@ pub fn compile_input(context: &BuildContext,\n \n     let options = @session::options {\n         crate_type: crate_type,\n-        optimize: if opt { session::Aggressive } else { session::No },\n+        optimize: opt,\n         test: what == Test || what == Bench,\n         maybe_sysroot: Some(sysroot_to_use),\n         addl_lib_search_paths: @mut context.additional_library_paths(),\n@@ -408,7 +408,7 @@ pub fn compile_crate(ctxt: &BuildContext,\n                      deps: &mut DepMap,\n                      flags: &[~str],\n                      cfgs: &[~str],\n-                     opt: bool,\n+                     opt: session::OptLevel,\n                      what: OutputType) -> Option<Path> {\n     debug!(\"compile_crate: crate={}, workspace={}\", crate.display(), workspace.display());\n     debug!(\"compile_crate: short_name = {}, flags =...\", pkg_id.to_str());"}]}