{"sha": "188bbf840dd858edb929459bd3536219fa062077", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4OGJiZjg0MGRkODU4ZWRiOTI5NDU5YmQzNTM2MjE5ZmEwNjIwNzc=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-28T14:18:11Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-08-05T16:30:37Z"}, "message": "forbid complex types for generic parameters", "tree": {"sha": "112d1de6447da00075df2050c28b8e0490188100", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/112d1de6447da00075df2050c28b8e0490188100"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/188bbf840dd858edb929459bd3536219fa062077", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/188bbf840dd858edb929459bd3536219fa062077", "html_url": "https://github.com/rust-lang/rust/commit/188bbf840dd858edb929459bd3536219fa062077", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/188bbf840dd858edb929459bd3536219fa062077/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "289e5fca7ecdb03db97be9d89ae908f253a3f263", "url": "https://api.github.com/repos/rust-lang/rust/commits/289e5fca7ecdb03db97be9d89ae908f253a3f263", "html_url": "https://github.com/rust-lang/rust/commit/289e5fca7ecdb03db97be9d89ae908f253a3f263"}], "stats": {"total": 93, "additions": 80, "deletions": 13}, "files": [{"sha": "981437c5e846b60be50794f941d9bcd9517c57a3", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/188bbf840dd858edb929459bd3536219fa062077/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188bbf840dd858edb929459bd3536219fa062077/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=188bbf840dd858edb929459bd3536219fa062077", "patch": "@@ -326,21 +326,36 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n             GenericParamKind::Type { default: Some(ref ty), .. } => icx.to_ty(ty),\n             GenericParamKind::Const { ty: ref hir_ty, .. } => {\n                 let ty = icx.to_ty(hir_ty);\n-                let err = match ty.peel_refs().kind {\n-                    ty::FnPtr(_) => Some(\"function pointers\"),\n-                    ty::RawPtr(_) => Some(\"raw pointers\"),\n-                    _ => None,\n+                let err_ty_str;\n+                let err = if tcx.features().min_const_generics {\n+                    match ty.kind {\n+                        ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Error(_) => None,\n+                        _ => {\n+                            err_ty_str = format!(\"`{}`\", ty);\n+                            Some(err_ty_str.as_str())\n+                        }\n+                    }\n+                } else {\n+                    match ty.peel_refs().kind {\n+                        ty::FnPtr(_) => Some(\"function pointers\"),\n+                        ty::RawPtr(_) => Some(\"raw pointers\"),\n+                        _ => None,\n+                    }\n                 };\n                 if let Some(unsupported_type) = err {\n-                    tcx.sess\n-                        .struct_span_err(\n-                            hir_ty.span,\n-                            &format!(\n-                                \"using {} as const generic parameters is forbidden\",\n-                                unsupported_type\n-                            ),\n-                        )\n-                        .emit();\n+                    let mut err = tcx.sess.struct_span_err(\n+                        hir_ty.span,\n+                        &format!(\n+                            \"using {} as const generic parameters is forbidden\",\n+                            unsupported_type\n+                        ),\n+                    );\n+\n+                    if tcx.features().min_const_generics {\n+                        err.note(\"the only supported types are integers, `bool` and `char`\").emit()\n+                    } else {\n+                        err.emit();\n+                    }\n                 };\n                 if traits::search_for_structural_match_violation(param.hir_id, param.span, tcx, ty)\n                     .is_some()"}, {"sha": "a396fa83aa629c014070723fb3ae32c37bca3815", "filename": "src/test/ui/const-generics/min_const_generics/complex-types.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/188bbf840dd858edb929459bd3536219fa062077/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188bbf840dd858edb929459bd3536219fa062077/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.rs?ref=188bbf840dd858edb929459bd3536219fa062077", "patch": "@@ -0,0 +1,18 @@\n+#![feature(min_const_generics)]\n+\n+struct Foo<const N: [u8; 0]>;\n+//~^ ERROR using `[u8; 0]` as const generic parameters is forbidden\n+\n+struct Bar<const N: ()>;\n+//~^ ERROR using `()` as const generic parameters is forbidden\n+\n+#[derive(PartialEq, Eq)]\n+struct No;\n+\n+struct Fez<const N: No>;\n+//~^ ERROR using `No` as const generic parameters is forbidden\n+\n+struct Faz<const N: &'static u8>;\n+//~^ ERROR using `&'static u8` as const generic parameters is forbidden\n+\n+fn main() {}"}, {"sha": "65c7aec36d6b10ec21f35e11f3cb8ef3ed2318a3", "filename": "src/test/ui/const-generics/min_const_generics/complex-types.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/188bbf840dd858edb929459bd3536219fa062077/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/188bbf840dd858edb929459bd3536219fa062077/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.stderr?ref=188bbf840dd858edb929459bd3536219fa062077", "patch": "@@ -0,0 +1,34 @@\n+error: using `[u8; 0]` as const generic parameters is forbidden\n+  --> $DIR/complex-types.rs:3:21\n+   |\n+LL | struct Foo<const N: [u8; 0]>;\n+   |                     ^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+\n+error: using `()` as const generic parameters is forbidden\n+  --> $DIR/complex-types.rs:6:21\n+   |\n+LL | struct Bar<const N: ()>;\n+   |                     ^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+\n+error: using `No` as const generic parameters is forbidden\n+  --> $DIR/complex-types.rs:12:21\n+   |\n+LL | struct Fez<const N: No>;\n+   |                     ^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+\n+error: using `&'static u8` as const generic parameters is forbidden\n+  --> $DIR/complex-types.rs:15:21\n+   |\n+LL | struct Faz<const N: &'static u8>;\n+   |                     ^^^^^^^^^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+\n+error: aborting due to 4 previous errors\n+"}]}