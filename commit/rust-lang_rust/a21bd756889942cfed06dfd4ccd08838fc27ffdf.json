{"sha": "a21bd756889942cfed06dfd4ccd08838fc27ffdf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMWJkNzU2ODg5OTQyY2ZlZDA2ZGZkNGNjZDA4ODM4ZmMyN2ZmZGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-28T09:52:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-28T09:52:31Z"}, "message": "Auto merge of #57899 - davidtwco:issue-56685, r=estebank\n\nUnused variable suggestions apply on all patterns.\n\nFixes #56685.\n\nThis PR extends existing suggestions to prefix unused variable bindings in match arms with an underscore so that it applies to all patterns in a match arm.\n\nr? @estebank\ncc @alexcrichton (since you filed the issue)", "tree": {"sha": "fe7516c2eef44bfee19d7e8490e8accf835f6ccb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe7516c2eef44bfee19d7e8490e8accf835f6ccb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a21bd756889942cfed06dfd4ccd08838fc27ffdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a21bd756889942cfed06dfd4ccd08838fc27ffdf", "html_url": "https://github.com/rust-lang/rust/commit/a21bd756889942cfed06dfd4ccd08838fc27ffdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a21bd756889942cfed06dfd4ccd08838fc27ffdf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc4d1e5bb0c256c352a4d01112a55d93dcfa6081", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc4d1e5bb0c256c352a4d01112a55d93dcfa6081", "html_url": "https://github.com/rust-lang/rust/commit/cc4d1e5bb0c256c352a4d01112a55d93dcfa6081"}, {"sha": "5f021e0023b3b471c5c9c39e07f70d344cc604b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f021e0023b3b471c5c9c39e07f70d344cc604b0", "html_url": "https://github.com/rust-lang/rust/commit/5f021e0023b3b471c5c9c39e07f70d344cc604b0"}], "stats": {"total": 238, "additions": 179, "deletions": 59}, "files": [{"sha": "4ef8e1a0cf95bb53223785988fa128fa08d51627", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 50, "deletions": 34, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=a21bd756889942cfed06dfd4ccd08838fc27ffdf", "patch": "@@ -105,7 +105,7 @@ use lint;\n use errors::Applicability;\n use util::nodemap::{NodeMap, HirIdMap, HirIdSet};\n \n-use std::collections::VecDeque;\n+use std::collections::{BTreeMap, VecDeque};\n use std::{fmt, u32};\n use std::io::prelude::*;\n use std::io;\n@@ -1446,7 +1446,7 @@ fn check_local<'a, 'tcx>(this: &mut Liveness<'a, 'tcx>, local: &'tcx hir::Local)\n         None => {\n             this.pat_bindings(&local.pat, |this, ln, var, sp, id| {\n                 let span = local.pat.simple_ident().map_or(sp, |ident| ident.span);\n-                this.warn_about_unused(span, id, ln, var);\n+                this.warn_about_unused(vec![span], id, ln, var);\n             })\n         }\n     }\n@@ -1455,12 +1455,29 @@ fn check_local<'a, 'tcx>(this: &mut Liveness<'a, 'tcx>, local: &'tcx hir::Local)\n }\n \n fn check_arm<'a, 'tcx>(this: &mut Liveness<'a, 'tcx>, arm: &'tcx hir::Arm) {\n-    // only consider the first pattern; any later patterns must have\n-    // the same bindings, and we also consider the first pattern to be\n-    // the \"authoritative\" set of ids\n-    this.arm_pats_bindings(arm.pats.first().map(|p| &**p), |this, ln, var, sp, id| {\n-        this.warn_about_unused(sp, id, ln, var);\n-    });\n+    // Only consider the variable from the first pattern; any later patterns must have\n+    // the same bindings, and we also consider the first pattern to be the \"authoritative\" set of\n+    // ids. However, we should take the spans of variables with the same name from the later\n+    // patterns so the suggestions to prefix with underscores will apply to those too.\n+    let mut vars: BTreeMap<String, (LiveNode, Variable, HirId, Vec<Span>)> = Default::default();\n+\n+    for pat in &arm.pats {\n+        this.arm_pats_bindings(Some(&*pat), |this, ln, var, sp, id| {\n+            let name = this.ir.variable_name(var);\n+            vars.entry(name)\n+                .and_modify(|(.., spans)| {\n+                    spans.push(sp);\n+                })\n+                .or_insert_with(|| {\n+                    (ln, var, id, vec![sp])\n+                });\n+        });\n+    }\n+\n+    for (_, (ln, var, id, spans)) in vars {\n+        this.warn_about_unused(spans, id, ln, var);\n+    }\n+\n     intravisit::walk_arm(this, arm);\n }\n \n@@ -1551,7 +1568,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 let var = self.variable(hir_id, sp);\n                 // Ignore unused self.\n                 if ident.name != keywords::SelfLower.name() {\n-                    if !self.warn_about_unused(sp, hir_id, entry_ln, var) {\n+                    if !self.warn_about_unused(vec![sp], hir_id, entry_ln, var) {\n                         if self.live_on_entry(entry_ln, var).is_none() {\n                             self.report_dead_assign(hir_id, sp, var, true);\n                         }\n@@ -1563,14 +1580,14 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n     fn warn_about_unused_or_dead_vars_in_pat(&mut self, pat: &hir::Pat) {\n         self.pat_bindings(pat, |this, ln, var, sp, id| {\n-            if !this.warn_about_unused(sp, id, ln, var) {\n+            if !this.warn_about_unused(vec![sp], id, ln, var) {\n                 this.warn_about_dead_assign(sp, id, ln, var);\n             }\n         })\n     }\n \n     fn warn_about_unused(&self,\n-                         sp: Span,\n+                         spans: Vec<Span>,\n                          hir_id: HirId,\n                          ln: LiveNode,\n                          var: Variable)\n@@ -1587,33 +1604,36 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                     self.assigned_on_exit(ln, var).is_some()\n                 };\n \n-                let suggest_underscore_msg = format!(\"consider using `_{}` instead\", name);\n-\n                 if is_assigned {\n-                    self.ir.tcx\n-                        .lint_hir_note(lint::builtin::UNUSED_VARIABLES, hir_id, sp,\n-                                       &format!(\"variable `{}` is assigned to, but never used\",\n-                                                name),\n-                                       &suggest_underscore_msg);\n+                    self.ir.tcx.lint_hir_note(\n+                        lint::builtin::UNUSED_VARIABLES,\n+                        hir_id,\n+                        spans.clone(),\n+                        &format!(\"variable `{}` is assigned to, but never used\", name),\n+                        &format!(\"consider using `_{}` instead\", name),\n+                    );\n                 } else if name != \"self\" {\n-                    let msg = format!(\"unused variable: `{}`\", name);\n-                    let mut err = self.ir.tcx\n-                        .struct_span_lint_hir(lint::builtin::UNUSED_VARIABLES, hir_id, sp, &msg);\n+                    let mut err = self.ir.tcx.struct_span_lint_hir(\n+                        lint::builtin::UNUSED_VARIABLES,\n+                        hir_id,\n+                        spans.clone(),\n+                        &format!(\"unused variable: `{}`\", name),\n+                    );\n+\n                     if self.ir.variable_is_shorthand(var) {\n-                        err.span_suggestion(\n-                            sp,\n+                        err.multipart_suggestion(\n                             \"try ignoring the field\",\n-                            format!(\"{}: _\", name),\n-                            Applicability::MachineApplicable,\n+                            spans.iter().map(|span| (*span, format!(\"{}: _\", name))).collect(),\n+                            Applicability::MachineApplicable\n                         );\n                     } else {\n-                        err.span_suggestion_short(\n-                            sp,\n-                            &suggest_underscore_msg,\n-                            format!(\"_{}\", name),\n+                        err.multipart_suggestion(\n+                            \"consider prefixing with an underscore\",\n+                            spans.iter().map(|span| (*span, format!(\"_{}\", name))).collect(),\n                             Applicability::MachineApplicable,\n                         );\n                     }\n+\n                     err.emit()\n                 }\n             }\n@@ -1623,11 +1643,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         }\n     }\n \n-    fn warn_about_dead_assign(&self,\n-                              sp: Span,\n-                              hir_id: HirId,\n-                              ln: LiveNode,\n-                              var: Variable) {\n+    fn warn_about_dead_assign(&self, sp: Span, hir_id: HirId, ln: LiveNode, var: Variable) {\n         if self.live_on_exit(ln, var).is_none() {\n             self.report_dead_assign(hir_id, sp, var, false);\n         }"}, {"sha": "51c0c757a80c16204d16a3a6f831484e513ab3a1", "filename": "src/test/ui/issues/issue-17999.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Ftest%2Fui%2Fissues%2Fissue-17999.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Ftest%2Fui%2Fissues%2Fissue-17999.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17999.stderr?ref=a21bd756889942cfed06dfd4ccd08838fc27ffdf", "patch": "@@ -2,7 +2,7 @@ error: unused variable: `x`\n   --> $DIR/issue-17999.rs:5:13\n    |\n LL |         let x = (); //~ ERROR: unused variable: `x`\n-   |             ^ help: consider using `_x` instead\n+   |             ^ help: consider prefixing with an underscore: `_x`\n    |\n note: lint level defined here\n   --> $DIR/issue-17999.rs:1:9\n@@ -14,7 +14,7 @@ error: unused variable: `a`\n   --> $DIR/issue-17999.rs:7:13\n    |\n LL |             a => {} //~ ERROR: unused variable: `a`\n-   |             ^ help: consider using `_a` instead\n+   |             ^ help: consider prefixing with an underscore: `_a`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bc4949da6f7859a28469802d95eef6de06bf33de", "filename": "src/test/ui/issues/issue-22599.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Ftest%2Fui%2Fissues%2Fissue-22599.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Ftest%2Fui%2Fissues%2Fissue-22599.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22599.stderr?ref=a21bd756889942cfed06dfd4ccd08838fc27ffdf", "patch": "@@ -2,7 +2,7 @@ error: unused variable: `a`\n   --> $DIR/issue-22599.rs:8:19\n    |\n LL |     v = match 0 { a => 0 }; //~ ERROR: unused variable: `a`\n-   |                   ^ help: consider using `_a` instead\n+   |                   ^ help: consider prefixing with an underscore: `_a`\n    |\n note: lint level defined here\n   --> $DIR/issue-22599.rs:1:9"}, {"sha": "f320c99ed15d10c4507dbfd1f47b73a607aef192", "filename": "src/test/ui/issues/issue-56685.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Ftest%2Fui%2Fissues%2Fissue-56685.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Ftest%2Fui%2Fissues%2Fissue-56685.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56685.rs?ref=a21bd756889942cfed06dfd4ccd08838fc27ffdf", "patch": "@@ -0,0 +1,44 @@\n+#![allow(dead_code)]\n+#![deny(unused_variables)]\n+\n+// This test aims to check that unused variable suggestions update bindings in all\n+// match arms.\n+\n+fn main() {\n+    enum E {\n+        A(i32,),\n+        B(i32,),\n+    }\n+\n+    match E::A(1) {\n+        E::A(x) | E::B(x) => {}\n+        //~^ ERROR unused variable: `x`\n+    }\n+\n+    enum F {\n+        A(i32, i32,),\n+        B(i32, i32,),\n+        C(i32, i32,),\n+    }\n+\n+    let _ = match F::A(1, 2) {\n+        F::A(x, y) | F::B(x, y) => { y },\n+        //~^ ERROR unused variable: `x`\n+        F::C(a, b) => { 3 }\n+        //~^ ERROR unused variable: `a`\n+        //~^^ ERROR unused variable: `b`\n+    };\n+\n+    let _ = if let F::A(x, y) | F::B(x, y) = F::A(1, 2) {\n+    //~^ ERROR unused variable: `x`\n+        y\n+    } else {\n+        3\n+    };\n+\n+    while let F::A(x, y) | F::B(x, y) = F::A(1, 2) {\n+    //~^ ERROR unused variable: `x`\n+        let _ = y;\n+        break;\n+    }\n+}"}, {"sha": "4a461c72b2417204a97f4ab3e71d38850696acf3", "filename": "src/test/ui/issues/issue-56685.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Ftest%2Fui%2Fissues%2Fissue-56685.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Ftest%2Fui%2Fissues%2Fissue-56685.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56685.stderr?ref=a21bd756889942cfed06dfd4ccd08838fc27ffdf", "patch": "@@ -0,0 +1,60 @@\n+error: unused variable: `x`\n+  --> $DIR/issue-56685.rs:14:14\n+   |\n+LL |         E::A(x) | E::B(x) => {}\n+   |              ^         ^\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-56685.rs:2:9\n+   |\n+LL | #![deny(unused_variables)]\n+   |         ^^^^^^^^^^^^^^^^\n+help: consider prefixing with an underscore\n+   |\n+LL |         E::A(_x) | E::B(_x) => {}\n+   |              ^^         ^^\n+\n+error: unused variable: `x`\n+  --> $DIR/issue-56685.rs:25:14\n+   |\n+LL |         F::A(x, y) | F::B(x, y) => { y },\n+   |              ^            ^\n+help: consider prefixing with an underscore\n+   |\n+LL |         F::A(_x, y) | F::B(_x, y) => { y },\n+   |              ^^            ^^\n+\n+error: unused variable: `a`\n+  --> $DIR/issue-56685.rs:27:14\n+   |\n+LL |         F::C(a, b) => { 3 }\n+   |              ^ help: consider prefixing with an underscore: `_a`\n+\n+error: unused variable: `b`\n+  --> $DIR/issue-56685.rs:27:17\n+   |\n+LL |         F::C(a, b) => { 3 }\n+   |                 ^ help: consider prefixing with an underscore: `_b`\n+\n+error: unused variable: `x`\n+  --> $DIR/issue-56685.rs:32:25\n+   |\n+LL |     let _ = if let F::A(x, y) | F::B(x, y) = F::A(1, 2) {\n+   |                         ^            ^\n+help: consider prefixing with an underscore\n+   |\n+LL |     let _ = if let F::A(_x, y) | F::B(_x, y) = F::A(1, 2) {\n+   |                         ^^            ^^\n+\n+error: unused variable: `x`\n+  --> $DIR/issue-56685.rs:39:20\n+   |\n+LL |     while let F::A(x, y) | F::B(x, y) = F::A(1, 2) {\n+   |                    ^            ^\n+help: consider prefixing with an underscore\n+   |\n+LL |     while let F::A(_x, y) | F::B(_x, y) = F::A(1, 2) {\n+   |                    ^^            ^^\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "8fd98e0a3db2ec0f3877edbed639d56e55823589", "filename": "src/test/ui/lint/issue-47390-unused-variable-in-struct-pattern.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr?ref=a21bd756889942cfed06dfd4ccd08838fc27ffdf", "patch": "@@ -2,7 +2,7 @@ warning: unused variable: `i_think_continually`\n   --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:26:9\n    |\n LL |     let i_think_continually = 2;\n-   |         ^^^^^^^^^^^^^^^^^^^ help: consider using `_i_think_continually` instead\n+   |         ^^^^^^^^^^^^^^^^^^^ help: consider prefixing with an underscore: `_i_think_continually`\n    |\n note: lint level defined here\n   --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:5:9\n@@ -15,19 +15,19 @@ warning: unused variable: `mut_unused_var`\n   --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:33:13\n    |\n LL |     let mut mut_unused_var = 1;\n-   |             ^^^^^^^^^^^^^^ help: consider using `_mut_unused_var` instead\n+   |             ^^^^^^^^^^^^^^ help: consider prefixing with an underscore: `_mut_unused_var`\n \n warning: unused variable: `var`\n   --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:35:14\n    |\n LL |     let (mut var, unused_var) = (1, 2);\n-   |              ^^^ help: consider using `_var` instead\n+   |              ^^^ help: consider prefixing with an underscore: `_var`\n \n warning: unused variable: `unused_var`\n   --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:35:19\n    |\n LL |     let (mut var, unused_var) = (1, 2);\n-   |                   ^^^^^^^^^^ help: consider using `_unused_var` instead\n+   |                   ^^^^^^^^^^ help: consider prefixing with an underscore: `_unused_var`\n \n warning: unused variable: `corridors_of_light`\n   --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:37:26"}, {"sha": "f796a14d637962a138e9d8053cf0ad3cc39c8f94", "filename": "src/test/ui/lint/lint-removed-allow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Ftest%2Fui%2Flint%2Flint-removed-allow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Ftest%2Fui%2Flint%2Flint-removed-allow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-removed-allow.stderr?ref=a21bd756889942cfed06dfd4ccd08838fc27ffdf", "patch": "@@ -2,7 +2,7 @@ error: unused variable: `unused`\n   --> $DIR/lint-removed-allow.rs:8:17\n    |\n LL | fn main() { let unused = (); } //~ ERROR unused\n-   |                 ^^^^^^ help: consider using `_unused` instead\n+   |                 ^^^^^^ help: consider prefixing with an underscore: `_unused`\n    |\n note: lint level defined here\n   --> $DIR/lint-removed-allow.rs:7:8"}, {"sha": "d46ef6b9237fd3dda0e8828fa157e956f9786044", "filename": "src/test/ui/lint/lint-removed-cmdline.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Ftest%2Fui%2Flint%2Flint-removed-cmdline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Ftest%2Fui%2Flint%2Flint-removed-cmdline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-removed-cmdline.stderr?ref=a21bd756889942cfed06dfd4ccd08838fc27ffdf", "patch": "@@ -6,7 +6,7 @@ error: unused variable: `unused`\n   --> $DIR/lint-removed-cmdline.rs:12:17\n    |\n LL | fn main() { let unused = (); }\n-   |                 ^^^^^^ help: consider using `_unused` instead\n+   |                 ^^^^^^ help: consider prefixing with an underscore: `_unused`\n    |\n note: lint level defined here\n   --> $DIR/lint-removed-cmdline.rs:11:8"}, {"sha": "55f010348fe1e3c844bc67f7a306ac026ab6891c", "filename": "src/test/ui/lint/lint-removed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Ftest%2Fui%2Flint%2Flint-removed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Ftest%2Fui%2Flint%2Flint-removed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-removed.stderr?ref=a21bd756889942cfed06dfd4ccd08838fc27ffdf", "patch": "@@ -10,7 +10,7 @@ error: unused variable: `unused`\n   --> $DIR/lint-removed.rs:8:17\n    |\n LL | fn main() { let unused = (); } //~ ERROR unused\n-   |                 ^^^^^^ help: consider using `_unused` instead\n+   |                 ^^^^^^ help: consider prefixing with an underscore: `_unused`\n    |\n note: lint level defined here\n   --> $DIR/lint-removed.rs:7:8"}, {"sha": "b2eeeae8f8e6d14b6f33fccf07100c5fd1b4a39f", "filename": "src/test/ui/lint/lint-renamed-allow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Ftest%2Fui%2Flint%2Flint-renamed-allow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Ftest%2Fui%2Flint%2Flint-renamed-allow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-renamed-allow.stderr?ref=a21bd756889942cfed06dfd4ccd08838fc27ffdf", "patch": "@@ -2,7 +2,7 @@ error: unused variable: `unused`\n   --> $DIR/lint-renamed-allow.rs:8:17\n    |\n LL | fn main() { let unused = (); } //~ ERROR unused\n-   |                 ^^^^^^ help: consider using `_unused` instead\n+   |                 ^^^^^^ help: consider prefixing with an underscore: `_unused`\n    |\n note: lint level defined here\n   --> $DIR/lint-renamed-allow.rs:7:8"}, {"sha": "6247ee0aff833358081f6fe6197af4e0c0bf4bca", "filename": "src/test/ui/lint/lint-renamed-cmdline.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Ftest%2Fui%2Flint%2Flint-renamed-cmdline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Ftest%2Fui%2Flint%2Flint-renamed-cmdline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-renamed-cmdline.stderr?ref=a21bd756889942cfed06dfd4ccd08838fc27ffdf", "patch": "@@ -6,7 +6,7 @@ error: unused variable: `unused`\n   --> $DIR/lint-renamed-cmdline.rs:8:17\n    |\n LL | fn main() { let unused = (); }\n-   |                 ^^^^^^ help: consider using `_unused` instead\n+   |                 ^^^^^^ help: consider prefixing with an underscore: `_unused`\n    |\n note: lint level defined here\n   --> $DIR/lint-renamed-cmdline.rs:7:8"}, {"sha": "b140a93ab38bda4dad30baeb9499bc249a808aef", "filename": "src/test/ui/lint/lint-renamed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Ftest%2Fui%2Flint%2Flint-renamed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Ftest%2Fui%2Flint%2Flint-renamed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-renamed.stderr?ref=a21bd756889942cfed06dfd4ccd08838fc27ffdf", "patch": "@@ -10,7 +10,7 @@ error: unused variable: `unused`\n   --> $DIR/lint-renamed.rs:4:17\n    |\n LL | fn main() { let unused = (); } //~ ERROR unused\n-   |                 ^^^^^^ help: consider using `_unused` instead\n+   |                 ^^^^^^ help: consider prefixing with an underscore: `_unused`\n    |\n note: lint level defined here\n   --> $DIR/lint-renamed.rs:3:8"}, {"sha": "f2267f351ddda8bed736ca601eb26c67aff205e5", "filename": "src/test/ui/lint/lint-uppercase-variables.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Ftest%2Fui%2Flint%2Flint-uppercase-variables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Ftest%2Fui%2Flint%2Flint-uppercase-variables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-uppercase-variables.stderr?ref=a21bd756889942cfed06dfd4ccd08838fc27ffdf", "patch": "@@ -8,7 +8,7 @@ warning: unused variable: `Foo`\n   --> $DIR/lint-uppercase-variables.rs:22:9\n    |\n LL |         Foo => {}\n-   |         ^^^ help: consider using `_Foo` instead\n+   |         ^^^ help: consider prefixing with an underscore: `_Foo`\n    |\n note: lint level defined here\n   --> $DIR/lint-uppercase-variables.rs:1:9"}, {"sha": "49795faa59c8dcfe5196b760379abd1cd88a8850", "filename": "src/test/ui/liveness/liveness-unused.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Ftest%2Fui%2Fliveness%2Fliveness-unused.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Ftest%2Fui%2Fliveness%2Fliveness-unused.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-unused.stderr?ref=a21bd756889942cfed06dfd4ccd08838fc27ffdf", "patch": "@@ -15,7 +15,7 @@ error: unused variable: `x`\n   --> $DIR/liveness-unused.rs:8:7\n    |\n LL | fn f1(x: isize) {\n-   |       ^ help: consider using `_x` instead\n+   |       ^ help: consider prefixing with an underscore: `_x`\n    |\n note: lint level defined here\n   --> $DIR/liveness-unused.rs:2:9\n@@ -27,19 +27,19 @@ error: unused variable: `x`\n   --> $DIR/liveness-unused.rs:12:8\n    |\n LL | fn f1b(x: &mut isize) {\n-   |        ^ help: consider using `_x` instead\n+   |        ^ help: consider prefixing with an underscore: `_x`\n \n error: unused variable: `x`\n   --> $DIR/liveness-unused.rs:20:9\n    |\n LL |     let x: isize;\n-   |         ^ help: consider using `_x` instead\n+   |         ^ help: consider prefixing with an underscore: `_x`\n \n error: unused variable: `x`\n   --> $DIR/liveness-unused.rs:25:9\n    |\n LL |     let x = 3;\n-   |         ^ help: consider using `_x` instead\n+   |         ^ help: consider prefixing with an underscore: `_x`\n \n error: variable `x` is assigned to, but never used\n   --> $DIR/liveness-unused.rs:30:13\n@@ -74,25 +74,25 @@ error: unused variable: `i`\n   --> $DIR/liveness-unused.rs:59:12\n    |\n LL |       Some(i) => {\n-   |            ^ help: consider using `_i` instead\n+   |            ^ help: consider prefixing with an underscore: `_i`\n \n error: unused variable: `x`\n   --> $DIR/liveness-unused.rs:79:9\n    |\n LL |     for x in 1..10 { }\n-   |         ^ help: consider using `_x` instead\n+   |         ^ help: consider prefixing with an underscore: `_x`\n \n error: unused variable: `x`\n   --> $DIR/liveness-unused.rs:84:10\n    |\n LL |     for (x, _) in [1, 2, 3].iter().enumerate() { }\n-   |          ^ help: consider using `_x` instead\n+   |          ^ help: consider prefixing with an underscore: `_x`\n \n error: unused variable: `x`\n   --> $DIR/liveness-unused.rs:89:13\n    |\n LL |     for (_, x) in [1, 2, 3].iter().enumerate() {\n-   |             ^ help: consider using `_x` instead\n+   |             ^ help: consider prefixing with an underscore: `_x`\n \n error: variable `x` is assigned to, but never used\n   --> $DIR/liveness-unused.rs:112:9"}, {"sha": "bcc20a0d703c02baebfc798b1e8ee9148624b59b", "filename": "src/test/ui/never-assign-dead-code.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Ftest%2Fui%2Fnever-assign-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Ftest%2Fui%2Fnever-assign-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever-assign-dead-code.stderr?ref=a21bd756889942cfed06dfd4ccd08838fc27ffdf", "patch": "@@ -21,7 +21,7 @@ warning: unused variable: `x`\n   --> $DIR/never-assign-dead-code.rs:9:9\n    |\n LL |     let x: ! = panic!(\"aah\"); //~ WARN unused\n-   |         ^ help: consider using `_x` instead\n+   |         ^ help: consider prefixing with an underscore: `_x`\n    |\n note: lint level defined here\n   --> $DIR/never-assign-dead-code.rs:5:9"}, {"sha": "87b6fb9539fb449c31d4bd72398aab9d020a1a25", "filename": "src/test/ui/proc-macro/attributes-included.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-included.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-included.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-included.stderr?ref=a21bd756889942cfed06dfd4ccd08838fc27ffdf", "patch": "@@ -2,7 +2,7 @@ warning: unused variable: `a`\n   --> $DIR/attributes-included.rs:17:9\n    |\n LL |     let a: i32 = \"foo\"; //~ WARN: unused variable\n-   |         ^ help: consider using `_a` instead\n+   |         ^ help: consider prefixing with an underscore: `_a`\n    |\n note: lint level defined here\n   --> $DIR/attributes-included.rs:4:9"}, {"sha": "964e323b83ed49b29b2423156e017c55aa322930", "filename": "src/test/ui/span/issue-24690.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a21bd756889942cfed06dfd4ccd08838fc27ffdf/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr?ref=a21bd756889942cfed06dfd4ccd08838fc27ffdf", "patch": "@@ -2,7 +2,7 @@ warning: unused variable: `theOtherTwo`\n   --> $DIR/issue-24690.rs:13:9\n    |\n LL |     let theOtherTwo = 2; //~ WARN should have a snake case name\n-   |         ^^^^^^^^^^^ help: consider using `_theOtherTwo` instead\n+   |         ^^^^^^^^^^^ help: consider prefixing with an underscore: `_theOtherTwo`\n    |\n note: lint level defined here\n   --> $DIR/issue-24690.rs:8:9"}]}