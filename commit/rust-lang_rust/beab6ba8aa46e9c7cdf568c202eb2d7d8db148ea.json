{"sha": "beab6ba8aa46e9c7cdf568c202eb2d7d8db148ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlYWI2YmE4YWE0NmU5YzdjZGY1NjhjMjAyZWIyZDdkOGRiMTQ4ZWE=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-25T11:45:09Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-25T11:52:59Z"}, "message": "Add a pass that checks for unreachable alt arms", "tree": {"sha": "3184d61b531fdf60fddd9326033ef5af3e5e662b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3184d61b531fdf60fddd9326033ef5af3e5e662b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/beab6ba8aa46e9c7cdf568c202eb2d7d8db148ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/beab6ba8aa46e9c7cdf568c202eb2d7d8db148ea", "html_url": "https://github.com/rust-lang/rust/commit/beab6ba8aa46e9c7cdf568c202eb2d7d8db148ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/beab6ba8aa46e9c7cdf568c202eb2d7d8db148ea/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd81adabffd01dd3c2c25902314d5e8173835dfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd81adabffd01dd3c2c25902314d5e8173835dfa", "html_url": "https://github.com/rust-lang/rust/commit/bd81adabffd01dd3c2c25902314d5e8173835dfa"}], "stats": {"total": 117, "additions": 115, "deletions": 2}, "files": [{"sha": "60075585c85f2a269553590baacd5099e038e72b", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/beab6ba8aa46e9c7cdf568c202eb2d7d8db148ea/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beab6ba8aa46e9c7cdf568c202eb2d7d8db148ea/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=beab6ba8aa46e9c7cdf568c202eb2d7d8db148ea", "patch": "@@ -138,6 +138,8 @@ fn compile_input(session::session sess, ast::crate_cfg cfg, str input,\n     auto ty_cx = ty::mk_ctxt(sess, d, ast_map, freevars);\n     time[()](time_passes, \"typechecking\",\n              bind typeck::check_crate(ty_cx, crate));\n+    time[()](time_passes, \"alt checking\",\n+             bind middle::check_alt::check_crate(ty_cx, crate));\n     if (sess.get_opts().run_typestate) {\n         time(time_passes, \"typestate checking\",\n              bind middle::tstate::ck::check_crate(ty_cx, crate));"}, {"sha": "6b7a2e9083913894a0e2c52c766283a93744d576", "filename": "src/comp/middle/check_alt.rs", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/beab6ba8aa46e9c7cdf568c202eb2d7d8db148ea/src%2Fcomp%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beab6ba8aa46e9c7cdf568c202eb2d7d8db148ea/src%2Fcomp%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fcheck_alt.rs?ref=beab6ba8aa46e9c7cdf568c202eb2d7d8db148ea", "patch": "@@ -0,0 +1,102 @@\n+import syntax::ast::*;\n+import syntax::visit;\n+\n+fn check_crate(&ty::ctxt tcx, &@crate crate) {\n+    auto v = @rec(visit_expr=bind check_expr(tcx, _, _, _)\n+                  with *visit::default_visitor[()]());\n+    visit::visit_crate(*crate, (), visit::mk_vt(v));\n+    tcx.sess.abort_if_errors();\n+}\n+\n+fn check_expr(&ty::ctxt tcx, &@expr ex, &() s, &visit::vt[()] v) {\n+    visit::visit_expr(ex, s, v);\n+    alt ex.node {\n+      expr_alt(_, ?arms) { check_arms(tcx, arms); }\n+      _ {}\n+    }\n+}\n+\n+fn check_arms(&ty::ctxt tcx, &arm[] arms) {\n+    auto i = 0;\n+    for (arm arm in arms) {\n+        for (@pat arm_pat in arm.pats) {\n+            auto reachable = true;\n+            auto j = 0;\n+            while j < i {\n+                for (@pat prev_pat in arms.(j).pats) {\n+                    if pattern_supersedes(tcx, prev_pat, arm_pat) {\n+                        reachable = false;\n+                    }\n+                }\n+                j += 1;\n+            }\n+            if !reachable {\n+                tcx.sess.span_err(arm_pat.span, \"unreachable pattern\");\n+            }\n+        }\n+        i += 1;\n+    }\n+}\n+\n+fn pattern_supersedes(&ty::ctxt tcx, &@pat a, &@pat b) -> bool {\n+    fn patterns_supersede(&ty::ctxt tcx, &(@pat)[] as, &(@pat)[] bs) -> bool {\n+        auto i = 0;\n+        for (@pat a in as) {\n+            if !pattern_supersedes(tcx, a, bs.(i)) { ret false; }\n+            i += 1;\n+        }\n+        ret true;\n+    }\n+    fn field_patterns_supersede(&ty::ctxt tcx, &field_pat[] fas,\n+                                &field_pat[] fbs) -> bool {\n+        auto wild = @rec(id=0, node=pat_wild, span=rec(lo=0u, hi=0u));\n+        for (field_pat fa in fas) {\n+            auto pb = wild;\n+            for (field_pat fb in fbs) {\n+                if fa.ident == fb.ident { pb = fb.pat; }\n+            }\n+            if !pattern_supersedes(tcx, fa.pat, pb) { ret false; }\n+        }\n+        ret true;\n+    }\n+\n+    alt a.node {\n+      pat_wild | pat_bind(_) { ret true; }\n+      pat_lit(?la) {\n+        alt b.node {\n+          pat_lit(?lb) { ret util::common::lit_eq(la, lb); }\n+          _ { ret false; }\n+        }\n+      }\n+      pat_tag(?va, ?suba) {\n+        alt b.node {\n+          pat_tag(?vb, ?subb) {\n+            ret tcx.def_map.get(a.id) == tcx.def_map.get(b.id) &&\n+                patterns_supersede(tcx, suba, subb);\n+          }\n+          _ { ret false; }\n+        }\n+      }\n+      pat_rec(?suba, _) {\n+        alt b.node {\n+          pat_rec(?subb, _) { ret field_patterns_supersede(tcx, suba, subb); }\n+          _ { ret false; }\n+        }\n+      }\n+      pat_box(?suba) {\n+        alt b.node {\n+          pat_box(?subb) { ret pattern_supersedes(tcx, suba, subb); }\n+          _ { ret pattern_supersedes(tcx, suba, b); }\n+        }\n+      }\n+    }\n+}\n+\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// End:"}, {"sha": "97c6edc23e4f5b101e45c8f8e07902671e8229f1", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/beab6ba8aa46e9c7cdf568c202eb2d7d8db148ea/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beab6ba8aa46e9c7cdf568c202eb2d7d8db148ea/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=beab6ba8aa46e9c7cdf568c202eb2d7d8db148ea", "patch": "@@ -1254,8 +1254,6 @@ fn type_owns_heap_mem(&ctxt cx, &t ty) -> bool {\n         case (ty_port(_)) { result = false; }\n         case (ty_chan(_)) { result = false; }\n         case (ty_task) { result = false; }\n-        case (ty_tup(_)) { result = false; }\n-        case (ty_rec(_)) { result = false; }\n         case (ty_var(_)) { fail \"ty_var in type_owns_heap_mem\"; }\n         case (ty_param(_)) { result = false; }\n     }"}, {"sha": "7c9377bd19d448c95cc33137b14fea5bec6688d0", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/beab6ba8aa46e9c7cdf568c202eb2d7d8db148ea/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/beab6ba8aa46e9c7cdf568c202eb2d7d8db148ea/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=beab6ba8aa46e9c7cdf568c202eb2d7d8db148ea", "patch": "@@ -25,6 +25,7 @@ mod middle {\n     mod ast_map;\n     mod resolve;\n     mod typeck;\n+    mod check_alt;\n     mod alias;\n     mod freevars;\n "}, {"sha": "cfff4794da9c2664c2c5d23c6fb9cba362053c61", "filename": "src/test/compile-fail/unreachable-arm.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/beab6ba8aa46e9c7cdf568c202eb2d7d8db148ea/src%2Ftest%2Fcompile-fail%2Funreachable-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beab6ba8aa46e9c7cdf568c202eb2d7d8db148ea/src%2Ftest%2Fcompile-fail%2Funreachable-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-arm.rs?ref=beab6ba8aa46e9c7cdf568c202eb2d7d8db148ea", "patch": "@@ -0,0 +1,10 @@\n+// error-pattern:unreachable pattern\n+\n+tag foo { a(@foo, int); b(uint); }\n+\n+fn main() {\n+    alt b(1u) {\n+      b(_) | a(@_, 1) {}\n+      a(_, 1) {}\n+    }\n+}"}]}