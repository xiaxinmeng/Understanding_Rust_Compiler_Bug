{"sha": "7a9ffa730740c18d23918add84c40bdf77f17dc0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhOWZmYTczMDc0MGMxOGQyMzkxOGFkZDg0YzQwYmRmNzdmMTdkYzA=", "commit": {"author": {"name": "Crazycolorz5", "email": "Crazycolorz5@gmail.com", "date": "2018-05-25T21:09:32Z"}, "committer": {"name": "Crazycolorz5", "email": "Crazycolorz5@gmail.com", "date": "2018-06-05T02:25:00Z"}, "message": "Added is_like_plus to token, and used that in place of equality comparison to Plus token.", "tree": {"sha": "d70d24f98b998bfa42861fd08de062b48db0881c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d70d24f98b998bfa42861fd08de062b48db0881c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a9ffa730740c18d23918add84c40bdf77f17dc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a9ffa730740c18d23918add84c40bdf77f17dc0", "html_url": "https://github.com/rust-lang/rust/commit/7a9ffa730740c18d23918add84c40bdf77f17dc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a9ffa730740c18d23918add84c40bdf77f17dc0/comments", "author": {"login": "Crazycolorz5", "id": 1497003, "node_id": "MDQ6VXNlcjE0OTcwMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/1497003?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Crazycolorz5", "html_url": "https://github.com/Crazycolorz5", "followers_url": "https://api.github.com/users/Crazycolorz5/followers", "following_url": "https://api.github.com/users/Crazycolorz5/following{/other_user}", "gists_url": "https://api.github.com/users/Crazycolorz5/gists{/gist_id}", "starred_url": "https://api.github.com/users/Crazycolorz5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Crazycolorz5/subscriptions", "organizations_url": "https://api.github.com/users/Crazycolorz5/orgs", "repos_url": "https://api.github.com/users/Crazycolorz5/repos", "events_url": "https://api.github.com/users/Crazycolorz5/events{/privacy}", "received_events_url": "https://api.github.com/users/Crazycolorz5/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Crazycolorz5", "id": 1497003, "node_id": "MDQ6VXNlcjE0OTcwMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/1497003?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Crazycolorz5", "html_url": "https://github.com/Crazycolorz5", "followers_url": "https://api.github.com/users/Crazycolorz5/followers", "following_url": "https://api.github.com/users/Crazycolorz5/following{/other_user}", "gists_url": "https://api.github.com/users/Crazycolorz5/gists{/gist_id}", "starred_url": "https://api.github.com/users/Crazycolorz5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Crazycolorz5/subscriptions", "organizations_url": "https://api.github.com/users/Crazycolorz5/orgs", "repos_url": "https://api.github.com/users/Crazycolorz5/repos", "events_url": "https://api.github.com/users/Crazycolorz5/events{/privacy}", "received_events_url": "https://api.github.com/users/Crazycolorz5/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "682033c4e47cf0cca5b4b96b07123da8807254f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/682033c4e47cf0cca5b4b96b07123da8807254f6", "html_url": "https://github.com/rust-lang/rust/commit/682033c4e47cf0cca5b4b96b07123da8807254f6"}], "stats": {"total": 38, "additions": 29, "deletions": 9}, "files": [{"sha": "a398962f66a581138ce71d5e4a06d82bbd47c66b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7a9ffa730740c18d23918add84c40bdf77f17dc0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a9ffa730740c18d23918add84c40bdf77f17dc0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7a9ffa730740c18d23918add84c40bdf77f17dc0", "patch": "@@ -901,6 +901,19 @@ impl<'a> Parser<'a> {\n             _ => false,\n         }\n     }\n+    \n+    \n+    /// Checks to see if the next token is either `+` or `+=`.\n+    /// Otherwise returns false.\n+    fn check_plus(&mut self) -> bool {\n+        if self.token.is_like_plus() {\n+            true\n+        }\n+        else {\n+                self.expected_tokens.push(TokenType::Token(token::BinOp(token::Plus)));\n+                false\n+        }\n+    }\n \n     /// Expect and consume an `&`. If `&&` is seen, replace it with a single\n     /// `&` and continue. If an `&` is not seen, signal an error.\n@@ -1533,7 +1546,7 @@ impl<'a> Parser<'a> {\n \n             if ts.len() == 1 && !last_comma {\n                 let ty = ts.into_iter().nth(0).unwrap().into_inner();\n-                let maybe_bounds = allow_plus && self.token == token::BinOp(token::Plus);\n+                let maybe_bounds = allow_plus && self.check_plus();\n                 match ty.node {\n                     // `(TY_BOUND_NOPAREN) + BOUND + ...`.\n                     TyKind::Path(None, ref path) if maybe_bounds => {\n@@ -1602,7 +1615,7 @@ impl<'a> Parser<'a> {\n                 self.parse_ty_bare_fn(lifetime_defs)?\n             } else {\n                 let path = self.parse_path(PathStyle::Type)?;\n-                let parse_plus = allow_plus && self.check(&token::BinOp(token::Plus));\n+                let parse_plus = allow_plus && self.check_plus();\n                 self.parse_remaining_bounds(lifetime_defs, path, lo, parse_plus)?\n             }\n         } else if self.eat_keyword(keywords::Impl) {\n@@ -1619,7 +1632,7 @@ impl<'a> Parser<'a> {\n             impl_dyn_multi = bounds.len() > 1 || self.prev_token_kind == PrevTokenKind::Plus;\n             TyKind::TraitObject(bounds, TraitObjectSyntax::Dyn)\n         } else if self.check(&token::Question) ||\n-                  self.check_lifetime() && self.look_ahead(1, |t| t == &token::BinOp(token::Plus)) {\n+                  self.check_lifetime() && self.look_ahead(1, |t| t.is_like_plus()) {\n             // Bound list (trait object type)\n             TyKind::TraitObject(self.parse_ty_param_bounds_common(allow_plus)?,\n                                 TraitObjectSyntax::None)\n@@ -1639,7 +1652,7 @@ impl<'a> Parser<'a> {\n                 // Just a type path or bound list (trait object type) starting with a trait.\n                 //   `Type`\n                 //   `Trait1 + Trait2 + 'a`\n-                if allow_plus && self.check(&token::BinOp(token::Plus)) {\n+                if allow_plus && self.check_plus() {\n                     self.parse_remaining_bounds(Vec::new(), path, lo, true)?\n                 } else {\n                     TyKind::Path(None, path)\n@@ -1666,7 +1679,7 @@ impl<'a> Parser<'a> {\n         let poly_trait_ref = PolyTraitRef::new(generic_params, path, lo.to(self.prev_span));\n         let mut bounds = vec![TraitTyParamBound(poly_trait_ref, TraitBoundModifier::None)];\n         if parse_plus {\n-            self.bump(); // `+`\n+            self.eat_plus(); // `+` or `+=` gets split and `+` is discarded \n             bounds.append(&mut self.parse_ty_param_bounds()?);\n         }\n         Ok(TyKind::TraitObject(bounds, TraitObjectSyntax::None))\n@@ -1687,7 +1700,7 @@ impl<'a> Parser<'a> {\n \n     fn maybe_recover_from_bad_type_plus(&mut self, allow_plus: bool, ty: &Ty) -> PResult<'a, ()> {\n         // Do not add `+` to expected tokens.\n-        if !allow_plus || self.token != token::BinOp(token::Plus) {\n+        if !allow_plus || !self.token.is_like_plus() {\n             return Ok(())\n         }\n \n@@ -4841,7 +4854,7 @@ impl<'a> Parser<'a> {\n         while self.check_lifetime() {\n             lifetimes.push(self.expect_lifetime());\n \n-            if !self.eat(&token::BinOp(token::Plus)) {\n+            if !self.eat_plus() {\n                 break\n             }\n         }\n@@ -4987,7 +5000,7 @@ impl<'a> Parser<'a> {\n         let mut seen_type = false;\n         let mut seen_binding = false;\n         loop {\n-            if self.check_lifetime() && self.look_ahead(1, |t| t != &token::BinOp(token::Plus)) {\n+            if self.check_lifetime() && self.look_ahead(1, |t| !t.is_like_plus()) {\n                 // Parse lifetime argument.\n                 lifetimes.push(self.expect_lifetime());\n                 if seen_type || seen_binding {\n@@ -5056,7 +5069,7 @@ impl<'a> Parser<'a> {\n \n         loop {\n             let lo = self.span;\n-            if self.check_lifetime() && self.look_ahead(1, |t| t != &token::BinOp(token::Plus)) {\n+            if self.check_lifetime() && self.look_ahead(1, |t| !t.is_like_plus()) {\n                 let lifetime = self.expect_lifetime();\n                 // Bounds starting with a colon are mandatory, but possibly empty.\n                 self.expect(&token::Colon)?;"}, {"sha": "18665b99e217147d2c033bf83519bf6429565ed5", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7a9ffa730740c18d23918add84c40bdf77f17dc0/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a9ffa730740c18d23918add84c40bdf77f17dc0/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=7a9ffa730740c18d23918add84c40bdf77f17dc0", "patch": "@@ -224,6 +224,13 @@ impl Token {\n             _ => false,\n         }\n     }\n+    \n+    pub fn is_like_plus(&self) -> bool {\n+        match *self {\n+            BinOp(Plus) | BinOpEq(Plus) => true,\n+            _ => false,\n+        }\n+    }\n \n     /// Returns `true` if the token can appear at the start of an expression.\n     pub fn can_begin_expr(&self) -> bool {"}]}