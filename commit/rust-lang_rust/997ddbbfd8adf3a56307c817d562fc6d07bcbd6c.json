{"sha": "997ddbbfd8adf3a56307c817d562fc6d07bcbd6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5N2RkYmJmZDhhZGYzYTU2MzA3YzgxN2Q1NjJmYzZkMDdiY2JkNmM=", "commit": {"author": {"name": "Lucas Kent", "email": "rubickent@gmail.com", "date": "2021-07-31T07:50:12Z"}, "committer": {"name": "Lucas Kent", "email": "rubickent@gmail.com", "date": "2021-08-16T00:18:24Z"}, "message": "Lintcheck always copies in a fresh crate when provided with a crate path\nbut skips directories containing CACHEDIR.TAG e.g. the target/ dir", "tree": {"sha": "ba17a9687dc820f97ef561145126c17c7efe9e06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba17a9687dc820f97ef561145126c17c7efe9e06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/997ddbbfd8adf3a56307c817d562fc6d07bcbd6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/997ddbbfd8adf3a56307c817d562fc6d07bcbd6c", "html_url": "https://github.com/rust-lang/rust/commit/997ddbbfd8adf3a56307c817d562fc6d07bcbd6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/997ddbbfd8adf3a56307c817d562fc6d07bcbd6c/comments", "author": {"login": "rukai", "id": 5120858, "node_id": "MDQ6VXNlcjUxMjA4NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5120858?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rukai", "html_url": "https://github.com/rukai", "followers_url": "https://api.github.com/users/rukai/followers", "following_url": "https://api.github.com/users/rukai/following{/other_user}", "gists_url": "https://api.github.com/users/rukai/gists{/gist_id}", "starred_url": "https://api.github.com/users/rukai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rukai/subscriptions", "organizations_url": "https://api.github.com/users/rukai/orgs", "repos_url": "https://api.github.com/users/rukai/repos", "events_url": "https://api.github.com/users/rukai/events{/privacy}", "received_events_url": "https://api.github.com/users/rukai/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rukai", "id": 5120858, "node_id": "MDQ6VXNlcjUxMjA4NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5120858?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rukai", "html_url": "https://github.com/rukai", "followers_url": "https://api.github.com/users/rukai/followers", "following_url": "https://api.github.com/users/rukai/following{/other_user}", "gists_url": "https://api.github.com/users/rukai/gists{/gist_id}", "starred_url": "https://api.github.com/users/rukai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rukai/subscriptions", "organizations_url": "https://api.github.com/users/rukai/orgs", "repos_url": "https://api.github.com/users/rukai/repos", "events_url": "https://api.github.com/users/rukai/events{/privacy}", "received_events_url": "https://api.github.com/users/rukai/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c5487dc62d569d4bc32cbe51951668406242137", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c5487dc62d569d4bc32cbe51951668406242137", "html_url": "https://github.com/rust-lang/rust/commit/7c5487dc62d569d4bc32cbe51951668406242137"}], "stats": {"total": 47, "additions": 29, "deletions": 18}, "files": [{"sha": "ada033de6e3abe08ea16c946228514b4f95298ff", "filename": "lintcheck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/997ddbbfd8adf3a56307c817d562fc6d07bcbd6c/lintcheck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/997ddbbfd8adf3a56307c817d562fc6d07bcbd6c/lintcheck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2FCargo.toml?ref=997ddbbfd8adf3a56307c817d562fc6d07bcbd6c", "patch": "@@ -19,6 +19,7 @@ serde_json = {version = \"1.0\"}\n tar = {version = \"0.4.30\"}\n toml = {version = \"0.5\"}\n ureq = {version = \"2.0.0-rc3\"}\n+walkdir = {version = \"2.3.2\"}\n \n [features]\n deny-warnings = []"}, {"sha": "f1e03ba42966d9bd31e3597f6d00ef0e0e1fe7b3", "filename": "lintcheck/src/main.rs", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/997ddbbfd8adf3a56307c817d562fc6d07bcbd6c/lintcheck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/997ddbbfd8adf3a56307c817d562fc6d07bcbd6c/lintcheck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2Fsrc%2Fmain.rs?ref=997ddbbfd8adf3a56307c817d562fc6d07bcbd6c", "patch": "@@ -21,6 +21,7 @@ use clap::{App, Arg, ArgMatches};\n use rayon::prelude::*;\n use serde::{Deserialize, Serialize};\n use serde_json::Value;\n+use walkdir::{DirEntry, WalkDir};\n \n #[cfg(not(windows))]\n const CLIPPY_DRIVER_PATH: &str = \"target/debug/clippy-driver\";\n@@ -193,32 +194,41 @@ impl CrateSource {\n                 }\n             },\n             CrateSource::Path { name, path, options } => {\n-                use fs_extra::dir;\n-\n-                // simply copy the entire directory into our target dir\n-                let copy_dest = PathBuf::from(format!(\"{}/\", LINTCHECK_SOURCES));\n+                // copy path into the dest_crate_root but skip directories that contain a CACHEDIR.TAG file.\n+                // The target/ directory contains a CACHEDIR.TAG file so it is the most commonly skipped directory\n+                // as a result of this filter.\n+                let dest_crate_root = PathBuf::from(LINTCHECK_SOURCES).join(name);\n+                if dest_crate_root.exists() {\n+                    println!(\"Deleting existing directory at {:?}\", dest_crate_root);\n+                    std::fs::remove_dir_all(&dest_crate_root).unwrap();\n+                }\n \n-                // the source path of the crate we copied,  ${copy_dest}/crate_name\n-                let crate_root = copy_dest.join(name); // .../crates/local_crate\n+                println!(\"Copying {:?} to {:?}\", path, dest_crate_root);\n \n-                if crate_root.exists() {\n-                    println!(\n-                        \"Not copying {} to {}, destination already exists\",\n-                        path.display(),\n-                        crate_root.display()\n-                    );\n-                } else {\n-                    println!(\"Copying {} to {}\", path.display(), copy_dest.display());\n+                fn is_cache_dir(entry: &DirEntry) -> bool {\n+                    std::fs::read(entry.path().join(\"CACHEDIR.TAG\"))\n+                        .map(|x| x.starts_with(b\"Signature: 8a477f597d28d172789f06886806bc55\"))\n+                        .unwrap_or(false)\n+                }\n \n-                    dir::copy(path, &copy_dest, &dir::CopyOptions::new()).unwrap_or_else(|_| {\n-                        panic!(\"Failed to copy from {}, to  {}\", path.display(), crate_root.display())\n-                    });\n+                for entry in WalkDir::new(path).into_iter().filter_entry(|e| !is_cache_dir(e)) {\n+                    let entry = entry.unwrap();\n+                    let entry_path = entry.path();\n+                    let relative_entry_path = entry_path.strip_prefix(path).unwrap();\n+                    let dest_path = dest_crate_root.join(relative_entry_path);\n+                    let metadata = entry_path.symlink_metadata().unwrap();\n+\n+                    if metadata.is_dir() {\n+                        std::fs::create_dir(dest_path).unwrap();\n+                    } else if metadata.is_file() {\n+                        std::fs::copy(entry_path, dest_path).unwrap();\n+                    }\n                 }\n \n                 Crate {\n                     version: String::from(\"local\"),\n                     name: name.clone(),\n-                    path: crate_root,\n+                    path: dest_crate_root,\n                     options: options.clone(),\n                 }\n             },"}]}