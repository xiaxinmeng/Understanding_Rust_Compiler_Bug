{"sha": "525983a2a4ac3029dd9979d924ef444f48a4d7b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNTk4M2EyYTRhYzMwMjlkZDk5NzlkOTI0ZWY0NDRmNDhhNGQ3YjM=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-02-15T20:05:47Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-02-16T13:54:48Z"}, "message": "Make validity checking use `MPlaceTy` instead of `OpTy`", "tree": {"sha": "2669092b7b6a96f552f96bd5d1231d355dc307c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2669092b7b6a96f552f96bd5d1231d355dc307c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/525983a2a4ac3029dd9979d924ef444f48a4d7b3", "comment_count": 3, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/525983a2a4ac3029dd9979d924ef444f48a4d7b3", "html_url": "https://github.com/rust-lang/rust/commit/525983a2a4ac3029dd9979d924ef444f48a4d7b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/525983a2a4ac3029dd9979d924ef444f48a4d7b3/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bee3c670dbf974d097f41447a1214b27bbf9acca", "url": "https://api.github.com/repos/rust-lang/rust/commits/bee3c670dbf974d097f41447a1214b27bbf9acca", "html_url": "https://github.com/rust-lang/rust/commit/bee3c670dbf974d097f41447a1214b27bbf9acca"}], "stats": {"total": 37, "additions": 17, "deletions": 20}, "files": [{"sha": "3c2c0af0bae809229baef2be8ff98b2c10464445", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/525983a2a4ac3029dd9979d924ef444f48a4d7b3/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/525983a2a4ac3029dd9979d924ef444f48a4d7b3/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=525983a2a4ac3029dd9979d924ef444f48a4d7b3", "patch": "@@ -523,13 +523,11 @@ fn validate_and_turn_into_const<'a, 'tcx>(\n     let cid = key.value;\n     let ecx = mk_eval_cx(tcx, tcx.def_span(key.value.instance.def_id()), key.param_env);\n     let val = (|| {\n-        let op = ecx.raw_const_to_mplace(constant)?.into();\n-        // FIXME: Once the visitor infrastructure landed, change validation to\n-        // work directly on `MPlaceTy`.\n-        let mut ref_tracking = RefTracking::new(op);\n-        while let Some((op, path)) = ref_tracking.todo.pop() {\n+        let mplace = ecx.raw_const_to_mplace(constant)?;\n+        let mut ref_tracking = RefTracking::new(mplace);\n+        while let Some((mplace, path)) = ref_tracking.todo.pop() {\n             ecx.validate_operand(\n-                op,\n+                mplace.into(),\n                 path,\n                 Some(&mut ref_tracking),\n                 true, // const mode\n@@ -538,7 +536,7 @@ fn validate_and_turn_into_const<'a, 'tcx>(\n         // Now that we validated, turn this into a proper constant.\n         let def_id = cid.instance.def.def_id();\n         let normalize = tcx.is_static(def_id).is_none() && cid.promoted.is_none();\n-        op_to_const(&ecx, op, normalize)\n+        op_to_const(&ecx, mplace.into(), normalize)\n     })();\n \n     val.map_err(|error| {"}, {"sha": "abc18f1364f873b4ee14fc8b41c887ea5e9a6058", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/525983a2a4ac3029dd9979d924ef444f48a4d7b3/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/525983a2a4ac3029dd9979d924ef444f48a4d7b3/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=525983a2a4ac3029dd9979d924ef444f48a4d7b3", "patch": "@@ -58,7 +58,7 @@ impl<'tcx, Tag> ::std::ops::Deref for PlaceTy<'tcx, Tag> {\n }\n \n /// A MemPlace with its layout. Constructing it is only possible in this module.\n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone, Debug, Hash, Eq, PartialEq)]\n pub struct MPlaceTy<'tcx, Tag=()> {\n     mplace: MemPlace<Tag>,\n     pub layout: TyLayout<'tcx>,"}, {"sha": "0163d53f027cf25265d0fa88f5c068609640b6f1", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/525983a2a4ac3029dd9979d924ef444f48a4d7b3/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/525983a2a4ac3029dd9979d924ef444f48a4d7b3/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=525983a2a4ac3029dd9979d924ef444f48a4d7b3", "patch": "@@ -11,7 +11,7 @@ use rustc::mir::interpret::{\n };\n \n use super::{\n-    OpTy, Machine, EvalContext, ValueVisitor,\n+    OpTy, Machine, EvalContext, ValueVisitor, MPlaceTy,\n };\n \n macro_rules! validation_failure {\n@@ -74,13 +74,13 @@ pub enum PathElem {\n }\n \n /// State for tracking recursive validation of references\n-pub struct RefTracking<'tcx, Tag> {\n-    pub seen: FxHashSet<(OpTy<'tcx, Tag>)>,\n-    pub todo: Vec<(OpTy<'tcx, Tag>, Vec<PathElem>)>,\n+pub struct RefTracking<T> {\n+    pub seen: FxHashSet<T>,\n+    pub todo: Vec<(T, Vec<PathElem>)>,\n }\n \n-impl<'tcx, Tag: Copy+Eq+Hash> RefTracking<'tcx, Tag> {\n-    pub fn new(op: OpTy<'tcx, Tag>) -> Self {\n+impl<'tcx, T: Copy + Eq + Hash> RefTracking<T> {\n+    pub fn new(op: T) -> Self {\n         let mut ref_tracking = RefTracking {\n             seen: FxHashSet::default(),\n             todo: vec![(op, Vec::new())],\n@@ -151,7 +151,7 @@ struct ValidityVisitor<'rt, 'a: 'rt, 'mir: 'rt, 'tcx: 'a+'rt+'mir, M: Machine<'a\n     /// starts must not be changed!  `visit_fields` and `visit_array` rely on\n     /// this stack discipline.\n     path: Vec<PathElem>,\n-    ref_tracking: Option<&'rt mut RefTracking<'tcx, M::PointerTag>>,\n+    ref_tracking: Option<&'rt mut RefTracking<MPlaceTy<'tcx, M::PointerTag>>>,\n     const_mode: bool,\n     ecx: &'rt EvalContext<'a, 'mir, 'tcx, M>,\n }\n@@ -399,16 +399,15 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>\n                     // before.  Proceed recursively even for integer pointers, no\n                     // reason to skip them! They are (recursively) valid for some ZST,\n                     // but not for others (e.g., `!` is a ZST).\n-                    let op = place.into();\n-                    if ref_tracking.seen.insert(op) {\n-                        trace!(\"Recursing below ptr {:#?}\", *op);\n+                    if ref_tracking.seen.insert(place) {\n+                        trace!(\"Recursing below ptr {:#?}\", *place);\n                         // We need to clone the path anyway, make sure it gets created\n                         // with enough space for the additional `Deref`.\n                         let mut new_path = Vec::with_capacity(self.path.len()+1);\n                         new_path.clone_from(&self.path);\n                         new_path.push(PathElem::Deref);\n                         // Remember to come back to this later.\n-                        ref_tracking.todo.push((op, new_path));\n+                        ref_tracking.todo.push((place, new_path));\n                     }\n                 }\n             }\n@@ -598,7 +597,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         &self,\n         op: OpTy<'tcx, M::PointerTag>,\n         path: Vec<PathElem>,\n-        ref_tracking: Option<&mut RefTracking<'tcx, M::PointerTag>>,\n+        ref_tracking: Option<&mut RefTracking<MPlaceTy<'tcx, M::PointerTag>>>,\n         const_mode: bool,\n     ) -> EvalResult<'tcx> {\n         trace!(\"validate_operand: {:?}, {:?}\", *op, op.layout.ty);"}]}