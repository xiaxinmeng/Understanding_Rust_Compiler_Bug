{"sha": "90a61177298c9d73e2d3b842c199c36e1dfe77e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwYTYxMTc3Mjk4YzlkNzNlMmQzYjg0MmMxOTljMzZlMWRmZTc3ZTM=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@cs.washington.edu", "date": "2016-03-29T04:52:36Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-04-02T13:32:57Z"}, "message": "Reverted to manual implementation of PartialEq for FullInt", "tree": {"sha": "7f3aa069f6e40985150b9702535058ace0129008", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f3aa069f6e40985150b9702535058ace0129008"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90a61177298c9d73e2d3b842c199c36e1dfe77e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90a61177298c9d73e2d3b842c199c36e1dfe77e3", "html_url": "https://github.com/rust-lang/rust/commit/90a61177298c9d73e2d3b842c199c36e1dfe77e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90a61177298c9d73e2d3b842c199c36e1dfe77e3/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf451d3bba438d465b847b0ade7960127cfe81c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf451d3bba438d465b847b0ade7960127cfe81c6", "html_url": "https://github.com/rust-lang/rust/commit/cf451d3bba438d465b847b0ade7960127cfe81c6"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "948e8fd063dde37f3d608ee23384e952227eb903", "filename": "src/types.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90a61177298c9d73e2d3b842c199c36e1dfe77e3/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90a61177298c9d73e2d3b842c199c36e1dfe77e3/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=90a61177298c9d73e2d3b842c199c36e1dfe77e3", "patch": "@@ -799,7 +799,7 @@ impl LintPass for InvalidUpcastComparisons {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n+#[derive(Copy, Clone, Debug, Eq)]\n enum FullInt {\n     S(i64),\n     U(u64),\n@@ -820,6 +820,12 @@ impl FullInt {\n     }\n }\n \n+impl PartialEq for FullInt {\n+    fn eq(&self, other: &Self) -> bool {\n+        self.partial_cmp(other).expect(\"partial_cmp only returns Some(_)\") == Ordering::Equal\n+    }\n+}\n+\n impl PartialOrd for FullInt {\n     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n         Some(match (self, other) {"}]}