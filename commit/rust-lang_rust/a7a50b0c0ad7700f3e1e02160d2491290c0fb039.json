{"sha": "a7a50b0c0ad7700f3e1e02160d2491290c0fb039", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3YTUwYjBjMGFkNzcwMGYzZTFlMDIxNjBkMjQ5MTI5MGMwZmIwMzk=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-04-19T20:27:49Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-06-11T10:25:02Z"}, "message": "Hash DefId in rustc_span.", "tree": {"sha": "39a9d1087a0eddde2be4253df9788ed4dec7dfe8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39a9d1087a0eddde2be4253df9788ed4dec7dfe8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7a50b0c0ad7700f3e1e02160d2491290c0fb039", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7a50b0c0ad7700f3e1e02160d2491290c0fb039", "html_url": "https://github.com/rust-lang/rust/commit/a7a50b0c0ad7700f3e1e02160d2491290c0fb039", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7a50b0c0ad7700f3e1e02160d2491290c0fb039/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f949e94e8429ef33bb0ecb32082590631402b23", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f949e94e8429ef33bb0ecb32082590631402b23", "html_url": "https://github.com/rust-lang/rust/commit/1f949e94e8429ef33bb0ecb32082590631402b23"}], "stats": {"total": 126, "additions": 55, "deletions": 71}, "files": [{"sha": "560607528330bbd04c187b67b8988567fd02dc6b", "filename": "compiler/rustc_hir/src/stable_hash_impls.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a7a50b0c0ad7700f3e1e02160d2491290c0fb039/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a50b0c0ad7700f3e1e02160d2491290c0fb039/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs?ref=a7a50b0c0ad7700f3e1e02160d2491290c0fb039", "patch": "@@ -5,7 +5,7 @@ use crate::hir::{\n     TraitItem, TraitItemId, Ty, VisibilityKind,\n };\n use crate::hir_id::{HirId, ItemLocalId};\n-use rustc_span::def_id::{DefPathHash, LocalDefId};\n+use rustc_span::def_id::DefPathHash;\n \n /// Requirements for a `StableHashingContext` to be used in this crate.\n /// This is a hack to allow using the `HashStable_Generic` derive macro\n@@ -21,15 +21,14 @@ pub trait HashStableContext:\n     fn hash_hir_ty(&mut self, _: &Ty<'_>, hasher: &mut StableHasher);\n     fn hash_hir_visibility_kind(&mut self, _: &VisibilityKind<'_>, hasher: &mut StableHasher);\n     fn hash_hir_item_like<F: FnOnce(&mut Self)>(&mut self, f: F);\n-    fn local_def_path_hash(&self, def_id: LocalDefId) -> DefPathHash;\n }\n \n impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for HirId {\n     type KeyType = (DefPathHash, ItemLocalId);\n \n     #[inline]\n     fn to_stable_hash_key(&self, hcx: &HirCtx) -> (DefPathHash, ItemLocalId) {\n-        let def_path_hash = hcx.local_def_path_hash(self.owner);\n+        let def_path_hash = self.owner.to_stable_hash_key(hcx);\n         (def_path_hash, self.local_id)\n     }\n }\n@@ -39,7 +38,7 @@ impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for ItemId {\n \n     #[inline]\n     fn to_stable_hash_key(&self, hcx: &HirCtx) -> DefPathHash {\n-        hcx.local_def_path_hash(self.def_id)\n+        self.def_id.to_stable_hash_key(hcx)\n     }\n }\n \n@@ -48,7 +47,7 @@ impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for TraitItemId {\n \n     #[inline]\n     fn to_stable_hash_key(&self, hcx: &HirCtx) -> DefPathHash {\n-        hcx.local_def_path_hash(self.def_id)\n+        self.def_id.to_stable_hash_key(hcx)\n     }\n }\n \n@@ -57,7 +56,7 @@ impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for ImplItemId {\n \n     #[inline]\n     fn to_stable_hash_key(&self, hcx: &HirCtx) -> DefPathHash {\n-        hcx.local_def_path_hash(self.def_id)\n+        self.def_id.to_stable_hash_key(hcx)\n     }\n }\n \n@@ -66,7 +65,7 @@ impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for ForeignItemId\n \n     #[inline]\n     fn to_stable_hash_key(&self, hcx: &HirCtx) -> DefPathHash {\n-        hcx.local_def_path_hash(self.def_id)\n+        self.def_id.to_stable_hash_key(hcx)\n     }\n }\n "}, {"sha": "91c81c367a16febb0e59bc64429f0d291c8425be", "filename": "compiler/rustc_middle/src/ich/hcx.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a7a50b0c0ad7700f3e1e02160d2491290c0fb039/compiler%2Frustc_middle%2Fsrc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a50b0c0ad7700f3e1e02160d2491290c0fb039/compiler%2Frustc_middle%2Fsrc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fich%2Fhcx.rs?ref=a7a50b0c0ad7700f3e1e02160d2491290c0fb039", "patch": "@@ -14,7 +14,6 @@ use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::Symbol;\n use rustc_span::{BytePos, CachingSourceMapView, SourceFile, SpanData};\n \n-use rustc_span::def_id::{CrateNum, CRATE_DEF_INDEX};\n use smallvec::SmallVec;\n use std::cmp::Ord;\n use std::thread::LocalKey;\n@@ -227,15 +226,8 @@ impl<'a> rustc_span::HashStableContext for StableHashingContext<'a> {\n     }\n \n     #[inline]\n-    fn hash_crate_num(&mut self, cnum: CrateNum, hasher: &mut StableHasher) {\n-        let hcx = self;\n-        hcx.def_path_hash(DefId { krate: cnum, index: CRATE_DEF_INDEX }).hash_stable(hcx, hasher);\n-    }\n-\n-    #[inline]\n-    fn hash_def_id(&mut self, def_id: DefId, hasher: &mut StableHasher) {\n-        let hcx = self;\n-        hcx.def_path_hash(def_id).hash_stable(hcx, hasher);\n+    fn def_path_hash(&self, def_id: DefId) -> DefPathHash {\n+        self.def_path_hash(def_id)\n     }\n \n     fn expn_id_cache() -> &'static LocalKey<rustc_span::ExpnIdCache> {"}, {"sha": "5dfd00bc6d42c36e372f1d0cd4a22bc806b8e3a7", "filename": "compiler/rustc_middle/src/ich/impls_hir.rs", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a7a50b0c0ad7700f3e1e02160d2491290c0fb039/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a50b0c0ad7700f3e1e02160d2491290c0fb039/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_hir.rs?ref=a7a50b0c0ad7700f3e1e02160d2491290c0fb039", "patch": "@@ -6,7 +6,6 @@ use rustc_attr as attr;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n use rustc_hir as hir;\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX};\n use rustc_hir::definitions::DefPathHash;\n use smallvec::SmallVec;\n use std::mem;\n@@ -113,46 +112,6 @@ impl<'ctx> rustc_hir::HashStableContext for StableHashingContext<'ctx> {\n \n         self.node_id_hashing_mode = prev_hash_node_ids;\n     }\n-\n-    #[inline]\n-    fn local_def_path_hash(&self, def_id: LocalDefId) -> DefPathHash {\n-        self.local_def_path_hash(def_id)\n-    }\n-}\n-\n-impl<'a> ToStableHashKey<StableHashingContext<'a>> for DefId {\n-    type KeyType = DefPathHash;\n-\n-    #[inline]\n-    fn to_stable_hash_key(&self, hcx: &StableHashingContext<'a>) -> DefPathHash {\n-        hcx.def_path_hash(*self)\n-    }\n-}\n-\n-impl<'a> HashStable<StableHashingContext<'a>> for LocalDefId {\n-    #[inline]\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        hcx.def_path_hash(self.to_def_id()).hash_stable(hcx, hasher);\n-    }\n-}\n-\n-impl<'a> ToStableHashKey<StableHashingContext<'a>> for LocalDefId {\n-    type KeyType = DefPathHash;\n-\n-    #[inline]\n-    fn to_stable_hash_key(&self, hcx: &StableHashingContext<'a>) -> DefPathHash {\n-        hcx.def_path_hash(self.to_def_id())\n-    }\n-}\n-\n-impl<'a> ToStableHashKey<StableHashingContext<'a>> for CrateNum {\n-    type KeyType = DefPathHash;\n-\n-    #[inline]\n-    fn to_stable_hash_key(&self, hcx: &StableHashingContext<'a>) -> DefPathHash {\n-        let def_id = DefId { krate: *self, index: CRATE_DEF_INDEX };\n-        def_id.to_stable_hash_key(hcx)\n-    }\n }\n \n impl<'a> ToStableHashKey<StableHashingContext<'a>> for hir::ItemLocalId {"}, {"sha": "ae488563ccc0fe1be5c2e230d21868bcb40cf97c", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a7a50b0c0ad7700f3e1e02160d2491290c0fb039/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a50b0c0ad7700f3e1e02160d2491290c0fb039/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=a7a50b0c0ad7700f3e1e02160d2491290c0fb039", "patch": "@@ -1,7 +1,7 @@\n use crate::crate_disambiguator::CrateDisambiguator;\n use crate::HashStableContext;\n use rustc_data_structures::fingerprint::Fingerprint;\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n use rustc_data_structures::AtomicRef;\n use rustc_index::vec::Idx;\n use rustc_macros::HashStable_Generic;\n@@ -309,12 +309,47 @@ rustc_data_structures::define_id_collections!(LocalDefIdMap, LocalDefIdSet, Loca\n \n impl<CTX: HashStableContext> HashStable<CTX> for DefId {\n     fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {\n-        hcx.hash_def_id(*self, hasher)\n+        hcx.def_path_hash(*self).hash_stable(hcx, hasher);\n+    }\n+}\n+\n+impl<CTX: HashStableContext> HashStable<CTX> for LocalDefId {\n+    #[inline]\n+    fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {\n+        hcx.def_path_hash(self.to_def_id()).hash_stable(hcx, hasher);\n     }\n }\n \n impl<CTX: HashStableContext> HashStable<CTX> for CrateNum {\n     fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {\n-        hcx.hash_crate_num(*self, hasher)\n+        hcx.def_path_hash(DefId { krate: *self, index: CRATE_DEF_INDEX }).hash_stable(hcx, hasher);\n+    }\n+}\n+\n+impl<CTX: HashStableContext> ToStableHashKey<CTX> for DefId {\n+    type KeyType = DefPathHash;\n+\n+    #[inline]\n+    fn to_stable_hash_key(&self, hcx: &CTX) -> DefPathHash {\n+        hcx.def_path_hash(*self)\n+    }\n+}\n+\n+impl<CTX: HashStableContext> ToStableHashKey<CTX> for LocalDefId {\n+    type KeyType = DefPathHash;\n+\n+    #[inline]\n+    fn to_stable_hash_key(&self, hcx: &CTX) -> DefPathHash {\n+        hcx.def_path_hash(self.to_def_id())\n+    }\n+}\n+\n+impl<CTX: HashStableContext> ToStableHashKey<CTX> for CrateNum {\n+    type KeyType = DefPathHash;\n+\n+    #[inline]\n+    fn to_stable_hash_key(&self, hcx: &CTX) -> DefPathHash {\n+        let def_id = DefId { krate: *self, index: CRATE_DEF_INDEX };\n+        def_id.to_stable_hash_key(hcx)\n     }\n }"}, {"sha": "3915f7879b7c866d6ab430c673c73ad302648dd8", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a7a50b0c0ad7700f3e1e02160d2491290c0fb039/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a50b0c0ad7700f3e1e02160d2491290c0fb039/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=a7a50b0c0ad7700f3e1e02160d2491290c0fb039", "patch": "@@ -29,7 +29,7 @@ use crate::symbol::{kw, sym, Symbol};\n use crate::SESSION_GLOBALS;\n use crate::{BytePos, CachingSourceMapView, ExpnIdCache, SourceFile, Span, DUMMY_SP};\n \n-use crate::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use crate::def_id::{CrateNum, DefId, DefPathHash, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -1330,9 +1330,12 @@ fn update_disambiguator(expn_id: ExpnId) {\n     }\n \n     impl<'a> crate::HashStableContext for DummyHashStableContext<'a> {\n-        fn hash_def_id(&mut self, def_id: DefId, hasher: &mut StableHasher) {\n-            def_id.krate.as_u32().hash_stable(self, hasher);\n-            def_id.index.as_u32().hash_stable(self, hasher);\n+        fn def_path_hash(&self, def_id: DefId) -> DefPathHash {\n+            use std::hash::Hasher;\n+            let mut hasher = StableHasher::new();\n+            hasher.write_u32(def_id.krate.as_u32());\n+            hasher.write_u32(def_id.index.as_u32());\n+            DefPathHash(hasher.finish())\n         }\n \n         fn expn_id_cache() -> &'static LocalKey<ExpnIdCache> {\n@@ -1345,9 +1348,6 @@ fn update_disambiguator(expn_id: ExpnId) {\n             &CACHE\n         }\n \n-        fn hash_crate_num(&mut self, krate: CrateNum, hasher: &mut StableHasher) {\n-            krate.as_u32().hash_stable(self, hasher);\n-        }\n         fn hash_spans(&self) -> bool {\n             true\n         }"}, {"sha": "b4fe7c980de9582e9ca5ebb86d0f2fe5412b2161", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a7a50b0c0ad7700f3e1e02160d2491290c0fb039/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7a50b0c0ad7700f3e1e02160d2491290c0fb039/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=a7a50b0c0ad7700f3e1e02160d2491290c0fb039", "patch": "@@ -40,7 +40,7 @@ pub use hygiene::SyntaxContext;\n use hygiene::Transparency;\n pub use hygiene::{DesugaringKind, ExpnData, ExpnId, ExpnKind, ForLoopLoc, MacroKind};\n pub mod def_id;\n-use def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use def_id::{CrateNum, DefId, DefPathHash, LOCAL_CRATE};\n pub mod lev_distance;\n mod span_encoding;\n pub use span_encoding::{Span, DUMMY_SP};\n@@ -1928,13 +1928,12 @@ fn lookup_line(lines: &[BytePos], pos: BytePos) -> isize {\n /// This is a hack to allow using the [`HashStable_Generic`] derive macro\n /// instead of implementing everything in rustc_middle.\n pub trait HashStableContext {\n-    fn hash_def_id(&mut self, _: DefId, hasher: &mut StableHasher);\n+    fn def_path_hash(&self, def_id: DefId) -> DefPathHash;\n     /// Obtains a cache for storing the `Fingerprint` of an `ExpnId`.\n     /// This method allows us to have multiple `HashStableContext` implementations\n     /// that hash things in a different way, without the results of one polluting\n     /// the cache of the other.\n     fn expn_id_cache() -> &'static LocalKey<ExpnIdCache>;\n-    fn hash_crate_num(&mut self, _: CrateNum, hasher: &mut StableHasher);\n     fn hash_spans(&self) -> bool;\n     fn span_data_to_lines_and_cols(\n         &mut self,"}]}