{"sha": "401329e829cd4c6ced5a2bd9a0891f59672bf241", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMTMyOWU4MjljZDRjNmNlZDVhMmJkOWEwODkxZjU5NjcyYmYyNDE=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-10T12:08:02Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-10T12:08:02Z"}, "message": "HirIdification: remove all NodeIds from borrowck", "tree": {"sha": "d995d677fa02c8bd94a405a179747002a449da8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d995d677fa02c8bd94a405a179747002a449da8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/401329e829cd4c6ced5a2bd9a0891f59672bf241", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/401329e829cd4c6ced5a2bd9a0891f59672bf241", "html_url": "https://github.com/rust-lang/rust/commit/401329e829cd4c6ced5a2bd9a0891f59672bf241", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/401329e829cd4c6ced5a2bd9a0891f59672bf241/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e1914f75b94d9454a63e8aa2797ab16b8997f80", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e1914f75b94d9454a63e8aa2797ab16b8997f80", "html_url": "https://github.com/rust-lang/rust/commit/7e1914f75b94d9454a63e8aa2797ab16b8997f80"}], "stats": {"total": 21, "additions": 8, "deletions": 13}, "files": [{"sha": "9680dd4ce2faf037b96eaa45f5ec46286d259950", "filename": "src/librustc_borrowck/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/401329e829cd4c6ced5a2bd9a0891f59672bf241/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401329e829cd4c6ced5a2bd9a0891f59672bf241/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=401329e829cd4c6ced5a2bd9a0891f59672bf241", "patch": "@@ -2,13 +2,13 @@\n //! does not exceed the lifetime of the value being borrowed.\n \n use crate::borrowck::*;\n+use rustc::hir::HirId;\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n use rustc::middle::region;\n use rustc::ty;\n \n-use syntax::ast;\n use syntax_pos::Span;\n use log::debug;\n \n@@ -51,7 +51,7 @@ struct GuaranteeLifetimeContext<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> GuaranteeLifetimeContext<'a, 'tcx> {\n-    fn check(&self, cmt: &mc::cmt_<'tcx>, discr_scope: Option<ast::NodeId>) -> R {\n+    fn check(&self, cmt: &mc::cmt_<'tcx>, discr_scope: Option<HirId>) -> R {\n         //! Main routine. Walks down `cmt` until we find the\n         //! \"guarantor\". Reports an error if `self.loan_region` is\n         //! larger than scope of `cmt`."}, {"sha": "ed631f2cdaa0d16ce692afec528e9293cb1efdd4", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/401329e829cd4c6ced5a2bd9a0891f59672bf241/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401329e829cd4c6ced5a2bd9a0891f59672bf241/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=401329e829cd4c6ced5a2bd9a0891f59672bf241", "patch": "@@ -14,7 +14,6 @@ use rustc::middle::mem_categorization::Categorization;\n use rustc::middle::region;\n use rustc::ty::{self, TyCtxt};\n \n-use syntax::ast;\n use syntax_pos::Span;\n use rustc::hir;\n use log::debug;\n@@ -141,8 +140,7 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for GatherLoanCtxt<'a, 'tcx> {\n               assignee_cmt: &mc::cmt_<'tcx>,\n               _: euv::MutateMode)\n     {\n-        let node_id = self.bccx.tcx.hir().hir_to_node_id(assignment_id);\n-        self.guarantee_assignment_valid(node_id,\n+        self.guarantee_assignment_valid(assignment_id,\n                                         assignment_span,\n                                         assignee_cmt);\n     }\n@@ -238,7 +236,7 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n \n     /// Guarantees that `cmt` is assignable, or reports an error.\n     fn guarantee_assignment_valid(&mut self,\n-                                  assignment_id: ast::NodeId,\n+                                  assignment_id: hir::HirId,\n                                   assignment_span: Span,\n                                   cmt: &mc::cmt_<'tcx>) {\n \n@@ -272,8 +270,7 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n                     self.mark_loan_path_as_mutated(&lp);\n                 }\n                 gather_moves::gather_assignment(self.bccx, &self.move_data,\n-                                                self.bccx.tcx.hir().node_to_hir_id(assignment_id)\n-                                                    .local_id,\n+                                                assignment_id.local_id,\n                                                 assignment_span,\n                                                 lp);\n             }"}, {"sha": "3a6e53a92482c1240332152d3623b71111f2789c", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/401329e829cd4c6ced5a2bd9a0891f59672bf241/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401329e829cd4c6ced5a2bd9a0891f59672bf241/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=401329e829cd4c6ced5a2bd9a0891f59672bf241", "patch": "@@ -34,7 +34,6 @@ use std::fmt;\n use std::rc::Rc;\n use rustc_data_structures::sync::Lrc;\n use std::hash::{Hash, Hasher};\n-use syntax::ast;\n use syntax_pos::{MultiSpan, Span};\n use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n use log::debug;\n@@ -399,12 +398,12 @@ pub enum LoanPathElem<'tcx> {\n }\n \n fn closure_to_block(closure_id: LocalDefId,\n-                    tcx: TyCtxt<'_, '_, '_>) -> ast::NodeId {\n+                    tcx: TyCtxt<'_, '_, '_>) -> HirId {\n     let closure_id = tcx.hir().local_def_id_to_node_id(closure_id);\n     match tcx.hir().get(closure_id) {\n         Node::Expr(expr) => match expr.node {\n             hir::ExprKind::Closure(.., body_id, _, _) => {\n-                tcx.hir().hir_to_node_id(body_id.hir_id)\n+                body_id.hir_id\n             }\n             _ => {\n                 bug!(\"encountered non-closure id: {}\", closure_id)\n@@ -422,8 +421,7 @@ impl<'a, 'tcx> LoanPath<'tcx> {\n             }\n             LpUpvar(upvar_id) => {\n                 let block_id = closure_to_block(upvar_id.closure_expr_id, bccx.tcx);\n-                let hir_id = bccx.tcx.hir().node_to_hir_id(block_id);\n-                region::Scope { id: hir_id.local_id, data: region::ScopeData::Node }\n+                region::Scope { id: block_id.local_id, data: region::ScopeData::Node }\n             }\n             LpDowncast(ref base, _) |\n             LpExtend(ref base, ..) => base.kill_scope(bccx),"}]}