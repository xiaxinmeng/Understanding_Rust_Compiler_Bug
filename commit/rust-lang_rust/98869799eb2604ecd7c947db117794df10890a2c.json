{"sha": "98869799eb2604ecd7c947db117794df10890a2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ODY5Nzk5ZWIyNjA0ZWNkN2M5NDdkYjExNzc5NGRmMTA4OTBhMmM=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-01T17:17:57Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-09T11:22:43Z"}, "message": "std::rand: documentation additions & fixes.", "tree": {"sha": "6350646781d2248e76e773f2f6b04247799d8674", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6350646781d2248e76e773f2f6b04247799d8674"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98869799eb2604ecd7c947db117794df10890a2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98869799eb2604ecd7c947db117794df10890a2c", "html_url": "https://github.com/rust-lang/rust/commit/98869799eb2604ecd7c947db117794df10890a2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98869799eb2604ecd7c947db117794df10890a2c/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b1a0d01a8d0a769cc2c0bd9b11bfb71864d2f36", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b1a0d01a8d0a769cc2c0bd9b11bfb71864d2f36", "html_url": "https://github.com/rust-lang/rust/commit/0b1a0d01a8d0a769cc2c0bd9b11bfb71864d2f36"}], "stats": {"total": 61, "additions": 52, "deletions": 9}, "files": [{"sha": "5394d384e636096b62b34dd9f23135a98a40af5c", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/98869799eb2604ecd7c947db117794df10890a2c/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98869799eb2604ecd7c947db117794df10890a2c/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=98869799eb2604ecd7c947db117794df10890a2c", "patch": "@@ -19,6 +19,22 @@ suffice, but sometimes an annotation is required, e.g. `rand::random::<f64>()`.\n See the `distributions` submodule for sampling random numbers from\n distributions like normal and exponential.\n \n+# Task-local RNG\n+\n+There is built-in support for a RNG associated with each task stored\n+in task-local storage. This RNG can be accessed via `task_rng`, or\n+used implicitly via `random`. This RNG is normally randomly seeded\n+from an operating-system source of randomness, e.g. `/dev/urandom` on\n+Unix systems, and will automatically reseed itself from this source\n+after generating 32 KiB of random data.\n+\n+It can be explicitly seeded on a per-task basis with `seed_task_rng`;\n+this only affects the task-local generator in the task in which it is\n+called. It can be seeded globally using the `RUST_SEED` environment\n+variable, which should be an integer. Setting `RUST_SEED` will seed\n+every task-local RNG with the same seed. Using either of these will\n+disable the automatic reseeding.\n+\n # Examples\n \n ```rust\n@@ -126,7 +142,7 @@ pub trait Rng {\n     /// fn main() {\n     ///    let mut v = [0u8, .. 13579];\n     ///    task_rng().fill_bytes(v);\n-    ///    printfln!(v);\n+    ///    println!(\"{:?}\", v);\n     /// }\n     /// ```\n     fn fill_bytes(&mut self, mut dest: &mut [u8]) {\n@@ -486,7 +502,7 @@ pub trait SeedableRng<Seed>: Rng {\n     /// use std::rand::Rng;\n     ///\n     /// fn main() {\n-    ///     let mut rng: rand::XorShiftRng = rand::SeedableRng::from_seed(&[1, 2, 3, 4]);\n+    ///     let mut rng: rand::StdRng = rand::SeedableRng::from_seed(&[1, 2, 3, 4]);\n     ///     println!(\"{}\", rng.gen::<f64>());\n     ///     rng.reseed([5, 6, 7, 8]);\n     ///     println!(\"{}\", rng.gen::<f64>());\n@@ -503,7 +519,7 @@ pub trait SeedableRng<Seed>: Rng {\n     /// use std::rand::Rng;\n     ///\n     /// fn main() {\n-    ///     let mut rng: rand::XorShiftRng = rand::SeedableRng::from_seed(&[1, 2, 3, 4]);\n+    ///     let mut rng: rand::StdRng = rand::SeedableRng::from_seed(&[1, 2, 3, 4]);\n     ///     println!(\"{}\", rng.gen::<f64>());\n     /// }\n     /// ```\n@@ -748,10 +764,10 @@ pub fn task_rng() -> @mut TaskRng {\n ///\n /// fn main() {\n ///     rand::seed_task_rng(&[10u]);\n-///     printfln!(\"Same every time: %u\", rand::random::<uint>());\n+///     println!(\"Same every time: {}\", rand::random::<uint>());\n ///\n ///     rand::seed_task_rng(&[1u, 2, 3, 4, 5, 6, 7, 8]);\n-///     printfln!(\"Same every time: %f\", rand::random::<float>());\n+///     println!(\"Same every time: {}\", rand::random::<float>());\n /// }\n /// ```\n pub fn seed_task_rng(seed: &[uint]) {\n@@ -783,9 +799,9 @@ impl<R: Rng> Rng for @mut R {\n /// fn main() {\n ///     if random() {\n ///         let x = random();\n-///         printfln!(2u * x);\n+///         println!(\"{}\", 2u * x);\n ///     } else {\n-///         printfln!(random::<float>());\n+///         println!(\"{}\", random::<float>());\n ///     }\n /// }\n /// ```"}, {"sha": "78dad30117da3cec3be97d91241cbbc59cbd4db1", "filename": "src/libstd/rand/reader.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98869799eb2604ecd7c947db117794df10890a2c/src%2Flibstd%2Frand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98869799eb2604ecd7c947db117794df10890a2c/src%2Flibstd%2Frand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freader.rs?ref=98869799eb2604ecd7c947db117794df10890a2c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+//! A wrapper around any Reader to treat it as an RNG.\n+\n use option::{Some, None};\n use rt::io::Reader;\n use rt::io::ReaderByteConversions;\n@@ -22,12 +24,12 @@ use rand::Rng;\n /// # Example\n ///\n /// ```rust\n-/// use std::rand::reader;\n+/// use std::rand::{reader, Rng};\n /// use std::rt::io::mem;\n ///\n /// fn main() {\n ///     let mut rng = reader::ReaderRng::new(mem::MemReader::new(~[1,2,3,4,5,6,7,8]));\n-///     println!(\"{}\", rng.gen::<uint>());\n+///     println!(\"{:x}\", rng.gen::<uint>());\n /// }\n /// ```\n pub struct ReaderRng<R> {"}, {"sha": "b3eab2bbc4cba743d52d852f13b39579c39f8224", "filename": "src/libstd/rand/reseeding.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/98869799eb2604ecd7c947db117794df10890a2c/src%2Flibstd%2Frand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98869799eb2604ecd7c947db117794df10890a2c/src%2Flibstd%2Frand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freseeding.rs?ref=98869799eb2604ecd7c947db117794df10890a2c", "patch": "@@ -94,6 +94,31 @@ impl<S, R: SeedableRng<S>, Rsdr: Reseeder<R> + Default> SeedableRng<S> for Resee\n }\n \n /// Something that can be used to reseed an RNG via `ReseedingRng`.\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// use std::rand;\n+/// use std::rand::{Rng, SeedableRng};\n+/// use std::rand::reseeding::{Reseeder, ReseedingRng};\n+///\n+/// struct TickTockReseeder { tick: bool }\n+/// impl Reseeder<rand::StdRng> for TickTockReseeder {\n+///     fn reseed(&mut self, rng: &mut rand::StdRng) {\n+///         let val = if self.tick {0} else {1};\n+///         rng.reseed(&[val]);\n+///         self.tick = !self.tick;\n+///     }\n+/// }\n+/// fn main() {\n+///     let rsdr = TickTockReseeder { tick: true };\n+///     let mut rng = ReseedingRng::new(rand::StdRng::new(), 10, rsdr);\n+///\n+///     // this will repeat, because it gets reseeded very regularly.\n+///     println(rng.gen_ascii_str(100));\n+/// }\n+///\n+/// ```\n pub trait Reseeder<R> {\n     /// Reseed the given RNG.\n     fn reseed(&mut self, rng: &mut R);"}]}