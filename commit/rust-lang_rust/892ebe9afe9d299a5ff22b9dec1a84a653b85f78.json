{"sha": "892ebe9afe9d299a5ff22b9dec1a84a653b85f78", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5MmViZTlhZmU5ZDI5OWE1ZmYyMmI5ZGVjMWE4NGE2NTNiODVmNzg=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-10-28T00:21:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-28T00:21:24Z"}, "message": "Rollup merge of #78379 - estebank:fn-signature-parse, r=varkor\n\nTweak invalid `fn` header and body parsing\n\n* Rely on regular \"expected\"/\"found\" parser error for `fn`, fix #77115\n* Recover empty `fn` bodies when encountering `}`\n* Recover trailing `>` in return types\n* Recover from non-type in array type `[<BAD TOKEN>; LEN]`", "tree": {"sha": "9e0ee9377cbb36f710bfceb062aa74cf39249ab4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e0ee9377cbb36f710bfceb062aa74cf39249ab4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/892ebe9afe9d299a5ff22b9dec1a84a653b85f78", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfmLmFCRBK7hj4Ov3rIwAAdHIIAFEdQqsZeUe/RCTEq8JFcrp5\nuXraIZMmhw+9uZdj8opLHa5LCY5l8g7vdtfJ7gFjFyfNn6QLFEzHktLD90njU9IV\n86z1zzODLD8g6vflfp+K0kZmg+FrwFLuKLZfKpWLsPhoNhgZLEToQkyDSj+H+F40\nqC3oFJlthAYyeLrJUm3EHti6wWo6M1ryrghNPMq/ZwO12ZabwyfIHZJX+QkrtMsP\nFUDMrlZhMr2C2tRuLB1ua/NQJdYiVVSw/WcDUZ5dNrzPy6Qv59cEHQHhehszHdqe\ntTi9FFZSfsf+lfcKG9ivONZGw4BFClQZHP5/xmujqQagHCxl3xnzoPRMwFzTyxU=\n=DtRc\n-----END PGP SIGNATURE-----\n", "payload": "tree 9e0ee9377cbb36f710bfceb062aa74cf39249ab4\nparent 1a64e570c6d3bf19a387f96bcb0bd09e51caee22\nparent ff61949860813247b26d96eb374b41b46becba81\nauthor Dylan DPC <dylan.dpc@gmail.com> 1603844484 +0100\ncommitter GitHub <noreply@github.com> 1603844484 +0100\n\nRollup merge of #78379 - estebank:fn-signature-parse, r=varkor\n\nTweak invalid `fn` header and body parsing\n\n* Rely on regular \"expected\"/\"found\" parser error for `fn`, fix #77115\n* Recover empty `fn` bodies when encountering `}`\n* Recover trailing `>` in return types\n* Recover from non-type in array type `[<BAD TOKEN>; LEN]`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/892ebe9afe9d299a5ff22b9dec1a84a653b85f78", "html_url": "https://github.com/rust-lang/rust/commit/892ebe9afe9d299a5ff22b9dec1a84a653b85f78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a64e570c6d3bf19a387f96bcb0bd09e51caee22", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a64e570c6d3bf19a387f96bcb0bd09e51caee22", "html_url": "https://github.com/rust-lang/rust/commit/1a64e570c6d3bf19a387f96bcb0bd09e51caee22"}, {"sha": "ff61949860813247b26d96eb374b41b46becba81", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff61949860813247b26d96eb374b41b46becba81", "html_url": "https://github.com/rust-lang/rust/commit/ff61949860813247b26d96eb374b41b46becba81"}], "stats": {"total": 127, "additions": 79, "deletions": 48}, "files": [{"sha": "730c16aba8c0b61626be11dc8ac6f73096766297", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=892ebe9afe9d299a5ff22b9dec1a84a653b85f78", "patch": "@@ -1557,14 +1557,6 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    pub(super) fn expected_semi_or_open_brace<T>(&mut self) -> PResult<'a, T> {\n-        let token_str = super::token_descr(&self.token);\n-        let msg = &format!(\"expected `;` or `{{`, found {}\", token_str);\n-        let mut err = self.struct_span_err(self.token.span, msg);\n-        err.span_label(self.token.span, \"expected `;` or `{`\");\n-        Err(err)\n-    }\n-\n     pub(super) fn eat_incorrect_doc_comment_for_param_type(&mut self) {\n         if let token::DocComment(..) = self.token.kind {\n             self.struct_span_err("}, {"sha": "39d4875f37b1d883c0c1edfaadbfb8d8eba412da", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=892ebe9afe9d299a5ff22b9dec1a84a653b85f78", "patch": "@@ -1538,7 +1538,7 @@ impl<'a> Parser<'a> {\n         generics.where_clause = self.parse_where_clause()?; // `where T: Ord`\n \n         let mut sig_hi = self.prev_token.span;\n-        let body = self.parse_fn_body(attrs, &mut sig_hi)?; // `;` or `{ ... }`.\n+        let body = self.parse_fn_body(attrs, &ident, &mut sig_hi)?; // `;` or `{ ... }`.\n         let fn_sig_span = sig_lo.to(sig_hi);\n         Ok((ident, FnSig { header, decl, span: fn_sig_span }, generics, body))\n     }\n@@ -1549,12 +1549,12 @@ impl<'a> Parser<'a> {\n     fn parse_fn_body(\n         &mut self,\n         attrs: &mut Vec<Attribute>,\n+        ident: &Ident,\n         sig_hi: &mut Span,\n     ) -> PResult<'a, Option<P<Block>>> {\n-        let (inner_attrs, body) = if self.check(&token::Semi) {\n+        let (inner_attrs, body) = if self.eat(&token::Semi) {\n             // Include the trailing semicolon in the span of the signature\n-            *sig_hi = self.token.span;\n-            self.bump(); // `;`\n+            *sig_hi = self.prev_token.span;\n             (Vec::new(), None)\n         } else if self.check(&token::OpenDelim(token::Brace)) || self.token.is_whole_block() {\n             self.parse_inner_attrs_and_block().map(|(attrs, body)| (attrs, Some(body)))?\n@@ -1574,7 +1574,21 @@ impl<'a> Parser<'a> {\n                 .emit();\n             (Vec::new(), Some(self.mk_block_err(span)))\n         } else {\n-            return self.expected_semi_or_open_brace();\n+            if let Err(mut err) =\n+                self.expected_one_of_not_found(&[], &[token::Semi, token::OpenDelim(token::Brace)])\n+            {\n+                if self.token.kind == token::CloseDelim(token::Brace) {\n+                    // The enclosing `mod`, `trait` or `impl` is being closed, so keep the `fn` in\n+                    // the AST for typechecking.\n+                    err.span_label(ident.span, \"while parsing this `fn`\");\n+                    err.emit();\n+                    (Vec::new(), None)\n+                } else {\n+                    return Err(err);\n+                }\n+            } else {\n+                unreachable!()\n+            }\n         };\n         attrs.extend(inner_attrs);\n         Ok(body)\n@@ -1652,10 +1666,19 @@ impl<'a> Parser<'a> {\n         req_name: ReqName,\n         ret_allow_plus: AllowPlus,\n     ) -> PResult<'a, P<FnDecl>> {\n-        Ok(P(FnDecl {\n-            inputs: self.parse_fn_params(req_name)?,\n-            output: self.parse_ret_ty(ret_allow_plus, RecoverQPath::Yes)?,\n-        }))\n+        let inputs = self.parse_fn_params(req_name)?;\n+        let output = self.parse_ret_ty(ret_allow_plus, RecoverQPath::Yes)?;\n+\n+        if let ast::FnRetTy::Ty(ty) = &output {\n+            if let TyKind::Path(_, Path { segments, .. }) = &ty.kind {\n+                if let [.., last] = &segments[..] {\n+                    // Detect and recover `fn foo() -> Vec<i32>> {}`\n+                    self.check_trailing_angle_brackets(last, &[&token::OpenDelim(token::Brace)]);\n+                }\n+            }\n+        }\n+\n+        Ok(P(FnDecl { inputs, output }))\n     }\n \n     /// Parses the parameter list of a function, including the `(` and `)` delimiters."}, {"sha": "7a6ebca4e1541db1a45346be11063a1fbaaaaf3d", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=892ebe9afe9d299a5ff22b9dec1a84a653b85f78", "patch": "@@ -265,7 +265,19 @@ impl<'a> Parser<'a> {\n     /// Parses an array (`[TYPE; EXPR]`) or slice (`[TYPE]`) type.\n     /// The opening `[` bracket is already eaten.\n     fn parse_array_or_slice_ty(&mut self) -> PResult<'a, TyKind> {\n-        let elt_ty = self.parse_ty()?;\n+        let elt_ty = match self.parse_ty() {\n+            Ok(ty) => ty,\n+            Err(mut err)\n+                if self.look_ahead(1, |t| t.kind == token::CloseDelim(token::Bracket))\n+                    | self.look_ahead(1, |t| t.kind == token::Semi) =>\n+            {\n+                // Recover from `[LIT; EXPR]` and `[LIT]`\n+                self.bump();\n+                err.emit();\n+                self.mk_ty(self.prev_token.span, TyKind::Err)\n+            }\n+            Err(err) => return Err(err),\n+        };\n         let ty = if self.eat(&token::Semi) {\n             TyKind::Array(elt_ty, self.parse_anon_const_expr()?)\n         } else {"}, {"sha": "46b5aa334ca6f2fb9dcc7153d6a94500c957ec15", "filename": "src/test/ui/issues/issue-39616.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/src%2Ftest%2Fui%2Fissues%2Fissue-39616.rs", "raw_url": "https://github.com/rust-lang/rust/raw/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/src%2Ftest%2Fui%2Fissues%2Fissue-39616.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39616.rs?ref=892ebe9afe9d299a5ff22b9dec1a84a653b85f78", "patch": "@@ -1,4 +1,3 @@\n fn foo(a: [0; 1]) {} //~ ERROR expected type, found `0`\n-//~| ERROR expected `;` or `{`, found `]`\n \n fn main() {}"}, {"sha": "393d1f2e2ce676532abb776d2f7237336537e927", "filename": "src/test/ui/issues/issue-39616.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/src%2Ftest%2Fui%2Fissues%2Fissue-39616.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/src%2Ftest%2Fui%2Fissues%2Fissue-39616.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39616.stderr?ref=892ebe9afe9d299a5ff22b9dec1a84a653b85f78", "patch": "@@ -4,11 +4,5 @@ error: expected type, found `0`\n LL | fn foo(a: [0; 1]) {}\n    |            ^ expected type\n \n-error: expected `;` or `{`, found `]`\n-  --> $DIR/issue-39616.rs:1:16\n-   |\n-LL | fn foo(a: [0; 1]) {}\n-   |                ^ expected `;` or `{`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "332a3014416b57569985af36858c5b3b54f185a0", "filename": "src/test/ui/issues/issue-58856-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.rs?ref=892ebe9afe9d299a5ff22b9dec1a84a653b85f78", "patch": "@@ -2,7 +2,7 @@ impl A {\n     //~^ ERROR cannot find type `A` in this scope\n     fn b(self>\n     //~^ ERROR expected one of `)`, `,`, or `:`, found `>`\n-    //~| ERROR expected `;` or `{`, found `>`\n+    //~| ERROR expected one of `->`, `;`, `where`, or `{`, found `>`\n }\n \n fn main() {}"}, {"sha": "f1abb40ed7a739a4dde60dfa33edb4f330f0879d", "filename": "src/test/ui/issues/issue-58856-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.stderr?ref=892ebe9afe9d299a5ff22b9dec1a84a653b85f78", "patch": "@@ -6,14 +6,14 @@ LL |     fn b(self>\n    |         |\n    |         unclosed delimiter\n \n-error: expected `;` or `{`, found `>`\n+error: expected one of `->`, `;`, `where`, or `{`, found `>`\n   --> $DIR/issue-58856-1.rs:3:14\n    |\n LL | impl A {\n    |        - while parsing this item list starting here\n LL |\n LL |     fn b(self>\n-   |              ^ expected `;` or `{`\n+   |              ^ expected one of `->`, `;`, `where`, or `{`\n ...\n LL | }\n    | - the item list ends here"}, {"sha": "c791fb3ae674970948a888bdc260d629a8bad221", "filename": "src/test/ui/parser/fn-colon-return-type.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/src%2Ftest%2Fui%2Fparser%2Ffn-colon-return-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/src%2Ftest%2Fui%2Fparser%2Ffn-colon-return-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-colon-return-type.rs?ref=892ebe9afe9d299a5ff22b9dec1a84a653b85f78", "patch": "@@ -0,0 +1,5 @@\n+fn foo(x: i32): i32 { //~ ERROR expected one of `->`, `;`, `where`, or `{`, found `:`\n+    x\n+}\n+\n+fn main() {}"}, {"sha": "92df9bc60bd3c1162d8f3d51c8a5e8af1fdcce5a", "filename": "src/test/ui/parser/fn-colon-return-type.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/src%2Ftest%2Fui%2Fparser%2Ffn-colon-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/src%2Ftest%2Fui%2Fparser%2Ffn-colon-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-colon-return-type.stderr?ref=892ebe9afe9d299a5ff22b9dec1a84a653b85f78", "patch": "@@ -0,0 +1,8 @@\n+error: expected one of `->`, `;`, `where`, or `{`, found `:`\n+  --> $DIR/fn-colon-return-type.rs:1:15\n+   |\n+LL | fn foo(x: i32): i32 {\n+   |               ^ expected one of `->`, `;`, `where`, or `{`\n+\n+error: aborting due to previous error\n+"}, {"sha": "20665b549d2577ffe35adebcc4590234afdfe0ca", "filename": "src/test/ui/parser/issue-24780.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/src%2Ftest%2Fui%2Fparser%2Fissue-24780.rs", "raw_url": "https://github.com/rust-lang/rust/raw/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/src%2Ftest%2Fui%2Fparser%2Fissue-24780.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-24780.rs?ref=892ebe9afe9d299a5ff22b9dec1a84a653b85f78", "patch": "@@ -1,8 +1,9 @@\n // Verify that '>' is not both expected and found at the same time, as it used\n // to happen in #24780. For example, following should be an error:\n-// expected one of ..., `>`, ... found `>`\n+// expected one of ..., `>`, ... found `>`. No longer exactly this, but keeping for posterity.\n \n-fn foo() -> Vec<usize>> {\n-    //~^ ERROR expected `;` or `{`, found `>`\n+fn foo() -> Vec<usize>> { //~ ERROR unmatched angle bracket\n     Vec::new()\n }\n+\n+fn main() {}"}, {"sha": "d12b13d35f8ad4ed22572d770520f7cb22358821", "filename": "src/test/ui/parser/issue-24780.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/src%2Ftest%2Fui%2Fparser%2Fissue-24780.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/src%2Ftest%2Fui%2Fparser%2Fissue-24780.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-24780.stderr?ref=892ebe9afe9d299a5ff22b9dec1a84a653b85f78", "patch": "@@ -1,8 +1,8 @@\n-error: expected `;` or `{`, found `>`\n+error: unmatched angle bracket\n   --> $DIR/issue-24780.rs:5:23\n    |\n LL | fn foo() -> Vec<usize>> {\n-   |                       ^ expected `;` or `{`\n+   |                       ^^ help: remove extra angle bracket\n \n error: aborting due to previous error\n "}, {"sha": "9ed5a61220bde543f6d8043d43c2df2c4745117b", "filename": "src/test/ui/parser/issue-6610.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/src%2Ftest%2Fui%2Fparser%2Fissue-6610.rs", "raw_url": "https://github.com/rust-lang/rust/raw/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/src%2Ftest%2Fui%2Fparser%2Fissue-6610.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-6610.rs?ref=892ebe9afe9d299a5ff22b9dec1a84a653b85f78", "patch": "@@ -1,3 +1,3 @@\n-trait Foo { fn a() } //~ ERROR expected `;` or `{`, found `}`\n+trait Foo { fn a() } //~ ERROR expected one of `->`, `;`, `where`, or `{`, found `}`\n \n fn main() {}"}, {"sha": "4a3bc752553b982ac47ebeff39eeeda7f2fa984f", "filename": "src/test/ui/parser/issue-6610.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/src%2Ftest%2Fui%2Fparser%2Fissue-6610.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/src%2Ftest%2Fui%2Fparser%2Fissue-6610.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-6610.stderr?ref=892ebe9afe9d299a5ff22b9dec1a84a653b85f78", "patch": "@@ -1,12 +1,10 @@\n-error: expected `;` or `{`, found `}`\n+error: expected one of `->`, `;`, `where`, or `{`, found `}`\n   --> $DIR/issue-6610.rs:1:20\n    |\n LL | trait Foo { fn a() }\n-   |           -        ^\n-   |           |        |\n-   |           |        expected `;` or `{`\n-   |           |        the item list ends here\n-   |           while parsing this item list starting here\n+   |                -   ^ expected one of `->`, `;`, `where`, or `{`\n+   |                |\n+   |                while parsing this `fn`\n \n error: aborting due to previous error\n "}, {"sha": "22e1c2f97e76936c4a95f046afc3d45b0dd5cb87", "filename": "src/test/ui/parser/missing_right_paren.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/src%2Ftest%2Fui%2Fparser%2Fmissing_right_paren.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/src%2Ftest%2Fui%2Fparser%2Fmissing_right_paren.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmissing_right_paren.stderr?ref=892ebe9afe9d299a5ff22b9dec1a84a653b85f78", "patch": "@@ -22,11 +22,11 @@ error: expected one of `:` or `|`, found `)`\n LL | fn main((\u063c\n    |           ^ expected one of `:` or `|`\n \n-error: expected `;` or `{`, found `<eof>`\n+error: expected one of `->`, `;`, `where`, or `{`, found `<eof>`\n   --> $DIR/missing_right_paren.rs:3:11\n    |\n LL | fn main((\u063c\n-   |           ^ expected `;` or `{`\n+   |           ^ expected one of `->`, `;`, `where`, or `{`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "1b3d9bf66bb6072643767443a68dd6b82a1df0f8", "filename": "src/test/ui/parser/not-a-pred.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/src%2Ftest%2Fui%2Fparser%2Fnot-a-pred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/src%2Ftest%2Fui%2Fparser%2Fnot-a-pred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnot-a-pred.rs?ref=892ebe9afe9d299a5ff22b9dec1a84a653b85f78", "patch": "@@ -1,6 +1,5 @@\n-// error-pattern: lt\n-\n fn f(a: isize, b: isize) : lt(a, b) { }\n+//~^ ERROR expected one of `->`, `;`, `where`, or `{`, found `:`\n \n fn lt(a: isize, b: isize) { }\n "}, {"sha": "ec413c5594c44429e497920a88298429f64a5ef3", "filename": "src/test/ui/parser/not-a-pred.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/src%2Ftest%2Fui%2Fparser%2Fnot-a-pred.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/892ebe9afe9d299a5ff22b9dec1a84a653b85f78/src%2Ftest%2Fui%2Fparser%2Fnot-a-pred.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fnot-a-pred.stderr?ref=892ebe9afe9d299a5ff22b9dec1a84a653b85f78", "patch": "@@ -1,8 +1,8 @@\n-error: expected `;` or `{`, found `:`\n-  --> $DIR/not-a-pred.rs:3:26\n+error: expected one of `->`, `;`, `where`, or `{`, found `:`\n+  --> $DIR/not-a-pred.rs:1:26\n    |\n LL | fn f(a: isize, b: isize) : lt(a, b) { }\n-   |                          ^ expected `;` or `{`\n+   |                          ^ expected one of `->`, `;`, `where`, or `{`\n \n error: aborting due to previous error\n "}]}