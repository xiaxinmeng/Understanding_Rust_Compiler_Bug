{"sha": "02f57f83a9ea5903cb02bdc304800661c8f4296f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyZjU3ZjgzYTllYTU5MDNjYjAyYmRjMzA0ODAwNjYxYzhmNDI5NmY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-03T20:22:18Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-03T20:22:18Z"}, "message": "review comments", "tree": {"sha": "b0a392f842107e5b11569fed4e3c09d23577239d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0a392f842107e5b11569fed4e3c09d23577239d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02f57f83a9ea5903cb02bdc304800661c8f4296f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02f57f83a9ea5903cb02bdc304800661c8f4296f", "html_url": "https://github.com/rust-lang/rust/commit/02f57f83a9ea5903cb02bdc304800661c8f4296f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02f57f83a9ea5903cb02bdc304800661c8f4296f/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1499a864688a484c04c4e53962dc8ec44f79a03", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1499a864688a484c04c4e53962dc8ec44f79a03", "html_url": "https://github.com/rust-lang/rust/commit/f1499a864688a484c04c4e53962dc8ec44f79a03"}], "stats": {"total": 122, "additions": 81, "deletions": 41}, "files": [{"sha": "811a48a39f0dfa664c3b19b9729e1ad4a46f0595", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/02f57f83a9ea5903cb02bdc304800661c8f4296f/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02f57f83a9ea5903cb02bdc304800661c8f4296f/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=02f57f83a9ea5903cb02bdc304800661c8f4296f", "patch": "@@ -298,9 +298,13 @@ impl Diagnostic {\n     /// * may contain a name of a function, variable, or type, but not whole expressions\n     ///\n     /// See `CodeSuggestion` for more information.\n-    pub fn span_suggestion(&mut self, sp: Span, msg: &str,\n-                                       suggestion: String,\n-                                       applicability: Applicability) -> &mut Self {\n+    pub fn span_suggestion(\n+        &mut self,\n+        sp: Span,\n+        msg: &str,\n+        suggestion: String,\n+        applicability: Applicability,\n+    ) -> &mut Self {\n         self.suggestions.push(CodeSuggestion {\n             substitutions: vec![Substitution {\n                 parts: vec![SubstitutionPart {\n@@ -315,10 +319,35 @@ impl Diagnostic {\n         self\n     }\n \n+    pub fn span_suggestion_verbose(\n+        &mut self,\n+        sp: Span,\n+        msg: &str,\n+        suggestion: String,\n+        applicability: Applicability,\n+    ) -> &mut Self {\n+        self.suggestions.push(CodeSuggestion {\n+            substitutions: vec![Substitution {\n+                parts: vec![SubstitutionPart {\n+                    snippet: suggestion,\n+                    span: sp,\n+                }],\n+            }],\n+            msg: msg.to_owned(),\n+            style: SuggestionStyle::ShowAlways,\n+            applicability,\n+        });\n+        self\n+    }\n+\n     /// Prints out a message with multiple suggested edits of the code.\n-    pub fn span_suggestions(&mut self, sp: Span, msg: &str,\n-        suggestions: impl Iterator<Item = String>, applicability: Applicability) -> &mut Self\n-    {\n+    pub fn span_suggestions(\n+        &mut self,\n+        sp: Span,\n+        msg: &str,\n+        suggestions: impl Iterator<Item = String>,\n+        applicability: Applicability,\n+    ) -> &mut Self {\n         self.suggestions.push(CodeSuggestion {\n             substitutions: suggestions.map(|snippet| Substitution {\n                 parts: vec![SubstitutionPart {"}, {"sha": "bd8191065eeca69489d8de568baf7e03504159ba", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02f57f83a9ea5903cb02bdc304800661c8f4296f/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02f57f83a9ea5903cb02bdc304800661c8f4296f/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=02f57f83a9ea5903cb02bdc304800661c8f4296f", "patch": "@@ -221,7 +221,9 @@ pub trait Emitter {\n                // when this style is set we want the suggestion to be a message, not inline\n                sugg.style != SuggestionStyle::HideCodeAlways &&\n                // trivial suggestion for tooling's sake, never shown\n-               sugg.style != SuggestionStyle::CompletelyHidden\n+               sugg.style != SuggestionStyle::CompletelyHidden &&\n+               // subtle suggestion, never shown inline\n+               sugg.style != SuggestionStyle::ShowAlways\n             {\n                 let substitution = &sugg.substitutions[0].parts[0].snippet.trim();\n                 let msg = if substitution.len() == 0 || sugg.style.hide_inline() {"}, {"sha": "2fae584c153621a8eb891575b8a13295419d07ab", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02f57f83a9ea5903cb02bdc304800661c8f4296f/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02f57f83a9ea5903cb02bdc304800661c8f4296f/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=02f57f83a9ea5903cb02bdc304800661c8f4296f", "patch": "@@ -81,6 +81,8 @@ pub enum SuggestionStyle {\n     /// This will *not* show the code if the suggestion is inline *and* the suggested code is\n     /// empty.\n     ShowCode,\n+    /// Always show the suggested code independently.\n+    ShowAlways,\n }\n \n impl SuggestionStyle {"}, {"sha": "e3abf8ffc6c8f1ca2b5484d65979d2cdac6fa9ed", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 32, "deletions": 25, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/02f57f83a9ea5903cb02bdc304800661c8f4296f/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02f57f83a9ea5903cb02bdc304800661c8f4296f/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=02f57f83a9ea5903cb02bdc304800661c8f4296f", "patch": "@@ -17,8 +17,7 @@ use syntax_pos::{Span, DUMMY_SP, MultiSpan, SpanSnippetError};\n use log::{debug, trace};\n use std::mem;\n \n-const TURBOFISH: &'static str = \"use the \\\"turbofish\\\" `::<...>` instead of `<...>` to specify \\\n-                                 type arguments\";\n+const TURBOFISH: &'static str = \"use `::<...>` instead of `<...>` to specify type arguments\";\n /// Creates a placeholder argument.\n crate fn dummy_arg(ident: Ident) -> Param {\n     let pat = P(Pat {\n@@ -585,7 +584,7 @@ impl<'a> Parser<'a> {\n                 );\n \n                 let suggest = |err: &mut DiagnosticBuilder<'_>| {\n-                    err.span_suggestion(\n+                    err.span_suggestion_verbose(\n                         op_span.shrink_to_lo(),\n                         TURBOFISH,\n                         \"::\".to_string(),\n@@ -647,29 +646,16 @@ impl<'a> Parser<'a> {\n                         // We have high certainty that this was a bad turbofish at this point.\n                         // `foo< bar >(`\n                         suggest(&mut err);\n-\n-                        let snapshot = self.clone();\n-                        self.bump(); // `(`\n-\n                         // Consume the fn call arguments.\n-                        let modifiers = [\n-                            (token::OpenDelim(token::Paren), 1),\n-                            (token::CloseDelim(token::Paren), -1),\n-                        ];\n-                        self.consume_tts(1, &modifiers[..]);\n-\n-                        if self.token.kind == token::Eof {\n-                            // Not entirely sure now, but we bubble the error up with the\n-                            // suggestion.\n-                            mem::replace(self, snapshot);\n-                            Err(err)\n-                        } else {\n-                            // 99% certain that the suggestion is correct, continue parsing.\n-                            err.emit();\n-                            // FIXME: actually check that the two expressions in the binop are\n-                            // paths and resynthesize new fn call expression instead of using\n-                            // `ExprKind::Err` placeholder.\n-                            mk_err_expr(self, lhs.span.to(self.prev_span))\n+                        match self.consume_fn_args() {\n+                            Err(()) => Err(err),\n+                            Ok(()) => {\n+                                err.emit();\n+                                // FIXME: actually check that the two expressions in the binop are\n+                                // paths and resynthesize new fn call expression instead of using\n+                                // `ExprKind::Err` placeholder.\n+                                mk_err_expr(self, lhs.span.to(self.prev_span))\n+                            }\n                         }\n                     } else {\n                         // All we know is that this is `foo < bar >` and *nothing* else. Try to\n@@ -687,6 +673,27 @@ impl<'a> Parser<'a> {\n         Ok(None)\n     }\n \n+    fn consume_fn_args(&mut self) -> Result<(), ()> {\n+        let snapshot = self.clone();\n+        self.bump(); // `(`\n+\n+        // Consume the fn call arguments.\n+        let modifiers = [\n+            (token::OpenDelim(token::Paren), 1),\n+            (token::CloseDelim(token::Paren), -1),\n+        ];\n+        self.consume_tts(1, &modifiers[..]);\n+\n+        if self.token.kind == token::Eof {\n+            // Not entirely sure that what we consumed were fn arguments, rollback.\n+            mem::replace(self, snapshot);\n+            Err(())\n+        } else {\n+            // 99% certain that the suggestion is correct, continue parsing.\n+            Ok(())\n+        }\n+    }\n+\n     crate fn maybe_report_ambiguous_plus(\n         &mut self,\n         allow_plus: bool,"}, {"sha": "7fc7c2628c472ddbc46f76f1d1d7e28c9a5986e4", "filename": "src/test/ui/did_you_mean/issue-40396.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02f57f83a9ea5903cb02bdc304800661c8f4296f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02f57f83a9ea5903cb02bdc304800661c8f4296f/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr?ref=02f57f83a9ea5903cb02bdc304800661c8f4296f", "patch": "@@ -3,7 +3,7 @@ error: chained comparison operators require parentheses\n    |\n LL |     (0..13).collect<Vec<i32>>();\n    |                    ^^^^^\n-help: use the \"turbofish\" `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type arguments\n    |\n LL |     (0..13).collect::<Vec<i32>>();\n    |                    ^^\n@@ -13,7 +13,7 @@ error: chained comparison operators require parentheses\n    |\n LL |     Vec<i32>::new();\n    |        ^^^^^\n-help: use the \"turbofish\" `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type arguments\n    |\n LL |     Vec::<i32>::new();\n    |        ^^\n@@ -23,7 +23,7 @@ error: chained comparison operators require parentheses\n    |\n LL |     (0..13).collect<Vec<i32>();\n    |                    ^^^^^\n-help: use the \"turbofish\" `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type arguments\n    |\n LL |     (0..13).collect::<Vec<i32>();\n    |                    ^^"}, {"sha": "9c7a25d589a1f9aafa988098042db58979b5dc5a", "filename": "src/test/ui/parser/require-parens-for-chained-comparison.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02f57f83a9ea5903cb02bdc304800661c8f4296f/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02f57f83a9ea5903cb02bdc304800661c8f4296f/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs?ref=02f57f83a9ea5903cb02bdc304800661c8f4296f", "patch": "@@ -12,15 +12,15 @@ fn main() {\n \n     f<X>();\n     //~^ ERROR chained comparison operators require parentheses\n-    //~| HELP use the \"turbofish\" `::<...>` instead of `<...>` to specify type arguments\n+    //~| HELP use `::<...>` instead of `<...>` to specify type arguments\n \n     f<Result<Option<X>, Option<Option<X>>>(1, 2);\n     //~^ ERROR chained comparison operators require parentheses\n-    //~| HELP use the \"turbofish\" `::<...>` instead of `<...>` to specify type arguments\n+    //~| HELP use `::<...>` instead of `<...>` to specify type arguments\n \n     use std::convert::identity;\n     let _ = identity<u8>;\n     //~^ ERROR chained comparison operators require parentheses\n-    //~| HELP use the \"turbofish\" `::<...>` instead of `<...>` to specify type arguments\n+    //~| HELP use `::<...>` instead of `<...>` to specify type arguments\n     //~| HELP or use `(...)` if you meant to specify fn arguments\n }"}, {"sha": "5aa37a40cbd3dc23d1383eae5f2325096400bb16", "filename": "src/test/ui/parser/require-parens-for-chained-comparison.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02f57f83a9ea5903cb02bdc304800661c8f4296f/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02f57f83a9ea5903cb02bdc304800661c8f4296f/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr?ref=02f57f83a9ea5903cb02bdc304800661c8f4296f", "patch": "@@ -15,7 +15,7 @@ error: chained comparison operators require parentheses\n    |\n LL |     f<X>();\n    |      ^^^\n-help: use the \"turbofish\" `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type arguments\n    |\n LL |     f::<X>();\n    |      ^^\n@@ -25,7 +25,7 @@ error: chained comparison operators require parentheses\n    |\n LL |     f<Result<Option<X>, Option<Option<X>>>(1, 2);\n    |      ^^^^^^^^\n-help: use the \"turbofish\" `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type arguments\n    |\n LL |     f::<Result<Option<X>, Option<Option<X>>>(1, 2);\n    |      ^^\n@@ -36,7 +36,7 @@ error: chained comparison operators require parentheses\n LL |     let _ = identity<u8>;\n    |                     ^^^^\n    |\n-   = help: use the \"turbofish\" `::<...>` instead of `<...>` to specify type arguments\n+   = help: use `::<...>` instead of `<...>` to specify type arguments\n    = help: or use `(...)` if you meant to specify fn arguments\n \n error[E0308]: mismatched types"}]}