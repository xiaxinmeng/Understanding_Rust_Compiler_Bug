{"sha": "0da1a69003bd37ef0ee2cde2eb66a9e2752fc6c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkYTFhNjkwMDNiZDM3ZWYwZWUyY2RlMmViNjZhOWUyNzUyZmM2YzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-08T01:37:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-08T01:37:52Z"}, "message": "Auto merge of #50260 - Manishearth:no-extern-crate, r=nikomatsakis\n\nidiom lints for removing `extern crate`\n\nBased off of https://github.com/rust-lang/rust/pull/49789\n\nThis contains two lints:\n\n - One that suggests replacing pub extern crates with pub use, and removing non-pub extern crates entirely\n - One that suggests rewriting `use modulename::...::cratename::foo` as `cratename::foo`\n\nThe latter is a bit tricky to emit suggestions for; for one this involves splicing spans (never a good idea), and it also won't be able to correctly\nhandle `use module::{cratename, foo}` and use-trees. I'm not sure how to proceed here. Currently it doesn't suggest anything at all.\n\nPerhaps we can go the other way and suggest removal of all extern crates _except_ those used through modules (stash node ids somewhere) and suggest replacing those with `<visibility> use`?\n\nr? @nikomatsakis\n\nfixes https://github.com/rust-lang/rust/issues/48719", "tree": {"sha": "edd8b535e989e1c8e723a41dfb26ecdc80adb828", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edd8b535e989e1c8e723a41dfb26ecdc80adb828"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0da1a69003bd37ef0ee2cde2eb66a9e2752fc6c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0da1a69003bd37ef0ee2cde2eb66a9e2752fc6c2", "html_url": "https://github.com/rust-lang/rust/commit/0da1a69003bd37ef0ee2cde2eb66a9e2752fc6c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0da1a69003bd37ef0ee2cde2eb66a9e2752fc6c2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "715d6a98aa4908dfb85b55f97e51af330d0baf7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/715d6a98aa4908dfb85b55f97e51af330d0baf7f", "html_url": "https://github.com/rust-lang/rust/commit/715d6a98aa4908dfb85b55f97e51af330d0baf7f"}, {"sha": "01791dee8a6c93bdbc9e3c9369b6b5f0ee35e5c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/01791dee8a6c93bdbc9e3c9369b6b5f0ee35e5c8", "html_url": "https://github.com/rust-lang/rust/commit/01791dee8a6c93bdbc9e3c9369b6b5f0ee35e5c8"}], "stats": {"total": 190, "additions": 189, "deletions": 1}, "files": [{"sha": "7ae13c803ddcaa794ec1f2b70be780eaa4f69a4c", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/0da1a69003bd37ef0ee2cde2eb66a9e2752fc6c2/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da1a69003bd37ef0ee2cde2eb66a9e2752fc6c2/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=0da1a69003bd37ef0ee2cde2eb66a9e2752fc6c2", "patch": "@@ -1520,3 +1520,66 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedBrokenConst {\n         }\n     }\n }\n+\n+declare_lint! {\n+    pub UNNECESSARY_EXTERN_CRATE,\n+    Allow,\n+    \"suggest removing `extern crate` for the 2018 edition\"\n+}\n+\n+pub struct ExternCrate(/* depth */ u32);\n+\n+impl ExternCrate {\n+    pub fn new() -> Self {\n+        ExternCrate(0)\n+    }\n+}\n+\n+impl LintPass for ExternCrate {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(UNNECESSARY_EXTERN_CRATE)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExternCrate {\n+    fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n+        if let hir::ItemExternCrate(ref orig) =  it.node {\n+            if it.attrs.iter().any(|a| a.check_name(\"macro_use\")) {\n+                return\n+            }\n+            let mut err = cx.struct_span_lint(UNNECESSARY_EXTERN_CRATE,\n+                it.span, \"`extern crate` is unnecessary in the new edition\");\n+            if it.vis == hir::Visibility::Public || self.0 > 1 || orig.is_some() {\n+                let pub_ = if it.vis == hir::Visibility::Public {\n+                    \"pub \"\n+                } else {\n+                    \"\"\n+                };\n+\n+                let help = format!(\"use `{}use`\", pub_);\n+\n+                if let Some(orig) = orig {\n+                    err.span_suggestion(it.span, &help,\n+                        format!(\"{}use {} as {}\", pub_, orig, it.name));\n+                } else {\n+                    err.span_suggestion(it.span, &help,\n+                        format!(\"{}use {}\", pub_, it.name));\n+                }\n+            } else {\n+                err.span_suggestion(it.span, \"remove it\", \"\".into());\n+            }\n+\n+            err.emit();\n+        }\n+    }\n+\n+    fn check_mod(&mut self, _: &LateContext, _: &hir::Mod,\n+                 _: Span, _: ast::NodeId) {\n+        self.0 += 1;\n+    }\n+\n+    fn check_mod_post(&mut self, _: &LateContext, _: &hir::Mod,\n+                      _: Span, _: ast::NodeId) {\n+        self.0 += 1;\n+    }\n+}"}, {"sha": "4403e1e3358b288bc174d42211a887d1cc112da4", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0da1a69003bd37ef0ee2cde2eb66a9e2752fc6c2/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da1a69003bd37ef0ee2cde2eb66a9e2752fc6c2/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=0da1a69003bd37ef0ee2cde2eb66a9e2752fc6c2", "patch": "@@ -143,6 +143,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                           TypeLimits,\n                           MissingDoc,\n                           MissingDebugImplementations,\n+                          ExternCrate,\n                           );\n \n     add_lint_group!(sess,\n@@ -180,7 +181,8 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n     add_lint_group!(sess,\n                     \"rust_2018_migration\",\n                     BARE_TRAIT_OBJECT,\n-                    UNREACHABLE_PUB);\n+                    UNREACHABLE_PUB,\n+                    UNNECESSARY_EXTERN_CRATE);\n \n     // Guidelines for creating a future incompatibility lint:\n     //"}, {"sha": "9d678d91578bc1027db26cba228d1a80489178ae", "filename": "src/test/ui-fulldeps/unnecessary-extern-crate.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/0da1a69003bd37ef0ee2cde2eb66a9e2752fc6c2/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da1a69003bd37ef0ee2cde2eb66a9e2752fc6c2/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.rs?ref=0da1a69003bd37ef0ee2cde2eb66a9e2752fc6c2", "patch": "@@ -0,0 +1,55 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(unnecessary_extern_crate)]\n+#![feature(alloc, test, libc)]\n+\n+extern crate alloc;\n+//~^ ERROR `extern crate` is unnecessary in the new edition\n+//~| HELP remove\n+extern crate alloc as x;\n+//~^ ERROR `extern crate` is unnecessary in the new edition\n+//~| HELP use `use`\n+\n+#[macro_use]\n+extern crate test;\n+pub extern crate test as y;\n+//~^ ERROR `extern crate` is unnecessary in the new edition\n+//~| HELP use `pub use`\n+pub extern crate libc;\n+//~^ ERROR `extern crate` is unnecessary in the new edition\n+//~| HELP use `pub use`\n+\n+\n+mod foo {\n+    extern crate alloc;\n+    //~^ ERROR `extern crate` is unnecessary in the new edition\n+    //~| HELP use `use`\n+    extern crate alloc as x;\n+    //~^ ERROR `extern crate` is unnecessary in the new edition\n+    //~| HELP use `use`\n+    pub extern crate test;\n+    //~^ ERROR `extern crate` is unnecessary in the new edition\n+    //~| HELP use `pub use`\n+    pub extern crate test as y;\n+    //~^ ERROR `extern crate` is unnecessary in the new edition\n+    //~| HELP use `pub use`\n+    mod bar {\n+        extern crate alloc;\n+        //~^ ERROR `extern crate` is unnecessary in the new edition\n+        //~| HELP use `use`\n+        extern crate alloc as x;\n+        //~^ ERROR `extern crate` is unnecessary in the new edition\n+        //~| HELP use `use`\n+    }\n+}\n+\n+\n+fn main() {}"}, {"sha": "7718808be58baea95df41a1088ea3bc83028fecd", "filename": "src/test/ui-fulldeps/unnecessary-extern-crate.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/0da1a69003bd37ef0ee2cde2eb66a9e2752fc6c2/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0da1a69003bd37ef0ee2cde2eb66a9e2752fc6c2/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.stderr?ref=0da1a69003bd37ef0ee2cde2eb66a9e2752fc6c2", "patch": "@@ -0,0 +1,68 @@\n+error: `extern crate` is unnecessary in the new edition\n+  --> $DIR/unnecessary-extern-crate.rs:14:1\n+   |\n+LL | extern crate alloc;\n+   | ^^^^^^^^^^^^^^^^^^^ help: remove it\n+   |\n+note: lint level defined here\n+  --> $DIR/unnecessary-extern-crate.rs:11:9\n+   |\n+LL | #![deny(unnecessary_extern_crate)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `extern crate` is unnecessary in the new edition\n+  --> $DIR/unnecessary-extern-crate.rs:17:1\n+   |\n+LL | extern crate alloc as x;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `use`: `use alloc as x`\n+\n+error: `extern crate` is unnecessary in the new edition\n+  --> $DIR/unnecessary-extern-crate.rs:23:1\n+   |\n+LL | pub extern crate test as y;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `pub use`: `pub use test as y`\n+\n+error: `extern crate` is unnecessary in the new edition\n+  --> $DIR/unnecessary-extern-crate.rs:26:1\n+   |\n+LL | pub extern crate libc;\n+   | ^^^^^^^^^^^^^^^^^^^^^^ help: use `pub use`: `pub use libc`\n+\n+error: `extern crate` is unnecessary in the new edition\n+  --> $DIR/unnecessary-extern-crate.rs:32:5\n+   |\n+LL |     extern crate alloc;\n+   |     ^^^^^^^^^^^^^^^^^^^ help: use `use`: `use alloc`\n+\n+error: `extern crate` is unnecessary in the new edition\n+  --> $DIR/unnecessary-extern-crate.rs:35:5\n+   |\n+LL |     extern crate alloc as x;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `use`: `use alloc as x`\n+\n+error: `extern crate` is unnecessary in the new edition\n+  --> $DIR/unnecessary-extern-crate.rs:38:5\n+   |\n+LL |     pub extern crate test;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ help: use `pub use`: `pub use test`\n+\n+error: `extern crate` is unnecessary in the new edition\n+  --> $DIR/unnecessary-extern-crate.rs:41:5\n+   |\n+LL |     pub extern crate test as y;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `pub use`: `pub use test as y`\n+\n+error: `extern crate` is unnecessary in the new edition\n+  --> $DIR/unnecessary-extern-crate.rs:45:9\n+   |\n+LL |         extern crate alloc;\n+   |         ^^^^^^^^^^^^^^^^^^^ help: use `use`: `use alloc`\n+\n+error: `extern crate` is unnecessary in the new edition\n+  --> $DIR/unnecessary-extern-crate.rs:48:9\n+   |\n+LL |         extern crate alloc as x;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `use`: `use alloc as x`\n+\n+error: aborting due to 10 previous errors\n+"}]}