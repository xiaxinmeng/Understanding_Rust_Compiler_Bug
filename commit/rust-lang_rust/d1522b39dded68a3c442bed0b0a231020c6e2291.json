{"sha": "d1522b39dded68a3c442bed0b0a231020c6e2291", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNTIyYjM5ZGRlZDY4YTNjNDQyYmVkMGIwYTIzMTAyMGM2ZTIyOTE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-03-16T00:15:53Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-03-16T08:41:24Z"}, "message": "ast: Reduce size of `ExprKind` by boxing fields of `ExprKind::Struct`", "tree": {"sha": "d7c344573d658f5993154f877947f13a19a6f8bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7c344573d658f5993154f877947f13a19a6f8bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1522b39dded68a3c442bed0b0a231020c6e2291", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1522b39dded68a3c442bed0b0a231020c6e2291", "html_url": "https://github.com/rust-lang/rust/commit/d1522b39dded68a3c442bed0b0a231020c6e2291", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1522b39dded68a3c442bed0b0a231020c6e2291/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b25d3ba78118033b3f25b6de7a32e210d113872c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b25d3ba78118033b3f25b6de7a32e210d113872c", "html_url": "https://github.com/rust-lang/rust/commit/b25d3ba78118033b3f25b6de7a32e210d113872c"}], "stats": {"total": 76, "additions": 48, "deletions": 28}, "files": [{"sha": "d48b70e902efb34928ad150f6ae1812e1d8d1036", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d1522b39dded68a3c442bed0b0a231020c6e2291/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1522b39dded68a3c442bed0b0a231020c6e2291/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=d1522b39dded68a3c442bed0b0a231020c6e2291", "patch": "@@ -1074,7 +1074,7 @@ pub struct Expr {\n \n // `Expr` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(Expr, 120);\n+rustc_data_structures::static_assert_size!(Expr, 104);\n \n impl Expr {\n     /// Returns `true` if this expression would be valid somewhere that expects a value;\n@@ -1244,6 +1244,13 @@ pub enum StructRest {\n     None,\n }\n \n+#[derive(Clone, Encodable, Decodable, Debug)]\n+pub struct StructExpr {\n+    pub path: Path,\n+    pub fields: Vec<ExprField>,\n+    pub rest: StructRest,\n+}\n+\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub enum ExprKind {\n     /// A `box x` expression.\n@@ -1369,7 +1376,7 @@ pub enum ExprKind {\n     /// A struct literal expression.\n     ///\n     /// E.g., `Foo {x: 1, y: 2}`, or `Foo {x: 1, .. rest}`.\n-    Struct(Path, Vec<ExprField>, StructRest),\n+    Struct(P<StructExpr>),\n \n     /// An array literal constructed from one repeated element.\n     ///"}, {"sha": "f426f2c7fece55cc4258ad06af092560ac4b2b22", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1522b39dded68a3c442bed0b0a231020c6e2291/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1522b39dded68a3c442bed0b0a231020c6e2291/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=d1522b39dded68a3c442bed0b0a231020c6e2291", "patch": "@@ -1286,10 +1286,11 @@ pub fn noop_visit_expr<T: MutVisitor>(\n             visit_vec(inputs, |(_c, expr)| vis.visit_expr(expr));\n         }\n         ExprKind::MacCall(mac) => vis.visit_mac_call(mac),\n-        ExprKind::Struct(path, fields, expr) => {\n+        ExprKind::Struct(se) => {\n+            let StructExpr { path, fields, rest } = se.deref_mut();\n             vis.visit_path(path);\n             fields.flat_map_in_place(|field| vis.flat_map_expr_field(field));\n-            match expr {\n+            match rest {\n                 StructRest::Base(expr) => vis.visit_expr(expr),\n                 StructRest::Rest(_span) => {}\n                 StructRest::None => {}"}, {"sha": "b1ad29e4ad8639f2924c0a46c757419bbd25d7f7", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d1522b39dded68a3c442bed0b0a231020c6e2291/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1522b39dded68a3c442bed0b0a231020c6e2291/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=d1522b39dded68a3c442bed0b0a231020c6e2291", "patch": "@@ -721,10 +721,10 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n             visitor.visit_expr(element);\n             visitor.visit_anon_const(count)\n         }\n-        ExprKind::Struct(ref path, ref fields, ref optional_base) => {\n-            visitor.visit_path(path, expression.id);\n-            walk_list!(visitor, visit_expr_field, fields);\n-            match optional_base {\n+        ExprKind::Struct(ref se) => {\n+            visitor.visit_path(&se.path, expression.id);\n+            walk_list!(visitor, visit_expr_field, &se.fields);\n+            match &se.rest {\n                 StructRest::Base(expr) => visitor.visit_expr(expr),\n                 StructRest::Rest(_span) => {}\n                 StructRest::None => {}"}, {"sha": "0400a421f7f935e00227b6e7765f749ab245473a", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d1522b39dded68a3c442bed0b0a231020c6e2291/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1522b39dded68a3c442bed0b0a231020c6e2291/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=d1522b39dded68a3c442bed0b0a231020c6e2291", "patch": "@@ -224,8 +224,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 }\n                 ExprKind::InlineAsm(ref asm) => self.lower_expr_asm(e.span, asm),\n                 ExprKind::LlvmInlineAsm(ref asm) => self.lower_expr_llvm_asm(asm),\n-                ExprKind::Struct(ref path, ref fields, ref rest) => {\n-                    let rest = match rest {\n+                ExprKind::Struct(ref se) => {\n+                    let rest = match &se.rest {\n                         StructRest::Base(e) => Some(self.lower_expr(e)),\n                         StructRest::Rest(sp) => {\n                             self.sess\n@@ -240,11 +240,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         self.arena.alloc(self.lower_qpath(\n                             e.id,\n                             &None,\n-                            path,\n+                            &se.path,\n                             ParamMode::Optional,\n                             ImplTraitContext::disallowed(),\n                         )),\n-                        self.arena.alloc_from_iter(fields.iter().map(|x| self.lower_expr_field(x))),\n+                        self.arena\n+                            .alloc_from_iter(se.fields.iter().map(|x| self.lower_expr_field(x))),\n                         rest,\n                     )\n                 }\n@@ -1110,8 +1111,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 }\n             }\n             // Structs.\n-            ExprKind::Struct(path, fields, rest) => {\n-                let field_pats = self.arena.alloc_from_iter(fields.iter().map(|f| {\n+            ExprKind::Struct(se) => {\n+                let field_pats = self.arena.alloc_from_iter(se.fields.iter().map(|f| {\n                     let pat = self.destructure_assign(&f.expr, eq_sign_span, assignments);\n                     hir::PatField {\n                         hir_id: self.next_id(),\n@@ -1124,11 +1125,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let qpath = self.lower_qpath(\n                     lhs.id,\n                     &None,\n-                    path,\n+                    &se.path,\n                     ParamMode::Optional,\n                     ImplTraitContext::disallowed(),\n                 );\n-                let fields_omitted = match rest {\n+                let fields_omitted = match &se.rest {\n                     StructRest::Base(e) => {\n                         self.sess\n                             .struct_span_err("}, {"sha": "cb6f567c55140b7bdf0096838996d6c3a88f363c", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1522b39dded68a3c442bed0b0a231020c6e2291/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1522b39dded68a3c442bed0b0a231020c6e2291/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=d1522b39dded68a3c442bed0b0a231020c6e2291", "patch": "@@ -1873,8 +1873,8 @@ impl<'a> State<'a> {\n             ast::ExprKind::Repeat(ref element, ref count) => {\n                 self.print_expr_repeat(element, count, attrs);\n             }\n-            ast::ExprKind::Struct(ref path, ref fields, ref rest) => {\n-                self.print_expr_struct(path, &fields[..], rest, attrs);\n+            ast::ExprKind::Struct(ref se) => {\n+                self.print_expr_struct(&se.path, &se.fields, &se.rest, attrs);\n             }\n             ast::ExprKind::Tup(ref exprs) => {\n                 self.print_expr_tup(&exprs[..], attrs);"}, {"sha": "3664ff3ae8a2d89418ee2bff417811a9b9968408", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1522b39dded68a3c442bed0b0a231020c6e2291/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1522b39dded68a3c442bed0b0a231020c6e2291/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=d1522b39dded68a3c442bed0b0a231020c6e2291", "patch": "@@ -284,7 +284,10 @@ impl<'a> ExtCtxt<'a> {\n         path: ast::Path,\n         fields: Vec<ast::ExprField>,\n     ) -> P<ast::Expr> {\n-        self.expr(span, ast::ExprKind::Struct(path, fields, ast::StructRest::None))\n+        self.expr(\n+            span,\n+            ast::ExprKind::Struct(P(ast::StructExpr { path, fields, rest: ast::StructRest::None })),\n+        )\n     }\n     pub fn expr_struct_ident(\n         &self,"}, {"sha": "a3f2a8b3c57084b53e237f0b617bc219eca864a9", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1522b39dded68a3c442bed0b0a231020c6e2291/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1522b39dded68a3c442bed0b0a231020c6e2291/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=d1522b39dded68a3c442bed0b0a231020c6e2291", "patch": "@@ -2373,7 +2373,11 @@ impl<'a> Parser<'a> {\n \n         let span = pth.span.to(self.token.span);\n         self.expect(&token::CloseDelim(token::Brace))?;\n-        let expr = if recover_async { ExprKind::Err } else { ExprKind::Struct(pth, fields, base) };\n+        let expr = if recover_async {\n+            ExprKind::Err\n+        } else {\n+            ExprKind::Struct(P(ast::StructExpr { path: pth, fields, rest: base }))\n+        };\n         Ok(self.mk_expr(span, expr, attrs))\n     }\n "}, {"sha": "af241ef8afccf47aa6967b3563f51b00693c360a", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1522b39dded68a3c442bed0b0a231020c6e2291/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1522b39dded68a3c442bed0b0a231020c6e2291/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=d1522b39dded68a3c442bed0b0a231020c6e2291", "patch": "@@ -2251,8 +2251,8 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 visit::walk_expr(self, expr);\n             }\n \n-            ExprKind::Struct(ref path, ..) => {\n-                self.smart_resolve_path(expr.id, None, path, PathSource::Struct);\n+            ExprKind::Struct(ref se) => {\n+                self.smart_resolve_path(expr.id, None, &se.path, PathSource::Struct);\n                 visit::walk_expr(self, expr);\n             }\n "}, {"sha": "ac2d29c9caf9286340ca91cdc36390532a69bb1e", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1522b39dded68a3c442bed0b0a231020c6e2291/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1522b39dded68a3c442bed0b0a231020c6e2291/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=d1522b39dded68a3c442bed0b0a231020c6e2291", "patch": "@@ -155,7 +155,9 @@ fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n             },\n             17 => {\n                 let path = Path::from_ident(Ident::from_str(\"S\"));\n-                g(ExprKind::Struct(path, vec![], StructRest::Base(make_x())));\n+                g(ExprKind::Struct(P(StructExpr {\n+                    path, fields: vec![], rest: StructRest::Base(make_x())\n+                })));\n             },\n             18 => {\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::Try(e)));"}, {"sha": "9688ef393313ce7ad18623849ae8f5a4af34607a", "filename": "src/tools/clippy/clippy_lints/src/redundant_field_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1522b39dded68a3c442bed0b0a231020c6e2291/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1522b39dded68a3c442bed0b0a231020c6e2291/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_field_names.rs?ref=d1522b39dded68a3c442bed0b0a231020c6e2291", "patch": "@@ -58,8 +58,8 @@ impl EarlyLintPass for RedundantFieldNames {\n         if in_external_macro(cx.sess, expr.span) {\n             return;\n         }\n-        if let ExprKind::Struct(_, ref fields, _) = expr.kind {\n-            for field in fields {\n+        if let ExprKind::Struct(ref se) = expr.kind {\n+            for field in &se.fields {\n                 if field.is_shorthand {\n                     continue;\n                 }"}, {"sha": "9acc47deb066043ca8d53a06a8c829c7fd0bc7cc", "filename": "src/tools/clippy/clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1522b39dded68a3c442bed0b0a231020c6e2291/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1522b39dded68a3c442bed0b0a231020c6e2291/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=d1522b39dded68a3c442bed0b0a231020c6e2291", "patch": "@@ -564,7 +564,7 @@ fn ident_difference_expr_with_base_location(\n         | (Try(_), Try(_))\n         | (Paren(_), Paren(_))\n         | (Repeat(_, _), Repeat(_, _))\n-        | (Struct(_, _, _), Struct(_, _, _))\n+        | (Struct(_), Struct(_))\n         | (MacCall(_), MacCall(_))\n         | (LlvmInlineAsm(_), LlvmInlineAsm(_))\n         | (InlineAsm(_), InlineAsm(_))"}, {"sha": "ea9a910d1b92088f33e390423169db91f1aed737", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1522b39dded68a3c442bed0b0a231020c6e2291/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1522b39dded68a3c442bed0b0a231020c6e2291/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=d1522b39dded68a3c442bed0b0a231020c6e2291", "patch": "@@ -168,8 +168,10 @@ pub fn eq_expr(l: &Expr, r: &Expr) -> bool {\n         (AddrOf(lbk, lm, le), AddrOf(rbk, rm, re)) => lbk == rbk && lm == rm && eq_expr(le, re),\n         (Path(lq, lp), Path(rq, rp)) => both(lq, rq, |l, r| eq_qself(l, r)) && eq_path(lp, rp),\n         (MacCall(l), MacCall(r)) => eq_mac_call(l, r),\n-        (Struct(lp, lfs, lb), Struct(rp, rfs, rb)) => {\n-            eq_path(lp, rp) && eq_struct_rest(lb, rb) && unordered_over(lfs, rfs, |l, r| eq_field(l, r))\n+        (Struct(lse), Struct(rse)) => {\n+            eq_path(&lse.path, &rse.path) &&\n+            eq_struct_rest(&lse.rest, &rse.rest) &&\n+            unordered_over(&lse.fields, &rse.fields, |l, r| eq_field(l, r))\n         },\n         _ => false,\n     }"}]}