{"sha": "d1778767cca290e844d5aa9d044dcc2f9edc9d8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNzc4NzY3Y2NhMjkwZTg0NGQ1YWE5ZDA0NGRjYzJmOWVkYzlkOGM=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2013-03-18T04:40:59Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2013-03-18T04:40:59Z"}, "message": "rt: Inline get_sp_limit/set_sp_limit/get_sp for x86_64.", "tree": {"sha": "0add4512b9b993dbc6eb1811b720c14a8d0be7fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0add4512b9b993dbc6eb1811b720c14a8d0be7fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1778767cca290e844d5aa9d044dcc2f9edc9d8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1778767cca290e844d5aa9d044dcc2f9edc9d8c", "html_url": "https://github.com/rust-lang/rust/commit/d1778767cca290e844d5aa9d044dcc2f9edc9d8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1778767cca290e844d5aa9d044dcc2f9edc9d8c/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f54adca7c984c75334d9cb73ec85bf3b5c326ed9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f54adca7c984c75334d9cb73ec85bf3b5c326ed9", "html_url": "https://github.com/rust-lang/rust/commit/f54adca7c984c75334d9cb73ec85bf3b5c326ed9"}], "stats": {"total": 239, "additions": 175, "deletions": 64}, "files": [{"sha": "cd79884760777b02bf027749204d8b43faef9e98", "filename": "src/rt/arch/arm/sp.h", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d1778767cca290e844d5aa9d044dcc2f9edc9d8c/src%2Frt%2Farch%2Farm%2Fsp.h", "raw_url": "https://github.com/rust-lang/rust/raw/d1778767cca290e844d5aa9d044dcc2f9edc9d8c/src%2Frt%2Farch%2Farm%2Fsp.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Farm%2Fsp.h?ref=d1778767cca290e844d5aa9d044dcc2f9edc9d8c", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Getting the stack pointer and getting/setting sp limit.\n+\n+#ifndef SP_H\n+#define SP_H\n+\n+#include \"../../rust_globals.h\"\n+\n+// Gets a pointer to the vicinity of the current stack pointer\n+extern \"C\" uintptr_t get_sp();\n+\n+// Gets the pointer to the end of the Rust stack from a platform-\n+// specific location in the thread control block\n+extern \"C\" CDECL uintptr_t get_sp_limit();\n+\n+// Records the pointer to the end of the Rust stack in a platform-\n+// specific location in the thread control block\n+extern \"C\" CDECL void record_sp_limit(void *limit);\n+\n+#endif"}, {"sha": "cd79884760777b02bf027749204d8b43faef9e98", "filename": "src/rt/arch/i386/sp.h", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d1778767cca290e844d5aa9d044dcc2f9edc9d8c/src%2Frt%2Farch%2Fi386%2Fsp.h", "raw_url": "https://github.com/rust-lang/rust/raw/d1778767cca290e844d5aa9d044dcc2f9edc9d8c/src%2Frt%2Farch%2Fi386%2Fsp.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2Fsp.h?ref=d1778767cca290e844d5aa9d044dcc2f9edc9d8c", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Getting the stack pointer and getting/setting sp limit.\n+\n+#ifndef SP_H\n+#define SP_H\n+\n+#include \"../../rust_globals.h\"\n+\n+// Gets a pointer to the vicinity of the current stack pointer\n+extern \"C\" uintptr_t get_sp();\n+\n+// Gets the pointer to the end of the Rust stack from a platform-\n+// specific location in the thread control block\n+extern \"C\" CDECL uintptr_t get_sp_limit();\n+\n+// Records the pointer to the end of the Rust stack in a platform-\n+// specific location in the thread control block\n+extern \"C\" CDECL void record_sp_limit(void *limit);\n+\n+#endif"}, {"sha": "cd79884760777b02bf027749204d8b43faef9e98", "filename": "src/rt/arch/mips/sp.h", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d1778767cca290e844d5aa9d044dcc2f9edc9d8c/src%2Frt%2Farch%2Fmips%2Fsp.h", "raw_url": "https://github.com/rust-lang/rust/raw/d1778767cca290e844d5aa9d044dcc2f9edc9d8c/src%2Frt%2Farch%2Fmips%2Fsp.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fmips%2Fsp.h?ref=d1778767cca290e844d5aa9d044dcc2f9edc9d8c", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Getting the stack pointer and getting/setting sp limit.\n+\n+#ifndef SP_H\n+#define SP_H\n+\n+#include \"../../rust_globals.h\"\n+\n+// Gets a pointer to the vicinity of the current stack pointer\n+extern \"C\" uintptr_t get_sp();\n+\n+// Gets the pointer to the end of the Rust stack from a platform-\n+// specific location in the thread control block\n+extern \"C\" CDECL uintptr_t get_sp_limit();\n+\n+// Records the pointer to the end of the Rust stack in a platform-\n+// specific location in the thread control block\n+extern \"C\" CDECL void record_sp_limit(void *limit);\n+\n+#endif"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/rt/arch/x86_64/record_sp.S", "status": "modified", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d1778767cca290e844d5aa9d044dcc2f9edc9d8c/src%2Frt%2Farch%2Fx86_64%2Frecord_sp.S", "raw_url": "https://github.com/rust-lang/rust/raw/d1778767cca290e844d5aa9d044dcc2f9edc9d8c/src%2Frt%2Farch%2Fx86_64%2Frecord_sp.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Frecord_sp.S?ref=d1778767cca290e844d5aa9d044dcc2f9edc9d8c", "patch": "@@ -1,52 +0,0 @@\n-.text\n-\n-#if defined(__APPLE__) || defined(_WIN32)\n-#define RECORD_SP_LIMIT    _record_sp_limit\n-#define GET_SP_LIMIT       _get_sp_limit\n-#define GET_SP             _get_sp\n-#else\n-#define RECORD_SP_LIMIT    record_sp_limit\n-#define GET_SP_LIMIT       get_sp_limit\n-#define GET_SP             get_sp\n-#endif\n-\n-.globl RECORD_SP_LIMIT\n-.globl GET_SP_LIMIT\n-.globl GET_SP\n-\n-#if defined(__linux__)\n-RECORD_SP_LIMIT:\n-\tmovq %rdi, %fs:112\n-\tret\n-#elif defined(__APPLE__)\n-RECORD_SP_LIMIT:\n-\tmovq $0x60+90*8, %rsi\n-\tmovq %rdi, %gs:(%rsi)\n-\tret\n-#elif defined(__FreeBSD__)\n-RECORD_SP_LIMIT:\n-\tmovq %rdi, %fs:24\n-\tret\n-#else\n-RECORD_SP_LIMIT:\n-\tret\n-#endif\n-\n-#if defined(__linux__)\n-GET_SP_LIMIT:\n-\tmovq %fs:112, %rax\n-\tret\n-#elif defined(__APPLE__)\n-GET_SP_LIMIT:\n-\tmovq $0x60+90*8, %rsi\n-\tmovq %gs:(%rsi), %rax\n-\tret\n-#elif defined(__FreeBSD__)\n-GET_SP_LIMIT:\n-\tmovq %fs:24, %rax\n-\tret\n-#endif\n-\n-GET_SP:\n-\tmovq %rsp, %rax\n-\tret"}, {"sha": "bf011f4d01976aee960105858f1805aafa28e29b", "filename": "src/rt/arch/x86_64/sp.h", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/d1778767cca290e844d5aa9d044dcc2f9edc9d8c/src%2Frt%2Farch%2Fx86_64%2Fsp.h", "raw_url": "https://github.com/rust-lang/rust/raw/d1778767cca290e844d5aa9d044dcc2f9edc9d8c/src%2Frt%2Farch%2Fx86_64%2Fsp.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fsp.h?ref=d1778767cca290e844d5aa9d044dcc2f9edc9d8c", "patch": "@@ -0,0 +1,71 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Getting the stack pointer and getting/setting sp limit.\n+\n+#ifndef SP_H\n+#define SP_H\n+\n+#include \"../../rust_globals.h\"\n+\n+// Gets a pointer to the vicinity of the current stack pointer\n+extern \"C\" ALWAYS_INLINE uintptr_t get_sp() {\n+    uintptr_t sp;\n+    asm volatile (\n+        \"movq %%rsp, %0\"\n+        : \"=m\"(sp));\n+    return sp;\n+}\n+\n+// Gets the pointer to the end of the Rust stack from a platform-\n+// specific location in the thread control block\n+extern \"C\" CDECL ALWAYS_INLINE uintptr_t get_sp_limit() {\n+    uintptr_t limit;\n+\n+#if defined(__linux__)\n+    asm volatile (\n+        \"movq %%fs:112, %0\"\n+        : \"=r\"(limit));\n+#elif defined(__APPLE__)\n+    asm volatile (\n+        \"movq $0x60+90*8, %%rsi\\n\\t\"\n+        \"movq %%gs:(%%rsi), %0\"\n+        :  \"=r\"(limit)\n+        :: \"rsi\");\n+#elif defined(__FreeBSD__)\n+    asm volatile (\n+        \"movq %%fs:24, %0\"\n+        : \"=r\"(limit));\n+#endif\n+\n+    return limit;\n+}\n+\n+// Records the pointer to the end of the Rust stack in a platform-\n+// specific location in the thread control block\n+extern \"C\" CDECL ALWAYS_INLINE void record_sp_limit(void *limit) {\n+#if defined(__linux__)\n+    asm volatile (\n+        \"movq %0, %%fs:112\"\n+        :: \"r\"(limit));\n+#elif defined(__APPLE__)\n+    asm volatile (\n+        \"movq $0x60+90*8, %%rsi\\n\\t\"\n+        \"movq %0, %%gs:(%%rsi)\"\n+        :: \"r\"(limit)\n+        :  \"rsi\");\n+#elif defined(__FreeBSD__)\n+    asm volatile (\n+        \"movq %0, %%fs:24\"\n+        :: \"r\"(limit));\n+#endif\n+}\n+\n+#endif"}, {"sha": "ff57af08337132bf02d42c71822405f841a08ce2", "filename": "src/rt/rust_globals.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d1778767cca290e844d5aa9d044dcc2f9edc9d8c/src%2Frt%2Frust_globals.h", "raw_url": "https://github.com/rust-lang/rust/raw/d1778767cca290e844d5aa9d044dcc2f9edc9d8c/src%2Frt%2Frust_globals.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_globals.h?ref=d1778767cca290e844d5aa9d044dcc2f9edc9d8c", "patch": "@@ -11,6 +11,22 @@\n #ifndef RUST_GLOBALS_H\n #define RUST_GLOBALS_H\n \n+#if defined(__cplusplus)\n+#define INLINE inline\n+#elif defined(_MSC_VER) || defined(__GNUC__)\n+#define INLINE __inline__\n+#else\n+#define INLINE inline\n+#endif\n+\n+#if defined(__GNUC__)\n+#define ALWAYS_INLINE __attribute((always_inline)) INLINE\n+#elif defined(_MSC_VER)\n+#define ALWAYS_INLINE __forceinline\n+#else\n+#define ALWAYS_INLINE INLINE\n+#endif\n+\n #ifndef __STDC_LIMIT_MACROS\n #define __STDC_LIMIT_MACROS 1\n #endif"}, {"sha": "00d20fefc0ee5c0ebb728b2cdfb07de7a27754d5", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d1778767cca290e844d5aa9d044dcc2f9edc9d8c/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/d1778767cca290e844d5aa9d044dcc2f9edc9d8c/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=d1778767cca290e844d5aa9d044dcc2f9edc9d8c", "patch": "@@ -118,6 +118,7 @@\n #include \"rust_stack.h\"\n #include \"rust_type.h\"\n #include \"rust_sched_loop.h\"\n+#include \"sp.h\"\n \n // The amount of extra space at the end of each stack segment, available\n // to the rt, compiler and dynamic linker for running small functions\n@@ -419,15 +420,6 @@ template <typename T> struct task_owned {\n     }\n };\n \n-// This stuff is on the stack-switching fast path\n-\n-// Records the pointer to the end of the Rust stack in a platform-\n-// specific location in the thread control block\n-extern \"C\" CDECL void      record_sp_limit(void *limit);\n-extern \"C\" CDECL uintptr_t get_sp_limit();\n-// Gets a pointer to the vicinity of the current stack pointer\n-extern \"C\" uintptr_t       get_sp();\n-\n // This is the function that switches between the C and the Rust stack by\n // calling another function with a single void* argument while changing the\n // stack pointer. It has a funny name because gdb doesn't normally like to\n@@ -600,9 +592,6 @@ rust_task::prev_stack() {\n     record_stack_limit();\n }\n \n-extern \"C\" CDECL void\n-record_sp_limit(void *limit);\n-\n // The LLVM-generated segmented-stack function prolog compares the amount of\n // stack needed for each frame to the end-of-stack pointer stored in the\n // TCB. As an optimization, when the frame size is less than 256 bytes, it"}]}