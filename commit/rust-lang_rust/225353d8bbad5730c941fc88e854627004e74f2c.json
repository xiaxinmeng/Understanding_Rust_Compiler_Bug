{"sha": "225353d8bbad5730c941fc88e854627004e74f2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNTM1M2Q4YmJhZDU3MzBjOTQxZmM4OGU4NTQ2MjcwMDRlNzRmMmM=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-09-10T06:12:09Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-09-12T18:46:38Z"}, "message": "Add a Rust string ostream for LLVM", "tree": {"sha": "d4f49fece5c0eb6a6f230149e6bec1b46edbda24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4f49fece5c0eb6a6f230149e6bec1b46edbda24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/225353d8bbad5730c941fc88e854627004e74f2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/225353d8bbad5730c941fc88e854627004e74f2c", "html_url": "https://github.com/rust-lang/rust/commit/225353d8bbad5730c941fc88e854627004e74f2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/225353d8bbad5730c941fc88e854627004e74f2c/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77b3a7ba8bf3ea0dd75bbe696c60275807bfe4ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/77b3a7ba8bf3ea0dd75bbe696c60275807bfe4ae", "html_url": "https://github.com/rust-lang/rust/commit/77b3a7ba8bf3ea0dd75bbe696c60275807bfe4ae"}], "stats": {"total": 91, "additions": 67, "deletions": 24}, "files": [{"sha": "a6a30d6ba85ecb6d68dfe63c47b1814b6e59a472", "filename": "src/librustc/middle/trans/type_.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/225353d8bbad5730c941fc88e854627004e74f2c/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/225353d8bbad5730c941fc88e854627004e74f2c/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs?ref=225353d8bbad5730c941fc88e854627004e74f2c", "patch": "@@ -21,11 +21,10 @@ use syntax::abi::{X86, X86_64, Arm, Mips, Mipsel};\n \n use std::c_str::ToCStr;\n use std::mem;\n-use std::string;\n use std::cell::RefCell;\n use std::collections::HashMap;\n \n-use libc::{c_uint, c_void, free};\n+use libc::c_uint;\n \n #[deriving(Clone, PartialEq, Show)]\n pub struct Type {\n@@ -339,12 +338,9 @@ impl TypeNames {\n     }\n \n     pub fn type_to_string(&self, ty: Type) -> String {\n-        unsafe {\n-            let s = llvm::LLVMTypeToString(ty.to_ref());\n-            let ret = string::raw::from_buf(s as *const u8);\n-            free(s as *mut c_void);\n-            ret\n-        }\n+        llvm::build_string(|s| unsafe {\n+                llvm::LLVMWriteTypeToString(ty.to_ref(), s);\n+            }).expect(\"non-UTF8 type description from LLVM\")\n     }\n \n     pub fn types_to_str(&self, tys: &[Type]) -> String {\n@@ -353,11 +349,8 @@ impl TypeNames {\n     }\n \n     pub fn val_to_string(&self, val: ValueRef) -> String {\n-        unsafe {\n-            let s = llvm::LLVMValueToString(val);\n-            let ret = string::raw::from_buf(s as *const u8);\n-            free(s as *mut c_void);\n-            ret\n-        }\n+        llvm::build_string(|s| unsafe {\n+                llvm::LLVMWriteValueToString(val, s);\n+            }).expect(\"nun-UTF8 value description from LLVM\")\n     }\n }"}, {"sha": "354448085b950fae809fc74acce5d109e2273857", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/225353d8bbad5730c941fc88e854627004e74f2c/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/225353d8bbad5730c941fc88e854627004e74f2c/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=225353d8bbad5730c941fc88e854627004e74f2c", "patch": "@@ -28,6 +28,8 @@\n extern crate libc;\n \n use std::c_str::ToCStr;\n+use std::cell::RefCell;\n+use std::{raw, mem};\n use libc::{c_uint, c_ushort, uint64_t, c_int, size_t, c_char};\n use libc::{c_longlong, c_ulonglong};\n use debuginfo::{DIBuilderRef, DIDescriptor,\n@@ -1839,8 +1841,8 @@ extern {\n                                         -> ValueRef;\n \n     pub fn LLVMDICompositeTypeSetTypeArray(CompositeType: ValueRef, TypeArray: ValueRef);\n-    pub fn LLVMTypeToString(Type: TypeRef) -> *const c_char;\n-    pub fn LLVMValueToString(value_ref: ValueRef) -> *const c_char;\n+    pub fn LLVMWriteTypeToString(Type: TypeRef, s: RustStringRef);\n+    pub fn LLVMWriteValueToString(value_ref: ValueRef, s: RustStringRef);\n \n     pub fn LLVMIsAArgument(value_ref: ValueRef) -> ValueRef;\n \n@@ -2046,6 +2048,30 @@ pub fn get_param(llfn: ValueRef, index: c_uint) -> ValueRef {\n     }\n }\n \n+pub enum RustString_opaque {}\n+pub type RustStringRef = *mut RustString_opaque;\n+type RustStringRepr = *mut RefCell<Vec<u8>>;\n+\n+/// Appending to a Rust string -- used by raw_rust_string_ostream.\n+#[no_mangle]\n+pub unsafe extern \"C\" fn rust_llvm_string_write_impl(sr: RustStringRef,\n+                                                     ptr: *const c_char,\n+                                                     size: size_t) {\n+    let slice: &[u8] = mem::transmute(raw::Slice {\n+        data: ptr as *const u8,\n+        len: size as uint,\n+    });\n+\n+    let sr: RustStringRepr = mem::transmute(sr);\n+    (*sr).borrow_mut().push_all(slice);\n+}\n+\n+pub fn build_string(f: |RustStringRef|) -> Option<String> {\n+    let mut buf = RefCell::new(Vec::new());\n+    f(&mut buf as RustStringRepr as RustStringRef);\n+    String::from_utf8(buf.unwrap()).ok()\n+}\n+\n // FIXME #15460 - create a public function that actually calls our\n // static LLVM symbols. Otherwise the linker will just throw llvm\n // away.  We're just calling lots of stuff until we transitively get"}, {"sha": "5893b582cd84b139df1b27f72252cadb6cadaba6", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/225353d8bbad5730c941fc88e854627004e74f2c/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/225353d8bbad5730c941fc88e854627004e74f2c/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=225353d8bbad5730c941fc88e854627004e74f2c", "patch": "@@ -645,22 +645,18 @@ extern \"C\" void LLVMDICompositeTypeSetTypeArray(\n #endif\n }\n \n-extern \"C\" char *LLVMTypeToString(LLVMTypeRef Type) {\n-    std::string s;\n-    llvm::raw_string_ostream os(s);\n+extern \"C\" void LLVMWriteTypeToString(LLVMTypeRef Type, RustStringRef str) {\n+    raw_rust_string_ostream os(str);\n     unwrap<llvm::Type>(Type)->print(os);\n-    return strdup(os.str().data());\n }\n \n-extern \"C\" char *LLVMValueToString(LLVMValueRef Value) {\n-    std::string s;\n-    llvm::raw_string_ostream os(s);\n+extern \"C\" void LLVMWriteValueToString(LLVMValueRef Value, RustStringRef str) {\n+    raw_rust_string_ostream os(str);\n     os << \"(\";\n     unwrap<llvm::Value>(Value)->getType()->print(os);\n     os << \":\";\n     unwrap<llvm::Value>(Value)->print(os);\n     os << \")\";\n-    return strdup(os.str().data());\n }\n \n #if LLVM_VERSION_MINOR >= 5"}, {"sha": "92f94b0e8e552675e4bd1cab10fb61a8941f1bc3", "filename": "src/rustllvm/rustllvm.h", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/225353d8bbad5730c941fc88e854627004e74f2c/src%2Frustllvm%2Frustllvm.h", "raw_url": "https://github.com/rust-lang/rust/raw/225353d8bbad5730c941fc88e854627004e74f2c/src%2Frustllvm%2Frustllvm.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.h?ref=225353d8bbad5730c941fc88e854627004e74f2c", "patch": "@@ -69,3 +69,31 @@\n #endif\n \n void LLVMRustSetLastError(const char*);\n+\n+typedef struct OpaqueRustString *RustStringRef;\n+\n+extern \"C\" void\n+rust_llvm_string_write_impl(RustStringRef str, const char *ptr, size_t size);\n+\n+class raw_rust_string_ostream : public llvm::raw_ostream  {\n+    RustStringRef str;\n+    uint64_t pos;\n+\n+    void write_impl(const char *ptr, size_t size) override {\n+        rust_llvm_string_write_impl(str, ptr, size);\n+        pos += size;\n+    }\n+\n+    uint64_t current_pos() const override {\n+        return pos;\n+    }\n+\n+public:\n+    explicit raw_rust_string_ostream(RustStringRef str)\n+        : str(str), pos(0) { }\n+\n+    ~raw_rust_string_ostream() {\n+        // LLVM requires this.\n+        flush();\n+    }\n+};"}]}