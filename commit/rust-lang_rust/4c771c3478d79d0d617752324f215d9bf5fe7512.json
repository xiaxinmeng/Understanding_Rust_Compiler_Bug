{"sha": "4c771c3478d79d0d617752324f215d9bf5fe7512", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNzcxYzM0NzhkNzlkMGQ2MTc3NTIzMjRmMjE1ZDliZjVmZTc1MTI=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-06-25T04:43:38Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-07-07T13:11:33Z"}, "message": "Add dev fmt subcommand", "tree": {"sha": "b8dbe12cde313b194f5a544515d6038f15d7910a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8dbe12cde313b194f5a544515d6038f15d7910a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c771c3478d79d0d617752324f215d9bf5fe7512", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEdgbJzPSa+gJi9jP1Acg2tkD/37EFAl0h74UACgkQAcg2tkD/\n37Htzw//Y2dKQNc/tgS6ySSxMkEB4xVjGQ2Yd7iuQGeBVLoFREtgREEwjR/ULiqq\nl9s1hwQlrw6GQgoYCsxaqv+iB8qldQdKSJQ2a3LbqdgfQqjYjeC4+PgbraSvBFXN\ni+1Nyj+1wm0I9IzYYe4r/l1kRkwhaPho5OfVjgVMrgsyvPXUoCU7o3nfxgF4r2DR\nOAms89xMHqxx0UuCv9tfwg60xfV2s9vbRFHEo97ZYKsgwbQR2ITkLyjc3Vt5by/0\nQKnJZKSKEzQOqr3p7923LhUCBu1vpznTRdh+N+nz8reXWKUT6ejSfurv35N2ZSLg\nPqBzYclaHko4diUIIek07VNL6U4NOLPL8fT8En7g/r9Hpr20Z/fAK5CUGQlhuEdu\nL5HVfNmgOgmx7/FBVTLS5t1iOUHS5+vmUVN5r5DIIGsIqL0f3etxV/GzpCKHfm88\nBJMEyS+JopjoPoBhc9whUMhhs+L/8koW27hQLpu9rs+hnZ69OrZMjoSgeIff1kZm\nYtwVEem21PrcsAhmbDS3mZNdmErm8w4Qw7u9I+a6g0JrfY+MP/Co8tsV4EUmMHdp\nLhHN/RedQCat/ZEfsb924StR6U3bJ/TPOAzdWMqTDlF91pzoOCiBWQt+J/AWpb1Z\n5f6w2Xzmx79YQXeO86pg36Zj0AIl+uJwWeLsLl7IP22vuNFQNFc=\n=tYr7\n-----END PGP SIGNATURE-----", "payload": "tree b8dbe12cde313b194f5a544515d6038f15d7910a\nparent 316da7eb41f2c263963fc1b74fe9bb528860817f\nauthor Michael Wright <mikerite@lavabit.com> 1561437818 +0200\ncommitter flip1995 <hello@philkrones.com> 1562505093 +0200\n\nAdd dev fmt subcommand\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c771c3478d79d0d617752324f215d9bf5fe7512", "html_url": "https://github.com/rust-lang/rust/commit/4c771c3478d79d0d617752324f215d9bf5fe7512", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c771c3478d79d0d617752324f215d9bf5fe7512/comments", "author": null, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "316da7eb41f2c263963fc1b74fe9bb528860817f", "url": "https://api.github.com/repos/rust-lang/rust/commits/316da7eb41f2c263963fc1b74fe9bb528860817f", "html_url": "https://github.com/rust-lang/rust/commit/316da7eb41f2c263963fc1b74fe9bb528860817f"}], "stats": {"total": 247, "additions": 229, "deletions": 18}, "files": [{"sha": "e2e946d06f27c28f4c2732eac3c3b526f8676c0d", "filename": "clippy_dev/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c771c3478d79d0d617752324f215d9bf5fe7512/clippy_dev%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4c771c3478d79d0d617752324f215d9bf5fe7512/clippy_dev%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2FCargo.toml?ref=4c771c3478d79d0d617752324f215d9bf5fe7512", "patch": "@@ -9,4 +9,5 @@ clap = \"2.33\"\n itertools = \"0.8\"\n regex = \"1\"\n lazy_static = \"1.0\"\n+shell-escape = \"0.1\"\n walkdir = \"2\""}, {"sha": "72f8d836ee7f9539b1ce37237a339023cb5e29b3", "filename": "clippy_dev/src/fmt.rs", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/4c771c3478d79d0d617752324f215d9bf5fe7512/clippy_dev%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c771c3478d79d0d617752324f215d9bf5fe7512/clippy_dev%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Ffmt.rs?ref=4c771c3478d79d0d617752324f215d9bf5fe7512", "patch": "@@ -0,0 +1,167 @@\n+use shell_escape::escape;\n+use std::ffi::OsStr;\n+use std::io;\n+use std::path::{Path, PathBuf};\n+use std::process::{self, Command};\n+use walkdir::WalkDir;\n+\n+#[derive(Debug)]\n+pub enum CliError {\n+    CommandFailed(String),\n+    IoError(io::Error),\n+    ProjectRootNotFound,\n+    WalkDirError(walkdir::Error),\n+}\n+\n+impl From<io::Error> for CliError {\n+    fn from(error: io::Error) -> Self {\n+        CliError::IoError(error)\n+    }\n+}\n+\n+impl From<walkdir::Error> for CliError {\n+    fn from(error: walkdir::Error) -> Self {\n+        CliError::WalkDirError(error)\n+    }\n+}\n+\n+struct FmtContext {\n+    check: bool,\n+    verbose: bool,\n+}\n+\n+pub fn run(check: bool, verbose: bool) {\n+    fn try_run(context: &FmtContext) -> Result<bool, CliError> {\n+        let mut success = true;\n+\n+        let project_root = project_root()?;\n+\n+        success &= cargo_fmt(context, project_root.as_path())?;\n+        success &= cargo_fmt(context, &project_root.join(\"clippy_dev\"))?;\n+        success &= cargo_fmt(context, &project_root.join(\"rustc_tools_util\"))?;\n+\n+        for entry in WalkDir::new(project_root.join(\"tests\")) {\n+            let entry = entry?;\n+            let path = entry.path();\n+\n+            if path.extension() != Some(\"rs\".as_ref()) || entry.file_name() == \"ice-3891.rs\" {\n+                continue;\n+            }\n+\n+            success &= rustfmt(context, &path)?;\n+        }\n+\n+        Ok(success)\n+    }\n+\n+    fn output_err(err: CliError) {\n+        match err {\n+            CliError::CommandFailed(command) => {\n+                eprintln!(\"error: A command failed! `{}`\", command);\n+            },\n+            CliError::IoError(err) => {\n+                eprintln!(\"error: {}\", err);\n+            },\n+            CliError::ProjectRootNotFound => {\n+                eprintln!(\"error: Can't determine root of project. Please run inside a Clippy working dir.\");\n+            },\n+            CliError::WalkDirError(err) => {\n+                eprintln!(\"error: {}\", err);\n+            },\n+        }\n+    }\n+\n+    let context = FmtContext { check, verbose };\n+    let result = try_run(&context);\n+    let code = match result {\n+        Ok(true) => 0,\n+        Ok(false) => {\n+            eprintln!();\n+            eprintln!(\"Formatting check failed.\");\n+            eprintln!(\"Run `./util/dev fmt` to update formatting.\");\n+            1\n+        },\n+        Err(err) => {\n+            output_err(err);\n+            1\n+        },\n+    };\n+    process::exit(code);\n+}\n+\n+fn format_command(program: impl AsRef<OsStr>, dir: impl AsRef<Path>, args: &[impl AsRef<OsStr>]) -> String {\n+    let arg_display: Vec<_> = args\n+        .iter()\n+        .map(|a| escape(a.as_ref().to_string_lossy()).to_owned())\n+        .collect();\n+\n+    format!(\n+        \"cd {} && {} {}\",\n+        escape(dir.as_ref().to_string_lossy()),\n+        escape(program.as_ref().to_string_lossy()),\n+        arg_display.join(\" \")\n+    )\n+}\n+\n+fn exec(\n+    context: &FmtContext,\n+    program: impl AsRef<OsStr>,\n+    dir: impl AsRef<Path>,\n+    args: &[impl AsRef<OsStr>],\n+) -> Result<bool, CliError> {\n+    if context.verbose {\n+        println!(\"{}\", format_command(&program, &dir, args));\n+    }\n+\n+    let mut child = Command::new(&program).current_dir(&dir).args(args.iter()).spawn()?;\n+    let code = child.wait()?;\n+    let success = code.success();\n+\n+    if !context.check && !success {\n+        return Err(CliError::CommandFailed(format_command(&program, &dir, args)));\n+    }\n+\n+    Ok(success)\n+}\n+\n+fn cargo_fmt(context: &FmtContext, path: &Path) -> Result<bool, CliError> {\n+    let mut args = vec![\"+nightly\", \"fmt\", \"--all\"];\n+    if context.check {\n+        args.push(\"--\");\n+        args.push(\"--check\");\n+    }\n+    let success = exec(context, \"cargo\", path, &args)?;\n+\n+    Ok(success)\n+}\n+\n+fn rustfmt(context: &FmtContext, path: &Path) -> Result<bool, CliError> {\n+    let mut args = vec![\"+nightly\".as_ref(), path.as_os_str()];\n+    if context.check {\n+        args.push(\"--check\".as_ref());\n+    }\n+    let success = exec(context, \"rustfmt\", std::env::current_dir()?, &args)?;\n+    if !success {\n+        eprintln!(\"rustfmt failed on {}\", path.display());\n+    }\n+    Ok(success)\n+}\n+\n+fn project_root() -> Result<PathBuf, CliError> {\n+    let current_dir = std::env::current_dir()?;\n+    for path in current_dir.ancestors() {\n+        let result = std::fs::read_to_string(path.join(\"Cargo.toml\"));\n+        if let Err(err) = &result {\n+            if err.kind() == io::ErrorKind::NotFound {\n+                continue;\n+            }\n+        }\n+\n+        let content = result?;\n+        if content.contains(\"[package]\\nname = \\\"clippy\\\"\") {\n+            return Ok(path.to_path_buf());\n+        }\n+    }\n+\n+    Err(CliError::ProjectRootNotFound)\n+}"}, {"sha": "8fdc4254d0c70ce84dc6a76493bfa59a6cadf2d1", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4c771c3478d79d0d617752324f215d9bf5fe7512/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c771c3478d79d0d617752324f215d9bf5fe7512/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=4c771c3478d79d0d617752324f215d9bf5fe7512", "patch": "@@ -4,6 +4,8 @@ extern crate regex;\n \n use clap::{App, Arg, SubCommand};\n use clippy_dev::*;\n+\n+mod fmt;\n mod stderr_length_check;\n \n #[derive(PartialEq)]\n@@ -14,6 +16,21 @@ enum UpdateMode {\n \n fn main() {\n     let matches = App::new(\"Clippy developer tooling\")\n+        .subcommand(\n+            SubCommand::with_name(\"fmt\")\n+                .about(\"Run rustfmt on all projects and tests\")\n+                .arg(\n+                    Arg::with_name(\"check\")\n+                        .long(\"check\")\n+                        .help(\"Use the rustfmt --check option\"),\n+                )\n+                .arg(\n+                    Arg::with_name(\"verbose\")\n+                        .short(\"v\")\n+                        .long(\"verbose\")\n+                        .help(\"Echo commands run\"),\n+                ),\n+        )\n         .subcommand(\n             SubCommand::with_name(\"update_lints\")\n                 .about(\"Updates lint registration and information from the source code\")\n@@ -46,14 +63,21 @@ fn main() {\n     if matches.is_present(\"limit-stderr-length\") {\n         stderr_length_check::check();\n     }\n-    if let Some(matches) = matches.subcommand_matches(\"update_lints\") {\n-        if matches.is_present(\"print-only\") {\n-            print_lints();\n-        } else if matches.is_present(\"check\") {\n-            update_lints(&UpdateMode::Check);\n-        } else {\n-            update_lints(&UpdateMode::Change);\n-        }\n+\n+    match matches.subcommand() {\n+        (\"fmt\", Some(matches)) => {\n+            fmt::run(matches.is_present(\"check\"), matches.is_present(\"verbose\"));\n+        },\n+        (\"update_lints\", Some(matches)) => {\n+            if matches.is_present(\"print-only\") {\n+                print_lints();\n+            } else if matches.is_present(\"check\") {\n+                update_lints(&UpdateMode::Check);\n+            } else {\n+                update_lints(&UpdateMode::Change);\n+            }\n+        },\n+        _ => unreachable!(),\n     }\n }\n "}, {"sha": "ba8e5f83ef4e2a764a861552a39c0704125060b8", "filename": "clippy_dev/src/stderr_length_check.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4c771c3478d79d0d617752324f215d9bf5fe7512/clippy_dev%2Fsrc%2Fstderr_length_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c771c3478d79d0d617752324f215d9bf5fe7512/clippy_dev%2Fsrc%2Fstderr_length_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fstderr_length_check.rs?ref=4c771c3478d79d0d617752324f215d9bf5fe7512", "patch": "@@ -23,16 +23,15 @@ pub fn check() {\n }\n \n fn exceeding_stderr_files(files: impl Iterator<Item = walkdir::DirEntry>) -> impl Iterator<Item = String> {\n-    files\n-        .filter_map(|file| {\n-            let path = file.path().to_str().expect(\"Could not convert path to str\").to_string();\n-            let linecount = count_linenumbers(&path);\n-            if linecount > LIMIT {\n-                Some(path)\n-            } else {\n-                None\n-            }\n-        })\n+    files.filter_map(|file| {\n+        let path = file.path().to_str().expect(\"Could not convert path to str\").to_string();\n+        let linecount = count_linenumbers(&path);\n+        if linecount > LIMIT {\n+            Some(path)\n+        } else {\n+            None\n+        }\n+    })\n }\n \n fn stderr_files() -> impl Iterator<Item = walkdir::DirEntry> {"}, {"sha": "d7544bc50b21ff204e4ca01f9c496b55de69c511", "filename": "tests/fmt.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4c771c3478d79d0d617752324f215d9bf5fe7512/tests%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c771c3478d79d0d617752324f215d9bf5fe7512/tests%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffmt.rs?ref=4c771c3478d79d0d617752324f215d9bf5fe7512", "patch": "@@ -0,0 +1,20 @@\n+#[test]\n+fn fmt() {\n+    if option_env!(\"RUSTC_TEST_SUITE\").is_some() {\n+        return;\n+    }\n+\n+    let root_dir = std::path::PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n+    let dev_dir = root_dir.join(\"clippy_dev\");\n+    let output = std::process::Command::new(\"cargo\")\n+        .current_dir(dev_dir)\n+        .args(&[\"run\", \"--\", \"fmt\", \"--check\"])\n+        .output()\n+        .unwrap();\n+\n+    println!(\"status: {}\", output.status);\n+    println!(\"stdout: {}\", String::from_utf8_lossy(&output.stdout));\n+    println!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr));\n+\n+    assert!(output.status.success());\n+}"}]}