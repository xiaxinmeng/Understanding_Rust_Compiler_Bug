{"sha": "e7aa37c20a52579bbe3894126a54d1f390b8b05c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3YWEzN2MyMGE1MjU3OWJiZTM4OTQxMjZhNTRkMWYzOTBiOGIwNWM=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-17T11:47:53Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-18T09:08:43Z"}, "message": "Support GATs for associated type arg parsing", "tree": {"sha": "8a82ef48c6ae232a43fdb1a88e9f8f1efa29cef2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a82ef48c6ae232a43fdb1a88e9f8f1efa29cef2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7aa37c20a52579bbe3894126a54d1f390b8b05c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7aa37c20a52579bbe3894126a54d1f390b8b05c", "html_url": "https://github.com/rust-lang/rust/commit/e7aa37c20a52579bbe3894126a54d1f390b8b05c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7aa37c20a52579bbe3894126a54d1f390b8b05c/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2f83c956e277b23e20ea2f4f0ac8c5034fe2507", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2f83c956e277b23e20ea2f4f0ac8c5034fe2507", "html_url": "https://github.com/rust-lang/rust/commit/a2f83c956e277b23e20ea2f4f0ac8c5034fe2507"}], "stats": {"total": 247, "additions": 165, "deletions": 82}, "files": [{"sha": "9ec7f977dba11d7ae0c3a572df9f67ebf61e8aca", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7aa37c20a52579bbe3894126a54d1f390b8b05c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e7aa37c20a52579bbe3894126a54d1f390b8b05c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e7aa37c20a52579bbe3894126a54d1f390b8b05c", "patch": "@@ -1758,9 +1758,9 @@ dependencies = [\n \n [[package]]\n name = \"ungrammar\"\n-version = \"1.14.1\"\n+version = \"1.14.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3dbe67c0c0f5ded8e404578a9ab1009ffdb6ee219779329aefc0cb4fe7f44891\"\n+checksum = \"5334230a6ae9ca52bc811c968c0ae12f1750c0698ed52ea68dabab7ce5a80972\"\n \n [[package]]\n name = \"unicase\""}, {"sha": "c4e4f010ffbeb44f781f9632dc2dd1d8e3b71d12", "filename": "crates/parser/src/grammar/paths.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e7aa37c20a52579bbe3894126a54d1f390b8b05c/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7aa37c20a52579bbe3894126a54d1f390b8b05c/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fpaths.rs?ref=e7aa37c20a52579bbe3894126a54d1f390b8b05c", "patch": "@@ -27,6 +27,10 @@ pub(super) fn expr_path(p: &mut Parser) {\n     path(p, Mode::Expr)\n }\n \n+pub(crate) fn type_path_for_qualifier(p: &mut Parser, qual: CompletedMarker) {\n+    path_for_qualifier(p, Mode::Type, qual)\n+}\n+\n #[derive(Clone, Copy, Eq, PartialEq)]\n enum Mode {\n     Use,\n@@ -37,7 +41,11 @@ enum Mode {\n fn path(p: &mut Parser, mode: Mode) {\n     let path = p.start();\n     path_segment(p, mode, true);\n-    let mut qual = path.complete(p, PATH);\n+    let qual = path.complete(p, PATH);\n+    path_for_qualifier(p, mode, qual)\n+}\n+\n+fn path_for_qualifier(p: &mut Parser, mode: Mode, mut qual: CompletedMarker) {\n     loop {\n         let use_tree = matches!(p.nth(2), T![*] | T!['{']);\n         if p.at(T![::]) && !use_tree {"}, {"sha": "175def8d5c7e8014f84d3699ecc752d4cfd9e61e", "filename": "crates/parser/src/grammar/type_args.rs", "status": "modified", "additions": 44, "deletions": 10, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/e7aa37c20a52579bbe3894126a54d1f390b8b05c/crates%2Fparser%2Fsrc%2Fgrammar%2Ftype_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7aa37c20a52579bbe3894126a54d1f390b8b05c/crates%2Fparser%2Fsrc%2Fgrammar%2Ftype_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Ftype_args.rs?ref=e7aa37c20a52579bbe3894126a54d1f390b8b05c", "patch": "@@ -65,17 +65,51 @@ fn generic_arg(p: &mut Parser) {\n             m.complete(p, LIFETIME_ARG);\n         }\n         // test associated_type_bounds\n-        // fn print_all<T: Iterator<Item: Display>>(printables: T) {}\n-        IDENT if p.nth(1) == T![:] && p.nth(2) != T![:] => {\n+        // fn print_all<T: Iterator<Item, Item::Item, Item: Display, Item<'a> = Item>>(printables: T) {}\n+        IDENT if [T![<], T![=], T![:]].contains(&p.nth(1)) => {\n+            let path_ty = p.start();\n+            let path = p.start();\n+            let path_seg = p.start();\n             name_ref(p);\n-            type_params::bounds(p);\n-            m.complete(p, ASSOC_TYPE_ARG);\n-        }\n-        IDENT if p.nth(1) == T![=] => {\n-            name_ref(p);\n-            p.bump_any();\n-            types::type_(p);\n-            m.complete(p, ASSOC_TYPE_ARG);\n+            if p.current() == T![<] {\n+                opt_generic_arg_list(p, false);\n+            }\n+            match p.current() {\n+                // NameRef<...> =\n+                T![=] => {\n+                    p.bump_any();\n+                    types::type_(p);\n+\n+                    path_seg.abandon(p);\n+                    path.abandon(p);\n+                    path_ty.abandon(p);\n+                    m.complete(p, ASSOC_TYPE_ARG);\n+                }\n+                T![:] if p.nth(1) == T![:] => {\n+                    // NameRef::, this is a path type\n+                    path_seg.complete(p, PATH_SEGMENT);\n+                    let qual = path.complete(p, PATH);\n+                    paths::type_path_for_qualifier(p, qual);\n+                    path_ty.complete(p, PATH_TYPE);\n+                    m.complete(p, TYPE_ARG);\n+                }\n+                // NameRef<...>:\n+                T![:] => {\n+                    type_params::bounds(p);\n+\n+                    path_seg.abandon(p);\n+                    path.abandon(p);\n+                    path_ty.abandon(p);\n+                    m.complete(p, ASSOC_TYPE_ARG);\n+                }\n+                // NameRef, this is a single segment path type\n+                _ => {\n+                    path_seg.complete(p, PATH_SEGMENT);\n+                    path.complete(p, PATH);\n+                    path_ty.complete(p, PATH_TYPE);\n+                    m.complete(p, TYPE_ARG);\n+                }\n+            }\n         }\n         T!['{'] => {\n             expressions::block_expr(p);"}, {"sha": "287160a19fb697e1e2f640d05d1bba75ee3095df", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e7aa37c20a52579bbe3894126a54d1f390b8b05c/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7aa37c20a52579bbe3894126a54d1f390b8b05c/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=e7aa37c20a52579bbe3894126a54d1f390b8b05c", "patch": "@@ -107,6 +107,7 @@ pub struct AssocTypeArg {\n impl ast::TypeBoundsOwner for AssocTypeArg {}\n impl AssocTypeArg {\n     pub fn name_ref(&self) -> Option<NameRef> { support::child(&self.syntax) }\n+    pub fn generic_param_list(&self) -> Option<GenericParamList> { support::child(&self.syntax) }\n     pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n     pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n }\n@@ -125,6 +126,15 @@ impl ConstArg {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct GenericParamList {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl GenericParamList {\n+    pub fn l_angle_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![<]) }\n+    pub fn generic_params(&self) -> AstChildren<GenericParam> { support::children(&self.syntax) }\n+    pub fn r_angle_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![>]) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TypeBoundList {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -454,15 +464,6 @@ impl Abi {\n     pub fn extern_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![extern]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct GenericParamList {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl GenericParamList {\n-    pub fn l_angle_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![<]) }\n-    pub fn generic_params(&self) -> AstChildren<GenericParam> { support::children(&self.syntax) }\n-    pub fn r_angle_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![>]) }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct WhereClause {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -1584,6 +1585,17 @@ impl AstNode for ConstArg {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for GenericParamList {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == GENERIC_PARAM_LIST }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for TypeBoundList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_BOUND_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -1892,17 +1904,6 @@ impl AstNode for Abi {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for GenericParamList {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == GENERIC_PARAM_LIST }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n impl AstNode for WhereClause {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == WHERE_CLAUSE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3680,6 +3681,11 @@ impl std::fmt::Display for ConstArg {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for GenericParamList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for TypeBoundList {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n@@ -3820,11 +3826,6 @@ impl std::fmt::Display for Abi {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for GenericParamList {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for WhereClause {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "605e4213f47781d5a49131be9b30f82bf3ef47ab", "filename": "crates/syntax/test_data/parser/inline/ok/0138_associated_type_bounds.rast", "status": "modified", "additions": 83, "deletions": 43, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/e7aa37c20a52579bbe3894126a54d1f390b8b05c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0138_associated_type_bounds.rast", "raw_url": "https://github.com/rust-lang/rust/raw/e7aa37c20a52579bbe3894126a54d1f390b8b05c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0138_associated_type_bounds.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0138_associated_type_bounds.rast?ref=e7aa37c20a52579bbe3894126a54d1f390b8b05c", "patch": "@@ -1,55 +1,95 @@\n-SOURCE_FILE@0..59\n-  FN@0..58\n+SOURCE_FILE@0..94\n+  FN@0..93\n     FN_KW@0..2 \"fn\"\n     WHITESPACE@2..3 \" \"\n     NAME@3..12\n       IDENT@3..12 \"print_all\"\n-    GENERIC_PARAM_LIST@12..40\n+    GENERIC_PARAM_LIST@12..75\n       L_ANGLE@12..13 \"<\"\n-      TYPE_PARAM@13..39\n+      TYPE_PARAM@13..74\n         NAME@13..14\n           IDENT@13..14 \"T\"\n         COLON@14..15 \":\"\n         WHITESPACE@15..16 \" \"\n-        TYPE_BOUND_LIST@16..39\n-          TYPE_BOUND@16..39\n-            PATH_TYPE@16..39\n-              PATH@16..39\n-                PATH_SEGMENT@16..39\n+        TYPE_BOUND_LIST@16..74\n+          TYPE_BOUND@16..74\n+            PATH_TYPE@16..74\n+              PATH@16..74\n+                PATH_SEGMENT@16..74\n                   NAME_REF@16..24\n                     IDENT@16..24 \"Iterator\"\n-                  GENERIC_ARG_LIST@24..39\n+                  GENERIC_ARG_LIST@24..74\n                     L_ANGLE@24..25 \"<\"\n-                    ASSOC_TYPE_ARG@25..38\n-                      NAME_REF@25..29\n-                        IDENT@25..29 \"Item\"\n-                      COLON@29..30 \":\"\n-                      WHITESPACE@30..31 \" \"\n-                      TYPE_BOUND_LIST@31..38\n-                        TYPE_BOUND@31..38\n-                          PATH_TYPE@31..38\n-                            PATH@31..38\n-                              PATH_SEGMENT@31..38\n-                                NAME_REF@31..38\n-                                  IDENT@31..38 \"Display\"\n-                    R_ANGLE@38..39 \">\"\n-      R_ANGLE@39..40 \">\"\n-    PARAM_LIST@40..55\n-      L_PAREN@40..41 \"(\"\n-      PARAM@41..54\n-        IDENT_PAT@41..51\n-          NAME@41..51\n-            IDENT@41..51 \"printables\"\n-        COLON@51..52 \":\"\n-        WHITESPACE@52..53 \" \"\n-        PATH_TYPE@53..54\n-          PATH@53..54\n-            PATH_SEGMENT@53..54\n-              NAME_REF@53..54\n-                IDENT@53..54 \"T\"\n-      R_PAREN@54..55 \")\"\n-    WHITESPACE@55..56 \" \"\n-    BLOCK_EXPR@56..58\n-      L_CURLY@56..57 \"{\"\n-      R_CURLY@57..58 \"}\"\n-  WHITESPACE@58..59 \"\\n\"\n+                    TYPE_ARG@25..29\n+                      PATH_TYPE@25..29\n+                        PATH@25..29\n+                          PATH_SEGMENT@25..29\n+                            NAME_REF@25..29\n+                              IDENT@25..29 \"Item\"\n+                    COMMA@29..30 \",\"\n+                    WHITESPACE@30..31 \" \"\n+                    TYPE_ARG@31..41\n+                      PATH_TYPE@31..41\n+                        PATH@31..41\n+                          PATH@31..35\n+                            PATH_SEGMENT@31..35\n+                              NAME_REF@31..35\n+                                IDENT@31..35 \"Item\"\n+                          COLON2@35..37 \"::\"\n+                          PATH_SEGMENT@37..41\n+                            NAME_REF@37..41\n+                              IDENT@37..41 \"Item\"\n+                    COMMA@41..42 \",\"\n+                    WHITESPACE@42..43 \" \"\n+                    ASSOC_TYPE_ARG@43..56\n+                      NAME_REF@43..47\n+                        IDENT@43..47 \"Item\"\n+                      COLON@47..48 \":\"\n+                      WHITESPACE@48..49 \" \"\n+                      TYPE_BOUND_LIST@49..56\n+                        TYPE_BOUND@49..56\n+                          PATH_TYPE@49..56\n+                            PATH@49..56\n+                              PATH_SEGMENT@49..56\n+                                NAME_REF@49..56\n+                                  IDENT@49..56 \"Display\"\n+                    COMMA@56..57 \",\"\n+                    WHITESPACE@57..58 \" \"\n+                    ASSOC_TYPE_ARG@58..73\n+                      NAME_REF@58..62\n+                        IDENT@58..62 \"Item\"\n+                      GENERIC_ARG_LIST@62..66\n+                        L_ANGLE@62..63 \"<\"\n+                        LIFETIME_ARG@63..65\n+                          LIFETIME@63..65\n+                            LIFETIME_IDENT@63..65 \"'a\"\n+                        R_ANGLE@65..66 \">\"\n+                      WHITESPACE@66..67 \" \"\n+                      EQ@67..68 \"=\"\n+                      WHITESPACE@68..69 \" \"\n+                      PATH_TYPE@69..73\n+                        PATH@69..73\n+                          PATH_SEGMENT@69..73\n+                            NAME_REF@69..73\n+                              IDENT@69..73 \"Item\"\n+                    R_ANGLE@73..74 \">\"\n+      R_ANGLE@74..75 \">\"\n+    PARAM_LIST@75..90\n+      L_PAREN@75..76 \"(\"\n+      PARAM@76..89\n+        IDENT_PAT@76..86\n+          NAME@76..86\n+            IDENT@76..86 \"printables\"\n+        COLON@86..87 \":\"\n+        WHITESPACE@87..88 \" \"\n+        PATH_TYPE@88..89\n+          PATH@88..89\n+            PATH_SEGMENT@88..89\n+              NAME_REF@88..89\n+                IDENT@88..89 \"T\"\n+      R_PAREN@89..90 \")\"\n+    WHITESPACE@90..91 \" \"\n+    BLOCK_EXPR@91..93\n+      L_CURLY@91..92 \"{\"\n+      R_CURLY@92..93 \"}\"\n+  WHITESPACE@93..94 \"\\n\""}, {"sha": "d7a19dbb39296dc5c9cb5f4fca687ff4797e39c5", "filename": "crates/syntax/test_data/parser/inline/ok/0138_associated_type_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7aa37c20a52579bbe3894126a54d1f390b8b05c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0138_associated_type_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7aa37c20a52579bbe3894126a54d1f390b8b05c/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0138_associated_type_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0138_associated_type_bounds.rs?ref=e7aa37c20a52579bbe3894126a54d1f390b8b05c", "patch": "@@ -1 +1 @@\n-fn print_all<T: Iterator<Item: Display>>(printables: T) {}\n+fn print_all<T: Iterator<Item, Item::Item, Item: Display, Item<'a> = Item>>(printables: T) {}"}]}