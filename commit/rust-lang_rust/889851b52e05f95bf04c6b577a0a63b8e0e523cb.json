{"sha": "889851b52e05f95bf04c6b577a0a63b8e0e523cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4OTg1MWI1MmUwNWY5NWJmMDRjNmI1NzdhMGE2M2I4ZTBlNTIzY2I=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-19T17:17:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-19T17:17:52Z"}, "message": "Merge #3241\n\n3241: Fill missing fields of enum variants r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "bf1cc13ddb0fd6b45e6a19789d5e3cd79caaf904", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf1cc13ddb0fd6b45e6a19789d5e3cd79caaf904"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/889851b52e05f95bf04c6b577a0a63b8e0e523cb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeTW3ACRBK7hj4Ov3rIwAAdHIIAF6uRrE2/rmGHLAbbwqkF6Vs\nBq2T2nMI1ElnVCElrACBHYU2GMlOhmKrK+wXQ1HfAK/8PuVv78ilSdj+GqYnTA+D\nO2ECOtkVwEYK0+gmfmudaNtuq1SY2M3z/WFWXDMzdVYU+r1AtkTu9ly1nC8rPpDR\nMUsNXMwezgsfbH8/7iOrg+esOWxN2Zz0C1P/Zy97bGSzvkFOKtikuzWMjJG4YCVD\nA9Lo1g4Su2MMp79C67KwUDZE2dOUtH+GWRovuVVW4fJg0LFCotbf0SlvK/hRrsp9\nKFcvcB6R2wp92tSrrzNHRrliE8Ve/87Yi/FnOTtXw5I/DzLqeAdQTGYulPCc+hA=\n=rj/T\n-----END PGP SIGNATURE-----\n", "payload": "tree bf1cc13ddb0fd6b45e6a19789d5e3cd79caaf904\nparent 7db7c868812c7289626825988fb6e610ea747eeb\nparent 9549aad525845d5e401a71254d25ca92920de462\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1582132672 +0000\ncommitter GitHub <noreply@github.com> 1582132672 +0000\n\nMerge #3241\n\n3241: Fill missing fields of enum variants r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/889851b52e05f95bf04c6b577a0a63b8e0e523cb", "html_url": "https://github.com/rust-lang/rust/commit/889851b52e05f95bf04c6b577a0a63b8e0e523cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/889851b52e05f95bf04c6b577a0a63b8e0e523cb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7db7c868812c7289626825988fb6e610ea747eeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/7db7c868812c7289626825988fb6e610ea747eeb", "html_url": "https://github.com/rust-lang/rust/commit/7db7c868812c7289626825988fb6e610ea747eeb"}, {"sha": "9549aad525845d5e401a71254d25ca92920de462", "url": "https://api.github.com/repos/rust-lang/rust/commits/9549aad525845d5e401a71254d25ca92920de462", "html_url": "https://github.com/rust-lang/rust/commit/9549aad525845d5e401a71254d25ca92920de462"}], "stats": {"total": 47, "additions": 40, "deletions": 7}, "files": [{"sha": "22f24890d4ae2bd4efb09295662d71a0cbebf9d4", "filename": "crates/ra_hir_ty/src/expr.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/889851b52e05f95bf04c6b577a0a63b8e0e523cb/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/889851b52e05f95bf04c6b577a0a63b8e0e523cb/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs?ref=889851b52e05f95bf04c6b577a0a63b8e0e523cb", "patch": "@@ -15,6 +15,7 @@ use rustc_hash::FxHashSet;\n use crate::{\n     db::HirDatabase,\n     diagnostics::{MissingFields, MissingOkInTailExpr},\n+    utils::variant_data,\n     ApplicationTy, InferenceResult, Ty, TypeCtor,\n };\n \n@@ -27,6 +28,7 @@ pub use hir_def::{\n         ArithOp, Array, BinaryOp, BindingAnnotation, CmpOp, Expr, ExprId, Literal, LogicOp,\n         MatchArm, Ordering, Pat, PatId, RecordFieldPat, RecordLitField, Statement, UnaryOp,\n     },\n+    VariantId,\n };\n \n pub struct ExprValidator<'a, 'b: 'a> {\n@@ -69,17 +71,19 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n     ) {\n         if spread.is_some() {\n             return;\n+        };\n+        let variant_def: VariantId = match self.infer.variant_resolution_for_expr(id) {\n+            Some(VariantId::UnionId(_)) | None => return,\n+            Some(it) => it,\n+        };\n+        if let VariantId::UnionId(_) = variant_def {\n+            return;\n         }\n \n-        let struct_def = match self.infer[id].as_adt() {\n-            Some((AdtId::StructId(s), _)) => s,\n-            _ => return,\n-        };\n-        let struct_data = db.struct_data(struct_def);\n+        let variant_data = variant_data(db, variant_def);\n \n         let lit_fields: FxHashSet<_> = fields.iter().map(|f| &f.name).collect();\n-        let missed_fields: Vec<Name> = struct_data\n-            .variant_data\n+        let missed_fields: Vec<Name> = variant_data\n             .fields()\n             .iter()\n             .filter_map(|(_f, d)| {"}, {"sha": "9cf86b26d8b0b738b0b168b4bb6cbe70ef4c107d", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/889851b52e05f95bf04c6b577a0a63b8e0e523cb/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/889851b52e05f95bf04c6b577a0a63b8e0e523cb/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=889851b52e05f95bf04c6b577a0a63b8e0e523cb", "patch": "@@ -469,6 +469,35 @@ mod tests {\n         check_apply_diagnostic_fix(before, after);\n     }\n \n+    #[test]\n+    fn test_fill_struct_fields_enum() {\n+        let before = r\"\n+            enum Expr {\n+                Bin { lhs: Box<Expr>, rhs: Box<Expr> }\n+            }\n+\n+            impl Expr {\n+                fn new_bin(lhs: Box<Expr>, rhs: Box<Expr>) -> Expr {\n+                    Expr::Bin { <|> }\n+                }\n+            }\n+\n+        \";\n+        let after = r\"\n+            enum Expr {\n+                Bin { lhs: Box<Expr>, rhs: Box<Expr> }\n+            }\n+\n+            impl Expr {\n+                fn new_bin(lhs: Box<Expr>, rhs: Box<Expr>) -> Expr {\n+                    Expr::Bin { lhs: (), rhs: () <|> }\n+                }\n+            }\n+\n+        \";\n+        check_apply_diagnostic_fix(before, after);\n+    }\n+\n     #[test]\n     fn test_fill_struct_fields_partial() {\n         let before = r\""}]}