{"sha": "78ca1bda3522b14bc0336bc01dd1d49fdba2cda7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4Y2ExYmRhMzUyMmIxNGJjMDMzNmJjMDFkZDFkNDlmZGJhMmNkYTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-08T12:03:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-08T12:03:06Z"}, "message": "Auto merge of #62473 - timvermeulen:is_sorted_by_key, r=scottmcm\n\nOnly call the closure parameter of Iterator::is_sorted_by_key once per item\n\nSee https://github.com/rust-lang/rust/issues/53485#issuecomment-472314004.\n\nThis changes `Iterator::is_sorted_by_key` to only call the given closure once for each item, which allows us to pass the items to the closure by value instead of by reference.\n\n**Important**: `is_sorted_by_key` for slices and slice iterators is now no longer implemented in terms of the custom `slice::Iter::is_sorted_by` implementation. It's a trade-off: we could forward `slice::Iter::is_sorted_by_key` to it directly for potential SIMD benefits, but that would mean that the closure is potentially called twice for (almost) every element of the slice.", "tree": {"sha": "5813defd55c883f4bd34ef618a3c93bc12042185", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5813defd55c883f4bd34ef618a3c93bc12042185"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78ca1bda3522b14bc0336bc01dd1d49fdba2cda7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78ca1bda3522b14bc0336bc01dd1d49fdba2cda7", "html_url": "https://github.com/rust-lang/rust/commit/78ca1bda3522b14bc0336bc01dd1d49fdba2cda7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78ca1bda3522b14bc0336bc01dd1d49fdba2cda7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10840b8ae2182128f2e1c84b8aaf41452728de07", "url": "https://api.github.com/repos/rust-lang/rust/commits/10840b8ae2182128f2e1c84b8aaf41452728de07", "html_url": "https://github.com/rust-lang/rust/commit/10840b8ae2182128f2e1c84b8aaf41452728de07"}, {"sha": "98b54fbd7afd55f40531bdb350a5adb870958111", "url": "https://api.github.com/repos/rust-lang/rust/commits/98b54fbd7afd55f40531bdb350a5adb870958111", "html_url": "https://github.com/rust-lang/rust/commit/98b54fbd7afd55f40531bdb350a5adb870958111"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "b9a98236f18a7ed31004d74910a36b699d815798", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78ca1bda3522b14bc0336bc01dd1d49fdba2cda7/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78ca1bda3522b14bc0336bc01dd1d49fdba2cda7/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=78ca1bda3522b14bc0336bc01dd1d49fdba2cda7", "patch": "@@ -2572,13 +2572,13 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]\n-    fn is_sorted_by_key<F, K>(self, mut f: F) -> bool\n+    fn is_sorted_by_key<F, K>(self, f: F) -> bool\n     where\n         Self: Sized,\n-        F: FnMut(&Self::Item) -> K,\n+        F: FnMut(Self::Item) -> K,\n         K: PartialOrd\n     {\n-        self.is_sorted_by(|a, b| f(a).partial_cmp(&f(b)))\n+        self.map(f).is_sorted()\n     }\n }\n "}, {"sha": "fdf3cc8e006274c1995157e63a9b258baf9deebc", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78ca1bda3522b14bc0336bc01dd1d49fdba2cda7/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78ca1bda3522b14bc0336bc01dd1d49fdba2cda7/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=78ca1bda3522b14bc0336bc01dd1d49fdba2cda7", "patch": "@@ -2459,12 +2459,12 @@ impl<T> [T] {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]\n-    pub fn is_sorted_by_key<F, K>(&self, mut f: F) -> bool\n+    pub fn is_sorted_by_key<F, K>(&self, f: F) -> bool\n     where\n         F: FnMut(&T) -> K,\n         K: PartialOrd\n     {\n-        self.is_sorted_by(|a, b| f(a).partial_cmp(&f(b)))\n+        self.iter().is_sorted_by_key(f)\n     }\n }\n "}]}