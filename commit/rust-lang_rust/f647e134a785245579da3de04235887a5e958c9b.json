{"sha": "f647e134a785245579da3de04235887a5e958c9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NDdlMTM0YTc4NTI0NTU3OWRhM2RlMDQyMzU4ODdhNWU5NThjOWI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-19T19:07:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-19T19:07:33Z"}, "message": "Merge #7351\n\n7351: Show const params in completions r=Veykril a=Veykril\n\nbors r+\r\n![image](https://user-images.githubusercontent.com/3757771/105080872-bba76680-5a91-11eb-91cd-0910da4c8312.png)\r\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "d0e54ef23ff0714497ac251b6f2e1c7512c092e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0e54ef23ff0714497ac251b6f2e1c7512c092e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f647e134a785245579da3de04235887a5e958c9b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgBy31CRBK7hj4Ov3rIwAAdHIIAHAgLLb3+jauRx2wwCQXChVE\n12hollfxmVtdFKsawi3/taB0m4VDO1xyPh9hHyxXLql0rjmseJt7+fWzJiPv9czo\nm4f5Edfwyxgy3bDQikXGASmoFder/iipG+wfooU9FpOY4DndTzdoz3t5SE5vaQEO\nU2+IjHo55NgQhQQs8HjSBSog4NkzXdoIGigEo89qK9DRAwhmTHVNXHqeTOncNBEB\nF+GWc2nKSxJIafBmTxBe/h4EGsdpiHgbfpFWF8sxylmzBCKCbEai9ul0cb2h77Jg\nv+nPLJNdL2QSSNW89KGWerDQgcTauJtiD5O/BSE6lVjE6oDelKlyPyf2YVS1xsk=\n=nRV+\n-----END PGP SIGNATURE-----\n", "payload": "tree d0e54ef23ff0714497ac251b6f2e1c7512c092e1\nparent 02edb4b31be02fdab9c970cafb38439f472c0696\nparent bed12833cc4ce7c6b4085ba8dc47fc167c83f8ea\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1611083253 +0000\ncommitter GitHub <noreply@github.com> 1611083253 +0000\n\nMerge #7351\n\n7351: Show const params in completions r=Veykril a=Veykril\n\nbors r+\r\n![image](https://user-images.githubusercontent.com/3757771/105080872-bba76680-5a91-11eb-91cd-0910da4c8312.png)\r\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f647e134a785245579da3de04235887a5e958c9b", "html_url": "https://github.com/rust-lang/rust/commit/f647e134a785245579da3de04235887a5e958c9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f647e134a785245579da3de04235887a5e958c9b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02edb4b31be02fdab9c970cafb38439f472c0696", "url": "https://api.github.com/repos/rust-lang/rust/commits/02edb4b31be02fdab9c970cafb38439f472c0696", "html_url": "https://github.com/rust-lang/rust/commit/02edb4b31be02fdab9c970cafb38439f472c0696"}, {"sha": "bed12833cc4ce7c6b4085ba8dc47fc167c83f8ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/bed12833cc4ce7c6b4085ba8dc47fc167c83f8ea", "html_url": "https://github.com/rust-lang/rust/commit/bed12833cc4ce7c6b4085ba8dc47fc167c83f8ea"}], "stats": {"total": 53, "additions": 41, "deletions": 12}, "files": [{"sha": "809e1645ad0a7865464d0e72d701ee94d8b6aef4", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f647e134a785245579da3de04235887a5e958c9b/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f647e134a785245579da3de04235887a5e958c9b/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=f647e134a785245579da3de04235887a5e958c9b", "patch": "@@ -29,6 +29,10 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n     }\n \n     ctx.scope.process_all_names(&mut |name, res| {\n+        if let ScopeDef::GenericParam(hir::GenericParam::LifetimeParam(_)) = res {\n+            mark::hit!(skip_lifetime_completion);\n+            return;\n+        }\n         if ctx.use_item_syntax.is_some() {\n             if let (ScopeDef::Unknown, Some(name_ref)) = (&res, &ctx.name_ref_syntax) {\n                 if name_ref.syntax().text() == name.to_string().as_str() {\n@@ -37,7 +41,7 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n                 }\n             }\n         }\n-        acc.add_resolution(ctx, name.to_string(), &res)\n+        acc.add_resolution(ctx, name.to_string(), &res);\n     });\n }\n \n@@ -234,6 +238,24 @@ fn main() {\n                 fn quux() fn quux<T>()\n             \"#]],\n         );\n+        check(\n+            r#\"fn quux<const C: usize>() { $0 }\"#,\n+            expect![[r#\"\n+                tp C\n+                fn quux() fn quux<const C: usize>()\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn does_not_complete_lifetimes() {\n+        mark::check!(skip_lifetime_completion);\n+        check(\n+            r#\"fn quux<'a>() { $0 }\"#,\n+            expect![[r#\"\n+                fn quux() fn quux<'a>()\n+            \"#]],\n+        );\n     }\n \n     #[test]"}, {"sha": "a4141e11198b7ecac83dbdcda2f11a254e51a858", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f647e134a785245579da3de04235887a5e958c9b/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f647e134a785245579da3de04235887a5e958c9b/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=f647e134a785245579da3de04235887a5e958c9b", "patch": "@@ -2046,7 +2046,7 @@ impl Callable {\n pub enum ScopeDef {\n     ModuleDef(ModuleDef),\n     MacroDef(MacroDef),\n-    GenericParam(TypeParam),\n+    GenericParam(GenericParam),\n     ImplSelfType(Impl),\n     AdtSelfType(Adt),\n     Local(Local),"}, {"sha": "0a30b4f5b087f7d5df96f12e1c5bc0898048ebcd", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f647e134a785245579da3de04235887a5e958c9b/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f647e134a785245579da3de04235887a5e958c9b/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=f647e134a785245579da3de04235887a5e958c9b", "patch": "@@ -814,7 +814,7 @@ impl<'a> SemanticsScope<'a> {\n                 }\n                 resolver::ScopeDef::ImplSelfType(it) => ScopeDef::ImplSelfType(it.into()),\n                 resolver::ScopeDef::AdtSelfType(it) => ScopeDef::AdtSelfType(it.into()),\n-                resolver::ScopeDef::GenericParam(id) => ScopeDef::GenericParam(TypeParam { id }),\n+                resolver::ScopeDef::GenericParam(id) => ScopeDef::GenericParam(id.into()),\n                 resolver::ScopeDef::Local(pat_id) => {\n                     let parent = resolver.body_owner().unwrap().into();\n                     ScopeDef::Local(Local { parent, pat_id })"}, {"sha": "a505bf2be8a47d9911037658eb9351744b363eac", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f647e134a785245579da3de04235887a5e958c9b/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f647e134a785245579da3de04235887a5e958c9b/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=f647e134a785245579da3de04235887a5e958c9b", "patch": "@@ -21,8 +21,9 @@ use crate::{\n     per_ns::PerNs,\n     visibility::{RawVisibility, Visibility},\n     AdtId, AssocContainerId, ConstId, ConstParamId, ContainerId, DefWithBodyId, EnumId,\n-    EnumVariantId, FunctionId, GenericDefId, HasModule, ImplId, LocalModuleId, Lookup, ModuleDefId,\n-    ModuleId, StaticId, StructId, TraitId, TypeAliasId, TypeParamId, VariantId,\n+    EnumVariantId, FunctionId, GenericDefId, GenericParamId, HasModule, ImplId, LifetimeParamId,\n+    LocalModuleId, Lookup, ModuleDefId, ModuleId, StaticId, StructId, TraitId, TypeAliasId,\n+    TypeParamId, VariantId,\n };\n \n #[derive(Debug, Clone, Default)]\n@@ -484,7 +485,7 @@ pub enum ScopeDef {\n     PerNs(PerNs),\n     ImplSelfType(ImplId),\n     AdtSelfType(AdtId),\n-    GenericParam(TypeParamId),\n+    GenericParam(GenericParamId),\n     Local(PatId),\n }\n \n@@ -527,15 +528,21 @@ impl Scope {\n             Scope::LocalItemsScope(body) => body.item_scope.entries().for_each(|(name, def)| {\n                 f(name.clone(), ScopeDef::PerNs(def));\n             }),\n-            Scope::GenericParams { params, def } => {\n+            &Scope::GenericParams { ref params, def: parent } => {\n                 for (local_id, param) in params.types.iter() {\n-                    if let Some(name) = &param.name {\n-                        f(\n-                            name.clone(),\n-                            ScopeDef::GenericParam(TypeParamId { local_id, parent: *def }),\n-                        )\n+                    if let Some(ref name) = param.name {\n+                        let id = TypeParamId { local_id, parent };\n+                        f(name.clone(), ScopeDef::GenericParam(id.into()))\n                     }\n                 }\n+                for (local_id, param) in params.consts.iter() {\n+                    let id = ConstParamId { local_id, parent };\n+                    f(param.name.clone(), ScopeDef::GenericParam(id.into()))\n+                }\n+                for (local_id, param) in params.lifetimes.iter() {\n+                    let id = LifetimeParamId { local_id, parent };\n+                    f(param.name.clone(), ScopeDef::GenericParam(id.into()))\n+                }\n             }\n             Scope::ImplDefScope(i) => {\n                 f(name![Self], ScopeDef::ImplSelfType(*i));"}]}