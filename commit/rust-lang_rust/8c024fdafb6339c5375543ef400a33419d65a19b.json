{"sha": "8c024fdafb6339c5375543ef400a33419d65a19b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjMDI0ZmRhZmI2MzM5YzUzNzU1NDNlZjQwMGEzMzQxOWQ2NWExOWI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-02-23T20:30:27Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-03-13T15:21:31Z"}, "message": "in `Foo(X)` dep-nodes, allow X to be a `ty` not a `tt`\n\nBefore, the identifier `X` was also used when generating a pattern\nto match against the dep-node. So `Foo(DefId)` would generate a match\npattern like:\n\n    match foo {\n        Foo(DefId) => ...\n    }\n\nThis does not scale to more general types like `&'tcx\nTy<'tcx>`. Therefore, we now require *exactly one* argument (the macro\nwas internally tupling anyway, and no actual nodes use more than one\nargument), and then we can generate a fixed pattern like:\n\n    match foo {\n        Foo(arg) => ...\n    }\n\nHuzzah. (Also, hygiene is nice.)", "tree": {"sha": "840c16cb7e73048571ebd5edb6e9ac278c50c9b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/840c16cb7e73048571ebd5edb6e9ac278c50c9b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c024fdafb6339c5375543ef400a33419d65a19b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c024fdafb6339c5375543ef400a33419d65a19b", "html_url": "https://github.com/rust-lang/rust/commit/8c024fdafb6339c5375543ef400a33419d65a19b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c024fdafb6339c5375543ef400a33419d65a19b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "993c1488cc4b0826c3f1076393bf50eef09ba467", "url": "https://api.github.com/repos/rust-lang/rust/commits/993c1488cc4b0826c3f1076393bf50eef09ba467", "html_url": "https://github.com/rust-lang/rust/commit/993c1488cc4b0826c3f1076393bf50eef09ba467"}], "stats": {"total": 45, "additions": 24, "deletions": 21}, "files": [{"sha": "6a2c003179a12750ffc2c614a26445397e32a9b4", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8c024fdafb6339c5375543ef400a33419d65a19b/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c024fdafb6339c5375543ef400a33419d65a19b/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=8c024fdafb6339c5375543ef400a33419d65a19b", "patch": "@@ -80,6 +80,10 @@ macro_rules! erase {\n     ($x:tt) => ({})\n }\n \n+macro_rules! replace {\n+    ($x:tt with $($y:tt)*) => ($($y)*)\n+}\n+\n macro_rules! is_anon_attr {\n     (anon) => (true);\n     ($attr:ident) => (false);\n@@ -111,7 +115,7 @@ macro_rules! define_dep_nodes {\n     (<$tcx:tt>\n     $(\n         [$($attr:ident),* ]\n-        $variant:ident $(( $($tuple_arg:tt),* ))*\n+        $variant:ident $(( $tuple_arg_ty:ty $(,)* ))*\n                        $({ $($struct_arg_name:ident : $struct_arg_ty:ty),* })*\n       ,)*\n     ) => (\n@@ -134,7 +138,7 @@ macro_rules! define_dep_nodes {\n \n                             // tuple args\n                             $({\n-                                return <( $($tuple_arg,)* ) as DepNodeParams>\n+                                return <$tuple_arg_ty as DepNodeParams>\n                                     ::CAN_RECONSTRUCT_QUERY_KEY;\n                             })*\n \n@@ -186,7 +190,7 @@ macro_rules! define_dep_nodes {\n                         DepKind :: $variant => {\n                             // tuple args\n                             $({\n-                                $(erase!($tuple_arg);)*\n+                                erase!($tuple_arg_ty);\n                                 return true;\n                             })*\n \n@@ -205,7 +209,7 @@ macro_rules! define_dep_nodes {\n \n         pub enum DepConstructor<$tcx> {\n             $(\n-                $variant $(( $($tuple_arg),* ))*\n+                $variant $(( $tuple_arg_ty ))*\n                          $({ $($struct_arg_name : $struct_arg_ty),* })*\n             ),*\n         }\n@@ -227,15 +231,14 @@ macro_rules! define_dep_nodes {\n             {\n                 match dep {\n                     $(\n-                        DepConstructor :: $variant $(( $($tuple_arg),* ))*\n+                        DepConstructor :: $variant $(( replace!(($tuple_arg_ty) with arg) ))*\n                                                    $({ $($struct_arg_name),* })*\n                             =>\n                         {\n                             // tuple args\n                             $({\n-                                let tupled_args = ( $($tuple_arg,)* );\n-                                let hash = DepNodeParams::to_fingerprint(&tupled_args,\n-                                                                         tcx);\n+                                erase!($tuple_arg_ty);\n+                                let hash = DepNodeParams::to_fingerprint(&arg, tcx);\n                                 let dep_node = DepNode {\n                                     kind: DepKind::$variant,\n                                     hash\n@@ -247,7 +250,7 @@ macro_rules! define_dep_nodes {\n                                     tcx.sess.opts.debugging_opts.query_dep_graph)\n                                 {\n                                     tcx.dep_graph.register_dep_node_debug_str(dep_node, || {\n-                                        tupled_args.to_debug_str(tcx)\n+                                        arg.to_debug_str(tcx)\n                                     });\n                                 }\n \n@@ -679,43 +682,43 @@ impl<'a, 'gcx: 'tcx + 'a, 'tcx: 'a, T> DepNodeParams<'a, 'gcx, 'tcx> for T\n     }\n }\n \n-impl<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> DepNodeParams<'a, 'gcx, 'tcx> for (DefId,) {\n+impl<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> DepNodeParams<'a, 'gcx, 'tcx> for DefId {\n     const CAN_RECONSTRUCT_QUERY_KEY: bool = true;\n \n     fn to_fingerprint(&self, tcx: TyCtxt) -> Fingerprint {\n-        tcx.def_path_hash(self.0).0\n+        tcx.def_path_hash(*self).0\n     }\n \n     fn to_debug_str(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> String {\n-        tcx.item_path_str(self.0)\n+        tcx.item_path_str(*self)\n     }\n }\n \n-impl<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> DepNodeParams<'a, 'gcx, 'tcx> for (DefIndex,) {\n+impl<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> DepNodeParams<'a, 'gcx, 'tcx> for DefIndex {\n     const CAN_RECONSTRUCT_QUERY_KEY: bool = true;\n \n     fn to_fingerprint(&self, tcx: TyCtxt) -> Fingerprint {\n-        tcx.hir.definitions().def_path_hash(self.0).0\n+        tcx.hir.definitions().def_path_hash(*self).0\n     }\n \n     fn to_debug_str(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> String {\n-        tcx.item_path_str(DefId::local(self.0))\n+        tcx.item_path_str(DefId::local(*self))\n     }\n }\n \n-impl<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> DepNodeParams<'a, 'gcx, 'tcx> for (CrateNum,) {\n+impl<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> DepNodeParams<'a, 'gcx, 'tcx> for CrateNum {\n     const CAN_RECONSTRUCT_QUERY_KEY: bool = true;\n \n     fn to_fingerprint(&self, tcx: TyCtxt) -> Fingerprint {\n         let def_id = DefId {\n-            krate: self.0,\n+            krate: *self,\n             index: CRATE_DEF_INDEX,\n         };\n         tcx.def_path_hash(def_id).0\n     }\n \n     fn to_debug_str(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> String {\n-        tcx.crate_name(self.0).as_str().to_string()\n+        tcx.crate_name(*self).as_str().to_string()\n     }\n }\n \n@@ -743,17 +746,17 @@ impl<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> DepNodeParams<'a, 'gcx, 'tcx> for (DefId, De\n     }\n }\n \n-impl<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> DepNodeParams<'a, 'gcx, 'tcx> for (HirId,) {\n+impl<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> DepNodeParams<'a, 'gcx, 'tcx> for HirId {\n     const CAN_RECONSTRUCT_QUERY_KEY: bool = false;\n \n     // We actually would not need to specialize the implementation of this\n     // method but it's faster to combine the hashes than to instantiate a full\n     // hashing context and stable-hashing state.\n     fn to_fingerprint(&self, tcx: TyCtxt) -> Fingerprint {\n-        let (HirId {\n+        let HirId {\n             owner,\n             local_id: ItemLocalId(local_id),\n-        },) = *self;\n+        } = *self;\n \n         let def_path_hash = tcx.def_path_hash(DefId::local(owner));\n         let local_id = Fingerprint::from_smaller_hash(local_id as u64);"}]}