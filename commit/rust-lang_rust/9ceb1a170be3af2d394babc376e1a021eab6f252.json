{"sha": "9ceb1a170be3af2d394babc376e1a021eab6f252", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljZWIxYTE3MGJlM2FmMmQzOTRiYWJjMzc2ZTFhMDIxZWFiNmYyNTI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-10T11:49:25Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-10T11:49:25Z"}, "message": "Misc renames and changes", "tree": {"sha": "f1d5bf486d4e0670c2a59166d976a0a5101f1140", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1d5bf486d4e0670c2a59166d976a0a5101f1140"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ceb1a170be3af2d394babc376e1a021eab6f252", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ceb1a170be3af2d394babc376e1a021eab6f252", "html_url": "https://github.com/rust-lang/rust/commit/9ceb1a170be3af2d394babc376e1a021eab6f252", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ceb1a170be3af2d394babc376e1a021eab6f252/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2be4b83f147d75353ea49bf8017946a1f0bcaa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2be4b83f147d75353ea49bf8017946a1f0bcaa8", "html_url": "https://github.com/rust-lang/rust/commit/c2be4b83f147d75353ea49bf8017946a1f0bcaa8"}], "stats": {"total": 66, "additions": 33, "deletions": 33}, "files": [{"sha": "9811793b8677a4ba996482a9e3ce246819fa8263", "filename": "src/lib.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9ceb1a170be3af2d394babc376e1a021eab6f252/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ceb1a170be3af2d394babc376e1a021eab6f252/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=9ceb1a170be3af2d394babc376e1a021eab6f252", "patch": "@@ -68,7 +68,10 @@ mod prelude {\n     pub use std::any::Any;\n     pub use std::collections::{HashMap, HashSet};\n \n-    pub use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n+    pub use syntax::ast::{FloatTy, IntTy, UintTy};\n+    pub use syntax::source_map::DUMMY_SP;\n+\n+    pub use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n     pub use rustc::mir::{self, interpret::AllocId, *};\n     pub use rustc::session::{config::CrateType, Session};\n     pub use rustc::ty::layout::{self, Abi, LayoutOf, Scalar, Size, TyLayout};\n@@ -82,8 +85,7 @@ mod prelude {\n         sync::Lrc,\n     };\n     pub use rustc_mir::monomorphize::{collector, MonoItem};\n-    pub use syntax::ast::{FloatTy, IntTy, UintTy};\n-    pub use syntax::source_map::DUMMY_SP;\n+    pub use rustc_codegen_utils::CompiledModule;\n \n     pub use cranelift::codegen::ir::{\n         condcodes::IntCC, function::Function, ExternalName, FuncRef, Inst, StackSlot,\n@@ -97,9 +99,12 @@ mod prelude {\n     pub use crate::abi::*;\n     pub use crate::base::{trans_operand, trans_place};\n     pub use crate::common::*;\n-    pub use crate::Caches;\n+    pub use crate::{Caches, CodegenResults};\n }\n \n+use std::fs::File;\n+use std::io::Write;\n+\n use crate::constant::ConstantCx;\n use crate::prelude::*;\n \n@@ -119,7 +124,7 @@ impl<'tcx> Caches<'tcx> {\n \n struct CraneliftCodegenBackend;\n \n-struct CodegenResult {\n+pub struct CodegenResults {\n     artifact: faerie::Artifact,\n     metadata: Vec<u8>,\n     crate_name: Symbol,\n@@ -182,16 +187,17 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         save_incremental(tcx);\n         tcx.sess.warn(\"Saved incremental data\");\n \n+        let mut log = if cfg!(debug_assertions) {\n+            Some(File::create(concat!(env!(\"CARGO_MANIFEST_DIR\"), \"/target/out/log.txt\"))\n+                    .unwrap())\n+        } else {\n+            None\n+        };\n+\n         if std::env::var(\"SHOULD_RUN\").is_ok() {\n             let mut jit_module: Module<SimpleJITBackend> = Module::new(SimpleJITBuilder::new());\n             assert_eq!(pointer_ty(tcx), jit_module.target_config().pointer_type());\n \n-            codegen_mono_items(tcx, &mut jit_module);\n-\n-            tcx.sess.abort_if_errors();\n-            println!(\"Compiled everything\");\n-            println!(\"Rustc codegen cranelift will JIT run the executable, because the SHOULD_RUN env var is set\");\n-\n             let sig = Signature {\n                 params: vec![\n                     AbiParam::new(jit_module.target_config().pointer_type()),\n@@ -206,7 +212,12 @@ impl CodegenBackend for CraneliftCodegenBackend {\n                 .declare_function(\"main\", Linkage::Import, &sig)\n                 .unwrap();\n \n-            jit_module.finalize_definitions();\n+            codegen_mono_items(tcx, &mut jit_module, &mut log);\n+\n+            tcx.sess.abort_if_errors();\n+            println!(\"Compiled everything\");\n+            println!(\"Rustc codegen cranelift will JIT run the executable, because the SHOULD_RUN env var is set\");\n+\n             let finalized_main: *const u8 = jit_module.get_finalized_function(main_func_id);\n             println!(\"\ud83c\udf89 Finalized everything\");\n \n@@ -232,13 +243,11 @@ impl CodegenBackend for CraneliftCodegenBackend {\n                 faerie_module.target_config().pointer_type()\n             );\n \n-            codegen_mono_items(tcx, &mut faerie_module);\n+            codegen_mono_items(tcx, &mut faerie_module, &mut log);\n \n             tcx.sess.abort_if_errors();\n \n-            faerie_module.finalize_definitions();\n-\n-            return Box::new(CodegenResult {\n+            return Box::new(CodegenResults {\n                 artifact: faerie_module.finish().artifact,\n                 metadata: metadata.raw_data,\n                 crate_name: tcx.crate_name(LOCAL_CRATE),\n@@ -254,7 +263,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         outputs: &OutputFilenames,\n     ) -> Result<(), CompileIncomplete> {\n         let res = *res\n-            .downcast::<CodegenResult>()\n+            .downcast::<CodegenResults>()\n             .expect(\"Expected CraneliftCodegenBackend's CodegenResult, found Box<Any>\");\n \n         for &crate_type in sess.opts.crate_types.iter() {\n@@ -272,21 +281,11 @@ impl CodegenBackend for CraneliftCodegenBackend {\n fn codegen_mono_items<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     module: &mut Module<impl Backend + 'static>,\n+    log: &mut Option<File>,\n ) {\n-    use std::io::Write;\n-\n     let mut caches = Caches::new();\n     let mut ccx = ConstantCx::default();\n \n-    let mut log = if cfg!(debug_assertions) {\n-        Some(\n-            ::std::fs::File::create(concat!(env!(\"CARGO_MANIFEST_DIR\"), \"/target/out/log.txt\"))\n-                .unwrap(),\n-        )\n-    } else {\n-        None\n-    };\n-\n     let (_, cgus) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n     let mono_items = cgus\n         .iter()\n@@ -332,6 +331,7 @@ fn codegen_mono_items<'a, 'tcx: 'a>(\n     }\n \n     ccx.finalize(tcx, module);\n+    module.finalize_definitions();\n \n     let after = ::std::time::Instant::now();\n     println!(\"[codegen mono items] end time: {:?}\", after - before);"}, {"sha": "474584fa2a11435f4a65cd57518d9af0919f6f01", "filename": "src/link.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ceb1a170be3af2d394babc376e1a021eab6f252/src%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ceb1a170be3af2d394babc376e1a021eab6f252/src%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flink.rs?ref=9ceb1a170be3af2d394babc376e1a021eab6f252", "patch": "@@ -3,7 +3,7 @@ use std::path::PathBuf;\n \n use rustc::session::Session;\n \n-pub(crate) fn link_rlib(sess: &Session, res: &crate::CodegenResult, output_name: PathBuf) {\n+pub(crate) fn link_rlib(sess: &Session, res: &crate::CodegenResults, output_name: PathBuf) {\n     let file = File::create(&output_name).unwrap();\n     let mut builder = ar::Builder::new(file);\n \n@@ -22,7 +22,7 @@ pub(crate) fn link_rlib(sess: &Session, res: &crate::CodegenResult, output_name:\n     builder\n         .append(\n             &ar::Header::new(\n-                crate::metadata::METADATA_FILE.to_vec(),\n+                crate::metadata::METADATA_FILENAME.to_vec(),\n                 res.metadata.len() as u64,\n             ),\n             ::std::io::Cursor::new(res.metadata.clone()),\n@@ -42,7 +42,7 @@ pub(crate) fn link_rlib(sess: &Session, res: &crate::CodegenResult, output_name:\n     }\n }\n \n-pub(crate) fn link_bin(sess: &Session, res: &crate::CodegenResult, output_name: PathBuf) {\n+pub(crate) fn link_bin(sess: &Session, res: &crate::CodegenResults, output_name: PathBuf) {\n     // TODO: link executable\n     let obj = res.artifact.emit().unwrap();\n     std::fs::write(output_name, obj).unwrap();"}, {"sha": "faeeeaa411d9bf02a0ad6c8b26202b0ae70c2d1c", "filename": "src/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ceb1a170be3af2d394babc376e1a021eab6f252/src%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ceb1a170be3af2d394babc376e1a021eab6f252/src%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmetadata.rs?ref=9ceb1a170be3af2d394babc376e1a021eab6f252", "patch": "@@ -3,7 +3,7 @@ use rustc_data_structures::owning_ref::{self, OwningRef};\n use std::fs::File;\n use std::path::Path;\n \n-pub const METADATA_FILE: &'static [u8] = b\"rust.metadata.bin\" as &[u8];\n+pub const METADATA_FILENAME: &'static [u8] = b\"rust.metadata.bin\" as &[u8];\n \n pub struct CraneliftMetadataLoader;\n \n@@ -17,7 +17,7 @@ impl MetadataLoader for CraneliftMetadataLoader {\n         // Iterate over all entries in the archive:\n         while let Some(entry_result) = archive.next_entry() {\n             let mut entry = entry_result.map_err(|e| format!(\"{:?}\", e))?;\n-            if entry.header().identifier() == METADATA_FILE {\n+            if entry.header().identifier() == METADATA_FILENAME {\n                 let mut buf = Vec::new();\n                 ::std::io::copy(&mut entry, &mut buf).map_err(|e| format!(\"{:?}\", e))?;\n                 let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf).into();"}]}