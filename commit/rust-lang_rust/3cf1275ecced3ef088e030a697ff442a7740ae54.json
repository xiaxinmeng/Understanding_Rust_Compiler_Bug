{"sha": "3cf1275ecced3ef088e030a697ff442a7740ae54", "node_id": "C_kwDOAAsO6NoAKDNjZjEyNzVlY2NlZDNlZjA4OGUwMzBhNjk3ZmY0NDJhNzc0MGFlNTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-17T02:32:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-17T02:32:14Z"}, "message": "Auto merge of #98143 - cuviper:futex-rwlock-inline, r=thomcc\n\nAdd `#[inline]` to small fns of futex `RwLock`\n\nThe important methods like `read` and `write` were already inlined,\nwhich can propagate all the way to inlining in user code, but these\nsmall state functions were left behind as normal calls. They should\nalmost always be inlined as well, as they're just a few instructions.", "tree": {"sha": "1587dac277bc46027c7881c85dcc4078009ccdb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1587dac277bc46027c7881c85dcc4078009ccdb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cf1275ecced3ef088e030a697ff442a7740ae54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cf1275ecced3ef088e030a697ff442a7740ae54", "html_url": "https://github.com/rust-lang/rust/commit/3cf1275ecced3ef088e030a697ff442a7740ae54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cf1275ecced3ef088e030a697ff442a7740ae54/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "349bda2051e94b7aefb33d6541f48f561bf06dbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/349bda2051e94b7aefb33d6541f48f561bf06dbc", "html_url": "https://github.com/rust-lang/rust/commit/349bda2051e94b7aefb33d6541f48f561bf06dbc"}, {"sha": "78577096f66acc3fe79c89c269361952b7dc0242", "url": "https://api.github.com/repos/rust-lang/rust/commits/78577096f66acc3fe79c89c269361952b7dc0242", "html_url": "https://github.com/rust-lang/rust/commit/78577096f66acc3fe79c89c269361952b7dc0242"}], "stats": {"total": 9, "additions": 9, "deletions": 0}, "files": [{"sha": "b3bbbf743f84c8ac63302b7a7d63cfae43b3bf4c", "filename": "library/std/src/sys/unix/locks/futex_rwlock.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3cf1275ecced3ef088e030a697ff442a7740ae54/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cf1275ecced3ef088e030a697ff442a7740ae54/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs?ref=3cf1275ecced3ef088e030a697ff442a7740ae54", "patch": "@@ -27,22 +27,27 @@ const MAX_READERS: u32 = MASK - 1;\n const READERS_WAITING: u32 = 1 << 30;\n const WRITERS_WAITING: u32 = 1 << 31;\n \n+#[inline]\n fn is_unlocked(state: u32) -> bool {\n     state & MASK == 0\n }\n \n+#[inline]\n fn is_write_locked(state: u32) -> bool {\n     state & MASK == WRITE_LOCKED\n }\n \n+#[inline]\n fn has_readers_waiting(state: u32) -> bool {\n     state & READERS_WAITING != 0\n }\n \n+#[inline]\n fn has_writers_waiting(state: u32) -> bool {\n     state & WRITERS_WAITING != 0\n }\n \n+#[inline]\n fn is_read_lockable(state: u32) -> bool {\n     // This also returns false if the counter could overflow if we tried to read lock it.\n     //\n@@ -53,6 +58,7 @@ fn is_read_lockable(state: u32) -> bool {\n     state & MASK < MAX_READERS && !has_readers_waiting(state) && !has_writers_waiting(state)\n }\n \n+#[inline]\n fn has_reached_max_readers(state: u32) -> bool {\n     state & MASK == MAX_READERS\n }\n@@ -287,6 +293,7 @@ impl RwLock {\n     }\n \n     /// Spin for a while, but stop directly at the given condition.\n+    #[inline]\n     fn spin_until(&self, f: impl Fn(u32) -> bool) -> u32 {\n         let mut spin = 100; // Chosen by fair dice roll.\n         loop {\n@@ -299,11 +306,13 @@ impl RwLock {\n         }\n     }\n \n+    #[inline]\n     fn spin_write(&self) -> u32 {\n         // Stop spinning when it's unlocked or when there's waiting writers, to keep things somewhat fair.\n         self.spin_until(|state| is_unlocked(state) || has_writers_waiting(state))\n     }\n \n+    #[inline]\n     fn spin_read(&self) -> u32 {\n         // Stop spinning when it's unlocked or read locked, or when there's waiting threads.\n         self.spin_until(|state| {"}]}