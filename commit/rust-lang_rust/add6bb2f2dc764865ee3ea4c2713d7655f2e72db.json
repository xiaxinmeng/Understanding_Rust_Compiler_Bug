{"sha": "add6bb2f2dc764865ee3ea4c2713d7655f2e72db", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkZDZiYjJmMmRjNzY0ODY1ZWUzZWE0YzI3MTNkNzY1NWYyZTcyZGI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-12-05T00:25:29Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-12-29T12:55:24Z"}, "message": "Collect tcx arenas into a single struct.\n\nThis allows expanding how many arenas exist without users having to\ncare, since they are all created with CtxtArena::new().", "tree": {"sha": "eacd49540bcfc88106da88dac64ac63588a2f04a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eacd49540bcfc88106da88dac64ac63588a2f04a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/add6bb2f2dc764865ee3ea4c2713d7655f2e72db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/add6bb2f2dc764865ee3ea4c2713d7655f2e72db", "html_url": "https://github.com/rust-lang/rust/commit/add6bb2f2dc764865ee3ea4c2713d7655f2e72db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/add6bb2f2dc764865ee3ea4c2713d7655f2e72db/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567", "html_url": "https://github.com/rust-lang/rust/commit/ce3c9491156f5f475bcfcfc1ec2e2352fa4a6567"}], "stats": {"total": 102, "additions": 42, "deletions": 60}, "files": [{"sha": "65b849c334a74f77e36ec2b9bff557e83f04eb69", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/add6bb2f2dc764865ee3ea4c2713d7655f2e72db/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/add6bb2f2dc764865ee3ea4c2713d7655f2e72db/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=add6bb2f2dc764865ee3ea4c2713d7655f2e72db", "patch": "@@ -604,14 +604,29 @@ pub struct TransmuteRestriction<'tcx> {\n     pub id: ast::NodeId,\n }\n \n+/// Internal storage\n+pub struct CtxtArenas<'tcx> {\n+    type_: TypedArena<TyS<'tcx>>,\n+    substs: TypedArena<Substs<'tcx>>,\n+    bare_fn: TypedArena<BareFnTy<'tcx>>,\n+}\n+\n+impl<'tcx> CtxtArenas<'tcx> {\n+    pub fn new() -> CtxtArenas<'tcx> {\n+        CtxtArenas {\n+            type_: TypedArena::new(),\n+            substs: TypedArena::new(),\n+            bare_fn: TypedArena::new(),\n+        }\n+    }\n+}\n+\n /// The data structure to keep track of all the information that typechecker\n /// generates so that so that it can be reused and doesn't have to be redone\n /// later on.\n pub struct ctxt<'tcx> {\n-    /// The arena that types are allocated from.\n-    type_arena: &'tcx TypedArena<TyS<'tcx>>,\n-    substs_arena: &'tcx TypedArena<Substs<'tcx>>,\n-    bare_fn_arena: &'tcx TypedArena<BareFnTy<'tcx>>,\n+    /// The arenas that types etc are allocated from.\n+    arenas: &'tcx CtxtArenas<'tcx>,\n \n     /// Specifically use a speedy hash algorithm for this hash map, it's used\n     /// quite often.\n@@ -2056,9 +2071,7 @@ impl UnboxedClosureKind {\n }\n \n pub fn mk_ctxt<'tcx>(s: Session,\n-                     type_arena: &'tcx TypedArena<TyS<'tcx>>,\n-                     substs_arena: &'tcx TypedArena<Substs<'tcx>>,\n-                     bare_fn_arena: &'tcx TypedArena<BareFnTy<'tcx>>,\n+                     arenas: &'tcx CtxtArenas<'tcx>,\n                      dm: DefMap,\n                      named_region_map: resolve_lifetime::NamedRegionMap,\n                      map: ast_map::Map<'tcx>,\n@@ -2068,9 +2081,7 @@ pub fn mk_ctxt<'tcx>(s: Session,\n                      lang_items: middle::lang_items::LanguageItems,\n                      stability: stability::Index) -> ctxt<'tcx> {\n     ctxt {\n-        type_arena: type_arena,\n-        substs_arena: substs_arena,\n-        bare_fn_arena: bare_fn_arena,\n+        arenas: arenas,\n         interner: RefCell::new(FnvHashMap::new()),\n         substs_interner: RefCell::new(FnvHashMap::new()),\n         bare_fn_interner: RefCell::new(FnvHashMap::new()),\n@@ -2139,7 +2150,7 @@ impl<'tcx> ctxt<'tcx> {\n             return *substs;\n         }\n \n-        let substs = self.substs_arena.alloc(substs);\n+        let substs = self.arenas.substs.alloc(substs);\n         self.substs_interner.borrow_mut().insert(substs, substs);\n         substs\n     }\n@@ -2149,7 +2160,7 @@ impl<'tcx> ctxt<'tcx> {\n             return *bare_fn;\n         }\n \n-        let bare_fn = self.bare_fn_arena.alloc(bare_fn);\n+        let bare_fn = self.arenas.bare_fn.alloc(bare_fn);\n         self.bare_fn_interner.borrow_mut().insert(bare_fn, bare_fn);\n         bare_fn\n     }\n@@ -2176,7 +2187,7 @@ pub fn mk_t<'tcx>(cx: &ctxt<'tcx>, st: sty<'tcx>) -> Ty<'tcx> {\n \n     let flags = FlagComputation::for_sty(&st);\n \n-    let ty = cx.type_arena.alloc(TyS {\n+    let ty = cx.arenas.type_.alloc(TyS {\n         sty: st,\n         flags: flags.flags,\n         region_depth: flags.depth,"}, {"sha": "db67b7b4fe8ae3cbd66cc07729551c10ee739484", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/add6bb2f2dc764865ee3ea4c2713d7655f2e72db/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/add6bb2f2dc764865ee3ea4c2713d7655f2e72db/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=add6bb2f2dc764865ee3ea4c2713d7655f2e72db", "patch": "@@ -12,7 +12,7 @@ use rustc::session::Session;\n use rustc::session::config::{mod, Input, OutputFilenames};\n use rustc::lint;\n use rustc::metadata::creader;\n-use rustc::middle::{stability, ty, reachable, subst};\n+use rustc::middle::{stability, ty, reachable};\n use rustc::middle::dependency_format;\n use rustc::middle;\n use rustc::plugin::load::Plugins;\n@@ -32,7 +32,7 @@ use serialize::{json, Encodable};\n use std::io;\n use std::io::fs;\n use std::os;\n-use arena::TypedArena;\n+use save;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::attr;\n@@ -79,12 +79,8 @@ pub fn compile_input(sess: Session,\n \n         if stop_after_phase_2(&sess) { return; }\n \n-        let type_arena = TypedArena::new();\n-        let substs_arena = TypedArena::new();\n-        let bare_fn_arena = TypedArena::new();\n-        let analysis = phase_3_run_analysis_passes(sess, ast_map,\n-                                                   &type_arena, &substs_arena, &bare_fn_arena,\n-                                                   id);\n+        let arenas = ty::CtxtArenas::new();\n+        let analysis = phase_3_run_analysis_passes(sess, ast_map, &arenas, id);\n         phase_save_analysis(&analysis.ty_cx.sess, analysis.ty_cx.map.krate(), &analysis, outdir);\n \n         if log_enabled!(::log::INFO) {\n@@ -346,9 +342,7 @@ pub fn assign_node_ids_and_map<'ast>(sess: &Session,\n /// structures carrying the results of the analysis.\n pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n                                          ast_map: ast_map::Map<'tcx>,\n-                                         type_arena: &'tcx TypedArena<ty::TyS<'tcx>>,\n-                                         substs_arena: &'tcx TypedArena<subst::Substs<'tcx>>,\n-                                         bare_fn_arena: &'tcx TypedArena<ty::BareFnTy<'tcx>>,\n+                                         arenas: &'tcx ty::CtxtArenas<'tcx>,\n                                          name: String) -> ty::CrateAnalysis<'tcx> {\n     let time_passes = sess.time_passes();\n     let krate = ast_map.krate();\n@@ -408,9 +402,7 @@ pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n          middle::check_static_recursion::check_crate(&sess, krate, &def_map, &ast_map));\n \n     let ty_cx = ty::mk_ctxt(sess,\n-                            type_arena,\n-                            substs_arena,\n-                            bare_fn_arena,\n+                            arenas,\n                             def_map,\n                             named_region_map,\n                             ast_map,"}, {"sha": "cf99d409ceb386928a00fd850772b79ea175fad1", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/add6bb2f2dc764865ee3ea4c2713d7655f2e72db/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/add6bb2f2dc764865ee3ea4c2713d7655f2e72db/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=add6bb2f2dc764865ee3ea4c2713d7655f2e72db", "patch": "@@ -19,7 +19,7 @@ use rustc_trans::back::link;\n \n use driver;\n \n-use rustc::middle::{ty, subst};\n+use rustc::middle::ty;\n use rustc::middle::cfg;\n use rustc::middle::cfg::graphviz::LabelledCFG;\n use rustc::session::Session;\n@@ -40,7 +40,6 @@ use graphviz as dot;\n use std::io::{mod, MemReader};\n use std::option;\n use std::str::FromStr;\n-use arena::TypedArena;\n \n #[deriving(Copy, PartialEq, Show)]\n pub enum PpSourceMode {\n@@ -112,9 +111,7 @@ impl PpSourceMode {\n     fn call_with_pp_support<'tcx, A, B, F>(&self,\n                                            sess: Session,\n                                            ast_map: Option<ast_map::Map<'tcx>>,\n-                                           type_arena: &'tcx TypedArena<ty::TyS<'tcx>>,\n-                                           substs_arena: &'tcx TypedArena<subst::Substs<'tcx>>,\n-                                           bare_fn_arena: &'tcx TypedArena<ty::BareFnTy<'tcx>>,\n+                                           arenas: &'tcx ty::CtxtArenas<'tcx>,\n                                            id: String,\n                                            payload: B,\n                                            f: F) -> A where\n@@ -136,10 +133,7 @@ impl PpSourceMode {\n             }\n             PpmTyped => {\n                 let ast_map = ast_map.expect(\"--pretty=typed missing ast_map\");\n-                let analysis = driver::phase_3_run_analysis_passes(sess, ast_map,\n-                                                                   type_arena, substs_arena,\n-                                                                   bare_fn_arena,\n-                                                                   id);\n+                let analysis = driver::phase_3_run_analysis_passes(sess, ast_map, arenas, id);\n                 let annotation = TypedAnnotation { analysis: analysis };\n                 f(&annotation, payload)\n             }\n@@ -514,9 +508,7 @@ pub fn pretty_print_input(sess: Session,\n     };\n \n     let mut forest = ast_map::Forest::new(krate);\n-    let type_arena = TypedArena::new();\n-    let substs_arena = TypedArena::new();\n-    let bare_fn_arena = TypedArena::new();\n+    let arenas = ty::CtxtArenas::new();\n \n     let (krate, ast_map) = if compute_ast_map {\n         let map = driver::assign_node_ids_and_map(&sess, &mut forest);\n@@ -545,8 +537,7 @@ pub fn pretty_print_input(sess: Session,\n     match (ppm, opt_uii) {\n         (PpmSource(s), None) =>\n             s.call_with_pp_support(\n-                sess, ast_map, &type_arena, &substs_arena, &bare_fn_arena,\n-                id, out, |annotation, out| {\n+                sess, ast_map, &arenas, id, out, |annotation, out| {\n                     debug!(\"pretty printing source code {}\", s);\n                     let sess = annotation.sess();\n                     pprust::print_crate(sess.codemap(),\n@@ -561,8 +552,7 @@ pub fn pretty_print_input(sess: Session,\n \n         (PpmSource(s), Some(uii)) =>\n             s.call_with_pp_support(\n-                sess, ast_map, &type_arena, &substs_arena, &bare_fn_arena,\n-                id, (out,uii), |annotation, (out,uii)| {\n+                sess, ast_map, &arenas, id, (out,uii), |annotation, (out,uii)| {\n                     debug!(\"pretty printing source code {}\", s);\n                     let sess = annotation.sess();\n                     let ast_map = annotation.ast_map()\n@@ -604,10 +594,7 @@ pub fn pretty_print_input(sess: Session,\n             match code {\n                 Some(code) => {\n                     let variants = gather_flowgraph_variants(&sess);\n-                    let analysis = driver::phase_3_run_analysis_passes(sess, ast_map,\n-                                                                       &type_arena, &substs_arena,\n-                                                                       &bare_fn_arena,\n-                                                                       id);\n+                    let analysis = driver::phase_3_run_analysis_passes(sess, ast_map, &arenas, id);\n                     print_flowgraph(variants, analysis, code, out)\n                 }\n                 None => {"}, {"sha": "7a5b460dd8790a1413aaeb46451824d706370943", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/add6bb2f2dc764865ee3ea4c2713d7655f2e72db/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/add6bb2f2dc764865ee3ea4c2713d7655f2e72db/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=add6bb2f2dc764865ee3ea4c2713d7655f2e72db", "patch": "@@ -127,13 +127,9 @@ fn test_env<F>(source_string: &str,\n     let named_region_map = resolve_lifetime::krate(&sess, krate, &def_map);\n     let region_map = region::resolve_crate(&sess, krate);\n     let stability_index = stability::Index::build(krate);\n-    let type_arena = TypedArena::new();\n-    let substs_arena = TypedArena::new();\n-    let bare_fn_arena = TypedArena::new();\n+    let arenas = ty::CtxtArenas::new();\n     let tcx = ty::mk_ctxt(sess,\n-                          &type_arena,\n-                          &substs_arena,\n-                          &bare_fn_arena,\n+                          &arenas,\n                           def_map,\n                           named_region_map,\n                           ast_map,"}, {"sha": "cf249474428888befa2e1d1838b5c27fffa2fdc7", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/add6bb2f2dc764865ee3ea4c2713d7655f2e72db/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/add6bb2f2dc764865ee3ea4c2713d7655f2e72db/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=add6bb2f2dc764865ee3ea4c2713d7655f2e72db", "patch": "@@ -19,7 +19,6 @@ use syntax::{ast, ast_map, codemap, diagnostic};\n \n use std::cell::RefCell;\n use std::collections::{HashMap, HashSet};\n-use arena::TypedArena;\n \n use visit_ast::RustdocVisitor;\n use clean;\n@@ -121,14 +120,11 @@ pub fn run_core(libs: Vec<Path>, cfgs: Vec<String>, externs: Externs,\n     let mut forest = ast_map::Forest::new(krate);\n     let ast_map = driver::assign_node_ids_and_map(&sess, &mut forest);\n \n-    let type_arena = TypedArena::new();\n-    let substs_arena = TypedArena::new();\n-    let bare_fn_arena = TypedArena::new();\n+    let arenas = ty::CtxtArenas::new();\n     let ty::CrateAnalysis {\n+    let driver::CrateAnalysis {\n         exported_items, public_items, ty_cx, ..\n-    } = driver::phase_3_run_analysis_passes(sess, ast_map,\n-                                            &type_arena, &substs_arena, &bare_fn_arena,\n-                                            name);\n+    } = driver::phase_3_run_analysis_passes(sess, ast_map, &arenas, name);\n \n     let ctxt = DocContext {\n         krate: ty_cx.map.krate(),"}]}