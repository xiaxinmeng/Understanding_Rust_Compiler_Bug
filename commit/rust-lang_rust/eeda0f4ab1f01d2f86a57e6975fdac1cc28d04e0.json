{"sha": "eeda0f4ab1f01d2f86a57e6975fdac1cc28d04e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlZGEwZjRhYjFmMDFkMmY4NmE1N2U2OTc1ZmRhYzFjYzI4ZDA0ZTA=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-08T13:52:54Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-08T13:52:54Z"}, "message": "Don't unbox types in ty::is_binopable, do it on typeck side instead\n\nCloses issue #631\n\nRemoves ty::strip_boxes entirely, since unboxing is now more complicated\nanyway.", "tree": {"sha": "4fd18ee06e3415df6b2b4c77aab36f7bb5824743", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fd18ee06e3415df6b2b4c77aab36f7bb5824743"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eeda0f4ab1f01d2f86a57e6975fdac1cc28d04e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eeda0f4ab1f01d2f86a57e6975fdac1cc28d04e0", "html_url": "https://github.com/rust-lang/rust/commit/eeda0f4ab1f01d2f86a57e6975fdac1cc28d04e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eeda0f4ab1f01d2f86a57e6975fdac1cc28d04e0/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "381505f947e69e09efe449b96496ca7d050b74be", "url": "https://api.github.com/repos/rust-lang/rust/commits/381505f947e69e09efe449b96496ca7d050b74be", "html_url": "https://github.com/rust-lang/rust/commit/381505f947e69e09efe449b96496ca7d050b74be"}], "stats": {"total": 21, "additions": 4, "deletions": 17}, "files": [{"sha": "1cd8a8756e9a95590c226140e7493d5b2a5f121b", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eeda0f4ab1f01d2f86a57e6975fdac1cc28d04e0/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeda0f4ab1f01d2f86a57e6975fdac1cc28d04e0/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=eeda0f4ab1f01d2f86a57e6975fdac1cc28d04e0", "patch": "@@ -2897,20 +2897,6 @@ fn ret_ty_of_fn(ctxt cx, ast::node_id id) -> t {\n     ret ret_ty_of_fn_ty(cx, node_id_to_type(cx, id));\n }\n \n-\n-// NB: This function requires that the given type has no variables. So, inside\n-// typeck, you should use typeck::do_autoderef() instead.\n-fn strip_boxes(&ctxt cx, &ty::t t) -> ty::t {\n-    auto t1 = t;\n-    while (true) {\n-        alt (struct(cx, t1)) {\n-            case (ty::ty_box(?inner)) { t1 = inner.ty; }\n-            case (_) { ret t1; }\n-        }\n-    }\n-    fail;\n-}\n-\n fn is_binopable(&ctxt cx, t ty, ast::binop op) -> bool {\n \n     const int tycat_other = 0;\n@@ -2955,7 +2941,7 @@ fn is_binopable(&ctxt cx, t ty, ast::binop op) -> bool {\n     }\n \n     fn tycat(&ctxt cx, t ty) -> int {\n-        alt (struct(cx, strip_boxes(cx, ty))) {\n+        alt (struct(cx, ty)) {\n             case (ty_bool) { tycat_bool }\n             case (ty_int) { tycat_int }\n             case (ty_uint) { tycat_int }"}, {"sha": "f1dc08001cf8f49c5d755dce85c660365ef08ea8", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eeda0f4ab1f01d2f86a57e6975fdac1cc28d04e0/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeda0f4ab1f01d2f86a57e6975fdac1cc28d04e0/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=eeda0f4ab1f01d2f86a57e6975fdac1cc28d04e0", "patch": "@@ -1620,7 +1620,8 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n             auto rhs_t = expr_ty(fcx.ccx.tcx, rhs);\n \n             demand::autoderef(fcx, rhs.span, lhs_t, rhs_t, AUTODEREF_OK);\n-            check_binop_type_compat(fcx, expr.span, lhs_t, binop);\n+            auto deref_t = do_autoderef(fcx, expr.span, lhs_t);\n+            check_binop_type_compat(fcx, expr.span, deref_t, binop);\n \n             auto t = alt (binop) {\n                 case (ast::eq) { ty::mk_bool(fcx.ccx.tcx) }\n@@ -1629,7 +1630,7 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n                 case (ast::ne) { ty::mk_bool(fcx.ccx.tcx) }\n                 case (ast::ge) { ty::mk_bool(fcx.ccx.tcx) }\n                 case (ast::gt) { ty::mk_bool(fcx.ccx.tcx) }\n-                case (_) { do_autoderef(fcx, expr.span, lhs_t) }\n+                case (_) { deref_t }\n             };\n             write::ty_only_fixup(fcx, id, t);\n         }"}]}