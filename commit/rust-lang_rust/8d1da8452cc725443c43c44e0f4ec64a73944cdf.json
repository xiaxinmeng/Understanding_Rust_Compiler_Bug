{"sha": "8d1da8452cc725443c43c44e0f4ec64a73944cdf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkMWRhODQ1MmNjNzI1NDQzYzQzYzQ0ZTBmNGVjNjRhNzM5NDRjZGY=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2016-10-27T04:03:18Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2016-10-27T05:42:20Z"}, "message": "one-time diagnostics are only one-time for humans, not JSON-eating tools\n\nJonathan D. Turner pointed out that we don't want to dedup in JSON\nmode. Since the compile-test runner uses JSON output, we regrettably\nneed to revert the edits to existing tests; one imagines that testing\nfor one-time diagnosticity for humans will have to be added as a UI\ntest.\n\nThis remains in the matter of #24690.", "tree": {"sha": "347f6476a0142dc0b8a87fca88b1b1a44cf0636e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/347f6476a0142dc0b8a87fca88b1b1a44cf0636e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d1da8452cc725443c43c44e0f4ec64a73944cdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d1da8452cc725443c43c44e0f4ec64a73944cdf", "html_url": "https://github.com/rust-lang/rust/commit/8d1da8452cc725443c43c44e0f4ec64a73944cdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d1da8452cc725443c43c44e0f4ec64a73944cdf/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95805ee6275b4fe12cdb8845e699e7a6aa6b26eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/95805ee6275b4fe12cdb8845e699e7a6aa6b26eb", "html_url": "https://github.com/rust-lang/rust/commit/95805ee6275b4fe12cdb8845e699e7a6aa6b26eb"}], "stats": {"total": 36, "additions": 30, "deletions": 6}, "files": [{"sha": "154fe9af79a9a5e7e2acb303a3ec0a5811194179", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8d1da8452cc725443c43c44e0f4ec64a73944cdf/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1da8452cc725443c43c44e0f4ec64a73944cdf/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=8d1da8452cc725443c43c44e0f4ec64a73944cdf", "patch": "@@ -294,7 +294,8 @@ impl Session {\n     }\n \n     /// Analogous to calling `.span_note` on the given DiagnosticBuilder, but\n-    /// deduplicates on span and message for this `Session`.\n+    /// deduplicates on span and message for this `Session` if we're not\n+    /// outputting in JSON mode.\n     //\n     // FIXME: if the need arises for one-time diagnostics other than\n     // `span_note`, we almost certainly want to generalize this\n@@ -303,10 +304,19 @@ impl Session {\n     pub fn diag_span_note_once<'a, 'b>(&'a self,\n                                        diag_builder: &'b mut DiagnosticBuilder<'a>,\n                                        span: Span, message: &str) {\n-        let span_message = (span, message.to_owned());\n-        let fresh = self.one_time_diagnostics.borrow_mut().insert(span_message);\n-        if fresh {\n-            diag_builder.span_note(span, &message);\n+        match self.opts.error_format {\n+            // when outputting JSON for tool consumption, the tool might want\n+            // the duplicates\n+            config::ErrorOutputType::Json => {\n+                diag_builder.span_note(span, &message);\n+            },\n+            _ => {\n+                let span_message = (span, message.to_owned());\n+                let fresh = self.one_time_diagnostics.borrow_mut().insert(span_message);\n+                if fresh {\n+                    diag_builder.span_note(span, &message);\n+                }\n+            }\n         }\n     }\n "}, {"sha": "393e46ab5394ca7d1a61bd239bd112722407b2a5", "filename": "src/test/compile-fail/lint-group-style.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d1da8452cc725443c43c44e0f4ec64a73944cdf/src%2Ftest%2Fcompile-fail%2Flint-group-style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1da8452cc725443c43c44e0f4ec64a73944cdf/src%2Ftest%2Fcompile-fail%2Flint-group-style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-group-style.rs?ref=8d1da8452cc725443c43c44e0f4ec64a73944cdf", "patch": "@@ -20,6 +20,7 @@ mod test {\n \n     #[forbid(bad_style)]\n     //~^ NOTE lint level defined here\n+    //~^^ NOTE lint level defined here\n     mod bad {\n         fn CamelCase() {} //~ ERROR function `CamelCase` should have a snake case name\n \n@@ -29,6 +30,7 @@ mod test {\n     mod warn {\n         #![warn(bad_style)]\n         //~^ NOTE lint level defined here\n+        //~| NOTE lint level defined here\n \n         fn CamelCase() {} //~ WARN function `CamelCase` should have a snake case name\n "}, {"sha": "94e189aa47f6fba9e95293080efb906a7474ae32", "filename": "src/test/compile-fail/lint-unconditional-recursion.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8d1da8452cc725443c43c44e0f4ec64a73944cdf/src%2Ftest%2Fcompile-fail%2Flint-unconditional-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1da8452cc725443c43c44e0f4ec64a73944cdf/src%2Ftest%2Fcompile-fail%2Flint-unconditional-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unconditional-recursion.rs?ref=8d1da8452cc725443c43c44e0f4ec64a73944cdf", "patch": "@@ -10,7 +10,19 @@\n \n #![deny(unconditional_recursion)]\n //~^ NOTE lint level defined here\n-\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n #![allow(dead_code)]\n fn foo() { //~ ERROR function cannot return without recurring\n     foo(); //~ NOTE recursive call site"}]}