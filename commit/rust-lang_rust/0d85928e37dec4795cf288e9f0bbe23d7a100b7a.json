{"sha": "0d85928e37dec4795cf288e9f0bbe23d7a100b7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkODU5MjhlMzdkZWM0Nzk1Y2YyODhlOWYwYmJlMjNkN2ExMDBiN2E=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-08-12T17:29:19Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-08-15T02:06:17Z"}, "message": "Switch borrowck::gather_loans to <V:Visitor> visit API.\n\nPlacate make tidy.  Remove unnecessary references to oldvisit.", "tree": {"sha": "c317c9a9babd41a9d7e6238863422dad6b8e66ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c317c9a9babd41a9d7e6238863422dad6b8e66ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d85928e37dec4795cf288e9f0bbe23d7a100b7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d85928e37dec4795cf288e9f0bbe23d7a100b7a", "html_url": "https://github.com/rust-lang/rust/commit/0d85928e37dec4795cf288e9f0bbe23d7a100b7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d85928e37dec4795cf288e9f0bbe23d7a100b7a/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5a5432f98480f36db92e2dd0e47b284e97788ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5a5432f98480f36db92e2dd0e47b284e97788ae", "html_url": "https://github.com/rust-lang/rust/commit/a5a5432f98480f36db92e2dd0e47b284e97788ae"}], "stats": {"total": 110, "additions": 65, "deletions": 45}, "files": [{"sha": "6d2a4fcc9f31a8498afdc4ca9dd59ad1cdf11b87", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 65, "deletions": 45, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/0d85928e37dec4795cf288e9f0bbe23d7a100b7a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d85928e37dec4795cf288e9f0bbe23d7a100b7a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=0d85928e37dec4795cf288e9f0bbe23d7a100b7a", "patch": "@@ -31,7 +31,9 @@ use syntax::ast;\n use syntax::ast_util::id_range;\n use syntax::codemap::span;\n use syntax::print::pprust;\n-use syntax::oldvisit;\n+use syntax::visit;\n+use syntax::visit::Visitor;\n+use syntax::ast::{expr, fn_kind, fn_decl, Block, NodeId, stmt, pat, Local};\n \n mod lifetime;\n mod restrictions;\n@@ -72,6 +74,30 @@ struct GatherLoanCtxt {\n     repeating_ids: ~[ast::NodeId]\n }\n \n+struct GatherLoanVisitor;\n+\n+impl visit::Visitor<@mut GatherLoanCtxt> for GatherLoanVisitor {\n+    fn visit_expr(&mut self, ex:@expr, e:@mut GatherLoanCtxt) {\n+        gather_loans_in_expr(self, ex, e);\n+    }\n+    fn visit_block(&mut self, b:&Block, e:@mut GatherLoanCtxt) {\n+        gather_loans_in_block(self, b, e);\n+    }\n+    fn visit_fn(&mut self, fk:&fn_kind, fd:&fn_decl, b:&Block,\n+                s:span, n:NodeId, e:@mut GatherLoanCtxt) {\n+        gather_loans_in_fn(self, fk, fd, b, s, n, e);\n+    }\n+    fn visit_stmt(&mut self, s:@stmt, e:@mut GatherLoanCtxt) {\n+        add_stmt_to_map(self, s, e);\n+    }\n+    fn visit_pat(&mut self, p:@pat, e:@mut GatherLoanCtxt) {\n+        add_pat_to_id_range(self, p, e);\n+    }\n+    fn visit_local(&mut self, l:@Local, e:@mut GatherLoanCtxt) {\n+        gather_loans_in_local(self, l, e);\n+    }\n+}\n+\n pub fn gather_loans(bccx: @BorrowckCtxt,\n                     decl: &ast::fn_decl,\n                     body: &ast::Block)\n@@ -85,64 +111,57 @@ pub fn gather_loans(bccx: @BorrowckCtxt,\n         move_data: @mut MoveData::new()\n     };\n     glcx.gather_fn_arg_patterns(decl, body);\n-    let v = oldvisit::mk_vt(@oldvisit::Visitor {\n-        visit_expr: gather_loans_in_expr,\n-        visit_block: gather_loans_in_block,\n-        visit_fn: gather_loans_in_fn,\n-        visit_stmt: add_stmt_to_map,\n-        visit_pat: add_pat_to_id_range,\n-        visit_local: gather_loans_in_local,\n-        .. *oldvisit::default_visitor()\n-    });\n-    (v.visit_block)(body, (glcx, v));\n+\n+    let mut v = GatherLoanVisitor;\n+    v.visit_block(body, glcx);\n     return (glcx.id_range, glcx.all_loans, glcx.move_data);\n }\n \n-fn add_pat_to_id_range(p: @ast::pat,\n-                       (this, v): (@mut GatherLoanCtxt,\n-                                   oldvisit::vt<@mut GatherLoanCtxt>)) {\n+fn add_pat_to_id_range(v: &mut GatherLoanVisitor,\n+                       p: @ast::pat,\n+                       this: @mut GatherLoanCtxt) {\n     // NB: This visitor function just adds the pat ids into the id\n     // range. We gather loans that occur in patterns using the\n     // `gather_pat()` method below. Eventually these two should be\n     // brought together.\n     this.id_range.add(p.id);\n-    oldvisit::visit_pat(p, (this, v));\n+    visit::walk_pat(v, p, this);\n }\n \n-fn gather_loans_in_fn(fk: &oldvisit::fn_kind,\n+fn gather_loans_in_fn(v: &mut GatherLoanVisitor,\n+                      fk: &fn_kind,\n                       decl: &ast::fn_decl,\n                       body: &ast::Block,\n                       sp: span,\n                       id: ast::NodeId,\n-                      (this, v): (@mut GatherLoanCtxt,\n-                                  oldvisit::vt<@mut GatherLoanCtxt>)) {\n+                      this: @mut GatherLoanCtxt) {\n     match fk {\n         // Do not visit items here, the outer loop in borrowck/mod\n         // will visit them for us in turn.\n-        &oldvisit::fk_item_fn(*) | &oldvisit::fk_method(*) => {\n+        &visit::fk_item_fn(*) | &visit::fk_method(*) => {\n             return;\n         }\n \n         // Visit closures as part of the containing item.\n-        &oldvisit::fk_anon(*) | &oldvisit::fk_fn_block(*) => {\n+        &visit::fk_anon(*) | &visit::fk_fn_block(*) => {\n             this.push_repeating_id(body.id);\n-            oldvisit::visit_fn(fk, decl, body, sp, id, (this, v));\n+            visit::walk_fn(v, fk, decl, body, sp, id, this);\n             this.pop_repeating_id(body.id);\n             this.gather_fn_arg_patterns(decl, body);\n         }\n     }\n }\n \n-fn gather_loans_in_block(blk: &ast::Block,\n-                         (this, vt): (@mut GatherLoanCtxt,\n-                                      oldvisit::vt<@mut GatherLoanCtxt>)) {\n+fn gather_loans_in_block(v: &mut GatherLoanVisitor,\n+                         blk: &ast::Block,\n+                         this: @mut GatherLoanCtxt) {\n     this.id_range.add(blk.id);\n-    oldvisit::visit_block(blk, (this, vt));\n+    visit::walk_block(v, blk, this);\n }\n \n-fn gather_loans_in_local(local: @ast::Local,\n-                         (this, vt): (@mut GatherLoanCtxt,\n-                                      oldvisit::vt<@mut GatherLoanCtxt>)) {\n+fn gather_loans_in_local(v: &mut GatherLoanVisitor,\n+                         local: @ast::Local,\n+                         this: @mut GatherLoanCtxt) {\n     match local.init {\n         None => {\n             // Variable declarations without initializers are considered \"moves\":\n@@ -173,12 +192,13 @@ fn gather_loans_in_local(local: @ast::Local,\n         }\n     }\n \n-    oldvisit::visit_local(local, (this, vt));\n+    visit::walk_local(v, local, this);\n }\n \n-fn gather_loans_in_expr(ex: @ast::expr,\n-                        (this, vt): (@mut GatherLoanCtxt,\n-                                     oldvisit::vt<@mut GatherLoanCtxt>)) {\n+\n+fn gather_loans_in_expr(v: &mut GatherLoanVisitor,\n+                        ex: @ast::expr,\n+                        this: @mut GatherLoanCtxt) {\n     let bccx = this.bccx;\n     let tcx = bccx.tcx;\n \n@@ -218,7 +238,7 @@ fn gather_loans_in_expr(ex: @ast::expr,\n         // for the lifetime `scope_r` of the resulting ptr:\n         let scope_r = ty_region(tcx, ex.span, ty::expr_ty(tcx, ex));\n         this.guarantee_valid(ex.id, ex.span, base_cmt, mutbl, scope_r);\n-        oldvisit::visit_expr(ex, (this, vt));\n+        visit::walk_expr(v, ex, this);\n       }\n \n       ast::expr_assign(l, _) | ast::expr_assign_op(_, _, l, _) => {\n@@ -235,7 +255,7 @@ fn gather_loans_in_expr(ex: @ast::expr,\n                   // with moves etc, just ignore.\n               }\n           }\n-          oldvisit::visit_expr(ex, (this, vt));\n+          visit::walk_expr(v, ex, this);\n       }\n \n       ast::expr_match(ex_v, ref arms) => {\n@@ -245,7 +265,7 @@ fn gather_loans_in_expr(ex: @ast::expr,\n                 this.gather_pat(cmt, *pat, Some((arm.body.id, ex.id)));\n             }\n         }\n-        oldvisit::visit_expr(ex, (this, vt));\n+        visit::walk_expr(v, ex, this);\n       }\n \n       ast::expr_index(_, _, arg) |\n@@ -259,36 +279,36 @@ fn gather_loans_in_expr(ex: @ast::expr,\n           let scope_r = ty::re_scope(ex.id);\n           let arg_cmt = this.bccx.cat_expr(arg);\n           this.guarantee_valid(arg.id, arg.span, arg_cmt, m_imm, scope_r);\n-          oldvisit::visit_expr(ex, (this, vt));\n+          visit::walk_expr(v, ex, this);\n       }\n \n       // see explanation attached to the `root_ub` field:\n       ast::expr_while(cond, ref body) => {\n           // during the condition, can only root for the condition\n           this.push_repeating_id(cond.id);\n-          (vt.visit_expr)(cond, (this, vt));\n+          v.visit_expr(cond, this);\n           this.pop_repeating_id(cond.id);\n \n           // during body, can only root for the body\n           this.push_repeating_id(body.id);\n-          (vt.visit_block)(body, (this, vt));\n+          v.visit_block(body, this);\n           this.pop_repeating_id(body.id);\n       }\n \n       // see explanation attached to the `root_ub` field:\n       ast::expr_loop(ref body, _) => {\n           this.push_repeating_id(body.id);\n-          oldvisit::visit_expr(ex, (this, vt));\n+          visit::walk_expr(v, ex, this);\n           this.pop_repeating_id(body.id);\n       }\n \n       ast::expr_fn_block(*) => {\n           gather_moves::gather_captures(this.bccx, this.move_data, ex);\n-          oldvisit::visit_expr(ex, (this, vt));\n+          visit::walk_expr(v, ex, this);\n       }\n \n       _ => {\n-        oldvisit::visit_expr(ex, (this, vt));\n+          visit::walk_expr(v, ex, this);\n       }\n     }\n }\n@@ -770,14 +790,14 @@ impl GatherLoanCtxt {\n \n // Setting up info that preserve needs.\n // This is just the most convenient place to do it.\n-fn add_stmt_to_map(stmt: @ast::stmt,\n-                   (this, vt): (@mut GatherLoanCtxt,\n-                                oldvisit::vt<@mut GatherLoanCtxt>)) {\n+fn add_stmt_to_map(v: &mut GatherLoanVisitor,\n+                   stmt: @ast::stmt,\n+                   this: @mut GatherLoanCtxt) {\n     match stmt.node {\n         ast::stmt_expr(_, id) | ast::stmt_semi(_, id) => {\n             this.bccx.stmt_map.insert(id);\n         }\n         _ => ()\n     }\n-    oldvisit::visit_stmt(stmt, (this, vt));\n+    visit::walk_stmt(v, stmt, this);\n }"}]}