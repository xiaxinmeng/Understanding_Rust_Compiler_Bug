{"sha": "4a49912cfe155023b1ed3a8ff221e208c0794177", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhNDk5MTJjZmUxNTUwMjNiMWVkM2E4ZmYyMjFlMjA4YzA3OTQxNzc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-09T17:25:07Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-09T17:25:07Z"}, "message": "rollup merge of #19620: retep998/memorymap", "tree": {"sha": "68ad55c3f726053a558332517756ed3be5259860", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68ad55c3f726053a558332517756ed3be5259860"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a49912cfe155023b1ed3a8ff221e208c0794177", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a49912cfe155023b1ed3a8ff221e208c0794177", "html_url": "https://github.com/rust-lang/rust/commit/4a49912cfe155023b1ed3a8ff221e208c0794177", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a49912cfe155023b1ed3a8ff221e208c0794177/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2e9c99a66b2ef50180569b6123494c0181f4db1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2e9c99a66b2ef50180569b6123494c0181f4db1", "html_url": "https://github.com/rust-lang/rust/commit/a2e9c99a66b2ef50180569b6123494c0181f4db1"}, {"sha": "58f12743c2ae4e3045b07e8509c089ac97c21452", "url": "https://api.github.com/repos/rust-lang/rust/commits/58f12743c2ae4e3045b07e8509c089ac97c21452", "html_url": "https://github.com/rust-lang/rust/commit/58f12743c2ae4e3045b07e8509c089ac97c21452"}], "stats": {"total": 74, "additions": 35, "deletions": 39}, "files": [{"sha": "689ee9349e8750fe043a00e7b79c1706a0538b56", "filename": "src/libstd/os.rs", "status": "modified", "additions": 34, "deletions": 38, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/4a49912cfe155023b1ed3a8ff221e208c0794177/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a49912cfe155023b1ed3a8ff221e208c0794177/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=4a49912cfe155023b1ed3a8ff221e208c0794177", "patch": "@@ -160,7 +160,7 @@ pub fn getcwd() -> IoResult<Path> {\n }\n \n #[cfg(windows)]\n-pub mod windows {\n+pub mod windoze {\n     use libc::types::os::arch::extra::DWORD;\n     use libc;\n     use option::Option;\n@@ -386,7 +386,7 @@ pub fn getenv_as_bytes(n: &str) -> Option<Vec<u8>> {\n pub fn getenv(n: &str) -> Option<String> {\n     unsafe {\n         with_env_lock(|| {\n-            use os::windows::{fill_utf16_buf_and_decode};\n+            use os::windoze::{fill_utf16_buf_and_decode};\n             let mut n: Vec<u16> = n.utf16_units().collect();\n             n.push(0);\n             fill_utf16_buf_and_decode(|buf, sz| {\n@@ -715,7 +715,7 @@ pub fn self_exe_name() -> Option<Path> {\n     #[cfg(windows)]\n     fn load_self() -> Option<Vec<u8>> {\n         unsafe {\n-            use os::windows::fill_utf16_buf_and_decode;\n+            use os::windoze::fill_utf16_buf_and_decode;\n             fill_utf16_buf_and_decode(|buf, sz| {\n                 libc::GetModuleFileNameW(0u as libc::DWORD, buf, sz)\n             }).map(|s| s.into_string().into_bytes())\n@@ -1215,7 +1215,11 @@ pub enum MapOption {\n     /// Create a map for a specific address range. Corresponds to `MAP_FIXED` on\n     /// POSIX.\n     MapAddr(*const u8),\n+    /// Create a memory mapping for a file with a given HANDLE.\n+    #[cfg(windows)]\n+    MapFd(libc::HANDLE),\n     /// Create a memory mapping for a file with a given fd.\n+    #[cfg(not(windows))]\n     MapFd(c_int),\n     /// When using `MapFd`, the start of the map is `uint` bytes from the start\n     /// of the file.\n@@ -1413,7 +1417,7 @@ impl MemoryMap {\n         let mut readable = false;\n         let mut writable = false;\n         let mut executable = false;\n-        let mut fd: c_int = -1;\n+        let mut handle: HANDLE = libc::INVALID_HANDLE_VALUE;\n         let mut offset: uint = 0;\n         let len = round_up(min_len, page_size());\n \n@@ -1423,23 +1427,23 @@ impl MemoryMap {\n                 MapWritable => { writable = true; },\n                 MapExecutable => { executable = true; }\n                 MapAddr(addr_) => { lpAddress = addr_ as LPVOID; },\n-                MapFd(fd_) => { fd = fd_; },\n+                MapFd(handle_) => { handle = handle_; },\n                 MapOffset(offset_) => { offset = offset_; },\n                 MapNonStandardFlags(..) => {}\n             }\n         }\n \n         let flProtect = match (executable, readable, writable) {\n-            (false, false, false) if fd == -1 => libc::PAGE_NOACCESS,\n+            (false, false, false) if handle == libc::INVALID_HANDLE_VALUE => libc::PAGE_NOACCESS,\n             (false, true, false) => libc::PAGE_READONLY,\n             (false, true, true) => libc::PAGE_READWRITE,\n-            (true, false, false) if fd == -1 => libc::PAGE_EXECUTE,\n+            (true, false, false) if handle == libc::INVALID_HANDLE_VALUE => libc::PAGE_EXECUTE,\n             (true, true, false) => libc::PAGE_EXECUTE_READ,\n             (true, true, true) => libc::PAGE_EXECUTE_READWRITE,\n             _ => return Err(ErrUnsupProt)\n         };\n \n-        if fd == -1 {\n+        if handle == libc::INVALID_HANDLE_VALUE {\n             if offset != 0 {\n                 return Err(ErrUnsupOffset);\n             }\n@@ -1467,7 +1471,7 @@ impl MemoryMap {\n                                               // we should never get here.\n             };\n             unsafe {\n-                let hFile = libc::get_osfhandle(fd) as HANDLE;\n+                let hFile = handle;\n                 let mapping = libc::CreateFileMappingW(hFile,\n                                                        ptr::null_mut(),\n                                                        flProtect,\n@@ -1991,55 +1995,47 @@ mod tests {\n \n     #[test]\n     fn memory_map_file() {\n-        use result::Result::{Ok, Err};\n         use os::*;\n-        use libc::*;\n-        use io::fs;\n-\n-        #[cfg(unix)]\n-        fn lseek_(fd: c_int, size: uint) {\n-            unsafe {\n-                assert!(lseek(fd, size as off_t, SEEK_SET) == size as off_t);\n-            }\n+        use io::fs::{File, unlink};\n+        use io::SeekStyle::SeekSet;\n+        use io::FileMode::Open;\n+        use io::FileAccess::ReadWrite;\n+        use libc::HANDLE;\n+\n+        #[cfg(not(windows))]\n+        fn get_fd(file: &File) -> c_int {\n+            use os::unix::AsRawFd;\n+            file.as_raw_fd()\n         }\n+\n         #[cfg(windows)]\n-        fn lseek_(fd: c_int, size: uint) {\n-           unsafe {\n-               assert!(lseek(fd, size as c_long, SEEK_SET) == size as c_long);\n-           }\n+        fn get_fd(file: &File) -> HANDLE {\n+            use os::windows::AsRawHandle;\n+            file.as_raw_handle()\n         }\n \n         let mut path = tmpdir();\n         path.push(\"mmap_file.tmp\");\n         let size = MemoryMap::granularity() * 2;\n+        let mut file = File::open_mode(&path, Open, ReadWrite).unwrap();\n+        file.seek(size as i64, SeekSet);\n+        file.write_u8(0);\n \n-        let fd = unsafe {\n-            let fd = path.with_c_str(|path| {\n-                open(path, O_CREAT | O_RDWR | O_TRUNC, S_IRUSR | S_IWUSR)\n-            });\n-            lseek_(fd, size);\n-            \"x\".with_c_str(|x| assert!(write(fd, x as *const c_void, 1) == 1));\n-            fd\n-        };\n-        let chunk = match MemoryMap::new(size / 2, &[\n+        let chunk = MemoryMap::new(size / 2, &[\n             MapReadable,\n             MapWritable,\n-            MapFd(fd),\n+            MapFd(get_fd(&file)),\n             MapOffset(size / 2)\n-        ]) {\n-            Ok(chunk) => chunk,\n-            Err(msg) => panic!(\"{}\", msg)\n-        };\n+        ]).unwrap();\n         assert!(chunk.len > 0);\n \n         unsafe {\n             *chunk.data = 0xbe;\n             assert!(*chunk.data == 0xbe);\n-            close(fd);\n         }\n         drop(chunk);\n \n-        fs::unlink(&path).unwrap();\n+        unlink(&path).unwrap();\n     }\n \n     #[test]"}, {"sha": "05be8de0b56e2e81db34f2c2274f1c4eb99b9921", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a49912cfe155023b1ed3a8ff221e208c0794177/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a49912cfe155023b1ed3a8ff221e208c0794177/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=4a49912cfe155023b1ed3a8ff221e208c0794177", "patch": "@@ -15,7 +15,7 @@ use libc::{mod, c_int};\n \n use c_str::CString;\n use mem;\n-use os::windows::fill_utf16_buf_and_decode;\n+use os::windoze::fill_utf16_buf_and_decode;\n use path;\n use ptr;\n use str;"}]}