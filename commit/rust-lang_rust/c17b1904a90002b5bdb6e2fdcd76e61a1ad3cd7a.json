{"sha": "c17b1904a90002b5bdb6e2fdcd76e61a1ad3cd7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxN2IxOTA0YTkwMDAyYjViZGI2ZTJmZGNkNzZlNjFhMWFkM2NkN2E=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@fb.com", "date": "2021-08-20T23:42:45Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@fb.com", "date": "2021-08-21T00:10:41Z"}, "message": "Stop emitting the `dso_local` LLVM attribute for external symbols under the static relocation model on macOS.\n\nThis matches Clang's behavior:\n\nhttps://github.com/llvm/llvm-project/blob/973cb2c326be9f256da0897c4d2ef117dc22761d/clang/lib/CodeGen/CodeGenModule.cpp#L1038-L1040\n\nEven if `dso_local` were properly supported in this way on macOS, it seems\nincorrect to add this annotation as liberally as we did. The `dso_local`\nannotation is for symbols that ultimately end up in the same linkage unit, but\nwe were adding this annotation even for `static` values inside `extern` blocks\nmarked with `#[link(type=\"framework\")]`, which should be considered dynamically\nlinked.  Note that Clang likewise avoids emitting `dso_local` for `dllimport`\nsymbols:\n\nhttps://github.com/llvm/llvm-project/blob/973cb2c326be9f256da0897c4d2ef117dc22761d/clang/lib/CodeGen/CodeGenModule.cpp#L1005-L1007\n\nThis issue caused breakage in the `ring` crate, which links to a symbol defined\nin `Security.framework` that ultimately resolves to address `0x0`:\n\nhttps://github.com/briansmith/ring/blob/b94d61e044b42827fefd71d5f61e8c58a7659870/src/rand.rs#L390\n\nFor this symbol, the use of `dso_local` causes LLVM to emit a relocation of\ntype `X86_64_RELOC_SIGNED`, which is a 32-bit signed PC-relative offset. If the\nbinary is large enough, `0x0` might be out of range, and the link will fail.\nAvoiding `dso_local` causes LLVM to use the GOT instead, emitting a relocation\nof type `X86_64_RELOC_GOT_LOAD`, which will properly handle the large offset\nand cause the link to succeed.\n\nAs a side note, the static relocation model is effectively deprecated for\nsecurity reasons on macOS, as it prohibits PIE. It's also completely\nunsupported on Apple Silicon, so I don't think it's worth going to the effort\nof properly supporting this model on that platform.", "tree": {"sha": "397ea63daee94ae13a6ccf866f43fb6f9bc7a547", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/397ea63daee94ae13a6ccf866f43fb6f9bc7a547"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c17b1904a90002b5bdb6e2fdcd76e61a1ad3cd7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c17b1904a90002b5bdb6e2fdcd76e61a1ad3cd7a", "html_url": "https://github.com/rust-lang/rust/commit/c17b1904a90002b5bdb6e2fdcd76e61a1ad3cd7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c17b1904a90002b5bdb6e2fdcd76e61a1ad3cd7a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0035916e01d8e644ccd44554c57f0874cef8c8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0035916e01d8e644ccd44554c57f0874cef8c8c", "html_url": "https://github.com/rust-lang/rust/commit/a0035916e01d8e644ccd44554c57f0874cef8c8c"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "8a8ece640fcc71ccc2d05d7738013191c09fa46f", "filename": "compiler/rustc_codegen_llvm/src/mono_item.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c17b1904a90002b5bdb6e2fdcd76e61a1ad3cd7a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c17b1904a90002b5bdb6e2fdcd76e61a1ad3cd7a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs?ref=c17b1904a90002b5bdb6e2fdcd76e61a1ad3cd7a", "patch": "@@ -135,6 +135,11 @@ impl CodegenCx<'ll, 'tcx> {\n             return false;\n         }\n \n+        // Match clang by only supporting COFF and ELF for now.\n+        if self.tcx.sess.target.is_like_osx {\n+            return false;\n+        }\n+\n         // Static relocation model should force copy relocations everywhere.\n         if self.tcx.sess.relocation_model() == RelocModel::Static {\n             return true;"}]}