{"sha": "ca44b6892e3e66765355d4e645f74df3d184c03b", "node_id": "C_kwDOAAsO6NoAKGNhNDRiNjg5MmUzZTY2NzY1MzU1ZDRlNjQ1Zjc0ZGYzZDE4NGMwM2I", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-10-22T06:23:29Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-10-22T06:23:29Z"}, "message": "Use array IntoIter", "tree": {"sha": "44844848cb94c1ebe1b3898795750649a847b71e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44844848cb94c1ebe1b3898795750649a847b71e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca44b6892e3e66765355d4e645f74df3d184c03b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca44b6892e3e66765355d4e645f74df3d184c03b", "html_url": "https://github.com/rust-lang/rust/commit/ca44b6892e3e66765355d4e645f74df3d184c03b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca44b6892e3e66765355d4e645f74df3d184c03b/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56fbf5d7b201532c0d10f86a66aff669b96f3e68", "url": "https://api.github.com/repos/rust-lang/rust/commits/56fbf5d7b201532c0d10f86a66aff669b96f3e68", "html_url": "https://github.com/rust-lang/rust/commit/56fbf5d7b201532c0d10f86a66aff669b96f3e68"}], "stats": {"total": 65, "additions": 33, "deletions": 32}, "files": [{"sha": "44d3b7ca5bfb126ad0cdf5ee11d60e7ff9c07c39", "filename": "crates/base_db/src/fixture.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca44b6892e3e66765355d4e645f74df3d184c03b/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca44b6892e3e66765355d4e645f74df3d184c03b/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Ffixture.rs?ref=ca44b6892e3e66765355d4e645f74df3d184c03b", "patch": "@@ -283,7 +283,7 @@ pub fn mirror(input: TokenStream) -> TokenStream {\n     input\n }\n \"#;\n-    let proc_macros = std::array::IntoIter::new([\n+    let proc_macros = [\n         ProcMacro {\n             name: \"identity\".into(),\n             kind: crate::ProcMacroKind::Attr,\n@@ -304,7 +304,8 @@ pub fn mirror(input: TokenStream) -> TokenStream {\n             kind: crate::ProcMacroKind::FuncLike,\n             expander: Arc::new(MirrorProcMacroExpander),\n         },\n-    ])\n+    ]\n+    .into_iter()\n     .filter(|pm| proc_macros.iter().any(|name| name == pm.name))\n     .collect();\n     (proc_macros, source.into())"}, {"sha": "17b901d5f89952f885a553b98e2eb05b57dd6b30", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca44b6892e3e66765355d4e645f74df3d184c03b/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca44b6892e3e66765355d4e645f74df3d184c03b/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=ca44b6892e3e66765355d4e645f74df3d184c03b", "patch": "@@ -2392,7 +2392,7 @@ impl Type {\n                 }\n                 .cast(&Interner),\n             ),\n-            [TyVariableKind::General].iter().copied(),\n+            [TyVariableKind::General].into_iter(),\n         );\n \n         match db.trait_solve(self.krate, goal)? {"}, {"sha": "b048f46f9cbadc8b2befe4a09f4e1fd682b2a7d8", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca44b6892e3e66765355d4e645f74df3d184c03b/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca44b6892e3e66765355d4e645f74df3d184c03b/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=ca44b6892e3e66765355d4e645f74df3d184c03b", "patch": "@@ -507,12 +507,12 @@ impl DefCollector<'_> {\n         };\n         let path = ModPath::from_segments(\n             path_kind.clone(),\n-            [krate.clone(), name![prelude], edition].iter().cloned(),\n+            [krate.clone(), name![prelude], edition].into_iter(),\n         );\n         // Fall back to the older `std::prelude::v1` for compatibility with Rust <1.52.0\n         // FIXME remove this fallback\n         let fallback_path =\n-            ModPath::from_segments(path_kind, [krate, name![prelude], name![v1]].iter().cloned());\n+            ModPath::from_segments(path_kind, [krate, name![prelude], name![v1]].into_iter());\n \n         for path in &[path, fallback_path] {\n             let (per_ns, _) = self.def_map.resolve_path("}, {"sha": "0037849d1ca0c58a6bf9cd5c1fc4574883c854cd", "filename": "crates/hir_ty/src/utils.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca44b6892e3e66765355d4e645f74df3d184c03b/crates%2Fhir_ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca44b6892e3e66765355d4e645f74df3d184c03b/crates%2Fhir_ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Futils.rs?ref=ca44b6892e3e66765355d4e645f74df3d184c03b", "patch": "@@ -1,7 +1,7 @@\n //! Helper functions for working with def, which don't need to be a separate\n //! query, but can't be computed directly from `*Data` (ie, which need a `db`).\n \n-use std::{array, iter};\n+use std::iter;\n \n use base_db::CrateId;\n use chalk_ir::{fold::Shift, BoundVar, DebruijnIndex};\n@@ -25,12 +25,14 @@ use crate::{\n };\n \n pub(crate) fn fn_traits(db: &dyn DefDatabase, krate: CrateId) -> impl Iterator<Item = TraitId> {\n-    let fn_traits = [\n+    [\n         db.lang_item(krate, \"fn\".into()),\n         db.lang_item(krate, \"fn_mut\".into()),\n         db.lang_item(krate, \"fn_once\".into()),\n-    ];\n-    array::IntoIter::new(fn_traits).into_iter().flatten().flat_map(|it| it.as_trait())\n+    ]\n+    .into_iter()\n+    .flatten()\n+    .flat_map(|it| it.as_trait())\n }\n \n fn direct_super_traits(db: &dyn DefDatabase, trait_: TraitId) -> Vec<TraitId> {"}, {"sha": "a102736124567106fa827ab1dc626f812020f1ae", "filename": "crates/ide_assists/src/handlers/replace_try_expr_with_match.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca44b6892e3e66765355d4e645f74df3d184c03b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_try_expr_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca44b6892e3e66765355d4e645f74df3d184c03b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_try_expr_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_try_expr_with_match.rs?ref=ca44b6892e3e66765355d4e645f74df3d184c03b", "patch": "@@ -76,8 +76,7 @@ pub(crate) fn replace_try_expr_with_match(acc: &mut Assists, ctx: &AssistContext\n             );\n             let sad_arm = make::match_arm(iter::once(sad_pat), None, sad_expr);\n \n-            let match_arms = [happy_arm, sad_arm];\n-            let match_arm_list = make::match_arm_list(std::array::IntoIter::new(match_arms));\n+            let match_arm_list = make::match_arm_list([happy_arm, sad_arm]);\n \n             let expr_match = make::expr_match(expr, match_arm_list)\n                 .indent(IndentLevel::from_node(qm_kw_parent.syntax()));"}, {"sha": "03433fc42af028e6ca0bbde18ec98add264d6b85", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca44b6892e3e66765355d4e645f74df3d184c03b/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca44b6892e3e66765355d4e645f74df3d184c03b/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=ca44b6892e3e66765355d4e645f74df3d184c03b", "patch": "@@ -268,7 +268,7 @@ fn invert_special_case(expr: &ast::Expr) -> Option<ast::Expr> {\n }\n \n pub(crate) fn next_prev() -> impl Iterator<Item = Direction> {\n-    [Direction::Next, Direction::Prev].iter().copied()\n+    [Direction::Next, Direction::Prev].into_iter()\n }\n \n pub(crate) fn does_pat_match_variant(pat: &ast::Pat, var: &ast::Pat) -> bool {"}, {"sha": "119572923c96d5a24898a2b7fe821e33e9efa984", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca44b6892e3e66765355d4e645f74df3d184c03b/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca44b6892e3e66765355d4e645f74df3d184c03b/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=ca44b6892e3e66765355d4e645f74df3d184c03b", "patch": "@@ -177,7 +177,7 @@ macro_rules! attrs {\n #[rustfmt::skip]\n static KIND_TO_ATTRIBUTES: Lazy<FxHashMap<SyntaxKind, &[&str]>> = Lazy::new(|| {\n     use SyntaxKind::*;\n-    std::array::IntoIter::new([\n+    [\n         (\n             SOURCE_FILE,\n             attrs!(\n@@ -229,7 +229,8 @@ static KIND_TO_ATTRIBUTES: Lazy<FxHashMap<SyntaxKind, &[&str]>> = Lazy::new(|| {\n         (MATCH_ARM, attrs!()),\n         (IDENT_PAT, attrs!()),\n         (RECORD_PAT_FIELD, attrs!()),\n-    ])\n+    ]\n+    .into_iter()\n     .collect()\n });\n const EXPR_ATTRIBUTES: &[&str] = attrs!();"}, {"sha": "171babc698e89052523977f0bd5f450e9b322e3e", "filename": "crates/ide_completion/src/completions/attribute/cfg.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ca44b6892e3e66765355d4e645f74df3d184c03b/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca44b6892e3e66765355d4e645f74df3d184c03b/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fcfg.rs?ref=ca44b6892e3e66765355d4e645f74df3d184c03b", "patch": "@@ -10,9 +10,9 @@ use crate::{\n };\n \n pub(crate) fn complete_cfg(acc: &mut Completions, ctx: &CompletionContext) {\n-    let add_completion = |item: &&str| {\n+    let add_completion = |item: &str| {\n         let mut completion =\n-            CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), *item);\n+            CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), item);\n         completion.insert_text(format!(r#\"\"{}\"\"#, item));\n         completion.kind(CompletionItemKind::Attribute);\n         acc.add(completion.build());\n@@ -26,11 +26,11 @@ pub(crate) fn complete_cfg(acc: &mut Completions, ctx: &CompletionContext) {\n     .find(|t| matches!(t.kind(), SyntaxKind::IDENT));\n \n     match previous.as_ref().map(|p| p.text()) {\n-        Some(\"target_arch\") => KNOWN_ARCH.iter().for_each(add_completion),\n-        Some(\"target_env\") => KNOWN_ENV.iter().for_each(add_completion),\n-        Some(\"target_os\") => KNOWN_OS.iter().for_each(add_completion),\n-        Some(\"target_vendor\") => KNOWN_VENDOR.iter().for_each(add_completion),\n-        Some(\"target_endian\") => [\"little\", \"big\"].iter().for_each(add_completion),\n+        Some(\"target_arch\") => KNOWN_ARCH.iter().copied().for_each(add_completion),\n+        Some(\"target_env\") => KNOWN_ENV.iter().copied().for_each(add_completion),\n+        Some(\"target_os\") => KNOWN_OS.iter().copied().for_each(add_completion),\n+        Some(\"target_vendor\") => KNOWN_VENDOR.iter().copied().for_each(add_completion),\n+        Some(\"target_endian\") => [\"little\", \"big\"].into_iter().for_each(add_completion),\n         Some(name) => {\n             if let Some(krate) = ctx.krate {\n                 krate.potential_cfg(ctx.db).get_cfg_values(&name).iter().for_each(|s| {"}, {"sha": "afacf7fe03c0c8ff496ba3bf1cec42be5248f07c", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca44b6892e3e66765355d4e645f74df3d184c03b/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca44b6892e3e66765355d4e645f74df3d184c03b/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=ca44b6892e3e66765355d4e645f74df3d184c03b", "patch": "@@ -19,11 +19,10 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n             }\n         });\n \n-        std::array::IntoIter::new([\"self::\", \"super::\", \"crate::\"])\n-            .for_each(|kw| acc.add_keyword(ctx, kw));\n+        [\"self::\", \"super::\", \"crate::\"].into_iter().for_each(|kw| acc.add_keyword(ctx, kw));\n         return;\n     }\n-    std::array::IntoIter::new([\"self\", \"super\", \"crate\"]).for_each(|kw| acc.add_keyword(ctx, kw));\n+    [\"self\", \"super\", \"crate\"].into_iter().for_each(|kw| acc.add_keyword(ctx, kw));\n \n     match &ctx.completion_location {\n         Some(ImmediateLocation::Visibility(_)) => return,"}, {"sha": "53e821c0f2fa995fb26ee5bed71411dd4be1ee03", "filename": "crates/proc_macro_srv/src/abis/abi_1_56/proc_macro/quote.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca44b6892e3e66765355d4e645f74df3d184c03b/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_56%2Fproc_macro%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca44b6892e3e66765355d4e645f74df3d184c03b/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_56%2Fproc_macro%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_56%2Fproc_macro%2Fquote.rs?ref=ca44b6892e3e66765355d4e645f74df3d184c03b", "patch": "@@ -28,8 +28,7 @@ macro_rules! quote_ts {\n         [\n             TokenTree::from(Punct::new(':', Spacing::Joint)),\n             TokenTree::from(Punct::new(':', Spacing::Alone)),\n-        ].iter()\n-            .cloned()\n+        ].into_iter()\n             .map(|mut x| {\n                 x.set_span(Span::def_site());\n                 x\n@@ -52,7 +51,7 @@ macro_rules! quote {\n     ($($t:tt)*) => {\n         [\n             $(TokenStream::from(quote_ts!($t)),)*\n-        ].iter().cloned().collect::<TokenStream>()\n+        ].into_iter().collect::<TokenStream>()\n     };\n }\n "}, {"sha": "669aea0cd13aa4d54624f2fe10e108f22eab34e9", "filename": "crates/project_model/src/rustc_cfg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca44b6892e3e66765355d4e645f74df3d184c03b/crates%2Fproject_model%2Fsrc%2Frustc_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca44b6892e3e66765355d4e645f74df3d184c03b/crates%2Fproject_model%2Fsrc%2Frustc_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Frustc_cfg.rs?ref=ca44b6892e3e66765355d4e645f74df3d184c03b", "patch": "@@ -12,8 +12,8 @@ pub(crate) fn get(cargo_toml: Option<&ManifestPath>, target: Option<&str>) -> Ve\n \n     // Some nightly-only cfgs, which are required for stdlib\n     res.push(CfgFlag::Atom(\"target_thread_local\".into()));\n-    for &ty in [\"8\", \"16\", \"32\", \"64\", \"cas\", \"ptr\"].iter() {\n-        for &key in [\"target_has_atomic\", \"target_has_atomic_load_store\"].iter() {\n+    for ty in [\"8\", \"16\", \"32\", \"64\", \"cas\", \"ptr\"] {\n+        for key in [\"target_has_atomic\", \"target_has_atomic_load_store\"] {\n             res.push(CfgFlag::KeyValue { key: key.to_string(), value: ty.into() });\n         }\n     }"}, {"sha": "ba4b153cfc0bc821d4b37140cdb59de7a265842d", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca44b6892e3e66765355d4e645f74df3d184c03b/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca44b6892e3e66765355d4e645f74df3d184c03b/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=ca44b6892e3e66765355d4e645f74df3d184c03b", "patch": "@@ -706,7 +706,7 @@ pub(crate) fn handle_runnables(\n     let config = snap.config.runnables();\n     match cargo_spec {\n         Some(spec) => {\n-            for &cmd in [\"check\", \"test\"].iter() {\n+            for cmd in [\"check\", \"test\"] {\n                 res.push(lsp_ext::Runnable {\n                     label: format!(\"cargo {} -p {} --all-targets\", cmd, spec.package),\n                     location: None,"}, {"sha": "e6ac018a05feaf07173992fff3602c3b25f37996", "filename": "crates/rust-analyzer/tests/slow-tests/sourcegen.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca44b6892e3e66765355d4e645f74df3d184c03b/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsourcegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca44b6892e3e66765355d4e645f74df3d184c03b/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsourcegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsourcegen.rs?ref=ca44b6892e3e66765355d4e645f74df3d184c03b", "patch": "@@ -56,12 +56,12 @@ impl Feature {\n \n fn is_valid_feature_name(feature: &str) -> Result<(), String> {\n     'word: for word in feature.split_whitespace() {\n-        for &short in [\"to\", \"and\"].iter() {\n+        for short in [\"to\", \"and\"] {\n             if word == short {\n                 continue 'word;\n             }\n         }\n-        for &short in [\"To\", \"And\"].iter() {\n+        for short in [\"To\", \"And\"] {\n             if word == short {\n                 return Err(format!(\"Don't capitalize {:?}\", word));\n             }"}]}