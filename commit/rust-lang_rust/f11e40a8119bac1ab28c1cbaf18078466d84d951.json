{"sha": "f11e40a8119bac1ab28c1cbaf18078466d84d951", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMWU0MGE4MTE5YmFjMWFiMjhjMWNiYWYxODA3ODQ2NmQ4NGQ5NTE=", "commit": {"author": {"name": "Stepan Koltsov", "email": "stepan.koltsov@gmail.com", "date": "2017-06-16T19:59:20Z"}, "committer": {"name": "Stepan Koltsov", "email": "stepan.koltsov@gmail.com", "date": "2017-06-16T19:59:20Z"}, "message": "deriv(Hash) for single-variant enum should not hash discriminant\n\nFixes #39137", "tree": {"sha": "596580d6ad270e9f70056aa4690458f8cc01fd98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/596580d6ad270e9f70056aa4690458f8cc01fd98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f11e40a8119bac1ab28c1cbaf18078466d84d951", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f11e40a8119bac1ab28c1cbaf18078466d84d951", "html_url": "https://github.com/rust-lang/rust/commit/f11e40a8119bac1ab28c1cbaf18078466d84d951", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f11e40a8119bac1ab28c1cbaf18078466d84d951/comments", "author": {"login": "stepancheg", "id": 28969, "node_id": "MDQ6VXNlcjI4OTY5", "avatar_url": "https://avatars.githubusercontent.com/u/28969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stepancheg", "html_url": "https://github.com/stepancheg", "followers_url": "https://api.github.com/users/stepancheg/followers", "following_url": "https://api.github.com/users/stepancheg/following{/other_user}", "gists_url": "https://api.github.com/users/stepancheg/gists{/gist_id}", "starred_url": "https://api.github.com/users/stepancheg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stepancheg/subscriptions", "organizations_url": "https://api.github.com/users/stepancheg/orgs", "repos_url": "https://api.github.com/users/stepancheg/repos", "events_url": "https://api.github.com/users/stepancheg/events{/privacy}", "received_events_url": "https://api.github.com/users/stepancheg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "stepancheg", "id": 28969, "node_id": "MDQ6VXNlcjI4OTY5", "avatar_url": "https://avatars.githubusercontent.com/u/28969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stepancheg", "html_url": "https://github.com/stepancheg", "followers_url": "https://api.github.com/users/stepancheg/followers", "following_url": "https://api.github.com/users/stepancheg/following{/other_user}", "gists_url": "https://api.github.com/users/stepancheg/gists{/gist_id}", "starred_url": "https://api.github.com/users/stepancheg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stepancheg/subscriptions", "organizations_url": "https://api.github.com/users/stepancheg/orgs", "repos_url": "https://api.github.com/users/stepancheg/repos", "events_url": "https://api.github.com/users/stepancheg/events{/privacy}", "received_events_url": "https://api.github.com/users/stepancheg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b40be00a0cac84d23f51c5c5109c8f824ab19ab3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b40be00a0cac84d23f51c5c5109c8f824ab19ab3", "html_url": "https://github.com/rust-lang/rust/commit/b40be00a0cac84d23f51c5c5109c8f824ab19ab3"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "35a2a2513f4e250264e2e8642bb18c8e9b2bc5ce", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f11e40a8119bac1ab28c1cbaf18078466d84d951/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11e40a8119bac1ab28c1cbaf18078466d84d951/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=f11e40a8119bac1ab28c1cbaf18078466d84d951", "patch": "@@ -167,7 +167,7 @@ fn cs_clone(name: &str,\n             all_fields = af;\n             vdata = vdata_;\n         }\n-        EnumMatching(_, variant, ref af) => {\n+        EnumMatching(.., variant, ref af) => {\n             ctor_path = cx.path(trait_span, vec![substr.type_ident, variant.node.name]);\n             all_fields = af;\n             vdata = &variant.node.data;"}, {"sha": "38ed596098b2123e83618ca7b296c0e137ccb250", "filename": "src/libsyntax_ext/deriving/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f11e40a8119bac1ab28c1cbaf18078466d84d951/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11e40a8119bac1ab28c1cbaf18078466d84d951/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs?ref=f11e40a8119bac1ab28c1cbaf18078466d84d951", "patch": "@@ -60,7 +60,7 @@ fn show_substructure(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<E\n     // based on the \"shape\".\n     let (ident, is_struct) = match *substr.fields {\n         Struct(vdata, _) => (substr.type_ident, vdata.is_struct()),\n-        EnumMatching(_, v, _) => (v.node.name, v.node.data.is_struct()),\n+        EnumMatching(_, _, v, _) => (v.node.name, v.node.data.is_struct()),\n         EnumNonMatchingCollapsed(..) |\n         StaticStruct(..) |\n         StaticEnum(..) => cx.span_bug(span, \"nonsensical .fields in `#[derive(Debug)]`\"),"}, {"sha": "811135e5368e60cd20f6500b0bd5c56ff9766334", "filename": "src/libsyntax_ext/deriving/encodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f11e40a8119bac1ab28c1cbaf18078466d84d951/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11e40a8119bac1ab28c1cbaf18078466d84d951/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs?ref=f11e40a8119bac1ab28c1cbaf18078466d84d951", "patch": "@@ -233,7 +233,7 @@ fn encodable_substructure(cx: &mut ExtCtxt,\n                                      blk])\n         }\n \n-        EnumMatching(idx, variant, ref fields) => {\n+        EnumMatching(idx, _, variant, ref fields) => {\n             // We're not generating an AST that the borrow checker is expecting,\n             // so we need to generate a unique local variable to take the\n             // mutable loan out on, otherwise we get conflicts which don't"}, {"sha": "1fe26a0ac4bb450f03fbdec2d1d1af84beeea67d", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f11e40a8119bac1ab28c1cbaf18078466d84d951/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11e40a8119bac1ab28c1cbaf18078466d84d951/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=f11e40a8119bac1ab28c1cbaf18078466d84d951", "patch": "@@ -305,10 +305,10 @@ pub enum StaticFields {\n /// A summary of the possible sets of fields.\n pub enum SubstructureFields<'a> {\n     Struct(&'a ast::VariantData, Vec<FieldInfo<'a>>),\n-    /// Matching variants of the enum: variant index, ast::Variant,\n+    /// Matching variants of the enum: variant index, variant count, ast::Variant,\n     /// fields: the field name is only non-`None` in the case of a struct\n     /// variant.\n-    EnumMatching(usize, &'a ast::Variant, Vec<FieldInfo<'a>>),\n+    EnumMatching(usize, usize, &'a ast::Variant, Vec<FieldInfo<'a>>),\n \n     /// Non-matching variants of the enum, but with all state hidden from\n     /// the consequent code.  The first component holds `Ident`s for all of\n@@ -1250,7 +1250,7 @@ impl<'a> MethodDef<'a> {\n                 // expressions for referencing every field of every\n                 // Self arg, assuming all are instances of VariantK.\n                 // Build up code associated with such a case.\n-                let substructure = EnumMatching(index, variant, field_tuples);\n+                let substructure = EnumMatching(index, variants.len(), variant, field_tuples);\n                 let arm_expr = self.call_substructure_method(cx,\n                                                              trait_,\n                                                              type_ident,\n@@ -1267,12 +1267,13 @@ impl<'a> MethodDef<'a> {\n                 // We need a default case that handles the fieldless variants.\n                 // The index and actual variant aren't meaningful in this case,\n                 // so just use whatever\n+                let substructure = EnumMatching(0, variants.len(), v, Vec::new());\n                 Some(self.call_substructure_method(cx,\n                                                    trait_,\n                                                    type_ident,\n                                                    &self_args[..],\n                                                    nonself_args,\n-                                                   &EnumMatching(0, v, Vec::new())))\n+                                                   &substructure))\n             }\n             _ if variants.len() > 1 && self_args.len() > 1 => {\n                 // Since we know that all the arguments will match if we reach"}, {"sha": "a341c21d0a126cbc5667a74fd58e7358c6a10993", "filename": "src/libsyntax_ext/deriving/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f11e40a8119bac1ab28c1cbaf18078466d84d951/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11e40a8119bac1ab28c1cbaf18078466d84d951/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs?ref=f11e40a8119bac1ab28c1cbaf18078466d84d951", "patch": "@@ -81,7 +81,7 @@ fn hash_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure)\n     let mut stmts = Vec::new();\n \n     let fields = match *substr.fields {\n-        Struct(_, ref fs) => fs,\n+        Struct(_, ref fs) | EnumMatching(_, 1, .., ref fs) => fs,\n         EnumMatching(.., ref fs) => {\n             let variant_value = deriving::call_intrinsic(cx,\n                                                          trait_span,"}, {"sha": "18b2fbe015b425ee89c4c4cb87242fbf975a022a", "filename": "src/test/run-pass/deriving-hash.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f11e40a8119bac1ab28c1cbaf18078466d84d951/src%2Ftest%2Frun-pass%2Fderiving-hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11e40a8119bac1ab28c1cbaf18078466d84d951/src%2Ftest%2Frun-pass%2Fderiving-hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-hash.rs?ref=f11e40a8119bac1ab28c1cbaf18078466d84d951", "patch": "@@ -45,8 +45,8 @@ impl<'a> Hasher for FakeHasher<'a> {\n     }\n }\n \n-fn fake_hash(v: &mut Vec<u8>, e: E) {\n-    e.hash(&mut FakeHasher(v));\n+fn fake_hash<A: Hash>(v: &mut Vec<u8>, a: A) {\n+    a.hash(&mut FakeHasher(v));\n }\n \n fn main() {\n@@ -69,4 +69,13 @@ fn main() {\n     fake_hash(&mut va, E::A);\n     fake_hash(&mut vb, E::B);\n     assert!(va != vb);\n+\n+    // issue #39137: single variant enum hash should not hash discriminant\n+    #[derive(Hash)]\n+    enum SingleVariantEnum {\n+        A(u8),\n+    }\n+    let mut v = vec![];\n+    fake_hash(&mut v, SingleVariantEnum::A(17));\n+    assert_eq!(vec![17], v);\n }"}]}