{"sha": "fb57b7518d207caa99bdd99f4dab2a7d3902a83a", "node_id": "C_kwDOAAsO6NoAKGZiNTdiNzUxOGQyMDdjYWE5OWJkZDk5ZjRkYWIyYTdkMzkwMmE4M2E", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-01-07T03:58:32Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-01-17T17:20:57Z"}, "message": "Add term\n\nInstead of having a separate enum variant for types and consts have one but have either a const\nor type.", "tree": {"sha": "3e34269c3e145261eba9288f049b06c9a6c6b183", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e34269c3e145261eba9288f049b06c9a6c6b183"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb57b7518d207caa99bdd99f4dab2a7d3902a83a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb57b7518d207caa99bdd99f4dab2a7d3902a83a", "html_url": "https://github.com/rust-lang/rust/commit/fb57b7518d207caa99bdd99f4dab2a7d3902a83a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb57b7518d207caa99bdd99f4dab2a7d3902a83a/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07659996221446273065651ff9c0fcb00935eb03", "url": "https://api.github.com/repos/rust-lang/rust/commits/07659996221446273065651ff9c0fcb00935eb03", "html_url": "https://github.com/rust-lang/rust/commit/07659996221446273065651ff9c0fcb00935eb03"}], "stats": {"total": 105, "additions": 68, "deletions": 37}, "files": [{"sha": "d0732b35b6e9ebfaf11a06a178052f6404cd8992", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fb57b7518d207caa99bdd99f4dab2a7d3902a83a/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb57b7518d207caa99bdd99f4dab2a7d3902a83a/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=fb57b7518d207caa99bdd99f4dab2a7d3902a83a", "patch": "@@ -1851,13 +1851,30 @@ pub struct AssocConstraint {\n     pub span: Span,\n }\n \n+/// The kinds of an `AssocConstraint`.\n+#[derive(Clone, Encodable, Decodable, Debug)]\n+pub enum Term {\n+    Ty(P<Ty>),\n+    Const(AnonConst),\n+}\n+\n+impl From<P<Ty>> for Term {\n+    fn from(v: P<Ty>) -> Self {\n+        Term::Ty(v)\n+    }\n+}\n+\n+impl From<AnonConst> for Term {\n+    fn from(v: AnonConst) -> Self {\n+        Term::Const(v)\n+    }\n+}\n+\n /// The kinds of an `AssocConstraint`.\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub enum AssocConstraintKind {\n-    /// E.g., `A = Bar` in `Foo<A = Bar>` where A is an associated type.\n-    Equality { ty: P<Ty> },\n-    /// E.g., `A = 3` in `Foo<N = 3>` where N is an associated const.\n-    ConstEquality { c: AnonConst },\n+    /// E.g., `A = Bar`, `A = 3` in `Foo<A = Bar>` where A is an associated type.\n+    Equality { term: Term },\n     /// E.g. `A: TraitA + TraitB` in `Foo<A: TraitA + TraitB>`.\n     Bound { bounds: GenericBounds },\n }"}, {"sha": "a81a227629539a06f52f55a639378b99cff9945d", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fb57b7518d207caa99bdd99f4dab2a7d3902a83a/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb57b7518d207caa99bdd99f4dab2a7d3902a83a/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=fb57b7518d207caa99bdd99f4dab2a7d3902a83a", "patch": "@@ -440,8 +440,10 @@ pub fn noop_visit_constraint<T: MutVisitor>(\n         vis.visit_generic_args(gen_args);\n     }\n     match kind {\n-        AssocConstraintKind::Equality { ref mut ty } => vis.visit_ty(ty),\n-        AssocConstraintKind::ConstEquality { ref mut c } => vis.visit_anon_const(c),\n+        AssocConstraintKind::Equality { ref mut term } => match term {\n+            Term::Ty(ty) => vis.visit_ty(ty),\n+            Term::Const(c) => vis.visit_anon_const(c),\n+        },\n         AssocConstraintKind::Bound { ref mut bounds } => visit_bounds(bounds, vis),\n     }\n     vis.visit_span(span);"}, {"sha": "73e9297549cd4877de19f41d92d5cb5711a84bfb", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fb57b7518d207caa99bdd99f4dab2a7d3902a83a/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb57b7518d207caa99bdd99f4dab2a7d3902a83a/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=fb57b7518d207caa99bdd99f4dab2a7d3902a83a", "patch": "@@ -492,8 +492,10 @@ pub fn walk_assoc_constraint<'a, V: Visitor<'a>>(visitor: &mut V, constraint: &'\n         visitor.visit_generic_args(gen_args.span(), gen_args);\n     }\n     match constraint.kind {\n-        AssocConstraintKind::Equality { ref ty } => visitor.visit_ty(ty),\n-        AssocConstraintKind::ConstEquality { ref c } => visitor.visit_anon_const(c),\n+        AssocConstraintKind::Equality { ref term } => match term {\n+            Term::Ty(ty) => visitor.visit_ty(ty),\n+            Term::Const(c) => visitor.visit_anon_const(c),\n+        },\n         AssocConstraintKind::Bound { ref bounds } => {\n             walk_list!(visitor, visit_param_bound, bounds);\n         }"}, {"sha": "9a8a097ee249c834b87e43e59adad3c03988e0e4", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fb57b7518d207caa99bdd99f4dab2a7d3902a83a/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb57b7518d207caa99bdd99f4dab2a7d3902a83a/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=fb57b7518d207caa99bdd99f4dab2a7d3902a83a", "patch": "@@ -997,12 +997,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         };\n \n         let kind = match constraint.kind {\n-            AssocConstraintKind::Equality { ref ty } => {\n-                hir::TypeBindingKind::Equality { ty: self.lower_ty(ty, itctx) }\n-            }\n-            AssocConstraintKind::ConstEquality { ref c } => {\n-                hir::TypeBindingKind::Const { c: self.lower_anon_const(c) }\n-            }\n+            AssocConstraintKind::Equality { ref term } => match term {\n+                Term::Ty(ref ty) => hir::TypeBindingKind::Equality { ty: self.lower_ty(ty, itctx) },\n+                Term::Const(ref c) => hir::TypeBindingKind::Const { c: self.lower_anon_const(c) },\n+            },\n             AssocConstraintKind::Bound { ref bounds } => {\n                 let mut capturable_lifetimes;\n                 let mut parent_def_id = self.current_hir_id_owner;"}, {"sha": "eb7c75cac0520ab0018a2acff5f19adee5ce9253", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb57b7518d207caa99bdd99f4dab2a7d3902a83a/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb57b7518d207caa99bdd99f4dab2a7d3902a83a/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=fb57b7518d207caa99bdd99f4dab2a7d3902a83a", "patch": "@@ -141,7 +141,6 @@ impl<'a> AstValidator<'a> {\n     fn visit_assoc_constraint_from_generic_args(&mut self, constraint: &'a AssocConstraint) {\n         match constraint.kind {\n             AssocConstraintKind::Equality { .. } => {}\n-            AssocConstraintKind::ConstEquality { .. } => {}\n             AssocConstraintKind::Bound { .. } => {\n                 if self.is_assoc_ty_bound_banned {\n                     self.err_handler().span_err(\n@@ -1592,7 +1591,7 @@ fn deny_equality_constraints(\n                                         ident: *ident,\n                                         gen_args,\n                                         kind: AssocConstraintKind::Equality {\n-                                            ty: predicate.rhs_ty.clone(),\n+                                            term: predicate.rhs_ty.clone().into(),\n                                         },\n                                         span: ident.span,\n                                     });"}, {"sha": "3c45b5790fb47d8f2dabb3ff4cec6918f91e6ed7", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fb57b7518d207caa99bdd99f4dab2a7d3902a83a/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb57b7518d207caa99bdd99f4dab2a7d3902a83a/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=fb57b7518d207caa99bdd99f4dab2a7d3902a83a", "patch": "@@ -1,14 +1,14 @@\n use crate::pp::Breaks::{Consistent, Inconsistent};\n use crate::pp::{self, Breaks};\n \n-use rustc_ast::attr;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, BinOpToken, CommentKind, DelimToken, Nonterminal, Token, TokenKind};\n use rustc_ast::tokenstream::{TokenStream, TokenTree};\n use rustc_ast::util::classify;\n use rustc_ast::util::comments::{gather_comments, Comment, CommentStyle};\n use rustc_ast::util::parser::{self, AssocOp, Fixity};\n use rustc_ast::{self as ast, BlockCheckMode, PatKind, RangeEnd, RangeSyntax};\n+use rustc_ast::{attr, Term};\n use rustc_ast::{GenericArg, MacArgs, ModKind};\n use rustc_ast::{GenericBound, SelfKind, TraitBoundModifier};\n use rustc_ast::{InlineAsmOperand, InlineAsmRegOrRegClass};\n@@ -957,13 +957,12 @@ impl<'a> State<'a> {\n         constraint.gen_args.as_ref().map(|args| self.print_generic_args(args, false));\n         self.space();\n         match &constraint.kind {\n-            ast::AssocConstraintKind::Equality { ty } => {\n+            ast::AssocConstraintKind::Equality { term } => {\n                 self.word_space(\"=\");\n-                self.print_type(ty);\n-            }\n-            ast::AssocConstraintKind::ConstEquality { c } => {\n-                self.word_space(\"=\");\n-                self.print_expr_anon_const(c);\n+                match term {\n+                    Term::Ty(ty) => self.print_type(ty),\n+                    Term::Const(c) => self.print_expr_anon_const(c),\n+                }\n             }\n             ast::AssocConstraintKind::Bound { bounds } => {\n                 self.print_type_bounds(\":\", &*bounds);"}, {"sha": "0d1081ee26b772241a66e4aa667ff5980a63327c", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fb57b7518d207caa99bdd99f4dab2a7d3902a83a/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb57b7518d207caa99bdd99f4dab2a7d3902a83a/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=fb57b7518d207caa99bdd99f4dab2a7d3902a83a", "patch": "@@ -1,7 +1,7 @@\n use libloading::Library;\n use rustc_ast::mut_visit::{visit_clobber, MutVisitor, *};\n use rustc_ast::ptr::P;\n-use rustc_ast::{self as ast, AttrVec, BlockCheckMode};\n+use rustc_ast::{self as ast, AttrVec, BlockCheckMode, Term};\n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n #[cfg(parallel_compiler)]\n@@ -739,9 +739,11 @@ impl<'a, 'b> ReplaceBodyWithLoop<'a, 'b> {\n                                     },\n                                     ast::AngleBracketedArg::Constraint(c) => match c.kind {\n                                         ast::AssocConstraintKind::Bound { .. } => true,\n-                                        ast::AssocConstraintKind::ConstEquality { .. } => false,\n-                                        ast::AssocConstraintKind::Equality { ref ty } => {\n-                                            involves_impl_trait(ty)\n+                                        ast::AssocConstraintKind::Equality { ref term } => {\n+                                            match term {\n+                                                Term::Ty(ty) => involves_impl_trait(ty),\n+                                                Term::Const(_) => false,\n+                                            }\n                                         }\n                                     },\n                                 })"}, {"sha": "72e4e26dd3ee72937aa7bb529b0eab409a483dcd", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb57b7518d207caa99bdd99f4dab2a7d3902a83a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb57b7518d207caa99bdd99f4dab2a7d3902a83a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=fb57b7518d207caa99bdd99f4dab2a7d3902a83a", "patch": "@@ -799,6 +799,7 @@ pub type PolyCoercePredicate<'tcx> = ty::Binder<'tcx, CoercePredicate<'tcx>>;\n /// syntax, but it roughly corresponds to the syntactic forms:\n ///\n /// 1. `T: TraitRef<..., Item = Type>`\n+/// - Or `T: TraitRef<..., Item = Const>`\n /// 2. `<T as TraitRef<...>>::Item == Type` (NYI)\n ///\n /// In particular, form #1 is \"desugared\" to the combination of a"}, {"sha": "8f272820015b2a7e84d6cfddafda271462eb08b9", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fb57b7518d207caa99bdd99f4dab2a7d3902a83a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb57b7518d207caa99bdd99f4dab2a7d3902a83a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=fb57b7518d207caa99bdd99f4dab2a7d3902a83a", "patch": "@@ -505,7 +505,9 @@ impl<'a> Parser<'a> {\n         let span = ident.span.to(self.prev_token.span);\n         let ty = match arg {\n             Some(GenericArg::Type(ty)) => ty,\n-            Some(GenericArg::Const(c)) => return Ok(AssocConstraintKind::ConstEquality { c }),\n+            Some(GenericArg::Const(c)) => {\n+                return Ok(AssocConstraintKind::Equality { term: c.into() });\n+            }\n             Some(GenericArg::Lifetime(lt)) => {\n                 self.struct_span_err(span, \"associated lifetimes are not supported\")\n                     .span_label(lt.ident.span, \"the lifetime is given here\")\n@@ -540,7 +542,7 @@ impl<'a> Parser<'a> {\n                 return Err(err);\n             }\n         };\n-        Ok(AssocConstraintKind::Equality { ty })\n+        Ok(AssocConstraintKind::Equality { term: ty.into() })\n     }\n \n     /// We do not permit arbitrary expressions as const arguments. They must be one of:"}, {"sha": "604c95d2bc81f17c4a3fe86ea71337bf8fb158e1", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fb57b7518d207caa99bdd99f4dab2a7d3902a83a/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb57b7518d207caa99bdd99f4dab2a7d3902a83a/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=fb57b7518d207caa99bdd99f4dab2a7d3902a83a", "patch": "@@ -645,13 +645,20 @@ pub fn eq_generic_bound(l: &GenericBound, r: &GenericBound) -> bool {\n     }\n }\n \n+fn eq_term(l: &Term, r: &Term) -> bool {\n+  match (l, r) {\n+    (Term::Ty(l), Term::Ty(r)) => eq_ty(l,r),\n+    (Term::Const(l), Term::Const(r)) => eq_anon_const(l,r),\n+    _ => false,\n+  }\n+}\n+\n pub fn eq_assoc_constraint(l: &AssocConstraint, r: &AssocConstraint) -> bool {\n     use AssocConstraintKind::*;\n     eq_id(l.ident, r.ident)\n         && match (&l.kind, &r.kind) {\n-            (Equality { ty: l }, Equality { ty: r }) => eq_ty(l, r),\n+            (Equality { term: l }, Equality { term: r }) => eq_term(l, r),\n             (Bound { bounds: l }, Bound { bounds: r }) => over(l, r, eq_generic_bound),\n-            (ConstEquality { c: l }, ConstEquality { c: r }) => eq_anon_const(l, r),\n             _ => false,\n         }\n }"}, {"sha": "9d5f790e809564542047fe71e729aaf7fa6b6039", "filename": "src/tools/rustfmt/src/types.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fb57b7518d207caa99bdd99f4dab2a7d3902a83a/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb57b7518d207caa99bdd99f4dab2a7d3902a83a/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs?ref=fb57b7518d207caa99bdd99f4dab2a7d3902a83a", "patch": "@@ -1,7 +1,7 @@\n use std::iter::ExactSizeIterator;\n use std::ops::Deref;\n \n-use rustc_ast::ast::{self, FnRetTy, Mutability};\n+use rustc_ast::ast::{self, FnRetTy, Mutability, Term};\n use rustc_ast::ptr;\n use rustc_span::{symbol::kw, BytePos, Pos, Span};\n \n@@ -178,7 +178,7 @@ impl<'a> Rewrite for SegmentParam<'a> {\n \n impl Rewrite for ast::AssocConstraint {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n-        use ast::AssocConstraintKind::{Bound, Equality, ConstEquality};\n+        use ast::AssocConstraintKind::{Bound, Equality};\n \n         let mut result = String::with_capacity(128);\n         result.push_str(rewrite_ident(context, self.ident));\n@@ -192,8 +192,8 @@ impl Rewrite for ast::AssocConstraint {\n \n         let infix = match (&self.kind, context.config.type_punctuation_density()) {\n             (Bound { .. }, _) => \": \",\n-            (ConstEquality { .. } | Equality { .. }, TypeDensity::Wide) => \" = \",\n-            (ConstEquality { .. } | Equality { .. }, TypeDensity::Compressed) => \"=\",\n+            (Equality { .. }, TypeDensity::Wide) => \" = \",\n+            (Equality { .. }, TypeDensity::Compressed) => \"=\",\n         };\n         result.push_str(infix);\n \n@@ -209,8 +209,10 @@ impl Rewrite for ast::AssocConstraint {\n impl Rewrite for ast::AssocConstraintKind {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n         match self {\n-            ast::AssocConstraintKind::Equality { ty } => ty.rewrite(context, shape),\n-            ast::AssocConstraintKind::ConstEquality { c } => c.rewrite(context, shape),\n+            ast::AssocConstraintKind::Equality { term } => match term {\n+                Term::Ty(ty) => ty.rewrite(context, shape),\n+                Term::Const(c) => c.rewrite(context,shape),\n+            },\n             ast::AssocConstraintKind::Bound { bounds } => bounds.rewrite(context, shape),\n         }\n     }"}]}