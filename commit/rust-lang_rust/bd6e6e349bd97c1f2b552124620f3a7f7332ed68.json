{"sha": "bd6e6e349bd97c1f2b552124620f3a7f7332ed68", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNmU2ZTM0OWJkOTdjMWYyYjU1MjEyNDYyMGYzYTdmNzMzMmVkNjg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-25T04:30:57Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-25T04:30:57Z"}, "message": "rustc: Stub some region resolution stuff in infer", "tree": {"sha": "85d389ec7820183d65a2f25db0938e344e45b1d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85d389ec7820183d65a2f25db0938e344e45b1d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd6e6e349bd97c1f2b552124620f3a7f7332ed68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd6e6e349bd97c1f2b552124620f3a7f7332ed68", "html_url": "https://github.com/rust-lang/rust/commit/bd6e6e349bd97c1f2b552124620f3a7f7332ed68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd6e6e349bd97c1f2b552124620f3a7f7332ed68/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f507b54f1961a85f0e640d321fa1c9cb43783087", "url": "https://api.github.com/repos/rust-lang/rust/commits/f507b54f1961a85f0e640d321fa1c9cb43783087", "html_url": "https://github.com/rust-lang/rust/commit/f507b54f1961a85f0e640d321fa1c9cb43783087"}], "stats": {"total": 106, "additions": 103, "deletions": 3}, "files": [{"sha": "abd44d6a851355c95cbe4d0983680ecfac0444ea", "filename": "src/rustc/middle/infer.rs", "status": "modified", "additions": 103, "deletions": 3, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/bd6e6e349bd97c1f2b552124620f3a7f7332ed68/src%2Frustc%2Fmiddle%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd6e6e349bd97c1f2b552124620f3a7f7332ed68/src%2Frustc%2Fmiddle%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Finfer.rs?ref=bd6e6e349bd97c1f2b552124620f3a7f7332ed68", "patch": "@@ -25,10 +25,21 @@ enum var_value {\n     bounded(bounds)\n }\n \n+type region_bound = option<ty::region>;\n+\n+type region_bounds = {lb: region_bound, ub: region_bound};\n+\n+enum region_value {\n+    rv_redirect(uint),\n+    rv_bounded(region_bounds)\n+}\n+\n enum infer_ctxt = @{\n     tcx: ty::ctxt,\n     vals: smallintmap<var_value>,\n-    mut bindings: [(uint, var_value)]\n+    mut bindings: [(uint, var_value)],\n+    region_vals: smallintmap<region_value>,\n+    mut region_bindings: [(uint, region_value)]\n };\n \n type ures = result::result<(), ty::type_err>;\n@@ -37,7 +48,9 @@ type fres<T> = result::result<T,int>;\n fn new_infer_ctxt(tcx: ty::ctxt) -> infer_ctxt {\n     infer_ctxt(@{tcx: tcx,\n                  vals: smallintmap::mk(),\n-                 mut bindings: []})\n+                 mut bindings: [],\n+                 region_vals: smallintmap::mk(),\n+                 mut region_bindings: []})\n }\n \n fn mk_subty(cx: infer_ctxt, a: ty::t, b: ty::t) -> ures {\n@@ -186,6 +199,28 @@ impl unify_methods for infer_ctxt {\n         }\n     }\n \n+    // FIXME: See if we can't throw some polymorphism on this to make this\n+    // less of a straight copy of the above.\n+    fn get_region(rid: uint) -> {root: uint, bounds:region_bounds} {\n+        alt self.region_vals.find(rid) {\n+          none {\n+            let bnds = {lb: none, ub: none};\n+            self.region_vals.insert(rid, rv_bounded(bnds));\n+            {root: rid, bounds: bnds}\n+          }\n+          some(rv_redirect(rid)) {\n+            let {root, bounds} = self.get_region(rid);\n+            if root != rid {\n+                self.region_vals.insert(rid, rv_redirect(root));\n+            }\n+            {root: root, bounds: bounds}\n+          }\n+          some(rv_bounded(bounds)) {\n+            {root: rid, bounds: bounds}\n+          }\n+        }\n+    }\n+\n     // Combines the two bounds.  Returns a bounds r where (r.lb <:\n     // a,b) and (a,b <: r.ub) (if such a bounds exists).\n     fn merge_bnds(a: bound, b: bound) -> result<bounds, ty::type_err> {\n@@ -603,7 +638,7 @@ impl resolve_methods for infer_ctxt {\n         result::ok(t)\n     }\n \n-    fn rerr(v: int) -> fres<ty::t> {\n+    fn rerr<T>(v: int) -> fres<T> {\n         #debug[\"Resolve error: %?\", v];\n         result::err(v)\n     }\n@@ -628,6 +663,14 @@ impl resolve_methods for infer_ctxt {\n     fn resolve_ty(typ: ty::t) -> fres<ty::t> {\n         alt ty::get(typ).struct {\n           ty::ty_var(vid) { self.resolve_var(vid) }\n+          ty::ty_rptr(ty::re_var(rid), base_ty) {\n+            alt self.resolve_region(rid as int) {\n+              result::err(terr)  { result::err(terr) }\n+              result::ok(region) {\n+                self.rok(ty::mk_rptr(self.tcx, region, base_ty))\n+              }\n+            }\n+          }\n           _ { self.rok(typ) }\n         }\n     }\n@@ -682,4 +725,61 @@ impl resolve_methods for infer_ctxt {\n           some(var_id) { ret self.rerr(var_id); }\n         }\n     }\n+\n+    // FIXME: These should be integrated with the two functions above instead\n+    // of being such blatant lazy duplicates.\n+\n+    fn resolve_region(rid: int) -> fres<ty::region> {\n+        let {root:_, bounds} = self.get_region(rid as uint);\n+\n+        // See comments in resolve_ty above re. nonobviousness.\n+\n+        alt bounds {\n+          { ub:_, lb:some(r) } |\n+          { ub:some(r), lb:_ } |\n+          { ub:_, lb:some(r) } { result::ok(r) }\n+          { ub:none, lb:none } { self.rerr(rid) }\n+        }\n+    }\n+\n+    fn subst_regions(unresolved: @mutable option<int>,\n+                     regions_seen: std::list::list<int>,\n+                     rid: int) -> ty::region {\n+        // Should really return a fixup_result instead of a t, but fold_ty\n+        // doesn't allow returning anything but a t.\n+        alt self.resolve_region(rid) {\n+          result::err(rid) {\n+            *unresolved = some(rid);\n+            ret ty::re_var(rid as uint);\n+          }\n+          result::ok(rr) {\n+            let mut give_up = false;\n+            std::list::iter(regions_seen) {|r|\n+                if r == rid {\n+                    *unresolved = some(-1); // hack: communicate inf region\n+                    give_up = true;\n+                }\n+            }\n+            ret rr;\n+          }\n+        }\n+    }\n+\n+    fn fixup_regions(typ: ty::t) -> fres<ty::t> {\n+        let unresolved = @mutable none::<int>;\n+        let rty = ty::fold_ty(self.tcx, ty::fm_rptr({ |region, _under_rptr|\n+            alt region {\n+              ty::re_var(rid) {\n+                self.subst_regions(unresolved, std::list::nil, rid as int)\n+              }\n+              _ { region }\n+            }\n+        }), typ);\n+\n+        let ur = *unresolved;\n+        alt ur {\n+          none { ret self.rok(rty); }\n+          some(var_id) { ret self.rerr(var_id); }\n+        }\n+    }\n }"}]}