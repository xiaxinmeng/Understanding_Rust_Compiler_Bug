{"sha": "00bc4496026a3168eed95e88c29f17dac2739d48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwYmM0NDk2MDI2YTMxNjhlZWQ5NWU4OGMyOWYxN2RhYzI3MzlkNDg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-09T21:44:59Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-16T18:21:37Z"}, "message": "ast: Keep string literals in ABIs precisely", "tree": {"sha": "8848a81d29817d48c21111a119637703cae0656f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8848a81d29817d48c21111a119637703cae0656f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00bc4496026a3168eed95e88c29f17dac2739d48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00bc4496026a3168eed95e88c29f17dac2739d48", "html_url": "https://github.com/rust-lang/rust/commit/00bc4496026a3168eed95e88c29f17dac2739d48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00bc4496026a3168eed95e88c29f17dac2739d48/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "266f5471272532989332117e8a2e0bacb5b94ccf", "url": "https://api.github.com/repos/rust-lang/rust/commits/266f5471272532989332117e8a2e0bacb5b94ccf", "html_url": "https://github.com/rust-lang/rust/commit/266f5471272532989332117e8a2e0bacb5b94ccf"}], "stats": {"total": 79, "additions": 49, "deletions": 30}, "files": [{"sha": "f689e7f96222f18242fdaa6f57baf1732da8ed56", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00bc4496026a3168eed95e88c29f17dac2739d48/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00bc4496026a3168eed95e88c29f17dac2739d48/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=00bc4496026a3168eed95e88c29f17dac2739d48", "patch": "@@ -1287,8 +1287,8 @@ impl LoweringContext<'_> {\n         }\n     }\n \n-    pub(super) fn lower_abi(&mut self, abi: Abi) -> abi::Abi {\n-        abi::lookup(&abi.symbol.as_str()).unwrap_or_else(|| {\n+    pub(super) fn lower_abi(&mut self, abi: StrLit) -> abi::Abi {\n+        abi::lookup(&abi.symbol_unescaped.as_str()).unwrap_or_else(|| {\n             self.error_on_invalid_abi(abi);\n             abi::Abi::Rust\n         })\n@@ -1302,7 +1302,7 @@ impl LoweringContext<'_> {\n         }\n     }\n \n-    fn error_on_invalid_abi(&self, abi: Abi) {\n+    fn error_on_invalid_abi(&self, abi: StrLit) {\n         struct_span_err!(\n             self.sess,\n             abi.span,"}, {"sha": "3b824dc939f6ebc5df4072b025025d1973aefe00", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00bc4496026a3168eed95e88c29f17dac2739d48/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00bc4496026a3168eed95e88c29f17dac2739d48/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=00bc4496026a3168eed95e88c29f17dac2739d48", "patch": "@@ -1100,7 +1100,7 @@ impl<'a> Parser<'a> {\n     fn parse_item_foreign_mod(\n         &mut self,\n         lo: Span,\n-        abi: Option<Abi>,\n+        abi: Option<StrLit>,\n         visibility: Visibility,\n         mut attrs: Vec<Attribute>,\n         extern_sp: Span,\n@@ -1778,7 +1778,7 @@ impl<'a> Parser<'a> {\n         let is_c_abi = match header.ext {\n             ast::Extern::None => false,\n             ast::Extern::Implicit => true,\n-            ast::Extern::Explicit(abi) => abi.symbol == sym::C,\n+            ast::Extern::Explicit(abi) => abi.symbol_unescaped == sym::C,\n         };\n         let (ident, decl, generics) = self.parse_fn_sig(ParamCfg {\n             is_self_allowed: false,"}, {"sha": "2b49091192c38e976e4984adbff19b004c74e4af", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/00bc4496026a3168eed95e88c29f17dac2739d48/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00bc4496026a3168eed95e88c29f17dac2739d48/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=00bc4496026a3168eed95e88c29f17dac2739d48", "patch": "@@ -15,7 +15,7 @@ use crate::{Directory, DirectoryOwnership};\n use crate::lexer::UnmatchedBrace;\n \n use syntax::ast::{\n-    self, Abi, DUMMY_NODE_ID, AttrStyle, Attribute, CrateSugar, Extern, Ident,\n+    self, DUMMY_NODE_ID, AttrStyle, Attribute, CrateSugar, Extern, Ident,\n     IsAsync, MacDelimiter, Mutability, StrStyle, Visibility, VisibilityKind, Unsafety,\n };\n \n@@ -1221,11 +1221,14 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses a string literal as an ABI spec.\n-    fn parse_opt_abi(&mut self) -> PResult<'a, Option<Abi>> {\n+    fn parse_opt_abi(&mut self) -> PResult<'a, Option<StrLit>> {\n         if self.token.can_begin_literal_or_bool() {\n-            let ast::Lit { span, kind, .. } = self.parse_lit()?;\n+            let ast::Lit { token: token::Lit { symbol, suffix, .. }, span, kind }\n+                = self.parse_lit()?;\n             match kind {\n-                ast::LitKind::Str(symbol, _) => return Ok(Some(Abi { symbol, span })),\n+                ast::LitKind::Str(symbol_unescaped, style) => return Ok(Some(StrLit {\n+                    style, symbol, suffix, span, symbol_unescaped,\n+                })),\n                 ast::LitKind::Err(_) => {}\n                 _ => {\n                     self.struct_span_err(span, \"non-string ABI literal\")"}, {"sha": "dee493a708e491a2bc82f574568aa4166aeab35d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/00bc4496026a3168eed95e88c29f17dac2739d48/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00bc4496026a3168eed95e88c29f17dac2739d48/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=00bc4496026a3168eed95e88c29f17dac2739d48", "patch": "@@ -1422,6 +1422,33 @@ pub struct Lit {\n     pub span: Span,\n }\n \n+/// Same as `Lit`, but restricted to string literals.\n+#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug)]\n+pub struct StrLit {\n+    /// The original literal token as written in source code.\n+    pub style: StrStyle,\n+    pub symbol: Symbol,\n+    pub suffix: Option<Symbol>,\n+    pub span: Span,\n+    /// The unescaped \"semantic\" representation of the literal lowered from the original token.\n+    /// FIXME: Remove this and only create the semantic representation during lowering to HIR.\n+    pub symbol_unescaped: Symbol,\n+}\n+\n+impl StrLit {\n+    crate fn as_lit(&self) -> Lit {\n+        let token_kind = match self.style {\n+            StrStyle::Cooked => token::Str,\n+            StrStyle::Raw(n) => token::StrRaw(n),\n+        };\n+        Lit {\n+            token: token::Lit::new(token_kind, self.symbol, self.suffix),\n+            span: self.span,\n+            kind: LitKind::Str(self.symbol_unescaped, self.style),\n+        }\n+    }\n+}\n+\n // Clippy uses Hash and PartialEq\n /// Type of the integer literal based on provided suffix.\n #[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug, Hash, PartialEq)]\n@@ -2128,7 +2155,7 @@ pub struct Mod {\n /// E.g., `extern { .. }` or `extern C { .. }`.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct ForeignMod {\n-    pub abi: Option<Abi>,\n+    pub abi: Option<StrLit>,\n     pub items: Vec<ForeignItem>,\n }\n \n@@ -2411,25 +2438,16 @@ impl Item {\n     }\n }\n \n-/// A reference to an ABI.\n-///\n-/// In AST our notion of an ABI is still syntactic unlike in `rustc_target::spec::abi::Abi`.\n-#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug, PartialEq)]\n-pub struct Abi {\n-    pub symbol: Symbol,\n-    pub span: Span,\n-}\n-\n /// `extern` qualifier on a function item or function type.\n #[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug)]\n pub enum Extern {\n     None,\n     Implicit,\n-    Explicit(Abi),\n+    Explicit(StrLit),\n }\n \n impl Extern {\n-    pub fn from_abi(abi: Option<Abi>) -> Extern {\n+    pub fn from_abi(abi: Option<StrLit>) -> Extern {\n         match abi {\n             Some(abi) => Extern::Explicit(abi),\n             None => Extern::Implicit,"}, {"sha": "abf9adefd3c44328d1c0bc2e957fde7478089a90", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00bc4496026a3168eed95e88c29f17dac2739d48/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00bc4496026a3168eed95e88c29f17dac2739d48/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=00bc4496026a3168eed95e88c29f17dac2739d48", "patch": "@@ -191,10 +191,10 @@ macro_rules! gate_feature_post {\n }\n \n impl<'a> PostExpansionVisitor<'a> {\n-    fn check_abi(&self, abi: ast::Abi) {\n-        let ast::Abi { symbol, span } = abi;\n+    fn check_abi(&self, abi: ast::StrLit) {\n+        let ast::StrLit { symbol_unescaped, span, .. } = abi;\n \n-        match &*symbol.as_str() {\n+        match &*symbol_unescaped.as_str() {\n             // Stable\n             \"Rust\" |\n             \"C\" |"}, {"sha": "17a7cbddff9cc3e420eb87c68b577e745f0766ab", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00bc4496026a3168eed95e88c29f17dac2739d48/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00bc4496026a3168eed95e88c29f17dac2739d48/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=00bc4496026a3168eed95e88c29f17dac2739d48", "patch": "@@ -1233,7 +1233,8 @@ impl<'a> State<'a> {\n             ast::ItemKind::ForeignMod(ref nmod) => {\n                 self.head(\"extern\");\n                 if let Some(abi) = nmod.abi {\n-                    self.print_abi(abi);\n+                    self.print_literal(&abi.as_lit());\n+                    self.nbsp();\n                 }\n                 self.bopen();\n                 self.print_foreign_mod(nmod, &item.attrs);\n@@ -2875,17 +2876,14 @@ impl<'a> State<'a> {\n             }\n             ast::Extern::Explicit(abi) => {\n                 self.word_nbsp(\"extern\");\n-                self.print_abi(abi);\n+                self.print_literal(&abi.as_lit());\n+                self.nbsp();\n             }\n         }\n \n         self.s.word(\"fn\")\n     }\n \n-    fn print_abi(&mut self, abi: ast::Abi) {\n-        self.word_nbsp(format!(\"\\\"{}\\\"\", abi.symbol));\n-    }\n-\n     crate fn print_unsafety(&mut self, s: ast::Unsafety) {\n         match s {\n             ast::Unsafety::Normal => {},"}]}