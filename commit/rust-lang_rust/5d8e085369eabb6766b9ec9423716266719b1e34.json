{"sha": "5d8e085369eabb6766b9ec9423716266719b1e34", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkOGUwODUzNjllYWJiNjc2NmI5ZWM5NDIzNzE2MjY2NzE5YjFlMzQ=", "commit": {"author": {"name": "Mathieu David", "email": "mathieudavid@mathieudavid.org", "date": "2015-05-30T09:51:25Z"}, "committer": {"name": "Mathieu David", "email": "mathieudavid@mathieudavid.org", "date": "2015-05-30T09:51:25Z"}, "message": "Proposal to explain the copy trait more clearly \n\nAs mentioned in #25893 the copy trait is not very well explained for beginners. There is no clear mention that all primitive types implement the copy trait and there are not a lot of examples. \r\n\r\nWith this change I try to make it more visible and understandable for new users. \r\n\r\nI myself have struggled with this, see [my question on stackoverflow](http://stackoverflow.com/questions/30540419/why-are-booleans-copyable-even-though-the-documentation-doesnt-indicate-that). And I want to make it more transparent for others. \r\n\r\nI filed issue #25893 but I thought that I could give it a shot myself to relieve some of the work from the devs :)\r\n\r\nIf it is not well written or there are some changes to be made before it can be merged, let me know.\r\n\r\nCheers,\r\nMathieu", "tree": {"sha": "2272e796cb738b5f02dd86aec6177f8e6caf3f54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2272e796cb738b5f02dd86aec6177f8e6caf3f54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d8e085369eabb6766b9ec9423716266719b1e34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d8e085369eabb6766b9ec9423716266719b1e34", "html_url": "https://github.com/rust-lang/rust/commit/5d8e085369eabb6766b9ec9423716266719b1e34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d8e085369eabb6766b9ec9423716266719b1e34/comments", "author": {"login": "azerupi", "id": 7647338, "node_id": "MDQ6VXNlcjc2NDczMzg=", "avatar_url": "https://avatars.githubusercontent.com/u/7647338?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azerupi", "html_url": "https://github.com/azerupi", "followers_url": "https://api.github.com/users/azerupi/followers", "following_url": "https://api.github.com/users/azerupi/following{/other_user}", "gists_url": "https://api.github.com/users/azerupi/gists{/gist_id}", "starred_url": "https://api.github.com/users/azerupi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azerupi/subscriptions", "organizations_url": "https://api.github.com/users/azerupi/orgs", "repos_url": "https://api.github.com/users/azerupi/repos", "events_url": "https://api.github.com/users/azerupi/events{/privacy}", "received_events_url": "https://api.github.com/users/azerupi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "azerupi", "id": 7647338, "node_id": "MDQ6VXNlcjc2NDczMzg=", "avatar_url": "https://avatars.githubusercontent.com/u/7647338?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azerupi", "html_url": "https://github.com/azerupi", "followers_url": "https://api.github.com/users/azerupi/followers", "following_url": "https://api.github.com/users/azerupi/following{/other_user}", "gists_url": "https://api.github.com/users/azerupi/gists{/gist_id}", "starred_url": "https://api.github.com/users/azerupi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azerupi/subscriptions", "organizations_url": "https://api.github.com/users/azerupi/orgs", "repos_url": "https://api.github.com/users/azerupi/repos", "events_url": "https://api.github.com/users/azerupi/events{/privacy}", "received_events_url": "https://api.github.com/users/azerupi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "474c6e0ae47578b3e608c893e18bc83798b565aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/474c6e0ae47578b3e608c893e18bc83798b565aa", "html_url": "https://github.com/rust-lang/rust/commit/474c6e0ae47578b3e608c893e18bc83798b565aa"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "e94fe033407413095d15c28324ca2244e83dbead", "filename": "src/doc/trpl/ownership.md", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5d8e085369eabb6766b9ec9423716266719b1e34/src%2Fdoc%2Ftrpl%2Fownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/5d8e085369eabb6766b9ec9423716266719b1e34/src%2Fdoc%2Ftrpl%2Fownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fownership.md?ref=5d8e085369eabb6766b9ec9423716266719b1e34", "patch": "@@ -156,6 +156,49 @@ that, just like a move, when we assign `v` to `v2`, a copy of the data is made.\n But, unlike a move, we can still use `v` afterward. This is because an `i32`\n has no pointers to data somewhere else, copying it is a full copy.\n \n+All primitive types implement the `Copy` trait and their ownership is\n+therefore not moved like one would assume, following the **ownership rules**.\n+To give an example, the two following snippets of code only compile because the \n+`i32` and `bool` types implement the `Copy` trait. \n+\n+```rust\n+fn main() {\n+    let a = 5;\n+\n+    let _y = double(a);\n+    println!(\"{}\", a);\n+}\n+\n+fn double(x: i32) -> i32 {\n+    x * 2\n+}\n+```\n+\n+```rust\n+fn main() {\n+    let a = true;\n+\n+    let _y = change_truth(a);\n+    println!(\"{}\", a);\n+}\n+\n+fn change_truth(x: bool) -> bool {\n+    !x\n+}\n+```\n+\n+If we would have used types that do not implement the `Copy` trait,\n+we would have gotten a compile error because we tried to use a moved value.\n+\n+```text\n+error: use of moved value: `a`\n+println!(\"{}\", a);\n+               ^\n+```\n+\n+This is quite important to understand, because it is an exception to the most \n+fundamental rule in the Rust language.\n+\n We will discuss how to make your own types `Copy` in the [traits][traits]\n section.\n "}]}