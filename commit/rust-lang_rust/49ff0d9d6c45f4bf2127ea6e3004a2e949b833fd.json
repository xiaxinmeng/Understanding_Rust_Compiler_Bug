{"sha": "49ff0d9d6c45f4bf2127ea6e3004a2e949b833fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ZmYwZDlkNmM0NWY0YmYyMTI3ZWE2ZTMwMDRhMmU5NDliODMzZmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-21T13:48:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-21T13:48:30Z"}, "message": "Auto merge of #4292 - mikerite:fix-breakage-20190721, r=matthiaskrgr\n\nFix breakage due to rust-lang/rust#62705\n\nAlso rename `OUTER_EXPN_INFO` to `OUTER_EXPN_EXPN_INFO` to match new\nfunction names.\n\nchangelog: none", "tree": {"sha": "d2449b985330c7f20b67d29084d6df1a5cac87f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2449b985330c7f20b67d29084d6df1a5cac87f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49ff0d9d6c45f4bf2127ea6e3004a2e949b833fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49ff0d9d6c45f4bf2127ea6e3004a2e949b833fd", "html_url": "https://github.com/rust-lang/rust/commit/49ff0d9d6c45f4bf2127ea6e3004a2e949b833fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49ff0d9d6c45f4bf2127ea6e3004a2e949b833fd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd4c4e7e731d8894d4345f64070ef48a6171744c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd4c4e7e731d8894d4345f64070ef48a6171744c", "html_url": "https://github.com/rust-lang/rust/commit/bd4c4e7e731d8894d4345f64070ef48a6171744c"}, {"sha": "f05e295685d56a59fbc220e281f022c7a3db4306", "url": "https://api.github.com/repos/rust-lang/rust/commits/f05e295685d56a59fbc220e281f022c7a3db4306", "html_url": "https://github.com/rust-lang/rust/commit/f05e295685d56a59fbc220e281f022c7a3db4306"}], "stats": {"total": 70, "additions": 42, "deletions": 28}, "files": [{"sha": "6d90d315f00544b7962ccec7b9eca60697fce20b", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/49ff0d9d6c45f4bf2127ea6e3004a2e949b833fd/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ff0d9d6c45f4bf2127ea6e3004a2e949b833fd/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=49ff0d9d6c45f4bf2127ea6e3004a2e949b833fd", "patch": "@@ -1,6 +1,7 @@\n // error-pattern:cargo-clippy\n \n #![feature(box_syntax)]\n+#![feature(box_patterns)]\n #![feature(never_type)]\n #![feature(rustc_private)]\n #![feature(slice_patterns)]\n@@ -668,7 +669,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         utils::internal_lints::CLIPPY_LINTS_INTERNAL,\n         utils::internal_lints::COMPILER_LINT_FUNCTIONS,\n         utils::internal_lints::LINT_WITHOUT_LINT_PASS,\n-        utils::internal_lints::OUTER_EXPN_INFO,\n+        utils::internal_lints::OUTER_EXPN_EXPN_INFO,\n     ]);\n \n     reg.register_lint_group(\"clippy::all\", Some(\"clippy\"), vec!["}, {"sha": "d24a20b079d1d64c683f63f2fc0e23417cae6531", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 29, "deletions": 16, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/49ff0d9d6c45f4bf2127ea6e3004a2e949b833fd/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ff0d9d6c45f4bf2127ea6e3004a2e949b833fd/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=49ff0d9d6c45f4bf2127ea6e3004a2e949b833fd", "patch": "@@ -132,7 +132,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n                 let pred_arg = if_chain! {\n                     if let Some((pred_fn_def_id, pred_arg, pred_arg_ty, Some(res))) =\n                         is_call_with_ref_arg(cx, mir, &pred_terminator.kind);\n-                    if *res == mir::Place::Base(mir::PlaceBase::Local(cloned));\n+                    if res.base == mir::PlaceBase::Local(cloned);\n                     if match_def_path(cx, pred_fn_def_id, &paths::DEREF_TRAIT_METHOD);\n                     if match_type(cx, pred_arg_ty, &paths::PATH_BUF)\n                         || match_type(cx, pred_arg_ty, &paths::OS_STRING);\n@@ -218,7 +218,7 @@ fn is_call_with_ref_arg<'tcx>(\n     if_chain! {\n         if let TerminatorKind::Call { func, args, destination, .. } = kind;\n         if args.len() == 1;\n-        if let mir::Operand::Move(mir::Place::Base(mir::PlaceBase::Local(local))) = &args[0];\n+        if let mir::Operand::Move(mir::Place { base: mir::PlaceBase::Local(local), .. }) = &args[0];\n         if let ty::FnDef(def_id, _) = func.ty(&*mir, cx.tcx).sty;\n         if let (inner_ty, 1) = walk_ptrs_ty_depth(args[0].ty(&*mir, cx.tcx));\n         if !is_copy(cx, inner_ty);\n@@ -244,7 +244,14 @@ fn find_stmt_assigns_to<'a, 'tcx: 'a>(\n     stmts\n         .rev()\n         .find_map(|stmt| {\n-            if let mir::StatementKind::Assign(mir::Place::Base(mir::PlaceBase::Local(local)), v) = &stmt.kind {\n+            if let mir::StatementKind::Assign(\n+                mir::Place {\n+                    base: mir::PlaceBase::Local(local),\n+                    ..\n+                },\n+                v,\n+            ) = &stmt.kind\n+            {\n                 if *local == to {\n                     return Some(v);\n                 }\n@@ -271,28 +278,34 @@ fn find_stmt_assigns_to<'a, 'tcx: 'a>(\n fn base_local_and_movability<'tcx>(\n     cx: &LateContext<'_, 'tcx>,\n     mir: &mir::Body<'tcx>,\n-    mut place: &mir::Place<'tcx>,\n+    place: &mir::Place<'tcx>,\n ) -> Option<(mir::Local, CannotMoveOut)> {\n-    use rustc::mir::Place::*;\n+    use rustc::mir::Place;\n     use rustc::mir::PlaceBase;\n+    use rustc::mir::PlaceRef;\n+    use rustc::mir::Projection;\n \n     // Dereference. You cannot move things out from a borrowed value.\n     let mut deref = false;\n     // Accessing a field of an ADT that has `Drop`. Moving the field out will cause E0509.\n     let mut field = false;\n \n-    loop {\n-        match place {\n-            Base(PlaceBase::Local(local)) => return Some((*local, deref || field)),\n-            Projection(proj) => {\n-                place = &proj.base;\n-                deref = deref || matches!(proj.elem, mir::ProjectionElem::Deref);\n-                if !field && matches!(proj.elem, mir::ProjectionElem::Field(..)) {\n-                    field = has_drop(cx, place.ty(&mir.local_decls, cx.tcx).ty);\n-                }\n-            },\n-            _ => return None,\n+    let PlaceRef {\n+        base: place_base,\n+        mut projection,\n+    } = place.as_place_ref();\n+    if let PlaceBase::Local(local) = place_base {\n+        while let Some(box Projection { base, elem }) = projection {\n+            projection = base;\n+            deref = matches!(elem, mir::ProjectionElem::Deref);\n+            field = !field\n+                && matches!(elem, mir::ProjectionElem::Field(..))\n+                && has_drop(cx, Place::ty_from(place_base, projection, &mir.local_decls, cx.tcx).ty);\n         }\n+\n+        Some((*local, deref || field))\n+    } else {\n+        None\n     }\n }\n "}, {"sha": "6393bf2add47ce5480953767100f106f377e75fe", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/49ff0d9d6c45f4bf2127ea6e3004a2e949b833fd/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ff0d9d6c45f4bf2127ea6e3004a2e949b833fd/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=49ff0d9d6c45f4bf2127ea6e3004a2e949b833fd", "patch": "@@ -93,9 +93,9 @@ declare_clippy_lint! {\n     /// ```rust\n     /// expr.span.ctxt().outer_expn_info()\n     /// ```\n-    pub OUTER_EXPN_INFO,\n+    pub OUTER_EXPN_EXPN_INFO,\n     internal,\n-    \"using `cx.outer().expn_info()` instead of `cx.outer_expn_info()`\"\n+    \"using `cx.outer_expn().expn_info()` instead of `cx.outer_expn_info()`\"\n }\n \n declare_lint_pass!(ClippyLintsInternal => [CLIPPY_LINTS_INTERNAL]);\n@@ -280,15 +280,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CompilerLintFunctions {\n \n pub struct OuterExpnInfoPass;\n \n-impl_lint_pass!(OuterExpnInfoPass => [OUTER_EXPN_INFO]);\n+impl_lint_pass!(OuterExpnInfoPass => [OUTER_EXPN_EXPN_INFO]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OuterExpnInfoPass {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n         let (method_names, arg_lists) = method_calls(expr, 2);\n         let method_names: Vec<LocalInternedString> = method_names.iter().map(|s| s.as_str()).collect();\n         let method_names: Vec<&str> = method_names.iter().map(std::convert::AsRef::as_ref).collect();\n         if_chain! {\n-            if let [\"expn_info\", \"outer\"] = method_names.as_slice();\n+            if let [\"expn_info\", \"outer_expn\"] = method_names.as_slice();\n             let args = arg_lists[1];\n             if args.len() == 1;\n             let self_arg = &args[0];\n@@ -297,9 +297,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OuterExpnInfoPass {\n             then {\n                 span_lint_and_sugg(\n                     cx,\n-                    OUTER_EXPN_INFO,\n+                    OUTER_EXPN_EXPN_INFO,\n                     expr.span.trim_start(self_arg.span).unwrap_or(expr.span),\n-                    \"usage of `outer().expn_info()`\",\n+                    \"usage of `outer_expn().expn_info()`\",\n                     \"try\",\n                     \".outer_expn_info()\".to_string(),\n                     Applicability::MachineApplicable,"}, {"sha": "ed0542c9298b1af3cc6d1fa6ce4fb023057fdb92", "filename": "tests/ui/outer_expn_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49ff0d9d6c45f4bf2127ea6e3004a2e949b833fd/tests%2Fui%2Fouter_expn_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ff0d9d6c45f4bf2127ea6e3004a2e949b833fd/tests%2Fui%2Fouter_expn_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fouter_expn_info.rs?ref=49ff0d9d6c45f4bf2127ea6e3004a2e949b833fd", "patch": "@@ -16,7 +16,7 @@ declare_lint_pass!(Pass => [TEST_LINT]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     fn check_expr(&mut self, _cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        let _ = expr.span.ctxt().outer().expn_info();\n+        let _ = expr.span.ctxt().outer_expn().expn_info();\n     }\n }\n "}, {"sha": "4bbd1493dc4f8bd82200f1076c20d4bb3b84f41b", "filename": "tests/ui/outer_expn_info.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49ff0d9d6c45f4bf2127ea6e3004a2e949b833fd/tests%2Fui%2Fouter_expn_info.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49ff0d9d6c45f4bf2127ea6e3004a2e949b833fd/tests%2Fui%2Fouter_expn_info.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fouter_expn_info.stderr?ref=49ff0d9d6c45f4bf2127ea6e3004a2e949b833fd", "patch": "@@ -1,15 +1,15 @@\n-error: usage of `outer().expn_info()`\n+error: usage of `outer_expn().expn_info()`\n   --> $DIR/outer_expn_info.rs:19:33\n    |\n-LL |         let _ = expr.span.ctxt().outer().expn_info();\n-   |                                 ^^^^^^^^^^^^^^^^^^^^ help: try: `.outer_expn_info()`\n+LL |         let _ = expr.span.ctxt().outer_expn().expn_info();\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.outer_expn_info()`\n    |\n note: lint level defined here\n   --> $DIR/outer_expn_info.rs:1:9\n    |\n LL | #![deny(clippy::internal)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: `#[deny(clippy::outer_expn_info)]` implied by `#[deny(clippy::internal)]`\n+   = note: `#[deny(clippy::outer_expn_expn_info)]` implied by `#[deny(clippy::internal)]`\n \n error: aborting due to previous error\n "}]}