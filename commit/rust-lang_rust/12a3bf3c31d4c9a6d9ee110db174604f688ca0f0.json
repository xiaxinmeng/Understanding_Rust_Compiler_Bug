{"sha": "12a3bf3c31d4c9a6d9ee110db174604f688ca0f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyYTNiZjNjMzFkNGM5YTZkOWVlMTEwZGIxNzQ2MDRmNjg4Y2EwZjA=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-05-17T15:37:30Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-05-17T15:37:30Z"}, "message": "Create LowerCtx on the fly", "tree": {"sha": "951a9cffac26108963a42f31c44739aa3700d8c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/951a9cffac26108963a42f31c44739aa3700d8c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12a3bf3c31d4c9a6d9ee110db174604f688ca0f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12a3bf3c31d4c9a6d9ee110db174604f688ca0f0", "html_url": "https://github.com/rust-lang/rust/commit/12a3bf3c31d4c9a6d9ee110db174604f688ca0f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12a3bf3c31d4c9a6d9ee110db174604f688ca0f0/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebaa05a4478096aaf3bc2a48d0d171a287422c7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebaa05a4478096aaf3bc2a48d0d171a287422c7c", "html_url": "https://github.com/rust-lang/rust/commit/ebaa05a4478096aaf3bc2a48d0d171a287422c7c"}], "stats": {"total": 50, "additions": 41, "deletions": 9}, "files": [{"sha": "c69e0efea6c7ce7ac3d72fad34e1a9c9890a7d25", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/12a3bf3c31d4c9a6d9ee110db174604f688ca0f0/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12a3bf3c31d4c9a6d9ee110db174604f688ca0f0/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=12a3bf3c31d4c9a6d9ee110db174604f688ca0f0", "patch": "@@ -60,13 +60,10 @@ pub(super) fn lower(\n     params: Option<ast::ParamList>,\n     body: Option<ast::Expr>,\n ) -> (Body, BodySourceMap) {\n-    let ctx = LowerCtx::new(db, expander.current_file_id.clone());\n-\n     ExprCollector {\n         db,\n         def,\n         expander,\n-        ctx,\n         source_map: BodySourceMap::default(),\n         body: Body {\n             exprs: Arena::default(),\n@@ -83,7 +80,6 @@ struct ExprCollector<'a> {\n     db: &'a dyn DefDatabase,\n     def: DefWithBodyId,\n     expander: Expander,\n-    ctx: LowerCtx,\n     body: Body,\n     source_map: BodySourceMap,\n }\n@@ -122,6 +118,10 @@ impl ExprCollector<'_> {\n         (self.body, self.source_map)\n     }\n \n+    fn ctx(&self) -> LowerCtx {\n+        LowerCtx::new(self.db, self.expander.current_file_id)\n+    }\n+\n     fn alloc_expr(&mut self, expr: Expr, ptr: AstPtr<ast::Expr>) -> ExprId {\n         let src = self.expander.to_source(ptr);\n         let id = self.make_expr(expr, Ok(src.clone()));\n@@ -268,7 +268,7 @@ impl ExprCollector<'_> {\n                 };\n                 let method_name = e.name_ref().map(|nr| nr.as_name()).unwrap_or_else(Name::missing);\n                 let generic_args =\n-                    e.type_arg_list().and_then(|it| GenericArgs::from_ast(&self.ctx, it));\n+                    e.type_arg_list().and_then(|it| GenericArgs::from_ast(&self.ctx(), it));\n                 self.alloc_expr(\n                     Expr::MethodCall { receiver, method_name, args, generic_args },\n                     syntax_ptr,\n@@ -373,7 +373,7 @@ impl ExprCollector<'_> {\n             }\n             ast::Expr::CastExpr(e) => {\n                 let expr = self.collect_expr_opt(e.expr());\n-                let type_ref = TypeRef::from_ast_opt(&self.ctx, e.type_ref());\n+                let type_ref = TypeRef::from_ast_opt(&self.ctx(), e.type_ref());\n                 self.alloc_expr(Expr::Cast { expr, type_ref }, syntax_ptr)\n             }\n             ast::Expr::RefExpr(e) => {\n@@ -396,15 +396,15 @@ impl ExprCollector<'_> {\n                     for param in pl.params() {\n                         let pat = self.collect_pat_opt(param.pat());\n                         let type_ref =\n-                            param.ascribed_type().map(|it| TypeRef::from_ast(&self.ctx, it));\n+                            param.ascribed_type().map(|it| TypeRef::from_ast(&self.ctx(), it));\n                         args.push(pat);\n                         arg_types.push(type_ref);\n                     }\n                 }\n                 let ret_type = e\n                     .ret_type()\n                     .and_then(|r| r.type_ref())\n-                    .map(|it| TypeRef::from_ast(&self.ctx, it));\n+                    .map(|it| TypeRef::from_ast(&self.ctx(), it));\n                 let body = self.collect_expr_opt(e.body());\n                 self.alloc_expr(Expr::Lambda { args, arg_types, ret_type, body }, syntax_ptr)\n             }\n@@ -507,7 +507,8 @@ impl ExprCollector<'_> {\n             .map(|s| match s {\n                 ast::Stmt::LetStmt(stmt) => {\n                     let pat = self.collect_pat_opt(stmt.pat());\n-                    let type_ref = stmt.ascribed_type().map(|it| TypeRef::from_ast(&self.ctx, it));\n+                    let type_ref =\n+                        stmt.ascribed_type().map(|it| TypeRef::from_ast(&self.ctx(), it));\n                     let initializer = stmt.initializer().map(|e| self.collect_expr(e));\n                     Statement::Let { pat, type_ref, initializer }\n                 }"}, {"sha": "c2168222ee54c336c1c3f6e24b33bfbdaf1d8009", "filename": "crates/ra_hir_ty/src/tests/regression.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/12a3bf3c31d4c9a6d9ee110db174604f688ca0f0/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12a3bf3c31d4c9a6d9ee110db174604f688ca0f0/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=12a3bf3c31d4c9a6d9ee110db174604f688ca0f0", "patch": "@@ -563,6 +563,37 @@ fn main() {\n     );\n }\n \n+#[test]\n+fn issue_4465_dollar_crate_at_type() {\n+    assert_snapshot!(\n+        infer(r#\"\n+pub struct Foo {}\n+pub fn anything<T>() -> T {\n+    loop {}\n+}\n+macro_rules! foo {\n+    () => {{\n+        let r: $crate::Foo = anything();\n+        r\n+    }};\n+}\n+fn main() {\n+    let _a = foo!();\n+}\n+\"#), @r###\"\n+    45..60 '{     loop {} }': T\n+    51..58 'loop {}': !\n+    56..58 '{}': ()\n+    !0..31 '{letr:...g();r}': Foo\n+    !4..5 'r': Foo\n+    !18..26 'anything': fn anything<Foo>() -> Foo\n+    !18..28 'anything()': Foo\n+    !29..30 'r': Foo\n+    164..188 '{     ...!(); }': ()\n+    174..176 '_a': Foo\n+\"###);\n+}\n+\n #[test]\n fn issue_4053_diesel_where_clauses() {\n     assert_snapshot!("}]}