{"sha": "d9dc1679f50344e60a69e4e7f93acb8081d009a4", "node_id": "C_kwDOAAsO6NoAKGQ5ZGMxNjc5ZjUwMzQ0ZTYwYTY5ZTRlN2Y5M2FjYjgwODFkMDA5YTQ", "commit": {"author": {"name": "Samuel Tardieu", "email": "sam@rfc1149.net", "date": "2023-02-12T07:51:33Z"}, "committer": {"name": "Samuel Tardieu", "email": "sam@rfc1149.net", "date": "2023-02-12T07:56:21Z"}, "message": "cast_possible_truncation: issue proper help message", "tree": {"sha": "20975f79377e5e0ebfc55c7af10a1ac3559e841b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20975f79377e5e0ebfc55c7af10a1ac3559e841b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9dc1679f50344e60a69e4e7f93acb8081d009a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9dc1679f50344e60a69e4e7f93acb8081d009a4", "html_url": "https://github.com/rust-lang/rust/commit/d9dc1679f50344e60a69e4e7f93acb8081d009a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9dc1679f50344e60a69e4e7f93acb8081d009a4/comments", "author": {"login": "samueltardieu", "id": 44656, "node_id": "MDQ6VXNlcjQ0NjU2", "avatar_url": "https://avatars.githubusercontent.com/u/44656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samueltardieu", "html_url": "https://github.com/samueltardieu", "followers_url": "https://api.github.com/users/samueltardieu/followers", "following_url": "https://api.github.com/users/samueltardieu/following{/other_user}", "gists_url": "https://api.github.com/users/samueltardieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/samueltardieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samueltardieu/subscriptions", "organizations_url": "https://api.github.com/users/samueltardieu/orgs", "repos_url": "https://api.github.com/users/samueltardieu/repos", "events_url": "https://api.github.com/users/samueltardieu/events{/privacy}", "received_events_url": "https://api.github.com/users/samueltardieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "samueltardieu", "id": 44656, "node_id": "MDQ6VXNlcjQ0NjU2", "avatar_url": "https://avatars.githubusercontent.com/u/44656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samueltardieu", "html_url": "https://github.com/samueltardieu", "followers_url": "https://api.github.com/users/samueltardieu/followers", "following_url": "https://api.github.com/users/samueltardieu/following{/other_user}", "gists_url": "https://api.github.com/users/samueltardieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/samueltardieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samueltardieu/subscriptions", "organizations_url": "https://api.github.com/users/samueltardieu/orgs", "repos_url": "https://api.github.com/users/samueltardieu/repos", "events_url": "https://api.github.com/users/samueltardieu/events{/privacy}", "received_events_url": "https://api.github.com/users/samueltardieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f7558148c22e53cd4608773b56cdfa50dcdeac3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f7558148c22e53cd4608773b56cdfa50dcdeac3", "html_url": "https://github.com/rust-lang/rust/commit/0f7558148c22e53cd4608773b56cdfa50dcdeac3"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "823970e35abbd011ef947e47cd8e80cb1781dd99", "filename": "clippy_lints/src/casts/cast_possible_truncation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9dc1679f50344e60a69e4e7f93acb8081d009a4/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9dc1679f50344e60a69e4e7f93acb8081d009a4/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs?ref=d9dc1679f50344e60a69e4e7f93acb8081d009a4", "patch": "@@ -168,7 +168,7 @@ pub(super) fn check(\n     let suggestion = format!(\"{cast_to_snip}::try_from({name_of_cast_from})\");\n \n     span_lint_and_then(cx, CAST_POSSIBLE_TRUNCATION, expr.span, &msg, |diag| {\n-        diag.help(\"if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\");\n+        diag.help(\"if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\");\n         diag.span_suggestion_with_style(\n             expr.span,\n             \"... or use `try_from` and handle the error accordingly\","}, {"sha": "451078de23b22cea71088fb87e8f8c78ae03cf45", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d9dc1679f50344e60a69e4e7f93acb8081d009a4/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9dc1679f50344e60a69e4e7f93acb8081d009a4/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=d9dc1679f50344e60a69e4e7f93acb8081d009a4", "patch": "@@ -42,7 +42,7 @@ error: casting `f32` to `i32` may truncate the value\n LL |     1f32 as i32;\n    |     ^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n    = note: `-D clippy::cast-possible-truncation` implied by `-D warnings`\n help: ... or use `try_from` and handle the error accordingly\n    |\n@@ -55,7 +55,7 @@ error: casting `f32` to `u32` may truncate the value\n LL |     1f32 as u32;\n    |     ^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     u32::try_from(1f32);\n@@ -75,7 +75,7 @@ error: casting `f64` to `f32` may truncate the value\n LL |     1f64 as f32;\n    |     ^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     f32::try_from(1f64);\n@@ -87,7 +87,7 @@ error: casting `i32` to `i8` may truncate the value\n LL |     1i32 as i8;\n    |     ^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     i8::try_from(1i32);\n@@ -99,7 +99,7 @@ error: casting `i32` to `u8` may truncate the value\n LL |     1i32 as u8;\n    |     ^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     u8::try_from(1i32);\n@@ -111,7 +111,7 @@ error: casting `f64` to `isize` may truncate the value\n LL |     1f64 as isize;\n    |     ^^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     isize::try_from(1f64);\n@@ -123,7 +123,7 @@ error: casting `f64` to `usize` may truncate the value\n LL |     1f64 as usize;\n    |     ^^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     usize::try_from(1f64);\n@@ -141,7 +141,7 @@ error: casting `u32` to `u16` may truncate the value\n LL |     1f32 as u32 as u16;\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     u16::try_from(1f32 as u32);\n@@ -153,7 +153,7 @@ error: casting `f32` to `u32` may truncate the value\n LL |     1f32 as u32 as u16;\n    |     ^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     u32::try_from(1f32) as u16;\n@@ -215,7 +215,7 @@ error: casting `i64` to `i8` may truncate the value\n LL |     (-99999999999i64).min(1) as i8; // should be linted because signed\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     i8::try_from((-99999999999i64).min(1)); // should be linted because signed\n@@ -227,7 +227,7 @@ error: casting `u64` to `u8` may truncate the value\n LL |     999999u64.clamp(0, 256) as u8; // should still be linted\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     u8::try_from(999999u64.clamp(0, 256)); // should still be linted\n@@ -239,7 +239,7 @@ error: casting `main::E2` to `u8` may truncate the value\n LL |             let _ = self as u8;\n    |                     ^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |             let _ = u8::try_from(self);\n@@ -259,7 +259,7 @@ error: casting `main::E5` to `i8` may truncate the value\n LL |             let _ = self as i8;\n    |                     ^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |             let _ = i8::try_from(self);\n@@ -277,7 +277,7 @@ error: casting `main::E6` to `i16` may truncate the value\n LL |             let _ = self as i16;\n    |                     ^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |             let _ = i16::try_from(self);\n@@ -289,7 +289,7 @@ error: casting `main::E7` to `usize` may truncate the value on targets with 32-b\n LL |             let _ = self as usize;\n    |                     ^^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |             let _ = usize::try_from(self);\n@@ -301,7 +301,7 @@ error: casting `main::E10` to `u16` may truncate the value\n LL |             let _ = self as u16;\n    |                     ^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |             let _ = u16::try_from(self);\n@@ -313,7 +313,7 @@ error: casting `u32` to `u8` may truncate the value\n LL |     let c = (q >> 16) as u8;\n    |             ^^^^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     let c = u8::try_from((q >> 16));\n@@ -325,7 +325,7 @@ error: casting `u32` to `u8` may truncate the value\n LL |     let c = (q / 1000) as u8;\n    |             ^^^^^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     let c = u8::try_from((q / 1000));"}, {"sha": "6d2d49d9ed2088a80d8db7ece441a75531911d43", "filename": "tests/ui/cast_size.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d9dc1679f50344e60a69e4e7f93acb8081d009a4/tests%2Fui%2Fcast_size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9dc1679f50344e60a69e4e7f93acb8081d009a4/tests%2Fui%2Fcast_size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_size.stderr?ref=d9dc1679f50344e60a69e4e7f93acb8081d009a4", "patch": "@@ -4,7 +4,7 @@ error: casting `isize` to `i8` may truncate the value\n LL |     1isize as i8;\n    |     ^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n    = note: `-D clippy::cast-possible-truncation` implied by `-D warnings`\n help: ... or use `try_from` and handle the error accordingly\n    |\n@@ -43,7 +43,7 @@ error: casting `isize` to `i32` may truncate the value on targets with 64-bit wi\n LL |     1isize as i32;\n    |     ^^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     i32::try_from(1isize);\n@@ -55,7 +55,7 @@ error: casting `isize` to `u32` may truncate the value on targets with 64-bit wi\n LL |     1isize as u32;\n    |     ^^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     u32::try_from(1isize);\n@@ -67,7 +67,7 @@ error: casting `usize` to `u32` may truncate the value on targets with 64-bit wi\n LL |     1usize as u32;\n    |     ^^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     u32::try_from(1usize);\n@@ -79,7 +79,7 @@ error: casting `usize` to `i32` may truncate the value on targets with 64-bit wi\n LL |     1usize as i32;\n    |     ^^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     i32::try_from(1usize);\n@@ -99,7 +99,7 @@ error: casting `i64` to `isize` may truncate the value on targets with 32-bit wi\n LL |     1i64 as isize;\n    |     ^^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     isize::try_from(1i64);\n@@ -111,7 +111,7 @@ error: casting `i64` to `usize` may truncate the value on targets with 32-bit wi\n LL |     1i64 as usize;\n    |     ^^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     usize::try_from(1i64);\n@@ -123,7 +123,7 @@ error: casting `u64` to `isize` may truncate the value on targets with 32-bit wi\n LL |     1u64 as isize;\n    |     ^^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     isize::try_from(1u64);\n@@ -141,7 +141,7 @@ error: casting `u64` to `usize` may truncate the value on targets with 32-bit wi\n LL |     1u64 as usize;\n    |     ^^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     usize::try_from(1u64);"}]}