{"sha": "5ba30a680cb272d607883ebdc2da931e9b69ede7", "node_id": "C_kwDOAAsO6NoAKDViYTMwYTY4MGNiMjcyZDYwNzg4M2ViZGMyZGE5MzFlOWI2OWVkZTc", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-10-09T01:14:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-09T01:14:59Z"}, "message": "Rollup merge of #102514 - b-naber:binder-print-fixes, r=jackh726\n\nDon't repeat lifetime names from outer binder in print\n\nFixes https://github.com/rust-lang/rust/issues/102392\nFixes https://github.com/rust-lang/rust/issues/102414\n\nr? ```@lcnr```", "tree": {"sha": "ccf3f8e229034c0501b34011cf0cd8a028c2f2d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccf3f8e229034c0501b34011cf0cd8a028c2f2d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ba30a680cb272d607883ebdc2da931e9b69ede7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjQiCTCRBK7hj4Ov3rIwAAMycIAKDAmKuR0sT++a7RN93JNnC6\nnKVDwz3Kq/5s09W6KrJVKyreU4RVa+MaSdrdoIpl9zK4FiT7PtcjaZ6kgXCnvf1D\nqvked3RRcrIEJVF3pdI1IsDCvzqXh7Gb4S387aDeQ/EH7gNglzii5DOlaC8YDO+d\nSZXGS+EOC8P9T35TG4phd1KJoTM+x2cSKoM+ksoLVweNSpxsE41a3QQZl/hdWRjR\n6+/tkBu8y/ipCcZZwzU3Dca+eGR12NO8ylt+zM1SE4FyqS4YJN0yTE7BmhKIq8tA\nwXkWJ8Uy+/N/FsKktXGeVe7NqvBjKW01n5qbAJQNtKRe7A/fhjV6Mhuq1I3l7Lo=\n=H5n5\n-----END PGP SIGNATURE-----\n", "payload": "tree ccf3f8e229034c0501b34011cf0cd8a028c2f2d5\nparent bf37054b1ff25e42c077e5b52c6dc492125d8f91\nparent 048e637e9ee4c9fe8813109d89f97e140776b0a4\nauthor Michael Howell <michael@notriddle.com> 1665278099 -0700\ncommitter GitHub <noreply@github.com> 1665278099 -0700\n\nRollup merge of #102514 - b-naber:binder-print-fixes, r=jackh726\n\nDon't repeat lifetime names from outer binder in print\n\nFixes https://github.com/rust-lang/rust/issues/102392\nFixes https://github.com/rust-lang/rust/issues/102414\n\nr? ```@lcnr```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ba30a680cb272d607883ebdc2da931e9b69ede7", "html_url": "https://github.com/rust-lang/rust/commit/5ba30a680cb272d607883ebdc2da931e9b69ede7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ba30a680cb272d607883ebdc2da931e9b69ede7/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf37054b1ff25e42c077e5b52c6dc492125d8f91", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf37054b1ff25e42c077e5b52c6dc492125d8f91", "html_url": "https://github.com/rust-lang/rust/commit/bf37054b1ff25e42c077e5b52c6dc492125d8f91"}, {"sha": "048e637e9ee4c9fe8813109d89f97e140776b0a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/048e637e9ee4c9fe8813109d89f97e140776b0a4", "html_url": "https://github.com/rust-lang/rust/commit/048e637e9ee4c9fe8813109d89f97e140776b0a4"}], "stats": {"total": 133, "additions": 114, "deletions": 19}, "files": [{"sha": "c0607a102a90ecbad2a12708677c26eb14cc4e52", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 63, "deletions": 12, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/5ba30a680cb272d607883ebdc2da931e9b69ede7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba30a680cb272d607883ebdc2da931e9b69ede7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=5ba30a680cb272d607883ebdc2da931e9b69ede7", "patch": "@@ -2055,7 +2055,14 @@ struct RegionFolder<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     current_index: ty::DebruijnIndex,\n     region_map: BTreeMap<ty::BoundRegion, ty::Region<'tcx>>,\n-    name: &'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a),\n+    name: &'a mut (\n+                dyn FnMut(\n+        Option<ty::DebruijnIndex>, // Debruijn index of the folded late-bound region\n+        ty::DebruijnIndex,         // Index corresponding to binder level\n+        ty::BoundRegion,\n+    ) -> ty::Region<'tcx>\n+                    + 'a\n+            ),\n }\n \n impl<'a, 'tcx> ty::TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {\n@@ -2086,7 +2093,9 @@ impl<'a, 'tcx> ty::TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {\n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         let name = &mut self.name;\n         let region = match *r {\n-            ty::ReLateBound(_, br) => *self.region_map.entry(br).or_insert_with(|| name(br)),\n+            ty::ReLateBound(db, br) if db >= self.current_index => {\n+                *self.region_map.entry(br).or_insert_with(|| name(Some(db), self.current_index, br))\n+            }\n             ty::RePlaceholder(ty::PlaceholderRegion { name: kind, .. }) => {\n                 // If this is an anonymous placeholder, don't rename. Otherwise, in some\n                 // async fns, we get a `for<'r> Send` bound\n@@ -2095,7 +2104,10 @@ impl<'a, 'tcx> ty::TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {\n                     _ => {\n                         // Index doesn't matter, since this is just for naming and these never get bound\n                         let br = ty::BoundRegion { var: ty::BoundVar::from_u32(0), kind };\n-                        *self.region_map.entry(br).or_insert_with(|| name(br))\n+                        *self\n+                            .region_map\n+                            .entry(br)\n+                            .or_insert_with(|| name(None, self.current_index, br))\n                     }\n                 }\n             }\n@@ -2234,24 +2246,63 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n             })\n         } else {\n             let tcx = self.tcx;\n-            let mut name = |br: ty::BoundRegion| {\n-                start_or_continue(&mut self, \"for<\", \", \");\n-                let kind = match br.kind {\n+\n+            // Closure used in `RegionFolder` to create names for anonymous late-bound\n+            // regions. We use two `DebruijnIndex`es (one for the currently folded\n+            // late-bound region and the other for the binder level) to determine\n+            // whether a name has already been created for the currently folded region,\n+            // see issue #102392.\n+            let mut name = |lifetime_idx: Option<ty::DebruijnIndex>,\n+                            binder_level_idx: ty::DebruijnIndex,\n+                            br: ty::BoundRegion| {\n+                let (name, kind) = match br.kind {\n                     ty::BrAnon(_) | ty::BrEnv => {\n                         let name = next_name(&self);\n-                        do_continue(&mut self, name);\n-                        ty::BrNamed(CRATE_DEF_ID.to_def_id(), name)\n+\n+                        if let Some(lt_idx) = lifetime_idx {\n+                            if lt_idx > binder_level_idx {\n+                                let kind = ty::BrNamed(CRATE_DEF_ID.to_def_id(), name);\n+                                return tcx.mk_region(ty::ReLateBound(\n+                                    ty::INNERMOST,\n+                                    ty::BoundRegion { var: br.var, kind },\n+                                ));\n+                            }\n+                        }\n+\n+                        (name, ty::BrNamed(CRATE_DEF_ID.to_def_id(), name))\n                     }\n                     ty::BrNamed(def_id, kw::UnderscoreLifetime) => {\n                         let name = next_name(&self);\n-                        do_continue(&mut self, name);\n-                        ty::BrNamed(def_id, name)\n+\n+                        if let Some(lt_idx) = lifetime_idx {\n+                            if lt_idx > binder_level_idx {\n+                                let kind = ty::BrNamed(def_id, name);\n+                                return tcx.mk_region(ty::ReLateBound(\n+                                    ty::INNERMOST,\n+                                    ty::BoundRegion { var: br.var, kind },\n+                                ));\n+                            }\n+                        }\n+\n+                        (name, ty::BrNamed(def_id, name))\n                     }\n                     ty::BrNamed(_, name) => {\n-                        do_continue(&mut self, name);\n-                        br.kind\n+                        if let Some(lt_idx) = lifetime_idx {\n+                            if lt_idx > binder_level_idx {\n+                                let kind = br.kind;\n+                                return tcx.mk_region(ty::ReLateBound(\n+                                    ty::INNERMOST,\n+                                    ty::BoundRegion { var: br.var, kind },\n+                                ));\n+                            }\n+                        }\n+\n+                        (name, br.kind)\n                     }\n                 };\n+\n+                start_or_continue(&mut self, \"for<\", \", \");\n+                do_continue(&mut self, name);\n                 tcx.mk_region(ty::ReLateBound(ty::INNERMOST, ty::BoundRegion { var: br.var, kind }))\n             };\n             let mut folder = RegionFolder {"}, {"sha": "7fb8811666536239d45507cee227e3f1857bc4d0", "filename": "src/test/ui/async-await/issue-70935-complex-spans.drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ba30a680cb272d607883ebdc2da931e9b69ede7/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba30a680cb272d607883ebdc2da931e9b69ede7/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr?ref=5ba30a680cb272d607883ebdc2da931e9b69ede7", "patch": "@@ -18,7 +18,7 @@ LL |   async fn baz<T>(_c: impl FnMut() -> T) where T: Future<Output=()> {\n    |  ___________________________________________________________________^\n LL | | }\n    | |_^\n-   = note: required because it captures the following types: `ResumeTy`, `impl for<'a, 'b, 'c> Future<Output = ()>`, `()`\n+   = note: required because it captures the following types: `ResumeTy`, `impl Future<Output = ()>`, `()`\n note: required because it's used within this `async` block\n   --> $DIR/issue-70935-complex-spans.rs:16:16\n    |"}, {"sha": "7dabd97b94e823d93462b0cc5c8b61ff4789cddf", "filename": "src/test/ui/coherence/coherence-fn-covariant-bound-vs-static.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ba30a680cb272d607883ebdc2da931e9b69ede7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-covariant-bound-vs-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba30a680cb272d607883ebdc2da931e9b69ede7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-covariant-bound-vs-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-covariant-bound-vs-static.stderr?ref=5ba30a680cb272d607883ebdc2da931e9b69ede7", "patch": "@@ -1,10 +1,10 @@\n-error[E0119]: conflicting implementations of trait `Trait` for type `for<'r> fn(for<'r> fn(&'r ()))`\n+error[E0119]: conflicting implementations of trait `Trait` for type `for<'r> fn(fn(&'r ()))`\n   --> $DIR/coherence-fn-covariant-bound-vs-static.rs:17:1\n    |\n LL | impl Trait for for<'r> fn(fn(&'r ())) {}\n    | ------------------------------------- first implementation here\n LL | impl<'a> Trait for fn(fn(&'a ())) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `for<'r> fn(for<'r> fn(&'r ()))`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `for<'r> fn(fn(&'r ()))`\n    |\n    = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n "}, {"sha": "f97f349fd824359bae7db0d561a396e82035718c", "filename": "src/test/ui/lifetimes/nested-binder-print.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5ba30a680cb272d607883ebdc2da931e9b69ede7/src%2Ftest%2Fui%2Flifetimes%2Fnested-binder-print.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba30a680cb272d607883ebdc2da931e9b69ede7/src%2Ftest%2Fui%2Flifetimes%2Fnested-binder-print.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fnested-binder-print.rs?ref=5ba30a680cb272d607883ebdc2da931e9b69ede7", "patch": "@@ -0,0 +1,10 @@\n+struct TwoLt<'a, 'b>(&'a (), &'b ());\n+type Foo<'a> = fn(TwoLt<'_, 'a>);\n+\n+fn foo() {\n+    let y: for<'a> fn(Foo<'a>);\n+    let x: u32 = y;\n+    //~^ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "32dd896932d2e0646f325d8184133b42744fb4fe", "filename": "src/test/ui/lifetimes/nested-binder-print.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5ba30a680cb272d607883ebdc2da931e9b69ede7/src%2Ftest%2Fui%2Flifetimes%2Fnested-binder-print.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba30a680cb272d607883ebdc2da931e9b69ede7/src%2Ftest%2Fui%2Flifetimes%2Fnested-binder-print.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fnested-binder-print.stderr?ref=5ba30a680cb272d607883ebdc2da931e9b69ede7", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/nested-binder-print.rs:6:18\n+   |\n+LL |     let x: u32 = y;\n+   |            ---   ^ expected `u32`, found fn pointer\n+   |            |\n+   |            expected due to this\n+   |\n+   = note:    expected type `u32`\n+           found fn pointer `for<'a> fn(for<'b> fn(TwoLt<'b, 'a>))`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "c35d8ecec5e2d34b2959add1c0ae6b19d3044439", "filename": "src/test/ui/lifetimes/re-empty-in-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ba30a680cb272d607883ebdc2da931e9b69ede7/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba30a680cb272d607883ebdc2da931e9b69ede7/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.stderr?ref=5ba30a680cb272d607883ebdc2da931e9b69ede7", "patch": "@@ -4,7 +4,7 @@ error: higher-ranked lifetime error\n LL |     foo(&10);\n    |     ^^^^^^^^\n    |\n-   = note: could not prove `for<'b, 'a> &'b (): 'a`\n+   = note: could not prove `for<'b> &'b (): 'a`\n \n error: aborting due to previous error\n "}, {"sha": "87cc1a8e7a88d7070f315050fe168a61c3a64387", "filename": "src/test/ui/regions/issue-102392.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ba30a680cb272d607883ebdc2da931e9b69ede7/src%2Ftest%2Fui%2Fregions%2Fissue-102392.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba30a680cb272d607883ebdc2da931e9b69ede7/src%2Ftest%2Fui%2Fregions%2Fissue-102392.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fissue-102392.rs?ref=5ba30a680cb272d607883ebdc2da931e9b69ede7", "patch": "@@ -0,0 +1,6 @@\n+fn g(f: for<'a> fn(fn(&str, &'a str))) -> bool {\n+    f\n+    //~^ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "56f4c0c5db4b7a6f0a5fa538b93fc333aa4e501a", "filename": "src/test/ui/regions/issue-102392.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5ba30a680cb272d607883ebdc2da931e9b69ede7/src%2Ftest%2Fui%2Fregions%2Fissue-102392.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba30a680cb272d607883ebdc2da931e9b69ede7/src%2Ftest%2Fui%2Fregions%2Fissue-102392.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fissue-102392.stderr?ref=5ba30a680cb272d607883ebdc2da931e9b69ede7", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-102392.rs:2:5\n+   |\n+LL | fn g(f: for<'a> fn(fn(&str, &'a str))) -> bool {\n+   |                                           ---- expected `bool` because of return type\n+LL |     f\n+   |     ^ expected `bool`, found fn pointer\n+   |\n+   = note:    expected type `bool`\n+           found fn pointer `for<'a> fn(for<'b> fn(&'b str, &'a str))`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "30248a7a397b3e7428096053a175a3cfe2d33290", "filename": "src/test/ui/where-clauses/higher-ranked-fn-type.quiet.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ba30a680cb272d607883ebdc2da931e9b69ede7/src%2Ftest%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.quiet.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ba30a680cb272d607883ebdc2da931e9b69ede7/src%2Ftest%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.quiet.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.quiet.stderr?ref=5ba30a680cb272d607883ebdc2da931e9b69ede7", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `for<'b> for<'b> fn(&'b ()): Foo` is not satisfied\n+error[E0277]: the trait bound `for<'b> fn(&'b ()): Foo` is not satisfied\n   --> $DIR/higher-ranked-fn-type.rs:20:5\n    |\n LL |     called()\n-   |     ^^^^^^ the trait `for<'b> Foo` is not implemented for `for<'b> fn(&'b ())`\n+   |     ^^^^^^ the trait `for<'b> Foo` is not implemented for `fn(&'b ())`\n    |\n note: required by a bound in `called`\n   --> $DIR/higher-ranked-fn-type.rs:12:25"}, {"sha": "ab6edde4ee7eadfc7a1bd65cf7e34892f2d9ab41", "filename": "src/test/ui/where-clauses/higher-ranked-fn-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ba30a680cb272d607883ebdc2da931e9b69ede7/src%2Ftest%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ba30a680cb272d607883ebdc2da931e9b69ede7/src%2Ftest%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.rs?ref=5ba30a680cb272d607883ebdc2da931e9b69ede7", "patch": "@@ -18,7 +18,7 @@ where\n     (for<'a> fn(&'a ())): Foo,\n {\n     called()\n-    //[quiet]~^ ERROR the trait bound `for<'b> for<'b> fn(&'b ()): Foo` is not satisfied\n+    //[quiet]~^ ERROR the trait bound `for<'b> fn(&'b ()): Foo` is not satisfied\n     //[verbose]~^^ ERROR the trait bound `for<'b> fn(&ReLateBound(\n }\n "}]}