{"sha": "e3427c3c341fcd15cbac783bf8dad7276422c97a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNDI3YzNjMzQxZmNkMTVjYmFjNzgzYmY4ZGFkNzI3NjQyMmM5N2E=", "commit": {"author": {"name": "Phil Dawes", "email": "phil@phildawes.net", "date": "2015-04-04T20:47:40Z"}, "committer": {"name": "Phil Dawes", "email": "phil@phildawes.net", "date": "2015-04-05T08:52:56Z"}, "message": "Add comments suggested by Niko", "tree": {"sha": "2c9b344ab6f07634ef7e00d9c3a71de1eb3509d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c9b344ab6f07634ef7e00d9c3a71de1eb3509d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3427c3c341fcd15cbac783bf8dad7276422c97a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3427c3c341fcd15cbac783bf8dad7276422c97a", "html_url": "https://github.com/rust-lang/rust/commit/e3427c3c341fcd15cbac783bf8dad7276422c97a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3427c3c341fcd15cbac783bf8dad7276422c97a/comments", "author": {"login": "phildawes", "id": 87502, "node_id": "MDQ6VXNlcjg3NTAy", "avatar_url": "https://avatars.githubusercontent.com/u/87502?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phildawes", "html_url": "https://github.com/phildawes", "followers_url": "https://api.github.com/users/phildawes/followers", "following_url": "https://api.github.com/users/phildawes/following{/other_user}", "gists_url": "https://api.github.com/users/phildawes/gists{/gist_id}", "starred_url": "https://api.github.com/users/phildawes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phildawes/subscriptions", "organizations_url": "https://api.github.com/users/phildawes/orgs", "repos_url": "https://api.github.com/users/phildawes/repos", "events_url": "https://api.github.com/users/phildawes/events{/privacy}", "received_events_url": "https://api.github.com/users/phildawes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phildawes", "id": 87502, "node_id": "MDQ6VXNlcjg3NTAy", "avatar_url": "https://avatars.githubusercontent.com/u/87502?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phildawes", "html_url": "https://github.com/phildawes", "followers_url": "https://api.github.com/users/phildawes/followers", "following_url": "https://api.github.com/users/phildawes/following{/other_user}", "gists_url": "https://api.github.com/users/phildawes/gists{/gist_id}", "starred_url": "https://api.github.com/users/phildawes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phildawes/subscriptions", "organizations_url": "https://api.github.com/users/phildawes/orgs", "repos_url": "https://api.github.com/users/phildawes/repos", "events_url": "https://api.github.com/users/phildawes/events{/privacy}", "received_events_url": "https://api.github.com/users/phildawes/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2bcb7229a4bce0c9459807552d071eb2b2c9a0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2bcb7229a4bce0c9459807552d071eb2b2c9a0e", "html_url": "https://github.com/rust-lang/rust/commit/b2bcb7229a4bce0c9459807552d071eb2b2c9a0e"}], "stats": {"total": 36, "additions": 9, "deletions": 27}, "files": [{"sha": "8fe23a3c8e82664bf1c053f46622f2be6fcae962", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3427c3c341fcd15cbac783bf8dad7276422c97a/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3427c3c341fcd15cbac783bf8dad7276422c97a/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=e3427c3c341fcd15cbac783bf8dad7276422c97a", "patch": "@@ -68,9 +68,9 @@ pub trait Emitter {\n                    sp: RenderSpan, msg: &str, lvl: Level);\n }\n \n-/// This structure is used to signify that a task has panicked with a fatal error\n-/// from the diagnostics. You can use this with the `Any` trait to figure out\n-/// how a rustc task died (if so desired).\n+/// Used as a return value to signify a fatal error occurred. (It is also\n+/// used as the argument to panic at the moment, but that will eventually\n+/// not be true.)\n #[derive(Copy, Clone)]\n #[must_use]\n pub struct FatalError;"}, {"sha": "f2b45d89f73501752492c10aa179203bbe796094", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e3427c3c341fcd15cbac783bf8dad7276422c97a/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3427c3c341fcd15cbac783bf8dad7276422c97a/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=e3427c3c341fcd15cbac783bf8dad7276422c97a", "patch": "@@ -23,17 +23,6 @@ use parse::token::InternedString;\n use parse::token;\n use ptr::P;\n \n-macro_rules! panictry {\n-    ($e:expr) => ({\n-        use std::result::Result::{Ok, Err};\n-\n-        match $e {\n-            Ok(e) => e,\n-            Err(e) => panic!(e),\n-        }\n-    })\n-}\n-\n enum State {\n     Asm,\n     Outputs,"}, {"sha": "1d99a475b3286c9a9b65786ffc7ccd9cb11e7093", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e3427c3c341fcd15cbac783bf8dad7276422c97a/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3427c3c341fcd15cbac783bf8dad7276422c97a/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=e3427c3c341fcd15cbac783bf8dad7276422c97a", "patch": "@@ -24,17 +24,6 @@ use ptr::P;\n use std::collections::HashMap;\n use std::iter::repeat;\n \n-macro_rules! panictry {\n-    ($e:expr) => ({\n-        use std::result::Result::{Ok, Err};\n-\n-        match $e {\n-            Ok(e) => e,\n-            Err(e) => { panic!(e); }\n-        }\n-    })\n-}\n-\n #[derive(PartialEq)]\n enum ArgumentType {\n     Known(String),"}, {"sha": "bf95daf87555d9673bc003246216110f608b9b50", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3427c3c341fcd15cbac783bf8dad7276422c97a/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3427c3c341fcd15cbac783bf8dad7276422c97a/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=e3427c3c341fcd15cbac783bf8dad7276422c97a", "patch": "@@ -50,13 +50,17 @@ extern crate libc;\n \n extern crate serialize as rustc_serialize; // used by deriving\n \n+// A variant of 'try!' that panics on Err(FatalError). This is used as a\n+// crutch on the way towards a non-panic!-prone parser. It should be used\n+// for fatal parsing errors; eventually we plan to convert all code using\n+// panictry to just use normal try\n macro_rules! panictry {\n     ($e:expr) => ({\n         use std::result::Result::{Ok, Err};\n-\n+        use diagnostic::FatalError;\n         match $e {\n             Ok(e) => e,\n-            Err(e) => panic!(e)\n+            Err(FatalError) => panic!(FatalError)\n         }\n     })\n }"}]}