{"sha": "14bf909e71209fc946f35ffba8ae6572c9575715", "node_id": "C_kwDOAAsO6NoAKDE0YmY5MDllNzEyMDlmYzk0NmYzNWZmYmE4YWU2NTcyYzk1NzU3MTU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-11T02:10:56Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-12T00:10:52Z"}, "message": "Note base types of coercion", "tree": {"sha": "7e74098b379efd7a09f59b8e17f6c820d7202c16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e74098b379efd7a09f59b8e17f6c820d7202c16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14bf909e71209fc946f35ffba8ae6572c9575715", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14bf909e71209fc946f35ffba8ae6572c9575715", "html_url": "https://github.com/rust-lang/rust/commit/14bf909e71209fc946f35ffba8ae6572c9575715", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14bf909e71209fc946f35ffba8ae6572c9575715/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "html_url": "https://github.com/rust-lang/rust/commit/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd"}], "stats": {"total": 367, "additions": 142, "deletions": 225}, "files": [{"sha": "2f0b07d4c71b4a5c22faaf53115b03e4b54a1695", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -281,9 +281,6 @@ pub enum ObligationCauseCode<'tcx> {\n     /// A type like `Box<Foo<'a> + 'b>` is WF only if `'b: 'a`.\n     ObjectTypeBound(Ty<'tcx>, ty::Region<'tcx>),\n \n-    /// Obligation incurred due to an object cast.\n-    ObjectCastObligation(/* Concrete type */ Ty<'tcx>, /* Object type */ Ty<'tcx>),\n-\n     /// Obligation incurred due to a coercion.\n     Coercion {\n         source: Ty<'tcx>,"}, {"sha": "f5f2fe54217885091aa694fcd10ebfcf7998c61f", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -797,9 +797,17 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             err.span_label(span, explanation);\n                         }\n \n-                        if let ObligationCauseCode::ObjectCastObligation(concrete_ty, obj_ty) = obligation.cause.code().peel_derives() &&\n-                            Some(trait_ref.def_id()) == self.tcx.lang_items().sized_trait() {\n-                            self.suggest_borrowing_for_object_cast(&mut err, &root_obligation, *concrete_ty, *obj_ty);\n+                        if let ObligationCauseCode::Coercion { source, target } =\n+                            *obligation.cause.code().peel_derives()\n+                        {\n+                            if Some(trait_ref.def_id()) == self.tcx.lang_items().sized_trait() {\n+                                self.suggest_borrowing_for_object_cast(\n+                                    &mut err,\n+                                    &root_obligation,\n+                                    source,\n+                                    target,\n+                                );\n+                            }\n                         }\n \n                         let UnsatisfiedConst(unsatisfied_const) = self\n@@ -1510,7 +1518,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         | ObligationCauseCode::BindingObligation(_, _)\n                         | ObligationCauseCode::ExprItemObligation(..)\n                         | ObligationCauseCode::ExprBindingObligation(..)\n-                        | ObligationCauseCode::ObjectCastObligation(..)\n+                        | ObligationCauseCode::Coercion { .. }\n                         | ObligationCauseCode::OpaqueType\n                 );\n "}, {"sha": "49b309abcda3a939deb6f9b2f20acbfb408cea5c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -1442,8 +1442,9 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         err: &mut Diagnostic,\n         obligation: &PredicateObligation<'tcx>,\n         self_ty: Ty<'tcx>,\n-        object_ty: Ty<'tcx>,\n+        target_ty: Ty<'tcx>,\n     ) {\n+        let ty::Ref(_, object_ty, hir::Mutability::Not) = target_ty.kind() else { return; };\n         let ty::Dynamic(predicates, _, ty::Dyn) = object_ty.kind() else { return; };\n         let self_ref_ty = self.tcx.mk_imm_ref(self.tcx.lifetimes.re_erased, self_ty);\n \n@@ -1458,7 +1459,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         err.span_suggestion(\n             obligation.cause.span.shrink_to_lo(),\n             format!(\n-                \"consider borrowing the value, since `&{self_ty}` can be coerced into `{object_ty}`\"\n+                \"consider borrowing the value, since `&{self_ty}` can be coerced into `{target_ty}`\"\n             ),\n             \"&\",\n             Applicability::MaybeIncorrect,\n@@ -2851,30 +2852,27 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     err.span_note(tcx.def_span(item_def_id), descr);\n                 }\n             }\n-            ObligationCauseCode::ObjectCastObligation(concrete_ty, object_ty) => {\n-                let (concrete_ty, concrete_file) =\n-                    self.tcx.short_ty_string(self.resolve_vars_if_possible(concrete_ty));\n-                let (object_ty, object_file) =\n-                    self.tcx.short_ty_string(self.resolve_vars_if_possible(object_ty));\n+            ObligationCauseCode::Coercion { source, target } => {\n+                let (source, source_file) =\n+                    self.tcx.short_ty_string(self.resolve_vars_if_possible(source));\n+                let (target, target_file) =\n+                    self.tcx.short_ty_string(self.resolve_vars_if_possible(target));\n                 err.note(with_forced_trimmed_paths!(format!(\n-                    \"required for the cast from `{concrete_ty}` to the object type `{object_ty}`\",\n+                    \"required for the cast from `{source}` to `{target}`\",\n                 )));\n-                if let Some(file) = concrete_file {\n+                if let Some(file) = source_file {\n                     err.note(format!(\n-                        \"the full name for the casted type has been written to '{}'\",\n+                        \"the full name for the source type has been written to '{}'\",\n                         file.display(),\n                     ));\n                 }\n-                if let Some(file) = object_file {\n+                if let Some(file) = target_file {\n                     err.note(format!(\n-                        \"the full name for the object type has been written to '{}'\",\n+                        \"the full name for the target type has been written to '{}'\",\n                         file.display(),\n                     ));\n                 }\n             }\n-            ObligationCauseCode::Coercion { source: _, target } => {\n-                err.note(format!(\"required by cast to type `{}`\", self.ty_to_string(target)));\n-            }\n             ObligationCauseCode::RepeatElementCopy { is_const_fn } => {\n                 err.note(\n                     \"the `Copy` trait is required because this value will be copied for each element of the array\","}, {"sha": "6a648294efd98bbba4c0d3939e5141d3e78787a2", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 12, "deletions": 24, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -29,9 +29,9 @@ use crate::traits::{\n     ImplSourceAutoImplData, ImplSourceBuiltinData, ImplSourceClosureData,\n     ImplSourceConstDestructData, ImplSourceFnPointerData, ImplSourceFutureData,\n     ImplSourceGeneratorData, ImplSourceObjectData, ImplSourceTraitAliasData,\n-    ImplSourceTraitUpcastingData, ImplSourceUserDefinedData, Normalized, ObjectCastObligation,\n-    Obligation, ObligationCause, OutputTypeParameterMismatch, PredicateObligation, Selection,\n-    SelectionError, TraitNotObjectSafe, TraitObligation, Unimplemented,\n+    ImplSourceTraitUpcastingData, ImplSourceUserDefinedData, Normalized, Obligation,\n+    ObligationCause, OutputTypeParameterMismatch, PredicateObligation, Selection, SelectionError,\n+    TraitNotObjectSafe, TraitObligation, Unimplemented,\n };\n \n use super::BuiltinImplConditions;\n@@ -905,16 +905,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     .map_err(|_| Unimplemented)?;\n                 nested.extend(obligations);\n \n-                // Register one obligation for 'a: 'b.\n-                let cause = ObligationCause::new(\n-                    obligation.cause.span,\n-                    obligation.cause.body_id,\n-                    ObjectCastObligation(source, target),\n-                );\n                 let outlives = ty::OutlivesPredicate(r_a, r_b);\n                 nested.push(Obligation::with_depth(\n                     tcx,\n-                    cause,\n+                    obligation.cause.clone(),\n                     obligation.recursion_depth + 1,\n                     obligation.param_env,\n                     obligation.predicate.rebind(outlives),\n@@ -1005,15 +999,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 nested.extend(obligations);\n \n                 // Register one obligation for 'a: 'b.\n-                let cause = ObligationCause::new(\n-                    obligation.cause.span,\n-                    obligation.cause.body_id,\n-                    ObjectCastObligation(source, target),\n-                );\n                 let outlives = ty::OutlivesPredicate(r_a, r_b);\n                 nested.push(Obligation::with_depth(\n                     tcx,\n-                    cause,\n+                    obligation.cause.clone(),\n                     obligation.recursion_depth + 1,\n                     obligation.param_env,\n                     obligation.predicate.rebind(outlives),\n@@ -1027,16 +1016,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     return Err(TraitNotObjectSafe(did));\n                 }\n \n-                let cause = ObligationCause::new(\n-                    obligation.cause.span,\n-                    obligation.cause.body_id,\n-                    ObjectCastObligation(source, target),\n-                );\n-\n                 let predicate_to_obligation = |predicate| {\n                     Obligation::with_depth(\n                         tcx,\n-                        cause.clone(),\n+                        obligation.cause.clone(),\n                         obligation.recursion_depth + 1,\n                         obligation.param_env,\n                         predicate,\n@@ -1056,7 +1039,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 );\n \n                 // We can only make objects from sized types.\n-                let tr = ty::TraitRef::from_lang_item(tcx, LangItem::Sized, cause.span, [source]);\n+                let tr = ty::TraitRef::from_lang_item(\n+                    tcx,\n+                    LangItem::Sized,\n+                    obligation.cause.span,\n+                    [source],\n+                );\n                 nested.push(predicate_to_obligation(tr.without_const().to_predicate(tcx)));\n \n                 // If the type is `Foo + 'a`, ensure that the type"}, {"sha": "b72ff5b78e4183553dc62dc505f9c0d616951aef", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -2647,14 +2647,19 @@ impl<'tcx> SelectionContext<'_, 'tcx> {\n         let predicates = predicates.instantiate_own(tcx, substs);\n         let mut obligations = Vec::with_capacity(predicates.len());\n         for (index, (predicate, span)) in predicates.into_iter().enumerate() {\n-            let cause = cause.clone().derived_cause(parent_trait_pred, |derived| {\n-                ImplDerivedObligation(Box::new(ImplDerivedObligationCause {\n-                    derived,\n-                    impl_or_alias_def_id: def_id,\n-                    impl_def_predicate_index: Some(index),\n-                    span,\n-                }))\n-            });\n+            let cause =\n+                if Some(parent_trait_pred.def_id()) == tcx.lang_items().coerce_unsized_trait() {\n+                    cause.clone()\n+                } else {\n+                    cause.clone().derived_cause(parent_trait_pred, |derived| {\n+                        ImplDerivedObligation(Box::new(ImplDerivedObligationCause {\n+                            derived,\n+                            impl_or_alias_def_id: def_id,\n+                            impl_def_predicate_index: Some(index),\n+                            span,\n+                        }))\n+                    })\n+                };\n             let predicate = normalize_with_depth_to(\n                 self,\n                 param_env,"}, {"sha": "c3377eed20a524277443b32c4af0613d20dad30f", "filename": "tests/ui/associated-types/associated-types-eq-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -43,7 +43,7 @@ note: expected this to be `Bar`\n    |\n LL |     type A = usize;\n    |              ^^^^^\n-   = note: required for the cast from `isize` to the object type `dyn Foo<A = Bar>`\n+   = note: required for the cast from `&isize` to `&dyn Foo<A = Bar>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "fdec01b95e3b1114e297d877f9d5ad5c8df5002e", "filename": "tests/ui/associated-types/associated-types-overridden-binding-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -4,7 +4,7 @@ error[E0271]: expected `IntoIter<u32>` to be an iterator that yields `i32`, but\n LL |     let _: &dyn I32Iterator<Item = u32> = &vec![42].into_iter();\n    |                                           ^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `u32`\n    |\n-   = note: required for the cast from `std::vec::IntoIter<u32>` to the object type `dyn Iterator<Item = u32, Item = i32>`\n+   = note: required for the cast from `&std::vec::IntoIter<u32>` to `&dyn Iterator<Item = u32, Item = i32>`\n \n error: aborting due to previous error\n "}, {"sha": "9c77a25c4320d3661c6d8ef5b815bd4929354c08", "filename": "tests/ui/associated-types/issue-65774-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fassociated-types%2Fissue-65774-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fassociated-types%2Fissue-65774-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fissue-65774-1.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -25,7 +25,7 @@ LL | impl<'a, T: MyDisplay> MyDisplay for &'a mut T { }\n    |             ---------  ^^^^^^^^^     ^^^^^^^^^\n    |             |\n    |             unsatisfied trait bound introduced here\n-   = note: required for the cast from `&mut T` to the object type `dyn MyDisplay`\n+   = note: required for the cast from `&&mut T` to `&dyn MyDisplay`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ca8a727f0fe21a03c9ca7e8c1e58d13bbda57977", "filename": "tests/ui/associated-types/issue-65774-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fassociated-types%2Fissue-65774-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fassociated-types%2Fissue-65774-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fissue-65774-2.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -18,7 +18,7 @@ LL |         writer.my_write(valref)\n    |                         ^^^^^^ the trait `MyDisplay` is not implemented for `T`\n    |\n    = help: the trait `MyDisplay` is implemented for `&'a mut T`\n-   = note: required for the cast from `T` to the object type `dyn MyDisplay`\n+   = note: required for the cast from `&mut T` to `&dyn MyDisplay`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bbd5a822d8df586b81f8ac8b9692bf356c6a0bd1", "filename": "tests/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -35,7 +35,7 @@ error[E0271]: expected `[async block@$DIR/async-block-control-flow-static-semant\n LL |     let _: &dyn Future<Output = ()> = &block;\n    |                                       ^^^^^^ expected `()`, found `u8`\n    |\n-   = note: required for the cast from `[async block@$DIR/async-block-control-flow-static-semantics.rs:23:17: 25:6]` to the object type `dyn Future<Output = ()>`\n+   = note: required for the cast from `&[async block@$DIR/async-block-control-flow-static-semantics.rs:23:17: 25:6]` to `&dyn Future<Output = ()>`\n \n error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:12:43\n@@ -51,7 +51,7 @@ error[E0271]: expected `[async block@$DIR/async-block-control-flow-static-semant\n LL |     let _: &dyn Future<Output = ()> = &block;\n    |                                       ^^^^^^ expected `()`, found `u8`\n    |\n-   = note: required for the cast from `[async block@$DIR/async-block-control-flow-static-semantics.rs:14:17: 16:6]` to the object type `dyn Future<Output = ()>`\n+   = note: required for the cast from `&[async block@$DIR/async-block-control-flow-static-semantics.rs:14:17: 16:6]` to `&dyn Future<Output = ()>`\n \n error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:49:44"}, {"sha": "adb7b9bf4bf8da1befe885e0442b5645cfde83e0", "filename": "tests/ui/async-await/issue-86507.drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fasync-await%2Fissue-86507.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fasync-await%2Fissue-86507.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-86507.drop_tracking.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -13,7 +13,7 @@ note: captured value is not `Send` because `&` references cannot be sent unless\n    |\n LL |                     let x = x;\n    |                             ^ has type `&T` which is not `Send`, because `T` is not `Sync`\n-   = note: required for the cast from `[async block@$DIR/issue-86507.rs:21:17: 23:18]` to the object type `dyn Future<Output = ()> + Send`\n+   = note: required for the cast from `Pin<Box<[async block@$DIR/issue-86507.rs:21:17: 23:18]>>` to `Pin<Box<(dyn Future<Output = ()> + Send + 'async_trait)>>`\n help: consider further restricting this bound\n    |\n LL |     fn bar<'me, 'async_trait, T: Send + std::marker::Sync>(x: &'me T)"}, {"sha": "adb7b9bf4bf8da1befe885e0442b5645cfde83e0", "filename": "tests/ui/async-await/issue-86507.drop_tracking_mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fasync-await%2Fissue-86507.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fasync-await%2Fissue-86507.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-86507.drop_tracking_mir.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -13,7 +13,7 @@ note: captured value is not `Send` because `&` references cannot be sent unless\n    |\n LL |                     let x = x;\n    |                             ^ has type `&T` which is not `Send`, because `T` is not `Sync`\n-   = note: required for the cast from `[async block@$DIR/issue-86507.rs:21:17: 23:18]` to the object type `dyn Future<Output = ()> + Send`\n+   = note: required for the cast from `Pin<Box<[async block@$DIR/issue-86507.rs:21:17: 23:18]>>` to `Pin<Box<(dyn Future<Output = ()> + Send + 'async_trait)>>`\n help: consider further restricting this bound\n    |\n LL |     fn bar<'me, 'async_trait, T: Send + std::marker::Sync>(x: &'me T)"}, {"sha": "adb7b9bf4bf8da1befe885e0442b5645cfde83e0", "filename": "tests/ui/async-await/issue-86507.no_drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fasync-await%2Fissue-86507.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fasync-await%2Fissue-86507.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-86507.no_drop_tracking.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -13,7 +13,7 @@ note: captured value is not `Send` because `&` references cannot be sent unless\n    |\n LL |                     let x = x;\n    |                             ^ has type `&T` which is not `Send`, because `T` is not `Sync`\n-   = note: required for the cast from `[async block@$DIR/issue-86507.rs:21:17: 23:18]` to the object type `dyn Future<Output = ()> + Send`\n+   = note: required for the cast from `Pin<Box<[async block@$DIR/issue-86507.rs:21:17: 23:18]>>` to `Pin<Box<(dyn Future<Output = ()> + Send + 'async_trait)>>`\n help: consider further restricting this bound\n    |\n LL |     fn bar<'me, 'async_trait, T: Send + std::marker::Sync>(x: &'me T)"}, {"sha": "e468f6be791fe9b653d9425bdefaf9323a141021", "filename": "tests/ui/closure_context/issue-26046-fn-mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -9,7 +9,7 @@ LL |         num += 1;\n LL |     Box::new(closure)\n    |     ----------------- the requirement to implement `Fn` derives from here\n    |\n-   = note: required for the cast from `[closure@$DIR/issue-26046-fn-mut.rs:4:19: 4:21]` to the object type `dyn Fn()`\n+   = note: required for the cast from `Box<[closure@$DIR/issue-26046-fn-mut.rs:4:19: 4:21]>` to `Box<(dyn Fn() + 'static)>`\n \n error: aborting due to previous error\n "}, {"sha": "41f60327ce061d33f5b98c169b61f35b2b988a54", "filename": "tests/ui/closure_context/issue-26046-fn-once.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fclosure_context%2Fissue-26046-fn-once.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fclosure_context%2Fissue-26046-fn-once.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosure_context%2Fissue-26046-fn-once.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -9,7 +9,7 @@ LL |         vec\n LL |     Box::new(closure)\n    |     ----------------- the requirement to implement `Fn` derives from here\n    |\n-   = note: required for the cast from `[closure@$DIR/issue-26046-fn-once.rs:4:19: 4:26]` to the object type `dyn Fn() -> Vec<u8>`\n+   = note: required for the cast from `Box<[closure@$DIR/issue-26046-fn-once.rs:4:19: 4:26]>` to `Box<(dyn Fn() -> Vec<u8> + 'static)>`\n \n error: aborting due to previous error\n "}, {"sha": "b976f70acf76ac1812d81d11e311ffdb72abbc3f", "filename": "tests/ui/coercion/coerce-issue-49593-box-never-windows.nofallback.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never-windows.nofallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never-windows.nofallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never-windows.nofallback.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -4,15 +4,15 @@ error[E0277]: the trait bound `(): std::error::Error` is not satisfied\n LL |     /* *mut $0 is coerced to Box<dyn Error> here */ Box::<_ /* ! */>::new(x)\n    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::error::Error` is not implemented for `()`\n    |\n-   = note: required for the cast from `()` to the object type `dyn std::error::Error`\n+   = note: required for the cast from `Box<()>` to `Box<(dyn std::error::Error + 'static)>`\n \n error[E0277]: the trait bound `(): std::error::Error` is not satisfied\n   --> $DIR/coerce-issue-49593-box-never-windows.rs:23:49\n    |\n LL |     /* *mut $0 is coerced to *mut Error here */ raw_ptr_box::<_ /* ! */>(x)\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::error::Error` is not implemented for `()`\n    |\n-   = note: required for the cast from `()` to the object type `(dyn std::error::Error + 'static)`\n+   = note: required for the cast from `*mut ()` to `*mut (dyn std::error::Error + 'static)`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0d98fa93e5a4be8a541f76336ad62d0188434098", "filename": "tests/ui/coercion/coerce-issue-49593-box-never.nofallback.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.nofallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.nofallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoercion%2Fcoerce-issue-49593-box-never.nofallback.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -4,15 +4,15 @@ error[E0277]: the trait bound `(): std::error::Error` is not satisfied\n LL |     /* *mut $0 is coerced to Box<dyn Error> here */ Box::<_ /* ! */>::new(x)\n    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::error::Error` is not implemented for `()`\n    |\n-   = note: required for the cast from `()` to the object type `dyn std::error::Error`\n+   = note: required for the cast from `Box<()>` to `Box<(dyn std::error::Error + 'static)>`\n \n error[E0277]: the trait bound `(): std::error::Error` is not satisfied\n   --> $DIR/coerce-issue-49593-box-never.rs:23:49\n    |\n LL |     /* *mut $0 is coerced to *mut Error here */ raw_ptr_box::<_ /* ! */>(x)\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::error::Error` is not implemented for `()`\n    |\n-   = note: required for the cast from `()` to the object type `(dyn std::error::Error + 'static)`\n+   = note: required for the cast from `*mut ()` to `*mut (dyn std::error::Error + 'static)`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "481d77728b9efb8bf323c690c009f9da231c84b5", "filename": "tests/ui/const-generics/defaults/trait_objects_fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -5,7 +5,7 @@ LL |     foo(&10_u32);\n    |         ^^^^^^^ the trait `Trait` is not implemented for `u32`\n    |\n    = help: the trait `Trait<2>` is implemented for `u32`\n-   = note: required for the cast from `u32` to the object type `dyn Trait`\n+   = note: required for the cast from `&u32` to `&dyn Trait`\n \n error[E0277]: the trait bound `bool: Traitor<_>` is not satisfied\n   --> $DIR/trait_objects_fail.rs:28:9\n@@ -14,7 +14,7 @@ LL |     bar(&true);\n    |         ^^^^^ the trait `Traitor<_>` is not implemented for `bool`\n    |\n    = help: the trait `Traitor<2, 3>` is implemented for `bool`\n-   = note: required for the cast from `bool` to the object type `dyn Traitor<_>`\n+   = note: required for the cast from `&bool` to `&dyn Traitor<_>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "31b18b2df984416719b6eb2663336bf606c541ed", "filename": "tests/ui/custom_test_frameworks/mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fcustom_test_frameworks%2Fmismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fcustom_test_frameworks%2Fmismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcustom_test_frameworks%2Fmismatch.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -6,7 +6,7 @@ LL | #[test]\n LL | fn wrong_kind(){}\n    | ^^^^^^^^^^^^^^^^^ the trait `Testable` is not implemented for `TestDescAndFn`\n    |\n-   = note: required for the cast from `TestDescAndFn` to the object type `dyn Testable`\n+   = note: required for the cast from `&TestDescAndFn` to `&dyn Testable`\n    = note: this error originates in the attribute macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "52f415037d350a90c08a13a50078808a38dbf17e", "filename": "tests/ui/diagnostic-width/E0271.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fdiagnostic-width%2FE0271.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fdiagnostic-width%2FE0271.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiagnostic-width%2FE0271.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -15,8 +15,8 @@ note: expected this to be `Foo`\n    |\n LL |     type Error = E;\n    |                  ^\n-   = note: required for the cast from `Result<Result<..., ...>, ...>` to the object type `dyn Future<Error = Foo>`\n-   = note: the full name for the casted type has been written to '$TEST_BUILD_DIR/diagnostic-width/E0271/E0271.long-type-hash.txt'\n+   = note: required for the cast from `Box<Result<..., ...>>` to `Box<(dyn Future<Error = Foo> + 'static)>`\n+   = note: the full name for the source type has been written to '$TEST_BUILD_DIR/diagnostic-width/E0271/E0271.long-type-hash.txt'\n \n error: aborting due to previous error\n "}, {"sha": "2c75518c298a9ab1b942c44c76f53c0f8b27d4ea", "filename": "tests/ui/dst/dst-bad-coerce1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fdst%2Fdst-bad-coerce1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fdst%2Fdst-bad-coerce1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fdst-bad-coerce1.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -15,7 +15,7 @@ error[E0277]: the trait bound `Foo: Bar` is not satisfied\n LL |     let f3: &Fat<dyn Bar> = f2;\n    |                             ^^ the trait `Bar` is not implemented for `Foo`\n    |\n-   = note: required for the cast from `Foo` to the object type `dyn Bar`\n+   = note: required for the cast from `&Fat<Foo>` to `&Fat<dyn Bar>`\n \n error[E0308]: mismatched types\n   --> $DIR/dst-bad-coerce1.rs:28:27\n@@ -34,7 +34,7 @@ error[E0277]: the trait bound `Foo: Bar` is not satisfied\n LL |     let f3: &(dyn Bar,) = f2;\n    |                           ^^ the trait `Bar` is not implemented for `Foo`\n    |\n-   = note: required for the cast from `Foo` to the object type `dyn Bar`\n+   = note: required for the cast from `&(Foo,)` to `&(dyn Bar,)`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "d5e464aed4ba75983aebef59e2c157ed1837d533", "filename": "tests/ui/dst/dst-object-from-unsized-type.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -6,7 +6,7 @@ LL | fn test1<T: ?Sized + Foo>(t: &T) {\n LL |     let u: &dyn Foo = t;\n    |                       ^ doesn't have a size known at compile-time\n    |\n-   = note: required for the cast from `T` to the object type `dyn Foo`\n+   = note: required for the cast from `&T` to `&dyn Foo`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn test1<T: ?Sized + Foo>(t: &T) {\n@@ -21,7 +21,7 @@ LL | fn test2<T: ?Sized + Foo>(t: &T) {\n LL |     let v: &dyn Foo = t as &dyn Foo;\n    |                       ^ doesn't have a size known at compile-time\n    |\n-   = note: required for the cast from `T` to the object type `dyn Foo`\n+   = note: required for the cast from `&T` to `&dyn Foo`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn test2<T: ?Sized + Foo>(t: &T) {\n@@ -35,7 +35,7 @@ LL |     let _: &[&dyn Foo] = &[\"hi\"];\n    |                            ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = note: required for the cast from `str` to the object type `dyn Foo`\n+   = note: required for the cast from `&'static str` to `&dyn Foo`\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n   --> $DIR/dst-object-from-unsized-type.rs:23:23\n@@ -44,7 +44,7 @@ LL |     let _: &dyn Foo = x as &dyn Foo;\n    |                       ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n-   = note: required for the cast from `[u8]` to the object type `dyn Foo`\n+   = note: required for the cast from `&[u8]` to `&dyn Foo`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "303700c7ab4f584b5a8ccc45e30f6e7ac995efc9", "filename": "tests/ui/feature-gates/feature-gate-dispatch-from-dyn-missing-impl.stderr", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-missing-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-missing-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-dispatch-from-dyn-missing-impl.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -31,14 +31,7 @@ LL | trait Trait {\n    |       ----- this trait cannot be made into an object...\n LL |     fn ptr(self: Ptr<Self>);\n    |                  ^^^^^^^^^ ...because method `ptr`'s `self` parameter cannot be dispatched on\n-note: required for `Ptr<{integer}>` to implement `CoerceUnsized<Ptr<dyn Trait>>`\n-  --> $DIR/feature-gate-dispatch-from-dyn-missing-impl.rs:20:40\n-   |\n-LL | impl<T: Unsize<U> + ?Sized, U: ?Sized> CoerceUnsized<Ptr<U>> for Ptr<T> {}\n-   |         ---------                      ^^^^^^^^^^^^^^^^^^^^^     ^^^^^^\n-   |         |\n-   |         unsatisfied trait bound introduced here\n-   = note: required by cast to type `Ptr<dyn Trait>`\n+   = note: required for the cast from `Ptr<{integer}>` to `Ptr<dyn Trait>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "370329b9f8373598c08a5e1f4ca48c1e6028a9b2", "filename": "tests/ui/generic-associated-types/issue-76535.base.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fgeneric-associated-types%2Fissue-76535.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fgeneric-associated-types%2Fissue-76535.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-76535.base.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -43,8 +43,7 @@ LL | pub trait SuperTrait {\n LL |     type SubType<'a>: SubTrait where Self: 'a;\n    |          ^^^^^^^ ...because it contains the generic associated type `SubType`\n    = help: consider moving `SubType` to another trait\n-   = note: required for `Box<SuperStruct>` to implement `CoerceUnsized<Box<dyn SuperTrait<SubType = SubStruct<'_>>>>`\n-   = note: required by cast to type `Box<dyn SuperTrait<SubType = SubStruct<'_>>>`\n+   = note: required for the cast from `Box<SuperStruct>` to `Box<dyn SuperTrait<SubType = SubStruct<'_>>>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ad704f5e9f01cc9c4a34555bcb1cccabf189800e", "filename": "tests/ui/generic-associated-types/issue-79422.base.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fgeneric-associated-types%2Fissue-79422.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fgeneric-associated-types%2Fissue-79422.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-79422.base.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -43,8 +43,7 @@ LL | trait MapLike<K, V> {\n LL |     type VRefCont<'a>: RefCont<'a, V> where Self: 'a;\n    |          ^^^^^^^^ ...because it contains the generic associated type `VRefCont`\n    = help: consider moving `VRefCont` to another trait\n-   = note: required for `Box<BTreeMap<u8, u8>>` to implement `CoerceUnsized<Box<dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>>>`\n-   = note: required by cast to type `Box<dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>>`\n+   = note: required for the cast from `Box<BTreeMap<u8, u8>>` to `Box<dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "14492266cdaf3065b87482f2c458ceba73a4ad35", "filename": "tests/ui/generic-associated-types/issue-79422.extended.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fgeneric-associated-types%2Fissue-79422.extended.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fgeneric-associated-types%2Fissue-79422.extended.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-79422.extended.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -27,7 +27,7 @@ LL |     type VRefCont<'a> = &'a V where Self: 'a;\n    |                         ^^^^^\n    = note: expected trait object `(dyn RefCont<'_, u8> + 'static)`\n                  found reference `&u8`\n-   = note: required for the cast from `BTreeMap<u8, u8>` to the object type `dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>`\n+   = note: required for the cast from `Box<BTreeMap<u8, u8>>` to `Box<dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2c340a02319b2be1512222b67a82d43fadceab23", "filename": "tests/ui/impl-trait/in-trait/object-safety.current.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.current.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -42,8 +42,7 @@ LL | trait Foo {\n LL |     fn baz(&self) -> impl Debug;\n    |                      ^^^^^^^^^^ ...because method `baz` references an `impl Trait` type in its return type\n    = help: consider moving `baz` to another trait\n-   = note: required for `Box<u32>` to implement `CoerceUnsized<Box<dyn Foo>>`\n-   = note: required by cast to type `Box<dyn Foo>`\n+   = note: required for the cast from `Box<u32>` to `Box<dyn Foo>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "2c340a02319b2be1512222b67a82d43fadceab23", "filename": "tests/ui/impl-trait/in-trait/object-safety.next.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.next.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -42,8 +42,7 @@ LL | trait Foo {\n LL |     fn baz(&self) -> impl Debug;\n    |                      ^^^^^^^^^^ ...because method `baz` references an `impl Trait` type in its return type\n    = help: consider moving `baz` to another trait\n-   = note: required for `Box<u32>` to implement `CoerceUnsized<Box<dyn Foo>>`\n-   = note: required by cast to type `Box<dyn Foo>`\n+   = note: required for the cast from `Box<u32>` to `Box<dyn Foo>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "df61aabf00a74bef1abc6f2666667f95a1b9096a", "filename": "tests/ui/issues/issue-14366.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fissues%2Fissue-14366.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fissues%2Fissue-14366.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-14366.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -5,8 +5,8 @@ LL |     let _x = \"test\" as &dyn (::std::any::Any);\n    |              ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = note: required for the cast from `str` to the object type `dyn Any`\n-help: consider borrowing the value, since `&str` can be coerced into `dyn Any`\n+   = note: required for the cast from `&'static str` to `&(dyn Any + 'static)`\n+help: consider borrowing the value, since `&&'static str` can be coerced into `&(dyn Any + 'static)`\n    |\n LL |     let _x = &\"test\" as &dyn (::std::any::Any);\n    |              +"}, {"sha": "9833e559cbcdbcd64e336e0ead1616e8297cae31", "filename": "tests/ui/issues/issue-22034.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fissues%2Fissue-22034.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fissues%2Fissue-22034.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-22034.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -6,7 +6,7 @@ LL |         &mut *(ptr as *mut dyn Fn())\n    |\n    = help: the trait `Fn<()>` is not implemented for `()`\n    = note: wrap the `()` in a closure with no arguments: `|| { /* code */ }`\n-   = note: required for the cast from `()` to the object type `dyn Fn()`\n+   = note: required for the cast from `*mut ()` to `*mut dyn Fn()`\n \n error: aborting due to previous error\n "}, {"sha": "63222d25c0171450695f546ec189e5bb47ae56f6", "filename": "tests/ui/issues/issue-22872.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fissues%2Fissue-22872.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fissues%2Fissue-22872.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-22872.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -13,7 +13,7 @@ LL | impl<'b, P> Wrap<'b> for Wrapper<P>\n LL | where P: Process<'b>,\n LL |       <P as Process<'b>>::Item: Iterator {\n    |                                 -------- unsatisfied trait bound introduced here\n-   = note: required for the cast from `Wrapper<P>` to the object type `dyn for<'b> Wrap<'b>`\n+   = note: required for the cast from `Box<Wrapper<P>>` to `Box<dyn for<'b> Wrap<'b>>`\n help: consider further restricting the associated type\n    |\n LL | fn push_process<P>(process: P) where P: Process<'static>, <P as Process<'_>>::Item: Iterator {"}, {"sha": "53c1940491f844292b092e963ae3bfe9e14ca67a", "filename": "tests/ui/kindck/kindck-impl-type-params.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -11,7 +11,7 @@ LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |         ----                   ^^^^^^^^^^^     ^^^^\n    |         |\n    |         unsatisfied trait bound introduced here\n-   = note: required for the cast from `S<T>` to the object type `dyn Gettable<T>`\n+   = note: required for the cast from `&S<T>` to `&dyn Gettable<T>`\n help: consider restricting type parameter `T`\n    |\n LL | fn f<T: std::marker::Send>(val: T) {\n@@ -30,7 +30,7 @@ LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                ----            ^^^^^^^^^^^     ^^^^\n    |                |\n    |                unsatisfied trait bound introduced here\n-   = note: required for the cast from `S<T>` to the object type `dyn Gettable<T>`\n+   = note: required for the cast from `&S<T>` to `&dyn Gettable<T>`\n help: consider restricting type parameter `T`\n    |\n LL | fn f<T: std::marker::Copy>(val: T) {\n@@ -49,7 +49,7 @@ LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |         ----                   ^^^^^^^^^^^     ^^^^\n    |         |\n    |         unsatisfied trait bound introduced here\n-   = note: required for the cast from `S<T>` to the object type `dyn Gettable<T>`\n+   = note: required for the cast from `&S<T>` to `&dyn Gettable<T>`\n help: consider restricting type parameter `T`\n    |\n LL | fn g<T: std::marker::Send>(val: T) {\n@@ -68,7 +68,7 @@ LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                ----            ^^^^^^^^^^^     ^^^^\n    |                |\n    |                unsatisfied trait bound introduced here\n-   = note: required for the cast from `S<T>` to the object type `dyn Gettable<T>`\n+   = note: required for the cast from `&S<T>` to `&dyn Gettable<T>`\n help: consider restricting type parameter `T`\n    |\n LL | fn g<T: std::marker::Copy>(val: T) {\n@@ -88,7 +88,7 @@ LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                ----            ^^^^^^^^^^^     ^^^^\n    |                |\n    |                unsatisfied trait bound introduced here\n-   = note: required for the cast from `S<String>` to the object type `dyn Gettable<String>`\n+   = note: required for the cast from `Box<S<String>>` to `Box<dyn Gettable<String>>`\n \n error[E0277]: the trait bound `Foo: Copy` is not satisfied\n   --> $DIR/kindck-impl-type-params.rs:43:37\n@@ -104,7 +104,7 @@ LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                ----            ^^^^^^^^^^^     ^^^^\n    |                |\n    |                unsatisfied trait bound introduced here\n-   = note: required for the cast from `S<Foo>` to the object type `dyn Gettable<Foo>`\n+   = note: required for the cast from `Box<S<Foo>>` to `Box<dyn Gettable<Foo>>`\n help: consider annotating `Foo` with `#[derive(Copy)]`\n    |\n LL +     #[derive(Copy)]"}, {"sha": "29495176556409e58c780ddf93cc54f6611d8836", "filename": "tests/ui/kindck/kindck-inherited-copy-bound.curr.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -46,8 +46,7 @@ LL | trait Foo : Copy {\n    |       ---   ^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `&Box<{integer}>` to implement `CoerceUnsized<&dyn Foo>`\n-   = note: required by cast to type `&dyn Foo`\n+   = note: required for the cast from `&Box<{integer}>` to `&dyn Foo`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "3e164ebf51439649462bfbcd9906cfad9f422c00", "filename": "tests/ui/kindck/kindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -32,8 +32,7 @@ LL | trait Foo : Copy {\n    |       ---   ^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `&Box<i32>` to implement `CoerceUnsized<&dyn Foo>`\n-   = note: required by cast to type `&dyn Foo`\n+   = note: required for the cast from `&Box<i32>` to `&dyn Foo`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6b9ac3c5852368b759366737eb5ad5b2276a919e", "filename": "tests/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -220,11 +220,7 @@ LL |     let _ = fat_v as *const dyn Foo;\n    |             ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n-   = note: required for the cast from `[u8]` to the object type `dyn Foo`\n-help: consider borrowing the value, since `&[u8]` can be coerced into `dyn Foo`\n-   |\n-LL |     let _ = &fat_v as *const dyn Foo;\n-   |             +\n+   = note: required for the cast from `*const [u8]` to `*const dyn Foo`\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/cast-rfc0401.rs:62:13\n@@ -233,11 +229,7 @@ LL |     let _ = a as *const dyn Foo;\n    |             ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = note: required for the cast from `str` to the object type `dyn Foo`\n-help: consider borrowing the value, since `&str` can be coerced into `dyn Foo`\n-   |\n-LL |     let _ = &a as *const dyn Foo;\n-   |             +\n+   = note: required for the cast from `*const str` to `*const dyn Foo`\n \n error[E0606]: casting `&{float}` as `f32` is invalid\n   --> $DIR/cast-rfc0401.rs:71:30"}, {"sha": "5b6f0235123321c621675ff8e689aea242ebfcc1", "filename": "tests/ui/never_type/fallback-closure-wrap.fallback.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fnever_type%2Ffallback-closure-wrap.fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fnever_type%2Ffallback-closure-wrap.fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_type%2Ffallback-closure-wrap.fallback.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -10,7 +10,7 @@ LL | |     }) as Box<dyn FnMut()>);\n    |\n    = note: expected unit type `()`\n                    found type `!`\n-   = note: required for the cast from `[closure@$DIR/fallback-closure-wrap.rs:18:40: 18:47]` to the object type `dyn FnMut()`\n+   = note: required for the cast from `Box<[closure@$DIR/fallback-closure-wrap.rs:18:40: 18:47]>` to `Box<dyn FnMut()>`\n \n error: aborting due to previous error\n "}, {"sha": "183245b232231e0eef76402f2765a7d48c24976e", "filename": "tests/ui/object-safety/issue-19538.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fobject-safety%2Fissue-19538.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fobject-safety%2Fissue-19538.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fissue-19538.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -29,8 +29,7 @@ LL |     fn foo<T>(&self, val: T);\n LL | trait Bar: Foo { }\n    |       --- this trait cannot be made into an object...\n    = help: consider moving `foo` to another trait\n-   = note: required for `&mut Thing` to implement `CoerceUnsized<&mut dyn Bar>`\n-   = note: required by cast to type `&mut dyn Bar`\n+   = note: required for the cast from `&mut Thing` to `&mut dyn Bar`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "db3e0885a85a871a76170277f0fd9f3b50691543", "filename": "tests/ui/object-safety/object-safety-associated-consts.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -12,8 +12,7 @@ LL | trait Bar {\n LL |     const X: usize;\n    |           ^ ...because it contains this associated `const`\n    = help: consider moving `X` to another trait\n-   = note: required for `&T` to implement `CoerceUnsized<&dyn Bar>`\n-   = note: required by cast to type `&dyn Bar`\n+   = note: required for the cast from `&T` to `&dyn Bar`\n \n error: aborting due to previous error\n "}, {"sha": "b200b64a1f077c0f677ce9397094cb7728f54f6f", "filename": "tests/ui/object-safety/object-safety-generics.object_safe_for_dispatch.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -12,8 +12,7 @@ LL | trait Bar {\n LL |     fn bar<T>(&self, t: T);\n    |        ^^^ ...because method `bar` has generic type parameters\n    = help: consider moving `bar` to another trait\n-   = note: required for `&T` to implement `CoerceUnsized<&dyn Bar>`\n-   = note: required by cast to type `&dyn Bar`\n+   = note: required for the cast from `&T` to `&dyn Bar`\n \n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-generics.rs:26:5\n@@ -29,8 +28,7 @@ LL | trait Bar {\n LL |     fn bar<T>(&self, t: T);\n    |        ^^^ ...because method `bar` has generic type parameters\n    = help: consider moving `bar` to another trait\n-   = note: required for `&T` to implement `CoerceUnsized<&dyn Bar>`\n-   = note: required by cast to type `&dyn Bar`\n+   = note: required for the cast from `&T` to `&dyn Bar`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "414614d8d0bf0c23a972a19090fa85cb20b72a23", "filename": "tests/ui/object-safety/object-safety-mentions-Self.object_safe_for_dispatch.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -12,8 +12,7 @@ LL | trait Bar {\n LL |     fn bar(&self, x: &Self);\n    |                      ^^^^^ ...because method `bar` references the `Self` type in this parameter\n    = help: consider moving `bar` to another trait\n-   = note: required for `&T` to implement `CoerceUnsized<&dyn Bar>`\n-   = note: required by cast to type `&dyn Bar`\n+   = note: required for the cast from `&T` to `&dyn Bar`\n \n error[E0038]: the trait `Baz` cannot be made into an object\n   --> $DIR/object-safety-mentions-Self.rs:30:5\n@@ -29,8 +28,7 @@ LL | trait Baz {\n LL |     fn baz(&self) -> Self;\n    |                      ^^^^ ...because method `baz` references the `Self` type in its return type\n    = help: consider moving `baz` to another trait\n-   = note: required for `&T` to implement `CoerceUnsized<&dyn Baz>`\n-   = note: required by cast to type `&dyn Baz`\n+   = note: required for the cast from `&T` to `&dyn Baz`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "befcef952a850fb088ebf252b7593f746f429e3b", "filename": "tests/ui/object-safety/object-safety-no-static.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fobject-safety%2Fobject-safety-no-static.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fobject-safety%2Fobject-safety-no-static.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fobject-safety-no-static.object_safe_for_dispatch.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -11,8 +11,7 @@ LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     fn foo() {}\n    |        ^^^ ...because associated function `foo` has no `self` parameter\n-   = note: required for `Box<Bar>` to implement `CoerceUnsized<Box<dyn Foo>>`\n-   = note: required by cast to type `Box<dyn Foo>`\n+   = note: required for the cast from `Box<Bar>` to `Box<dyn Foo>`\n help: consider turning `foo` into a method by giving it a `&self` argument\n    |\n LL |     fn foo(&self) {}"}, {"sha": "90e5c59dd027c17ff47112a1a9a9ce7323e53512", "filename": "tests/ui/object-safety/object-safety-sized-2.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fobject-safety%2Fobject-safety-sized-2.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fobject-safety%2Fobject-safety-sized-2.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fobject-safety-sized-2.object_safe_for_dispatch.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -11,8 +11,7 @@ LL | trait Bar\n    |       --- this trait cannot be made into an object...\n LL |     where Self : Sized\n    |                  ^^^^^ ...because it requires `Self: Sized`\n-   = note: required for `&T` to implement `CoerceUnsized<&dyn Bar>`\n-   = note: required by cast to type `&dyn Bar`\n+   = note: required for the cast from `&T` to `&dyn Bar`\n \n error: aborting due to previous error\n "}, {"sha": "a6c22b8747e50a16de60ffda7956a067dcc85844", "filename": "tests/ui/object-safety/object-safety-sized.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -11,8 +11,7 @@ LL | trait Bar : Sized {\n    |       ---   ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `&T` to implement `CoerceUnsized<&dyn Bar>`\n-   = note: required by cast to type `&dyn Bar`\n+   = note: required for the cast from `&T` to `&dyn Bar`\n \n error: aborting due to previous error\n "}, {"sha": "13591f5b63516dc245497b77ca50153f226f2b43", "filename": "tests/ui/self/arbitrary-self-types-not-object-safe.curr.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -31,8 +31,7 @@ LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     fn foo(self: &Rc<Self>) -> usize;\n    |                  ^^^^^^^^^ ...because method `foo`'s `self` parameter cannot be dispatched on\n-   = note: required for `Rc<usize>` to implement `CoerceUnsized<Rc<dyn Foo>>`\n-   = note: required by cast to type `Rc<dyn Foo>`\n+   = note: required for the cast from `Rc<usize>` to `Rc<dyn Foo>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "593f705353a5ca55fbe5a9e2253e0e8cd727b62f", "filename": "tests/ui/self/arbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -14,8 +14,7 @@ LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     fn foo(self: &Rc<Self>) -> usize;\n    |                  ^^^^^^^^^ ...because method `foo`'s `self` parameter cannot be dispatched on\n-   = note: required for `Rc<usize>` to implement `CoerceUnsized<Rc<dyn Foo>>`\n-   = note: required by cast to type `Rc<dyn Foo>`\n+   = note: required for the cast from `Rc<usize>` to `Rc<dyn Foo>`\n \n error: aborting due to previous error\n "}, {"sha": "bffcb1af487e9d42acf456ec90609bf900238e6f", "filename": "tests/ui/suggestions/derive-macro-missing-bounds.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -36,7 +36,7 @@ LL |     impl<T: Debug + Trait> Debug for Inner<T> {\n    |                     unsatisfied trait bound introduced here\n    = note: 1 redundant requirement hidden\n    = note: required for `&c::Inner<T>` to implement `Debug`\n-   = note: required for the cast from `&c::Inner<T>` to the object type `dyn Debug`\n+   = note: required for the cast from `&&c::Inner<T>` to `&dyn Debug`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n    |\n@@ -58,7 +58,7 @@ LL |     impl<T> Debug for Inner<T> where T: Debug, T: Trait {\n    |             ^^^^^     ^^^^^^^^                    ----- unsatisfied trait bound introduced here\n    = note: 1 redundant requirement hidden\n    = note: required for `&d::Inner<T>` to implement `Debug`\n-   = note: required for the cast from `&d::Inner<T>` to the object type `dyn Debug`\n+   = note: required for the cast from `&&d::Inner<T>` to `&dyn Debug`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n    |\n@@ -80,7 +80,7 @@ LL |     impl<T> Debug for Inner<T> where T: Debug + Trait {\n    |             ^^^^^     ^^^^^^^^                  ----- unsatisfied trait bound introduced here\n    = note: 1 redundant requirement hidden\n    = note: required for `&e::Inner<T>` to implement `Debug`\n-   = note: required for the cast from `&e::Inner<T>` to the object type `dyn Debug`\n+   = note: required for the cast from `&&e::Inner<T>` to `&dyn Debug`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n    |\n@@ -102,7 +102,7 @@ LL |     impl<T: Debug> Debug for Inner<T> where T: Trait {\n    |                    ^^^^^     ^^^^^^^^          ----- unsatisfied trait bound introduced here\n    = note: 1 redundant requirement hidden\n    = note: required for `&f::Inner<T>` to implement `Debug`\n-   = note: required for the cast from `&f::Inner<T>` to the object type `dyn Debug`\n+   = note: required for the cast from `&&f::Inner<T>` to `&dyn Debug`\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n    |"}, {"sha": "120fc538307a7ac85b7b0a27e5a03766db900610", "filename": "tests/ui/suggestions/suggest-borrow-to-dyn-object.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/tests%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/tests%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.rs?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,16 +0,0 @@\n-use std::ffi::{OsStr, OsString};\n-use std::path::Path;\n-\n-fn check(p: &dyn AsRef<Path>) {\n-    let m = std::fs::metadata(&p);\n-    println!(\"{:?}\", &m);\n-}\n-\n-fn main() {\n-    let s: OsString = \".\".into();\n-    let s: &OsStr = &s;\n-    check(s);\n-    //~^ ERROR the size for values of type `[u8]` cannot be known at compilation time\n-    //~| HELP within `OsStr`, the trait `Sized` is not implemented for `[u8]`\n-    //~| HELP consider borrowing the value, since `&OsStr` can be coerced into `dyn AsRef<Path>`\n-}"}, {"sha": "365c1016eb3dcb3ed5d28e541f70e06add3330e1", "filename": "tests/ui/suggestions/suggest-borrow-to-dyn-object.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/tests%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd/tests%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-borrow-to-dyn-object.stderr?ref=2a8221dbdfd180a2d56d4b0089f4f3952d8c2bcd", "patch": "@@ -1,18 +0,0 @@\n-error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/suggest-borrow-to-dyn-object.rs:12:11\n-   |\n-LL |     check(s);\n-   |           ^ doesn't have a size known at compile-time\n-   |\n-   = help: within `OsStr`, the trait `Sized` is not implemented for `[u8]`\n-note: required because it appears within the type `OsStr`\n-  --> $SRC_DIR/std/src/ffi/os_str.rs:LL:COL\n-   = note: required for the cast from `OsStr` to the object type `dyn AsRef<Path>`\n-help: consider borrowing the value, since `&OsStr` can be coerced into `dyn AsRef<Path>`\n-   |\n-LL |     check(&s);\n-   |           +\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "e7e8a796796b3c03cde2988ad8deb659f4e6a34e", "filename": "tests/ui/traits/coercion-generic-bad.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Ftraits%2Fcoercion-generic-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Ftraits%2Fcoercion-generic-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fcoercion-generic-bad.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -5,7 +5,7 @@ LL |     let s: Box<dyn Trait<isize>> = Box::new(Struct { person: \"Fred\" });\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait<isize>` is not implemented for `Struct`\n    |\n    = help: the trait `Trait<&'static str>` is implemented for `Struct`\n-   = note: required for the cast from `Struct` to the object type `dyn Trait<isize>`\n+   = note: required for the cast from `Box<Struct>` to `Box<dyn Trait<isize>>`\n \n error: aborting due to previous error\n "}, {"sha": "30e3c9da1a03e1ce9909746b8f99c32840bcfcbb", "filename": "tests/ui/traits/issue-20692.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Ftraits%2Fissue-20692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Ftraits%2Fissue-20692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-20692.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -27,8 +27,7 @@ LL | trait Array: Sized + Copy {}\n    |       |      |\n    |       |      ...because it requires `Self: Sized`\n    |       this trait cannot be made into an object...\n-   = note: required for `&T` to implement `CoerceUnsized<&dyn Array>`\n-   = note: required by cast to type `&dyn Array`\n+   = note: required for the cast from `&T` to `&dyn Array`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d532760243067a98f7e600cc0ee0ac8722c0316d", "filename": "tests/ui/traits/issue-38604.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Ftraits%2Fissue-38604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Ftraits%2Fissue-38604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-38604.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -25,8 +25,7 @@ LL | trait Foo where u32: Q<Self> {\n    |       ---            ^^^^^^^ ...because it uses `Self` as a type parameter\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `Box<()>` to implement `CoerceUnsized<Box<dyn Foo>>`\n-   = note: required by cast to type `Box<dyn Foo>`\n+   = note: required for the cast from `Box<()>` to `Box<dyn Foo>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1c0e8bcf1851237ea7864985b686fc863b54fda0", "filename": "tests/ui/traits/issue-7013.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Ftraits%2Fissue-7013.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Ftraits%2Fissue-7013.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-7013.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -12,7 +12,7 @@ note: required because it appears within the type `B`\n    |\n LL | struct B {\n    |        ^\n-   = note: required for the cast from `B` to the object type `dyn Foo + Send`\n+   = note: required for the cast from `Box<B>` to `Box<dyn Foo + Send>`\n \n error: aborting due to previous error\n "}, {"sha": "4315056f2065f6db7352da93dfd272ece36ae5dd", "filename": "tests/ui/traits/map-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Ftraits%2Fmap-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Ftraits%2Fmap-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fmap-types.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -5,7 +5,7 @@ LL |     let y: Box<dyn Map<usize, isize>> = Box::new(x);\n    |                                         ^^^^^^^^^^^ the trait `Map<usize, isize>` is not implemented for `Box<dyn Map<isize, isize>>`\n    |\n    = help: the trait `Map<K, V>` is implemented for `HashMap<K, V>`\n-   = note: required for the cast from `Box<dyn Map<isize, isize>>` to the object type `dyn Map<usize, isize>`\n+   = note: required for the cast from `Box<Box<dyn Map<isize, isize>>>` to `Box<dyn Map<usize, isize>>`\n \n error: aborting due to previous error\n "}, {"sha": "d56519223f4da1b1653395e45b6ee9738b5dedb5", "filename": "tests/ui/traits/non_lifetime_binders/supertrait-object-safety.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fsupertrait-object-safety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fsupertrait-object-safety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fsupertrait-object-safety.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -20,8 +20,7 @@ LL | trait Foo: for<T> Bar<T> {}\n    |       ---  ^^^^^^^^^^^^^ ...because where clause cannot reference non-lifetime `for<...>` variables\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `&()` to implement `CoerceUnsized<&dyn Foo>`\n-   = note: required by cast to type `&dyn Foo`\n+   = note: required for the cast from `&()` to `&dyn Foo`\n \n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/supertrait-object-safety.rs:19:12"}, {"sha": "a51b6975938121a79095b13868bd678d536715da", "filename": "tests/ui/traits/object/safety.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Ftraits%2Fobject%2Fsafety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Ftraits%2Fobject%2Fsafety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fobject%2Fsafety.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -11,8 +11,7 @@ LL | trait Tr {\n    |       -- this trait cannot be made into an object...\n LL |     fn foo();\n    |        ^^^ ...because associated function `foo` has no `self` parameter\n-   = note: required for `&St` to implement `CoerceUnsized<&dyn Tr>`\n-   = note: required by cast to type `&dyn Tr`\n+   = note: required for the cast from `&St` to `&dyn Tr`\n help: consider turning `foo` into a method by giving it a `&self` argument\n    |\n LL |     fn foo(&self);"}, {"sha": "74a0fc42708e3bd336f8574ada371f418b1f8649", "filename": "tests/ui/traits/test-2.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Ftraits%2Ftest-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Ftraits%2Ftest-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Ftest-2.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -76,8 +76,7 @@ LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n    |       this trait cannot be made into an object...\n    = help: consider moving `dup` to another trait\n    = help: consider moving `blah` to another trait\n-   = note: required for `Box<{integer}>` to implement `CoerceUnsized<Box<dyn bar>>`\n-   = note: required by cast to type `Box<dyn bar>`\n+   = note: required for the cast from `Box<{integer}>` to `Box<dyn bar>`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "82b4e9bd72aecef30e68490b4f0a4b1fbd5fee87", "filename": "tests/ui/traits/trait-upcasting/type-checking-test-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-1.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -15,7 +15,7 @@ error[E0277]: the trait bound `&dyn Foo: Bar<_>` is not satisfied\n LL |     let _ = x as &dyn Bar<_>; // Ambiguous\n    |             ^ the trait `Bar<_>` is not implemented for `&dyn Foo`\n    |\n-   = note: required for the cast from `&dyn Foo` to the object type `dyn Bar<_>`\n+   = note: required for the cast from `&&dyn Foo` to `&dyn Bar<_>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "856303ef4dd4cd556d6750756af421eb8fa4b7c2", "filename": "tests/ui/traits/trait-upcasting/type-checking-test-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Ftrait-upcasting%2Ftype-checking-test-2.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -15,7 +15,7 @@ error[E0277]: the trait bound `&dyn Foo<i32>: Bar<u32>` is not satisfied\n LL |     let _ = x as &dyn Bar<u32>; // Error\n    |             ^ the trait `Bar<u32>` is not implemented for `&dyn Foo<i32>`\n    |\n-   = note: required for the cast from `&dyn Foo<i32>` to the object type `dyn Bar<u32>`\n+   = note: required for the cast from `&&dyn Foo<i32>` to `&dyn Bar<u32>`\n \n error[E0605]: non-primitive cast: `&dyn Foo<u32>` as `&dyn Bar<_>`\n   --> $DIR/type-checking-test-2.rs:25:13\n@@ -34,7 +34,7 @@ error[E0277]: the trait bound `&dyn Foo<u32>: Bar<_>` is not satisfied\n LL |     let a = x as &dyn Bar<_>; // Ambiguous\n    |             ^ the trait `Bar<_>` is not implemented for `&dyn Foo<u32>`\n    |\n-   = note: required for the cast from `&dyn Foo<u32>` to the object type `dyn Bar<_>`\n+   = note: required for the cast from `&&dyn Foo<u32>` to `&dyn Bar<_>`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "af758d8099f88c37f3d56029e66c7480b5502f21", "filename": "tests/ui/type-alias-impl-trait/issue-98604.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -4,7 +4,7 @@ error[E0271]: expected `test` to be a fn item that returns `Pin<Box<dyn Future<O\n LL |     Box::new(test) as AsyncFnPtr;\n    |     ^^^^^^^^^^^^^^ expected `Pin<Box<dyn Future<Output = ()>>>`, found future\n    |\n-   = note: required for the cast from `fn() -> impl Future<Output = ()> {test}` to the object type `dyn Fn() -> Pin<Box<(dyn Future<Output = ()> + 'static)>>`\n+   = note: required for the cast from `Box<fn() -> impl Future<Output = ()> {test}>` to `Box<(dyn Fn() -> Pin<Box<(dyn Future<Output = ()> + 'static)>> + 'static)>`\n \n error: aborting due to previous error\n "}, {"sha": "9b651008371f2f340d1fb8f1d2c832df51ff11b6", "filename": "tests/ui/type-alias-impl-trait/issue-98608.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -9,7 +9,7 @@ LL |     let b: Box<dyn Fn() -> Box<u8>> = Box::new(hi);\n    |\n    = note:   expected struct `Box<u8>`\n            found opaque type `impl Sized`\n-   = note: required for the cast from `fn() -> impl Sized {hi}` to the object type `dyn Fn() -> Box<u8>`\n+   = note: required for the cast from `Box<fn() -> impl Sized {hi}>` to `Box<dyn Fn() -> Box<u8>>`\n \n error: aborting due to previous error\n "}, {"sha": "67078bcfe89ad2c2947d45d83b7677582d26ee6e", "filename": "tests/ui/type/issue-58355.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Ftype%2Fissue-58355.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Ftype%2Fissue-58355.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Fissue-58355.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -6,7 +6,7 @@ LL |     x = Some(Box::new(callback));\n    |\n    = help: within `fn() -> dyn ToString`, the trait `Sized` is not implemented for `dyn ToString`\n    = note: required because it appears within the type `fn() -> dyn ToString`\n-   = note: required for the cast from `fn() -> dyn ToString` to the object type `dyn Fn() -> (dyn ToString + 'static)`\n+   = note: required for the cast from `Box<fn() -> dyn ToString>` to `Box<dyn Fn() -> (dyn ToString + 'static)>`\n \n error: aborting due to previous error\n "}, {"sha": "0de3dbbb55725b80b1dfe47d843ff41dd8164177", "filename": "tests/ui/unsized/unsized-fn-param.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Funsized%2Funsized-fn-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Funsized%2Funsized-fn-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Funsized-fn-param.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -5,8 +5,8 @@ LL |     foo11(\"bar\", &\"baz\");\n    |           ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = note: required for the cast from `str` to the object type `dyn AsRef<Path>`\n-help: consider borrowing the value, since `&str` can be coerced into `dyn AsRef<Path>`\n+   = note: required for the cast from `&'static str` to `&dyn AsRef<Path>`\n+help: consider borrowing the value, since `&&'static str` can be coerced into `&dyn AsRef<Path>`\n    |\n LL |     foo11(&\"bar\", &\"baz\");\n    |           +\n@@ -18,8 +18,8 @@ LL |     foo12(&\"bar\", \"baz\");\n    |                   ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = note: required for the cast from `str` to the object type `dyn AsRef<Path>`\n-help: consider borrowing the value, since `&str` can be coerced into `dyn AsRef<Path>`\n+   = note: required for the cast from `&'static str` to `&dyn AsRef<Path>`\n+help: consider borrowing the value, since `&&'static str` can be coerced into `&dyn AsRef<Path>`\n    |\n LL |     foo12(&\"bar\", &\"baz\");\n    |                   +\n@@ -31,8 +31,8 @@ LL |     foo21(\"bar\", &\"baz\");\n    |           ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = note: required for the cast from `str` to the object type `dyn AsRef<str>`\n-help: consider borrowing the value, since `&str` can be coerced into `dyn AsRef<str>`\n+   = note: required for the cast from `&'static str` to `&dyn AsRef<str>`\n+help: consider borrowing the value, since `&&'static str` can be coerced into `&dyn AsRef<str>`\n    |\n LL |     foo21(&\"bar\", &\"baz\");\n    |           +\n@@ -44,8 +44,8 @@ LL |     foo22(&\"bar\", \"baz\");\n    |                   ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n-   = note: required for the cast from `str` to the object type `dyn AsRef<str>`\n-help: consider borrowing the value, since `&str` can be coerced into `dyn AsRef<str>`\n+   = note: required for the cast from `&'static str` to `&dyn AsRef<str>`\n+help: consider borrowing the value, since `&&'static str` can be coerced into `&dyn AsRef<str>`\n    |\n LL |     foo22(&\"bar\", &\"baz\");\n    |                   +"}, {"sha": "40a25c7df6babb9982837f8f415ce2c3eb21f451", "filename": "tests/ui/wf/wf-convert-unsafe-trait-obj-box.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -11,8 +11,7 @@ LL | trait Trait: Sized {}\n    |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `Box<S>` to implement `CoerceUnsized<Box<dyn Trait>>`\n-   = note: required by cast to type `Box<dyn Trait>`\n+   = note: required for the cast from `Box<S>` to `Box<dyn Trait>`\n \n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj-box.rs:17:15\n@@ -27,8 +26,7 @@ LL | trait Trait: Sized {}\n    |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `Box<S>` to implement `CoerceUnsized<Box<dyn Trait>>`\n-   = note: required by cast to type `Box<(dyn Trait + 'static)>`\n+   = note: required for the cast from `Box<S>` to `Box<(dyn Trait + 'static)>`\n \n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj-box.rs:15:5\n@@ -43,8 +41,7 @@ LL | trait Trait: Sized {}\n    |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `Box<S>` to implement `CoerceUnsized<Box<dyn Trait>>`\n-   = note: required by cast to type `Box<dyn Trait>`\n+   = note: required for the cast from `Box<S>` to `Box<dyn Trait>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "e2c71df2feb400934706b040d0aa54fc157e4a58", "filename": "tests/ui/wf/wf-convert-unsafe-trait-obj.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -11,8 +11,7 @@ LL | trait Trait: Sized {}\n    |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `&S` to implement `CoerceUnsized<&dyn Trait>`\n-   = note: required by cast to type `&dyn Trait`\n+   = note: required for the cast from `&S` to `&dyn Trait`\n \n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj.rs:17:17\n@@ -27,8 +26,7 @@ LL | trait Trait: Sized {}\n    |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `&S` to implement `CoerceUnsized<&dyn Trait>`\n-   = note: required by cast to type `&dyn Trait`\n+   = note: required for the cast from `&S` to `&dyn Trait`\n \n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj.rs:15:5\n@@ -43,8 +41,7 @@ LL | trait Trait: Sized {}\n    |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `&S` to implement `CoerceUnsized<&dyn Trait>`\n-   = note: required by cast to type `&dyn Trait`\n+   = note: required for the cast from `&S` to `&dyn Trait`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "66504e440600eb16154a78bb78d577034d54374d", "filename": "tests/ui/wf/wf-unsafe-trait-obj-match.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14bf909e71209fc946f35ffba8ae6572c9575715/tests%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr?ref=14bf909e71209fc946f35ffba8ae6572c9575715", "patch": "@@ -25,8 +25,7 @@ LL | trait Trait: Sized {}\n    |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `&S` to implement `CoerceUnsized<&dyn Trait>`\n-   = note: required by cast to type `&dyn Trait`\n+   = note: required for the cast from `&S` to `&dyn Trait`\n \n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-unsafe-trait-obj-match.rs:25:25\n@@ -45,8 +44,7 @@ LL | trait Trait: Sized {}\n    |       -----  ^^^^^ ...because it requires `Self: Sized`\n    |       |\n    |       this trait cannot be made into an object...\n-   = note: required for `&R` to implement `CoerceUnsized<&dyn Trait>`\n-   = note: required by cast to type `&dyn Trait`\n+   = note: required for the cast from `&R` to `&dyn Trait`\n \n error: aborting due to 3 previous errors\n "}]}