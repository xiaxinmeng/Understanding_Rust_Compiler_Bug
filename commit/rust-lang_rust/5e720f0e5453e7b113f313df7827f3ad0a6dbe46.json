{"sha": "5e720f0e5453e7b113f313df7827f3ad0a6dbe46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlNzIwZjBlNTQ1M2U3YjExM2YzMTNkZjc4MjdmM2FkMGE2ZGJlNDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-11T09:01:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-11T09:01:06Z"}, "message": "auto merge of #16196 : huonw/rust/fail-dead-code, r=alexcrichton\n\nThe fail macro defines some function/static items internally, which got\r\na dead_code warning when `fail!()` is used inside a dead function. This\r\nis ugly and unnecessarily reveals implementation details, so the\r\nwarnings can be squashed.\r\n\r\nFixes #16192.", "tree": {"sha": "3886a48dc274a6598a4ed7fd4354e92c5e614143", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3886a48dc274a6598a4ed7fd4354e92c5e614143"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e720f0e5453e7b113f313df7827f3ad0a6dbe46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e720f0e5453e7b113f313df7827f3ad0a6dbe46", "html_url": "https://github.com/rust-lang/rust/commit/5e720f0e5453e7b113f313df7827f3ad0a6dbe46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e720f0e5453e7b113f313df7827f3ad0a6dbe46/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c772cd391034ad29a444e748708df5a0bfff0a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c772cd391034ad29a444e748708df5a0bfff0a2", "html_url": "https://github.com/rust-lang/rust/commit/9c772cd391034ad29a444e748708df5a0bfff0a2"}, {"sha": "07aadc2e8b1923b28595393922a816e46d3903f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/07aadc2e8b1923b28595393922a816e46d3903f4", "html_url": "https://github.com/rust-lang/rust/commit/07aadc2e8b1923b28595393922a816e46d3903f4"}], "stats": {"total": 145, "additions": 122, "deletions": 23}, "files": [{"sha": "c80d1ed34516703132acafcd8dc04e290c408f38", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5e720f0e5453e7b113f313df7827f3ad0a6dbe46/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e720f0e5453e7b113f313df7827f3ad0a6dbe46/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=5e720f0e5453e7b113f313df7827f3ad0a6dbe46", "patch": "@@ -31,12 +31,17 @@ macro_rules! fail(\n         // because it's just a tiny wrapper. Small wins (156K to 149K in size)\n         // were seen when forcing this to be inlined, and that number just goes\n         // up with the number of calls to fail!()\n+        //\n+        // The leading _'s are to avoid dead code warnings if this is\n+        // used inside a dead function. Just `#[allow(dead_code)]` is\n+        // insufficient, since the user may have\n+        // `#[forbid(dead_code)]` and which cannot be overridden.\n         #[inline(always)]\n-        fn run_fmt(fmt: &::std::fmt::Arguments) -> ! {\n-            static FILE_LINE: (&'static str, uint) = (file!(), line!());\n-            ::core::failure::begin_unwind(fmt, &FILE_LINE)\n+        fn _run_fmt(fmt: &::std::fmt::Arguments) -> ! {\n+            static _FILE_LINE: (&'static str, uint) = (file!(), line!());\n+            ::core::failure::begin_unwind(fmt, &_FILE_LINE)\n         }\n-        format_args!(run_fmt, $fmt, $($arg)*)\n+        format_args!(_run_fmt, $fmt, $($arg)*)\n     });\n )\n "}, {"sha": "86fe6dc0ddc6c921bd17bd8320b7a3df2c3837d9", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5e720f0e5453e7b113f313df7827f3ad0a6dbe46/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e720f0e5453e7b113f313df7827f3ad0a6dbe46/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=5e720f0e5453e7b113f313df7827f3ad0a6dbe46", "patch": "@@ -26,7 +26,6 @@ use syntax::ast_util::{local_def, is_local, PostExpansionMethod};\n use syntax::attr::AttrMetaMethods;\n use syntax::attr;\n use syntax::codemap;\n-use syntax::parse::token;\n use syntax::visit::Visitor;\n use syntax::visit;\n \n@@ -412,18 +411,14 @@ struct DeadVisitor<'a> {\n \n impl<'a> DeadVisitor<'a> {\n     fn should_warn_about_field(&mut self, node: &ast::StructField_) -> bool {\n-        let (is_named, has_leading_underscore) = match node.ident() {\n-            Some(ref ident) => (true, token::get_ident(*ident).get().as_bytes()[0] == ('_' as u8)),\n-            _ => (false, false)\n-        };\n+        let is_named = node.ident().is_some();\n         let field_type = ty::node_id_to_type(self.tcx, node.id);\n         let is_marker_field = match ty::ty_to_def_id(field_type) {\n             Some(def_id) => self.tcx.lang_items.items().any(|(_, item)| *item == Some(def_id)),\n             _ => false\n         };\n         is_named\n             && !self.symbol_is_live(node.id, None)\n-            && !has_leading_underscore\n             && !is_marker_field\n             && !has_allow_dead_code_or_lang_attr(node.attrs.as_slice())\n     }\n@@ -468,13 +463,15 @@ impl<'a> DeadVisitor<'a> {\n                       id: ast::NodeId,\n                       span: codemap::Span,\n                       ident: ast::Ident) {\n-        self.tcx\n-            .sess\n-            .add_lint(lint::builtin::DEAD_CODE,\n-                      id,\n-                      span,\n-                      format!(\"code is never used: `{}`\",\n-                              token::get_ident(ident)));\n+        let name = ident.as_str();\n+        if !name.starts_with(\"_\") {\n+            self.tcx\n+                .sess\n+                .add_lint(lint::builtin::DEAD_CODE,\n+                          id,\n+                          span,\n+                          format!(\"code is never used: `{}`\", name));\n+        }\n     }\n }\n "}, {"sha": "85e614ab47e3da52d657db95e912166d5e88b258", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5e720f0e5453e7b113f313df7827f3ad0a6dbe46/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e720f0e5453e7b113f313df7827f3ad0a6dbe46/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=5e720f0e5453e7b113f313df7827f3ad0a6dbe46", "patch": "@@ -43,8 +43,8 @@ macro_rules! fail(\n     });\n     ($msg:expr) => ({\n         // static requires less code at runtime, more constant data\n-        static FILE_LINE: (&'static str, uint) = (file!(), line!());\n-        ::std::rt::begin_unwind($msg, &FILE_LINE)\n+        static _FILE_LINE: (&'static str, uint) = (file!(), line!());\n+        ::std::rt::begin_unwind($msg, &_FILE_LINE)\n     });\n     ($fmt:expr, $($arg:tt)*) => ({\n         // a closure can't have return type !, so we need a full\n@@ -58,12 +58,17 @@ macro_rules! fail(\n         // because it's just a tiny wrapper. Small wins (156K to 149K in size)\n         // were seen when forcing this to be inlined, and that number just goes\n         // up with the number of calls to fail!()\n+        //\n+        // The leading _'s are to avoid dead code warnings if this is\n+        // used inside a dead function. Just `#[allow(dead_code)]` is\n+        // insufficient, since the user may have\n+        // `#[forbid(dead_code)]` and which cannot be overridden.\n         #[inline(always)]\n-        fn run_fmt(fmt: &::std::fmt::Arguments) -> ! {\n-            static FILE_LINE: (&'static str, uint) = (file!(), line!());\n-            ::std::rt::begin_unwind_fmt(fmt, &FILE_LINE)\n+        fn _run_fmt(fmt: &::std::fmt::Arguments) -> ! {\n+            static _FILE_LINE: (&'static str, uint) = (file!(), line!());\n+            ::std::rt::begin_unwind_fmt(fmt, &_FILE_LINE)\n         }\n-        format_args!(run_fmt, $fmt, $($arg)*)\n+        format_args!(_run_fmt, $fmt, $($arg)*)\n     });\n )\n "}, {"sha": "b2b04edc787c8613b4e4bf13fd2297a401a64e92", "filename": "src/test/compile-fail/fail-no-dead-code-core.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5e720f0e5453e7b113f313df7827f3ad0a6dbe46/src%2Ftest%2Fcompile-fail%2Ffail-no-dead-code-core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e720f0e5453e7b113f313df7827f3ad0a6dbe46/src%2Ftest%2Fcompile-fail%2Ffail-no-dead-code-core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffail-no-dead-code-core.rs?ref=5e720f0e5453e7b113f313df7827f3ad0a6dbe46", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(phase)]\n+#![deny(dead_code)]\n+#![allow(unreachable_code)]\n+\n+#[phase(link, plugin)] extern crate core;\n+\n+\n+fn foo() { //~ ERROR code is never used\n+\n+    // none of these should have any dead_code exposed to the user\n+    fail!();\n+\n+    fail!(\"foo\");\n+\n+    fail!(\"bar {}\", \"baz\")\n+}\n+\n+\n+fn main() {}"}, {"sha": "da59722c3ffaa53db5ba8ffac10bb6938d147c7a", "filename": "src/test/compile-fail/fail-no-dead-code.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5e720f0e5453e7b113f313df7827f3ad0a6dbe46/src%2Ftest%2Fcompile-fail%2Ffail-no-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e720f0e5453e7b113f313df7827f3ad0a6dbe46/src%2Ftest%2Fcompile-fail%2Ffail-no-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffail-no-dead-code.rs?ref=5e720f0e5453e7b113f313df7827f3ad0a6dbe46", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(dead_code)]\n+#![allow(unreachable_code)]\n+\n+fn foo() { //~ ERROR code is never used\n+\n+    // none of these should have any dead_code exposed to the user\n+    fail!();\n+\n+    fail!(\"foo\");\n+\n+    fail!(\"bar {}\", \"baz\")\n+}\n+\n+\n+fn main() {}"}, {"sha": "b588ea9cfd025d76ac0114e0129f6c6d7ca3ab08", "filename": "src/test/run-pass/dead-code-leading-underscore.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5e720f0e5453e7b113f313df7827f3ad0a6dbe46/src%2Ftest%2Frun-pass%2Fdead-code-leading-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e720f0e5453e7b113f313df7827f3ad0a6dbe46/src%2Ftest%2Frun-pass%2Fdead-code-leading-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdead-code-leading-underscore.rs?ref=5e720f0e5453e7b113f313df7827f3ad0a6dbe46", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(dead_code)]\n+\n+static _X: uint = 0;\n+\n+fn _foo() {}\n+\n+struct _Y {\n+    _z: uint\n+}\n+\n+enum _Z {}\n+\n+impl _Y {\n+    fn _bar() {}\n+}\n+\n+type _A = int;\n+\n+mod _bar {\n+    fn _qux() {}\n+}\n+\n+extern {\n+    #[link_name = \"abort\"]\n+    fn _abort() -> !;\n+}\n+\n+pub fn main() {}"}]}