{"sha": "9a0eaf6ebd6165a071ce3cf6d30921e02a115660", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMGVhZjZlYmQ2MTY1YTA3MWNlM2NmNmQzMDkyMWUwMmExMTU2NjA=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-04-03T08:48:11Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-04-03T08:48:11Z"}, "message": "Update to rustc nightly", "tree": {"sha": "63ac44ce366853d7fc00354643a9fc1f30eb5def", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63ac44ce366853d7fc00354643a9fc1f30eb5def"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a0eaf6ebd6165a071ce3cf6d30921e02a115660", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a0eaf6ebd6165a071ce3cf6d30921e02a115660", "html_url": "https://github.com/rust-lang/rust/commit/9a0eaf6ebd6165a071ce3cf6d30921e02a115660", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a0eaf6ebd6165a071ce3cf6d30921e02a115660/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac61d2935112474ff6c6d2ac3daf485adf5b5df8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac61d2935112474ff6c6d2ac3daf485adf5b5df8", "html_url": "https://github.com/rust-lang/rust/commit/ac61d2935112474ff6c6d2ac3daf485adf5b5df8"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "b621471218021633ab6e545caf89531b12fb1aed", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a0eaf6ebd6165a071ce3cf6d30921e02a115660/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/9a0eaf6ebd6165a071ce3cf6d30921e02a115660/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=9a0eaf6ebd6165a071ce3cf6d30921e02a115660", "patch": "@@ -1 +1 @@\n-nightly-2019-03-29\n+nightly-2019-04-03"}, {"sha": "038f5ed8a047588dca0f12c262cd820a356bc364", "filename": "src/fn_call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a0eaf6ebd6165a071ce3cf6d30921e02a115660/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a0eaf6ebd6165a071ce3cf6d30921e02a115660/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=9a0eaf6ebd6165a071ce3cf6d30921e02a115660", "patch": "@@ -270,7 +270,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n                 let mut args = this.frame().mir.args_iter();\n \n                 let arg_local = args.next().ok_or_else(||\n-                    EvalErrorKind::AbiViolation(\n+                    InterpError::AbiViolation(\n                         \"Argument to __rust_maybe_catch_panic does not take enough arguments.\"\n                             .to_owned(),\n                     ),\n@@ -529,7 +529,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n                 // This is `libc::pthread_key_t`.\n                 let key_type = args[0].layout.ty\n                     .builtin_deref(true)\n-                    .ok_or_else(|| EvalErrorKind::AbiViolation(\"wrong signature used for `pthread_key_create`: first argument must be a raw pointer.\".to_owned()))?\n+                    .ok_or_else(|| InterpError::AbiViolation(\"wrong signature used for `pthread_key_create`: first argument must be a raw pointer.\".to_owned()))?\n                     .ty;\n                 let key_layout = this.layout_of(key_type)?;\n "}, {"sha": "8a4cccc743e6f86f37d178898b850a8b612c1318", "filename": "src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a0eaf6ebd6165a071ce3cf6d30921e02a115660/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a0eaf6ebd6165a071ce3cf6d30921e02a115660/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=9a0eaf6ebd6165a071ce3cf6d30921e02a115660", "patch": "@@ -39,7 +39,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n             })\n             .ok_or_else(|| {\n                 let path = path.iter().map(|&s| s.to_owned()).collect();\n-                EvalErrorKind::PathNotFound(path).into()\n+                InterpError::PathNotFound(path).into()\n             })\n     }\n "}, {"sha": "a30b11aeb27de6d37b383baa04f425ddd5e1400c", "filename": "src/operator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a0eaf6ebd6165a071ce3cf6d30921e02a115660/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a0eaf6ebd6165a071ce3cf6d30921e02a115660/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=9a0eaf6ebd6165a071ce3cf6d30921e02a115660", "patch": "@@ -325,7 +325,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n         let pointee_size = self.layout_of(pointee_ty)?.size.bytes() as i64;\n         let offset = offset\n             .checked_mul(pointee_size)\n-            .ok_or_else(|| EvalErrorKind::Overflow(mir::BinOp::Mul))?;\n+            .ok_or_else(|| InterpError::Overflow(mir::BinOp::Mul))?;\n         // Now let's see what kind of pointer this is.\n         if let Scalar::Ptr(ptr) = ptr {\n             // Both old and new pointer must be in-bounds of a *live* allocation."}, {"sha": "bea6aaf9cf892f54623c434402a63d83673c7b85", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a0eaf6ebd6165a071ce3cf6d30921e02a115660/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a0eaf6ebd6165a071ce3cf6d30921e02a115660/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=9a0eaf6ebd6165a071ce3cf6d30921e02a115660", "patch": "@@ -7,7 +7,7 @@ use rustc::hir::{Mutability, MutMutable, MutImmutable};\n use rustc::mir::RetagKind;\n \n use crate::{\n-    EvalResult, EvalErrorKind, MiriEvalContext, HelpersEvalContextExt, Evaluator, MutValueVisitor,\n+    EvalResult, InterpError, MiriEvalContext, HelpersEvalContextExt, Evaluator, MutValueVisitor,\n     MemoryKind, MiriMemoryKind, RangeMap, AllocId, Allocation, AllocationExtra,\n     Pointer, Immediate, ImmTy, PlaceTy, MPlaceTy,\n };\n@@ -380,7 +380,7 @@ impl<'tcx> Stacks {\n             ptr.tag, kind, ptr, size.bytes());\n         let stacks = self.stacks.borrow();\n         for stack in stacks.iter(ptr.offset, size) {\n-            stack.deref(ptr.tag, kind).map_err(EvalErrorKind::MachineError)?;\n+            stack.deref(ptr.tag, kind).map_err(InterpError::MachineError)?;\n         }\n         Ok(())\n     }\n@@ -435,7 +435,7 @@ impl<'tcx> Stacks {\n         let mut stacks = self.stacks.borrow_mut();\n         for stack in stacks.iter_mut(ptr.offset, size) {\n             // Access source `ptr`, create new ref.\n-            let ptr_idx = stack.deref(ptr.tag, new_kind).map_err(EvalErrorKind::MachineError)?;\n+            let ptr_idx = stack.deref(ptr.tag, new_kind).map_err(InterpError::MachineError)?;\n             // If we can deref the new tag already, and if that tag lives higher on\n             // the stack than the one we come from, just use that.\n             // That is, we check if `new_bor` *already* is \"derived from\" `ptr.tag`."}, {"sha": "992e4fd05619045c4f55a52f17898580d6c8e528", "filename": "src/tls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a0eaf6ebd6165a071ce3cf6d30921e02a115660/src%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a0eaf6ebd6165a071ce3cf6d30921e02a115660/src%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftls.rs?ref=9a0eaf6ebd6165a071ce3cf6d30921e02a115660", "patch": "@@ -4,7 +4,7 @@ use rustc_target::abi::LayoutOf;\n use rustc::{ty, ty::layout::HasDataLayout, mir};\n \n use crate::{\n-    EvalResult, EvalErrorKind, StackPopCleanup,\n+    EvalResult, InterpError, StackPopCleanup,\n     MPlaceTy, Scalar, Borrow,\n };\n \n@@ -149,7 +149,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                 StackPopCleanup::None { cleanup: true },\n             )?;\n             let arg_local = this.frame().mir.args_iter().next().ok_or_else(\n-                || EvalErrorKind::AbiViolation(\"TLS dtor does not take enough arguments.\".to_owned()),\n+                || InterpError::AbiViolation(\"TLS dtor does not take enough arguments.\".to_owned()),\n             )?;\n             let dest = this.eval_place(&mir::Place::Base(mir::PlaceBase::Local(arg_local)))?;\n             this.write_scalar(ptr, dest)?;"}]}