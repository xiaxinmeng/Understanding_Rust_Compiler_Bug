{"sha": "f45758cddc962248dc46d8c051f9f3a73ef50c14", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NTc1OGNkZGM5NjIyNDhkYzQ2ZDhjMDUxZjlmM2E3M2VmNTBjMTQ=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-01-05T01:10:23Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-01-09T21:36:15Z"}, "message": "Compile some CGUs in parallel at the start of codegen", "tree": {"sha": "e38ae992d5f9b8eb5d679361faed58a927dacb64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e38ae992d5f9b8eb5d679361faed58a927dacb64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f45758cddc962248dc46d8c051f9f3a73ef50c14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f45758cddc962248dc46d8c051f9f3a73ef50c14", "html_url": "https://github.com/rust-lang/rust/commit/f45758cddc962248dc46d8c051f9f3a73ef50c14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f45758cddc962248dc46d8c051f9f3a73ef50c14/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59eb49d0da83fff01ae3c63f2e282b953e5f88df", "url": "https://api.github.com/repos/rust-lang/rust/commits/59eb49d0da83fff01ae3c63f2e282b953e5f88df", "html_url": "https://github.com/rust-lang/rust/commit/59eb49d0da83fff01ae3c63f2e282b953e5f88df"}], "stats": {"total": 82, "additions": 61, "deletions": 21}, "files": [{"sha": "d3b524c1a1e70023fe3bd43eddd16a4244630d9c", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f45758cddc962248dc46d8c051f9f3a73ef50c14/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45758cddc962248dc46d8c051f9f3a73ef50c14/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=f45758cddc962248dc46d8c051f9f3a73ef50c14", "patch": "@@ -13,7 +13,7 @@\n //!   but one `llvm::Type` corresponds to many `Ty`s; for instance, `tup(int, int,\n //!   int)` and `rec(x=int, y=int, z=int)` will have the same `llvm::Type`.\n \n-use super::{LlvmCodegenBackend, ModuleLlvm};\n+use super::ModuleLlvm;\n \n use crate::builder::Builder;\n use crate::common;\n@@ -29,7 +29,6 @@ use rustc::middle::exported_symbols;\n use rustc::mir::mono::{Linkage, Visibility};\n use rustc::session::config::DebugInfo;\n use rustc::ty::TyCtxt;\n-use rustc_codegen_ssa::back::write::submit_codegened_module_to_llvm;\n use rustc_codegen_ssa::base::maybe_create_entry_wrapper;\n use rustc_codegen_ssa::mono_item::MonoItemExt;\n use rustc_codegen_ssa::traits::*;\n@@ -100,8 +99,7 @@ pub fn iter_globals(llmod: &'ll llvm::Module) -> ValueIter<'ll> {\n pub fn compile_codegen_unit(\n     tcx: TyCtxt<'tcx>,\n     cgu_name: Symbol,\n-    tx_to_llvm_workers: &std::sync::mpsc::Sender<Box<dyn std::any::Any + Send>>,\n-) {\n+) -> (ModuleCodegen<ModuleLlvm>, u64) {\n     let prof_timer = tcx.prof.generic_activity(\"codegen_module\");\n     let start_time = Instant::now();\n \n@@ -115,8 +113,6 @@ pub fn compile_codegen_unit(\n     // the time we needed for codegenning it.\n     let cost = time_to_codegen.as_secs() * 1_000_000_000 + time_to_codegen.subsec_nanos() as u64;\n \n-    submit_codegened_module_to_llvm(&LlvmCodegenBackend(()), tx_to_llvm_workers, module, cost);\n-\n     fn module_codegen(tcx: TyCtxt<'_>, cgu_name: Symbol) -> ModuleCodegen<ModuleLlvm> {\n         let cgu = tcx.codegen_unit(cgu_name);\n         // Instantiate monomorphizations without filling out definitions yet...\n@@ -164,6 +160,8 @@ pub fn compile_codegen_unit(\n             kind: ModuleKind::Regular,\n         }\n     }\n+\n+    (module, cost)\n }\n \n pub fn set_link_section(llval: &Value, attrs: &CodegenFnAttrs) {"}, {"sha": "a6168128c4d44611eb45a5be8f9234e687dfcfc8", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f45758cddc962248dc46d8c051f9f3a73ef50c14/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45758cddc962248dc46d8c051f9f3a73ef50c14/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=f45758cddc962248dc46d8c051f9f3a73ef50c14", "patch": "@@ -19,6 +19,7 @@\n #![feature(link_args)]\n #![feature(static_nobundle)]\n #![feature(trusted_len)]\n+#![recursion_limit = \"256\"]\n \n use back::write::{create_informational_target_machine, create_target_machine};\n use rustc_span::symbol::Symbol;\n@@ -108,9 +109,8 @@ impl ExtraBackendMethods for LlvmCodegenBackend {\n         &self,\n         tcx: TyCtxt<'_>,\n         cgu_name: Symbol,\n-        tx: &std::sync::mpsc::Sender<Box<dyn Any + Send>>,\n-    ) {\n-        base::compile_codegen_unit(tcx, cgu_name, tx);\n+    ) -> (ModuleCodegen<ModuleLlvm>, u64) {\n+        base::compile_codegen_unit(tcx, cgu_name)\n     }\n     fn target_machine_factory(\n         &self,"}, {"sha": "d2823381d887ead97f75593e6d5d1f3bbf611b72", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 51, "deletions": 8, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/f45758cddc962248dc46d8c051f9f3a73ef50c14/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45758cddc962248dc46d8c051f9f3a73ef50c14/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=f45758cddc962248dc46d8c051f9f3a73ef50c14", "patch": "@@ -14,8 +14,8 @@\n //!   int)` and `rec(x=int, y=int, z=int)` will have the same `llvm::Type`.\n \n use crate::back::write::{\n-    start_async_codegen, submit_post_lto_module_to_llvm, submit_pre_lto_module_to_llvm,\n-    OngoingCodegen,\n+    start_async_codegen, submit_codegened_module_to_llvm, submit_post_lto_module_to_llvm,\n+    submit_pre_lto_module_to_llvm, OngoingCodegen,\n };\n use crate::common::{IntPredicate, RealPredicate, TypeKind};\n use crate::meth;\n@@ -40,6 +40,7 @@ use rustc::ty::{self, Instance, Ty, TyCtxt};\n use rustc_codegen_utils::{check_for_rustc_errors_attr, symbol_names_test};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::profiling::print_time_passes_entry;\n+use rustc_data_structures::sync::{par_iter, Lock, ParallelIterator};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_index::vec::Idx;\n@@ -606,20 +607,62 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n         codegen_units\n     };\n \n-    let mut total_codegen_time = Duration::new(0, 0);\n+    let total_codegen_time = Lock::new(Duration::new(0, 0));\n \n-    for cgu in codegen_units.into_iter() {\n+    let cgu_reuse: Vec<_> = tcx.sess.time(\"find cgu reuse\", || {\n+        codegen_units.iter().map(|cgu| determine_cgu_reuse(tcx, &cgu)).collect()\n+    });\n+\n+    let mut cgus: FxHashMap<usize, _> = if cfg!(parallel_compiler) {\n+        tcx.sess.time(\"compile first CGUs\", || {\n+            // Try to find one CGU to compile per thread.\n+            let cgus: Vec<_> = cgu_reuse\n+                .iter()\n+                .enumerate()\n+                .filter(|&(_, reuse)| reuse == &CguReuse::No)\n+                .take(tcx.sess.threads())\n+                .collect();\n+\n+            // Compile the found CGUs in parallel.\n+            par_iter(cgus)\n+                .map(|(i, _)| {\n+                    let start_time = Instant::now();\n+                    let module = backend.compile_codegen_unit(tcx, codegen_units[i].name());\n+                    let mut time = total_codegen_time.lock();\n+                    *time += start_time.elapsed();\n+                    (i, module)\n+                })\n+                .collect()\n+        })\n+    } else {\n+        FxHashMap::default()\n+    };\n+\n+    let mut total_codegen_time = total_codegen_time.into_inner();\n+\n+    for (i, cgu) in codegen_units.into_iter().enumerate() {\n         ongoing_codegen.wait_for_signal_to_codegen_item();\n         ongoing_codegen.check_for_errors(tcx.sess);\n \n-        let cgu_reuse = determine_cgu_reuse(tcx, &cgu);\n+        let cgu_reuse = cgu_reuse[i];\n         tcx.sess.cgu_reuse_tracker.set_actual_reuse(&cgu.name().as_str(), cgu_reuse);\n \n         match cgu_reuse {\n             CguReuse::No => {\n-                let start_time = Instant::now();\n-                backend.compile_codegen_unit(tcx, cgu.name(), &ongoing_codegen.coordinator_send);\n-                total_codegen_time += start_time.elapsed();\n+                let (module, cost) = if let Some(cgu) = cgus.remove(&i) {\n+                    cgu\n+                } else {\n+                    let start_time = Instant::now();\n+                    let module = backend.compile_codegen_unit(tcx, cgu.name());\n+                    total_codegen_time += start_time.elapsed();\n+                    module\n+                };\n+                submit_codegened_module_to_llvm(\n+                    &backend,\n+                    &ongoing_codegen.coordinator_send,\n+                    module,\n+                    cost,\n+                );\n                 false\n             }\n             CguReuse::PreLto => {"}, {"sha": "2662b81a9840912a27e9a6712a630172e0b6e824", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f45758cddc962248dc46d8c051f9f3a73ef50c14/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f45758cddc962248dc46d8c051f9f3a73ef50c14/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=f45758cddc962248dc46d8c051f9f3a73ef50c14", "patch": "@@ -1,5 +1,6 @@\n use super::write::WriteBackendMethods;\n use super::CodegenObject;\n+use crate::ModuleCodegen;\n \n use rustc::middle::cstore::EncodedMetadata;\n use rustc::session::{config, Session};\n@@ -10,7 +11,6 @@ use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_span::symbol::Symbol;\n use syntax::expand::allocator::AllocatorKind;\n \n-use std::sync::mpsc;\n use std::sync::Arc;\n \n pub trait BackendTypes {\n@@ -34,7 +34,7 @@ impl<'tcx, T> Backend<'tcx> for T where\n {\n }\n \n-pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Send {\n+pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Send + Sync {\n     fn new_metadata(&self, sess: TyCtxt<'_>, mod_name: &str) -> Self::Module;\n     fn write_compressed_metadata<'tcx>(\n         &self,\n@@ -52,8 +52,7 @@ pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Se\n         &self,\n         tcx: TyCtxt<'_>,\n         cgu_name: Symbol,\n-        tx_to_llvm_workers: &mpsc::Sender<Box<dyn std::any::Any + Send>>,\n-    );\n+    ) -> (ModuleCodegen<Self::Module>, u64);\n     // If find_features is true this won't access `sess.crate_types` by assuming\n     // that `is_pie_binary` is false. When we discover LLVM target features\n     // `sess.crate_types` is uninitialized so we cannot access it."}]}