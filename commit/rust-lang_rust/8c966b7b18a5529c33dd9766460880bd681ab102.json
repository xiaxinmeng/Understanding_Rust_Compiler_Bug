{"sha": "8c966b7b18a5529c33dd9766460880bd681ab102", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjOTY2YjdiMThhNTUyOWMzM2RkOTc2NjQ2MDg4MGJkNjgxYWIxMDI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-08T09:53:04Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-08T09:53:04Z"}, "message": "Stop passing around some unused information in typeck", "tree": {"sha": "c1ff1ab42802d0d8d67f202f72f632a19f67a80b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1ff1ab42802d0d8d67f202f72f632a19f67a80b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c966b7b18a5529c33dd9766460880bd681ab102", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c966b7b18a5529c33dd9766460880bd681ab102", "html_url": "https://github.com/rust-lang/rust/commit/8c966b7b18a5529c33dd9766460880bd681ab102", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c966b7b18a5529c33dd9766460880bd681ab102/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7c6cb73858a2659651bc0ff9dfd1cdb72239d32", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7c6cb73858a2659651bc0ff9dfd1cdb72239d32", "html_url": "https://github.com/rust-lang/rust/commit/a7c6cb73858a2659651bc0ff9dfd1cdb72239d32"}], "stats": {"total": 34, "additions": 7, "deletions": 27}, "files": [{"sha": "3a37072e50962b7fc54c1d5bd8da9027ce1b9de4", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 7, "deletions": 27, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8c966b7b18a5529c33dd9766460880bd681ab102/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c966b7b18a5529c33dd9766460880bd681ab102/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=8c966b7b18a5529c33dd9766460880bd681ab102", "patch": "@@ -35,15 +35,14 @@ tag obj_info {\n type crate_ctxt = {mutable obj_infos: [obj_info], tcx: ty::ctxt};\n \n type fn_ctxt =\n-    // var_bindings, locals, local_names, and next_var_id are shared\n+    // var_bindings, locals and next_var_id are shared\n     // with any nested functions that capture the environment\n     // (and with any functions whose environment is being captured).\n     {ret_ty: ty::t,\n      purity: ast::purity,\n      proto: ast::proto,\n      var_bindings: @ty::unify::var_bindings,\n      locals: hashmap<ast::node_id, int>,\n-     local_names: hashmap<ast::node_id, ast::ident>,\n      next_var_id: @mutable int,\n      mutable fixups: [ast::node_id],\n      ccx: @crate_ctxt};\n@@ -72,13 +71,6 @@ fn lookup_def(fcx: @fn_ctxt, sp: span, id: ast::node_id) -> ast::def {\n     }\n }\n \n-fn ident_for_local(loc: @ast::local) -> ast::ident {\n-    ret alt loc.node.pat.node {\n-          ast::pat_bind(name) { name }\n-          _ { \"local\" }\n-        }; // FIXME DESTR\n-}\n-\n // Returns the type parameter count and the type for the given definition.\n fn ty_param_kinds_and_ty_for_def(fcx: @fn_ctxt, sp: span, defn: ast::def) ->\n    ty_param_kinds_and_ty {\n@@ -1117,36 +1109,31 @@ mod writeback {\n type gather_result =\n     {var_bindings: @ty::unify::var_bindings,\n      locals: hashmap<ast::node_id, int>,\n-     local_names: hashmap<ast::node_id, ast::ident>,\n      next_var_id: @mutable int};\n \n // Used only as a helper for check_fn.\n fn gather_locals(ccx: @crate_ctxt, f: ast::_fn, id: ast::node_id,\n                  old_fcx: option::t<@fn_ctxt>) -> gather_result {\n-    let {vb: vb, locals: locals, local_names: local_names, nvi: nvi} =\n+    let {vb: vb, locals: locals, nvi: nvi} =\n         alt old_fcx {\n           none. {\n             {vb: ty::unify::mk_var_bindings(),\n              locals: new_int_hash::<int>(),\n-             local_names: new_int_hash::<ast::ident>(),\n              nvi: @mutable 0}\n           }\n           some(fcx) {\n             {vb: fcx.var_bindings,\n              locals: fcx.locals,\n-             local_names: fcx.local_names,\n              nvi: fcx.next_var_id}\n           }\n         };\n     let tcx = ccx.tcx;\n \n     let next_var_id = lambda () -> int { let rv = *nvi; *nvi += 1; ret rv; };\n     let assign =\n-        lambda (nid: ast::node_id, ident: ast::ident,\n-                ty_opt: option::t<ty::t>) {\n+        lambda (nid: ast::node_id, ty_opt: option::t<ty::t>) {\n             let var_id = next_var_id();\n             locals.insert(nid, var_id);\n-            local_names.insert(nid, ident);\n             alt ty_opt {\n               none. {/* nothing to do */ }\n               some(typ) {\n@@ -1168,30 +1155,30 @@ fn gather_locals(ccx: @crate_ctxt, f: ast::_fn, id: ast::node_id,\n     }\n     for f: ast::obj_field in obj_fields {\n         let field_ty = ty::node_id_to_type(ccx.tcx, f.id);\n-        assign(f.id, f.ident, some(field_ty));\n+        assign(f.id, some(field_ty));\n     }\n \n     // Add formal parameters.\n     let args = ty::ty_fn_args(ccx.tcx, ty::node_id_to_type(ccx.tcx, id));\n     let i = 0u;\n     for arg: ty::arg in args {\n-        assign(f.decl.inputs[i].id, f.decl.inputs[i].ident, some(arg.ty));\n+        assign(f.decl.inputs[i].id, some(arg.ty));\n         i += 1u;\n     }\n \n     // Add explicitly-declared locals.\n     let visit_local =\n         lambda (local: @ast::local, &&e: (), v: visit::vt<()>) {\n             let local_ty = ast_ty_to_ty_crate_infer(ccx, local.node.ty);\n-            assign(local.node.id, ident_for_local(local), local_ty);\n+            assign(local.node.id, local_ty);\n             visit::visit_local(local, e, v);\n         };\n \n     // Add pattern bindings.\n     let visit_pat =\n         lambda (p: @ast::pat, &&e: (), v: visit::vt<()>) {\n             alt p.node {\n-              ast::pat_bind(ident) { assign(p.id, ident, none); }\n+              ast::pat_bind(_) { assign(p.id, none); }\n               _ {/* no-op */ }\n             }\n             visit::visit_pat(p, e, v);\n@@ -1214,7 +1201,6 @@ fn gather_locals(ccx: @crate_ctxt, f: ast::_fn, id: ast::node_id,\n     visit::visit_block(f.body, (), visit::mk_vt(visit));\n     ret {var_bindings: vb,\n          locals: locals,\n-         local_names: local_names,\n          next_var_id: nvi};\n }\n \n@@ -2409,10 +2395,6 @@ fn check_decl_local(fcx: @fn_ctxt, local: @ast::local) -> bool {\n     let bot = false;\n \n     alt fcx.locals.find(local.node.id) {\n-      none. {\n-        fcx.ccx.tcx.sess.bug(\"check_decl_local: local id not found \" +\n-                                 ident_for_local(local));\n-      }\n       some(i) {\n         let t = ty::mk_var(fcx.ccx.tcx, i);\n         write::ty_only_fixup(fcx, local.node.id, t);\n@@ -2498,7 +2480,6 @@ fn check_const(ccx: @crate_ctxt, _sp: span, e: @ast::expr, id: ast::node_id) {\n           proto: ast::proto_shared(ast::sugar_normal),\n           var_bindings: ty::unify::mk_var_bindings(),\n           locals: new_int_hash::<int>(),\n-          local_names: new_int_hash::<ast::ident>(),\n           next_var_id: @mutable 0,\n           mutable fixups: fixups,\n           ccx: ccx};\n@@ -2640,7 +2621,6 @@ fn check_fn(ccx: @crate_ctxt, f: ast::_fn, id: ast::node_id,\n           proto: f.proto,\n           var_bindings: gather_result.var_bindings,\n           locals: gather_result.locals,\n-          local_names: gather_result.local_names,\n           next_var_id: gather_result.next_var_id,\n           mutable fixups: fixups,\n           ccx: ccx};"}]}