{"sha": "5bd834bdb4e2c1fe6666be8c8fad41526d72e3d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZDgzNGJkYjRlMmMxZmU2NjY2YmU4YzhmYWQ0MTUyNmQ3MmUzZDE=", "commit": {"author": {"name": "Stephen M. Coakley", "email": "me@stephencoakley.com", "date": "2016-09-08T04:48:07Z"}, "committer": {"name": "Stephen M. Coakley", "email": "me@stephencoakley.com", "date": "2016-09-08T04:48:07Z"}, "message": "Add ThreadId for comparing threads", "tree": {"sha": "178d4010b384a492b4d0417be1d736b70b410a2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/178d4010b384a492b4d0417be1d736b70b410a2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bd834bdb4e2c1fe6666be8c8fad41526d72e3d1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJX0O2IAAoJEJG1nBhJTE/AqNkP/iPjUcbD/62lk4e3F2aYfK9L\nWLWz66mk9psU6FD2TvlVVzTqVmnveWt7/949e0LBFWxicxe8/B+M59kAlm0FKepV\nLY446lvl231qN1jNEPMyTDBjWdtn2Pf/hMs6kDnVYTXtMWx36wrl72y8T9JLbqkD\n2zd4lEAoigoRaM3B68LN6LGFV4WB7jwC7qOARXnrL82xW/A6REWYPnFG3K6AGczA\nw2t38Azy6KANsYVmfc+jhw3IhslUtRd/qXwq7yvrzJt3WDHIA5e23yGIEdtglhpB\nRJSF0KkyPRZ3F/ZVRFpesZ0C9aO+3elf1W9wiMsGnwc1J73aFQWd6kU80d/KnyNK\npqEWHfXL99BbB1j2lHwidVWQ95HPo/zNtLAwBRy3e2PERBDxnI/WkY4/6I4N47oO\nify+fi5eKTJZIyeFB/PSJ1UO5UuRqNAHmzQMKc2qlfZlkDQVs9t8rZ+EPtZ3vh8/\nPMc4YriqqLRaQot8r4riZeR5TqzgbwF4cV0ppDNS5NG/GUXqAWxI1/NmC/cLFCmB\nu7F6eB3BpeRElRns8s0H8gIeIB7qdcdbmxEHEitDECT4VB2U5/4VrBXGy8YxMaWy\nUnJlBm4/Q+DYooVB/qI3oxZQBxVktGakFU+tqOmdrAVAV9frrSX6+1yTyk7raOcl\npdS6NmMeKZhtFWfukC6X\n=Cx6o\n-----END PGP SIGNATURE-----", "payload": "tree 178d4010b384a492b4d0417be1d736b70b410a2c\nparent 9627e9ef6e0183e50b6a985143d31d82bda31cfe\nauthor Stephen M. Coakley <me@stephencoakley.com> 1473310087 -0500\ncommitter Stephen M. Coakley <me@stephencoakley.com> 1473310087 -0500\n\nAdd ThreadId for comparing threads\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bd834bdb4e2c1fe6666be8c8fad41526d72e3d1", "html_url": "https://github.com/rust-lang/rust/commit/5bd834bdb4e2c1fe6666be8c8fad41526d72e3d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bd834bdb4e2c1fe6666be8c8fad41526d72e3d1/comments", "author": {"login": "sagebind", "id": 2192863, "node_id": "MDQ6VXNlcjIxOTI4NjM=", "avatar_url": "https://avatars.githubusercontent.com/u/2192863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sagebind", "html_url": "https://github.com/sagebind", "followers_url": "https://api.github.com/users/sagebind/followers", "following_url": "https://api.github.com/users/sagebind/following{/other_user}", "gists_url": "https://api.github.com/users/sagebind/gists{/gist_id}", "starred_url": "https://api.github.com/users/sagebind/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sagebind/subscriptions", "organizations_url": "https://api.github.com/users/sagebind/orgs", "repos_url": "https://api.github.com/users/sagebind/repos", "events_url": "https://api.github.com/users/sagebind/events{/privacy}", "received_events_url": "https://api.github.com/users/sagebind/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sagebind", "id": 2192863, "node_id": "MDQ6VXNlcjIxOTI4NjM=", "avatar_url": "https://avatars.githubusercontent.com/u/2192863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sagebind", "html_url": "https://github.com/sagebind", "followers_url": "https://api.github.com/users/sagebind/followers", "following_url": "https://api.github.com/users/sagebind/following{/other_user}", "gists_url": "https://api.github.com/users/sagebind/gists{/gist_id}", "starred_url": "https://api.github.com/users/sagebind/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sagebind/subscriptions", "organizations_url": "https://api.github.com/users/sagebind/orgs", "repos_url": "https://api.github.com/users/sagebind/repos", "events_url": "https://api.github.com/users/sagebind/events{/privacy}", "received_events_url": "https://api.github.com/users/sagebind/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9627e9ef6e0183e50b6a985143d31d82bda31cfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/9627e9ef6e0183e50b6a985143d31d82bda31cfe", "html_url": "https://github.com/rust-lang/rust/commit/9627e9ef6e0183e50b6a985143d31d82bda31cfe"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "97a277e7bb49611d061894977839192e2f82c151", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5bd834bdb4e2c1fe6666be8c8fad41526d72e3d1/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd834bdb4e2c1fe6666be8c8fad41526d72e3d1/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=5bd834bdb4e2c1fe6666be8c8fad41526d72e3d1", "patch": "@@ -165,6 +165,7 @@ use panic;\n use panicking;\n use str;\n use sync::{Mutex, Condvar, Arc};\n+use sync::atomic::{AtomicUsize, Ordering, ATOMIC_USIZE_INIT};\n use sys::thread as imp;\n use sys_common::thread_info;\n use sys_common::util;\n@@ -524,6 +525,35 @@ pub fn park_timeout(dur: Duration) {\n     *guard = false;\n }\n \n+////////////////////////////////////////////////////////////////////////////////\n+// ThreadId\n+////////////////////////////////////////////////////////////////////////////////\n+\n+/// A unique identifier for a running thread.\n+///\n+/// A `ThreadId` is an opaque object that has a unique value for each thread\n+/// that creates one. `ThreadId`s do not correspond to a thread's system-\n+/// designated identifier.\n+#[unstable(feature = \"thread_id\", issue = \"21507\")]\n+#[derive(Eq, PartialEq, Copy, Clone)]\n+pub struct ThreadId(usize);\n+\n+impl ThreadId {\n+    /// Returns an identifier unique to the current calling thread.\n+    #[unstable(feature = \"thread_id\", issue = \"21507\")]\n+    pub fn current() -> ThreadId {\n+        static THREAD_ID_COUNT: AtomicUsize = ATOMIC_USIZE_INIT;\n+        #[thread_local] static mut THREAD_ID: ThreadId = ThreadId(0);\n+\n+        unsafe {\n+            if THREAD_ID.0 == 0 {\n+                THREAD_ID.0 = 1 + THREAD_ID_COUNT.fetch_add(1, Ordering::SeqCst);\n+            }\n+            THREAD_ID\n+        }\n+    }\n+}\n+\n ////////////////////////////////////////////////////////////////////////////////\n // Thread\n ////////////////////////////////////////////////////////////////////////////////\n@@ -977,6 +1007,16 @@ mod tests {\n         thread::sleep(Duration::from_millis(2));\n     }\n \n+    #[test]\n+    fn test_thread_id_equal() {\n+        assert_eq!(ThreadId::current(), ThreadId::current());\n+    }\n+\n+    #[test]\n+    fn test_thread_id_not_equal() {\n+        assert!(ThreadId::current() != spawn(|| ThreadId::current()).join());\n+    }\n+\n     // NOTE: the corresponding test for stderr is in run-pass/thread-stderr, due\n     // to the test harness apparently interfering with stderr configuration.\n }"}]}