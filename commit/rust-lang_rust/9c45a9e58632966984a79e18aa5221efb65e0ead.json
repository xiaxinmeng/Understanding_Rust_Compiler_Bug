{"sha": "9c45a9e58632966984a79e18aa5221efb65e0ead", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNDVhOWU1ODYzMjk2Njk4NGE3OWUxOGFhNTIyMWVmYjY1ZTBlYWQ=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-09-25T01:32:01Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-09-25T01:32:01Z"}, "message": "Remove redundant clone()", "tree": {"sha": "c3c2af75fa7be376506bf0ffe23fe8cad9c6c402", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3c2af75fa7be376506bf0ffe23fe8cad9c6c402"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c45a9e58632966984a79e18aa5221efb65e0ead", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c45a9e58632966984a79e18aa5221efb65e0ead", "html_url": "https://github.com/rust-lang/rust/commit/9c45a9e58632966984a79e18aa5221efb65e0ead", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c45a9e58632966984a79e18aa5221efb65e0ead/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e0fa715329571da8d5d551b1815303c39cf51c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e0fa715329571da8d5d551b1815303c39cf51c1", "html_url": "https://github.com/rust-lang/rust/commit/7e0fa715329571da8d5d551b1815303c39cf51c1"}], "stats": {"total": 50, "additions": 21, "deletions": 29}, "files": [{"sha": "3b6a99895d485953e8b73aba640cee7af9b39288", "filename": "crates/ra_assists/src/merge_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c45a9e58632966984a79e18aa5221efb65e0ead/crates%2Fra_assists%2Fsrc%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c45a9e58632966984a79e18aa5221efb65e0ead/crates%2Fra_assists%2Fsrc%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fmerge_match_arms.rs?ref=9c45a9e58632966984a79e18aa5221efb65e0ead", "patch": "@@ -8,7 +8,7 @@ pub(crate) fn merge_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<A\n     // We check if the following match arm matches this one. We could, but don't,\n     // compare to the previous match arm as well.\n     let next = current_arm.syntax().next_sibling();\n-    let next_arm = MatchArm::cast(next?.clone())?;\n+    let next_arm = MatchArm::cast(next?)?;\n \n     // Don't try to handle arms with guards for now - can add support for this later\n     if current_arm.guard().is_some() || next_arm.guard().is_some() {"}, {"sha": "8b91ba3e95fbd254599c919576e3bb32475977e4", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c45a9e58632966984a79e18aa5221efb65e0ead/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c45a9e58632966984a79e18aa5221efb65e0ead/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=9c45a9e58632966984a79e18aa5221efb65e0ead", "patch": "@@ -93,7 +93,7 @@ fn main() -> Result<()> {\n                 (true, true) => Err(\"Invalid flags: -q conflicts with -v\")?,\n             };\n             let memory_usage = matches.contains(\"--memory-usage\");\n-            let only = matches.value_from_str([\"-o\", \"--only\"])?.map(|v: String| v.to_owned());\n+            let only: Option<String> = matches.value_from_str([\"-o\", \"--only\"])?;\n             let path = {\n                 let mut trailing = matches.free()?;\n                 if trailing.len() != 1 {"}, {"sha": "fbb4ff4d8483e1fde6b44c82184a90b9b7994013", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9c45a9e58632966984a79e18aa5221efb65e0ead/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c45a9e58632966984a79e18aa5221efb65e0ead/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=9c45a9e58632966984a79e18aa5221efb65e0ead", "patch": "@@ -56,8 +56,7 @@ impl EnumVariant {\n             .zip(db.enum_data(self.parent).variants.iter())\n             .find(|(_syntax, (id, _))| *id == self.id)\n             .unwrap()\n-            .0\n-            .to_owned();\n+            .0;\n         Source { file_id: src.file_id, ast }\n     }\n     pub(crate) fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {\n@@ -203,12 +202,8 @@ impl StructField {\n         };\n \n         let field_sources = match struct_kind {\n-            ast::StructKind::Tuple(fl) => {\n-                fl.fields().map(|it| FieldSource::Pos(it.to_owned())).collect()\n-            }\n-            ast::StructKind::Named(fl) => {\n-                fl.fields().map(|it| FieldSource::Named(it.to_owned())).collect()\n-            }\n+            ast::StructKind::Tuple(fl) => fl.fields().map(|it| FieldSource::Pos(it)).collect(),\n+            ast::StructKind::Named(fl) => fl.fields().map(|it| FieldSource::Named(it)).collect(),\n             ast::StructKind::Unit => Vec::new(),\n         };\n         let ast = field_sources"}, {"sha": "9fecba63d1a58538de0039e70e56c06135dff094", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c45a9e58632966984a79e18aa5221efb65e0ead/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c45a9e58632966984a79e18aa5221efb65e0ead/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=9c45a9e58632966984a79e18aa5221efb65e0ead", "patch": "@@ -161,7 +161,7 @@ impl ModuleSource {\n     ) -> ModuleSource {\n         match (file_id, decl_id) {\n             (Some(file_id), _) => {\n-                let source_file = db.parse(file_id).tree().to_owned();\n+                let source_file = db.parse(file_id).tree();\n                 ModuleSource::SourceFile(source_file)\n             }\n             (None, Some(item_id)) => {"}, {"sha": "7b6d9b2407cbdd35b3abf90ab7c6c10ebe6eb1eb", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c45a9e58632966984a79e18aa5221efb65e0ead/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c45a9e58632966984a79e18aa5221efb65e0ead/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=9c45a9e58632966984a79e18aa5221efb65e0ead", "patch": "@@ -137,7 +137,7 @@ impl ModuleSource {\n         match &find_node_at_offset::<ast::Module>(parse.tree().syntax(), position.offset) {\n             Some(m) if !m.has_semi() => ModuleSource::Module(m.clone()),\n             _ => {\n-                let source_file = parse.tree().to_owned();\n+                let source_file = parse.tree();\n                 ModuleSource::SourceFile(source_file)\n             }\n         }\n@@ -149,15 +149,15 @@ impl ModuleSource {\n         child: &SyntaxNode,\n     ) -> ModuleSource {\n         if let Some(m) = child.ancestors().filter_map(ast::Module::cast).find(|it| !it.has_semi()) {\n-            ModuleSource::Module(m.clone())\n+            ModuleSource::Module(m)\n         } else {\n-            let source_file = db.parse(file_id).tree().to_owned();\n+            let source_file = db.parse(file_id).tree();\n             ModuleSource::SourceFile(source_file)\n         }\n     }\n \n     pub fn from_file_id(db: &(impl DefDatabase + AstDatabase), file_id: FileId) -> ModuleSource {\n-        let source_file = db.parse(file_id).tree().to_owned();\n+        let source_file = db.parse(file_id).tree();\n         ModuleSource::SourceFile(source_file)\n     }\n }"}, {"sha": "ef7dc6ebe3f69ad7304a2ec49dbbd112b65eedc3", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c45a9e58632966984a79e18aa5221efb65e0ead/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c45a9e58632966984a79e18aa5221efb65e0ead/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=9c45a9e58632966984a79e18aa5221efb65e0ead", "patch": "@@ -166,7 +166,7 @@ where\n         // In Rust, `#[macro_export]` macros are unconditionally visible at the\n         // crate root, even if the parent modules is **not** visible.\n         if export {\n-            self.update(self.def_map.root, None, &[(name.clone(), Resolution::from_macro(macro_))]);\n+            self.update(self.def_map.root, None, &[(name, Resolution::from_macro(macro_))]);\n         }\n     }\n "}, {"sha": "29aaddbf1b020cf58e26b1ff641ec5f765321d13", "filename": "crates/ra_hir/src/nameres/raw.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9c45a9e58632966984a79e18aa5221efb65e0ead/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c45a9e58632966984a79e18aa5221efb65e0ead/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs?ref=9c45a9e58632966984a79e18aa5221efb65e0ead", "patch": "@@ -36,10 +36,7 @@ type ImportSource = Either<ast::UseTree, ast::ExternCrateItem>;\n \n impl ImportSourcePtr {\n     fn to_node(self, file: &SourceFile) -> ImportSource {\n-        self.map(\n-            |ptr| ptr.to_node(file.syntax()).to_owned(),\n-            |ptr| ptr.to_node(file.syntax()).to_owned(),\n-        )\n+        self.map(|ptr| ptr.to_node(file.syntax()), |ptr| ptr.to_node(file.syntax()))\n     }\n }\n "}, {"sha": "bd4be843014088fbc7f25dee898d3a5bfe8aa8b5", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c45a9e58632966984a79e18aa5221efb65e0ead/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c45a9e58632966984a79e18aa5221efb65e0ead/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=9c45a9e58632966984a79e18aa5221efb65e0ead", "patch": "@@ -73,7 +73,7 @@ fn def_with_body_from_child_node(\n         if let Some(def) = ast::ConstDef::cast(node.clone()) {\n             return Some(Const { id: ctx.to_def(&def) }.into());\n         }\n-        if let Some(def) = ast::StaticDef::cast(node.clone()) {\n+        if let Some(def) = ast::StaticDef::cast(node) {\n             return Some(Static { id: ctx.to_def(&def) }.into());\n         }\n         None"}, {"sha": "76b4b6faa459dd672ba393c0aeb461db62366b0d", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c45a9e58632966984a79e18aa5221efb65e0ead/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c45a9e58632966984a79e18aa5221efb65e0ead/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=9c45a9e58632966984a79e18aa5221efb65e0ead", "patch": "@@ -436,7 +436,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n     fn normalize_projection_ty(&mut self, proj_ty: ProjectionTy) -> Ty {\n         let var = self.new_type_var();\n-        let predicate = ProjectionPredicate { projection_ty: proj_ty.clone(), ty: var.clone() };\n+        let predicate = ProjectionPredicate { projection_ty: proj_ty, ty: var.clone() };\n         let obligation = Obligation::Projection(predicate);\n         self.obligations.push(obligation);\n         var\n@@ -953,7 +953,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     arm_tys.push(self.infer_expr_inner(arm.expr, &expected));\n                 }\n \n-                let lub_ty = calculate_least_upper_bound(expected.ty.clone(), &arm_tys);\n+                let lub_ty = calculate_least_upper_bound(expected.ty, &arm_tys);\n \n                 for arm_ty in &arm_tys {\n                     self.coerce(arm_ty, &lub_ty);"}, {"sha": "a967d8a7f38c3d8c0deefc01ff92288a25a061e3", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c45a9e58632966984a79e18aa5221efb65e0ead/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c45a9e58632966984a79e18aa5221efb65e0ead/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=9c45a9e58632966984a79e18aa5221efb65e0ead", "patch": "@@ -290,7 +290,7 @@ pub(crate) fn implements_trait(\n         return true;\n     }\n     let env = lower::trait_env(db, resolver);\n-    let goal = generic_implements_goal(db, env.clone(), trait_, ty.clone());\n+    let goal = generic_implements_goal(db, env, trait_, ty.clone());\n     let solution = db.trait_solve(krate, goal);\n \n     solution.is_some()"}, {"sha": "57542152f730fe6c2bf6d461583ff741febe2813", "filename": "crates/ra_ide_api/src/completion/completion_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c45a9e58632966984a79e18aa5221efb65e0ead/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c45a9e58632966984a79e18aa5221efb65e0ead/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=9c45a9e58632966984a79e18aa5221efb65e0ead", "patch": "@@ -94,7 +94,7 @@ impl<'a> CompletionContext<'a> {\n         // actual completion.\n         let file = {\n             let edit = AtomTextEdit::insert(offset, \"intellijRulezz\".to_string());\n-            original_parse.reparse(&edit).tree().to_owned()\n+            original_parse.reparse(&edit).tree()\n         };\n \n         // First, let's try to complete a reference to some declaration."}, {"sha": "b8aa433c181e9d254b59f529dc4b0252d1c896e4", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c45a9e58632966984a79e18aa5221efb65e0ead/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c45a9e58632966984a79e18aa5221efb65e0ead/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=9c45a9e58632966984a79e18aa5221efb65e0ead", "patch": "@@ -76,7 +76,7 @@ impl Completions {\n                 None,\n             ),\n             ScopeDef::MacroDef(mac) => {\n-                self.add_macro(ctx, Some(local_name.clone()), *mac);\n+                self.add_macro(ctx, Some(local_name), *mac);\n                 return;\n             }\n             ScopeDef::Unknown => {"}, {"sha": "93e1e7c2d4a6995af6a33027269c66a74936439f", "filename": "crates/ra_ide_api/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c45a9e58632966984a79e18aa5221efb65e0ead/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c45a9e58632966984a79e18aa5221efb65e0ead/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs?ref=9c45a9e58632966984a79e18aa5221efb65e0ead", "patch": "@@ -86,7 +86,7 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n             fix: Some(fix),\n         })\n     });\n-    let source_file = db.parse(file_id).tree().to_owned();\n+    let source_file = db.parse(file_id).tree();\n     let src =\n         hir::Source { file_id: file_id.into(), ast: hir::ModuleSource::SourceFile(source_file) };\n     if let Some(m) = hir::Module::from_definition(db, src) {"}, {"sha": "d3e774bd0dbb3fe86919af06f457149c856332d2", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c45a9e58632966984a79e18aa5221efb65e0ead/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c45a9e58632966984a79e18aa5221efb65e0ead/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=9c45a9e58632966984a79e18aa5221efb65e0ead", "patch": "@@ -304,7 +304,7 @@ impl NavigationTarget {\n \n pub(crate) fn docs_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option<String> {\n     let parse = db.parse(symbol.file_id);\n-    let node = symbol.ptr.to_node(parse.tree().syntax()).to_owned();\n+    let node = symbol.ptr.to_node(parse.tree().syntax());\n \n     visitor()\n         .visit(|it: ast::FnDef| it.doc_comment_text())\n@@ -326,7 +326,7 @@ pub(crate) fn docs_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option\n /// e.g. `struct Name`, `enum Name`, `fn Name`\n pub(crate) fn description_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option<String> {\n     let parse = db.parse(symbol.file_id);\n-    let node = symbol.ptr.to_node(parse.tree().syntax()).to_owned();\n+    let node = symbol.ptr.to_node(parse.tree().syntax());\n \n     visitor()\n         .visit(|node: ast::FnDef| node.short_label())"}]}