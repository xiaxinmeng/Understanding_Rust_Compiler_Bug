{"sha": "6feb1fedbc064e292a0ad43fc9bb068281dd9728", "node_id": "C_kwDOAAsO6NoAKDZmZWIxZmVkYmMwNjRlMjkyYTBhZDQzZmM5YmIwNjgyODFkZDk3Mjg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-04T22:39:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-04T22:39:51Z"}, "message": "Rollup merge of #106451 - Zeegomo:merge-borrowck-access, r=estebank\n\nMerge borrowck permission checks\n\nMerge `check_access_permission` and `check_if_reassignment_to_immutable_state`.\nThe goal of this commit is twofold:\n* simplify the codebase by removing duplicate logic.\n* avoid duplicate reporting of illegal reassignment errors by reusing the exiting de-duplicating logic of access_place.", "tree": {"sha": "4912280a2200ff816084e938508c7147e33704ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4912280a2200ff816084e938508c7147e33704ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6feb1fedbc064e292a0ad43fc9bb068281dd9728", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjtgA3CRBK7hj4Ov3rIwAApkcIAKwwojWt3sq85B7LIIOh8z1L\nz0vo845+aHQxSDuzwjq5F0EWHwByKfXa5OT8lI4D3Z+a8YDy1y5h3NGhNm81mB7/\nErbCmc0YhfDlk2n68dMtUbsSzV3xscia9XVwezMA8fqeqgbNL5k5XyyKFGnxElfv\nh3BXULITLGrAMI+M4lrNfRuH05GhpooC+Mo1Kkt//K7K1fFHQPa7XPRy36C1eMuE\nB9Sn+XQ+UvAaHwTV9u3Z1oeXwh27rtg68U6xGmBDPiq2dsvrxWLKfxoKRLojKKrM\n/GtK0yi2TphnCsSqzfdyA8NNchoNxwM/1R6/U3tdZMSnZJ4106LoAn9cdxnKgXs=\n=BnOl\n-----END PGP SIGNATURE-----\n", "payload": "tree 4912280a2200ff816084e938508c7147e33704ea\nparent 836321effb859c3ea73abf00430fd0effcf42f61\nparent ac4426c093b5e7a457e0e32cc6ea2d3fb99c3148\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1672871991 +0100\ncommitter GitHub <noreply@github.com> 1672871991 +0100\n\nRollup merge of #106451 - Zeegomo:merge-borrowck-access, r=estebank\n\nMerge borrowck permission checks\n\nMerge `check_access_permission` and `check_if_reassignment_to_immutable_state`.\nThe goal of this commit is twofold:\n* simplify the codebase by removing duplicate logic.\n* avoid duplicate reporting of illegal reassignment errors by reusing the exiting de-duplicating logic of access_place.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6feb1fedbc064e292a0ad43fc9bb068281dd9728", "html_url": "https://github.com/rust-lang/rust/commit/6feb1fedbc064e292a0ad43fc9bb068281dd9728", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6feb1fedbc064e292a0ad43fc9bb068281dd9728/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "836321effb859c3ea73abf00430fd0effcf42f61", "url": "https://api.github.com/repos/rust-lang/rust/commits/836321effb859c3ea73abf00430fd0effcf42f61", "html_url": "https://github.com/rust-lang/rust/commit/836321effb859c3ea73abf00430fd0effcf42f61"}, {"sha": "ac4426c093b5e7a457e0e32cc6ea2d3fb99c3148", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac4426c093b5e7a457e0e32cc6ea2d3fb99c3148", "html_url": "https://github.com/rust-lang/rust/commit/ac4426c093b5e7a457e0e32cc6ea2d3fb99c3148"}], "stats": {"total": 48, "additions": 11, "deletions": 37}, "files": [{"sha": "278ffed07477b5b3bdf8224a7b3c79c89b2b9ace", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 11, "deletions": 37, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6feb1fedbc064e292a0ad43fc9bb068281dd9728/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6feb1fedbc064e292a0ad43fc9bb068281dd9728/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=6feb1fedbc064e292a0ad43fc9bb068281dd9728", "patch": "@@ -863,7 +863,6 @@ enum WriteKind {\n /// local place can be mutated.\n //\n // FIXME: @nikomatsakis suggested that this flag could be removed with the following modifications:\n-// - Merge `check_access_permissions()` and `check_if_reassignment_to_immutable_state()`.\n // - Split `is_mutable()` into `is_assignable()` (can be directly assigned) and\n //   `is_declared_mutable()`.\n // - Take flow state into consideration in `is_assignable()` for local variables.\n@@ -1132,20 +1131,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         // Write of P[i] or *P requires P init'd.\n         self.check_if_assigned_path_is_moved(location, place_span, flow_state);\n \n-        // Special case: you can assign an immutable local variable\n-        // (e.g., `x = ...`) so long as it has never been initialized\n-        // before (at this point in the flow).\n-        if let Some(local) = place_span.0.as_local() {\n-            if let Mutability::Not = self.body.local_decls[local].mutability {\n-                // check for reassignments to immutable local variables\n-                self.check_if_reassignment_to_immutable_state(\n-                    location, local, place_span, flow_state,\n-                );\n-                return;\n-            }\n-        }\n-\n-        // Otherwise, use the normal access permission rules.\n         self.access_place(\n             location,\n             place_span,\n@@ -1554,24 +1539,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         }\n     }\n \n-    fn check_if_reassignment_to_immutable_state(\n-        &mut self,\n-        location: Location,\n-        local: Local,\n-        place_span: (Place<'tcx>, Span),\n-        flow_state: &Flows<'cx, 'tcx>,\n-    ) {\n-        debug!(\"check_if_reassignment_to_immutable_state({:?})\", local);\n-\n-        // Check if any of the initializations of `local` have happened yet:\n-        if let Some(init_index) = self.is_local_ever_initialized(local, flow_state) {\n-            // And, if so, report an error.\n-            let init = &self.move_data.inits[init_index];\n-            let span = init.span(&self.body);\n-            self.report_illegal_reassignment(location, place_span, span, place_span.0);\n-        }\n-    }\n-\n     fn check_if_full_path_is_moved(\n         &mut self,\n         location: Location,\n@@ -2037,12 +2004,19 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         // partial initialization, do not complain about mutability\n         // errors except for actual mutation (as opposed to an attempt\n         // to do a partial initialization).\n-        let previously_initialized =\n-            self.is_local_ever_initialized(place.local, flow_state).is_some();\n+        let previously_initialized = self.is_local_ever_initialized(place.local, flow_state);\n \n         // at this point, we have set up the error reporting state.\n-        if previously_initialized {\n-            self.report_mutability_error(place, span, the_place_err, error_access, location);\n+        if let Some(init_index) = previously_initialized {\n+            if let (AccessKind::Mutate, Some(_)) = (error_access, place.as_local()) {\n+                // If this is a mutate access to an immutable local variable with no projections\n+                // report the error as an illegal reassignment\n+                let init = &self.move_data.inits[init_index];\n+                let assigned_span = init.span(&self.body);\n+                self.report_illegal_reassignment(location, (place, span), assigned_span, place);\n+            } else {\n+                self.report_mutability_error(place, span, the_place_err, error_access, location)\n+            }\n             true\n         } else {\n             false"}]}