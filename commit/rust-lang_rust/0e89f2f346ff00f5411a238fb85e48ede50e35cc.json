{"sha": "0e89f2f346ff00f5411a238fb85e48ede50e35cc", "node_id": "C_kwDOAAsO6NoAKDBlODlmMmYzNDZmZjAwZjU0MTFhMjM4ZmI4NWU0OGVkZTUwZTM1Y2M", "commit": {"author": {"name": "C\u00f4me ALLART", "email": "come.allart@etu.emse.fr", "date": "2021-12-11T21:46:54Z"}, "committer": {"name": "C\u00f4me ALLART", "email": "come.allart@etu.emse.fr", "date": "2021-12-11T21:46:54Z"}, "message": "feat: remove should_panic example generation", "tree": {"sha": "5d3f1766e794e6eb9006e9edd66e206c49ab64c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d3f1766e794e6eb9006e9edd66e206c49ab64c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e89f2f346ff00f5411a238fb85e48ede50e35cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e89f2f346ff00f5411a238fb85e48ede50e35cc", "html_url": "https://github.com/rust-lang/rust/commit/0e89f2f346ff00f5411a238fb85e48ede50e35cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e89f2f346ff00f5411a238fb85e48ede50e35cc/comments", "author": null, "committer": null, "parents": [{"sha": "9e53db274b146e3cba5ebaaa3588f6a26fe3aba1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e53db274b146e3cba5ebaaa3588f6a26fe3aba1", "html_url": "https://github.com/rust-lang/rust/commit/9e53db274b146e3cba5ebaaa3588f6a26fe3aba1"}], "stats": {"total": 121, "additions": 24, "deletions": 97}, "files": [{"sha": "cfc7e9d0436f393290b013dc618ca1d03a9b8d77", "filename": "crates/ide_assists/src/handlers/generate_documentation_template.rs", "status": "modified", "additions": 24, "deletions": 97, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/0e89f2f346ff00f5411a238fb85e48ede50e35cc/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e89f2f346ff00f5411a238fb85e48ede50e35cc/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs?ref=0e89f2f346ff00f5411a238fb85e48ede50e35cc", "patch": "@@ -101,31 +101,14 @@ fn introduction_builder(ast_func: &ast::Fn, ctx: &AssistContext) -> String {\n \n /// Builds an `# Examples` section. An option is returned to be able to manage an error in the AST.\n fn examples_builder(ast_func: &ast::Fn, ctx: &AssistContext) -> Option<Vec<String>> {\n-    let (no_panic_ex, panic_ex) = if is_in_trait_def(ast_func, ctx) {\n-        let message = \"// Example template not implemented for trait functions\";\n-        let panic_ex = match can_panic(ast_func) {\n-            Some(true) => Some(vec![message.into()]),\n-            _ => None,\n-        };\n-        (Some(vec![message.into()]), panic_ex)\n+    let mut lines = string_vec_from(&[\"# Examples\", \"\", \"```\"]);\n+    if is_in_trait_def(ast_func, ctx) {\n+        lines.push(\"// Example template not implemented for trait functions\".into());\n     } else {\n-        let panic_ex = match can_panic(ast_func) {\n-            Some(true) => gen_panic_ex_template(ast_func, ctx),\n-            _ => None,\n-        };\n-        let no_panic_ex = gen_ex_template(ast_func, ctx);\n-        (no_panic_ex, panic_ex)\n+        lines.append(&mut gen_ex_template(ast_func, ctx)?)\n     };\n \n-    let mut lines = string_vec_from(&[\"# Examples\", \"\", \"```\"]);\n-    lines.append(&mut no_panic_ex?);\n     lines.push(\"```\".into());\n-    if let Some(mut ex) = panic_ex {\n-        lines.push(\"\".into());\n-        lines.push(\"```should_panic\".into());\n-        lines.append(&mut ex);\n-        lines.push(\"```\".into());\n-    }\n     Some(lines)\n }\n \n@@ -154,53 +137,8 @@ fn safety_builder(ast_func: &ast::Fn) -> Option<Vec<String>> {\n     }\n }\n \n-/// Generate an example template which should not panic\n-/// `None` if the function has a `self` parameter but is not in an `impl`.\n+/// Generates an example template\n fn gen_ex_template(ast_func: &ast::Fn, ctx: &AssistContext) -> Option<Vec<String>> {\n-    let (mut lines, ex_helper) = gen_ex_start_helper(ast_func, ctx)?;\n-    // Call the function, check result\n-    if returns_a_value(ast_func, ctx) {\n-        if count_parameters(&ex_helper.param_list) < 3 {\n-            lines.push(format!(\"assert_eq!({}, );\", ex_helper.function_call));\n-        } else {\n-            lines.push(format!(\"let result = {};\", ex_helper.function_call));\n-            lines.push(\"assert_eq!(result, );\".into());\n-        }\n-    } else {\n-        lines.push(format!(\"{};\", ex_helper.function_call));\n-    }\n-    // Check the mutated values\n-    if is_ref_mut_self(ast_func) == Some(true) {\n-        lines.push(format!(\"assert_eq!({}, );\", ex_helper.self_name?));\n-    }\n-    for param_name in &ex_helper.ref_mut_params {\n-        lines.push(format!(\"assert_eq!({}, );\", param_name));\n-    }\n-    Some(lines)\n-}\n-\n-/// Generate an example template which should panic\n-/// `None` if the function has a `self` parameter but is not in an `impl`.\n-fn gen_panic_ex_template(ast_func: &ast::Fn, ctx: &AssistContext) -> Option<Vec<String>> {\n-    let (mut lines, ex_helper) = gen_ex_start_helper(ast_func, ctx)?;\n-    match returns_a_value(ast_func, ctx) {\n-        true => lines.push(format!(\"let _ = {}; // panics\", ex_helper.function_call)),\n-        false => lines.push(format!(\"{}; // panics\", ex_helper.function_call)),\n-    }\n-    Some(lines)\n-}\n-\n-/// Intermediary results of the start of example generation\n-struct ExHelper {\n-    function_call: String,\n-    param_list: ast::ParamList,\n-    ref_mut_params: Vec<String>,\n-    self_name: Option<String>,\n-}\n-\n-/// Builds the start of the example and transmit the useful intermediary results.\n-/// `None` if the function has a `self` parameter but is not in an `impl`.\n-fn gen_ex_start_helper(ast_func: &ast::Fn, ctx: &AssistContext) -> Option<(Vec<String>, ExHelper)> {\n     let mut lines = Vec::new();\n     let is_unsafe = ast_func.unsafe_token().is_some();\n     let param_list = ast_func.param_list()?;\n@@ -215,9 +153,26 @@ fn gen_ex_start_helper(ast_func: &ast::Fn, ctx: &AssistContext) -> Option<(Vec<S\n     for param_name in &ref_mut_params {\n         lines.push(format!(\"let mut {} = ;\", param_name))\n     }\n+    // Call the function, check result\n     let function_call = function_call(ast_func, &param_list, self_name.as_deref(), is_unsafe)?;\n-    let ex_helper = ExHelper { function_call, param_list, ref_mut_params, self_name };\n-    Some((lines, ex_helper))\n+    if returns_a_value(ast_func, ctx) {\n+        if count_parameters(&param_list) < 3 {\n+            lines.push(format!(\"assert_eq!({}, );\", function_call));\n+        } else {\n+            lines.push(format!(\"let result = {};\", function_call));\n+            lines.push(\"assert_eq!(result, );\".into());\n+        }\n+    } else {\n+        lines.push(format!(\"{};\", function_call));\n+    }\n+    // Check the mutated values\n+    if is_ref_mut_self(ast_func) == Some(true) {\n+        lines.push(format!(\"assert_eq!({}, );\", self_name?));\n+    }\n+    for param_name in &ref_mut_params {\n+        lines.push(format!(\"assert_eq!({}, );\", param_name));\n+    }\n+    Some(lines)\n }\n \n /// Checks if the function is public / exported\n@@ -616,12 +571,6 @@ pub fn panic$0s_if(a: bool) {\n /// panics_if(a);\n /// ```\n ///\n-/// ```should_panic\n-/// use test::panics_if;\n-///\n-/// panics_if(a); // panics\n-/// ```\n-///\n /// # Panics\n ///\n /// Panics if .\n@@ -654,12 +603,6 @@ pub fn $0panics_if_not(a: bool) {\n /// panics_if_not(a);\n /// ```\n ///\n-/// ```should_panic\n-/// use test::panics_if_not;\n-///\n-/// panics_if_not(a); // panics\n-/// ```\n-///\n /// # Panics\n ///\n /// Panics if .\n@@ -690,12 +633,6 @@ pub fn $0panics_if_none(a: Option<()>) {\n /// panics_if_none(a);\n /// ```\n ///\n-/// ```should_panic\n-/// use test::panics_if_none;\n-///\n-/// panics_if_none(a); // panics\n-/// ```\n-///\n /// # Panics\n ///\n /// Panics if .\n@@ -726,12 +663,6 @@ pub fn $0panics_if_none2(a: Option<()>) {\n /// panics_if_none2(a);\n /// ```\n ///\n-/// ```should_panic\n-/// use test::panics_if_none2;\n-///\n-/// panics_if_none2(a); // panics\n-/// ```\n-///\n /// # Panics\n ///\n /// Panics if .\n@@ -984,10 +915,6 @@ pub trait MyTrait {\n     /// // Example template not implemented for trait functions\n     /// ```\n     ///\n-    /// ```should_panic\n-    /// // Example template not implemented for trait functions\n-    /// ```\n-    ///\n     /// # Panics\n     ///\n     /// Panics if ."}]}