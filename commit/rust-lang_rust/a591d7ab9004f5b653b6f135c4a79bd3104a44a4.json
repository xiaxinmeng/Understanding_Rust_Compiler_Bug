{"sha": "a591d7ab9004f5b653b6f135c4a79bd3104a44a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1OTFkN2FiOTAwNGY1YjY1M2I2ZjEzNWM0YTc5YmQzMTA0YTQ0YTQ=", "commit": {"author": {"name": "Nika Layzell", "email": "nika@thelayzells.com", "date": "2021-03-25T15:04:50Z"}, "committer": {"name": "Nika Layzell", "email": "nika@thelayzells.com", "date": "2021-03-25T15:22:46Z"}, "message": "Add strong_count mutation methods to Rc", "tree": {"sha": "33eb34c87ef8f244274c864f5797d2bad45eff2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33eb34c87ef8f244274c864f5797d2bad45eff2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a591d7ab9004f5b653b6f135c4a79bd3104a44a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a591d7ab9004f5b653b6f135c4a79bd3104a44a4", "html_url": "https://github.com/rust-lang/rust/commit/a591d7ab9004f5b653b6f135c4a79bd3104a44a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a591d7ab9004f5b653b6f135c4a79bd3104a44a4/comments", "author": {"login": "mystor", "id": 1261662, "node_id": "MDQ6VXNlcjEyNjE2NjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1261662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mystor", "html_url": "https://github.com/mystor", "followers_url": "https://api.github.com/users/mystor/followers", "following_url": "https://api.github.com/users/mystor/following{/other_user}", "gists_url": "https://api.github.com/users/mystor/gists{/gist_id}", "starred_url": "https://api.github.com/users/mystor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mystor/subscriptions", "organizations_url": "https://api.github.com/users/mystor/orgs", "repos_url": "https://api.github.com/users/mystor/repos", "events_url": "https://api.github.com/users/mystor/events{/privacy}", "received_events_url": "https://api.github.com/users/mystor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mystor", "id": 1261662, "node_id": "MDQ6VXNlcjEyNjE2NjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1261662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mystor", "html_url": "https://github.com/mystor", "followers_url": "https://api.github.com/users/mystor/followers", "following_url": "https://api.github.com/users/mystor/following{/other_user}", "gists_url": "https://api.github.com/users/mystor/gists{/gist_id}", "starred_url": "https://api.github.com/users/mystor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mystor/subscriptions", "organizations_url": "https://api.github.com/users/mystor/orgs", "repos_url": "https://api.github.com/users/mystor/repos", "events_url": "https://api.github.com/users/mystor/events{/privacy}", "received_events_url": "https://api.github.com/users/mystor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bba40880c0750f880119b4517821ffe0a96f74d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/bba40880c0750f880119b4517821ffe0a96f74d1", "html_url": "https://github.com/rust-lang/rust/commit/bba40880c0750f880119b4517821ffe0a96f74d1"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "7120ac6efd18c0d5ab9659bb686fbfa948adc4d5", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/a591d7ab9004f5b653b6f135c4a79bd3104a44a4/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a591d7ab9004f5b653b6f135c4a79bd3104a44a4/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=a591d7ab9004f5b653b6f135c4a79bd3104a44a4", "patch": "@@ -910,6 +910,73 @@ impl<T: ?Sized> Rc<T> {\n         this.inner().strong()\n     }\n \n+    /// Increments the strong reference count on the `Rc<T>` associated with the\n+    /// provided pointer by one.\n+    ///\n+    /// # Safety\n+    ///\n+    /// The pointer must have been obtained through `Rc::into_raw`, and the\n+    /// associated `Rc` instance must be valid (i.e. the strong count must be at\n+    /// least 1) for the duration of this method.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::rc::Rc;\n+    ///\n+    /// let five = Rc::new(5);\n+    ///\n+    /// unsafe {\n+    ///     let ptr = Rc::into_raw(five);\n+    ///     Rc::increment_strong_count(ptr);\n+    ///\n+    ///     let five = Rc::from_raw(ptr);\n+    ///     assert_eq!(2, Rc::strong_count(&five));\n+    /// }\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"rc_mutate_strong_count\", since = \"1.53.0\")]\n+    pub unsafe fn increment_strong_count(ptr: *const T) {\n+        // Retain Rc, but don't touch refcount by wrapping in ManuallyDrop\n+        let rc = unsafe { mem::ManuallyDrop::new(Rc::<T>::from_raw(ptr)) };\n+        // Now increase refcount, but don't drop new refcount either\n+        let _rc_clone: mem::ManuallyDrop<_> = rc.clone();\n+    }\n+\n+    /// Decrements the strong reference count on the `Rc<T>` associated with the\n+    /// provided pointer by one.\n+    ///\n+    /// # Safety\n+    ///\n+    /// The pointer must have been obtained through `Rc::into_raw`, and the\n+    /// associated `Rc` instance must be valid (i.e. the strong count must be at\n+    /// least 1) when invoking this method. This method can be used to release\n+    /// the final `Rc` and backing storage, but **should not** be called after\n+    /// the final `Rc` has been released.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::rc::Rc;\n+    ///\n+    /// let five = Rc::new(5);\n+    ///\n+    /// unsafe {\n+    ///     let ptr = Rc::into_raw(five);\n+    ///     Rc::increment_strong_count(ptr);\n+    ///\n+    ///     let five = Rc::from_raw(ptr);\n+    ///     assert_eq!(2, Rc::strong_count(&five));\n+    ///     Rc::decrement_strong_count(ptr);\n+    ///     assert_eq!(1, Rc::strong_count(&five));\n+    /// }\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"rc_mutate_strong_count\", since = \"1.53.0\")]\n+    pub unsafe fn decrement_strong_count(ptr: *const T) {\n+        unsafe { mem::drop(Rc::from_raw(ptr)) };\n+    }\n+\n     /// Returns `true` if there are no other `Rc` or [`Weak`] pointers to\n     /// this allocation.\n     #[inline]"}]}