{"sha": "5f21ff20b3ab8cfce37a3dfc4641bf0d8e1b1c74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMjFmZjIwYjNhYjhjZmNlMzdhM2RmYzQ2NDFiZjBkOGUxYjFjNzQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-10-11T11:59:31Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-12-04T09:19:50Z"}, "message": "Inline codegen_mono_item", "tree": {"sha": "b1cf5f906f5769d789f141b21038a9c139c68f8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1cf5f906f5769d789f141b21038a9c139c68f8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f21ff20b3ab8cfce37a3dfc4641bf0d8e1b1c74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f21ff20b3ab8cfce37a3dfc4641bf0d8e1b1c74", "html_url": "https://github.com/rust-lang/rust/commit/5f21ff20b3ab8cfce37a3dfc4641bf0d8e1b1c74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f21ff20b3ab8cfce37a3dfc4641bf0d8e1b1c74/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f28a49177e662b9e16ec9b0fb3e4c4fdf810ad1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f28a49177e662b9e16ec9b0fb3e4c4fdf810ad1", "html_url": "https://github.com/rust-lang/rust/commit/3f28a49177e662b9e16ec9b0fb3e4c4fdf810ad1"}], "stats": {"total": 65, "additions": 37, "deletions": 28}, "files": [{"sha": "c443483be884e0dc00f9895365910ba187e75409", "filename": "src/driver/aot.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5f21ff20b3ab8cfce37a3dfc4641bf0d8e1b1c74/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f21ff20b3ab8cfce37a3dfc4641bf0d8e1b1c74/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=5f21ff20b3ab8cfce37a3dfc4641bf0d8e1b1c74", "patch": "@@ -8,7 +8,7 @@ use rustc_codegen_ssa::{CodegenResults, CompiledModule, CrateInfo, ModuleKind};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_middle::middle::cstore::EncodedMetadata;\n-use rustc_middle::mir::mono::CodegenUnit;\n+use rustc_middle::mir::mono::{CodegenUnit, MonoItem};\n use rustc_session::cgu_reuse_tracker::CguReuse;\n use rustc_session::config::{DebugInfo, OutputType};\n \n@@ -148,7 +148,25 @@ fn module_codegen(tcx: TyCtxt<'_>, cgu_name: rustc_span::Symbol) -> ModuleCodege\n     super::predefine_mono_items(&mut cx, &mono_items);\n     for (mono_item, (linkage, visibility)) in mono_items {\n         let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n-        super::codegen_mono_item(&mut cx, mono_item, linkage);\n+        match mono_item {\n+            MonoItem::Fn(inst) => {\n+                cx.tcx.sess.time(\"codegen fn\", || {\n+                    crate::base::codegen_fn(&mut cx, inst, linkage)\n+                });\n+            }\n+            MonoItem::Static(def_id) => {\n+                crate::constant::codegen_static(&mut cx.constants_cx, def_id)\n+            }\n+            MonoItem::GlobalAsm(hir_id) => {\n+                let item = cx.tcx.hir().expect_item(hir_id);\n+                if let rustc_hir::ItemKind::GlobalAsm(rustc_hir::GlobalAsm { asm }) = item.kind {\n+                    cx.global_asm.push_str(&*asm.as_str());\n+                    cx.global_asm.push_str(\"\\n\\n\");\n+                } else {\n+                    bug!(\"Expected GlobalAsm found {:?}\", item);\n+                }\n+            }\n+        }\n     }\n     let (mut module, global_asm, debug, mut unwind_context) =\n         tcx.sess.time(\"finalize CodegenCx\", || cx.finalize());"}, {"sha": "4d40debc956deec2b4f3c3b55b571fe885ed371d", "filename": "src/driver/jit.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5f21ff20b3ab8cfce37a3dfc4641bf0d8e1b1c74/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f21ff20b3ab8cfce37a3dfc4641bf0d8e1b1c74/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=5f21ff20b3ab8cfce37a3dfc4641bf0d8e1b1c74", "patch": "@@ -5,6 +5,7 @@ use std::ffi::CString;\n use std::os::raw::{c_char, c_int};\n \n use rustc_codegen_ssa::CrateInfo;\n+use rustc_middle::mir::mono::MonoItem;\n \n use cranelift_simplejit::{SimpleJITBuilder, SimpleJITModule};\n \n@@ -73,12 +74,26 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n             super::predefine_mono_items(&mut cx, &mono_items);\n             for (mono_item, (linkage, visibility)) in mono_items {\n                 let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n-                super::codegen_mono_item(&mut cx, mono_item, linkage);\n+                match mono_item {\n+                    MonoItem::Fn(inst) => {\n+                        cx.tcx.sess.time(\"codegen fn\", || {\n+                            crate::base::codegen_fn(&mut cx, inst, linkage)\n+                        });\n+                    }\n+                    MonoItem::Static(def_id) => {\n+                        crate::constant::codegen_static(&mut cx.constants_cx, def_id)\n+                    }\n+                    MonoItem::GlobalAsm(hir_id) => {\n+                        let item = cx.tcx.hir().expect_item(hir_id);\n+                        tcx.sess\n+                            .span_fatal(item.span, \"Global asm is not supported in JIT mode\");\n+                    }\n+                }\n             }\n             tcx.sess.time(\"finalize CodegenCx\", || cx.finalize())\n         });\n     if !global_asm.is_empty() {\n-        tcx.sess.fatal(\"Global asm is not supported in JIT mode\");\n+        tcx.sess.fatal(\"Inline asm is not supported in JIT mode\");\n     }\n     crate::main_shim::maybe_create_entry_wrapper(tcx, &mut jit_module, &mut unwind_context, true);\n     crate::allocator::codegen(tcx, &mut jit_module, &mut unwind_context);"}, {"sha": "0b0ea8a852c656b97bf08c6e552de41c45e73485", "filename": "src/driver/mod.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5f21ff20b3ab8cfce37a3dfc4641bf0d8e1b1c74/src%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f21ff20b3ab8cfce37a3dfc4641bf0d8e1b1c74/src%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fmod.rs?ref=5f21ff20b3ab8cfce37a3dfc4641bf0d8e1b1c74", "patch": "@@ -63,30 +63,6 @@ fn predefine_mono_items<'tcx>(\n     });\n }\n \n-fn codegen_mono_item<'tcx, M: Module>(\n-    cx: &mut crate::CodegenCx<'tcx, M>,\n-    mono_item: MonoItem<'tcx>,\n-    linkage: Linkage,\n-) {\n-    match mono_item {\n-        MonoItem::Fn(inst) => {\n-            cx.tcx\n-                .sess\n-                .time(\"codegen fn\", || crate::base::codegen_fn(cx, inst, linkage));\n-        }\n-        MonoItem::Static(def_id) => crate::constant::codegen_static(&mut cx.constants_cx, def_id),\n-        MonoItem::GlobalAsm(hir_id) => {\n-            let item = cx.tcx.hir().expect_item(hir_id);\n-            if let rustc_hir::ItemKind::GlobalAsm(rustc_hir::GlobalAsm { asm }) = item.kind {\n-                cx.global_asm.push_str(&*asm.as_str());\n-                cx.global_asm.push_str(\"\\n\\n\");\n-            } else {\n-                bug!(\"Expected GlobalAsm found {:?}\", item);\n-            }\n-        }\n-    }\n-}\n-\n fn time<R>(tcx: TyCtxt<'_>, name: &'static str, f: impl FnOnce() -> R) -> R {\n     if std::env::var(\"CG_CLIF_DISPLAY_CG_TIME\")\n         .as_ref()"}]}