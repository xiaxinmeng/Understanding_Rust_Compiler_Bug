{"sha": "86015515b5817390d652eae2fd765b89509b5331", "node_id": "C_kwDOAAsO6NoAKDg2MDE1NTE1YjU4MTczOTBkNjUyZWFlMmZkNzY1Yjg5NTA5YjUzMzE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-03T05:30:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-03T05:30:24Z"}, "message": "Rollup merge of #107598 - chenyukang:yukang/fix-core-bench, r=thomcc\n\nFix benchmarks in library/core with black_box\n\nFixes #107590", "tree": {"sha": "b2f9a7edc1a07d4162b0f4afdf6c895f6a6045bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2f9a7edc1a07d4162b0f4afdf6c895f6a6045bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86015515b5817390d652eae2fd765b89509b5331", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj3JvwCRBK7hj4Ov3rIwAAqCcIADa2ydaps0p4BSVCayONfCX/\nrLNls/O3gUXDvgEXBAchbEGHyu2XiNHKYd92I5pSmotRpI/Qx3qfj2DcRLHe910d\nGNCh41O/Gvkm9cjnD0CQjQwiu7I3f6rAehW741m3iEUku+VLHIDCOim++JsHjOBY\nS7PBc6ROzEN/LK1U8jd25QLZS2pg3FcAD2FaQgLBNogDoQkL6ZIUZZJGU5aQm6Xm\nRKgUifzYScfBT4S2RUNATE6JDk0VAol7vWnMmuuPS8nd18cDoraRTJfcNPiishWd\nQ12Qe2UG12tZe6pY/j1f5BHc8QHGlRlsr1ERiE7JiLnbhXG2r6PbZfuSddm41zc=\n=hNQO\n-----END PGP SIGNATURE-----\n", "payload": "tree b2f9a7edc1a07d4162b0f4afdf6c895f6a6045bf\nparent 22aa680c44024531293c5ed8b963eb6aade3f7d0\nparent fe84cecf601522ed010fe35033b87a6ba8844c7d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1675402224 +0100\ncommitter GitHub <noreply@github.com> 1675402224 +0100\n\nRollup merge of #107598 - chenyukang:yukang/fix-core-bench, r=thomcc\n\nFix benchmarks in library/core with black_box\n\nFixes #107590\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86015515b5817390d652eae2fd765b89509b5331", "html_url": "https://github.com/rust-lang/rust/commit/86015515b5817390d652eae2fd765b89509b5331", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86015515b5817390d652eae2fd765b89509b5331/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22aa680c44024531293c5ed8b963eb6aade3f7d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/22aa680c44024531293c5ed8b963eb6aade3f7d0", "html_url": "https://github.com/rust-lang/rust/commit/22aa680c44024531293c5ed8b963eb6aade3f7d0"}, {"sha": "fe84cecf601522ed010fe35033b87a6ba8844c7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe84cecf601522ed010fe35033b87a6ba8844c7d", "html_url": "https://github.com/rust-lang/rust/commit/fe84cecf601522ed010fe35033b87a6ba8844c7d"}], "stats": {"total": 76, "additions": 44, "deletions": 32}, "files": [{"sha": "5d4df1ac8bd5883b5539539f7f11db2316d84a50", "filename": "library/core/benches/char/methods.rs", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/86015515b5817390d652eae2fd765b89509b5331/library%2Fcore%2Fbenches%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86015515b5817390d652eae2fd765b89509b5331/library%2Fcore%2Fbenches%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fchar%2Fmethods.rs?ref=86015515b5817390d652eae2fd765b89509b5331", "patch": "@@ -1,26 +1,26 @@\n-use test::Bencher;\n+use test::{black_box, Bencher};\n \n const CHARS: [char; 9] = ['0', 'x', '2', '5', 'A', 'f', '7', '8', '9'];\n const RADIX: [u32; 5] = [2, 8, 10, 16, 32];\n \n #[bench]\n fn bench_to_digit_radix_2(b: &mut Bencher) {\n-    b.iter(|| CHARS.iter().cycle().take(10_000).map(|c| c.to_digit(2)).min())\n+    b.iter(|| CHARS.iter().cycle().take(10_000).map(|c| black_box(c).to_digit(2)).min())\n }\n \n #[bench]\n fn bench_to_digit_radix_10(b: &mut Bencher) {\n-    b.iter(|| CHARS.iter().cycle().take(10_000).map(|c| c.to_digit(10)).min())\n+    b.iter(|| CHARS.iter().cycle().take(10_000).map(|c| black_box(c).to_digit(10)).min())\n }\n \n #[bench]\n fn bench_to_digit_radix_16(b: &mut Bencher) {\n-    b.iter(|| CHARS.iter().cycle().take(10_000).map(|c| c.to_digit(16)).min())\n+    b.iter(|| CHARS.iter().cycle().take(10_000).map(|c| black_box(c).to_digit(16)).min())\n }\n \n #[bench]\n fn bench_to_digit_radix_36(b: &mut Bencher) {\n-    b.iter(|| CHARS.iter().cycle().take(10_000).map(|c| c.to_digit(36)).min())\n+    b.iter(|| CHARS.iter().cycle().take(10_000).map(|c| black_box(c).to_digit(36)).min())\n }\n \n #[bench]\n@@ -31,47 +31,59 @@ fn bench_to_digit_radix_var(b: &mut Bencher) {\n             .cycle()\n             .zip(RADIX.iter().cycle())\n             .take(10_000)\n-            .map(|(c, radix)| c.to_digit(*radix))\n+            .map(|(c, radix)| black_box(c).to_digit(*radix))\n             .min()\n     })\n }\n \n #[bench]\n fn bench_to_ascii_uppercase(b: &mut Bencher) {\n-    b.iter(|| CHARS.iter().cycle().take(10_000).map(|c| c.to_ascii_uppercase()).min())\n+    b.iter(|| CHARS.iter().cycle().take(10_000).map(|c| black_box(c).to_ascii_uppercase()).min())\n }\n \n #[bench]\n fn bench_to_ascii_lowercase(b: &mut Bencher) {\n-    b.iter(|| CHARS.iter().cycle().take(10_000).map(|c| c.to_ascii_lowercase()).min())\n+    b.iter(|| CHARS.iter().cycle().take(10_000).map(|c| black_box(c).to_ascii_lowercase()).min())\n }\n \n #[bench]\n fn bench_ascii_mix_to_uppercase(b: &mut Bencher) {\n-    b.iter(|| (0..=255).cycle().take(10_000).map(|b| char::from(b).to_uppercase()).count())\n+    b.iter(|| {\n+        (0..=255).cycle().take(10_000).map(|b| black_box(char::from(b)).to_uppercase()).count()\n+    })\n }\n \n #[bench]\n fn bench_ascii_mix_to_lowercase(b: &mut Bencher) {\n-    b.iter(|| (0..=255).cycle().take(10_000).map(|b| char::from(b).to_lowercase()).count())\n+    b.iter(|| {\n+        (0..=255).cycle().take(10_000).map(|b| black_box(char::from(b)).to_lowercase()).count()\n+    })\n }\n \n #[bench]\n fn bench_ascii_char_to_uppercase(b: &mut Bencher) {\n-    b.iter(|| (0..=127).cycle().take(10_000).map(|b| char::from(b).to_uppercase()).count())\n+    b.iter(|| {\n+        (0..=127).cycle().take(10_000).map(|b| black_box(char::from(b)).to_uppercase()).count()\n+    })\n }\n \n #[bench]\n fn bench_ascii_char_to_lowercase(b: &mut Bencher) {\n-    b.iter(|| (0..=127).cycle().take(10_000).map(|b| char::from(b).to_lowercase()).count())\n+    b.iter(|| {\n+        (0..=127).cycle().take(10_000).map(|b| black_box(char::from(b)).to_lowercase()).count()\n+    })\n }\n \n #[bench]\n fn bench_non_ascii_char_to_uppercase(b: &mut Bencher) {\n-    b.iter(|| (128..=255).cycle().take(10_000).map(|b| char::from(b).to_uppercase()).count())\n+    b.iter(|| {\n+        (128..=255).cycle().take(10_000).map(|b| black_box(char::from(b)).to_uppercase()).count()\n+    })\n }\n \n #[bench]\n fn bench_non_ascii_char_to_lowercase(b: &mut Bencher) {\n-    b.iter(|| (128..=255).cycle().take(10_000).map(|b| char::from(b).to_lowercase()).count())\n+    b.iter(|| {\n+        (128..=255).cycle().take(10_000).map(|b| black_box(char::from(b)).to_lowercase()).count()\n+    })\n }"}, {"sha": "377c99effd03c7b0f58435f4013aa88ce46470af", "filename": "library/core/benches/num/flt2dec/strategy/dragon.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/86015515b5817390d652eae2fd765b89509b5331/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86015515b5817390d652eae2fd765b89509b5331/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs?ref=86015515b5817390d652eae2fd765b89509b5331", "patch": "@@ -1,14 +1,14 @@\n use super::super::*;\n use core::num::flt2dec::strategy::dragon::*;\n use std::mem::MaybeUninit;\n-use test::Bencher;\n+use test::{black_box, Bencher};\n \n #[bench]\n fn bench_small_shortest(b: &mut Bencher) {\n     let decoded = decode_finite(3.141592f64);\n     let mut buf = [MaybeUninit::new(0); MAX_SIG_DIGITS];\n     b.iter(|| {\n-        format_shortest(&decoded, &mut buf);\n+        format_shortest(black_box(&decoded), &mut buf);\n     });\n }\n \n@@ -17,7 +17,7 @@ fn bench_big_shortest(b: &mut Bencher) {\n     let decoded = decode_finite(f64::MAX);\n     let mut buf = [MaybeUninit::new(0); MAX_SIG_DIGITS];\n     b.iter(|| {\n-        format_shortest(&decoded, &mut buf);\n+        format_shortest(black_box(&decoded), &mut buf);\n     });\n }\n \n@@ -26,7 +26,7 @@ fn bench_small_exact_3(b: &mut Bencher) {\n     let decoded = decode_finite(3.141592f64);\n     let mut buf = [MaybeUninit::new(0); 3];\n     b.iter(|| {\n-        format_exact(&decoded, &mut buf, i16::MIN);\n+        format_exact(black_box(&decoded), &mut buf, i16::MIN);\n     });\n }\n \n@@ -35,7 +35,7 @@ fn bench_big_exact_3(b: &mut Bencher) {\n     let decoded = decode_finite(f64::MAX);\n     let mut buf = [MaybeUninit::new(0); 3];\n     b.iter(|| {\n-        format_exact(&decoded, &mut buf, i16::MIN);\n+        format_exact(black_box(&decoded), &mut buf, i16::MIN);\n     });\n }\n \n@@ -44,7 +44,7 @@ fn bench_small_exact_12(b: &mut Bencher) {\n     let decoded = decode_finite(3.141592f64);\n     let mut buf = [MaybeUninit::new(0); 12];\n     b.iter(|| {\n-        format_exact(&decoded, &mut buf, i16::MIN);\n+        format_exact(black_box(&decoded), &mut buf, i16::MIN);\n     });\n }\n \n@@ -53,7 +53,7 @@ fn bench_big_exact_12(b: &mut Bencher) {\n     let decoded = decode_finite(f64::MAX);\n     let mut buf = [MaybeUninit::new(0); 12];\n     b.iter(|| {\n-        format_exact(&decoded, &mut buf, i16::MIN);\n+        format_exact(black_box(&decoded), &mut buf, i16::MIN);\n     });\n }\n \n@@ -62,7 +62,7 @@ fn bench_small_exact_inf(b: &mut Bencher) {\n     let decoded = decode_finite(3.141592f64);\n     let mut buf = [MaybeUninit::new(0); 1024];\n     b.iter(|| {\n-        format_exact(&decoded, &mut buf, i16::MIN);\n+        format_exact(black_box(&decoded), &mut buf, i16::MIN);\n     });\n }\n \n@@ -71,6 +71,6 @@ fn bench_big_exact_inf(b: &mut Bencher) {\n     let decoded = decode_finite(f64::MAX);\n     let mut buf = [MaybeUninit::new(0); 1024];\n     b.iter(|| {\n-        format_exact(&decoded, &mut buf, i16::MIN);\n+        format_exact(black_box(&decoded), &mut buf, i16::MIN);\n     });\n }"}, {"sha": "6bea5e55d37bbc1bafad53c1ac0c98a4eafe5d15", "filename": "library/core/benches/num/flt2dec/strategy/grisu.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/86015515b5817390d652eae2fd765b89509b5331/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86015515b5817390d652eae2fd765b89509b5331/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs?ref=86015515b5817390d652eae2fd765b89509b5331", "patch": "@@ -1,7 +1,7 @@\n use super::super::*;\n use core::num::flt2dec::strategy::grisu::*;\n use std::mem::MaybeUninit;\n-use test::Bencher;\n+use test::{black_box, Bencher};\n \n pub fn decode_finite<T: DecodableFloat>(v: T) -> Decoded {\n     match decode(v).1 {\n@@ -15,7 +15,7 @@ fn bench_small_shortest(b: &mut Bencher) {\n     let decoded = decode_finite(3.141592f64);\n     let mut buf = [MaybeUninit::new(0); MAX_SIG_DIGITS];\n     b.iter(|| {\n-        format_shortest(&decoded, &mut buf);\n+        format_shortest(black_box(&decoded), &mut buf);\n     });\n }\n \n@@ -24,7 +24,7 @@ fn bench_big_shortest(b: &mut Bencher) {\n     let decoded = decode_finite(f64::MAX);\n     let mut buf = [MaybeUninit::new(0); MAX_SIG_DIGITS];\n     b.iter(|| {\n-        format_shortest(&decoded, &mut buf);\n+        format_shortest(black_box(&decoded), &mut buf);\n     });\n }\n \n@@ -33,7 +33,7 @@ fn bench_small_exact_3(b: &mut Bencher) {\n     let decoded = decode_finite(3.141592f64);\n     let mut buf = [MaybeUninit::new(0); 3];\n     b.iter(|| {\n-        format_exact(&decoded, &mut buf, i16::MIN);\n+        format_exact(black_box(&decoded), &mut buf, i16::MIN);\n     });\n }\n \n@@ -42,7 +42,7 @@ fn bench_big_exact_3(b: &mut Bencher) {\n     let decoded = decode_finite(f64::MAX);\n     let mut buf = [MaybeUninit::new(0); 3];\n     b.iter(|| {\n-        format_exact(&decoded, &mut buf, i16::MIN);\n+        format_exact(black_box(&decoded), &mut buf, i16::MIN);\n     });\n }\n \n@@ -51,7 +51,7 @@ fn bench_small_exact_12(b: &mut Bencher) {\n     let decoded = decode_finite(3.141592f64);\n     let mut buf = [MaybeUninit::new(0); 12];\n     b.iter(|| {\n-        format_exact(&decoded, &mut buf, i16::MIN);\n+        format_exact(black_box(&decoded), &mut buf, i16::MIN);\n     });\n }\n \n@@ -60,7 +60,7 @@ fn bench_big_exact_12(b: &mut Bencher) {\n     let decoded = decode_finite(f64::MAX);\n     let mut buf = [MaybeUninit::new(0); 12];\n     b.iter(|| {\n-        format_exact(&decoded, &mut buf, i16::MIN);\n+        format_exact(black_box(&decoded), &mut buf, i16::MIN);\n     });\n }\n \n@@ -69,7 +69,7 @@ fn bench_small_exact_inf(b: &mut Bencher) {\n     let decoded = decode_finite(3.141592f64);\n     let mut buf = [MaybeUninit::new(0); 1024];\n     b.iter(|| {\n-        format_exact(&decoded, &mut buf, i16::MIN);\n+        format_exact(black_box(&decoded), &mut buf, i16::MIN);\n     });\n }\n \n@@ -78,6 +78,6 @@ fn bench_big_exact_inf(b: &mut Bencher) {\n     let decoded = decode_finite(f64::MAX);\n     let mut buf = [MaybeUninit::new(0); 1024];\n     b.iter(|| {\n-        format_exact(&decoded, &mut buf, i16::MIN);\n+        format_exact(black_box(&decoded), &mut buf, i16::MIN);\n     });\n }"}]}