{"sha": "9aa4a949530afe44109568c40539da44f3d40ee9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhYTRhOTQ5NTMwYWZlNDQxMDk1NjhjNDA1MzlkYTQ0ZjNkNDBlZTk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-28T18:10:15Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-31T22:47:37Z"}, "message": "compiletest: Switch field privacy where necessary", "tree": {"sha": "194baa441ef704ce512fa92cc3a4c5f7544b5949", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/194baa441ef704ce512fa92cc3a4c5f7544b5949"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9aa4a949530afe44109568c40539da44f3d40ee9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9aa4a949530afe44109568c40539da44f3d40ee9", "html_url": "https://github.com/rust-lang/rust/commit/9aa4a949530afe44109568c40539da44f3d40ee9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9aa4a949530afe44109568c40539da44f3d40ee9/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0a80cca6c433e76daad13f7308a3e33abca77e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0a80cca6c433e76daad13f7308a3e33abca77e0", "html_url": "https://github.com/rust-lang/rust/commit/d0a80cca6c433e76daad13f7308a3e33abca77e0"}], "stats": {"total": 84, "additions": 44, "deletions": 40}, "files": [{"sha": "ea6e98fafa7cdda73649d32ad9925f62c905ae84", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9aa4a949530afe44109568c40539da44f3d40ee9/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa4a949530afe44109568c40539da44f3d40ee9/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=9aa4a949530afe44109568c40539da44f3d40ee9", "patch": "@@ -21,87 +21,87 @@ pub enum mode {\n #[deriving(Clone)]\n pub struct config {\n     // The library paths required for running the compiler\n-    compile_lib_path: ~str,\n+    pub compile_lib_path: ~str,\n \n     // The library paths required for running compiled programs\n-    run_lib_path: ~str,\n+    pub run_lib_path: ~str,\n \n     // The rustc executable\n-    rustc_path: Path,\n+    pub rustc_path: Path,\n \n     // The clang executable\n-    clang_path: Option<Path>,\n+    pub clang_path: Option<Path>,\n \n     // The llvm binaries path\n-    llvm_bin_path: Option<Path>,\n+    pub llvm_bin_path: Option<Path>,\n \n     // The directory containing the tests to run\n-    src_base: Path,\n+    pub src_base: Path,\n \n     // The directory where programs should be built\n-    build_base: Path,\n+    pub build_base: Path,\n \n     // Directory for auxiliary libraries\n-    aux_base: Path,\n+    pub aux_base: Path,\n \n     // The name of the stage being built (stage1, etc)\n-    stage_id: ~str,\n+    pub stage_id: ~str,\n \n     // The test mode, compile-fail, run-fail, run-pass\n-    mode: mode,\n+    pub mode: mode,\n \n     // Run ignored tests\n-    run_ignored: bool,\n+    pub run_ignored: bool,\n \n     // Only run tests that match this filter\n-    filter: Option<~str>,\n+    pub filter: Option<~str>,\n \n     // Write out a parseable log of tests that were run\n-    logfile: Option<Path>,\n+    pub logfile: Option<Path>,\n \n     // Write out a json file containing any metrics of the run\n-    save_metrics: Option<Path>,\n+    pub save_metrics: Option<Path>,\n \n     // Write and ratchet a metrics file\n-    ratchet_metrics: Option<Path>,\n+    pub ratchet_metrics: Option<Path>,\n \n     // Percent change in metrics to consider noise\n-    ratchet_noise_percent: Option<f64>,\n+    pub ratchet_noise_percent: Option<f64>,\n \n-    // \"Shard\" of the testsuite to run: this has the form of\n+    // \"Shard\" of the testsuite to pub run: this has the form of\n     // two numbers (a,b), and causes only those tests with\n     // positional order equal to a mod b to run.\n-    test_shard: Option<(uint,uint)>,\n+    pub test_shard: Option<(uint,uint)>,\n \n     // A command line to prefix program execution with,\n     // for running under valgrind\n-    runtool: Option<~str>,\n+    pub runtool: Option<~str>,\n \n     // Flags to pass to the compiler when building for the host\n-    host_rustcflags: Option<~str>,\n+    pub host_rustcflags: Option<~str>,\n \n     // Flags to pass to the compiler when building for the target\n-    target_rustcflags: Option<~str>,\n+    pub target_rustcflags: Option<~str>,\n \n     // Run tests using the JIT\n-    jit: bool,\n+    pub jit: bool,\n \n     // Target system to be tested\n-    target: ~str,\n+    pub target: ~str,\n \n     // Host triple for the compiler being invoked\n-    host: ~str,\n+    pub host: ~str,\n \n     // Extra parameter to run adb on arm-linux-androideabi\n-    adb_path: ~str,\n+    pub adb_path: ~str,\n \n     // Extra parameter to run test sute on arm-linux-androideabi\n-    adb_test_dir: ~str,\n+    pub adb_test_dir: ~str,\n \n     // status whether android device available or not\n-    adb_device_status: bool,\n+    pub adb_device_status: bool,\n \n     // Explain what's going on\n-    verbose: bool\n+    pub verbose: bool\n \n }"}, {"sha": "42b756271d43c52bc1ad842d2688dedc5e1a4385", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9aa4a949530afe44109568c40539da44f3d40ee9/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa4a949530afe44109568c40539da44f3d40ee9/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=9aa4a949530afe44109568c40539da44f3d40ee9", "patch": "@@ -10,7 +10,11 @@\n \n use std::io::{BufferedReader, File};\n \n-pub struct ExpectedError { line: uint, kind: ~str, msg: ~str }\n+pub struct ExpectedError {\n+    pub line: uint,\n+    pub kind: ~str,\n+    pub msg: ~str,\n+}\n \n // Load any test directives embedded in the file\n pub fn load_errors(testfile: &Path) -> Vec<ExpectedError> {"}, {"sha": "b45a68518a3ec4320c913728db232dfe1456648b", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9aa4a949530afe44109568c40539da44f3d40ee9/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa4a949530afe44109568c40539da44f3d40ee9/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=9aa4a949530afe44109568c40539da44f3d40ee9", "patch": "@@ -14,26 +14,26 @@ use util;\n \n pub struct TestProps {\n     // Lines that should be expected, in order, on standard out\n-    error_patterns: Vec<~str> ,\n+    pub error_patterns: Vec<~str> ,\n     // Extra flags to pass to the compiler\n-    compile_flags: Option<~str>,\n+    pub compile_flags: Option<~str>,\n     // If present, the name of a file that this test should match when\n     // pretty-printed\n-    pp_exact: Option<Path>,\n+    pub pp_exact: Option<Path>,\n     // Modules from aux directory that should be compiled\n-    aux_builds: Vec<~str> ,\n+    pub aux_builds: Vec<~str> ,\n     // Environment settings to use during execution\n-    exec_env: Vec<(~str,~str)> ,\n+    pub exec_env: Vec<(~str,~str)> ,\n     // Commands to be given to the debugger, when testing debug info\n-    debugger_cmds: Vec<~str> ,\n+    pub debugger_cmds: Vec<~str> ,\n     // Lines to check if they appear in the expected debugger output\n-    check_lines: Vec<~str> ,\n+    pub check_lines: Vec<~str> ,\n     // Flag to force a crate to be built with the host architecture\n-    force_host: bool,\n+    pub force_host: bool,\n     // Check stdout for error-pattern output as well as stderr\n-    check_stdout: bool,\n+    pub check_stdout: bool,\n     // Don't force a --crate-type=dylib flag on the command line\n-    no_prefer_dynamic: bool,\n+    pub no_prefer_dynamic: bool,\n }\n \n // Load any test directives embedded in the file"}, {"sha": "e00b864f2e9ebf892d4deab3467911edceefe250", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aa4a949530afe44109568c40539da44f3d40ee9/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa4a949530afe44109568c40539da44f3d40ee9/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=9aa4a949530afe44109568c40539da44f3d40ee9", "patch": "@@ -57,7 +57,7 @@ fn target_env(lib_path: &str, prog: &str) -> Vec<(~str,~str)> {\n     return env;\n }\n \n-pub struct Result {status: ProcessExit, out: ~str, err: ~str}\n+pub struct Result {pub status: ProcessExit, pub out: ~str, pub err: ~str}\n \n pub fn run(lib_path: &str,\n            prog: &str,"}]}