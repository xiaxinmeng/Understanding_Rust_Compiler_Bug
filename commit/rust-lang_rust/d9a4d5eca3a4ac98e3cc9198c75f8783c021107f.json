{"sha": "d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "node_id": "C_kwDOAAsO6NoAKGQ5YTRkNWVjYTNhNGFjOThlM2NjOTE5OGM3NWY4NzgzYzAyMTEwN2Y", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-29T22:36:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-29T22:36:23Z"}, "message": "Auto merge of #112080 - matthiaskrgr:rollup-pmpbe49, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #111558 (Move tests)\n - #111827 (Add build instructions for cranelift backend as part of Rust repo)\n - #111988 (Make `TyKind: Debug` have less verbose output)\n - #112022 (Check nested obligations during coercion unify in new solver)\n - #112057 (Suggest correct `self_ty`)\n - #112063 (Add a test for issue 110457/incremental ICE with closures with the same span)\n\nFailed merges:\n\n - #112068 (Move tests from `ui/discrim` dir)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "16dff5a6fa7f347160f4021e3f692c0299b63099", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16dff5a6fa7f347160f4021e3f692c0299b63099"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "html_url": "https://github.com/rust-lang/rust/commit/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "498553fc04f6a3fdc53412320f4e913bc53bc267", "url": "https://api.github.com/repos/rust-lang/rust/commits/498553fc04f6a3fdc53412320f4e913bc53bc267", "html_url": "https://github.com/rust-lang/rust/commit/498553fc04f6a3fdc53412320f4e913bc53bc267"}, {"sha": "36526cf657eae53533df872f827c7f4c35af1615", "url": "https://api.github.com/repos/rust-lang/rust/commits/36526cf657eae53533df872f827c7f4c35af1615", "html_url": "https://github.com/rust-lang/rust/commit/36526cf657eae53533df872f827c7f4c35af1615"}], "stats": {"total": 468, "additions": 385, "deletions": 83}, "files": [{"sha": "26dccf309e1e402ff3e8700850bc1a2e81ad43d0", "filename": "compiler/rustc_codegen_cranelift/Readme.md", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/compiler%2Frustc_codegen_cranelift%2FReadme.md", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/compiler%2Frustc_codegen_cranelift%2FReadme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2FReadme.md?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "patch": "@@ -42,6 +42,32 @@ This will build your project with rustc_codegen_cranelift instead of the usual L\n \n For additional ways to use rustc_codegen_cranelift like the JIT mode see [usage.md](docs/usage.md).\n \n+## Building and testing with changes in rustc code\n+\n+This is useful when changing code in `rustc_codegen_cranelift` as part of changing [main Rust repository](https://github.com/rust-lang/rust/).\n+This can happen, for example, when you are implementing a new compiler intrinsic.\n+\n+Instruction below uses `$RustCheckoutDir` as substitute for any folder where you cloned Rust repository.\n+\n+You need to do this steps to successfully compile and use the cranelift backend with your changes in rustc code:\n+\n+1. `cd $RustCheckoutDir`\n+2. Run `python x.py setup` and choose option for compiler (`b`).\n+3. Build compiler and necessary tools: `python x.py build --stage=2 compiler library/std src/tools/rustdoc src/tools/rustfmt`\n+   * (Optional) You can also build cargo by adding `src/tools/cargo` to previous command.\n+4. Copy exectutable files from `./build/host/stage2-tools/<your hostname triple>/release`\n+to `./build/host/stage2/bin/`. Note that you would need to do this every time you rebuilt `rust` repository.\n+5. Copy cargo from another toolchain: `cp $(rustup which cargo) .build/<your hostname triple>/stage2/bin/cargo`\n+   * Another option is to build it at step 3 and copy with other executables at step 4.\n+6. Link your new `rustc` to toolchain: `rustup toolchain link stage2 ./build/host/stage2/`.\n+7. (Windows only) compile y.rs: `rustc +stage2 -O y.rs`.\n+8. You need to prefix every `./y.rs` (or `y` if you built `y.rs`) command by `rustup run stage2` to make cg_clif use your local changes in rustc.\n+\n+  * `rustup run stage2 ./y.rs prepare`\n+  * `rustup run stage2 ./y.rs build`\n+  * (Optional) run tests: `rustup run stage2 ./y.rs test`\n+9. Now you can use your cg_clif build to compile other Rust programs, e.g. you can open any Rust crate and run commands like `$RustCheckoutDir/compiler/rustc_codegen_cranelift/dist/cargo-clif build --release`.\n+\n ## Configuration\n \n See the documentation on the `BackendConfig` struct in [config.rs](src/config.rs) for all"}, {"sha": "18b6537a8e9045fd0b9b111c8bb6e104c6b4b66d", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "patch": "@@ -902,7 +902,7 @@ fn report_trait_method_mismatch<'tcx>(\n             if trait_m.fn_has_self_parameter =>\n         {\n             let ty = trait_sig.inputs()[0];\n-            let sugg = match ExplicitSelf::determine(ty, |_| ty == impl_trait_ref.self_ty()) {\n+            let sugg = match ExplicitSelf::determine(ty, |ty| ty == impl_trait_ref.self_ty()) {\n                 ExplicitSelf::ByValue => \"self\".to_owned(),\n                 ExplicitSelf::ByReference(_, hir::Mutability::Not) => \"&self\".to_owned(),\n                 ExplicitSelf::ByReference(_, hir::Mutability::Mut) => \"&mut self\".to_owned(),"}, {"sha": "369dd4ae5950678243706c393e0b3cba4847a088", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "patch": "@@ -62,6 +62,7 @@ use rustc_span::{self, BytePos, DesugaringKind, Span};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::infer::InferCtxtExt as _;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt as _;\n+use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::{\n     self, NormalizeExt, ObligationCause, ObligationCauseCode, ObligationCtxt,\n };\n@@ -144,12 +145,28 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         debug!(\"unify(a: {:?}, b: {:?}, use_lub: {})\", a, b, self.use_lub);\n         self.commit_if_ok(|_| {\n             let at = self.at(&self.cause, self.fcx.param_env);\n-            if self.use_lub {\n+\n+            let res = if self.use_lub {\n                 at.lub(DefineOpaqueTypes::Yes, b, a)\n             } else {\n                 at.sup(DefineOpaqueTypes::Yes, b, a)\n                     .map(|InferOk { value: (), obligations }| InferOk { value: a, obligations })\n+            };\n+\n+            // In the new solver, lazy norm may allow us to shallowly equate\n+            // more types, but we emit possibly impossible-to-satisfy obligations.\n+            // Filter these cases out to make sure our coercion is more accurate.\n+            if self.tcx.trait_solver_next() {\n+                if let Ok(res) = &res {\n+                    for obligation in &res.obligations {\n+                        if !self.predicate_may_hold(&obligation) {\n+                            return Err(TypeError::Mismatch);\n+                        }\n+                    }\n+                }\n             }\n+\n+            res\n         })\n     }\n "}, {"sha": "4fdd3f263166052090f26b744d50bb50148fff3c", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "patch": "@@ -115,6 +115,16 @@ impl<'tcx> Interner for TyCtxt<'tcx> {\n     type FreeRegion = ty::FreeRegion;\n     type RegionVid = ty::RegionVid;\n     type PlaceholderRegion = ty::PlaceholderRegion;\n+\n+    fn ty_and_mut_to_parts(\n+        TypeAndMut { ty, mutbl }: TypeAndMut<'tcx>,\n+    ) -> (Self::Ty, Self::Mutability) {\n+        (ty, mutbl)\n+    }\n+\n+    fn mutability_is_mut(mutbl: Self::Mutability) -> bool {\n+        mutbl.is_mut()\n+    }\n }\n \n type InternedSet<'tcx, T> = ShardedHashMap<InternedInSet<'tcx, T>, ()>;"}, {"sha": "ac2144529b5aa399d4629fbf7cc9b37f8819e047", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "patch": "@@ -1496,7 +1496,7 @@ impl<'tcx> OpaqueHiddenType<'tcx> {\n /// identified by both a universe, as well as a name residing within that universe. Distinct bound\n /// regions/types/consts within the same universe simply have an unknown relationship to one\n /// another.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]\n #[derive(HashStable, TyEncodable, TyDecodable)]\n pub struct Placeholder<T> {\n     pub universe: UniverseIndex,"}, {"sha": "94915923c3171084d633644ae34f961c9005f03e", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 19, "deletions": 43, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "patch": "@@ -685,29 +685,30 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             ty::FnPtr(ref bare_fn) => p!(print(bare_fn)),\n             ty::Infer(infer_ty) => {\n-                let verbose = self.should_print_verbose();\n+                if self.should_print_verbose() {\n+                    p!(write(\"{:?}\", ty.kind()));\n+                    return Ok(self);\n+                }\n+\n                 if let ty::TyVar(ty_vid) = infer_ty {\n                     if let Some(name) = self.ty_infer_name(ty_vid) {\n                         p!(write(\"{}\", name))\n                     } else {\n-                        if verbose {\n-                            p!(write(\"{:?}\", infer_ty))\n-                        } else {\n-                            p!(write(\"{}\", infer_ty))\n-                        }\n+                        p!(write(\"{}\", infer_ty))\n                     }\n                 } else {\n-                    if verbose { p!(write(\"{:?}\", infer_ty)) } else { p!(write(\"{}\", infer_ty)) }\n+                    p!(write(\"{}\", infer_ty))\n                 }\n             }\n             ty::Error(_) => p!(\"{{type error}}\"),\n             ty::Param(ref param_ty) => p!(print(param_ty)),\n             ty::Bound(debruijn, bound_ty) => match bound_ty.kind {\n-                ty::BoundTyKind::Anon => debug_bound_var(&mut self, debruijn, bound_ty.var)?,\n+                ty::BoundTyKind::Anon => {\n+                    rustc_type_ir::debug_bound_var(&mut self, debruijn, bound_ty.var)?\n+                }\n                 ty::BoundTyKind::Param(_, s) => match self.should_print_verbose() {\n-                    true if debruijn == ty::INNERMOST => p!(write(\"^{}\", s)),\n-                    true => p!(write(\"^{}_{}\", debruijn.index(), s)),\n-                    false => p!(write(\"{}\", s)),\n+                    true => p!(write(\"{:?}\", ty.kind())),\n+                    false => p!(write(\"{s}\")),\n                 },\n             },\n             ty::Adt(def, substs) => {\n@@ -740,10 +741,11 @@ pub trait PrettyPrinter<'tcx>:\n                 }\n             }\n             ty::Placeholder(placeholder) => match placeholder.bound.kind {\n-                ty::BoundTyKind::Anon => {\n-                    debug_placeholder_var(&mut self, placeholder.universe, placeholder.bound.var)?;\n-                }\n-                ty::BoundTyKind::Param(_, name) => p!(write(\"{}\", name)),\n+                ty::BoundTyKind::Anon => p!(write(\"{placeholder:?}\")),\n+                ty::BoundTyKind::Param(_, name) => match self.should_print_verbose() {\n+                    true => p!(write(\"{:?}\", ty.kind())),\n+                    false => p!(write(\"{name}\")),\n+                },\n             },\n             ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n                 // We use verbose printing in 'NO_QUERIES' mode, to\n@@ -1372,11 +1374,9 @@ pub trait PrettyPrinter<'tcx>:\n             }\n \n             ty::ConstKind::Bound(debruijn, bound_var) => {\n-                debug_bound_var(&mut self, debruijn, bound_var)?\n+                rustc_type_ir::debug_bound_var(&mut self, debruijn, bound_var)?\n             }\n-            ty::ConstKind::Placeholder(placeholder) => {\n-                debug_placeholder_var(&mut self, placeholder.universe, placeholder.bound)?;\n-            },\n+            ty::ConstKind::Placeholder(placeholder) => p!(write(\"{placeholder:?}\")),\n             // FIXME(generic_const_exprs):\n             // write out some legible representation of an abstract const?\n             ty::ConstKind::Expr(_) => p!(\"{{const expr}}\"),\n@@ -3065,27 +3065,3 @@ pub struct OpaqueFnEntry<'tcx> {\n     fn_trait_ref: Option<ty::PolyTraitRef<'tcx>>,\n     return_ty: Option<ty::Binder<'tcx, Term<'tcx>>>,\n }\n-\n-pub fn debug_bound_var<T: std::fmt::Write>(\n-    fmt: &mut T,\n-    debruijn: ty::DebruijnIndex,\n-    var: ty::BoundVar,\n-) -> Result<(), std::fmt::Error> {\n-    if debruijn == ty::INNERMOST {\n-        write!(fmt, \"^{}\", var.index())\n-    } else {\n-        write!(fmt, \"^{}_{}\", debruijn.index(), var.index())\n-    }\n-}\n-\n-pub fn debug_placeholder_var<T: std::fmt::Write>(\n-    fmt: &mut T,\n-    universe: ty::UniverseIndex,\n-    bound: ty::BoundVar,\n-) -> Result<(), std::fmt::Error> {\n-    if universe == ty::UniverseIndex::ROOT {\n-        write!(fmt, \"!{}\", bound.index())\n-    } else {\n-        write!(fmt, \"!{}_{}\", universe.index(), bound.index())\n-    }\n-}"}, {"sha": "a965450d27d43830b31538461b174afc3e8b46f2", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 52, "deletions": 7, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "patch": "@@ -88,7 +88,35 @@ impl fmt::Debug for ty::FreeRegion {\n \n impl<'tcx> fmt::Debug for ty::FnSig<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"({:?}; c_variadic: {})->{:?}\", self.inputs(), self.c_variadic, self.output())\n+        let ty::FnSig { inputs_and_output: _, c_variadic, unsafety, abi } = self;\n+\n+        write!(f, \"{}\", unsafety.prefix_str())?;\n+        match abi {\n+            rustc_target::spec::abi::Abi::Rust => (),\n+            abi => write!(f, \"extern \\\"{abi:?}\\\" \")?,\n+        };\n+\n+        write!(f, \"fn(\")?;\n+        let inputs = self.inputs();\n+        match inputs.len() {\n+            0 if *c_variadic => write!(f, \"...)\")?,\n+            0 => write!(f, \")\")?,\n+            _ => {\n+                for ty in &self.inputs()[0..(self.inputs().len() - 1)] {\n+                    write!(f, \"{ty:?}, \")?;\n+                }\n+                write!(f, \"{:?}\", self.inputs().last().unwrap())?;\n+                if *c_variadic {\n+                    write!(f, \"...\")?;\n+                }\n+                write!(f, \")\")?;\n+            }\n+        }\n+\n+        match self.output().kind() {\n+            ty::Tuple(list) if list.is_empty() => Ok(()),\n+            _ => write!(f, \" -> {:?}\", self.output()),\n+        }\n     }\n }\n \n@@ -216,20 +244,37 @@ impl<'tcx> fmt::Debug for ty::ConstKind<'tcx> {\n         match self {\n             Param(param) => write!(f, \"{param:?}\"),\n             Infer(var) => write!(f, \"{var:?}\"),\n-            Bound(debruijn, var) => ty::print::debug_bound_var(f, *debruijn, *var),\n-            Placeholder(placeholder) => {\n-                ty::print::debug_placeholder_var(f, placeholder.universe, placeholder.bound)\n-            }\n+            Bound(debruijn, var) => rustc_type_ir::debug_bound_var(f, *debruijn, *var),\n+            Placeholder(placeholder) => write!(f, \"{placeholder:?}\"),\n             Unevaluated(uv) => {\n                 f.debug_tuple(\"Unevaluated\").field(&uv.substs).field(&uv.def).finish()\n             }\n             Value(valtree) => write!(f, \"{valtree:?}\"),\n-            Error(_) => write!(f, \"[const error]\"),\n+            Error(_) => write!(f, \"{{const error}}\"),\n             Expr(expr) => write!(f, \"{expr:?}\"),\n         }\n     }\n }\n \n+impl fmt::Debug for ty::BoundTy {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self.kind {\n+            ty::BoundTyKind::Anon => write!(f, \"{:?}\", self.var),\n+            ty::BoundTyKind::Param(_, sym) => write!(f, \"{sym:?}\"),\n+        }\n+    }\n+}\n+\n+impl<T: fmt::Debug> fmt::Debug for ty::Placeholder<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        if self.universe == ty::UniverseIndex::ROOT {\n+            write!(f, \"!{:?}\", self.bound)\n+        } else {\n+            write!(f, \"!{}_{:?}\", self.universe.index(), self.bound)\n+        }\n+    }\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n // Atomic structs\n //\n@@ -294,6 +339,7 @@ TrivialTypeTraversalAndLiftImpls! {\n     crate::ty::AliasRelationDirection,\n     crate::ty::Placeholder<crate::ty::BoundRegion>,\n     crate::ty::Placeholder<crate::ty::BoundTy>,\n+    crate::ty::Placeholder<ty::BoundVar>,\n     crate::ty::ClosureKind,\n     crate::ty::FreeRegion,\n     crate::ty::InferTy,\n@@ -310,7 +356,6 @@ TrivialTypeTraversalAndLiftImpls! {\n     interpret::Scalar,\n     rustc_target::abi::Size,\n     ty::BoundVar,\n-    ty::Placeholder<ty::BoundVar>,\n }\n \n TrivialTypeTraversalAndLiftImpls! {"}, {"sha": "6a9686c017b4a617407bfddff1bd0f2f8769a767", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "patch": "@@ -1511,10 +1511,11 @@ impl Atom for RegionVid {\n \n rustc_index::newtype_index! {\n     #[derive(HashStable)]\n+    #[debug_format = \"{}\"]\n     pub struct BoundVar {}\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]\n #[derive(HashStable)]\n pub struct BoundTy {\n     pub var: BoundVar,"}, {"sha": "ae16fbb162e5c01f83fb69fb8162805a40330204", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "patch": "@@ -52,7 +52,7 @@ pub trait Interner: Sized {\n     type PolyFnSig: Clone + Debug + Hash + Ord;\n     type ListBinderExistentialPredicate: Clone + Debug + Hash + Ord;\n     type BinderListTy: Clone + Debug + Hash + Ord;\n-    type ListTy: Clone + Debug + Hash + Ord;\n+    type ListTy: Clone + Debug + Hash + Ord + IntoIterator<Item = Self::Ty>;\n     type AliasTy: Clone + Debug + Hash + Ord;\n     type ParamTy: Clone + Debug + Hash + Ord;\n     type BoundTy: Clone + Debug + Hash + Ord;\n@@ -67,6 +67,9 @@ pub trait Interner: Sized {\n     type FreeRegion: Clone + Debug + Hash + Ord;\n     type RegionVid: Clone + Debug + Hash + Ord;\n     type PlaceholderRegion: Clone + Debug + Hash + Ord;\n+\n+    fn ty_and_mut_to_parts(ty_and_mut: Self::TypeAndMut) -> (Self::Ty, Self::Mutability);\n+    fn mutability_is_mut(mutbl: Self::Mutability) -> bool;\n }\n \n /// Imagine you have a function `F: FnOnce(&[T]) -> R`, plus an iterator `iter`\n@@ -390,7 +393,19 @@ impl DebruijnIndex {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n+pub fn debug_bound_var<T: std::fmt::Write>(\n+    fmt: &mut T,\n+    debruijn: DebruijnIndex,\n+    var: impl std::fmt::Debug,\n+) -> Result<(), std::fmt::Error> {\n+    if debruijn == INNERMOST {\n+        write!(fmt, \"^{:?}\", var)\n+    } else {\n+        write!(fmt, \"^{}_{:?}\", debruijn.index(), var)\n+    }\n+}\n+\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n #[derive(Encodable, Decodable, HashStable_Generic)]\n pub enum IntTy {\n     Isize,\n@@ -448,7 +463,7 @@ impl IntTy {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Copy, Debug)]\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Copy)]\n #[derive(Encodable, Decodable, HashStable_Generic)]\n pub enum UintTy {\n     Usize,\n@@ -506,7 +521,7 @@ impl UintTy {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n #[derive(Encodable, Decodable, HashStable_Generic)]\n pub enum FloatTy {\n     F32,"}, {"sha": "553d7f31b2d19e6e8cdf79b2213f923347da3582", "filename": "compiler/rustc_type_ir/src/structural_impls.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/compiler%2Frustc_type_ir%2Fsrc%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/compiler%2Frustc_type_ir%2Fsrc%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fstructural_impls.rs?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "patch": "@@ -4,11 +4,12 @@\n \n use crate::fold::{FallibleTypeFolder, TypeFoldable};\n use crate::visit::{TypeVisitable, TypeVisitor};\n-use crate::Interner;\n+use crate::{FloatTy, IntTy, Interner, UintTy};\n use rustc_data_structures::functor::IdFunctor;\n use rustc_data_structures::sync::Lrc;\n use rustc_index::{Idx, IndexVec};\n \n+use core::fmt;\n use std::ops::ControlFlow;\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -163,3 +164,21 @@ impl<I: Interner, T: TypeVisitable<I>, Ix: Idx> TypeVisitable<I> for IndexVec<Ix\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n+\n+impl fmt::Debug for IntTy {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", self.name_str())\n+    }\n+}\n+\n+impl fmt::Debug for UintTy {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", self.name_str())\n+    }\n+}\n+\n+impl fmt::Debug for FloatTy {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", self.name_str())\n+    }\n+}"}, {"sha": "fa18f921ee4ba5a98083522fc935c545cd7a4e15", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 52, "deletions": 20, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "patch": "@@ -294,7 +294,7 @@ impl<I: Interner> Clone for TyKind<I> {\n             Str => Str,\n             Array(t, c) => Array(t.clone(), c.clone()),\n             Slice(t) => Slice(t.clone()),\n-            RawPtr(t) => RawPtr(t.clone()),\n+            RawPtr(p) => RawPtr(p.clone()),\n             Ref(r, t, m) => Ref(r.clone(), t.clone(), m.clone()),\n             FnDef(d, s) => FnDef(d.clone(), s.clone()),\n             FnPtr(s) => FnPtr(s.clone()),\n@@ -499,33 +499,65 @@ impl<I: Interner> hash::Hash for TyKind<I> {\n impl<I: Interner> fmt::Debug for TyKind<I> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n-            Bool => f.write_str(\"Bool\"),\n-            Char => f.write_str(\"Char\"),\n-            Int(i) => f.debug_tuple_field1_finish(\"Int\", i),\n-            Uint(u) => f.debug_tuple_field1_finish(\"Uint\", u),\n-            Float(float) => f.debug_tuple_field1_finish(\"Float\", float),\n+            Bool => write!(f, \"bool\"),\n+            Char => write!(f, \"char\"),\n+            Int(i) => write!(f, \"{i:?}\"),\n+            Uint(u) => write!(f, \"{u:?}\"),\n+            Float(float) => write!(f, \"{float:?}\"),\n             Adt(d, s) => f.debug_tuple_field2_finish(\"Adt\", d, s),\n             Foreign(d) => f.debug_tuple_field1_finish(\"Foreign\", d),\n-            Str => f.write_str(\"Str\"),\n-            Array(t, c) => f.debug_tuple_field2_finish(\"Array\", t, c),\n-            Slice(t) => f.debug_tuple_field1_finish(\"Slice\", t),\n-            RawPtr(t) => f.debug_tuple_field1_finish(\"RawPtr\", t),\n-            Ref(r, t, m) => f.debug_tuple_field3_finish(\"Ref\", r, t, m),\n+            Str => write!(f, \"str\"),\n+            Array(t, c) => write!(f, \"[{t:?}; {c:?}]\"),\n+            Slice(t) => write!(f, \"[{t:?}]\"),\n+            RawPtr(p) => {\n+                let (ty, mutbl) = I::ty_and_mut_to_parts(p.clone());\n+                match I::mutability_is_mut(mutbl) {\n+                    true => write!(f, \"*mut \"),\n+                    false => write!(f, \"*const \"),\n+                }?;\n+                write!(f, \"{ty:?}\")\n+            }\n+            Ref(r, t, m) => match I::mutability_is_mut(m.clone()) {\n+                true => write!(f, \"&{r:?} mut {t:?}\"),\n+                false => write!(f, \"&{r:?} {t:?}\"),\n+            },\n             FnDef(d, s) => f.debug_tuple_field2_finish(\"FnDef\", d, s),\n-            FnPtr(s) => f.debug_tuple_field1_finish(\"FnPtr\", s),\n-            Dynamic(p, r, repr) => f.debug_tuple_field3_finish(\"Dynamic\", p, r, repr),\n+            FnPtr(s) => write!(f, \"{s:?}\"),\n+            Dynamic(p, r, repr) => match repr {\n+                DynKind::Dyn => write!(f, \"dyn {p:?} + {r:?}\"),\n+                DynKind::DynStar => write!(f, \"dyn* {p:?} + {r:?}\"),\n+            },\n             Closure(d, s) => f.debug_tuple_field2_finish(\"Closure\", d, s),\n             Generator(d, s, m) => f.debug_tuple_field3_finish(\"Generator\", d, s, m),\n             GeneratorWitness(g) => f.debug_tuple_field1_finish(\"GeneratorWitness\", g),\n             GeneratorWitnessMIR(d, s) => f.debug_tuple_field2_finish(\"GeneratorWitnessMIR\", d, s),\n-            Never => f.write_str(\"Never\"),\n-            Tuple(t) => f.debug_tuple_field1_finish(\"Tuple\", t),\n+            Never => write!(f, \"!\"),\n+            Tuple(t) => {\n+                let mut iter = t.clone().into_iter();\n+\n+                write!(f, \"(\")?;\n+\n+                match iter.next() {\n+                    None => return write!(f, \")\"),\n+                    Some(ty) => write!(f, \"{ty:?}\")?,\n+                };\n+\n+                match iter.next() {\n+                    None => return write!(f, \",)\"),\n+                    Some(ty) => write!(f, \"{ty:?})\")?,\n+                }\n+\n+                for ty in iter {\n+                    write!(f, \", {ty:?}\")?;\n+                }\n+                write!(f, \")\")\n+            }\n             Alias(i, a) => f.debug_tuple_field2_finish(\"Alias\", i, a),\n-            Param(p) => f.debug_tuple_field1_finish(\"Param\", p),\n-            Bound(d, b) => f.debug_tuple_field2_finish(\"Bound\", d, b),\n-            Placeholder(p) => f.debug_tuple_field1_finish(\"Placeholder\", p),\n-            Infer(t) => f.debug_tuple_field1_finish(\"Infer\", t),\n-            TyKind::Error(e) => f.debug_tuple_field1_finish(\"Error\", e),\n+            Param(p) => write!(f, \"{p:?}\"),\n+            Bound(d, b) => crate::debug_bound_var(f, *d, b),\n+            Placeholder(p) => write!(f, \"{p:?}\"),\n+            Infer(t) => write!(f, \"{t:?}\"),\n+            TyKind::Error(_) => write!(f, \"{{type error}}\"),\n         }\n     }\n }"}, {"sha": "3e9bf18a287114da409c604961dab502424f4879", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "patch": "@@ -10,8 +10,8 @@ use std::path::{Path, PathBuf};\n \n const ENTRY_LIMIT: usize = 900;\n // FIXME: The following limits should be reduced eventually.\n-const ISSUES_ENTRY_LIMIT: usize = 1920;\n-const ROOT_ENTRY_LIMIT: usize = 896;\n+const ISSUES_ENTRY_LIMIT: usize = 1898;\n+const ROOT_ENTRY_LIMIT: usize = 894;\n \n const EXPECTED_TEST_FILE_EXTENSIONS: &[&str] = &[\n     \"rs\",     // test source files"}, {"sha": "e7d91235e73563bbbdaf6f0841c80e48e380a1d6", "filename": "tests/incremental/issue-110457-same-span-closures/auxiliary/egui_inspect_derive.rs", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fincremental%2Fissue-110457-same-span-closures%2Fauxiliary%2Fegui_inspect_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fincremental%2Fissue-110457-same-span-closures%2Fauxiliary%2Fegui_inspect_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fincremental%2Fissue-110457-same-span-closures%2Fauxiliary%2Fegui_inspect_derive.rs?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "patch": "@@ -0,0 +1,90 @@\n+// force-host\n+// no-prefer-dynamic\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::{Delimiter, Group, Ident, Literal, Punct, Spacing, Span, TokenStream, TokenTree};\n+\n+#[proc_macro]\n+pub fn expand(_: TokenStream) -> TokenStream {\n+    // Hand expansion/rewriting of\n+    // ```\n+    // quote! {\n+    //     output_mut(|o| o.copied_text = \"\".into());\n+    //     output_mut(|o| o.copied_text = format!(\"{:?}\", self.tile_db));\n+    // }.into()\n+    // ```\n+    stream([\n+        ident(\"output_mut\"),\n+        group(\n+            Delimiter::Parenthesis,\n+            [\n+                or(),\n+                ident(\"o\"),\n+                or(),\n+                ident(\"o\"),\n+                dot(),\n+                ident(\"copied_text\"),\n+                eq(),\n+                string(\"\"),\n+                dot(),\n+                ident(\"into\"),\n+                group(Delimiter::Parenthesis, []),\n+            ],\n+        ),\n+        semi(),\n+        ident(\"output_mut\"),\n+        group(\n+            Delimiter::Parenthesis,\n+            [\n+                or(),\n+                ident(\"o\"),\n+                or(),\n+                ident(\"o\"),\n+                dot(),\n+                ident(\"copied_text\"),\n+                eq(),\n+                ident(\"format\"),\n+                bang(),\n+                group(\n+                    Delimiter::Parenthesis,\n+                    [string(\"{:?}\"), comma(), ident(\"self\"), dot(), ident(\"tile_db\")],\n+                ),\n+            ],\n+        ),\n+        semi(),\n+    ])\n+}\n+\n+fn stream(s: impl IntoIterator<Item = TokenTree>) -> TokenStream {\n+    s.into_iter().collect()\n+}\n+\n+fn ident(i: &str) -> TokenTree {\n+    TokenTree::Ident(Ident::new(i, Span::call_site()))\n+}\n+fn group(d: Delimiter, s: impl IntoIterator<Item = TokenTree>) -> TokenTree {\n+    TokenTree::Group(Group::new(d, s.into_iter().collect()))\n+}\n+fn semi() -> TokenTree {\n+    TokenTree::Punct(Punct::new(';', Spacing::Alone))\n+}\n+fn or() -> TokenTree {\n+    TokenTree::Punct(Punct::new('|', Spacing::Alone))\n+}\n+fn dot() -> TokenTree {\n+    TokenTree::Punct(Punct::new('.', Spacing::Alone))\n+}\n+fn eq() -> TokenTree {\n+    TokenTree::Punct(Punct::new('=', Spacing::Alone))\n+}\n+fn bang() -> TokenTree {\n+    TokenTree::Punct(Punct::new('!', Spacing::Alone))\n+}\n+fn comma() -> TokenTree {\n+    TokenTree::Punct(Punct::new(',', Spacing::Alone))\n+}\n+fn string(s: &str) -> TokenTree {\n+    TokenTree::Literal(Literal::string(s))\n+}"}, {"sha": "b44fda3d36a292e510abd47b6f0041c673cf0227", "filename": "tests/incremental/issue-110457-same-span-closures/main.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fincremental%2Fissue-110457-same-span-closures%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fincremental%2Fissue-110457-same-span-closures%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fincremental%2Fissue-110457-same-span-closures%2Fmain.rs?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "patch": "@@ -0,0 +1,47 @@\n+// aux-build: egui_inspect_derive.rs\n+// revisions: cpass1 cpass2\n+\n+extern crate egui_inspect_derive;\n+\n+pub struct TileDef {\n+    pub layer: (),\n+    #[cfg(cpass2)]\n+    pub blend_graphic: String,\n+}\n+\n+pub(crate) struct GameState {\n+    pub(crate) tile_db: TileDb,\n+}\n+\n+impl GameState {\n+    fn inspect_mut(&mut self) {\n+        egui_inspect_derive::expand! {}\n+    }\n+}\n+\n+fn new() -> GameState {\n+    loop {}\n+}\n+\n+fn main() {\n+    let mut app = new();\n+    app.inspect_mut();\n+}\n+// this is actually used\n+pub struct TileDb {\n+    unknown_bg: TileDef,\n+}\n+\n+impl std::fmt::Debug for TileDb {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        loop {}\n+    }\n+}\n+\n+pub struct PlatformOutput {\n+    pub copied_text: String,\n+}\n+\n+pub fn output_mut<R>(writer: impl FnOnce(&mut PlatformOutput) -> R) -> R {\n+    loop {}\n+}"}, {"sha": "ac18470c6211399cc7266631a5341ae431592526", "filename": "tests/ui/async-await/issue-78115.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fasync-await%2Fissue-78115.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fasync-await%2Fissue-78115.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-78115.rs?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "previous_filename": "tests/ui/issues/issue-78115.rs"}, {"sha": "b1f028fbccb9d81846cca70723bffb735d86d69f", "filename": "tests/ui/coercion/issue-3794.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fcoercion%2Fissue-3794.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fcoercion%2Fissue-3794.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoercion%2Fissue-3794.rs?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "previous_filename": "tests/ui/issues/issue-3794.rs"}, {"sha": "e320df4b7ad8f95dc2ce29b443abed72b28ea08c", "filename": "tests/ui/consts/issue-16538.mir.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fconsts%2Fissue-16538.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fconsts%2Fissue-16538.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-16538.mir.stderr?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "previous_filename": "tests/ui/issues/issue-16538.mir.stderr"}, {"sha": "270fa3014142732f78dc776dca3b3ed086e44e0a", "filename": "tests/ui/consts/issue-16538.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fconsts%2Fissue-16538.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fconsts%2Fissue-16538.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-16538.rs?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "previous_filename": "tests/ui/issues/issue-16538.rs"}, {"sha": "4a862869274f8943d827673209b7d51140492e77", "filename": "tests/ui/consts/issue-16538.thir.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fconsts%2Fissue-16538.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fconsts%2Fissue-16538.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-16538.thir.stderr?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "previous_filename": "tests/ui/issues/issue-16538.thir.stderr"}, {"sha": "10e5d1dd0ac157caf207d9a8bd97ab9af6657f5a", "filename": "tests/ui/consts/issue-28822.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fconsts%2Fissue-28822.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fconsts%2Fissue-28822.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-28822.rs?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "previous_filename": "tests/ui/issues/issue-28822.rs"}, {"sha": "5eff5d1915bad5130c63916e1714025a5204d74d", "filename": "tests/ui/consts/issue-29798.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fconsts%2Fissue-29798.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fconsts%2Fissue-29798.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fissue-29798.rs?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "previous_filename": "tests/ui/issues/issue-29798.rs"}, {"sha": "b49f2950020a2d32dd43db3731ddc046b14897c2", "filename": "tests/ui/enum-discriminant/issue-50689.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fenum-discriminant%2Fissue-50689.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fenum-discriminant%2Fissue-50689.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum-discriminant%2Fissue-50689.rs?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "previous_filename": "tests/ui/issues/issue-50689.rs"}, {"sha": "c2c047c79615ec99b2749f165ed9b8d143768e3a", "filename": "tests/ui/extern/issue-1251.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fextern%2Fissue-1251.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fextern%2Fissue-1251.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextern%2Fissue-1251.rs?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "previous_filename": "tests/ui/issues/issue-1251.rs"}, {"sha": "de5a6d35925869810728fad41e681fc93937fbd8", "filename": "tests/ui/for-loop-while/issue-1257.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Ffor-loop-while%2Fissue-1257.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Ffor-loop-while%2Fissue-1257.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor-loop-while%2Fissue-1257.rs?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "previous_filename": "tests/ui/issues/issue-1257.rs"}, {"sha": "0d07a549640f0428a1d64bb075c735576cd14844", "filename": "tests/ui/impl-trait/autoderef.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fimpl-trait%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fimpl-trait%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fautoderef.rs?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "patch": "@@ -1,3 +1,5 @@\n+// revisions: current next\n+//[next] compile-flag: -Ztrait-solver=next\n // check-pass\n \n use std::path::Path;"}, {"sha": "d0bd5b46cf59f9f6851e2c048caf39528fc1e489", "filename": "tests/ui/mismatched_types/E0053.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fmismatched_types%2FE0053.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fmismatched_types%2FE0053.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2FE0053.stderr?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "patch": "@@ -22,7 +22,7 @@ LL |     fn bar(&mut self) { }\n    |            ^^^^^^^^^\n    |            |\n    |            types differ in mutability\n-   |            help: change the self-receiver type to match the trait: `self: &Bar`\n+   |            help: change the self-receiver type to match the trait: `&self`\n    |\n note: type in trait\n   --> $DIR/E0053.rs:3:12"}, {"sha": "e63471e974771d5b5e05f57e9d961ac5d46ec45e", "filename": "tests/ui/mismatched_types/issue-112036.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fmismatched_types%2Fissue-112036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fmismatched_types%2Fissue-112036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fissue-112036.rs?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "patch": "@@ -0,0 +1,7 @@\n+struct Foo;\n+\n+impl Drop for Foo {\n+    fn drop(self) {} //~ ERROR method `drop` has an incompatible type for trait\n+}\n+\n+fn main() {}"}, {"sha": "a883aba35bfba170f0080e868a57d415cb18b0d6", "filename": "tests/ui/mismatched_types/issue-112036.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fmismatched_types%2Fissue-112036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fmismatched_types%2Fissue-112036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fissue-112036.stderr?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "patch": "@@ -0,0 +1,15 @@\n+error[E0053]: method `drop` has an incompatible type for trait\n+  --> $DIR/issue-112036.rs:4:13\n+   |\n+LL |     fn drop(self) {}\n+   |             ^^^^\n+   |             |\n+   |             expected `&mut Foo`, found `Foo`\n+   |             help: change the self-receiver type to match the trait: `&mut self`\n+   |\n+   = note: expected signature `fn(&mut Foo)`\n+              found signature `fn(Foo)`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "c42034879369232c258265e28c7ceee85c7a8d57", "filename": "tests/ui/pattern/issue-94866.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fpattern%2Fissue-94866.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fpattern%2Fissue-94866.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fissue-94866.rs?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "previous_filename": "tests/ui/issue-94866.rs"}, {"sha": "b3c17ce8974df3a4a80b2f229c49bff81460a57a", "filename": "tests/ui/pattern/issue-94866.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fpattern%2Fissue-94866.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fpattern%2Fissue-94866.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fissue-94866.stderr?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "previous_filename": "tests/ui/issue-94866.stderr"}, {"sha": "1124969e6d0a48125d9ee70f1ccd47f7b1cc57f8", "filename": "tests/ui/structs-enums/issue-3008-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fstructs-enums%2Fissue-3008-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fstructs-enums%2Fissue-3008-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstructs-enums%2Fissue-3008-1.rs?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "previous_filename": "tests/ui/issues/issue-3008-1.rs"}, {"sha": "be25b9091d589560e58c2922d9f4b29db99ed303", "filename": "tests/ui/structs-enums/issue-3008-1.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fstructs-enums%2Fissue-3008-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fstructs-enums%2Fissue-3008-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstructs-enums%2Fissue-3008-1.stderr?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "previous_filename": "tests/ui/issues/issue-3008-1.stderr"}, {"sha": "5846c69da413541ebef363ecb263e7f24f6de79b", "filename": "tests/ui/structs-enums/issue-3008-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fstructs-enums%2Fissue-3008-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fstructs-enums%2Fissue-3008-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstructs-enums%2Fissue-3008-2.rs?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "previous_filename": "tests/ui/issues/issue-3008-2.rs"}, {"sha": "858a8fd6af808a9b5ffec99a3d65491df1ad2007", "filename": "tests/ui/structs-enums/issue-3008-2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fstructs-enums%2Fissue-3008-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fstructs-enums%2Fissue-3008-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstructs-enums%2Fissue-3008-2.stderr?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "previous_filename": "tests/ui/issues/issue-3008-2.stderr"}, {"sha": "212eb2eb8e06f2a32adaf8b64f9d0d0e26f1bdd7", "filename": "tests/ui/structs-enums/issue-3008-3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fstructs-enums%2Fissue-3008-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fstructs-enums%2Fissue-3008-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstructs-enums%2Fissue-3008-3.rs?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "previous_filename": "tests/ui/issues/issue-3008-3.rs"}, {"sha": "a1a81e29367754d1576394a51e01e447ae113d97", "filename": "tests/ui/structs-enums/issue-3008-3.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fstructs-enums%2Fissue-3008-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fstructs-enums%2Fissue-3008-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstructs-enums%2Fissue-3008-3.stderr?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "previous_filename": "tests/ui/issues/issue-3008-3.stderr"}, {"sha": "b0aa44b56aa95906d3f6aa918440650a5a3c0f70", "filename": "tests/ui/thir-print/thir-flat.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fthir-print%2Fthir-flat.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fthir-print%2Fthir-flat.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fthir-print%2Fthir-flat.stdout?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "patch": "@@ -1,7 +1,7 @@\n DefId(0:3 ~ thir_flat[7b97]::main):\n Thir {\n     body_type: Fn(\n-        ([]; c_variadic: false)->(),\n+        fn(),\n     ),\n     arms: [],\n     blocks: ["}, {"sha": "f7a2bdd565989fa2f33eed20f13f0f5eaebbdff1", "filename": "tests/ui/typeck/issue-1871.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Ftypeck%2Fissue-1871.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Ftypeck%2Fissue-1871.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-1871.rs?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "previous_filename": "tests/ui/issues/issue-1871.rs"}, {"sha": "b774ca22dd72a153a5c3410682dfe63e8d1ac503", "filename": "tests/ui/typeck/issue-1871.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Ftypeck%2Fissue-1871.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Ftypeck%2Fissue-1871.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-1871.stderr?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "previous_filename": "tests/ui/issues/issue-1871.stderr"}, {"sha": "1d0527447ba51296833d4a44c89c12269ce88a45", "filename": "tests/ui/typeck/issue-2063-resource.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Ftypeck%2Fissue-2063-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Ftypeck%2Fissue-2063-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-2063-resource.rs?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "previous_filename": "tests/ui/issues/issue-2063-resource.rs"}, {"sha": "f08f9d4cfe4103b55a8989edd7b5b17cbc0a76f5", "filename": "tests/ui/typeck/issue-2063.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Ftypeck%2Fissue-2063.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Ftypeck%2Fissue-2063.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-2063.rs?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "previous_filename": "tests/ui/issues/issue-2063.rs"}, {"sha": "ee4316029a829b981933d97f51fedebf83f59c44", "filename": "tests/ui/where-clauses/issue-50825-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fwhere-clauses%2Fissue-50825-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fwhere-clauses%2Fissue-50825-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhere-clauses%2Fissue-50825-1.rs?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "previous_filename": "tests/ui/issues/issue-50825-1.rs"}, {"sha": "1ece2e9fc84758fd3945197c51d31217df615e15", "filename": "tests/ui/where-clauses/issue-50825.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fwhere-clauses%2Fissue-50825.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a4d5eca3a4ac98e3cc9198c75f8783c021107f/tests%2Fui%2Fwhere-clauses%2Fissue-50825.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhere-clauses%2Fissue-50825.rs?ref=d9a4d5eca3a4ac98e3cc9198c75f8783c021107f", "previous_filename": "tests/ui/issues/issue-50825.rs"}]}