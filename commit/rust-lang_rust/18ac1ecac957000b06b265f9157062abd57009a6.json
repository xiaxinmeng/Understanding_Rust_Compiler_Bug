{"sha": "18ac1ecac957000b06b265f9157062abd57009a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4YWMxZWNhYzk1NzAwMGIwNmIyNjVmOTE1NzA2MmFiZDU3MDA5YTY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-12-30T13:49:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-30T13:49:21Z"}, "message": "Rollup merge of #80337 - jyn514:add-query-desc, r=varkor\n\nUse `desc` as a doc-comment for queries if there are no doc comments\n\nThis at least gives *some* idea of what the query does even if it's not very readable. Some examples:\n\n![image](https://user-images.githubusercontent.com/23638587/103021399-13e15c00-4518-11eb-8121-940774ae2fd1.png)\n![image](https://user-images.githubusercontent.com/23638587/103021448-222f7800-4518-11eb-8ee6-cc10795fdc22.png)\n![image](https://user-images.githubusercontent.com/23638587/103021434-1d6ac400-4518-11eb-885b-59d00c57bc70.png)\n\nI want to turn `{}` into either `_` or the stringified expr, but [I'm not sure how to do that](https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/Evaluate.20format.20string.20in.20proc-macro). In the meantime, this is better than having no docs at all.", "tree": {"sha": "9e0690fa3d8256a9207f7373d673cc5a86ed9b6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e0690fa3d8256a9207f7373d673cc5a86ed9b6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18ac1ecac957000b06b265f9157062abd57009a6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf7IVhCRBK7hj4Ov3rIwAAdHIIAIl0/gBn1DncASoZSCCNv1si\nidazI4UvwEj7gMJimIZF10aUK7j6PARZq8q83WCrAU1zlcVWJ+DS0d2pp0s0qg2U\nmBuySt29/8r+2UUAnLoUiR9eAQG2Huqekw77+E/R2WqcuvA9BwOLQfr+ud8JeHbU\nA2FkTPSipOr2rSN2MZQTogx/lf+MXdmjappZHFFUufIBnLbwjHuJMCTbI08VBPDn\noIs6w3edC0aAgH5zf/1Cmw7JgbhDerfZ+uPm1yHkE3evnx/9GlaJFaYj5KWOPB4h\n6xvNnzvwA/EHQAYd4okASY2YSd3vHaAXZ71ifZ01yZnwXGeGEHrJWHXcktVewOM=\n=rJ12\n-----END PGP SIGNATURE-----\n", "payload": "tree 9e0690fa3d8256a9207f7373d673cc5a86ed9b6c\nparent 88b198b727d79c04d35c43feaabaa9e3d1a94f0c\nparent e67f9d3105ff462d16277cd9a035522117723937\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1609336161 +0900\ncommitter GitHub <noreply@github.com> 1609336161 +0900\n\nRollup merge of #80337 - jyn514:add-query-desc, r=varkor\n\nUse `desc` as a doc-comment for queries if there are no doc comments\n\nThis at least gives *some* idea of what the query does even if it's not very readable. Some examples:\n\n![image](https://user-images.githubusercontent.com/23638587/103021399-13e15c00-4518-11eb-8121-940774ae2fd1.png)\n![image](https://user-images.githubusercontent.com/23638587/103021448-222f7800-4518-11eb-8ee6-cc10795fdc22.png)\n![image](https://user-images.githubusercontent.com/23638587/103021434-1d6ac400-4518-11eb-885b-59d00c57bc70.png)\n\nI want to turn `{}` into either `_` or the stringified expr, but [I'm not sure how to do that](https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/Evaluate.20format.20string.20in.20proc-macro). In the meantime, this is better than having no docs at all.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18ac1ecac957000b06b265f9157062abd57009a6", "html_url": "https://github.com/rust-lang/rust/commit/18ac1ecac957000b06b265f9157062abd57009a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18ac1ecac957000b06b265f9157062abd57009a6/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88b198b727d79c04d35c43feaabaa9e3d1a94f0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/88b198b727d79c04d35c43feaabaa9e3d1a94f0c", "html_url": "https://github.com/rust-lang/rust/commit/88b198b727d79c04d35c43feaabaa9e3d1a94f0c"}, {"sha": "e67f9d3105ff462d16277cd9a035522117723937", "url": "https://api.github.com/repos/rust-lang/rust/commits/e67f9d3105ff462d16277cd9a035522117723937", "html_url": "https://github.com/rust-lang/rust/commit/e67f9d3105ff462d16277cd9a035522117723937"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "6d876784be65368fcff190fd872d8ff9fb673f53", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/18ac1ecac957000b06b265f9157062abd57009a6/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ac1ecac957000b06b265f9157062abd57009a6/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=18ac1ecac957000b06b265f9157062abd57009a6", "patch": "@@ -5,8 +5,8 @@ use syn::parse::{Parse, ParseStream, Result};\n use syn::punctuated::Punctuated;\n use syn::spanned::Spanned;\n use syn::{\n-    braced, parenthesized, parse_macro_input, AttrStyle, Attribute, Block, Error, Expr, Ident,\n-    ReturnType, Token, Type,\n+    braced, parenthesized, parse_macro_input, parse_quote, AttrStyle, Attribute, Block, Error,\n+    Expr, Ident, ReturnType, Token, Type,\n };\n \n mod kw {\n@@ -272,6 +272,40 @@ fn process_modifiers(query: &mut Query) -> QueryModifiers {\n                 if desc.is_some() {\n                     panic!(\"duplicate modifier `desc` for query `{}`\", query.name);\n                 }\n+                // If there are no doc-comments, give at least some idea of what\n+                // it does by showing the query description.\n+                if query.doc_comments.is_empty() {\n+                    use ::syn::*;\n+                    let mut list = list.iter();\n+                    let format_str: String = match list.next() {\n+                        Some(&Expr::Lit(ExprLit { lit: Lit::Str(ref lit_str), .. })) => {\n+                            lit_str.value().replace(\"`{}`\", \"{}\") // We add them later anyways for consistency\n+                        }\n+                        _ => panic!(\"Expected a string literal\"),\n+                    };\n+                    let mut fmt_fragments = format_str.split(\"{}\");\n+                    let mut doc_string = fmt_fragments.next().unwrap().to_string();\n+                    list.map(::quote::ToTokens::to_token_stream).zip(fmt_fragments).for_each(\n+                        |(tts, next_fmt_fragment)| {\n+                            use ::core::fmt::Write;\n+                            write!(\n+                                &mut doc_string,\n+                                \" `{}` {}\",\n+                                tts.to_string().replace(\" . \", \".\"),\n+                                next_fmt_fragment,\n+                            )\n+                            .unwrap();\n+                        },\n+                    );\n+                    let doc_string = format!(\n+                        \"[query description - consider adding a doc-comment!] {}\",\n+                        doc_string\n+                    );\n+                    let comment = parse_quote! {\n+                        #[doc = #doc_string]\n+                    };\n+                    query.doc_comments.push(comment);\n+                }\n                 desc = Some((tcx, list));\n             }\n             QueryModifier::FatalCycle => {"}]}