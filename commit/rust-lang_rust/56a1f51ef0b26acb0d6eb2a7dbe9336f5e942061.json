{"sha": "56a1f51ef0b26acb0d6eb2a7dbe9336f5e942061", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2YTFmNTFlZjBiMjZhY2IwZDZlYjJhN2RiZTkzMzZmNWU5NDIwNjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-09T02:38:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-09T02:38:57Z"}, "message": "Auto merge of #30208 - pnkfelix:fix-issue-30063, r=alexcrichton\n\n When given `rustc -C codegen-units=4 --emit=obj`, reset units back to 1.\n\nFix #30063\n\nNote: while this code is careful to handle the case of mutliple emit types (e.g. `--emit=asm,obj`) by reporting all the emit types that conflict with codegen units in its warnings, an invocation with multiple emit types *and* `-o PATH` will continue to ignore the requested target path (with a warning), as it already does today, since the code that checks for that is further downstream.  (Multiple emit types without `-o PATH` will \"work\", though it will downgrade codegen-units to 1 just like all the other cases.)\n\nr? @alexcrichton", "tree": {"sha": "0933efad9061e43d947aa664a18c506bd4a75df2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0933efad9061e43d947aa664a18c506bd4a75df2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56a1f51ef0b26acb0d6eb2a7dbe9336f5e942061", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56a1f51ef0b26acb0d6eb2a7dbe9336f5e942061", "html_url": "https://github.com/rust-lang/rust/commit/56a1f51ef0b26acb0d6eb2a7dbe9336f5e942061", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56a1f51ef0b26acb0d6eb2a7dbe9336f5e942061/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "462ec057649e11ce1967b0eea6c0353375c160ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/462ec057649e11ce1967b0eea6c0353375c160ea", "html_url": "https://github.com/rust-lang/rust/commit/462ec057649e11ce1967b0eea6c0353375c160ea"}, {"sha": "9b5b2e3f5950ba771defb03b6628e7f88b21c136", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b5b2e3f5950ba771defb03b6628e7f88b21c136", "html_url": "https://github.com/rust-lang/rust/commit/9b5b2e3f5950ba771defb03b6628e7f88b21c136"}], "stats": {"total": 93, "additions": 92, "deletions": 1}, "files": [{"sha": "6fb8c03370142713f7c935fee8a1765e53af2a0b", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/56a1f51ef0b26acb0d6eb2a7dbe9336f5e942061/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a1f51ef0b26acb0d6eb2a7dbe9336f5e942061/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=56a1f51ef0b26acb0d6eb2a7dbe9336f5e942061", "patch": "@@ -71,6 +71,30 @@ pub enum OutputType {\n     DepInfo,\n }\n \n+impl OutputType {\n+    fn is_compatible_with_codegen_units_and_single_output_file(&self) -> bool {\n+        match *self {\n+            OutputType::Exe |\n+            OutputType::DepInfo => true,\n+            OutputType::Bitcode |\n+            OutputType::Assembly |\n+            OutputType::LlvmAssembly |\n+            OutputType::Object => false,\n+        }\n+    }\n+\n+    fn shorthand(&self) -> &'static str {\n+        match *self {\n+            OutputType::Bitcode => \"llvm-bc\",\n+            OutputType::Assembly => \"asm\",\n+            OutputType::LlvmAssembly => \"llvm-ir\",\n+            OutputType::Object => \"obj\",\n+            OutputType::Exe => \"link\",\n+            OutputType::DepInfo => \"dep-info\",\n+        }\n+    }\n+}\n+\n #[derive(Clone)]\n pub struct Options {\n     // The crate config requested for the session, which may be combined\n@@ -933,7 +957,28 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         output_types.insert(OutputType::Exe, None);\n     }\n \n-    let cg = build_codegen_options(matches, color);\n+    let mut cg = build_codegen_options(matches, color);\n+\n+    // Issue #30063: if user requests llvm-related output to one\n+    // particular path, disable codegen-units.\n+    if matches.opt_present(\"o\") && cg.codegen_units != 1 {\n+        let incompatible: Vec<_> = output_types.iter()\n+            .map(|ot_path| ot_path.0)\n+            .filter(|ot| {\n+                !ot.is_compatible_with_codegen_units_and_single_output_file()\n+            }).collect();\n+        if !incompatible.is_empty() {\n+            for ot in &incompatible {\n+                early_warn(color, &format!(\"--emit={} with -o incompatible with \\\n+                                            -C codegen-units=N for N > 1\",\n+                                           ot.shorthand()));\n+            }\n+            early_warn(color, \"resetting to default -C codegen-units=1\");\n+            cg.codegen_units = 1;\n+        }\n+    }\n+\n+    let cg = cg;\n \n     let sysroot_opt = matches.opt_str(\"sysroot\").map(|m| PathBuf::from(&m));\n     let target = matches.opt_str(\"target\").unwrap_or("}, {"sha": "a76051dc81e1eb8d17ba85df75fa9f9a20933fe9", "filename": "src/test/run-make/issue-30063/Makefile", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/56a1f51ef0b26acb0d6eb2a7dbe9336f5e942061/src%2Ftest%2Frun-make%2Fissue-30063%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/56a1f51ef0b26acb0d6eb2a7dbe9336f5e942061/src%2Ftest%2Frun-make%2Fissue-30063%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-30063%2FMakefile?ref=56a1f51ef0b26acb0d6eb2a7dbe9336f5e942061", "patch": "@@ -0,0 +1,35 @@\n+-include ../tools.mk\n+\n+all:\n+\trm -f $(TMPDIR)/foo-output\n+\t$(RUSTC) -C codegen-units=4 -o $(TMPDIR)/foo-output foo.rs\n+\trm $(TMPDIR)/foo-output\n+\n+\trm -f $(TMPDIR)/asm-output\n+\t$(RUSTC) -C codegen-units=4 --emit=asm -o $(TMPDIR)/asm-output foo.rs\n+\trm $(TMPDIR)/asm-output\n+\n+\trm -f $(TMPDIR)/bc-output\n+\t$(RUSTC) -C codegen-units=4 --emit=llvm-bc -o $(TMPDIR)/bc-output foo.rs\n+\trm $(TMPDIR)/bc-output\n+\n+\trm -f $(TMPDIR)/ir-output\n+\t$(RUSTC) -C codegen-units=4 --emit=llvm-ir -o $(TMPDIR)/ir-output foo.rs\n+\trm $(TMPDIR)/ir-output\n+\n+\trm -f $(TMPDIR)/link-output\n+\t$(RUSTC) -C codegen-units=4 --emit=link -o $(TMPDIR)/link-output foo.rs\n+\trm $(TMPDIR)/link-output\n+\n+\trm -f $(TMPDIR)/obj-output\n+\t$(RUSTC) -C codegen-units=4 --emit=obj -o $(TMPDIR)/obj-output foo.rs\n+\trm $(TMPDIR)/obj-output\n+\n+\trm -f $(TMPDIR)/dep-output\n+\t$(RUSTC) -C codegen-units=4 --emit=dep-info -o $(TMPDIR)/dep-output foo.rs\n+\trm $(TMPDIR)/dep-output\n+\n+#\t# (This case doesn't work yet, and may be fundamentally wrong-headed anyway.)\n+#\trm -f $(TMPDIR)/multi-output\n+#\t$(RUSTC) -C codegen-units=4 --emit=asm,obj -o $(TMPDIR)/multi-output foo.rs\n+#\trm $(TMPDIR)/multi-output"}, {"sha": "45f7a2c2aa6fbd574319a8c6742918ad1aab0897", "filename": "src/test/run-make/issue-30063/foo.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/56a1f51ef0b26acb0d6eb2a7dbe9336f5e942061/src%2Ftest%2Frun-make%2Fissue-30063%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a1f51ef0b26acb0d6eb2a7dbe9336f5e942061/src%2Ftest%2Frun-make%2Fissue-30063%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-30063%2Ffoo.rs?ref=56a1f51ef0b26acb0d6eb2a7dbe9336f5e942061", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() { }"}]}