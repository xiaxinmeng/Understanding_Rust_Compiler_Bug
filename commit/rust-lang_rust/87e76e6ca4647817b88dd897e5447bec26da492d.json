{"sha": "87e76e6ca4647817b88dd897e5447bec26da492d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ZTc2ZTZjYTQ2NDc4MTdiODhkZDg5N2U1NDQ3YmVjMjZkYTQ5MmQ=", "commit": {"author": {"name": "Keith Yeung", "email": "kungfukeith11@gmail.com", "date": "2016-11-28T19:54:47Z"}, "committer": {"name": "Keith Yeung", "email": "kungfukeith11@gmail.com", "date": "2016-12-04T01:12:31Z"}, "message": "Update error expectations", "tree": {"sha": "14440fce05b647db791168c62b04cfc314560cf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14440fce05b647db791168c62b04cfc314560cf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87e76e6ca4647817b88dd897e5447bec26da492d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87e76e6ca4647817b88dd897e5447bec26da492d", "html_url": "https://github.com/rust-lang/rust/commit/87e76e6ca4647817b88dd897e5447bec26da492d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87e76e6ca4647817b88dd897e5447bec26da492d/comments", "author": {"login": "KiChjang", "id": 3248587, "node_id": "MDQ6VXNlcjMyNDg1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/3248587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KiChjang", "html_url": "https://github.com/KiChjang", "followers_url": "https://api.github.com/users/KiChjang/followers", "following_url": "https://api.github.com/users/KiChjang/following{/other_user}", "gists_url": "https://api.github.com/users/KiChjang/gists{/gist_id}", "starred_url": "https://api.github.com/users/KiChjang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KiChjang/subscriptions", "organizations_url": "https://api.github.com/users/KiChjang/orgs", "repos_url": "https://api.github.com/users/KiChjang/repos", "events_url": "https://api.github.com/users/KiChjang/events{/privacy}", "received_events_url": "https://api.github.com/users/KiChjang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "KiChjang", "id": 3248587, "node_id": "MDQ6VXNlcjMyNDg1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/3248587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KiChjang", "html_url": "https://github.com/KiChjang", "followers_url": "https://api.github.com/users/KiChjang/followers", "following_url": "https://api.github.com/users/KiChjang/following{/other_user}", "gists_url": "https://api.github.com/users/KiChjang/gists{/gist_id}", "starred_url": "https://api.github.com/users/KiChjang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KiChjang/subscriptions", "organizations_url": "https://api.github.com/users/KiChjang/orgs", "repos_url": "https://api.github.com/users/KiChjang/repos", "events_url": "https://api.github.com/users/KiChjang/events{/privacy}", "received_events_url": "https://api.github.com/users/KiChjang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fcb6a2b883d5bee027e78fa462edd0ddc34f62b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fcb6a2b883d5bee027e78fa462edd0ddc34f62b", "html_url": "https://github.com/rust-lang/rust/commit/9fcb6a2b883d5bee027e78fa462edd0ddc34f62b"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "c274665530fdb67f28b8108f4353b6adfe1265be", "filename": "src/test/compile-fail/issue-23046.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e76e6ca4647817b88dd897e5447bec26da492d/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e76e6ca4647817b88dd897e5447bec26da492d/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs?ref=87e76e6ca4647817b88dd897e5447bec26da492d", "patch": "@@ -25,6 +25,6 @@ pub fn let_<'var, VAR, F: for<'v: 'var> Fn(Expr<'v, VAR>) -> Expr<'v, VAR>>\n \n fn main() {\n     let ex = |x| {\n-        let_(add(x,x), |y| { //~ ERROR unable to infer enough type information about `_`\n+        let_(add(x,x), |y| { //~ ERROR unable to infer enough type information about `VAR`\n             let_(add(x, x), |x|x)})};\n }"}, {"sha": "cf78d6d8c0ad4715686519707a9b3e8050962318", "filename": "src/test/compile-fail/issue-5062.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e76e6ca4647817b88dd897e5447bec26da492d/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e76e6ca4647817b88dd897e5447bec26da492d/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs?ref=87e76e6ca4647817b88dd897e5447bec26da492d", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n fn main() { format!(\"{:?}\", None); }\n-    //~^ ERROR unable to infer enough type information about `_` [E0282]\n+    //~^ ERROR unable to infer enough type information about `T` [E0282]"}, {"sha": "3816896d43d1f47533d3bad1366161d95f3b1472", "filename": "src/test/compile-fail/issue-6458-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e76e6ca4647817b88dd897e5447bec26da492d/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e76e6ca4647817b88dd897e5447bec26da492d/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs?ref=87e76e6ca4647817b88dd897e5447bec26da492d", "patch": "@@ -11,5 +11,5 @@\n fn main() {\n     // Unconstrained type:\n     format!(\"{:?}\", None);\n-    //~^ ERROR unable to infer enough type information about `_` [E0282]\n+    //~^ ERROR unable to infer enough type information about `T` [E0282]\n }"}, {"sha": "8029522f5d3cc9cdb3bb696c769c50032dc4e6ce", "filename": "src/test/compile-fail/issue-6458-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e76e6ca4647817b88dd897e5447bec26da492d/src%2Ftest%2Fcompile-fail%2Fissue-6458-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e76e6ca4647817b88dd897e5447bec26da492d/src%2Ftest%2Fcompile-fail%2Fissue-6458-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458-3.rs?ref=87e76e6ca4647817b88dd897e5447bec26da492d", "patch": "@@ -12,7 +12,7 @@ use std::mem;\n \n fn main() {\n     mem::transmute(0);\n-    //~^ ERROR unable to infer enough type information about `_` [E0282]\n-    //~| NOTE cannot infer type for `_`\n+    //~^ ERROR unable to infer enough type information about `U` [E0282]\n+    //~| NOTE cannot infer type for `U`\n     //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "f8354ddbf12a58df5563eb80639a3dfb1cfab696", "filename": "src/test/compile-fail/issue-6458.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e76e6ca4647817b88dd897e5447bec26da492d/src%2Ftest%2Fcompile-fail%2Fissue-6458.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e76e6ca4647817b88dd897e5447bec26da492d/src%2Ftest%2Fcompile-fail%2Fissue-6458.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458.rs?ref=87e76e6ca4647817b88dd897e5447bec26da492d", "patch": "@@ -17,8 +17,8 @@ pub fn foo<State>(_: TypeWithState<State>) {}\n \n pub fn bar() {\n    foo(TypeWithState(marker::PhantomData));\n-   //~^ ERROR unable to infer enough type information about `_` [E0282]\n-   //~| NOTE cannot infer type for `_`\n+   //~^ ERROR unable to infer enough type information about `State` [E0282]\n+   //~| NOTE cannot infer type for `State`\n    //~| NOTE type annotations or generic parameter binding\n }\n "}, {"sha": "e37a881642393fd9400a7f2fe0d2ea24c6521171", "filename": "src/test/compile-fail/issue-7813.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e76e6ca4647817b88dd897e5447bec26da492d/src%2Ftest%2Fcompile-fail%2Fissue-7813.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e76e6ca4647817b88dd897e5447bec26da492d/src%2Ftest%2Fcompile-fail%2Fissue-7813.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7813.rs?ref=87e76e6ca4647817b88dd897e5447bec26da492d", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     let v = &[];\n-    let it = v.iter(); //~ ERROR unable to infer enough type information about `_` [E0282]\n-                       //~| NOTE cannot infer type for `_`\n+    let it = v.iter(); //~ ERROR unable to infer enough type information about `T` [E0282]\n+                       //~| NOTE cannot infer type for `T`\n                        //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "1cf41f95a2d6d8bc977ad375defe266ed85c20cb", "filename": "src/test/compile-fail/method-ambig-one-trait-unknown-int-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e76e6ca4647817b88dd897e5447bec26da492d/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-unknown-int-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e76e6ca4647817b88dd897e5447bec26da492d/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-unknown-int-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-unknown-int-type.rs?ref=87e76e6ca4647817b88dd897e5447bec26da492d", "patch": "@@ -32,7 +32,7 @@ impl foo for Vec<isize> {\n fn m1() {\n     // we couldn't infer the type of the vector just based on calling foo()...\n     let mut x = Vec::new();\n-    //~^ ERROR unable to infer enough type information about `_` [E0282]\n+    //~^ ERROR unable to infer enough type information about `T` [E0282]\n     x.foo();\n }\n "}, {"sha": "ed2ffa995e521ce188e83b8c5de832f6868a196c", "filename": "src/test/compile-fail/traits-multidispatch-convert-ambig-dest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e76e6ca4647817b88dd897e5447bec26da492d/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e76e6ca4647817b88dd897e5447bec26da492d/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs?ref=87e76e6ca4647817b88dd897e5447bec26da492d", "patch": "@@ -34,8 +34,8 @@ where T : Convert<U>\n \n fn a() {\n     test(22, std::default::Default::default());\n-    //~^ ERROR unable to infer enough type information about `_` [E0282]\n-    //~| NOTE cannot infer type for `_`\n+    //~^ ERROR unable to infer enough type information about `U` [E0282]\n+    //~| NOTE cannot infer type for `U`\n     //~| NOTE type annotations or generic parameter binding\n }\n "}, {"sha": "88080bc70cab4e404a65c97108b7889ba42ff7b1", "filename": "src/test/compile-fail/unconstrained-none.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e76e6ca4647817b88dd897e5447bec26da492d/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e76e6ca4647817b88dd897e5447bec26da492d/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs?ref=87e76e6ca4647817b88dd897e5447bec26da492d", "patch": "@@ -11,7 +11,7 @@\n // Issue #5062\n \n fn main() {\n-    None; //~ ERROR unable to infer enough type information about `_` [E0282]\n-          //~| NOTE cannot infer type for `_`\n+    None; //~ ERROR unable to infer enough type information about `T` [E0282]\n+          //~| NOTE cannot infer type for `T`\n           //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "12278549215ed132deca9b9cb4584dc78d74fbbc", "filename": "src/test/compile-fail/unconstrained-ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e76e6ca4647817b88dd897e5447bec26da492d/src%2Ftest%2Fcompile-fail%2Funconstrained-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e76e6ca4647817b88dd897e5447bec26da492d/src%2Ftest%2Fcompile-fail%2Funconstrained-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funconstrained-ref.rs?ref=87e76e6ca4647817b88dd897e5447bec26da492d", "patch": "@@ -13,7 +13,7 @@ struct S<'a, T:'a> {\n }\n \n fn main() {\n-    S { o: &None }; //~ ERROR unable to infer enough type information about `_` [E0282]\n-                    //~| NOTE cannot infer type for `_`\n+    S { o: &None }; //~ ERROR unable to infer enough type information about `T` [E0282]\n+                    //~| NOTE cannot infer type for `T`\n                     //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "d559caf77a1a37944dedf9d43f7bb6cdf1acd583", "filename": "src/test/compile-fail/vector-no-ann.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e76e6ca4647817b88dd897e5447bec26da492d/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e76e6ca4647817b88dd897e5447bec26da492d/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs?ref=87e76e6ca4647817b88dd897e5447bec26da492d", "patch": "@@ -11,7 +11,7 @@\n \n fn main() {\n     let _foo = Vec::new();\n-    //~^ ERROR unable to infer enough type information about `_` [E0282]\n-    //~| NOTE cannot infer type for `_`\n+    //~^ ERROR unable to infer enough type information about `T` [E0282]\n+    //~| NOTE cannot infer type for `T`\n     //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "7e0d778a3b205e431bd5ee8b58d7f692292e4867", "filename": "src/test/ui/codemap_tests/repair_span_std_macros.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e76e6ca4647817b88dd897e5447bec26da492d/src%2Ftest%2Fui%2Fcodemap_tests%2Frepair_span_std_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87e76e6ca4647817b88dd897e5447bec26da492d/src%2Ftest%2Fui%2Fcodemap_tests%2Frepair_span_std_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Frepair_span_std_macros.stderr?ref=87e76e6ca4647817b88dd897e5447bec26da492d", "patch": "@@ -1,8 +1,8 @@\n-error[E0282]: unable to infer enough type information about `_`\n+error[E0282]: unable to infer enough type information about `T`\n   --> $DIR/repair_span_std_macros.rs:12:13\n    |\n 12 |     let x = vec![];\n-   |             ^^^^^^ cannot infer type for `_`\n+   |             ^^^^^^ cannot infer type for `T`\n    |\n    = note: type annotations or generic parameter binding required\n    = note: this error originates in a macro outside of the current crate"}]}