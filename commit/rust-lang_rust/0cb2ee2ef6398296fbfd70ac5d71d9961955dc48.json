{"sha": "0cb2ee2ef6398296fbfd70ac5d71d9961955dc48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjYjJlZTJlZjYzOTgyOTZmYmZkNzBhYzVkNzFkOTk2MTk1NWRjNDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-14T05:33:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-14T05:33:10Z"}, "message": "Auto merge of #32877 - oli-obk:const_err_multi, r=arielb1\n\ndon't report errors in constants at every use site\n\npartially fixes #32842\n\nr? @arielb1\ncc @retep998\n\nI chose this way of implementing it, because the alternative (checking if the error span is inside the constant's expressions's span) would get confusing when combined with expression generating macros.\n\nA next step would be to re-enable the re-reporting of errors if the original erroneous constant is in another crate.", "tree": {"sha": "6e7895e839800518e04baeaf567df6dd48c6d69c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e7895e839800518e04baeaf567df6dd48c6d69c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cb2ee2ef6398296fbfd70ac5d71d9961955dc48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cb2ee2ef6398296fbfd70ac5d71d9961955dc48", "html_url": "https://github.com/rust-lang/rust/commit/0cb2ee2ef6398296fbfd70ac5d71d9961955dc48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cb2ee2ef6398296fbfd70ac5d71d9961955dc48/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adb0923492d737a4b3243db05f042e22a672b2d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/adb0923492d737a4b3243db05f042e22a672b2d8", "html_url": "https://github.com/rust-lang/rust/commit/adb0923492d737a4b3243db05f042e22a672b2d8"}, {"sha": "d38a58d46d69bcd0b8839665fd1de9c34c09cfee", "url": "https://api.github.com/repos/rust-lang/rust/commits/d38a58d46d69bcd0b8839665fd1de9c34c09cfee", "html_url": "https://github.com/rust-lang/rust/commit/d38a58d46d69bcd0b8839665fd1de9c34c09cfee"}], "stats": {"total": 61, "additions": 54, "deletions": 7}, "files": [{"sha": "3f68f6aeccaceaf7ee8cbd7894886a3db73adee6", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0cb2ee2ef6398296fbfd70ac5d71d9961955dc48/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb2ee2ef6398296fbfd70ac5d71d9961955dc48/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=0cb2ee2ef6398296fbfd70ac5d71d9961955dc48", "patch": "@@ -364,7 +364,7 @@ pub struct ConstEvalErr {\n     pub kind: ErrKind,\n }\n \n-#[derive(Clone, PartialEq)]\n+#[derive(Clone)]\n pub enum ErrKind {\n     CannotCast,\n     CannotCastTo(&'static str),\n@@ -414,6 +414,7 @@ pub enum ErrKind {\n     /// Expected, Got\n     TypeMismatch(String, ConstInt),\n     BadType(ConstVal),\n+    ErroneousReferencedConstant(Box<ConstEvalErr>),\n }\n \n impl From<ConstMathErr> for ErrKind {\n@@ -480,6 +481,7 @@ impl ConstEvalErr {\n                         expected, got.description()).into_cow()\n             },\n             BadType(ref i) => format!(\"value of wrong type: {:?}\", i).into_cow(),\n+            ErroneousReferencedConstant(_) => \"could not evaluate referenced constant\".into_cow(),\n         }\n     }\n }\n@@ -696,6 +698,8 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &TyCtxt<'tcx>,\n \n         let val = match eval_const_expr_partial(tcx, &base, base_hint, fn_args) {\n             Ok(val) => val,\n+            Err(ConstEvalErr { kind: ErroneousReferencedConstant(\n+                box ConstEvalErr { kind: TypeMismatch(_, val), .. }), .. }) |\n             Err(ConstEvalErr { kind: TypeMismatch(_, val), .. }) => {\n                 // Something like `5i8 as usize` doesn't need a type hint for the base\n                 // instead take the type hint from the inner value\n@@ -737,19 +741,31 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &TyCtxt<'tcx>,\n                   } else {\n                       None\n                   };\n-                  if let Some((e, ty)) = lookup_const_by_id(tcx, def_id, substs) {\n+                  if let Some((expr, ty)) = lookup_const_by_id(tcx, def_id, substs) {\n                       let item_hint = match ty {\n                           Some(ty) => ty_hint.checked_or(ty),\n                           None => ty_hint,\n                       };\n-                      eval_const_expr_partial(tcx, e, item_hint, None)?\n+                      match eval_const_expr_partial(tcx, expr, item_hint, None) {\n+                          Ok(val) => val,\n+                          Err(err) => {\n+                              debug!(\"bad reference: {:?}, {:?}\", err.description(), err.span);\n+                              signal!(e, ErroneousReferencedConstant(box err))\n+                          },\n+                      }\n                   } else {\n                       signal!(e, NonConstPath);\n                   }\n               },\n               Def::Variant(enum_def, variant_def) => {\n                   if let Some(const_expr) = lookup_variant_by_id(tcx, enum_def, variant_def) {\n-                      eval_const_expr_partial(tcx, const_expr, ty_hint, None)?\n+                      match eval_const_expr_partial(tcx, const_expr, ty_hint, None) {\n+                          Ok(val) => val,\n+                          Err(err) => {\n+                              debug!(\"bad reference: {:?}, {:?}\", err.description(), err.span);\n+                              signal!(e, ErroneousReferencedConstant(box err))\n+                          },\n+                      }\n                   } else {\n                       signal!(e, UnimplementedConstVal(\"enum variants\"));\n                   }"}, {"sha": "9ab6a437a5ab24418dfcac4a3071c5b59580581a", "filename": "src/librustc_const_eval/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb2ee2ef6398296fbfd70ac5d71d9961955dc48/src%2Flibrustc_const_eval%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb2ee2ef6398296fbfd70ac5d71d9961955dc48/src%2Flibrustc_const_eval%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Flib.rs?ref=0cb2ee2ef6398296fbfd70ac5d71d9961955dc48", "patch": "@@ -29,6 +29,8 @@\n #![feature(slice_patterns)]\n #![feature(iter_arith)]\n #![feature(question_mark)]\n+#![feature(box_patterns)]\n+#![feature(box_syntax)]\n \n #[macro_use] extern crate syntax;\n #[macro_use] extern crate log;"}, {"sha": "2fa7f026a521aa900dd6a5dfddbb2f611304dfbc", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb2ee2ef6398296fbfd70ac5d71d9961955dc48/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb2ee2ef6398296fbfd70ac5d71d9961955dc48/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=0cb2ee2ef6398296fbfd70ac5d71d9961955dc48", "patch": "@@ -29,6 +29,7 @@ use rustc::ty::cast::{CastKind};\n use rustc_const_eval::{ConstEvalErr, lookup_const_fn_by_id, compare_lit_exprs};\n use rustc_const_eval::{eval_const_expr_partial, lookup_const_by_id};\n use rustc_const_eval::ErrKind::{IndexOpFeatureGated, UnimplementedConstVal};\n+use rustc_const_eval::ErrKind::ErroneousReferencedConstant;\n use rustc_const_eval::EvalHint::ExprTypeChecked;\n use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n@@ -114,6 +115,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n             match err.kind {\n                 UnimplementedConstVal(_) => {},\n                 IndexOpFeatureGated => {},\n+                ErroneousReferencedConstant(_) => {},\n                 _ => self.tcx.sess.add_lint(CONST_ERR, expr.id, expr.span,\n                                          format!(\"constant evaluation error: {}. This will \\\n                                                  become a HARD ERROR in the future\","}, {"sha": "674c3d6f9a17a1d35b224a17d4100db78a7d19f1", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0cb2ee2ef6398296fbfd70ac5d71d9961955dc48/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb2ee2ef6398296fbfd70ac5d71d9961955dc48/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=0cb2ee2ef6398296fbfd70ac5d71d9961955dc48", "patch": "@@ -50,8 +50,9 @@\n \n use middle::astconv_util::{prim_ty_to_ty, prohibit_type_params, prohibit_projection};\n use middle::const_val::ConstVal;\n-use rustc_const_eval::eval_const_expr_partial;\n+use rustc_const_eval::{eval_const_expr_partial, ConstEvalErr};\n use rustc_const_eval::EvalHint::UncheckedExprHint;\n+use rustc_const_eval::ErrKind::ErroneousReferencedConstant;\n use hir::def::{self, Def};\n use hir::def_id::DefId;\n use middle::resolve_lifetime as rl;\n@@ -1693,7 +1694,10 @@ pub fn ast_ty_to_ty<'tcx>(this: &AstConv<'tcx>,\n                               \"expected usize value for array length, got {}\", val.description());\n                     this.tcx().types.err\n                 },\n-                Err(ref r) => {\n+                // array length errors happen before the global constant check\n+                // so we need to report the real error\n+                Err(ConstEvalErr { kind: ErroneousReferencedConstant(box r), ..}) |\n+                Err(r) => {\n                     let mut err = struct_span_err!(tcx.sess, r.span, E0250,\n                                                    \"array length constant evaluation error: {}\",\n                                                    r.description());"}, {"sha": "6d95586bed01960fbf3d6e6fa4cd6f8d184d12a3", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cb2ee2ef6398296fbfd70ac5d71d9961955dc48/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb2ee2ef6398296fbfd70ac5d71d9961955dc48/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=0cb2ee2ef6398296fbfd70ac5d71d9961955dc48", "patch": "@@ -68,7 +68,8 @@ use middle::lang_items::SizedTraitLangItem;\n use middle::resolve_lifetime;\n use middle::const_val::ConstVal;\n use rustc_const_eval::EvalHint::UncheckedExprHint;\n-use rustc_const_eval::eval_const_expr_partial;\n+use rustc_const_eval::{eval_const_expr_partial, ConstEvalErr};\n+use rustc_const_eval::ErrKind::ErroneousReferencedConstant;\n use rustc::ty::subst::{Substs, FnSpace, ParamSpace, SelfSpace, TypeSpace, VecPerParamSpace};\n use rustc::ty::{ToPredicate, ImplContainer, ImplOrTraitItemContainer, TraitContainer};\n use rustc::ty::{self, ToPolyTraitRef, Ty, TyCtxt, TypeScheme};\n@@ -1062,6 +1063,9 @@ fn convert_enum_def<'tcx>(tcx: &TyCtxt<'tcx>,\n                 print_err(tcx, e.span, ty_hint, cv);\n                 None\n             },\n+            // enum variant evaluation happens before the global constant check\n+            // so we need to report the real error\n+            Err(ConstEvalErr { kind: ErroneousReferencedConstant(box err), ..}) |\n             Err(err) => {\n                 let mut diag = struct_span_err!(tcx.sess, err.span, E0080,\n                                                 \"constant evaluation error: {}\","}, {"sha": "7de93a213b02212485784db0b469203180e7bef1", "filename": "src/test/compile-fail/const-err-multi.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0cb2ee2ef6398296fbfd70ac5d71d9961955dc48/src%2Ftest%2Fcompile-fail%2Fconst-err-multi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb2ee2ef6398296fbfd70ac5d71d9961955dc48/src%2Ftest%2Fcompile-fail%2Fconst-err-multi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err-multi.rs?ref=0cb2ee2ef6398296fbfd70ac5d71d9961955dc48", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(const_err)]\n+\n+pub const A: i8 = -std::i8::MIN; //~ ERROR attempted to negate with overflow\n+pub const B: i8 = A;\n+pub const C: u8 = A as u8;\n+pub const D: i8 = 50 - A;\n+\n+fn main() {\n+}"}]}