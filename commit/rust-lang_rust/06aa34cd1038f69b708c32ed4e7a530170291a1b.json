{"sha": "06aa34cd1038f69b708c32ed4e7a530170291a1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2YWEzNGNkMTAzOGY2OWI3MDhjMzJlZDRlN2E1MzAxNzAyOTFhMWI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-02-04T10:27:34Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-02-04T10:27:34Z"}, "message": "More architecture.md", "tree": {"sha": "9053a63f757bb827d35df83839d72b4b89b57432", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9053a63f757bb827d35df83839d72b4b89b57432"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06aa34cd1038f69b708c32ed4e7a530170291a1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06aa34cd1038f69b708c32ed4e7a530170291a1b", "html_url": "https://github.com/rust-lang/rust/commit/06aa34cd1038f69b708c32ed4e7a530170291a1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06aa34cd1038f69b708c32ed4e7a530170291a1b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74a223faa33156be1b8b1a6880f9b63463027946", "url": "https://api.github.com/repos/rust-lang/rust/commits/74a223faa33156be1b8b1a6880f9b63463027946", "html_url": "https://github.com/rust-lang/rust/commit/74a223faa33156be1b8b1a6880f9b63463027946"}], "stats": {"total": 44, "additions": 42, "deletions": 2}, "files": [{"sha": "56ebaa3df0eb516f448aba8633655ac094cd4795", "filename": "docs/dev/architecture.md", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/06aa34cd1038f69b708c32ed4e7a530170291a1b/docs%2Fdev%2Farchitecture.md", "raw_url": "https://github.com/rust-lang/rust/raw/06aa34cd1038f69b708c32ed4e7a530170291a1b/docs%2Fdev%2Farchitecture.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Farchitecture.md?ref=06aa34cd1038f69b708c32ed4e7a530170291a1b", "patch": "@@ -373,8 +373,48 @@ There's no additional checks in CI, formatting and tidy tests are run with `carg\n \n **Architecture Invariant:** tests do not depend on any kind of external resources, they are perfectly reproducible.\n \n+### Error Handling\n+\n+**Architecture Invariant:** core parts of rust-analyzer (`ide`/`hir`) don't interact with the outside world and thus can't fail.\n+Only parts touching LSP are allowed to do IO.\n+\n+Internals of rust-analyzer need to deal with broken code, but this is not an error condition.\n+rust-analyzer is robust: various analysis compute `(T, Vec<Error>)` rather than `Result<T, Error>`.\n+\n+rust-analyzer is a complex long-running process.\n+It will always have bugs and panics.\n+But a panic in an isolated feature should not bring down the whole process.\n+Each LSP-request is protected by a `catch_unwind`.\n+We use `always` and `never` macros instead of `assert` to gracefully recover from impossible conditions.\n+\n ### Observability\n \n-I've run out of steam here :)\n rust-analyzer is a long-running process, so its important to understand what's going on inside.\n-We have hierarchical profiler (`RA_PROFILER=1`) and object counting (`RA_COUNT=1`).\n+We have several instruments for that.\n+\n+The event loop that runs rust-analyzer is very explicit.\n+Rather than spawning futures or scheduling callbacks (open), the event loop accepts an `enum` of possible events (closed).\n+It's easy to see all the things that trigger rust-analyzer processing, together with their performance\n+\n+rust-analyzer includes a simple hierarchical profiler (`hprof`).\n+It is enabled with `RA_PROFILE='*>50` env var (log all (`*`) actions which take more than `50` ms) and produces output like:\n+\n+```\n+85ms - handle_completion\n+    68ms - import_on_the_fly\n+        67ms - import_assets::search_for_relative_paths\n+             0ms - crate_def_map:wait (804 calls)\n+             0ms - find_path (16 calls)\n+             2ms - find_similar_imports (1 calls)\n+             0ms - generic_params_query (334 calls)\n+            59ms - trait_solve_query (186 calls)\n+         0ms - Semantics::analyze_impl (1 calls)\n+         1ms - render_resolution (8 calls)\n+     0ms - Semantics::analyze_impl (5 calls)\n+```\n+\n+This is cheap enough to enable in production.\n+\n+\n+Similarly, we save live object counting (`RA_COUNT=1`).\n+It is not cheap enough to enable in prod, and this is a bug which should be fixed."}]}