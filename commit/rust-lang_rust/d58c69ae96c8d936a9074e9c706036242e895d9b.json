{"sha": "d58c69ae96c8d936a9074e9c706036242e895d9b", "node_id": "C_kwDOAAsO6NoAKGQ1OGM2OWFlOTZjOGQ5MzZhOTA3NGU5YzcwNjAzNjI0MmU4OTVkOWI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-11T02:32:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-11T02:32:02Z"}, "message": "Rollup merge of #93293 - nvzqz:nonzero-min-max, r=joshtriplett\n\nImplement `MIN`/`MAX` constants for non-zero integers\n\nThis adds the associated [`MIN`](https://doc.rust-lang.org/stable/std/primitive.usize.html#associatedconstant.MIN)/[`MAX`](https://doc.rust-lang.org/stable/std/primitive.usize.html#associatedconstant.MAX) constants to `NonZero{U,I}{8,16,32,64,128,size}`, requested in #89065.\n\nThis reimplements #89077 due that PR being stagnant for 4 months. I am fine with closing this in favor of that one if the author revisits it. If so, I'd like to see that PR have the docs link to the `$Int`'s constants.", "tree": {"sha": "038bbcaaed78b20f97a3c6dc921eb52935581458", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/038bbcaaed78b20f97a3c6dc921eb52935581458"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d58c69ae96c8d936a9074e9c706036242e895d9b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiKrSjCRBK7hj4Ov3rIwAAohcIALAbWMUUbxsKDQYzGjenR1uf\ntuOboh/OedQ6x1nzmZ01EfOX6d463t6klRqAiCjZxMJBIUVZJDdYppnyWgNxFDFR\nSMqJBENo7OacDKdkbXhbwr3HFpNbzYDiSlcWIJaWRCI2872aBacabaz9bsj4d12e\nLIVkqO323TMbiSI6lARmSs2zV+L0XbX2fsfMz1X/cQX4SwfylJ+DkfMVYgzgW2Na\nRfpOtuNX7QL/YBcTY3ty0ArgOZ25YDa4KcEfOcIabUOiJgUYGIWKKKveHd18z0/F\nCPp75LvyJJt5EUb7hYqXAMHx6ZSDf+TYF/goY1hU6x5x1Lkn47qPTm8cNR+iSks=\n=23VT\n-----END PGP SIGNATURE-----\n", "payload": "tree 038bbcaaed78b20f97a3c6dc921eb52935581458\nparent 352e621368c31d7b4a6362e081586cdb931ba020\nparent ecb792705077c6e6c116146cc797727a2cba4c47\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1646965922 +0100\ncommitter GitHub <noreply@github.com> 1646965922 +0100\n\nRollup merge of #93293 - nvzqz:nonzero-min-max, r=joshtriplett\n\nImplement `MIN`/`MAX` constants for non-zero integers\n\nThis adds the associated [`MIN`](https://doc.rust-lang.org/stable/std/primitive.usize.html#associatedconstant.MIN)/[`MAX`](https://doc.rust-lang.org/stable/std/primitive.usize.html#associatedconstant.MAX) constants to `NonZero{U,I}{8,16,32,64,128,size}`, requested in #89065.\n\nThis reimplements #89077 due that PR being stagnant for 4 months. I am fine with closing this in favor of that one if the author revisits it. If so, I'd like to see that PR have the docs link to the `$Int`'s constants.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d58c69ae96c8d936a9074e9c706036242e895d9b", "html_url": "https://github.com/rust-lang/rust/commit/d58c69ae96c8d936a9074e9c706036242e895d9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d58c69ae96c8d936a9074e9c706036242e895d9b/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "352e621368c31d7b4a6362e081586cdb931ba020", "url": "https://api.github.com/repos/rust-lang/rust/commits/352e621368c31d7b4a6362e081586cdb931ba020", "html_url": "https://github.com/rust-lang/rust/commit/352e621368c31d7b4a6362e081586cdb931ba020"}, {"sha": "ecb792705077c6e6c116146cc797727a2cba4c47", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecb792705077c6e6c116146cc797727a2cba4c47", "html_url": "https://github.com/rust-lang/rust/commit/ecb792705077c6e6c116146cc797727a2cba4c47"}], "stats": {"total": 101, "additions": 101, "deletions": 0}, "files": [{"sha": "5bdd78aa2dea4d9808041546c80d7786750b6eb8", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/d58c69ae96c8d936a9074e9c706036242e895d9b/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d58c69ae96c8d936a9074e9c706036242e895d9b/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=d58c69ae96c8d936a9074e9c706036242e895d9b", "patch": "@@ -989,3 +989,104 @@ macro_rules! nonzero_unsigned_is_power_of_two {\n }\n \n nonzero_unsigned_is_power_of_two! { NonZeroU8 NonZeroU16 NonZeroU32 NonZeroU64 NonZeroU128 NonZeroUsize }\n+\n+macro_rules! nonzero_min_max_unsigned {\n+    ( $( $Ty: ident($Int: ident); )+ ) => {\n+        $(\n+            impl $Ty {\n+                /// The smallest value that can be represented by this non-zero\n+                /// integer type, 1.\n+                ///\n+                /// # Examples\n+                ///\n+                /// ```\n+                /// #![feature(nonzero_min_max)]\n+                #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n+                ///\n+                #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::MIN.get(), 1\", stringify!($Int), \");\")]\n+                /// ```\n+                #[unstable(feature = \"nonzero_min_max\", issue = \"89065\")]\n+                pub const MIN: Self = Self::new(1).unwrap();\n+\n+                /// The largest value that can be represented by this non-zero\n+                /// integer type,\n+                #[doc = concat!(\"equal to [`\", stringify!($Int), \"::MAX`].\")]\n+                ///\n+                /// # Examples\n+                ///\n+                /// ```\n+                /// #![feature(nonzero_min_max)]\n+                #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n+                ///\n+                #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::MAX.get(), \", stringify!($Int), \"::MAX);\")]\n+                /// ```\n+                #[unstable(feature = \"nonzero_min_max\", issue = \"89065\")]\n+                pub const MAX: Self = Self::new(<$Int>::MAX).unwrap();\n+            }\n+        )+\n+    }\n+}\n+\n+macro_rules! nonzero_min_max_signed {\n+    ( $( $Ty: ident($Int: ident); )+ ) => {\n+        $(\n+            impl $Ty {\n+                /// The smallest value that can be represented by this non-zero\n+                /// integer type,\n+                #[doc = concat!(\"equal to [`\", stringify!($Int), \"::MIN`].\")]\n+                ///\n+                /// Note: While most integer types are defined for every whole\n+                /// number between `MIN` and `MAX`, signed non-zero integers are\n+                /// a special case. They have a \"gap\" at 0.\n+                ///\n+                /// # Examples\n+                ///\n+                /// ```\n+                /// #![feature(nonzero_min_max)]\n+                #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n+                ///\n+                #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::MIN.get(), \", stringify!($Int), \"::MIN);\")]\n+                /// ```\n+                #[unstable(feature = \"nonzero_min_max\", issue = \"89065\")]\n+                pub const MIN: Self = Self::new(<$Int>::MIN).unwrap();\n+\n+                /// The largest value that can be represented by this non-zero\n+                /// integer type,\n+                #[doc = concat!(\"equal to [`\", stringify!($Int), \"::MAX`].\")]\n+                ///\n+                /// Note: While most integer types are defined for every whole\n+                /// number between `MIN` and `MAX`, signed non-zero integers are\n+                /// a special case. They have a \"gap\" at 0.\n+                ///\n+                /// # Examples\n+                ///\n+                /// ```\n+                /// #![feature(nonzero_min_max)]\n+                #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n+                ///\n+                #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::MAX.get(), \", stringify!($Int), \"::MAX);\")]\n+                /// ```\n+                #[unstable(feature = \"nonzero_min_max\", issue = \"89065\")]\n+                pub const MAX: Self = Self::new(<$Int>::MAX).unwrap();\n+            }\n+        )+\n+    }\n+}\n+\n+nonzero_min_max_unsigned! {\n+    NonZeroU8(u8);\n+    NonZeroU16(u16);\n+    NonZeroU32(u32);\n+    NonZeroU64(u64);\n+    NonZeroU128(u128);\n+    NonZeroUsize(usize);\n+}\n+\n+nonzero_min_max_signed! {\n+    NonZeroI8(i8);\n+    NonZeroI16(i16);\n+    NonZeroI32(i32);\n+    NonZeroI64(i64);\n+    NonZeroI128(i128);\n+    NonZeroIsize(isize);\n+}"}]}