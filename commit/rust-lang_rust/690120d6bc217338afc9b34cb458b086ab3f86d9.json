{"sha": "690120d6bc217338afc9b34cb458b086ab3f86d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5MDEyMGQ2YmMyMTczMzhhZmM5YjM0Y2I0NThiMDg2YWIzZjg2ZDk=", "commit": {"author": {"name": "gareth", "email": "gareth@gareth-N56VM.(none)", "date": "2013-04-22T20:58:19Z"}, "committer": {"name": "gareth", "email": "gareth@gareth-N56VM.(none)", "date": "2013-04-23T20:23:16Z"}, "message": "Remove os::waitpid because:\n - The return value meant different things on different\n   platforms (on windows, it was the exit code, on unix it was\n   the status information returned from waitpid).\n - It was undocumented.\n - There also exists run::waitpid, which does much the same\n   thing but has a more consistent return value and also some\n   documentation.", "tree": {"sha": "ce3f56e60b450d9cc5ba77bff72f2a11101eba14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce3f56e60b450d9cc5ba77bff72f2a11101eba14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/690120d6bc217338afc9b34cb458b086ab3f86d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/690120d6bc217338afc9b34cb458b086ab3f86d9", "html_url": "https://github.com/rust-lang/rust/commit/690120d6bc217338afc9b34cb458b086ab3f86d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/690120d6bc217338afc9b34cb458b086ab3f86d9/comments", "author": null, "committer": null, "parents": [{"sha": "91aeecf7e38e01a9e323683c39649e201a9f726c", "url": "https://api.github.com/repos/rust-lang/rust/commits/91aeecf7e38e01a9e323683c39649e201a9f726c", "html_url": "https://github.com/rust-lang/rust/commit/91aeecf7e38e01a9e323683c39649e201a9f726c"}], "stats": {"total": 49, "additions": 19, "deletions": 30}, "files": [{"sha": "4c660507f15a01082d0364479d058353483e0c75", "filename": "src/libcore/os.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/690120d6bc217338afc9b34cb458b086ab3f86d9/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/690120d6bc217338afc9b34cb458b086ab3f86d9/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=690120d6bc217338afc9b34cb458b086ab3f86d9", "patch": "@@ -60,7 +60,6 @@ pub mod rustrt {\n         unsafe fn rust_get_argv() -> **c_char;\n         unsafe fn rust_path_is_dir(path: *libc::c_char) -> c_int;\n         unsafe fn rust_path_exists(path: *libc::c_char) -> c_int;\n-        unsafe fn rust_process_wait(pid: c_int) -> c_int;\n         unsafe fn rust_set_exit_status(code: libc::intptr_t);\n     }\n }\n@@ -352,31 +351,6 @@ pub fn fsync_fd(fd: c_int, _l: io::fsync::Level) -> c_int {\n     }\n }\n \n-\n-#[cfg(windows)]\n-pub fn waitpid(pid: pid_t) -> c_int {\n-    unsafe {\n-        let status = rustrt::rust_process_wait(pid);\n-        if status < 0 {\n-            fail!(fmt!(\"failure in rust_process_wait: %s\", last_os_error()));\n-        }\n-        return status;\n-    }\n-}\n-\n-#[cfg(unix)]\n-pub fn waitpid(pid: pid_t) -> c_int {\n-    unsafe {\n-        use libc::funcs::posix01::wait::*;\n-        let mut status = 0 as c_int;\n-\n-        assert!((waitpid(pid, &mut status, 0 as c_int) !=\n-                     (-1 as c_int)));\n-        return status;\n-    }\n-}\n-\n-\n pub struct Pipe { mut in: c_int, mut out: c_int }\n \n #[cfg(unix)]"}, {"sha": "701ab1c59df5c4a598b8e1a29d69ea17fb56836d", "filename": "src/libcore/run.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/690120d6bc217338afc9b34cb458b086ab3f86d9/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/690120d6bc217338afc9b34cb458b086ab3f86d9/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=690120d6bc217338afc9b34cb458b086ab3f86d9", "patch": "@@ -36,6 +36,7 @@ pub mod rustrt {\n                                    in_fd: c_int,\n                                    out_fd: c_int,\n                                    err_fd: c_int) -> run::RunProgramResult;\n+        unsafe fn rust_process_wait(pid: c_int) -> c_int;\n     }\n }\n \n@@ -503,17 +504,27 @@ pub fn readclose(fd: c_int) -> ~str {\n     }\n }\n \n-/// Waits for a process to exit and returns the exit code\n+/**\n+ * Waits for a process to exit and returns the exit code, failing\n+ * if there is no process with the specified id.\n+ */\n pub fn waitpid(pid: pid_t) -> int {\n     return waitpid_os(pid);\n \n     #[cfg(windows)]\n     fn waitpid_os(pid: pid_t) -> int {\n-        os::waitpid(pid) as int\n+        let status = unsafe { rustrt::rust_process_wait(pid) };\n+        if status < 0 {\n+            fail!(fmt!(\"failure in rust_process_wait: %s\", os::last_os_error()));\n+        }\n+        return status as int;\n     }\n \n     #[cfg(unix)]\n     fn waitpid_os(pid: pid_t) -> int {\n+\n+        use libc::funcs::posix01::wait::*;\n+\n         #[cfg(target_os = \"linux\")]\n         #[cfg(target_os = \"android\")]\n         fn WIFEXITED(status: i32) -> bool {\n@@ -538,7 +549,11 @@ pub fn waitpid(pid: pid_t) -> int {\n             status >> 8i32\n         }\n \n-        let status = os::waitpid(pid);\n+        let mut status = 0 as c_int;\n+        if unsafe { waitpid(pid, &mut status, 0) } == -1 {\n+            fail!(fmt!(\"failure in waitpid: %s\", os::last_os_error()));\n+        }\n+\n         return if WIFEXITED(status) {\n             WEXITSTATUS(status) as int\n         } else {\n@@ -584,7 +599,7 @@ mod tests {\n         writeclose(pipe_in.out, copy expected);\n         let actual = readclose(pipe_out.in);\n         readclose(pipe_err.in);\n-        os::waitpid(pid);\n+        run::waitpid(pid);\n \n         debug!(copy expected);\n         debug!(copy actual);"}]}