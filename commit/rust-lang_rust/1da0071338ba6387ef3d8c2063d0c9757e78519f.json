{"sha": "1da0071338ba6387ef3d8c2063d0c9757e78519f", "node_id": "C_kwDOAAsO6NoAKDFkYTAwNzEzMzhiYTYzODdlZjNkOGMyMDYzZDBjOTc1N2U3ODUxOWY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-03T13:44:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-03T13:44:15Z"}, "message": "Rollup merge of #90102 - nbdd0121:box3, r=jonas-schievink\n\nRemove `NullOp::Box`\n\nFollow up of #89030 and MCP rust-lang/compiler-team#460.\n\n~1 month later nothing seems to be broken, apart from a small regression that #89332 (1aac85bb716c09304b313d69d30d74fe7e8e1a8e) shows could be regained by remvoing the diverging path, so it shall be safe to continue and remove `NullOp::Box` completely.\n\nr? `@jonas-schievink`\n`@rustbot` label T-compiler", "tree": {"sha": "54164e49bfc5985a1f256b10841ee122ae2e05e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54164e49bfc5985a1f256b10841ee122ae2e05e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1da0071338ba6387ef3d8c2063d0c9757e78519f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1da0071338ba6387ef3d8c2063d0c9757e78519f", "html_url": "https://github.com/rust-lang/rust/commit/1da0071338ba6387ef3d8c2063d0c9757e78519f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1da0071338ba6387ef3d8c2063d0c9757e78519f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5a14258e5c2ef32f05621595740595676d54177", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5a14258e5c2ef32f05621595740595676d54177", "html_url": "https://github.com/rust-lang/rust/commit/a5a14258e5c2ef32f05621595740595676d54177"}, {"sha": "0ef11587b0130607627414f5b92bf657d01d7b63", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ef11587b0130607627414f5b92bf657d01d7b63", "html_url": "https://github.com/rust-lang/rust/commit/0ef11587b0130607627414f5b92bf657d01d7b63"}], "stats": {"total": 25, "additions": 0, "deletions": 25}, "files": [{"sha": "b16f5af66f249b5b80588ad452eca32ddd282cbc", "filename": "src/base.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1da0071338ba6387ef3d8c2063d0c9757e78519f/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1da0071338ba6387ef3d8c2063d0c9757e78519f/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=1da0071338ba6387ef3d8c2063d0c9757e78519f", "patch": "@@ -715,30 +715,6 @@ fn codegen_stmt<'tcx>(\n                     let operand = operand.load_scalar(fx);\n                     lval.write_cvalue(fx, CValue::by_val(operand, box_layout));\n                 }\n-                Rvalue::NullaryOp(NullOp::Box, content_ty) => {\n-                    let usize_type = fx.clif_type(fx.tcx.types.usize).unwrap();\n-                    let content_ty = fx.monomorphize(content_ty);\n-                    let layout = fx.layout_of(content_ty);\n-                    let llsize = fx.bcx.ins().iconst(usize_type, layout.size.bytes() as i64);\n-                    let llalign = fx.bcx.ins().iconst(usize_type, layout.align.abi.bytes() as i64);\n-                    let box_layout = fx.layout_of(fx.tcx.mk_box(content_ty));\n-\n-                    // Allocate space:\n-                    let def_id =\n-                        match fx.tcx.lang_items().require(rustc_hir::LangItem::ExchangeMalloc) {\n-                            Ok(id) => id,\n-                            Err(s) => {\n-                                fx.tcx\n-                                    .sess\n-                                    .fatal(&format!(\"allocation of `{}` {}\", box_layout.ty, s));\n-                            }\n-                        };\n-                    let instance = ty::Instance::mono(fx.tcx, def_id).polymorphize(fx.tcx);\n-                    let func_ref = fx.get_function_ref(instance);\n-                    let call = fx.bcx.ins().call(func_ref, &[llsize, llalign]);\n-                    let ptr = fx.bcx.inst_results(call)[0];\n-                    lval.write_cvalue(fx, CValue::by_val(ptr, box_layout));\n-                }\n                 Rvalue::NullaryOp(null_op, ty) => {\n                     assert!(\n                         lval.layout()\n@@ -749,7 +725,6 @@ fn codegen_stmt<'tcx>(\n                     let val = match null_op {\n                         NullOp::SizeOf => layout.size.bytes(),\n                         NullOp::AlignOf => layout.align.abi.bytes(),\n-                        NullOp::Box => unreachable!(),\n                     };\n                     let val = CValue::const_val(fx, fx.layout_of(fx.tcx.types.usize), val.into());\n                     lval.write_cvalue(fx, val);"}]}