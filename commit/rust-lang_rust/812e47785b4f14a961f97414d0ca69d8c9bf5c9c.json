{"sha": "812e47785b4f14a961f97414d0ca69d8c9bf5c9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMmU0Nzc4NWI0ZjE0YTk2MWY5NzQxNGQwY2E2OWQ4YzliZjVjOWM=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-07T20:05:44Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-07T20:05:44Z"}, "message": "Merge #451\n\n451: More type inference for more binary expressions r=flodiebold a=marcusklaas\n\nImplements more of https://github.com/rust-analyzer/rust-analyzer/issues/390. Just works for primitive (numeric) types for now.\r\n\r\nFound an issue where `let x: Ty = expr;` doesn't actually propagate the type information unless `Ty` is primitive and numeric. I'll open an issue for this.\n\nCo-authored-by: Marcus Klaas de Vries <mail@marcusklaas.nl>", "tree": {"sha": "f4e1936de76bee89502613ce038f4ecaef19ec4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4e1936de76bee89502613ce038f4ecaef19ec4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/812e47785b4f14a961f97414d0ca69d8c9bf5c9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/812e47785b4f14a961f97414d0ca69d8c9bf5c9c", "html_url": "https://github.com/rust-lang/rust/commit/812e47785b4f14a961f97414d0ca69d8c9bf5c9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/812e47785b4f14a961f97414d0ca69d8c9bf5c9c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "e2592cf09087ae0a6cad5b588cbf1ab1161440e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2592cf09087ae0a6cad5b588cbf1ab1161440e9", "html_url": "https://github.com/rust-lang/rust/commit/e2592cf09087ae0a6cad5b588cbf1ab1161440e9"}, {"sha": "5d15dd70b037b3d1623ebd83d8ef0f66ad6950af", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d15dd70b037b3d1623ebd83d8ef0f66ad6950af", "html_url": "https://github.com/rust-lang/rust/commit/5d15dd70b037b3d1623ebd83d8ef0f66ad6950af"}], "stats": {"total": 250, "additions": 200, "deletions": 50}, "files": [{"sha": "7827e82c4da2f2a53224e629942173e596e07761", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 74, "deletions": 13, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/812e47785b4f14a961f97414d0ca69d8c9bf5c9c/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/812e47785b4f14a961f97414d0ca69d8c9bf5c9c/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=812e47785b4f14a961f97414d0ca69d8c9bf5c9c", "patch": "@@ -527,17 +527,78 @@ struct InferenceContext<'a, D: HirDatabase> {\n     return_ty: Ty,\n }\n \n-// helper function that determines whether a binary operator\n-// always returns a boolean\n-fn is_boolean_operator(op: BinaryOp) -> bool {\n+fn binary_op_return_ty(op: BinaryOp, rhs_ty: Ty) -> Ty {\n     match op {\n         BinaryOp::BooleanOr\n         | BinaryOp::BooleanAnd\n         | BinaryOp::EqualityTest\n         | BinaryOp::LesserEqualTest\n         | BinaryOp::GreaterEqualTest\n         | BinaryOp::LesserTest\n-        | BinaryOp::GreaterTest => true,\n+        | BinaryOp::GreaterTest => Ty::Bool,\n+        BinaryOp::Assignment\n+        | BinaryOp::AddAssign\n+        | BinaryOp::SubAssign\n+        | BinaryOp::DivAssign\n+        | BinaryOp::MulAssign\n+        | BinaryOp::RemAssign\n+        | BinaryOp::ShrAssign\n+        | BinaryOp::ShlAssign\n+        | BinaryOp::BitAndAssign\n+        | BinaryOp::BitOrAssign\n+        | BinaryOp::BitXorAssign => Ty::unit(),\n+        BinaryOp::Addition\n+        | BinaryOp::Subtraction\n+        | BinaryOp::Multiplication\n+        | BinaryOp::Division\n+        | BinaryOp::Remainder\n+        | BinaryOp::LeftShift\n+        | BinaryOp::RightShift\n+        | BinaryOp::BitwiseAnd\n+        | BinaryOp::BitwiseOr\n+        | BinaryOp::BitwiseXor => match rhs_ty {\n+            Ty::Uint(..) | Ty::Int(..) | Ty::Float(..) => rhs_ty,\n+            _ => Ty::Unknown,\n+        },\n+        BinaryOp::RangeRightOpen | BinaryOp::RangeRightClosed => Ty::Unknown,\n+    }\n+}\n+\n+fn binary_op_rhs_expectation(op: BinaryOp, lhs_ty: Ty) -> Ty {\n+    match op {\n+        BinaryOp::BooleanAnd | BinaryOp::BooleanOr => Ty::Bool,\n+        BinaryOp::Assignment | BinaryOp::EqualityTest => match lhs_ty {\n+            Ty::Uint(..) | Ty::Int(..) | Ty::Float(..) | Ty::Str | Ty::Char | Ty::Bool => lhs_ty,\n+            _ => Ty::Unknown,\n+        },\n+        BinaryOp::LesserEqualTest\n+        | BinaryOp::GreaterEqualTest\n+        | BinaryOp::LesserTest\n+        | BinaryOp::GreaterTest\n+        | BinaryOp::AddAssign\n+        | BinaryOp::SubAssign\n+        | BinaryOp::DivAssign\n+        | BinaryOp::MulAssign\n+        | BinaryOp::RemAssign\n+        | BinaryOp::ShrAssign\n+        | BinaryOp::ShlAssign\n+        | BinaryOp::BitAndAssign\n+        | BinaryOp::BitOrAssign\n+        | BinaryOp::BitXorAssign\n+        | BinaryOp::Addition\n+        | BinaryOp::Subtraction\n+        | BinaryOp::Multiplication\n+        | BinaryOp::Division\n+        | BinaryOp::Remainder\n+        | BinaryOp::LeftShift\n+        | BinaryOp::RightShift\n+        | BinaryOp::BitwiseAnd\n+        | BinaryOp::BitwiseOr\n+        | BinaryOp::BitwiseXor => match lhs_ty {\n+            Ty::Uint(..) | Ty::Int(..) | Ty::Float(..) => lhs_ty,\n+            _ => Ty::Unknown,\n+        },\n+        _ => Ty::Unknown,\n     }\n }\n \n@@ -889,20 +950,20 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             }\n             Expr::BinaryOp { lhs, rhs, op } => match op {\n                 Some(op) => {\n-                    let subtype_expectation = match op {\n+                    let lhs_expectation = match op {\n                         BinaryOp::BooleanAnd | BinaryOp::BooleanOr => {\n                             Expectation::has_type(Ty::Bool)\n                         }\n                         _ => Expectation::none(),\n                     };\n-                    let _lhs_ty = self.infer_expr(*lhs, &subtype_expectation)?;\n-                    let _rhs_ty = self.infer_expr(*rhs, &subtype_expectation)?;\n-\n-                    if is_boolean_operator(*op) {\n-                        Ty::Bool\n-                    } else {\n-                        Ty::Unknown\n-                    }\n+                    let lhs_ty = self.infer_expr(*lhs, &lhs_expectation)?;\n+                    // TODO: find implementation of trait corresponding to operation\n+                    // symbol and resolve associated `Output` type\n+                    let rhs_expectation = binary_op_rhs_expectation(*op, lhs_ty);\n+                    let rhs_ty = self.infer_expr(*rhs, &Expectation::has_type(rhs_expectation))?;\n+\n+                    // TODO: similar as above, return ty is often associated trait type\n+                    binary_op_return_ty(*op, rhs_ty)\n                 }\n                 _ => Ty::Unknown,\n             },"}, {"sha": "2749d740c401e25f8017ad1b4ba6099bebcb4773", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/812e47785b4f14a961f97414d0ca69d8c9bf5c9c/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/812e47785b4f14a961f97414d0ca69d8c9bf5c9c/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=812e47785b4f14a961f97414d0ca69d8c9bf5c9c", "patch": "@@ -157,7 +157,7 @@ impl S {\n }\n \n #[test]\n-fn infer_boolean_op() {\n+fn infer_binary_op() {\n     check_inference(\n         r#\"\n fn f(x: bool) -> i32 {\n@@ -168,15 +168,18 @@ fn test() {\n     let x = a && b;\n     let y = true || false;\n     let z = x == y;\n-    let h = CONST_1 <= CONST_2;\n+    let minus_forty: isize = -40isize;\n+    let h = minus_forty <= CONST_2;\n     let c = f(z || y) + 5;\n     let d = b;\n-    let e = 3i32 && \"hello world\";\n+    let g = minus_forty ^= i;\n+    let ten: usize = 10;\n+    let ten_is_eleven = ten == some_num;\n \n-    10 < 3\n+    ten < 3\n }\n \"#,\n-        \"boolean_op.txt\",\n+        \"binary_op.txt\",\n     );\n }\n "}, {"sha": "59c07ff4346d5b5031115b4b2f3b167de7876fdb", "filename": "crates/ra_hir/src/ty/tests/data/binary_op.txt", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/812e47785b4f14a961f97414d0ca69d8c9bf5c9c/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fbinary_op.txt", "raw_url": "https://github.com/rust-lang/rust/raw/812e47785b4f14a961f97414d0ca69d8c9bf5c9c/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fbinary_op.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fbinary_op.txt?ref=812e47785b4f14a961f97414d0ca69d8c9bf5c9c", "patch": "@@ -0,0 +1,46 @@\n+[6; 7) 'x': [unknown]\n+[22; 34) '{     0i32 }': i32\n+[28; 32) '0i32': i32\n+[46; 342) '{     ... < 3 }': bool\n+[56; 57) 'x': bool\n+[60; 61) 'a': bool\n+[60; 66) 'a && b': bool\n+[65; 66) 'b': bool\n+[76; 77) 'y': bool\n+[80; 84) 'true': bool\n+[80; 93) 'true || false': bool\n+[88; 93) 'false': bool\n+[103; 104) 'z': bool\n+[107; 108) 'x': bool\n+[107; 113) 'x == y': bool\n+[112; 113) 'y': bool\n+[123; 134) 'minus_forty': isize\n+[144; 152) '-40isize': isize\n+[145; 152) '40isize': [unknown]\n+[162; 163) 'h': bool\n+[166; 177) 'minus_forty': isize\n+[166; 188) 'minus_...ONST_2': bool\n+[181; 188) 'CONST_2': isize\n+[198; 199) 'c': i32\n+[202; 203) 'f': fn([unknown],) -> i32\n+[202; 211) 'f(z || y)': i32\n+[202; 215) 'f(z || y) + 5': i32\n+[204; 205) 'z': bool\n+[204; 210) 'z || y': bool\n+[209; 210) 'y': bool\n+[214; 215) '5': i32\n+[225; 226) 'd': [unknown]\n+[229; 230) 'b': [unknown]\n+[240; 241) 'g': ()\n+[244; 255) 'minus_forty': isize\n+[244; 260) 'minus_...y ^= i': ()\n+[259; 260) 'i': isize\n+[270; 273) 'ten': usize\n+[283; 285) '10': usize\n+[295; 308) 'ten_is_eleven': bool\n+[311; 314) 'ten': usize\n+[311; 326) 'ten == some_num': bool\n+[318; 326) 'some_num': usize\n+[333; 336) 'ten': usize\n+[333; 340) 'ten < 3': bool\n+[339; 340) '3': usize"}, {"sha": "cce8d68fb4b4fa44673066ccb03b138f9833f272", "filename": "crates/ra_hir/src/ty/tests/data/boolean_op.txt", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e2592cf09087ae0a6cad5b588cbf1ab1161440e9/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fboolean_op.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e2592cf09087ae0a6cad5b588cbf1ab1161440e9/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fboolean_op.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fboolean_op.txt?ref=e2592cf09087ae0a6cad5b588cbf1ab1161440e9", "patch": "@@ -1,31 +0,0 @@\n-[6; 7) 'x': [unknown]\n-[22; 34) '{     0i32 }': i32\n-[28; 32) '0i32': i32\n-[46; 237) '{     ... < 3 }': bool\n-[56; 57) 'x': bool\n-[60; 61) 'a': bool\n-[60; 66) 'a && b': bool\n-[65; 66) 'b': bool\n-[76; 77) 'y': bool\n-[80; 84) 'true': bool\n-[80; 93) 'true || false': bool\n-[88; 93) 'false': bool\n-[103; 104) 'z': bool\n-[107; 108) 'x': bool\n-[107; 113) 'x == y': bool\n-[112; 113) 'y': bool\n-[123; 124) 'h': bool\n-[127; 134) 'CONST_1': [unknown]\n-[127; 145) 'CONST_...ONST_2': bool\n-[138; 145) 'CONST_2': [unknown]\n-[155; 156) 'c': [unknown]\n-[159; 172) 'f(z || y) + 5': [unknown]\n-[182; 183) 'd': [unknown]\n-[186; 187) 'b': [unknown]\n-[197; 198) 'e': bool\n-[201; 205) '3i32': bool\n-[201; 222) '3i32 &...world\"': bool\n-[209; 222) '\"hello world\"': bool\n-[229; 231) '10': [unknown]\n-[229; 235) '10 < 3': bool\n-[234; 235) '3': [unknown]"}, {"sha": "9ab59738f9b12fb14f6fd565b191a45a5ef82e59", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 69, "deletions": 1, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/812e47785b4f14a961f97414d0ca69d8c9bf5c9c/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/812e47785b4f14a961f97414d0ca69d8c9bf5c9c/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=812e47785b4f14a961f97414d0ca69d8c9bf5c9c", "patch": "@@ -504,7 +504,52 @@ pub enum BinOp {\n     LesserTest,\n     /// The `>` operator for comparison\n     GreaterTest,\n-    // TODO: lots of others\n+    /// The `+` operator for addition\n+    Addition,\n+    /// The `*` operator for multiplication\n+    Multiplication,\n+    /// The `-` operator for subtraction\n+    Subtraction,\n+    /// The `/` operator for division\n+    Division,\n+    /// The `%` operator for remainder after division\n+    Remainder,\n+    /// The `<<` operator for left shift\n+    LeftShift,\n+    /// The `>>` operator for right shift\n+    RightShift,\n+    /// The `^` operator for bitwise XOR\n+    BitwiseXor,\n+    /// The `|` operator for bitwise OR\n+    BitwiseOr,\n+    /// The `&` operator for bitwise AND\n+    BitwiseAnd,\n+    /// The `..` operator for right-open ranges\n+    RangeRightOpen,\n+    /// The `..=` operator for right-closed ranges\n+    RangeRightClosed,\n+    /// The `=` operator for assignment\n+    Assignment,\n+    /// The `+=` operator for assignment after additon\n+    AddAssign,\n+    /// The `/=` operator for assignment after division\n+    DivAssign,\n+    /// The `*=` operator for assignment after multiplication\n+    MulAssign,\n+    /// The `%=` operator for assignment after remainders\n+    RemAssign,\n+    /// The `>>=` operator for assignment after shifting right\n+    ShrAssign,\n+    /// The `<<=` operator for assignment after shifting left\n+    ShlAssign,\n+    /// The `-=` operator for assignment after subtraction\n+    SubAssign,\n+    /// The `|=` operator for assignment after bitwise OR\n+    BitOrAssign,\n+    /// The `&=` operator for assignment after bitwise AND\n+    BitAndAssign,\n+    /// The `^=` operator for assignment after bitwise XOR\n+    BitXorAssign,\n }\n \n impl<'a> BinExpr<'a> {\n@@ -519,6 +564,29 @@ impl<'a> BinExpr<'a> {\n                 GTEQ => Some(BinOp::GreaterEqualTest),\n                 L_ANGLE => Some(BinOp::LesserTest),\n                 R_ANGLE => Some(BinOp::GreaterTest),\n+                PLUS => Some(BinOp::Addition),\n+                STAR => Some(BinOp::Multiplication),\n+                MINUS => Some(BinOp::Subtraction),\n+                SLASH => Some(BinOp::Division),\n+                PERCENT => Some(BinOp::Remainder),\n+                SHL => Some(BinOp::LeftShift),\n+                SHR => Some(BinOp::RightShift),\n+                CARET => Some(BinOp::BitwiseXor),\n+                PIPE => Some(BinOp::BitwiseOr),\n+                AMP => Some(BinOp::BitwiseAnd),\n+                DOTDOT => Some(BinOp::RangeRightOpen),\n+                DOTDOTEQ => Some(BinOp::RangeRightClosed),\n+                EQ => Some(BinOp::Assignment),\n+                PLUSEQ => Some(BinOp::AddAssign),\n+                SLASHEQ => Some(BinOp::DivAssign),\n+                STAREQ => Some(BinOp::MulAssign),\n+                PERCENTEQ => Some(BinOp::RemAssign),\n+                SHREQ => Some(BinOp::ShrAssign),\n+                SHLEQ => Some(BinOp::ShlAssign),\n+                MINUSEQ => Some(BinOp::SubAssign),\n+                PIPEEQ => Some(BinOp::BitOrAssign),\n+                AMPEQ => Some(BinOp::BitAndAssign),\n+                CARETEQ => Some(BinOp::BitXorAssign),\n                 _ => None,\n             })\n             .next()"}, {"sha": "d7505ea06d3132f2717a914da18d24d773d350c9", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/812e47785b4f14a961f97414d0ca69d8c9bf5c9c/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/812e47785b4f14a961f97414d0ca69d8c9bf5c9c/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=812e47785b4f14a961f97414d0ca69d8c9bf5c9c", "patch": "@@ -49,6 +49,7 @@ Grammar(\n         [\"^=\", \"CARETEQ\"],\n         [\"/=\", \"SLASHEQ\"],\n         [\"*=\", \"STAREQ\"],\n+        [\"%=\", \"PERCENTEQ\"],\n         [\"&&\", \"AMPAMP\"],\n         [\"||\", \"PIPEPIPE\"],\n         [\"<<\", \"SHL\"],"}, {"sha": "830fac9f4baaafdff12a85f4ef560cbaf31b9138", "filename": "crates/ra_syntax/src/syntax_kinds/generated.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/812e47785b4f14a961f97414d0ca69d8c9bf5c9c/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/812e47785b4f14a961f97414d0ca69d8c9bf5c9c/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs?ref=812e47785b4f14a961f97414d0ca69d8c9bf5c9c", "patch": "@@ -58,6 +58,7 @@ pub enum SyntaxKind {\n     CARETEQ,\n     SLASHEQ,\n     STAREQ,\n+    PERCENTEQ,\n     AMPAMP,\n     PIPEPIPE,\n     SHL,\n@@ -319,6 +320,7 @@ impl SyntaxKind {\n             CARETEQ => &SyntaxInfo { name: \"CARETEQ\" },\n             SLASHEQ => &SyntaxInfo { name: \"SLASHEQ\" },\n             STAREQ => &SyntaxInfo { name: \"STAREQ\" },\n+            PERCENTEQ => &SyntaxInfo { name: \"PERCENTEQ\" },\n             AMPAMP => &SyntaxInfo { name: \"AMPAMP\" },\n             PIPEPIPE => &SyntaxInfo { name: \"PIPEPIPE\" },\n             SHL => &SyntaxInfo { name: \"SHL\" },"}]}