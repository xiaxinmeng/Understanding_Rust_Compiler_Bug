{"sha": "ff4758c2a0dffef264fe73b90668bd04b1b2fa89", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNDc1OGMyYTBkZmZlZjI2NGZlNzNiOTA2NjhiZDA0YjFiMmZhODk=", "commit": {"author": {"name": "Zack Weinberg", "email": "zackw@panix.com", "date": "2017-02-13T20:44:51Z"}, "committer": {"name": "Zack Weinberg", "email": "zackw@panix.com", "date": "2017-02-13T20:44:51Z"}, "message": "Replace regex-based parser for URL lines with open-coded one.", "tree": {"sha": "d894fd483d99d5280969b39a061d4a0f8f40180e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d894fd483d99d5280969b39a061d4a0f8f40180e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff4758c2a0dffef264fe73b90668bd04b1b2fa89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff4758c2a0dffef264fe73b90668bd04b1b2fa89", "html_url": "https://github.com/rust-lang/rust/commit/ff4758c2a0dffef264fe73b90668bd04b1b2fa89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff4758c2a0dffef264fe73b90668bd04b1b2fa89/comments", "author": {"login": "zackw", "id": 325899, "node_id": "MDQ6VXNlcjMyNTg5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/325899?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackw", "html_url": "https://github.com/zackw", "followers_url": "https://api.github.com/users/zackw/followers", "following_url": "https://api.github.com/users/zackw/following{/other_user}", "gists_url": "https://api.github.com/users/zackw/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackw/subscriptions", "organizations_url": "https://api.github.com/users/zackw/orgs", "repos_url": "https://api.github.com/users/zackw/repos", "events_url": "https://api.github.com/users/zackw/events{/privacy}", "received_events_url": "https://api.github.com/users/zackw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackw", "id": 325899, "node_id": "MDQ6VXNlcjMyNTg5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/325899?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackw", "html_url": "https://github.com/zackw", "followers_url": "https://api.github.com/users/zackw/followers", "following_url": "https://api.github.com/users/zackw/following{/other_user}", "gists_url": "https://api.github.com/users/zackw/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackw/subscriptions", "organizations_url": "https://api.github.com/users/zackw/orgs", "repos_url": "https://api.github.com/users/zackw/repos", "events_url": "https://api.github.com/users/zackw/events{/privacy}", "received_events_url": "https://api.github.com/users/zackw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5817351048b7c817720f696dd6a0f7005bd1a7a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5817351048b7c817720f696dd6a0f7005bd1a7a4", "html_url": "https://github.com/rust-lang/rust/commit/5817351048b7c817720f696dd6a0f7005bd1a7a4"}], "stats": {"total": 71, "additions": 46, "deletions": 25}, "files": [{"sha": "e900bd47fb7bdd3828af775bed2c52b87f267396", "filename": "src/tools/tidy/Cargo.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff4758c2a0dffef264fe73b90668bd04b1b2fa89/src%2Ftools%2Ftidy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ff4758c2a0dffef264fe73b90668bd04b1b2fa89/src%2Ftools%2Ftidy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2FCargo.toml?ref=ff4758c2a0dffef264fe73b90668bd04b1b2fa89", "patch": "@@ -4,5 +4,3 @@ version = \"0.1.0\"\n authors = [\"Alex Crichton <alex@alexcrichton.com>\"]\n \n [dependencies]\n-regex = \"*\"\n-lazy_static = \"*\""}, {"sha": "9962c6ec9af12209c560d9d2c9edccc1e45b2151", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff4758c2a0dffef264fe73b90668bd04b1b2fa89/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff4758c2a0dffef264fe73b90668bd04b1b2fa89/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=ff4758c2a0dffef264fe73b90668bd04b1b2fa89", "patch": "@@ -14,9 +14,6 @@\n //! etc. This is run by default on `make check` and as part of the auto\n //! builders.\n \n-extern crate regex;\n-#[macro_use] extern crate lazy_static;\n-\n use std::fs;\n use std::path::{PathBuf, Path};\n use std::env;"}, {"sha": "2233f8c3529748dcc43bdd6e0f333bc147172548", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 46, "deletions": 20, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/ff4758c2a0dffef264fe73b90668bd04b1b2fa89/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff4758c2a0dffef264fe73b90668bd04b1b2fa89/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=ff4758c2a0dffef264fe73b90668bd04b1b2fa89", "patch": "@@ -26,8 +26,6 @@ use std::fs::File;\n use std::io::prelude::*;\n use std::path::Path;\n \n-use regex::Regex;\n-\n const COLS: usize = 100;\n const LICENSE: &'static str = \"\\\n Copyright <year> The Rust Project Developers. See the COPYRIGHT\n@@ -40,26 +38,54 @@ http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n option. This file may not be copied, modified, or distributed\n except according to those terms.\";\n \n-/// True if LINE is allowed to be longer than the normal limit.\n-///\n-/// Currently there is only one exception: if the line is within a\n-/// comment, and its entire text is one URL (possibly with a Markdown\n-/// link label in front), then it's allowed to be overlength.  This is\n-/// because Markdown offers no way to split a line in the middle of a\n-/// URL, and the length of URLs for external references is beyond our\n-/// control.\n-fn long_line_is_ok(line: &str) -> bool {\n-    lazy_static! {\n-        static ref URL_RE: Regex = Regex::new(\n-            // This regexp uses the CommonMark definition of link\n-            // label.  It thinks any sequence of nonwhitespace\n-            // characters beginning with \"http://\" or \"https://\" is a\n-            // URL.  Add more schemas as necessary.\n-            r\"^\\s*//[!/]?\\s+(?:\\[(?:[^\\]\\\\]|\\\\.){1,999}\\]:\\s+)?https?://\\S+$\"\n-        ).unwrap();\n+/// Parser states for line_is_url.\n+#[derive(PartialEq)]\n+#[allow(non_camel_case_types)]\n+enum LIUState { EXP_COMMENT_START,\n+                EXP_LINK_LABEL_OR_URL,\n+                EXP_URL,\n+                EXP_END }\n+\n+/// True if LINE appears to be a line comment containing an URL,\n+/// possibly with a Markdown link label in front, and nothing else.\n+/// The Markdown link label, if present, may not contain whitespace.\n+/// Lines of this form are allowed to be overlength, because Markdown\n+/// offers no way to split a line in the middle of a URL, and the lengths\n+/// of URLs to external references are beyond our control.\n+fn line_is_url(line: &str) -> bool {\n+    use self::LIUState::*;\n+    let mut state: LIUState = EXP_COMMENT_START;\n+\n+    for tok in line.split_whitespace() {\n+        match (state, tok) {\n+            (EXP_COMMENT_START, \"//\") => state = EXP_LINK_LABEL_OR_URL,\n+            (EXP_COMMENT_START, \"///\") => state = EXP_LINK_LABEL_OR_URL,\n+            (EXP_COMMENT_START, \"//!\") => state = EXP_LINK_LABEL_OR_URL,\n+\n+            (EXP_LINK_LABEL_OR_URL, w)\n+                if w.len() >= 4 && w.starts_with(\"[\") && w.ends_with(\"]:\")\n+                => state = EXP_URL,\n+\n+            (EXP_LINK_LABEL_OR_URL, w)\n+                if w.starts_with(\"http://\") || w.starts_with(\"https://\")\n+                => state = EXP_END,\n+\n+            (EXP_URL, w)\n+                if w.starts_with(\"http://\") || w.starts_with(\"https://\")\n+                => state = EXP_END,\n+\n+            (_, _) => return false,\n+        }\n     }\n \n-    if URL_RE.is_match(line) {\n+    state == EXP_END\n+}\n+\n+/// True if LINE is allowed to be longer than the normal limit.\n+/// Currently there is only one exception, for long URLs, but more\n+/// may be added in the future.\n+fn long_line_is_ok(line: &str) -> bool {\n+    if line_is_url(line) {\n         return true;\n     }\n "}]}