{"sha": "4805a97274bd8673bbe01d82ab3694441b1cf11d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4MDVhOTcyNzRiZDg2NzNiYmUwMWQ4MmFiMzY5NDQ0MWIxY2YxMWQ=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-11-09T01:14:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-09T01:14:51Z"}, "message": "Rollup merge of #55638 - pnkfelix:issue-55608-ice-reempty-msg_span_from_free_region, r=estebank\n\nFix ICE in msg_span_from_free_region on ReEmpty\n\nOn an example like this:\n\n```rust\n#![feature(conservative_impl_trait)]\n\nfn server() -> impl FilterBase2 {\n    segment2(|| { loop { } }).map2(|| \"\")\n}\n\ntrait FilterBase2 {\n    fn map2<F>(self, _fn: F) -> Map2<F> where Self: Sized { loop { } }\n}\n\nstruct Map2<F> { _func: F }\n\nimpl<F> FilterBase2 for Map2<F> { }\n\nfn segment2<F>(_fn: F) -> Map2<F> where F: Fn() -> Result<(), ()> {\n    loop { }\n}\n```\n\nwe now, instead of ICE'ing, get a diagnostic like:\n\n```\nerror[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n --> issue-55608.rs:3:16\n  |\n3 | fn server() -> impl FilterBase2 {\n  |                ^^^^^^^^^^^^^^^^\n  |\n  = note: hidden type `Map2<[closure@issue-55608.rs:4:36: 4:41]>` captures an empty lifetime\n```\n\nFix #55608", "tree": {"sha": "15c7e84379ba708dcb87b2ba05ba7992466f1ba8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15c7e84379ba708dcb87b2ba05ba7992466f1ba8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4805a97274bd8673bbe01d82ab3694441b1cf11d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb5N+LCRBK7hj4Ov3rIwAAdHIIAGa6NYAwdC1VdBOFwd/tqcBB\nym9HwNJ6MX0Q8tPOBYnAL08h2uT8i+ED4R/dd0OIaeQ7oRz5QEIj1Q+r4TdZNsIg\nqlqWIfYnQTdLzp6+eb3bWH4NSeG5mA5ONRxJ0K6jcwYowln2ZXlr9HvaVKOApEeX\n0OtnxMSmuOsJCYJ5cBvD0J8Coe9OHeTCe/Z+B3jY83m2zEL0Fm/gdySfGcZZsmKH\nUH5eHonDJDCdmBe287yylmoBs4gSqFvDdqj0SYxds+yNGmHAfPMD3EJFvR6MZVWN\nsC/3JQLKb8S0NrGzBObojBiJvN7X8difLjLaASNMZfbwerKSJQMWHk0X4k0Q+iA=\n=u/Ok\n-----END PGP SIGNATURE-----\n", "payload": "tree 15c7e84379ba708dcb87b2ba05ba7992466f1ba8\nparent 78cab361394c6cdb9ab950ff094bcc5e0635ce86\nparent cc33aecb683b1cb08bd60ba1f24ef797827fda94\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1541726091 -0700\ncommitter GitHub <noreply@github.com> 1541726091 -0700\n\nRollup merge of #55638 - pnkfelix:issue-55608-ice-reempty-msg_span_from_free_region, r=estebank\n\nFix ICE in msg_span_from_free_region on ReEmpty\n\nOn an example like this:\n\n```rust\n#![feature(conservative_impl_trait)]\n\nfn server() -> impl FilterBase2 {\n    segment2(|| { loop { } }).map2(|| \"\")\n}\n\ntrait FilterBase2 {\n    fn map2<F>(self, _fn: F) -> Map2<F> where Self: Sized { loop { } }\n}\n\nstruct Map2<F> { _func: F }\n\nimpl<F> FilterBase2 for Map2<F> { }\n\nfn segment2<F>(_fn: F) -> Map2<F> where F: Fn() -> Result<(), ()> {\n    loop { }\n}\n```\n\nwe now, instead of ICE'ing, get a diagnostic like:\n\n```\nerror[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n --> issue-55608.rs:3:16\n  |\n3 | fn server() -> impl FilterBase2 {\n  |                ^^^^^^^^^^^^^^^^\n  |\n  = note: hidden type `Map2<[closure@issue-55608.rs:4:36: 4:41]>` captures an empty lifetime\n```\n\nFix #55608\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4805a97274bd8673bbe01d82ab3694441b1cf11d", "html_url": "https://github.com/rust-lang/rust/commit/4805a97274bd8673bbe01d82ab3694441b1cf11d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4805a97274bd8673bbe01d82ab3694441b1cf11d/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78cab361394c6cdb9ab950ff094bcc5e0635ce86", "url": "https://api.github.com/repos/rust-lang/rust/commits/78cab361394c6cdb9ab950ff094bcc5e0635ce86", "html_url": "https://github.com/rust-lang/rust/commit/78cab361394c6cdb9ab950ff094bcc5e0635ce86"}, {"sha": "cc33aecb683b1cb08bd60ba1f24ef797827fda94", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc33aecb683b1cb08bd60ba1f24ef797827fda94", "html_url": "https://github.com/rust-lang/rust/commit/cc33aecb683b1cb08bd60ba1f24ef797827fda94"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "f833ebc7ca763ec9ffab99f78e997de8249f35cc", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4805a97274bd8673bbe01d82ab3694441b1cf11d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4805a97274bd8673bbe01d82ab3694441b1cf11d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=4805a97274bd8673bbe01d82ab3694441b1cf11d", "patch": "@@ -178,6 +178,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 self.msg_span_from_early_bound_and_free_regions(region)\n             }\n             ty::ReStatic => (\"the static lifetime\".to_owned(), None),\n+            ty::ReEmpty => (\"an empty lifetime\".to_owned(), None),\n             _ => bug!(\"{:?}\", region),\n         }\n     }"}, {"sha": "7ebc348996f5e7bfa40a8c6145b9e457ffffd63c", "filename": "src/test/ui/impl-trait/issue-55608-captures-empty-region.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4805a97274bd8673bbe01d82ab3694441b1cf11d/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55608-captures-empty-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4805a97274bd8673bbe01d82ab3694441b1cf11d/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55608-captures-empty-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55608-captures-empty-region.rs?ref=4805a97274bd8673bbe01d82ab3694441b1cf11d", "patch": "@@ -0,0 +1,22 @@\n+// This used to ICE because it creates an `impl Trait` that captures a\n+// hidden empty region.\n+\n+#![feature(conservative_impl_trait)]\n+\n+fn server() -> impl FilterBase2 { //~ ERROR [E0700]\n+    segment2(|| { loop { } }).map2(|| \"\")\n+}\n+\n+trait FilterBase2 {\n+    fn map2<F>(self, _fn: F) -> Map2<F> where Self: Sized { loop { } }\n+}\n+\n+struct Map2<F> { _func: F }\n+\n+impl<F> FilterBase2 for Map2<F> { }\n+\n+fn segment2<F>(_fn: F) -> Map2<F> where F: Fn() -> Result<(), ()> {\n+    loop { }\n+}\n+\n+fn main() { server(); }"}, {"sha": "d1f147834d2efa0d7b9a83a26af29ce624f343f1", "filename": "src/test/ui/impl-trait/issue-55608-captures-empty-region.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4805a97274bd8673bbe01d82ab3694441b1cf11d/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55608-captures-empty-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4805a97274bd8673bbe01d82ab3694441b1cf11d/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55608-captures-empty-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55608-captures-empty-region.stderr?ref=4805a97274bd8673bbe01d82ab3694441b1cf11d", "patch": "@@ -0,0 +1,11 @@\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/issue-55608-captures-empty-region.rs:6:16\n+   |\n+LL | fn server() -> impl FilterBase2 { //~ ERROR [E0700]\n+   |                ^^^^^^^^^^^^^^^^\n+   |\n+   = note: hidden type `Map2<[closure@$DIR/issue-55608-captures-empty-region.rs:7:36: 7:41]>` captures an empty lifetime\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0700`."}]}