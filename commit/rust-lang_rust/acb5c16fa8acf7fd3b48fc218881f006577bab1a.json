{"sha": "acb5c16fa8acf7fd3b48fc218881f006577bab1a", "node_id": "C_kwDOAAsO6NoAKGFjYjVjMTZmYThhY2Y3ZmQzYjQ4ZmMyMTg4ODFmMDA2NTc3YmFiMWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-24T04:32:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-24T04:32:42Z"}, "message": "Auto merge of #97342 - JohnTitor:rollup-zqxctaw, r=JohnTitor\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #97240 (Typo suggestion for a variable with a name similar to struct fields)\n - #97289 (Lifetime variance fixes for clippy)\n - #97290 (Turn on `fast_submodules` unconditionally)\n - #97336 (typo)\n - #97337 (Fix stabilization version of `Ipv6Addr::to_ipv4_mapped`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a27b3ba886ac5ae68098a70a34623a9c8949c0c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a27b3ba886ac5ae68098a70a34623a9c8949c0c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acb5c16fa8acf7fd3b48fc218881f006577bab1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acb5c16fa8acf7fd3b48fc218881f006577bab1a", "html_url": "https://github.com/rust-lang/rust/commit/acb5c16fa8acf7fd3b48fc218881f006577bab1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acb5c16fa8acf7fd3b48fc218881f006577bab1a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8d0cd8de090d5c0acb1735d4e8846de277b2604", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8d0cd8de090d5c0acb1735d4e8846de277b2604", "html_url": "https://github.com/rust-lang/rust/commit/b8d0cd8de090d5c0acb1735d4e8846de277b2604"}, {"sha": "a1cbf66ee4de7913db018245931b20601f7b904f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1cbf66ee4de7913db018245931b20601f7b904f", "html_url": "https://github.com/rust-lang/rust/commit/a1cbf66ee4de7913db018245931b20601f7b904f"}], "stats": {"total": 300, "additions": 219, "deletions": 81}, "files": [{"sha": "76442de69d35147d7d7634c14d25e2cbef4dcf1b", "filename": "compiler/rustc_interface/src/callbacks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acb5c16fa8acf7fd3b48fc218881f006577bab1a/compiler%2Frustc_interface%2Fsrc%2Fcallbacks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb5c16fa8acf7fd3b48fc218881f006577bab1a/compiler%2Frustc_interface%2Fsrc%2Fcallbacks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fcallbacks.rs?ref=acb5c16fa8acf7fd3b48fc218881f006577bab1a", "patch": "@@ -24,7 +24,7 @@ fn track_span_parent(def_id: rustc_span::def_id::LocalDefId) {\n }\n \n /// This is a callback from `rustc_ast` as it cannot access the implicit state\n-/// in `rustc_middle` otherwise. It is used to when diagnostic messages are\n+/// in `rustc_middle` otherwise. It is used when diagnostic messages are\n /// emitted and stores them in the current query, if there is one.\n fn track_diagnostic(diagnostic: &Diagnostic) {\n     tls::with_context_opt(|icx| {"}, {"sha": "a6a04ac9ea6fc7da2681b608038edfcdc486fdf9", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/acb5c16fa8acf7fd3b48fc218881f006577bab1a/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb5c16fa8acf7fd3b48fc218881f006577bab1a/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=acb5c16fa8acf7fd3b48fc218881f006577bab1a", "patch": "@@ -445,6 +445,8 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 );\n             }\n         }\n+        // Try Levenshtein algorithm.\n+        let typo_sugg = self.lookup_typo_candidate(path, ns, is_expected);\n         if path.len() == 1 && self.self_type_is_available() {\n             if let Some(candidate) = self.lookup_assoc_candidate(ident, ns, is_expected) {\n                 let self_is_available = self.self_value_is_available(path[0].ident.span);\n@@ -454,7 +456,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                             err.span_suggestion(\n                                 span,\n                                 \"you might have meant to use the available field\",\n-                                format!(\"self.{}\", path_str),\n+                                format!(\"self.{path_str}\"),\n                                 Applicability::MachineApplicable,\n                             );\n                         } else {\n@@ -465,7 +467,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         err.span_suggestion(\n                             span,\n                             \"you might have meant to call the method\",\n-                            format!(\"self.{}\", path_str),\n+                            format!(\"self.{path_str}\"),\n                             Applicability::MachineApplicable,\n                         );\n                     }\n@@ -476,11 +478,12 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         err.span_suggestion(\n                             span,\n                             &format!(\"you might have meant to {}\", candidate.action()),\n-                            format!(\"Self::{}\", path_str),\n+                            format!(\"Self::{path_str}\"),\n                             Applicability::MachineApplicable,\n                         );\n                     }\n                 }\n+                self.r.add_typo_suggestion(&mut err, typo_sugg, ident_span);\n                 return (err, candidates);\n             }\n \n@@ -495,16 +498,14 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n \n                 err.span_suggestion(\n                     call_span,\n-                    &format!(\"try calling `{}` as a method\", ident),\n-                    format!(\"self.{}({})\", path_str, args_snippet),\n+                    &format!(\"try calling `{ident}` as a method\"),\n+                    format!(\"self.{path_str}({args_snippet})\"),\n                     Applicability::MachineApplicable,\n                 );\n                 return (err, candidates);\n             }\n         }\n \n-        // Try Levenshtein algorithm.\n-        let typo_sugg = self.lookup_typo_candidate(path, ns, is_expected);\n         // Try context-dependent help if relaxed lookup didn't work.\n         if let Some(res) = res {\n             if self.smart_resolve_context_dependent_help("}, {"sha": "a7968bca7be89cc91149171fd52bff14a215323b", "filename": "config.toml.example", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acb5c16fa8acf7fd3b48fc218881f006577bab1a/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/acb5c16fa8acf7fd3b48fc218881f006577bab1a/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=acb5c16fa8acf7fd3b48fc218881f006577bab1a", "patch": "@@ -240,10 +240,6 @@ changelog-seen = 2\n # Indicate whether git submodules are managed and updated automatically.\n #submodules = true\n \n-# Update git submodules only when the checked out commit in the submodules differs\n-# from what is committed in the main rustc repo.\n-#fast-submodules = true\n-\n # The path to (or name of) the GDB executable to use. This is only used for\n # executing the debuginfo test suite.\n #gdb = \"gdb\""}, {"sha": "438bae01b60d21d2afc5763857a4f493c5b3cc01", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acb5c16fa8acf7fd3b48fc218881f006577bab1a/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb5c16fa8acf7fd3b48fc218881f006577bab1a/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=acb5c16fa8acf7fd3b48fc218881f006577bab1a", "patch": "@@ -1655,7 +1655,7 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1).to_ipv4_mapped(), None);\n     /// ```\n     #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n-    #[stable(feature = \"ipv6_to_ipv4_mapped\", since = \"1.62.0\")]\n+    #[stable(feature = \"ipv6_to_ipv4_mapped\", since = \"1.63.0\")]\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]"}, {"sha": "add73ebd44b8c399d65c502203b45b1408982990", "filename": "src/bootstrap/CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acb5c16fa8acf7fd3b48fc218881f006577bab1a/src%2Fbootstrap%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/acb5c16fa8acf7fd3b48fc218881f006577bab1a/src%2Fbootstrap%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCHANGELOG.md?ref=acb5c16fa8acf7fd3b48fc218881f006577bab1a", "patch": "@@ -11,6 +11,7 @@ The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n - The options `infodir`, `localstatedir`, and `gpg-password-file` are no longer allowed in config.toml. Previously, they were ignored without warning. Note that `infodir` and `localstatedir` are still accepted by `./configure`, with a warning. [#82451](https://github.com/rust-lang/rust/pull/82451)\n - Add options for enabling overflow checks, one for std (`overflow-checks-std`) and one for everything else (`overflow-checks`). Both default to false.\n - Change the names for `dist` commands to match the component they generate. [#90684](https://github.com/rust-lang/rust/pull/90684)\n+- The `build.fast-submodules` option has been removed. Fast submodule checkouts are enabled unconditionally. Automatic submodule handling can still be disabled with `build.submodules = false`.\n \n ### Non-breaking changes\n "}, {"sha": "916c8e5d187c2a2b4c64748e8ba36ddc37a78e4a", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/acb5c16fa8acf7fd3b48fc218881f006577bab1a/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/acb5c16fa8acf7fd3b48fc218881f006577bab1a/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=acb5c16fa8acf7fd3b48fc218881f006577bab1a", "patch": "@@ -926,23 +926,19 @@ def build_triple(self):\n             return config\n         return default_build_triple(self.verbose)\n \n-    def check_submodule(self, module, slow_submodules):\n-        if not slow_submodules:\n-            checked_out = subprocess.Popen([\"git\", \"rev-parse\", \"HEAD\"],\n-                                           cwd=os.path.join(self.rust_root, module),\n-                                           stdout=subprocess.PIPE)\n-            return checked_out\n-        else:\n-            return None\n+    def check_submodule(self, module):\n+        checked_out = subprocess.Popen([\"git\", \"rev-parse\", \"HEAD\"],\n+                                        cwd=os.path.join(self.rust_root, module),\n+                                        stdout=subprocess.PIPE)\n+        return checked_out\n \n     def update_submodule(self, module, checked_out, recorded_submodules):\n         module_path = os.path.join(self.rust_root, module)\n \n-        if checked_out is not None:\n-            default_encoding = sys.getdefaultencoding()\n-            checked_out = checked_out.communicate()[0].decode(default_encoding).strip()\n-            if recorded_submodules[module] == checked_out:\n-                return\n+        default_encoding = sys.getdefaultencoding()\n+        checked_out = checked_out.communicate()[0].decode(default_encoding).strip()\n+        if recorded_submodules[module] == checked_out:\n+            return\n \n         print(\"Updating submodule\", module)\n \n@@ -991,12 +987,8 @@ def update_submodules(self):\n         git_version_str = require(['git', '--version']).split()[2].decode(default_encoding)\n         self.git_version = distutils.version.LooseVersion(git_version_str)\n \n-        slow_submodules = self.get_toml('fast-submodules') == \"false\"\n         start_time = time()\n-        if slow_submodules:\n-            print('Unconditionally updating submodules')\n-        else:\n-            print('Updating only changed submodules')\n+        print('Updating only changed submodules')\n         default_encoding = sys.getdefaultencoding()\n         # Only update submodules that are needed to build bootstrap.  These are needed because Cargo\n         # currently requires everything in a workspace to be \"locally present\" when starting a\n@@ -1022,7 +1014,7 @@ def update_submodules(self):\n         filtered_submodules = []\n         submodules_names = []\n         for module in submodules:\n-            check = self.check_submodule(module, slow_submodules)\n+            check = self.check_submodule(module)\n             filtered_submodules.append((module, check))\n             submodules_names.append(module)\n         recorded = subprocess.Popen([\"git\", \"ls-tree\", \"HEAD\"] + submodules_names,"}, {"sha": "f9acd52274f88f44cdbd6a9bee9be66cf0a0dd25", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acb5c16fa8acf7fd3b48fc218881f006577bab1a/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb5c16fa8acf7fd3b48fc218881f006577bab1a/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=acb5c16fa8acf7fd3b48fc218881f006577bab1a", "patch": "@@ -50,7 +50,6 @@ pub struct Config {\n     pub ninja_in_file: bool,\n     pub verbose: usize,\n     pub submodules: Option<bool>,\n-    pub fast_submodules: bool,\n     pub compiler_docs: bool,\n     pub docs_minification: bool,\n     pub docs: bool,\n@@ -517,7 +516,6 @@ define_config! {\n         compiler_docs: Option<bool> = \"compiler-docs\",\n         docs_minification: Option<bool> = \"docs-minification\",\n         submodules: Option<bool> = \"submodules\",\n-        fast_submodules: Option<bool> = \"fast-submodules\",\n         gdb: Option<String> = \"gdb\",\n         nodejs: Option<String> = \"nodejs\",\n         npm: Option<String> = \"npm\",\n@@ -705,7 +703,6 @@ impl Config {\n         config.rust_optimize = true;\n         config.rust_optimize_tests = true;\n         config.submodules = None;\n-        config.fast_submodules = true;\n         config.docs = true;\n         config.docs_minification = true;\n         config.rust_rpath = true;\n@@ -847,7 +844,6 @@ impl Config {\n         set(&mut config.compiler_docs, build.compiler_docs);\n         set(&mut config.docs_minification, build.docs_minification);\n         set(&mut config.docs, build.docs);\n-        set(&mut config.fast_submodules, build.fast_submodules);\n         set(&mut config.locked_deps, build.locked_deps);\n         set(&mut config.vendor, build.vendor);\n         set(&mut config.full_bootstrap, build.full_bootstrap);"}, {"sha": "769382525fbb88d9d68d6f5aafba69c12167df0c", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/acb5c16fa8acf7fd3b48fc218881f006577bab1a/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb5c16fa8acf7fd3b48fc218881f006577bab1a/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=acb5c16fa8acf7fd3b48fc218881f006577bab1a", "patch": "@@ -556,27 +556,24 @@ impl Build {\n         }\n \n         // check_submodule\n-        if self.config.fast_submodules {\n-            let checked_out_hash = output(\n-                Command::new(\"git\").args(&[\"rev-parse\", \"HEAD\"]).current_dir(&absolute_path),\n-            );\n-            // update_submodules\n-            let recorded = output(\n-                Command::new(\"git\")\n-                    .args(&[\"ls-tree\", \"HEAD\"])\n-                    .arg(relative_path)\n-                    .current_dir(&self.config.src),\n-            );\n-            let actual_hash = recorded\n-                .split_whitespace()\n-                .nth(2)\n-                .unwrap_or_else(|| panic!(\"unexpected output `{}`\", recorded));\n-\n-            // update_submodule\n-            if actual_hash == checked_out_hash.trim_end() {\n-                // already checked out\n-                return;\n-            }\n+        let checked_out_hash =\n+            output(Command::new(\"git\").args(&[\"rev-parse\", \"HEAD\"]).current_dir(&absolute_path));\n+        // update_submodules\n+        let recorded = output(\n+            Command::new(\"git\")\n+                .args(&[\"ls-tree\", \"HEAD\"])\n+                .arg(relative_path)\n+                .current_dir(&self.config.src),\n+        );\n+        let actual_hash = recorded\n+            .split_whitespace()\n+            .nth(2)\n+            .unwrap_or_else(|| panic!(\"unexpected output `{}`\", recorded));\n+\n+        // update_submodule\n+        if actual_hash == checked_out_hash.trim_end() {\n+            // already checked out\n+            return;\n         }\n \n         println!(\"Updating submodule {}\", relative_path.display());"}, {"sha": "ecd3f5881190420a0c0404b815c1a06a14e3de3d", "filename": "src/test/ui/resolve/typo-suggestion-for-variable-with-name-similar-to-struct-field.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/acb5c16fa8acf7fd3b48fc218881f006577bab1a/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-for-variable-with-name-similar-to-struct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb5c16fa8acf7fd3b48fc218881f006577bab1a/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-for-variable-with-name-similar-to-struct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-for-variable-with-name-similar-to-struct-field.rs?ref=acb5c16fa8acf7fd3b48fc218881f006577bab1a", "patch": "@@ -0,0 +1,46 @@\n+struct A {\n+    config: String,\n+}\n+\n+impl A {\n+    fn new(cofig: String) -> Self {\n+        Self { config } //~ Error cannot find value `config` in this scope\n+    }\n+\n+    fn do_something(cofig: String) {\n+        println!(\"{config}\"); //~ Error cannot find value `config` in this scope\n+    }\n+\n+    fn self_is_available(self, cofig: String) {\n+        println!(\"{config}\"); //~ Error cannot find value `config` in this scope\n+    }\n+}\n+\n+trait B {\n+    const BAR: u32 = 3;\n+    type Baz;\n+    fn bar(&self);\n+    fn baz(&self) {}\n+    fn bah() {}\n+}\n+\n+impl B for Box<isize> {\n+    type Baz = String;\n+    fn bar(&self) {\n+        // let baz = 3;\n+        baz();\n+        //~^ ERROR cannot find function `baz`\n+        bah;\n+        //~^ ERROR cannot find value `bah`\n+        BAR;\n+        //~^ ERROR cannot find value `BAR` in this scope\n+        let foo: Baz = \"\".to_string();\n+        //~^ ERROR cannot find type `Baz` in this scope\n+    }\n+}\n+\n+fn ba() {}\n+const BARR: u32 = 3;\n+type Bar = String;\n+\n+fn main() {}"}, {"sha": "0b0a37f246c9323fe434a56ffa8c239f9b130801", "filename": "src/test/ui/resolve/typo-suggestion-for-variable-with-name-similar-to-struct-field.stderr", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/acb5c16fa8acf7fd3b48fc218881f006577bab1a/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-for-variable-with-name-similar-to-struct-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acb5c16fa8acf7fd3b48fc218881f006577bab1a/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-for-variable-with-name-similar-to-struct-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-for-variable-with-name-similar-to-struct-field.stderr?ref=acb5c16fa8acf7fd3b48fc218881f006577bab1a", "patch": "@@ -0,0 +1,109 @@\n+error[E0425]: cannot find value `config` in this scope\n+  --> $DIR/typo-suggestion-for-variable-with-name-similar-to-struct-field.rs:7:16\n+   |\n+LL |         Self { config }\n+   |                ^^^^^^\n+   |                |\n+   |                a field by this name exists in `Self`\n+   |                help: a local variable with a similar name exists: `cofig`\n+\n+error[E0425]: cannot find value `config` in this scope\n+  --> $DIR/typo-suggestion-for-variable-with-name-similar-to-struct-field.rs:11:20\n+   |\n+LL |         println!(\"{config}\");\n+   |                    ^^^^^^\n+   |                    |\n+   |                    a field by this name exists in `Self`\n+   |                    help: a local variable with a similar name exists: `cofig`\n+\n+error[E0425]: cannot find value `config` in this scope\n+  --> $DIR/typo-suggestion-for-variable-with-name-similar-to-struct-field.rs:15:20\n+   |\n+LL |         println!(\"{config}\");\n+   |                    ^^^^^^\n+   |\n+help: you might have meant to use the available field\n+   |\n+LL |         println!(\"{self.config}\");\n+   |                    ~~~~~~~~~~~\n+help: a local variable with a similar name exists\n+   |\n+LL |         println!(\"{cofig}\");\n+   |                    ~~~~~\n+\n+error[E0425]: cannot find function `baz` in this scope\n+  --> $DIR/typo-suggestion-for-variable-with-name-similar-to-struct-field.rs:31:9\n+   |\n+LL |         baz();\n+   |         ^^^\n+...\n+LL | fn ba() {}\n+   | ------- similarly named function `ba` defined here\n+   |\n+help: you might have meant to call the method\n+   |\n+LL |         self.baz();\n+   |         ~~~~~~~~\n+help: a function with a similar name exists\n+   |\n+LL |         ba();\n+   |         ~~\n+\n+error[E0425]: cannot find value `bah` in this scope\n+  --> $DIR/typo-suggestion-for-variable-with-name-similar-to-struct-field.rs:33:9\n+   |\n+LL |         bah;\n+   |         ^^^\n+...\n+LL | fn ba() {}\n+   | ------- similarly named function `ba` defined here\n+   |\n+help: you might have meant to call the associated function\n+   |\n+LL |         Self::bah;\n+   |         ~~~~~~~~~\n+help: a function with a similar name exists\n+   |\n+LL |         ba;\n+   |         ~~\n+\n+error[E0425]: cannot find value `BAR` in this scope\n+  --> $DIR/typo-suggestion-for-variable-with-name-similar-to-struct-field.rs:35:9\n+   |\n+LL |         BAR;\n+   |         ^^^\n+...\n+LL | const BARR: u32 = 3;\n+   | -------------------- similarly named constant `BARR` defined here\n+   |\n+help: you might have meant to use the associated `const`\n+   |\n+LL |         Self::BAR;\n+   |         ~~~~~~~~~\n+help: a constant with a similar name exists\n+   |\n+LL |         BARR;\n+   |         ~~~~\n+\n+error[E0412]: cannot find type `Baz` in this scope\n+  --> $DIR/typo-suggestion-for-variable-with-name-similar-to-struct-field.rs:37:18\n+   |\n+LL |         let foo: Baz = \"\".to_string();\n+   |                  ^^^\n+...\n+LL | type Bar = String;\n+   | ------------------ similarly named type alias `Bar` defined here\n+   |\n+help: you might have meant to use the associated type\n+   |\n+LL |         let foo: Self::Baz = \"\".to_string();\n+   |                  ~~~~~~~~~\n+help: a type alias with a similar name exists\n+   |\n+LL |         let foo: Bar = \"\".to_string();\n+   |                  ~~~\n+\n+error: aborting due to 7 previous errors\n+\n+Some errors have detailed explanations: E0412, E0425.\n+For more information about an error, try `rustc --explain E0412`."}, {"sha": "fff7da8e33f2fff24aca3a5760557b58f893ac4a", "filename": "src/tools/clippy/clippy_lints/src/casts/unnecessary_cast.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/acb5c16fa8acf7fd3b48fc218881f006577bab1a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb5c16fa8acf7fd3b48fc218881f006577bab1a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs?ref=acb5c16fa8acf7fd3b48fc218881f006577bab1a", "patch": "@@ -12,12 +12,12 @@ use rustc_middle::ty::{self, FloatTy, InferTy, Ty};\n \n use super::UNNECESSARY_CAST;\n \n-pub(super) fn check(\n-    cx: &LateContext<'_>,\n-    expr: &Expr<'_>,\n-    cast_expr: &Expr<'_>,\n-    cast_from: Ty<'_>,\n-    cast_to: Ty<'_>,\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &Expr<'tcx>,\n+    cast_expr: &Expr<'tcx>,\n+    cast_from: Ty<'tcx>,\n+    cast_to: Ty<'tcx>,\n ) -> bool {\n     // skip non-primitive type cast\n     if_chain! {"}, {"sha": "8288f7a8b9b623732e98f401f0f1bf1c2e82886c", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/acb5c16fa8acf7fd3b48fc218881f006577bab1a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb5c16fa8acf7fd3b48fc218881f006577bab1a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=acb5c16fa8acf7fd3b48fc218881f006577bab1a", "patch": "@@ -446,7 +446,7 @@ fn try_parse_ref_op<'tcx>(\n \n // Checks whether the type for a deref call actually changed the type, not just the mutability of\n // the reference.\n-fn deref_method_same_type(result_ty: Ty<'_>, arg_ty: Ty<'_>) -> bool {\n+fn deref_method_same_type<'tcx>(result_ty: Ty<'tcx>, arg_ty: Ty<'tcx>) -> bool {\n     match (result_ty.kind(), arg_ty.kind()) {\n         (ty::Ref(_, result_ty, _), ty::Ref(_, arg_ty, _)) => result_ty == arg_ty,\n \n@@ -541,8 +541,8 @@ fn is_auto_borrow_position(parent: Option<Node<'_>>, child_id: HirId) -> bool {\n /// Adjustments are sometimes made in the parent block rather than the expression itself.\n fn find_adjustments<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    typeck: &'tcx TypeckResults<'_>,\n-    expr: &'tcx Expr<'_>,\n+    typeck: &'tcx TypeckResults<'tcx>,\n+    expr: &'tcx Expr<'tcx>,\n ) -> &'tcx [Adjustment<'tcx>] {\n     let map = tcx.hir();\n     let mut iter = map.parent_iter(expr.hir_id);\n@@ -581,7 +581,7 @@ fn find_adjustments<'tcx>(\n }\n \n #[expect(clippy::needless_pass_by_value)]\n-fn report(cx: &LateContext<'_>, expr: &Expr<'_>, state: State, data: StateData) {\n+fn report<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>, state: State, data: StateData) {\n     match state {\n         State::DerefMethod {\n             ty_changed_count,\n@@ -656,7 +656,7 @@ fn report(cx: &LateContext<'_>, expr: &Expr<'_>, state: State, data: StateData)\n }\n \n impl Dereferencing {\n-    fn check_local_usage(&mut self, cx: &LateContext<'_>, e: &Expr<'_>, local: HirId) {\n+    fn check_local_usage<'tcx>(&mut self, cx: &LateContext<'tcx>, e: &Expr<'tcx>, local: HirId) {\n         if let Some(outer_pat) = self.ref_locals.get_mut(&local) {\n             if let Some(pat) = outer_pat {\n                 // Check for auto-deref"}, {"sha": "246f5aad8fbadec7deba6693828df65932744188", "filename": "src/tools/clippy/clippy_lints/src/len_zero.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/acb5c16fa8acf7fd3b48fc218881f006577bab1a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb5c16fa8acf7fd3b48fc218881f006577bab1a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs?ref=acb5c16fa8acf7fd3b48fc218881f006577bab1a", "patch": "@@ -259,8 +259,8 @@ fn parse_len_output<'tcx>(cx: &LateContext<'_>, sig: FnSig<'tcx>) -> Option<LenO\n     }\n }\n \n-impl LenOutput<'_> {\n-    fn matches_is_empty_output(self, ty: Ty<'_>) -> bool {\n+impl<'tcx> LenOutput<'tcx> {\n+    fn matches_is_empty_output(self, ty: Ty<'tcx>) -> bool {\n         match (self, ty.kind()) {\n             (_, &ty::Bool) => true,\n             (Self::Option(id), &ty::Adt(adt, subs)) if id == adt.did() => subs.type_at(0).is_bool(),\n@@ -292,7 +292,7 @@ impl LenOutput<'_> {\n }\n \n /// Checks if the given signature matches the expectations for `is_empty`\n-fn check_is_empty_sig(sig: FnSig<'_>, self_kind: ImplicitSelfKind, len_output: LenOutput<'_>) -> bool {\n+fn check_is_empty_sig<'tcx>(sig: FnSig<'tcx>, self_kind: ImplicitSelfKind, len_output: LenOutput<'tcx>) -> bool {\n     match &**sig.inputs_and_output {\n         [arg, res] if len_output.matches_is_empty_output(*res) => {\n             matches!(\n@@ -306,11 +306,11 @@ fn check_is_empty_sig(sig: FnSig<'_>, self_kind: ImplicitSelfKind, len_output: L\n }\n \n /// Checks if the given type has an `is_empty` method with the appropriate signature.\n-fn check_for_is_empty(\n-    cx: &LateContext<'_>,\n+fn check_for_is_empty<'tcx>(\n+    cx: &LateContext<'tcx>,\n     span: Span,\n     self_kind: ImplicitSelfKind,\n-    output: LenOutput<'_>,\n+    output: LenOutput<'tcx>,\n     impl_ty: DefId,\n     item_name: Symbol,\n     item_kind: &str,"}, {"sha": "3bf48e18019dfb4b2cbb6771e8bb20e65c6df9cd", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acb5c16fa8acf7fd3b48fc218881f006577bab1a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb5c16fa8acf7fd3b48fc218881f006577bab1a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=acb5c16fa8acf7fd3b48fc218881f006577bab1a", "patch": "@@ -2843,7 +2843,7 @@ enum SelfKind {\n \n impl SelfKind {\n     fn matches<'a>(self, cx: &LateContext<'a>, parent_ty: Ty<'a>, ty: Ty<'a>) -> bool {\n-        fn matches_value<'a>(cx: &LateContext<'a>, parent_ty: Ty<'_>, ty: Ty<'_>) -> bool {\n+        fn matches_value<'a>(cx: &LateContext<'a>, parent_ty: Ty<'a>, ty: Ty<'a>) -> bool {\n             if ty == parent_ty {\n                 true\n             } else if ty.is_box() {"}, {"sha": "548f7b2528b1171acd5fc7877c3ebb6f1591b734", "filename": "src/tools/clippy/clippy_lints/src/ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/acb5c16fa8acf7fd3b48fc218881f006577bab1a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb5c16fa8acf7fd3b48fc218881f006577bab1a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs?ref=acb5c16fa8acf7fd3b48fc218881f006577bab1a", "patch": "@@ -395,9 +395,9 @@ impl<'tcx> DerefTy<'tcx> {\n \n fn check_fn_args<'cx, 'tcx: 'cx>(\n     cx: &'cx LateContext<'tcx>,\n-    tys: &'tcx [Ty<'_>],\n-    hir_tys: &'tcx [hir::Ty<'_>],\n-    params: &'tcx [Param<'_>],\n+    tys: &'tcx [Ty<'tcx>],\n+    hir_tys: &'tcx [hir::Ty<'tcx>],\n+    params: &'tcx [Param<'tcx>],\n ) -> impl Iterator<Item = PtrArg<'tcx>> + 'cx {\n     tys.iter()\n         .zip(hir_tys.iter())"}, {"sha": "20b348fc14f7b12f71823d410cd9f5ae2913c250", "filename": "src/tools/clippy/clippy_lints/src/transmute/transmute_undefined_repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acb5c16fa8acf7fd3b48fc218881f006577bab1a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb5c16fa8acf7fd3b48fc218881f006577bab1a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs?ref=acb5c16fa8acf7fd3b48fc218881f006577bab1a", "patch": "@@ -358,7 +358,7 @@ fn is_size_pair(ty: Ty<'_>) -> bool {\n     }\n }\n \n-fn same_except_params(subs1: SubstsRef<'_>, subs2: SubstsRef<'_>) -> bool {\n+fn same_except_params<'tcx>(subs1: SubstsRef<'tcx>, subs2: SubstsRef<'tcx>) -> bool {\n     // TODO: check const parameters as well. Currently this will consider `Array<5>` the same as\n     // `Array<6>`\n     for (ty1, ty2) in subs1.types().zip(subs2.types()).filter(|(ty1, ty2)| ty1 != ty2) {"}, {"sha": "75d27d3b594822ff342ab4c1bde86804e16a4dfd", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acb5c16fa8acf7fd3b48fc218881f006577bab1a/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb5c16fa8acf7fd3b48fc218881f006577bab1a/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=acb5c16fa8acf7fd3b48fc218881f006577bab1a", "patch": "@@ -42,7 +42,7 @@ pub fn can_partially_move_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool\n }\n \n /// Walks into `ty` and returns `true` if any inner type is the same as `other_ty`\n-pub fn contains_ty(ty: Ty<'_>, other_ty: Ty<'_>) -> bool {\n+pub fn contains_ty<'tcx>(ty: Ty<'tcx>, other_ty: Ty<'tcx>) -> bool {\n     ty.walk().any(|inner| match inner.unpack() {\n         GenericArgKind::Type(inner_ty) => other_ty == inner_ty,\n         GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n@@ -51,7 +51,7 @@ pub fn contains_ty(ty: Ty<'_>, other_ty: Ty<'_>) -> bool {\n \n /// Walks into `ty` and returns `true` if any inner type is an instance of the given adt\n /// constructor.\n-pub fn contains_adt_constructor(ty: Ty<'_>, adt: AdtDef<'_>) -> bool {\n+pub fn contains_adt_constructor<'tcx>(ty: Ty<'tcx>, adt: AdtDef<'tcx>) -> bool {\n     ty.walk().any(|inner| match inner.unpack() {\n         GenericArgKind::Type(inner_ty) => inner_ty.ty_adt_def() == Some(adt),\n         GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,"}]}