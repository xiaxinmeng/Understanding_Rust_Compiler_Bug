{"sha": "37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3Yzk0NWRkNjE3OGNiNTIwZWIxZTQ1MGE3OTVmOGMzYjNjYzVhM2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-23T03:10:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-23T03:10:48Z"}, "message": "Auto merge of #70204 - Centril:unshackled-lowering, r=Zoxc\n\nLiberate `rustc_ast_lowering` from `rustc`\n\nThe whole point of this PR is the very last commit, in which we remove `rustc` as one of `rustc_ast_lowering`'s dependencies, thereby improving `./x.py` parallelism and working towards https://github.com/rust-lang/rust/issues/65031.\n\nNoteworthy:\n- From `rustc::arena` we move logic into `arena`, in particular `declare_arena!`. This is then used in `rustc_ast_lowering` so that lowering has its own separate arena.\n- Some linting code is unfortunately moved to `rustc_session::lint` cause its used both in `rustc_lint` and `rustc_ast_lowering`, and this is their common dependency.\n- `rustc_session::CrateDisambiguator` is moved into `rustc_ast` so that `rustc::hir::map::definitions` can be moved into `rustc_hir`, so that `rustc_ast_lowering` can stop referring to `rustc::hir`.\n\nr? @Zoxc", "tree": {"sha": "2dbbb36335d426f3c13c4cde0eafaadfb7023968", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dbbb36335d426f3c13c4cde0eafaadfb7023968"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "html_url": "https://github.com/rust-lang/rust/commit/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4b01c7791446b2f79a1b1d517223378df2bf5f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4b01c7791446b2f79a1b1d517223378df2bf5f2", "html_url": "https://github.com/rust-lang/rust/commit/e4b01c7791446b2f79a1b1d517223378df2bf5f2"}, {"sha": "40cec7854b8422b47a7d917556694e3abbbb2d2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/40cec7854b8422b47a7d917556694e3abbbb2d2e", "html_url": "https://github.com/rust-lang/rust/commit/40cec7854b8422b47a7d917556694e3abbbb2d2e"}], "stats": {"total": 759, "additions": 384, "deletions": 375}, "files": [{"sha": "c65c3a45ec28b38eec1518ea7b870634ceb90ec5", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "patch": "@@ -3477,8 +3477,8 @@ dependencies = [\n name = \"rustc_ast_lowering\"\n version = \"0.0.0\"\n dependencies = [\n+ \"arena\",\n  \"log\",\n- \"rustc\",\n  \"rustc_ast\",\n  \"rustc_ast_pretty\",\n  \"rustc_data_structures\",\n@@ -3725,6 +3725,7 @@ name = \"rustc_hir\"\n version = \"0.0.0\"\n dependencies = [\n  \"lazy_static 1.4.0\",\n+ \"log\",\n  \"rustc_ast\",\n  \"rustc_ast_pretty\",\n  \"rustc_data_structures\","}, {"sha": "0f0bd617f439c6cd8491b57addf70682e2582936", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 182, "deletions": 0, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "patch": "@@ -488,5 +488,187 @@ impl DroplessArena {\n     }\n }\n \n+/// Calls the destructor for an object when dropped.\n+struct DropType {\n+    drop_fn: unsafe fn(*mut u8),\n+    obj: *mut u8,\n+}\n+\n+unsafe fn drop_for_type<T>(to_drop: *mut u8) {\n+    std::ptr::drop_in_place(to_drop as *mut T)\n+}\n+\n+impl Drop for DropType {\n+    fn drop(&mut self) {\n+        unsafe { (self.drop_fn)(self.obj) }\n+    }\n+}\n+\n+/// An arena which can be used to allocate any type.\n+/// Allocating in this arena is unsafe since the type system\n+/// doesn't know which types it contains. In order to\n+/// allocate safely, you must store a PhantomData<T>\n+/// alongside this arena for each type T you allocate.\n+#[derive(Default)]\n+pub struct DropArena {\n+    /// A list of destructors to run when the arena drops.\n+    /// Ordered so `destructors` gets dropped before the arena\n+    /// since its destructor can reference memory in the arena.\n+    destructors: RefCell<Vec<DropType>>,\n+    arena: DroplessArena,\n+}\n+\n+impl DropArena {\n+    #[inline]\n+    pub unsafe fn alloc<T>(&self, object: T) -> &mut T {\n+        let mem =\n+            self.arena.alloc_raw(mem::size_of::<T>(), mem::align_of::<T>()) as *mut _ as *mut T;\n+        // Write into uninitialized memory.\n+        ptr::write(mem, object);\n+        let result = &mut *mem;\n+        // Record the destructor after doing the allocation as that may panic\n+        // and would cause `object`'s destuctor to run twice if it was recorded before\n+        self.destructors\n+            .borrow_mut()\n+            .push(DropType { drop_fn: drop_for_type::<T>, obj: result as *mut T as *mut u8 });\n+        result\n+    }\n+\n+    #[inline]\n+    pub unsafe fn alloc_from_iter<T, I: IntoIterator<Item = T>>(&self, iter: I) -> &mut [T] {\n+        let mut vec: SmallVec<[_; 8]> = iter.into_iter().collect();\n+        if vec.is_empty() {\n+            return &mut [];\n+        }\n+        let len = vec.len();\n+\n+        let start_ptr = self\n+            .arena\n+            .alloc_raw(len.checked_mul(mem::size_of::<T>()).unwrap(), mem::align_of::<T>())\n+            as *mut _ as *mut T;\n+\n+        let mut destructors = self.destructors.borrow_mut();\n+        // Reserve space for the destructors so we can't panic while adding them\n+        destructors.reserve(len);\n+\n+        // Move the content to the arena by copying it and then forgetting\n+        // the content of the SmallVec\n+        vec.as_ptr().copy_to_nonoverlapping(start_ptr, len);\n+        mem::forget(vec.drain(..));\n+\n+        // Record the destructors after doing the allocation as that may panic\n+        // and would cause `object`'s destuctor to run twice if it was recorded before\n+        for i in 0..len {\n+            destructors.push(DropType {\n+                drop_fn: drop_for_type::<T>,\n+                obj: start_ptr.offset(i as isize) as *mut u8,\n+            });\n+        }\n+\n+        slice::from_raw_parts_mut(start_ptr, len)\n+    }\n+}\n+\n+#[macro_export]\n+macro_rules! arena_for_type {\n+    ([][$ty:ty]) => {\n+        $crate::TypedArena<$ty>\n+    };\n+    ([few $(, $attrs:ident)*][$ty:ty]) => {\n+        ::std::marker::PhantomData<$ty>\n+    };\n+    ([$ignore:ident $(, $attrs:ident)*]$args:tt) => {\n+        $crate::arena_for_type!([$($attrs),*]$args)\n+    };\n+}\n+\n+#[macro_export]\n+macro_rules! which_arena_for_type {\n+    ([][$arena:expr]) => {\n+        ::std::option::Option::Some($arena)\n+    };\n+    ([few$(, $attrs:ident)*][$arena:expr]) => {\n+        ::std::option::Option::None\n+    };\n+    ([$ignore:ident$(, $attrs:ident)*]$args:tt) => {\n+        $crate::which_arena_for_type!([$($attrs),*]$args)\n+    };\n+}\n+\n+#[macro_export]\n+macro_rules! declare_arena {\n+    ([], [$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) => {\n+        #[derive(Default)]\n+        pub struct Arena<$tcx> {\n+            pub dropless: $crate::DroplessArena,\n+            drop: $crate::DropArena,\n+            $($name: $crate::arena_for_type!($a[$ty]),)*\n+        }\n+\n+        #[marker]\n+        pub trait ArenaAllocatable {}\n+\n+        impl<T: Copy> ArenaAllocatable for T {}\n+\n+        unsafe trait ArenaField<'tcx>: Sized {\n+            /// Returns a specific arena to allocate from.\n+            /// If `None` is returned, the `DropArena` will be used.\n+            fn arena<'a>(arena: &'a Arena<'tcx>) -> Option<&'a $crate::TypedArena<Self>>;\n+        }\n+\n+        unsafe impl<'tcx, T> ArenaField<'tcx> for T {\n+            #[inline]\n+            default fn arena<'a>(_: &'a Arena<'tcx>) -> Option<&'a $crate::TypedArena<Self>> {\n+                panic!()\n+            }\n+        }\n+\n+        $(\n+            #[allow(unused_lifetimes)]\n+            impl<$tcx> ArenaAllocatable for $ty {}\n+            unsafe impl<$tcx> ArenaField<$tcx> for $ty {\n+                #[inline]\n+                fn arena<'a>(_arena: &'a Arena<$tcx>) -> Option<&'a $crate::TypedArena<Self>> {\n+                    $crate::which_arena_for_type!($a[&_arena.$name])\n+                }\n+            }\n+        )*\n+\n+        impl<'tcx> Arena<'tcx> {\n+            #[inline]\n+            pub fn alloc<T: ArenaAllocatable>(&self, value: T) -> &mut T {\n+                if !::std::mem::needs_drop::<T>() {\n+                    return self.dropless.alloc(value);\n+                }\n+                match <T as ArenaField<'tcx>>::arena(self) {\n+                    ::std::option::Option::Some(arena) => arena.alloc(value),\n+                    ::std::option::Option::None => unsafe { self.drop.alloc(value) },\n+                }\n+            }\n+\n+            #[inline]\n+            pub fn alloc_slice<T: ::std::marker::Copy>(&self, value: &[T]) -> &mut [T] {\n+                if value.is_empty() {\n+                    return &mut [];\n+                }\n+                self.dropless.alloc_slice(value)\n+            }\n+\n+            pub fn alloc_from_iter<'a, T: ArenaAllocatable>(\n+                &'a self,\n+                iter: impl ::std::iter::IntoIterator<Item = T>,\n+            ) -> &'a mut [T] {\n+                if !::std::mem::needs_drop::<T>() {\n+                    return self.dropless.alloc_from_iter(iter);\n+                }\n+                match <T as ArenaField<'tcx>>::arena(self) {\n+                    ::std::option::Option::Some(arena) => arena.alloc_from_iter(iter),\n+                    ::std::option::Option::None => unsafe { self.drop.alloc_from_iter(iter) },\n+                }\n+            }\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod tests;"}, {"sha": "57c1e5521a9d9044128d8582f547dc35d01d5a26", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 2, "deletions": 228, "changes": 230, "blob_url": "https://github.com/rust-lang/rust/blob/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "patch": "@@ -1,11 +1,3 @@\n-use arena::{DroplessArena, TypedArena};\n-use smallvec::SmallVec;\n-use std::cell::RefCell;\n-use std::marker::PhantomData;\n-use std::mem;\n-use std::ptr;\n-use std::slice;\n-\n /// This declares a list of types which can be allocated by `Arena`.\n ///\n /// The `few` modifier will cause allocation to use the shared arena and recording the destructor.\n@@ -128,231 +120,13 @@ macro_rules! arena_types {\n             // Interned types\n             [] tys: rustc::ty::TyS<$tcx>,\n \n-            // HIR types\n-            [few] hir_krate: rustc_hir::Crate<$tcx>,\n-            [] arm: rustc_hir::Arm<$tcx>,\n-            [] attribute: rustc_ast::ast::Attribute,\n-            [] block: rustc_hir::Block<$tcx>,\n-            [] bare_fn_ty: rustc_hir::BareFnTy<$tcx>,\n-            [few] global_asm: rustc_hir::GlobalAsm,\n-            [] generic_arg: rustc_hir::GenericArg<$tcx>,\n-            [] generic_args: rustc_hir::GenericArgs<$tcx>,\n-            [] generic_bound: rustc_hir::GenericBound<$tcx>,\n-            [] generic_param: rustc_hir::GenericParam<$tcx>,\n-            [] expr: rustc_hir::Expr<$tcx>,\n-            [] field: rustc_hir::Field<$tcx>,\n-            [] field_pat: rustc_hir::FieldPat<$tcx>,\n-            [] fn_decl: rustc_hir::FnDecl<$tcx>,\n-            [] foreign_item: rustc_hir::ForeignItem<$tcx>,\n-            [] impl_item_ref: rustc_hir::ImplItemRef<$tcx>,\n-            [] inline_asm: rustc_hir::InlineAsm<$tcx>,\n-            [] local: rustc_hir::Local<$tcx>,\n-            [few] macro_def: rustc_hir::MacroDef<$tcx>,\n-            [] param: rustc_hir::Param<$tcx>,\n-            [] pat: rustc_hir::Pat<$tcx>,\n-            [] path: rustc_hir::Path<$tcx>,\n-            [] path_segment: rustc_hir::PathSegment<$tcx>,\n-            [] poly_trait_ref: rustc_hir::PolyTraitRef<$tcx>,\n-            [] qpath: rustc_hir::QPath<$tcx>,\n-            [] stmt: rustc_hir::Stmt<$tcx>,\n-            [] struct_field: rustc_hir::StructField<$tcx>,\n-            [] trait_item_ref: rustc_hir::TraitItemRef,\n-            [] ty: rustc_hir::Ty<$tcx>,\n-            [] type_binding: rustc_hir::TypeBinding<$tcx>,\n-            [] variant: rustc_hir::Variant<$tcx>,\n-            [] where_predicate: rustc_hir::WherePredicate<$tcx>,\n-\n             // HIR query types\n             [few] indexed_hir: rustc::hir::map::IndexedHir<$tcx>,\n-            [few] hir_definitions: rustc::hir::map::definitions::Definitions,\n+            [few] hir_definitions: rustc_hir::definitions::Definitions,\n             [] hir_owner: rustc::hir::Owner<$tcx>,\n             [] hir_owner_nodes: rustc::hir::OwnerNodes<$tcx>,\n         ], $tcx);\n     )\n }\n \n-macro_rules! arena_for_type {\n-    ([][$ty:ty]) => {\n-        TypedArena<$ty>\n-    };\n-    ([few $(, $attrs:ident)*][$ty:ty]) => {\n-        PhantomData<$ty>\n-    };\n-    ([$ignore:ident $(, $attrs:ident)*]$args:tt) => {\n-        arena_for_type!([$($attrs),*]$args)\n-    };\n-}\n-\n-macro_rules! declare_arena {\n-    ([], [$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) => {\n-        #[derive(Default)]\n-        pub struct Arena<$tcx> {\n-            pub dropless: DroplessArena,\n-            drop: DropArena,\n-            $($name: arena_for_type!($a[$ty]),)*\n-        }\n-    }\n-}\n-\n-macro_rules! which_arena_for_type {\n-    ([][$arena:expr]) => {\n-        Some($arena)\n-    };\n-    ([few$(, $attrs:ident)*][$arena:expr]) => {\n-        None\n-    };\n-    ([$ignore:ident$(, $attrs:ident)*]$args:tt) => {\n-        which_arena_for_type!([$($attrs),*]$args)\n-    };\n-}\n-\n-macro_rules! impl_arena_allocatable {\n-    ([], [$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) => {\n-        $(\n-            impl ArenaAllocatable for $ty {}\n-            unsafe impl<$tcx> ArenaField<$tcx> for $ty {\n-                #[inline]\n-                fn arena<'a>(_arena: &'a Arena<$tcx>) -> Option<&'a TypedArena<Self>> {\n-                    which_arena_for_type!($a[&_arena.$name])\n-                }\n-            }\n-        )*\n-    }\n-}\n-\n-arena_types!(declare_arena, [], 'tcx);\n-\n-arena_types!(impl_arena_allocatable, [], 'tcx);\n-\n-#[marker]\n-pub trait ArenaAllocatable {}\n-\n-impl<T: Copy> ArenaAllocatable for T {}\n-\n-unsafe trait ArenaField<'tcx>: Sized {\n-    /// Returns a specific arena to allocate from.\n-    /// If `None` is returned, the `DropArena` will be used.\n-    fn arena<'a>(arena: &'a Arena<'tcx>) -> Option<&'a TypedArena<Self>>;\n-}\n-\n-unsafe impl<'tcx, T> ArenaField<'tcx> for T {\n-    #[inline]\n-    default fn arena<'a>(_: &'a Arena<'tcx>) -> Option<&'a TypedArena<Self>> {\n-        panic!()\n-    }\n-}\n-\n-impl<'tcx> Arena<'tcx> {\n-    #[inline]\n-    pub fn alloc<T: ArenaAllocatable>(&self, value: T) -> &mut T {\n-        if !mem::needs_drop::<T>() {\n-            return self.dropless.alloc(value);\n-        }\n-        match <T as ArenaField<'tcx>>::arena(self) {\n-            Some(arena) => arena.alloc(value),\n-            None => unsafe { self.drop.alloc(value) },\n-        }\n-    }\n-\n-    #[inline]\n-    pub fn alloc_slice<T: Copy>(&self, value: &[T]) -> &mut [T] {\n-        if value.is_empty() {\n-            return &mut [];\n-        }\n-        self.dropless.alloc_slice(value)\n-    }\n-\n-    pub fn alloc_from_iter<T: ArenaAllocatable, I: IntoIterator<Item = T>>(\n-        &'a self,\n-        iter: I,\n-    ) -> &'a mut [T] {\n-        if !mem::needs_drop::<T>() {\n-            return self.dropless.alloc_from_iter(iter);\n-        }\n-        match <T as ArenaField<'tcx>>::arena(self) {\n-            Some(arena) => arena.alloc_from_iter(iter),\n-            None => unsafe { self.drop.alloc_from_iter(iter) },\n-        }\n-    }\n-}\n-\n-/// Calls the destructor for an object when dropped.\n-struct DropType {\n-    drop_fn: unsafe fn(*mut u8),\n-    obj: *mut u8,\n-}\n-\n-unsafe fn drop_for_type<T>(to_drop: *mut u8) {\n-    std::ptr::drop_in_place(to_drop as *mut T)\n-}\n-\n-impl Drop for DropType {\n-    fn drop(&mut self) {\n-        unsafe { (self.drop_fn)(self.obj) }\n-    }\n-}\n-\n-/// An arena which can be used to allocate any type.\n-/// Allocating in this arena is unsafe since the type system\n-/// doesn't know which types it contains. In order to\n-/// allocate safely, you must store a PhantomData<T>\n-/// alongside this arena for each type T you allocate.\n-#[derive(Default)]\n-struct DropArena {\n-    /// A list of destructors to run when the arena drops.\n-    /// Ordered so `destructors` gets dropped before the arena\n-    /// since its destructor can reference memory in the arena.\n-    destructors: RefCell<Vec<DropType>>,\n-    arena: DroplessArena,\n-}\n-\n-impl DropArena {\n-    #[inline]\n-    unsafe fn alloc<T>(&self, object: T) -> &mut T {\n-        let mem =\n-            self.arena.alloc_raw(mem::size_of::<T>(), mem::align_of::<T>()) as *mut _ as *mut T;\n-        // Write into uninitialized memory.\n-        ptr::write(mem, object);\n-        let result = &mut *mem;\n-        // Record the destructor after doing the allocation as that may panic\n-        // and would cause `object`'s destuctor to run twice if it was recorded before\n-        self.destructors\n-            .borrow_mut()\n-            .push(DropType { drop_fn: drop_for_type::<T>, obj: result as *mut T as *mut u8 });\n-        result\n-    }\n-\n-    #[inline]\n-    unsafe fn alloc_from_iter<T, I: IntoIterator<Item = T>>(&self, iter: I) -> &mut [T] {\n-        let mut vec: SmallVec<[_; 8]> = iter.into_iter().collect();\n-        if vec.is_empty() {\n-            return &mut [];\n-        }\n-        let len = vec.len();\n-\n-        let start_ptr = self\n-            .arena\n-            .alloc_raw(len.checked_mul(mem::size_of::<T>()).unwrap(), mem::align_of::<T>())\n-            as *mut _ as *mut T;\n-\n-        let mut destructors = self.destructors.borrow_mut();\n-        // Reserve space for the destructors so we can't panic while adding them\n-        destructors.reserve(len);\n-\n-        // Move the content to the arena by copying it and then forgetting\n-        // the content of the SmallVec\n-        vec.as_ptr().copy_to_nonoverlapping(start_ptr, len);\n-        mem::forget(vec.drain(..));\n-\n-        // Record the destructors after doing the allocation as that may panic\n-        // and would cause `object`'s destuctor to run twice if it was recorded before\n-        for i in 0..len {\n-            destructors.push(DropType {\n-                drop_fn: drop_for_type::<T>,\n-                obj: start_ptr.offset(i as isize) as *mut u8,\n-            });\n-        }\n-\n-        slice::from_raw_parts_mut(start_ptr, len)\n-    }\n-}\n+arena_types!(arena::declare_arena, [], 'tcx);"}, {"sha": "eb8e57743b8f81c5ad984b4904f535ec67c94887", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "patch": "@@ -1,7 +1,4 @@\n use self::collector::NodeCollector;\n-pub use self::definitions::{\n-    DefKey, DefPath, DefPathData, DefPathHash, Definitions, DisambiguatedDefPathData,\n-};\n \n use crate::hir::{Owner, OwnerNodes};\n use crate::ty::query::Providers;\n@@ -10,6 +7,9 @@ use rustc_ast::ast::{self, Name, NodeId};\n use rustc_data_structures::svh::Svh;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n+pub use rustc_hir::definitions;\n+pub use rustc_hir::definitions::{DefKey, DefPath, DefPathData, DefPathHash};\n+pub use rustc_hir::definitions::{Definitions, DisambiguatedDefPathData};\n use rustc_hir::intravisit;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::print::Nested;\n@@ -23,7 +23,6 @@ use rustc_target::spec::abi::Abi;\n \n pub mod blocks;\n mod collector;\n-pub mod definitions;\n mod hir_id_validator;\n pub use hir_id_validator::check_crate;\n "}, {"sha": "53061436de07a72d1abf647c451bb061f15f4c6d", "filename": "src/librustc/lint.rs", "status": "modified", "additions": 1, "deletions": 43, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint.rs?ref=37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "patch": "@@ -3,7 +3,7 @@ use std::cmp;\n use crate::ich::StableHashingContext;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_errors::{pluralize, Applicability, DiagnosticBuilder, DiagnosticId};\n+use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n use rustc_hir::HirId;\n use rustc_session::lint::{builtin, Level, Lint, LintId};\n use rustc_session::{DiagnosticMessageId, Session};\n@@ -350,45 +350,3 @@ pub fn in_external_macro(sess: &Session, span: Span) -> bool {\n         ExpnKind::Macro(..) => true, // definitely a plugin\n     }\n }\n-\n-pub fn add_elided_lifetime_in_path_suggestion(\n-    sess: &Session,\n-    db: &mut DiagnosticBuilder<'_>,\n-    n: usize,\n-    path_span: Span,\n-    incl_angl_brckt: bool,\n-    insertion_span: Span,\n-    anon_lts: String,\n-) {\n-    let (replace_span, suggestion) = if incl_angl_brckt {\n-        (insertion_span, anon_lts)\n-    } else {\n-        // When possible, prefer a suggestion that replaces the whole\n-        // `Path<T>` expression with `Path<'_, T>`, rather than inserting `'_, `\n-        // at a point (which makes for an ugly/confusing label)\n-        if let Ok(snippet) = sess.source_map().span_to_snippet(path_span) {\n-            // But our spans can get out of whack due to macros; if the place we think\n-            // we want to insert `'_` isn't even within the path expression's span, we\n-            // should bail out of making any suggestion rather than panicking on a\n-            // subtract-with-overflow or string-slice-out-out-bounds (!)\n-            // FIXME: can we do better?\n-            if insertion_span.lo().0 < path_span.lo().0 {\n-                return;\n-            }\n-            let insertion_index = (insertion_span.lo().0 - path_span.lo().0) as usize;\n-            if insertion_index > snippet.len() {\n-                return;\n-            }\n-            let (before, after) = snippet.split_at(insertion_index);\n-            (path_span, format!(\"{}{}{}\", before, anon_lts, after))\n-        } else {\n-            (insertion_span, anon_lts)\n-        }\n-    };\n-    db.span_suggestion(\n-        replace_span,\n-        &format!(\"indicate the anonymous lifetime{}\", pluralize!(n)),\n-        suggestion,\n-        Applicability::MachineApplicable,\n-    );\n-}"}, {"sha": "cbbc937ed7d31427975605919f0e3459ca1a7494", "filename": "src/librustc/ty/codec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcodec.rs?ref=37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "patch": "@@ -396,6 +396,7 @@ macro_rules! implement_ty_decoder {\n             // the caller to pick any lifetime for `'tcx`, including `'static`,\n             // by using the unspecialized proxies to them.\n \n+            rustc_hir::arena_types!(impl_arena_allocatable_decoders, [$DecoderName [$($typaram),*]], 'tcx);\n             arena_types!(impl_arena_allocatable_decoders, [$DecoderName [$($typaram),*]], 'tcx);\n \n             impl<$($typaram),*> SpecializedDecoder<CrateNum>"}, {"sha": "95d4c09dac3110e3c9ef6de7d34e1375e56d5ff2", "filename": "src/librustc_ast/crate_disambiguator.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_ast%2Fcrate_disambiguator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_ast%2Fcrate_disambiguator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fcrate_disambiguator.rs?ref=37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "patch": "@@ -0,0 +1,35 @@\n+// This is here because `rustc_session` wants to refer to it,\n+// and so does `rustc_hir`, but `rustc_hir` shouldn't refer to `rustc_session`.\n+\n+use rustc_data_structures::fingerprint::Fingerprint;\n+use rustc_data_structures::{base_n, impl_stable_hash_via_hash};\n+\n+use std::fmt;\n+\n+/// Hash value constructed out of all the `-C metadata` arguments passed to the\n+/// compiler. Together with the crate-name forms a unique global identifier for\n+/// the crate.\n+#[derive(Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Clone, Copy, RustcEncodable, RustcDecodable)]\n+pub struct CrateDisambiguator(Fingerprint);\n+\n+impl CrateDisambiguator {\n+    pub fn to_fingerprint(self) -> Fingerprint {\n+        self.0\n+    }\n+}\n+\n+impl fmt::Display for CrateDisambiguator {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {\n+        let (a, b) = self.0.as_value();\n+        let as_u128 = a as u128 | ((b as u128) << 64);\n+        f.write_str(&base_n::encode(as_u128, base_n::CASE_INSENSITIVE))\n+    }\n+}\n+\n+impl From<Fingerprint> for CrateDisambiguator {\n+    fn from(fingerprint: Fingerprint) -> CrateDisambiguator {\n+        CrateDisambiguator(fingerprint)\n+    }\n+}\n+\n+impl_stable_hash_via_hash!(CrateDisambiguator);"}, {"sha": "a93e0fcbd71934bb5c51ac8f05c913d69b54e2aa", "filename": "src/librustc_ast/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_ast%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_ast%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Flib.rs?ref=37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "patch": "@@ -40,6 +40,7 @@ pub mod util {\n pub mod ast;\n pub mod attr;\n pub use attr::{with_default_globals, with_globals, GLOBALS};\n+pub mod crate_disambiguator;\n pub mod entry;\n pub mod expand;\n pub mod mut_visit;"}, {"sha": "b477b75db5adc4a6368587e3e61dd0582de49261", "filename": "src/librustc_ast_lowering/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_ast_lowering%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_ast_lowering%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2FCargo.toml?ref=37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "patch": "@@ -10,8 +10,8 @@ path = \"lib.rs\"\n doctest = false\n \n [dependencies]\n+arena = { path = \"../libarena\" }\n log = { version = \"0.4\", features = [\"release_max_level_info\", \"std\"] }\n-rustc = { path = \"../librustc\" }\n rustc_ast_pretty = { path = \"../librustc_ast_pretty\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_target = { path = \"../librustc_target\" }"}, {"sha": "239dec9e9746bf45e43181ba1a30212976242b84", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "patch": "@@ -1,6 +1,5 @@\n use super::{ImplTraitContext, LoweringContext, ParamMode, ParenthesizedGenericArgs};\n \n-use rustc::bug;\n use rustc_ast::ast::*;\n use rustc_ast::attr;\n use rustc_ast::ptr::P as AstP;\n@@ -757,7 +756,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 Some(movability)\n             }\n             Some(hir::GeneratorKind::Async(_)) => {\n-                bug!(\"non-`async` closure body turned `async` during lowering\");\n+                panic!(\"non-`async` closure body turned `async` during lowering\");\n             }\n             None => {\n                 if movability == Movability::Static {"}, {"sha": "e66770a5bee35da598ab0508ecc86b04aeb6c01e", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "patch": "@@ -1,8 +1,7 @@\n use super::{AnonymousLifetimeMode, LoweringContext, ParamMode};\n use super::{ImplTraitContext, ImplTraitPosition, ImplTraitTypeIdVisitor};\n+use crate::Arena;\n \n-use rustc::arena::Arena;\n-use rustc::bug;\n use rustc_ast::ast::*;\n use rustc_ast::attr;\n use rustc_ast::node_id::NodeMap;\n@@ -432,7 +431,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 self.lower_param_bounds(bounds, ImplTraitContext::disallowed()),\n             ),\n             ItemKind::MacroDef(..) | ItemKind::MacCall(..) => {\n-                bug!(\"`TyMac` should have been expanded by now\")\n+                panic!(\"`TyMac` should have been expanded by now\")\n             }\n         }\n \n@@ -784,7 +783,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n                 (generics, kind)\n             }\n-            AssocItemKind::MacCall(..) => bug!(\"macro item shouldn't exist at this point\"),\n+            AssocItemKind::MacCall(..) => panic!(\"macro item shouldn't exist at this point\"),\n         };\n \n         hir::TraitItem {\n@@ -865,7 +864,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 };\n                 (generics, kind)\n             }\n-            AssocItemKind::MacCall(..) => bug!(\"`TyMac` should have been expanded by now\"),\n+            AssocItemKind::MacCall(..) => panic!(\"`TyMac` should have been expanded by now\"),\n         };\n \n         hir::ImplItem {"}, {"sha": "68cb1f8585fc721e7dc76aebde1de89f18bbf993", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "patch": "@@ -32,12 +32,10 @@\n \n #![feature(array_value_iter)]\n #![feature(crate_visibility_modifier)]\n+#![feature(marker_trait_attr)]\n+#![feature(specialization)]\n #![recursion_limit = \"256\"]\n \n-use rustc::arena::Arena;\n-use rustc::dep_graph::DepGraph;\n-use rustc::hir::map::definitions::{DefKey, DefPathData, Definitions};\n-use rustc::{bug, span_bug};\n use rustc_ast::ast;\n use rustc_ast::ast::*;\n use rustc_ast::attr;\n@@ -54,6 +52,7 @@ use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace, PartialRes, PerNS, Res};\n use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_hir::definitions::{DefKey, DefPathData, Definitions};\n use rustc_hir::intravisit;\n use rustc_hir::{ConstArg, GenericArg, ParamName};\n use rustc_index::vec::IndexVec;\n@@ -85,6 +84,8 @@ mod path;\n \n const HIR_ID_COUNTER_LOCKED: u32 = 0xFFFFFFFF;\n \n+rustc_hir::arena_types!(::arena::declare_arena, [], 'tcx);\n+\n struct LoweringContext<'a, 'hir: 'a> {\n     crate_root: Option<Symbol>,\n \n@@ -259,17 +260,11 @@ impl<'a> ImplTraitContext<'_, 'a> {\n \n pub fn lower_crate<'a, 'hir>(\n     sess: &'a Session,\n-    dep_graph: &'a DepGraph,\n     krate: &'a Crate,\n     resolver: &'a mut dyn Resolver,\n     nt_to_tokenstream: NtToTokenstream,\n     arena: &'hir Arena<'hir>,\n ) -> hir::Crate<'hir> {\n-    // We're constructing the HIR here; we don't care what we will\n-    // read, since we haven't even constructed the *input* to\n-    // incr. comp. yet.\n-    dep_graph.assert_ignored();\n-\n     let _prof_timer = sess.prof.verbose_generic_activity(\"hir_lowering\");\n \n     LoweringContext {\n@@ -672,7 +667,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn expect_full_res(&mut self, id: NodeId) -> Res<NodeId> {\n         self.resolver.get_partial_res(id).map_or(Res::Err, |pr| {\n             if pr.unresolved_segments() != 0 {\n-                bug!(\"path not fully resolved: {:?}\", pr);\n+                panic!(\"path not fully resolved: {:?}\", pr);\n             }\n             pr.base_res()\n         })\n@@ -1340,7 +1335,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     }\n                 }\n             }\n-            TyKind::MacCall(_) => bug!(\"`TyKind::MacCall` should have been expanded by now\"),\n+            TyKind::MacCall(_) => panic!(\"`TyKind::MacCall` should have been expanded by now\"),\n             TyKind::CVarArgs => {\n                 self.sess.delay_span_bug(\n                     t.span,\n@@ -1575,7 +1570,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         hir::LifetimeName::Param(param_name) => {\n                             (param_name, hir::LifetimeParamKind::Explicit)\n                         }\n-                        _ => bug!(\"expected `LifetimeName::Param` or `ParamName::Plain`\"),\n+                        _ => panic!(\"expected `LifetimeName::Param` or `ParamName::Plain`\"),\n                     };\n \n                     self.output_lifetime_params.push(hir::GenericParam {\n@@ -2096,7 +2091,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     | hir::LifetimeName::Underscore\n                     | hir::LifetimeName::Static => hir::ParamName::Plain(lt.name.ident()),\n                     hir::LifetimeName::ImplicitObjectLifetimeDefault => {\n-                        span_bug!(\n+                        self.sess.diagnostic().span_bug(\n                             param.ident.span,\n                             \"object-lifetime-default should not occur here\",\n                         );\n@@ -2163,7 +2158,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     ) -> hir::TraitRef<'hir> {\n         let path = match self.lower_qpath(p.ref_id, &None, &p.path, ParamMode::Explicit, itctx) {\n             hir::QPath::Resolved(None, path) => path,\n-            qpath => bug!(\"lower_trait_ref: unexpected QPath `{:?}`\", qpath),\n+            qpath => panic!(\"lower_trait_ref: unexpected QPath `{:?}`\", qpath),\n         };\n         hir::TraitRef { path, hir_ref_id: self.lower_node_id(p.ref_id) }\n     }"}, {"sha": "3c529603d6c62fb24103f7568a0c3d282f78e390", "filename": "src/librustc_ast_lowering/path.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_ast_lowering%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_ast_lowering%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fpath.rs?ref=37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "patch": "@@ -1,7 +1,6 @@\n use super::{AnonymousLifetimeMode, ImplTraitContext, LoweringContext, ParamMode};\n use super::{GenericArgsCtor, ParenthesizedGenericArgs};\n \n-use rustc::span_bug;\n use rustc_ast::ast::{self, *};\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n@@ -163,12 +162,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n \n         // We should've returned in the for loop above.\n-        span_bug!(\n+\n+        self.sess.diagnostic().span_bug(\n             p.span,\n-            \"lower_qpath: no final extension segment in {}..{}\",\n-            proj_start,\n-            p.segments.len()\n-        )\n+            &format!(\n+                \"lower_qpath: no final extension segment in {}..{}\",\n+                proj_start,\n+                p.segments.len()\n+            ),\n+        );\n     }\n \n     crate fn lower_path_extra(\n@@ -304,7 +306,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             E0726,\n                             \"implicit elided lifetime not allowed here\"\n                         );\n-                        rustc::lint::add_elided_lifetime_in_path_suggestion(\n+                        rustc_session::lint::add_elided_lifetime_in_path_suggestion(\n                             &self.sess,\n                             &mut err,\n                             expected_lifetimes,"}, {"sha": "b3682ea5a807cac6560659eecc24bff1096c78ca", "filename": "src/librustc_hir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2FCargo.toml?ref=37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "patch": "@@ -20,4 +20,5 @@ rustc_errors = { path = \"../librustc_errors\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc_ast = { path = \"../librustc_ast\" }\n lazy_static = \"1\"\n+log = { version = \"0.4\", features = [\"release_max_level_info\", \"std\"] }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "978565a4c39d740a88103f0dde93286cfd94e00c", "filename": "src/librustc_hir/arena.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_hir%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_hir%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Farena.rs?ref=37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "patch": "@@ -0,0 +1,49 @@\n+/// This declares a list of types which can be allocated by `Arena`.\n+///\n+/// The `few` modifier will cause allocation to use the shared arena and recording the destructor.\n+/// This is faster and more memory efficient if there's only a few allocations of the type.\n+/// Leaving `few` out will cause the type to get its own dedicated `TypedArena` which is\n+/// faster and more memory efficient if there is lots of allocations.\n+///\n+/// Specifying the `decode` modifier will add decode impls for &T and &[T] where T is the type\n+/// listed. These impls will appear in the implement_ty_decoder! macro.\n+#[macro_export]\n+macro_rules! arena_types {\n+    ($macro:path, $args:tt, $tcx:lifetime) => (\n+        $macro!($args, [\n+            // HIR types\n+            [few] hir_krate: rustc_hir::Crate<$tcx>,\n+            [] arm: rustc_hir::Arm<$tcx>,\n+            [] attribute: rustc_ast::ast::Attribute,\n+            [] block: rustc_hir::Block<$tcx>,\n+            [] bare_fn_ty: rustc_hir::BareFnTy<$tcx>,\n+            [few] global_asm: rustc_hir::GlobalAsm,\n+            [] generic_arg: rustc_hir::GenericArg<$tcx>,\n+            [] generic_args: rustc_hir::GenericArgs<$tcx>,\n+            [] generic_bound: rustc_hir::GenericBound<$tcx>,\n+            [] generic_param: rustc_hir::GenericParam<$tcx>,\n+            [] expr: rustc_hir::Expr<$tcx>,\n+            [] field: rustc_hir::Field<$tcx>,\n+            [] field_pat: rustc_hir::FieldPat<$tcx>,\n+            [] fn_decl: rustc_hir::FnDecl<$tcx>,\n+            [] foreign_item: rustc_hir::ForeignItem<$tcx>,\n+            [] impl_item_ref: rustc_hir::ImplItemRef<$tcx>,\n+            [] inline_asm: rustc_hir::InlineAsm<$tcx>,\n+            [] local: rustc_hir::Local<$tcx>,\n+            [few] macro_def: rustc_hir::MacroDef<$tcx>,\n+            [] param: rustc_hir::Param<$tcx>,\n+            [] pat: rustc_hir::Pat<$tcx>,\n+            [] path: rustc_hir::Path<$tcx>,\n+            [] path_segment: rustc_hir::PathSegment<$tcx>,\n+            [] poly_trait_ref: rustc_hir::PolyTraitRef<$tcx>,\n+            [] qpath: rustc_hir::QPath<$tcx>,\n+            [] stmt: rustc_hir::Stmt<$tcx>,\n+            [] struct_field: rustc_hir::StructField<$tcx>,\n+            [] trait_item_ref: rustc_hir::TraitItemRef,\n+            [] ty: rustc_hir::Ty<$tcx>,\n+            [] type_binding: rustc_hir::TypeBinding<$tcx>,\n+            [] variant: rustc_hir::Variant<$tcx>,\n+            [] where_predicate: rustc_hir::WherePredicate<$tcx>,\n+        ], $tcx);\n+    )\n+}"}, {"sha": "3b86dd42a68b9c5fbf415a2f8f59ff2e423b95ad", "filename": "src/librustc_hir/definitions.rs", "status": "renamed", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_hir%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_hir%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fdefinitions.rs?ref=37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "patch": "@@ -4,22 +4,24 @@\n //! There are also some rather random cases (like const initializer\n //! expressions) that are mostly just leftovers.\n \n+pub use crate::def_id::DefPathHash;\n+use crate::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use crate::hir;\n+use crate::hir_id::DUMMY_HIR_ID;\n+\n use rustc_ast::ast;\n+use rustc_ast::crate_disambiguator::CrateDisambiguator;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::StableHasher;\n-use rustc_hir as hir;\n-use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_index::vec::IndexVec;\n-use rustc_session::CrateDisambiguator;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n \n+use log::debug;\n use std::fmt::Write;\n use std::hash::Hash;\n \n-pub use rustc_hir::def_id::DefPathHash;\n-\n /// The `DefPathTable` maps `DefIndex`es to `DefKey`s and vice versa.\n /// Internally the `DefPathTable` holds a tree of `DefKey`s, where each `DefKey`\n /// stores the `DefIndex` of its parent.\n@@ -345,7 +347,7 @@ impl Definitions {\n     pub fn as_local_hir_id(&self, def_id: DefId) -> Option<hir::HirId> {\n         if let Some(def_id) = def_id.as_local() {\n             let hir_id = self.local_def_id_to_hir_id(def_id);\n-            if hir_id != hir::DUMMY_HIR_ID { Some(hir_id) } else { None }\n+            if hir_id != DUMMY_HIR_ID { Some(hir_id) } else { None }\n         } else {\n             None\n         }", "previous_filename": "src/librustc/hir/map/definitions.rs"}, {"sha": "fbb3d6b2af37ca9f3ce065b4d76a62a83f4ced6f", "filename": "src/librustc_hir/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_hir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_hir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flib.rs?ref=37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "patch": "@@ -13,7 +13,9 @@\n #[macro_use]\n extern crate rustc_data_structures;\n \n+mod arena;\n pub mod def;\n+pub mod definitions;\n pub use rustc_span::def_id;\n mod hir;\n pub mod hir_id;"}, {"sha": "d3ed2fc89c166903675d8a71c96a1aa30f0d063e", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "patch": "@@ -437,12 +437,16 @@ pub fn lower_to_hir<'res, 'tcx>(\n     resolver: &'res mut Resolver<'_>,\n     dep_graph: &'res DepGraph,\n     krate: &'res ast::Crate,\n-    arena: &'tcx Arena<'tcx>,\n+    arena: &'tcx rustc_ast_lowering::Arena<'tcx>,\n ) -> Crate<'tcx> {\n+    // We're constructing the HIR here; we don't care what we will\n+    // read, since we haven't even constructed the *input* to\n+    // incr. comp. yet.\n+    dep_graph.assert_ignored();\n+\n     // Lower AST to HIR.\n     let hir_crate = rustc_ast_lowering::lower_crate(\n         sess,\n-        &dep_graph,\n         &krate,\n         resolver,\n         rustc_parse::nt_to_tokenstream,"}, {"sha": "b0eeb57173fa33532bde0e5cec707bee68d7b7ef", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "patch": "@@ -68,6 +68,7 @@ pub struct Queries<'tcx> {\n     gcx: Once<GlobalCtxt<'tcx>>,\n \n     arena: WorkerLocal<Arena<'tcx>>,\n+    hir_arena: WorkerLocal<rustc_ast_lowering::Arena<'tcx>>,\n \n     dep_graph_future: Query<Option<DepGraphFuture>>,\n     parse: Query<ast::Crate>,\n@@ -87,6 +88,7 @@ impl<'tcx> Queries<'tcx> {\n             compiler,\n             gcx: Once::new(),\n             arena: WorkerLocal::new(|_| Arena::default()),\n+            hir_arena: WorkerLocal::new(|_| rustc_ast_lowering::Arena::default()),\n             dep_graph_future: Default::default(),\n             parse: Default::default(),\n             crate_name: Default::default(),\n@@ -218,10 +220,10 @@ impl<'tcx> Queries<'tcx> {\n                     resolver,\n                     &*self.dep_graph()?.peek(),\n                     &krate,\n-                    &self.arena,\n+                    &self.hir_arena,\n                 ))\n             })?;\n-            let hir = self.arena.alloc(hir);\n+            let hir = self.hir_arena.alloc(hir);\n             Ok((hir, Steal::new(BoxedResolver::to_resolver_outputs(resolver))))\n         })\n     }"}, {"sha": "257b179d6ba6d5f63aeb01d65e2874a19bbba1a5", "filename": "src/librustc_lint/context.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_lint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_lint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fcontext.rs?ref=37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "patch": "@@ -18,8 +18,6 @@ use self::TargetLint::*;\n \n use crate::levels::LintLevelsBuilder;\n use crate::passes::{EarlyLintPassObject, LateLintPassObject};\n-use rustc::hir::map::definitions::{DefPathData, DisambiguatedDefPathData};\n-use rustc::lint::add_elided_lifetime_in_path_suggestion;\n use rustc::lint::LintDiagnosticBuilder;\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::stability;\n@@ -32,7 +30,8 @@ use rustc_data_structures::sync;\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId};\n-use rustc_session::lint::BuiltinLintDiagnostics;\n+use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n+use rustc_session::lint::{add_elided_lifetime_in_path_suggestion, BuiltinLintDiagnostics};\n use rustc_session::lint::{FutureIncompatibleInfo, Level, Lint, LintBuffer, LintId};\n use rustc_session::Session;\n use rustc_span::{symbol::Symbol, MultiSpan, Span, DUMMY_SP};"}, {"sha": "e7e05097a54f4cf718ad3b7730c3bbde5975a47d", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "patch": "@@ -6,8 +6,6 @@ use crate::rmeta::*;\n \n use rustc::dep_graph::{self, DepNode, DepNodeIndex};\n use rustc::hir::exports::Export;\n-use rustc::hir::map::definitions::DefPathTable;\n-use rustc::hir::map::{DefKey, DefPath, DefPathData, DefPathHash};\n use rustc::middle::cstore::{CrateSource, ExternCrate};\n use rustc::middle::cstore::{ForeignModule, LinkagePreference, NativeLibrary};\n use rustc::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n@@ -29,6 +27,8 @@ use rustc_expand::proc_macro::{AttrProcMacro, BangProcMacro, ProcMacroDerive};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::definitions::DefPathTable;\n+use rustc_hir::definitions::{DefKey, DefPath, DefPathData, DefPathHash};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_serialize::{opaque, Decodable, Decoder, SpecializedDecoder};\n use rustc_session::Session;"}, {"sha": "1ac5caf138cc6717716b96eb6bb48adec686f371", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "patch": "@@ -5,8 +5,6 @@ use crate::native_libs;\n use crate::rmeta::{self, encoder};\n \n use rustc::hir::exports::Export;\n-use rustc::hir::map::definitions::DefPathTable;\n-use rustc::hir::map::{DefKey, DefPath, DefPathHash};\n use rustc::middle::cstore::{CrateSource, CrateStore, EncodedMetadata, NativeLibraryKind};\n use rustc::middle::exported_symbols::ExportedSymbol;\n use rustc::middle::stability::DeprecationEntry;\n@@ -19,6 +17,8 @@ use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_data_structures::svh::Svh;\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::definitions::DefPathTable;\n+use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n use rustc_session::{CrateDisambiguator, Session};\n use rustc_span::source_map::{self, Span, Spanned};\n use rustc_span::symbol::Symbol;"}, {"sha": "a3803bc07072c43227b73b07db396a3ca4c6f287", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "patch": "@@ -2,7 +2,6 @@ use crate::rmeta::table::FixedSizeEncoding;\n use crate::rmeta::*;\n \n use log::{debug, trace};\n-use rustc::hir::map::definitions::DefPathTable;\n use rustc::hir::map::Map;\n use rustc::middle::cstore::{EncodedMetadata, ForeignModule, LinkagePreference, NativeLibrary};\n use rustc::middle::dependency_format::Linkage;\n@@ -23,6 +22,7 @@ use rustc_hir as hir;\n use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::DefIdSet;\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::definitions::DefPathTable;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::itemlikevisit::{ItemLikeVisitor, ParItemLikeVisitor};\n use rustc_hir::{AnonConst, GenericParamKind};"}, {"sha": "6253f183cc444d5df4c469aca18537069ad81e0c", "filename": "src/librustc_resolve/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_resolve%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_resolve%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdef_collector.rs?ref=37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "patch": "@@ -1,10 +1,10 @@\n use log::debug;\n-use rustc::hir::map::definitions::*;\n use rustc_ast::ast::*;\n use rustc_ast::token::{self, Token};\n use rustc_ast::visit::{self, FnKind};\n use rustc_expand::expand::AstFragment;\n use rustc_hir::def_id::LocalDefId;\n+use rustc_hir::definitions::*;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;"}, {"sha": "1162cff4e0b2b6a099173dde68fd2f8065a2aff3", "filename": "src/librustc_session/lint.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_session%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_session%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint.rs?ref=37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "patch": "@@ -1,6 +1,7 @@\n pub use self::Level::*;\n use rustc_ast::node_id::{NodeId, NodeMap};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n+use rustc_errors::{pluralize, Applicability, DiagnosticBuilder};\n use rustc_span::edition::Edition;\n use rustc_span::{sym, symbol::Ident, MultiSpan, Span, Symbol};\n \n@@ -367,3 +368,45 @@ macro_rules! declare_lint_pass {\n         $crate::impl_lint_pass!($name => [$($lint),*]);\n     };\n }\n+\n+pub fn add_elided_lifetime_in_path_suggestion(\n+    sess: &crate::Session,\n+    db: &mut DiagnosticBuilder<'_>,\n+    n: usize,\n+    path_span: Span,\n+    incl_angl_brckt: bool,\n+    insertion_span: Span,\n+    anon_lts: String,\n+) {\n+    let (replace_span, suggestion) = if incl_angl_brckt {\n+        (insertion_span, anon_lts)\n+    } else {\n+        // When possible, prefer a suggestion that replaces the whole\n+        // `Path<T>` expression with `Path<'_, T>`, rather than inserting `'_, `\n+        // at a point (which makes for an ugly/confusing label)\n+        if let Ok(snippet) = sess.source_map().span_to_snippet(path_span) {\n+            // But our spans can get out of whack due to macros; if the place we think\n+            // we want to insert `'_` isn't even within the path expression's span, we\n+            // should bail out of making any suggestion rather than panicking on a\n+            // subtract-with-overflow or string-slice-out-out-bounds (!)\n+            // FIXME: can we do better?\n+            if insertion_span.lo().0 < path_span.lo().0 {\n+                return;\n+            }\n+            let insertion_index = (insertion_span.lo().0 - path_span.lo().0) as usize;\n+            if insertion_index > snippet.len() {\n+                return;\n+            }\n+            let (before, after) = snippet.split_at(insertion_index);\n+            (path_span, format!(\"{}{}{}\", before, anon_lts, after))\n+        } else {\n+            (insertion_span, anon_lts)\n+        }\n+    };\n+    db.span_suggestion(\n+        replace_span,\n+        &format!(\"indicate the anonymous lifetime{}\", pluralize!(n)),\n+        suggestion,\n+        Applicability::MachineApplicable,\n+    );\n+}"}, {"sha": "80f59aff69137a09d365b84d8dd8090cff769c1c", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 10, "deletions": 49, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "patch": "@@ -1,41 +1,30 @@\n+use crate::cgu_reuse_tracker::CguReuseTracker;\n use crate::code_stats::CodeStats;\n pub use crate::code_stats::{DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n-\n-use crate::cgu_reuse_tracker::CguReuseTracker;\n-use rustc_data_structures::fingerprint::Fingerprint;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-\n use crate::config::{self, OutputType, PrintRequest, Sanitizer, SwitchWithOptPath};\n use crate::filesearch;\n use crate::lint;\n+use crate::parse::ParseSess;\n use crate::search_paths::{PathKind, SearchPath};\n-use rustc_data_structures::profiling::duration_to_secs_str;\n-use rustc_errors::ErrorReported;\n \n-use rustc_data_structures::base_n;\n-use rustc_data_structures::impl_stable_hash_via_hash;\n+pub use rustc_ast::crate_disambiguator::CrateDisambiguator;\n+use rustc_data_structures::flock;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::jobserver::{self, Client};\n+use rustc_data_structures::profiling::{duration_to_secs_str, SelfProfiler, SelfProfilerRef};\n use rustc_data_structures::sync::{\n     self, AtomicU64, AtomicUsize, Lock, Lrc, Once, OneThread, Ordering, Ordering::SeqCst,\n };\n-\n-use crate::parse::ParseSess;\n use rustc_errors::annotate_snippet_emitter_writer::AnnotateSnippetEmitterWriter;\n-use rustc_errors::emitter::HumanReadableErrorType;\n-use rustc_errors::emitter::{Emitter, EmitterWriter};\n+use rustc_errors::emitter::{Emitter, EmitterWriter, HumanReadableErrorType};\n use rustc_errors::json::JsonEmitter;\n-use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n+use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticId, ErrorReported};\n use rustc_span::edition::Edition;\n-use rustc_span::source_map;\n-use rustc_span::{MultiSpan, Span};\n-\n-use rustc_data_structures::flock;\n-use rustc_data_structures::jobserver::{self, Client};\n-use rustc_data_structures::profiling::{SelfProfiler, SelfProfilerRef};\n+use rustc_span::source_map::{self, MultiSpan, Span};\n use rustc_target::spec::{PanicStrategy, RelroLevel, Target, TargetTriple};\n \n use std::cell::{self, RefCell};\n use std::env;\n-use std::fmt;\n use std::io::Write;\n use std::num::NonZeroU32;\n use std::path::PathBuf;\n@@ -1193,34 +1182,6 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n     }\n }\n \n-/// Hash value constructed out of all the `-C metadata` arguments passed to the\n-/// compiler. Together with the crate-name forms a unique global identifier for\n-/// the crate.\n-#[derive(Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Clone, Copy, RustcEncodable, RustcDecodable)]\n-pub struct CrateDisambiguator(Fingerprint);\n-\n-impl CrateDisambiguator {\n-    pub fn to_fingerprint(self) -> Fingerprint {\n-        self.0\n-    }\n-}\n-\n-impl fmt::Display for CrateDisambiguator {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {\n-        let (a, b) = self.0.as_value();\n-        let as_u128 = a as u128 | ((b as u128) << 64);\n-        f.write_str(&base_n::encode(as_u128, base_n::CASE_INSENSITIVE))\n-    }\n-}\n-\n-impl From<Fingerprint> for CrateDisambiguator {\n-    fn from(fingerprint: Fingerprint) -> CrateDisambiguator {\n-        CrateDisambiguator(fingerprint)\n-    }\n-}\n-\n-impl_stable_hash_via_hash!(CrateDisambiguator);\n-\n /// Holds data on the current incremental compilation session, if there is one.\n #[derive(Debug)]\n pub enum IncrCompSession {"}, {"sha": "e3f9bd78073e93a32674130d502683c2f580107c", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c945dd6178cb520eb1e450a795f8c3b3cc5a3b/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=37c945dd6178cb520eb1e450a795f8c3b3cc5a3b", "patch": "@@ -1,6 +1,5 @@\n mod environment;\n \n-use rustc::hir::map::definitions::DefPathData;\n use rustc::hir::map::Map;\n use rustc::traits::{\n     Clause, Clauses, DomainGoal, FromEnv, GoalKind, PolyDomainGoal, ProgramClause,\n@@ -13,6 +12,7 @@ use rustc_ast::ast;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::definitions::DefPathData;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_span::symbol::sym;\n "}]}