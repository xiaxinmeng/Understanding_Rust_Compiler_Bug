{"sha": "64db7fb115d93672649635b67e94193117e64e02", "node_id": "C_kwDOAAsO6NoAKDY0ZGI3ZmIxMTVkOTM2NzI2NDk2MzViNjdlOTQxOTMxMTdlNjRlMDI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-06T20:16:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-06T20:16:40Z"}, "message": "Rollup merge of #107596 - Kobzol:stage-build-timer, r=Mark-Simulacrum\n\nAdd nicer output to PGO build timer\n\nThis PR modifies the timer used in the PGO build script to contain nicer, hierarchical output of the individual build steps. It's not trivial to test locally, so I'll fire up a dist build right away.\n\nr? ``@Mark-Simulacrum``", "tree": {"sha": "a237c5d70741d6f3ae8abcab5f7786656aef573b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a237c5d70741d6f3ae8abcab5f7786656aef573b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64db7fb115d93672649635b67e94193117e64e02", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj4WAoCRBK7hj4Ov3rIwAA9fMIAB4zbQS4S1WgvzOlD+gpYQXo\noZ+J+0TqhKBI47yJbNj+pPfKKk2I0D+GVqwskHLAnXA0y5wdtAkltSIuurVYKynK\nS9xI7lRWzdA7p8/zlS8yz2SKf3FeDBHDEIWfaoD0T7GG8tlQj08AmBa7EbQsFlac\n/sPR/rfuS/+cdymq5zolasIGnTlS+Eq6TpygHnXS1iuD+dRaFn2y1JS5BWOEcoXp\nFXct9F1TOGL0z1ZoZHSwsZHcfoS47zQpwsytzzQocwIbhGjFR+d7CDgNhvFEZltb\nHBRU6aQ4bZ7fTu8mt0qnZ2IblqRyVnSt02iQO4nyD1rlXit2F6iAacsi9NKivrs=\n=8ftd\n-----END PGP SIGNATURE-----\n", "payload": "tree a237c5d70741d6f3ae8abcab5f7786656aef573b\nparent 800221b5b8f52c59e12e9aae282288c60c87285c\nparent 7f9cfce18e9b4e01af4dd3fa00331bb9e364dcf4\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1675714600 +0100\ncommitter GitHub <noreply@github.com> 1675714600 +0100\n\nRollup merge of #107596 - Kobzol:stage-build-timer, r=Mark-Simulacrum\n\nAdd nicer output to PGO build timer\n\nThis PR modifies the timer used in the PGO build script to contain nicer, hierarchical output of the individual build steps. It's not trivial to test locally, so I'll fire up a dist build right away.\n\nr? ``@Mark-Simulacrum``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64db7fb115d93672649635b67e94193117e64e02", "html_url": "https://github.com/rust-lang/rust/commit/64db7fb115d93672649635b67e94193117e64e02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64db7fb115d93672649635b67e94193117e64e02/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "800221b5b8f52c59e12e9aae282288c60c87285c", "url": "https://api.github.com/repos/rust-lang/rust/commits/800221b5b8f52c59e12e9aae282288c60c87285c", "html_url": "https://github.com/rust-lang/rust/commit/800221b5b8f52c59e12e9aae282288c60c87285c"}, {"sha": "7f9cfce18e9b4e01af4dd3fa00331bb9e364dcf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f9cfce18e9b4e01af4dd3fa00331bb9e364dcf4", "html_url": "https://github.com/rust-lang/rust/commit/7f9cfce18e9b4e01af4dd3fa00331bb9e364dcf4"}], "stats": {"total": 172, "additions": 123, "deletions": 49}, "files": [{"sha": "662c9e36694c652d31f932e668054c5ec35c846f", "filename": "src/ci/stage-build.py", "status": "modified", "additions": 123, "deletions": 49, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/64db7fb115d93672649635b67e94193117e64e02/src%2Fci%2Fstage-build.py", "raw_url": "https://github.com/rust-lang/rust/raw/64db7fb115d93672649635b67e94193117e64e02/src%2Fci%2Fstage-build.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fstage-build.py?ref=64db7fb115d93672649635b67e94193117e64e02", "patch": "@@ -15,10 +15,9 @@\n import time\n import traceback\n import urllib.request\n-from collections import OrderedDict\n from io import StringIO\n from pathlib import Path\n-from typing import Callable, Dict, Iterable, List, Optional, Union\n+from typing import Callable, Dict, Iterable, Iterator, List, Optional, Tuple, Union\n \n PGO_HOST = os.environ[\"PGO_HOST\"]\n \n@@ -204,48 +203,105 @@ def supports_bolt(self) -> bool:\n         return False\n \n \n+def get_timestamp() -> float:\n+    return time.time()\n+\n+\n+Duration = float\n+TimerSection = Union[Duration, \"Timer\"]\n+\n+\n+def iterate_sections(section: TimerSection, name: str, level: int = 0) -> Iterator[Tuple[int, str, Duration]]:\n+    \"\"\"\n+    Hierarchically iterate the sections of a timer, in a depth-first order.\n+    \"\"\"\n+    if isinstance(section, Duration):\n+        yield (level, name, section)\n+    elif isinstance(section, Timer):\n+        yield (level, name, section.total_duration())\n+        for (child_name, child_section) in section.sections:\n+            yield from iterate_sections(child_section, child_name, level=level + 1)\n+    else:\n+        assert False\n+\n+\n class Timer:\n-    def __init__(self):\n-        # We want this dictionary to be ordered by insertion.\n-        # We use `OrderedDict` for compatibility with older Python versions.\n-        self.stages = OrderedDict()\n+    def __init__(self, parent_names: Tuple[str, ...] = ()):\n+        self.sections: List[Tuple[str, TimerSection]] = []\n+        self.section_active = False\n+        self.parent_names = parent_names\n \n     @contextlib.contextmanager\n-    def stage(self, name: str):\n-        assert name not in self.stages\n+    def section(self, name: str) -> \"Timer\":\n+        assert not self.section_active\n+        self.section_active = True\n \n-        start = time.time()\n+        start = get_timestamp()\n         exc = None\n+\n+        child_timer = Timer(parent_names=self.parent_names + (name, ))\n+        full_name = \" > \".join(child_timer.parent_names)\n         try:\n-            LOGGER.info(f\"Stage `{name}` starts\")\n-            yield\n+            LOGGER.info(f\"Section `{full_name}` starts\")\n+            yield child_timer\n         except BaseException as exception:\n             exc = exception\n             raise\n         finally:\n-            end = time.time()\n+            end = get_timestamp()\n             duration = end - start\n-            self.stages[name] = duration\n+\n+            if child_timer.has_children():\n+                self.sections.append((name, child_timer))\n+            else:\n+                self.sections.append((name, duration))\n             if exc is None:\n-                LOGGER.info(f\"Stage `{name}` ended: OK ({duration:.2f}s)\")\n+                LOGGER.info(f\"Section `{full_name}` ended: OK ({duration:.2f}s)\")\n+            else:\n+                LOGGER.info(f\"Section `{full_name}` ended: FAIL ({duration:.2f}s)\")\n+            self.section_active = False\n+\n+    def total_duration(self) -> Duration:\n+        duration = 0\n+        for (_, section) in self.sections:\n+            if isinstance(section, Duration):\n+                duration += section\n             else:\n-                LOGGER.info(f\"Stage `{name}` ended: FAIL ({duration:.2f}s)\")\n+                duration += section.total_duration()\n+        return duration\n+\n+    def has_children(self) -> bool:\n+        return len(self.sections) > 0\n \n     def print_stats(self):\n-        total_duration = sum(self.stages.values())\n+        rows = []\n+        for (child_name, child_section) in self.sections:\n+            for (level, name, duration) in iterate_sections(child_section, child_name, level=0):\n+                label = f\"{' ' * level}{name}:\"\n+                rows.append((label, duration))\n \n-        # 57 is the width of the whole table\n-        divider = \"-\" * 57\n+        # Empty row\n+        rows.append((\"\", \"\"))\n+\n+        total_duration_label = \"Total duration:\"\n+        total_duration = self.total_duration()\n+        rows.append((total_duration_label, humantime(total_duration)))\n+\n+        space_after_label = 2\n+        max_label_length = max(16, max(len(label) for (label, _) in rows)) + space_after_label\n+\n+        table_width = max_label_length + 23\n+        divider = \"-\" * table_width\n \n         with StringIO() as output:\n             print(divider, file=output)\n-            for (name, duration) in self.stages.items():\n-                pct = (duration / total_duration) * 100\n-                name_str = f\"{name}:\"\n-                print(f\"{name_str:<34} {duration:>12.2f}s ({pct:>5.2f}%)\", file=output)\n-\n-            total_duration_label = \"Total duration:\"\n-            print(f\"{total_duration_label:<34} {total_duration:>12.2f}s\", file=output)\n+            for (label, duration) in rows:\n+                if isinstance(duration, Duration):\n+                    pct = (duration / total_duration) * 100\n+                    value = f\"{duration:>12.2f}s ({pct:>5.2f}%)\"\n+                else:\n+                    value = f\"{duration:>{len(total_duration_label) + 7}}\"\n+                print(f\"{label:<{max_label_length}} {value}\", file=output)\n             print(divider, file=output, end=\"\")\n             LOGGER.info(f\"Timer results\\n{output.getvalue()}\")\n \n@@ -265,6 +321,21 @@ def change_cwd(dir: Path):\n         os.chdir(cwd)\n \n \n+def humantime(time_s: float) -> str:\n+    hours = time_s // 3600\n+    time_s = time_s % 3600\n+    minutes = time_s // 60\n+    seconds = time_s % 60\n+\n+    result = \"\"\n+    if hours > 0:\n+        result += f\"{int(hours)}h \"\n+    if minutes > 0:\n+        result += f\"{int(minutes)}m \"\n+    result += f\"{round(seconds)}s\"\n+    return result\n+\n+\n def move_path(src: Path, dst: Path):\n     LOGGER.info(f\"Moving `{src}` to `{dst}`\")\n     shutil.move(src, dst)\n@@ -585,15 +656,16 @@ def execute_build_pipeline(timer: Timer, pipeline: Pipeline, final_build_args: L\n     pipeline.build_rustc_perf()\n \n     # Stage 1: Build rustc + PGO instrumented LLVM\n-    with timer.stage(\"Build rustc (LLVM PGO)\"):\n-        build_rustc(pipeline, args=[\n-            \"--llvm-profile-generate\"\n-        ], env=dict(\n-            LLVM_PROFILE_DIR=str(pipeline.llvm_profile_dir_root() / \"prof-%p\")\n-        ))\n+    with timer.section(\"Stage 1 (LLVM PGO)\") as stage1:\n+        with stage1.section(\"Build rustc and LLVM\"):\n+            build_rustc(pipeline, args=[\n+                \"--llvm-profile-generate\"\n+            ], env=dict(\n+                LLVM_PROFILE_DIR=str(pipeline.llvm_profile_dir_root() / \"prof-%p\")\n+            ))\n \n-    with timer.stage(\"Gather profiles (LLVM PGO)\"):\n-        gather_llvm_profiles(pipeline)\n+        with stage1.section(\"Gather profiles\"):\n+            gather_llvm_profiles(pipeline)\n \n     clear_llvm_files(pipeline)\n     final_build_args += [\n@@ -602,14 +674,15 @@ def execute_build_pipeline(timer: Timer, pipeline: Pipeline, final_build_args: L\n     ]\n \n     # Stage 2: Build PGO instrumented rustc + LLVM\n-    with timer.stage(\"Build rustc (rustc PGO)\"):\n-        build_rustc(pipeline, args=[\n-            \"--rust-profile-generate\",\n-            pipeline.rustc_profile_dir_root()\n-        ])\n+    with timer.section(\"Stage 2 (rustc PGO)\") as stage2:\n+        with stage2.section(\"Build rustc and LLVM\"):\n+            build_rustc(pipeline, args=[\n+                \"--rust-profile-generate\",\n+                pipeline.rustc_profile_dir_root()\n+            ])\n \n-    with timer.stage(\"Gather profiles (rustc PGO)\"):\n-        gather_rustc_profiles(pipeline)\n+        with stage2.section(\"Gather profiles\"):\n+            gather_rustc_profiles(pipeline)\n \n     clear_llvm_files(pipeline)\n     final_build_args += [\n@@ -619,14 +692,15 @@ def execute_build_pipeline(timer: Timer, pipeline: Pipeline, final_build_args: L\n \n     # Stage 3: Build rustc + BOLT instrumented LLVM\n     if pipeline.supports_bolt():\n-        with timer.stage(\"Build rustc (LLVM BOLT)\"):\n-            build_rustc(pipeline, args=[\n-                \"--llvm-profile-use\",\n-                pipeline.llvm_profile_merged_file(),\n-                \"--llvm-bolt-profile-generate\",\n-            ])\n-        with timer.stage(\"Gather profiles (LLVM BOLT)\"):\n-            gather_llvm_bolt_profiles(pipeline)\n+        with timer.section(\"Stage 3 (LLVM BOLT)\") as stage3:\n+            with stage3.section(\"Build rustc and LLVM\"):\n+                build_rustc(pipeline, args=[\n+                    \"--llvm-profile-use\",\n+                    pipeline.llvm_profile_merged_file(),\n+                    \"--llvm-bolt-profile-generate\",\n+                ])\n+            with stage3.section(\"Gather profiles\"):\n+                gather_llvm_bolt_profiles(pipeline)\n \n         clear_llvm_files(pipeline)\n         final_build_args += [\n@@ -635,7 +709,7 @@ def execute_build_pipeline(timer: Timer, pipeline: Pipeline, final_build_args: L\n         ]\n \n     # Stage 4: Build PGO optimized rustc + PGO/BOLT optimized LLVM\n-    with timer.stage(\"Final build\"):\n+    with timer.section(\"Stage 4 (final build)\"):\n         cmd(final_build_args)\n \n "}]}