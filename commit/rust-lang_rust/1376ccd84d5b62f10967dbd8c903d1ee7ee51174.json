{"sha": "1376ccd84d5b62f10967dbd8c903d1ee7ee51174", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNzZjY2Q4NGQ1YjYyZjEwOTY3ZGJkOGM5MDNkMWVlN2VlNTExNzQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-16T21:21:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-16T21:21:52Z"}, "message": "Rollup merge of #64518 - spastorino:while-let-to-iterate-over-proj-slice, r=oli-obk\n\nUse while let slice_pattern instead of carrying an index around\n\nr? @oli-obk", "tree": {"sha": "12f4193064ae6228052f8162a14ea1325f32f651", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12f4193064ae6228052f8162a14ea1325f32f651"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1376ccd84d5b62f10967dbd8c903d1ee7ee51174", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdf/zwCRBK7hj4Ov3rIwAAdHIIADen1tSOAYBsFc8Dx5ez+ncL\nUugqvifw5vtHJVa3ZWwv4baNSr1mMog+4Et+yU2E7Bdl0fiVqtB4rtjnfsBlydtL\nLC7iSUkTIPHcFWEAO6ZWAX3SfvT9l7UsblMw/UDJ1IBSmJY7Y0AW8ups178NBDvG\nsk+NhfD4BlMfMynqS8PNXZuJRor6h3Y2ZTM8Qzh0wsGxJdCxH67tqzxw1XkhnBbo\ns/vH64AIGQdcRLOGdfB1mkyRNiGNU9YsqrQKTEymq6u1AEIqd/B+0gRFTVIXQruE\npaQ4BQOIjSy39uiugyKQ8x+Mga+ju6ks4Gf/osESBKpBX3YPR3srDEV9qZY8LEk=\n=2oTo\n-----END PGP SIGNATURE-----\n", "payload": "tree 12f4193064ae6228052f8162a14ea1325f32f651\nparent a5a7ed63488ebc6d7b1af575972f1f81136b1a72\nparent d1f763f60d47c6777934039f86529e189c1b92a9\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1568668912 +0200\ncommitter GitHub <noreply@github.com> 1568668912 +0200\n\nRollup merge of #64518 - spastorino:while-let-to-iterate-over-proj-slice, r=oli-obk\n\nUse while let slice_pattern instead of carrying an index around\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1376ccd84d5b62f10967dbd8c903d1ee7ee51174", "html_url": "https://github.com/rust-lang/rust/commit/1376ccd84d5b62f10967dbd8c903d1ee7ee51174", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1376ccd84d5b62f10967dbd8c903d1ee7ee51174/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5a7ed63488ebc6d7b1af575972f1f81136b1a72", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5a7ed63488ebc6d7b1af575972f1f81136b1a72", "html_url": "https://github.com/rust-lang/rust/commit/a5a7ed63488ebc6d7b1af575972f1f81136b1a72"}, {"sha": "d1f763f60d47c6777934039f86529e189c1b92a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1f763f60d47c6777934039f86529e189c1b92a9", "html_url": "https://github.com/rust-lang/rust/commit/d1f763f60d47c6777934039f86529e189c1b92a9"}], "stats": {"total": 40, "additions": 24, "deletions": 16}, "files": [{"sha": "81359c6a46e992822ea40fb9266ceb30f3bfa3af", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1376ccd84d5b62f10967dbd8c903d1ee7ee51174/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1376ccd84d5b62f10967dbd8c903d1ee7ee51174/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=1376ccd84d5b62f10967dbd8c903d1ee7ee51174", "patch": "@@ -614,8 +614,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     projection,\n                 } = first_borrowed_place;\n \n-                for (i, elem) in projection.iter().enumerate().rev() {\n-                    let proj_base = &projection[..i];\n+                let mut cursor = &**projection;\n+                while let [proj_base @ .., elem] = cursor {\n+                    cursor = proj_base;\n \n                     match elem {\n                         ProjectionElem::Field(field, _) if union_ty(base, proj_base).is_some() => {\n@@ -637,8 +638,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     projection,\n                 } = second_borrowed_place;\n \n-                for (i, elem) in projection.iter().enumerate().rev() {\n-                    let proj_base = &projection[..i];\n+                let mut cursor = &**projection;\n+                while let [proj_base @ .., elem] = cursor {\n+                    cursor = proj_base;\n \n                     if let ProjectionElem::Field(field, _) = elem {\n                         if let Some(union_ty) = union_ty(base, proj_base) {"}, {"sha": "1d3576244c4afc0d597389a18b5231e0a32fbf6d", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1376ccd84d5b62f10967dbd8c903d1ee7ee51174/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1376ccd84d5b62f10967dbd8c903d1ee7ee51174/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=1376ccd84d5b62f10967dbd8c903d1ee7ee51174", "patch": "@@ -1758,7 +1758,10 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         debug!(\"check_if_assigned_path_is_moved place: {:?}\", place);\n \n         // None case => assigning to `x` does not require `x` be initialized.\n-        for (i, elem) in place.projection.iter().enumerate().rev() {\n+        let mut cursor = &*place.projection;\n+        while let [proj_base @ .., elem] = cursor {\n+            cursor = proj_base;\n+\n             match elem {\n                 ProjectionElem::Index(_/*operand*/) |\n                 ProjectionElem::ConstantIndex { .. } |\n@@ -1771,8 +1774,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n                 // assigning to (*P) requires P to be initialized\n                 ProjectionElem::Deref => {\n-                    let proj_base = &place.projection[..i];\n-\n                     self.check_if_full_path_is_moved(\n                         location, InitializationRequiringAction::Use,\n                         (PlaceRef {\n@@ -1790,7 +1791,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 }\n \n                 ProjectionElem::Field(..) => {\n-                    let proj_base = &place.projection[..i];\n                     // if type of `P` has a dtor, then\n                     // assigning to `P.f` requires `P` itself\n                     // be already initialized"}, {"sha": "62bff3421a0785f25e9d7abd5faa52252ee268e5", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1376ccd84d5b62f10967dbd8c903d1ee7ee51174/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1376ccd84d5b62f10967dbd8c903d1ee7ee51174/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=1376ccd84d5b62f10967dbd8c903d1ee7ee51174", "patch": "@@ -2417,9 +2417,12 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             \"add_reborrow_constraint({:?}, {:?}, {:?})\",\n             location, borrow_region, borrowed_place\n         );\n-        for (i, elem) in borrowed_place.projection.iter().enumerate().rev() {\n+\n+        let mut cursor = &*borrowed_place.projection;\n+        while let [proj_base @ .., elem] = cursor {\n+            cursor = proj_base;\n+\n             debug!(\"add_reborrow_constraint - iteration {:?}\", elem);\n-            let proj_base = &borrowed_place.projection[..i];\n \n             match elem {\n                 ProjectionElem::Deref => {"}, {"sha": "2b0237c7c08b98f98407d5cd7a8f2c2c27baa1f8", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1376ccd84d5b62f10967dbd8c903d1ee7ee51174/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1376ccd84d5b62f10967dbd8c903d1ee7ee51174/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=1376ccd84d5b62f10967dbd8c903d1ee7ee51174", "patch": "@@ -1296,8 +1296,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // Insert a Shallow borrow of the prefixes of any fake borrows.\n         for place in fake_borrows\n         {\n-            for (i, elem) in place.projection.iter().enumerate().rev() {\n-                let proj_base = &place.projection[..i];\n+            let mut cursor = &*place.projection;\n+            while let [proj_base @ .., elem] = cursor {\n+                cursor = proj_base;\n \n                 if let ProjectionElem::Deref = elem {\n                     // Insert a shallow borrow after a deref. For other"}, {"sha": "39aa5c717acc13696687b12dddb5b0a4bd396c9e", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1376ccd84d5b62f10967dbd8c903d1ee7ee51174/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1376ccd84d5b62f10967dbd8c903d1ee7ee51174/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=1376ccd84d5b62f10967dbd8c903d1ee7ee51174", "patch": "@@ -407,8 +407,9 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n         place: &Place<'tcx>,\n         is_mut_use: bool,\n     ) {\n-        for (i, elem) in place.projection.iter().enumerate().rev() {\n-            let proj_base = &place.projection[..i];\n+        let mut cursor = &*place.projection;\n+        while let [proj_base @ .., elem] = cursor {\n+            cursor = proj_base;\n \n             match elem {\n                 ProjectionElem::Field(..) => {"}, {"sha": "a75c1af04f0475b51874cf422494237451d0e939", "filename": "src/librustc_mir/util/alignment.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1376ccd84d5b62f10967dbd8c903d1ee7ee51174/src%2Flibrustc_mir%2Futil%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1376ccd84d5b62f10967dbd8c903d1ee7ee51174/src%2Flibrustc_mir%2Futil%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Falignment.rs?ref=1376ccd84d5b62f10967dbd8c903d1ee7ee51174", "patch": "@@ -38,8 +38,9 @@ fn is_within_packed<'tcx, L>(tcx: TyCtxt<'tcx>, local_decls: &L, place: &Place<'\n where\n     L: HasLocalDecls<'tcx>,\n {\n-    for (i, elem) in place.projection.iter().enumerate().rev() {\n-        let proj_base = &place.projection[..i];\n+    let mut cursor = &*place.projection;\n+    while let [proj_base @ .., elem] = cursor {\n+        cursor = proj_base;\n \n         match elem {\n             // encountered a Deref, which is ABI-aligned"}]}