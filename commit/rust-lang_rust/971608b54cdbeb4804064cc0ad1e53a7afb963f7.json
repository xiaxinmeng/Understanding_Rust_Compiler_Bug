{"sha": "971608b54cdbeb4804064cc0ad1e53a7afb963f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MTYwOGI1NGNkYmViNDgwNDA2NGNjMGFkMWU1M2E3YWZiOTYzZjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-09T04:19:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-09T04:19:25Z"}, "message": "Auto merge of #83956 - estebank:issue-83892, r=varkor\n\nUse a more appropriate span for `;` suggestion\n\nFix #83892.", "tree": {"sha": "601fdcb1aa436cc15f2860ceb543180f0137eaf8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/601fdcb1aa436cc15f2860ceb543180f0137eaf8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/971608b54cdbeb4804064cc0ad1e53a7afb963f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/971608b54cdbeb4804064cc0ad1e53a7afb963f7", "html_url": "https://github.com/rust-lang/rust/commit/971608b54cdbeb4804064cc0ad1e53a7afb963f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/971608b54cdbeb4804064cc0ad1e53a7afb963f7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd56e255c43030d583aa0aa09f7eb92f2d8d1d81", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd56e255c43030d583aa0aa09f7eb92f2d8d1d81", "html_url": "https://github.com/rust-lang/rust/commit/cd56e255c43030d583aa0aa09f7eb92f2d8d1d81"}, {"sha": "650877de45d5b10a6ecd19e27d9ba282e3b6ccd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/650877de45d5b10a6ecd19e27d9ba282e3b6ccd7", "html_url": "https://github.com/rust-lang/rust/commit/650877de45d5b10a6ecd19e27d9ba282e3b6ccd7"}], "stats": {"total": 51, "additions": 42, "deletions": 9}, "files": [{"sha": "37538267b866a23b13fc0cc28e687105b5ec310d", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/971608b54cdbeb4804064cc0ad1e53a7afb963f7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971608b54cdbeb4804064cc0ad1e53a7afb963f7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=971608b54cdbeb4804064cc0ad1e53a7afb963f7", "patch": "@@ -1440,9 +1440,8 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         // as prior return coercions would not be relevant (#57664).\n         let parent_id = fcx.tcx.hir().get_parent_node(id);\n         let fn_decl = if let Some((expr, blk_id)) = expression {\n-            pointing_at_return_type = fcx.suggest_mismatched_types_on_tail(\n-                &mut err, expr, expected, found, cause.span, blk_id,\n-            );\n+            pointing_at_return_type =\n+                fcx.suggest_mismatched_types_on_tail(&mut err, expr, expected, found, blk_id);\n             let parent = fcx.tcx.hir().get(parent_id);\n             if let (Some(cond_expr), true, false) = (\n                 fcx.tcx.hir().get_if_cause(expr.hir_id),"}, {"sha": "991c2ba693d69edc5dbb7736e706cc0478213011", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/971608b54cdbeb4804064cc0ad1e53a7afb963f7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971608b54cdbeb4804064cc0ad1e53a7afb963f7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=971608b54cdbeb4804064cc0ad1e53a7afb963f7", "patch": "@@ -603,7 +603,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         &cause,\n                         &mut |mut err| {\n                             self.suggest_mismatched_types_on_tail(\n-                                &mut err, expr, ty, e_ty, cause.span, target_id,\n+                                &mut err, expr, ty, e_ty, target_id,\n                             );\n                             if let Some(val) = ty_kind_suggestion(ty) {\n                                 let label = destination"}, {"sha": "b758334484535713211619e513ea0623457d840f", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/971608b54cdbeb4804064cc0ad1e53a7afb963f7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971608b54cdbeb4804064cc0ad1e53a7afb963f7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=971608b54cdbeb4804064cc0ad1e53a7afb963f7", "patch": "@@ -41,15 +41,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &'tcx hir::Expr<'tcx>,\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n-        cause_span: Span,\n         blk_id: hir::HirId,\n     ) -> bool {\n         let expr = expr.peel_drop_temps();\n         // If the expression is from an external macro, then do not suggest\n         // adding a semicolon, because there's nowhere to put it.\n         // See issue #81943.\n-        if expr.can_have_side_effects() && !in_external_macro(self.tcx.sess, cause_span) {\n-            self.suggest_missing_semicolon(err, expr, expected, cause_span);\n+        if expr.can_have_side_effects() && !in_external_macro(self.tcx.sess, expr.span) {\n+            self.suggest_missing_semicolon(err, expr, expected);\n         }\n         let mut pointing_at_return_type = false;\n         if let Some((fn_decl, can_suggest)) = self.get_fn_decl(blk_id) {\n@@ -389,7 +388,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err: &mut DiagnosticBuilder<'_>,\n         expression: &'tcx hir::Expr<'tcx>,\n         expected: Ty<'tcx>,\n-        cause_span: Span,\n     ) {\n         if expected.is_unit() {\n             // `BlockTailExpression` only relevant if the tail expr would be\n@@ -404,7 +402,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     if expression.can_have_side_effects() =>\n                 {\n                     err.span_suggestion(\n-                        cause_span.shrink_to_hi(),\n+                        expression.span.shrink_to_hi(),\n                         \"consider using a semicolon here\",\n                         \";\".to_string(),\n                         Applicability::MachineApplicable,"}, {"sha": "dd093a7a0e3127bfc7c81b25becec5cf7b387b78", "filename": "src/test/ui/suggestions/issue-83892.fixed", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/971608b54cdbeb4804064cc0ad1e53a7afb963f7/src%2Ftest%2Fui%2Fsuggestions%2Fissue-83892.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/971608b54cdbeb4804064cc0ad1e53a7afb963f7/src%2Ftest%2Fui%2Fsuggestions%2Fissue-83892.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-83892.fixed?ref=971608b54cdbeb4804064cc0ad1e53a7afb963f7", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+\n+fn func() -> u8 {\n+    0\n+}\n+\n+fn main() {\n+    match () {\n+        () => func() //~ ERROR mismatched types\n+    };\n+}"}, {"sha": "1d56ecee868a1576a0605a03a6c169ff51e81d1e", "filename": "src/test/ui/suggestions/issue-83892.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/971608b54cdbeb4804064cc0ad1e53a7afb963f7/src%2Ftest%2Fui%2Fsuggestions%2Fissue-83892.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971608b54cdbeb4804064cc0ad1e53a7afb963f7/src%2Ftest%2Fui%2Fsuggestions%2Fissue-83892.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-83892.rs?ref=971608b54cdbeb4804064cc0ad1e53a7afb963f7", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+\n+fn func() -> u8 {\n+    0\n+}\n+\n+fn main() {\n+    match () {\n+        () => func() //~ ERROR mismatched types\n+    }\n+}"}, {"sha": "baf6b1447e69dd250e271e6373335045d363b835", "filename": "src/test/ui/suggestions/issue-83892.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/971608b54cdbeb4804064cc0ad1e53a7afb963f7/src%2Ftest%2Fui%2Fsuggestions%2Fissue-83892.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/971608b54cdbeb4804064cc0ad1e53a7afb963f7/src%2Ftest%2Fui%2Fsuggestions%2Fissue-83892.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-83892.stderr?ref=971608b54cdbeb4804064cc0ad1e53a7afb963f7", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-83892.rs:9:15\n+   |\n+LL | fn main() {\n+   |           - expected `()` because of default return type\n+LL |     match () {\n+LL |         () => func()\n+   |               ^^^^^^ expected `()`, found `u8`\n+LL |     }\n+   |      - help: consider using a semicolon here: `;`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}