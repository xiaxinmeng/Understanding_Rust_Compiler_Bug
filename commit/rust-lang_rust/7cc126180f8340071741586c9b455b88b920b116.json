{"sha": "7cc126180f8340071741586c9b455b88b920b116", "node_id": "C_kwDOAAsO6NoAKDdjYzEyNjE4MGY4MzQwMDcxNzQxNTg2YzliNDU1Yjg4YjkyMGIxMTY", "commit": {"author": {"name": "Tom Milligan", "email": "tom@reinfer.io", "date": "2022-07-20T06:46:49Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2022-07-31T16:31:39Z"}, "message": "feat: nicer skip context for macro/attribute", "tree": {"sha": "7208eced252c255e28589d9cc5526bc77ee21884", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7208eced252c255e28589d9cc5526bc77ee21884"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cc126180f8340071741586c9b455b88b920b116", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cc126180f8340071741586c9b455b88b920b116", "html_url": "https://github.com/rust-lang/rust/commit/7cc126180f8340071741586c9b455b88b920b116", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cc126180f8340071741586c9b455b88b920b116/comments", "author": {"login": "tommilligan", "id": 12255914, "node_id": "MDQ6VXNlcjEyMjU1OTE0", "avatar_url": "https://avatars.githubusercontent.com/u/12255914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tommilligan", "html_url": "https://github.com/tommilligan", "followers_url": "https://api.github.com/users/tommilligan/followers", "following_url": "https://api.github.com/users/tommilligan/following{/other_user}", "gists_url": "https://api.github.com/users/tommilligan/gists{/gist_id}", "starred_url": "https://api.github.com/users/tommilligan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tommilligan/subscriptions", "organizations_url": "https://api.github.com/users/tommilligan/orgs", "repos_url": "https://api.github.com/users/tommilligan/repos", "events_url": "https://api.github.com/users/tommilligan/events{/privacy}", "received_events_url": "https://api.github.com/users/tommilligan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7801aac272ce50da191af86bab988284de534be", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7801aac272ce50da191af86bab988284de534be", "html_url": "https://github.com/rust-lang/rust/commit/a7801aac272ce50da191af86bab988284de534be"}], "stats": {"total": 70, "additions": 45, "deletions": 25}, "files": [{"sha": "b1efaa21f27460282268c5b098cabf476f2e5fec", "filename": "src/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cc126180f8340071741586c9b455b88b920b116/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc126180f8340071741586c9b455b88b920b116/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=7cc126180f8340071741586c9b455b88b920b116", "patch": "@@ -337,7 +337,7 @@ impl Rewrite for ast::Attribute {\n         } else {\n             let should_skip = self\n                 .ident()\n-                .map(|s| context.skip_context.skip_attribute(s.name.as_str()))\n+                .map(|s| context.skip_context.attributes.skip(s.name.as_str()))\n                 .unwrap_or(false);\n             let prefix = attr_prefix(self);\n \n@@ -391,7 +391,7 @@ impl Rewrite for [ast::Attribute] {\n \n         // Determine if the source text is annotated with `#[rustfmt::skip::attributes(derive)]`\n         // or `#![rustfmt::skip::attributes(derive)]`\n-        let skip_derives = context.skip_context.skip_attribute(\"derive\");\n+        let skip_derives = context.skip_context.attributes.skip(\"derive\");\n \n         // This is not just a simple map because we need to handle doc comments\n         // (where we take as many doc comment attributes as possible) and possibly"}, {"sha": "1ef5a095bf98165b8697141c8690d6680c603805", "filename": "src/macros.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7cc126180f8340071741586c9b455b88b920b116/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc126180f8340071741586c9b455b88b920b116/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=7cc126180f8340071741586c9b455b88b920b116", "patch": "@@ -157,7 +157,8 @@ pub(crate) fn rewrite_macro(\n ) -> Option<String> {\n     let should_skip = context\n         .skip_context\n-        .skip_macro(context.snippet(mac.path.span));\n+        .macros\n+        .skip(context.snippet(mac.path.span));\n     if should_skip {\n         None\n     } else {"}, {"sha": "4ebbee542a2658df3cccaa5b43e717912a06b97f", "filename": "src/skip.rs", "status": "modified", "additions": 39, "deletions": 20, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/7cc126180f8340071741586c9b455b88b920b116/src%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc126180f8340071741586c9b455b88b920b116/src%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fskip.rs?ref=7cc126180f8340071741586c9b455b88b920b116", "patch": "@@ -2,41 +2,60 @@\n \n use rustc_ast::ast;\n use rustc_ast_pretty::pprust;\n+use std::collections::HashSet;\n \n-/// Take care of skip name stack. You can update it by attributes slice or\n-/// by other context. Query this context to know if you need skip a block.\n+/// Track which blocks of code are to be skipped when formatting.\n+///\n+/// You can update it by:\n+///\n+/// - attributes slice\n+/// - manually feeding values into the underlying contexts\n+///\n+/// Query this context to know if you need skip a block.\n #[derive(Default, Clone)]\n pub(crate) struct SkipContext {\n-    pub(crate) all_macros: bool,\n-    macros: Vec<String>,\n-    attributes: Vec<String>,\n+    pub(crate) macros: SkipNameContext,\n+    pub(crate) attributes: SkipNameContext,\n }\n \n impl SkipContext {\n     pub(crate) fn update_with_attrs(&mut self, attrs: &[ast::Attribute]) {\n-        self.macros.append(&mut get_skip_names(\"macros\", attrs));\n-        self.attributes\n-            .append(&mut get_skip_names(\"attributes\", attrs));\n+        self.macros.append(get_skip_names(\"macros\", attrs));\n+        self.attributes.append(get_skip_names(\"attributes\", attrs));\n     }\n \n-    pub(crate) fn update(&mut self, mut other: SkipContext) {\n-        self.macros.append(&mut other.macros);\n-        self.attributes.append(&mut other.attributes);\n+    pub(crate) fn update(&mut self, other: SkipContext) {\n+        let SkipContext { macros, attributes } = other;\n+        self.macros.update(macros);\n+        self.attributes.update(attributes);\n+    }\n+}\n+\n+/// Track which names to skip.\n+///\n+/// Query this context with a string to know whether to skip it.\n+#[derive(Default, Clone)]\n+pub(crate) struct SkipNameContext {\n+    all: bool,\n+    values: HashSet<String>,\n+}\n+\n+impl SkipNameContext {\n+    pub(crate) fn append(&mut self, values: Vec<String>) {\n+        self.values.extend(values);\n     }\n \n-    pub(crate) fn update_macros<T>(&mut self, other: T)\n-    where\n-        T: IntoIterator<Item = String>,\n-    {\n-        self.macros.extend(other.into_iter());\n+    pub(crate) fn update(&mut self, other: Self) {\n+        self.all = self.all || other.all;\n+        self.values.extend(other.values);\n     }\n \n-    pub(crate) fn skip_macro(&self, name: &str) -> bool {\n-        self.all_macros || self.macros.iter().any(|n| n == name)\n+    pub(crate) fn skip(&self, name: &str) -> bool {\n+        self.all || self.values.contains(name)\n     }\n \n-    pub(crate) fn skip_attribute(&self, name: &str) -> bool {\n-        self.attributes.iter().any(|n| n == name)\n+    pub(crate) fn set_all(&mut self, all: bool) {\n+        self.all = all;\n     }\n }\n "}, {"sha": "4b3ee7f76e1859dca09face5f955a33b2e3baff0", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cc126180f8340071741586c9b455b88b920b116/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc126180f8340071741586c9b455b88b920b116/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=7cc126180f8340071741586c9b455b88b920b116", "patch": "@@ -775,10 +775,10 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         for macro_selector in config.skip_macro_invocations().0 {\n             match macro_selector {\n                 MacroSelector::Name(name) => macro_names.push(name.to_string()),\n-                MacroSelector::All => skip_context.all_macros = true,\n+                MacroSelector::All => skip_context.macros.set_all(true),\n             }\n         }\n-        skip_context.update_macros(macro_names);\n+        skip_context.macros.append(macro_names);\n         FmtVisitor {\n             parent_context: None,\n             parse_sess: parse_session,"}]}