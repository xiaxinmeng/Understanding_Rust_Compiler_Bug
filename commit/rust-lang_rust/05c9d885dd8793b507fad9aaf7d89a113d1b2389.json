{"sha": "05c9d885dd8793b507fad9aaf7d89a113d1b2389", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1YzlkODg1ZGQ4NzkzYjUwN2ZhZDlhYWY3ZDg5YTExM2QxYjIzODk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-22T18:46:04Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-22T18:46:04Z"}, "message": "Change vec slice to use uint, add push/pop/shift/unshift.", "tree": {"sha": "31fe0211fd0925ce81f1da8ad2abae972b061461", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31fe0211fd0925ce81f1da8ad2abae972b061461"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05c9d885dd8793b507fad9aaf7d89a113d1b2389", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05c9d885dd8793b507fad9aaf7d89a113d1b2389", "html_url": "https://github.com/rust-lang/rust/commit/05c9d885dd8793b507fad9aaf7d89a113d1b2389", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05c9d885dd8793b507fad9aaf7d89a113d1b2389/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f80e79efc6feaabea960793af1ff5baa1d2f141", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f80e79efc6feaabea960793af1ff5baa1d2f141", "html_url": "https://github.com/rust-lang/rust/commit/3f80e79efc6feaabea960793af1ff5baa1d2f141"}], "stats": {"total": 63, "additions": 43, "deletions": 20}, "files": [{"sha": "c67061c50d439ab40fcf666afe75b6cb59c5dc49", "filename": "src/lib/_vec.rs", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/05c9d885dd8793b507fad9aaf7d89a113d1b2389/src%2Flib%2F_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c9d885dd8793b507fad9aaf7d89a113d1b2389/src%2Flib%2F_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_vec.rs?ref=05c9d885dd8793b507fad9aaf7d89a113d1b2389", "patch": "@@ -85,19 +85,42 @@ fn print_debug_info[T](vec[T] v) {\n }\n \n // Returns elements from [start..end) from v.\n-fn slice[T](vec[T] v, int start, int end) -> vec[T] {\n-    check (0 <= start);\n+fn slice[T](vec[T] v, uint start, uint end) -> vec[T] {\n     check (start <= end);\n-    check (end <= (len[T](v) as int));\n-    auto result = alloc[T]((end - start) as uint);\n-    let int i = start;\n+    check (end <= len[T](v));\n+    auto result = alloc[T](end - start);\n+    let uint i = start;\n     while (i < end) {\n         result += vec(v.(i));\n-        i += 1;\n+        i += 1u;\n     }\n     ret result;\n }\n \n+fn shift[T](vec[T] v) -> vec[T] {\n+    check(len[T](v) > 0u);\n+    ret slice[T](v, 1u, len[T](v));\n+}\n+\n+fn pop[T](vec[T] v) -> vec[T] {\n+    check(len[T](v) > 0u);\n+    ret slice[T](v, 0u, len[T](v) - 1u);\n+}\n+\n+fn push[T](vec[T] v, &T t) -> vec[T] {\n+    v += t;\n+    ret v;\n+}\n+\n+fn unshift[T](vec[T] v, &T t) -> vec[T] {\n+    auto res = alloc[T](len[T](v) + 1u);\n+    res += t;\n+    for (T t_ in v) {\n+        res += t_;\n+    }\n+    ret res;\n+}\n+\n fn grow[T](&mutable vec[T] v, int n, &T initval) {\n     let int i = n;\n     while (i > 0) {"}, {"sha": "0f32fbc76a7609a00395c181c96cf8f6f9929610", "filename": "src/test/run-pass/lib-vec.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/05c9d885dd8793b507fad9aaf7d89a113d1b2389/src%2Ftest%2Frun-pass%2Flib-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c9d885dd8793b507fad9aaf7d89a113d1b2389/src%2Ftest%2Frun-pass%2Flib-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flib-vec.rs?ref=05c9d885dd8793b507fad9aaf7d89a113d1b2389", "patch": "@@ -1,31 +1,31 @@\n use std;\n \n fn test_init_elt() {\n-  let vec[uint] v = std._vec.init_elt[uint](5 as uint, 3 as uint);\n-  check (std._vec.len[uint](v) == (3 as uint));\n-  check (v.(0) == (5 as uint));\n-  check (v.(1) == (5 as uint));\n-  check (v.(2) == (5 as uint));\n+  let vec[uint] v = std._vec.init_elt[uint](5u, 3u);\n+  check (std._vec.len[uint](v) == 3u);\n+  check (v.(0) == 5u);\n+  check (v.(1) == 5u);\n+  check (v.(2) == 5u);\n }\n \n fn id(uint x) -> uint {\n   ret x;\n }\n fn test_init_fn() {\n   let fn(uint)->uint op = id;\n-  let vec[uint] v = std._vec.init_fn[uint](op, (5 as uint));\n-  check (std._vec.len[uint](v) == (5 as uint));\n-  check (v.(0) == (0 as uint));\n-  check (v.(1) == (1 as uint));\n-  check (v.(2) == (2 as uint));\n-  check (v.(3) == (3 as uint));\n-  check (v.(4) == (4 as uint));\n+  let vec[uint] v = std._vec.init_fn[uint](op, 5u);\n+  check (std._vec.len[uint](v) == 5u);\n+  check (v.(0) == 0u);\n+  check (v.(1) == 1u);\n+  check (v.(2) == 2u);\n+  check (v.(3) == 3u);\n+  check (v.(4) == 4u);\n }\n \n fn test_slice() {\n   let vec[int] v = vec(1,2,3,4,5);\n-  auto v2 = std._vec.slice[int](v, 2, 4);\n-  check (std._vec.len[int](v2) == (2 as uint));\n+  auto v2 = std._vec.slice[int](v, 2u, 4u);\n+  check (std._vec.len[int](v2) == 2u);\n   check (v2.(0) == 3);\n   check (v2.(1) == 4);\n }"}]}