{"sha": "9718639d61b32d4efd2fac330ab1058732b3b758", "node_id": "C_kwDOAAsO6NoAKDk3MTg2MzlkNjFiMzJkNGVmZDJmYWMzMzBhYjEwNTg3MzJiM2I3NTg", "commit": {"author": {"name": "Andrew Straw", "email": "strawman@astraw.com", "date": "2022-04-11T19:17:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-11T19:17:44Z"}, "message": "rust-lang/portable-simd#276: Mention slice methods as_simd() and as_simd_mut()\n\nThis links to a practical suggestion for how to solve the issues brought up in this section.", "tree": {"sha": "d0bb462e5548993f416573e387c8b8ef69d154a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0bb462e5548993f416573e387c8b8ef69d154a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9718639d61b32d4efd2fac330ab1058732b3b758", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiVH7YCRBK7hj4Ov3rIwAAQ+EIABkM63J8jdTUj6WQGovtKjiy\n+g4B1P4cipIpSV+XGzvcdBd4AINYwFqSMkDLwY4ngZk9HRUHQIh9CDQSthbEQD7E\njG94TI3NRy20e59t+twv7LcIHjO/PDfKqAqMt/kuM9ZZwgHcN1hB6yhIm2QXwi/8\nU41CoaHyOYKPfTDlt54wnma0ENaIrUpudalYT/+KcK5L98nN/qAhdRzYZXTkbmuT\nxxVA88Pw1Cf1VV4ltm/I57FQrF2RTk+cjhHRwrZGYKEBq5i60a+DomzXOmw3PHvB\nFhT8/gFf+FGfz068Dakxq1UAGygODyJjhYRuLVzF45rJfhghaF32M0kFSntdJ5c=\n=DSaY\n-----END PGP SIGNATURE-----\n", "payload": "tree d0bb462e5548993f416573e387c8b8ef69d154a7\nparent fcc5ca0f93e751f2e748c7654c78a541c0392575\nauthor Andrew Straw <strawman@astraw.com> 1649704664 +0200\ncommitter GitHub <noreply@github.com> 1649704664 -0700\n\nrust-lang/portable-simd#276: Mention slice methods as_simd() and as_simd_mut()\n\nThis links to a practical suggestion for how to solve the issues brought up in this section."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9718639d61b32d4efd2fac330ab1058732b3b758", "html_url": "https://github.com/rust-lang/rust/commit/9718639d61b32d4efd2fac330ab1058732b3b758", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9718639d61b32d4efd2fac330ab1058732b3b758/comments", "author": {"login": "astraw", "id": 30176, "node_id": "MDQ6VXNlcjMwMTc2", "avatar_url": "https://avatars.githubusercontent.com/u/30176?v=4", "gravatar_id": "", "url": "https://api.github.com/users/astraw", "html_url": "https://github.com/astraw", "followers_url": "https://api.github.com/users/astraw/followers", "following_url": "https://api.github.com/users/astraw/following{/other_user}", "gists_url": "https://api.github.com/users/astraw/gists{/gist_id}", "starred_url": "https://api.github.com/users/astraw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/astraw/subscriptions", "organizations_url": "https://api.github.com/users/astraw/orgs", "repos_url": "https://api.github.com/users/astraw/repos", "events_url": "https://api.github.com/users/astraw/events{/privacy}", "received_events_url": "https://api.github.com/users/astraw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcc5ca0f93e751f2e748c7654c78a541c0392575", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcc5ca0f93e751f2e748c7654c78a541c0392575", "html_url": "https://github.com/rust-lang/rust/commit/fcc5ca0f93e751f2e748c7654c78a541c0392575"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "17ade06ae80f9eaa8e02f78ce100303219c14ff8", "filename": "beginners-guide.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9718639d61b32d4efd2fac330ab1058732b3b758/beginners-guide.md", "raw_url": "https://github.com/rust-lang/rust/raw/9718639d61b32d4efd2fac330ab1058732b3b758/beginners-guide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/beginners-guide.md?ref=9718639d61b32d4efd2fac330ab1058732b3b758", "patch": "@@ -82,5 +82,10 @@ Fortunately, most SIMD types have a fairly predictable size. `i32x4` is bit-equi\n \n However, this is not the same as alignment. Computer architectures generally prefer aligned accesses, especially when moving data between memory and vector registers, and while some support specialized operations that can bend the rules to help with this, unaligned access is still typically slow, or even undefined behavior. In addition, different architectures can require different alignments when interacting with their native SIMD types. For this reason, any `#[repr(simd)]` type has a non-portable alignment. If it is necessary to directly interact with the alignment of these types, it should be via [`mem::align_of`].\n \n+When working with slices, data correctly aligned for SIMD can be acquired using the [`as_simd`] and [`as_simd_mut`] methods of the slice primitive.\n+\n [`mem::transmute`]: https://doc.rust-lang.org/core/mem/fn.transmute.html\n [`mem::align_of`]: https://doc.rust-lang.org/core/mem/fn.align_of.html\n+[`as_simd`]: https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.as_simd\n+[`as_simd_mut`]: https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.as_simd_mut\n+"}]}