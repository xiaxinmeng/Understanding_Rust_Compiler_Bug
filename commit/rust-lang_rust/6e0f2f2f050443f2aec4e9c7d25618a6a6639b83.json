{"sha": "6e0f2f2f050443f2aec4e9c7d25618a6a6639b83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMGYyZjJmMDUwNDQzZjJhZWM0ZTljN2QyNTYxOGE2YTY2MzliODM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-16T23:18:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-16T23:18:12Z"}, "message": "Auto merge of #32284 - jseyfried:name_conflict_diagnostics, r=eddyb\n\nResolve: improve diagnostics for duplicate definitions and imports\n\nThis PR improves and regularizes the diagnostics for duplicate definitions and imports.\n\nAfter this PR, the second of two duplicate definitions/imports will have the following form:\n> a(n) [value|type|module|trait|extern crate] named \\`*name*\\` has already been [defined|imported] in this [module|block|trait|enum]\n\nwith a note referencing this first of the two duplicate definitions/imports:\n> previous [definition|import] of \\`*name*\\` here\n\nThe error indices remain unchanged.\n\nr? @eddyb", "tree": {"sha": "5f17cfdbae34f9cb01a1697b860ca71f21cd46be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f17cfdbae34f9cb01a1697b860ca71f21cd46be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83", "html_url": "https://github.com/rust-lang/rust/commit/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eeb062b8b1a1bb26151bed05ddd16fe55c979ee1", "url": "https://api.github.com/repos/rust-lang/rust/commits/eeb062b8b1a1bb26151bed05ddd16fe55c979ee1", "html_url": "https://github.com/rust-lang/rust/commit/eeb062b8b1a1bb26151bed05ddd16fe55c979ee1"}, {"sha": "b3c626547c16afd48b1500486b721f18983b0720", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3c626547c16afd48b1500486b721f18983b0720", "html_url": "https://github.com/rust-lang/rust/commit/b3c626547c16afd48b1500486b721f18983b0720"}], "stats": {"total": 308, "additions": 134, "deletions": 174}, "files": [{"sha": "08b5e51729013dab28172b63fd54c8d8303c4087", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 30, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=6e0f2f2f050443f2aec4e9c7d25618a6a6639b83", "patch": "@@ -105,36 +105,8 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n     /// otherwise, reports an error.\n     fn define<T: ToNameBinding<'b>>(&self, parent: Module<'b>, name: Name, ns: Namespace, def: T) {\n         let binding = def.to_name_binding();\n-        let old_binding = match parent.try_define_child(name, ns, binding.clone()) {\n-            Ok(()) => return,\n-            Err(old_binding) => old_binding,\n-        };\n-\n-        let span = binding.span.unwrap_or(DUMMY_SP);\n-        if !old_binding.is_extern_crate() && !binding.is_extern_crate() {\n-            // Record an error here by looking up the namespace that had the duplicate\n-            let ns_str = match ns { TypeNS => \"type or module\", ValueNS => \"value\" };\n-            let resolution_error = ResolutionError::DuplicateDefinition(ns_str, name);\n-            let mut err = resolve_struct_error(self, span, resolution_error);\n-\n-            if let Some(sp) = old_binding.span {\n-                let note = format!(\"first definition of {} `{}` here\", ns_str, name);\n-                err.span_note(sp, &note);\n-            }\n-            err.emit();\n-        } else if old_binding.is_extern_crate() && binding.is_extern_crate() {\n-            span_err!(self.session,\n-                      span,\n-                      E0259,\n-                      \"an external crate named `{}` has already been imported into this module\",\n-                      name);\n-        } else {\n-            span_err!(self.session,\n-                      span,\n-                      E0260,\n-                      \"the name `{}` conflicts with an external crate \\\n-                      that has been imported into this module\",\n-                      name);\n+        if let Err(old_binding) = parent.try_define_child(name, ns, binding.clone()) {\n+            self.report_conflict(parent, name, ns, old_binding, &binding);\n         }\n     }\n "}, {"sha": "6313d7b70366a9c9ee516fa7023babea92c81a2c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 55, "deletions": 11, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=6e0f2f2f050443f2aec4e9c7d25618a6a6639b83", "patch": "@@ -183,8 +183,6 @@ pub enum ResolutionError<'a> {\n     UndeclaredLabel(&'a str),\n     /// error E0427: cannot use `ref` binding mode with ...\n     CannotUseRefBindingModeWith(&'a str),\n-    /// error E0428: duplicate definition\n-    DuplicateDefinition(&'a str, Name),\n     /// error E0429: `self` imports are only allowed within a { } list\n     SelfImportsOnlyAllowedWithin,\n     /// error E0430: `self` import can only appear once in the list\n@@ -490,14 +488,6 @@ fn resolve_struct_error<'b, 'a: 'b, 'tcx: 'a>(resolver: &'b Resolver<'a, 'tcx>,\n                              \"cannot use `ref` binding mode with {}\",\n                              descr)\n         }\n-        ResolutionError::DuplicateDefinition(namespace, name) => {\n-            struct_span_err!(resolver.session,\n-                             span,\n-                             E0428,\n-                             \"duplicate definition of {} `{}`\",\n-                             namespace,\n-                             name)\n-        }\n         ResolutionError::SelfImportsOnlyAllowedWithin => {\n             struct_span_err!(resolver.session,\n                              span,\n@@ -3530,8 +3520,62 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             }\n         }\n     }\n-}\n \n+    fn report_conflict(&self,\n+                       parent: Module,\n+                       name: Name,\n+                       ns: Namespace,\n+                       binding: &NameBinding,\n+                       old_binding: &NameBinding) {\n+        // Error on the second of two conflicting names\n+        if old_binding.span.unwrap().lo > binding.span.unwrap().lo {\n+            return self.report_conflict(parent, name, ns, old_binding, binding);\n+        }\n+\n+        let container = match parent.def {\n+            Some(Def::Mod(_)) => \"module\",\n+            Some(Def::Trait(_)) => \"trait\",\n+            None => \"block\",\n+            _ => \"enum\",\n+        };\n+\n+        let (participle, noun) = match old_binding.is_import() || old_binding.is_extern_crate() {\n+            true => (\"imported\", \"import\"),\n+            false => (\"defined\", \"definition\"),\n+        };\n+\n+        let span = binding.span.unwrap();\n+        let msg = {\n+            let kind = match (ns, old_binding.module()) {\n+                (ValueNS, _) => \"a value\",\n+                (TypeNS, Some(module)) if module.extern_crate_id.is_some() => \"an extern crate\",\n+                (TypeNS, Some(module)) if module.is_normal() => \"a module\",\n+                (TypeNS, Some(module)) if module.is_trait() => \"a trait\",\n+                (TypeNS, _) => \"a type\",\n+            };\n+            format!(\"{} named `{}` has already been {} in this {}\",\n+                    kind, name, participle, container)\n+        };\n+\n+        let mut err = match (old_binding.is_extern_crate(), binding.is_extern_crate()) {\n+            (true, true) => struct_span_err!(self.session, span, E0259, \"{}\", msg),\n+            (true, _) | (_, true) if binding.is_import() || old_binding.is_import() =>\n+                struct_span_err!(self.session, span, E0254, \"{}\", msg),\n+            (true, _) | (_, true) => struct_span_err!(self.session, span, E0260, \"{}\", msg),\n+            _ => match (old_binding.is_import(), binding.is_import()) {\n+                (false, false) => struct_span_err!(self.session, span, E0428, \"{}\", msg),\n+                (true, true) => struct_span_err!(self.session, span, E0252, \"{}\", msg),\n+                _ => struct_span_err!(self.session, span, E0255, \"{}\", msg),\n+            },\n+        };\n+\n+        let span = old_binding.span.unwrap();\n+        if span != codemap::DUMMY_SP {\n+            err.span_note(span, &format!(\"previous {} of `{}` here\", noun, name));\n+        }\n+        err.emit();\n+    }\n+}\n \n fn names_to_string(names: &[Name]) -> String {\n     let mut first = true;"}, {"sha": "bca79df7a9194240095aab0c585c8668e76c51d6", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 6, "deletions": 63, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=6e0f2f2f050443f2aec4e9c7d25618a6a6639b83", "patch": "@@ -513,7 +513,8 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                 let imported_binding = directive.import(binding, privacy_error);\n                 let conflict = module_.try_define_child(target, ns, imported_binding);\n                 if let Err(old_binding) = conflict {\n-                    self.report_conflict(target, ns, &directive.import(binding, None), old_binding);\n+                    let binding = &directive.import(binding, None);\n+                    self.resolver.report_conflict(module_, target, ns, binding, old_binding);\n                 }\n             }\n \n@@ -650,67 +651,6 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         return Success(());\n     }\n \n-    fn report_conflict(&mut self,\n-                       name: Name,\n-                       ns: Namespace,\n-                       binding: &NameBinding,\n-                       old_binding: &NameBinding) {\n-        // Error on the second of two conflicting imports\n-        if old_binding.is_import() && binding.is_import() &&\n-           old_binding.span.unwrap().lo > binding.span.unwrap().lo {\n-            self.report_conflict(name, ns, old_binding, binding);\n-            return;\n-        }\n-\n-        if old_binding.is_extern_crate() {\n-            let msg = format!(\"import `{0}` conflicts with imported crate \\\n-                               in this module (maybe you meant `use {0}::*`?)\",\n-                              name);\n-            span_err!(self.resolver.session, binding.span.unwrap(), E0254, \"{}\", &msg);\n-        } else if old_binding.is_import() {\n-            let ns_word = match (ns, old_binding.module()) {\n-                (ValueNS, _) => \"value\",\n-                (TypeNS, Some(module)) if module.is_normal() => \"module\",\n-                (TypeNS, Some(module)) if module.is_trait() => \"trait\",\n-                (TypeNS, _) => \"type\",\n-            };\n-            let mut err = struct_span_err!(self.resolver.session,\n-                                           binding.span.unwrap(),\n-                                           E0252,\n-                                           \"a {} named `{}` has already been imported \\\n-                                            in this module\",\n-                                           ns_word,\n-                                           name);\n-            err.span_note(old_binding.span.unwrap(),\n-                          &format!(\"previous import of `{}` here\", name));\n-            err.emit();\n-        } else if ns == ValueNS { // Check for item conflicts in the value namespace\n-            let mut err = struct_span_err!(self.resolver.session,\n-                                           binding.span.unwrap(),\n-                                           E0255,\n-                                           \"import `{}` conflicts with value in this module\",\n-                                           name);\n-            err.span_note(old_binding.span.unwrap(), \"conflicting value here\");\n-            err.emit();\n-        } else { // Check for item conflicts in the type namespace\n-            let (what, note) = match old_binding.module() {\n-                Some(ref module) if module.is_normal() =>\n-                    (\"existing submodule\", \"note conflicting module here\"),\n-                Some(ref module) if module.is_trait() =>\n-                    (\"trait in this module\", \"note conflicting trait here\"),\n-                _ => (\"type in this module\", \"note conflicting type here\"),\n-            };\n-            let mut err = struct_span_err!(self.resolver.session,\n-                                           binding.span.unwrap(),\n-                                           E0256,\n-                                           \"import `{}` conflicts with {}\",\n-                                           name,\n-                                           what);\n-            err.span_note(old_binding.span.unwrap(), note);\n-            err.emit();\n-        }\n-    }\n-\n     // Miscellaneous post-processing, including recording reexports, recording shadowed traits,\n     // reporting conflicts, reporting the PRIVATE_IN_PUBLIC lint, and reporting unresolved imports.\n     fn finalize_resolutions(&mut self, module: Module<'b>, report_unresolved_imports: bool) {\n@@ -720,7 +660,10 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n \n         let mut reexports = Vec::new();\n         for (&(name, ns), resolution) in module.resolutions.borrow().iter() {\n-            resolution.report_conflicts(|b1, b2| self.report_conflict(name, ns, b1, b2));\n+            resolution.report_conflicts(|b1, b2| {\n+                self.resolver.report_conflict(module, name, ns, b1, b2)\n+            });\n+\n             let binding = match resolution.binding {\n                 Some(binding) => binding,\n                 None => continue,"}, {"sha": "03af0d51ec296350e73ba9aa9cc07a09aa734da9", "filename": "src/test/compile-fail/blind-item-block-item-shadow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fblind-item-block-item-shadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fblind-item-block-item-shadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblind-item-block-item-shadow.rs?ref=6e0f2f2f050443f2aec4e9c7d25618a6a6639b83", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     {\n         struct Bar;\n         use foo::Bar;\n-        //~^ ERROR import `Bar` conflicts with type in this module\n-        //~^^ ERROR import `Bar` conflicts with value in this module\n+        //~^ ERROR a type named `Bar` has already been defined in this block\n+        //~^^ ERROR a value named `Bar` has already been defined in this block\n     }\n }"}, {"sha": "b08c78e9060dec4e2518424a178bb2858d829350", "filename": "src/test/compile-fail/blind-item-item-shadow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fblind-item-item-shadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fblind-item-item-shadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblind-item-item-shadow.rs?ref=6e0f2f2f050443f2aec4e9c7d25618a6a6639b83", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-mod foo { pub mod foo {  } }\n+mod foo { pub mod foo {  } } //~ NOTE previous definition of `foo` here\n \n-use foo::foo; //~ ERROR import `foo` conflicts with existing submodule\n+use foo::foo; //~ ERROR a module named `foo` has already been defined in this module\n \n fn main() {}"}, {"sha": "a6793ee8b9fbda001b64993f792666074de93db0", "filename": "src/test/compile-fail/enum-and-module-in-same-scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fenum-and-module-in-same-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fenum-and-module-in-same-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-and-module-in-same-scope.rs?ref=6e0f2f2f050443f2aec4e9c7d25618a6a6639b83", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum Foo {\n+enum Foo { //~ NOTE previous definition\n     X\n }\n \n-mod Foo { //~ ERROR duplicate definition of type or module `Foo`\n+mod Foo { //~ ERROR a type named `Foo` has already been defined\n     pub static X: isize = 42;\n     fn f() { f() } // Check that this does not result in a resolution error\n }"}, {"sha": "87b79b5cd67ebf97106acd297efbcf28ad1431bc", "filename": "src/test/compile-fail/issue-19498.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fissue-19498.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fissue-19498.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19498.rs?ref=6e0f2f2f050443f2aec4e9c7d25618a6a6639b83", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use self::A; //~ ERROR import `A` conflicts with existing submodule\n-use self::B; //~ ERROR import `B` conflicts with existing submodule\n-mod A {}\n-pub mod B {}\n+use self::A; //~ NOTE previous import of `A` here\n+use self::B; //~ NOTE previous import of `B` here\n+mod A {} //~ ERROR a module named `A` has already been imported in this module\n+pub mod B {} //~ ERROR a module named `B` has already been imported in this module\n \n mod C {\n-    use C::D; //~ ERROR import `D` conflicts with existing submodule\n-    mod D {}\n+    use C::D; //~ NOTE previous import of `D` here\n+    mod D {} //~ ERROR a module named `D` has already been imported in this module\n }\n \n fn main() {}"}, {"sha": "11d05ceb9a019d220e4fab6f23fffe374e779945", "filename": "src/test/compile-fail/issue-21546.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fissue-21546.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fissue-21546.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21546.rs?ref=6e0f2f2f050443f2aec4e9c7d25618a6a6639b83", "patch": "@@ -12,54 +12,54 @@\n \n #[allow(non_snake_case)]\n mod Foo { }\n-//~^ NOTE first definition of type or module `Foo`\n+//~^ NOTE previous definition of `Foo` here\n \n #[allow(dead_code)]\n struct Foo;\n-//~^ ERROR duplicate definition of type or module `Foo`\n-\n+//~^ ERROR a module named `Foo` has already been defined in this module\n \n #[allow(non_snake_case)]\n mod Bar { }\n-//~^ NOTE first definition of type or module `Bar`\n+//~^ NOTE previous definition of `Bar` here\n \n #[allow(dead_code)]\n struct Bar(i32);\n-//~^ ERROR duplicate definition of type or module `Bar`\n+//~^ ERROR a module named `Bar` has already been defined\n \n \n #[allow(dead_code)]\n struct Baz(i32);\n-//~^ NOTE first definition of type or module\n+//~^ NOTE previous definition\n \n #[allow(non_snake_case)]\n mod Baz { }\n-//~^ ERROR duplicate definition of type or module `Baz`\n+//~^ ERROR a type named `Baz` has already been defined\n \n \n #[allow(dead_code)]\n struct Qux { x: bool }\n-//~^ NOTE first definition of type or module\n+//~^ NOTE previous definition\n \n #[allow(non_snake_case)]\n mod Qux { }\n-//~^ ERROR duplicate definition of type or module `Qux`\n+//~^ ERROR a type named `Qux` has already been defined\n \n \n #[allow(dead_code)]\n struct Quux;\n-//~^ NOTE first definition of type or module\n+//~^ NOTE previous definition\n \n #[allow(non_snake_case)]\n mod Quux { }\n-//~^ ERROR duplicate definition of type or module `Quux`\n+//~^ ERROR a type named `Quux` has already been defined\n \n \n #[allow(dead_code)]\n enum Corge { A, B }\n+//~^ NOTE previous definition\n \n #[allow(non_snake_case)]\n mod Corge { }\n-//~^ ERROR duplicate definition of type or module `Corge`\n+//~^ ERROR a type named `Corge` has already been defined\n \n fn main() { }"}, {"sha": "94fb30082892e2f9642b2e436ca84a523f4a1c1f", "filename": "src/test/compile-fail/issue-24081.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fissue-24081.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fissue-24081.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24081.rs?ref=6e0f2f2f050443f2aec4e9c7d25618a6a6639b83", "patch": "@@ -8,16 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::ops::Add; //~ ERROR import `Add` conflicts with type in this module\n-use std::ops::Sub; //~ ERROR import `Sub` conflicts with type in this module\n-use std::ops::Mul; //~ ERROR import `Mul` conflicts with type in this module\n-use std::ops::Div; //~ ERROR import `Div` conflicts with existing submodule\n-use std::ops::Rem; //~ ERROR import `Rem` conflicts with trait in this module\n+use std::ops::Add; //~ NOTE previous import\n+use std::ops::Sub; //~ NOTE previous import\n+use std::ops::Mul; //~ NOTE previous import\n+use std::ops::Div; //~ NOTE previous import\n+use std::ops::Rem; //~ NOTE previous import\n \n-type Add = bool;\n-struct Sub { x: f32 }\n-enum Mul { A, B }\n-mod Div { }\n-trait Rem { }\n+type Add = bool; //~ ERROR a trait named `Add` has already been imported in this module\n+struct Sub { x: f32 } //~ ERROR a trait named `Sub` has already been imported in this module\n+enum Mul { A, B } //~ ERROR a trait named `Mul` has already been imported in this module\n+mod Div { } //~ ERROR a trait named `Div` has already been imported in this module\n+trait Rem {  } //~ ERROR a trait named `Rem` has already been imported in this module\n \n fn main() {}"}, {"sha": "ca5bd9c6717cf55f89f3834de6988fbb53a286f1", "filename": "src/test/compile-fail/issue-28472.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fissue-28472.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fissue-28472.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28472.rs?ref=6e0f2f2f050443f2aec4e9c7d25618a6a6639b83", "patch": "@@ -13,10 +13,10 @@\n extern {\n   fn foo();\n \n-  pub //~ ERROR duplicate definition\n+  pub //~ ERROR a value named `foo` has already been defined\n   fn foo();\n \n-  pub //~ ERROR duplicate definition\n+  pub //~ ERROR a value named `foo` has already been defined\n   static mut foo: u32;\n }\n "}, {"sha": "cc7de01b0631ba1ed1b61db79735c4730ea63a83", "filename": "src/test/compile-fail/issue-3099-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fissue-3099-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fissue-3099-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3099-a.rs?ref=6e0f2f2f050443f2aec4e9c7d25618a6a6639b83", "patch": "@@ -10,6 +10,6 @@\n \n enum a { b, c }\n \n-enum a { d, e } //~ ERROR duplicate definition of type or module `a`\n+enum a { d, e } //~ ERROR a type named `a` has already been defined in this module\n \n fn main() {}"}, {"sha": "ae667341022f61659eb8c2325054372c08fc94cb", "filename": "src/test/compile-fail/issue-3099-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fissue-3099-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fissue-3099-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3099-b.rs?ref=6e0f2f2f050443f2aec4e9c7d25618a6a6639b83", "patch": "@@ -10,6 +10,6 @@\n \n pub mod a {}\n \n-pub mod a {} //~ ERROR duplicate definition of type or module `a`\n+pub mod a {} //~ ERROR a module named `a` has already been defined in this module\n \n fn main() {}"}, {"sha": "34bc21833e59f5a3b434cc3c476c5e60ef7c15b1", "filename": "src/test/compile-fail/issue-3099.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fissue-3099.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fissue-3099.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3099.rs?ref=6e0f2f2f050443f2aec4e9c7d25618a6a6639b83", "patch": "@@ -12,7 +12,7 @@ fn a(x: String) -> String {\n     format!(\"First function with {}\", x)\n }\n \n-fn a(x: String, y: String) -> String { //~ ERROR duplicate definition of value `a`\n+fn a(x: String, y: String) -> String { //~ ERROR a value named `a` has already been defined\n     format!(\"Second function with {} and {}\", x, y)\n }\n "}, {"sha": "c8021a229957f77227a9e95ed2146469d204d97e", "filename": "src/test/compile-fail/issue-6936.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fissue-6936.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fissue-6936.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6936.rs?ref=6e0f2f2f050443f2aec4e9c7d25618a6a6639b83", "patch": "@@ -12,17 +12,17 @@ struct T;\n \n mod t1 {\n     type Foo = ::T;\n-    mod Foo {} //~ ERROR: duplicate definition of type or module `Foo`\n+    mod Foo {} //~ ERROR: `Foo` has already been defined\n }\n \n mod t2 {\n     type Foo = ::T;\n-    struct Foo; //~ ERROR: duplicate definition of type or module `Foo`\n+    struct Foo; //~ ERROR: `Foo` has already been defined\n }\n \n mod t3 {\n     type Foo = ::T;\n-    enum Foo {} //~ ERROR: duplicate definition of type or module `Foo`\n+    enum Foo {} //~ ERROR: `Foo` has already been defined\n }\n \n mod t4 {\n@@ -32,7 +32,7 @@ mod t4 {\n \n mod t5 {\n     type Bar<T> = T;\n-    mod Bar {} //~ ERROR: duplicate definition of type or module `Bar`\n+    mod Bar {} //~ ERROR: `Bar` has already been defined\n }\n \n mod t6 {"}, {"sha": "06573bea13c1474abad123865dc43a75f3194f03", "filename": "src/test/compile-fail/issue-7044.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fissue-7044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fissue-7044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7044.rs?ref=6e0f2f2f050443f2aec4e9c7d25618a6a6639b83", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n static X: isize = 0;\n-struct X; //~ ERROR error: duplicate definition of value `X`\n+struct X; //~ ERROR `X` has already been defined\n \n fn main() {}"}, {"sha": "e469e05a2444a798c85c561a3dd86936a61843f8", "filename": "src/test/compile-fail/issue-8640.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fissue-8640.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fissue-8640.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8640.rs?ref=6e0f2f2f050443f2aec4e9c7d25618a6a6639b83", "patch": "@@ -12,8 +12,8 @@\n \n mod foo {\n     use baz::bar;\n-    //~^ ERROR import `bar` conflicts with existing submodule\n     mod bar {}\n+    //~^ ERROR a module named `bar` has already been imported\n }\n mod baz { pub mod bar {} }\n "}, {"sha": "f2a27dc528e6cf82da0b2498d0f657ecedfd2357", "filename": "src/test/compile-fail/no-std-inject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fno-std-inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fno-std-inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-std-inject.rs?ref=6e0f2f2f050443f2aec4e9c7d25618a6a6639b83", "patch": "@@ -10,7 +10,7 @@\n \n #![no_std]\n \n-extern crate core; //~ ERROR: an external crate named `core` has already\n+extern crate core; //~ ERROR: an extern crate named `core` has already\n extern crate std;\n \n fn main() {}"}, {"sha": "c05d0cc1b0e51ca7055d416ed18f60403077fad2", "filename": "src/test/compile-fail/resolve-conflict-extern-crate-vs-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-extern-crate-vs-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-extern-crate-vs-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-extern-crate-vs-extern-crate.rs?ref=6e0f2f2f050443f2aec4e9c7d25618a6a6639b83", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n extern crate std;\n-//~^ ERROR an external crate named `std` has already been imported\n+//~^ ERROR an extern crate named `std` has already been imported\n \n fn main(){}"}, {"sha": "6cbc728c03edcad6edbc800d26a91881eba3eff5", "filename": "src/test/compile-fail/resolve-conflict-import-vs-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-import-vs-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-import-vs-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-import-vs-extern-crate.rs?ref=6e0f2f2f050443f2aec4e9c7d25618a6a6639b83", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::slice as std; //~ ERROR import `std` conflicts with imported crate\n+use std::slice as std; //~ ERROR an extern crate named `std` has already been imported\n \n fn main() {\n }"}, {"sha": "b0954ee1571eee7d55f5514b7797867667241eb8", "filename": "src/test/compile-fail/resolve-conflict-item-vs-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-item-vs-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-item-vs-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-item-vs-extern-crate.rs?ref=6e0f2f2f050443f2aec4e9c7d25618a6a6639b83", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn std() {}\n-mod std {}    //~ ERROR the name `std` conflicts with an external crate\n+mod std {}    //~ ERROR an extern crate named `std` has already been imported\n \n fn main() {\n }"}, {"sha": "dbd1ecf44fd7312d7a776e2a0ba39e1cd5513bd5", "filename": "src/test/compile-fail/resolve-conflict-item-vs-import.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-item-vs-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-item-vs-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-item-vs-import.rs?ref=6e0f2f2f050443f2aec4e9c7d25618a6a6639b83", "patch": "@@ -9,9 +9,10 @@\n // except according to those terms.\n \n use std::mem::transmute;\n-//~^ ERROR import `transmute` conflicts with value in this module\n+//~^ NOTE previous import of `transmute` here\n \n fn transmute() {}\n+//~^ ERROR a value named `transmute` has already been imported in this module\n \n fn main() {\n }"}, {"sha": "aa7e47e223ff5a9ec04b268114a36f74bfcdf7af", "filename": "src/test/compile-fail/resolve-conflict-type-vs-import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-type-vs-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-type-vs-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-type-vs-import.rs?ref=6e0f2f2f050443f2aec4e9c7d25618a6a6639b83", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n use std::slice::Iter;\n-//~^ ERROR import `Iter` conflicts with type in this module\n \n struct Iter;\n+//~^ ERROR a type named `Iter` has already been imported in this module\n \n fn main() {\n }"}, {"sha": "41700b25bbb726798de48eca9d0544c393220b56", "filename": "src/test/compile-fail/trait-duplicate-methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Ftrait-duplicate-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Ftrait-duplicate-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-duplicate-methods.rs?ref=6e0f2f2f050443f2aec4e9c7d25618a6a6639b83", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n trait Foo {\n-    fn orange(&self);\n-    fn orange(&self);   //~ ERROR error: duplicate definition of value `orange`\n+    fn orange(&self); //~ NOTE previous definition of `orange` here\n+    fn orange(&self); //~ ERROR a value named `orange` has already been defined in this trait\n }\n \n fn main() {}"}, {"sha": "cc328d8c9e919bcd38dd9947e311208889bfc82b", "filename": "src/test/compile-fail/unresolved-extern-mod-suggestion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Funresolved-extern-mod-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Funresolved-extern-mod-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funresolved-extern-mod-suggestion.rs?ref=6e0f2f2f050443f2aec4e9c7d25618a6a6639b83", "patch": "@@ -10,6 +10,6 @@\n \n extern crate core;\n use core;\n-//~^ ERROR import `core` conflicts with imported crate in this module\n+//~^ ERROR an extern crate named `core` has already been imported in this module\n \n fn main() {}"}, {"sha": "a8bb94b78fcc0a9940573dd903d3e394e67aa11d", "filename": "src/test/compile-fail/variant-namespacing.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fvariant-namespacing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0f2f2f050443f2aec4e9c7d25618a6a6639b83/src%2Ftest%2Fcompile-fail%2Fvariant-namespacing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariant-namespacing.rs?ref=6e0f2f2f050443f2aec4e9c7d25618a6a6639b83", "patch": "@@ -10,22 +10,6 @@\n \n // aux-build:variant-namespacing.rs\n \n-extern crate variant_namespacing;\n-pub use variant_namespacing::XE::*;\n-//~^ ERROR import `XStruct` conflicts with type in this module\n-//~| ERROR import `XStruct` conflicts with value in this module\n-//~| ERROR import `XTuple` conflicts with type in this module\n-//~| ERROR import `XTuple` conflicts with value in this module\n-//~| ERROR import `XUnit` conflicts with type in this module\n-//~| ERROR import `XUnit` conflicts with value in this module\n-pub use E::*;\n-//~^ ERROR import `Struct` conflicts with type in this module\n-//~| ERROR import `Struct` conflicts with value in this module\n-//~| ERROR import `Tuple` conflicts with type in this module\n-//~| ERROR import `Tuple` conflicts with value in this module\n-//~| ERROR import `Unit` conflicts with type in this module\n-//~| ERROR import `Unit` conflicts with value in this module\n-\n enum E {\n     Struct { a: u8 },\n     Tuple(u8),\n@@ -46,4 +30,20 @@ const XStruct: u8 = 0;\n const XTuple: u8 = 0;\n const XUnit: u8 = 0;\n \n+extern crate variant_namespacing;\n+pub use variant_namespacing::XE::*;\n+//~^ ERROR `XStruct` has already been defined\n+//~| ERROR `XStruct` has already been defined\n+//~| ERROR `XTuple` has already been defined\n+//~| ERROR `XTuple` has already been defined\n+//~| ERROR `XUnit` has already been defined\n+//~| ERROR `XUnit` has already been defined\n+pub use E::*;\n+//~^ ERROR `Struct` has already been defined\n+//~| ERROR `Struct` has already been defined\n+//~| ERROR `Tuple` has already been defined\n+//~| ERROR `Tuple` has already been defined\n+//~| ERROR `Unit` has already been defined\n+//~| ERROR `Unit` has already been defined\n+\n fn main() {}"}]}