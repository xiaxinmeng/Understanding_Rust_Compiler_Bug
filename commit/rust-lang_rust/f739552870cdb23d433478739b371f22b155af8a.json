{"sha": "f739552870cdb23d433478739b371f22b155af8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3Mzk1NTI4NzBjZGIyM2Q0MzM0Nzg3MzliMzcxZjIyYjE1NWFmOGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-30T07:02:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-30T07:02:34Z"}, "message": "Auto merge of #87483 - oli-obk:tait_ice, r=lqd\n\nMir borrowck does not generate lifetime variables for 'static lifetimes during opaque type resolution\n\nFixes #87455\n\nThis situation was unreachable before #87287 as we used to just grab the resolved opaque type from typeck and replaced all regions with new inference vars. After #87287 we let the `InferCx` in mir borrowck figure out the opaque type all by itself (which it already did before, but it only used the result to sanity check with the typeck result).", "tree": {"sha": "8738ec5f357e4c9fe444f979de1c4c65edb872ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8738ec5f357e4c9fe444f979de1c4c65edb872ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f739552870cdb23d433478739b371f22b155af8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f739552870cdb23d433478739b371f22b155af8a", "html_url": "https://github.com/rust-lang/rust/commit/f739552870cdb23d433478739b371f22b155af8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f739552870cdb23d433478739b371f22b155af8a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe1c942eee3489743d655d81ca89166217db0547", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe1c942eee3489743d655d81ca89166217db0547", "html_url": "https://github.com/rust-lang/rust/commit/fe1c942eee3489743d655d81ca89166217db0547"}, {"sha": "2953a2fb18ccc5a61aae79cd62a8383f3456c1db", "url": "https://api.github.com/repos/rust-lang/rust/commits/2953a2fb18ccc5a61aae79cd62a8383f3456c1db", "html_url": "https://github.com/rust-lang/rust/commit/2953a2fb18ccc5a61aae79cd62a8383f3456c1db"}], "stats": {"total": 74, "additions": 74, "deletions": 0}, "files": [{"sha": "e9ab62e1664f972778fa884a8b46a9f53f6f62cd", "filename": "compiler/rustc_mir/src/borrow_check/region_infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f739552870cdb23d433478739b371f22b155af8a/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f739552870cdb23d433478739b371f22b155af8a/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fopaque_types.rs?ref=f739552870cdb23d433478739b371f22b155af8a", "patch": "@@ -83,6 +83,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                             .and_then(|ur_vid| self.definitions[*ur_vid].external_name)\n                             .unwrap_or(infcx.tcx.lifetimes.re_root_empty),\n                         ty::ReLateBound(..) => region,\n+                        ty::ReStatic => region,\n                         _ => {\n                             infcx.tcx.sess.delay_span_bug(\n                                 span,"}, {"sha": "80a74eb63a83ee0297382e36c4ef9b46c08a2a26", "filename": "src/test/ui/type-alias-impl-trait/issue-87455-static-lifetime-ice.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/f739552870cdb23d433478739b371f22b155af8a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-87455-static-lifetime-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f739552870cdb23d433478739b371f22b155af8a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-87455-static-lifetime-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-87455-static-lifetime-ice.rs?ref=f739552870cdb23d433478739b371f22b155af8a", "patch": "@@ -0,0 +1,73 @@\n+// check-pass\n+\n+use std::error::Error as StdError;\n+use std::pin::Pin;\n+use std::task::{Context, Poll};\n+\n+pub trait Stream {\n+    type Item;\n+    fn poll_next(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Option<Self::Item>>;\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        (0, None)\n+    }\n+}\n+\n+pub trait TryStream: Stream {\n+    type Ok;\n+    type Error;\n+\n+    fn try_poll_next(\n+        self: Pin<&mut Self>,\n+        cx: &mut Context<'_>,\n+    ) -> Poll<Option<Result<Self::Ok, Self::Error>>>;\n+}\n+\n+impl<S, T, E> TryStream for S\n+where\n+    S: ?Sized + Stream<Item = Result<T, E>>,\n+{\n+    type Ok = T;\n+    type Error = E;\n+\n+    fn try_poll_next(\n+        self: Pin<&mut Self>,\n+        cx: &mut Context<'_>,\n+    ) -> Poll<Option<Result<Self::Ok, Self::Error>>> {\n+        self.poll_next(cx)\n+    }\n+}\n+\n+pub trait ServerSentEvent: Sized + Send + Sync + 'static {}\n+\n+impl<T: Send + Sync + 'static> ServerSentEvent for T {}\n+\n+struct SseKeepAlive<S> {\n+    event_stream: S,\n+}\n+\n+struct SseComment<T>(T);\n+\n+impl<S> Stream for SseKeepAlive<S>\n+where\n+    S: TryStream + Send + 'static,\n+    S::Ok: ServerSentEvent,\n+    S::Error: StdError + Send + Sync + 'static,\n+{\n+    type Item = Result<SseComment<&'static str>, ()>;\n+    fn poll_next(self: Pin<&mut Self>, _cx: &mut Context) -> Poll<Option<Self::Item>> {\n+        unimplemented!()\n+    }\n+}\n+\n+pub fn keep<S>(\n+    event_stream: S,\n+) -> impl TryStream<Ok = impl ServerSentEvent + Send + 'static, Error = ()> + Send + 'static\n+where\n+    S: TryStream + Send + 'static,\n+    S::Ok: ServerSentEvent + Send,\n+    S::Error: StdError + Send + Sync + 'static,\n+{\n+    SseKeepAlive { event_stream }\n+}\n+\n+fn main() {}"}]}