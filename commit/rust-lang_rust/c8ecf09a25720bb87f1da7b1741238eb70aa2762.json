{"sha": "c8ecf09a25720bb87f1da7b1741238eb70aa2762", "node_id": "C_kwDOAAsO6NoAKGM4ZWNmMDlhMjU3MjBiYjg3ZjFkYTdiMTc0MTIzOGViNzBhYTI3NjI", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-18T15:40:16Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-21T12:51:33Z"}, "message": "Generalize projection_must_outlive", "tree": {"sha": "a16f5a4d7fb4f8e6752c054220bd547fcea8eba8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a16f5a4d7fb4f8e6752c054220bd547fcea8eba8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8ecf09a25720bb87f1da7b1741238eb70aa2762", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8ecf09a25720bb87f1da7b1741238eb70aa2762", "html_url": "https://github.com/rust-lang/rust/commit/c8ecf09a25720bb87f1da7b1741238eb70aa2762", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8ecf09a25720bb87f1da7b1741238eb70aa2762/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d4cc4fe53aec2a7f36535c3458aced2fcd2988d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d4cc4fe53aec2a7f36535c3458aced2fcd2988d", "html_url": "https://github.com/rust-lang/rust/commit/4d4cc4fe53aec2a7f36535c3458aced2fcd2988d"}], "stats": {"total": 43, "additions": 29, "deletions": 14}, "files": [{"sha": "55bb75c8b6da2b4bd56e83480199c339c538facf", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c8ecf09a25720bb87f1da7b1741238eb70aa2762/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ecf09a25720bb87f1da7b1741238eb70aa2762/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=c8ecf09a25720bb87f1da7b1741238eb70aa2762", "patch": "@@ -68,6 +68,7 @@ use crate::infer::{\n };\n use crate::traits::{ObligationCause, ObligationCauseCode};\n use rustc_data_structures::undo_log::UndoLogs;\n+use rustc_hir::def_id::DefId;\n use rustc_hir::def_id::LocalDefId;\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::subst::GenericArgKind;\n@@ -324,6 +325,29 @@ where\n         origin: infer::SubregionOrigin<'tcx>,\n         region: ty::Region<'tcx>,\n         projection_ty: ty::ProjectionTy<'tcx>,\n+    ) {\n+        self.generic_must_outlive(\n+            origin,\n+            region,\n+            GenericKind::Projection(projection_ty),\n+            projection_ty.item_def_id,\n+            projection_ty.substs,\n+            |ty| match ty.kind() {\n+                ty::Projection(projection_ty) => (projection_ty.item_def_id, projection_ty.substs),\n+                _ => bug!(\"expected only projection types from env, not {:?}\", ty),\n+            },\n+        );\n+    }\n+\n+    #[instrument(level = \"debug\", skip(self, filter))]\n+    fn generic_must_outlive(\n+        &mut self,\n+        origin: infer::SubregionOrigin<'tcx>,\n+        region: ty::Region<'tcx>,\n+        generic: GenericKind<'tcx>,\n+        def_id: DefId,\n+        substs: SubstsRef<'tcx>,\n+        filter: impl Fn(Ty<'tcx>) -> (DefId, SubstsRef<'tcx>),\n     ) {\n         // This case is thorny for inference. The fundamental problem is\n         // that there are many cases where we have choice, and inference\n@@ -342,13 +366,10 @@ where\n         // Compute the bounds we can derive from the trait definition.\n         // These are guaranteed to apply, no matter the inference\n         // results.\n-        let trait_bounds: Vec<_> =\n-            self.verify_bound.bounds(projection_ty.item_def_id, projection_ty.substs).collect();\n+        let trait_bounds: Vec<_> = self.verify_bound.bounds(def_id, substs).collect();\n \n         debug!(?trait_bounds);\n \n-        let generic = GenericKind::Projection(projection_ty);\n-\n         // Compute the bounds we can derive from the environment. This\n         // is an \"approximate\" match -- in some cases, these bounds\n         // may not apply.\n@@ -367,14 +388,8 @@ where\n             // If the declaration is `trait Trait<'b> { type Item: 'b; }`, then `projection_declared_bounds_from_trait`\n             // will be invoked with `['b => ^1]` and so we will get `^1` returned.\n             let bound = bound_outlives.skip_binder();\n-            match *bound.0.kind() {\n-                ty::Projection(projection_ty) => self\n-                    .verify_bound\n-                    .bounds(projection_ty.item_def_id, projection_ty.substs)\n-                    .all(|r| r != bound.1),\n-\n-                _ => panic!(\"expected only projection types from env, not {:?}\", bound.0),\n-            }\n+            let (def_id, substs) = filter(bound.0);\n+            self.verify_bound.bounds(def_id, substs).all(|r| r != bound.1)\n         });\n \n         // If declared bounds list is empty, the only applicable rule is\n@@ -391,11 +406,11 @@ where\n         // the problem is to add `T: 'r`, which isn't true. So, if there are no\n         // inference variables, we use a verify constraint instead of adding\n         // edges, which winds up enforcing the same condition.\n-        let needs_infer = projection_ty.needs_infer();\n+        let needs_infer = substs.needs_infer();\n         if approx_env_bounds.is_empty() && trait_bounds.is_empty() && needs_infer {\n             debug!(\"no declared bounds\");\n \n-            self.substs_must_outlive(projection_ty.substs, origin, region);\n+            self.substs_must_outlive(substs, origin, region);\n \n             return;\n         }"}]}