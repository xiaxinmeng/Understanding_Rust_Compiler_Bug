{"sha": "77efa0267dcae86235d8688d8b886d13e2b99c0b", "node_id": "C_kwDOAAsO6NoAKDc3ZWZhMDI2N2RjYWU4NjIzNWQ4Njg4ZDhiODg2ZDEzZTJiOTljMGI", "commit": {"author": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-01-16T19:13:27Z"}, "committer": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-01-16T19:13:27Z"}, "message": "Don't compute layout if `TargetDataLayout` is not available", "tree": {"sha": "e784903f32da7c6d2c924426ad6fbc20365640d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e784903f32da7c6d2c924426ad6fbc20365640d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77efa0267dcae86235d8688d8b886d13e2b99c0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77efa0267dcae86235d8688d8b886d13e2b99c0b", "html_url": "https://github.com/rust-lang/rust/commit/77efa0267dcae86235d8688d8b886d13e2b99c0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77efa0267dcae86235d8688d8b886d13e2b99c0b/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5306eb06cc2de0566ca789ee3863b78059ee2376", "url": "https://api.github.com/repos/rust-lang/rust/commits/5306eb06cc2de0566ca789ee3863b78059ee2376", "html_url": "https://github.com/rust-lang/rust/commit/5306eb06cc2de0566ca789ee3863b78059ee2376"}], "stats": {"total": 55, "additions": 19, "deletions": 36}, "files": [{"sha": "49b1190ad46a3a009e9617c9057a898a11859385", "filename": "crates/hir-def/src/layout.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77efa0267dcae86235d8688d8b886d13e2b99c0b/crates%2Fhir-def%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77efa0267dcae86235d8688d8b886d13e2b99c0b/crates%2Fhir-def%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Flayout.rs?ref=77efa0267dcae86235d8688d8b886d13e2b99c0b", "patch": "@@ -90,6 +90,7 @@ impl IntegerExt for Integer {\n pub enum LayoutError {\n     UserError(String),\n     SizeOverflow,\n+    TargetLayoutNotAvailable,\n     HasPlaceholder,\n     NotImplemented,\n     Unknown,"}, {"sha": "d45e2a943addf94a59358be99251536135414bfc", "filename": "crates/hir-ty/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77efa0267dcae86235d8688d8b886d13e2b99c0b/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77efa0267dcae86235d8688d8b886d13e2b99c0b/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdb.rs?ref=77efa0267dcae86235d8688d8b886d13e2b99c0b", "patch": "@@ -65,7 +65,7 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     fn layout_of_adt(&self, def: AdtId, subst: Substitution) -> Result<Layout, LayoutError>;\n \n     #[salsa::invoke(crate::layout::target_data_layout_query)]\n-    fn target_data_layout(&self, krate: CrateId) -> Arc<TargetDataLayout>;\n+    fn target_data_layout(&self, krate: CrateId) -> Option<Arc<TargetDataLayout>>;\n \n     #[salsa::invoke(crate::lower::callable_item_sig)]\n     fn callable_item_signature(&self, def: CallableDefId) -> PolyFnSig;"}, {"sha": "cd7f1b805c5c55e1e4c9ba48aa7c39e1321f783b", "filename": "crates/hir-ty/src/layout.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/77efa0267dcae86235d8688d8b886d13e2b99c0b/crates%2Fhir-ty%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77efa0267dcae86235d8688d8b886d13e2b99c0b/crates%2Fhir-ty%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout.rs?ref=77efa0267dcae86235d8688d8b886d13e2b99c0b", "patch": "@@ -1,7 +1,5 @@\n //! Compute the binary representation of a type\n \n-use std::sync::Arc;\n-\n use base_db::CrateId;\n use chalk_ir::{AdtId, TyKind};\n use hir_def::{\n@@ -31,19 +29,19 @@ mod adt;\n mod target;\n \n struct LayoutCx<'a> {\n-    db: &'a dyn HirDatabase,\n     krate: CrateId,\n+    target: &'a TargetDataLayout,\n }\n \n-impl LayoutCalculator for LayoutCx<'_> {\n-    type TargetDataLayoutRef = Arc<TargetDataLayout>;\n+impl<'a> LayoutCalculator for LayoutCx<'a> {\n+    type TargetDataLayoutRef = &'a TargetDataLayout;\n \n     fn delay_bug(&self, txt: &str) {\n         never!(\"{}\", txt);\n     }\n \n-    fn current_data_layout(&self) -> Arc<TargetDataLayout> {\n-        self.db.target_data_layout(self.krate)\n+    fn current_data_layout(&self) -> &'a TargetDataLayout {\n+        self.target\n     }\n }\n \n@@ -56,7 +54,8 @@ fn scalar(dl: &TargetDataLayout, value: Primitive) -> Layout {\n }\n \n pub fn layout_of_ty(db: &dyn HirDatabase, ty: &Ty, krate: CrateId) -> Result<Layout, LayoutError> {\n-    let cx = LayoutCx { db, krate };\n+    let Some(target) = db.target_data_layout(krate) else { return Err(LayoutError::TargetLayoutNotAvailable) };\n+    let cx = LayoutCx { krate, target: &target };\n     let dl = &*cx.current_data_layout();\n     Ok(match ty.kind(Interner) {\n         TyKind::Adt(AdtId(def), subst) => db.layout_of_adt(*def, subst.clone())?,"}, {"sha": "cb7968c1446590df19913a37a746b0db35387dc5", "filename": "crates/hir-ty/src/layout/adt.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77efa0267dcae86235d8688d8b886d13e2b99c0b/crates%2Fhir-ty%2Fsrc%2Flayout%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77efa0267dcae86235d8688d8b886d13e2b99c0b/crates%2Fhir-ty%2Fsrc%2Flayout%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout%2Fadt.rs?ref=77efa0267dcae86235d8688d8b886d13e2b99c0b", "patch": "@@ -23,7 +23,9 @@ pub fn layout_of_adt_query(\n     def: AdtId,\n     subst: Substitution,\n ) -> Result<Layout, LayoutError> {\n-    let cx = LayoutCx { db, krate: def.module(db.upcast()).krate() };\n+    let krate = def.module(db.upcast()).krate();\n+    let Some(target) = db.target_data_layout(krate) else { return Err(LayoutError::TargetLayoutNotAvailable) };\n+    let cx = LayoutCx { krate, target: &target };\n     let dl = cx.current_data_layout();\n     let handle_variant = |def: VariantId, var: &VariantData| {\n         var.fields()"}, {"sha": "93dcd79e120c6974bd5b029ebdebc95147ae9e27", "filename": "crates/hir-ty/src/layout/target.rs", "status": "modified", "additions": 7, "deletions": 26, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/77efa0267dcae86235d8688d8b886d13e2b99c0b/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftarget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77efa0267dcae86235d8688d8b886d13e2b99c0b/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftarget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftarget.rs?ref=77efa0267dcae86235d8688d8b886d13e2b99c0b", "patch": "@@ -3,34 +3,15 @@\n use std::sync::Arc;\n \n use base_db::CrateId;\n-use hir_def::layout::{Endian, Size, TargetDataLayout};\n+use hir_def::layout::TargetDataLayout;\n \n use crate::db::HirDatabase;\n \n-pub fn target_data_layout_query(db: &dyn HirDatabase, krate: CrateId) -> Arc<TargetDataLayout> {\n+pub fn target_data_layout_query(\n+    db: &dyn HirDatabase,\n+    krate: CrateId,\n+) -> Option<Arc<TargetDataLayout>> {\n     let crate_graph = db.crate_graph();\n-    let target_layout = &crate_graph[krate].target_layout;\n-    let cfg_options = &crate_graph[krate].cfg_options;\n-    Arc::new(\n-        target_layout\n-            .as_ref()\n-            .and_then(|it| TargetDataLayout::parse_from_llvm_datalayout_string(it).ok())\n-            .unwrap_or_else(|| {\n-                let endian = match cfg_options.get_cfg_values(\"target_endian\").next() {\n-                    Some(x) if x.as_str() == \"big\" => Endian::Big,\n-                    _ => Endian::Little,\n-                };\n-                let pointer_size = Size::from_bytes(\n-                    match cfg_options.get_cfg_values(\"target_pointer_width\").next() {\n-                        Some(x) => match x.as_str() {\n-                            \"16\" => 2,\n-                            \"32\" => 4,\n-                            _ => 8,\n-                        },\n-                        _ => 8,\n-                    },\n-                );\n-                TargetDataLayout { endian, pointer_size, ..TargetDataLayout::default() }\n-            }),\n-    )\n+    let target_layout = crate_graph[krate].target_layout.as_ref()?;\n+    Some(Arc::new(TargetDataLayout::parse_from_llvm_datalayout_string(&target_layout).ok()?))\n }"}]}