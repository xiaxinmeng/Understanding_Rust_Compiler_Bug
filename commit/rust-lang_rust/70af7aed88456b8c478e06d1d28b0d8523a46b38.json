{"sha": "70af7aed88456b8c478e06d1d28b0d8523a46b38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwYWY3YWVkODg0NTZiOGM0NzhlMDZkMWQyOGIwZDg1MjNhNDZiMzg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-28T11:51:25Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-28T12:03:46Z"}, "message": "expand flag docs", "tree": {"sha": "22f03b1312ba7927cf115f46d8b953cb4678210e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22f03b1312ba7927cf115f46d8b953cb4678210e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70af7aed88456b8c478e06d1d28b0d8523a46b38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70af7aed88456b8c478e06d1d28b0d8523a46b38", "html_url": "https://github.com/rust-lang/rust/commit/70af7aed88456b8c478e06d1d28b0d8523a46b38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70af7aed88456b8c478e06d1d28b0d8523a46b38/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19e78a65d95d03b6d7ac670075231837cc00edf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/19e78a65d95d03b6d7ac670075231837cc00edf4", "html_url": "https://github.com/rust-lang/rust/commit/19e78a65d95d03b6d7ac670075231837cc00edf4"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "0c280edec0ce6986f000783d7d2f93b87b1021ff", "filename": "README.md", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/70af7aed88456b8c478e06d1d28b0d8523a46b38/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/70af7aed88456b8c478e06d1d28b0d8523a46b38/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=70af7aed88456b8c478e06d1d28b0d8523a46b38", "patch": "@@ -240,9 +240,12 @@ environment variable:\n   future use of it will error).  This helps you in finding out why UB is\n   happening and where in your code would be a good place to look for it.\n * `-Zmiri-track-raw-pointers` makes Stacked Borrows track a pointer tag even for\n-  raw pointers. This can make valid code fail to pass the checks (when\n-  integer-pointer casts are involved), but also can help identify latent\n-  aliasing issues in code that Miri accepts by default.\n+  raw pointers. This can make valid code fail to pass the checks, but also can\n+  help identify latent aliasing issues in code that Miri accepts by default. You\n+  can recognize false positives by \"<untagged>\" occurring in the message -- this\n+  indicates a pointer that was cast from an integer, so Miri was unable to track\n+  this pointer. Make sure to use a non-Windows target with this flag, as the\n+  Windows runtime makes use of integer-pointer casts.\n \n Some native rustc `-Z` flags are also very relevant for Miri:\n "}]}