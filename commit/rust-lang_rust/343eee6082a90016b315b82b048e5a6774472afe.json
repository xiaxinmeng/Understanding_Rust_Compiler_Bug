{"sha": "343eee6082a90016b315b82b048e5a6774472afe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0M2VlZTYwODJhOTAwMTZiMzE1YjgyYjA0OGU1YTY3NzQ0NzJhZmU=", "commit": {"author": {"name": "Markus Westerlind", "email": "markus.westerlind@imperva.com", "date": "2020-01-07T20:45:49Z"}, "committer": {"name": "Markus Westerlind", "email": "markus.westerlind@distilnetworks.com", "date": "2020-01-17T12:43:13Z"}, "message": "perf: Filter out and process fixed constraints first in region expansion\n\nShould reduce the number of elements as well as branches in the\nextremely hot loop and process_constraint in benchmarks such as\nunicode_normalization", "tree": {"sha": "76a89f0a01ed5faff87a13db0a260d9c34f61e64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76a89f0a01ed5faff87a13db0a260d9c34f61e64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/343eee6082a90016b315b82b048e5a6774472afe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/343eee6082a90016b315b82b048e5a6774472afe", "html_url": "https://github.com/rust-lang/rust/commit/343eee6082a90016b315b82b048e5a6774472afe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/343eee6082a90016b315b82b048e5a6774472afe/comments", "author": {"login": "Marwes", "id": 957312, "node_id": "MDQ6VXNlcjk1NzMxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/957312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Marwes", "html_url": "https://github.com/Marwes", "followers_url": "https://api.github.com/users/Marwes/followers", "following_url": "https://api.github.com/users/Marwes/following{/other_user}", "gists_url": "https://api.github.com/users/Marwes/gists{/gist_id}", "starred_url": "https://api.github.com/users/Marwes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Marwes/subscriptions", "organizations_url": "https://api.github.com/users/Marwes/orgs", "repos_url": "https://api.github.com/users/Marwes/repos", "events_url": "https://api.github.com/users/Marwes/events{/privacy}", "received_events_url": "https://api.github.com/users/Marwes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9fe05e9456b84996637c2f29b35c37960e537540", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fe05e9456b84996637c2f29b35c37960e537540", "html_url": "https://github.com/rust-lang/rust/commit/9fe05e9456b84996637c2f29b35c37960e537540"}], "stats": {"total": 49, "additions": 33, "deletions": 16}, "files": [{"sha": "f4c1965a04179cbc63f7ac57d4df81fef83aaf1e", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/343eee6082a90016b315b82b048e5a6774472afe/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343eee6082a90016b315b82b048e5a6774472afe/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=343eee6082a90016b315b82b048e5a6774472afe", "patch": "@@ -295,46 +295,63 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n     }\n \n     fn expansion(&self, var_values: &mut LexicalRegionResolutions<'tcx>) {\n-        let mut process_constraint = |constraint: &Constraint<'tcx>| {\n-            let (a_region, b_vid, b_data, retain) = match *constraint {\n+        let mut changed = false;\n+        let mut constraints = Vec::new();\n+        for constraint in self.data.constraints.keys() {\n+            let (a_region, b_vid, b_data) = match *constraint {\n                 Constraint::RegSubVar(a_region, b_vid) => {\n                     let b_data = var_values.value_mut(b_vid);\n-                    (a_region, b_vid, b_data, false)\n+                    (a_region, b_vid, b_data)\n                 }\n                 Constraint::VarSubVar(a_vid, b_vid) => match *var_values.value(a_vid) {\n-                    VarValue::ErrorValue => return (false, false),\n+                    VarValue::ErrorValue => continue,\n                     VarValue::Value(a_region) => {\n                         let b_data = var_values.value_mut(b_vid);\n-                        let retain = match *b_data {\n-                            VarValue::Value(ReStatic) | VarValue::ErrorValue => false,\n-                            _ => true,\n-                        };\n-                        (a_region, b_vid, b_data, retain)\n+                        match *b_data {\n+                            VarValue::Value(ReStatic) | VarValue::ErrorValue => (),\n+                            _ => constraints.push((a_vid, b_vid)),\n+                        }\n+                        (a_region, b_vid, b_data)\n                     }\n                 },\n                 Constraint::RegSubReg(..) | Constraint::VarSubReg(..) => {\n                     // These constraints are checked after expansion\n                     // is done, in `collect_errors`.\n-                    return (false, false);\n+                    continue;\n                 }\n             };\n+            let edge_changed = self.expand_node(a_region, b_vid, b_data);\n+            if edge_changed {\n+                changed = true\n+            }\n+        }\n \n+        let mut process_constraint = |a_vid, b_vid| {\n+            let (a_region, b_data, retain) = match *var_values.value(a_vid) {\n+                VarValue::ErrorValue => return (false, false),\n+                VarValue::Value(a_region) => {\n+                    let b_data = var_values.value_mut(b_vid);\n+                    let retain = match *b_data {\n+                        VarValue::Value(ReStatic) | VarValue::ErrorValue => false,\n+                        _ => true,\n+                    };\n+                    (a_region, b_data, retain)\n+                }\n+            };\n             let changed = self.expand_node(a_region, b_vid, b_data);\n             (changed, retain)\n         };\n \n         // Using bitsets to track the remaining elements is faster than using a\n         // `Vec` by itself (which requires removing elements, which requires\n         // element shuffling, which is slow).\n-        let constraints: Vec<_> = self.data.constraints.keys().collect();\n         let mut live_indices: BitSet<usize> = BitSet::new_filled(constraints.len());\n         let mut killed_indices: BitSet<usize> = BitSet::new_empty(constraints.len());\n-        let mut changed = true;\n         while changed {\n             changed = false;\n             for index in live_indices.iter() {\n-                let constraint = constraints[index];\n-                let (edge_changed, retain) = process_constraint(constraint);\n+                let (a_vid, b_vid) = constraints[index];\n+                let (edge_changed, retain) = process_constraint(a_vid, b_vid);\n                 changed |= edge_changed;\n                 if !retain {\n                     let changed = killed_indices.insert(index);\n@@ -790,8 +807,8 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n             self.var_infos[node_idx].origin.span(),\n             &format!(\n                 \"collect_error_for_expanding_node() could not find \\\n-                      error for var {:?} in universe {:?}, lower_bounds={:#?}, \\\n-                      upper_bounds={:#?}\",\n+                 error for var {:?} in universe {:?}, lower_bounds={:#?}, \\\n+                 upper_bounds={:#?}\",\n                 node_idx, node_universe, lower_bounds, upper_bounds\n             ),\n         );"}]}