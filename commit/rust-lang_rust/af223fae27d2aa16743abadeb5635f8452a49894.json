{"sha": "af223fae27d2aa16743abadeb5635f8452a49894", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMjIzZmFlMjdkMmFhMTY3NDNhYmFkZWI1NjM1Zjg0NTJhNDk4OTQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-24T16:01:53Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-06-01T17:31:12Z"}, "message": "pacify the mercilous tidy", "tree": {"sha": "86d5b4ee0a51f6a7ce1a99b2cb08181424036266", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86d5b4ee0a51f6a7ce1a99b2cb08181424036266"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af223fae27d2aa16743abadeb5635f8452a49894", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af223fae27d2aa16743abadeb5635f8452a49894", "html_url": "https://github.com/rust-lang/rust/commit/af223fae27d2aa16743abadeb5635f8452a49894", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af223fae27d2aa16743abadeb5635f8452a49894/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7a2e32c102057242950697da6b83b2190b00dfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7a2e32c102057242950697da6b83b2190b00dfb", "html_url": "https://github.com/rust-lang/rust/commit/c7a2e32c102057242950697da6b83b2190b00dfb"}], "stats": {"total": 81, "additions": 52, "deletions": 29}, "files": [{"sha": "c2fe04534375f1c6500c119499fbb16b791f4fce", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/af223fae27d2aa16743abadeb5635f8452a49894/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af223fae27d2aa16743abadeb5635f8452a49894/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=af223fae27d2aa16743abadeb5635f8452a49894", "patch": "@@ -420,7 +420,9 @@ fn process_predicate<'a, 'gcx, 'tcx>(\n         }\n \n         ty::Predicate::Equate(ref binder) => {\n-            match selcx.infcx().equality_predicate(&obligation.cause, obligation.param_env, binder) {\n+            match selcx.infcx().equality_predicate(&obligation.cause,\n+                                                   obligation.param_env,\n+                                                   binder) {\n                 Ok(InferOk { obligations, value: () }) => {\n                     Ok(Some(obligations))\n                 },\n@@ -508,7 +510,9 @@ fn process_predicate<'a, 'gcx, 'tcx>(\n         }\n \n         ty::Predicate::WellFormed(ty) => {\n-            match ty::wf::obligations(selcx.infcx(), obligation.param_env, obligation.cause.body_id,\n+            match ty::wf::obligations(selcx.infcx(),\n+                                      obligation.param_env,\n+                                      obligation.cause.body_id,\n                                       ty, obligation.cause.span) {\n                 None => {\n                     pending_obligation.stalled_on = vec![ty];\n@@ -519,7 +523,9 @@ fn process_predicate<'a, 'gcx, 'tcx>(\n         }\n \n         ty::Predicate::Subtype(ref subtype) => {\n-            match selcx.infcx().subtype_predicate(&obligation.cause, obligation.param_env, subtype) {\n+            match selcx.infcx().subtype_predicate(&obligation.cause,\n+                                                  obligation.param_env,\n+                                                  subtype) {\n                 None => {\n                     // none means that both are unresolved\n                     pending_obligation.stalled_on = vec![subtype.skip_binder().a,"}, {"sha": "787452121d375c841f51665ea8b23706ded59789", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/af223fae27d2aa16743abadeb5635f8452a49894/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af223fae27d2aa16743abadeb5635f8452a49894/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=af223fae27d2aa16743abadeb5635f8452a49894", "patch": "@@ -500,7 +500,10 @@ fn opt_normalize_projection_type<'a, 'b, 'gcx, 'tcx>(\n                    cacheable);\n \n             let result = if projected_ty.has_projection_types() {\n-                let mut normalizer = AssociatedTypeNormalizer::new(selcx, param_env, cause, depth+1);\n+                let mut normalizer = AssociatedTypeNormalizer::new(selcx,\n+                                                                   param_env,\n+                                                                   cause,\n+                                                                   depth+1);\n                 let normalized_ty = normalizer.fold(&projected_ty);\n \n                 debug!(\"opt_normalize_projection_type: \\"}, {"sha": "998201ad8d9ffd685b56dc98d4c91b7e9ed3e295", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af223fae27d2aa16743abadeb5635f8452a49894/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af223fae27d2aa16743abadeb5635f8452a49894/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=af223fae27d2aa16743abadeb5635f8452a49894", "patch": "@@ -553,7 +553,9 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             }\n \n             ty::Predicate::WellFormed(ty) => {\n-                match ty::wf::obligations(self.infcx, obligation.param_env, obligation.cause.body_id,\n+                match ty::wf::obligations(self.infcx,\n+                                          obligation.param_env,\n+                                          obligation.cause.body_id,\n                                           ty, obligation.cause.span) {\n                     Some(obligations) =>\n                         self.evaluate_predicates_recursively(previous_stack, obligations.iter()),"}, {"sha": "12af56d5c3dfa5ee862b0732b58959fae4a868d2", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/af223fae27d2aa16743abadeb5635f8452a49894/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af223fae27d2aa16743abadeb5635f8452a49894/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=af223fae27d2aa16743abadeb5635f8452a49894", "patch": "@@ -1788,10 +1788,11 @@ impl<'a, 'tcx> Layout {\n                 Fields::WithDiscrim(s) => (s, &s.offsets[1..]),\n                 Fields::NoDiscrim(s) => (s, &s.offsets[0..]),\n             };\n-            let field_info: Vec<_> = flds.iter()\n-                                         .zip(field_offsets.iter())\n-                                         .map(|(&field_name_ty, offset)| build_field_info(field_name_ty, offset))\n-                                         .collect();\n+            let field_info: Vec<_> =\n+                flds.iter()\n+                    .zip(field_offsets.iter())\n+                    .map(|(&field_name_ty, offset)| build_field_info(field_name_ty, offset))\n+                    .collect();\n \n             session::VariantInfo {\n                 name: n.map(|n|n.to_string()),\n@@ -1814,9 +1815,10 @@ impl<'a, 'tcx> Layout {\n                 debug!(\"print-type-size t: `{:?}` adt struct-wrapped nullable nndiscr {} is {:?}\",\n                        ty, nndiscr, variant_layout);\n                 let variant_def = &adt_def.variants[nndiscr as usize];\n-                let fields: Vec<_> = variant_def.fields.iter()\n-                                                       .map(|field_def| (field_def.name, field_def.ty(tcx, substs)))\n-                                                       .collect();\n+                let fields: Vec<_> =\n+                    variant_def.fields.iter()\n+                                      .map(|field_def| (field_def.name, field_def.ty(tcx, substs)))\n+                                      .collect();\n                 record(adt_kind.into(),\n                        None,\n                        vec![build_variant_info(Some(variant_def.name),\n@@ -1840,9 +1842,10 @@ impl<'a, 'tcx> Layout {\n                         \"univariant with variants {:?}\", variant_names());\n                 if adt_def.variants.len() == 1 {\n                     let variant_def = &adt_def.variants[0];\n-                    let fields: Vec<_> = variant_def.fields.iter()\n-                                                           .map(|field_def| (field_def.name, field_def.ty(tcx, substs)))\n-                                                           .collect();\n+                    let fields: Vec<_> =\n+                        variant_def.fields.iter()\n+                                          .map(|f| (f.name, f.ty(tcx, substs)))\n+                                          .collect();\n                     record(adt_kind.into(),\n                            None,\n                            vec![build_variant_info(Some(variant_def.name),\n@@ -1858,17 +1861,20 @@ impl<'a, 'tcx> Layout {\n             Layout::General { ref variants, discr, .. } => {\n                 debug!(\"print-type-size t: `{:?}` adt general variants def {} layouts {} {:?}\",\n                        ty, adt_def.variants.len(), variants.len(), variants);\n-                let variant_infos: Vec<_> = adt_def.variants.iter()\n-                                                            .zip(variants.iter())\n-                                                            .map(|(variant_def, variant_layout)| {\n-                                                                let fields: Vec<_> = variant_def.fields.iter()\n-                                                                                                       .map(|field_def| (field_def.name, field_def.ty(tcx, substs)))\n-                                                                                                       .collect();\n-                                                                build_variant_info(Some(variant_def.name),\n-                                                                                   &fields,\n-                                                                                   Fields::WithDiscrim(variant_layout))\n-                                                            })\n-                                                            .collect();\n+                let variant_infos: Vec<_> =\n+                    adt_def.variants.iter()\n+                                    .zip(variants.iter())\n+                                    .map(|(variant_def, variant_layout)| {\n+                                        let fields: Vec<_> =\n+                                            variant_def.fields\n+                                                       .iter()\n+                                                       .map(|f| (f.name, f.ty(tcx, substs)))\n+                                                       .collect();\n+                                        build_variant_info(Some(variant_def.name),\n+                                                           &fields,\n+                                                           Fields::WithDiscrim(variant_layout))\n+                                    })\n+                                    .collect();\n                 record(adt_kind.into(), Some(discr.size()), variant_infos);\n             }\n "}, {"sha": "2518a1739f73e69a85cdee096002de109a09fd01", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af223fae27d2aa16743abadeb5635f8452a49894/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af223fae27d2aa16743abadeb5635f8452a49894/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=af223fae27d2aa16743abadeb5635f8452a49894", "patch": "@@ -1183,7 +1183,9 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                 traits::normalize(selcx, self.param_env, cause.clone(), &impl_bounds);\n \n             // Convert the bounds into obligations.\n-            let obligations = traits::predicates_for_generics(cause.clone(), self.param_env, &impl_bounds);\n+            let obligations = traits::predicates_for_generics(cause.clone(),\n+                                                              self.param_env,\n+                                                              &impl_bounds);\n             debug!(\"impl_obligations={:?}\", obligations);\n \n             // Evaluate those obligations to see if they might possibly hold."}, {"sha": "ccaf9b84a45abd55e28cfdd003165357f63b5132", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/af223fae27d2aa16743abadeb5635f8452a49894/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af223fae27d2aa16743abadeb5635f8452a49894/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=af223fae27d2aa16743abadeb5635f8452a49894", "patch": "@@ -1908,7 +1908,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                     -> InferOk<'tcx, T>\n         where T : TypeFoldable<'tcx>\n     {\n-        self.inh.normalize_associated_types_in_as_infer_ok(span, self.body_id, self.param_env, value)\n+        self.inh.normalize_associated_types_in_as_infer_ok(span,\n+                                                           self.body_id,\n+                                                           self.param_env,\n+                                                           value)\n     }\n \n     pub fn write_nil(&self, node_id: ast::NodeId) {"}, {"sha": "00b044a9beff78418c469c027c73d7bd1d714e73", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af223fae27d2aa16743abadeb5635f8452a49894/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af223fae27d2aa16743abadeb5635f8452a49894/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=af223fae27d2aa16743abadeb5635f8452a49894", "patch": "@@ -386,7 +386,8 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n         for &ty in fn_sig_tys {\n             let ty = self.resolve_type(ty);\n             debug!(\"relate_free_regions(t={:?})\", ty);\n-            let implied_bounds = ty::wf::implied_bounds(self, self.fcx.param_env, body_id, ty, span);\n+            let implied_bounds =\n+                ty::wf::implied_bounds(self, self.fcx.param_env, body_id, ty, span);\n \n             // Record any relations between free regions that we observe into the free-region-map.\n             self.free_region_map.relate_free_regions_from_implied_bounds(&implied_bounds);"}]}