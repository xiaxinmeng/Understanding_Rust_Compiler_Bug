{"sha": "5ccef564560df65db0cb761cb27751f15821f1af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjY2VmNTY0NTYwZGY2NWRiMGNiNzYxY2IyNzc1MWYxNTgyMWYxYWY=", "commit": {"author": {"name": "1000teslas", "email": "47207223+1000teslas@users.noreply.github.com", "date": "2021-01-02T11:03:21Z"}, "committer": {"name": "1000teslas", "email": "47207223+1000teslas@users.noreply.github.com", "date": "2021-01-10T05:47:40Z"}, "message": "Explain why borrows can't be held across yield point in async blocks", "tree": {"sha": "39c668fd481b24801f1c91d5b23e227aa482fa67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39c668fd481b24801f1c91d5b23e227aa482fa67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ccef564560df65db0cb761cb27751f15821f1af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ccef564560df65db0cb761cb27751f15821f1af", "html_url": "https://github.com/rust-lang/rust/commit/5ccef564560df65db0cb761cb27751f15821f1af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ccef564560df65db0cb761cb27751f15821f1af/comments", "author": {"login": "1000teslas", "id": 47207223, "node_id": "MDQ6VXNlcjQ3MjA3MjIz", "avatar_url": "https://avatars.githubusercontent.com/u/47207223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1000teslas", "html_url": "https://github.com/1000teslas", "followers_url": "https://api.github.com/users/1000teslas/followers", "following_url": "https://api.github.com/users/1000teslas/following{/other_user}", "gists_url": "https://api.github.com/users/1000teslas/gists{/gist_id}", "starred_url": "https://api.github.com/users/1000teslas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1000teslas/subscriptions", "organizations_url": "https://api.github.com/users/1000teslas/orgs", "repos_url": "https://api.github.com/users/1000teslas/repos", "events_url": "https://api.github.com/users/1000teslas/events{/privacy}", "received_events_url": "https://api.github.com/users/1000teslas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "1000teslas", "id": 47207223, "node_id": "MDQ6VXNlcjQ3MjA3MjIz", "avatar_url": "https://avatars.githubusercontent.com/u/47207223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1000teslas", "html_url": "https://github.com/1000teslas", "followers_url": "https://api.github.com/users/1000teslas/followers", "following_url": "https://api.github.com/users/1000teslas/following{/other_user}", "gists_url": "https://api.github.com/users/1000teslas/gists{/gist_id}", "starred_url": "https://api.github.com/users/1000teslas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1000teslas/subscriptions", "organizations_url": "https://api.github.com/users/1000teslas/orgs", "repos_url": "https://api.github.com/users/1000teslas/repos", "events_url": "https://api.github.com/users/1000teslas/events{/privacy}", "received_events_url": "https://api.github.com/users/1000teslas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef589490a709984d3be80c9b59a1a10a4dd05e3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef589490a709984d3be80c9b59a1a10a4dd05e3c", "html_url": "https://github.com/rust-lang/rust/commit/ef589490a709984d3be80c9b59a1a10a4dd05e3c"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "1dd102f4f347f2977889374bf4787211ba468e9d", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5ccef564560df65db0cb761cb27751f15821f1af/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccef564560df65db0cb761cb27751f15821f1af/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=5ccef564560df65db0cb761cb27751f15821f1af", "patch": "@@ -1323,6 +1323,16 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             suggestion,\n             Applicability::MachineApplicable,\n         );\n+        if let Some(generator_kind) = use_span.generator_kind() {\n+            if let GeneratorKind::Async(_) = generator_kind {\n+                err.note(\n+            \"borrows cannot be held across a yield point, because the stack space of the current \\\n+            function is not preserved\",\n+        );\n+                err.help(\"see https://rust-lang.github.io/async-book/03_async_await/01_chapter.html#awaiting-on-a-multithreaded-executor \\\n+        for more information\");\n+            }\n+        }\n \n         let msg = match category {\n             ConstraintCategory::Return(_) | ConstraintCategory::OpaqueType => {"}, {"sha": "e3d8eb737722328896d02c435f4d981ba7ef91e0", "filename": "src/test/ui/async-await/issues/issue-78938-async-block.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5ccef564560df65db0cb761cb27751f15821f1af/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78938-async-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccef564560df65db0cb761cb27751f15821f1af/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78938-async-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78938-async-block.rs?ref=5ccef564560df65db0cb761cb27751f15821f1af", "patch": "@@ -0,0 +1,33 @@\n+// edition:2018\n+\n+use std::{sync::Arc, future::Future, pin::Pin, task::{Context,Poll}};\n+\n+async fn f() {\n+    let room_ref = Arc::new(Vec::new());\n+\n+    let gameloop_handle = spawn(async { //~ ERROR E0373\n+        game_loop(Arc::clone(&room_ref))\n+    });\n+    gameloop_handle.await;\n+}\n+\n+fn game_loop(v: Arc<Vec<usize>>) {}\n+\n+fn spawn<F>(future: F) -> JoinHandle\n+where\n+    F: Future + Send + 'static,\n+    F::Output: Send + 'static,  \n+{\n+    loop {}\n+}\n+\n+struct JoinHandle;\n+\n+impl Future for JoinHandle {\n+    type Output = ();\n+    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n+        loop {}\n+    }\n+}\n+\n+fn main() {}\n\\ No newline at end of file"}, {"sha": "83cf1a5bc46e8cd4e7c77705f84f897a1514d678", "filename": "src/test/ui/async-await/issues/issue-78938-async-block.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5ccef564560df65db0cb761cb27751f15821f1af/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78938-async-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ccef564560df65db0cb761cb27751f15821f1af/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78938-async-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78938-async-block.stderr?ref=5ccef564560df65db0cb761cb27751f15821f1af", "patch": "@@ -0,0 +1,30 @@\n+error[E0373]: async block may outlive the current function, but it borrows `room_ref`, which is owned by the current function\n+  --> $DIR/issue-78938-async-block.rs:8:39\n+   |\n+LL |       let gameloop_handle = spawn(async {\n+   |  _______________________________________^\n+LL | |         game_loop(Arc::clone(&room_ref))\n+   | |                               -------- `room_ref` is borrowed here\n+LL | |     });\n+   | |_____^ may outlive borrowed value `room_ref`\n+   |\n+   = note: borrows cannot be held across a yield point, because the stack space of the current function is not preserved\n+   = help: see https://rust-lang.github.io/async-book/03_async_await/01_chapter.html#awaiting-on-a-multithreaded-executor for more information\n+note: function requires argument type to outlive `'static`\n+  --> $DIR/issue-78938-async-block.rs:8:33\n+   |\n+LL |       let gameloop_handle = spawn(async {\n+   |  _________________________________^\n+LL | |         game_loop(Arc::clone(&room_ref))\n+LL | |     });\n+   | |_____^\n+help: to force the async block to take ownership of `room_ref` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |     let gameloop_handle = spawn(async move {\n+LL |         game_loop(Arc::clone(&room_ref))\n+LL |     });\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0373`."}]}