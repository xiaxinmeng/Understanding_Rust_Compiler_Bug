{"sha": "55fc552d9900e2f53ad4302da9387da32d7bcf8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1ZmM1NTJkOTkwMGUyZjUzYWQ0MzAyZGE5Mzg3ZGEzMmQ3YmNmOGQ=", "commit": {"author": {"name": "JCTyBlaidd", "email": "JCTyblaidd@users.noreply.github.com", "date": "2020-11-27T19:26:06Z"}, "committer": {"name": "JCTyBlaidd", "email": "JCTyblaidd@users.noreply.github.com", "date": "2020-11-27T19:26:06Z"}, "message": "Apply review changes, incrementing the clocks twice is an unnecessary hold-over from earlier versions so fixed.", "tree": {"sha": "c4b886baff0a1752c360ee3418a2c2ad9d0fb426", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4b886baff0a1752c360ee3418a2c2ad9d0fb426"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55fc552d9900e2f53ad4302da9387da32d7bcf8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55fc552d9900e2f53ad4302da9387da32d7bcf8d", "html_url": "https://github.com/rust-lang/rust/commit/55fc552d9900e2f53ad4302da9387da32d7bcf8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55fc552d9900e2f53ad4302da9387da32d7bcf8d/comments", "author": {"login": "JCTyblaidd", "id": 8288600, "node_id": "MDQ6VXNlcjgyODg2MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8288600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JCTyblaidd", "html_url": "https://github.com/JCTyblaidd", "followers_url": "https://api.github.com/users/JCTyblaidd/followers", "following_url": "https://api.github.com/users/JCTyblaidd/following{/other_user}", "gists_url": "https://api.github.com/users/JCTyblaidd/gists{/gist_id}", "starred_url": "https://api.github.com/users/JCTyblaidd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JCTyblaidd/subscriptions", "organizations_url": "https://api.github.com/users/JCTyblaidd/orgs", "repos_url": "https://api.github.com/users/JCTyblaidd/repos", "events_url": "https://api.github.com/users/JCTyblaidd/events{/privacy}", "received_events_url": "https://api.github.com/users/JCTyblaidd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JCTyblaidd", "id": 8288600, "node_id": "MDQ6VXNlcjgyODg2MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8288600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JCTyblaidd", "html_url": "https://github.com/JCTyblaidd", "followers_url": "https://api.github.com/users/JCTyblaidd/followers", "following_url": "https://api.github.com/users/JCTyblaidd/following{/other_user}", "gists_url": "https://api.github.com/users/JCTyblaidd/gists{/gist_id}", "starred_url": "https://api.github.com/users/JCTyblaidd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JCTyblaidd/subscriptions", "organizations_url": "https://api.github.com/users/JCTyblaidd/orgs", "repos_url": "https://api.github.com/users/JCTyblaidd/repos", "events_url": "https://api.github.com/users/JCTyblaidd/events{/privacy}", "received_events_url": "https://api.github.com/users/JCTyblaidd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3268f56a97f2ac7fbcdf6f23e31445a29c529674", "url": "https://api.github.com/repos/rust-lang/rust/commits/3268f56a97f2ac7fbcdf6f23e31445a29c529674", "html_url": "https://github.com/rust-lang/rust/commit/3268f56a97f2ac7fbcdf6f23e31445a29c529674"}], "stats": {"total": 135, "additions": 95, "deletions": 40}, "files": [{"sha": "3f70631d1362cd94298c231ef9fd8ef3af6b76f2", "filename": "src/data_race.rs", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/55fc552d9900e2f53ad4302da9387da32d7bcf8d/src%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fc552d9900e2f53ad4302da9387da32d7bcf8d/src%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdata_race.rs?ref=55fc552d9900e2f53ad4302da9387da32d7bcf8d", "patch": "@@ -37,6 +37,24 @@\n //! to a acquire load and a release store given the global sequentially consistent order\n //! of the schedule.\n //!\n+//! The timestamps used in the data-race detector assign each sequence of non-atomic operations\n+//! followed by a single atomic or concurrent operation a single timestamp.\n+//! Write, Read, Write, ThreadJoin will be represented by a single timestamp value on a thread\n+//! This is because extra increment operations between the operations in the sequence are not\n+//! required for accurate reporting of data-race values.\n+//!\n+//! If the timestamp was not incremented after the atomic operation, then data-races would not be detected:\n+//!  Example - this should report a data-race but does not:\n+//!   t1: (x,0), atomic[release A],                    t1=(x+1, 0  ), write(var B),\n+//!   t2: (0,y)                   , atomic[acquire A], t2=(x+1, y+1),             ,write(var B)\n+//!\n+//! The timestamp is not incremented before an atomic operation, since the result is indistinguishable\n+//! from the value not being incremented.\n+//!    t: (x, 0), atomic[release _], (x + 1, 0) || (0, y), atomic[acquire _], (x, _)\n+//! vs t: (x, 0), atomic[release _], (x + 1, 0) || (0, y), atomic[acquire _], (x+1, _)\n+//! Both result in the sequence on thread x up to and including the atomic release as happening\n+//! before the acquire.\n+//!\n //! FIXME:\n //! currently we have our own local copy of the currently active thread index and names, this is due\n //! in part to the inability to access the current location of threads.active_thread inside the AllocExtra\n@@ -499,7 +517,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n     }\n \n     /// Perform an atomic compare and exchange at a given memory location\n-    /// on success an atomic RMW operation is performed and on failure\n+    /// On success an atomic RMW operation is performed and on failure\n     /// only an atomic read occurs.\n     fn atomic_compare_exchange_scalar(\n         &mut self,\n@@ -1136,9 +1154,6 @@ impl GlobalState {\n         // Now load the two clocks and configure the initial state.\n         let (current, created) = vector_clocks.pick2_mut(current_index, created_index);\n \n-        // Advance the current thread before the synchronized operation.\n-        current.increment_clock(current_index);\n-\n         // Join the created with current, since the current threads\n         // previous actions happen-before the created thread.\n         created.join_with(current);\n@@ -1167,14 +1182,12 @@ impl GlobalState {\n             .as_ref()\n             .expect(\"Joined with thread but thread has not terminated\");\n \n-        // Pre increment clocks before atomic operation.\n-        current.increment_clock(current_index);\n \n         // The join thread happens-before the current thread\n         // so update the current vector clock.\n         current.clock.join(join_clock);\n \n-        // Post increment clocks after atomic operation.\n+        // Increment clocks after atomic operation.\n         current.increment_clock(current_index);\n \n         // Check the number of active threads, if the value is 1\n@@ -1277,8 +1290,7 @@ impl GlobalState {\n         op: impl FnOnce(VectorIdx, RefMut<'_, ThreadClockSet>) -> InterpResult<'tcx>,\n     ) -> InterpResult<'tcx> {\n         if self.multi_threaded.get() {\n-            let (index, mut clocks) = self.current_thread_state_mut();\n-            clocks.increment_clock(index);\n+            let (index, clocks) = self.current_thread_state_mut();\n             op(index, clocks)?;\n             let (_, mut clocks) = self.current_thread_state_mut();\n             clocks.increment_clock(index);\n@@ -1303,16 +1315,18 @@ impl GlobalState {\n     /// `validate_lock_release` must happen before this.\n     pub fn validate_lock_acquire(&self, lock: &VClock, thread: ThreadId) {\n         let (index, mut clocks) = self.load_thread_state_mut(thread);\n-        clocks.increment_clock(index);\n         clocks.clock.join(&lock);\n         clocks.increment_clock(index);\n     }\n \n     /// Release a lock handle, express that this happens-before\n     /// any subsequent calls to `validate_lock_acquire`.\n+    /// For normal locks this should be equivalent to `validate_lock_release_shared`\n+    /// since an acquire operation should have occured before, however\n+    /// for futex & cond-var operations this is not the case and this\n+    /// operation must be used.\n     pub fn validate_lock_release(&self, lock: &mut VClock, thread: ThreadId) {\n         let (index, mut clocks) = self.load_thread_state_mut(thread);\n-        clocks.increment_clock(index);\n         lock.clone_from(&clocks.clock);\n         clocks.increment_clock(index);\n     }\n@@ -1321,9 +1335,11 @@ impl GlobalState {\n     /// any subsequent calls to `validate_lock_acquire` as well\n     /// as any previous calls to this function after any\n     /// `validate_lock_release` calls.\n+    /// For normal locks this should be equivalent to `validate_lock_release`\n+    /// this function only exists for joining over the set of concurrent readers\n+    /// in a read-write lock and should not be used for anything else.\n     pub fn validate_lock_release_shared(&self, lock: &mut VClock, thread: ThreadId) {\n         let (index, mut clocks) = self.load_thread_state_mut(thread);\n-        clocks.increment_clock(index);\n         lock.join(&clocks.clock);\n         clocks.increment_clock(index);\n     }"}, {"sha": "efa44129919484ede9b814e0fbe4f29eb49ca2bd", "filename": "src/shims/posix/sync.rs", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/55fc552d9900e2f53ad4302da9387da32d7bcf8d/src%2Fshims%2Fposix%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fc552d9900e2f53ad4302da9387da32d7bcf8d/src%2Fshims%2Fposix%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fsync.rs?ref=55fc552d9900e2f53ad4302da9387da32d7bcf8d", "patch": "@@ -62,9 +62,11 @@ fn mutex_get_kind<'mir, 'tcx: 'mir>(\n     mutex_op: OpTy<'tcx, Tag>,\n ) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {\n     let offset = if ecx.pointer_size().bytes() == 8 { 16 } else { 12 };\n+    //FIXME: this has been made atomic to fix data-race reporting inside the internal\n+    // mutex implementation, it may not need to be atomic.\n     ecx.read_scalar_at_offset_atomic(\n         mutex_op, offset, ecx.machine.layouts.i32,\n-        AtomicReadOp::Acquire\n+        AtomicReadOp::Relaxed\n     )\n }\n \n@@ -74,18 +76,23 @@ fn mutex_set_kind<'mir, 'tcx: 'mir>(\n     kind: impl Into<ScalarMaybeUninit<Tag>>,\n ) -> InterpResult<'tcx, ()> {\n     let offset = if ecx.pointer_size().bytes() == 8 { 16 } else { 12 };\n+    //FIXME: this has been made atomic to fix data-race reporting inside the internal\n+    // mutex implementation, it may not need to be atomic.\n     ecx.write_scalar_at_offset_atomic(\n-        mutex_op, offset, kind, ecx.machine.layouts.i32, \n-        AtomicWriteOp::Release\n+        mutex_op, offset, kind, ecx.machine.layouts.i32,\n+        AtomicWriteOp::Relaxed\n     )\n }\n \n fn mutex_get_id<'mir, 'tcx: 'mir>(\n     ecx: &MiriEvalContext<'mir, 'tcx>,\n     mutex_op: OpTy<'tcx, Tag>,\n ) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {\n+    //FIXME: this has been made atomic to fix data-race reporting inside the internal\n+    // mutex implementation, it may not need to be atomic.\n     ecx.read_scalar_at_offset_atomic(\n-        mutex_op, 4, ecx.machine.layouts.u32, AtomicReadOp::Acquire\n+        mutex_op, 4, ecx.machine.layouts.u32, \n+        AtomicReadOp::Relaxed\n     )\n }\n \n@@ -94,9 +101,11 @@ fn mutex_set_id<'mir, 'tcx: 'mir>(\n     mutex_op: OpTy<'tcx, Tag>,\n     id: impl Into<ScalarMaybeUninit<Tag>>,\n ) -> InterpResult<'tcx, ()> {\n+    //FIXME: this has been made atomic to fix data-race reporting inside the internal\n+    // mutex implementation, it may not need to be atomic.\n     ecx.write_scalar_at_offset_atomic(\n         mutex_op, 4, id, ecx.machine.layouts.u32,\n-        AtomicWriteOp::Release\n+        AtomicWriteOp::Relaxed\n     )\n }\n \n@@ -126,10 +135,12 @@ fn mutex_get_or_create_id<'mir, 'tcx: 'mir>(\n fn rwlock_get_id<'mir, 'tcx: 'mir>(\n     ecx: &MiriEvalContext<'mir, 'tcx>,\n     rwlock_op: OpTy<'tcx, Tag>,\n+    //FIXME: this has been made atomic to fix data-race reporting inside the internal\n+    // rw-lock implementation, it may not need to be atomic.\n ) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {\n     ecx.read_scalar_at_offset_atomic(\n         rwlock_op, 4, ecx.machine.layouts.u32,\n-        AtomicReadOp::Acquire\n+        AtomicReadOp::Relaxed\n     )\n }\n \n@@ -138,9 +149,11 @@ fn rwlock_set_id<'mir, 'tcx: 'mir>(\n     rwlock_op: OpTy<'tcx, Tag>,\n     id: impl Into<ScalarMaybeUninit<Tag>>,\n ) -> InterpResult<'tcx, ()> {\n+    //FIXME: this has been made atomic to fix data-race reporting inside the internal\n+    // rw-lock implementation, it may not need to be atomic.\n     ecx.write_scalar_at_offset_atomic(\n         rwlock_op, 4, id, ecx.machine.layouts.u32,\n-        AtomicWriteOp::Release\n+        AtomicWriteOp::Relaxed\n     )\n }\n \n@@ -194,9 +207,11 @@ fn cond_get_id<'mir, 'tcx: 'mir>(\n     ecx: &MiriEvalContext<'mir, 'tcx>,\n     cond_op: OpTy<'tcx, Tag>,\n ) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {\n+    //FIXME: this has been made atomic to fix data-race reporting inside the internal\n+    // cond-var implementation, it may not need to be atomic.\n     ecx.read_scalar_at_offset_atomic(\n         cond_op, 4, ecx.machine.layouts.u32,\n-        AtomicReadOp::Acquire\n+        AtomicReadOp::Relaxed\n     )\n }\n \n@@ -205,9 +220,11 @@ fn cond_set_id<'mir, 'tcx: 'mir>(\n     cond_op: OpTy<'tcx, Tag>,\n     id: impl Into<ScalarMaybeUninit<Tag>>,\n ) -> InterpResult<'tcx, ()> {\n+    //FIXME: this has been made atomic to fix data-race reporting inside the internal\n+    // cond-var implementation, it may not need to be atomic.\n     ecx.write_scalar_at_offset_atomic(\n         cond_op, 4, id, ecx.machine.layouts.u32,\n-        AtomicWriteOp::Release\n+        AtomicWriteOp::Relaxed\n     )\n }\n "}, {"sha": "0ea20cdff6cb3c1de55bfa14cdcb6ee0891e2cef", "filename": "src/shims/posix/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55fc552d9900e2f53ad4302da9387da32d7bcf8d/src%2Fshims%2Fposix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fc552d9900e2f53ad4302da9387da32d7bcf8d/src%2Fshims%2Fposix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fthread.rs?ref=55fc552d9900e2f53ad4302da9387da32d7bcf8d", "patch": "@@ -15,7 +15,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         this.tcx.sess.warn(\n-            \"thread support is experimental, no weak memory effects are currently emulated.\",\n+            \"thread support is experimental and incomplete: weak memory effects are not emulated.\"\n         );\n \n         // Create the new thread"}, {"sha": "0b9610edc64b3e58d90278e68e27b93b91aca7dc", "filename": "tests/compile-fail/data_race/atomic_read_na_write_race1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Fcompile-fail%2Fdata_race%2Fatomic_read_na_write_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Fcompile-fail%2Fdata_race%2Fatomic_read_na_write_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fatomic_read_na_write_race1.rs?ref=55fc552d9900e2f53ad4302da9387da32d7bcf8d", "previous_filename": "tests/compile-fail/data_race/atomic_read_write_race.rs"}, {"sha": "779babefd8e602339dffa3e675179e65cf9da531", "filename": "tests/compile-fail/data_race/atomic_read_na_write_race2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Fcompile-fail%2Fdata_race%2Fatomic_read_na_write_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Fcompile-fail%2Fdata_race%2Fatomic_read_na_write_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fatomic_read_na_write_race2.rs?ref=55fc552d9900e2f53ad4302da9387da32d7bcf8d", "previous_filename": "tests/compile-fail/data_race/atomic_read_write_race_alt.rs"}, {"sha": "3211a5ae53442c168b6e2f37db64af930da9885b", "filename": "tests/compile-fail/data_race/atomic_write_na_read_race1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_read_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_read_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_read_race1.rs?ref=55fc552d9900e2f53ad4302da9387da32d7bcf8d", "previous_filename": "tests/compile-fail/data_race/atomic_write_read_race.rs"}, {"sha": "131d4e07b829fb1831f0fbb4bb567ca8de7a527d", "filename": "tests/compile-fail/data_race/atomic_write_na_read_race2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_read_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_read_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_read_race2.rs?ref=55fc552d9900e2f53ad4302da9387da32d7bcf8d", "previous_filename": "tests/compile-fail/data_race/atomic_write_read_race_alt.rs"}, {"sha": "74adf7ae4b8d28cb461c4122681099541042e07e", "filename": "tests/compile-fail/data_race/atomic_write_na_write_race1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_write_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_write_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_write_race1.rs?ref=55fc552d9900e2f53ad4302da9387da32d7bcf8d", "previous_filename": "tests/compile-fail/data_race/atomic_write_write_race.rs"}, {"sha": "75ad755fbd2c3c728048b3b5e4a0c3c673ef601a", "filename": "tests/compile-fail/data_race/atomic_write_na_write_race2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_write_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_write_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fatomic_write_na_write_race2.rs?ref=55fc552d9900e2f53ad4302da9387da32d7bcf8d", "previous_filename": "tests/compile-fail/data_race/atomic_write_write_race_alt.rs"}, {"sha": "d8b5d82f830482b33903304bb825596628a79066", "filename": "tests/compile-fail/data_race/dangling_thread_async_race.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Fcompile-fail%2Fdata_race%2Fdangling_thread_async_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Fcompile-fail%2Fdata_race%2Fdangling_thread_async_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fdangling_thread_async_race.rs?ref=55fc552d9900e2f53ad4302da9387da32d7bcf8d", "patch": "@@ -29,9 +29,9 @@ fn main() {\n     sleep(Duration::from_millis(100));\n \n     // Spawn and immediately join a thread\n-    //  to execute the join code-path\n-    //  and ensure that data-race detection\n-    //  remains enabled\n+    // to execute the join code-path\n+    // and ensure that data-race detection\n+    // remains enabled nevertheless.\n     spawn(|| ()).join().unwrap();\n \n     let join2 = unsafe {"}, {"sha": "172b05bd4f0bb6c0b01f9b17d92ea584888b3687", "filename": "tests/compile-fail/data_race/dangling_thread_race.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Fcompile-fail%2Fdata_race%2Fdangling_thread_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Fcompile-fail%2Fdata_race%2Fdangling_thread_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fdangling_thread_race.rs?ref=55fc552d9900e2f53ad4302da9387da32d7bcf8d", "patch": "@@ -29,9 +29,9 @@ fn main() {\n     sleep(Duration::from_millis(100));\n \n     // Spawn and immediately join a thread\n-    //  to execute the join code-path\n-    //  and ensure that data-race detection\n-    //  remains enabled\n+    // to execute the join code-path\n+    // and ensure that data-race detection\n+    // remains enabled nevertheless.\n     spawn(|| ()).join().unwrap();\n \n "}, {"sha": "c2943177713798f42b47fedfb73df726afb7db59", "filename": "tests/compile-fail/data_race/enable_after_join_to_main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Fcompile-fail%2Fdata_race%2Fenable_after_join_to_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Fcompile-fail%2Fdata_race%2Fenable_after_join_to_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fenable_after_join_to_main.rs?ref=55fc552d9900e2f53ad4302da9387da32d7bcf8d", "patch": "@@ -9,7 +9,7 @@ unsafe impl<T> Send for EvilSend<T> {}\n unsafe impl<T> Sync for EvilSend<T> {}\n \n pub fn main() {\n-    // Enable and the join with multiple threads\n+    // Enable and then join with multiple threads.\n     let t1 = spawn(|| ());\n     let t2 = spawn(|| ());\n     let t3 = spawn(|| ());\n@@ -19,7 +19,7 @@ pub fn main() {\n     t3.join().unwrap();\n     t4.join().unwrap();\n \n-    // Perform write-write data race detection\n+    // Perform write-write data race detection.\n     let mut a = 0u32;\n     let b = &mut a as *mut u32;\n     let c = EvilSend(b);"}, {"sha": "2ae0aacbcf776199ba0bc282a6c9f64294c1a9f5", "filename": "tests/compile-fail/data_race/relax_acquire_race.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Fcompile-fail%2Fdata_race%2Frelax_acquire_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Fcompile-fail%2Fdata_race%2Frelax_acquire_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Frelax_acquire_race.rs?ref=55fc552d9900e2f53ad4302da9387da32d7bcf8d", "patch": "@@ -16,6 +16,13 @@ pub fn main() {\n     let b = &mut a as *mut u32;\n     let c = EvilSend(b);\n \n+    // Note: this is scheduler-dependent\n+    // the operations need to occur in\n+    // order:\n+    //  1. store release : 1\n+    //  2. load acquire : 1\n+    //  3. store relaxed : 2\n+    //  4. load acquire : 2\n     unsafe {\n         let j1 = spawn(move || {\n             *c.0 = 1;"}, {"sha": "59263cb7120427f1f5b1a0d65757688fef4ec468", "filename": "tests/compile-fail/data_race/release_seq_race.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Fcompile-fail%2Fdata_race%2Frelease_seq_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Fcompile-fail%2Fdata_race%2Frelease_seq_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Frelease_seq_race.rs?ref=55fc552d9900e2f53ad4302da9387da32d7bcf8d", "patch": "@@ -18,6 +18,14 @@ pub fn main() {\n     let b = &mut a as *mut u32;\n     let c = EvilSend(b);\n \n+    // Note: this is scheduler-dependent\n+    // the operations need to occur in\n+    // order, the sleep operations currently\n+    // force the desired ordering:\n+    //  1. store release : 1\n+    //  2. store relaxed : 2\n+    //  3. store relaxed : 3\n+    //  4. load acquire : 3\n     unsafe {\n         let j1 = spawn(move || {\n             *c.0 = 1;"}, {"sha": "e523f8b374cc244f31ef55f67b5467f7988da440", "filename": "tests/compile-fail/data_race/rmw_race.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Fcompile-fail%2Fdata_race%2Frmw_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Fcompile-fail%2Fdata_race%2Frmw_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Frmw_race.rs?ref=55fc552d9900e2f53ad4302da9387da32d7bcf8d", "patch": "@@ -16,6 +16,13 @@ pub fn main() {\n     let b = &mut a as *mut u32;\n     let c = EvilSend(b);\n \n+    // Note: this is scheduler-dependent\n+    // the operations need to occur in\n+    // order:\n+    //  1. store release : 1\n+    //  2. RMW relaxed : 1 -> 2\n+    //  3. store relaxed : 3\n+    //  4. load acquire : 3\n     unsafe {\n         let j1 = spawn(move || {\n             *c.0 = 1;"}, {"sha": "03676519d4f1c052581dee9227a650c2a4b8d782", "filename": "tests/run-pass/concurrency/data_race.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Frun-pass%2Fconcurrency%2Fdata_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Frun-pass%2Fconcurrency%2Fdata_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fdata_race.stderr?ref=55fc552d9900e2f53ad4302da9387da32d7bcf8d", "patch": "@@ -1,2 +1,2 @@\n-warning: thread support is experimental, no weak memory effects are currently emulated.\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n "}, {"sha": "8b2d180f11d4a91e5a9889fabf9097374fba353e", "filename": "tests/run-pass/concurrency/disable_data_race_detector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Frun-pass%2Fconcurrency%2Fdisable_data_race_detector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Frun-pass%2Fconcurrency%2Fdisable_data_race_detector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fdisable_data_race_detector.rs?ref=55fc552d9900e2f53ad4302da9387da32d7bcf8d", "patch": "@@ -19,7 +19,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n-            *c.0 = 64; //~ ERROR Data race\n+            *c.0 = 64; //~ ERROR Data race (but not detected as the detector is disabled)\n         });\n \n         j1.join().unwrap();"}, {"sha": "03676519d4f1c052581dee9227a650c2a4b8d782", "filename": "tests/run-pass/concurrency/disable_data_race_detector.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Frun-pass%2Fconcurrency%2Fdisable_data_race_detector.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Frun-pass%2Fconcurrency%2Fdisable_data_race_detector.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fdisable_data_race_detector.stderr?ref=55fc552d9900e2f53ad4302da9387da32d7bcf8d", "patch": "@@ -1,2 +1,2 @@\n-warning: thread support is experimental, no weak memory effects are currently emulated.\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n "}, {"sha": "03676519d4f1c052581dee9227a650c2a4b8d782", "filename": "tests/run-pass/concurrency/linux-futex.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Frun-pass%2Fconcurrency%2Flinux-futex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Frun-pass%2Fconcurrency%2Flinux-futex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Flinux-futex.stderr?ref=55fc552d9900e2f53ad4302da9387da32d7bcf8d", "patch": "@@ -1,2 +1,2 @@\n-warning: thread support is experimental, no weak memory effects are currently emulated.\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n "}, {"sha": "f46b1442d749fc09452e99a44be8c07338b5a157", "filename": "tests/run-pass/concurrency/simple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Frun-pass%2Fconcurrency%2Fsimple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Frun-pass%2Fconcurrency%2Fsimple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fsimple.stderr?ref=55fc552d9900e2f53ad4302da9387da32d7bcf8d", "patch": "@@ -1,4 +1,4 @@\n-warning: thread support is experimental, no weak memory effects are currently emulated.\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n \n thread '<unnamed>' panicked at 'Hello!', $DIR/simple.rs:54:9\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace"}, {"sha": "03676519d4f1c052581dee9227a650c2a4b8d782", "filename": "tests/run-pass/concurrency/sync.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Frun-pass%2Fconcurrency%2Fsync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Frun-pass%2Fconcurrency%2Fsync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fsync.stderr?ref=55fc552d9900e2f53ad4302da9387da32d7bcf8d", "patch": "@@ -1,2 +1,2 @@\n-warning: thread support is experimental, no weak memory effects are currently emulated.\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n "}, {"sha": "03676519d4f1c052581dee9227a650c2a4b8d782", "filename": "tests/run-pass/concurrency/thread_locals.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Frun-pass%2Fconcurrency%2Fthread_locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Frun-pass%2Fconcurrency%2Fthread_locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fthread_locals.stderr?ref=55fc552d9900e2f53ad4302da9387da32d7bcf8d", "patch": "@@ -1,2 +1,2 @@\n-warning: thread support is experimental, no weak memory effects are currently emulated.\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n "}, {"sha": "03676519d4f1c052581dee9227a650c2a4b8d782", "filename": "tests/run-pass/concurrency/tls_lib_drop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Frun-pass%2Fconcurrency%2Ftls_lib_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Frun-pass%2Fconcurrency%2Ftls_lib_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Ftls_lib_drop.stderr?ref=55fc552d9900e2f53ad4302da9387da32d7bcf8d", "patch": "@@ -1,2 +1,2 @@\n-warning: thread support is experimental, no weak memory effects are currently emulated.\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n "}, {"sha": "03676519d4f1c052581dee9227a650c2a4b8d782", "filename": "tests/run-pass/libc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Frun-pass%2Flibc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Frun-pass%2Flibc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Flibc.stderr?ref=55fc552d9900e2f53ad4302da9387da32d7bcf8d", "patch": "@@ -1,2 +1,2 @@\n-warning: thread support is experimental, no weak memory effects are currently emulated.\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n "}, {"sha": "1ee688c1d32cc42c6ef02286f80a8a4a7d7a1162", "filename": "tests/run-pass/panic/concurrent-panic.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Frun-pass%2Fpanic%2Fconcurrent-panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55fc552d9900e2f53ad4302da9387da32d7bcf8d/tests%2Frun-pass%2Fpanic%2Fconcurrent-panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fconcurrent-panic.stderr?ref=55fc552d9900e2f53ad4302da9387da32d7bcf8d", "patch": "@@ -1,4 +1,4 @@\n-warning: thread support is experimental, no weak memory effects are currently emulated.\n+warning: thread support is experimental and incomplete: weak memory effects are not emulated.\n \n Thread 1 starting, will block on mutex\n Thread 1 reported it has started"}]}