{"sha": "f03863ae7d372e2024bf87f0b9f7058237a918a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwMzg2M2FlN2QzNzJlMjAyNGJmODdmMGI5ZjcwNTgyMzdhOTE4YTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-12T02:06:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-12T02:06:58Z"}, "message": "auto merge of #14713 : darnuria/rust/Improve_std_os_documentation_#2, r=alexcrichton\n\nImproving documentation, consistency, removes evils empty lines etc...", "tree": {"sha": "7b29317f0c5ebe87b2692a6be047e4b56d949460", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b29317f0c5ebe87b2692a6be047e4b56d949460"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f03863ae7d372e2024bf87f0b9f7058237a918a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f03863ae7d372e2024bf87f0b9f7058237a918a2", "html_url": "https://github.com/rust-lang/rust/commit/f03863ae7d372e2024bf87f0b9f7058237a918a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f03863ae7d372e2024bf87f0b9f7058237a918a2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ceaeb667b327cff7ad286255d68cb5a8ba8a4d7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ceaeb667b327cff7ad286255d68cb5a8ba8a4d7c", "html_url": "https://github.com/rust-lang/rust/commit/ceaeb667b327cff7ad286255d68cb5a8ba8a4d7c"}, {"sha": "6dc06249d78e7836ebe74e18c1924e879b3343d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dc06249d78e7836ebe74e18c1924e879b3343d2", "html_url": "https://github.com/rust-lang/rust/commit/6dc06249d78e7836ebe74e18c1924e879b3343d2"}], "stats": {"total": 216, "additions": 140, "deletions": 76}, "files": [{"sha": "cc76cde7baffc6ec1007d102e6c8756ac2ff0e12", "filename": "src/libstd/os.rs", "status": "modified", "additions": 140, "deletions": 76, "changes": 216, "blob_url": "https://github.com/rust-lang/rust/blob/f03863ae7d372e2024bf87f0b9f7058237a918a2/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03863ae7d372e2024bf87f0b9f7058237a918a2/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=f03863ae7d372e2024bf87f0b9f7058237a918a2", "patch": "@@ -73,8 +73,10 @@ static BUF_BYTES : uint = 2048u;\n /// # Example\n ///\n /// ```rust\n+/// use std::os;\n+///\n /// // We assume that we are in a valid directory like \"/home\".\n-/// let current_working_directory = std::os::getcwd();\n+/// let current_working_directory = os::getcwd();\n /// println!(\"The current directory is {}\", current_working_directory.display());\n /// // /home\n /// ```\n@@ -104,8 +106,10 @@ pub fn getcwd() -> Path {\n /// # Example\n ///\n /// ```rust\n+/// use std::os;\n+///\n /// // We assume that we are in a valid directory like \"C:\\\\Windows\".\n-/// let current_working_directory = std::os::getcwd();\n+/// let current_working_directory = os::getcwd();\n /// println!(\"The current directory is {}\", current_working_directory.display());\n /// // C:\\\\Windows\n /// ```\n@@ -188,17 +192,19 @@ fn with_env_lock<T>(f: || -> T) -> T {\n     }\n }\n \n-/// Returns a vector of (variable, value) pairs as a Vec<(String, String)>,\n-/// for all the environment variables of the current process.\n+/// Returns a vector of (variable, value) pairs, for all the environment\n+/// variables of the current process.\n ///\n /// Invalid UTF-8 bytes are replaced with \\uFFFD. See `str::from_utf8_lossy()`\n /// for details.\n ///\n /// # Example\n ///\n /// ```rust\n-/// // We will iterate through the references to the element returned by std::os::env();\n-/// for &(ref key, ref value) in std::os::env().iter() {\n+/// use std::os;\n+///\n+/// // We will iterate through the references to the element returned by os::env();\n+/// for &(ref key, ref value) in os::env().iter() {\n ///     println!(\"'{}': '{}'\", key, value );\n /// }\n /// ```\n@@ -306,8 +312,10 @@ pub fn env_as_bytes() -> Vec<(Vec<u8>,Vec<u8>)> {\n /// # Example\n ///\n /// ```rust\n+/// use std::os;\n+///\n /// let key = \"HOME\";\n-/// match std::os::getenv(key) {\n+/// match os::getenv(key) {\n ///     Some(val) => println!(\"{}: {}\", key, val),\n ///     None => println!(\"{} is not defined in the environment.\", key)\n /// }\n@@ -361,45 +369,49 @@ pub fn getenv_as_bytes(n: &str) -> Option<Vec<u8>> {\n     getenv(n).map(|s| s.into_bytes())\n }\n \n-\n-#[cfg(unix)]\n /// Sets the environment variable `n` to the value `v` for the currently running\n-/// process\n+/// process.\n ///\n-/// # Failure\n+/// # Example\n ///\n-/// Fails if `n` or `v` have any interior NULs.\n+/// ```rust\n+/// use std::os;\n+///\n+/// let key = \"KEY\";\n+/// os::setenv(key, \"VALUE\");\n+/// match os::getenv(key) {\n+///     Some(ref val) => println!(\"{}: {}\", key, val),\n+///     None => println!(\"{} is not defined in the environment.\", key)\n+/// }\n+/// ```\n pub fn setenv(n: &str, v: &str) {\n-    unsafe {\n-        with_env_lock(|| {\n-            n.with_c_str(|nbuf| {\n-                v.with_c_str(|vbuf| {\n-                    libc::funcs::posix01::unistd::setenv(nbuf, vbuf, 1);\n+    #[cfg(unix)]\n+    fn _setenv(n: &str, v: &str) {\n+        unsafe {\n+            with_env_lock(|| {\n+                n.with_c_str(|nbuf| {\n+                    v.with_c_str(|vbuf| {\n+                        libc::funcs::posix01::unistd::setenv(nbuf, vbuf, 1);\n+                    })\n                 })\n             })\n-        })\n+        }\n     }\n-}\n-\n \n-#[cfg(windows)]\n-/// Sets the environment variable `n` to the value `v` for the currently running\n-/// process\n-pub fn setenv(n: &str, v: &str) {\n-    let n = n.to_utf16().append_one(0);\n-    let v = v.to_utf16().append_one(0);\n-    unsafe {\n-        with_env_lock(|| {\n-            libc::SetEnvironmentVariableW(n.as_ptr(), v.as_ptr());\n-        })\n+    #[cfg(windows)]\n+    fn _setenv(n: &str, v: &str) {\n+        let n = n.to_utf16().append_one(0);\n+        let v = v.to_utf16().append_one(0);\n+        unsafe {\n+            with_env_lock(|| {\n+                libc::SetEnvironmentVariableW(n.as_ptr(), v.as_ptr());\n+            })\n+        }\n     }\n+    _setenv(n, v)\n }\n \n-/// Remove a variable from the environment entirely\n-///\n-/// # Failure\n-///\n-/// Fails (on unix) if `n` has any interior NULs.\n+/// Remove a variable from the environment entirely.\n pub fn unsetenv(n: &str) {\n     #[cfg(unix)]\n     fn _unsetenv(n: &str) {\n@@ -411,6 +423,7 @@ pub fn unsetenv(n: &str) {\n             })\n         }\n     }\n+\n     #[cfg(windows)]\n     fn _unsetenv(n: &str) {\n         let n = n.to_utf16().append_one(0);\n@@ -420,13 +433,28 @@ pub fn unsetenv(n: &str) {\n             })\n         }\n     }\n-\n     _unsetenv(n);\n }\n \n #[cfg(unix)]\n /// Parse a string or vector according to the platform's conventions\n-/// for the `PATH` environment variable. Drops empty paths.\n+/// for the `PATH` environment variable and return a Vec<Path>.\n+/// Drops empty paths.\n+///\n+/// # Example\n+/// ```rust\n+/// use std::os;\n+///\n+/// let key = \"PATH\";\n+/// match os::getenv(key) {\n+///     Some(paths) => {\n+///         for path in os::split_paths(paths).iter() {\n+///             println!(\"'{}'\", path.display());\n+///         }\n+///     }\n+///     None => println!(\"{} is not defined in the environnement.\", key)\n+/// }\n+/// ```\n pub fn split_paths<T: BytesContainer>(unparsed: T) -> Vec<Path> {\n     unparsed.container_as_bytes()\n             .split(|b| *b == ':' as u8)\n@@ -491,7 +519,7 @@ pub struct Pipe {\n     pub out: c_int,\n }\n \n-/// Creates a new low-level OS in-memory pipe.\n+/// Creates a new low-level OS in-memory pipe represented as a Pipe struct.\n #[cfg(unix)]\n pub fn pipe() -> Pipe {\n     unsafe {\n@@ -502,7 +530,7 @@ pub fn pipe() -> Pipe {\n     }\n }\n \n-/// Creates a new low-level OS in-memory pipe.\n+/// Creates a new low-level OS in-memory pipe represented as a Pipe struct.\n #[cfg(windows)]\n pub fn pipe() -> Pipe {\n     unsafe {\n@@ -522,13 +550,25 @@ pub fn pipe() -> Pipe {\n     }\n }\n \n-/// Returns the proper dll filename for the given basename of a file.\n+/// Returns the proper dll filename for the given basename of a file\n+/// as a String.\n pub fn dll_filename(base: &str) -> String {\n     format!(\"{}{}{}\", consts::DLL_PREFIX, base, consts::DLL_SUFFIX)\n }\n \n-/// Optionally returns the filesystem path of the current executable which is\n-/// running. If any failure occurs, None is returned.\n+/// Optionally returns the filesystem path to the current executable which is\n+/// running but with the executable name.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// use std::os;\n+///\n+/// match os::self_exe_name() {\n+///     Some(exe_path) => println!(\"Path of this executable is: {}\", exe_path.display()),\n+///     None => println!(\"Unable to get the path of this executable!\")\n+/// };\n+/// ```\n pub fn self_exe_name() -> Option<Path> {\n \n     #[cfg(target_os = \"freebsd\")]\n@@ -598,47 +638,71 @@ pub fn self_exe_name() -> Option<Path> {\n }\n \n /// Optionally returns the filesystem path to the current executable which is\n-/// running. Like self_exe_name() but without the binary's name.\n-/// If any failure occurs, None is returned.\n+/// running.\n+///\n+/// Like self_exe_name() but without the binary's name.\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// use std::os;\n+///\n+/// match os::self_exe_path() {\n+///     Some(exe_path) => println!(\"Executable's Path is: {}\", exe_path.display()),\n+///     None => println!(\"Impossible to fetch the path of this executable.\")\n+/// };\n+/// ```\n pub fn self_exe_path() -> Option<Path> {\n     self_exe_name().map(|mut p| { p.pop(); p })\n }\n \n-/**\n- * Returns the path to the user's home directory, if known.\n- *\n- * On Unix, returns the value of the 'HOME' environment variable if it is set\n- * and not equal to the empty string.\n- *\n- * On Windows, returns the value of the 'HOME' environment variable if it is\n- * set and not equal to the empty string. Otherwise, returns the value of the\n- * 'USERPROFILE' environment variable if it is set and not equal to the empty\n- * string.\n- *\n- * Otherwise, homedir returns option::none.\n- */\n+/// Optionally returns the path to the current user's home directory if known.\n+///\n+/// # Unix\n+///\n+/// Returns the value of the 'HOME' environment variable if it is set\n+/// and not equal to the empty string.\n+///\n+/// # Windows\n+///\n+/// Returns the value of the 'HOME' environment variable if it is\n+/// set and not equal to the empty string. Otherwise, returns the value of the\n+/// 'USERPROFILE' environment variable if it is set and not equal to the empty\n+/// string.\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// use std::os;\n+///\n+/// match os::homedir() {\n+///     Some(ref p) => println!(\"{}\", p.display()),\n+///     None => println!(\"Impossible to get your home dir!\")\n+/// }\n+/// ```\n pub fn homedir() -> Option<Path> {\n-    // FIXME (#7188): getenv needs a Vec<u8> variant\n-    return match getenv(\"HOME\") {\n-        Some(ref p) if !p.is_empty() => Path::new_opt(p.as_slice()),\n-        _ => secondary()\n-    };\n-\n+    #[inline]\n     #[cfg(unix)]\n-    fn secondary() -> Option<Path> {\n-        None\n+    fn _homedir() -> Option<Path> {\n+        aux_homedir(\"HOME\")\n     }\n \n+    #[inline]\n     #[cfg(windows)]\n-    fn secondary() -> Option<Path> {\n-        getenv(\"USERPROFILE\").and_then(|p| {\n-            if !p.is_empty() {\n-                Path::new_opt(p)\n-            } else {\n-                None\n-            }\n-        })\n+    fn _homedir() -> Option<Path> {\n+        aux_homedir(\"HOME\").or(aux_homedir(\"USERPROFILE\"))\n+    }\n+\n+    #[inline]\n+    fn aux_homedir(home_name: &str) -> Option<Path> {\n+        match getenv_as_bytes(home_name) {\n+            Some(p)  => {\n+                if p.is_empty() { None } else { Path::new_opt(p) }\n+            },\n+            _ => None\n+        }\n     }\n+    _homedir()\n }\n \n /**\n@@ -1732,7 +1796,7 @@ mod tests {\n         assert!(os::homedir().is_none());\n \n         for s in oldhome.iter() {\n-            setenv(\"HOME\", s.as_slice())\n+            setenv(\"HOME\", s.as_slice());\n         }\n     }\n \n@@ -1761,10 +1825,10 @@ mod tests {\n         assert!(os::homedir() == Some(Path::new(\"/home/MountainView\")));\n \n         for s in oldhome.iter() {\n-            setenv(\"HOME\", s.as_slice())\n+            setenv(\"HOME\", s.as_slice());\n         }\n         for s in olduserprofile.iter() {\n-            setenv(\"USERPROFILE\", s.as_slice())\n+            setenv(\"USERPROFILE\", s.as_slice());\n         }\n     }\n "}]}