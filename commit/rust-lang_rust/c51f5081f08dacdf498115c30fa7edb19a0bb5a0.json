{"sha": "c51f5081f08dacdf498115c30fa7edb19a0bb5a0", "node_id": "C_kwDOAAsO6NoAKGM1MWY1MDgxZjA4ZGFjZGY0OTgxMTVjMzBmYTdlZGIxOWEwYmI1YTA", "commit": {"author": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2022-06-18T03:11:47Z"}, "committer": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2022-06-18T03:49:07Z"}, "message": "Skip late bound regions in GATSubstCollector\n\n#93227 liberated late bound regions when collecting GAT substs in wfcheck.  It should simply skip late bound regions instead.\n\nr? @compiler-errors", "tree": {"sha": "d3cd9f04bd430dee712fc3d19d2136997011ee36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3cd9f04bd430dee712fc3d19d2136997011ee36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c51f5081f08dacdf498115c30fa7edb19a0bb5a0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEm/Nz5g9hEBdpmKVOB8rDzKfgZD8FAmKtSzMACgkQB8rDzKfg\nZD+mhw//eGpNxkRNFPOjcPqPZ/Q+zTqL9z1HvWz1bhnXHOgK8cWqmeho1i3jWfCa\ne9oQ6YC97hCwA8OyeX3XC6bWcpVdZldF57KZfS+5tJJErre7WP+Fi/NMTfTIVhO9\nC1b5EGDwTdSJHqPzjZQ+2x1QHq5vfelUfPw9RG75AT8jYdgzzTFZOfCbEyJaq+IH\nPACssMEz6P42BpdqpZf8uHjh8NjsnfKbPddSWc3vxj4CSeyuu+tAM1ExxFICHzg6\nnEFFPOkpvll3XpwvnIauaZyYtok9A3vuS0KY7BeZOeW44n4YrzFnV4eqgS6FaaZk\nBw2Fjphxt+TbmFrfA5CXTwcWQuYHK1AqUQ/a9NIs+qdX8v/8XmiGkMrdZOu8ILiW\ni+C7MsjqauxB+B7curemv4aZr/houvW6B7DNbp2ovzpXkFYnSHPmw53kXLWiD3+A\nACGGzpjE6jc46vhM5cZuT3Nu86tL6VWEBhNAZQj9Za8edI40lEKAkSep0WMWgJXm\nu8y0eKaTFx+8iq1ANe92ieSDPewUNvcJVlVSPzacw0QdvLSHNhaPD45mXvQXozjv\n6oRE0/DPKkS9LGvYg6ofxAiCByqQdFTgOBqzjxtPH88EYiOrhKME2pwaye/+tbjY\nHSV+qkJVe8xenw71Ofontn8zyLA4OVAQ0lkhyO5KW/meFeDwZRg=\n=ahzW\n-----END PGP SIGNATURE-----", "payload": "tree d3cd9f04bd430dee712fc3d19d2136997011ee36\nparent aaf100597cc6986d5ebd005d58a9394dd6edef4d\nauthor Alan Egerton <eggyal@gmail.com> 1655521907 +0100\ncommitter Alan Egerton <eggyal@gmail.com> 1655524147 +0100\n\nSkip late bound regions in GATSubstCollector\n\n#93227 liberated late bound regions when collecting GAT substs in wfcheck.  It should simply skip late bound regions instead.\n\nr? @compiler-errors\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c51f5081f08dacdf498115c30fa7edb19a0bb5a0", "html_url": "https://github.com/rust-lang/rust/commit/c51f5081f08dacdf498115c30fa7edb19a0bb5a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c51f5081f08dacdf498115c30fa7edb19a0bb5a0/comments", "author": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaf100597cc6986d5ebd005d58a9394dd6edef4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaf100597cc6986d5ebd005d58a9394dd6edef4d", "html_url": "https://github.com/rust-lang/rust/commit/aaf100597cc6986d5ebd005d58a9394dd6edef4d"}], "stats": {"total": 21, "additions": 4, "deletions": 17}, "files": [{"sha": "75340d35d4081a1993cd3d8cb62be976e381a079", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c51f5081f08dacdf498115c30fa7edb19a0bb5a0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c51f5081f08dacdf498115c30fa7edb19a0bb5a0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=c51f5081f08dacdf498115c30fa7edb19a0bb5a0", "patch": "@@ -490,7 +490,7 @@ fn gather_gat_bounds<'tcx, T: TypeFoldable<'tcx>>(\n     // The bounds we that we would require from `to_check`\n     let mut bounds = FxHashSet::default();\n \n-    let (regions, types) = GATSubstCollector::visit(tcx, gat_def_id.to_def_id(), to_check);\n+    let (regions, types) = GATSubstCollector::visit(gat_def_id.to_def_id(), to_check);\n \n     // If both regions and types are empty, then this GAT isn't in the\n     // set of types we are checking, and we shouldn't try to do clause analysis\n@@ -664,7 +664,6 @@ fn resolve_regions_with_wf_tys<'tcx>(\n /// the two vectors, `regions` and `types` (depending on their kind). For each\n /// parameter `Pi` also track the index `i`.\n struct GATSubstCollector<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n     gat: DefId,\n     // Which region appears and which parameter index its substituted for\n     regions: FxHashSet<(ty::Region<'tcx>, usize)>,\n@@ -674,16 +673,11 @@ struct GATSubstCollector<'tcx> {\n \n impl<'tcx> GATSubstCollector<'tcx> {\n     fn visit<T: TypeFoldable<'tcx>>(\n-        tcx: TyCtxt<'tcx>,\n         gat: DefId,\n         t: T,\n     ) -> (FxHashSet<(ty::Region<'tcx>, usize)>, FxHashSet<(Ty<'tcx>, usize)>) {\n-        let mut visitor = GATSubstCollector {\n-            tcx,\n-            gat,\n-            regions: FxHashSet::default(),\n-            types: FxHashSet::default(),\n-        };\n+        let mut visitor =\n+            GATSubstCollector { gat, regions: FxHashSet::default(), types: FxHashSet::default() };\n         t.visit_with(&mut visitor);\n         (visitor.regions, visitor.types)\n     }\n@@ -692,19 +686,12 @@ impl<'tcx> GATSubstCollector<'tcx> {\n impl<'tcx> TypeVisitor<'tcx> for GATSubstCollector<'tcx> {\n     type BreakTy = !;\n \n-    fn visit_binder<T: TypeFoldable<'tcx>>(\n-        &mut self,\n-        t: &ty::Binder<'tcx, T>,\n-    ) -> ControlFlow<Self::BreakTy> {\n-        self.tcx.liberate_late_bound_regions(self.gat, t.clone()).visit_with(self)\n-    }\n-\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match t.kind() {\n             ty::Projection(p) if p.item_def_id == self.gat => {\n                 for (idx, subst) in p.substs.iter().enumerate() {\n                     match subst.unpack() {\n-                        GenericArgKind::Lifetime(lt) => {\n+                        GenericArgKind::Lifetime(lt) if !lt.is_late_bound() => {\n                             self.regions.insert((lt, idx));\n                         }\n                         GenericArgKind::Type(t) => {"}]}