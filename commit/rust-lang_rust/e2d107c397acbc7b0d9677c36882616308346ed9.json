{"sha": "e2d107c397acbc7b0d9677c36882616308346ed9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyZDEwN2MzOTdhY2JjN2IwZDk2NzdjMzY4ODI2MTYzMDgzNDZlZDk=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-07-07T16:11:03Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-07-07T16:16:36Z"}, "message": "collections: minimize code that's in unsafe blocks\n\nThis changes Vec::from_slice to call unsafe_push_all_clone\ndirectly to avoid doing an unnecessary reserve_additional call", "tree": {"sha": "b65584e3848cd9df3cdf358f6b735aec3640f27b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b65584e3848cd9df3cdf358f6b735aec3640f27b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2d107c397acbc7b0d9677c36882616308346ed9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2d107c397acbc7b0d9677c36882616308346ed9", "html_url": "https://github.com/rust-lang/rust/commit/e2d107c397acbc7b0d9677c36882616308346ed9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2d107c397acbc7b0d9677c36882616308346ed9/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d3899430b71d3ebed6b3fbf6ec47b042f513979", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d3899430b71d3ebed6b3fbf6ec47b042f513979", "html_url": "https://github.com/rust-lang/rust/commit/7d3899430b71d3ebed6b3fbf6ec47b042f513979"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "3c38e6d1c2e8c8e611097567c9863724ad29ccb0", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e2d107c397acbc7b0d9677c36882616308346ed9/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d107c397acbc7b0d9677c36882616308346ed9/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=e2d107c397acbc7b0d9677c36882616308346ed9", "patch": "@@ -198,7 +198,13 @@ impl<T: Clone> Vec<T> {\n     #[inline]\n     pub fn from_slice(values: &[T]) -> Vec<T> {\n         let mut vector = Vec::with_capacity(values.len());\n-        vector.push_all(values);\n+\n+        // Directly call `unsafe_push_all_clone` so we can skip a call to\n+        // `reserve_addtional`.\n+        unsafe {\n+            unsafe_push_all_clone(&mut vector, values);\n+        }\n+\n         vector\n     }\n \n@@ -240,8 +246,9 @@ impl<T: Clone> Vec<T> {\n     /// ```\n     #[inline]\n     pub fn push_all(&mut self, other: &[T]) {\n+        self.reserve_additional(other.len());\n+\n         unsafe {\n-            self.reserve_additional(other.len());\n             unsafe_push_all_clone(self, other)\n         }\n     }\n@@ -323,31 +330,24 @@ impl<T: Clone> Vec<T> {\n #[unstable]\n impl<T:Clone> Clone for Vec<T> {\n     fn clone(&self) -> Vec<T> {\n-        unsafe {\n-            let mut vector = Vec::with_capacity(self.len);\n-            unsafe_push_all_clone(&mut vector, self.as_slice());\n-            vector\n-        }\n+        Vec::from_slice(self.as_slice())\n     }\n \n     fn clone_from(&mut self, other: &Vec<T>) {\n-        unsafe {\n-            // drop anything in self that will not be overwritten\n-            if self.len() > other.len() {\n-                self.truncate(other.len())\n-            }\n-\n-            // reuse the contained values' allocations/resources.\n-            for (place, thing) in self.mut_iter().zip(other.iter()) {\n-                place.clone_from(thing)\n-            }\n+        // drop anything in self that will not be overwritten\n+        if self.len() > other.len() {\n+            self.truncate(other.len())\n+        }\n \n-            // self.len <= other.len due to the truncate above, so the\n-            // slice here is always in-bounds.\n-            let slice = other.slice_from(self.len());\n-            self.reserve_additional(slice.len());\n-            unsafe_push_all_clone(self, slice)\n+        // reuse the contained values' allocations/resources.\n+        for (place, thing) in self.mut_iter().zip(other.iter()) {\n+            place.clone_from(thing)\n         }\n+\n+        // self.len <= other.len due to the truncate above, so the\n+        // slice here is always in-bounds.\n+        let slice = other.slice_from(self.len());\n+        self.push_all(slice);\n     }\n }\n "}]}