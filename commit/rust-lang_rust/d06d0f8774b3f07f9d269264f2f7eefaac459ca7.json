{"sha": "d06d0f8774b3f07f9d269264f2f7eefaac459ca7", "node_id": "C_kwDOAAsO6NoAKGQwNmQwZjg3NzRiM2YwN2Y5ZDI2OTI2NGYyZjdlZWZhYWM0NTljYTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-03T15:20:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-03T15:20:30Z"}, "message": "Auto merge of #12459 - Veykril:completions, r=Veykril\n\ninternal: Clean up keyword completion handling\n\nhttps://github.com/rust-lang/rust-analyzer/issues/12144", "tree": {"sha": "78d6cdc69d054ee30dcfede8ef58d14ab7d6df86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78d6cdc69d054ee30dcfede8ef58d14ab7d6df86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d06d0f8774b3f07f9d269264f2f7eefaac459ca7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d06d0f8774b3f07f9d269264f2f7eefaac459ca7", "html_url": "https://github.com/rust-lang/rust/commit/d06d0f8774b3f07f9d269264f2f7eefaac459ca7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d06d0f8774b3f07f9d269264f2f7eefaac459ca7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0a7ad4a7f10239f5d800bc3a336a6fa24fef2ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0a7ad4a7f10239f5d800bc3a336a6fa24fef2ce", "html_url": "https://github.com/rust-lang/rust/commit/d0a7ad4a7f10239f5d800bc3a336a6fa24fef2ce"}, {"sha": "2a60b8452e469f8002834a7ac14a29434d92f12b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a60b8452e469f8002834a7ac14a29434d92f12b", "html_url": "https://github.com/rust-lang/rust/commit/2a60b8452e469f8002834a7ac14a29434d92f12b"}], "stats": {"total": 687, "additions": 291, "deletions": 396}, "files": [{"sha": "b6358d4f40c05aae445fafc48a447fa1f0c9be5e", "filename": "crates/ide-completion/src/completions.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d06d0f8774b3f07f9d269264f2f7eefaac459ca7/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06d0f8774b3f07f9d269264f2f7eefaac459ca7/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions.rs?ref=d06d0f8774b3f07f9d269264f2f7eefaac459ca7", "patch": "@@ -4,6 +4,7 @@ pub(crate) mod attribute;\n pub(crate) mod dot;\n pub(crate) mod expr;\n pub(crate) mod extern_abi;\n+pub(crate) mod field;\n pub(crate) mod flyimport;\n pub(crate) mod fn_param;\n pub(crate) mod format_string;\n@@ -110,6 +111,26 @@ impl Completions {\n         [\"self\", \"super\", \"crate\"].into_iter().for_each(|kw| self.add_keyword(ctx, kw));\n     }\n \n+    pub(crate) fn add_keyword_snippet(&mut self, ctx: &CompletionContext, kw: &str, snippet: &str) {\n+        let mut item = CompletionItem::new(CompletionItemKind::Keyword, ctx.source_range(), kw);\n+\n+        match ctx.config.snippet_cap {\n+            Some(cap) => {\n+                if snippet.ends_with('}') && ctx.incomplete_let {\n+                    // complete block expression snippets with a trailing semicolon, if inside an incomplete let\n+                    cov_mark::hit!(let_semi);\n+                    item.insert_snippet(cap, format!(\"{};\", snippet));\n+                } else {\n+                    item.insert_snippet(cap, snippet);\n+                }\n+            }\n+            None => {\n+                item.insert_text(if snippet.contains('$') { kw } else { snippet });\n+            }\n+        };\n+        item.add_to(self);\n+    }\n+\n     pub(crate) fn add_crate_roots(&mut self, ctx: &CompletionContext) {\n         ctx.process_all_names(&mut |name, res| match res {\n             ScopeDef::ModuleDef(hir::ModuleDef::Module(m)) if m.is_crate_root(ctx.db) => {"}, {"sha": "23f47523d663d398c56f0a773913efb43ea2e473", "filename": "crates/ide-completion/src/completions/expr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d06d0f8774b3f07f9d269264f2f7eefaac459ca7/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06d0f8774b3f07f9d269264f2f7eefaac459ca7/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs?ref=d06d0f8774b3f07f9d269264f2f7eefaac459ca7", "patch": "@@ -15,12 +15,12 @@ pub(crate) fn complete_expr_path(acc: &mut Completions, ctx: &CompletionContext)\n         return;\n     }\n \n-    let (is_absolute_path, qualifier, in_block_expr, in_loop_body, is_func_update) =\n+    let (is_absolute_path, qualifier, in_block_expr, in_loop_body, is_func_update, after_if_expr) =\n         match ctx.nameref_ctx() {\n             Some(NameRefContext {\n                 path_ctx:\n                     Some(PathCompletionCtx {\n-                        kind: PathKind::Expr { in_block_expr, in_loop_body },\n+                        kind: PathKind::Expr { in_block_expr, in_loop_body, after_if_expr },\n                         is_absolute_path,\n                         qualifier,\n                         ..\n@@ -33,6 +33,7 @@ pub(crate) fn complete_expr_path(acc: &mut Completions, ctx: &CompletionContext)\n                 *in_block_expr,\n                 *in_loop_body,\n                 record_expr.as_ref().map_or(false, |&(_, it)| it),\n+                *after_if_expr,\n             ),\n             _ => return,\n         };\n@@ -177,8 +178,7 @@ pub(crate) fn complete_expr_path(acc: &mut Completions, ctx: &CompletionContext)\n             });\n \n             if !is_func_update {\n-                let mut add_keyword =\n-                    |kw, snippet| super::keyword::add_keyword(acc, ctx, kw, snippet);\n+                let mut add_keyword = |kw, snippet| acc.add_keyword_snippet(ctx, kw, snippet);\n \n                 if ctx.expects_expression() {\n                     if !in_block_expr {\n@@ -202,7 +202,7 @@ pub(crate) fn complete_expr_path(acc: &mut Completions, ctx: &CompletionContext)\n                     add_keyword(\"let\", \"let\");\n                 }\n \n-                if ctx.after_if() {\n+                if after_if_expr {\n                     add_keyword(\"else\", \"else {\\n    $0\\n}\");\n                     add_keyword(\"else if\", \"else if $1 {\\n    $0\\n}\");\n                 }"}, {"sha": "17395279178c26d69475dd42662111fac0fe4af8", "filename": "crates/ide-completion/src/completions/field.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d06d0f8774b3f07f9d269264f2f7eefaac459ca7/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06d0f8774b3f07f9d269264f2f7eefaac459ca7/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ffield.rs?ref=d06d0f8774b3f07f9d269264f2f7eefaac459ca7", "patch": "@@ -0,0 +1,33 @@\n+//! Completion of field list position.\n+\n+use crate::{\n+    context::{IdentContext, NameContext, NameKind, NameRefContext, PathCompletionCtx, PathKind},\n+    CompletionContext, Completions,\n+};\n+\n+pub(crate) fn complete_field_list(acc: &mut Completions, ctx: &CompletionContext) {\n+    match &ctx.ident_ctx {\n+        IdentContext::Name(NameContext { kind: NameKind::RecordField, .. })\n+        | IdentContext::NameRef(NameRefContext {\n+            path_ctx:\n+                Some(PathCompletionCtx {\n+                    has_macro_bang: false,\n+                    is_absolute_path: false,\n+                    qualifier: None,\n+                    parent: None,\n+                    kind: PathKind::Type { in_tuple_struct: true },\n+                    has_type_args: false,\n+                    ..\n+                }),\n+            ..\n+        }) => {\n+            if ctx.qualifier_ctx.vis_node.is_none() {\n+                let mut add_keyword = |kw, snippet| acc.add_keyword_snippet(ctx, kw, snippet);\n+                add_keyword(\"pub(crate)\", \"pub(crate)\");\n+                add_keyword(\"pub(super)\", \"pub(super)\");\n+                add_keyword(\"pub\", \"pub\");\n+            }\n+        }\n+        _ => return,\n+    }\n+}"}, {"sha": "22068096ba08b910992918d9ab41bc4992c21d96", "filename": "crates/ide-completion/src/completions/flyimport.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d06d0f8774b3f07f9d269264f2f7eefaac459ca7/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06d0f8774b3f07f9d269264f2f7eefaac459ca7/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=d06d0f8774b3f07f9d269264f2f7eefaac459ca7", "patch": "@@ -110,10 +110,8 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n     if !ctx.config.enable_imports_on_the_fly {\n         return None;\n     }\n-    if matches!(ctx.path_kind(), Some(PathKind::Vis { .. } | PathKind::Use))\n+    if matches!(ctx.path_kind(), Some(PathKind::Vis { .. } | PathKind::Use | PathKind::Item { .. }))\n         || ctx.is_path_disallowed()\n-        || ctx.expects_item()\n-        || ctx.expects_assoc_item()\n     {\n         return None;\n     }\n@@ -160,7 +158,10 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n             (_, ItemInNs::Types(hir::ModuleDef::Module(_))) => true,\n             // and so are macros(except for attributes)\n             (\n-                PathKind::Expr { .. } | PathKind::Type | PathKind::Item { .. } | PathKind::Pat,\n+                PathKind::Expr { .. }\n+                | PathKind::Type { .. }\n+                | PathKind::Item { .. }\n+                | PathKind::Pat,\n                 ItemInNs::Macros(mac),\n             ) => mac.is_fn_like(ctx.db),\n             (PathKind::Item { .. }, _) => true,\n@@ -170,14 +171,14 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n             (PathKind::Pat, ItemInNs::Types(_)) => true,\n             (PathKind::Pat, ItemInNs::Values(def)) => matches!(def, hir::ModuleDef::Const(_)),\n \n-            (PathKind::Type, ItemInNs::Types(ty)) => {\n+            (PathKind::Type { .. }, ItemInNs::Types(ty)) => {\n                 if matches!(ctx.completion_location, Some(ImmediateLocation::TypeBound)) {\n                     matches!(ty, ModuleDef::Trait(_))\n                 } else {\n                     true\n                 }\n             }\n-            (PathKind::Type, ItemInNs::Values(_)) => false,\n+            (PathKind::Type { .. }, ItemInNs::Values(_)) => false,\n \n             (PathKind::Attr { .. }, ItemInNs::Macros(mac)) => mac.is_attr(ctx.db),\n             (PathKind::Attr { .. }, _) => false,"}, {"sha": "287cf46f2e3bf4405dd54bfbb541df2fd17ef0b9", "filename": "crates/ide-completion/src/completions/item_list.rs", "status": "modified", "additions": 80, "deletions": 6, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/d06d0f8774b3f07f9d269264f2f7eefaac459ca7/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06d0f8774b3f07f9d269264f2f7eefaac459ca7/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs?ref=d06d0f8774b3f07f9d269264f2f7eefaac459ca7", "patch": "@@ -2,22 +2,98 @@\n \n use crate::{\n     completions::module_or_fn_macro,\n-    context::{PathCompletionCtx, PathKind, PathQualifierCtx},\n+    context::{ItemListKind, PathCompletionCtx, PathKind, PathQualifierCtx},\n     CompletionContext, Completions,\n };\n \n pub(crate) fn complete_item_list(acc: &mut Completions, ctx: &CompletionContext) {\n     let _p = profile::span(\"complete_item_list\");\n \n-    let (&is_absolute_path, path_qualifier, _kind) = match ctx.path_context() {\n+    let (&is_absolute_path, path_qualifier, kind) = match ctx.path_context() {\n         Some(PathCompletionCtx {\n             kind: PathKind::Item { kind },\n             is_absolute_path,\n             qualifier,\n             ..\n-        }) => (is_absolute_path, qualifier, kind),\n+        }) => (is_absolute_path, qualifier, Some(kind)),\n+        Some(PathCompletionCtx {\n+            kind: PathKind::Expr { in_block_expr: true, .. },\n+            is_absolute_path,\n+            qualifier,\n+            ..\n+        }) => (is_absolute_path, qualifier, None),\n         _ => return,\n     };\n+    let mut add_keyword = |kw, snippet| acc.add_keyword_snippet(ctx, kw, snippet);\n+\n+    let in_item_list = matches!(kind, Some(ItemListKind::SourceFile | ItemListKind::Module) | None);\n+    let in_assoc_non_trait_impl = matches!(kind, Some(ItemListKind::Impl | ItemListKind::Trait));\n+    let in_extern_block = matches!(kind, Some(ItemListKind::ExternBlock));\n+    let in_trait = matches!(kind, Some(ItemListKind::Trait));\n+    let in_trait_impl = matches!(kind, Some(ItemListKind::TraitImpl));\n+    let in_inherent_impl = matches!(kind, Some(ItemListKind::Impl));\n+    let no_qualifiers = ctx.qualifier_ctx.vis_node.is_none();\n+    let in_block = matches!(kind, None);\n+\n+    'block: loop {\n+        if ctx.is_non_trivial_path() {\n+            break 'block;\n+        }\n+        if !in_trait_impl {\n+            if ctx.qualifier_ctx.unsafe_tok.is_some() {\n+                if in_item_list || in_assoc_non_trait_impl {\n+                    add_keyword(\"fn\", \"fn $1($2) {\\n    $0\\n}\");\n+                }\n+                if in_item_list {\n+                    add_keyword(\"trait\", \"trait $1 {\\n    $0\\n}\");\n+                    if no_qualifiers {\n+                        add_keyword(\"impl\", \"impl $1 {\\n    $0\\n}\");\n+                    }\n+                }\n+                break 'block;\n+            }\n+\n+            if in_item_list {\n+                add_keyword(\"enum\", \"enum $1 {\\n    $0\\n}\");\n+                add_keyword(\"mod\", \"mod $0\");\n+                add_keyword(\"static\", \"static $0\");\n+                add_keyword(\"struct\", \"struct $0\");\n+                add_keyword(\"trait\", \"trait $1 {\\n    $0\\n}\");\n+                add_keyword(\"union\", \"union $1 {\\n    $0\\n}\");\n+                add_keyword(\"use\", \"use $0\");\n+                if no_qualifiers {\n+                    add_keyword(\"impl\", \"impl $1 {\\n    $0\\n}\");\n+                }\n+            }\n+\n+            if !in_trait && !in_block && no_qualifiers {\n+                add_keyword(\"pub(crate)\", \"pub(crate)\");\n+                add_keyword(\"pub(super)\", \"pub(super)\");\n+                add_keyword(\"pub\", \"pub\");\n+            }\n+\n+            if in_extern_block {\n+                add_keyword(\"fn\", \"fn $1($2);\");\n+            } else {\n+                if !in_inherent_impl {\n+                    if !in_trait {\n+                        add_keyword(\"extern\", \"extern $0\");\n+                    }\n+                    add_keyword(\"type\", \"type $0\");\n+                }\n+\n+                add_keyword(\"fn\", \"fn $1($2) {\\n    $0\\n}\");\n+                add_keyword(\"unsafe\", \"unsafe\");\n+                add_keyword(\"const\", \"const $0\");\n+            }\n+        }\n+        break 'block;\n+    }\n+\n+    if kind.is_none() {\n+        // this is already handled by expression\n+        return;\n+    }\n \n     match path_qualifier {\n         Some(PathQualifierCtx { resolution, is_super_chain, .. }) => {\n@@ -33,9 +109,7 @@ pub(crate) fn complete_item_list(acc: &mut Completions, ctx: &CompletionContext)\n                 acc.add_keyword(ctx, \"super::\");\n             }\n         }\n-        None if is_absolute_path => {\n-            acc.add_crate_roots(ctx);\n-        }\n+        None if is_absolute_path => acc.add_crate_roots(ctx),\n         None if ctx.qualifier_ctx.none() => {\n             ctx.process_all_names(&mut |name, def| {\n                 if let Some(def) = module_or_fn_macro(ctx.db, def) {"}, {"sha": "e870ecc22958ec5e90dd0de4a5f46f4b086cc4de", "filename": "crates/ide-completion/src/completions/keyword.rs", "status": "modified", "additions": 24, "deletions": 91, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/d06d0f8774b3f07f9d269264f2f7eefaac459ca7/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06d0f8774b3f07f9d269264f2f7eefaac459ca7/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=d06d0f8774b3f07f9d269264f2f7eefaac459ca7", "patch": "@@ -2,106 +2,39 @@\n //! - `self`, `super` and `crate`, as these are considered part of path completions.\n //! - `await`, as this is a postfix completion we handle this in the postfix completions.\n \n-use syntax::T;\n+use syntax::ast::Item;\n \n-use crate::{\n-    context::{NameRefContext, PathKind},\n-    CompletionContext, CompletionItem, CompletionItemKind, Completions,\n-};\n+use crate::{context::NameRefContext, CompletionContext, Completions};\n \n pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionContext) {\n-    if matches!(ctx.nameref_ctx(), Some(NameRefContext { record_expr: Some(_), .. })) {\n-        cov_mark::hit!(no_keyword_completion_in_record_lit);\n-        return;\n-    }\n-    if ctx.is_non_trivial_path() {\n-        cov_mark::hit!(no_keyword_completion_in_non_trivial_path);\n-        return;\n-    }\n-    if ctx.pattern_ctx.is_some() {\n-        return;\n-    }\n-\n-    let mut add_keyword = |kw, snippet| add_keyword(acc, ctx, kw, snippet);\n-\n-    let expects_assoc_item = ctx.expects_assoc_item();\n-    let has_block_expr_parent = ctx.has_block_expr_parent();\n-    let expects_item = ctx.expects_item();\n-\n-    if let Some(PathKind::Vis { .. }) = ctx.path_kind() {\n-        return;\n-    }\n-    if ctx.has_unfinished_impl_or_trait_prev_sibling() {\n-        add_keyword(\"where\", \"where\");\n-        if ctx.has_impl_prev_sibling() {\n-            add_keyword(\"for\", \"for\");\n-        }\n-        return;\n-    }\n-    if ctx.previous_token_is(T![unsafe]) {\n-        if expects_item || expects_assoc_item || has_block_expr_parent {\n-            add_keyword(\"fn\", \"fn $1($2) {\\n    $0\\n}\")\n+    let item = match ctx.nameref_ctx() {\n+        Some(NameRefContext { keyword: Some(item), record_expr: None, .. })\n+            if !ctx.is_non_trivial_path() =>\n+        {\n+            item\n         }\n+        _ => return,\n+    };\n \n-        if expects_item || has_block_expr_parent {\n-            add_keyword(\"trait\", \"trait $1 {\\n    $0\\n}\");\n-            add_keyword(\"impl\", \"impl $1 {\\n    $0\\n}\");\n-        }\n-\n-        return;\n-    }\n-\n-    if ctx.qualifier_ctx.vis_node.is_none()\n-        && (expects_item || ctx.expects_non_trait_assoc_item() || ctx.expect_field())\n-    {\n-        add_keyword(\"pub(crate)\", \"pub(crate)\");\n-        add_keyword(\"pub(super)\", \"pub(super)\");\n-        add_keyword(\"pub\", \"pub\");\n-    }\n-\n-    if expects_item || expects_assoc_item || has_block_expr_parent {\n-        add_keyword(\"unsafe\", \"unsafe\");\n-        add_keyword(\"fn\", \"fn $1($2) {\\n    $0\\n}\");\n-        add_keyword(\"const\", \"const $0\");\n-        add_keyword(\"type\", \"type $0\");\n-    }\n-\n-    if expects_item || has_block_expr_parent {\n-        if ctx.qualifier_ctx.vis_node.is_none() {\n-            add_keyword(\"impl\", \"impl $1 {\\n    $0\\n}\");\n-            add_keyword(\"extern\", \"extern $0\");\n-        }\n-        add_keyword(\"use\", \"use $0\");\n-        add_keyword(\"trait\", \"trait $1 {\\n    $0\\n}\");\n-        add_keyword(\"static\", \"static $0\");\n-        add_keyword(\"mod\", \"mod $0\");\n-    }\n-\n-    if expects_item || has_block_expr_parent {\n-        add_keyword(\"enum\", \"enum $1 {\\n    $0\\n}\");\n-        add_keyword(\"struct\", \"struct $0\");\n-        add_keyword(\"union\", \"union $1 {\\n    $0\\n}\");\n-    }\n-}\n-\n-pub(super) fn add_keyword(acc: &mut Completions, ctx: &CompletionContext, kw: &str, snippet: &str) {\n-    let mut item = CompletionItem::new(CompletionItemKind::Keyword, ctx.source_range(), kw);\n+    let mut add_keyword = |kw, snippet| acc.add_keyword_snippet(ctx, kw, snippet);\n \n-    match ctx.config.snippet_cap {\n-        Some(cap) => {\n-            if snippet.ends_with('}') && ctx.incomplete_let {\n-                // complete block expression snippets with a trailing semicolon, if inside an incomplete let\n-                cov_mark::hit!(let_semi);\n-                item.insert_snippet(cap, format!(\"{};\", snippet));\n-            } else {\n-                item.insert_snippet(cap, snippet);\n+    match item {\n+        Item::Impl(it) => {\n+            if it.for_token().is_none() && it.trait_().is_none() && it.self_ty().is_some() {\n+                add_keyword(\"for\", \"for\");\n             }\n+            add_keyword(\"where\", \"where\");\n         }\n-        None => {\n-            item.insert_text(if snippet.contains('$') { kw } else { snippet });\n+        Item::Enum(_)\n+        | Item::Fn(_)\n+        | Item::Struct(_)\n+        | Item::Trait(_)\n+        | Item::TypeAlias(_)\n+        | Item::Union(_) => {\n+            add_keyword(\"where\", \"where\");\n         }\n-    };\n-    item.add_to(acc);\n+        _ => (),\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "bc8c070c14d01294c8e3497d7cd7b57e461e5360", "filename": "crates/ide-completion/src/completions/type.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d06d0f8774b3f07f9d269264f2f7eefaac459ca7/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06d0f8774b3f07f9d269264f2f7eefaac459ca7/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs?ref=d06d0f8774b3f07f9d269264f2f7eefaac459ca7", "patch": "@@ -18,9 +18,12 @@ pub(crate) fn complete_type_path(acc: &mut Completions, ctx: &CompletionContext)\n     }\n \n     let (&is_absolute_path, qualifier) = match ctx.path_context() {\n-        Some(PathCompletionCtx { kind: PathKind::Type, is_absolute_path, qualifier, .. }) => {\n-            (is_absolute_path, qualifier)\n-        }\n+        Some(PathCompletionCtx {\n+            kind: PathKind::Type { .. },\n+            is_absolute_path,\n+            qualifier,\n+            ..\n+        }) => (is_absolute_path, qualifier),\n         _ => return,\n     };\n "}, {"sha": "6068a9eb32c47e30b15ba4714ef2c165f05f8ec2", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 66, "deletions": 69, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/d06d0f8774b3f07f9d269264f2f7eefaac459ca7/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06d0f8774b3f07f9d269264f2f7eefaac459ca7/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=d06d0f8774b3f07f9d269264f2f7eefaac459ca7", "patch": "@@ -15,16 +15,16 @@ use ide_db::{\n use syntax::{\n     algo::{find_node_at_offset, non_trivia_sibling},\n     ast::{self, AttrKind, HasArgList, HasName, NameOrNameRef},\n-    match_ast, AstNode, AstToken, NodeOrToken,\n+    match_ast, AstNode, AstToken, Direction, NodeOrToken,\n     SyntaxKind::{self, *},\n     SyntaxNode, SyntaxToken, TextRange, TextSize, T,\n };\n use text_edit::Indel;\n \n use crate::{\n     patterns::{\n-        determine_location, determine_prev_sibling, is_in_loop_body, is_in_token_of_for_loop,\n-        previous_token, ImmediateLocation, ImmediatePrevSibling,\n+        determine_location, is_in_loop_body, is_in_token_of_for_loop, previous_token,\n+        ImmediateLocation,\n     },\n     CompletionConfig,\n };\n@@ -48,8 +48,11 @@ pub(super) enum PathKind {\n     Expr {\n         in_block_expr: bool,\n         in_loop_body: bool,\n+        after_if_expr: bool,\n+    },\n+    Type {\n+        in_tuple_struct: bool,\n     },\n-    Type,\n     Attr {\n         kind: AttrKind,\n         annotated_item_kind: Option<SyntaxKind>,\n@@ -71,6 +74,7 @@ pub(super) enum ItemListKind {\n     SourceFile,\n     Module,\n     Impl,\n+    TraitImpl,\n     Trait,\n     ExternBlock,\n }\n@@ -182,6 +186,8 @@ pub(super) struct NameRefContext {\n     // FIXME: these fields are actually disjoint -> enum\n     pub(super) dot_access: Option<DotAccess>,\n     pub(super) path_ctx: Option<PathCompletionCtx>,\n+    /// Position where we are only interested in keyword completions\n+    pub(super) keyword: Option<ast::Item>,\n     /// The record expression this nameref is a field of\n     pub(super) record_expr: Option<(ast::RecordExpr, bool)>,\n }\n@@ -259,7 +265,6 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) incomplete_let: bool,\n \n     pub(super) completion_location: Option<ImmediateLocation>,\n-    pub(super) prev_sibling: Option<ImmediatePrevSibling>,\n     pub(super) previous_token: Option<SyntaxToken>,\n \n     pub(super) ident_ctx: IdentContext,\n@@ -331,55 +336,15 @@ impl<'a> CompletionContext<'a> {\n         self.dot_receiver().is_some()\n     }\n \n-    pub(crate) fn expects_assoc_item(&self) -> bool {\n-        matches!(self.completion_location, Some(ImmediateLocation::Trait | ImmediateLocation::Impl))\n-    }\n-\n-    pub(crate) fn expects_non_trait_assoc_item(&self) -> bool {\n-        matches!(self.completion_location, Some(ImmediateLocation::Impl))\n-    }\n-\n-    pub(crate) fn expects_item(&self) -> bool {\n-        matches!(self.completion_location, Some(ImmediateLocation::ItemList))\n-    }\n-\n     // FIXME: This shouldn't exist\n     pub(crate) fn expects_generic_arg(&self) -> bool {\n         matches!(self.completion_location, Some(ImmediateLocation::GenericArgList(_)))\n     }\n \n-    pub(crate) fn has_block_expr_parent(&self) -> bool {\n-        matches!(self.completion_location, Some(ImmediateLocation::StmtList))\n-    }\n-\n     pub(crate) fn expects_ident_ref_expr(&self) -> bool {\n         matches!(self.completion_location, Some(ImmediateLocation::RefExpr))\n     }\n \n-    pub(crate) fn expect_field(&self) -> bool {\n-        matches!(self.completion_location, Some(ImmediateLocation::TupleField))\n-            || matches!(self.name_ctx(), Some(NameContext { kind: NameKind::RecordField, .. }))\n-    }\n-\n-    /// Whether the cursor is right after a trait or impl header.\n-    /// trait Foo ident$0\n-    // FIXME: This probably shouldn't exist\n-    pub(crate) fn has_unfinished_impl_or_trait_prev_sibling(&self) -> bool {\n-        matches!(\n-            self.prev_sibling,\n-            Some(ImmediatePrevSibling::ImplDefType | ImmediatePrevSibling::TraitDefName)\n-        )\n-    }\n-\n-    // FIXME: This probably shouldn't exist\n-    pub(crate) fn has_impl_prev_sibling(&self) -> bool {\n-        matches!(self.prev_sibling, Some(ImmediatePrevSibling::ImplDefType))\n-    }\n-\n-    pub(crate) fn after_if(&self) -> bool {\n-        matches!(self.prev_sibling, Some(ImmediatePrevSibling::IfExpr))\n-    }\n-\n     // FIXME: This shouldn't exist\n     pub(crate) fn is_path_disallowed(&self) -> bool {\n         !self.qualifier_ctx.none()\n@@ -558,7 +523,6 @@ impl<'a> CompletionContext<'a> {\n             impl_def: None,\n             incomplete_let: false,\n             completion_location: None,\n-            prev_sibling: None,\n             previous_token: None,\n             // dummy value, will be overwritten\n             ident_ctx: IdentContext::UnexpandedAttrTT { fake_attribute_under_caret: None },\n@@ -953,7 +917,6 @@ impl<'a> CompletionContext<'a> {\n         };\n         self.completion_location =\n             determine_location(&self.sema, original_file, offset, &name_like);\n-        self.prev_sibling = determine_prev_sibling(&name_like);\n         self.impl_def = self\n             .sema\n             .token_ancestors_with_macros(self.token.clone())\n@@ -1110,8 +1073,13 @@ impl<'a> CompletionContext<'a> {\n     ) -> (NameRefContext, Option<PatternContext>) {\n         let nameref = find_node_at_offset(&original_file, name_ref.syntax().text_range().start());\n \n-        let mut nameref_ctx =\n-            NameRefContext { dot_access: None, path_ctx: None, nameref, record_expr: None };\n+        let mut nameref_ctx = NameRefContext {\n+            dot_access: None,\n+            path_ctx: None,\n+            nameref,\n+            record_expr: None,\n+            keyword: None,\n+        };\n \n         if let Some(record_field) = ast::RecordExprField::for_field_name(&name_ref) {\n             nameref_ctx.record_expr =\n@@ -1195,6 +1163,13 @@ impl<'a> CompletionContext<'a> {\n                     find_node_in_file_compensated(original_file, &record_expr).zip(Some(true));\n             }\n         };\n+        let after_if_expr = |node: SyntaxNode| {\n+            let prev_expr = (|| {\n+                let prev_sibling = non_trivia_sibling(node.into(), Direction::Prev)?.into_node()?;\n+                ast::ExprStmt::cast(prev_sibling)?.expr()\n+            })();\n+            matches!(prev_expr, Some(ast::Expr::IfExpr(_)))\n+        };\n \n         // We do not want to generate path completions when we are sandwiched between an item decl signature and its body.\n         // ex. trait Foo $0 {}\n@@ -1208,7 +1183,7 @@ impl<'a> CompletionContext<'a> {\n                 syntax::algo::non_trivia_sibling(node.into(), syntax::Direction::Prev)\n             {\n                 if let Some(item) = ast::Item::cast(n) {\n-                    match item {\n+                    let is_inbetween = match &item {\n                         ast::Item::Const(it) => it.body().is_none(),\n                         ast::Item::Enum(it) => it.variant_list().is_none(),\n                         ast::Item::ExternBlock(it) => it.extern_item_list().is_none(),\n@@ -1221,24 +1196,27 @@ impl<'a> CompletionContext<'a> {\n                         ast::Item::TypeAlias(it) => it.ty().is_none(),\n                         ast::Item::Union(it) => it.record_field_list().is_none(),\n                         _ => false,\n+                    };\n+                    if is_inbetween {\n+                        return Some(item);\n                     }\n-                } else {\n-                    false\n                 }\n-            } else {\n-                false\n             }\n+            None\n         };\n \n         let kind = path.syntax().ancestors().find_map(|it| {\n             // using Option<Option<PathKind>> as extra controlflow\n             let kind = match_ast! {\n                 match it {\n-                    ast::PathType(_) => Some(PathKind::Type),\n+                    ast::PathType(it) => Some(PathKind::Type {\n+                        in_tuple_struct: it.syntax().parent().map_or(false, |it| ast::TupleField::can_cast(it.kind()))\n+                    }),\n                     ast::PathExpr(it) => {\n                         if let Some(p) = it.syntax().parent() {\n                             if ast::ExprStmt::can_cast(p.kind()) {\n-                                if inbetween_body_and_decl_check(p) {\n+                                if let Some(kind) = inbetween_body_and_decl_check(p) {\n+                                    nameref_ctx.keyword = Some(kind);\n                                     return Some(None);\n                                 }\n                             }\n@@ -1249,7 +1227,9 @@ impl<'a> CompletionContext<'a> {\n                         path_ctx.has_call_parens = it.syntax().parent().map_or(false, |it| ast::CallExpr::can_cast(it.kind()));\n                         let in_block_expr = is_in_block(it.syntax());\n                         let in_loop_body = is_in_loop_body(it.syntax());\n-                        Some(PathKind::Expr { in_block_expr, in_loop_body })\n+                        let after_if_expr = after_if_expr(it.syntax().clone());\n+\n+                        Some(PathKind::Expr { in_block_expr, in_loop_body, after_if_expr })\n                     },\n                     ast::TupleStructPat(it) => {\n                         path_ctx.has_call_parens = true;\n@@ -1266,29 +1246,40 @@ impl<'a> CompletionContext<'a> {\n                         Some(PathKind::Pat)\n                     },\n                     ast::MacroCall(it) => {\n-                        if inbetween_body_and_decl_check(it.syntax().clone()) {\n+                        if let Some(kind) = inbetween_body_and_decl_check(it.syntax().clone()) {\n+                            nameref_ctx.keyword = Some(kind);\n                             return Some(None);\n                         }\n \n                         path_ctx.has_macro_bang = it.excl_token().is_some();\n                         let parent = it.syntax().parent();\n                         match parent.as_ref().map(|it| it.kind()) {\n                             Some(SyntaxKind::MACRO_PAT) => Some(PathKind::Pat),\n-                            Some(SyntaxKind::MACRO_TYPE) => Some(PathKind::Type),\n+                            Some(SyntaxKind::MACRO_TYPE) => Some(PathKind::Type { in_tuple_struct: false }),\n                             Some(SyntaxKind::ITEM_LIST) => Some(PathKind::Item { kind: ItemListKind::Module }),\n-                            Some(SyntaxKind::ASSOC_ITEM_LIST) => Some(PathKind::Item { kind: match parent.and_then(|it| it.parent()).map(|it| it.kind()) {\n-                                Some(SyntaxKind::TRAIT) => ItemListKind::Trait,\n-                                Some(SyntaxKind::IMPL) => ItemListKind::Impl,\n-                                _ => return Some(None),\n+                            Some(SyntaxKind::ASSOC_ITEM_LIST) => Some(PathKind::Item { kind: match parent.and_then(|it| it.parent()) {\n+                                Some(it) => match_ast! {\n+                                    match it {\n+                                        ast::Trait(_) => ItemListKind::Trait,\n+                                        ast::Impl(it) => if it.trait_().is_some() {\n+                                            ItemListKind::TraitImpl\n+                                        } else {\n+                                            ItemListKind::Impl\n+                                        },\n+                                        _ => return Some(None)\n+                                    }\n+                                },\n+                                None => return Some(None),\n                             } }),\n                             Some(SyntaxKind::EXTERN_ITEM_LIST) => Some(PathKind::Item { kind: ItemListKind::ExternBlock }),\n                             Some(SyntaxKind::SOURCE_FILE) => Some(PathKind::Item { kind: ItemListKind::SourceFile }),\n                             _ => {\n                                return Some(parent.and_then(ast::MacroExpr::cast).map(|it| {\n                                     let in_loop_body = is_in_loop_body(it.syntax());\n                                     let in_block_expr = is_in_block(it.syntax());\n+                                    let after_if_expr = after_if_expr(it.syntax().clone());\n                                     fill_record_expr(it.syntax());\n-                                    PathKind::Expr { in_block_expr, in_loop_body }\n+                                    PathKind::Expr { in_block_expr, in_loop_body, after_if_expr }\n                                 }));\n                             },\n                         }\n@@ -1313,12 +1304,18 @@ impl<'a> CompletionContext<'a> {\n                     ast::UseTree(_) => Some(PathKind::Use),\n                     ast::ItemList(_) => Some(PathKind::Item { kind: ItemListKind::Module }),\n                     ast::AssocItemList(it) => Some(PathKind::Item { kind: {\n-                            match it.syntax().parent()?.kind() {\n-                                SyntaxKind::TRAIT => ItemListKind::Trait,\n-                                SyntaxKind::IMPL => ItemListKind::Impl,\n-                                _ => return None,\n+                        match_ast! {\n+                            match (it.syntax().parent()?) {\n+                                ast::Trait(_) => ItemListKind::Trait,\n+                                ast::Impl(it) => if it.trait_().is_some() {\n+                                    ItemListKind::TraitImpl\n+                                } else {\n+                                    ItemListKind::Impl\n+                                },\n+                                _ => return None\n                             }\n-                        }}),\n+                        }\n+                    }}),\n                     ast::ExternItemList(_) => Some(PathKind::Item { kind: ItemListKind::ExternBlock }),\n                     ast::SourceFile(_) => Some(PathKind::Item { kind: ItemListKind::SourceFile }),\n                     _ => return None,"}, {"sha": "c100dd63eacfd9fbca73faa62cc1029631d363e7", "filename": "crates/ide-completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d06d0f8774b3f07f9d269264f2f7eefaac459ca7/crates%2Fide-completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06d0f8774b3f07f9d269264f2f7eefaac459ca7/crates%2Fide-completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Flib.rs?ref=d06d0f8774b3f07f9d269264f2f7eefaac459ca7", "patch": "@@ -158,6 +158,7 @@ pub fn completions(\n             completions::dot::complete_dot(acc, ctx);\n             completions::expr::complete_expr_path(acc, ctx);\n             completions::extern_abi::complete_extern_abi(acc, ctx);\n+            completions::field::complete_field_list(acc, ctx);\n             completions::flyimport::import_on_the_fly(acc, ctx);\n             completions::fn_param::complete_fn_param(acc, ctx);\n             completions::format_string::format_string(acc, ctx);"}, {"sha": "9abbfaa40729bfba61f873cea259dae05289023f", "filename": "crates/ide-completion/src/patterns.rs", "status": "modified", "additions": 2, "deletions": 158, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/d06d0f8774b3f07f9d269264f2f7eefaac459ca7/crates%2Fide-completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06d0f8774b3f07f9d269264f2f7eefaac459ca7/crates%2Fide-completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fpatterns.rs?ref=d06d0f8774b3f07f9d269264f2f7eefaac459ca7", "patch": "@@ -7,24 +7,15 @@\n use hir::Semantics;\n use ide_db::RootDatabase;\n use syntax::{\n-    algo::non_trivia_sibling,\n     ast::{self, HasLoopBody, HasName},\n-    match_ast, AstNode, Direction, SyntaxElement,\n+    match_ast, AstNode, SyntaxElement,\n     SyntaxKind::*,\n     SyntaxNode, SyntaxToken, TextRange, TextSize,\n };\n \n #[cfg(test)]\n use crate::tests::check_pattern_is_applicable;\n \n-/// Immediate previous node to what we are completing.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-pub(crate) enum ImmediatePrevSibling {\n-    IfExpr,\n-    TraitDefName,\n-    ImplDefType,\n-}\n-\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub(crate) enum TypeAnnotation {\n     Let(Option<ast::Pat>),\n@@ -39,13 +30,7 @@ pub(crate) enum TypeAnnotation {\n /// from which file the nodes are.\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub(crate) enum ImmediateLocation {\n-    Impl,\n-    Trait,\n-    TupleField,\n     RefExpr,\n-    IdentPat,\n-    StmtList,\n-    ItemList,\n     TypeBound,\n     /// Original file ast node\n     TypeAnnotation(TypeAnnotation),\n@@ -54,56 +39,6 @@ pub(crate) enum ImmediateLocation {\n     GenericArgList(ast::GenericArgList),\n }\n \n-pub(crate) fn determine_prev_sibling(name_like: &ast::NameLike) -> Option<ImmediatePrevSibling> {\n-    let node = match name_like {\n-        ast::NameLike::NameRef(name_ref) => maximize_name_ref(name_ref),\n-        ast::NameLike::Name(n) => n.syntax().clone(),\n-        ast::NameLike::Lifetime(lt) => lt.syntax().clone(),\n-    };\n-    let node = match node.parent().and_then(ast::MacroCall::cast) {\n-        // When a path is being typed after the name of a trait/type of an impl it is being\n-        // parsed as a macro, so when the trait/impl has a block following it an we are between the\n-        // name and block the macro will attach the block to itself so maximizing fails to take\n-        // that into account\n-        // FIXME path expr and statement have a similar problem with attrs\n-        Some(call)\n-            if call.excl_token().is_none()\n-                && call.token_tree().map_or(false, |t| t.l_curly_token().is_some())\n-                && call.semicolon_token().is_none() =>\n-        {\n-            call.syntax().clone()\n-        }\n-        _ => node,\n-    };\n-    let prev_sibling = non_trivia_sibling(node.into(), Direction::Prev)?.into_node()?;\n-    let res = match_ast! {\n-        match prev_sibling {\n-            ast::ExprStmt(it) => {\n-                let node = it.expr().filter(|_| it.semicolon_token().is_none())?.syntax().clone();\n-                match_ast! {\n-                    match node {\n-                        ast::IfExpr(_) => ImmediatePrevSibling::IfExpr,\n-                        _ => return None,\n-                    }\n-                }\n-            },\n-            ast::Trait(it) => if it.assoc_item_list().is_none() {\n-                    ImmediatePrevSibling::TraitDefName\n-                } else {\n-                    return None\n-            },\n-            ast::Impl(it) => if it.assoc_item_list().is_none()\n-                && (it.for_token().is_none() || it.self_ty().is_some()) {\n-                    ImmediatePrevSibling::ImplDefType\n-                } else {\n-                    return None\n-            },\n-            _ => return None,\n-        }\n-    };\n-    Some(res)\n-}\n-\n pub(crate) fn determine_location(\n     sema: &Semantics<RootDatabase>,\n     original_file: &SyntaxNode,\n@@ -140,30 +75,14 @@ pub(crate) fn determine_location(\n             _ => parent,\n         },\n         // SourceFile\n-        None => {\n-            return match node.kind() {\n-                MACRO_ITEMS | SOURCE_FILE => Some(ImmediateLocation::ItemList),\n-                _ => None,\n-            }\n-        }\n+        None => return None,\n     };\n \n     let res = match_ast! {\n         match parent {\n-            ast::IdentPat(_) => ImmediateLocation::IdentPat,\n-            ast::StmtList(_) => ImmediateLocation::StmtList,\n-            ast::SourceFile(_) => ImmediateLocation::ItemList,\n-            ast::ItemList(_) => ImmediateLocation::ItemList,\n             ast::RefExpr(_) => ImmediateLocation::RefExpr,\n-            ast::TupleField(_) => ImmediateLocation::TupleField,\n-            ast::TupleFieldList(_) => ImmediateLocation::TupleField,\n             ast::TypeBound(_) => ImmediateLocation::TypeBound,\n             ast::TypeBoundList(_) => ImmediateLocation::TypeBound,\n-            ast::AssocItemList(it) => match it.syntax().parent().map(|it| it.kind()) {\n-                Some(IMPL) => ImmediateLocation::Impl,\n-                Some(TRAIT) => ImmediateLocation::Trait,\n-                _ => return None,\n-            },\n             ast::GenericArgList(_) => sema\n                 .find_node_at_offset_with_macros(original_file, offset)\n                 .map(ImmediateLocation::GenericArgList)?,\n@@ -351,83 +270,8 @@ mod tests {\n         );\n     }\n \n-    fn check_prev_sibling(code: &str, sibling: impl Into<Option<ImmediatePrevSibling>>) {\n-        check_pattern_is_applicable(code, |e| {\n-            let name = &e.parent().and_then(ast::NameLike::cast).expect(\"Expected a namelike\");\n-            assert_eq!(determine_prev_sibling(name), sibling.into());\n-            true\n-        });\n-    }\n-\n-    #[test]\n-    fn test_trait_loc() {\n-        check_location(r\"trait A { f$0 }\", ImmediateLocation::Trait);\n-        check_location(r\"trait A { #[attr] f$0 }\", ImmediateLocation::Trait);\n-        check_location(r\"trait A { f$0 fn f() {} }\", ImmediateLocation::Trait);\n-        check_location(r\"trait A { fn f() {} f$0 }\", ImmediateLocation::Trait);\n-        check_location(r\"trait A$0 {}\", None);\n-        check_location(r\"trait A { fn f$0 }\", None);\n-    }\n-\n-    #[test]\n-    fn test_impl_loc() {\n-        check_location(r\"impl A { f$0 }\", ImmediateLocation::Impl);\n-        check_location(r\"impl A { #[attr] f$0 }\", ImmediateLocation::Impl);\n-        check_location(r\"impl A { f$0 fn f() {} }\", ImmediateLocation::Impl);\n-        check_location(r\"impl A { fn f() {} f$0 }\", ImmediateLocation::Impl);\n-        check_location(r\"impl A$0 {}\", None);\n-        check_location(r\"impl A { fn f$0 }\", None);\n-    }\n-\n-    #[test]\n-    fn test_block_expr_loc() {\n-        check_location(r\"fn my_fn() { let a = 2; f$0 }\", ImmediateLocation::StmtList);\n-        check_location(r\"fn my_fn() { f$0 f }\", ImmediateLocation::StmtList);\n-    }\n-\n-    #[test]\n-    fn test_ident_pat_loc() {\n-        check_location(r\"fn my_fn(m$0) {}\", ImmediateLocation::IdentPat);\n-        check_location(r\"fn my_fn() { let m$0 }\", ImmediateLocation::IdentPat);\n-        check_location(r\"fn my_fn(&m$0) {}\", ImmediateLocation::IdentPat);\n-        check_location(r\"fn my_fn() { let &m$0 }\", ImmediateLocation::IdentPat);\n-    }\n-\n     #[test]\n     fn test_ref_expr_loc() {\n         check_location(r\"fn my_fn() { let x = &m$0 foo; }\", ImmediateLocation::RefExpr);\n     }\n-\n-    #[test]\n-    fn test_item_list_loc() {\n-        check_location(r\"i$0\", ImmediateLocation::ItemList);\n-        check_location(r\"#[attr] i$0\", ImmediateLocation::ItemList);\n-        check_location(r\"fn f() {} i$0\", ImmediateLocation::ItemList);\n-        check_location(r\"mod foo { f$0 }\", ImmediateLocation::ItemList);\n-        check_location(r\"mod foo { #[attr] f$0 }\", ImmediateLocation::ItemList);\n-        check_location(r\"mod foo { fn f() {} f$0 }\", ImmediateLocation::ItemList);\n-        check_location(r\"mod foo$0 {}\", None);\n-    }\n-\n-    #[test]\n-    fn test_impl_prev_sibling() {\n-        check_prev_sibling(r\"impl A w$0 \", ImmediatePrevSibling::ImplDefType);\n-        check_prev_sibling(r\"impl A w$0 {}\", ImmediatePrevSibling::ImplDefType);\n-        check_prev_sibling(r\"impl A for A w$0 \", ImmediatePrevSibling::ImplDefType);\n-        check_prev_sibling(r\"impl A for A w$0 {}\", ImmediatePrevSibling::ImplDefType);\n-        check_prev_sibling(r\"impl A for w$0 {}\", None);\n-        check_prev_sibling(r\"impl A for w$0\", None);\n-    }\n-\n-    #[test]\n-    fn test_trait_prev_sibling() {\n-        check_prev_sibling(r\"trait A w$0 \", ImmediatePrevSibling::TraitDefName);\n-        check_prev_sibling(r\"trait A w$0 {}\", ImmediatePrevSibling::TraitDefName);\n-    }\n-\n-    #[test]\n-    fn test_if_expr_prev_sibling() {\n-        check_prev_sibling(r\"fn foo() { if true {} w$0\", ImmediatePrevSibling::IfExpr);\n-        check_prev_sibling(r\"fn foo() { if true {}; w$0\", None);\n-    }\n }"}, {"sha": "ca2b3ad34350dacb1699d75528a568a31a2135a5", "filename": "crates/ide-completion/src/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d06d0f8774b3f07f9d269264f2f7eefaac459ca7/crates%2Fide-completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06d0f8774b3f07f9d269264f2f7eefaac459ca7/crates%2Fide-completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender.rs?ref=d06d0f8774b3f07f9d269264f2f7eefaac459ca7", "patch": "@@ -286,7 +286,7 @@ fn render_resolution_simple_(\n     // Add `<>` for generic types\n     let type_path_no_ty_args = matches!(\n         ctx.completion.path_context(),\n-        Some(PathCompletionCtx { kind: PathKind::Type, has_type_args: false, .. })\n+        Some(PathCompletionCtx { kind: PathKind::Type { .. }, has_type_args: false, .. })\n     ) && ctx.completion.config.callable.is_some();\n     if type_path_no_ty_args {\n         if let Some(cap) = ctx.snippet_cap() {"}, {"sha": "0be51b0e3ff66cdbd14f0d7449955a9f368080cf", "filename": "crates/ide-completion/src/render/function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d06d0f8774b3f07f9d269264f2f7eefaac459ca7/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06d0f8774b3f07f9d269264f2f7eefaac459ca7/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs?ref=d06d0f8774b3f07f9d269264f2f7eefaac459ca7", "patch": "@@ -202,7 +202,7 @@ fn should_add_parens(ctx: &CompletionContext) -> bool {\n         Some(PathCompletionCtx { kind: PathKind::Expr { .. }, has_call_parens: true, .. }) => {\n             return false\n         }\n-        Some(PathCompletionCtx { kind: PathKind::Use | PathKind::Type, .. }) => {\n+        Some(PathCompletionCtx { kind: PathKind::Use | PathKind::Type { .. }, .. }) => {\n             cov_mark::hit!(no_parens_in_use_item);\n             return false;\n         }"}, {"sha": "81303eb38f436b34d5c38f0a1a7faa647bcd67d9", "filename": "crates/ide-completion/src/tests/item.rs", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/d06d0f8774b3f07f9d269264f2f7eefaac459ca7/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06d0f8774b3f07f9d269264f2f7eefaac459ca7/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem.rs?ref=d06d0f8774b3f07f9d269264f2f7eefaac459ca7", "patch": "@@ -76,65 +76,65 @@ fn after_target_name_in_impl() {\n             kw where\n         \"#]],\n     );\n-    // FIXME: This should not emit `kw for`\n     check(\n-        r\"impl Trait for Type $0\",\n+        r\"impl Trait f$0\",\n         expect![[r#\"\n             kw for\n             kw where\n         \"#]],\n     );\n-}\n-\n-#[test]\n-fn after_struct_name() {\n-    // FIXME: This should emit `kw where` only\n     check(\n-        r\"struct Struct $0\",\n+        r\"impl Trait for Type $0\",\n         expect![[r#\"\n-            kw const\n-            kw enum\n-            kw extern\n-            kw fn\n-            kw impl\n-            kw mod\n-            kw pub\n-            kw pub(crate)\n-            kw pub(super)\n-            kw static\n-            kw struct\n-            kw trait\n-            kw type\n-            kw union\n-            kw unsafe\n-            kw use\n+            kw where\n         \"#]],\n     );\n }\n \n #[test]\n-fn after_fn_name() {\n-    // FIXME: This should emit `kw where` only\n+fn completes_where() {\n+    check(\n+        r\"struct Struct $0\",\n+        expect![[r#\"\n+        kw where\n+    \"#]],\n+    );\n+    check(\n+        r\"struct Struct $0 {}\",\n+        expect![[r#\"\n+        kw where\n+    \"#]],\n+    );\n+    // FIXME: This shouldn't be completed here\n+    check(\n+        r\"struct Struct $0 ()\",\n+        expect![[r#\"\n+        kw where\n+    \"#]],\n+    );\n     check(\n         r\"fn func() $0\",\n         expect![[r#\"\n-            kw const\n-            kw enum\n-            kw extern\n-            kw fn\n-            kw impl\n-            kw mod\n-            kw pub\n-            kw pub(crate)\n-            kw pub(super)\n-            kw static\n-            kw struct\n-            kw trait\n-            kw type\n-            kw union\n-            kw unsafe\n-            kw use\n-        \"#]],\n+        kw where\n+    \"#]],\n+    );\n+    check(\n+        r\"enum Enum $0\",\n+        expect![[r#\"\n+        kw where\n+    \"#]],\n+    );\n+    check(\n+        r\"enum Enum $0 {}\",\n+        expect![[r#\"\n+        kw where\n+    \"#]],\n+    );\n+    check(\n+        r\"trait Trait $0 {}\",\n+        expect![[r#\"\n+        kw where\n+    \"#]],\n     );\n }\n "}, {"sha": "09ea78a3d504f8e5ee4c3119307ab82243a8526b", "filename": "crates/ide-completion/src/tests/item_list.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d06d0f8774b3f07f9d269264f2f7eefaac459ca7/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06d0f8774b3f07f9d269264f2f7eefaac459ca7/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fitem_list.rs?ref=d06d0f8774b3f07f9d269264f2f7eefaac459ca7", "patch": "@@ -108,7 +108,6 @@ fn in_item_list_after_attr() {\n \n #[test]\n fn in_qualified_path() {\n-    cov_mark::check!(no_keyword_completion_in_non_trivial_path);\n     check(\n         r#\"crate::$0\"#,\n         expect![[r#\"\n@@ -137,6 +136,7 @@ fn after_visibility() {\n         expect![[r#\"\n             kw const\n             kw enum\n+            kw extern\n             kw fn\n             kw mod\n             kw static\n@@ -152,12 +152,10 @@ fn after_visibility() {\n \n #[test]\n fn after_visibility_unsafe() {\n-    // FIXME this shouldn't show `impl`\n     check(\n         r#\"pub unsafe $0\"#,\n         expect![[r#\"\n             kw fn\n-            kw impl\n             kw trait\n         \"#]],\n     );\n@@ -178,7 +176,6 @@ fn in_impl_assoc_item_list() {\n             kw pub(super)\n             kw self::\n             kw super::\n-            kw type\n             kw unsafe\n         \"#]],\n     )\n@@ -199,7 +196,6 @@ fn in_impl_assoc_item_list_after_attr() {\n             kw pub(super)\n             kw self::\n             kw super::\n-            kw type\n             kw unsafe\n         \"#]],\n     )\n@@ -249,16 +245,9 @@ impl Test for () {\n             ma makro!(\u2026)          macro_rules! makro\n             md module\n             ta type Type1 =\n-            kw const\n             kw crate::\n-            kw fn\n-            kw pub\n-            kw pub(crate)\n-            kw pub(super)\n             kw self::\n             kw super::\n-            kw type\n-            kw unsafe\n         \"#]],\n     );\n }"}, {"sha": "9369034cc629be0367e0e2d92170650fcabc8648", "filename": "crates/ide-completion/src/tests/record.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d06d0f8774b3f07f9d269264f2f7eefaac459ca7/crates%2Fide-completion%2Fsrc%2Ftests%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d06d0f8774b3f07f9d269264f2f7eefaac459ca7/crates%2Fide-completion%2Fsrc%2Ftests%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Frecord.rs?ref=d06d0f8774b3f07f9d269264f2f7eefaac459ca7", "patch": "@@ -9,7 +9,6 @@ fn check(ra_fixture: &str, expect: Expect) {\n \n #[test]\n fn without_default_impl() {\n-    cov_mark::check!(no_keyword_completion_in_record_lit);\n     check(\n         r#\"\n struct Struct { foo: u32, bar: usize }"}]}