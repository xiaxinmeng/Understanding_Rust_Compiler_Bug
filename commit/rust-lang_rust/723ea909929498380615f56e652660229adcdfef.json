{"sha": "723ea909929498380615f56e652660229adcdfef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyM2VhOTA5OTI5NDk4MzgwNjE1ZjU2ZTY1MjY2MDIyOWFkY2RmZWY=", "commit": {"author": {"name": "SNCPlay42", "email": "SNCPlay42@gmail.com", "date": "2020-07-22T19:17:10Z"}, "committer": {"name": "SNCPlay42", "email": "SNCPlay42@gmail.com", "date": "2020-07-22T22:52:49Z"}, "message": "rename functions", "tree": {"sha": "217e3d08e75645270764339f4c8dbd5c5f15d59d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/217e3d08e75645270764339f4c8dbd5c5f15d59d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/723ea909929498380615f56e652660229adcdfef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/723ea909929498380615f56e652660229adcdfef", "html_url": "https://github.com/rust-lang/rust/commit/723ea909929498380615f56e652660229adcdfef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/723ea909929498380615f56e652660229adcdfef/comments", "author": {"login": "SNCPlay42", "id": 5455518, "node_id": "MDQ6VXNlcjU0NTU1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5455518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SNCPlay42", "html_url": "https://github.com/SNCPlay42", "followers_url": "https://api.github.com/users/SNCPlay42/followers", "following_url": "https://api.github.com/users/SNCPlay42/following{/other_user}", "gists_url": "https://api.github.com/users/SNCPlay42/gists{/gist_id}", "starred_url": "https://api.github.com/users/SNCPlay42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SNCPlay42/subscriptions", "organizations_url": "https://api.github.com/users/SNCPlay42/orgs", "repos_url": "https://api.github.com/users/SNCPlay42/repos", "events_url": "https://api.github.com/users/SNCPlay42/events{/privacy}", "received_events_url": "https://api.github.com/users/SNCPlay42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SNCPlay42", "id": 5455518, "node_id": "MDQ6VXNlcjU0NTU1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5455518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SNCPlay42", "html_url": "https://github.com/SNCPlay42", "followers_url": "https://api.github.com/users/SNCPlay42/followers", "following_url": "https://api.github.com/users/SNCPlay42/following{/other_user}", "gists_url": "https://api.github.com/users/SNCPlay42/gists{/gist_id}", "starred_url": "https://api.github.com/users/SNCPlay42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SNCPlay42/subscriptions", "organizations_url": "https://api.github.com/users/SNCPlay42/orgs", "repos_url": "https://api.github.com/users/SNCPlay42/repos", "events_url": "https://api.github.com/users/SNCPlay42/events{/privacy}", "received_events_url": "https://api.github.com/users/SNCPlay42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "601518edcd3d570918bbfebfe71e7905dacd4482", "url": "https://api.github.com/repos/rust-lang/rust/commits/601518edcd3d570918bbfebfe71e7905dacd4482", "html_url": "https://github.com/rust-lang/rust/commit/601518edcd3d570918bbfebfe71e7905dacd4482"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "9e5851fd81165033861601362a919328efb4b1e3", "filename": "src/librustc_mir/borrow_check/diagnostics/region_name.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/723ea909929498380615f56e652660229adcdfef/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/723ea909929498380615f56e652660229adcdfef/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs?ref=723ea909929498380615f56e652660229adcdfef", "patch": "@@ -337,7 +337,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n         let arg_ty = self.regioncx.universal_regions().unnormalized_input_tys\n             [implicit_inputs + argument_index];\n         if let Some(highlight) =\n-            self.give_name_if_we_can_match_hir_ty_from_argument(fr, arg_ty, argument_index)\n+            self.highlight_if_we_can_match_hir_ty_from_argument(fr, arg_ty, argument_index)\n         {\n             return Some(RegionName {\n                 name: self.synthesize_region_name(),\n@@ -346,7 +346,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n         }\n \n         let counter = *self.next_region_name.try_borrow().unwrap();\n-        if let Some(highlight) = self.give_name_if_we_cannot_match_hir_ty(fr, arg_ty, counter) {\n+        if let Some(highlight) = self.highlight_if_we_cannot_match_hir_ty(fr, arg_ty, counter) {\n             Some(RegionName {\n                 // This counter value will already have been used, so this function will increment\n                 // it so the next value will be used next and return the region name that would\n@@ -359,7 +359,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n         }\n     }\n \n-    fn give_name_if_we_can_match_hir_ty_from_argument(\n+    fn highlight_if_we_can_match_hir_ty_from_argument(\n         &self,\n         needle_fr: RegionVid,\n         argument_ty: Ty<'tcx>,\n@@ -376,7 +376,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n             // (`give_name_if_anonymous_region_appears_in_arguments`).\n             hir::TyKind::Infer => None,\n \n-            _ => self.give_name_if_we_can_match_hir_ty(needle_fr, argument_ty, argument_hir_ty),\n+            _ => self.highlight_if_we_can_match_hir_ty(needle_fr, argument_ty, argument_hir_ty),\n         }\n     }\n \n@@ -391,7 +391,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     ///  |          |  has type `&'1 u32`\n     ///  |          has type `&'2 u32`\n     /// ```\n-    fn give_name_if_we_cannot_match_hir_ty(\n+    fn highlight_if_we_cannot_match_hir_ty(\n         &self,\n         needle_fr: RegionVid,\n         argument_ty: Ty<'tcx>,\n@@ -402,7 +402,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n         let type_name = self.infcx.extract_type_name(&argument_ty, Some(highlight)).0;\n \n         debug!(\n-            \"give_name_if_we_cannot_match_hir_ty: type_name={:?} needle_fr={:?}\",\n+            \"highlight_if_we_cannot_match_hir_ty: type_name={:?} needle_fr={:?}\",\n             type_name, needle_fr\n         );\n         if type_name.find(&format!(\"'{}\", counter)).is_some() {\n@@ -442,7 +442,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     /// keep track of the **closest** type we've found. If we fail to\n     /// find the exact `&` or `'_` to highlight, then we may fall back\n     /// to highlighting that closest type instead.\n-    fn give_name_if_we_can_match_hir_ty(\n+    fn highlight_if_we_can_match_hir_ty(\n         &self,\n         needle_fr: RegionVid,\n         argument_ty: Ty<'tcx>,"}]}