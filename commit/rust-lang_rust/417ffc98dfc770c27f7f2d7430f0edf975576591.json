{"sha": "417ffc98dfc770c27f7f2d7430f0edf975576591", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxN2ZmYzk4ZGZjNzcwYzI3ZjdmMmQ3NDMwZjBlZGY5NzU1NzY1OTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-04T15:14:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-04T15:14:15Z"}, "message": "Auto merge of #44890 - nvzqz:str-box-transmute, r=alexcrichton\n\nRemove mem::transmute used in Box<str> conversions\n\nGiven that https://github.com/rust-lang/rust/pull/44877 is failing, I decided to make a separate PR. This is done with the same motivation: to avoid `mem::transmute`-ing non `#[repr(C)]` types.", "tree": {"sha": "4482fbdd62ff084a7cff161124abab8dc5ebcfb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4482fbdd62ff084a7cff161124abab8dc5ebcfb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/417ffc98dfc770c27f7f2d7430f0edf975576591", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/417ffc98dfc770c27f7f2d7430f0edf975576591", "html_url": "https://github.com/rust-lang/rust/commit/417ffc98dfc770c27f7f2d7430f0edf975576591", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/417ffc98dfc770c27f7f2d7430f0edf975576591/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd8099f0ecc2fd3980469ec45cf834ae9a941ca3", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd8099f0ecc2fd3980469ec45cf834ae9a941ca3", "html_url": "https://github.com/rust-lang/rust/commit/fd8099f0ecc2fd3980469ec45cf834ae9a941ca3"}, {"sha": "f1798d3c9ab22be8f3b6f9f60f5e027be1a02085", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1798d3c9ab22be8f3b6f9f60f5e027be1a02085", "html_url": "https://github.com/rust-lang/rust/commit/f1798d3c9ab22be8f3b6f9f60f5e027be1a02085"}], "stats": {"total": 63, "additions": 32, "deletions": 31}, "files": [{"sha": "35c8530b4dd7d42b36cfcbaa750fe013eef8c676", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/417ffc98dfc770c27f7f2d7430f0edf975576591/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417ffc98dfc770c27f7f2d7430f0edf975576591/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=417ffc98dfc770c27f7f2d7430f0edf975576591", "patch": "@@ -528,9 +528,7 @@ impl<'a> From<&'a str> for Box<str> {\n #[stable(feature = \"boxed_str_conv\", since = \"1.19.0\")]\n impl From<Box<str>> for Box<[u8]> {\n     fn from(s: Box<str>) -> Self {\n-        unsafe {\n-            mem::transmute(s)\n-        }\n+        unsafe { Box::from_raw(Box::into_raw(s) as *mut [u8]) }\n     }\n }\n "}, {"sha": "830128f2b9fcbdc2b701807389db01040139652b", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/417ffc98dfc770c27f7f2d7430f0edf975576591/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417ffc98dfc770c27f7f2d7430f0edf975576591/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=417ffc98dfc770c27f7f2d7430f0edf975576591", "patch": "@@ -2047,10 +2047,8 @@ impl str {\n     /// ```\n     #[stable(feature = \"box_str\", since = \"1.4.0\")]\n     pub fn into_string(self: Box<str>) -> String {\n-        unsafe {\n-            let slice = mem::transmute::<Box<str>, Box<[u8]>>(self);\n-            String::from_utf8_unchecked(slice.into_vec())\n-        }\n+        let slice = Box::<[u8]>::from(self);\n+        unsafe { String::from_utf8_unchecked(slice.into_vec()) }\n     }\n \n     /// Create a [`String`] by repeating a string `n` times.\n@@ -2087,5 +2085,5 @@ impl str {\n /// ```\n #[stable(feature = \"str_box_extras\", since = \"1.20.0\")]\n pub unsafe fn from_boxed_utf8_unchecked(v: Box<[u8]>) -> Box<str> {\n-    mem::transmute(v)\n+    Box::from_raw(Box::into_raw(v) as *mut str)\n }"}, {"sha": "f9d803364772fe39dceee807cefd429b937aa846", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/417ffc98dfc770c27f7f2d7430f0edf975576591/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417ffc98dfc770c27f7f2d7430f0edf975576591/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=417ffc98dfc770c27f7f2d7430f0edf975576591", "patch": "@@ -311,8 +311,8 @@ impl CString {\n     #[stable(feature = \"cstr_memory\", since = \"1.4.0\")]\n     pub unsafe fn from_raw(ptr: *mut c_char) -> CString {\n         let len = libc::strlen(ptr) + 1; // Including the NUL byte\n-        let slice = slice::from_raw_parts(ptr, len as usize);\n-        CString { inner: mem::transmute(slice) }\n+        let slice = slice::from_raw_parts_mut(ptr, len as usize);\n+        CString { inner: Box::from_raw(slice as *mut [c_char] as *mut [u8]) }\n     }\n \n     /// Transfers ownership of the string to a C caller.\n@@ -480,7 +480,7 @@ impl CString {\n     /// ```\n     #[stable(feature = \"into_boxed_c_str\", since = \"1.20.0\")]\n     pub fn into_boxed_c_str(self) -> Box<CStr> {\n-        unsafe { mem::transmute(self.into_inner()) }\n+        unsafe { Box::from_raw(Box::into_raw(self.into_inner()) as *mut CStr) }\n     }\n \n     // Bypass \"move out of struct which implements [`Drop`] trait\" restriction.\n@@ -569,7 +569,7 @@ impl Borrow<CStr> for CString {\n impl<'a> From<&'a CStr> for Box<CStr> {\n     fn from(s: &'a CStr) -> Box<CStr> {\n         let boxed: Box<[u8]> = Box::from(s.to_bytes_with_nul());\n-        unsafe { mem::transmute(boxed) }\n+        unsafe { Box::from_raw(Box::into_raw(boxed) as *mut CStr) }\n     }\n }\n \n@@ -593,7 +593,7 @@ impl From<CString> for Box<CStr> {\n impl Default for Box<CStr> {\n     fn default() -> Box<CStr> {\n         let boxed: Box<[u8]> = Box::from([0]);\n-        unsafe { mem::transmute(boxed) }\n+        unsafe { Box::from_raw(Box::into_raw(boxed) as *mut CStr) }\n     }\n }\n \n@@ -817,7 +817,7 @@ impl CStr {\n     #[inline]\n     #[stable(feature = \"cstr_from_bytes\", since = \"1.10.0\")]\n     pub unsafe fn from_bytes_with_nul_unchecked(bytes: &[u8]) -> &CStr {\n-        mem::transmute(bytes)\n+        &*(bytes as *const [u8] as *const CStr)\n     }\n \n     /// Returns the inner pointer to this C string.\n@@ -913,7 +913,7 @@ impl CStr {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_bytes_with_nul(&self) -> &[u8] {\n-        unsafe { mem::transmute(&self.inner) }\n+        unsafe { &*(&self.inner as *const [c_char] as *const [u8]) }\n     }\n \n     /// Yields a [`&str`] slice if the `CStr` contains valid UTF-8.\n@@ -1005,7 +1005,8 @@ impl CStr {\n     /// ```\n     #[stable(feature = \"into_boxed_c_str\", since = \"1.20.0\")]\n     pub fn into_c_string(self: Box<CStr>) -> CString {\n-        unsafe { mem::transmute(self) }\n+        let raw = Box::into_raw(self) as *mut [u8];\n+        CString { inner: unsafe { Box::from_raw(raw) } }\n     }\n }\n "}, {"sha": "88ee5c9a7342000bf3a3df07d72997aec2a0f8ff", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/417ffc98dfc770c27f7f2d7430f0edf975576591/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417ffc98dfc770c27f7f2d7430f0edf975576591/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=417ffc98dfc770c27f7f2d7430f0edf975576591", "patch": "@@ -10,7 +10,6 @@\n \n use borrow::{Borrow, Cow};\n use fmt;\n-use mem;\n use ops;\n use cmp;\n use hash::{Hash, Hasher};\n@@ -260,7 +259,8 @@ impl OsString {\n     /// ```\n     #[stable(feature = \"into_boxed_os_str\", since = \"1.20.0\")]\n     pub fn into_boxed_os_str(self) -> Box<OsStr> {\n-        unsafe { mem::transmute(self.inner.into_box()) }\n+        let rw = Box::into_raw(self.inner.into_box()) as *mut OsStr;\n+        unsafe { Box::from_raw(rw) }\n     }\n }\n \n@@ -394,7 +394,7 @@ impl OsStr {\n     }\n \n     fn from_inner(inner: &Slice) -> &OsStr {\n-        unsafe { mem::transmute(inner) }\n+        unsafe { &*(inner as *const Slice as *const OsStr) }\n     }\n \n     /// Yields a [`&str`] slice if the `OsStr` is valid Unicode.\n@@ -511,23 +511,24 @@ impl OsStr {\n     /// [`OsString`]: struct.OsString.html\n     #[stable(feature = \"into_boxed_os_str\", since = \"1.20.0\")]\n     pub fn into_os_string(self: Box<OsStr>) -> OsString {\n-        let inner: Box<Slice> = unsafe { mem::transmute(self) };\n-        OsString { inner: Buf::from_box(inner) }\n+        let boxed = unsafe { Box::from_raw(Box::into_raw(self) as *mut Slice) };\n+        OsString { inner: Buf::from_box(boxed) }\n     }\n \n     /// Gets the underlying byte representation.\n     ///\n     /// Note: it is *crucial* that this API is private, to avoid\n     /// revealing the internal, platform-specific encodings.\n     fn bytes(&self) -> &[u8] {\n-        unsafe { mem::transmute(&self.inner) }\n+        unsafe { &*(&self.inner as *const _ as *const [u8]) }\n     }\n }\n \n #[stable(feature = \"box_from_os_str\", since = \"1.17.0\")]\n impl<'a> From<&'a OsStr> for Box<OsStr> {\n     fn from(s: &'a OsStr) -> Box<OsStr> {\n-        unsafe { mem::transmute(s.inner.into_box()) }\n+        let rw = Box::into_raw(s.inner.into_box()) as *mut OsStr;\n+        unsafe { Box::from_raw(rw) }\n     }\n }\n \n@@ -548,7 +549,8 @@ impl From<OsString> for Box<OsStr> {\n #[stable(feature = \"box_default_extra\", since = \"1.17.0\")]\n impl Default for Box<OsStr> {\n     fn default() -> Box<OsStr> {\n-        unsafe { mem::transmute(Slice::empty_box()) }\n+        let rw = Box::into_raw(Slice::empty_box()) as *mut OsStr;\n+        unsafe { Box::from_raw(rw) }\n     }\n }\n "}, {"sha": "294743ed2cc5414ff4879c35f03af301b7d10a01", "filename": "src/libstd/path.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/417ffc98dfc770c27f7f2d7430f0edf975576591/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417ffc98dfc770c27f7f2d7430f0edf975576591/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=417ffc98dfc770c27f7f2d7430f0edf975576591", "patch": "@@ -86,7 +86,6 @@ use fs;\n use hash::{Hash, Hasher};\n use io;\n use iter::{self, FusedIterator};\n-use mem;\n use ops::{self, Deref};\n \n use ffi::{OsStr, OsString};\n@@ -317,10 +316,10 @@ fn iter_after<A, I, J>(mut iter: I, mut prefix: J) -> Option<I>\n \n // See note at the top of this module to understand why these are used:\n fn os_str_as_u8_slice(s: &OsStr) -> &[u8] {\n-    unsafe { mem::transmute(s) }\n+    unsafe { &*(s as *const OsStr as *const [u8]) }\n }\n unsafe fn u8_slice_as_os_str(s: &[u8]) -> &OsStr {\n-    mem::transmute(s)\n+    &*(s as *const [u8] as *const OsStr)\n }\n \n // Detect scheme on Redox\n@@ -1334,15 +1333,17 @@ impl PathBuf {\n     /// [`Path`]: struct.Path.html\n     #[stable(feature = \"into_boxed_path\", since = \"1.20.0\")]\n     pub fn into_boxed_path(self) -> Box<Path> {\n-        unsafe { mem::transmute(self.inner.into_boxed_os_str()) }\n+        let rw = Box::into_raw(self.inner.into_boxed_os_str()) as *mut Path;\n+        unsafe { Box::from_raw(rw) }\n     }\n }\n \n #[stable(feature = \"box_from_path\", since = \"1.17.0\")]\n impl<'a> From<&'a Path> for Box<Path> {\n     fn from(path: &'a Path) -> Box<Path> {\n         let boxed: Box<OsStr> = path.inner.into();\n-        unsafe { mem::transmute(boxed) }\n+        let rw = Box::into_raw(boxed) as *mut Path;\n+        unsafe { Box::from_raw(rw) }\n     }\n }\n \n@@ -1589,7 +1590,7 @@ impl Path {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new<S: AsRef<OsStr> + ?Sized>(s: &S) -> &Path {\n-        unsafe { mem::transmute(s.as_ref()) }\n+        unsafe { &*(s.as_ref() as *const OsStr as *const Path) }\n     }\n \n     /// Yields the underlying [`OsStr`] slice.\n@@ -2312,7 +2313,8 @@ impl Path {\n     /// [`PathBuf`]: struct.PathBuf.html\n     #[stable(feature = \"into_boxed_path\", since = \"1.20.0\")]\n     pub fn into_path_buf(self: Box<Path>) -> PathBuf {\n-        let inner: Box<OsStr> = unsafe { mem::transmute(self) };\n+        let rw = Box::into_raw(self) as *mut OsStr;\n+        let inner = unsafe { Box::from_raw(rw) };\n         PathBuf { inner: OsString::from(inner) }\n     }\n }"}]}