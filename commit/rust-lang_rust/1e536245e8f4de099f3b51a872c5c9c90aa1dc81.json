{"sha": "1e536245e8f4de099f3b51a872c5c9c90aa1dc81", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNTM2MjQ1ZThmNGRlMDk5ZjNiNTFhODcyYzVjOWM5MGFhMWRjODE=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2017-03-08T18:53:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-08T18:53:53Z"}, "message": "Rollup merge of #40254 - nagisa:compiler-builtin-no-panic, r=alexcrichton\n\nFix personality_fn within the compiler_builtins\n\ncompiler_builtins may not have any unwinding within it to link correctly. This is notoriously\nfinicky, and this small piece of change removes yet another case where personality function\nhappens to get introduced.\n\nSide note: I do remember solving the exact same thing before. I wonder why it has reappered...\n\n@cuviper, could you please try building beta with this patch applied? It should apply cleanly. If it works, I\u2019ll nominate to land this into beta.\n\nFixes(?) https://github.com/rust-lang/rust/issues/40251", "tree": {"sha": "daed2bdd5d7d859c1e4d74012f32554410783f39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/daed2bdd5d7d859c1e4d74012f32554410783f39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e536245e8f4de099f3b51a872c5c9c90aa1dc81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e536245e8f4de099f3b51a872c5c9c90aa1dc81", "html_url": "https://github.com/rust-lang/rust/commit/1e536245e8f4de099f3b51a872c5c9c90aa1dc81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e536245e8f4de099f3b51a872c5c9c90aa1dc81/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c252ff1fb282ebf39593ee3436b480e7fda0183", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c252ff1fb282ebf39593ee3436b480e7fda0183", "html_url": "https://github.com/rust-lang/rust/commit/2c252ff1fb282ebf39593ee3436b480e7fda0183"}, {"sha": "8f581cc917f2b5984e00dc51671168f2c377b1c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f581cc917f2b5984e00dc51671168f2c377b1c1", "html_url": "https://github.com/rust-lang/rust/commit/8f581cc917f2b5984e00dc51671168f2c377b1c1"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "fb42b915c7694a542957d62ea0575f4d38e3c372", "filename": "src/libcompiler_builtins/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1e536245e8f4de099f3b51a872c5c9c90aa1dc81/src%2Flibcompiler_builtins%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e536245e8f4de099f3b51a872c5c9c90aa1dc81/src%2Flibcompiler_builtins%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins%2Flib.rs?ref=1e536245e8f4de099f3b51a872c5c9c90aa1dc81", "patch": "@@ -402,15 +402,16 @@ pub mod reimpls {\n     }\n \n     trait AbsExt: Sized {\n-        fn uabs(self) -> u128 {\n-            self.iabs() as u128\n-        }\n+        fn uabs(self) -> u128;\n         fn iabs(self) -> i128;\n     }\n \n     impl AbsExt for i128 {\n+        fn uabs(self) -> u128 {\n+            self.iabs() as u128\n+        }\n         fn iabs(self) -> i128 {\n-            let s = self >> 127;\n+            let s = self.wrapping_shr(127);\n             ((self ^ s).wrapping_sub(s))\n         }\n     }"}]}