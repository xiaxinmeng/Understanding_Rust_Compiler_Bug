{"sha": "59e70f27756a57b16a48bd7262e67fda01744701", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZTcwZjI3NzU2YTU3YjE2YTQ4YmQ3MjYyZTY3ZmRhMDE3NDQ3MDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-07T17:01:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-07T17:01:25Z"}, "message": "Auto merge of #57405 - pietroalbini:rollup, r=pietroalbini\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #57290 (remove outdated comment)\n - #57308 (Make CompileController thread-safe)\n - #57358 (use utf-8 throughout htmldocck)\n - #57369 (Provide the option to use libc++ even on all platforms)\n - #57375 (Add duration constants)\n - #57403 (Make extern ref HTTPS)\n\nFailed merges:\n\n - #57370 (Support passing cflags/cxxflags/ldflags to LLVM build)\n\nr? @ghost", "tree": {"sha": "7f675c297ac8a6f82586cc6f2a1d63b7b0346d64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f675c297ac8a6f82586cc6f2a1d63b7b0346d64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59e70f27756a57b16a48bd7262e67fda01744701", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59e70f27756a57b16a48bd7262e67fda01744701", "html_url": "https://github.com/rust-lang/rust/commit/59e70f27756a57b16a48bd7262e67fda01744701", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59e70f27756a57b16a48bd7262e67fda01744701/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21ac19d8fefb023752645fcf2517ce0fad663bf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/21ac19d8fefb023752645fcf2517ce0fad663bf0", "html_url": "https://github.com/rust-lang/rust/commit/21ac19d8fefb023752645fcf2517ce0fad663bf0"}, {"sha": "6031f1302b66da2e86f331d5202435607c54f256", "url": "https://api.github.com/repos/rust-lang/rust/commits/6031f1302b66da2e86f331d5202435607c54f256", "html_url": "https://github.com/rust-lang/rust/commit/6031f1302b66da2e86f331d5202435607c54f256"}], "stats": {"total": 98, "additions": 72, "deletions": 26}, "files": [{"sha": "ece8dedb0aed7aa74e271336d83aa2cbd35a49e9", "filename": "CODE_OF_CONDUCT.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59e70f27756a57b16a48bd7262e67fda01744701/CODE_OF_CONDUCT.md", "raw_url": "https://github.com/rust-lang/rust/raw/59e70f27756a57b16a48bd7262e67fda01744701/CODE_OF_CONDUCT.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CODE_OF_CONDUCT.md?ref=59e70f27756a57b16a48bd7262e67fda01744701", "patch": "@@ -35,6 +35,6 @@ And if someone takes issue with something you said or did, resist the urge to be\n \n The enforcement policies listed above apply to all official Rust venues; including official IRC channels (#rust, #rust-internals, #rust-tools, #rust-libs, #rustc, #rust-beginners, #rust-docs, #rust-community, #rust-lang, and #cargo); GitHub repositories under rust-lang, rust-lang-nursery, and rust-lang-deprecated; and all forums under rust-lang.org (users.rust-lang.org, internals.rust-lang.org). For other projects adopting the Rust Code of Conduct, please contact the maintainers of those projects for enforcement. If you wish to use this code of conduct for your own project, consider explicitly mentioning your moderation policy or making a copy with your own moderation policy so as to avoid confusion.\n \n-*Adapted from the [Node.js Policy on Trolling](http://blog.izs.me/post/30036893703/policy-on-trolling) as well as the [Contributor Covenant v1.3.0](https://www.contributor-covenant.org/version/1/3/0/).*\n+*Adapted from the [Node.js Policy on Trolling](https://blog.izs.me/2012/08/policy-on-trolling) as well as the [Contributor Covenant v1.3.0](https://www.contributor-covenant.org/version/1/3/0/).*\n \n [mod_team]: https://www.rust-lang.org/team.html#Moderation-team"}, {"sha": "c68d358b6a67e03a8469a65b59b042bdb45da5de", "filename": "config.toml.example", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59e70f27756a57b16a48bd7262e67fda01744701/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/59e70f27756a57b16a48bd7262e67fda01744701/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=59e70f27756a57b16a48bd7262e67fda01744701", "patch": "@@ -90,6 +90,12 @@\n # with clang-cl, so this is special in that it only compiles LLVM with clang-cl\n #clang-cl = '/path/to/clang-cl.exe'\n \n+# Use libc++ when building LLVM instead of libstdc++. This is the default on\n+# platforms already use libc++ as the default C++ library, but this option\n+# allows you to use libc++ even on platforms when it's not. You need to ensure\n+# that your host compiler ships with libc++.\n+#use-libcxx = true\n+\n # =============================================================================\n # General build configuration options\n # ============================================================================="}, {"sha": "8bc7c5838edda381d21fe5b4a40b9c7da2d9ebe6", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59e70f27756a57b16a48bd7262e67fda01744701/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e70f27756a57b16a48bd7262e67fda01744701/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=59e70f27756a57b16a48bd7262e67fda01744701", "patch": "@@ -723,6 +723,9 @@ pub fn build_codegen_backend(builder: &Builder,\n             {\n                 cargo.env(\"LLVM_LINK_SHARED\", \"1\");\n             }\n+            if builder.config.llvm_use_libcxx {\n+                cargo.env(\"LLVM_USE_LIBCXX\", \"1\");\n+            }\n         }\n         _ => panic!(\"unknown backend: {}\", backend),\n     }"}, {"sha": "9421817ae6d8e644583263bb49bda30bb240fa15", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59e70f27756a57b16a48bd7262e67fda01744701/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e70f27756a57b16a48bd7262e67fda01744701/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=59e70f27756a57b16a48bd7262e67fda01744701", "patch": "@@ -82,6 +82,8 @@ pub struct Config {\n     pub lldb_enabled: bool,\n     pub llvm_tools_enabled: bool,\n \n+    pub llvm_use_libcxx: bool,\n+\n     // rust codegen options\n     pub rust_optimize: bool,\n     pub rust_codegen_units: Option<u32>,\n@@ -252,6 +254,7 @@ struct Llvm {\n     link_shared: Option<bool>,\n     version_suffix: Option<String>,\n     clang_cl: Option<String>,\n+    use_libcxx: Option<bool>,\n }\n \n #[derive(Deserialize, Default, Clone)]\n@@ -513,6 +516,7 @@ impl Config {\n             config.llvm_link_jobs = llvm.link_jobs;\n             config.llvm_version_suffix = llvm.version_suffix.clone();\n             config.llvm_clang_cl = llvm.clang_cl.clone();\n+            set(&mut config.llvm_use_libcxx, llvm.use_libcxx);\n         }\n \n         if let Some(ref rust) = toml.rust {"}, {"sha": "b0c3c9702498dcbb20dee72d2fc23d6900c73197", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59e70f27756a57b16a48bd7262e67fda01744701/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/59e70f27756a57b16a48bd7262e67fda01744701/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=59e70f27756a57b16a48bd7262e67fda01744701", "patch": "@@ -62,6 +62,7 @@ def v(*args):\n o(\"lld\", \"rust.lld\", \"build lld\")\n o(\"lldb\", \"rust.lldb\", \"build lldb\")\n o(\"missing-tools\", \"dist.missing-tools\", \"allow failures when building tools\")\n+o(\"use-libcxx\", \"llvm.use_libcxx\", \"build LLVM with libc++\")\n \n # Optimization and debugging options. These may be overridden by the release\n # channel, etc."}, {"sha": "e8be2b9b53710461734468252c8b1b9e4610e57c", "filename": "src/etc/htmldocck.py", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/59e70f27756a57b16a48bd7262e67fda01744701/src%2Fetc%2Fhtmldocck.py", "raw_url": "https://github.com/rust-lang/rust/raw/59e70f27756a57b16a48bd7262e67fda01744701/src%2Fetc%2Fhtmldocck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fhtmldocck.py?ref=59e70f27756a57b16a48bd7262e67fda01744701", "patch": "@@ -1,3 +1,6 @@\n+#!/usr/bin/env python\n+# -*- coding: utf-8 -*-\n+\n r\"\"\"\n htmldocck.py is a custom checker script for Rustdoc HTML outputs.\n \n@@ -98,7 +101,10 @@\n \n \"\"\"\n \n-from __future__ import print_function\n+from __future__ import absolute_import, print_function, unicode_literals\n+\n+import codecs\n+import io\n import sys\n import os.path\n import re\n@@ -110,14 +116,10 @@\n     from HTMLParser import HTMLParser\n from xml.etree import cElementTree as ET\n \n-# &larrb;/&rarrb; are not in HTML 4 but are in HTML 5\n try:\n-    from html.entities import entitydefs\n+    from html.entities import name2codepoint\n except ImportError:\n-    from htmlentitydefs import entitydefs\n-entitydefs['larrb'] = u'\\u21e4'\n-entitydefs['rarrb'] = u'\\u21e5'\n-entitydefs['nbsp'] = ' '\n+    from htmlentitydefs import name2codepoint\n \n # \"void elements\" (no closing tag) from the HTML Standard section 12.1.2\n VOID_ELEMENTS = set(['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen',\n@@ -157,11 +159,11 @@ def handle_data(self, data):\n         self.__builder.data(data)\n \n     def handle_entityref(self, name):\n-        self.__builder.data(entitydefs[name])\n+        self.__builder.data(unichr(name2codepoint[name]))\n \n     def handle_charref(self, name):\n         code = int(name[1:], 16) if name.startswith(('x', 'X')) else int(name, 10)\n-        self.__builder.data(unichr(code).encode('utf-8'))\n+        self.__builder.data(unichr(code))\n \n     def close(self):\n         HTMLParser.close(self)\n@@ -210,11 +212,11 @@ def concat_multi_lines(f):\n     (?<=(?<!\\S)@)(?P<negated>!?)\n     (?P<cmd>[A-Za-z]+(?:-[A-Za-z]+)*)\n     (?P<args>.*)$\n-''', re.X)\n+''', re.X | re.UNICODE)\n \n \n def get_commands(template):\n-    with open(template, 'rU') as f:\n+    with io.open(template, encoding='utf-8') as f:\n         for lineno, line in concat_multi_lines(f):\n             m = LINE_PATTERN.search(line)\n             if not m:\n@@ -226,7 +228,10 @@ def get_commands(template):\n             if args and not args[:1].isspace():\n                 print_err(lineno, line, 'Invalid template syntax')\n                 continue\n-            args = shlex.split(args)\n+            try:\n+                args = shlex.split(args)\n+            except UnicodeEncodeError:\n+                args = [arg.decode('utf-8') for arg in shlex.split(args.encode('utf-8'))]\n             yield Command(negated=negated, cmd=cmd, args=args, lineno=lineno+1, context=line)\n \n \n@@ -280,7 +285,7 @@ def get_file(self, path):\n         if not(os.path.exists(abspath) and os.path.isfile(abspath)):\n             raise FailedCheck('File does not exist {!r}'.format(path))\n \n-        with open(abspath) as f:\n+        with io.open(abspath, encoding='utf-8') as f:\n             data = f.read()\n             self.files[path] = data\n             return data\n@@ -294,9 +299,9 @@ def get_tree(self, path):\n         if not(os.path.exists(abspath) and os.path.isfile(abspath)):\n             raise FailedCheck('File does not exist {!r}'.format(path))\n \n-        with open(abspath) as f:\n+        with io.open(abspath, encoding='utf-8') as f:\n             try:\n-                tree = ET.parse(f, CustomHTMLParser())\n+                tree = ET.fromstringlist(f.readlines(), CustomHTMLParser())\n             except Exception as e:\n                 raise RuntimeError('Cannot parse an HTML file {!r}: {}'.format(path, e))\n             self.trees[path] = tree\n@@ -313,7 +318,7 @@ def check_string(data, pat, regexp):\n     if not pat:\n         return True # special case a presence testing\n     elif regexp:\n-        return re.search(pat, data) is not None\n+        return re.search(pat, data, flags=re.UNICODE) is not None\n     else:\n         data = ' '.join(data.split())\n         pat = ' '.join(pat.split())\n@@ -350,7 +355,7 @@ def check_tree_text(tree, path, pat, regexp):\n                     break\n     except Exception as e:\n         print('Failed to get path \"{}\"'.format(path))\n-        raise e\n+        raise\n     return ret\n \n \n@@ -359,7 +364,12 @@ def get_tree_count(tree, path):\n     return len(tree.findall(path))\n \n def stderr(*args):\n-    print(*args, file=sys.stderr)\n+    if sys.version_info.major < 3:\n+        file = codecs.getwriter('utf-8')(sys.stderr)\n+    else:\n+        file = sys.stderr\n+\n+    print(*args, file=file)\n \n def print_err(lineno, context, err, message=None):\n     global ERR_COUNT"}, {"sha": "a751965dffab34ac31084fa9a3cfc0cb23b87cae", "filename": "src/libcore/time.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/59e70f27756a57b16a48bd7262e67fda01744701/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e70f27756a57b16a48bd7262e67fda01744701/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=59e70f27756a57b16a48bd7262e67fda01744701", "patch": "@@ -23,6 +23,22 @@ const MILLIS_PER_SEC: u64 = 1_000;\n const MICROS_PER_SEC: u64 = 1_000_000;\n const MAX_NANOS_F64: f64 = ((u64::MAX as u128 + 1)*(NANOS_PER_SEC as u128)) as f64;\n \n+/// The duration of one second.\n+#[unstable(feature = \"duration_constants\", issue = \"57391\")]\n+pub const SECOND: Duration = Duration::from_secs(1);\n+\n+/// The duration of one millisecond.\n+#[unstable(feature = \"duration_constants\", issue = \"57391\")]\n+pub const MILLISECOND: Duration = Duration::from_millis(1);\n+\n+/// The duration of one microsecond.\n+#[unstable(feature = \"duration_constants\", issue = \"57391\")]\n+pub const MICROSECOND: Duration = Duration::from_micros(1);\n+\n+/// The duration of one nanosecond.\n+#[unstable(feature = \"duration_constants\", issue = \"57391\")]\n+pub const NANOSECOND: Duration = Duration::from_nanos(1);\n+\n /// A `Duration` type to represent a span of time, typically used for system\n /// timeouts.\n ///"}, {"sha": "f6816d2f4e235c780823279dc9e94ba53c1386db", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59e70f27756a57b16a48bd7262e67fda01744701/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e70f27756a57b16a48bd7262e67fda01744701/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=59e70f27756a57b16a48bd7262e67fda01744701", "patch": "@@ -2930,9 +2930,6 @@ impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {\n }\n \n pub fn provide(providers: &mut ty::query::Providers<'_>) {\n-    // FIXME(#44234): almost all of these queries have no sub-queries and\n-    // therefore no actual inputs, they're just reading tables calculated in\n-    // resolve! Does this work? Unsure! That's what the issue is about.\n     providers.in_scope_traits_map = |tcx, id| tcx.gcx.trait_map.get(&id).cloned();\n     providers.module_exports = |tcx, id| tcx.gcx.export_map.get(&id).cloned();\n     providers.crate_name = |tcx, id| {"}, {"sha": "c18a5328dd54e050f0d16c64452360c9601bcddc", "filename": "src/librustc_data_structures/sync.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59e70f27756a57b16a48bd7262e67fda01744701/src%2Flibrustc_data_structures%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e70f27756a57b16a48bd7262e67fda01744701/src%2Flibrustc_data_structures%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsync.rs?ref=59e70f27756a57b16a48bd7262e67fda01744701", "patch": "@@ -323,6 +323,7 @@ cfg_if! {\n }\n \n pub fn assert_sync<T: ?Sized + Sync>() {}\n+pub fn assert_send<T: ?Sized + Send>() {}\n pub fn assert_send_val<T: ?Sized + Send>(_t: &T) {}\n pub fn assert_send_sync_val<T: ?Sized + Sync + Send>(_t: &T) {}\n "}, {"sha": "bfff592a5dd496fa18178c94d48a902c4421bc4b", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/59e70f27756a57b16a48bd7262e67fda01744701/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e70f27756a57b16a48bd7262e67fda01744701/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=59e70f27756a57b16a48bd7262e67fda01744701", "patch": "@@ -402,14 +402,15 @@ pub struct CompileController<'a> {\n \n     /// Allows overriding default rustc query providers,\n     /// after `default_provide` has installed them.\n-    pub provide: Box<dyn Fn(&mut ty::query::Providers) + 'a>,\n+    pub provide: Box<dyn Fn(&mut ty::query::Providers) + 'a + sync::Send>,\n     /// Same as `provide`, but only for non-local crates,\n     /// applied after `default_provide_extern`.\n-    pub provide_extern: Box<dyn Fn(&mut ty::query::Providers) + 'a>,\n+    pub provide_extern: Box<dyn Fn(&mut ty::query::Providers) + 'a + sync::Send>,\n }\n \n impl<'a> CompileController<'a> {\n     pub fn basic() -> CompileController<'a> {\n+        sync::assert_send::<Self>();\n         CompileController {\n             after_parse: PhaseController::basic(),\n             after_expand: PhaseController::basic(),\n@@ -499,7 +500,7 @@ pub struct PhaseController<'a> {\n     // If true then the compiler will try to run the callback even if the phase\n     // ends with an error. Note that this is not always possible.\n     pub run_callback_on_error: bool,\n-    pub callback: Box<dyn Fn(&mut CompileState) + 'a>,\n+    pub callback: Box<dyn Fn(&mut CompileState) + 'a + sync::Send>,\n }\n \n impl<'a> PhaseController<'a> {"}, {"sha": "d4a3ae273fcd40935aae7a13ed48a61a2918c972", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59e70f27756a57b16a48bd7262e67fda01744701/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e70f27756a57b16a48bd7262e67fda01744701/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=59e70f27756a57b16a48bd7262e67fda01744701", "patch": "@@ -236,6 +236,7 @@ fn main() {\n     }\n \n     let llvm_static_stdcpp = env::var_os(\"LLVM_STATIC_STDCPP\");\n+    let llvm_use_libcxx = env::var_os(\"LLVM_USE_LIBCXX\");\n \n     let stdcppname = if target.contains(\"openbsd\") {\n         // llvm-config on OpenBSD doesn't mention stdlib=libc++\n@@ -245,6 +246,8 @@ fn main() {\n     } else if target.contains(\"netbsd\") && llvm_static_stdcpp.is_some() {\n         // NetBSD uses a separate library when relocation is required\n         \"stdc++_pic\"\n+    } else if llvm_use_libcxx.is_some() {\n+        \"c++\"\n     } else {\n         \"stdc++\"\n     };"}, {"sha": "ccfce672e5f9ea0794540c4535328dc2c8614ba4", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59e70f27756a57b16a48bd7262e67fda01744701/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e70f27756a57b16a48bd7262e67fda01744701/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=59e70f27756a57b16a48bd7262e67fda01744701", "patch": "@@ -248,6 +248,7 @@\n #![feature(const_cstr_unchecked)]\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]\n+#![feature(duration_constants)]\n #![feature(exact_size_is_empty)]\n #![feature(external_doc)]\n #![feature(fixed_size_array)]"}, {"sha": "3daad7db2deffc5f946fac8fa326206c6a120bc1", "filename": "src/libstd/time.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59e70f27756a57b16a48bd7262e67fda01744701/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e70f27756a57b16a48bd7262e67fda01744701/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=59e70f27756a57b16a48bd7262e67fda01744701", "patch": "@@ -21,6 +21,9 @@ use sys_common::FromInner;\n #[stable(feature = \"time\", since = \"1.3.0\")]\n pub use core::time::Duration;\n \n+#[unstable(feature = \"duration_constants\", issue = \"57391\")]\n+pub use core::time::{SECOND, MILLISECOND, MICROSECOND, NANOSECOND};\n+\n /// A measurement of a monotonically nondecreasing clock.\n /// Opaque and useful only with `Duration`.\n ///"}, {"sha": "58876a1aa116277401614b8e40c831c3609210d9", "filename": "src/test/rustdoc/issue-32374.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59e70f27756a57b16a48bd7262e67fda01744701/src%2Ftest%2Frustdoc%2Fissue-32374.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e70f27756a57b16a48bd7262e67fda01744701/src%2Ftest%2Frustdoc%2Fissue-32374.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-32374.rs?ref=59e70f27756a57b16a48bd7262e67fda01744701", "patch": "@@ -10,7 +10,7 @@\n //      'Deprecated since 1.0.0: text'\n // @has - '<code>test</code>&nbsp;<a href=\"http://issue_url/32374\">#32374</a>'\n // @matches issue_32374/struct.T.html '//*[@class=\"stab unstable\"]' \\\n-//      '\ud83d\udd2c This is a nightly-only experimental API. \\(test #32374\\)$'\n+//      '\ud83d\udd2c This is a nightly-only experimental API. \\(test\\s#32374\\)$'\n /// Docs\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n #[unstable(feature = \"test\", issue = \"32374\")]"}]}