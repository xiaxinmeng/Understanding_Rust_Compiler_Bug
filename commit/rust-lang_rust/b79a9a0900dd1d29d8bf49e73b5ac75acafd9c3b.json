{"sha": "b79a9a0900dd1d29d8bf49e73b5ac75acafd9c3b", "node_id": "C_kwDOAAsO6NoAKGI3OWE5YTA5MDBkZDFkMjlkOGJmNDllNzNiNWFjNzVhY2FmZDljM2I", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-12-20T03:36:32Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2023-01-09T08:41:21Z"}, "message": "Set !const_evaluatable if ambig. and not inferred\n\nThis prevents an ICE due to a value not actually being evaluatable later.", "tree": {"sha": "63a45beecc6e3a52620d9e6cc62adf7dbfade6c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63a45beecc6e3a52620d9e6cc62adf7dbfade6c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b79a9a0900dd1d29d8bf49e73b5ac75acafd9c3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b79a9a0900dd1d29d8bf49e73b5ac75acafd9c3b", "html_url": "https://github.com/rust-lang/rust/commit/b79a9a0900dd1d29d8bf49e73b5ac75acafd9c3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b79a9a0900dd1d29d8bf49e73b5ac75acafd9c3b/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77b61379b6a808f388b347044b2d37a8968a274e", "url": "https://api.github.com/repos/rust-lang/rust/commits/77b61379b6a808f388b347044b2d37a8968a274e", "html_url": "https://github.com/rust-lang/rust/commit/77b61379b6a808f388b347044b2d37a8968a274e"}], "stats": {"total": 60, "additions": 48, "deletions": 12}, "files": [{"sha": "8530b96796f200751a6497e32030c8d52b01de9c", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b79a9a0900dd1d29d8bf49e73b5ac75acafd9c3b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79a9a0900dd1d29d8bf49e73b5ac75acafd9c3b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=b79a9a0900dd1d29d8bf49e73b5ac75acafd9c3b", "patch": "@@ -215,18 +215,16 @@ fn satisfied_from_param_env<'tcx>(\n         }\n     }\n \n-    if let Some(c) = single_match {\n-        if let Ok(c) = c {\n-            let is_ok = infcx\n-                .commit_if_ok(|_| {\n-                    let ocx = ObligationCtxt::new_in_snapshot(infcx);\n-                    assert!(ocx.eq(&ObligationCause::dummy(), param_env, c.ty(), ct.ty()).is_ok());\n-                    assert!(ocx.eq(&ObligationCause::dummy(), param_env, c, ct).is_ok());\n-                    if ocx.select_all_or_error().is_empty() { Ok(()) } else { Err(()) }\n-                })\n-                .is_ok();\n-            assert!(is_ok);\n-        }\n+    if let Some(Ok(c)) = single_match {\n+        let is_ok = infcx\n+            .commit_if_ok(|_| {\n+                let ocx = ObligationCtxt::new_in_snapshot(infcx);\n+                assert!(ocx.eq(&ObligationCause::dummy(), param_env, c.ty(), ct.ty()).is_ok());\n+                assert!(ocx.eq(&ObligationCause::dummy(), param_env, c, ct).is_ok());\n+                if ocx.select_all_or_error().is_empty() { Ok(()) } else { Err(()) }\n+            })\n+            .is_ok();\n+        assert!(is_ok);\n         return true;\n     }\n "}, {"sha": "1e8d8c3d3559bc3d0675054f3b1685f8eec6cbac", "filename": "src/test/ui/const-generics/ensure_is_evaluatable.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b79a9a0900dd1d29d8bf49e73b5ac75acafd9c3b/src%2Ftest%2Fui%2Fconst-generics%2Fensure_is_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79a9a0900dd1d29d8bf49e73b5ac75acafd9c3b/src%2Ftest%2Fui%2Fconst-generics%2Fensure_is_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fensure_is_evaluatable.rs?ref=b79a9a0900dd1d29d8bf49e73b5ac75acafd9c3b", "patch": "@@ -0,0 +1,20 @@\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+fn foo<const N: usize, const M: usize>() -> [(); N+2]\n+where\n+    [(); N + 1]:,\n+    [(); M + 1]:,\n+{\n+    bar()\n+    //~^ ERROR: unconstrained\n+}\n+\n+fn bar<const N: usize>() -> [(); N]\n+where\n+    [(); N + 1]:,\n+{\n+    [(); N]\n+}\n+\n+fn main() {}"}, {"sha": "bf6c35ad8fd8667a92a166971261d3c48fa650bc", "filename": "src/test/ui/const-generics/ensure_is_evaluatable.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b79a9a0900dd1d29d8bf49e73b5ac75acafd9c3b/src%2Ftest%2Fui%2Fconst-generics%2Fensure_is_evaluatable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b79a9a0900dd1d29d8bf49e73b5ac75acafd9c3b/src%2Ftest%2Fui%2Fconst-generics%2Fensure_is_evaluatable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fensure_is_evaluatable.stderr?ref=b79a9a0900dd1d29d8bf49e73b5ac75acafd9c3b", "patch": "@@ -0,0 +1,18 @@\n+error: unconstrained generic constant\n+  --> $DIR/ensure_is_evaluatable.rs:9:5\n+   |\n+LL |     bar()\n+   |     ^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); N + 1]:`\n+note: required by a bound in `bar`\n+  --> $DIR/ensure_is_evaluatable.rs:15:10\n+   |\n+LL | fn bar<const N: usize>() -> [(); N]\n+   |    --- required by a bound in this\n+LL | where\n+LL |     [(); N + 1]:,\n+   |          ^^^^^ required by this bound in `bar`\n+\n+error: aborting due to previous error\n+"}]}