{"sha": "bf087895102f1ab275a7ceed9f789dcfb7e172f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmMDg3ODk1MTAyZjFhYjI3NWE3Y2VlZDlmNzg5ZGNmYjdlMTcyZjM=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-11-27T13:37:40Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-11-27T13:37:40Z"}, "message": "Keep access to private Formatter fields in Formatter methods", "tree": {"sha": "b1f9e260ff741c85fdadb28ef654005d3858fae1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1f9e260ff741c85fdadb28ef654005d3858fae1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf087895102f1ab275a7ceed9f789dcfb7e172f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf087895102f1ab275a7ceed9f789dcfb7e172f3", "html_url": "https://github.com/rust-lang/rust/commit/bf087895102f1ab275a7ceed9f789dcfb7e172f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf087895102f1ab275a7ceed9f789dcfb7e172f3/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0e7ac37b29861911c2817da51c09764a384973b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0e7ac37b29861911c2817da51c09764a384973b", "html_url": "https://github.com/rust-lang/rust/commit/e0e7ac37b29861911c2817da51c09764a384973b"}], "stats": {"total": 92, "additions": 49, "deletions": 43}, "files": [{"sha": "a1f4c6995dae08a74a89f32f6db3a341a31833cd", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 28, "deletions": 43, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/bf087895102f1ab275a7ceed9f789dcfb7e172f3/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf087895102f1ab275a7ceed9f789dcfb7e172f3/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=bf087895102f1ab275a7ceed9f789dcfb7e172f3", "patch": "@@ -10,44 +10,29 @@\n \n use fmt;\n \n-struct PadAdapter<'a, 'b: 'a> {\n-    fmt: &'a mut fmt::Formatter<'b>,\n+struct PadAdapter<'a> {\n+    buf: &'a mut (fmt::Write + 'a),\n     on_newline: bool,\n }\n \n-impl<'a, 'b: 'a> PadAdapter<'a, 'b> {\n-    fn new(fmt: &'a mut fmt::Formatter<'b>) -> PadAdapter<'a, 'b> {\n-        PadAdapter {\n-            fmt,\n-            on_newline: false,\n-        }\n-    }\n-\n-    fn as_formatter(&mut self) -> fmt::Formatter {\n-        fmt::Formatter {\n-            // These only exist in the struct for the `Formatter::run` method,\n-            // which won\u2019t be used.\n-            curarg: self.fmt.curarg.clone(),\n-            args: self.fmt.args,\n-\n-            // We want to preserve these\n-            flags: self.fmt.flags,\n-            fill: self.fmt.fill,\n-            align: self.fmt.align,\n-            width: self.fmt.width,\n-            precision: self.fmt.precision,\n-\n-            // And change this\n-            buf: self,\n-        }\n+impl<'a> PadAdapter<'a> {\n+    fn wrap<'b, 'c: 'a+'b>(fmt: &'c mut fmt::Formatter, slot: &'b mut Option<Self>)\n+                        -> fmt::Formatter<'b> {\n+        fmt.wrap_buf(move |buf| {\n+            *slot = Some(PadAdapter {\n+                buf,\n+                on_newline: false,\n+            });\n+            slot.as_mut().unwrap()\n+        })\n     }\n }\n \n-impl<'a, 'b: 'a> fmt::Write for PadAdapter<'a, 'b> {\n+impl<'a> fmt::Write for PadAdapter<'a> {\n     fn write_str(&mut self, mut s: &str) -> fmt::Result {\n         while !s.is_empty() {\n             if self.on_newline {\n-                self.fmt.write_str(\"    \")?;\n+                self.buf.write_str(\"    \")?;\n             }\n \n             let split = match s.find('\\n') {\n@@ -60,7 +45,7 @@ impl<'a, 'b: 'a> fmt::Write for PadAdapter<'a, 'b> {\n                     s.len()\n                 }\n             };\n-            self.fmt.write_str(&s[..split])?;\n+            self.buf.write_str(&s[..split])?;\n             s = &s[split..];\n         }\n \n@@ -131,13 +116,13 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n             };\n \n             if self.is_pretty() {\n-                use fmt::Write;\n-                let mut writer = PadAdapter::new(self.fmt);\n+                let mut slot = None;\n+                let mut writer = PadAdapter::wrap(&mut self.fmt, &mut slot);\n                 writer.write_str(prefix)?;\n                 writer.write_str(\"\\n\")?;\n                 writer.write_str(name)?;\n                 writer.write_str(\": \")?;\n-                value.fmt(&mut writer.as_formatter())\n+                value.fmt(&mut writer)\n             } else {\n                 write!(self.fmt, \"{} {}: \", prefix, name)?;\n                 value.fmt(self.fmt)\n@@ -228,11 +213,11 @@ impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n             };\n \n             if self.is_pretty() {\n-                use fmt::Write;\n-                let mut writer = PadAdapter::new(self.fmt);\n+                let mut slot = None;\n+                let mut writer = PadAdapter::wrap(&mut self.fmt, &mut slot);\n                 writer.write_str(prefix)?;\n                 writer.write_str(\"\\n\")?;\n-                value.fmt(&mut writer.as_formatter())\n+                value.fmt(&mut writer)\n             } else {\n                 self.fmt.write_str(prefix)?;\n                 self.fmt.write_str(space)?;\n@@ -276,14 +261,14 @@ impl<'a, 'b: 'a> DebugInner<'a, 'b> {\n     fn entry(&mut self, entry: &fmt::Debug) {\n         self.result = self.result.and_then(|_| {\n             if self.is_pretty() {\n-                use fmt::Write;\n-                let mut writer = PadAdapter::new(self.fmt);\n+                let mut slot = None;\n+                let mut writer = PadAdapter::wrap(&mut self.fmt, &mut slot);\n                 writer.write_str(if self.has_fields {\n                     \",\\n\"\n                 } else {\n                     \"\\n\"\n                 })?;\n-                entry.fmt(&mut writer.as_formatter())\n+                entry.fmt(&mut writer)\n             } else {\n                 if self.has_fields {\n                     self.fmt.write_str(\", \")?\n@@ -500,16 +485,16 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     pub fn entry(&mut self, key: &fmt::Debug, value: &fmt::Debug) -> &mut DebugMap<'a, 'b> {\n         self.result = self.result.and_then(|_| {\n             if self.is_pretty() {\n-                use fmt::Write;\n-                let mut writer = PadAdapter::new(self.fmt);\n+                let mut slot = None;\n+                let mut writer = PadAdapter::wrap(&mut self.fmt, &mut slot);\n                 writer.write_str(if self.has_fields {\n                     \",\\n\"\n                 } else {\n                     \"\\n\"\n                 })?;\n-                key.fmt(&mut writer.as_formatter())?;\n+                key.fmt(&mut writer)?;\n                 writer.write_str(\": \")?;\n-                value.fmt(&mut writer.as_formatter())\n+                value.fmt(&mut writer)\n             } else {\n                 if self.has_fields {\n                     self.fmt.write_str(\", \")?"}, {"sha": "34f2c4ce09d79f7a7c96edef6952481f68df695f", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bf087895102f1ab275a7ceed9f789dcfb7e172f3/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf087895102f1ab275a7ceed9f789dcfb7e172f3/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=bf087895102f1ab275a7ceed9f789dcfb7e172f3", "patch": "@@ -1014,6 +1014,27 @@ pub fn write(output: &mut Write, args: Arguments) -> Result {\n }\n \n impl<'a> Formatter<'a> {\n+    fn wrap_buf<'b, 'c, F>(&'b mut self, wrap: F) -> Formatter<'c>\n+        where 'b: 'c, F: FnOnce(&'b mut (Write+'b)) -> &'c mut (Write+'c)\n+    {\n+        Formatter {\n+            // We want to change this\n+            buf: wrap(self.buf),\n+\n+            // And preserve these\n+            flags: self.flags,\n+            fill: self.fill,\n+            align: self.align,\n+            width: self.width,\n+            precision: self.precision,\n+\n+            // These only exist in the struct for the `run` method,\n+            // which won\u2019t be used together with this method.\n+            curarg: self.curarg.clone(),\n+            args: self.args,\n+        }\n+    }\n+\n     // First up is the collection of functions used to execute a format string\n     // at runtime. This consumes all of the compile-time statics generated by\n     // the format! syntax extension."}]}