{"sha": "45fd623762aca093ab913ed3a8fcd13c5798005d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZmQ2MjM3NjJhY2EwOTNhYjkxM2VkM2E4ZmNkMTNjNTc5ODAwNWQ=", "commit": {"author": {"name": "John Gallagher", "email": "jgallagher@bignerdranch.com", "date": "2014-10-03T04:41:24Z"}, "committer": {"name": "John Gallagher", "email": "jgallagher@bignerdranch.com", "date": "2014-10-11T00:30:32Z"}, "message": "Handle `while let` desugaring", "tree": {"sha": "4f6a229a9a15def614a0784c5e492ea36ab02c12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f6a229a9a15def614a0784c5e492ea36ab02c12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45fd623762aca093ab913ed3a8fcd13c5798005d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45fd623762aca093ab913ed3a8fcd13c5798005d", "html_url": "https://github.com/rust-lang/rust/commit/45fd623762aca093ab913ed3a8fcd13c5798005d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45fd623762aca093ab913ed3a8fcd13c5798005d/comments", "author": {"login": "hydhknn", "id": 62813007, "node_id": "MDQ6VXNlcjYyODEzMDA3", "avatar_url": "https://avatars.githubusercontent.com/u/62813007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hydhknn", "html_url": "https://github.com/hydhknn", "followers_url": "https://api.github.com/users/hydhknn/followers", "following_url": "https://api.github.com/users/hydhknn/following{/other_user}", "gists_url": "https://api.github.com/users/hydhknn/gists{/gist_id}", "starred_url": "https://api.github.com/users/hydhknn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hydhknn/subscriptions", "organizations_url": "https://api.github.com/users/hydhknn/orgs", "repos_url": "https://api.github.com/users/hydhknn/repos", "events_url": "https://api.github.com/users/hydhknn/events{/privacy}", "received_events_url": "https://api.github.com/users/hydhknn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hydhknn", "id": 62813007, "node_id": "MDQ6VXNlcjYyODEzMDA3", "avatar_url": "https://avatars.githubusercontent.com/u/62813007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hydhknn", "html_url": "https://github.com/hydhknn", "followers_url": "https://api.github.com/users/hydhknn/followers", "following_url": "https://api.github.com/users/hydhknn/following{/other_user}", "gists_url": "https://api.github.com/users/hydhknn/gists{/gist_id}", "starred_url": "https://api.github.com/users/hydhknn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hydhknn/subscriptions", "organizations_url": "https://api.github.com/users/hydhknn/orgs", "repos_url": "https://api.github.com/users/hydhknn/repos", "events_url": "https://api.github.com/users/hydhknn/events{/privacy}", "received_events_url": "https://api.github.com/users/hydhknn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "660cf180701d5fc961a900d626c1a1d314852bb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/660cf180701d5fc961a900d626c1a1d314852bb1", "html_url": "https://github.com/rust-lang/rust/commit/660cf180701d5fc961a900d626c1a1d314852bb1"}], "stats": {"total": 72, "additions": 60, "deletions": 12}, "files": [{"sha": "0ccfc7e80f6068d863025e46ddde256768ed35dc", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/45fd623762aca093ab913ed3a8fcd13c5798005d/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fd623762aca093ab913ed3a8fcd13c5798005d/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=45fd623762aca093ab913ed3a8fcd13c5798005d", "patch": "@@ -150,5 +150,6 @@ register_diagnostics!(\n     E0161,\n     E0162,\n     E0163,\n-    E0164\n+    E0164,\n+    E0165\n )"}, {"sha": "988b128e31d5c103ba611301466b10143503628c", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/45fd623762aca093ab913ed3a8fcd13c5798005d/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fd623762aca093ab913ed3a8fcd13c5798005d/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=45fd623762aca093ab913ed3a8fcd13c5798005d", "patch": "@@ -1082,7 +1082,8 @@ impl LintPass for UnnecessaryParens {\n             ast::ExprWhile(ref cond, _, _) => (cond, \"`while` condition\", true),\n             ast::ExprMatch(ref head, _, source) => match source {\n                 ast::MatchNormal => (head, \"`match` head expression\", true),\n-                ast::MatchIfLetDesugar => (head, \"`if let` head expression\", true)\n+                ast::MatchIfLetDesugar => (head, \"`if let` head expression\", true),\n+                ast::MatchWhileLetDesugar => (head, \"`while let` head expression\", true),\n             },\n             ast::ExprRet(Some(ref value)) => (value, \"`return` value\", false),\n             ast::ExprAssign(_, ref value) => (value, \"assigned value\", false),"}, {"sha": "b573c4e59487a83d35f0ad6af46cbb679a5ad329", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45fd623762aca093ab913ed3a8fcd13c5798005d/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fd623762aca093ab913ed3a8fcd13c5798005d/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=45fd623762aca093ab913ed3a8fcd13c5798005d", "patch": "@@ -259,6 +259,10 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                 expr_exit\n             }\n \n+            ast::ExprWhileLet(..) => {\n+                self.tcx.sess.span_bug(expr.span, \"non-desugared ExprWhileLet\");\n+            }\n+\n             ast::ExprForLoop(ref pat, ref head, ref body, _) => {\n                 //\n                 //          [pred]"}, {"sha": "dde3f3281f09f3844739de6b1ceb99b0fb4b0e97", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/45fd623762aca093ab913ed3a8fcd13c5798005d/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fd623762aca093ab913ed3a8fcd13c5798005d/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=45fd623762aca093ab913ed3a8fcd13c5798005d", "patch": "@@ -261,20 +261,30 @@ fn check_arms(cx: &MatchCheckCtxt, arms: &[(Vec<P<Pat>>, Option<&Expr>)], source\n \n             match is_useful(cx, &seen, v.as_slice(), LeaveOutWitness) {\n                 NotUseful => {\n-                    if source == MatchIfLetDesugar {\n-                        if printed_if_let_err {\n-                            // we already printed an irrefutable if-let pattern error.\n-                            // We don't want two, that's just confusing.\n-                        } else {\n+                    match source {\n+                        MatchIfLetDesugar => {\n+                            if printed_if_let_err {\n+                                // we already printed an irrefutable if-let pattern error.\n+                                // We don't want two, that's just confusing.\n+                            } else {\n+                                // find the first arm pattern so we can use its span\n+                                let &(ref first_arm_pats, _) = &arms[0];\n+                                let first_pat = first_arm_pats.get(0);\n+                                let span = first_pat.span;\n+                                span_err!(cx.tcx.sess, span, E0162, \"irrefutable if-let pattern\");\n+                                printed_if_let_err = true;\n+                            }\n+                        },\n+\n+                        MatchWhileLetDesugar => {\n                             // find the first arm pattern so we can use its span\n                             let &(ref first_arm_pats, _) = &arms[0];\n                             let first_pat = first_arm_pats.get(0);\n                             let span = first_pat.span;\n-                            span_err!(cx.tcx.sess, span, E0162, \"irrefutable if-let pattern\");\n-                            printed_if_let_err = true;\n-                        }\n-                    } else {\n-                        span_err!(cx.tcx.sess, pat.span, E0001, \"unreachable pattern\");\n+                            span_err!(cx.tcx.sess, span, E0165, \"irrefutable while-let pattern\");\n+                        },\n+\n+                        _ => span_err!(cx.tcx.sess, pat.span, E0001, \"unreachable pattern\")\n                     }\n                 }\n                 Useful => (),"}, {"sha": "6f179e0624fe21df3d5a56d597b43cf7c1ec2912", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45fd623762aca093ab913ed3a8fcd13c5798005d/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fd623762aca093ab913ed3a8fcd13c5798005d/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=45fd623762aca093ab913ed3a8fcd13c5798005d", "patch": "@@ -429,6 +429,10 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,TYPER> {\n                 self.walk_block(&**blk);\n             }\n \n+            ast::ExprWhileLet(..) => {\n+                self.tcx().sess.span_bug(expr.span, \"non-desugared ExprWhileLet\");\n+            }\n+\n             ast::ExprForLoop(ref pat, ref head, ref blk, _) => {\n                 // The pattern lives as long as the block.\n                 debug!(\"walk_expr for loop case: blk id={}\", blk.id);"}, {"sha": "90973dfaa0028363ae8687868f67242155022df1", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45fd623762aca093ab913ed3a8fcd13c5798005d/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fd623762aca093ab913ed3a8fcd13c5798005d/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=45fd623762aca093ab913ed3a8fcd13c5798005d", "patch": "@@ -484,6 +484,9 @@ fn visit_expr(ir: &mut IrMaps, expr: &Expr) {\n       ExprIfLet(..) => {\n           ir.tcx.sess.span_bug(expr.span, \"non-desugared ExprIfLet\");\n       }\n+      ExprWhileLet(..) => {\n+          ir.tcx.sess.span_bug(expr.span, \"non-desugared ExprWhileLet\");\n+      }\n       ExprForLoop(ref pat, _, _, _) => {\n         pat_util::pat_bindings(&ir.tcx.def_map, &**pat, |bm, p_id, sp, path1| {\n             debug!(\"adding local variable {} from for loop with bm {:?}\",\n@@ -1022,6 +1025,10 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             self.propagate_through_loop(expr, WhileLoop(&**cond), &**blk, succ)\n           }\n \n+          ExprWhileLet(..) => {\n+              self.ir.tcx.sess.span_bug(expr.span, \"non-desugared ExprWhileLet\");\n+          }\n+\n           ExprForLoop(ref pat, ref head, ref blk, _) => {\n             let ln = self.propagate_through_loop(expr, ForLoop(&**pat), &**blk, succ);\n             self.propagate_through_expr(&**head, ln)\n@@ -1480,6 +1487,9 @@ fn check_expr(this: &mut Liveness, expr: &Expr) {\n       ExprIfLet(..) => {\n         this.ir.tcx.sess.span_bug(expr.span, \"non-desugared ExprIfLet\");\n       }\n+      ExprWhileLet(..) => {\n+        this.ir.tcx.sess.span_bug(expr.span, \"non-desugared ExprWhileLet\");\n+      }\n     }\n }\n "}, {"sha": "4a1c4aaa89514d826ebbb24e88fd4457ddfde177", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/45fd623762aca093ab913ed3a8fcd13c5798005d/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fd623762aca093ab913ed3a8fcd13c5798005d/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=45fd623762aca093ab913ed3a8fcd13c5798005d", "patch": "@@ -530,6 +530,9 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n           ast::ExprIfLet(..) => {\n             self.tcx().sess.span_bug(expr.span, \"non-desugared ExprIfLet\");\n           }\n+          ast::ExprWhileLet(..) => {\n+            self.tcx().sess.span_bug(expr.span, \"non-desugared ExprWhileLet\");\n+          }\n         }\n     }\n "}, {"sha": "d81f78f23ffaf4671f5e21821577245de36315de", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/45fd623762aca093ab913ed3a8fcd13c5798005d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fd623762aca093ab913ed3a8fcd13c5798005d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=45fd623762aca093ab913ed3a8fcd13c5798005d", "patch": "@@ -3496,6 +3496,11 @@ fn populate_scope_map(cx: &CrateContext,\n                 })\n             }\n \n+            ast::ExprWhileLet(..) => {\n+                cx.sess().span_bug(exp.span, \"debuginfo::populate_scope_map() - \\\n+                                              Found unexpanded while-let.\");\n+            }\n+\n             ast::ExprForLoop(ref pattern, ref head, ref body, _) => {\n                 walk_expr(cx, &**head, scope_stack, scope_map);\n "}, {"sha": "9a51b258ae4693fc25a69236e04a8e62c8290a8d", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/45fd623762aca093ab913ed3a8fcd13c5798005d/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fd623762aca093ab913ed3a8fcd13c5798005d/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=45fd623762aca093ab913ed3a8fcd13c5798005d", "patch": "@@ -3615,6 +3615,9 @@ pub fn expr_kind(tcx: &ctxt, expr: &ast::Expr) -> ExprKind {\n         ast::ExprIfLet(..) => {\n             tcx.sess.span_bug(expr.span, \"non-desugared ExprIfLet\");\n         }\n+        ast::ExprWhileLet(..) => {\n+            tcx.sess.span_bug(expr.span, \"non-desugared ExprWhileLet\");\n+        }\n \n         ast::ExprLit(ref lit) if lit_is_str(&**lit) => {\n             RvalueDpsExpr"}, {"sha": "07a56ad46203c88107eb9e06803989fd5c1a5bab", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/45fd623762aca093ab913ed3a8fcd13c5798005d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fd623762aca093ab913ed3a8fcd13c5798005d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=45fd623762aca093ab913ed3a8fcd13c5798005d", "patch": "@@ -4116,6 +4116,9 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n             fcx.write_nil(id);\n         }\n       }\n+      ast::ExprWhileLet(..) => {\n+        tcx.sess.span_bug(expr.span, \"non-desugared ExprWhileLet\");\n+      }\n       ast::ExprForLoop(ref pat, ref head, ref block, _) => {\n         check_expr(fcx, &**head);\n         let typ = lookup_method_for_for_loop(fcx, &**head, expr.id);"}, {"sha": "459e7eb093e7c2d96877d539f4f70ed36d6b5b44", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/45fd623762aca093ab913ed3a8fcd13c5798005d/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fd623762aca093ab913ed3a8fcd13c5798005d/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=45fd623762aca093ab913ed3a8fcd13c5798005d", "patch": "@@ -93,6 +93,9 @@ pub fn explain_region_and_span(cx: &ctxt, region: ty::Region)\n                 explain_span(cx, \"method call\", expr.span)\n               },\n               ast::ExprMatch(_, _, ast::MatchIfLetDesugar) => explain_span(cx, \"if let\", expr.span),\n+              ast::ExprMatch(_, _, ast::MatchWhileLetDesugar) => {\n+                  explain_span(cx, \"while let\", expr.span)\n+              },\n               ast::ExprMatch(..) => explain_span(cx, \"match\", expr.span),\n               _ => explain_span(cx, \"expression\", expr.span)\n             }"}, {"sha": "3c28cac6c6f7c1e9186ae56796016f018e979c2a", "filename": "src/librustc_back/svh.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45fd623762aca093ab913ed3a8fcd13c5798005d/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fd623762aca093ab913ed3a8fcd13c5798005d/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=45fd623762aca093ab913ed3a8fcd13c5798005d", "patch": "@@ -294,6 +294,7 @@ mod svh_visitor {\n \n             // just syntactic artifacts, expanded away by time of SVH.\n             ExprIfLet(..)            => unreachable!(),\n+            ExprWhileLet(..)         => unreachable!(),\n             ExprMac(..)              => unreachable!(),\n         }\n     }"}]}