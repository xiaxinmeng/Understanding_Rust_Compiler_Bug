{"sha": "f6e70e751a563500bc125c65a38d6417bbf0c549", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ZTcwZTc1MWE1NjM1MDBiYzEyNWM2NWEzOGQ2NDE3YmJmMGM1NDk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-19T15:03:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-19T15:03:41Z"}, "message": "Merge #4514\n\n4514: find_path cleanups r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "e367c4c84450848603b52fd39c2a688651ef2270", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e367c4c84450848603b52fd39c2a688651ef2270"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6e70e751a563500bc125c65a38d6417bbf0c549", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJew/VNCRBK7hj4Ov3rIwAAdHIIAJBe3IPGnK1+hELs/uzztLIV\np3YcGnEafH5tpn4KLs5kqONUPlfNofwfI4noxHZD1HUAvJA1M6RfUB3gpaulUgfb\nyktLE3+QEL9/7dVqvcVrD22+K26UYCjJCig1sEcGKPyYujrKqhUfwUQwXoI+/wKi\nKd/IDMLWu7Aj/3ogqW4I80+HIHulkeiMWDl5Qd9cJPNuNc3vjAcNxp1fYjEiufJ9\nnGXOlig8XkjwqoBXV0L7nEiuABm3YXsuPH1cNiPvEwef4eKdLwMF0jJZe5F01Q1K\nj0bi3UaMlJTFRql9PiSymgjLTxeEtmap1bWBFpVPUNOXOCOtsDt1Uk0YQSMmxBk=\n=vQL4\n-----END PGP SIGNATURE-----\n", "payload": "tree e367c4c84450848603b52fd39c2a688651ef2270\nparent 5c1c23ecc7c94fae0948abe8af7a700e42e20921\nparent dce31efdde9ca0311ed60f04b97049d42ed49ba8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1589900621 +0000\ncommitter GitHub <noreply@github.com> 1589900621 +0000\n\nMerge #4514\n\n4514: find_path cleanups r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6e70e751a563500bc125c65a38d6417bbf0c549", "html_url": "https://github.com/rust-lang/rust/commit/f6e70e751a563500bc125c65a38d6417bbf0c549", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6e70e751a563500bc125c65a38d6417bbf0c549/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c1c23ecc7c94fae0948abe8af7a700e42e20921", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c1c23ecc7c94fae0948abe8af7a700e42e20921", "html_url": "https://github.com/rust-lang/rust/commit/5c1c23ecc7c94fae0948abe8af7a700e42e20921"}, {"sha": "dce31efdde9ca0311ed60f04b97049d42ed49ba8", "url": "https://api.github.com/repos/rust-lang/rust/commits/dce31efdde9ca0311ed60f04b97049d42ed49ba8", "html_url": "https://github.com/rust-lang/rust/commit/dce31efdde9ca0311ed60f04b97049d42ed49ba8"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "2f71511ba920c221e08aa44408624a785008d16d", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6e70e751a563500bc125c65a38d6417bbf0c549/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e70e751a563500bc125c65a38d6417bbf0c549/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=f6e70e751a563500bc125c65a38d6417bbf0c549", "patch": "@@ -112,7 +112,7 @@ pub trait DefDatabase: InternDatabase + AstDatabase + Upcast<dyn AstDatabase> {\n     #[salsa::invoke(Documentation::documentation_query)]\n     fn documentation(&self, def: AttrDefId) -> Option<Documentation>;\n \n-    #[salsa::invoke(find_path::importable_locations_in_crate)]\n+    #[salsa::invoke(find_path::importable_locations_of_query)]\n     fn importable_locations_of(\n         &self,\n         item: ItemInNs,"}, {"sha": "2eb12ec8f2bc0c59df01760abe2d5c785bd4196b", "filename": "crates/ra_hir_def/src/find_path.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f6e70e751a563500bc125c65a38d6417bbf0c549/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e70e751a563500bc125c65a38d6417bbf0c549/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs?ref=f6e70e751a563500bc125c65a38d6417bbf0c549", "patch": "@@ -1,32 +1,40 @@\n //! An algorithm to find a path to refer to a certain item.\n \n+use std::sync::Arc;\n+\n+use hir_expand::name::{known, AsName, Name};\n+use ra_prof::profile;\n+use test_utils::tested_by;\n+\n use crate::{\n     db::DefDatabase,\n     item_scope::ItemInNs,\n     path::{ModPath, PathKind},\n     visibility::Visibility,\n     CrateId, ModuleDefId, ModuleId,\n };\n-use hir_expand::name::{known, AsName, Name};\n-use std::sync::Arc;\n-use test_utils::tested_by;\n+\n+// FIXME: handle local items\n+\n+/// Find a path that can be used to refer to a certain item. This can depend on\n+/// *from where* you're referring to the item, hence the `from` parameter.\n+pub fn find_path(db: &dyn DefDatabase, item: ItemInNs, from: ModuleId) -> Option<ModPath> {\n+    let _p = profile(\"find_path\");\n+    find_path_inner(db, item, from, MAX_PATH_LEN)\n+}\n \n const MAX_PATH_LEN: usize = 15;\n \n impl ModPath {\n     fn starts_with_std(&self) -> bool {\n-        self.segments.first().filter(|&first_segment| first_segment == &known::std).is_some()\n+        self.segments.first() == Some(&known::std)\n     }\n \n     // When std library is present, paths starting with `std::`\n     // should be preferred over paths starting with `core::` and `alloc::`\n     fn can_start_with_std(&self) -> bool {\n-        self.segments\n-            .first()\n-            .filter(|&first_segment| {\n-                first_segment == &known::alloc || first_segment == &known::core\n-            })\n-            .is_some()\n+        let first_segment = self.segments.first();\n+        first_segment == Some(&known::alloc) || first_segment == Some(&known::core)\n     }\n \n     fn len(&self) -> usize {\n@@ -41,15 +49,6 @@ impl ModPath {\n     }\n }\n \n-// FIXME: handle local items\n-\n-/// Find a path that can be used to refer to a certain item. This can depend on\n-/// *from where* you're referring to the item, hence the `from` parameter.\n-pub fn find_path(db: &dyn DefDatabase, item: ItemInNs, from: ModuleId) -> Option<ModPath> {\n-    let _p = ra_prof::profile(\"find_path\");\n-    find_path_inner(db, item, from, MAX_PATH_LEN)\n-}\n-\n fn find_path_inner(\n     db: &dyn DefDatabase,\n     item: ItemInNs,\n@@ -215,11 +214,12 @@ fn find_importable_locations(\n ///\n /// Note that the crate doesn't need to be the one in which the item is defined;\n /// it might be re-exported in other crates.\n-pub(crate) fn importable_locations_in_crate(\n+pub(crate) fn importable_locations_of_query(\n     db: &dyn DefDatabase,\n     item: ItemInNs,\n     krate: CrateId,\n ) -> Arc<[(ModuleId, Name, Visibility)]> {\n+    let _p = profile(\"importable_locations_of_query\");\n     let def_map = db.crate_def_map(krate);\n     let mut result = Vec::new();\n     for (local_id, data) in def_map.modules.iter() {"}]}