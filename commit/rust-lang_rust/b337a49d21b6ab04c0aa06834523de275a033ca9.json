{"sha": "b337a49d21b6ab04c0aa06834523de275a033ca9", "node_id": "C_kwDOAAsO6NoAKGIzMzdhNDlkMjFiNmFiMDRjMGFhMDY4MzQ1MjNkZTI3NWEwMzNjYTk", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-01T15:17:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-01T15:17:03Z"}, "message": "Merge #11871\n\n11871: internal: Move `rust.ungram` into `rust-analyzer/crates/syntax` r=Veykril a=Veykril\n\nThis makes updating the grammar a lot simpler for us. Though removing it from ungrammar can't be done without bumping it to 2.0 so I'll leave it in there for the time being.\r\ncc https://github.com/rust-analyzer/ungrammar/pull/47\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "9a66841d05ed17770be0342250bf429afa808cf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a66841d05ed17770be0342250bf429afa808cf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b337a49d21b6ab04c0aa06834523de275a033ca9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiRxdvCRBK7hj4Ov3rIwAA7OIIACKavA0pOGGT2xwvZ/fhbhYX\nl4IqT+JSPYmVqFzO8rkbtxlzIuXq+BeSmLzrHghngolHrmb8L3SU87dDYp2h4XM3\nq+f1272Ma5X7YHKjmEb9/VwahEYCrsHz214UGpsXyXGsID1WRifRgrDo3AliKfdp\nKBx5Bq37gDsY7AKJbCUu+Tpm3VLeiGN9YZ0FbewKG8qtMxGLGCYqXs2LdsKL7ae/\ngngqQm3lOs0mVPDeWLznX8hrHVyCkxdIfMOmhfVZa7dHGmsWZIYXpjxTs++rirkW\nQzs1pHjaYKTQ74yXOzV83ERu1JSlzf3tm+WUlBCmNI49sfzXp+iDCnNHfcjVppY=\n=hRm2\n-----END PGP SIGNATURE-----\n", "payload": "tree 9a66841d05ed17770be0342250bf429afa808cf3\nparent 50225fe630968fc6fd9f09f6d3d61dbb70fb19fe\nparent 0d1d1dc3d9ec1c2798f0528bdabadd61a5a197e1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1648826223 +0000\ncommitter GitHub <noreply@github.com> 1648826223 +0000\n\nMerge #11871\n\n11871: internal: Move `rust.ungram` into `rust-analyzer/crates/syntax` r=Veykril a=Veykril\n\nThis makes updating the grammar a lot simpler for us. Though removing it from ungrammar can't be done without bumping it to 2.0 so I'll leave it in there for the time being.\r\ncc https://github.com/rust-analyzer/ungrammar/pull/47\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b337a49d21b6ab04c0aa06834523de275a033ca9", "html_url": "https://github.com/rust-lang/rust/commit/b337a49d21b6ab04c0aa06834523de275a033ca9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b337a49d21b6ab04c0aa06834523de275a033ca9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50225fe630968fc6fd9f09f6d3d61dbb70fb19fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/50225fe630968fc6fd9f09f6d3d61dbb70fb19fe", "html_url": "https://github.com/rust-lang/rust/commit/50225fe630968fc6fd9f09f6d3d61dbb70fb19fe"}, {"sha": "0d1d1dc3d9ec1c2798f0528bdabadd61a5a197e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d1d1dc3d9ec1c2798f0528bdabadd61a5a197e1", "html_url": "https://github.com/rust-lang/rust/commit/0d1d1dc3d9ec1c2798f0528bdabadd61a5a197e1"}], "stats": {"total": 671, "additions": 668, "deletions": 3}, "files": [{"sha": "bb4d10207d7aa4fcbfe757bc88087bea28eca28a", "filename": "crates/syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b337a49d21b6ab04c0aa06834523de275a033ca9/crates%2Fsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b337a49d21b6ab04c0aa06834523de275a033ca9/crates%2Fsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2FCargo.toml?ref=b337a49d21b6ab04c0aa06834523de275a033ca9", "patch": "@@ -30,7 +30,7 @@ rayon = \"1.5.1\"\n expect-test = \"1.2.2\"\n proc-macro2 = \"1.0.36\"\n quote = \"1.0.16\"\n-ungrammar = \"=1.16.1\"\n+ungrammar = \"1.16.1\"\n \n test_utils = { path = \"../test_utils\" }\n sourcegen = { path = \"../sourcegen\" }"}, {"sha": "cb58486eff01d5eb75a208bb421646eaa10103a2", "filename": "crates/syntax/rust.ungram", "status": "added", "additions": 664, "deletions": 0, "changes": 664, "blob_url": "https://github.com/rust-lang/rust/blob/b337a49d21b6ab04c0aa06834523de275a033ca9/crates%2Fsyntax%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/b337a49d21b6ab04c0aa06834523de275a033ca9/crates%2Fsyntax%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Frust.ungram?ref=b337a49d21b6ab04c0aa06834523de275a033ca9", "patch": "@@ -0,0 +1,664 @@\n+// Rust Un-Grammar.\n+//\n+// This grammar specifies the structure of Rust's concrete syntax tree.\n+// It does not specify parsing rules (ambiguities, precedence, etc are out of scope).\n+// Tokens are processed -- contextual keywords are recognised, compound operators glued.\n+//\n+// Legend:\n+//\n+//   //          -- comment\n+//   Name =      -- non-terminal definition\n+//   'ident'     -- token (terminal)\n+//   A B         -- sequence\n+//   A | B       -- alternation\n+//   A*          -- zero or more repetition\n+//   A?          -- zero or one repetition\n+//   (A)         -- same as A\n+//   label:A     -- suggested name for field of AST node\n+\n+//*************************//\n+// Names, Paths and Macros //\n+//*************************//\n+\n+Name =\n+  'ident' | 'self'\n+\n+NameRef =\n+  'ident' | 'int_number' | 'self' | 'super' | 'crate' | 'Self'\n+\n+Lifetime =\n+  'lifetime_ident'\n+\n+Path =\n+  (qualifier:Path '::')? segment:PathSegment\n+\n+PathSegment =\n+  '::'? NameRef\n+| NameRef GenericArgList?\n+| NameRef ParamList RetType?\n+| '<' PathType ('as' PathType)? '>'\n+\n+GenericArgList =\n+  '::'? '<' (GenericArg (',' GenericArg)* ','?)? '>'\n+\n+GenericArg =\n+  TypeArg\n+| AssocTypeArg\n+| LifetimeArg\n+| ConstArg\n+\n+TypeArg =\n+  Type\n+\n+AssocTypeArg =\n+  NameRef GenericParamList? (':' TypeBoundList | '=' Type)\n+\n+LifetimeArg =\n+  Lifetime\n+\n+ConstArg =\n+  Expr\n+\n+MacroCall =\n+  Attr* Path '!' TokenTree ';'?\n+\n+TokenTree =\n+  '(' ')'\n+| '{' '}'\n+| '[' ']'\n+\n+MacroItems =\n+  Item*\n+\n+MacroStmts =\n+  statements:Stmt*\n+  Expr?\n+\n+//*************************//\n+//          Items          //\n+//*************************//\n+\n+SourceFile =\n+  'shebang'?\n+  Attr*\n+  Item*\n+\n+Item =\n+  Const\n+| Enum\n+| ExternBlock\n+| ExternCrate\n+| Fn\n+| Impl\n+| MacroCall\n+| MacroRules\n+| MacroDef\n+| Module\n+| Static\n+| Struct\n+| Trait\n+| TypeAlias\n+| Union\n+| Use\n+\n+MacroRules =\n+  Attr* Visibility?\n+  'macro_rules' '!' Name\n+  TokenTree\n+\n+MacroDef =\n+  Attr* Visibility?\n+  'macro' Name args:TokenTree?\n+  body:TokenTree\n+\n+Module =\n+  Attr* Visibility?\n+  'mod' Name\n+  (ItemList | ';')\n+\n+ItemList =\n+  '{' Attr* Item* '}'\n+\n+ExternCrate =\n+  Attr* Visibility?\n+  'extern' 'crate' NameRef Rename? ';'\n+\n+Rename =\n+  'as' (Name | '_')\n+\n+Use =\n+  Attr* Visibility?\n+  'use' UseTree ';'\n+\n+UseTree =\n+  (Path? '::')? ('*' | UseTreeList)\n+| Path Rename?\n+\n+UseTreeList =\n+  '{' (UseTree (',' UseTree)* ','?)? '}'\n+\n+Fn =\n+ Attr* Visibility?\n+ 'default'? 'const'? 'async'? 'unsafe'? Abi?\n+ 'fn' Name GenericParamList? ParamList RetType? WhereClause?\n+ (body:BlockExpr | ';')\n+\n+Abi =\n+  'extern' 'string'?\n+\n+ParamList =\n+  '('(\n+    SelfParam\n+  | (SelfParam ',')? (Param (',' Param)* ','?)?\n+  )')'\n+| '|' (Param (',' Param)* ','?)? '|'\n+\n+SelfParam =\n+  Attr* (\n+    ('&' Lifetime?)? 'mut'? Name\n+  | 'mut'? Name ':' Type\n+  )\n+\n+Param =\n+  Attr* (\n+    Pat (':' Type)?\n+  | Type\n+  | '...'\n+  )\n+\n+RetType =\n+  '->' Type\n+\n+TypeAlias =\n+  Attr* Visibility?\n+  'default'?\n+  'type' Name GenericParamList? (':' TypeBoundList?)? WhereClause?\n+  ('=' Type)? ';'\n+\n+Struct =\n+  Attr* Visibility?\n+  'struct' Name GenericParamList? (\n+    WhereClause? (RecordFieldList | ';')\n+  | TupleFieldList WhereClause? ';'\n+  )\n+\n+RecordFieldList =\n+ '{' fields:(RecordField (',' RecordField)* ','?)? '}'\n+\n+RecordField =\n+  Attr* Visibility?\n+  Name ':' Type\n+\n+TupleFieldList =\n+  '(' fields:(TupleField (',' TupleField)* ','?)? ')'\n+\n+TupleField =\n+  Attr* Visibility?\n+  Type\n+\n+FieldList =\n+  RecordFieldList\n+| TupleFieldList\n+\n+Enum =\n+  Attr* Visibility?\n+  'enum' Name GenericParamList? WhereClause?\n+  VariantList\n+\n+VariantList =\n+ '{' (Variant (',' Variant)* ','?)? '}'\n+\n+Variant =\n+  Attr* Visibility?\n+  Name FieldList? ('=' Expr)?\n+\n+Union =\n+  Attr* Visibility?\n+  'union' Name GenericParamList? WhereClause?\n+  RecordFieldList\n+\n+// A Data Type.\n+//\n+// Not used directly in the grammar, but handy to have anyway.\n+Adt =\n+  Enum\n+| Struct\n+| Union\n+\n+Const =\n+  Attr* Visibility?\n+  'default'?\n+  'const' (Name | '_') ':' Type\n+  ('=' body:Expr)? ';'\n+\n+Static =\n+  Attr* Visibility?\n+  'static' 'mut'? Name ':' Type\n+  ('=' body:Expr)? ';'\n+\n+Trait =\n+  Attr* Visibility?\n+  'unsafe'? 'auto'?\n+  'trait' Name GenericParamList? (':' TypeBoundList?)? WhereClause?\n+  AssocItemList\n+\n+AssocItemList =\n+  '{' Attr* AssocItem* '}'\n+\n+AssocItem =\n+  Const\n+| Fn\n+| MacroCall\n+| TypeAlias\n+\n+Impl =\n+  Attr* Visibility?\n+  'default'? 'unsafe'?\n+  'impl' GenericParamList? ('const'? '!'? trait:Type 'for')? self_ty:Type WhereClause?\n+  AssocItemList\n+\n+ExternBlock =\n+  Attr* 'unsafe'? Abi ExternItemList\n+\n+ExternItemList =\n+  '{' Attr* ExternItem* '}'\n+\n+ExternItem =\n+  Fn\n+| MacroCall\n+| Static\n+| TypeAlias\n+\n+GenericParamList =\n+  '<' (GenericParam (',' GenericParam)* ','?)? '>'\n+\n+GenericParam =\n+  ConstParam\n+| LifetimeParam\n+| TypeParam\n+\n+TypeParam =\n+  Attr* Name (':' TypeBoundList?)?\n+  ('=' default_type:Type)?\n+\n+ConstParam =\n+  Attr* 'const' Name ':' Type\n+  ('=' default_val:Expr)?\n+\n+LifetimeParam =\n+  Attr* Lifetime (':' TypeBoundList?)?\n+\n+WhereClause =\n+  'where' predicates:(WherePred (',' WherePred)* ','?)\n+\n+WherePred =\n+  ('for' GenericParamList)?  (Lifetime | Type) ':' TypeBoundList?\n+\n+Visibility =\n+  'pub' ('(' 'in'? Path ')')?\n+\n+Attr =\n+  '#' '!'? '[' Meta ']'\n+\n+Meta =\n+  Path ('=' Expr | TokenTree)?\n+\n+//****************************//\n+// Statements and Expressions //\n+//****************************//\n+\n+Stmt =\n+  ';'\n+| ExprStmt\n+| Item\n+| LetStmt\n+\n+LetStmt =\n+  Attr* 'let' Pat (':' Type)?\n+  '=' initializer:Expr\n+  LetElse?\n+  ';'\n+\n+LetElse =\n+  'else' BlockExpr\n+\n+ExprStmt =\n+  Expr ';'?\n+\n+Expr =\n+  ArrayExpr\n+| AwaitExpr\n+| BinExpr\n+| BlockExpr\n+| BoxExpr\n+| BreakExpr\n+| CallExpr\n+| CastExpr\n+| ClosureExpr\n+| ContinueExpr\n+| FieldExpr\n+| ForExpr\n+| IfExpr\n+| IndexExpr\n+| Literal\n+| LoopExpr\n+| MacroCall\n+| MacroStmts\n+| MatchExpr\n+| MethodCallExpr\n+| ParenExpr\n+| PathExpr\n+| PrefixExpr\n+| RangeExpr\n+| RecordExpr\n+| RefExpr\n+| ReturnExpr\n+| TryExpr\n+| TupleExpr\n+| WhileExpr\n+| YieldExpr\n+| LetExpr\n+| UnderscoreExpr\n+\n+Literal =\n+  Attr* value:(\n+    'int_number' | 'float_number'\n+  | 'string' | 'raw_string'\n+  | 'byte_string' | 'raw_byte_string'\n+  | 'true' | 'false'\n+  | 'char' | 'byte'\n+  )\n+\n+PathExpr =\n+  Attr* Path\n+\n+StmtList =\n+  '{'\n+    Attr*\n+    statements:Stmt*\n+    tail_expr:Expr?\n+  '}'\n+\n+RefExpr =\n+  Attr* '&' ('raw' | 'mut' | 'const') Expr\n+\n+TryExpr =\n+  Attr* Expr '?'\n+\n+BlockExpr =\n+  Attr* Label? ('try' | 'unsafe' | 'async' | 'const') StmtList\n+\n+PrefixExpr =\n+  Attr* op:('-' | '!' | '*') Expr\n+\n+BinExpr =\n+  Attr*\n+  lhs:Expr\n+  op:(\n+    '||' | '&&'\n+  | '==' | '!=' | '<=' | '>=' | '<' | '>'\n+  | '+' | '*' | '-' | '/' | '%' | '<<' | '>>' | '^' | '|' | '&'\n+  | '=' | '+=' | '/=' | '*=' | '%=' | '>>=' | '<<=' | '-=' | '|=' | '&=' | '^='\n+  )\n+  rhs:Expr\n+\n+CastExpr =\n+  Attr* Expr 'as' Type\n+\n+ParenExpr =\n+  Attr* '(' Attr* Expr ')'\n+\n+ArrayExpr =\n+  Attr* '[' Attr* (\n+    (Expr (',' Expr)* ','?)?\n+  | Expr ';' Expr\n+  ) ']'\n+\n+IndexExpr =\n+  Attr* base:Expr '[' index:Expr ']'\n+\n+TupleExpr =\n+  Attr* '(' Attr* fields:(Expr (',' Expr)* ','?)? ')'\n+\n+RecordExpr =\n+  Path RecordExprFieldList\n+\n+RecordExprFieldList =\n+  '{'\n+    Attr*\n+    fields:(RecordExprField (',' RecordExprField)* ','?)?\n+    ('..' spread:Expr?)?\n+  '}'\n+\n+RecordExprField =\n+  Attr* (NameRef ':')? Expr\n+\n+CallExpr =\n+  Attr* Expr ArgList\n+\n+ArgList =\n+  '(' args:(Expr (',' Expr)* ','?)? ')'\n+\n+MethodCallExpr =\n+  Attr* receiver:Expr '.' NameRef GenericArgList? ArgList\n+\n+FieldExpr =\n+  Attr* Expr '.' NameRef\n+\n+ClosureExpr =\n+  Attr* 'static'? 'async'? 'move'?  ParamList RetType?\n+  body:Expr\n+\n+IfExpr =\n+  Attr* 'if' condition:Expr then_branch:BlockExpr\n+  ('else' else_branch:(IfExpr | BlockExpr))?\n+\n+LoopExpr =\n+  Attr* Label? 'loop'\n+  loop_body:BlockExpr\n+\n+ForExpr =\n+  Attr* Label? 'for' Pat 'in' iterable:Expr\n+  loop_body:BlockExpr\n+\n+WhileExpr =\n+  Attr* Label? 'while' condition:Expr\n+  loop_body:BlockExpr\n+\n+Label =\n+  Lifetime ':'\n+\n+BreakExpr =\n+  Attr* 'break' Lifetime? Expr?\n+\n+ContinueExpr =\n+  Attr* 'continue' Lifetime?\n+\n+RangeExpr =\n+  Attr* start:Expr? op:('..' | '..=') end:Expr?\n+\n+MatchExpr =\n+  Attr* 'match' Expr MatchArmList\n+\n+MatchArmList =\n+  '{'\n+    Attr*\n+    arms:MatchArm*\n+  '}'\n+\n+MatchArm =\n+  Attr* Pat guard:MatchGuard? '=>' Expr ','?\n+\n+MatchGuard =\n+  'if' condition:Expr\n+\n+ReturnExpr =\n+  Attr* 'return' Expr?\n+\n+YieldExpr =\n+  Attr* 'yield' Expr?\n+\n+LetExpr =\n+  Attr* 'let' Pat '=' Expr\n+\n+UnderscoreExpr =\n+  Attr* '_'\n+\n+AwaitExpr =\n+  Attr* Expr '.' 'await'\n+\n+BoxExpr =\n+  Attr* 'box' Expr\n+\n+//*************************//\n+//          Types          //\n+//*************************//\n+\n+Type =\n+  ArrayType\n+| DynTraitType\n+| FnPtrType\n+| ForType\n+| ImplTraitType\n+| InferType\n+| MacroType\n+| NeverType\n+| ParenType\n+| PathType\n+| PtrType\n+| RefType\n+| SliceType\n+| TupleType\n+\n+ParenType =\n+  '(' Type ')'\n+\n+NeverType =\n+  '!'\n+\n+MacroType =\n+  MacroCall\n+\n+PathType =\n+  Path\n+\n+TupleType =\n+  '(' fields:(Type (',' Type)* ','?)? ')'\n+\n+PtrType =\n+  '*' ('const' | 'mut') Type\n+\n+RefType =\n+  '&' Lifetime? 'mut'? Type\n+\n+ArrayType =\n+  '[' Type ';' Expr ']'\n+\n+SliceType =\n+  '[' Type ']'\n+\n+InferType =\n+  '_'\n+\n+FnPtrType =\n+  'const'? 'async'? 'unsafe'? Abi? 'fn' ParamList RetType?\n+\n+ForType =\n+  'for' GenericParamList Type\n+\n+ImplTraitType =\n+  'impl' TypeBoundList\n+\n+DynTraitType =\n+  'dyn' TypeBoundList\n+\n+TypeBoundList =\n+  bounds:(TypeBound ('+' TypeBound)* '+'?)\n+\n+TypeBound =\n+  Lifetime\n+| ('?' | '~' 'const')? Type\n+\n+//************************//\n+//        Patterns        //\n+//************************//\n+\n+Pat =\n+  IdentPat\n+| BoxPat\n+| RestPat\n+| LiteralPat\n+| MacroPat\n+| OrPat\n+| ParenPat\n+| PathPat\n+| WildcardPat\n+| RangePat\n+| RecordPat\n+| RefPat\n+| SlicePat\n+| TuplePat\n+| TupleStructPat\n+| ConstBlockPat\n+\n+LiteralPat =\n+  Literal\n+\n+IdentPat =\n+  Attr* 'ref'? 'mut'? Name ('@' Pat)?\n+\n+WildcardPat =\n+  '_'\n+\n+RangePat =\n+  // 1..\n+  start:Pat op:('..' | '..=')\n+  // 1..2\n+  | start:Pat op:('..' | '..=') end:Pat\n+  // ..2\n+  | op:('..' | '..=') end:Pat\n+\n+RefPat =\n+  '&' 'mut'? Pat\n+\n+RecordPat =\n+  Path RecordPatFieldList\n+\n+RecordPatFieldList =\n+  '{'\n+    fields:(RecordPatField (',' RecordPatField)* ','?)?\n+    RestPat?\n+  '}'\n+\n+RecordPatField =\n+  Attr* (NameRef ':')? Pat\n+\n+TupleStructPat =\n+   Path '(' fields:(Pat (',' Pat)* ','?)? ')'\n+\n+TuplePat =\n+   '(' fields:(Pat (',' Pat)* ','?)? ')'\n+\n+ParenPat =\n+  '(' Pat ')'\n+\n+SlicePat =\n+  '[' (Pat (',' Pat)* ','?)? ']'\n+\n+PathPat =\n+  Path\n+\n+OrPat =\n+  (Pat ('|' Pat)* '|'?)\n+\n+BoxPat =\n+  'box' Pat\n+\n+RestPat =\n+  Attr* '..'\n+\n+MacroPat =\n+  MacroCall\n+\n+ConstBlockPat =\n+  'const' BlockExpr"}, {"sha": "c2ed3eab0a541e1834b05a3781e8fb553d50bf26", "filename": "crates/syntax/src/tests/sourcegen_ast.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b337a49d21b6ab04c0aa06834523de275a033ca9/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b337a49d21b6ab04c0aa06834523de275a033ca9/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs?ref=b337a49d21b6ab04c0aa06834523de275a033ca9", "patch": "@@ -11,7 +11,7 @@ use std::{\n use itertools::Itertools;\n use proc_macro2::{Punct, Spacing};\n use quote::{format_ident, quote};\n-use ungrammar::{rust_grammar, Grammar, Rule};\n+use ungrammar::{Grammar, Rule};\n \n use crate::tests::ast_src::{\n     AstEnumSrc, AstNodeSrc, AstSrc, Cardinality, Field, KindsSrc, KINDS_SRC,\n@@ -24,7 +24,8 @@ fn sourcegen_ast() {\n         sourcegen::project_root().join(\"crates/parser/src/syntax_kind/generated.rs\");\n     sourcegen::ensure_file_contents(syntax_kinds_file.as_path(), &syntax_kinds);\n \n-    let grammar = rust_grammar();\n+    let grammar =\n+        include_str!(concat!(env!(\"CARGO_MANIFEST_DIR\"), \"/rust.ungram\")).parse().unwrap();\n     let ast = lower(&grammar);\n \n     let ast_tokens = generate_tokens(&ast);"}]}