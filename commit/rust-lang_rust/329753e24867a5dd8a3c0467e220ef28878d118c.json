{"sha": "329753e24867a5dd8a3c0467e220ef28878d118c", "node_id": "C_kwDOAAsO6NoAKDMyOTc1M2UyNDg2N2E1ZGQ4YTNjMDQ2N2UyMjBlZjI4ODc4ZDExOGM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-29T23:04:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-29T23:04:14Z"}, "message": "Rollup merge of #93414 - Amanieu:std_arch_detect, r=m-ou-se\n\nMove unstable is_{arch}_feature_detected! macros to std::arch\n\nThese macros are unstable, except for `is_x86_feature_detected` which is still exported from the crate root for backwards-compatibility.\n\nThis should unblock the stabilization of `is_aarch64_feature_detected`.\n\nr? ```@m-ou-se```", "tree": {"sha": "7061ebf7d0763bc8d813d2bde6b7eb2706a6c8f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7061ebf7d0763bc8d813d2bde6b7eb2706a6c8f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/329753e24867a5dd8a3c0467e220ef28878d118c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh9cfuCRBK7hj4Ov3rIwAA5DcIAJH0HHAh77DeAEFXvRDdMpPY\nq+aVQvN+e6WPJYA1PsvuKTHBPoECV9OwqR8qMpp6ctfbTJmo3vQ+llCeJGY3bBhG\nd2WGkti6eSEmX4ZtMyBvDSCm7f0OuxCmvcIgwMFT+V0Yq3cNETIrZGBJ5qxIYUWS\nzdmppDj2LHMVNkY9Hn5HtGNPCvxtdsr6e8OsyVreVqnJyK2nG1Q1393XWzBpa94J\nGeqXyg5tE6PGQhyOWpdGTPxRbAsZ0KoBIJyvDB2so4jJB1pNMWbS9O8fxr/WLpuM\nnpwO4+nmNaZdOnDkhAMKiMf4tR04hLnZUZ2uaiwZXysyhSAnIuppCEjkLw5qk+Q=\n=06sq\n-----END PGP SIGNATURE-----\n", "payload": "tree 7061ebf7d0763bc8d813d2bde6b7eb2706a6c8f4\nparent 0b2359baa7db45ff1588a60ec305c5aabcdbd7a0\nparent 9a814b8ba69257d01489c132e54b883de503802e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1643497454 +0100\ncommitter GitHub <noreply@github.com> 1643497454 +0100\n\nRollup merge of #93414 - Amanieu:std_arch_detect, r=m-ou-se\n\nMove unstable is_{arch}_feature_detected! macros to std::arch\n\nThese macros are unstable, except for `is_x86_feature_detected` which is still exported from the crate root for backwards-compatibility.\n\nThis should unblock the stabilization of `is_aarch64_feature_detected`.\n\nr? ```@m-ou-se```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/329753e24867a5dd8a3c0467e220ef28878d118c", "html_url": "https://github.com/rust-lang/rust/commit/329753e24867a5dd8a3c0467e220ef28878d118c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/329753e24867a5dd8a3c0467e220ef28878d118c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b2359baa7db45ff1588a60ec305c5aabcdbd7a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b2359baa7db45ff1588a60ec305c5aabcdbd7a0", "html_url": "https://github.com/rust-lang/rust/commit/0b2359baa7db45ff1588a60ec305c5aabcdbd7a0"}, {"sha": "9a814b8ba69257d01489c132e54b883de503802e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a814b8ba69257d01489c132e54b883de503802e", "html_url": "https://github.com/rust-lang/rust/commit/9a814b8ba69257d01489c132e54b883de503802e"}], "stats": {"total": 52, "additions": 32, "deletions": 20}, "files": [{"sha": "7c8cb5378a2ab2c6b429d7f9e2d620f1f6c5319e", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/329753e24867a5dd8a3c0467e220ef28878d118c/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/329753e24867a5dd8a3c0467e220ef28878d118c/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=329753e24867a5dd8a3c0467e220ef28878d118c", "patch": "@@ -403,13 +403,6 @@ pub use alloc_crate::string;\n pub use alloc_crate::vec;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::any;\n-#[stable(feature = \"simd_arch\", since = \"1.27.0\")]\n-// The `no_inline`-attribute is required to make the documentation of all\n-// targets available.\n-// See https://github.com/rust-lang/rust/pull/57808#issuecomment-457390549 for\n-// more information.\n-#[doc(no_inline)] // Note (#82861): required for correct documentation\n-pub use core::arch;\n #[stable(feature = \"core_array\", since = \"1.36.0\")]\n pub use core::array;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -527,6 +520,31 @@ pub mod task {\n     pub use alloc::task::*;\n }\n \n+#[doc = include_str!(\"../../stdarch/crates/core_arch/src/core_arch_docs.md\")]\n+#[stable(feature = \"simd_arch\", since = \"1.27.0\")]\n+pub mod arch {\n+    #[stable(feature = \"simd_arch\", since = \"1.27.0\")]\n+    // The `no_inline`-attribute is required to make the documentation of all\n+    // targets available.\n+    // See https://github.com/rust-lang/rust/pull/57808#issuecomment-457390549 for\n+    // more information.\n+    #[doc(no_inline)] // Note (#82861): required for correct documentation\n+    pub use core::arch::*;\n+\n+    #[stable(feature = \"simd_x86\", since = \"1.27.0\")]\n+    pub use std_detect::is_x86_feature_detected;\n+    #[unstable(feature = \"stdsimd\", issue = \"48556\")]\n+    pub use std_detect::{\n+        is_aarch64_feature_detected, is_arm_feature_detected, is_mips64_feature_detected,\n+        is_mips_feature_detected, is_powerpc64_feature_detected, is_powerpc_feature_detected,\n+        is_riscv_feature_detected,\n+    };\n+}\n+\n+// This was stabilized in the crate root so we have to keep it there.\n+#[stable(feature = \"simd_x86\", since = \"1.27.0\")]\n+pub use std_detect::is_x86_feature_detected;\n+\n // The runtime entry point and a few unstable public functions used by the\n // compiler\n #[macro_use]\n@@ -545,18 +563,6 @@ mod panicking;\n #[allow(dead_code, unused_attributes)]\n mod backtrace_rs;\n \n-#[stable(feature = \"simd_x86\", since = \"1.27.0\")]\n-pub use std_detect::is_x86_feature_detected;\n-#[doc(hidden)]\n-#[unstable(feature = \"stdsimd\", issue = \"48556\")]\n-pub use std_detect::*;\n-#[unstable(feature = \"stdsimd\", issue = \"48556\")]\n-pub use std_detect::{\n-    is_aarch64_feature_detected, is_arm_feature_detected, is_mips64_feature_detected,\n-    is_mips_feature_detected, is_powerpc64_feature_detected, is_powerpc_feature_detected,\n-    is_riscv_feature_detected,\n-};\n-\n // Re-export macros defined in libcore.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated, deprecated_in_future)]"}, {"sha": "14a9e3acca499e89ceaa3ca54e25702e855b0388", "filename": "library/std/tests/run-time-detect.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/329753e24867a5dd8a3c0467e220ef28878d118c/library%2Fstd%2Ftests%2Frun-time-detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/329753e24867a5dd8a3c0467e220ef28878d118c/library%2Fstd%2Ftests%2Frun-time-detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Ftests%2Frun-time-detect.rs?ref=329753e24867a5dd8a3c0467e220ef28878d118c", "patch": "@@ -14,6 +14,7 @@\n #[test]\n #[cfg(all(target_arch = \"arm\", any(target_os = \"linux\", target_os = \"android\")))]\n fn arm_linux() {\n+    use std::arch::is_arm_feature_detected;\n     println!(\"neon: {}\", is_arm_feature_detected!(\"neon\"));\n     println!(\"pmull: {}\", is_arm_feature_detected!(\"pmull\"));\n     println!(\"crypto: {}\", is_arm_feature_detected!(\"crypto\"));\n@@ -25,6 +26,7 @@ fn arm_linux() {\n #[test]\n #[cfg(all(target_arch = \"aarch64\", any(target_os = \"linux\", target_os = \"android\")))]\n fn aarch64_linux() {\n+    use std::arch::is_aarch64_feature_detected;\n     println!(\"neon: {}\", is_aarch64_feature_detected!(\"neon\"));\n     println!(\"asimd: {}\", is_aarch64_feature_detected!(\"asimd\"));\n     println!(\"pmull: {}\", is_aarch64_feature_detected!(\"pmull\"));\n@@ -71,6 +73,7 @@ fn aarch64_linux() {\n #[test]\n #[cfg(all(target_arch = \"powerpc\", target_os = \"linux\"))]\n fn powerpc_linux() {\n+    use std::arch::is_powerpc_feature_detected;\n     println!(\"altivec: {}\", is_powerpc_feature_detected!(\"altivec\"));\n     println!(\"vsx: {}\", is_powerpc_feature_detected!(\"vsx\"));\n     println!(\"power8: {}\", is_powerpc_feature_detected!(\"power8\"));\n@@ -79,6 +82,7 @@ fn powerpc_linux() {\n #[test]\n #[cfg(all(target_arch = \"powerpc64\", target_os = \"linux\"))]\n fn powerpc64_linux() {\n+    use std::arch::is_powerpc64_feature_detected;\n     println!(\"altivec: {}\", is_powerpc64_feature_detected!(\"altivec\"));\n     println!(\"vsx: {}\", is_powerpc64_feature_detected!(\"vsx\"));\n     println!(\"power8: {}\", is_powerpc64_feature_detected!(\"power8\"));\n@@ -87,6 +91,8 @@ fn powerpc64_linux() {\n #[test]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n fn x86_all() {\n+    use std::arch::is_x86_feature_detected;\n+\n     // the below is the set of features we can test at runtime, but don't actually\n     // use to gate anything and are thus not part of the X86_ALLOWED_FEATURES list\n "}, {"sha": "eaee02ffdf5d820729ccdf2f95fa08b08c7d24d2", "filename": "library/stdarch", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstdarch?ref=329753e24867a5dd8a3c0467e220ef28878d118c", "patch": "@@ -1 +1 @@\n-Subproject commit 11c98f6eb9c4ba48b2362ad4960343b312d056b8\n+Subproject commit eaee02ffdf5d820729ccdf2f95fa08b08c7d24d2"}]}