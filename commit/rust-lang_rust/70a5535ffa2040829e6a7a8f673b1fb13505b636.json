{"sha": "70a5535ffa2040829e6a7a8f673b1fb13505b636", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwYTU1MzVmZmEyMDQwODI5ZTZhN2E4ZjY3M2IxZmIxMzUwNWI2MzY=", "commit": {"author": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2018-01-14T18:18:09Z"}, "committer": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2018-01-14T18:18:09Z"}, "message": "Address some review comments", "tree": {"sha": "21fa02f01fcb8bd58a4944d41da32654d7b3eb3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21fa02f01fcb8bd58a4944d41da32654d7b3eb3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70a5535ffa2040829e6a7a8f673b1fb13505b636", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70a5535ffa2040829e6a7a8f673b1fb13505b636", "html_url": "https://github.com/rust-lang/rust/commit/70a5535ffa2040829e6a7a8f673b1fb13505b636", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70a5535ffa2040829e6a7a8f673b1fb13505b636/comments", "author": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "committer": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "360f2359d5c4d8a332182143c4aa350b0f2734df", "url": "https://api.github.com/repos/rust-lang/rust/commits/360f2359d5c4d8a332182143c4aa350b0f2734df", "html_url": "https://github.com/rust-lang/rust/commit/360f2359d5c4d8a332182143c4aa350b0f2734df"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "9661a6011bd86f849fe89caf6d7f918661597f90", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/70a5535ffa2040829e6a7a8f673b1fb13505b636/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a5535ffa2040829e6a7a8f673b1fb13505b636/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=70a5535ffa2040829e6a7a8f673b1fb13505b636", "patch": "@@ -1153,17 +1153,18 @@ fn lint_fold_any(cx: &LateContext, expr: &hir::Expr, fold_args: &[hir::Expr]) {\n         then {\n             let right_source = snippet(cx, right_expr.span, \"EXPR\");\n \n-            span_lint(\n+            span_lint_and_sugg(\n                 cx,\n                 FOLD_ANY,\n                 expr.span,\n                 // TODO: don't suggest .any(|x| f(x)) if we can suggest .any(f)\n-                &format!(\n-                    \".fold(false, |{f}, {s}| {f} || {r})) is more succinctly expressed as .any(|{s}| {r})\",\n-                    f = first_arg_ident,\n+                \"this `.fold` can more succintly be expressed as `.any`\",\n+                \"try\",\n+                format!(\n+                    \".any(|{s}| {r})\",\n                     s = second_arg_ident,\n                     r = right_source\n-                ),\n+                )\n             );\n         }\n     }"}, {"sha": "44ebc5aa60018e8eca84a9e0dd7f16069f1d2249", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/70a5535ffa2040829e6a7a8f673b1fb13505b636/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a5535ffa2040829e6a7a8f673b1fb13505b636/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=70a5535ffa2040829e6a7a8f673b1fb13505b636", "patch": "@@ -596,6 +596,20 @@ pub fn span_lint_and_then<'a, 'tcx: 'a, T: LintContext<'tcx>, F>(\n     db.docs_link(lint);\n }\n \n+/// Add a span lint with a suggestion on how to fix it.\n+///\n+/// These suggestions can be parsed by rustfix to allow it to automatically fix your code.\n+/// In the example below, `help` is `\"try\"` and `sugg` is the suggested replacement `\".any(|x| x > 2)\"`.\n+///\n+/// <pre>\n+/// error: This `.fold` can be more succinctly expressed as `.any`\n+/// --> $DIR/methods.rs:390:13\n+///     |\n+/// 390 |     let _ = (0..3).fold(false, |acc, x| acc || x > 2);\n+///     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.any(|x| x > 2)`\n+///     |\n+///     = note: `-D fold-any` implied by `-D warnings`\n+/// </pre>\n pub fn span_lint_and_sugg<'a, 'tcx: 'a, T: LintContext<'tcx>>(\n     cx: &'a T,\n     lint: &'static Lint,"}, {"sha": "8cffbf76924fab2f2a5af662dee4e0494151f142", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/70a5535ffa2040829e6a7a8f673b1fb13505b636/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70a5535ffa2040829e6a7a8f673b1fb13505b636/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=70a5535ffa2040829e6a7a8f673b1fb13505b636", "patch": "@@ -391,10 +391,15 @@ fn fold_any() {\n }\n \n /// Checks implementation of the `FOLD_ANY` lint\n-fn fold_any_ignore_initial_value_of_true() {\n+fn fold_any_ignores_initial_value_of_true() {\n     let _ = (0..3).fold(true, |acc, x| acc || x > 2);\n }\n \n+/// Checks implementation of the `FOLD_ANY` lint\n+fn fold_any_ignores_non_boolean_accumalator() {\n+    let _ = (0..3).fold(0, |acc, x| acc + if x > 2 { 1 } else { 0 });\n+}\n+\n #[allow(similar_names)]\n fn main() {\n     let opt = Some(0);"}, {"sha": "f1746354380ffef539e2e786e3dcf0ed6bd3334d", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70a5535ffa2040829e6a7a8f673b1fb13505b636/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70a5535ffa2040829e6a7a8f673b1fb13505b636/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=70a5535ffa2040829e6a7a8f673b1fb13505b636", "patch": "@@ -493,18 +493,18 @@ error: called `skip(x).next()` on an iterator. This is more succinctly expressed\n 382 |     let _ = &some_vec[..].iter().skip(3).next();\n     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: .fold(false, |acc, x| acc || x > 2)) is more succinctly expressed as .any(|x| x > 2)\n+error: this `.fold` can more succintly be expressed as `.any`\n    --> $DIR/methods.rs:390:13\n     |\n 390 |     let _ = (0..3).fold(false, |acc, x| acc || x > 2);\n-    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.any(|x| x > 2)`\n     |\n     = note: `-D fold-any` implied by `-D warnings`\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:401:13\n+   --> $DIR/methods.rs:406:13\n     |\n-401 |     let _ = opt.unwrap();\n+406 |     let _ = opt.unwrap();\n     |             ^^^^^^^^^^^^\n     |\n     = note: `-D option-unwrap-used` implied by `-D warnings`"}]}