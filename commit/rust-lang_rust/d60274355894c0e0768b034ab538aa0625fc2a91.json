{"sha": "d60274355894c0e0768b034ab538aa0625fc2a91", "node_id": "C_kwDOAAsO6NoAKGQ2MDI3NDM1NTg5NGMwZTA3NjhiMDM0YWI1MzhhYTA2MjVmYzJhOTE", "commit": {"author": {"name": "blyxyas", "email": "blyxyas@gmail.com", "date": "2023-04-03T13:15:43Z"}, "committer": {"name": "blyxyas", "email": "blyxyas@gmail.com", "date": "2023-04-03T13:16:18Z"}, "message": "only focus on `double_must_use` + Add `Result<(), ()>` test", "tree": {"sha": "777b9411e3e699ba2fc36f9ddd5971c82d1b0304", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/777b9411e3e699ba2fc36f9ddd5971c82d1b0304"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d60274355894c0e0768b034ab538aa0625fc2a91", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEM3aofraJSaf7CtgpTTgXC1ovwzQFAmQq0aUACgkQTTgXC1ov\nwzR1AQ//QKGNL9WxrAFr1hb8QOnd0deg2UdCqchfTPu4010eXWOkeiSQazCigDtB\nM1+LDMuMGKG/6asjiAVU5JkTmw1hrYs6l/b7MJJKBNU6KdJu5pFAnDXZVjy/dBH0\niETn9aFJfXbnqln5SoSIr69YKuh5ssn4Zx+hdenxiFm/5MHEnZKfpJD3/HrAOKhW\nHu9dZ74FEts+c0oBMprMp1jX3tTESIA3eRa5KKVdDrGeFZCG1H7Q3bOZu5A7cZyp\nRjwFGdqmpQEhghlpSGMgDO/wLzIZ9gklQTQeBv8zndlheL8/79n6iA/1hjHvfTuX\nhBmFpKsqpUJ9A6nqUdeTlFEIUtnH+9cab/QFwmGJTv3VJjUW9efzvg6EBjkyMf2/\nou2WJKOvbAtiAA9fZQkk/L7lzZl4Q/tWryV74W5iATYL6W4Yvm5L+219HA8Ywm/8\nL+PP96Dlbmo8//SYWRbG9N+ebcel2nvDXR5W4Dsxxo13DJ0si3v/rse/rS07O9Zg\nYXEROkDvZgVBxVzsvC4VOvgousLHixBQnZMfDSddaVctHK6flgdUD66m77uyYIKu\nRvIFTGF25UumLF+sWXTqwTIatBF4KfXC5EUsfV8Wcm6AP3iqthx2hdVNKq/GroTx\n6CEq+WsyaYPaYyT0VmKMMS6OBYJaIWVTPqEB520oXvMpcSij5Lo=\n=cPwm\n-----END PGP SIGNATURE-----", "payload": "tree 777b9411e3e699ba2fc36f9ddd5971c82d1b0304\nparent e2742a0ea24b4c596514021d0c94ff5a78ff0757\nauthor blyxyas <blyxyas@gmail.com> 1680527743 +0200\ncommitter blyxyas <blyxyas@gmail.com> 1680527778 +0200\n\nonly focus on `double_must_use` + Add `Result<(), ()>` test\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d60274355894c0e0768b034ab538aa0625fc2a91", "html_url": "https://github.com/rust-lang/rust/commit/d60274355894c0e0768b034ab538aa0625fc2a91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d60274355894c0e0768b034ab538aa0625fc2a91/comments", "author": {"login": "blyxyas", "id": 73757586, "node_id": "MDQ6VXNlcjczNzU3NTg2", "avatar_url": "https://avatars.githubusercontent.com/u/73757586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blyxyas", "html_url": "https://github.com/blyxyas", "followers_url": "https://api.github.com/users/blyxyas/followers", "following_url": "https://api.github.com/users/blyxyas/following{/other_user}", "gists_url": "https://api.github.com/users/blyxyas/gists{/gist_id}", "starred_url": "https://api.github.com/users/blyxyas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blyxyas/subscriptions", "organizations_url": "https://api.github.com/users/blyxyas/orgs", "repos_url": "https://api.github.com/users/blyxyas/repos", "events_url": "https://api.github.com/users/blyxyas/events{/privacy}", "received_events_url": "https://api.github.com/users/blyxyas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "blyxyas", "id": 73757586, "node_id": "MDQ6VXNlcjczNzU3NTg2", "avatar_url": "https://avatars.githubusercontent.com/u/73757586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blyxyas", "html_url": "https://github.com/blyxyas", "followers_url": "https://api.github.com/users/blyxyas/followers", "following_url": "https://api.github.com/users/blyxyas/following{/other_user}", "gists_url": "https://api.github.com/users/blyxyas/gists{/gist_id}", "starred_url": "https://api.github.com/users/blyxyas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blyxyas/subscriptions", "organizations_url": "https://api.github.com/users/blyxyas/orgs", "repos_url": "https://api.github.com/users/blyxyas/repos", "events_url": "https://api.github.com/users/blyxyas/events{/privacy}", "received_events_url": "https://api.github.com/users/blyxyas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2742a0ea24b4c596514021d0c94ff5a78ff0757", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2742a0ea24b4c596514021d0c94ff5a78ff0757", "html_url": "https://github.com/rust-lang/rust/commit/e2742a0ea24b4c596514021d0c94ff5a78ff0757"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "ab68d7a3726fab0c0a69a17bb897cb90453bdbd3", "filename": "clippy_lints/src/functions/must_use.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d60274355894c0e0768b034ab538aa0625fc2a91/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d60274355894c0e0768b034ab538aa0625fc2a91/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs?ref=d60274355894c0e0768b034ab538aa0625fc2a91", "patch": "@@ -1,3 +1,4 @@\n+use hir::FnSig;\n use rustc_ast::ast::Attribute;\n use rustc_errors::Applicability;\n use rustc_hir::def_id::DefIdSet;\n@@ -23,12 +24,11 @@ use super::{DOUBLE_MUST_USE, MUST_USE_CANDIDATE, MUST_USE_UNIT};\n pub(super) fn check_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n     let attrs = cx.tcx.hir().attrs(item.hir_id());\n     let attr = cx.tcx.get_attr(item.owner_id, sym::must_use);\n-    if let hir::ItemKind::Fn(ref sig, _generics, ref body_id) = item.kind && !sig.header.is_async() /* (#10486) */ {\n-\n+    if let hir::ItemKind::Fn(ref sig, _generics, ref body_id) = item.kind {\n         let is_public = cx.effective_visibilities.is_exported(item.owner_id.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n         if let Some(attr) = attr {\n-            check_needless_must_use(cx, sig.decl, item.owner_id, item.span, fn_header_span, attr);\n+            check_needless_must_use(cx, sig.decl, item.owner_id, item.span, fn_header_span, attr, sig);\n         } else if is_public && !is_proc_macro(attrs) && !attrs.iter().any(|a| a.has_name(sym::no_mangle)) {\n             check_must_use_candidate(\n                 cx,\n@@ -44,13 +44,13 @@ pub(super) fn check_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>\n }\n \n pub(super) fn check_impl_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'_>) {\n-    if let hir::ImplItemKind::Fn(ref sig, ref body_id) = item.kind && !sig.header.is_async() /* (#10486) */ {\n+    if let hir::ImplItemKind::Fn(ref sig, ref body_id) = item.kind {\n         let is_public = cx.effective_visibilities.is_exported(item.owner_id.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n         let attrs = cx.tcx.hir().attrs(item.hir_id());\n         let attr = cx.tcx.get_attr(item.owner_id, sym::must_use);\n         if let Some(attr) = attr {\n-            check_needless_must_use(cx, sig.decl, item.owner_id, item.span, fn_header_span, attr);\n+            check_needless_must_use(cx, sig.decl, item.owner_id, item.span, fn_header_span, attr, sig);\n         } else if is_public && !is_proc_macro(attrs) && trait_ref_of_method(cx, item.owner_id.def_id).is_none() {\n             check_must_use_candidate(\n                 cx,\n@@ -66,14 +66,14 @@ pub(super) fn check_impl_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Imp\n }\n \n pub(super) fn check_trait_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'_>) {\n-    if let hir::TraitItemKind::Fn(ref sig, ref eid) = item.kind && !sig.header.is_async() /* (#10486) */ {\n+    if let hir::TraitItemKind::Fn(ref sig, ref eid) = item.kind {\n         let is_public = cx.effective_visibilities.is_exported(item.owner_id.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n \n         let attrs = cx.tcx.hir().attrs(item.hir_id());\n         let attr = cx.tcx.get_attr(item.owner_id, sym::must_use);\n         if let Some(attr) = attr {\n-            check_needless_must_use(cx, sig.decl, item.owner_id, item.span, fn_header_span, attr);\n+            check_needless_must_use(cx, sig.decl, item.owner_id, item.span, fn_header_span, attr, sig);\n         } else if let hir::TraitFn::Provided(eid) = *eid {\n             let body = cx.tcx.hir().body(eid);\n             if attr.is_none() && is_public && !is_proc_macro(attrs) {\n@@ -98,6 +98,7 @@ fn check_needless_must_use(\n     item_span: Span,\n     fn_header_span: Span,\n     attr: &Attribute,\n+    sig: &FnSig<'_>,\n ) {\n     if in_external_macro(cx.sess(), item_span) {\n         return;\n@@ -112,7 +113,7 @@ fn check_needless_must_use(\n                 diag.span_suggestion(attr.span, \"remove the attribute\", \"\", Applicability::MachineApplicable);\n             },\n         );\n-    } else if attr.value_str().is_none() && is_must_use_ty(cx, return_ty(cx, item_id)) {\n+    } else if attr.value_str().is_none() && is_must_use_ty(cx, return_ty(cx, item_id)) && !sig.header.is_async() {\n         span_lint_and_help(\n             cx,\n             DOUBLE_MUST_USE,"}, {"sha": "26a387b3cf04972f1fe654993930d9db0e6b4d66", "filename": "tests/ui/double_must_use.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d60274355894c0e0768b034ab538aa0625fc2a91/tests%2Fui%2Fdouble_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d60274355894c0e0768b034ab538aa0625fc2a91/tests%2Fui%2Fdouble_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_must_use.rs?ref=d60274355894c0e0768b034ab538aa0625fc2a91", "patch": "@@ -27,6 +27,11 @@ async fn async_must_use() -> usize {\n     unimplemented!();\n }\n \n+#[must_use]\n+async fn async_must_use_result() -> Result<(), ()> {\n+    Ok(())\n+}\n+\n fn main() {\n     must_use_result();\n     must_use_tuple();"}]}