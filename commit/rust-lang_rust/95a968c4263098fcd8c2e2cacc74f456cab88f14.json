{"sha": "95a968c4263098fcd8c2e2cacc74f456cab88f14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1YTk2OGM0MjYzMDk4ZmNkOGMyZTJjYWNjNzRmNDU2Y2FiODhmMTQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas@schievink.net", "date": "2016-05-13T21:36:50Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas@schievink.net", "date": "2016-05-13T21:36:50Z"}, "message": "Much smaller scope tree printing", "tree": {"sha": "5079b03159eabe8a1abfdb08a3ec8783c0b9f774", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5079b03159eabe8a1abfdb08a3ec8783c0b9f774"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95a968c4263098fcd8c2e2cacc74f456cab88f14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95a968c4263098fcd8c2e2cacc74f456cab88f14", "html_url": "https://github.com/rust-lang/rust/commit/95a968c4263098fcd8c2e2cacc74f456cab88f14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95a968c4263098fcd8c2e2cacc74f456cab88f14/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96b178b131c63b38aa760381a4a0359fd8a17ed1", "url": "https://api.github.com/repos/rust-lang/rust/commits/96b178b131c63b38aa760381a4a0359fd8a17ed1", "html_url": "https://github.com/rust-lang/rust/commit/96b178b131c63b38aa760381a4a0359fd8a17ed1"}], "stats": {"total": 43, "additions": 34, "deletions": 9}, "files": [{"sha": "c6455e1c1cf16f01a577c3a806075587cebdd4ea", "filename": "src/librustc_mir/pretty.rs", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/95a968c4263098fcd8c2e2cacc74f456cab88f14/src%2Flibrustc_mir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95a968c4263098fcd8c2e2cacc74f456cab88f14/src%2Flibrustc_mir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fpretty.rs?ref=95a968c4263098fcd8c2e2cacc74f456cab88f14", "patch": "@@ -144,7 +144,8 @@ pub fn write_mir_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n \n     writeln!(w, \"{}scope tree:\", INDENT)?;\n-    write_scope_tree(tcx, mir, auxiliary, &scope_tree, w, None, 1)?;\n+    write_scope_tree(tcx, mir, auxiliary, &scope_tree, w, None, 1, false)?;\n+    writeln!(w, \"\")?;\n \n     writeln!(w, \"}}\")?;\n     Ok(())\n@@ -207,10 +208,27 @@ fn write_scope_tree(tcx: TyCtxt,\n                     scope_tree: &FnvHashMap<Option<ScopeId>, Vec<ScopeId>>,\n                     w: &mut Write,\n                     parent: Option<ScopeId>,\n-                    depth: usize)\n+                    depth: usize,\n+                    same_line: bool)\n                     -> io::Result<()> {\n-    for &child in scope_tree.get(&parent).unwrap_or(&vec![]) {\n-        let indent = depth * INDENT.len();\n+    let indent = if same_line {\n+        0\n+    } else {\n+        depth * INDENT.len()\n+    };\n+\n+    let children = match scope_tree.get(&parent) {\n+        Some(childs) => childs,\n+        None => return Ok(()),\n+    };\n+\n+    for (index, &child) in children.iter().enumerate() {\n+        if index == 0 && same_line {\n+            // We know we're going to output a scope, so prefix it with a space to separate it from\n+            // the previous scopes on this line\n+            write!(w, \" \")?;\n+        }\n+\n         let data = &mir.scopes[child];\n         assert_eq!(data.parent_scope, parent);\n         write!(w, \"{0:1$}{2}\", \"\", indent, child.index())?;\n@@ -223,15 +241,22 @@ fn write_scope_tree(tcx: TyCtxt,\n             writeln!(w, \"{0:1$}Extent: {2:?}\", \"\", indent, data)?;\n         }\n \n-        if scope_tree.get(&Some(child)).map(Vec::is_empty).unwrap_or(true) {\n-            // No child scopes, skip the braces\n-            writeln!(w, \"\")?;\n+        let child_count = scope_tree.get(&Some(child)).map(Vec::len).unwrap_or(0);\n+        if child_count < 2 {\n+            // Skip the braces when there's no or only a single subscope\n+            write_scope_tree(tcx, mir, auxiliary, scope_tree, w,\n+                             Some(child), depth, true)?;\n         } else {\n+            // 2 or more child scopes? Put them in braces and on new lines.\n             writeln!(w, \" {{\")?;\n             write_scope_tree(tcx, mir, auxiliary, scope_tree, w,\n-                             Some(child), depth + 1)?;\n+                             Some(child), depth + 1, false)?;\n \n-            writeln!(w, \"{0:1$}}}\", \"\", indent - INDENT.len())?;\n+            write!(w, \"\\n{0:1$}}}\", \"\", depth * INDENT.len())?;\n+        }\n+\n+        if !same_line && index + 1 < children.len() {\n+            writeln!(w, \"\")?;\n         }\n     }\n "}]}