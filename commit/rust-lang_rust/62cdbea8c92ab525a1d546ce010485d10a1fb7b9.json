{"sha": "62cdbea8c92ab525a1d546ce010485d10a1fb7b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyY2RiZWE4YzkyYWI1MjVhMWQ1NDZjZTAxMDQ4NWQxMGExZmI3Yjk=", "commit": {"author": {"name": "Scott A Carr", "email": "s.carr1024@gmail.com", "date": "2016-07-28T00:46:54Z"}, "committer": {"name": "Scott A Carr", "email": "s.carr1024@gmail.com", "date": "2016-08-01T22:57:10Z"}, "message": "deaggregate structs to enable further optimization", "tree": {"sha": "2ea416b5daaf986705d907fc757117692417edd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ea416b5daaf986705d907fc757117692417edd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62cdbea8c92ab525a1d546ce010485d10a1fb7b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62cdbea8c92ab525a1d546ce010485d10a1fb7b9", "html_url": "https://github.com/rust-lang/rust/commit/62cdbea8c92ab525a1d546ce010485d10a1fb7b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62cdbea8c92ab525a1d546ce010485d10a1fb7b9/comments", "author": {"login": "scottcarr", "id": 472477, "node_id": "MDQ6VXNlcjQ3MjQ3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/472477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottcarr", "html_url": "https://github.com/scottcarr", "followers_url": "https://api.github.com/users/scottcarr/followers", "following_url": "https://api.github.com/users/scottcarr/following{/other_user}", "gists_url": "https://api.github.com/users/scottcarr/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottcarr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottcarr/subscriptions", "organizations_url": "https://api.github.com/users/scottcarr/orgs", "repos_url": "https://api.github.com/users/scottcarr/repos", "events_url": "https://api.github.com/users/scottcarr/events{/privacy}", "received_events_url": "https://api.github.com/users/scottcarr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottcarr", "id": 472477, "node_id": "MDQ6VXNlcjQ3MjQ3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/472477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottcarr", "html_url": "https://github.com/scottcarr", "followers_url": "https://api.github.com/users/scottcarr/followers", "following_url": "https://api.github.com/users/scottcarr/following{/other_user}", "gists_url": "https://api.github.com/users/scottcarr/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottcarr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottcarr/subscriptions", "organizations_url": "https://api.github.com/users/scottcarr/orgs", "repos_url": "https://api.github.com/users/scottcarr/repos", "events_url": "https://api.github.com/users/scottcarr/events{/privacy}", "received_events_url": "https://api.github.com/users/scottcarr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29abe5ec717bd58b175100cfabe833c1500c8498", "url": "https://api.github.com/repos/rust-lang/rust/commits/29abe5ec717bd58b175100cfabe833c1500c8498", "html_url": "https://github.com/rust-lang/rust/commit/29abe5ec717bd58b175100cfabe833c1500c8498"}], "stats": {"total": 114, "additions": 114, "deletions": 0}, "files": [{"sha": "657fc6c2c5b15081eefa66d27bbab4568d3da285", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62cdbea8c92ab525a1d546ce010485d10a1fb7b9/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62cdbea8c92ab525a1d546ce010485d10a1fb7b9/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=62cdbea8c92ab525a1d546ce010485d10a1fb7b9", "patch": "@@ -994,6 +994,8 @@ pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         passes.push_pass(box mir::transform::no_landing_pads::NoLandingPads);\n         passes.push_pass(box mir::transform::simplify_cfg::SimplifyCfg::new(\"elaborate-drops\"));\n \n+        passes.push_pass(box mir::transform::deaggregator::Deaggregator);\n+\n         passes.push_pass(box mir::transform::add_call_guards::AddCallGuards);\n         passes.push_pass(box mir::transform::dump_mir::Marker(\"PreTrans\"));\n "}, {"sha": "b1c8a0994038ed63a96afc13b6cc9de023589214", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/62cdbea8c92ab525a1d546ce010485d10a1fb7b9/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62cdbea8c92ab525a1d546ce010485d10a1fb7b9/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=62cdbea8c92ab525a1d546ce010485d10a1fb7b9", "patch": "@@ -0,0 +1,111 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::ty::TyCtxt;\n+use rustc::mir::repr::*;\n+use rustc::mir::transform::{MirPass, MirSource, Pass};\n+use rustc_data_structures::indexed_vec::Idx;\n+use rustc::ty::VariantKind;\n+\n+pub struct Deaggregator;\n+\n+impl Pass for Deaggregator {}\n+\n+impl<'tcx> MirPass<'tcx> for Deaggregator {\n+    fn run_pass<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                    source: MirSource, mir: &mut Mir<'tcx>) {\n+        let node_id = source.item_id();\n+        let node_path = tcx.item_path_str(tcx.map.local_def_id(node_id));\n+        debug!(\"running on: {:?}\", node_path);\n+        // we only run when mir_opt_level > 1\n+        match tcx.sess.opts.debugging_opts.mir_opt_level {\n+            Some(0) |\n+            Some(1) |\n+            None => { return; },\n+            _ => {}\n+        };\n+        if let MirSource::Fn(_) = source {} else { return; }\n+\n+        let mut curr: usize = 0;\n+        for bb in mir.basic_blocks_mut() {\n+            while let Some(idx) = get_aggregate_statement(curr, &bb.statements) {\n+                // do the replacement\n+                debug!(\"removing statement {:?}\", idx);\n+                let src_info = bb.statements[idx].source_info;\n+                let mut suffix_stmts = bb.statements.split_off(idx);\n+                let orig_stmt = suffix_stmts.remove(0);\n+                let StatementKind::Assign(ref lhs, ref rhs) = orig_stmt.kind;\n+                if let &Rvalue::Aggregate(ref agg_kind, ref operands) = rhs {\n+                    if let &AggregateKind::Adt(adt_def, variant, substs) = agg_kind {\n+                        let n = bb.statements.len();\n+                        bb.statements.reserve(n + operands.len() + suffix_stmts.len());\n+                        for (i, op) in operands.iter().enumerate() {\n+                            let ref variant_def = adt_def.variants[variant];\n+                            let ty = variant_def.fields[variant].ty(tcx, substs);\n+                            let rhs = Rvalue::Use(op.clone());\n+\n+                            // since we don't handle enums, we don't need a cast\n+                            let lhs_cast = lhs.clone();\n+\n+                            // if we handled enums:\n+                            // let lhs_cast = if adt_def.variants.len() > 1 {\n+                            //     Lvalue::Projection(Box::new(LvalueProjection {\n+                            //         base: ai.lhs.clone(),\n+                            //         elem: ProjectionElem::Downcast(ai.adt_def, ai.variant),\n+                            //     }))\n+                            // } else {\n+                            //     lhs_cast\n+                            // };\n+\n+                            let lhs_proj = Lvalue::Projection(Box::new(LvalueProjection {\n+                                base: lhs_cast,\n+                                elem: ProjectionElem::Field(Field::new(i), ty),\n+                            }));\n+                            let new_statement = Statement {\n+                                source_info: src_info,\n+                                kind: StatementKind::Assign(lhs_proj, rhs),\n+                            };\n+                            debug!(\"inserting: {:?} @ {:?}\", new_statement, idx + i);\n+                            bb.statements.push(new_statement);\n+                        }\n+                        curr = bb.statements.len();\n+                        bb.statements.extend(suffix_stmts);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn get_aggregate_statement<'a, 'tcx, 'b>(curr: usize,\n+                                         statements: &Vec<Statement<'tcx>>)\n+                                         -> Option<usize> {\n+    for i in curr..statements.len() {\n+        let ref statement = statements[i];\n+        let StatementKind::Assign(_, ref rhs) = statement.kind;\n+        if let &Rvalue::Aggregate(ref kind, ref operands) = rhs {\n+            if let &AggregateKind::Adt(adt_def, variant, _) = kind {\n+                if operands.len() > 0 { // don't deaggregate ()\n+                    if adt_def.variants.len() > 1 {\n+                        // only deaggrate structs for now\n+                        continue;\n+                    }\n+                    debug!(\"getting variant {:?}\", variant);\n+                    debug!(\"for adt_def {:?}\", adt_def);\n+                    let variant_def = &adt_def.variants[variant];\n+                    if variant_def.kind == VariantKind::Struct {\n+                        return Some(i);\n+                    }\n+                }\n+            }\n+        }\n+    };\n+    None\n+}"}, {"sha": "c3485b8256da1fa0c8b1178309f5b978faf9f615", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62cdbea8c92ab525a1d546ce010485d10a1fb7b9/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62cdbea8c92ab525a1d546ce010485d10a1fb7b9/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=62cdbea8c92ab525a1d546ce010485d10a1fb7b9", "patch": "@@ -17,3 +17,4 @@ pub mod add_call_guards;\n pub mod promote_consts;\n pub mod qualify_consts;\n pub mod dump_mir;\n+pub mod deaggregator;"}]}