{"sha": "bc0eabd7a7585a3d1d8bfd314a72df923a85c623", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMGVhYmQ3YTc1ODVhM2QxZDhiZmQzMTRhNzJkZjkyM2E4NWM2MjM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-09-14T21:51:46Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-10-04T20:53:51Z"}, "message": "Remove some unused methods from metadata\n\nAddress comments + Fix rebase", "tree": {"sha": "e418a044884bc64873823924620448f53a9b9904", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e418a044884bc64873823924620448f53a9b9904"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc0eabd7a7585a3d1d8bfd314a72df923a85c623", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc0eabd7a7585a3d1d8bfd314a72df923a85c623", "html_url": "https://github.com/rust-lang/rust/commit/bc0eabd7a7585a3d1d8bfd314a72df923a85c623", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc0eabd7a7585a3d1d8bfd314a72df923a85c623/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd291ce21a568c613774bb171e6f2df915747a29", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd291ce21a568c613774bb171e6f2df915747a29", "html_url": "https://github.com/rust-lang/rust/commit/bd291ce21a568c613774bb171e6f2df915747a29"}], "stats": {"total": 40, "additions": 14, "deletions": 26}, "files": [{"sha": "dfd6256c35773ccc1227a5e2ab35ac443e488b04", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bc0eabd7a7585a3d1d8bfd314a72df923a85c623/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0eabd7a7585a3d1d8bfd314a72df923a85c623/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=bc0eabd7a7585a3d1d8bfd314a72df923a85c623", "patch": "@@ -201,7 +201,6 @@ pub trait CrateStore<'tcx> {\n                              -> Option<DefIndex>;\n     fn def_key(&self, def: DefId) -> hir_map::DefKey;\n     fn relative_def_path(&self, def: DefId) -> Option<hir_map::DefPath>;\n-    fn struct_ctor_def_id(&self, struct_def_id: DefId) -> Option<DefId>;\n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name>;\n     fn item_children(&self, did: DefId) -> Vec<def::Export>;\n \n@@ -377,8 +376,6 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     fn relative_def_path(&self, def: DefId) -> Option<hir_map::DefPath> {\n         bug!(\"relative_def_path\")\n     }\n-    fn struct_ctor_def_id(&self, struct_def_id: DefId) -> Option<DefId>\n-        { bug!(\"struct_ctor_def_id\") }\n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name> { bug!(\"struct_field_names\") }\n     fn item_children(&self, did: DefId) -> Vec<def::Export> { bug!(\"item_children\") }\n "}, {"sha": "54664b9c04046effbc4b1d197e9be680435598d6", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc0eabd7a7585a3d1d8bfd314a72df923a85c623/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0eabd7a7585a3d1d8bfd314a72df923a85c623/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=bc0eabd7a7585a3d1d8bfd314a72df923a85c623", "patch": "@@ -342,12 +342,6 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         self.get_crate_data(def.krate).def_path(def.index)\n     }\n \n-    fn struct_ctor_def_id(&self, struct_def_id: DefId) -> Option<DefId>\n-    {\n-        self.dep_graph.read(DepNode::MetaData(struct_def_id));\n-        self.get_crate_data(struct_def_id.krate).get_struct_ctor_def_id(struct_def_id.index)\n-    }\n-\n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name>\n     {\n         self.dep_graph.read(DepNode::MetaData(def));"}, {"sha": "198a6d256bcc325bdd914ab550fdd2fc04b671d2", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc0eabd7a7585a3d1d8bfd314a72df923a85c623/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0eabd7a7585a3d1d8bfd314a72df923a85c623/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=bc0eabd7a7585a3d1d8bfd314a72df923a85c623", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use rustc::ty::TyCtxt;\n-use rustc::hir::def::CtorKind;\n use rustc::mir::repr::*;\n use rustc::mir::transform::{MirPass, MirSource, Pass};\n use rustc_data_structures::indexed_vec::Idx;\n@@ -129,10 +128,7 @@ fn get_aggregate_statement_index<'a, 'tcx, 'b>(start: usize,\n         }\n         debug!(\"getting variant {:?}\", variant);\n         debug!(\"for adt_def {:?}\", adt_def);\n-        let variant_def = &adt_def.variants[variant];\n-        if variant_def.ctor_kind == CtorKind::Fictive {\n-            return Some(i);\n-        }\n+        return Some(i);\n     };\n     None\n }"}, {"sha": "321b814238cfdb0c605ce86570ea2db9c51ac571", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc0eabd7a7585a3d1d8bfd314a72df923a85c623/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0eabd7a7585a3d1d8bfd314a72df923a85c623/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=bc0eabd7a7585a3d1d8bfd314a72df923a85c623", "patch": "@@ -31,6 +31,7 @@ use std::rc::Rc;\n \n use syntax::ast::Name;\n use syntax::attr;\n+use syntax::parse::token;\n \n use syntax::ast::{self, Block, ForeignItem, ForeignItemKind, Item, ItemKind};\n use syntax::ast::{Mutability, StmtKind, TraitItem, TraitItemKind};"}, {"sha": "ac8a35f08b0d97646e8409ea7f75243aa743a299", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bc0eabd7a7585a3d1d8bfd314a72df923a85c623/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0eabd7a7585a3d1d8bfd314a72df923a85c623/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=bc0eabd7a7585a3d1d8bfd314a72df923a85c623", "patch": "@@ -451,27 +451,26 @@ pub fn all_traits<'a>(ccx: &'a CrateCtxt) -> AllTraits<'a> {\n         fn handle_external_def(ccx: &CrateCtxt,\n                                traits: &mut AllTraitsVec,\n                                external_mods: &mut FnvHashSet<DefId>,\n-                               def_id: DefId) {\n-            match ccx.tcx.sess.cstore.describe_def(def_id) {\n-                Some(Def::Trait(_)) => {\n+                               def: Def) {\n+            let def_id = def.def_id();\n+            match def {\n+                Def::Trait(..) => {\n                     traits.push(TraitInfo::new(def_id));\n                 }\n-                Some(Def::Mod(_)) => {\n+                Def::Mod(..) => {\n                     if !external_mods.insert(def_id) {\n                         return;\n                     }\n                     for child in ccx.tcx.sess.cstore.item_children(def_id) {\n-                        handle_external_def(ccx, traits, external_mods, child.def.def_id())\n+                        handle_external_def(ccx, traits, external_mods, child.def)\n                     }\n                 }\n                 _ => {}\n             }\n         }\n         for cnum in ccx.tcx.sess.cstore.crates() {\n-            handle_external_def(ccx, &mut traits, &mut external_mods, DefId {\n-                krate: cnum,\n-                index: CRATE_DEF_INDEX\n-            });\n+            let def_id = DefId { krate: cnum, index: CRATE_DEF_INDEX };\n+            handle_external_def(ccx, &mut traits, &mut external_mods, Def::Mod(def_id));\n         }\n \n         *ccx.all_traits.borrow_mut() = Some(traits);"}, {"sha": "6d2830c56192bb434b73485384b6a9681d8d7d8b", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bc0eabd7a7585a3d1d8bfd314a72df923a85c623/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc0eabd7a7585a3d1d8bfd314a72df923a85c623/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=bc0eabd7a7585a3d1d8bfd314a72df923a85c623", "patch": "@@ -66,11 +66,12 @@ impl<'a, 'b, 'tcx> LibEmbargoVisitor<'a, 'b, 'tcx> {\n \n     pub fn visit_mod(&mut self, def_id: DefId) {\n         for item in self.cstore.item_children(def_id) {\n-            self.visit_item(item.def.def_id());\n+            self.visit_item(item.def);\n         }\n     }\n \n-    fn visit_item(&mut self, def_id: DefId) {\n+    fn visit_item(&mut self, def: Def) {\n+        let def_id = def.def_id();\n         let vis = self.cstore.visibility(def_id);\n         let inherited_item_level = if vis == Visibility::Public {\n             self.prev_level\n@@ -80,7 +81,7 @@ impl<'a, 'b, 'tcx> LibEmbargoVisitor<'a, 'b, 'tcx> {\n \n         let item_level = self.update(def_id, inherited_item_level);\n \n-        if let Some(Def::Mod(_)) = self.cstore.describe_def(def_id) {\n+        if let Def::Mod(..) = def {\n             let orig_level = self.prev_level;\n \n             self.prev_level = item_level;"}]}