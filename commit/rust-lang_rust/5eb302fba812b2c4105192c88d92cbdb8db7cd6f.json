{"sha": "5eb302fba812b2c4105192c88d92cbdb8db7cd6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlYjMwMmZiYTgxMmIyYzQxMDUxOTJjODhkOTJjYmRiOGRiN2NkNmY=", "commit": {"author": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2017-09-19T13:14:43Z"}, "committer": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2017-09-30T02:34:46Z"}, "message": "always use resolve", "tree": {"sha": "3bb0ea1af9554171f2005783026d07924ac867ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bb0ea1af9554171f2005783026d07924ac867ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5eb302fba812b2c4105192c88d92cbdb8db7cd6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5eb302fba812b2c4105192c88d92cbdb8db7cd6f", "html_url": "https://github.com/rust-lang/rust/commit/5eb302fba812b2c4105192c88d92cbdb8db7cd6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5eb302fba812b2c4105192c88d92cbdb8db7cd6f/comments", "author": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bd09dee45c045307f6a1cd41498e362c5992fd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bd09dee45c045307f6a1cd41498e362c5992fd9", "html_url": "https://github.com/rust-lang/rust/commit/3bd09dee45c045307f6a1cd41498e362c5992fd9"}], "stats": {"total": 23, "additions": 4, "deletions": 19}, "files": [{"sha": "f8bdca519ce27e76b96f925a97356d4d23dfd83e", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5eb302fba812b2c4105192c88d92cbdb8db7cd6f/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb302fba812b2c4105192c88d92cbdb8db7cd6f/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=5eb302fba812b2c4105192c88d92cbdb8db7cd6f", "patch": "@@ -87,32 +87,17 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                 let terminator = bb_data.terminator();\n                 if let TerminatorKind::Call {\n                     func: Operand::Constant(ref f), .. } = terminator.kind {\n-                    if let ty::TyFnDef(callee_def_id, substs) = f.ty.sty {\n-                        match self.tcx.trait_of_item(callee_def_id) {\n-                            Some(_) => {\n-                                match Instance::new(callee_def_id, substs).resolve(self.tcx) {\n-                                    Some(instance) => {\n-                                        callsites.push_back(CallSite {\n-                                            callee: instance.def_id(),\n-                                            substs: instance.substs,\n-                                            bb,\n-                                            location: terminator.source_info\n-                                        });\n-                                    },\n-                                    None => {}\n-                                }\n-                            }\n-                            None => {\n+                        if let ty::TyFnDef(callee_def_id, substs) = f.ty.sty {\n+                            if let Some(instance) = Instance::new(callee_def_id, substs).resolve(self.tcx) {\n                                 callsites.push_back(CallSite {\n-                                    callee: callee_def_id,\n-                                    substs,\n+                                    callee: instance.def_id(),\n+                                    substs: instance.substs,\n                                     bb,\n                                     location: terminator.source_info\n                                 });\n                             }\n                         }\n                     }\n-                }\n             }\n         }\n "}]}