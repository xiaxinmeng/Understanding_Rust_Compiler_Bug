{"sha": "a72a929b19875eaa459b79c398b7fff234e8b6ad", "node_id": "C_kwDOAAsO6NoAKGE3MmE5MjliMTk4NzVlYWE0NTliNzljMzk4YjdmZmYyMzRlOGI2YWQ", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-04-06T21:04:15Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-04-06T21:06:27Z"}, "message": "Add test for FUTEX_WAIT_BITSET.", "tree": {"sha": "a8b003a11d6a6ba086960589952e072413bff791", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8b003a11d6a6ba086960589952e072413bff791"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a72a929b19875eaa459b79c398b7fff234e8b6ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a72a929b19875eaa459b79c398b7fff234e8b6ad", "html_url": "https://github.com/rust-lang/rust/commit/a72a929b19875eaa459b79c398b7fff234e8b6ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a72a929b19875eaa459b79c398b7fff234e8b6ad/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37cefa32d2badcb6eebd6851104108f1e02d3c3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/37cefa32d2badcb6eebd6851104108f1e02d3c3c", "html_url": "https://github.com/rust-lang/rust/commit/37cefa32d2badcb6eebd6851104108f1e02d3c3c"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "7ffe59e7a1bb417d738097060b19cde1960b7b41", "filename": "tests/run-pass/concurrency/linux-futex.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a72a929b19875eaa459b79c398b7fff234e8b6ad/tests%2Frun-pass%2Fconcurrency%2Flinux-futex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a72a929b19875eaa459b79c398b7fff234e8b6ad/tests%2Frun-pass%2Fconcurrency%2Flinux-futex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Flinux-futex.rs?ref=a72a929b19875eaa459b79c398b7fff234e8b6ad", "patch": "@@ -7,6 +7,7 @@\n #![feature(rustc_private)]\n extern crate libc;\n \n+use std::mem::MaybeUninit;\n use std::ptr;\n use std::thread;\n use std::time::{Duration, Instant};\n@@ -93,6 +94,42 @@ fn wait_timeout() {\n     assert!((200..1000).contains(&start.elapsed().as_millis()));\n }\n \n+fn wait_absolute_timeout() {\n+    let start = Instant::now();\n+\n+    // Get the current monotonic timestamp as timespec.\n+    let mut timeout = unsafe {\n+        let mut now: MaybeUninit<libc::timespec> = MaybeUninit::uninit();\n+        assert_eq!(libc::clock_gettime(libc::CLOCK_MONOTONIC, now.as_mut_ptr()), 0);\n+        now.assume_init()\n+    };\n+\n+    // Add 200ms.\n+    timeout.tv_nsec += 200_000_000;\n+    if timeout.tv_nsec > 1_000_000_000 {\n+        timeout.tv_nsec -= 1_000_000_000;\n+        timeout.tv_sec += 1;\n+    }\n+\n+    let futex: i32 = 123;\n+\n+    // Wait for 200ms from now, with nobody waking us up early.\n+    unsafe {\n+        assert_eq!(libc::syscall(\n+            libc::SYS_futex,\n+            &futex as *const i32,\n+            libc::FUTEX_WAIT_BITSET,\n+            123,\n+            &timeout,\n+            0,\n+            u32::MAX,\n+        ), -1);\n+        assert_eq!(*libc::__errno_location(), libc::ETIMEDOUT);\n+    }\n+\n+    assert!((200..1000).contains(&start.elapsed().as_millis()));\n+}\n+\n fn wait_wake() {\n     let start = Instant::now();\n \n@@ -128,5 +165,6 @@ fn main() {\n     wake_dangling();\n     wait_wrong_val();\n     wait_timeout();\n+    wait_absolute_timeout();\n     wait_wake();\n }"}]}