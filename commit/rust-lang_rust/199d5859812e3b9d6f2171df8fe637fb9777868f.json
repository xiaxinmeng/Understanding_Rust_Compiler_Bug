{"sha": "199d5859812e3b9d6f2171df8fe637fb9777868f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5OWQ1ODU5ODEyZTNiOWQ2ZjIxNzFkZjhmZTYzN2ZiOTc3Nzg2OGY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-10T13:42:08Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-10T18:24:43Z"}, "message": "lowering: extract lower_expr_let", "tree": {"sha": "94cbf569c045fe3f587efb6ee958015c565869fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94cbf569c045fe3f587efb6ee958015c565869fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/199d5859812e3b9d6f2171df8fe637fb9777868f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/199d5859812e3b9d6f2171df8fe637fb9777868f", "html_url": "https://github.com/rust-lang/rust/commit/199d5859812e3b9d6f2171df8fe637fb9777868f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/199d5859812e3b9d6f2171df8fe637fb9777868f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed1e943bc55764c67645e7648abeee3b52023774", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed1e943bc55764c67645e7648abeee3b52023774", "html_url": "https://github.com/rust-lang/rust/commit/ed1e943bc55764c67645e7648abeee3b52023774"}], "stats": {"total": 79, "additions": 45, "deletions": 34}, "files": [{"sha": "25a77f95a57931aa36a4d9e9f1e60b2961a4a43a", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 45, "deletions": 34, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/199d5859812e3b9d6f2171df8fe637fb9777868f/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/199d5859812e3b9d6f2171df8fe637fb9777868f/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=199d5859812e3b9d6f2171df8fe637fb9777868f", "patch": "@@ -67,40 +67,7 @@ impl LoweringContext<'_> {\n                 let ohs = P(self.lower_expr(ohs));\n                 hir::ExprKind::AddrOf(m, ohs)\n             }\n-            ExprKind::Let(ref pats, ref scrutinee) => {\n-                // If we got here, the `let` expression is not allowed.\n-                self.sess\n-                    .struct_span_err(e.span, \"`let` expressions are not supported here\")\n-                    .note(\"only supported directly in conditions of `if`- and `while`-expressions\")\n-                    .note(\"as well as when nested within `&&` and parenthesis in those conditions\")\n-                    .emit();\n-\n-                // For better recovery, we emit:\n-                // ```\n-                // match scrutinee { pats => true, _ => false }\n-                // ```\n-                // While this doesn't fully match the user's intent, it has key advantages:\n-                // 1. We can avoid using `abort_if_errors`.\n-                // 2. We can typeck both `pats` and `scrutinee`.\n-                // 3. `pats` is allowed to be refutable.\n-                // 4. The return type of the block is `bool` which seems like what the user wanted.\n-                let scrutinee = self.lower_expr(scrutinee);\n-                let then_arm = {\n-                    let pats = pats.iter().map(|pat| self.lower_pat(pat)).collect();\n-                    let expr = self.expr_bool(e.span, true);\n-                    self.arm(pats, P(expr))\n-                };\n-                let else_arm = {\n-                    let pats = hir_vec![self.pat_wild(e.span)];\n-                    let expr = self.expr_bool(e.span, false);\n-                    self.arm(pats, P(expr))\n-                };\n-                hir::ExprKind::Match(\n-                    P(scrutinee),\n-                    vec![then_arm, else_arm].into(),\n-                    hir::MatchSource::Normal,\n-                )\n-            }\n+            ExprKind::Let(ref pats, ref scrutinee) => self.lower_expr_let(e.span, pats, scrutinee),\n             ExprKind::If(ref cond, ref then, ref else_opt) => {\n                 self.lower_expr_if(e.span, cond, then, else_opt.as_deref())\n             }\n@@ -240,6 +207,50 @@ impl LoweringContext<'_> {\n         }\n     }\n \n+    /// Emit an error and lower `ast::ExprKind::Let(pats, scrutinee)` into:\n+    /// ```rust\n+    /// match scrutinee { pats => true, _ => false }\n+    /// ```\n+    fn lower_expr_let(\n+        &mut self,\n+        span: Span,\n+        pats: &[AstP<Pat>],\n+        scrutinee: &Expr\n+    ) -> hir::ExprKind {\n+        // If we got here, the `let` expression is not allowed.\n+        self.sess\n+            .struct_span_err(span, \"`let` expressions are not supported here\")\n+            .note(\"only supported directly in conditions of `if`- and `while`-expressions\")\n+            .note(\"as well as when nested within `&&` and parenthesis in those conditions\")\n+            .emit();\n+\n+        // For better recovery, we emit:\n+        // ```\n+        // match scrutinee { pats => true, _ => false }\n+        // ```\n+        // While this doesn't fully match the user's intent, it has key advantages:\n+        // 1. We can avoid using `abort_if_errors`.\n+        // 2. We can typeck both `pats` and `scrutinee`.\n+        // 3. `pats` is allowed to be refutable.\n+        // 4. The return type of the block is `bool` which seems like what the user wanted.\n+        let scrutinee = self.lower_expr(scrutinee);\n+        let then_arm = {\n+            let pats = pats.iter().map(|pat| self.lower_pat(pat)).collect();\n+            let expr = self.expr_bool(span, true);\n+            self.arm(pats, P(expr))\n+        };\n+        let else_arm = {\n+            let pats = hir_vec![self.pat_wild(span)];\n+            let expr = self.expr_bool(span, false);\n+            self.arm(pats, P(expr))\n+        };\n+        hir::ExprKind::Match(\n+            P(scrutinee),\n+            vec![then_arm, else_arm].into(),\n+            hir::MatchSource::Normal,\n+        )\n+    }\n+\n     fn lower_expr_if(\n         &mut self,\n         span: Span,"}]}