{"sha": "74f55996fe4b68e548e8652c025a19db7a24e047", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZjU1OTk2ZmU0YjY4ZTU0OGU4NjUyYzAyNWExOWRiN2EyNGUwNDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-22T14:36:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-22T14:36:21Z"}, "message": "Auto merge of #7120 - cherryblossom000:7106, r=Manishearth\n\n`single_component_path_imports`: ignore `pub(crate) use some_macro;`\n\nFixes #7106\n\n*Please write a short comment explaining your change (or \"none\" for internal only changes)*\n\nchangelog: Ignore exporting a macro within a crate using `pub(crate) use some_macro;` for [`single_component_path_imports`]", "tree": {"sha": "c3d8458e032242406faf8fb9aac078b8cfec0ff4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3d8458e032242406faf8fb9aac078b8cfec0ff4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74f55996fe4b68e548e8652c025a19db7a24e047", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74f55996fe4b68e548e8652c025a19db7a24e047", "html_url": "https://github.com/rust-lang/rust/commit/74f55996fe4b68e548e8652c025a19db7a24e047", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74f55996fe4b68e548e8652c025a19db7a24e047/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ab7acc890bd0af29387ae7cab7f1aae55abe16b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ab7acc890bd0af29387ae7cab7f1aae55abe16b", "html_url": "https://github.com/rust-lang/rust/commit/0ab7acc890bd0af29387ae7cab7f1aae55abe16b"}, {"sha": "b48699e4cfd8af15669227049f3c6056d4084aba", "url": "https://api.github.com/repos/rust-lang/rust/commits/b48699e4cfd8af15669227049f3c6056d4084aba", "html_url": "https://github.com/rust-lang/rust/commit/b48699e4cfd8af15669227049f3c6056d4084aba"}], "stats": {"total": 88, "additions": 82, "deletions": 6}, "files": [{"sha": "a45bb1023899dacd3f04d8883ef1b04d3f7e4497", "filename": "clippy_lints/src/single_component_path_imports.rs", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/74f55996fe4b68e548e8652c025a19db7a24e047/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74f55996fe4b68e548e8652c025a19db7a24e047/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs?ref=74f55996fe4b68e548e8652c025a19db7a24e047", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n use clippy_utils::in_macro;\n-use rustc_ast::{ptr::P, Crate, Item, ItemKind, ModKind, UseTreeKind};\n+use rustc_ast::{ptr::P, Crate, Item, ItemKind, MacroDef, ModKind, UseTreeKind, VisibilityKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -60,8 +60,21 @@ fn check_mod(cx: &EarlyContext<'_>, items: &[P<Item>]) {\n     // ```\n     let mut single_use_usages = Vec::new();\n \n+    // keep track of macros defined in the module as we don't want it to trigger on this (#7106)\n+    // ```rust,ignore\n+    // macro_rules! foo { () => {} };\n+    // pub(crate) use foo;\n+    // ```\n+    let mut macros = Vec::new();\n+\n     for item in items {\n-        track_uses(cx, &item, &mut imports_reused_with_self, &mut single_use_usages);\n+        track_uses(\n+            cx,\n+            &item,\n+            &mut imports_reused_with_self,\n+            &mut single_use_usages,\n+            &mut macros,\n+        );\n     }\n \n     for single_use in &single_use_usages {\n@@ -96,6 +109,7 @@ fn track_uses(\n     item: &Item,\n     imports_reused_with_self: &mut Vec<Symbol>,\n     single_use_usages: &mut Vec<(Symbol, Span, bool)>,\n+    macros: &mut Vec<Symbol>,\n ) {\n     if in_macro(item.span) || item.vis.kind.is_pub() {\n         return;\n@@ -105,14 +119,22 @@ fn track_uses(\n         ItemKind::Mod(_, ModKind::Loaded(ref items, ..)) => {\n             check_mod(cx, &items);\n         },\n+        ItemKind::MacroDef(MacroDef { macro_rules: true, .. }) => {\n+            macros.push(item.ident.name);\n+        },\n         ItemKind::Use(use_tree) => {\n             let segments = &use_tree.prefix.segments;\n \n+            let should_report =\n+                |name: &Symbol| !macros.contains(name) || matches!(item.vis.kind, VisibilityKind::Inherited);\n+\n             // keep track of `use some_module;` usages\n             if segments.len() == 1 {\n                 if let UseTreeKind::Simple(None, _, _) = use_tree.kind {\n-                    let ident = &segments[0].ident;\n-                    single_use_usages.push((ident.name, item.span, true));\n+                    let name = segments[0].ident.name;\n+                    if should_report(&name) {\n+                        single_use_usages.push((name, item.span, true));\n+                    }\n                 }\n                 return;\n             }\n@@ -124,8 +146,10 @@ fn track_uses(\n                         let segments = &tree.0.prefix.segments;\n                         if segments.len() == 1 {\n                             if let UseTreeKind::Simple(None, _, _) = tree.0.kind {\n-                                let ident = &segments[0].ident;\n-                                single_use_usages.push((ident.name, tree.0.span, false));\n+                                let name = segments[0].ident.name;\n+                                if should_report(&name) {\n+                                    single_use_usages.push((name, tree.0.span, false));\n+                                }\n                             }\n                         }\n                     }"}, {"sha": "05863f9a2bf488c06722209622ceae63cce12de7", "filename": "tests/ui/single_component_path_imports_macro.fixed", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/74f55996fe4b68e548e8652c025a19db7a24e047/tests%2Fui%2Fsingle_component_path_imports_macro.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/74f55996fe4b68e548e8652c025a19db7a24e047/tests%2Fui%2Fsingle_component_path_imports_macro.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports_macro.fixed?ref=74f55996fe4b68e548e8652c025a19db7a24e047", "patch": "@@ -0,0 +1,21 @@\n+// run-rustfix\n+// edition:2018\n+#![warn(clippy::single_component_path_imports)]\n+#![allow(unused_imports)]\n+\n+// #7106: use statements exporting a macro within a crate should not trigger lint\n+\n+macro_rules! m1 {\n+    () => {};\n+}\n+pub(crate) use m1; // ok\n+\n+macro_rules! m2 {\n+    () => {};\n+}\n+ // fail\n+\n+fn main() {\n+    m1!();\n+    m2!();\n+}"}, {"sha": "633deea348b81d415778fc372cae9a720c5c5ffc", "filename": "tests/ui/single_component_path_imports_macro.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/74f55996fe4b68e548e8652c025a19db7a24e047/tests%2Fui%2Fsingle_component_path_imports_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74f55996fe4b68e548e8652c025a19db7a24e047/tests%2Fui%2Fsingle_component_path_imports_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports_macro.rs?ref=74f55996fe4b68e548e8652c025a19db7a24e047", "patch": "@@ -0,0 +1,21 @@\n+// run-rustfix\n+// edition:2018\n+#![warn(clippy::single_component_path_imports)]\n+#![allow(unused_imports)]\n+\n+// #7106: use statements exporting a macro within a crate should not trigger lint\n+\n+macro_rules! m1 {\n+    () => {};\n+}\n+pub(crate) use m1; // ok\n+\n+macro_rules! m2 {\n+    () => {};\n+}\n+use m2; // fail\n+\n+fn main() {\n+    m1!();\n+    m2!();\n+}"}, {"sha": "239efb393b1ab4ac058a959ebe323044cad662f1", "filename": "tests/ui/single_component_path_imports_macro.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/74f55996fe4b68e548e8652c025a19db7a24e047/tests%2Fui%2Fsingle_component_path_imports_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74f55996fe4b68e548e8652c025a19db7a24e047/tests%2Fui%2Fsingle_component_path_imports_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_component_path_imports_macro.stderr?ref=74f55996fe4b68e548e8652c025a19db7a24e047", "patch": "@@ -0,0 +1,10 @@\n+error: this import is redundant\n+  --> $DIR/single_component_path_imports_macro.rs:16:1\n+   |\n+LL | use m2; // fail\n+   | ^^^^^^^ help: remove it entirely\n+   |\n+   = note: `-D clippy::single-component-path-imports` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}]}