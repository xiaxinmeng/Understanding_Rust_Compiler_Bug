{"sha": "ad239f6197bda31f7a9b904b5ccb25c93cbc701a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMjM5ZjYxOTdiZGEzMWY3YTliOTA0YjVjY2IyNWM5M2NiYzcwMWE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-31T13:54:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-31T13:54:19Z"}, "message": "Merge #5623\n\n5623: Item is a Stmt r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "5e4b244c62c61824dbb63246aa9943e3b2398131", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e4b244c62c61824dbb63246aa9943e3b2398131"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad239f6197bda31f7a9b904b5ccb25c93cbc701a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfJCKLCRBK7hj4Ov3rIwAAdHIIAFakDSN2zrN60d14AoQVm3Jr\nLDhqnXQK/RlUFOOlE/p8xo050kK/1/OULwiFCRzbLe7VTEAvblG/qgu/lGs1SIc0\nPCDOFey3BDLYEHbcOzjtAjMBWQi9kR6uXGFbFjbjjdDQB9VwLLf9iNQ15D2XXXUS\nL9IH95RywDXUS2Yt2kRZOeGnd8kTZZzTRUbs7HEdCmyMjGsSIMapXJC4bOmxaEKv\n/qp1rM2fJCCq1sLjtKq+47e7HG3HGloU+CiXWKd8k8ZHQD/0Xs8eogo5z0/UrYs0\n4bkcznl/Yp9o3oIzbMQwD4L6X1vZK9Slv/2jyJ9BtN1vqtzNVwXI1YOsPolMy9M=\n=d1Ou\n-----END PGP SIGNATURE-----\n", "payload": "tree 5e4b244c62c61824dbb63246aa9943e3b2398131\nparent 3407d6f8a430627be333c32cb4cef02c0c8d11e3\nparent d4d986c7f850e1f535bb4c22e3a7f7fba5483628\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1596203659 +0000\ncommitter GitHub <noreply@github.com> 1596203659 +0000\n\nMerge #5623\n\n5623: Item is a Stmt r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad239f6197bda31f7a9b904b5ccb25c93cbc701a", "html_url": "https://github.com/rust-lang/rust/commit/ad239f6197bda31f7a9b904b5ccb25c93cbc701a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad239f6197bda31f7a9b904b5ccb25c93cbc701a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3407d6f8a430627be333c32cb4cef02c0c8d11e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3407d6f8a430627be333c32cb4cef02c0c8d11e3", "html_url": "https://github.com/rust-lang/rust/commit/3407d6f8a430627be333c32cb4cef02c0c8d11e3"}, {"sha": "d4d986c7f850e1f535bb4c22e3a7f7fba5483628", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4d986c7f850e1f535bb4c22e3a7f7fba5483628", "html_url": "https://github.com/rust-lang/rust/commit/d4d986c7f850e1f535bb4c22e3a7f7fba5483628"}], "stats": {"total": 157, "additions": 94, "deletions": 63}, "files": [{"sha": "4b73c41dacb333e76c9a27bfba75f07d38a49807", "filename": "crates/ra_assists/src/handlers/change_return_type_to_result.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad239f6197bda31f7a9b904b5ccb25c93cbc701a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad239f6197bda31f7a9b904b5ccb25c93cbc701a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs?ref=ad239f6197bda31f7a9b904b5ccb25c93cbc701a", "patch": "@@ -74,6 +74,7 @@ impl TailReturnCollector {\n             let expr = match &stmt {\n                 ast::Stmt::ExprStmt(stmt) => stmt.expr(),\n                 ast::Stmt::LetStmt(stmt) => stmt.initializer(),\n+                ast::Stmt::Item(_) => continue,\n             };\n             if let Some(expr) = &expr {\n                 self.handle_exprs(expr, collect_break);\n@@ -94,6 +95,7 @@ impl TailReturnCollector {\n                         let expr_stmt = match &expr_stmt {\n                             ast::Stmt::ExprStmt(stmt) => stmt.expr(),\n                             ast::Stmt::LetStmt(stmt) => stmt.initializer(),\n+                            ast::Stmt::Item(_) => None,\n                         };\n                         if let Some(expr) = &expr_stmt {\n                             self.handle_exprs(expr, collect_break);"}, {"sha": "5816bf5664feed00b0752b07ff8dd048445eec7e", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ad239f6197bda31f7a9b904b5ccb25c93cbc701a/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad239f6197bda31f7a9b904b5ccb25c93cbc701a/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=ad239f6197bda31f7a9b904b5ccb25c93cbc701a", "patch": "@@ -10,7 +10,7 @@ use hir_expand::{\n use ra_arena::Arena;\n use ra_syntax::{\n     ast::{\n-        self, ArgListOwner, ArrayExprKind, LiteralKind, LoopBodyOwner, ModuleItemOwner, NameOwner,\n+        self, ArgListOwner, ArrayExprKind, LiteralKind, LoopBodyOwner, NameOwner,\n         SlicePatComponents,\n     },\n     AstNode, AstPtr,\n@@ -601,14 +601,20 @@ impl ExprCollector<'_> {\n         self.collect_block_items(&block);\n         let statements = block\n             .statements()\n-            .map(|s| match s {\n-                ast::Stmt::LetStmt(stmt) => {\n-                    let pat = self.collect_pat_opt(stmt.pat());\n-                    let type_ref = stmt.ty().map(|it| TypeRef::from_ast(&self.ctx(), it));\n-                    let initializer = stmt.initializer().map(|e| self.collect_expr(e));\n-                    Statement::Let { pat, type_ref, initializer }\n-                }\n-                ast::Stmt::ExprStmt(stmt) => Statement::Expr(self.collect_expr_opt(stmt.expr())),\n+            .filter_map(|s| {\n+                let stmt = match s {\n+                    ast::Stmt::LetStmt(stmt) => {\n+                        let pat = self.collect_pat_opt(stmt.pat());\n+                        let type_ref = stmt.ty().map(|it| TypeRef::from_ast(&self.ctx(), it));\n+                        let initializer = stmt.initializer().map(|e| self.collect_expr(e));\n+                        Statement::Let { pat, type_ref, initializer }\n+                    }\n+                    ast::Stmt::ExprStmt(stmt) => {\n+                        Statement::Expr(self.collect_expr_opt(stmt.expr()))\n+                    }\n+                    ast::Stmt::Item(_) => return None,\n+                };\n+                Some(stmt)\n             })\n             .collect();\n         let tail = block.expr().map(|e| self.collect_expr(e));\n@@ -620,7 +626,11 @@ impl ExprCollector<'_> {\n         let container = ContainerId::DefWithBodyId(self.def);\n \n         let items = block\n-            .items()\n+            .statements()\n+            .filter_map(|stmt| match stmt {\n+                ast::Stmt::Item(it) => Some(it),\n+                ast::Stmt::LetStmt(_) | ast::Stmt::ExprStmt(_) => None,\n+            })\n             .filter_map(|item| {\n                 let (def, name): (ModuleDefId, Option<ast::Name>) = match item {\n                     ast::Item::Fn(def) => {"}, {"sha": "d536bb1e7d63492418248b07e3c3f5db548fd4d5", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad239f6197bda31f7a9b904b5ccb25c93cbc701a/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad239f6197bda31f7a9b904b5ccb25c93cbc701a/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=ad239f6197bda31f7a9b904b5ccb25c93cbc701a", "patch": "@@ -17,7 +17,7 @@ use crate::{\n \n pub use self::{\n     expr_ext::{ArrayExprKind, BinOp, Effect, ElseBranch, LiteralKind, PrefixOp, RangeOp},\n-    generated::{nodes::*, tokens::*},\n+    generated::*,\n     node_ext::{\n         AttrKind, FieldKind, NameOrNameRef, PathSegmentKind, SelfParamKind, SlicePatComponents,\n         StructKind, TypeBoundKind, VisibilityKind,"}, {"sha": "4a6f41ee71fa1b43ee61df97e1aedd8120711371", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ad239f6197bda31f7a9b904b5ccb25c93cbc701a/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad239f6197bda31f7a9b904b5ccb25c93cbc701a/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=ad239f6197bda31f7a9b904b5ccb25c93cbc701a", "patch": "@@ -1,6 +1,41 @@\n //! This file is actually hand-written, but the submodules are indeed generated.\n-\n #[rustfmt::skip]\n-pub(super) mod nodes;\n+mod nodes;\n #[rustfmt::skip]\n-pub(super) mod tokens;\n+mod tokens;\n+\n+use crate::{\n+    AstNode,\n+    SyntaxKind::{self, *},\n+    SyntaxNode,\n+};\n+\n+pub use {nodes::*, tokens::*};\n+\n+// Stmt is the only nested enum, so it's easier to just hand-write it\n+impl AstNode for Stmt {\n+    fn can_cast(kind: SyntaxKind) -> bool {\n+        match kind {\n+            LET_STMT | EXPR_STMT => true,\n+            _ => Item::can_cast(kind),\n+        }\n+    }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        let res = match syntax.kind() {\n+            LET_STMT => Stmt::LetStmt(LetStmt { syntax }),\n+            EXPR_STMT => Stmt::ExprStmt(ExprStmt { syntax }),\n+            _ => {\n+                let item = Item::cast(syntax)?;\n+                Stmt::Item(item)\n+            }\n+        };\n+        Some(res)\n+    }\n+    fn syntax(&self) -> &SyntaxNode {\n+        match self {\n+            Stmt::LetStmt(it) => &it.syntax,\n+            Stmt::ExprStmt(it) => &it.syntax,\n+            Stmt::Item(it) => it.syntax(),\n+        }\n+    }\n+}"}, {"sha": "763fd20f40a748fd491b68ccd1ed7c767d6bcf6b", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 3, "deletions": 23, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ad239f6197bda31f7a9b904b5ccb25c93cbc701a/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad239f6197bda31f7a9b904b5ccb25c93cbc701a/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=ad239f6197bda31f7a9b904b5ccb25c93cbc701a", "patch": "@@ -348,7 +348,6 @@ pub struct BlockExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n impl ast::AttrsOwner for BlockExpr {}\n-impl ast::ModuleItemOwner for BlockExpr {}\n impl BlockExpr {\n     pub fn label(&self) -> Option<Label> { support::child(&self.syntax) }\n     pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n@@ -1395,8 +1394,8 @@ impl ast::AttrsOwner for GenericParam {}\n pub enum Stmt {\n     LetStmt(LetStmt),\n     ExprStmt(ExprStmt),\n+    Item(Item),\n }\n-impl ast::AttrsOwner for Stmt {}\n impl AstNode for SourceFile {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == SOURCE_FILE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3380,27 +3379,8 @@ impl From<LetStmt> for Stmt {\n impl From<ExprStmt> for Stmt {\n     fn from(node: ExprStmt) -> Stmt { Stmt::ExprStmt(node) }\n }\n-impl AstNode for Stmt {\n-    fn can_cast(kind: SyntaxKind) -> bool {\n-        match kind {\n-            LET_STMT | EXPR_STMT => true,\n-            _ => false,\n-        }\n-    }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        let res = match syntax.kind() {\n-            LET_STMT => Stmt::LetStmt(LetStmt { syntax }),\n-            EXPR_STMT => Stmt::ExprStmt(ExprStmt { syntax }),\n-            _ => return None,\n-        };\n-        Some(res)\n-    }\n-    fn syntax(&self) -> &SyntaxNode {\n-        match self {\n-            Stmt::LetStmt(it) => &it.syntax,\n-            Stmt::ExprStmt(it) => &it.syntax,\n-        }\n-    }\n+impl From<Item> for Stmt {\n+    fn from(node: Item) -> Stmt { Stmt::Item(node) }\n }\n impl std::fmt::Display for Item {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {"}, {"sha": "d9f358513353a63a43bb571be2a273ef86f387f6", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 29, "deletions": 25, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/ad239f6197bda31f7a9b904b5ccb25c93cbc701a/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad239f6197bda31f7a9b904b5ccb25c93cbc701a/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=ad239f6197bda31f7a9b904b5ccb25c93cbc701a", "patch": "@@ -153,25 +153,10 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: &AstSrc) -> Result<String> {\n                 quote!(impl ast::#trait_name for #name {})\n             });\n \n-            (\n-                quote! {\n-                    #[pretty_doc_comment_placeholder_workaround]\n-                    #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-                    pub enum #name {\n-                        #(#variants(#variants),)*\n-                    }\n-\n-                    #(#traits)*\n-                },\n+            let ast_node = if en.name == \"Stmt\" {\n+                quote! {}\n+            } else {\n                 quote! {\n-                    #(\n-                    impl From<#variants> for #name {\n-                        fn from(node: #variants) -> #name {\n-                            #name::#variants(node)\n-                        }\n-                    }\n-                    )*\n-\n                     impl AstNode for #name {\n                         fn can_cast(kind: SyntaxKind) -> bool {\n                             match kind {\n@@ -196,6 +181,28 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: &AstSrc) -> Result<String> {\n                             }\n                         }\n                     }\n+                }\n+            };\n+\n+            (\n+                quote! {\n+                    #[pretty_doc_comment_placeholder_workaround]\n+                    #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+                    pub enum #name {\n+                        #(#variants(#variants),)*\n+                    }\n+\n+                    #(#traits)*\n+                },\n+                quote! {\n+                    #(\n+                        impl From<#variants> for #name {\n+                            fn from(node: #variants) -> #name {\n+                                #name::#variants(node)\n+                            }\n+                        }\n+                    )*\n+                    #ast_node\n                 },\n             )\n         })\n@@ -497,13 +504,7 @@ fn lower(grammar: &Grammar) -> AstSrc {\n     let mut res = AstSrc::default();\n     res.tokens = vec![\"Whitespace\".into(), \"Comment\".into(), \"String\".into(), \"RawString\".into()];\n \n-    let nodes = grammar\n-        .iter()\n-        .filter(|&node| match grammar[node].rule {\n-            Rule::Node(it) if it == node => false,\n-            _ => true,\n-        })\n-        .collect::<Vec<_>>();\n+    let nodes = grammar.iter().collect::<Vec<_>>();\n \n     for &node in &nodes {\n         let name = grammar[node].name.clone();\n@@ -693,6 +694,9 @@ fn extract_struct_trait(node: &mut AstNodeSrc, trait_name: &str, methods: &[&str\n \n fn extract_enum_traits(ast: &mut AstSrc) {\n     for enm in &mut ast.enums {\n+        if enm.name == \"Stmt\" {\n+            continue;\n+        }\n         let nodes = &ast.nodes;\n         let mut variant_traits = enm\n             .variants"}, {"sha": "17de36d7a21eba6dcd809a4f642000588e907491", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad239f6197bda31f7a9b904b5ccb25c93cbc701a/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/ad239f6197bda31f7a9b904b5ccb25c93cbc701a/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=ad239f6197bda31f7a9b904b5ccb25c93cbc701a", "patch": "@@ -197,6 +197,7 @@ Attr =\n Stmt =\n   LetStmt\n | ExprStmt\n+| Item\n \n LetStmt =\n   Attr* 'let' Pat (':' Type)?\n@@ -316,7 +317,6 @@ Label =\n BlockExpr =\n   Attr* Label\n   '{'\n-    Item*\n     statements:Stmt*\n     Expr?\n   '}'"}]}