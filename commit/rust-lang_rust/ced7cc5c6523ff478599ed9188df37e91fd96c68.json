{"sha": "ced7cc5c6523ff478599ed9188df37e91fd96c68", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlZDdjYzVjNjUyM2ZmNDc4NTk5ZWQ5MTg4ZGYzN2U5MWZkOTZjNjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-13T03:35:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-13T03:35:15Z"}, "message": "Auto merge of #56090 - nnethercote:filesearch, r=eddyb\n\nOverhaul `FileSearch` and `SearchPaths`\n\n`FileSearch::search()` traverses one or more directories. For each\ndirectory it generates a `Vec<PathBuf>` containing one element per file\nin that directory.\n\nIn some benchmarks this occurs enough that the allocations done for the\n`PathBuf`s are significant, and in practice a small number of\ndirectories are being traversed over and over again. For example, when\ncompiling the `tokio-webpush-simple` benchmark, two directories are\ntraversed 58 times each. Each of these directories have more than 100\nfiles.\n\nWe can do all the necessary traversals up front, when `Session` is created,\nand get the `Vec<PathBuf>`s then.\n\nThis reduces instruction counts on several benchmarks by 1--5%.\n\nr? @alexcrichton\n\nCC @eddyb, @michaelwoerister, @nikomatsakis", "tree": {"sha": "dccfd0a0b4e2b303740566fd08e0bf6fc8c4db35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dccfd0a0b4e2b303740566fd08e0bf6fc8c4db35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ced7cc5c6523ff478599ed9188df37e91fd96c68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ced7cc5c6523ff478599ed9188df37e91fd96c68", "html_url": "https://github.com/rust-lang/rust/commit/ced7cc5c6523ff478599ed9188df37e91fd96c68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ced7cc5c6523ff478599ed9188df37e91fd96c68/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f35a1016b0c0cc1132c19875dcd88d7b2825eae", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f35a1016b0c0cc1132c19875dcd88d7b2825eae", "html_url": "https://github.com/rust-lang/rust/commit/2f35a1016b0c0cc1132c19875dcd88d7b2825eae"}, {"sha": "209240dc267075d69eb8d1dba23be2a8c80c6427", "url": "https://api.github.com/repos/rust-lang/rust/commits/209240dc267075d69eb8d1dba23be2a8c80c6427", "html_url": "https://github.com/rust-lang/rust/commit/209240dc267075d69eb8d1dba23be2a8c80c6427"}], "stats": {"total": 293, "additions": 139, "deletions": 154}, "files": [{"sha": "32f3e573d6845bdf597e9b9e32ba88083e9c3fb7", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ced7cc5c6523ff478599ed9188df37e91fd96c68/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced7cc5c6523ff478599ed9188df37e91fd96c68/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=ced7cc5c6523ff478599ed9188df37e91fd96c68", "patch": "@@ -684,6 +684,11 @@ impl<'a> Builder<'a> {\n             .env(\"RUSTDOC_REAL\", self.rustdoc(host))\n             .env(\"RUSTDOC_CRATE_VERSION\", self.rust_version())\n             .env(\"RUSTC_BOOTSTRAP\", \"1\");\n+\n+        // Remove make-related flags that can cause jobserver problems.\n+        cmd.env_remove(\"MAKEFLAGS\");\n+        cmd.env_remove(\"MFLAGS\");\n+\n         if let Some(linker) = self.linker(host) {\n             cmd.env(\"RUSTC_TARGET_LINKER\", linker);\n         }"}, {"sha": "7ea7e4479876480fc875b1a0205b9619632ce7e1", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/ced7cc5c6523ff478599ed9188df37e91fd96c68/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced7cc5c6523ff478599ed9188df37e91fd96c68/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=ced7cc5c6523ff478599ed9188df37e91fd96c68", "patch": "@@ -14,7 +14,7 @@\n use std::str::FromStr;\n \n use session::{early_error, early_warn, Session};\n-use session::search_paths::SearchPaths;\n+use session::search_paths::SearchPath;\n \n use rustc_target::spec::{LinkerFlavor, PanicStrategy, RelroLevel};\n use rustc_target::spec::{Target, TargetTriple};\n@@ -374,7 +374,7 @@ top_level_options!(\n         lint_cap: Option<lint::Level> [TRACKED],\n         describe_lints: bool [UNTRACKED],\n         output_types: OutputTypes [TRACKED],\n-        search_paths: SearchPaths [UNTRACKED],\n+        search_paths: Vec<SearchPath> [UNTRACKED],\n         libs: Vec<(String, Option<String>, Option<cstore::NativeLibraryKind>)> [TRACKED],\n         maybe_sysroot: Option<PathBuf> [TRACKED],\n \n@@ -593,7 +593,7 @@ impl Default for Options {\n             lint_cap: None,\n             describe_lints: false,\n             output_types: OutputTypes(BTreeMap::new()),\n-            search_paths: SearchPaths::new(),\n+            search_paths: vec![],\n             maybe_sysroot: None,\n             target_triple: TargetTriple::from_triple(host_triple()),\n             test: false,\n@@ -2115,9 +2115,9 @@ pub fn build_session_options_and_crate_config(\n         }\n     };\n \n-    let mut search_paths = SearchPaths::new();\n+    let mut search_paths = vec![];\n     for s in &matches.opt_strs(\"L\") {\n-        search_paths.add_path(&s[..], error_format);\n+        search_paths.push(SearchPath::from_cli_opt(&s[..], error_format));\n     }\n \n     let libs = matches\n@@ -2535,6 +2535,7 @@ mod tests {\n     use session::config::{build_configuration, build_session_options_and_crate_config};\n     use session::config::{LtoCli, CrossLangLto};\n     use session::build_session;\n+    use session::search_paths::SearchPath;\n     use std::collections::{BTreeMap, BTreeSet};\n     use std::iter::FromIterator;\n     use std::path::PathBuf;\n@@ -2790,48 +2791,48 @@ mod tests {\n \n         // Reference\n         v1.search_paths\n-            .add_path(\"native=abc\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"native=abc\", super::ErrorOutputType::Json(false)));\n         v1.search_paths\n-            .add_path(\"crate=def\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"crate=def\", super::ErrorOutputType::Json(false)));\n         v1.search_paths\n-            .add_path(\"dependency=ghi\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"dependency=ghi\", super::ErrorOutputType::Json(false)));\n         v1.search_paths\n-            .add_path(\"framework=jkl\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"framework=jkl\", super::ErrorOutputType::Json(false)));\n         v1.search_paths\n-            .add_path(\"all=mno\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"all=mno\", super::ErrorOutputType::Json(false)));\n \n         v2.search_paths\n-            .add_path(\"native=abc\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"native=abc\", super::ErrorOutputType::Json(false)));\n         v2.search_paths\n-            .add_path(\"dependency=ghi\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"dependency=ghi\", super::ErrorOutputType::Json(false)));\n         v2.search_paths\n-            .add_path(\"crate=def\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"crate=def\", super::ErrorOutputType::Json(false)));\n         v2.search_paths\n-            .add_path(\"framework=jkl\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"framework=jkl\", super::ErrorOutputType::Json(false)));\n         v2.search_paths\n-            .add_path(\"all=mno\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"all=mno\", super::ErrorOutputType::Json(false)));\n \n         v3.search_paths\n-            .add_path(\"crate=def\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"crate=def\", super::ErrorOutputType::Json(false)));\n         v3.search_paths\n-            .add_path(\"framework=jkl\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"framework=jkl\", super::ErrorOutputType::Json(false)));\n         v3.search_paths\n-            .add_path(\"native=abc\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"native=abc\", super::ErrorOutputType::Json(false)));\n         v3.search_paths\n-            .add_path(\"dependency=ghi\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"dependency=ghi\", super::ErrorOutputType::Json(false)));\n         v3.search_paths\n-            .add_path(\"all=mno\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"all=mno\", super::ErrorOutputType::Json(false)));\n \n         v4.search_paths\n-            .add_path(\"all=mno\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"all=mno\", super::ErrorOutputType::Json(false)));\n         v4.search_paths\n-            .add_path(\"native=abc\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"native=abc\", super::ErrorOutputType::Json(false)));\n         v4.search_paths\n-            .add_path(\"crate=def\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"crate=def\", super::ErrorOutputType::Json(false)));\n         v4.search_paths\n-            .add_path(\"dependency=ghi\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"dependency=ghi\", super::ErrorOutputType::Json(false)));\n         v4.search_paths\n-            .add_path(\"framework=jkl\", super::ErrorOutputType::Json(false));\n+            .push(SearchPath::from_cli_opt(\"framework=jkl\", super::ErrorOutputType::Json(false)));\n \n         assert!(v1.dep_tracking_hash() == v2.dep_tracking_hash());\n         assert!(v1.dep_tracking_hash() == v3.dep_tracking_hash());"}, {"sha": "c204556d517a818717458504633c9fc68f6e2c75", "filename": "src/librustc/session/filesearch.rs", "status": "modified", "additions": 29, "deletions": 48, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/ced7cc5c6523ff478599ed9188df37e91fd96c68/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced7cc5c6523ff478599ed9188df37e91fd96c68/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Ffilesearch.rs?ref=ced7cc5c6523ff478599ed9188df37e91fd96c68", "patch": "@@ -12,13 +12,12 @@\n \n pub use self::FileMatch::*;\n \n-use rustc_data_structures::fx::FxHashSet;\n use std::borrow::Cow;\n use std::env;\n use std::fs;\n use std::path::{Path, PathBuf};\n \n-use session::search_paths::{SearchPaths, PathKind};\n+use session::search_paths::{SearchPath, PathKind};\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n \n #[derive(Copy, Clone)]\n@@ -30,31 +29,19 @@ pub enum FileMatch {\n // A module for searching for libraries\n \n pub struct FileSearch<'a> {\n-    pub sysroot: &'a Path,\n-    pub search_paths: &'a SearchPaths,\n-    pub triple: &'a str,\n-    pub kind: PathKind,\n+    sysroot: &'a Path,\n+    triple: &'a str,\n+    search_paths: &'a [SearchPath],\n+    tlib_path: &'a SearchPath,\n+    kind: PathKind,\n }\n \n impl<'a> FileSearch<'a> {\n-    pub fn for_each_lib_search_path<F>(&self, mut f: F) where\n-        F: FnMut(&Path, PathKind)\n-    {\n-        let mut visited_dirs = FxHashSet::default();\n-        visited_dirs.reserve(self.search_paths.paths.len() + 1);\n-        for (path, kind) in self.search_paths.iter(self.kind) {\n-            f(path, kind);\n-            visited_dirs.insert(path.to_path_buf());\n-        }\n-\n-        debug!(\"filesearch: searching lib path\");\n-        let tlib_path = make_target_lib_path(self.sysroot,\n-                                             self.triple);\n-        if !visited_dirs.contains(&tlib_path) {\n-            f(&tlib_path, PathKind::All);\n-        }\n-\n-        visited_dirs.insert(tlib_path);\n+    pub fn search_paths(&self) -> impl Iterator<Item = &'a SearchPath> {\n+        let kind = self.kind;\n+        self.search_paths.iter()\n+            .filter(move |sp| sp.kind.matches(kind))\n+            .chain(std::iter::once(self.tlib_path))\n     }\n \n     pub fn get_lib_path(&self) -> PathBuf {\n@@ -64,26 +51,20 @@ impl<'a> FileSearch<'a> {\n     pub fn search<F>(&self, mut pick: F)\n         where F: FnMut(&Path, PathKind) -> FileMatch\n     {\n-        self.for_each_lib_search_path(|lib_search_path, kind| {\n-            debug!(\"searching {}\", lib_search_path.display());\n-            let files = match fs::read_dir(lib_search_path) {\n-                Ok(files) => files,\n-                Err(..) => return,\n-            };\n-            let files = files.filter_map(|p| p.ok().map(|s| s.path()))\n-                             .collect::<Vec<_>>();\n+        for search_path in self.search_paths() {\n+            debug!(\"searching {}\", search_path.dir.display());\n             fn is_rlib(p: &Path) -> bool {\n                 p.extension() == Some(\"rlib\".as_ref())\n             }\n             // Reading metadata out of rlibs is faster, and if we find both\n             // an rlib and a dylib we only read one of the files of\n             // metadata, so in the name of speed, bring all rlib files to\n             // the front of the search list.\n-            let files1 = files.iter().filter(|p| is_rlib(p));\n-            let files2 = files.iter().filter(|p| !is_rlib(p));\n+            let files1 = search_path.files.iter().filter(|p| is_rlib(p));\n+            let files2 = search_path.files.iter().filter(|p| !is_rlib(p));\n             for path in files1.chain(files2) {\n                 debug!(\"testing {}\", path.display());\n-                let maybe_picked = pick(path, kind);\n+                let maybe_picked = pick(path, search_path.kind);\n                 match maybe_picked {\n                     FileMatches => {\n                         debug!(\"picked {}\", path.display());\n@@ -93,29 +74,30 @@ impl<'a> FileSearch<'a> {\n                     }\n                 }\n             }\n-        });\n+        }\n     }\n \n     pub fn new(sysroot: &'a Path,\n                triple: &'a str,\n-               search_paths: &'a SearchPaths,\n-               kind: PathKind) -> FileSearch<'a> {\n+               search_paths: &'a Vec<SearchPath>,\n+               tlib_path: &'a SearchPath,\n+               kind: PathKind)\n+               -> FileSearch<'a> {\n         debug!(\"using sysroot = {}, triple = {}\", sysroot.display(), triple);\n         FileSearch {\n             sysroot,\n-            search_paths,\n             triple,\n+            search_paths,\n+            tlib_path,\n             kind,\n         }\n     }\n \n-    // Returns a list of directories where target-specific dylibs might be located.\n-    pub fn get_dylib_search_paths(&self) -> Vec<PathBuf> {\n-        let mut paths = Vec::new();\n-        self.for_each_lib_search_path(|lib_search_path, _| {\n-            paths.push(lib_search_path.to_path_buf());\n-        });\n-        paths\n+    // Returns just the directories within the search paths.\n+    pub fn search_path_dirs(&self) -> Vec<PathBuf> {\n+        self.search_paths()\n+            .map(|sp| sp.dir.to_path_buf())\n+            .collect()\n     }\n \n     // Returns a list of directories where target-specific tool binaries are located.\n@@ -138,8 +120,7 @@ pub fn relative_target_lib_path(sysroot: &Path, target_triple: &str) -> PathBuf\n     p\n }\n \n-fn make_target_lib_path(sysroot: &Path,\n-                        target_triple: &str) -> PathBuf {\n+pub fn make_target_lib_path(sysroot: &Path, target_triple: &str) -> PathBuf {\n     sysroot.join(&relative_target_lib_path(sysroot, target_triple))\n }\n "}, {"sha": "12b5646e7f1d17ac6d340c41228c07a8d38ec56e", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ced7cc5c6523ff478599ed9188df37e91fd96c68/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced7cc5c6523ff478599ed9188df37e91fd96c68/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=ced7cc5c6523ff478599ed9188df37e91fd96c68", "patch": "@@ -19,8 +19,8 @@ use lint;\n use lint::builtin::BuiltinLintDiagnostics;\n use middle::allocator::AllocatorKind;\n use middle::dependency_format;\n-use session::search_paths::PathKind;\n use session::config::{OutputType, Lto};\n+use session::search_paths::{PathKind, SearchPath};\n use util::nodemap::{FxHashMap, FxHashSet};\n use util::common::{duration_to_secs_str, ErrorReported};\n use util::common::ProfileQueriesMsg;\n@@ -48,7 +48,7 @@ use std::cell::{self, Cell, RefCell};\n use std::env;\n use std::fmt;\n use std::io::Write;\n-use std::path::{Path, PathBuf};\n+use std::path::PathBuf;\n use std::time::Duration;\n use std::sync::mpsc;\n use std::sync::atomic::{AtomicUsize, Ordering};\n@@ -64,12 +64,15 @@ pub struct Session {\n     pub target: config::Config,\n     pub host: Target,\n     pub opts: config::Options,\n+    pub host_tlib_path: SearchPath,\n+    /// This is `None` if the host and target are the same.\n+    pub target_tlib_path: Option<SearchPath>,\n     pub parse_sess: ParseSess,\n     /// For a library crate, this is always none\n     pub entry_fn: Once<Option<(NodeId, Span, config::EntryFnType)>>,\n     pub plugin_registrar_fn: Once<Option<ast::NodeId>>,\n     pub proc_macro_decls_static: Once<Option<ast::NodeId>>,\n-    pub default_sysroot: Option<PathBuf>,\n+    pub sysroot: PathBuf,\n     /// The name of the root source file of the crate, in the local file system.\n     /// `None` means that there is no source file.\n     pub local_crate_source_file: Option<PathBuf>,\n@@ -694,27 +697,22 @@ impl Session {\n         )\n     }\n \n-    pub fn sysroot<'a>(&'a self) -> &'a Path {\n-        match self.opts.maybe_sysroot {\n-            Some(ref sysroot) => sysroot,\n-            None => self.default_sysroot\n-                        .as_ref()\n-                        .expect(\"missing sysroot and default_sysroot in Session\"),\n-        }\n-    }\n     pub fn target_filesearch(&self, kind: PathKind) -> filesearch::FileSearch<'_> {\n         filesearch::FileSearch::new(\n-            self.sysroot(),\n+            &self.sysroot,\n             self.opts.target_triple.triple(),\n             &self.opts.search_paths,\n+            // target_tlib_path==None means it's the same as host_tlib_path.\n+            self.target_tlib_path.as_ref().unwrap_or(&self.host_tlib_path),\n             kind,\n         )\n     }\n     pub fn host_filesearch(&self, kind: PathKind) -> filesearch::FileSearch<'_> {\n         filesearch::FileSearch::new(\n-            self.sysroot(),\n+            &self.sysroot,\n             config::host_triple(),\n             &self.opts.search_paths,\n+            &self.host_tlib_path,\n             kind,\n         )\n     }\n@@ -1109,9 +1107,18 @@ pub fn build_session_(\n     let target_cfg = config::build_target_config(&sopts, &span_diagnostic);\n \n     let p_s = parse::ParseSess::with_span_handler(span_diagnostic, source_map);\n-    let default_sysroot = match sopts.maybe_sysroot {\n-        Some(_) => None,\n-        None => Some(filesearch::get_or_default_sysroot()),\n+    let sysroot = match &sopts.maybe_sysroot {\n+        Some(sysroot) => sysroot.clone(),\n+        None => filesearch::get_or_default_sysroot(),\n+    };\n+\n+    let host_triple = config::host_triple();\n+    let target_triple = sopts.target_triple.triple();\n+    let host_tlib_path = SearchPath::from_sysroot_and_triple(&sysroot, host_triple);\n+    let target_tlib_path = if host_triple == target_triple {\n+        None\n+    } else {\n+        Some(SearchPath::from_sysroot_and_triple(&sysroot, target_triple))\n     };\n \n     let file_path_mapping = sopts.file_path_mapping();\n@@ -1142,12 +1149,14 @@ pub fn build_session_(\n         target: target_cfg,\n         host,\n         opts: sopts,\n+        host_tlib_path,\n+        target_tlib_path,\n         parse_sess: p_s,\n         // For a library crate, this is always none\n         entry_fn: Once::new(),\n         plugin_registrar_fn: Once::new(),\n         proc_macro_decls_static: Once::new(),\n-        default_sysroot,\n+        sysroot,\n         local_crate_source_file,\n         working_dir,\n         lint_store: RwLock::new(lint::LintStore::new()),"}, {"sha": "5c44a07f84341467066fbd2a6079fdb899ef40bb", "filename": "src/librustc/session/search_paths.rs", "status": "modified", "additions": 31, "deletions": 35, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/ced7cc5c6523ff478599ed9188df37e91fd96c68/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced7cc5c6523ff478599ed9188df37e91fd96c68/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fsearch_paths.rs?ref=ced7cc5c6523ff478599ed9188df37e91fd96c68", "patch": "@@ -8,18 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::slice;\n use std::path::{Path, PathBuf};\n use session::{early_error, config};\n+use session::filesearch::make_target_lib_path;\n \n #[derive(Clone, Debug)]\n-pub struct SearchPaths {\n-    crate paths: Vec<(PathKind, PathBuf)>,\n-}\n-\n-pub struct Iter<'a> {\n-    kind: PathKind,\n-    iter: slice::Iter<'a, (PathKind, PathBuf)>,\n+pub struct SearchPath {\n+    pub kind: PathKind,\n+    pub dir: PathBuf,\n+    pub files: Vec<PathBuf>,\n }\n \n #[derive(Eq, PartialEq, Clone, Copy, Debug, PartialOrd, Ord, Hash)]\n@@ -32,12 +29,17 @@ pub enum PathKind {\n     All,\n }\n \n-impl SearchPaths {\n-    pub fn new() -> SearchPaths {\n-        SearchPaths { paths: Vec::new() }\n+impl PathKind {\n+    pub fn matches(&self, kind: PathKind) -> bool {\n+        match (self, kind) {\n+            (PathKind::All, _) | (_, PathKind::All) => true,\n+            _ => *self == kind,\n+        }\n     }\n+}\n \n-    pub fn add_path(&mut self, path: &str, output: config::ErrorOutputType) {\n+impl SearchPath {\n+    pub fn from_cli_opt(path: &str, output: config::ErrorOutputType) -> Self {\n         let (kind, path) = if path.starts_with(\"native=\") {\n             (PathKind::Native, &path[\"native=\".len()..])\n         } else if path.starts_with(\"crate=\") {\n@@ -54,34 +56,28 @@ impl SearchPaths {\n         if path.is_empty() {\n             early_error(output, \"empty search path given via `-L`\");\n         }\n-        self.paths.push((kind, PathBuf::from(path)));\n-    }\n \n-    pub fn iter(&self, kind: PathKind) -> Iter<'_> {\n-        Iter { kind: kind, iter: self.paths.iter() }\n+        let dir = PathBuf::from(path);\n+        Self::new(kind, dir)\n     }\n-}\n \n-impl<'a> Iterator for Iter<'a> {\n-    type Item = (&'a Path, PathKind);\n+    pub fn from_sysroot_and_triple(sysroot: &Path, triple: &str) -> Self {\n+        Self::new(PathKind::All, make_target_lib_path(sysroot, triple))\n+    }\n \n-    fn next(&mut self) -> Option<(&'a Path, PathKind)> {\n-        loop {\n-            match *self.iter.next()? {\n-                (kind, ref p) if self.kind == PathKind::All ||\n-                                  kind == PathKind::All ||\n-                                  kind == self.kind => {\n-                    return Some((p, kind))\n-                }\n-                _ => {}\n+    fn new(kind: PathKind, dir: PathBuf) -> Self {\n+        // Get the files within the directory.\n+        let files = match std::fs::read_dir(&dir) {\n+            Ok(files) => {\n+                files.filter_map(|p| {\n+                    p.ok().map(|s| s.path())\n+                })\n+                .collect::<Vec<_>>()\n             }\n-        }\n-    }\n+            Err(..) => vec![],\n+        };\n \n-    fn size_hint(&self) -> (usize, Option<usize>) {\n-        // This iterator will never return more elements than the base iterator;\n-        // but it can ignore all the remaining elements.\n-        let (_, upper) = self.iter.size_hint();\n-        (0, upper)\n+        SearchPath { kind, dir, files }\n     }\n }\n+"}, {"sha": "f1c0464f5f25bad9bc697b874df316543d671597", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ced7cc5c6523ff478599ed9188df37e91fd96c68/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced7cc5c6523ff478599ed9188df37e91fd96c68/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=ced7cc5c6523ff478599ed9188df37e91fd96c68", "patch": "@@ -212,12 +212,7 @@ fn link_binary_output(sess: &Session,\n }\n \n fn archive_search_paths(sess: &Session) -> Vec<PathBuf> {\n-    let mut search = Vec::new();\n-    sess.target_filesearch(PathKind::Native).for_each_lib_search_path(|path, _| {\n-        search.push(path.to_path_buf());\n-    });\n-\n-    search\n+    sess.target_filesearch(PathKind::Native).search_path_dirs()\n }\n \n fn archive_config<'a>(sess: &'a Session,\n@@ -1024,11 +1019,10 @@ fn link_args(cmd: &mut dyn Linker,\n     // where extern libraries might live, based on the\n     // addl_lib_search_paths\n     if sess.opts.cg.rpath {\n-        let sysroot = sess.sysroot();\n         let target_triple = sess.opts.target_triple.triple();\n         let mut get_install_prefix_lib_path = || {\n             let install_prefix = option_env!(\"CFG_PREFIX\").expect(\"CFG_PREFIX\");\n-            let tlib = filesearch::relative_target_lib_path(sysroot, target_triple);\n+            let tlib = filesearch::relative_target_lib_path(&sess.sysroot, target_triple);\n             let mut path = PathBuf::from(install_prefix);\n             path.push(&tlib);\n \n@@ -1068,12 +1062,13 @@ fn link_args(cmd: &mut dyn Linker,\n fn add_local_native_libraries(cmd: &mut dyn Linker,\n                               sess: &Session,\n                               codegen_results: &CodegenResults) {\n-    sess.target_filesearch(PathKind::All).for_each_lib_search_path(|path, k| {\n-        match k {\n-            PathKind::Framework => { cmd.framework_path(path); }\n-            _ => { cmd.include_path(&fix_windows_verbatim_for_gcc(path)); }\n+    let filesearch = sess.target_filesearch(PathKind::All);\n+    for search_path in filesearch.search_paths() {\n+        match search_path.kind {\n+            PathKind::Framework => { cmd.framework_path(&search_path.dir); }\n+            _ => { cmd.include_path(&fix_windows_verbatim_for_gcc(&search_path.dir)); }\n         }\n-    });\n+    }\n \n     let relevant_libs = codegen_results.crate_info.used_libraries.iter().filter(|l| {\n         relevant_lib(sess, l)"}, {"sha": "4960c8922b9f98c879a687d033ddf929761d1b9b", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ced7cc5c6523ff478599ed9188df37e91fd96c68/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced7cc5c6523ff478599ed9188df37e91fd96c68/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=ced7cc5c6523ff478599ed9188df37e91fd96c68", "patch": "@@ -606,8 +606,7 @@ impl<'a> Linker for MsvcLinker<'a> {\n         self.cmd.arg(\"/DEBUG\");\n \n         // This will cause the Microsoft linker to embed .natvis info into the PDB file\n-        let sysroot = self.sess.sysroot();\n-        let natvis_dir_path = sysroot.join(\"lib\\\\rustlib\\\\etc\");\n+        let natvis_dir_path = self.sess.sysroot.join(\"lib\\\\rustlib\\\\etc\");\n         if let Ok(natvis_dir) = fs::read_dir(&natvis_dir_path) {\n             // LLVM 5.0.0's lld-link frontend doesn't yet recognize, and chokes\n             // on, the /NATVIS:... flags.  LLVM 6 (or earlier) should at worst ignore"}, {"sha": "b26d81b9c6729ab931da8e6769dd5742b6b401af", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ced7cc5c6523ff478599ed9188df37e91fd96c68/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced7cc5c6523ff478599ed9188df37e91fd96c68/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=ced7cc5c6523ff478599ed9188df37e91fd96c68", "patch": "@@ -975,7 +975,7 @@ where\n         let mut old_path = OsString::new();\n         if cfg!(windows) {\n             old_path = env::var_os(\"PATH\").unwrap_or(old_path);\n-            let mut new_path = sess.host_filesearch(PathKind::All).get_dylib_search_paths();\n+            let mut new_path = sess.host_filesearch(PathKind::All).search_path_dirs();\n             for path in env::split_paths(&old_path) {\n                 if !new_path.contains(&path) {\n                     new_path.push(path);"}, {"sha": "41c9b22afe06f968aaf489cf13e050db403db58d", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ced7cc5c6523ff478599ed9188df37e91fd96c68/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced7cc5c6523ff478599ed9188df37e91fd96c68/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=ced7cc5c6523ff478599ed9188df37e91fd96c68", "patch": "@@ -1042,7 +1042,7 @@ impl RustcDefaultCalls {\n                     targets.sort();\n                     println!(\"{}\", targets.join(\"\\n\"));\n                 },\n-                Sysroot => println!(\"{}\", sess.sysroot().display()),\n+                Sysroot => println!(\"{}\", sess.sysroot.display()),\n                 TargetSpec => println!(\"{}\", sess.target.target.to_json().pretty()),\n                 FileNames | CrateName => {\n                     let input = input.unwrap_or_else(||"}, {"sha": "f01ed9e3ceef71384136111a9842f129786ffd82", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ced7cc5c6523ff478599ed9188df37e91fd96c68/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced7cc5c6523ff478599ed9188df37e91fd96c68/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=ced7cc5c6523ff478599ed9188df37e91fd96c68", "patch": "@@ -678,7 +678,7 @@ impl<'a> Context<'a> {\n             // candidates are all canonicalized, so we canonicalize the sysroot\n             // as well.\n             if let Some((ref prev, _)) = ret {\n-                let sysroot = self.sess.sysroot();\n+                let sysroot = &self.sess.sysroot;\n                 let sysroot = sysroot.canonicalize()\n                                      .unwrap_or_else(|_| sysroot.to_path_buf());\n                 if prev.starts_with(&sysroot) {"}, {"sha": "b421f07ddafa21053200643c87f9a64959849b3e", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ced7cc5c6523ff478599ed9188df37e91fd96c68/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced7cc5c6523ff478599ed9188df37e91fd96c68/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=ced7cc5c6523ff478599ed9188df37e91fd96c68", "patch": "@@ -20,7 +20,7 @@ use rustc::session::early_error;\n use rustc::session::config::{CodegenOptions, DebuggingOptions, ErrorOutputType, Externs};\n use rustc::session::config::{nightly_options, build_codegen_options, build_debugging_options,\n                              get_cmd_lint_options};\n-use rustc::session::search_paths::SearchPaths;\n+use rustc::session::search_paths::SearchPath;\n use rustc_driver;\n use rustc_target::spec::TargetTriple;\n use syntax::edition::Edition;\n@@ -46,7 +46,7 @@ pub struct Options {\n     /// How to format errors and warnings.\n     pub error_format: ErrorOutputType,\n     /// Library search paths to hand to the compiler.\n-    pub libs: SearchPaths,\n+    pub libs: Vec<SearchPath>,\n     /// The list of external crates to link against.\n     pub externs: Externs,\n     /// List of `cfg` flags to hand to the compiler. Always includes `rustdoc`.\n@@ -295,10 +295,9 @@ impl Options {\n         }\n         let input = PathBuf::from(&matches.free[0]);\n \n-        let mut libs = SearchPaths::new();\n-        for s in &matches.opt_strs(\"L\") {\n-            libs.add_path(s, error_format);\n-        }\n+        let libs = matches.opt_strs(\"L\").iter()\n+            .map(|s| SearchPath::from_cli_opt(s, error_format))\n+            .collect();\n         let externs = match parse_externs(&matches) {\n             Ok(ex) => ex,\n             Err(err) => {"}, {"sha": "b85342f631181465600ffcc3145a516a8749bb67", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ced7cc5c6523ff478599ed9188df37e91fd96c68/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced7cc5c6523ff478599ed9188df37e91fd96c68/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=ced7cc5c6523ff478599ed9188df37e91fd96c68", "patch": "@@ -51,7 +51,7 @@ use html::render::RenderInfo;\n use passes;\n \n pub use rustc::session::config::{Input, Options, CodegenOptions};\n-pub use rustc::session::search_paths::SearchPaths;\n+pub use rustc::session::search_paths::SearchPath;\n \n pub type ExternalPaths = FxHashMap<DefId, (Vec<String>, clean::TypeKind)>;\n "}, {"sha": "50acde64cf023b32e1f817ab43fe67d2f3d49eeb", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ced7cc5c6523ff478599ed9188df37e91fd96c68/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ced7cc5c6523ff478599ed9188df37e91fd96c68/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=ced7cc5c6523ff478599ed9188df37e91fd96c68", "patch": "@@ -21,7 +21,7 @@ use rustc::hir;\n use rustc::hir::intravisit;\n use rustc::session::{self, CompileIncomplete, config};\n use rustc::session::config::{OutputType, OutputTypes, Externs, CodegenOptions};\n-use rustc::session::search_paths::{SearchPaths, PathKind};\n+use rustc::session::search_paths::{SearchPath, PathKind};\n use syntax::ast;\n use syntax::source_map::SourceMap;\n use syntax::edition::Edition;\n@@ -187,7 +187,7 @@ fn scrape_test_config(krate: &::rustc::hir::Crate) -> TestOptions {\n }\n \n fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n-            cfgs: Vec<String>, libs: SearchPaths,\n+            cfgs: Vec<String>, libs: Vec<SearchPath>,\n             cg: CodegenOptions, externs: Externs,\n             should_panic: bool, no_run: bool, as_test_harness: bool,\n             compile_fail: bool, mut error_codes: Vec<String>, opts: &TestOptions,\n@@ -556,7 +556,7 @@ pub struct Collector {\n     names: Vec<String>,\n \n     cfgs: Vec<String>,\n-    libs: SearchPaths,\n+    libs: Vec<SearchPath>,\n     cg: CodegenOptions,\n     externs: Externs,\n     use_headers: bool,\n@@ -571,7 +571,7 @@ pub struct Collector {\n }\n \n impl Collector {\n-    pub fn new(cratename: String, cfgs: Vec<String>, libs: SearchPaths, cg: CodegenOptions,\n+    pub fn new(cratename: String, cfgs: Vec<String>, libs: Vec<SearchPath>, cg: CodegenOptions,\n                externs: Externs, use_headers: bool, opts: TestOptions,\n                maybe_sysroot: Option<PathBuf>, source_map: Option<Lrc<SourceMap>>,\n                filename: Option<PathBuf>, linker: Option<PathBuf>, edition: Edition) -> Collector {"}]}