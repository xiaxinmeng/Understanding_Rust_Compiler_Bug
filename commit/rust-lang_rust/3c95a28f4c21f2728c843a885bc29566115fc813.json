{"sha": "3c95a28f4c21f2728c843a885bc29566115fc813", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjOTVhMjhmNGMyMWYyNzI4Yzg0M2E4ODViYzI5NTY2MTE1ZmM4MTM=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-06-27T16:54:48Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-06-27T16:54:48Z"}, "message": "Make disjoint_capture_migration an edition lint.", "tree": {"sha": "5eee92b51e86c0b134a74c88a6b2281f27106b68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5eee92b51e86c0b134a74c88a6b2281f27106b68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c95a28f4c21f2728c843a885bc29566115fc813", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c95a28f4c21f2728c843a885bc29566115fc813", "html_url": "https://github.com/rust-lang/rust/commit/3c95a28f4c21f2728c843a885bc29566115fc813", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c95a28f4c21f2728c843a885bc29566115fc813/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4645679d35378a7134cd8d77e0b2a5164f6ea127", "url": "https://api.github.com/repos/rust-lang/rust/commits/4645679d35378a7134cd8d77e0b2a5164f6ea127", "html_url": "https://github.com/rust-lang/rust/commit/4645679d35378a7134cd8d77e0b2a5164f6ea127"}], "stats": {"total": 310, "additions": 198, "deletions": 112}, "files": [{"sha": "40492a3dbb9dbc5630549c6b3c6f3c6bbfd2399a", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3c95a28f4c21f2728c843a885bc29566115fc813/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c95a28f4c21f2728c843a885bc29566115fc813/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=3c95a28f4c21f2728c843a885bc29566115fc813", "patch": "@@ -3001,8 +3001,7 @@ declare_lint! {\n \n declare_lint! {\n     /// The `disjoint_capture_migration` lint detects variables that aren't completely\n-    /// captured when the feature `capture_disjoint_fields` is enabled and it affects the Drop\n-    /// order of at least one path starting at this variable.\n+    /// captured in Rust 2021 and affect the Drop order of at least one path starting at this variable.\n     /// It can also detect when a variable implements a trait, but one of its field does not and\n     /// the field is captured by a closure and used with the assumption that said field implements\n     /// the same trait as the root variable.\n@@ -3039,16 +3038,16 @@ declare_lint! {\n     ///\n     /// ### Explanation\n     ///\n-    /// In the above example `p.y` will be dropped at the end of `f` instead of with `c` if\n-    /// the feature `capture_disjoint_fields` is enabled.\n+    /// In the above example, `p.y` will be dropped at the end of `f` instead of\n+    /// with `c` in Rust 2021.\n     ///\n     /// ### Example of auto-trait\n     ///\n     /// ```rust,compile_fail\n     /// #![deny(disjoint_capture_migration)]\n     /// use std::thread;\n     ///\n-    /// struct Pointer (*mut i32);\n+    /// struct Pointer(*mut i32);\n     /// unsafe impl Send for Pointer {}\n     ///\n     /// fn main() {\n@@ -3064,12 +3063,16 @@ declare_lint! {\n     ///\n     /// ### Explanation\n     ///\n-    /// In the above example `fptr.0` is captured when feature `capture_disjoint_fields` is enabled.\n+    /// In the above example, only `fptr.0` is captured in Rust 2021.\n     /// The field is of type *mut i32 which doesn't implement Send, making the code invalid as the\n     /// field cannot be sent between thread safely.\n     pub DISJOINT_CAPTURE_MIGRATION,\n     Allow,\n-    \"Drop reorder and auto traits error because of `capture_disjoint_fields`\"\n+    \"detects closures affected by Rust 2021 changes\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reason: FutureIncompatibilityReason::EditionSemanticsChange(Edition::Edition2021),\n+        explain_reason: false,\n+    };\n }\n \n declare_lint_pass!(UnusedDocComment => [UNUSED_DOC_COMMENTS]);"}, {"sha": "c79933f504487f5b5a5c1a71cb4907948ecf0c23", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3c95a28f4c21f2728c843a885bc29566115fc813/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c95a28f4c21f2728c843a885bc29566115fc813/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=3c95a28f4c21f2728c843a885bc29566115fc813", "patch": "@@ -494,11 +494,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 |lint| {\n                     let mut diagnostics_builder = lint.build(\n                         format!(\n-                            \"{} affected for closure because of `capture_disjoint_fields`\",\n+                            \"{} will change in Rust 2021\",\n                             reasons\n                         )\n                         .as_str(),\n                     );\n+                    diagnostics_builder.note(\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\");\n                     let closure_body_span = self.tcx.hir().span(body_id.hir_id);\n                     let (sugg, app) =\n                         match self.tcx.sess.source_map().span_to_snippet(closure_body_span) {"}, {"sha": "ee8dd4b4fc33d5bae55573bd9bf7f26f88add8b0", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed?ref=3c95a28f4c21f2728c843a885bc29566115fc813", "patch": "@@ -11,7 +11,7 @@ fn test_send_trait() {\n     let mut f = 10;\n     let fptr = SendPointer(&mut f as *mut i32);\n     thread::spawn(move || { let _ = &fptr; unsafe {\n-        //~^ ERROR: `Send` trait implementation affected for closure because of `capture_disjoint_fields`\n+        //~^ ERROR: `Send` trait implementation\n         //~| HELP: add a dummy let to cause `fptr` to be fully captured\n         *fptr.0 = 20;\n     } });\n@@ -28,7 +28,7 @@ fn test_sync_trait() {\n     let f = CustomInt(&mut f as *mut i32);\n     let fptr = SyncPointer(f);\n     thread::spawn(move || { let _ = &fptr; unsafe {\n-        //~^ ERROR: `Sync`, `Send` trait implementation affected for closure because of `capture_disjoint_fields`\n+        //~^ ERROR: `Sync`, `Send` trait implementation\n         //~| HELP: add a dummy let to cause `fptr` to be fully captured\n         *fptr.0.0 = 20;\n     } });\n@@ -49,7 +49,7 @@ impl Clone for U {\n fn test_clone_trait() {\n     let f = U(S(String::from(\"Hello World\")), T(0));\n     let c = || { let _ = &f; \n-        //~^ ERROR: `Clone` trait implementation, and drop order affected for closure because of `capture_disjoint_fields`\n+        //~^ ERROR: `Clone` trait implementation, and drop order\n         //~| HELP: add a dummy let to cause `f` to be fully captured\n         let f_1 = f.1;\n         println!(\"{:?}\", f_1.0);"}, {"sha": "7a6dcc55bbba664ab18fe30051d532ab31a334f8", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs?ref=3c95a28f4c21f2728c843a885bc29566115fc813", "patch": "@@ -11,7 +11,7 @@ fn test_send_trait() {\n     let mut f = 10;\n     let fptr = SendPointer(&mut f as *mut i32);\n     thread::spawn(move || unsafe {\n-        //~^ ERROR: `Send` trait implementation affected for closure because of `capture_disjoint_fields`\n+        //~^ ERROR: `Send` trait implementation\n         //~| HELP: add a dummy let to cause `fptr` to be fully captured\n         *fptr.0 = 20;\n     });\n@@ -28,7 +28,7 @@ fn test_sync_trait() {\n     let f = CustomInt(&mut f as *mut i32);\n     let fptr = SyncPointer(f);\n     thread::spawn(move || unsafe {\n-        //~^ ERROR: `Sync`, `Send` trait implementation affected for closure because of `capture_disjoint_fields`\n+        //~^ ERROR: `Sync`, `Send` trait implementation\n         //~| HELP: add a dummy let to cause `fptr` to be fully captured\n         *fptr.0.0 = 20;\n     });\n@@ -49,7 +49,7 @@ impl Clone for U {\n fn test_clone_trait() {\n     let f = U(S(String::from(\"Hello World\")), T(0));\n     let c = || {\n-        //~^ ERROR: `Clone` trait implementation, and drop order affected for closure because of `capture_disjoint_fields`\n+        //~^ ERROR: `Clone` trait implementation, and drop order\n         //~| HELP: add a dummy let to cause `f` to be fully captured\n         let f_1 = f.1;\n         println!(\"{:?}\", f_1.0);"}, {"sha": "d8420f9652e32483f21ee44a337e37b13d302047", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr?ref=3c95a28f4c21f2728c843a885bc29566115fc813", "patch": "@@ -1,4 +1,4 @@\n-error: `Send` trait implementation affected for closure because of `capture_disjoint_fields`\n+error: `Send` trait implementation will change in Rust 2021\n   --> $DIR/auto_traits.rs:13:19\n    |\n LL |       thread::spawn(move || unsafe {\n@@ -14,6 +14,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(disjoint_capture_migration)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `fptr` to be fully captured\n    |\n LL |     thread::spawn(move || { let _ = &fptr; unsafe {\n@@ -23,7 +24,7 @@ LL |         *fptr.0 = 20;\n LL |     } });\n    |\n \n-error: `Sync`, `Send` trait implementation affected for closure because of `capture_disjoint_fields`\n+error: `Sync`, `Send` trait implementation will change in Rust 2021\n   --> $DIR/auto_traits.rs:30:19\n    |\n LL |       thread::spawn(move || unsafe {\n@@ -34,6 +35,7 @@ LL | |         *fptr.0.0 = 20;\n LL | |     });\n    | |_____^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `fptr` to be fully captured\n    |\n LL |     thread::spawn(move || { let _ = &fptr; unsafe {\n@@ -43,7 +45,7 @@ LL |         *fptr.0.0 = 20;\n LL |     } });\n    |\n \n-error: `Clone` trait implementation, and drop order affected for closure because of `capture_disjoint_fields`\n+error: `Clone` trait implementation, and drop order will change in Rust 2021\n   --> $DIR/auto_traits.rs:51:13\n    |\n LL |       let c = || {\n@@ -55,6 +57,7 @@ LL | |         println!(\"{:?}\", f_1.0);\n LL | |     };\n    | |_____^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f` to be fully captured\n    |\n LL |     let c = || { let _ = &f; "}, {"sha": "4bc9b19642f618ec8c46fab2d12dbfdf02485dd1", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.fixed", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed?ref=3c95a28f4c21f2728c843a885bc29566115fc813", "patch": "@@ -13,7 +13,8 @@ fn test1_all_need_migration() {\n     let t2 = (String::new(), String::new());\n \n     let c = || { let _ = (&t, &t1, &t2); \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n \n         let _t = t.0;\n@@ -32,7 +33,8 @@ fn test2_only_precise_paths_need_migration() {\n     let t2 = (String::new(), String::new());\n \n     let c = || { let _ = (&t, &t1); \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n@@ -48,7 +50,8 @@ fn test3_only_by_value_need_migration() {\n     let t = (String::new(), String::new());\n     let t1 = (String::new(), String::new());\n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         println!(\"{}\", t1.1);\n@@ -66,7 +69,8 @@ fn test4_only_non_copy_types_need_migration() {\n     let t1 = (0i32, 0i32);\n \n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n@@ -84,7 +88,8 @@ fn test5_only_drop_types_need_migration() {\n     let s = S(0i32, 0i32);\n \n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         let _s = s.0;\n@@ -99,7 +104,8 @@ fn test6_move_closures_non_copy_types_might_need_migration() {\n     let t = (String::new(), String::new());\n     let t1 = (String::new(), String::new());\n     let c = move || { let _ = (&t1, &t); \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n         println!(\"{} {}\", t1.1, t.1);\n     };\n@@ -114,7 +120,8 @@ fn test7_drop_non_drop_aggregate_need_migration() {\n     let t = (String::new(), String::new(), 0i32);\n \n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };"}, {"sha": "446ce43a469dea4f5a786c197e4ade024593cfa1", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.rs?ref=3c95a28f4c21f2728c843a885bc29566115fc813", "patch": "@@ -13,7 +13,8 @@ fn test1_all_need_migration() {\n     let t2 = (String::new(), String::new());\n \n     let c = || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n \n         let _t = t.0;\n@@ -32,7 +33,8 @@ fn test2_only_precise_paths_need_migration() {\n     let t2 = (String::new(), String::new());\n \n     let c = || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n@@ -48,7 +50,8 @@ fn test3_only_by_value_need_migration() {\n     let t = (String::new(), String::new());\n     let t1 = (String::new(), String::new());\n     let c = || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         println!(\"{}\", t1.1);\n@@ -66,7 +69,8 @@ fn test4_only_non_copy_types_need_migration() {\n     let t1 = (0i32, 0i32);\n \n     let c = || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n@@ -84,7 +88,8 @@ fn test5_only_drop_types_need_migration() {\n     let s = S(0i32, 0i32);\n \n     let c = || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         let _s = s.0;\n@@ -99,7 +104,8 @@ fn test6_move_closures_non_copy_types_might_need_migration() {\n     let t = (String::new(), String::new());\n     let t1 = (String::new(), String::new());\n     let c = move || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n         println!(\"{} {}\", t1.1, t.1);\n     };\n@@ -114,7 +120,8 @@ fn test7_drop_non_drop_aggregate_need_migration() {\n     let t = (String::new(), String::new(), 0i32);\n \n     let c = || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };"}, {"sha": "0dfbcddc2795c6be07374b3ef41b41b1b3ebbf15", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.stderr", "status": "modified", "additions": 37, "deletions": 23, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr?ref=3c95a28f4c21f2728c843a885bc29566115fc813", "patch": "@@ -1,4 +1,4 @@\n-error: drop order affected for closure because of `capture_disjoint_fields`\n+error: drop order will change in Rust 2021\n   --> $DIR/insignificant_drop.rs:15:13\n    |\n LL |       let c = || {\n@@ -16,141 +16,155 @@ note: the lint level is defined here\n    |\n LL | #![deny(disjoint_capture_migration)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n    |\n LL |     let c = || { let _ = (&t, &t1, &t2); \n LL |\n LL |\n+LL |\n LL | \n LL |         let _t = t.0;\n-LL |         let _t1 = t1.0;\n  ...\n \n-error: drop order affected for closure because of `capture_disjoint_fields`\n-  --> $DIR/insignificant_drop.rs:34:13\n+error: drop order will change in Rust 2021\n+  --> $DIR/insignificant_drop.rs:35:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n-LL | |         let _t = t.0;\n-LL | |         let _t1 = t1.0;\n+LL | |\n+...  |\n LL | |         let _t2 = t2;\n LL | |     };\n    | |_____^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t`, `t1` to be fully captured\n    |\n LL |     let c = || { let _ = (&t, &t1); \n LL |\n LL |\n+LL |\n LL |         let _t = t.0;\n LL |         let _t1 = t1.0;\n-LL |         let _t2 = t2;\n  ...\n \n-error: drop order affected for closure because of `capture_disjoint_fields`\n-  --> $DIR/insignificant_drop.rs:50:13\n+error: drop order will change in Rust 2021\n+  --> $DIR/insignificant_drop.rs:52:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n+LL | |\n LL | |         let _t = t.0;\n LL | |         println!(\"{}\", t1.1);\n LL | |     };\n    | |_____^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; \n LL |\n LL |\n+LL |\n LL |         let _t = t.0;\n LL |         println!(\"{}\", t1.1);\n-LL |     };\n-   |\n+ ...\n \n-error: drop order affected for closure because of `capture_disjoint_fields`\n-  --> $DIR/insignificant_drop.rs:68:13\n+error: drop order will change in Rust 2021\n+  --> $DIR/insignificant_drop.rs:71:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n+LL | |\n LL | |         let _t = t.0;\n LL | |         let _t1 = t1.0;\n LL | |     };\n    | |_____^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; \n LL |\n LL |\n+LL |\n LL |         let _t = t.0;\n LL |         let _t1 = t1.0;\n-LL |     };\n-   |\n+ ...\n \n-error: drop order affected for closure because of `capture_disjoint_fields`\n-  --> $DIR/insignificant_drop.rs:86:13\n+error: drop order will change in Rust 2021\n+  --> $DIR/insignificant_drop.rs:90:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n+LL | |\n LL | |         let _t = t.0;\n LL | |         let _s = s.0;\n LL | |     };\n    | |_____^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; \n LL |\n LL |\n+LL |\n LL |         let _t = t.0;\n LL |         let _s = s.0;\n-LL |     };\n-   |\n+ ...\n \n-error: drop order affected for closure because of `capture_disjoint_fields`\n-  --> $DIR/insignificant_drop.rs:101:13\n+error: drop order will change in Rust 2021\n+  --> $DIR/insignificant_drop.rs:106:13\n    |\n LL |       let c = move || {\n    |  _____________^\n LL | |\n LL | |\n+LL | |\n LL | |         println!(\"{} {}\", t1.1, t.1);\n LL | |     };\n    | |_____^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t1`, `t` to be fully captured\n    |\n LL |     let c = move || { let _ = (&t1, &t); \n LL |\n LL |\n+LL |\n LL |         println!(\"{} {}\", t1.1, t.1);\n LL |     };\n    |\n \n-error: drop order affected for closure because of `capture_disjoint_fields`\n-  --> $DIR/insignificant_drop.rs:116:13\n+error: drop order will change in Rust 2021\n+  --> $DIR/insignificant_drop.rs:122:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n+LL | |\n LL | |         let _t = t.0;\n LL | |     };\n    | |_____^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; \n LL |\n LL |\n+LL |\n LL |         let _t = t.0;\n LL |     };\n    |"}, {"sha": "5a781219a72e03d75602e0a349da02c6d629e1ae", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.fixed", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed?ref=3c95a28f4c21f2728c843a885bc29566115fc813", "patch": "@@ -36,7 +36,8 @@ fn significant_drop_needs_migration() {\n     let t = (SigDrop {}, SigDrop {});\n \n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n@@ -53,7 +54,8 @@ fn generic_struct_with_significant_drop_needs_migration() {\n \n     // move is used to force i32 to be copied instead of being a ref\n     let c = move || { let _ = &t; \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.1;\n     };"}, {"sha": "d57da3265565e66a1a7a8ecb2126d43c4d99c59c", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.rs?ref=3c95a28f4c21f2728c843a885bc29566115fc813", "patch": "@@ -36,7 +36,8 @@ fn significant_drop_needs_migration() {\n     let t = (SigDrop {}, SigDrop {});\n \n     let c = || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n@@ -53,7 +54,8 @@ fn generic_struct_with_significant_drop_needs_migration() {\n \n     // move is used to force i32 to be copied instead of being a ref\n     let c = move || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.1;\n     };"}, {"sha": "d25f8f635be88f71d5ad5a03fc9ab130b4b0bed5", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr?ref=3c95a28f4c21f2728c843a885bc29566115fc813", "patch": "@@ -1,10 +1,11 @@\n-error: drop order affected for closure because of `capture_disjoint_fields`\n+error: drop order will change in Rust 2021\n   --> $DIR/insignificant_drop_attr_migrations.rs:38:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n+LL | |\n LL | |         let _t = t.0;\n LL | |     };\n    | |_____^\n@@ -14,31 +15,36 @@ note: the lint level is defined here\n    |\n LL | #![deny(disjoint_capture_migration)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; \n LL |\n LL |\n+LL |\n LL |         let _t = t.0;\n LL |     };\n    |\n \n-error: drop order affected for closure because of `capture_disjoint_fields`\n-  --> $DIR/insignificant_drop_attr_migrations.rs:55:13\n+error: drop order will change in Rust 2021\n+  --> $DIR/insignificant_drop_attr_migrations.rs:56:13\n    |\n LL |       let c = move || {\n    |  _____________^\n LL | |\n LL | |\n+LL | |\n LL | |         let _t = t.1;\n LL | |     };\n    | |_____^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = move || { let _ = &t; \n LL |\n LL |\n+LL |\n LL |         let _t = t.1;\n LL |     };\n    |"}, {"sha": "42b6ce54d3c0840b0eba1697018fd2d9920ac022", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.fixed", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed?ref=3c95a28f4c21f2728c843a885bc29566115fc813", "patch": "@@ -17,7 +17,8 @@ impl Drop for Foo {\n fn closure_contains_block() {\n     let t = (Foo(0), Foo(0));\n     let c = || { let _ = &t; \n-        //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n@@ -28,7 +29,8 @@ fn closure_contains_block() {\n fn closure_doesnt_contain_block() {\n     let t = (Foo(0), Foo(0));\n     let c = || { let _ = &t; t.0 };\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n \n     c();"}, {"sha": "ab0ed460fbaf43431fc6ff78de2a5ae01d06ff9a", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.rs?ref=3c95a28f4c21f2728c843a885bc29566115fc813", "patch": "@@ -17,7 +17,8 @@ impl Drop for Foo {\n fn closure_contains_block() {\n     let t = (Foo(0), Foo(0));\n     let c = || {\n-        //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n         //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n@@ -28,7 +29,8 @@ fn closure_contains_block() {\n fn closure_doesnt_contain_block() {\n     let t = (Foo(0), Foo(0));\n     let c = || t.0;\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n \n     c();"}, {"sha": "7b654f480a37251b4fc308b14e264df9434e29c7", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr?ref=3c95a28f4c21f2728c843a885bc29566115fc813", "patch": "@@ -1,10 +1,11 @@\n-error: drop order affected for closure because of `capture_disjoint_fields`\n+error: drop order will change in Rust 2021\n   --> $DIR/migrations_rustfix.rs:19:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n+LL | |\n LL | |         let _t = t.0;\n LL | |     };\n    | |_____^\n@@ -14,21 +15,24 @@ note: the lint level is defined here\n    |\n LL | #![deny(disjoint_capture_migration)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; \n LL |\n LL |\n+LL |\n LL |         let _t = t.0;\n LL |     };\n    |\n \n-error: drop order affected for closure because of `capture_disjoint_fields`\n-  --> $DIR/migrations_rustfix.rs:30:13\n+error: drop order will change in Rust 2021\n+  --> $DIR/migrations_rustfix.rs:31:13\n    |\n LL |     let c = || t.0;\n    |             ^^^^^^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; t.0 };"}, {"sha": "abff6802e958694551037b34dadacfcea9335014", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed?ref=3c95a28f4c21f2728c843a885bc29566115fc813", "patch": "@@ -13,7 +13,7 @@ fn foo_diverges() -> ! { panic!() }\n fn assert_panics<F>(f: F) where F: FnOnce() {\n     let f = panic::AssertUnwindSafe(f);\n     let result = panic::catch_unwind(move || { let _ = &f; \n-        //~^ ERROR: `UnwindSafe`, `RefUnwindSafe` trait implementation affected for closure because of `capture_disjoint_fields`\n+        //~^ ERROR: `UnwindSafe`, `RefUnwindSafe` trait implementation\n         //~| HELP: add a dummy let to cause `f` to be fully captured\n         f.0()\n     });"}, {"sha": "baa17e85b5217ccdc86671eb2d0eebb701abe826", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.rs?ref=3c95a28f4c21f2728c843a885bc29566115fc813", "patch": "@@ -13,7 +13,7 @@ fn foo_diverges() -> ! { panic!() }\n fn assert_panics<F>(f: F) where F: FnOnce() {\n     let f = panic::AssertUnwindSafe(f);\n     let result = panic::catch_unwind(move || {\n-        //~^ ERROR: `UnwindSafe`, `RefUnwindSafe` trait implementation affected for closure because of `capture_disjoint_fields`\n+        //~^ ERROR: `UnwindSafe`, `RefUnwindSafe` trait implementation\n         //~| HELP: add a dummy let to cause `f` to be fully captured\n         f.0()\n     });"}, {"sha": "8dca06a836ca370f91409f93c9c11b3730b6aa3b", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr?ref=3c95a28f4c21f2728c843a885bc29566115fc813", "patch": "@@ -1,4 +1,4 @@\n-error: `UnwindSafe`, `RefUnwindSafe` trait implementation affected for closure because of `capture_disjoint_fields`\n+error: `UnwindSafe`, `RefUnwindSafe` trait implementation will change in Rust 2021\n   --> $DIR/mir_calls_to_shims.rs:15:38\n    |\n LL |       let result = panic::catch_unwind(move || {\n@@ -14,6 +14,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(disjoint_capture_migration)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f` to be fully captured\n    |\n LL |     let result = panic::catch_unwind(move || { let _ = &f; "}, {"sha": "90ea1ed28836ddddd0eeebaabd7bfa367097cc28", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.fixed?ref=3c95a28f4c21f2728c843a885bc29566115fc813", "patch": "@@ -17,7 +17,7 @@ fn test_precise_analysis_drop_paths_not_captured_by_move() {\n     let t = ConstainsDropField(Foo(10), Foo(20));\n \n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         let _t = &t.1;\n@@ -40,7 +40,7 @@ fn test_precise_analysis_long_path_missing() {\n     let u = U(T(S, S), T(S, S));\n \n     let c = || { let _ = &u; \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n     //~| HELP: add a dummy let to cause `u` to be fully captured\n         let _x = u.0.0;\n         let _x = u.0.1;"}, {"sha": "cb432304592620029d14f68e1475970d3bd428af", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.rs?ref=3c95a28f4c21f2728c843a885bc29566115fc813", "patch": "@@ -17,7 +17,7 @@ fn test_precise_analysis_drop_paths_not_captured_by_move() {\n     let t = ConstainsDropField(Foo(10), Foo(20));\n \n     let c = || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         let _t = &t.1;\n@@ -40,7 +40,7 @@ fn test_precise_analysis_long_path_missing() {\n     let u = U(T(S, S), T(S, S));\n \n     let c = || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n     //~| HELP: add a dummy let to cause `u` to be fully captured\n         let _x = u.0.0;\n         let _x = u.0.1;"}, {"sha": "f010c51f1361ecd3fe8501a51501d54b872e84c7", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr?ref=3c95a28f4c21f2728c843a885bc29566115fc813", "patch": "@@ -1,4 +1,4 @@\n-error: drop order affected for closure because of `capture_disjoint_fields`\n+error: drop order will change in Rust 2021\n   --> $DIR/precise.rs:19:13\n    |\n LL |       let c = || {\n@@ -15,6 +15,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(disjoint_capture_migration)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; \n@@ -25,7 +26,7 @@ LL |         let _t = &t.1;\n LL |     };\n    |\n \n-error: drop order affected for closure because of `capture_disjoint_fields`\n+error: drop order will change in Rust 2021\n   --> $DIR/precise.rs:42:13\n    |\n LL |       let c = || {\n@@ -38,6 +39,7 @@ LL | |         let _x = u.1.0;\n LL | |     };\n    | |_____^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `u` to be fully captured\n    |\n LL |     let c = || { let _ = &u; "}, {"sha": "1c970175d182d906d826d87a01a9396460045bb9", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.fixed", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed?ref=3c95a28f4c21f2728c843a885bc29566115fc813", "patch": "@@ -23,7 +23,8 @@ fn test1_all_need_migration() {\n     let t2 = (Foo(0), Foo(0));\n \n     let c = || { let _ = (&t, &t1, &t2); \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n@@ -41,7 +42,8 @@ fn test2_only_precise_paths_need_migration() {\n     let t2 = (Foo(0), Foo(0));\n \n     let c = || { let _ = (&t, &t1); \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n@@ -57,7 +59,8 @@ fn test3_only_by_value_need_migration() {\n     let t = (Foo(0), Foo(0));\n     let t1 = (Foo(0), Foo(0));\n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         println!(\"{:?}\", t1.1);\n@@ -74,7 +77,8 @@ fn test4_type_contains_drop_need_migration() {\n     let t = ConstainsDropField(Foo(0), Foo(0));\n \n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n@@ -89,7 +93,8 @@ fn test5_drop_non_drop_aggregate_need_migration() {\n     let t = (Foo(0), Foo(0), 0i32);\n \n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n@@ -102,7 +107,8 @@ fn test6_significant_insignificant_drop_aggregate_need_migration() {\n     let t = (Foo(0), String::new());\n \n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.1;\n     };\n@@ -117,7 +123,8 @@ fn test7_move_closures_non_copy_types_might_need_migration() {\n     let t1 = (Foo(0), Foo(0), Foo(0));\n \n     let c = move || { let _ = (&t1, &t); \n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n         println!(\"{:?} {:?}\", t1.1, t.1);\n     };"}, {"sha": "c479a6a54f09b47f62e623b9500e476b6232b41e", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs?ref=3c95a28f4c21f2728c843a885bc29566115fc813", "patch": "@@ -23,7 +23,8 @@ fn test1_all_need_migration() {\n     let t2 = (Foo(0), Foo(0));\n \n     let c = || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n@@ -41,7 +42,8 @@ fn test2_only_precise_paths_need_migration() {\n     let t2 = (Foo(0), Foo(0));\n \n     let c = || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n@@ -57,7 +59,8 @@ fn test3_only_by_value_need_migration() {\n     let t = (Foo(0), Foo(0));\n     let t1 = (Foo(0), Foo(0));\n     let c = || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         println!(\"{:?}\", t1.1);\n@@ -74,7 +77,8 @@ fn test4_type_contains_drop_need_migration() {\n     let t = ConstainsDropField(Foo(0), Foo(0));\n \n     let c = || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n@@ -89,7 +93,8 @@ fn test5_drop_non_drop_aggregate_need_migration() {\n     let t = (Foo(0), Foo(0), 0i32);\n \n     let c = || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n@@ -102,7 +107,8 @@ fn test6_significant_insignificant_drop_aggregate_need_migration() {\n     let t = (Foo(0), String::new());\n \n     let c = || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.1;\n     };\n@@ -117,7 +123,8 @@ fn test7_move_closures_non_copy_types_might_need_migration() {\n     let t1 = (Foo(0), Foo(0), Foo(0));\n \n     let c = move || {\n-    //~^ ERROR: drop order affected for closure because of `capture_disjoint_fields`\n+    //~^ ERROR: drop order\n+    //~| NOTE: for more information, see\n     //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n         println!(\"{:?} {:?}\", t1.1, t.1);\n     };"}, {"sha": "873a9100bee4b86a7e3bb926579cff7a27cc703c", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.stderr", "status": "modified", "additions": 37, "deletions": 21, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c95a28f4c21f2728c843a885bc29566115fc813/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr?ref=3c95a28f4c21f2728c843a885bc29566115fc813", "patch": "@@ -1,12 +1,12 @@\n-error: drop order affected for closure because of `capture_disjoint_fields`\n+error: drop order will change in Rust 2021\n   --> $DIR/significant_drop.rs:25:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n-LL | |         let _t = t.0;\n-LL | |         let _t1 = t1.0;\n+LL | |\n+...  |\n LL | |         let _t2 = t2.0;\n LL | |     };\n    | |_____^\n@@ -16,137 +16,153 @@ note: the lint level is defined here\n    |\n LL | #![deny(disjoint_capture_migration)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n    |\n LL |     let c = || { let _ = (&t, &t1, &t2); \n LL |\n LL |\n+LL |\n LL |         let _t = t.0;\n LL |         let _t1 = t1.0;\n-LL |         let _t2 = t2.0;\n  ...\n \n-error: drop order affected for closure because of `capture_disjoint_fields`\n-  --> $DIR/significant_drop.rs:43:13\n+error: drop order will change in Rust 2021\n+  --> $DIR/significant_drop.rs:44:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n-LL | |         let _t = t.0;\n-LL | |         let _t1 = t1.0;\n+LL | |\n+...  |\n LL | |         let _t2 = t2;\n LL | |     };\n    | |_____^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t`, `t1` to be fully captured\n    |\n LL |     let c = || { let _ = (&t, &t1); \n LL |\n LL |\n+LL |\n LL |         let _t = t.0;\n LL |         let _t1 = t1.0;\n-LL |         let _t2 = t2;\n  ...\n \n-error: drop order affected for closure because of `capture_disjoint_fields`\n-  --> $DIR/significant_drop.rs:59:13\n+error: drop order will change in Rust 2021\n+  --> $DIR/significant_drop.rs:61:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n+LL | |\n LL | |         let _t = t.0;\n LL | |         println!(\"{:?}\", t1.1);\n LL | |     };\n    | |_____^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; \n LL |\n LL |\n+LL |\n LL |         let _t = t.0;\n LL |         println!(\"{:?}\", t1.1);\n-LL |     };\n-   |\n+ ...\n \n-error: drop order affected for closure because of `capture_disjoint_fields`\n-  --> $DIR/significant_drop.rs:76:13\n+error: drop order will change in Rust 2021\n+  --> $DIR/significant_drop.rs:79:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n+LL | |\n LL | |         let _t = t.0;\n LL | |     };\n    | |_____^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; \n LL |\n LL |\n+LL |\n LL |         let _t = t.0;\n LL |     };\n    |\n \n-error: drop order affected for closure because of `capture_disjoint_fields`\n-  --> $DIR/significant_drop.rs:91:13\n+error: drop order will change in Rust 2021\n+  --> $DIR/significant_drop.rs:95:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n+LL | |\n LL | |         let _t = t.0;\n LL | |     };\n    | |_____^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; \n LL |\n LL |\n+LL |\n LL |         let _t = t.0;\n LL |     };\n    |\n \n-error: drop order affected for closure because of `capture_disjoint_fields`\n-  --> $DIR/significant_drop.rs:104:13\n+error: drop order will change in Rust 2021\n+  --> $DIR/significant_drop.rs:109:13\n    |\n LL |       let c = || {\n    |  _____________^\n LL | |\n LL | |\n+LL | |\n LL | |         let _t = t.1;\n LL | |     };\n    | |_____^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n LL |     let c = || { let _ = &t; \n LL |\n LL |\n+LL |\n LL |         let _t = t.1;\n LL |     };\n    |\n \n-error: drop order affected for closure because of `capture_disjoint_fields`\n-  --> $DIR/significant_drop.rs:119:13\n+error: drop order will change in Rust 2021\n+  --> $DIR/significant_drop.rs:125:13\n    |\n LL |       let c = move || {\n    |  _____________^\n LL | |\n LL | |\n+LL | |\n LL | |         println!(\"{:?} {:?}\", t1.1, t.1);\n LL | |     };\n    | |_____^\n    |\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t1`, `t` to be fully captured\n    |\n LL |     let c = move || { let _ = (&t1, &t); \n LL |\n LL |\n+LL |\n LL |         println!(\"{:?} {:?}\", t1.1, t.1);\n LL |     };\n    |"}]}