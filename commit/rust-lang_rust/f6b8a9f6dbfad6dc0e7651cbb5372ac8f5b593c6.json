{"sha": "f6b8a9f6dbfad6dc0e7651cbb5372ac8f5b593c6", "node_id": "C_kwDOAAsO6NoAKGY2YjhhOWY2ZGJmYWQ2ZGMwZTc2NTFjYmI1MzcyYWM4ZjViNTkzYzY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-08T20:24:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-08T20:24:51Z"}, "message": "Rollup merge of #108883 - compiler-errors:post-norm-copy-err, r=BoxyUwU\n\nSuppress copy impl error when post-normalized type references errors\n\nSuppress spurious errors from the `Copy` impl validity check when fields have bad types *post*-normalization, instead of just pre-normalization.\n\n----\n\nThe const-generics test regressed recently due to #107965, cc `````@BoxyUwU.`````\n * I think it's because `[_; 0u32]: Copy` now fails to hold because a nested obligation `ConstArgHasType(0u32, usize)` fails.\n * It's interesting that `[const_error]` shows up in the type only after normalization, though, but I'm pretty sure that it's due to the evaluate call that happens when normalizing unevaluated consts.", "tree": {"sha": "e94262c0badd9a0f44da84a96123d437c26eadf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e94262c0badd9a0f44da84a96123d437c26eadf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6b8a9f6dbfad6dc0e7651cbb5372ac8f5b593c6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkCO8TCRBK7hj4Ov3rIwAAnm0IABSifDPdL0yYbU4qfxY9dh66\nBMcfLdkeChHv4hFcohWksR5tLH3Xprg4vhoFwELbuw0btQr0olpONU99MXf31eI7\nr8WHf9uMxrCAUPM/k+ZdTcn6RY9uw0qbTdlmTRsC9EbrugVvrQryA+rnRPg9dmM8\ntQ+A7xmdVR+y4y2dynHXZyc8F3qktXG1I3H5IYi/q7cll195Od6D8vulIMe7deDF\n/kMzb1K2tblusufeXAlhurMGNxEfIlU+XgDR34GEQw6jxQiMllkMZJGg5f0lwfad\nkbGqB0eaYJiC43FSFXjfoyehPZ04+UOscZGXFoPhq9HmfhG3ROvG0qIY/rYIKso=\n=EkEb\n-----END PGP SIGNATURE-----\n", "payload": "tree e94262c0badd9a0f44da84a96123d437c26eadf4\nparent 1a9376dc47860ca4bbd21e2b5bb8fb64bba81af0\nparent 8a99ffc3442329d2fb2f07ce87852c3e12cc4d6a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678307091 +0100\ncommitter GitHub <noreply@github.com> 1678307091 +0100\n\nRollup merge of #108883 - compiler-errors:post-norm-copy-err, r=BoxyUwU\n\nSuppress copy impl error when post-normalized type references errors\n\nSuppress spurious errors from the `Copy` impl validity check when fields have bad types *post*-normalization, instead of just pre-normalization.\n\n----\n\nThe const-generics test regressed recently due to #107965, cc `````@BoxyUwU.`````\n * I think it's because `[_; 0u32]: Copy` now fails to hold because a nested obligation `ConstArgHasType(0u32, usize)` fails.\n * It's interesting that `[const_error]` shows up in the type only after normalization, though, but I'm pretty sure that it's due to the evaluate call that happens when normalizing unevaluated consts.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6b8a9f6dbfad6dc0e7651cbb5372ac8f5b593c6", "html_url": "https://github.com/rust-lang/rust/commit/f6b8a9f6dbfad6dc0e7651cbb5372ac8f5b593c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6b8a9f6dbfad6dc0e7651cbb5372ac8f5b593c6/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a9376dc47860ca4bbd21e2b5bb8fb64bba81af0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a9376dc47860ca4bbd21e2b5bb8fb64bba81af0", "html_url": "https://github.com/rust-lang/rust/commit/1a9376dc47860ca4bbd21e2b5bb8fb64bba81af0"}, {"sha": "8a99ffc3442329d2fb2f07ce87852c3e12cc4d6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a99ffc3442329d2fb2f07ce87852c3e12cc4d6a", "html_url": "https://github.com/rust-lang/rust/commit/8a99ffc3442329d2fb2f07ce87852c3e12cc4d6a"}], "stats": {"total": 50, "additions": 49, "deletions": 1}, "files": [{"sha": "336db4fee6ced7e4981a31b6eb5b6e1dc43cb039", "filename": "compiler/rustc_trait_selection/src/traits/misc.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f6b8a9f6dbfad6dc0e7651cbb5372ac8f5b593c6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6b8a9f6dbfad6dc0e7651cbb5372ac8f5b593c6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs?ref=f6b8a9f6dbfad6dc0e7651cbb5372ac8f5b593c6", "patch": "@@ -87,7 +87,12 @@ pub fn type_allowed_to_implement_copy<'tcx>(\n             };\n             let ty = ocx.normalize(&normalization_cause, param_env, unnormalized_ty);\n             let normalization_errors = ocx.select_where_possible();\n-            if !normalization_errors.is_empty() {\n+\n+            // NOTE: The post-normalization type may also reference errors,\n+            // such as when we project to a missing type or we have a mismatch\n+            // between expected and found const-generic types. Don't report an\n+            // additional copy error here, since it's not typically useful.\n+            if !normalization_errors.is_empty() || ty.references_error() {\n                 tcx.sess.delay_span_bug(field_span, format!(\"couldn't normalize struct field `{unnormalized_ty}` when checking Copy implementation\"));\n                 continue;\n             }"}, {"sha": "797443a0abe5a99db1a1a985a6d0190bd7b0b377", "filename": "tests/ui/coherence/illegal-copy-bad-projection.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f6b8a9f6dbfad6dc0e7651cbb5372ac8f5b593c6/tests%2Fui%2Fcoherence%2Fillegal-copy-bad-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6b8a9f6dbfad6dc0e7651cbb5372ac8f5b593c6/tests%2Fui%2Fcoherence%2Fillegal-copy-bad-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoherence%2Fillegal-copy-bad-projection.rs?ref=f6b8a9f6dbfad6dc0e7651cbb5372ac8f5b593c6", "patch": "@@ -0,0 +1,16 @@\n+trait AsPtr {\n+    type Ptr;\n+}\n+\n+impl AsPtr for () {\n+    type Ptr = *const void;\n+    //~^ ERROR cannot find type `void` in this scope\n+}\n+\n+#[derive(Copy, Clone)]\n+struct Foo {\n+    p: <() as AsPtr>::Ptr,\n+    // Do not report a \"`Copy` cannot be implemented\" here.\n+}\n+\n+fn main() {}"}, {"sha": "8fed9ba23b24b74378644dd6608e143ce43eed22", "filename": "tests/ui/coherence/illegal-copy-bad-projection.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f6b8a9f6dbfad6dc0e7651cbb5372ac8f5b593c6/tests%2Fui%2Fcoherence%2Fillegal-copy-bad-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6b8a9f6dbfad6dc0e7651cbb5372ac8f5b593c6/tests%2Fui%2Fcoherence%2Fillegal-copy-bad-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoherence%2Fillegal-copy-bad-projection.stderr?ref=f6b8a9f6dbfad6dc0e7651cbb5372ac8f5b593c6", "patch": "@@ -0,0 +1,9 @@\n+error[E0412]: cannot find type `void` in this scope\n+  --> $DIR/illegal-copy-bad-projection.rs:6:23\n+   |\n+LL |     type Ptr = *const void;\n+   |                       ^^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "b5663464cf42281f369e0aff4c9a6b18cf78df79", "filename": "tests/ui/const-generics/bad-generic-in-copy-impl.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f6b8a9f6dbfad6dc0e7651cbb5372ac8f5b593c6/tests%2Fui%2Fconst-generics%2Fbad-generic-in-copy-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6b8a9f6dbfad6dc0e7651cbb5372ac8f5b593c6/tests%2Fui%2Fconst-generics%2Fbad-generic-in-copy-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fbad-generic-in-copy-impl.rs?ref=f6b8a9f6dbfad6dc0e7651cbb5372ac8f5b593c6", "patch": "@@ -0,0 +1,9 @@\n+#[derive(Copy, Clone)]\n+pub struct Foo {\n+    x: [u8; SIZE],\n+    //~^ ERROR mismatched types\n+}\n+\n+const SIZE: u32 = 1;\n+\n+fn main() {}"}, {"sha": "25701ce68ccc81a6d60086da246ef82eec2318d8", "filename": "tests/ui/const-generics/bad-generic-in-copy-impl.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f6b8a9f6dbfad6dc0e7651cbb5372ac8f5b593c6/tests%2Fui%2Fconst-generics%2Fbad-generic-in-copy-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6b8a9f6dbfad6dc0e7651cbb5372ac8f5b593c6/tests%2Fui%2Fconst-generics%2Fbad-generic-in-copy-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fbad-generic-in-copy-impl.stderr?ref=f6b8a9f6dbfad6dc0e7651cbb5372ac8f5b593c6", "patch": "@@ -0,0 +1,9 @@\n+error[E0308]: mismatched types\n+  --> $DIR/bad-generic-in-copy-impl.rs:3:13\n+   |\n+LL |     x: [u8; SIZE],\n+   |             ^^^^ expected `usize`, found `u32`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}