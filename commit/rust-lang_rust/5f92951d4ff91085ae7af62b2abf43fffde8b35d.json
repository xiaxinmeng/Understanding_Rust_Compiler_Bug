{"sha": "5f92951d4ff91085ae7af62b2abf43fffde8b35d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmOTI5NTFkNGZmOTEwODVhZTdhZjYyYjJhYmY0M2ZmZmRlOGIzNWQ=", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-04-04T02:08:14Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-04-04T05:27:38Z"}, "message": "rustdoc: sort search index items for compression\n\nThis should not affect the appearance of the docs pages themselves.\n\nThis makes the pre-compressed search index smaller, thanks to the\nempty-string path duplication format, and also the gzipped version,\nby giving the algorithm more structure to work with.\n\n    rust$ wc -c search-index-old.js search-index-new.js\n    2628334 search-index-old.js\n    2586181 search-index-new.js\n    5214515 total\n    rust$ gzip search-index-*\n    rust$ wc -c search-index-old.js.gz search-index-new.js.gz\n    239486 search-index-old.js.gz\n    237386 search-index-new.js.gz\n    476872 total", "tree": {"sha": "561f1f0c905cc8780d780ecaebff2bb31c1a458e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/561f1f0c905cc8780d780ecaebff2bb31c1a458e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f92951d4ff91085ae7af62b2abf43fffde8b35d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f92951d4ff91085ae7af62b2abf43fffde8b35d", "html_url": "https://github.com/rust-lang/rust/commit/5f92951d4ff91085ae7af62b2abf43fffde8b35d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f92951d4ff91085ae7af62b2abf43fffde8b35d/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b417ab5cdfdedffd74fb22cf22d27033c851304", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b417ab5cdfdedffd74fb22cf22d27033c851304", "html_url": "https://github.com/rust-lang/rust/commit/0b417ab5cdfdedffd74fb22cf22d27033c851304"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "49a91240b6ac8a350b63f0cbe104160d9f783cbf", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f92951d4ff91085ae7af62b2abf43fffde8b35d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f92951d4ff91085ae7af62b2abf43fffde8b35d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=5f92951d4ff91085ae7af62b2abf43fffde8b35d", "patch": "@@ -914,7 +914,7 @@ impl Attributes {\n             .collect()\n     }\n \n-    crate fn get_doc_aliases(&self) -> FxHashSet<String> {\n+    crate fn get_doc_aliases(&self) -> Box<[String]> {\n         let mut aliases = FxHashSet::default();\n \n         for attr in self.other_attrs.lists(sym::doc).filter(|a| a.has_name(sym::alias)) {\n@@ -931,7 +931,7 @@ impl Attributes {\n                 aliases.insert(attr.value_str().map(|s| s.to_string()).unwrap());\n             }\n         }\n-        aliases\n+        aliases.into_iter().collect::<Vec<String>>().into()\n     }\n }\n "}, {"sha": "7100cc87b0cc19fdae6c49f67a6fa4950363cb7e", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5f92951d4ff91085ae7af62b2abf43fffde8b35d/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f92951d4ff91085ae7af62b2abf43fffde8b35d/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=5f92951d4ff91085ae7af62b2abf43fffde8b35d", "patch": "@@ -309,15 +309,8 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                             parent,\n                             parent_idx: None,\n                             search_type: get_index_search_type(&item, &self.empty_cache, self.tcx),\n+                            aliases: item.attrs.get_doc_aliases(),\n                         });\n-\n-                        for alias in item.attrs.get_doc_aliases() {\n-                            self.cache\n-                                .aliases\n-                                .entry(alias.to_lowercase())\n-                                .or_insert(Vec::new())\n-                                .push(self.cache.search_index.len() - 1);\n-                        }\n                     }\n                 }\n                 (Some(parent), None) if is_inherent_impl_item => {"}, {"sha": "022afee3105c5229be1cc8e45aa19f94c517cf58", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5f92951d4ff91085ae7af62b2abf43fffde8b35d/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f92951d4ff91085ae7af62b2abf43fffde8b35d/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=5f92951d4ff91085ae7af62b2abf43fffde8b35d", "patch": "@@ -82,19 +82,28 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n                 parent: Some(did),\n                 parent_idx: None,\n                 search_type: get_index_search_type(&item, cache, tcx),\n+                aliases: item.attrs.get_doc_aliases(),\n             });\n-            for alias in item.attrs.get_doc_aliases() {\n-                cache\n-                    .aliases\n-                    .entry(alias.to_lowercase())\n-                    .or_insert(Vec::new())\n-                    .push(cache.search_index.len() - 1);\n-            }\n         }\n     }\n \n     let Cache { ref mut search_index, ref paths, ref mut aliases, .. } = *cache;\n \n+    // Sort search index items. This improves the compressibility of the search index.\n+    search_index.sort_unstable_by(|k1, k2| {\n+        // `sort_unstable_by_key` produces lifetime errors\n+        let k1 = (&k1.path, &k1.name, &k1.ty, &k1.parent);\n+        let k2 = (&k2.path, &k2.name, &k2.ty, &k2.parent);\n+        std::cmp::Ord::cmp(&k1, &k2)\n+    });\n+\n+    // Set up alias indexes.\n+    for (i, item) in search_index.iter().enumerate() {\n+        for alias in &item.aliases[..] {\n+            aliases.entry(alias.to_lowercase()).or_insert(Vec::new()).push(i);\n+        }\n+    }\n+\n     // Reduce `DefId` in paths into smaller sequential numbers,\n     // and prune the paths that do not appear in the index.\n     let mut lastpath = String::new();"}, {"sha": "cb5ca5b5e64181f41b768f51d3ead2911c93be27", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f92951d4ff91085ae7af62b2abf43fffde8b35d/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f92951d4ff91085ae7af62b2abf43fffde8b35d/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=5f92951d4ff91085ae7af62b2abf43fffde8b35d", "patch": "@@ -164,6 +164,7 @@ crate struct IndexItem {\n     crate parent: Option<DefId>,\n     crate parent_idx: Option<usize>,\n     crate search_type: Option<IndexItemFunctionType>,\n+    crate aliases: Box<[String]>,\n }\n \n /// A type used for the search index."}]}