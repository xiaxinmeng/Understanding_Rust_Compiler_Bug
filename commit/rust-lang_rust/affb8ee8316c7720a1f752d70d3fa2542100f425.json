{"sha": "affb8ee8316c7720a1f752d70d3fa2542100f425", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmZmI4ZWU4MzE2Yzc3MjBhMWY3NTJkNzBkM2ZhMjU0MjEwMGY0MjU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-06-25T02:29:10Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-07-07T22:56:27Z"}, "message": "Remove more anonymous trait method parameters", "tree": {"sha": "50e1a78ada52e9b19e6657f46b176f319811e442", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50e1a78ada52e9b19e6657f46b176f319811e442"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/affb8ee8316c7720a1f752d70d3fa2542100f425", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/affb8ee8316c7720a1f752d70d3fa2542100f425", "html_url": "https://github.com/rust-lang/rust/commit/affb8ee8316c7720a1f752d70d3fa2542100f425", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/affb8ee8316c7720a1f752d70d3fa2542100f425/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13157c4ebcca735a0842bd03c3dad1de7c429f9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/13157c4ebcca735a0842bd03c3dad1de7c429f9f", "html_url": "https://github.com/rust-lang/rust/commit/13157c4ebcca735a0842bd03c3dad1de7c429f9f"}], "stats": {"total": 106, "additions": 54, "deletions": 52}, "files": [{"sha": "08184d62679ea42b30e00dc54409b967d126f5e9", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -614,7 +614,7 @@ use std::mem::transmute;\n struct Foo<T>(Vec<T>);\n \n trait MyTransmutableType: Sized {\n-    fn transmute(Vec<Self>) -> Foo<Self>;\n+    fn transmute(_: Vec<Self>) -> Foo<Self>;\n }\n \n impl MyTransmutableType for u8 {"}, {"sha": "9193ac0fcd66e3fe4cee952cd201b8c731b5dacf", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -837,7 +837,7 @@ impl Something {} // ok!\n trait Foo {\n     type N;\n \n-    fn bar(Self::N); // ok!\n+    fn bar(_: Self::N); // ok!\n }\n \n // or:"}, {"sha": "2f111c9e9d11aef4f24b7f0486a780701be0b4a5", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -2476,7 +2476,7 @@ trait T2 {\n     type Bar;\n \n     // error: Baz is used but not declared\n-    fn return_bool(&self, &Self::Bar, &Self::Baz) -> bool;\n+    fn return_bool(&self, _: &Self::Bar, _: &Self::Baz) -> bool;\n }\n ```\n \n@@ -2498,7 +2498,7 @@ trait T2 {\n     type Baz; // we declare `Baz` in our trait.\n \n     // and now we can use it here:\n-    fn return_bool(&self, &Self::Bar, &Self::Baz) -> bool;\n+    fn return_bool(&self, _: &Self::Bar, _: &Self::Baz) -> bool;\n }\n ```\n \"##,"}, {"sha": "74a388e726991aedfe631ce756659c2cda6ec1ce", "filename": "src/test/compile-fail/associated-types-ICE-when-projecting-out-of-err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -25,7 +25,7 @@ pub trait Sized {\n trait Add<RHS=Self> {\n     type Output;\n \n-    fn add(self, RHS) -> Self::Output;\n+    fn add(self, _: RHS) -> Self::Output;\n }\n \n fn ice<A>(a: A) {"}, {"sha": "78b079a7c44a4ac307edf34b8af0e906e5375bcb", "filename": "src/test/compile-fail/issue-13853-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Fcompile-fail%2Fissue-13853-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Fcompile-fail%2Fissue-13853-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13853-5.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -11,7 +11,7 @@\n trait Deserializer<'a> { }\n \n trait Deserializable {\n-    fn deserialize_token<'a, D: Deserializer<'a>>(D, &'a str) -> Self;\n+    fn deserialize_token<'a, D: Deserializer<'a>>(_: D, _: &'a str) -> Self;\n }\n \n impl<'a, T: Deserializable> Deserializable for &'a str {"}, {"sha": "dd17189aeea68a50275805f12724e171da4d9838", "filename": "src/test/compile-fail/issue-18400.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Fcompile-fail%2Fissue-18400.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Fcompile-fail%2Fissue-18400.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18400.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n trait Set<T> {\n-    fn contains(&self, T) -> bool;\n-    fn set(&mut self, T);\n+    fn contains(&self, _: T) -> bool;\n+    fn set(&mut self, _: T);\n }\n \n impl<'a, T, S> Set<&'a [T]> for S where"}, {"sha": "323cd24d8dda5a08dafcfd7f5edf9ccc10f0095f", "filename": "src/test/compile-fail/issue-20831-debruijn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Fcompile-fail%2Fissue-20831-debruijn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Fcompile-fail%2Fissue-20831-debruijn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20831-debruijn.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -22,7 +22,7 @@ pub trait Subscriber {\n \n pub trait Publisher<'a> {\n     type Output;\n-    fn subscribe(&mut self, Box<Subscriber<Input=Self::Output> + 'a>);\n+    fn subscribe(&mut self, _: Box<Subscriber<Input=Self::Output> + 'a>);\n }\n \n pub trait Processor<'a> : Subscriber + Publisher<'a> { }"}, {"sha": "1942fd38d11fa9f0902a290a6cb88c05e2d8e29a", "filename": "src/test/compile-fail/issue-35869.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Fcompile-fail%2Fissue-35869.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Fcompile-fail%2Fissue-35869.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-35869.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -11,9 +11,9 @@\n #![feature(conservative_impl_trait)]\n \n trait Foo {\n-    fn foo(fn(u8) -> ()); //~ NOTE type in trait\n-    fn bar(Option<u8>); //~ NOTE type in trait\n-    fn baz((u8, u16)); //~ NOTE type in trait\n+    fn foo(_: fn(u8) -> ()); //~ NOTE type in trait\n+    fn bar(_: Option<u8>); //~ NOTE type in trait\n+    fn baz(_: (u8, u16)); //~ NOTE type in trait\n     fn qux() -> u8; //~ NOTE type in trait\n }\n "}, {"sha": "7de061eaf077dd6407053ca4af6c7a9d00ae079a", "filename": "src/test/compile-fail/type-params-in-different-spaces-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-2.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -12,7 +12,7 @@\n // type parameters on a trait correctly.\n \n trait Tr<T> : Sized {\n-    fn op(T) -> Self;\n+    fn op(_: T) -> Self;\n }\n \n trait A:    Tr<Self> {"}, {"sha": "ff446f175b756e529e5a3cd8ca727bbfd4e272d5", "filename": "src/test/compile-fail/variance-trait-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Fcompile-fail%2Fvariance-trait-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Fcompile-fail%2Fvariance-trait-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-trait-bounds.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -19,7 +19,7 @@ trait Getter<T> {\n }\n \n trait Setter<T> {\n-    fn get(&self, T);\n+    fn get(&self, _: T);\n }\n \n #[rustc_variance]"}, {"sha": "14e94dbff6caf1b8e118be644fb3c0b7ad8b8720", "filename": "src/test/run-pass/associated-types-projection-in-object-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-object-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-object-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-projection-in-object-type.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -26,7 +26,7 @@ pub trait Subscriber {\n \n pub trait Publisher<'a> {\n     type Output;\n-    fn subscribe(&mut self, Box<Subscriber<Input=Self::Output> + 'a>);\n+    fn subscribe(&mut self, _: Box<Subscriber<Input=Self::Output> + 'a>);\n }\n \n pub trait Processor<'a> : Subscriber + Publisher<'a> { }"}, {"sha": "46035731c30a1cfaeb4e4cb70fdc3b9349ef2df9", "filename": "src/test/run-pass/auxiliary/issue_3979_traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_3979_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_3979_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_3979_traits.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -13,7 +13,7 @@\n #![crate_type = \"lib\"]\n \n pub trait Positioned {\n-  fn SetX(&mut self, isize);\n+  fn SetX(&mut self, _: isize);\n   fn X(&self) -> isize;\n }\n "}, {"sha": "66c0300e260b82d31267527e7f4e082c09a1aaac", "filename": "src/test/run-pass/auxiliary/xcrate-trait-lifetime-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fauxiliary%2Fxcrate-trait-lifetime-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fauxiliary%2Fxcrate-trait-lifetime-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fxcrate-trait-lifetime-param.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub trait FromBuf<'a> {\n-    fn from_buf(&'a [u8]) -> Self;\n+    fn from_buf(_: &'a [u8]) -> Self;\n }"}, {"sha": "b6e640ab5b5b6a62bbb27d28e5d3f3fa59d6c46a", "filename": "src/test/run-pass/dropck_legal_cycles.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fdropck_legal_cycles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fdropck_legal_cycles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdropck_legal_cycles.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -442,7 +442,7 @@ pub fn main() {\n }\n \n trait Named {\n-    fn new(&'static str) -> Self;\n+    fn new(_: &'static str) -> Self;\n     fn name(&self) -> &str;\n }\n \n@@ -932,9 +932,9 @@ trait Context {\n }\n \n trait PrePost<T> {\n-    fn pre(&mut self, &T);\n-    fn post(&mut self, &T);\n-    fn hit_limit(&mut self, &T);\n+    fn pre(&mut self, _: &T);\n+    fn post(&mut self, _: &T);\n+    fn hit_limit(&mut self, _: &T);\n }\n \n trait Children<'a> {"}, {"sha": "f2a606a8bba30c02b335c973d927f9bb9bba157b", "filename": "src/test/run-pass/issue-13105.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fissue-13105.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fissue-13105.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13105.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -11,6 +11,7 @@\n // pretty-expanded FIXME #23616\n \n trait Foo {\n+    #[allow(anonymous_parameters)]\n     fn quux(u8) {}\n }\n "}, {"sha": "c69ae6a15cd376298233397cf25076e598e48442", "filename": "src/test/run-pass/issue-13775.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fissue-13775.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fissue-13775.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13775.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -11,6 +11,7 @@\n // pretty-expanded FIXME #23616\n \n trait Foo {\n+    #[allow(anonymous_parameters)]\n     fn bar(&self, isize) {}\n }\n "}, {"sha": "5d0fde01798dcbff764028c69831856fd2d0ab5a", "filename": "src/test/run-pass/issue-14919.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fissue-14919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fissue-14919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14919.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -26,7 +26,7 @@ impl<'a, 'b> Matcher for CharPredMatcher<'a, 'b> {\n }\n \n trait IntoMatcher<'a, T> {\n-    fn into_matcher(self, &'a str) -> T;\n+    fn into_matcher(self, _: &'a str) -> T;\n }\n \n impl<'a, 'b, F> IntoMatcher<'a, CharPredMatcher<'a, 'b>> for F where F: FnMut(char) -> bool + 'b {"}, {"sha": "e526dd2903e530c4a4e13dd9eb08ae1f80f1d282", "filename": "src/test/run-pass/issue-19098.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fissue-19098.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fissue-19098.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19098.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub trait Handler {\n-    fn handle(&self, &mut String);\n+    fn handle(&self, _: &mut String);\n }\n \n impl<F> Handler for F where F: for<'a, 'b> Fn(&'a mut String) {"}, {"sha": "9fdd89e25a1945f367ae43530c8cc4b091576c40", "filename": "src/test/run-pass/issue-21726.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fissue-21726.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fissue-21726.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21726.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -23,7 +23,7 @@ fn foo<'a>(s: &'a str) {\n \n trait IntoRef<'a> {\n     type T: Clone;\n-    fn into_ref(self, &'a str) -> Self::T;\n+    fn into_ref(self, _: &'a str) -> Self::T;\n }\n \n impl<'a> IntoRef<'a> for () {"}, {"sha": "17d2bee74661964bc0e7c6ddc4f92906199a1882", "filename": "src/test/run-pass/issue-34074.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fissue-34074.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fissue-34074.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-34074.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -8,9 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Make sure several unnamed function arguments don't conflict with each other\n+// Make sure several unnamed function parameters don't conflict with each other\n \n trait Tr {\n+    #[allow(anonymous_parameters)]\n     fn f(u8, u8) {}\n }\n "}, {"sha": "2b56799f6b07ce5acec7385a7ba7005b73ae4b13", "filename": "src/test/run-pass/issue-3979-generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fissue-3979-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fissue-3979-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3979-generics.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -12,7 +12,7 @@\n use std::ops::Add;\n \n trait Positioned<S> {\n-  fn SetX(&mut self, S);\n+  fn SetX(&mut self, _: S);\n   fn X(&self) -> S;\n }\n "}, {"sha": "9b5f7296ab5922bdeeb1edccef48c532a14e54c2", "filename": "src/test/run-pass/issue-3979.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fissue-3979.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fissue-3979.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3979.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -10,7 +10,7 @@\n \n \n trait Positioned {\n-  fn SetX(&mut self, isize);\n+  fn SetX(&mut self, _: isize);\n   fn X(&self) -> isize;\n }\n "}, {"sha": "6c5f4bf36de836b5eddafd8011e8d0b1e6cc455c", "filename": "src/test/run-pass/issue-4107.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fissue-4107.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fissue-4107.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4107.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -13,7 +13,7 @@ pub fn main() {\n     let _id: &Mat2<f64> = &Matrix::identity(1.0);\n }\n \n-pub trait Index<Index,Result> { fn get(&self, Index) -> Result { panic!() } }\n+pub trait Index<Index,Result> { fn get(&self, _: Index) -> Result { panic!() } }\n pub trait Dimensional<T>: Index<usize, T> { }\n \n pub struct Mat2<T> { x: T }"}, {"sha": "b52900746e3c43908053110e97a81dacf508461e", "filename": "src/test/run-pass/issue-6128.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fissue-6128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fissue-6128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6128.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -14,9 +14,8 @@\n use std::collections::HashMap;\n \n trait Graph<Node, Edge> {\n-    fn f(&self, Edge);\n-    fn g(&self, Node);\n-\n+    fn f(&self, _: Edge);\n+    fn g(&self, _: Node);\n }\n \n impl<E> Graph<isize, E> for HashMap<isize, isize> {"}, {"sha": "2c5bc48abe84008667b14aa97eabf2a79951da88", "filename": "src/test/run-pass/issue-6157.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fissue-6157.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fissue-6157.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6157.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-pub trait OpInt { fn call(&mut self, isize, isize) -> isize; }\n+pub trait OpInt { fn call(&mut self, _: isize, _: isize) -> isize; }\n \n impl<F> OpInt for F where F: FnMut(isize, isize) -> isize {\n     fn call(&mut self, a:isize, b:isize) -> isize {"}, {"sha": "a9f29fdb38cafd07165acb691a3944e0148feda3", "filename": "src/test/run-pass/issue-9129.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fissue-9129.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fissue-9129.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9129.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -13,7 +13,7 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-pub trait bomb { fn boom(&self, Ident); }\n+pub trait bomb { fn boom(&self, _: Ident); }\n pub struct S;\n impl bomb for S { fn boom(&self, _: Ident) { } }\n "}, {"sha": "86fcfb9e6dd89d1287395b070d6b1888cd3527e4", "filename": "src/test/run-pass/regions-early-bound-trait-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-early-bound-trait-param.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -63,7 +63,7 @@ fn make_val<T:MakerTrait>() -> T {\n }\n \n trait RefMakerTrait<'q> {\n-    fn mk(Self) -> &'q Self;\n+    fn mk(_: Self) -> &'q Self;\n }\n \n fn make_ref<'r, T:RefMakerTrait<'r>>(t:T) -> &'r T {"}, {"sha": "8351cc50fd822b2c6f64694eb06061c27e00d7d4", "filename": "src/test/run-pass/supertrait-default-generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fsupertrait-default-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fsupertrait-default-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsupertrait-default-generics.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -14,7 +14,7 @@\n use std::ops::Add;\n \n trait Positioned<S> {\n-  fn SetX(&mut self, S);\n+  fn SetX(&mut self, _: S);\n   fn X(&self) -> S;\n }\n "}, {"sha": "aae6b76087fe40700174842a61da8c72c21ecdd2", "filename": "src/test/run-pass/trait-inheritance-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -10,7 +10,7 @@\n \n \n pub trait MyNum {\n-    fn from_int(isize) -> Self;\n+    fn from_int(_: isize) -> Self;\n }\n \n pub trait NumExt: MyNum { }"}, {"sha": "dd942fbfa08c84d49b9326dc989ca1019cc1e054", "filename": "src/test/run-pass/trait-inheritance-static2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static2.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -11,7 +11,7 @@\n pub trait MyEq {}\n \n pub trait MyNum {\n-    fn from_int(isize) -> Self;\n+    fn from_int(_: isize) -> Self;\n }\n \n pub trait NumExt: MyEq + MyNum { }"}, {"sha": "61d32bd6ffc1724c792b6dfc4426814f46cd3388", "filename": "src/test/run-pass/trait-object-generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Ftrait-object-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Ftrait-object-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-object-generics.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -41,7 +41,7 @@ impl<A1, A2, A3> Impl<A1, A2, A3> {\n enum Type<T> { Constant(T) }\n \n trait Trait<K,V> {\n-    fn method(&self,Type<(K,V)>) -> isize;\n+    fn method(&self, _: Type<(K,V)>) -> isize;\n }\n \n impl<V> Trait<u8,V> for () {"}, {"sha": "fa07861d79932c02e53f88cdeac7a0a830d1627d", "filename": "src/test/run-pass/where-clause-bounds-inconsistency.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fwhere-clause-bounds-inconsistency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Frun-pass%2Fwhere-clause-bounds-inconsistency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhere-clause-bounds-inconsistency.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -15,10 +15,10 @@ trait Bound {\n }\n \n trait Trait {\n-    fn a<T>(&self, T) where T: Bound;\n-    fn b<T>(&self, T) where T: Bound;\n-    fn c<T: Bound>(&self, T);\n-    fn d<T: Bound>(&self, T);\n+    fn a<T>(&self, _: T) where T: Bound;\n+    fn b<T>(&self, _: T) where T: Bound;\n+    fn c<T: Bound>(&self, _: T);\n+    fn d<T: Bound>(&self, _: T);\n }\n \n impl Trait for bool {"}, {"sha": "b74036c4f5ce8de6ad12e527dd74b722d7dfc250", "filename": "src/test/ui/span/issue-7575.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Fui%2Fspan%2Fissue-7575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Fui%2Fspan%2Fissue-7575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-7575.rs?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -12,12 +12,12 @@\n // ignore-tidy-linelength\n \n trait CtxtFn {\n-    fn f8(self, usize) -> usize;\n-    fn f9(usize) -> usize; //~ NOTE candidate\n+    fn f8(self, _: usize) -> usize;\n+    fn f9(_: usize) -> usize; //~ NOTE candidate\n }\n \n trait OtherTrait {\n-    fn f9(usize) -> usize; //~ NOTE candidate\n+    fn f9(_: usize) -> usize; //~ NOTE candidate\n }\n \n // Note: this trait is not implemented, but we can't really tell\n@@ -26,7 +26,7 @@ trait OtherTrait {\n // candidate. This seems not unreasonable -- perhaps the user meant to\n // implement it, after all.\n trait UnusedTrait {\n-    fn f9(usize) -> usize; //~ NOTE candidate\n+    fn f9(_: usize) -> usize; //~ NOTE candidate\n }\n \n impl CtxtFn for usize {"}, {"sha": "ff62adbfbd5fcc20cb54569979ee59e24607954d", "filename": "src/test/ui/span/issue-7575.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/affb8ee8316c7720a1f752d70d3fa2542100f425/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr?ref=affb8ee8316c7720a1f752d70d3fa2542100f425", "patch": "@@ -8,20 +8,20 @@ error[E0599]: no method named `f9` found for type `usize` in the current scope\n note: candidate #1 is defined in the trait `CtxtFn`\n   --> $DIR/issue-7575.rs:16:5\n    |\n-16 |     fn f9(usize) -> usize; //~ NOTE candidate\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+16 |     fn f9(_: usize) -> usize; //~ NOTE candidate\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: to disambiguate the method call, write `CtxtFn::f9(u, 342)` instead\n note: candidate #2 is defined in the trait `OtherTrait`\n   --> $DIR/issue-7575.rs:20:5\n    |\n-20 |     fn f9(usize) -> usize; //~ NOTE candidate\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+20 |     fn f9(_: usize) -> usize; //~ NOTE candidate\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: to disambiguate the method call, write `OtherTrait::f9(u, 342)` instead\n note: candidate #3 is defined in the trait `UnusedTrait`\n   --> $DIR/issue-7575.rs:29:5\n    |\n-29 |     fn f9(usize) -> usize; //~ NOTE candidate\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+29 |     fn f9(_: usize) -> usize; //~ NOTE candidate\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: to disambiguate the method call, write `UnusedTrait::f9(u, 342)` instead\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following traits define an item `f9`, perhaps you need to implement one of them:"}]}