{"sha": "ac40d1eff33cc6789d3c02f4a21477368574cf5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjNDBkMWVmZjMzY2M2Nzg5ZDNjMDJmNGEyMTQ3NzM2ODU3NGNmNWU=", "commit": {"author": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-07-01T18:51:08Z"}, "committer": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-07-01T19:05:37Z"}, "message": "Apply documentation review suggestions\n\nCo-Authored-By: Ralf Jung <post@ralfj.de>", "tree": {"sha": "dc528056ed2c9825d76833c4b41c4d92d3bbdeae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc528056ed2c9825d76833c4b41c4d92d3bbdeae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac40d1eff33cc6789d3c02f4a21477368574cf5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac40d1eff33cc6789d3c02f4a21477368574cf5e", "html_url": "https://github.com/rust-lang/rust/commit/ac40d1eff33cc6789d3c02f4a21477368574cf5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac40d1eff33cc6789d3c02f4a21477368574cf5e/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aed88e18049f6be7d3c3b37683d05d777adb3c86", "url": "https://api.github.com/repos/rust-lang/rust/commits/aed88e18049f6be7d3c3b37683d05d777adb3c86", "html_url": "https://github.com/rust-lang/rust/commit/aed88e18049f6be7d3c3b37683d05d777adb3c86"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "29e0979b0eda6ea9d6149a02ce443f2914850df7", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ac40d1eff33cc6789d3c02f4a21477368574cf5e/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac40d1eff33cc6789d3c02f4a21477368574cf5e/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=ac40d1eff33cc6789d3c02f4a21477368574cf5e", "patch": "@@ -592,8 +592,8 @@ impl<T: ?Sized> Rc<T> {\n     pub fn as_ptr(this: &Self) -> *const T {\n         let ptr: *mut RcBox<T> = NonNull::as_ptr(this.ptr);\n \n-        // SAFETY: This cannot go through Deref::deref or Rc::inner.\n-        // This is required to retain raw/mut provenance such that e.g. `get_mut` can\n+        // SAFETY: This cannot go through Deref::deref or Rc::inner because\n+        // this is required to retain raw/mut provenance such that e.g. `get_mut` can\n         // write through the pointer after the Rc is recovered through `from_raw`.\n         unsafe { &raw const (*ptr).value }\n     }\n@@ -1709,7 +1709,8 @@ impl<T> Weak<T> {\n         // a dangling weak (usize::MAX). data_offset is safe to call, because we\n         // know a pointer to unsized T must be derived from a real unsized T,\n         // because dangling weaks are only created for sized T. wrapping_offset\n-        // is used so that we can use the same code path for dangling weak refs.\n+        // is used so that we can use the same code path for the non-dangling\n+        // unsized case and the potentially dangling sized case.\n         unsafe {\n             let offset = data_offset(fake_ptr);\n             set_data_ptr(fake_ptr, (ptr as *mut u8).wrapping_offset(offset))"}, {"sha": "005821980fe2c78965cb3c4d0fedc3df07ada388", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ac40d1eff33cc6789d3c02f4a21477368574cf5e/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac40d1eff33cc6789d3c02f4a21477368574cf5e/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=ac40d1eff33cc6789d3c02f4a21477368574cf5e", "patch": "@@ -591,8 +591,8 @@ impl<T: ?Sized> Arc<T> {\n     pub fn as_ptr(this: &Self) -> *const T {\n         let ptr: *mut ArcInner<T> = NonNull::as_ptr(this.ptr);\n \n-        // SAFETY: This cannot go through Deref::deref or RcBoxPtr::inner.\n-        // This is required to retain raw/mut provenance such that e.g. `get_mut` can\n+        // SAFETY: This cannot go through Deref::deref or RcBoxPtr::inner because\n+        // this is required to retain raw/mut provenance such that e.g. `get_mut` can\n         // write through the pointer after the Rc is recovered through `from_raw`.\n         unsafe { &raw const (*ptr).data }\n     }\n@@ -1477,7 +1477,8 @@ impl<T> Weak<T> {\n         // a dangling weak (usize::MAX). data_offset is safe to call, because we\n         // know a pointer to unsized T must be derived from a real unsized T,\n         // because dangling weaks are only created for sized T. wrapping_offset\n-        // is used so that we can use the same code path for dangling weak refs.\n+        // is used so that we can use the same code path for the non-dangling\n+        // unsized case and the potentially dangling sized case.\n         unsafe {\n             let offset = data_offset(fake_ptr);\n             set_data_ptr(fake_ptr, (ptr as *mut u8).wrapping_offset(offset))"}]}