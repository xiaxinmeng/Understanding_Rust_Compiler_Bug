{"sha": "ab32548539ec38a939c1b58599249f3b54130026", "node_id": "C_kwDOAAsO6NoAKGFiMzI1NDg1MzllYzM4YTkzOWMxYjU4NTk5MjQ5ZjNiNTQxMzAwMjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-09T03:40:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-09T03:40:17Z"}, "message": "Auto merge of #101224 - compiler-errors:rpitit, r=oli-obk\n\nInitial implementation of return-position `impl Trait` in traits\n\n* Create a new item kind, called `ImplTraitPlaceholder`, which is used to lower `ast::TyKind::ImplTrait` in trait method returns.\n    * This item is the child of the trait method, which simplifies the way we calculate bounds and stuff.\n* Use the def-id of this type to construct a projection type that we use during astconv for the return type of the trait method signature.\n* Implement logic to normalize this `ImplTraitPlaceholder` projection type when we know its concrete impl (this is pretty limited currently, but really there are no other selection candidates that make sense -- for now!)\n* Check that the `impl Trait`'s bounds are satisfied on the concrete type provided in the impl.\n\nThis is obviously nowhere near complete, but I wanted to at least get some initial support landed so we can start playing around with it.\n\nWhat works:\n* async fn in trait and RPITIT, including multiple `impl Trait`s and `impl Trait` nested in associated type bindings, like `impl Future<Output = impl Sized>`", "tree": {"sha": "b7b73cde17986e1f6a2c97093cbadb9b84d3372b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7b73cde17986e1f6a2c97093cbadb9b84d3372b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab32548539ec38a939c1b58599249f3b54130026", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab32548539ec38a939c1b58599249f3b54130026", "html_url": "https://github.com/rust-lang/rust/commit/ab32548539ec38a939c1b58599249f3b54130026", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab32548539ec38a939c1b58599249f3b54130026/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7200da0217f99e929e58d0b40483097db37270ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/7200da0217f99e929e58d0b40483097db37270ac", "html_url": "https://github.com/rust-lang/rust/commit/7200da0217f99e929e58d0b40483097db37270ac"}, {"sha": "6876c94d800433ad7f2ea72da64d963eb2269589", "url": "https://api.github.com/repos/rust-lang/rust/commits/6876c94d800433ad7f2ea72da64d963eb2269589", "html_url": "https://github.com/rust-lang/rust/commit/6876c94d800433ad7f2ea72da64d963eb2269589"}], "stats": {"total": 1382, "additions": 1078, "deletions": 304}, "files": [{"sha": "c07ba88ae204d9a414e1f4f704e242408fb19265", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -2367,9 +2367,9 @@ impl Async {\n     }\n \n     /// In this case this is an `async` return, the `NodeId` for the generated `impl Trait` item.\n-    pub fn opt_return_id(self) -> Option<NodeId> {\n+    pub fn opt_return_id(self) -> Option<(NodeId, Span)> {\n         match self {\n-            Async::Yes { return_impl_trait_id, .. } => Some(return_impl_trait_id),\n+            Async::Yes { return_impl_trait_id, span, .. } => Some((return_impl_trait_id, span)),\n             Async::No => None,\n         }\n     }"}, {"sha": "c87d0ca96570e74f2904068202102ce712b68a9a", "filename": "compiler/rustc_ast_lowering/src/errors.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -334,3 +334,14 @@ pub struct InclusiveRangeWithNoEnd {\n     #[primary_span]\n     pub span: Span,\n }\n+\n+#[derive(SessionDiagnostic, Clone, Copy)]\n+#[diag(ast_lowering::trait_fn_async, code = \"E0706\")]\n+#[note]\n+#[note(ast_lowering::note2)]\n+pub struct TraitFnAsync {\n+    #[primary_span]\n+    pub fn_span: Span,\n+    #[label]\n+    pub span: Span,\n+}"}, {"sha": "f929549d70448100ea8c7f2516e4ac440f02066b", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -851,7 +851,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         self.lower_lifetime_binder(closure_id, generic_params, |lctx, bound_generic_params| {\n             // Lower outside new scope to preserve `is_in_loop_condition`.\n-            let fn_decl = lctx.lower_fn_decl(decl, None, FnDeclKind::Closure, None);\n+            let fn_decl = lctx.lower_fn_decl(decl, None, fn_decl_span, FnDeclKind::Closure, None);\n \n             let c = lctx.arena.alloc(hir::Closure {\n                 binder: binder_clause,\n@@ -955,7 +955,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             // We need to lower the declaration outside the new scope, because we\n             // have to conserve the state of being inside a loop condition for the\n             // closure argument types.\n-            let fn_decl = lctx.lower_fn_decl(&outer_decl, None, FnDeclKind::Closure, None);\n+            let fn_decl =\n+                lctx.lower_fn_decl(&outer_decl, None, fn_decl_span, FnDeclKind::Closure, None);\n \n             let c = lctx.arena.alloc(hir::Closure {\n                 binder: binder_clause,"}, {"sha": "52273778dcc009233e9cfe554c97e13163e092de", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -269,7 +269,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let mut itctx = ImplTraitContext::Universal;\n                     let (generics, decl) = this.lower_generics(generics, id, &mut itctx, |this| {\n                         let ret_id = asyncness.opt_return_id();\n-                        this.lower_fn_decl(&decl, Some(id), FnDeclKind::Fn, ret_id)\n+                        this.lower_fn_decl(&decl, Some(id), fn_sig_span, FnDeclKind::Fn, ret_id)\n                     });\n                     let sig = hir::FnSig {\n                         decl,\n@@ -661,7 +661,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         self.lower_generics(generics, i.id, &mut itctx, |this| {\n                             (\n                                 // Disallow `impl Trait` in foreign items.\n-                                this.lower_fn_decl(fdec, None, FnDeclKind::ExternFn, None),\n+                                this.lower_fn_decl(\n+                                    fdec,\n+                                    None,\n+                                    sig.span,\n+                                    FnDeclKind::ExternFn,\n+                                    None,\n+                                ),\n                                 this.lower_fn_params_to_names(fdec),\n                             )\n                         });\n@@ -771,9 +777,15 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 (hir::Generics::empty(), hir::TraitItemKind::Const(ty, body), body.is_some())\n             }\n             AssocItemKind::Fn(box Fn { ref sig, ref generics, body: None, .. }) => {\n+                let asyncness = sig.header.asyncness;\n                 let names = self.lower_fn_params_to_names(&sig.decl);\n-                let (generics, sig) =\n-                    self.lower_method_sig(generics, sig, i.id, FnDeclKind::Trait, None);\n+                let (generics, sig) = self.lower_method_sig(\n+                    generics,\n+                    sig,\n+                    i.id,\n+                    FnDeclKind::Trait,\n+                    asyncness.opt_return_id(),\n+                );\n                 (generics, hir::TraitItemKind::Fn(sig, hir::TraitFn::Required(names)), false)\n             }\n             AssocItemKind::Fn(box Fn { ref sig, ref generics, body: Some(ref body), .. }) => {\n@@ -1240,12 +1252,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         sig: &FnSig,\n         id: NodeId,\n         kind: FnDeclKind,\n-        is_async: Option<NodeId>,\n+        is_async: Option<(NodeId, Span)>,\n     ) -> (&'hir hir::Generics<'hir>, hir::FnSig<'hir>) {\n         let header = self.lower_fn_header(sig.header);\n         let mut itctx = ImplTraitContext::Universal;\n         let (generics, decl) = self.lower_generics(generics, id, &mut itctx, |this| {\n-            this.lower_fn_decl(&sig.decl, Some(id), kind, is_async)\n+            this.lower_fn_decl(&sig.decl, Some(id), sig.span, kind, is_async)\n         });\n         (generics, hir::FnSig { header, decl, span: self.lower_span(sig.span) })\n     }"}, {"sha": "0720f23ed756d449ad3c7f50155ee323912cfa54", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 115, "deletions": 36, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -42,7 +42,7 @@\n #[macro_use]\n extern crate tracing;\n \n-use crate::errors::{AssocTyParentheses, AssocTyParenthesesSub, MisplacedImplTrait};\n+use crate::errors::{AssocTyParentheses, AssocTyParenthesesSub, MisplacedImplTrait, TraitFnAsync};\n \n use rustc_arena::declare_arena;\n use rustc_ast::ptr::P;\n@@ -252,6 +252,7 @@ enum ImplTraitContext {\n     ReturnPositionOpaqueTy {\n         /// Origin: Either OpaqueTyOrigin::FnReturn or OpaqueTyOrigin::AsyncFn,\n         origin: hir::OpaqueTyOrigin,\n+        in_trait: bool,\n     },\n     /// Impl trait in type aliases.\n     TypeAliasesOpaqueTy,\n@@ -311,7 +312,7 @@ impl std::fmt::Display for ImplTraitPosition {\n     }\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, PartialEq, Eq)]\n enum FnDeclKind {\n     Fn,\n     Inherent,\n@@ -323,9 +324,17 @@ enum FnDeclKind {\n }\n \n impl FnDeclKind {\n-    fn impl_trait_return_allowed(&self) -> bool {\n+    fn impl_trait_return_allowed(&self, tcx: TyCtxt<'_>) -> bool {\n         match self {\n             FnDeclKind::Fn | FnDeclKind::Inherent => true,\n+            FnDeclKind::Impl if tcx.features().return_position_impl_trait_in_trait => true,\n+            _ => false,\n+        }\n+    }\n+\n+    fn impl_trait_in_trait_allowed(&self, tcx: TyCtxt<'_>) -> bool {\n+        match self {\n+            FnDeclKind::Trait if tcx.features().return_position_impl_trait_in_trait => true,\n             _ => false,\n         }\n     }\n@@ -1264,7 +1273,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         generic_params,\n                         unsafety: lctx.lower_unsafety(f.unsafety),\n                         abi: lctx.lower_extern(f.ext),\n-                        decl: lctx.lower_fn_decl(&f.decl, None, FnDeclKind::Pointer, None),\n+                        decl: lctx.lower_fn_decl(&f.decl, None, t.span, FnDeclKind::Pointer, None),\n                         param_names: lctx.lower_fn_params_to_names(&f.decl),\n                     }))\n                 })\n@@ -1333,19 +1342,23 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             TyKind::ImplTrait(def_node_id, ref bounds) => {\n                 let span = t.span;\n                 match itctx {\n-                    ImplTraitContext::ReturnPositionOpaqueTy { origin } => {\n-                        self.lower_opaque_impl_trait(span, *origin, def_node_id, bounds, itctx)\n-                    }\n-                    ImplTraitContext::TypeAliasesOpaqueTy => {\n-                        let mut nested_itctx = ImplTraitContext::TypeAliasesOpaqueTy;\n-                        self.lower_opaque_impl_trait(\n+                    ImplTraitContext::ReturnPositionOpaqueTy { origin, in_trait } => self\n+                        .lower_opaque_impl_trait(\n                             span,\n-                            hir::OpaqueTyOrigin::TyAlias,\n+                            *origin,\n                             def_node_id,\n                             bounds,\n-                            &mut nested_itctx,\n-                        )\n-                    }\n+                            *in_trait,\n+                            itctx,\n+                        ),\n+                    ImplTraitContext::TypeAliasesOpaqueTy => self.lower_opaque_impl_trait(\n+                        span,\n+                        hir::OpaqueTyOrigin::TyAlias,\n+                        def_node_id,\n+                        bounds,\n+                        false,\n+                        &mut ImplTraitContext::TypeAliasesOpaqueTy,\n+                    ),\n                     ImplTraitContext::Universal => {\n                         let span = t.span;\n                         let ident = Ident::from_str_and_span(&pprust::ty_to_string(t), span);\n@@ -1357,6 +1370,21 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         }\n                         path\n                     }\n+                    ImplTraitContext::Disallowed(\n+                        position @ (ImplTraitPosition::TraitReturn | ImplTraitPosition::ImplReturn),\n+                    ) => {\n+                        self.tcx\n+                            .sess\n+                            .create_feature_err(\n+                                MisplacedImplTrait {\n+                                    span: t.span,\n+                                    position: DiagnosticArgFromDisplay(&position),\n+                                },\n+                                sym::return_position_impl_trait_in_trait,\n+                            )\n+                            .emit();\n+                        hir::TyKind::Err\n+                    }\n                     ImplTraitContext::Disallowed(position) => {\n                         self.tcx.sess.emit_err(MisplacedImplTrait {\n                             span: t.span,\n@@ -1415,6 +1443,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         origin: hir::OpaqueTyOrigin,\n         opaque_ty_node_id: NodeId,\n         bounds: &GenericBounds,\n+        in_trait: bool,\n         itctx: &mut ImplTraitContext,\n     ) -> hir::TyKind<'hir> {\n         // Make sure we know that some funky desugaring has been going on here.\n@@ -1503,6 +1532,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     }),\n                     bounds: hir_bounds,\n                     origin,\n+                    in_trait,\n                 };\n                 debug!(?opaque_ty_item);\n \n@@ -1529,7 +1559,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         debug!(?lifetimes);\n \n         // `impl Trait` now just becomes `Foo<'a, 'b, ..>`.\n-        hir::TyKind::OpaqueDef(hir::ItemId { def_id: opaque_ty_def_id }, lifetimes)\n+        hir::TyKind::OpaqueDef(hir::ItemId { def_id: opaque_ty_def_id }, lifetimes, in_trait)\n     }\n \n     /// Registers a new opaque type with the proper `NodeId`s and\n@@ -1637,19 +1667,17 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     // `fn_def_id`: if `Some`, impl Trait arguments are lowered into generic parameters on the\n     //      given DefId, otherwise impl Trait is disallowed. Must be `Some` if\n     //      `make_ret_async` is also `Some`.\n-    // `impl_trait_return_allow`: determines whether `impl Trait` can be used in return position.\n-    //      This guards against trait declarations and implementations where `impl Trait` is\n-    //      disallowed.\n     // `make_ret_async`: if `Some`, converts `-> T` into `-> impl Future<Output = T>` in the\n     //      return type. This is used for `async fn` declarations. The `NodeId` is the ID of the\n-    //      return type `impl Trait` item.\n+    //      return type `impl Trait` item, and the `Span` points to the `async` keyword.\n     #[instrument(level = \"debug\", skip(self))]\n     fn lower_fn_decl(\n         &mut self,\n         decl: &FnDecl,\n         fn_node_id: Option<NodeId>,\n+        fn_span: Span,\n         kind: FnDeclKind,\n-        make_ret_async: Option<NodeId>,\n+        make_ret_async: Option<(NodeId, Span)>,\n     ) -> &'hir hir::FnDecl<'hir> {\n         let c_variadic = decl.c_variadic();\n \n@@ -1680,20 +1708,63 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             }\n         }));\n \n-        let output = if let Some(ret_id) = make_ret_async {\n-            self.lower_async_fn_ret_ty(\n-                &decl.output,\n-                fn_node_id.expect(\"`make_ret_async` but no `fn_def_id`\"),\n-                ret_id,\n-            )\n+        let output = if let Some((ret_id, span)) = make_ret_async {\n+            match kind {\n+                FnDeclKind::Trait => {\n+                    if !kind.impl_trait_in_trait_allowed(self.tcx) {\n+                        self.tcx\n+                            .sess\n+                            .create_feature_err(\n+                                TraitFnAsync { fn_span, span },\n+                                sym::return_position_impl_trait_in_trait,\n+                            )\n+                            .emit();\n+                    }\n+                    self.lower_async_fn_ret_ty(\n+                        &decl.output,\n+                        fn_node_id.expect(\"`make_ret_async` but no `fn_def_id`\"),\n+                        ret_id,\n+                        true,\n+                    )\n+                }\n+                _ => {\n+                    if !kind.impl_trait_return_allowed(self.tcx) {\n+                        if kind == FnDeclKind::Impl {\n+                            self.tcx\n+                                .sess\n+                                .create_feature_err(\n+                                    TraitFnAsync { fn_span, span },\n+                                    sym::return_position_impl_trait_in_trait,\n+                                )\n+                                .emit();\n+                        } else {\n+                            self.tcx.sess.emit_err(TraitFnAsync { fn_span, span });\n+                        }\n+                    }\n+                    self.lower_async_fn_ret_ty(\n+                        &decl.output,\n+                        fn_node_id.expect(\"`make_ret_async` but no `fn_def_id`\"),\n+                        ret_id,\n+                        false,\n+                    )\n+                }\n+            }\n         } else {\n             match decl.output {\n                 FnRetTy::Ty(ref ty) => {\n                     let mut context = match fn_node_id {\n-                        Some(fn_node_id) if kind.impl_trait_return_allowed() => {\n+                        Some(fn_node_id) if kind.impl_trait_return_allowed(self.tcx) => {\n                             let fn_def_id = self.local_def_id(fn_node_id);\n                             ImplTraitContext::ReturnPositionOpaqueTy {\n                                 origin: hir::OpaqueTyOrigin::FnReturn(fn_def_id),\n+                                in_trait: false,\n+                            }\n+                        }\n+                        Some(fn_node_id) if kind.impl_trait_in_trait_allowed(self.tcx) => {\n+                            let fn_def_id = self.local_def_id(fn_node_id);\n+                            ImplTraitContext::ReturnPositionOpaqueTy {\n+                                origin: hir::OpaqueTyOrigin::FnReturn(fn_def_id),\n+                                in_trait: true,\n                             }\n                         }\n                         _ => ImplTraitContext::Disallowed(match kind {\n@@ -1757,6 +1828,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         output: &FnRetTy,\n         fn_node_id: NodeId,\n         opaque_ty_node_id: NodeId,\n+        in_trait: bool,\n     ) -> hir::FnRetTy<'hir> {\n         let span = output.span();\n \n@@ -1883,8 +1955,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 //\n                 // Then, we will create `fn foo(..) -> Foo<'_, '_>`, and\n                 // hence the elision takes place at the fn site.\n-                let future_bound =\n-                    this.lower_async_fn_output_type_to_future_bound(output, fn_def_id, span);\n+                let future_bound = this.lower_async_fn_output_type_to_future_bound(\n+                    output,\n+                    span,\n+                    ImplTraitContext::ReturnPositionOpaqueTy {\n+                        origin: hir::OpaqueTyOrigin::FnReturn(fn_def_id),\n+                        in_trait,\n+                    },\n+                );\n \n                 let generic_params = this.arena.alloc_from_iter(collected_lifetimes.iter().map(\n                     |&(new_node_id, lifetime, _)| {\n@@ -1922,6 +2000,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     }),\n                     bounds: arena_vec![this; future_bound],\n                     origin: hir::OpaqueTyOrigin::AsyncFn(fn_def_id),\n+                    in_trait,\n                 };\n \n                 trace!(\"exist ty from async fn def id: {:#?}\", opaque_ty_def_id);\n@@ -1966,8 +2045,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         // Foo = impl Trait` is, internally, created as a child of the\n         // async fn, so the *type parameters* are inherited.  It's\n         // only the lifetime parameters that we must supply.\n-        let opaque_ty_ref =\n-            hir::TyKind::OpaqueDef(hir::ItemId { def_id: opaque_ty_def_id }, generic_args);\n+        let opaque_ty_ref = hir::TyKind::OpaqueDef(\n+            hir::ItemId { def_id: opaque_ty_def_id },\n+            generic_args,\n+            in_trait,\n+        );\n         let opaque_ty = self.ty(opaque_ty_span, opaque_ty_ref);\n         hir::FnRetTy::Return(self.arena.alloc(opaque_ty))\n     }\n@@ -1976,19 +2058,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_async_fn_output_type_to_future_bound(\n         &mut self,\n         output: &FnRetTy,\n-        fn_def_id: LocalDefId,\n         span: Span,\n+        mut nested_impl_trait_context: ImplTraitContext,\n     ) -> hir::GenericBound<'hir> {\n         // Compute the `T` in `Future<Output = T>` from the return type.\n         let output_ty = match output {\n             FnRetTy::Ty(ty) => {\n                 // Not `OpaqueTyOrigin::AsyncFn`: that's only used for the\n                 // `impl Future` opaque type that `async fn` implicitly\n                 // generates.\n-                let mut context = ImplTraitContext::ReturnPositionOpaqueTy {\n-                    origin: hir::OpaqueTyOrigin::FnReturn(fn_def_id),\n-                };\n-                self.lower_ty(ty, &mut context)\n+                self.lower_ty(ty, &mut nested_impl_trait_context)\n             }\n             FnRetTy::Default(ret_ty_span) => self.arena.alloc(self.ty_tup(*ret_ty_span, &[])),\n         };"}, {"sha": "6c754f38d144be96ba43f6a24d69b647491496a0", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -290,12 +290,6 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    fn check_trait_fn_not_async(&self, fn_span: Span, asyncness: Async) {\n-        if let Async::Yes { span, .. } = asyncness {\n-            self.session.emit_err(TraitFnAsync { fn_span, span });\n-        }\n-    }\n-\n     fn check_trait_fn_not_const(&self, constness: Const) {\n         if let Const::Yes(span) = constness {\n             self.session.emit_err(TraitFnConst { span });\n@@ -1596,7 +1590,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             self.invalid_visibility(&item.vis, None);\n             if let AssocItemKind::Fn(box Fn { sig, .. }) = &item.kind {\n                 self.check_trait_fn_not_const(sig.header.constness);\n-                self.check_trait_fn_not_async(item.span, sig.header.asyncness);\n             }\n         }\n "}, {"sha": "4f3b09c587113597d816dfc5bec14ca21283b91b", "filename": "compiler/rustc_ast_passes/src/errors.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -79,17 +79,6 @@ pub enum InvalidVisibilityNote {\n     IndividualForeignItems,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(ast_passes::trait_fn_async, code = \"E0706\")]\n-#[note]\n-#[note(ast_passes::note2)]\n-pub struct TraitFnAsync {\n-    #[primary_span]\n-    pub fn_span: Span,\n-    #[label]\n-    pub span: Span,\n-}\n-\n #[derive(SessionDiagnostic)]\n #[diag(ast_passes::trait_fn_const, code = \"E0379\")]\n pub struct TraitFnConst {"}, {"sha": "0707ff5ed02a0abf81f53c14173db134235f45a5", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -772,7 +772,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     fn get_future_inner_return_ty(&self, hir_ty: &'tcx hir::Ty<'tcx>) -> &'tcx hir::Ty<'tcx> {\n         let hir = self.infcx.tcx.hir();\n \n-        let hir::TyKind::OpaqueDef(id, _) = hir_ty.kind else {\n+        let hir::TyKind::OpaqueDef(id, _, _) = hir_ty.kind else {\n             span_bug!(\n                 hir_ty.span,\n                 \"lowered return type of async fn is not OpaqueDef: {:?}\","}, {"sha": "c45e045b4dba0d27d159382a181f94e10dc7368d", "filename": "compiler/rustc_error_messages/locales/en-US/ast_lowering.ftl", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_lowering.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_lowering.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_lowering.ftl?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -131,3 +131,9 @@ ast_lowering_arbitrary_expression_in_pattern =\n     arbitrary expressions aren't allowed in patterns\n \n ast_lowering_inclusive_range_with_no_end = inclusive range with no end\n+\n+ast_lowering_trait_fn_async =\n+    functions in traits cannot be declared `async`\n+    .label = `async` because of this\n+    .note = `async` trait functions are not currently supported\n+    .note2 = consider using the `async-trait` crate: https://crates.io/crates/async-trait"}, {"sha": "e5cd1142b20c8c8738055ac3d52d845fb801b24d", "filename": "compiler/rustc_error_messages/locales/en-US/ast_passes.ftl", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_passes.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_passes.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fast_passes.ftl?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -26,12 +26,6 @@ ast_passes_invalid_visibility =\n     .individual_impl_items = place qualifiers on individual impl items instead\n     .individual_foreign_items = place qualifiers on individual foreign items instead\n \n-ast_passes_trait_fn_async =\n-    functions in traits cannot be declared `async`\n-    .label = `async` because of this\n-    .note = `async` trait functions are not currently supported\n-    .note2 = consider using the `async-trait` crate: https://crates.io/crates/async-trait\n-\n ast_passes_trait_fn_const =\n     functions in traits cannot be declared const\n     .label = functions in traits cannot be const"}, {"sha": "3b8032040e76cc53aea112f497c74ed1325ea3e2", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -487,6 +487,8 @@ declare_features! (\n     (incomplete, repr128, \"1.16.0\", Some(56071), None),\n     /// Allows `repr(simd)` and importing the various simd intrinsics.\n     (active, repr_simd, \"1.4.0\", Some(27731), None),\n+    /// Allows return-position `impl Trait` in traits.\n+    (incomplete, return_position_impl_trait_in_trait, \"CURRENT_RUSTC_VERSION\", Some(91611), None),\n     /// Allows `extern \"rust-cold\"`.\n     (active, rust_cold_cc, \"1.63.0\", Some(97544), None),\n     /// Allows the use of SIMD types in functions declared in `extern` blocks."}, {"sha": "e7c26bd726fbfd69fa45532d5658d752de9a4232", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -109,6 +109,8 @@ pub enum DefKind {\n     InlineConst,\n     /// Opaque type, aka `impl Trait`.\n     OpaqueTy,\n+    /// A return-position `impl Trait` in a trait definition\n+    ImplTraitPlaceholder,\n     Field,\n     /// Lifetime parameter: the `'a` in `struct Foo<'a> { ... }`\n     LifetimeParam,\n@@ -138,6 +140,7 @@ impl DefKind {\n                 panic!(\"impossible struct constructor\")\n             }\n             DefKind::OpaqueTy => \"opaque type\",\n+            DefKind::ImplTraitPlaceholder => \"opaque type in trait\",\n             DefKind::TyAlias => \"type alias\",\n             DefKind::TraitAlias => \"trait alias\",\n             DefKind::AssocTy => \"associated type\",\n@@ -217,7 +220,8 @@ impl DefKind {\n             | DefKind::Use\n             | DefKind::ForeignMod\n             | DefKind::GlobalAsm\n-            | DefKind::Impl => None,\n+            | DefKind::Impl\n+            | DefKind::ImplTraitPlaceholder => None,\n         }\n     }\n \n@@ -254,6 +258,7 @@ impl DefKind {\n             | DefKind::Use\n             | DefKind::ForeignMod\n             | DefKind::OpaqueTy\n+            | DefKind::ImplTraitPlaceholder\n             | DefKind::Impl\n             | DefKind::Field\n             | DefKind::TyParam"}, {"sha": "a57fdc3bfb1257d79f5b681b8d6537750f5156b6", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -2505,6 +2505,7 @@ pub struct OpaqueTy<'hir> {\n     pub generics: &'hir Generics<'hir>,\n     pub bounds: GenericBounds<'hir>,\n     pub origin: OpaqueTyOrigin,\n+    pub in_trait: bool,\n }\n \n /// From whence the opaque type came.\n@@ -2544,7 +2545,9 @@ pub enum TyKind<'hir> {\n     ///\n     /// The generic argument list contains the lifetimes (and in the future\n     /// possibly parameters) that are actually bound on the `impl Trait`.\n-    OpaqueDef(ItemId, &'hir [GenericArg<'hir>]),\n+    ///\n+    /// The last parameter specifies whether this opaque appears in a trait definition.\n+    OpaqueDef(ItemId, &'hir [GenericArg<'hir>], bool),\n     /// A trait object type `Bound1 + Bound2 + Bound3`\n     /// where `Bound` is a trait or a lifetime.\n     TraitObject(&'hir [PolyTraitRef<'hir>], &'hir Lifetime, TraitObjectSyntax),"}, {"sha": "bf4ab06638bb15855eab275864e001dfacc3b400", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -670,7 +670,7 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty<'v>) {\n         TyKind::Path(ref qpath) => {\n             visitor.visit_qpath(qpath, typ.hir_id, typ.span);\n         }\n-        TyKind::OpaqueDef(item_id, lifetimes) => {\n+        TyKind::OpaqueDef(item_id, lifetimes, _in_trait) => {\n             visitor.visit_nested_item(item_id);\n             walk_list!(visitor, visit_generic_arg, lifetimes);\n         }"}, {"sha": "5917d5e346e371d2a1da00c227dcf2924f4bf51f", "filename": "compiler/rustc_hir/src/target.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -36,6 +36,7 @@ pub enum Target {\n     GlobalAsm,\n     TyAlias,\n     OpaqueTy,\n+    ImplTraitPlaceholder,\n     Enum,\n     Variant,\n     Struct,\n@@ -79,7 +80,13 @@ impl Target {\n             ItemKind::ForeignMod { .. } => Target::ForeignMod,\n             ItemKind::GlobalAsm(..) => Target::GlobalAsm,\n             ItemKind::TyAlias(..) => Target::TyAlias,\n-            ItemKind::OpaqueTy(..) => Target::OpaqueTy,\n+            ItemKind::OpaqueTy(ref opaque) => {\n+                if opaque.in_trait {\n+                    Target::ImplTraitPlaceholder\n+                } else {\n+                    Target::OpaqueTy\n+                }\n+            }\n             ItemKind::Enum(..) => Target::Enum,\n             ItemKind::Struct(..) => Target::Struct,\n             ItemKind::Union(..) => Target::Union,\n@@ -103,6 +110,7 @@ impl Target {\n             DefKind::GlobalAsm => Target::GlobalAsm,\n             DefKind::TyAlias => Target::TyAlias,\n             DefKind::OpaqueTy => Target::OpaqueTy,\n+            DefKind::ImplTraitPlaceholder => Target::ImplTraitPlaceholder,\n             DefKind::Enum => Target::Enum,\n             DefKind::Struct => Target::Struct,\n             DefKind::Union => Target::Union,\n@@ -157,6 +165,7 @@ impl Target {\n             Target::GlobalAsm => \"global asm\",\n             Target::TyAlias => \"type alias\",\n             Target::OpaqueTy => \"opaque type\",\n+            Target::ImplTraitPlaceholder => \"opaque type in trait\",\n             Target::Enum => \"enum\",\n             Target::Variant => \"enum variant\",\n             Target::Struct => \"struct\","}, {"sha": "08460463998fdaca6829be873d158fe65f72aa6b", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -61,6 +61,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err, Diagnostic, ErrorGuaranteed, IntoDiagnosticArg};\n use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString, MultiSpan};\n use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::Node;\n@@ -1682,6 +1683,19 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                 pos.col.to_usize() + 1,\n                             )\n                         }\n+                        (true, ty::Projection(proj))\n+                            if self.tcx.def_kind(proj.item_def_id)\n+                                == DefKind::ImplTraitPlaceholder =>\n+                        {\n+                            let sm = self.tcx.sess.source_map();\n+                            let pos = sm.lookup_char_pos(self.tcx.def_span(proj.item_def_id).lo());\n+                            format!(\n+                                \" (trait associated opaque type at <{}:{}:{}>)\",\n+                                sm.filename_for_diagnostics(&pos.file.name),\n+                                pos.line,\n+                                pos.col.to_usize() + 1,\n+                            )\n+                        }\n                         (true, _) => format!(\" ({})\", ty.sort_string(self.tcx)),\n                         (false, _) => \"\".to_string(),\n                     };\n@@ -1758,7 +1772,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         // In some (most?) cases cause.body_id points to actual body, but in some cases\n         // it's an actual definition. According to the comments (e.g. in\n-        // librustc_typeck/check/compare_method.rs:compare_predicate_entailment) the latter\n+        // librustc_typeck/check/compare_method.rs:compare_predicates_and_trait_impl_trait_tys) the latter\n         // is relied upon by some other code. This might (or might not) need cleanup.\n         let body_owner_def_id =\n             self.tcx.hir().opt_local_def_id(cause.body_id).unwrap_or_else(|| {"}, {"sha": "b115ac8b3df954ba0f388bd07b27fe85e9a70fe1", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -300,7 +300,7 @@ pub fn suggest_new_region_bound(\n             continue;\n         }\n         match fn_return.kind {\n-            TyKind::OpaqueDef(item_id, _) => {\n+            TyKind::OpaqueDef(item_id, _, _) => {\n                 let item = tcx.hir().item(item_id);\n                 let ItemKind::OpaqueTy(opaque) = &item.kind else {\n                     return;"}, {"sha": "f967ac9a4dc3ed25dc05f26b60107eef1d7edcd1", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -847,6 +847,7 @@ fn should_encode_visibility(def_kind: DefKind) -> bool {\n         | DefKind::Use\n         | DefKind::ForeignMod\n         | DefKind::OpaqueTy\n+        | DefKind::ImplTraitPlaceholder\n         | DefKind::Impl\n         | DefKind::Field => true,\n         DefKind::TyParam\n@@ -879,6 +880,7 @@ fn should_encode_stability(def_kind: DefKind) -> bool {\n         | DefKind::ForeignMod\n         | DefKind::TyAlias\n         | DefKind::OpaqueTy\n+        | DefKind::ImplTraitPlaceholder\n         | DefKind::Enum\n         | DefKind::Union\n         | DefKind::Impl\n@@ -967,6 +969,7 @@ fn should_encode_variances(def_kind: DefKind) -> bool {\n         | DefKind::ForeignMod\n         | DefKind::TyAlias\n         | DefKind::OpaqueTy\n+        | DefKind::ImplTraitPlaceholder\n         | DefKind::Impl\n         | DefKind::Trait\n         | DefKind::TraitAlias\n@@ -1003,6 +1006,7 @@ fn should_encode_generics(def_kind: DefKind) -> bool {\n         | DefKind::AnonConst\n         | DefKind::InlineConst\n         | DefKind::OpaqueTy\n+        | DefKind::ImplTraitPlaceholder\n         | DefKind::Impl\n         | DefKind::Field\n         | DefKind::TyParam\n@@ -1032,6 +1036,7 @@ fn should_encode_type(tcx: TyCtxt<'_>, def_id: LocalDefId, def_kind: DefKind) ->\n         | DefKind::Static(..)\n         | DefKind::TyAlias\n         | DefKind::OpaqueTy\n+        | DefKind::ImplTraitPlaceholder\n         | DefKind::ForeignTy\n         | DefKind::Impl\n         | DefKind::AssocFn\n@@ -1081,6 +1086,7 @@ fn should_encode_const(def_kind: DefKind) -> bool {\n         | DefKind::Static(..)\n         | DefKind::TyAlias\n         | DefKind::OpaqueTy\n+        | DefKind::ImplTraitPlaceholder\n         | DefKind::ForeignTy\n         | DefKind::Impl\n         | DefKind::AssocFn"}, {"sha": "e7c1abd126e044893aa805a08888281e8a0a2ff4", "filename": "compiler/rustc_metadata/src/rmeta/table.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -90,6 +90,7 @@ fixed_size_enum! {\n         ( AnonConst                                )\n         ( InlineConst                              )\n         ( OpaqueTy                                 )\n+        ( ImplTraitPlaceholder                     )\n         ( Field                                    )\n         ( LifetimeParam                            )\n         ( GlobalAsm                                )"}, {"sha": "9b1fedd0b533c404e0c51802426ea77f930ecddd", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -101,6 +101,8 @@ macro_rules! arena_types {\n             [decode] impl_source: rustc_middle::traits::ImplSource<'tcx, ()>,\n \n             [] dep_kind: rustc_middle::dep_graph::DepKindStruct<'tcx>,\n+\n+            [] trait_impl_trait_tys: rustc_data_structures::fx::FxHashMap<rustc_hir::def_id::DefId, rustc_middle::ty::Ty<'tcx>>,\n         ]);\n     )\n }"}, {"sha": "5a65ec9a4765a21865125d834ea371c87cc4f092", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -212,7 +212,13 @@ impl<'hir> Map<'hir> {\n                 ItemKind::Fn(..) => DefKind::Fn,\n                 ItemKind::Macro(_, macro_kind) => DefKind::Macro(macro_kind),\n                 ItemKind::Mod(..) => DefKind::Mod,\n-                ItemKind::OpaqueTy(..) => DefKind::OpaqueTy,\n+                ItemKind::OpaqueTy(ref opaque) => {\n+                    if opaque.in_trait {\n+                        DefKind::ImplTraitPlaceholder\n+                    } else {\n+                        DefKind::OpaqueTy\n+                    }\n+                }\n                 ItemKind::TyAlias(..) => DefKind::TyAlias,\n                 ItemKind::Enum(..) => DefKind::Enum,\n                 ItemKind::Struct(..) => DefKind::Struct,\n@@ -1187,7 +1193,13 @@ fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n                 ItemKind::ForeignMod { .. } => \"foreign mod\",\n                 ItemKind::GlobalAsm(..) => \"global asm\",\n                 ItemKind::TyAlias(..) => \"ty\",\n-                ItemKind::OpaqueTy(..) => \"opaque type\",\n+                ItemKind::OpaqueTy(ref opaque) => {\n+                    if opaque.in_trait {\n+                        \"opaque type in trait\"\n+                    } else {\n+                        \"opaque type\"\n+                    }\n+                }\n                 ItemKind::Enum(..) => \"enum\",\n                 ItemKind::Struct(..) => \"struct\",\n                 ItemKind::Union(..) => \"union\","}, {"sha": "adf479c423604afe7b456af3055c30e21d4d75f6", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -161,6 +161,13 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n+    query compare_predicates_and_trait_impl_trait_tys(key: DefId)\n+        -> Result<&'tcx FxHashMap<DefId, Ty<'tcx>>, ErrorGuaranteed>\n+    {\n+        desc { \"better description please\" }\n+        separate_provide_extern\n+    }\n+\n     query analysis(key: ()) -> Result<(), ErrorGuaranteed> {\n         eval_always\n         desc { \"running analysis passes on this crate\" }"}, {"sha": "648f5f7161fa6ead00fd41a5d75357a0e56ba909", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -408,7 +408,7 @@ impl<'v> hir::intravisit::Visitor<'v> for TraitObjectVisitor<'v> {\n             ) => {\n                 self.0.push(ty);\n             }\n-            hir::TyKind::OpaqueDef(item_id, _) => {\n+            hir::TyKind::OpaqueDef(item_id, _, _) => {\n                 self.0.push(ty);\n                 let item = self.1.item(item_id);\n                 hir::intravisit::walk_item(self, item);"}, {"sha": "279c8c8d6d16db9ff922115c0bbf7cb3bb94084d", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -2,6 +2,7 @@ use crate::traits::{ObligationCause, ObligationCauseCode};\n use crate::ty::diagnostics::suggest_constraining_type_param;\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::{self, BoundRegionKind, Region, Ty, TyCtxt};\n+use hir::def::DefKind;\n use rustc_errors::Applicability::{MachineApplicable, MaybeIncorrect};\n use rustc_errors::{pluralize, Diagnostic, MultiSpan};\n use rustc_hir as hir;\n@@ -538,7 +539,7 @@ impl<T> Trait<T> for X {\n                             diag.span_label(p_span, \"this type parameter\");\n                         }\n                     }\n-                    (ty::Projection(proj_ty), _) => {\n+                    (ty::Projection(proj_ty), _) if self.def_kind(proj_ty.item_def_id) != DefKind::ImplTraitPlaceholder => {\n                         self.expected_projection(\n                             diag,\n                             proj_ty,\n@@ -547,7 +548,7 @@ impl<T> Trait<T> for X {\n                             cause.code(),\n                         );\n                     }\n-                    (_, ty::Projection(proj_ty)) => {\n+                    (_, ty::Projection(proj_ty)) if self.def_kind(proj_ty.item_def_id) != DefKind::ImplTraitPlaceholder => {\n                         let msg = format!(\n                             \"consider constraining the associated type `{}` to `{}`\",\n                             values.found, values.expected,"}, {"sha": "df72260597f9f5a5c63309a6a7268444098071b2", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -2484,6 +2484,14 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn is_const_default_method(self, def_id: DefId) -> bool {\n         matches!(self.trait_of_item(def_id), Some(trait_id) if self.has_attr(trait_id, sym::const_trait))\n     }\n+\n+    pub fn impl_trait_in_trait_parent(self, mut def_id: DefId) -> DefId {\n+        while let def_kind = self.def_kind(def_id) && def_kind != DefKind::AssocFn {\n+            debug_assert_eq!(def_kind, DefKind::ImplTraitPlaceholder);\n+            def_id = self.parent(def_id);\n+        }\n+        def_id\n+    }\n }\n \n /// Yields the parent function's `LocalDefId` if `def_id` is an `impl Trait` definition."}, {"sha": "f134e2cd1bc65bccd6782cdfaa35b19b54626107", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -632,7 +632,13 @@ pub trait PrettyPrinter<'tcx>:\n             ty::Foreign(def_id) => {\n                 p!(print_def_path(def_id, &[]));\n             }\n-            ty::Projection(ref data) => p!(print(data)),\n+            ty::Projection(ref data) => {\n+                if self.tcx().def_kind(data.item_def_id) == DefKind::ImplTraitPlaceholder {\n+                    return self.pretty_print_opaque_impl_type(data.item_def_id, data.substs);\n+                } else {\n+                    p!(print(data))\n+                }\n+            }\n             ty::Placeholder(placeholder) => p!(write(\"Placeholder({:?})\", placeholder)),\n             ty::Opaque(def_id, substs) => {\n                 // FIXME(eddyb) print this with `print_def_path`."}, {"sha": "c5c5d3473418c3f9c5397d540feb844a88615a1c", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -11,6 +11,7 @@ use crate::ty::{\n     TypeVisitor,\n };\n use crate::ty::{List, ParamEnv};\n+use hir::def::DefKind;\n use polonius_engine::Atom;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::intern::Interned;\n@@ -1196,7 +1197,9 @@ pub struct ProjectionTy<'tcx> {\n \n impl<'tcx> ProjectionTy<'tcx> {\n     pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {\n-        tcx.parent(self.item_def_id)\n+        let parent = tcx.parent(self.item_def_id);\n+        assert_eq!(tcx.def_kind(parent), DefKind::Trait);\n+        parent\n     }\n \n     /// Extracts the underlying trait reference and own substs from this projection."}, {"sha": "0c73ae54bc31af83084703c146ea490d889b2a75", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -651,6 +651,13 @@ impl<'tcx> TyCtxt<'tcx> {\n         ty::EarlyBinder(self.type_of(def_id))\n     }\n \n+    pub fn bound_trait_impl_trait_tys(\n+        self,\n+        def_id: DefId,\n+    ) -> ty::EarlyBinder<Result<&'tcx FxHashMap<DefId, Ty<'tcx>>, ErrorGuaranteed>> {\n+        ty::EarlyBinder(self.compare_predicates_and_trait_impl_trait_tys(def_id))\n+    }\n+\n     pub fn bound_fn_sig(self, def_id: DefId) -> ty::EarlyBinder<ty::PolyFnSig<'tcx>> {\n         ty::EarlyBinder(self.fn_sig(def_id))\n     }"}, {"sha": "98156a94ec4b4c1f11dc6c146a8d439f4dbb55a2", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -170,6 +170,7 @@ fn mark_used_by_default_parameters<'tcx>(\n         | DefKind::AnonConst\n         | DefKind::InlineConst\n         | DefKind::OpaqueTy\n+        | DefKind::ImplTraitPlaceholder\n         | DefKind::Field\n         | DefKind::LifetimeParam\n         | DefKind::GlobalAsm"}, {"sha": "bb684e784c58a65d854c37fea989baa6b55799c6", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -661,6 +661,7 @@ impl CheckAttrVisitor<'_> {\n             | Target::GlobalAsm\n             | Target::TyAlias\n             | Target::OpaqueTy\n+            | Target::ImplTraitPlaceholder\n             | Target::Enum\n             | Target::Variant\n             | Target::Struct"}, {"sha": "f141d7beeb921b895bc4903e5bc3995eac043416", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -447,7 +447,7 @@ impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n     }\n \n     fn visit_ty(&mut self, ty: &'tcx hir::Ty<'tcx>) {\n-        if let TyKind::OpaqueDef(item_id, _) = ty.kind {\n+        if let TyKind::OpaqueDef(item_id, _, _) = ty.kind {\n             let item = self.tcx.hir().item(item_id);\n             intravisit::walk_item(self, item);\n         }"}, {"sha": "afd423dc5fa1abfa29dcdd83cd14a14c134903e2", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -596,6 +596,7 @@ impl<'tcx> EmbargoVisitor<'tcx> {\n             | DefKind::ForeignTy\n             | DefKind::Fn\n             | DefKind::OpaqueTy\n+            | DefKind::ImplTraitPlaceholder\n             | DefKind::AssocFn\n             | DefKind::Trait\n             | DefKind::TyParam\n@@ -706,12 +707,12 @@ impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             hir::ItemKind::Use(..) => {}\n             // The interface is empty.\n             hir::ItemKind::GlobalAsm(..) => {}\n-            hir::ItemKind::OpaqueTy(..) => {\n+            hir::ItemKind::OpaqueTy(ref opaque) => {\n                 // HACK(jynelson): trying to infer the type of `impl trait` breaks `async-std` (and `pub async fn` in general)\n                 // Since rustdoc never needs to do codegen and doesn't care about link-time reachability,\n                 // mark this as unreachable.\n                 // See https://github.com/rust-lang/rust/issues/75100\n-                if !self.tcx.sess.opts.actually_rustdoc {\n+                if !opaque.in_trait && !self.tcx.sess.opts.actually_rustdoc {\n                     // FIXME: This is some serious pessimization intended to workaround deficiencies\n                     // in the reachability pass (`middle/reachable.rs`). Types are marked as link-time\n                     // reachable if they are returned via `impl Trait`, even from private functions.\n@@ -2033,7 +2034,8 @@ fn local_visibility(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Visibility {\n                 //   Visibility on them should have no effect, but to avoid the visibility\n                 //   query failing on some items, we provide it for opaque types as well.\n                 | Node::Item(hir::Item {\n-                    kind: hir::ItemKind::Use(_, hir::UseKind::ListStem) | hir::ItemKind::OpaqueTy(..),\n+                    kind: hir::ItemKind::Use(_, hir::UseKind::ListStem)\n+                        | hir::ItemKind::OpaqueTy(..),\n                     ..\n                 }) => ty::Visibility::Restricted(tcx.parent_module(hir_id)),\n                 // Visibilities of trait impl items are inherited from their traits"}, {"sha": "81b67b758f7e12393262b31a362252a180032a29", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -972,6 +972,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 | DefKind::TyAlias\n                 | DefKind::ForeignTy\n                 | DefKind::OpaqueTy\n+                | DefKind::ImplTraitPlaceholder\n                 | DefKind::TraitAlias\n                 | DefKind::AssocTy,\n                 _,"}, {"sha": "2d6e76c451bfa3ea1a525e167f187874338f06f9", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -851,7 +851,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                         // We include all lifetime parameters, either named or \"Fresh\".\n                         // The order of those parameters does not matter, as long as it is\n                         // deterministic.\n-                        if let Some(async_node_id) = async_node_id {\n+                        if let Some((async_node_id, _)) = async_node_id {\n                             let mut extra_lifetime_params = this\n                                 .r\n                                 .extra_lifetime_params_map"}, {"sha": "6ff56f9a89114cd4367d7a18d0e8b71b3e98d912", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -715,7 +715,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 };\n                 self.with(scope, |this| this.visit_ty(&mt.ty));\n             }\n-            hir::TyKind::OpaqueDef(item_id, lifetimes) => {\n+            hir::TyKind::OpaqueDef(item_id, lifetimes, _in_trait) => {\n                 // Resolve the lifetimes in the bounds to the lifetime defs in the generics.\n                 // `fn foo<'a>() -> impl MyTrait<'a> { ... }` desugars to\n                 // `type MyAnonTy<'b> = impl MyTrait<'b>;`"}, {"sha": "94f222251d3dc7b0787ccbdd26698d10925d93a3", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -1321,7 +1321,7 @@ impl<'tcx> Visitor<'tcx> for DumpVisitor<'tcx> {\n                         }),\n                 }\n             }\n-            hir::TyKind::OpaqueDef(item_id, _) => {\n+            hir::TyKind::OpaqueDef(item_id, _, _) => {\n                 let item = self.tcx.hir().item(item_id);\n                 self.nest_typeck_results(item_id.def_id, |v| v.visit_item(item));\n             }"}, {"sha": "ebe44a56449d32ec5b75ac6578f921316250759e", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -685,6 +685,7 @@ impl<'tcx> SaveContext<'tcx> {\n                 | HirDefKind::AssocTy\n                 | HirDefKind::Trait\n                 | HirDefKind::OpaqueTy\n+                | HirDefKind::ImplTraitPlaceholder\n                 | HirDefKind::TyParam,\n                 def_id,\n             ) => Some(Ref { kind: RefKind::Type, span, ref_id: id_from_def_id(def_id) }),"}, {"sha": "bae1828cd182df3f7f6380c4c325ed01e6cd30b7", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -316,7 +316,7 @@ impl<'hir> Sig for hir::Ty<'hir> {\n                 let text = format!(\"[{}; {}]\", nested_ty.text, expr);\n                 Ok(replace_text(nested_ty, text))\n             }\n-            hir::TyKind::OpaqueDef(item_id, _) => {\n+            hir::TyKind::OpaqueDef(item_id, _, _) => {\n                 let item = scx.tcx.hir().item(item_id);\n                 item.make(offset, Some(item_id.hir_id()), scx)\n             }\n@@ -561,7 +561,13 @@ impl<'hir> Sig for hir::Item<'hir> {\n             hir::ItemKind::ForeignMod { .. } => Err(\"extern mod\"),\n             hir::ItemKind::GlobalAsm(_) => Err(\"global asm\"),\n             hir::ItemKind::ExternCrate(_) => Err(\"extern crate\"),\n-            hir::ItemKind::OpaqueTy(..) => Err(\"opaque type\"),\n+            hir::ItemKind::OpaqueTy(ref opaque) => {\n+                if opaque.in_trait {\n+                    Err(\"opaque type in trait\")\n+                } else {\n+                    Err(\"opaque type\")\n+                }\n+            }\n             // FIXME should implement this (e.g., pub use).\n             hir::ItemKind::Use(..) => Err(\"import\"),\n         }"}, {"sha": "4fd9e7407ce14e56548c39c1f160e47517040c67", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -1183,6 +1183,7 @@ symbols! {\n         require,\n         residual,\n         result,\n+        return_position_impl_trait_in_trait,\n         rhs,\n         rintf32,\n         rintf64,"}, {"sha": "8a65262a007230d0858e43ecf1a35f02512b3463", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -32,6 +32,7 @@ use rustc_middle::traits::select::OverflowError;\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::visit::{MaxUniverse, TypeVisitable};\n+use rustc_middle::ty::DefIdTree;\n use rustc_middle::ty::{self, Term, ToPredicate, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n \n@@ -70,6 +71,8 @@ enum ProjectionCandidate<'tcx> {\n \n     /// From an \"impl\" (or a \"pseudo-impl\" returned by select)\n     Select(Selection<'tcx>),\n+\n+    ImplTraitInTrait(ImplSourceUserDefinedData<'tcx, PredicateObligation<'tcx>>),\n }\n \n enum ProjectionCandidateSet<'tcx> {\n@@ -1265,6 +1268,8 @@ fn project<'cx, 'tcx>(\n \n     let mut candidates = ProjectionCandidateSet::None;\n \n+    assemble_candidate_for_impl_trait_in_trait(selcx, obligation, &mut candidates);\n+\n     // Make sure that the following procedures are kept in order. ParamEnv\n     // needs to be first because it has highest priority, and Select checks\n     // the return value of push_candidate which assumes it's ran at last.\n@@ -1303,6 +1308,48 @@ fn project<'cx, 'tcx>(\n     }\n }\n \n+/// If the predicate's item is an `ImplTraitPlaceholder`, we do a select on the\n+/// corresponding trait ref. If this yields an `impl`, then we're able to project\n+/// to a concrete type, since we have an `impl`'s method  to provide the RPITIT.\n+fn assemble_candidate_for_impl_trait_in_trait<'cx, 'tcx>(\n+    selcx: &mut SelectionContext<'cx, 'tcx>,\n+    obligation: &ProjectionTyObligation<'tcx>,\n+    candidate_set: &mut ProjectionCandidateSet<'tcx>,\n+) {\n+    let tcx = selcx.tcx();\n+    if tcx.def_kind(obligation.predicate.item_def_id) == DefKind::ImplTraitPlaceholder {\n+        let trait_fn_def_id = tcx.impl_trait_in_trait_parent(obligation.predicate.item_def_id);\n+        let trait_def_id = tcx.parent(trait_fn_def_id);\n+        let trait_substs =\n+            obligation.predicate.substs.truncate_to(tcx, tcx.generics_of(trait_def_id));\n+        // FIXME(named-returns): Binders\n+        let trait_predicate =\n+            ty::Binder::dummy(ty::TraitRef { def_id: trait_def_id, substs: trait_substs })\n+                .to_poly_trait_predicate();\n+\n+        let _ =\n+            selcx.infcx().commit_if_ok(|_| match selcx.select(&obligation.with(trait_predicate)) {\n+                Ok(Some(super::ImplSource::UserDefined(data))) => {\n+                    candidate_set.push_candidate(ProjectionCandidate::ImplTraitInTrait(data));\n+                    Ok(())\n+                }\n+                Ok(None) => {\n+                    candidate_set.mark_ambiguous();\n+                    return Err(());\n+                }\n+                Ok(Some(_)) => {\n+                    // Don't know enough about the impl to provide a useful signature\n+                    return Err(());\n+                }\n+                Err(e) => {\n+                    debug!(error = ?e, \"selection error\");\n+                    candidate_set.mark_error(e);\n+                    return Err(());\n+                }\n+            });\n+    }\n+}\n+\n /// The first thing we have to do is scan through the parameter\n /// environment to see whether there are any projection predicates\n /// there that can answer this question.\n@@ -1465,6 +1512,11 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n     obligation: &ProjectionTyObligation<'tcx>,\n     candidate_set: &mut ProjectionCandidateSet<'tcx>,\n ) {\n+    // Can't assemble candidate from impl for RPITIT\n+    if selcx.tcx().def_kind(obligation.predicate.item_def_id) == DefKind::ImplTraitPlaceholder {\n+        return;\n+    }\n+\n     // If we are resolving `<T as TraitRef<...>>::Item == Type`,\n     // start out by selecting the predicate `T as TraitRef<...>`:\n     let poly_trait_ref = ty::Binder::dummy(obligation.predicate.trait_ref(selcx.tcx()));\n@@ -1740,6 +1792,9 @@ fn confirm_candidate<'cx, 'tcx>(\n         ProjectionCandidate::Select(impl_source) => {\n             confirm_select_candidate(selcx, obligation, impl_source)\n         }\n+        ProjectionCandidate::ImplTraitInTrait(data) => {\n+            confirm_impl_trait_in_trait_candidate(selcx, obligation, data)\n+        }\n     };\n \n     // When checking for cycle during evaluation, we compare predicates with\n@@ -2102,6 +2157,72 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n     }\n }\n \n+fn confirm_impl_trait_in_trait_candidate<'tcx>(\n+    selcx: &mut SelectionContext<'_, 'tcx>,\n+    obligation: &ProjectionTyObligation<'tcx>,\n+    data: ImplSourceUserDefinedData<'tcx, PredicateObligation<'tcx>>,\n+) -> Progress<'tcx> {\n+    let tcx = selcx.tcx();\n+    let mut obligations = data.nested;\n+\n+    let trait_fn_def_id = tcx.impl_trait_in_trait_parent(obligation.predicate.item_def_id);\n+    let Ok(leaf_def) = assoc_def(selcx, data.impl_def_id, trait_fn_def_id) else {\n+        return Progress { term: tcx.ty_error().into(), obligations };\n+    };\n+    if !leaf_def.item.defaultness(tcx).has_value() {\n+        return Progress { term: tcx.ty_error().into(), obligations };\n+    }\n+\n+    let impl_fn_def_id = leaf_def.item.def_id;\n+    let impl_fn_substs = obligation.predicate.substs.rebase_onto(tcx, trait_fn_def_id, data.substs);\n+\n+    let cause = ObligationCause::new(\n+        obligation.cause.span,\n+        obligation.cause.body_id,\n+        super::ItemObligation(impl_fn_def_id),\n+    );\n+    let predicates = normalize_with_depth_to(\n+        selcx,\n+        obligation.param_env,\n+        cause.clone(),\n+        obligation.recursion_depth + 1,\n+        tcx.predicates_of(impl_fn_def_id).instantiate(tcx, impl_fn_substs),\n+        &mut obligations,\n+    );\n+    obligations.extend(std::iter::zip(predicates.predicates, predicates.spans).map(\n+        |(pred, span)| {\n+            Obligation::with_depth(\n+                ObligationCause::new(\n+                    obligation.cause.span,\n+                    obligation.cause.body_id,\n+                    if span.is_dummy() {\n+                        super::ItemObligation(impl_fn_def_id)\n+                    } else {\n+                        super::BindingObligation(impl_fn_def_id, span)\n+                    },\n+                ),\n+                obligation.recursion_depth + 1,\n+                obligation.param_env,\n+                pred,\n+            )\n+        },\n+    ));\n+\n+    let ty = super::normalize_to(\n+        selcx,\n+        obligation.param_env,\n+        cause.clone(),\n+        tcx.bound_trait_impl_trait_tys(impl_fn_def_id)\n+            .map_bound(|tys| {\n+                tys.map_or_else(|_| tcx.ty_error(), |tys| tys[&obligation.predicate.item_def_id])\n+            })\n+            .subst(tcx, impl_fn_substs),\n+        &mut obligations,\n+    );\n+\n+    Progress { term: ty.into(), obligations }\n+}\n+\n // Get obligations corresponding to the predicates from the where-clause of the\n // associated type itself.\n // Note: `feature(generic_associated_types)` is required to write such"}, {"sha": "f0d8c240ea588bbcdde326ef58e5c240de00e5bc", "filename": "compiler/rustc_ty_utils/src/implied_bounds.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -51,6 +51,7 @@ fn assumed_wf_types<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::List<Ty\n         | DefKind::AnonConst\n         | DefKind::InlineConst\n         | DefKind::OpaqueTy\n+        | DefKind::ImplTraitPlaceholder\n         | DefKind::Field\n         | DefKind::LifetimeParam\n         | DefKind::GlobalAsm"}, {"sha": "d9789d5aaf0312e9be5018dc95e1f5810d77c410", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -2360,7 +2360,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         let span = path.span;\n         match path.res {\n-            Res::Def(DefKind::OpaqueTy, did) => {\n+            Res::Def(DefKind::OpaqueTy | DefKind::ImplTraitPlaceholder, did) => {\n                 // Check for desugared `impl Trait`.\n                 assert!(ty::is_impl_trait_defn(tcx, did).is_none());\n                 let item_segment = path.segments.split_last().unwrap();\n@@ -2627,13 +2627,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 let opt_self_ty = maybe_qself.as_ref().map(|qself| self.ast_ty_to_ty(qself));\n                 self.res_to_ty(opt_self_ty, path, false)\n             }\n-            hir::TyKind::OpaqueDef(item_id, lifetimes) => {\n+            hir::TyKind::OpaqueDef(item_id, lifetimes, in_trait) => {\n                 let opaque_ty = tcx.hir().item(item_id);\n                 let def_id = item_id.def_id.to_def_id();\n \n                 match opaque_ty.kind {\n                     hir::ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => {\n-                        self.impl_trait_ty_to_ty(def_id, lifetimes, origin)\n+                        self.impl_trait_ty_to_ty(def_id, lifetimes, origin, in_trait)\n                     }\n                     ref i => bug!(\"`impl Trait` pointed to non-opaque type?? {:#?}\", i),\n                 }\n@@ -2703,6 +2703,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         def_id: DefId,\n         lifetimes: &[hir::GenericArg<'_>],\n         origin: OpaqueTyOrigin,\n+        in_trait: bool,\n     ) -> Ty<'tcx> {\n         debug!(\"impl_trait_ty_to_ty(def_id={:?}, lifetimes={:?})\", def_id, lifetimes);\n         let tcx = self.tcx();\n@@ -2746,7 +2747,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         });\n         debug!(\"impl_trait_ty_to_ty: substs={:?}\", substs);\n \n-        tcx.mk_opaque(def_id, substs)\n+        if in_trait { tcx.mk_projection(def_id, substs) } else { tcx.mk_opaque(def_id, substs) }\n     }\n \n     pub fn ty_of_arg(&self, ty: &hir::Ty<'_>, expected_ty: Option<Ty<'tcx>>) -> Ty<'tcx> {"}, {"sha": "55cbaf71e7cfdd9b8f49a257fde93e89318e6df1", "filename": "compiler/rustc_typeck/src/check/closure.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -4,6 +4,7 @@ use super::{check_fn, Expectation, FnCtxt, GeneratorTypes};\n \n use crate::astconv::AstConv;\n use crate::rustc_middle::ty::subst::Subst;\n+use hir::def::DefKind;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n@@ -680,9 +681,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .map(|e| e.map_bound(|e| *e).transpose_tuple2())\n                 .find_map(|(p, s)| get_future_output(p.subst(self.tcx, substs), s.0))?,\n             ty::Error(_) => return None,\n+            ty::Projection(proj)\n+                if self.tcx.def_kind(proj.item_def_id) == DefKind::ImplTraitPlaceholder =>\n+            {\n+                self.tcx\n+                    .bound_explicit_item_bounds(proj.item_def_id)\n+                    .transpose_iter()\n+                    .map(|e| e.map_bound(|e| *e).transpose_tuple2())\n+                    .find_map(|(p, s)| get_future_output(p.subst(self.tcx, proj.substs), s.0))?\n+            }\n             _ => span_bug!(\n                 self.tcx.def_span(expr_def_id),\n-                \"async fn generator return type not an inference variable\"\n+                \"async fn generator return type not an inference variable: {ret_ty}\"\n             ),\n         };\n "}, {"sha": "1152a2477a2a8bfa5dce09d7a4a2bc8280dcae3f", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 130, "deletions": 14, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -1,18 +1,22 @@\n use super::potentially_plural_count;\n use crate::errors::LifetimesOrBoundsMismatchOnTrait;\n-use rustc_data_structures::fx::FxHashSet;\n+use hir::def_id::DefId;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticId, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit;\n use rustc_hir::{GenericParamKind, ImplItemKind, TraitItemKind};\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n+use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{self, TyCtxtInferExt};\n use rustc_infer::traits::util;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::util::ExplicitSelf;\n-use rustc_middle::ty::{self, DefIdTree};\n+use rustc_middle::ty::{\n+    self, DefIdTree, Ty, TypeFoldable, TypeFolder, TypeSuperFoldable, TypeVisitable,\n+};\n use rustc_middle::ty::{GenericParamDefKind, ToPredicate, TyCtxt};\n use rustc_span::Span;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n@@ -64,10 +68,7 @@ pub(crate) fn compare_impl_method<'tcx>(\n         return;\n     }\n \n-    if let Err(_) = compare_predicate_entailment(tcx, impl_m, impl_m_span, trait_m, impl_trait_ref)\n-    {\n-        return;\n-    }\n+    tcx.ensure().compare_predicates_and_trait_impl_trait_tys(impl_m.def_id);\n }\n \n /// This function is best explained by example. Consider a trait:\n@@ -136,13 +137,15 @@ pub(crate) fn compare_impl_method<'tcx>(\n ///\n /// Finally we register each of these predicates as an obligation and check that\n /// they hold.\n-fn compare_predicate_entailment<'tcx>(\n+pub(super) fn compare_predicates_and_trait_impl_trait_tys<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    impl_m: &ty::AssocItem,\n-    impl_m_span: Span,\n-    trait_m: &ty::AssocItem,\n-    impl_trait_ref: ty::TraitRef<'tcx>,\n-) -> Result<(), ErrorGuaranteed> {\n+    def_id: DefId,\n+) -> Result<&'tcx FxHashMap<DefId, Ty<'tcx>>, ErrorGuaranteed> {\n+    let impl_m = tcx.opt_associated_item(def_id).unwrap();\n+    let impl_m_span = tcx.def_span(def_id);\n+    let trait_m = tcx.opt_associated_item(impl_m.trait_item_def_id.unwrap()).unwrap();\n+    let impl_trait_ref = tcx.impl_trait_ref(impl_m.impl_container(tcx).unwrap()).unwrap();\n+\n     let trait_to_impl_substs = impl_trait_ref.substs;\n \n     // This node-id should be used for the `body_id` field on each\n@@ -161,6 +164,7 @@ fn compare_predicate_entailment<'tcx>(\n             kind: impl_m.kind,\n         },\n     );\n+    let return_span = tcx.hir().fn_decl_by_hir_id(impl_m_hir_id).unwrap().output.span();\n \n     // Create mapping from impl to placeholder.\n     let impl_to_placeholder_substs = InternalSubsts::identity_for_item(tcx, impl_m.def_id);\n@@ -266,6 +270,13 @@ fn compare_predicate_entailment<'tcx>(\n \n         let trait_sig = tcx.bound_fn_sig(trait_m.def_id).subst(tcx, trait_to_placeholder_substs);\n         let trait_sig = tcx.liberate_late_bound_regions(impl_m.def_id, trait_sig);\n+        let mut collector =\n+            ImplTraitInTraitCollector::new(&ocx, return_span, param_env, impl_m_hir_id);\n+        // FIXME(RPITIT): This should only be needed on the output type, but\n+        // RPITIT placeholders shouldn't show up anywhere except for there,\n+        // so I think this is fine.\n+        let trait_sig = trait_sig.fold_with(&mut collector);\n+\n         // Next, add all inputs and output as well-formed tys. Importantly,\n         // we have to do this before normalization, since the normalized ty may\n         // not contain the input parameters. See issue #87748.\n@@ -411,10 +422,115 @@ fn compare_predicate_entailment<'tcx>(\n             &outlives_environment,\n         );\n \n-        Ok(())\n+        let mut collected_tys = FxHashMap::default();\n+        for (def_id, (ty, substs)) in collector.types {\n+            match infcx.fully_resolve(ty) {\n+                Ok(ty) => {\n+                    // `ty` contains free regions that we created earlier while liberating the\n+                    // trait fn signature.  However, projection normalization expects `ty` to\n+                    // contains `def_id`'s early-bound regions.\n+                    let id_substs = InternalSubsts::identity_for_item(tcx, def_id);\n+                    debug!(?id_substs, ?substs);\n+                    let map: FxHashMap<ty::GenericArg<'tcx>, ty::GenericArg<'tcx>> = substs\n+                        .iter()\n+                        .enumerate()\n+                        .map(|(index, arg)| (arg, id_substs[index]))\n+                        .collect();\n+                    debug!(?map);\n+\n+                    let ty = tcx.fold_regions(ty, |region, _| {\n+                        if let ty::ReFree(_) = region.kind() {\n+                            map[&region.into()].expect_region()\n+                        } else {\n+                            region\n+                        }\n+                    });\n+                    collected_tys.insert(def_id, ty);\n+                }\n+                Err(err) => {\n+                    tcx.sess.delay_span_bug(\n+                        return_span,\n+                        format!(\"could not fully resolve: {ty} => {err:?}\"),\n+                    );\n+                    collected_tys.insert(def_id, tcx.ty_error());\n+                }\n+            }\n+        }\n+\n+        Ok(&*tcx.arena.alloc(collected_tys))\n     })\n }\n \n+struct ImplTraitInTraitCollector<'a, 'tcx> {\n+    ocx: &'a ObligationCtxt<'a, 'tcx>,\n+    types: FxHashMap<DefId, (Ty<'tcx>, ty::SubstsRef<'tcx>)>,\n+    span: Span,\n+    param_env: ty::ParamEnv<'tcx>,\n+    body_id: hir::HirId,\n+}\n+\n+impl<'a, 'tcx> ImplTraitInTraitCollector<'a, 'tcx> {\n+    fn new(\n+        ocx: &'a ObligationCtxt<'a, 'tcx>,\n+        span: Span,\n+        param_env: ty::ParamEnv<'tcx>,\n+        body_id: hir::HirId,\n+    ) -> Self {\n+        ImplTraitInTraitCollector { ocx, types: FxHashMap::default(), span, param_env, body_id }\n+    }\n+}\n+\n+impl<'tcx> TypeFolder<'tcx> for ImplTraitInTraitCollector<'_, 'tcx> {\n+    fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n+        self.ocx.infcx.tcx\n+    }\n+\n+    fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n+        if let ty::Projection(proj) = ty.kind()\n+            && self.tcx().def_kind(proj.item_def_id) == DefKind::ImplTraitPlaceholder\n+        {\n+            if let Some((ty, _)) = self.types.get(&proj.item_def_id) {\n+                return *ty;\n+            }\n+            //FIXME(RPITIT): Deny nested RPITIT in substs too\n+            if proj.substs.has_escaping_bound_vars() {\n+                bug!(\"FIXME(RPITIT): error here\");\n+            }\n+            // Replace with infer var\n+            let infer_ty = self.ocx.infcx.next_ty_var(TypeVariableOrigin {\n+                span: self.span,\n+                kind: TypeVariableOriginKind::MiscVariable,\n+            });\n+            self.types.insert(proj.item_def_id, (infer_ty, proj.substs));\n+            // Recurse into bounds\n+            for pred in self.tcx().bound_explicit_item_bounds(proj.item_def_id).transpose_iter() {\n+                let pred_span = pred.0.1;\n+\n+                let pred = pred.map_bound(|(pred, _)| *pred).subst(self.tcx(), proj.substs);\n+                let pred = pred.fold_with(self);\n+                let pred = self.ocx.normalize(\n+                    ObligationCause::misc(self.span, self.body_id),\n+                    self.param_env,\n+                    pred,\n+                );\n+\n+                self.ocx.register_obligation(traits::Obligation::new(\n+                    ObligationCause::new(\n+                        self.span,\n+                        self.body_id,\n+                        ObligationCauseCode::BindingObligation(proj.item_def_id, pred_span),\n+                    ),\n+                    self.param_env,\n+                    pred,\n+                ));\n+            }\n+            infer_ty\n+        } else {\n+            ty.super_fold_with(self)\n+        }\n+    }\n+}\n+\n fn check_region_bounds_on_impl_item<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     impl_m: &ty::AssocItem,\n@@ -1191,7 +1307,7 @@ pub(crate) fn compare_ty_impl<'tcx>(\n     })();\n }\n \n-/// The equivalent of [compare_predicate_entailment], but for associated types\n+/// The equivalent of [compare_predicates_and_trait_impl_trait_tys], but for associated types\n /// instead of associated functions.\n fn compare_type_predicate_entailment<'tcx>(\n     tcx: TyCtxt<'tcx>,"}, {"sha": "8811b38fc555afb364efbaa12868cebbb67c9adf", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -132,6 +132,7 @@ use crate::require_c_abi_if_c_variadic;\n use crate::util::common::indenter;\n \n use self::coercion::DynamicCoerceMany;\n+use self::compare_method::compare_predicates_and_trait_impl_trait_tys;\n use self::region::region_scope_tree;\n pub use self::Expectation::*;\n \n@@ -249,6 +250,7 @@ pub fn provide(providers: &mut Providers) {\n         used_trait_imports,\n         check_mod_item_types,\n         region_scope_tree,\n+        compare_predicates_and_trait_impl_trait_tys,\n         ..*providers\n     };\n }"}, {"sha": "ceb5684fdf0a8f4c98c9a49526b09a92bebc0df5", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -1585,8 +1585,16 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             ItemKind::OpaqueTy(hir::OpaqueTy {\n                 origin:\n                     hir::OpaqueTyOrigin::FnReturn(fn_def_id) | hir::OpaqueTyOrigin::AsyncFn(fn_def_id),\n+                in_trait,\n                 ..\n-            }) => Some(fn_def_id.to_def_id()),\n+            }) => {\n+                if in_trait {\n+                    assert!(matches!(tcx.def_kind(fn_def_id), DefKind::AssocFn))\n+                } else {\n+                    assert!(matches!(tcx.def_kind(fn_def_id), DefKind::AssocFn | DefKind::Fn))\n+                }\n+                Some(fn_def_id.to_def_id())\n+            }\n             ItemKind::OpaqueTy(hir::OpaqueTy { origin: hir::OpaqueTyOrigin::TyAlias, .. }) => {\n                 let parent_id = tcx.hir().get_parent_item(hir_id);\n                 assert_ne!(parent_id, CRATE_DEF_ID);\n@@ -1787,7 +1795,7 @@ fn is_suggestable_infer_ty(ty: &hir::Ty<'_>) -> bool {\n         }\n         Tup(tys) => tys.iter().any(is_suggestable_infer_ty),\n         Ptr(mut_ty) | Rptr(_, mut_ty) => is_suggestable_infer_ty(mut_ty.ty),\n-        OpaqueDef(_, generic_args) => are_suggestable_generic_args(generic_args),\n+        OpaqueDef(_, generic_args, _) => are_suggestable_generic_args(generic_args),\n         Path(hir::QPath::TypeRelative(ty, segment)) => {\n             is_suggestable_infer_ty(ty) || are_suggestable_generic_args(segment.args().args)\n         }"}, {"sha": "0d34a8bfee333d3d457fd32e15cfc101eb5ad474", "filename": "compiler/rustc_typeck/src/collect/item_bounds.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -59,10 +59,15 @@ fn opaque_type_bounds<'tcx>(\n     opaque_def_id: DefId,\n     ast_bounds: &'tcx [hir::GenericBound<'tcx>],\n     span: Span,\n+    in_trait: bool,\n ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {\n     ty::print::with_no_queries!({\n-        let item_ty =\n-            tcx.mk_opaque(opaque_def_id, InternalSubsts::identity_for_item(tcx, opaque_def_id));\n+        let substs = InternalSubsts::identity_for_item(tcx, opaque_def_id);\n+        let item_ty = if in_trait {\n+            tcx.mk_projection(opaque_def_id, substs)\n+        } else {\n+            tcx.mk_opaque(opaque_def_id, substs)\n+        };\n \n         let icx = ItemCtxt::new(tcx, opaque_def_id);\n         let mut bounds = <dyn AstConv<'_>>::compute_bounds(&icx, item_ty, ast_bounds);\n@@ -86,10 +91,10 @@ pub(super) fn explicit_item_bounds(\n             ..\n         }) => associated_type_bounds(tcx, def_id, bounds, *span),\n         hir::Node::Item(hir::Item {\n-            kind: hir::ItemKind::OpaqueTy(hir::OpaqueTy { bounds, .. }),\n+            kind: hir::ItemKind::OpaqueTy(hir::OpaqueTy { bounds, in_trait, .. }),\n             span,\n             ..\n-        }) => opaque_type_bounds(tcx, def_id, bounds, *span),\n+        }) => opaque_type_bounds(tcx, def_id, bounds, *span, *in_trait),\n         _ => bug!(\"item_bounds called on {:?}\", def_id),\n     }\n }"}, {"sha": "a26e26cb38996074ea685d94b8fe362457d70a5b", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -333,8 +333,12 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     find_opaque_ty_constraints_for_tait(tcx, def_id)\n                 }\n                 // Opaque types desugared from `impl Trait`.\n-                ItemKind::OpaqueTy(OpaqueTy { origin: hir::OpaqueTyOrigin::FnReturn(owner) | hir::OpaqueTyOrigin::AsyncFn(owner), .. }) => {\n-                    find_opaque_ty_constraints_for_rpit(tcx, def_id, owner)\n+                ItemKind::OpaqueTy(OpaqueTy { origin: hir::OpaqueTyOrigin::FnReturn(owner) | hir::OpaqueTyOrigin::AsyncFn(owner), in_trait, .. }) => {\n+                    if in_trait {\n+                        span_bug!(item.span, \"impl-trait in trait has no default\")\n+                    } else {\n+                        find_opaque_ty_constraints_for_rpit(tcx, def_id, owner)\n+                    }\n                 }\n                 ItemKind::Trait(..)\n                 | ItemKind::TraitAlias(..)"}, {"sha": "08b696e65eb3b0c10b10245cb819c285a56bd6be", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -1492,7 +1492,7 @@ pub(crate) fn clean_ty<'tcx>(ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> T\n             Array(Box::new(clean_ty(ty, cx)), length)\n         }\n         TyKind::Tup(tys) => Tuple(tys.iter().map(|ty| clean_ty(ty, cx)).collect()),\n-        TyKind::OpaqueDef(item_id, _) => {\n+        TyKind::OpaqueDef(item_id, _, _) => {\n             let item = cx.tcx.hir().item(item_id);\n             if let hir::ItemKind::OpaqueTy(ref ty) = item.kind {\n                 ImplTrait(ty.bounds.iter().filter_map(|x| clean_generic_bound(x, cx)).collect())"}, {"sha": "395f213ca87c353836a89a36537f84b36dcd99ca", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -511,8 +511,8 @@ pub(crate) fn register_res(cx: &mut DocContext<'_>, res: Res) -> DefId {\n         | Res::Err => return res.def_id(),\n         Res::Def(\n             TyParam | ConstParam | Ctor(..) | ExternCrate | Use | ForeignMod | AnonConst\n-            | InlineConst | OpaqueTy | Field | LifetimeParam | GlobalAsm | Impl | Closure\n-            | Generator,\n+            | InlineConst | OpaqueTy | ImplTraitPlaceholder | Field | LifetimeParam | GlobalAsm\n+            | Impl | Closure | Generator,\n             id,\n         ) => return id,\n     };"}, {"sha": "f21e60a64e0055f87060c44de8b5b492866deb66", "filename": "src/librustdoc/formats/item_type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/src%2Flibrustdoc%2Fformats%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/src%2Flibrustdoc%2Fformats%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fitem_type.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -135,6 +135,7 @@ impl From<DefKind> for ItemType {\n             | DefKind::AnonConst\n             | DefKind::InlineConst\n             | DefKind::OpaqueTy\n+            | DefKind::ImplTraitPlaceholder\n             | DefKind::Field\n             | DefKind::LifetimeParam\n             | DefKind::GlobalAsm"}, {"sha": "cfd6ce402c28a823249482d2a9e997065c0b0615", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -1805,8 +1805,8 @@ fn resolution_failure(\n                                 }\n                                 return;\n                             }\n-                            Trait | TyAlias | ForeignTy | OpaqueTy | TraitAlias | TyParam\n-                            | Static(_) => \"associated item\",\n+                            Trait | TyAlias | ForeignTy | OpaqueTy | ImplTraitPlaceholder\n+                            | TraitAlias | TyParam | Static(_) => \"associated item\",\n                             Impl | GlobalAsm => unreachable!(\"not a path\"),\n                         }\n                     } else {"}, {"sha": "0ea685986db4057dcbf376b0913d06428de24a71", "filename": "src/test/ui/async-await/async-trait-fn.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -1,8 +1,11 @@\n // edition:2018\n trait T {\n     async fn foo() {} //~ ERROR functions in traits cannot be declared `async`\n+    //~^ ERROR mismatched types\n     async fn bar(&self) {} //~ ERROR functions in traits cannot be declared `async`\n+    //~^ ERROR mismatched types\n     async fn baz() { //~ ERROR functions in traits cannot be declared `async`\n+        //~^ ERROR mismatched types\n         // Nested item must not ICE.\n         fn a() {}\n     }"}, {"sha": "e5c584e31e8158326f67a14d306d75805cfa9d55", "filename": "src/test/ui/async-await/async-trait-fn.stderr", "status": "modified", "additions": 62, "deletions": 13, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.stderr?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -2,40 +2,89 @@ error[E0706]: functions in traits cannot be declared `async`\n   --> $DIR/async-trait-fn.rs:3:5\n    |\n LL |     async fn foo() {}\n-   |     -----^^^^^^^^^^^^\n+   |     -----^^^^^^^^^\n    |     |\n    |     `async` because of this\n    |\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/async-trait-fn.rs:4:5\n+  --> $DIR/async-trait-fn.rs:5:5\n    |\n LL |     async fn bar(&self) {}\n-   |     -----^^^^^^^^^^^^^^^^^\n+   |     -----^^^^^^^^^^^^^^\n    |     |\n    |     `async` because of this\n    |\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/async-trait-fn.rs:5:5\n+  --> $DIR/async-trait-fn.rs:7:5\n+   |\n+LL |     async fn baz() {\n+   |     -----^^^^^^^^^\n+   |     |\n+   |     `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+\n+error[E0308]: mismatched types\n+  --> $DIR/async-trait-fn.rs:3:20\n+   |\n+LL |     async fn foo() {}\n+   |                    ^^ expected associated type, found opaque type\n+   |\n+  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n+   |\n+LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n+   |                                           ------------------------------- the found opaque type\n+   |\n+   = note: expected associated type `impl Future<Output = ()>` (trait associated opaque type at <$DIR/async-trait-fn.rs:3:20>)\n+                  found opaque type `impl Future<Output = ()>` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n+\n+error[E0308]: mismatched types\n+  --> $DIR/async-trait-fn.rs:5:25\n+   |\n+LL |     async fn bar(&self) {}\n+   |                         ^^ expected associated type, found opaque type\n+   |\n+  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n+   |\n+LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n+   |                                           ------------------------------- the found opaque type\n+   |\n+   = note: expected associated type `impl Future<Output = ()>` (trait associated opaque type at <$DIR/async-trait-fn.rs:5:25>)\n+                  found opaque type `impl Future<Output = ()>` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n+\n+error[E0308]: mismatched types\n+  --> $DIR/async-trait-fn.rs:7:20\n    |\n LL |       async fn baz() {\n-   |       ^----\n-   |       |\n-   |  _____`async` because of this\n-   | |\n+   |  ____________________^\n+LL | |\n LL | |         // Nested item must not ICE.\n LL | |         fn a() {}\n LL | |     }\n-   | |_____^\n+   | |_____^ expected associated type, found opaque type\n    |\n-   = note: `async` trait functions are not currently supported\n-   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n+   |\n+LL |   pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n+   |                                             ------------------------------- the found opaque type\n+   |\n+   = note: expected associated type `impl Future<Output = ()>` (trait associated opaque type at <$DIR/async-trait-fn.rs:7:20>)\n+                  found opaque type `impl Future<Output = ()>` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0706`.\n+Some errors have detailed explanations: E0308, E0706.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "22a61dcd25f98835921c47d2aef5a281347f73c9", "filename": "src/test/ui/async-await/edition-deny-async-fns-2015.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -16,7 +16,8 @@ impl Foo {\n \n trait Bar {\n     async fn foo() {} //~ ERROR `async fn` is not permitted in Rust 2015\n-                      //~^ ERROR functions in traits cannot be declared `async`\n+    //~^ ERROR functions in traits cannot be declared `async`\n+    //~| ERROR mismatched types\n }\n \n fn main() {"}, {"sha": "8c2902d9b00d137ca47e799f5f26f90fc760758e", "filename": "src/test/ui/async-await/edition-deny-async-fns-2015.stderr", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -53,7 +53,7 @@ LL |     async fn foo() {}\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in Rust 2015\n-  --> $DIR/edition-deny-async-fns-2015.rs:36:9\n+  --> $DIR/edition-deny-async-fns-2015.rs:37:9\n    |\n LL |         async fn bar() {}\n    |         ^^^^^ to use `async fn`, switch to Rust 2018 or later\n@@ -62,7 +62,7 @@ LL |         async fn bar() {}\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in Rust 2015\n-  --> $DIR/edition-deny-async-fns-2015.rs:26:9\n+  --> $DIR/edition-deny-async-fns-2015.rs:27:9\n    |\n LL |         async fn foo() {}\n    |         ^^^^^ to use `async fn`, switch to Rust 2018 or later\n@@ -71,7 +71,7 @@ LL |         async fn foo() {}\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n error[E0670]: `async fn` is not permitted in Rust 2015\n-  --> $DIR/edition-deny-async-fns-2015.rs:31:13\n+  --> $DIR/edition-deny-async-fns-2015.rs:32:13\n    |\n LL |             async fn bar() {}\n    |             ^^^^^ to use `async fn`, switch to Rust 2018 or later\n@@ -83,14 +83,30 @@ error[E0706]: functions in traits cannot be declared `async`\n   --> $DIR/edition-deny-async-fns-2015.rs:18:5\n    |\n LL |     async fn foo() {}\n-   |     -----^^^^^^^^^^^^\n+   |     -----^^^^^^^^^\n    |     |\n    |     `async` because of this\n    |\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n-error: aborting due to 10 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/edition-deny-async-fns-2015.rs:18:20\n+   |\n+LL |     async fn foo() {}\n+   |                    ^^ expected associated type, found opaque type\n+   |\n+  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n+   |\n+LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n+   |                                           ------------------------------- the found opaque type\n+   |\n+   = note: expected associated type `impl Future<Output = ()>` (trait associated opaque type at <$DIR/edition-deny-async-fns-2015.rs:18:20>)\n+                  found opaque type `impl Future<Output = ()>` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n+\n+error: aborting due to 11 previous errors\n \n-Some errors have detailed explanations: E0670, E0706.\n-For more information about an error, try `rustc --explain E0670`.\n+Some errors have detailed explanations: E0308, E0670, E0706.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "1c12f1e4862e8a2b36af6d9006fd7514484cb11c", "filename": "src/test/ui/async-await/issues/issue-95307.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-95307.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-95307.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-95307.stderr?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -8,6 +8,8 @@ LL |     async fn new() -> [u8; _];\n    |\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n error: in expressions, `_` can only be used on the left-hand side of an assignment\n   --> $DIR/issue-95307.rs:7:28"}, {"sha": "de7966c66b057f085fa0bcbfb1c5ac16ede8c4ae", "filename": "src/test/ui/feature-gates/feature-gate-return_position_impl_trait_in_trait.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-return_position_impl_trait_in_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-return_position_impl_trait_in_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-return_position_impl_trait_in_trait.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -0,0 +1,5 @@\n+trait Foo {\n+    fn bar() -> impl Sized; //~ ERROR `impl Trait` only allowed in function and inherent method return types, not in trait method return\n+}\n+\n+fn main() {}"}, {"sha": "36177bbe1583023b9c729f2141395bedecd3bb05", "filename": "src/test/ui/feature-gates/feature-gate-return_position_impl_trait_in_trait.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-return_position_impl_trait_in_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-return_position_impl_trait_in_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-return_position_impl_trait_in_trait.stderr?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -0,0 +1,12 @@\n+error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in trait method return\n+  --> $DIR/feature-gate-return_position_impl_trait_in_trait.rs:2:17\n+   |\n+LL |     fn bar() -> impl Sized;\n+   |                 ^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0562`."}, {"sha": "772da845ee1f79fb79bc063acbd6cbadf47f72fc", "filename": "src/test/ui/impl-trait/in-trait/deep-match-works.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match-works.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match-works.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match-works.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+struct Wrapper<T>(T);\n+\n+trait Foo {\n+    fn bar() -> Wrapper<impl Sized>;\n+}\n+\n+impl Foo for () {\n+    fn bar() -> Wrapper<i32> { Wrapper(0) }\n+}\n+\n+fn main() {}"}, {"sha": "5a220bc3f198a229b02c8961353b721185f9f135", "filename": "src/test/ui/impl-trait/in-trait/deep-match.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -0,0 +1,15 @@\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+struct Wrapper<T>(T);\n+\n+trait Foo {\n+    fn bar() -> Wrapper<impl Sized>;\n+}\n+\n+impl Foo for () {\n+    fn bar() -> i32 { 0 }\n+    //~^ ERROR method `bar` has an incompatible type for trait\n+}\n+\n+fn main() {}"}, {"sha": "af449869cb356eb2611ea2953a1108f8cdeaf22a", "filename": "src/test/ui/impl-trait/in-trait/deep-match.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdeep-match.stderr?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -0,0 +1,20 @@\n+error[E0053]: method `bar` has an incompatible type for trait\n+  --> $DIR/deep-match.rs:11:17\n+   |\n+LL |     fn bar() -> i32 { 0 }\n+   |                 ^^^\n+   |                 |\n+   |                 expected struct `Wrapper`, found `i32`\n+   |                 help: change the output type to match the trait: `Wrapper<_>`\n+   |\n+note: type in trait\n+  --> $DIR/deep-match.rs:7:17\n+   |\n+LL |     fn bar() -> Wrapper<impl Sized>;\n+   |                 ^^^^^^^^^^^^^^^^^^^\n+   = note: expected fn pointer `fn() -> Wrapper<_>`\n+              found fn pointer `fn() -> i32`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "bb4e0d44f3eff2bd4fc001d11036f82ca11a9960", "filename": "src/test/ui/impl-trait/in-trait/doesnt-satisfy.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -0,0 +1,13 @@\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait Foo {\n+    fn bar() -> impl std::fmt::Display;\n+}\n+\n+impl Foo for () {\n+    fn bar() -> () {}\n+    //~^ ERROR `()` doesn't implement `std::fmt::Display`\n+}\n+\n+fn main() {}"}, {"sha": "aa5492d285ed6f9ecbbbca71e40efcae6a4e3649", "filename": "src/test/ui/impl-trait/in-trait/doesnt-satisfy.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.stderr?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: `()` doesn't implement `std::fmt::Display`\n+  --> $DIR/doesnt-satisfy.rs:9:17\n+   |\n+LL |     fn bar() -> () {}\n+   |                 ^^ `()` cannot be formatted with the default formatter\n+   |\n+   = help: the trait `std::fmt::Display` is not implemented for `()`\n+   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+note: required by a bound in `Foo::bar::{opaque#0}`\n+  --> $DIR/doesnt-satisfy.rs:5:22\n+   |\n+LL |     fn bar() -> impl std::fmt::Display;\n+   |                      ^^^^^^^^^^^^^^^^^ required by this bound in `Foo::bar::{opaque#0}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "65285e3a3ccaf815e562754de0b0461d959ba95b", "filename": "src/test/ui/impl-trait/in-trait/nested-rpitit.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fnested-rpitit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fnested-rpitit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fnested-rpitit.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -0,0 +1,32 @@\n+// check-pass\n+\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Display;\n+use std::ops::Deref;\n+\n+trait Foo {\n+    fn bar(self) -> impl Deref<Target = impl Display + ?Sized>;\n+}\n+\n+struct A;\n+\n+impl Foo for A {\n+    fn bar(self) -> &'static str {\n+        \"Hello, world\"\n+    }\n+}\n+\n+struct B;\n+\n+impl Foo for B {\n+    fn bar(self) -> Box<i32> {\n+        Box::new(42)\n+    }\n+}\n+\n+fn main() {\n+    println!(\"Message for you: {:?}\", &*A.bar());\n+    println!(\"Another for you: {:?}\", &*B.bar());\n+}"}, {"sha": "3ac264e8ebac566251ab8df5a1db51d54f35019d", "filename": "src/test/ui/impl-trait/in-trait/opaque-in-impl-is-opaque.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl-is-opaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl-is-opaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl-is-opaque.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -0,0 +1,19 @@\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Display;\n+\n+trait Foo {\n+    fn bar(&self) -> impl Display;\n+}\n+\n+impl Foo for () {\n+    fn bar(&self) -> impl Display {\n+        \"Hello, world\"\n+    }\n+}\n+\n+fn main() {\n+    let x: &str = ().bar();\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "15edda4834015f1d14ea21a1f9f97bb6ca0d49fa", "filename": "src/test/ui/impl-trait/in-trait/opaque-in-impl-is-opaque.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl-is-opaque.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl-is-opaque.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl-is-opaque.stderr?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -0,0 +1,17 @@\n+error[E0308]: mismatched types\n+  --> $DIR/opaque-in-impl-is-opaque.rs:17:19\n+   |\n+LL |     fn bar(&self) -> impl Display {\n+   |                      ------------ the found opaque type\n+...\n+LL |     let x: &str = ().bar();\n+   |            ----   ^^^^^^^^ expected `&str`, found opaque type\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected reference `&str`\n+            found opaque type `impl std::fmt::Display`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "2e06629699aad7572950523f5603aa97f6bdab26", "filename": "src/test/ui/impl-trait/in-trait/opaque-in-impl.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fopaque-in-impl.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -0,0 +1,48 @@\n+// check-pass\n+\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Debug;\n+\n+trait Foo {\n+    fn foo(&self) -> impl Debug;\n+}\n+\n+impl Foo for () {\n+    fn foo(&self) -> impl Debug {\n+        \"Hello, world\"\n+    }\n+}\n+\n+impl<T: Default + Debug> Foo for std::marker::PhantomData<T> {\n+    fn foo(&self) -> impl Debug {\n+        T::default()\n+    }\n+}\n+\n+trait Bar {\n+    fn bar<T>(&self) -> impl Debug;\n+}\n+\n+impl Bar for () {\n+    fn bar<T>(&self) -> impl Debug {\n+        format!(\"Hello with generic {}\", std::any::type_name::<T>())\n+    }\n+}\n+\n+trait Baz {\n+    fn baz(&self) -> impl Debug + '_;\n+}\n+\n+impl Baz for String {\n+    fn baz(&self) -> impl Debug + '_ {\n+        (self,)\n+    }\n+}\n+\n+fn main() {\n+    println!(\"{:?}\", ().foo());\n+    println!(\"{:?}\", ().bar::<u64>());\n+    println!(\"{:?}\", \"hi\".to_string().baz());\n+}"}, {"sha": "d6ede1cc495c6dc5729847785dbc552876c62cc7", "filename": "src/test/ui/impl-trait/in-trait/reveal.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Freveal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Freveal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Freveal.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait Foo {\n+    fn f() -> Box<impl Sized>;\n+}\n+\n+impl Foo for () {\n+    fn f() -> Box<String> {\n+        Box::new(String::new())\n+    }\n+}\n+\n+fn main() {\n+    let x: Box<String> = <() as Foo>::f();\n+}"}, {"sha": "4cbe682b46f736d987f8c49baedad2560d708f6e", "filename": "src/test/ui/impl-trait/in-trait/success.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fsuccess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fsuccess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fsuccess.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -0,0 +1,40 @@\n+// check-pass\n+\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Display;\n+\n+trait Foo {\n+    fn bar(&self) -> impl Display;\n+}\n+\n+impl Foo for i32 {\n+    fn bar(&self) -> i32 {\n+        *self\n+    }\n+}\n+\n+impl Foo for &'static str {\n+    fn bar(&self) -> &'static str {\n+        *self\n+    }\n+}\n+\n+struct Yay;\n+\n+impl Foo for Yay {\n+    fn bar(&self) -> String {\n+        String::from(\":^)\")\n+    }\n+}\n+\n+fn foo_generically<T: Foo>(t: T) {\n+    println!(\"{}\", t.bar());\n+}\n+\n+fn main() {\n+    println!(\"{}\", \"Hello, world.\".bar());\n+    println!(\"The answer is {}!\", 42.bar());\n+    foo_generically(Yay);\n+}"}, {"sha": "9b346387d61064cbf9bd4d01a47fb4fd0cc1028a", "filename": "src/test/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -162,12 +162,18 @@ error[E0562]: `impl Trait` only allowed in function and inherent method return t\n    |\n LL |     fn in_return() -> impl Debug;\n    |                       ^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `impl` method return\n   --> $DIR/where-allowed.rs:125:34\n    |\n LL |     fn in_trait_impl_return() -> impl Debug { () }\n    |                                  ^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `extern fn` param\n   --> $DIR/where-allowed.rs:138:33"}, {"sha": "cf5d3dab4aadad1f5b3e73b5f4b98db565906d25", "filename": "src/test/ui/parser/fn-header-semantic-fail.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -27,7 +27,6 @@ fn main() {\n     struct Y;\n     impl X for Y {\n         async fn ft1() {} //~ ERROR functions in traits cannot be declared `async`\n-        //~^ ERROR has an incompatible type for trait\n         unsafe fn ft2() {} // OK.\n         const fn ft3() {} //~ ERROR functions in traits cannot be declared const\n         extern \"C\" fn ft4() {}\n@@ -36,7 +35,6 @@ fn main() {\n         //~| ERROR functions in traits cannot be declared const\n         //~| ERROR functions cannot be both `const` and `async`\n         //~| ERROR cycle detected\n-        //~| ERROR has an incompatible type for trait\n     }\n \n     impl Y {"}, {"sha": "36304779df36fa6ee620f90cd7c15cbb98266da7", "filename": "src/test/ui/parser/fn-header-semantic-fail.stderr", "status": "modified", "additions": 78, "deletions": 106, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -7,17 +7,6 @@ LL |     const async unsafe extern \"C\" fn ff5() {}\n    |     |     `async` because of this\n    |     `const` because of this\n \n-error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/fn-header-semantic-fail.rs:17:9\n-   |\n-LL |         async fn ft1();\n-   |         -----^^^^^^^^^^\n-   |         |\n-   |         `async` because of this\n-   |\n-   = note: `async` trait functions are not currently supported\n-   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n-\n error[E0379]: functions in traits cannot be declared const\n   --> $DIR/fn-header-semantic-fail.rs:19:9\n    |\n@@ -30,17 +19,6 @@ error[E0379]: functions in traits cannot be declared const\n LL |         const async unsafe extern \"C\" fn ft5();\n    |         ^^^^^ functions in traits cannot be const\n \n-error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/fn-header-semantic-fail.rs:21:9\n-   |\n-LL |         const async unsafe extern \"C\" fn ft5();\n-   |         ^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |               |\n-   |               `async` because of this\n-   |\n-   = note: `async` trait functions are not currently supported\n-   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n-\n error: functions cannot be both `const` and `async`\n   --> $DIR/fn-header-semantic-fail.rs:21:9\n    |\n@@ -50,42 +28,20 @@ LL |         const async unsafe extern \"C\" fn ft5();\n    |         |     `async` because of this\n    |         `const` because of this\n \n-error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/fn-header-semantic-fail.rs:29:9\n-   |\n-LL |         async fn ft1() {}\n-   |         -----^^^^^^^^^^^^\n-   |         |\n-   |         `async` because of this\n-   |\n-   = note: `async` trait functions are not currently supported\n-   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n-\n error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/fn-header-semantic-fail.rs:32:9\n+  --> $DIR/fn-header-semantic-fail.rs:31:9\n    |\n LL |         const fn ft3() {}\n    |         ^^^^^ functions in traits cannot be const\n \n error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/fn-header-semantic-fail.rs:34:9\n+  --> $DIR/fn-header-semantic-fail.rs:33:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^ functions in traits cannot be const\n \n-error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/fn-header-semantic-fail.rs:34:9\n-   |\n-LL |         const async unsafe extern \"C\" fn ft5() {}\n-   |         ^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |               |\n-   |               `async` because of this\n-   |\n-   = note: `async` trait functions are not currently supported\n-   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n-\n error: functions cannot be both `const` and `async`\n-  --> $DIR/fn-header-semantic-fail.rs:34:9\n+  --> $DIR/fn-header-semantic-fail.rs:33:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^-^^^^^------------------------------\n@@ -94,7 +50,7 @@ LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         `const` because of this\n \n error: functions cannot be both `const` and `async`\n-  --> $DIR/fn-header-semantic-fail.rs:47:9\n+  --> $DIR/fn-header-semantic-fail.rs:45:9\n    |\n LL |         const async unsafe extern \"C\" fn fi5() {}\n    |         ^^^^^-^^^^^------------------------------\n@@ -103,7 +59,7 @@ LL |         const async unsafe extern \"C\" fn fi5() {}\n    |         `const` because of this\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:53:18\n+  --> $DIR/fn-header-semantic-fail.rs:51:18\n    |\n LL |     extern \"C\" {\n    |     ---------- in this `extern` block\n@@ -116,7 +72,7 @@ LL |         fn fe1();\n    |         ~~\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:54:19\n+  --> $DIR/fn-header-semantic-fail.rs:52:19\n    |\n LL |     extern \"C\" {\n    |     ---------- in this `extern` block\n@@ -130,7 +86,7 @@ LL |         fn fe2();\n    |         ~~\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:55:18\n+  --> $DIR/fn-header-semantic-fail.rs:53:18\n    |\n LL |     extern \"C\" {\n    |     ---------- in this `extern` block\n@@ -144,7 +100,7 @@ LL |         fn fe3();\n    |         ~~\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:56:23\n+  --> $DIR/fn-header-semantic-fail.rs:54:23\n    |\n LL |     extern \"C\" {\n    |     ---------- in this `extern` block\n@@ -158,7 +114,7 @@ LL |         fn fe4();\n    |         ~~\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:57:42\n+  --> $DIR/fn-header-semantic-fail.rs:55:42\n    |\n LL |     extern \"C\" {\n    |     ---------- in this `extern` block\n@@ -172,14 +128,66 @@ LL |         fn fe5();\n    |         ~~\n \n error: functions cannot be both `const` and `async`\n-  --> $DIR/fn-header-semantic-fail.rs:57:9\n+  --> $DIR/fn-header-semantic-fail.rs:55:9\n    |\n LL |         const async unsafe extern \"C\" fn fe5();\n    |         ^^^^^-^^^^^----------------------------\n    |         |     |\n    |         |     `async` because of this\n    |         `const` because of this\n \n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/fn-header-semantic-fail.rs:17:9\n+   |\n+LL |         async fn ft1();\n+   |         -----^^^^^^^^^^\n+   |         |\n+   |         `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/fn-header-semantic-fail.rs:21:9\n+   |\n+LL |         const async unsafe extern \"C\" fn ft5();\n+   |         ^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |               |\n+   |               `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/fn-header-semantic-fail.rs:29:9\n+   |\n+LL |         async fn ft1() {}\n+   |         -----^^^^^^^^^\n+   |         |\n+   |         `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/fn-header-semantic-fail.rs:33:9\n+   |\n+LL |         const async unsafe extern \"C\" fn ft5() {}\n+   |         ^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |               |\n+   |               `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+\n error[E0391]: cycle detected when computing type of `main::ff5::{opaque#0}`\n   --> $DIR/fn-header-semantic-fail.rs:12:44\n    |\n@@ -216,60 +224,24 @@ LL | |     }\n LL | | }\n    | |_^\n \n-error[E0053]: method `ft1` has an incompatible type for trait\n-  --> $DIR/fn-header-semantic-fail.rs:29:24\n-   |\n-LL |         async fn ft1() {}\n-   |                        ^\n-   |                        |\n-   |                        checked the `Output` of this `async fn`, found opaque type\n-   |                        expected `()`, found opaque type\n-   |\n-   = note: while checking the return type of the `async fn`\n-note: type in trait\n-  --> $DIR/fn-header-semantic-fail.rs:17:23\n-   |\n-LL |         async fn ft1();\n-   |                       ^\n-   = note: expected fn pointer `fn()`\n-              found fn pointer `fn() -> impl Future<Output = ()>`\n-\n-error[E0053]: method `ft5` has an incompatible type for trait\n-  --> $DIR/fn-header-semantic-fail.rs:34:48\n-   |\n-LL |         const async unsafe extern \"C\" fn ft5() {}\n-   |                                                ^\n-   |                                                |\n-   |                                                checked the `Output` of this `async fn`, found opaque type\n-   |                                                expected `()`, found opaque type\n-   |\n-   = note: while checking the return type of the `async fn`\n-note: type in trait\n-  --> $DIR/fn-header-semantic-fail.rs:21:47\n-   |\n-LL |         const async unsafe extern \"C\" fn ft5();\n-   |                                               ^\n-   = note: expected fn pointer `unsafe extern \"C\" fn()`\n-              found fn pointer `unsafe extern \"C\" fn() -> impl Future<Output = ()>`\n-\n error[E0391]: cycle detected when computing type of `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 28:17>::ft5::{opaque#0}`\n-  --> $DIR/fn-header-semantic-fail.rs:34:48\n+  --> $DIR/fn-header-semantic-fail.rs:33:48\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |                                                ^\n    |\n note: ...which requires borrow-checking `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 28:17>::ft5`...\n-  --> $DIR/fn-header-semantic-fail.rs:34:9\n+  --> $DIR/fn-header-semantic-fail.rs:33:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires processing `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 28:17>::ft5`...\n-  --> $DIR/fn-header-semantic-fail.rs:34:9\n+  --> $DIR/fn-header-semantic-fail.rs:33:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const checking `main::<impl at $DIR/fn-header-semantic-fail.rs:28:5: 28:17>::ft5`...\n-  --> $DIR/fn-header-semantic-fail.rs:34:9\n+  --> $DIR/fn-header-semantic-fail.rs:33:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -288,30 +260,30 @@ LL | |     }\n LL | | }\n    | |_^\n \n-error[E0391]: cycle detected when computing type of `main::<impl at $DIR/fn-header-semantic-fail.rs:42:5: 42:11>::fi5::{opaque#0}`\n-  --> $DIR/fn-header-semantic-fail.rs:47:48\n+error[E0391]: cycle detected when computing type of `main::<impl at $DIR/fn-header-semantic-fail.rs:40:5: 40:11>::fi5::{opaque#0}`\n+  --> $DIR/fn-header-semantic-fail.rs:45:48\n    |\n LL |         const async unsafe extern \"C\" fn fi5() {}\n    |                                                ^\n    |\n-note: ...which requires borrow-checking `main::<impl at $DIR/fn-header-semantic-fail.rs:42:5: 42:11>::fi5`...\n-  --> $DIR/fn-header-semantic-fail.rs:47:9\n+note: ...which requires borrow-checking `main::<impl at $DIR/fn-header-semantic-fail.rs:40:5: 40:11>::fi5`...\n+  --> $DIR/fn-header-semantic-fail.rs:45:9\n    |\n LL |         const async unsafe extern \"C\" fn fi5() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires processing `main::<impl at $DIR/fn-header-semantic-fail.rs:42:5: 42:11>::fi5`...\n-  --> $DIR/fn-header-semantic-fail.rs:47:9\n+note: ...which requires processing `main::<impl at $DIR/fn-header-semantic-fail.rs:40:5: 40:11>::fi5`...\n+  --> $DIR/fn-header-semantic-fail.rs:45:9\n    |\n LL |         const async unsafe extern \"C\" fn fi5() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const checking `main::<impl at $DIR/fn-header-semantic-fail.rs:42:5: 42:11>::fi5`...\n-  --> $DIR/fn-header-semantic-fail.rs:47:9\n+note: ...which requires const checking `main::<impl at $DIR/fn-header-semantic-fail.rs:40:5: 40:11>::fi5`...\n+  --> $DIR/fn-header-semantic-fail.rs:45:9\n    |\n LL |         const async unsafe extern \"C\" fn fi5() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires computing whether `impl core::future::future::Future<Output = ()>` is freeze...\n    = note: ...which requires evaluating trait selection obligation `impl core::future::future::Future<Output = ()>: core::marker::Freeze`...\n-   = note: ...which again requires computing type of `main::<impl at $DIR/fn-header-semantic-fail.rs:42:5: 42:11>::fi5::{opaque#0}`, completing the cycle\n+   = note: ...which again requires computing type of `main::<impl at $DIR/fn-header-semantic-fail.rs:40:5: 40:11>::fi5::{opaque#0}`, completing the cycle\n note: cycle used when checking item types in top-level module\n   --> $DIR/fn-header-semantic-fail.rs:5:1\n    |\n@@ -324,7 +296,7 @@ LL | |     }\n LL | | }\n    | |_^\n \n-error: aborting due to 23 previous errors\n+error: aborting due to 21 previous errors\n \n-Some errors have detailed explanations: E0053, E0379, E0391, E0706.\n-For more information about an error, try `rustc --explain E0053`.\n+Some errors have detailed explanations: E0379, E0391, E0706.\n+For more information about an error, try `rustc --explain E0379`."}, {"sha": "49462f52fb4c2355375bd633eb76b28dcd730501", "filename": "src/test/ui/resolve/issue-70736-async-fn-no-body-def-collector.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -14,7 +14,6 @@ trait B {\n impl B for A {\n     async fn associated(); //~ ERROR without body\n     //~^ ERROR cannot be declared `async`\n-    //~| ERROR has an incompatible type for trait\n }\n \n fn main() {}"}, {"sha": "55c3b66f1363df29fbb58a8bd48d844aa9ff699d", "filename": "src/test/ui/resolve/issue-70736-async-fn-no-body-def-collector.stderr", "status": "modified", "additions": 14, "deletions": 29, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.stderr?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -14,17 +14,6 @@ LL |     async fn inherent();\n    |                        |\n    |                        help: provide a definition for the function: `{ <body> }`\n \n-error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/issue-70736-async-fn-no-body-def-collector.rs:11:5\n-   |\n-LL |     async fn associated();\n-   |     -----^^^^^^^^^^^^^^^^^\n-   |     |\n-   |     `async` because of this\n-   |\n-   = note: `async` trait functions are not currently supported\n-   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n-\n error: associated function in `impl` without body\n   --> $DIR/issue-70736-async-fn-no-body-def-collector.rs:15:5\n    |\n@@ -34,7 +23,7 @@ LL |     async fn associated();\n    |                          help: provide a definition for the function: `{ <body> }`\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/issue-70736-async-fn-no-body-def-collector.rs:15:5\n+  --> $DIR/issue-70736-async-fn-no-body-def-collector.rs:11:5\n    |\n LL |     async fn associated();\n    |     -----^^^^^^^^^^^^^^^^^\n@@ -43,26 +32,22 @@ LL |     async fn associated();\n    |\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n-error[E0053]: method `associated` has an incompatible type for trait\n-  --> $DIR/issue-70736-async-fn-no-body-def-collector.rs:15:26\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/issue-70736-async-fn-no-body-def-collector.rs:15:5\n    |\n LL |     async fn associated();\n-   |                          ^\n-   |                          |\n-   |                          checked the `Output` of this `async fn`, found opaque type\n-   |                          expected `()`, found opaque type\n-   |\n-   = note: while checking the return type of the `async fn`\n-note: type in trait\n-  --> $DIR/issue-70736-async-fn-no-body-def-collector.rs:11:26\n+   |     -----^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     `async` because of this\n    |\n-LL |     async fn associated();\n-   |                          ^\n-   = note: expected fn pointer `fn()`\n-              found fn pointer `fn() -> impl Future<Output = ()>`\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0053, E0706.\n-For more information about an error, try `rustc --explain E0053`.\n+For more information about this error, try `rustc --explain E0706`."}, {"sha": "94f578af209a8593e10a87e0928556d558833152", "filename": "src/test/ui/span/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -12,7 +12,8 @@ impl A {\n \n trait C{async fn new(val: T) {} //~ ERROR  `async fn` is not permitted in Rust 2015\n //~^ ERROR functions in traits cannot be declared `async`\n-//~^^ ERROR cannot find type `T` in this scope\n-//~^^^ WARN changes to closure capture in Rust 2021 will affect drop order [rust_2021_incompatible_closure_captures]\n+//~| ERROR mismatched types\n+//~| ERROR cannot find type `T` in this scope\n+//~| WARN changes to closure capture in Rust 2021 will affect drop order [rust_2021_incompatible_closure_captures]\n \n //~ ERROR  this file contains an unclosed delimiter"}, {"sha": "3814c568e72c1b555c30e67a61d57f6e8e57725c", "filename": "src/test/ui/span/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.stderr", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.stderr?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -1,5 +1,5 @@\n error: this file contains an unclosed delimiter\n-  --> $DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:18:53\n+  --> $DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:19:53\n    |\n LL | trait C{async fn new(val: T) {}\n    |        - unclosed delimiter\n@@ -25,17 +25,6 @@ LL | trait C{async fn new(val: T) {}\n    = help: pass `--edition 2021` to `rustc`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n-error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:13:9\n-   |\n-LL | trait C{async fn new(val: T) {}\n-   |         -----^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         `async` because of this\n-   |\n-   = note: `async` trait functions are not currently supported\n-   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n-\n error[E0423]: expected function, found module `crate`\n   --> $DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:9:5\n    |\n@@ -51,6 +40,19 @@ LL | pub struct A {}\n LL | trait C{async fn new(val: T) {}\n    |                           ^ help: a struct with a similar name exists: `A`\n \n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:13:9\n+   |\n+LL | trait C{async fn new(val: T) {}\n+   |         -----^^^^^^^^^^^^^^^\n+   |         |\n+   |         `async` because of this\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(return_position_impl_trait_in_trait)]` to the crate attributes to enable\n+\n warning: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:6:57\n    |\n@@ -72,6 +74,20 @@ help: add a dummy let to cause `path` to be fully captured\n LL |     async fn create(path: impl AsRef<std::path::Path>)  { let _ = &path;\n    |                                                           ++++++++++++++\n \n+error[E0308]: mismatched types\n+  --> $DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:13:30\n+   |\n+LL | trait C{async fn new(val: T) {}\n+   |                              ^^ expected associated type, found opaque type\n+   |\n+  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n+   |\n+LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n+   |                                           ------------------------------- the found opaque type\n+   |\n+   = note: expected associated type `impl Future<Output = ()>` (trait associated opaque type at <$DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:13:30>)\n+                  found opaque type `impl Future<Output = ()>` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n+\n warning: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:13:30\n    |\n@@ -87,7 +103,7 @@ help: add a dummy let to cause `val` to be fully captured\n LL | trait C{async fn new(val: T) { let _ = &val;}\n    |                                +++++++++++++\n \n-error: aborting due to 6 previous errors; 2 warnings emitted\n+error: aborting due to 7 previous errors; 2 warnings emitted\n \n-Some errors have detailed explanations: E0412, E0423, E0670, E0706.\n-For more information about an error, try `rustc --explain E0412`.\n+Some errors have detailed explanations: E0308, E0412, E0423, E0670, E0706.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "5995675bd969c7ca3e3c98d1bdedfedab8e22bdc", "filename": "src/tools/clippy/clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -441,7 +441,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n \n     fn visit_ty(&mut self, ty: &'tcx Ty<'_>) {\n         match ty.kind {\n-            TyKind::OpaqueDef(item, bounds) => {\n+            TyKind::OpaqueDef(item, bounds, _) => {\n                 let map = self.cx.tcx.hir();\n                 let item = map.item(item);\n                 let len = self.lts.len();"}, {"sha": "754b0e78a148cc989f46f7c7534d4962da0e464d", "filename": "src/tools/clippy/clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -103,7 +103,7 @@ fn future_trait_ref<'tcx>(\n     ty: &'tcx Ty<'tcx>,\n ) -> Option<(&'tcx TraitRef<'tcx>, Vec<LifetimeName>)> {\n     if_chain! {\n-        if let TyKind::OpaqueDef(item_id, bounds) = ty.kind;\n+        if let TyKind::OpaqueDef(item_id, bounds, false) = ty.kind;\n         let item = cx.tcx.hir().item(item_id);\n         if let ItemKind::OpaqueTy(opaque) = &item.kind;\n         if let Some(trait_ref) = opaque.bounds.iter().find_map(|bound| {"}, {"sha": "f45cec9f0b430a0f7be230ddadb22aabcc8642e9", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab32548539ec38a939c1b58599249f3b54130026/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=ab32548539ec38a939c1b58599249f3b54130026", "patch": "@@ -987,8 +987,9 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 }\n             },\n             TyKind::Path(ref qpath) => self.hash_qpath(qpath),\n-            TyKind::OpaqueDef(_, arg_list) => {\n+            TyKind::OpaqueDef(_, arg_list, in_trait) => {\n                 self.hash_generic_args(arg_list);\n+                in_trait.hash(&mut self.s);\n             },\n             TyKind::TraitObject(_, lifetime, _) => {\n                 self.hash_lifetime(*lifetime);"}]}