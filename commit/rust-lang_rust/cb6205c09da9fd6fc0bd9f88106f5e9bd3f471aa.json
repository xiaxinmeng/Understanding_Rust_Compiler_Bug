{"sha": "cb6205c09da9fd6fc0bd9f88106f5e9bd3f471aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNjIwNWMwOWRhOWZkNmZjMGJkOWY4ODEwNmY1ZTliZDNmNDcxYWE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-18T14:22:48Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-20T09:15:38Z"}, "message": "use relpaths for module resolve", "tree": {"sha": "ceff920e800aff83b23df5d75eb07a993a6a1b9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ceff920e800aff83b23df5d75eb07a993a6a1b9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb6205c09da9fd6fc0bd9f88106f5e9bd3f471aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb6205c09da9fd6fc0bd9f88106f5e9bd3f471aa", "html_url": "https://github.com/rust-lang/rust/commit/cb6205c09da9fd6fc0bd9f88106f5e9bd3f471aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb6205c09da9fd6fc0bd9f88106f5e9bd3f471aa/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a422d480a188a28c6b5e7862fbf07817eb2c7447", "url": "https://api.github.com/repos/rust-lang/rust/commits/a422d480a188a28c6b5e7862fbf07817eb2c7447", "html_url": "https://github.com/rust-lang/rust/commit/a422d480a188a28c6b5e7862fbf07817eb2c7447"}], "stats": {"total": 53, "additions": 35, "deletions": 18}, "files": [{"sha": "0a7128d0c1ea1035ebc0d6c07924dad1f7d30aa6", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb6205c09da9fd6fc0bd9f88106f5e9bd3f471aa/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/cb6205c09da9fd6fc0bd9f88106f5e9bd3f471aa/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=cb6205c09da9fd6fc0bd9f88106f5e9bd3f471aa", "patch": "@@ -674,6 +674,7 @@ dependencies = [\n name = \"ra_hir\"\n version = \"0.1.0\"\n dependencies = [\n+ \"arrayvec 0.4.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"id-arena 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "b09014dc6c55335a50f164e192b70c7a7e4bfb54", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cb6205c09da9fd6fc0bd9f88106f5e9bd3f471aa/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6205c09da9fd6fc0bd9f88106f5e9bd3f471aa/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=cb6205c09da9fd6fc0bd9f88106f5e9bd3f471aa", "patch": "@@ -1,6 +1,7 @@\n use std::sync::Arc;\n \n use rustc_hash::{FxHashSet, FxHashMap};\n+use relative_path::RelativePathBuf;\n use ra_syntax::SmolStr;\n use salsa;\n \n@@ -85,10 +86,23 @@ salsa::query_group! {\n             type FileTextQuery;\n             storage input;\n         }\n+        /// Path to a file, relative to the root of its source root.\n+        fn file_relative_path(file_id: FileId) -> RelativePathBuf {\n+            type FileRelativePathQuery;\n+            storage input;\n+        }\n         fn file_source_root(file_id: FileId) -> SourceRootId {\n             type FileSourceRootQuery;\n             storage input;\n         }\n+        fn source_root_files(id: SourceRootId) -> Arc<FxHashSet<FileId>> {\n+            type SourceRootFilesQuery;\n+            storage input;\n+        }\n+        fn source_root_file_by_path(id: SourceRootId, path: RelativePathBuf) -> Option<FileId> {\n+            type SourceRootFilesByPathQuery;\n+            storage input;\n+        }\n         fn source_root(id: SourceRootId) -> Arc<SourceRoot> {\n             type SourceRootQuery;\n             storage input;"}, {"sha": "61650cee9dde17d1119863132e5a4fb25c7dead0", "filename": "crates/ra_hir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb6205c09da9fd6fc0bd9f88106f5e9bd3f471aa/crates%2Fra_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cb6205c09da9fd6fc0bd9f88106f5e9bd3f471aa/crates%2Fra_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2FCargo.toml?ref=cb6205c09da9fd6fc0bd9f88106f5e9bd3f471aa", "patch": "@@ -5,6 +5,7 @@ version = \"0.1.0\"\n authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n \n [dependencies]\n+arrayvec = \"0.4.9\"\n log = \"0.4.5\"\n relative-path = \"0.4.0\"\n salsa = \"0.8.0\""}, {"sha": "d04d24a61520562e9b5616e42c72746b21fcb54c", "filename": "crates/ra_hir/src/module/imp.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/cb6205c09da9fd6fc0bd9f88106f5e9bd3f471aa/crates%2Fra_hir%2Fsrc%2Fmodule%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6205c09da9fd6fc0bd9f88106f5e9bd3f471aa/crates%2Fra_hir%2Fsrc%2Fmodule%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule%2Fimp.rs?ref=cb6205c09da9fd6fc0bd9f88106f5e9bd3f471aa", "patch": "@@ -4,9 +4,9 @@ use ra_syntax::{\n     ast::{self, NameOwner},\n     SmolStr,\n };\n-use relative_path::RelativePathBuf;\n use rustc_hash::{FxHashMap, FxHashSet};\n-use ra_db::{SourceRoot, SourceRootId, FileResolverImp, Cancelable, FileId,};\n+use arrayvec::ArrayVec;\n+use ra_db::{SourceRoot, SourceRootId, Cancelable, FileId};\n \n use crate::{\n     HirDatabase,\n@@ -110,8 +110,7 @@ fn build_subtree(\n \n         let (points_to, problem) = match sub {\n             Submodule::Declaration(name) => {\n-                let (points_to, problem) =\n-                    resolve_submodule(source, &name, &source_root.file_resolver);\n+                let (points_to, problem) = resolve_submodule(db, source, &name);\n                 let points_to = points_to\n                     .into_iter()\n                     .map(|file_id| match roots.remove(&file_id) {\n@@ -153,30 +152,32 @@ fn build_subtree(\n }\n \n fn resolve_submodule(\n+    db: &impl HirDatabase,\n     source: ModuleSource,\n     name: &SmolStr,\n-    file_resolver: &FileResolverImp,\n ) -> (Vec<FileId>, Option<Problem>) {\n-    // TODO: handle submodules of inline modules properly\n+    // FIXME: handle submodules of inline modules properly\n     let file_id = source.file_id();\n-    let mod_name = file_resolver.file_stem(file_id);\n+    let source_root_id = db.file_source_root(file_id);\n+    let path = db.file_relative_path(file_id);\n+    let dir_path = path.parent().unwrap();\n+    let mod_name = path.file_stem().unwrap_or(\"unknown\");\n     let is_dir_owner = mod_name == \"mod\" || mod_name == \"lib\" || mod_name == \"main\";\n \n-    let file_mod = RelativePathBuf::from(format!(\"../{}.rs\", name));\n-    let dir_mod = RelativePathBuf::from(format!(\"../{}/mod.rs\", name));\n-    let file_dir_mod = RelativePathBuf::from(format!(\"../{}/{}.rs\", mod_name, name));\n-    let tmp1;\n-    let tmp2;\n-    let candidates = if is_dir_owner {\n-        tmp1 = [&file_mod, &dir_mod];\n-        tmp1.iter()\n+    let file_mod = dir_path.join(format!(\"{}.rs\", name));\n+    let dir_mod = dir_path.join(format!(\"{}/mod.rs\", name));\n+    let file_dir_mod = dir_path.join(format!(\"{}/{}.rs\", mod_name, name));\n+    let mut candidates = ArrayVec::<[_; 2]>::new();\n+    if is_dir_owner {\n+        candidates.push(file_mod.clone());\n+        candidates.push(dir_mod);\n     } else {\n-        tmp2 = [&file_dir_mod];\n-        tmp2.iter()\n+        candidates.push(file_dir_mod.clone());\n     };\n \n     let points_to = candidates\n-        .filter_map(|path| file_resolver.resolve(file_id, path))\n+        .into_iter()\n+        .filter_map(|path| db.source_root_file_by_path(source_root_id, path))\n         .collect::<Vec<_>>();\n     let problem = if points_to.is_empty() {\n         Some(Problem::UnresolvedModule {"}]}