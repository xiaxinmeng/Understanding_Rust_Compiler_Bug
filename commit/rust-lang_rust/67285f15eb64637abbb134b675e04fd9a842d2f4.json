{"sha": "67285f15eb64637abbb134b675e04fd9a842d2f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3Mjg1ZjE1ZWI2NDYzN2FiYmIxMzRiNjc1ZTA0ZmQ5YTg0MmQyZjQ=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-08-15T07:54:07Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-08-15T07:54:07Z"}, "message": "Enhance error messages\n\nwith rustc style", "tree": {"sha": "6e409a75af02ac72f0685246766af13a44018d92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e409a75af02ac72f0685246766af13a44018d92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67285f15eb64637abbb134b675e04fd9a842d2f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67285f15eb64637abbb134b675e04fd9a842d2f4", "html_url": "https://github.com/rust-lang/rust/commit/67285f15eb64637abbb134b675e04fd9a842d2f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67285f15eb64637abbb134b675e04fd9a842d2f4/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c39e5aeb8f444e4cc258f91c6d07012a9e1424a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c39e5aeb8f444e4cc258f91c6d07012a9e1424a", "html_url": "https://github.com/rust-lang/rust/commit/4c39e5aeb8f444e4cc258f91c6d07012a9e1424a"}], "stats": {"total": 70, "additions": 62, "deletions": 8}, "files": [{"sha": "5af8449cd0abdc6d4cb54248c3d3d85be6263a32", "filename": "src/lib.rs", "status": "modified", "additions": 62, "deletions": 8, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/67285f15eb64637abbb134b675e04fd9a842d2f4/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67285f15eb64637abbb134b675e04fd9a842d2f4/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=67285f15eb64637abbb134b675e04fd9a842d2f4", "patch": "@@ -27,6 +27,7 @@ extern crate unicode_segmentation;\n use std::collections::HashMap;\n use std::fmt;\n use std::io::{self, stdout, Write};\n+use std::iter::repeat;\n use std::ops::{Add, Sub};\n use std::path::{Path, PathBuf};\n use std::rc::Rc;\n@@ -456,7 +457,7 @@ impl fmt::Display for ErrorKind {\n         match *self {\n             ErrorKind::LineOverflow(found, maximum) => write!(\n                 fmt,\n-                \"line exceeded maximum length (maximum: {}, found: {})\",\n+                \"line exceeded maximum width (maximum: {}, found: {})\",\n                 maximum,\n                 found\n             ),\n@@ -477,16 +478,36 @@ pub struct FormattingError {\n impl FormattingError {\n     fn msg_prefix(&self) -> &str {\n         match self.kind {\n-            ErrorKind::LineOverflow(..) | ErrorKind::TrailingWhitespace => \"Rustfmt failed at\",\n+            ErrorKind::LineOverflow(..) | ErrorKind::TrailingWhitespace => \"error:\",\n             ErrorKind::BadIssue(_) => \"WARNING:\",\n         }\n     }\n \n-    fn msg_suffix(&self) -> &str {\n+    fn msg_suffix(&self) -> String {\n         match self.kind {\n+            ErrorKind::LineOverflow(..) if self.is_comment => format!(\n+                \"use `error_on_lineoverflow_comments = false` to suppress \\\n+                 the warning against line comments\\n\",\n+            ),\n             _ => String::from(\"\"),\n         }\n     }\n+\n+    // (space, target)\n+    pub fn format_len(&self) -> (usize, usize) {\n+        match self.kind {\n+            ErrorKind::LineOverflow(found, max) => (max, found - max),\n+            ErrorKind::TrailingWhitespace => {\n+                let trailing_ws_len = self.line_buffer\n+                    .chars()\n+                    .rev()\n+                    .take_while(|c| c.is_whitespace())\n+                    .count();\n+                (self.line_buffer.len() - trailing_ws_len, trailing_ws_len)\n+            }\n+            _ => (0, 0), // unreachable\n+        }\n+    }\n }\n \n pub struct FormatReport {\n@@ -518,17 +539,50 @@ impl fmt::Display for FormatReport {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n         for (file, errors) in &self.file_error_map {\n             for error in errors {\n+                let prefix_space_len = error.line.to_string().len();\n+                let prefix_spaces: String = repeat(\" \").take(1 + prefix_space_len).collect();\n+\n+                let error_line_buffer = if error.line_buffer.is_empty() {\n+                    String::from(\" \")\n+                } else {\n+                    let (space_len, target_len) = error.format_len();\n+                    format!(\n+                        \"{}|\\n{} | {}\\n{}| {}\",\n+                        prefix_spaces,\n+                        error.line,\n+                        error.line_buffer,\n+                        prefix_spaces,\n+                        target_str(space_len, target_len)\n+                    )\n+                };\n+\n+                let error_info = format!(\"{} {}\", error.msg_prefix(), error.kind);\n+                let file_info = format!(\"{}--> {}:{}\", &prefix_spaces[1..], file, error.line);\n+                let msg_suffix = error.msg_suffix();\n+                let note = if msg_suffix.is_empty() {\n+                    String::new()\n+                } else {\n+                    format!(\"{}note= \", prefix_spaces)\n+                };\n+\n                 write!(\n                     fmt,\n-                    \"{} {}:{}: {} {}\\n\",\n-                    error.msg_prefix(),\n-                    file,\n-                    error.line,\n-                    error.kind,\n+                    \"{}\\n{}\\n{}\\n{}{}\\n\",\n+                    error_info,\n+                    file_info,\n+                    error_line_buffer,\n+                    note,\n                     error.msg_suffix()\n                 )?;\n             }\n         }\n+        if !self.file_error_map.is_empty() {\n+            write!(\n+                fmt,\n+                \"warning: rustfmt may have failed to format. See previous {} errors.\\n\",\n+                self.warning_count(),\n+            )?;\n+        }\n         Ok(())\n     }\n }"}]}