{"sha": "4f3fc6fa1a0b76d120626dcf1e2e0a31cc10a54c", "node_id": "C_kwDOAAsO6NoAKDRmM2ZjNmZhMWEwYjc2ZDEyMDYyNmRjZjFlMmUwYTMxY2MxMGE1NGM", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-11-27T18:13:07Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-05T12:32:39Z"}, "message": "try to optimize things unsuccessfully\n\nBaseline\n```\nDatabase loaded:     598.40ms, 304minstr, 118mb (metadata 390.57ms, 21minstr, 841kb; build 111.31ms, 8764kinstr, -214kb)\n  crates: 39, mods: 824, decls: 18647, fns: 13910\nItem Collection:     9.70s, 75ginstr, 377mb\n  exprs: 382426, ??ty: 387 (0%), ?ty: 285 (0%), !ty: 145\nInference:           43.16s, 342ginstr, 641mb\nTotal:               52.86s, 417ginstr, 1018mb\n```\n\nEager\n```\nDatabase loaded:     625.86ms, 304minstr, 118mb (metadata 414.52ms, 21minstr, 841kb; build 113.81ms, 8764kinstr, -230kb)\n  crates: 39, mods: 824, decls: 18647, fns: 13910\nItem Collection:     10.09s, 75ginstr, 389mb\n  exprs: 382426, ??ty: 387 (0%), ?ty: 285 (0%), !ty: 145\nInference:           43.27s, 341ginstr, 644mb\nTotal:               53.37s, 417ginstr, 1034mb\n```\n\nLazy\n```\nDatabase loaded:     626.34ms, 304minstr, 118mb (metadata 416.26ms, 21minstr, 841kb; build 113.67ms, 8750kinstr, -209kb)\n  crates: 39, mods: 824, decls: 18647, fns: 13910\nItem Collection:     10.16s, 75ginstr, 389mb\n  exprs: 382426, ??ty: 387 (0%), ?ty: 285 (0%), !ty: 145\nInference:           44.51s, 342ginstr, 644mb\nTotal:               54.67s, 417ginstr, 1034mb\n```", "tree": {"sha": "c3307fee0812a802d312b4c303b531119c8aff94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3307fee0812a802d312b4c303b531119c8aff94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f3fc6fa1a0b76d120626dcf1e2e0a31cc10a54c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f3fc6fa1a0b76d120626dcf1e2e0a31cc10a54c", "html_url": "https://github.com/rust-lang/rust/commit/4f3fc6fa1a0b76d120626dcf1e2e0a31cc10a54c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f3fc6fa1a0b76d120626dcf1e2e0a31cc10a54c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c603b9043fd530c11d3001eb62b1315c5aa1afe0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c603b9043fd530c11d3001eb62b1315c5aa1afe0", "html_url": "https://github.com/rust-lang/rust/commit/c603b9043fd530c11d3001eb62b1315c5aa1afe0"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "4d22ebdc1815fab5700bbb2cf1c2ef6a375c3094", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f3fc6fa1a0b76d120626dcf1e2e0a31cc10a54c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4f3fc6fa1a0b76d120626dcf1e2e0a31cc10a54c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=4f3fc6fa1a0b76d120626dcf1e2e0a31cc10a54c", "patch": "@@ -529,6 +529,7 @@ dependencies = [\n  \"la-arena\",\n  \"limit\",\n  \"mbe\",\n+ \"once_cell\",\n  \"profile\",\n  \"rustc-hash\",\n  \"syntax\","}, {"sha": "7a61036530612959562dba4feaaa51fe9fc4d09f", "filename": "crates/hir_expand/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f3fc6fa1a0b76d120626dcf1e2e0a31cc10a54c/crates%2Fhir_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4f3fc6fa1a0b76d120626dcf1e2e0a31cc10a54c/crates%2Fhir_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2FCargo.toml?ref=4f3fc6fa1a0b76d120626dcf1e2e0a31cc10a54c", "patch": "@@ -16,6 +16,7 @@ either = \"1.5.3\"\n rustc-hash = \"1.0.0\"\n la-arena = { version = \"0.3.0\", path = \"../../lib/arena\" }\n itertools = \"0.10.0\"\n+once_cell = \"1\"\n \n base_db = { path = \"../base_db\", version = \"0.0.0\" }\n cfg = { path = \"../cfg\", version = \"0.0.0\" }"}, {"sha": "9db2bc64101b45232abc60a53c92642b42baea05", "filename": "crates/hir_expand/src/ast_id_map.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4f3fc6fa1a0b76d120626dcf1e2e0a31cc10a54c/crates%2Fhir_expand%2Fsrc%2Fast_id_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f3fc6fa1a0b76d120626dcf1e2e0a31cc10a54c/crates%2Fhir_expand%2Fsrc%2Fast_id_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fast_id_map.rs?ref=4f3fc6fa1a0b76d120626dcf1e2e0a31cc10a54c", "patch": "@@ -61,13 +61,29 @@ impl<N: AstNode> FileAstId<N> {\n type ErasedFileAstId = Idx<SyntaxNodePtr>;\n \n /// Maps items' `SyntaxNode`s to `ErasedFileAstId`s and back.\n-#[derive(Debug, PartialEq, Eq, Default)]\n+#[derive(Default)]\n pub struct AstIdMap {\n     arena: Arena<SyntaxNodePtr>,\n-    map: FxHashMap<SyntaxNodePtr, ErasedFileAstId>,\n+    /// Reversed mapping lazily derived from [`self.arena`].\n+    ///\n+    /// FIXE: Do not store `SyntaxNodePtr` twice.\n+    map: once_cell::sync::OnceCell<FxHashMap<SyntaxNodePtr, ErasedFileAstId>>,\n     _c: Count<Self>,\n }\n \n+impl fmt::Debug for AstIdMap {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_struct(\"AstIdMap\").field(\"arena\", &self.arena).finish()\n+    }\n+}\n+\n+impl PartialEq for AstIdMap {\n+    fn eq(&self, other: &Self) -> bool {\n+        self.arena == other.arena\n+    }\n+}\n+impl Eq for AstIdMap {}\n+\n impl AstIdMap {\n     pub(crate) fn from_source(node: &SyntaxNode) -> AstIdMap {\n         assert!(node.parent().is_none());\n@@ -91,9 +107,11 @@ impl AstIdMap {\n                 }\n             }\n         });\n-        res.map.extend(res.arena.iter().map(|(idx, ptr)| (ptr.clone(), idx)));\n         res\n     }\n+    fn map(&self) -> &FxHashMap<SyntaxNodePtr, ErasedFileAstId> {\n+        self.map.get_or_init(|| self.arena.iter().map(|(idx, ptr)| (ptr.clone(), idx)).collect())\n+    }\n \n     pub fn ast_id<N: AstNode>(&self, item: &N) -> FileAstId<N> {\n         let raw = self.erased_ast_id(item.syntax());\n@@ -102,7 +120,7 @@ impl AstIdMap {\n \n     fn erased_ast_id(&self, item: &SyntaxNode) -> ErasedFileAstId {\n         let ptr = SyntaxNodePtr::new(item);\n-        *self.map.get(&ptr).unwrap_or_else(|| {\n+        *self.map().get(&ptr).unwrap_or_else(|| {\n             panic!(\n                 \"Can't find {:?} in AstIdMap:\\n{:?}\",\n                 item,"}]}