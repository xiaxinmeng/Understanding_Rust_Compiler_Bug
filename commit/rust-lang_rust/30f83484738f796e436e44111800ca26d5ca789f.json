{"sha": "30f83484738f796e436e44111800ca26d5ca789f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwZjgzNDg0NzM4Zjc5NmU0MzZlNDQxMTE4MDBjYTI2ZDVjYTc4OWY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-29T07:43:33Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-31T18:00:47Z"}, "message": "Differentiate consistency of commasep boxes", "tree": {"sha": "14a3d3688e820d216ea3b847dce06f570586a8f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14a3d3688e820d216ea3b847dce06f570586a8f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30f83484738f796e436e44111800ca26d5ca789f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30f83484738f796e436e44111800ca26d5ca789f", "html_url": "https://github.com/rust-lang/rust/commit/30f83484738f796e436e44111800ca26d5ca789f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30f83484738f796e436e44111800ca26d5ca789f/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21313d623a505086b2973f30c19db4f1d6ec8f61", "url": "https://api.github.com/repos/rust-lang/rust/commits/21313d623a505086b2973f30c19db4f1d6ec8f61", "html_url": "https://github.com/rust-lang/rust/commit/21313d623a505086b2973f30c19db4f1d6ec8f61"}], "stats": {"total": 62, "additions": 35, "deletions": 27}, "files": [{"sha": "961cc68d17b4f4dc82619e15c62b8e7d0c0c5d95", "filename": "src/comp/pretty/pp.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/30f83484738f796e436e44111800ca26d5ca789f/src%2Fcomp%2Fpretty%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30f83484738f796e436e44111800ca26d5ca789f/src%2Fcomp%2Fpretty%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpp.rs?ref=30f83484738f796e436e44111800ca26d5ca789f", "patch": "@@ -505,14 +505,18 @@ obj printer(io::writer out,\n \n // Convenience functions to talk to the printer.\n \n-fn ibox(printer p, uint indent) {\n+fn box(printer p, uint indent, breaks b) {\n     p.pretty_print(BEGIN(rec(offset = indent as int,\n-                             breaks = inconsistent)));\n+                             breaks = b)));\n+}\n+\n+\n+fn ibox(printer p, uint indent) {\n+    box(p, indent, inconsistent);\n }\n \n fn cbox(printer p, uint indent) {\n-    p.pretty_print(BEGIN(rec(offset = indent as int,\n-                             breaks = consistent)));\n+    box(p, indent, consistent);\n }\n \n "}, {"sha": "a39e42be605aa76e1dda7e059edabba443145ec5", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/30f83484738f796e436e44111800ca26d5ca789f/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30f83484738f796e436e44111800ca26d5ca789f/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=30f83484738f796e436e44111800ca26d5ca789f", "patch": "@@ -11,11 +11,15 @@ import pp;\n \n import pp::printer;\n import pp::break_offset;\n+import pp::box;\n import pp::cbox;\n import pp::ibox;\n import pp::wrd;\n import pp::space;\n import pp::hardbreak;\n+import pp::breaks;\n+import pp::consistent;\n+import pp::inconsistent;\n import pp::end;\n import pp::eof;\n \n@@ -117,8 +121,8 @@ fn bclose(ps s, common::span span) {\n     end(s.s); // close the outer-box\n }\n \n-fn commasep[IN](ps s, vec[IN] elts, fn(ps, &IN) op) {\n-    ibox(s.s, 0u);\n+fn commasep[IN](ps s, breaks b, vec[IN] elts, fn(ps, &IN) op) {\n+    box(s.s, 0u, b);\n     auto first = true;\n     for (IN elt in elts) {\n         if (first) {first = false;}\n@@ -128,9 +132,9 @@ fn commasep[IN](ps s, vec[IN] elts, fn(ps, &IN) op) {\n     end(s.s);\n }\n \n-fn commasep_cmnt[IN](ps s, vec[IN] elts, fn(ps, &IN) op,\n+fn commasep_cmnt[IN](ps s, breaks b, vec[IN] elts, fn(ps, &IN) op,\n                      fn(&IN) -> common::span get_span) {\n-    ibox(s.s, 0u);\n+    box(s.s, 0u, b);\n     auto len = vec::len[IN](elts);\n     auto i = 0u;\n     for (IN elt in elts) {\n@@ -144,11 +148,11 @@ fn commasep_cmnt[IN](ps s, vec[IN] elts, fn(ps, &IN) op,\n     end(s.s);\n }\n \n-fn commasep_exprs(ps s, vec[@ast::expr] exprs) {\n+fn commasep_exprs(ps s, breaks b, vec[@ast::expr] exprs) {\n     fn expr_span(&@ast::expr expr) -> common::span {ret expr.span;}\n     auto f = print_expr;\n     auto gs = expr_span;\n-    commasep_cmnt[@ast::expr](s, exprs, f, gs);\n+    commasep_cmnt[@ast::expr](s, b, exprs, f, gs);\n }\n \n fn print_mod(ps s, ast::_mod _mod) {\n@@ -192,7 +196,7 @@ fn print_type(ps s, &@ast::ty ty) {\n             wrd(s.s, \"tup\");\n             popen(s);\n             auto f = print_mt;\n-            commasep[ast::mt](s, elts, f);\n+            commasep[ast::mt](s, inconsistent, elts, f);\n             pclose(s);\n         }\n         case (ast::ty_rec(?fields)) {\n@@ -213,7 +217,7 @@ fn print_type(ps s, &@ast::ty ty) {\n             }\n             auto f = print_field;\n             auto gs = get_span;\n-            commasep_cmnt[ast::ty_field](s, fields, f, gs);\n+            commasep_cmnt[ast::ty_field](s, consistent, fields, f, gs);\n             pclose(s);\n         }\n         case (ast::ty_obj(?methods)) {\n@@ -332,7 +336,7 @@ fn print_item(ps s, @ast::item item) {\n                         print_type(s, arg.ty);\n                     }\n                     auto f = print_variant_arg;\n-                    commasep[ast::variant_arg](s, v.node.args, f);\n+                    commasep[ast::variant_arg](s, consistent, v.node.args, f);\n                     pclose(s);\n                 }\n                 wrd(s.s, \";\");\n@@ -355,7 +359,7 @@ fn print_item(ps s, @ast::item item) {\n             fn get_span(&ast::obj_field f) -> common::span {ret f.ty.span;}\n             auto f = print_field;\n             auto gs = get_span;\n-            commasep_cmnt[ast::obj_field](s, _obj.fields, f, gs);\n+            commasep_cmnt[ast::obj_field](s, consistent, _obj.fields, f, gs);\n             pclose(s);\n             space(s.s);\n             bopen(s);\n@@ -457,7 +461,7 @@ fn print_expr(ps s, &@ast::expr expr) {\n             }\n             ibox(s.s, indent_unit);\n             wrd(s.s, \"[\");\n-            commasep_exprs(s, exprs);\n+            commasep_exprs(s, inconsistent, exprs);\n             wrd(s.s, \"]\");\n             end(s.s);\n         }\n@@ -473,7 +477,7 @@ fn print_expr(ps s, &@ast::expr expr) {\n             popen(s);\n             auto f = printElt;\n             auto gs = get_span;\n-            commasep_cmnt[ast::elt](s, exprs, f, gs);\n+            commasep_cmnt[ast::elt](s, inconsistent, exprs, f, gs);\n             pclose(s);\n         }\n         case (ast::expr_rec(?fields,?wth,_)) {\n@@ -492,7 +496,7 @@ fn print_expr(ps s, &@ast::expr expr) {\n             popen(s);\n             auto f = print_field;\n             auto gs = get_span;\n-            commasep_cmnt[ast::field](s, fields, f, gs);\n+            commasep_cmnt[ast::field](s, consistent, fields, f, gs);\n             alt (wth) {\n                 case (option::some[@ast::expr](?expr)) {\n                     if (vec::len[ast::field](fields) > 0u) {space(s.s);}\n@@ -508,7 +512,7 @@ fn print_expr(ps s, &@ast::expr expr) {\n         case (ast::expr_call(?func,?args,_)) {\n             print_expr(s, func);\n             popen(s);\n-            commasep_exprs(s, args);\n+            commasep_exprs(s, inconsistent, args);\n             pclose(s);\n         }\n         case (ast::expr_self_method(?ident,_)) {\n@@ -528,14 +532,14 @@ fn print_expr(ps s, &@ast::expr expr) {\n             print_expr(s, func);\n             popen(s);\n             auto f = print_opt;\n-            commasep[option::t[@ast::expr]](s, args, f);\n+            commasep[option::t[@ast::expr]](s, inconsistent, args, f);\n             pclose(s);\n         }\n     case (ast::expr_spawn(_,_,?e,?es,_)) {\n           word_nbsp(s, \"spawn\");\n           print_expr(s, e);\n           popen(s);\n-          commasep_exprs(s, es);\n+          commasep_exprs(s, inconsistent, es);\n           pclose(s);\n         }\n         case (ast::expr_binary(?op,?lhs,?rhs,_)) {\n@@ -742,7 +746,7 @@ fn print_expr(ps s, &@ast::expr expr) {\n             print_path(s, path);\n             if (vec::len[@ast::expr](args) > 0u) {\n                 popen(s);\n-                commasep_exprs(s, args);\n+                commasep_exprs(s, inconsistent, args);\n                 pclose(s);\n             }\n             // FIXME: extension 'body'\n@@ -855,7 +859,7 @@ fn print_path(ps s, ast::path path) {\n     if (vec::len[@ast::ty](path.node.types) > 0u) {\n         wrd(s.s, \"[\");\n         auto f = print_type;\n-        commasep[@ast::ty](s, path.node.types, f);\n+        commasep[@ast::ty](s, inconsistent, path.node.types, f);\n         wrd(s.s, \"]\");\n     }\n }\n@@ -871,7 +875,7 @@ fn print_pat(ps s, &@ast::pat pat) {\n             if (vec::len[@ast::pat](args) > 0u) {\n                 popen(s);\n                 auto f = print_pat;\n-                commasep[@ast::pat](s, args, f);\n+                commasep[@ast::pat](s, inconsistent, args, f);\n                 pclose(s);\n             }\n         }\n@@ -900,7 +904,7 @@ fn print_fn(ps s, ast::fn_decl decl, str name,\n         end(s.s);\n     }\n     auto f = print_arg;\n-    commasep[ast::arg](s, decl.inputs, f);\n+    commasep[ast::arg](s, inconsistent, decl.inputs, f);\n     pclose(s);\n     maybe_print_comment(s, decl.output.span.lo);\n     if (decl.output.node != ast::ty_nil) {\n@@ -917,7 +921,7 @@ fn print_type_params(ps s, vec[ast::ty_param] params) {\n             wrd(s.s, param);\n         }\n         auto f = printParam;\n-        commasep[ast::ty_param](s, params, f);\n+        commasep[ast::ty_param](s, inconsistent, params, f);\n         wrd(s.s, \"]\");\n     }\n }\n@@ -939,7 +943,7 @@ fn print_view_item(ps s, @ast::view_item item) {\n                     end(s.s);\n                 }\n                 auto f = print_meta;\n-                commasep[@ast::meta_item](s, mta, f);\n+                commasep[@ast::meta_item](s, consistent, mta, f);\n                 pclose(s);\n             }\n         }\n@@ -1042,7 +1046,7 @@ fn print_ty_fn(ps s, ast::proto proto, option::t[str] id,\n         print_type(s, input.ty);\n     }\n     auto f = print_arg;\n-    commasep[ast::ty_arg](s, inputs, f);\n+    commasep[ast::ty_arg](s, inconsistent, inputs, f);\n     pclose(s);\n     maybe_print_comment(s, output.span.lo);\n     if (output.node != ast::ty_nil) {"}]}