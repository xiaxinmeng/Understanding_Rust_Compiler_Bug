{"sha": "92f6874ead00ac6ea12c46ca555796c67db56c70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyZjY4NzRlYWQwMGFjNmVhMTJjNDZjYTU1NTc5NmM2N2RiNTZjNzA=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-03T11:52:13Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-03T11:52:13Z"}, "message": "enable code sharing between global and local access", "tree": {"sha": "d712068bfc67048fba110ef1e8dea19b0b452289", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d712068bfc67048fba110ef1e8dea19b0b452289"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92f6874ead00ac6ea12c46ca555796c67db56c70", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYGyTtAAoJEFbW7qD8Z6xGCnsQAKcPItd3ZBgq62lHqIIigzPz\nYsRdX5TbOzbuWXviG3imI0be7CeW/o9aQ8CCovbULp1FVKTSopIjEtOVEtJpJjdz\nuq+U0dEJagp8TJivkMLfKt+0zhGOySa3kMOHq0yQxKFpsyNDr4oJk5ZSHUJQBcOy\nK3u/jHTGhEHaD+KYXuYL8jIY5zL2TYgPWnjjZGCNqyMZy3hTT545pXsU/uGv/gxg\n0yZg5FeyGXN4cjbw5T3qCmKeAoaSsyU0q565da4WDZBbFn4epwb26P7OclKaogPA\nBChy/jRAf60P/xoxYRItNaBvX0ps5l/GORA6hueFq5MoSLcl3ONHq9m9ZrjrmOyT\ntxyqsJwlbzY3BxyTzPitLmznBAp4QY6ssApPkdIS+8X1NWSm+G0WZoSkValEEzyH\nwyIpSqyBJ/Zyo3BSt4CG/GJjCykhq/J9/lTz82vZvqHcgsqZvEUVh2MftmnZa67n\nBIncsuUh44OFxSOSXSU2/soFeAsPtM9gvsrPZWX4yJajO6w51y9g5eSaZr87Vi/X\nTbYo9pAnJoDsdOgM9qMdPMPQds1JaH2AoOVug0NKeJGXA5Hn8yyVuYA6u13be2mZ\nc4kzHWNMtSh9z3v1+4fvQfEt3An6R+fKgGy4cxb23gjGdY0FOcbD5n9l0Ie/lDj4\nrzbSJildy1B9IyYL2Xzp\n=/y6V\n-----END PGP SIGNATURE-----", "payload": "tree d712068bfc67048fba110ef1e8dea19b0b452289\nparent bf73e7581e96b144ade8bccc16c370c392a4fa5c\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1478173933 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1478173933 +0100\n\nenable code sharing between global and local access"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92f6874ead00ac6ea12c46ca555796c67db56c70", "html_url": "https://github.com/rust-lang/rust/commit/92f6874ead00ac6ea12c46ca555796c67db56c70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92f6874ead00ac6ea12c46ca555796c67db56c70/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf73e7581e96b144ade8bccc16c370c392a4fa5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf73e7581e96b144ade8bccc16c370c392a4fa5c", "html_url": "https://github.com/rust-lang/rust/commit/bf73e7581e96b144ade8bccc16c370c392a4fa5c"}], "stats": {"total": 98, "additions": 55, "deletions": 43}, "files": [{"sha": "bb5f944fa36cf25e140f21d479fcc8c60659724c", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/92f6874ead00ac6ea12c46ca555796c67db56c70/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92f6874ead00ac6ea12c46ca555796c67db56c70/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=92f6874ead00ac6ea12c46ca555796c67db56c70", "patch": "@@ -1552,6 +1552,38 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n         }\n     }\n+\n+    /// convenience function to ensure correct usage of globals and code-sharing with locals\n+    pub fn modify_global<\n+        F: FnOnce(&mut Self, Option<Value>) -> EvalResult<'tcx, Value>,\n+    >(\n+        &mut self,\n+        cid: GlobalId<'tcx>,\n+        f: F,\n+    ) -> EvalResult<'tcx, ()> {\n+        let mut val = *self.globals.get(&cid).expect(\"global not cached\");\n+        if !val.mutable {\n+            return Err(EvalError::ModifiedConstantMemory);\n+        }\n+        val.data = Some(f(self, val.data)?);\n+        *self.globals.get_mut(&cid).expect(\"already checked\") = val;\n+        Ok(())\n+    }\n+\n+    /// convenience function to ensure correct usage of locals and code-sharing with globals\n+    pub fn modify_local<\n+        F: FnOnce(&mut Self, Option<Value>) -> EvalResult<'tcx, Value>,\n+    >(\n+        &mut self,\n+        frame: usize,\n+        local: mir::Local,\n+        f: F,\n+    ) -> EvalResult<'tcx, ()> {\n+        let val = self.stack[frame].get_local(local);\n+        let val = f(self, val)?;\n+        self.stack[frame].set_local(local, val);\n+        Ok(())\n+    }\n }\n \n impl<'tcx> Frame<'tcx> {"}, {"sha": "dfa4a427e9054f324acea15137afc083c6d18416", "filename": "src/interpreter/terminator/intrinsics.rs", "status": "modified", "additions": 23, "deletions": 43, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/92f6874ead00ac6ea12c46ca555796c67db56c70/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92f6874ead00ac6ea12c46ca555796c67db56c70/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fintrinsics.rs?ref=92f6874ead00ac6ea12c46ca555796c67db56c70", "patch": "@@ -127,52 +127,32 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n             \"init\" => {\n                 let size = dest_layout.size(&self.tcx.data_layout).bytes() as usize;\n-                match dest {\n-                    Lvalue::Local { frame, local } => {\n-                        match self.stack[frame].get_local(local) {\n-                            Some(Value::ByRef(ptr)) => self.memory.write_repeat(ptr, 0, size)?,\n-                            None => match self.ty_to_primval_kind(dest_ty) {\n-                                Ok(kind) => self.stack[frame].set_local(local, Value::ByVal(PrimVal::new(0, kind))),\n-                                Err(_) => {\n-                                    let ptr = self.alloc_ptr_with_substs(dest_ty, substs)?;\n-                                    self.memory.write_repeat(ptr, 0, size)?;\n-                                    self.stack[frame].set_local(local, Value::ByRef(ptr));\n-                                }\n-                            },\n-                            Some(Value::ByVal(val)) => self.stack[frame].set_local(local, Value::ByVal(PrimVal::new(0, val.kind))),\n-                            Some(Value::ByValPair(a, b)) => self.stack[frame].set_local(local, Value::ByValPair(\n-                                PrimVal::new(0, a.kind),\n-                                PrimVal::new(0, b.kind),\n-                            )),\n-                        }\n+                let init = |this: &mut Self, val: Option<Value>| {\n+                    match val {\n+                        Some(Value::ByRef(ptr)) => {\n+                            this.memory.write_repeat(ptr, 0, size)?;\n+                            Ok(Value::ByRef(ptr))\n+                        },\n+                        None => match this.ty_to_primval_kind(dest_ty) {\n+                            Ok(kind) => Ok(Value::ByVal(PrimVal::new(0, kind))),\n+                            Err(_) => {\n+                                let ptr = this.alloc_ptr_with_substs(dest_ty, substs)?;\n+                                this.memory.write_repeat(ptr, 0, size)?;\n+                                Ok(Value::ByRef(ptr))\n+                            }\n+                        },\n+                        Some(Value::ByVal(value)) => Ok(Value::ByVal(PrimVal::new(0, value.kind))),\n+                        Some(Value::ByValPair(a, b)) => Ok(Value::ByValPair(\n+                            PrimVal::new(0, a.kind),\n+                            PrimVal::new(0, b.kind),\n+                        )),\n                     }\n+                };\n+                match dest {\n+                    Lvalue::Local { frame, local } => self.modify_local(frame, local, init)?,\n                     Lvalue::Ptr { ptr, extra: LvalueExtra::None } => self.memory.write_repeat(ptr, 0, size)?,\n                     Lvalue::Ptr { .. } => bug!(\"init intrinsic tried to write to fat ptr target\"),\n-                    Lvalue::Global(cid) => {\n-                        let global_val = *self.globals.get(&cid).expect(\"global not cached\");\n-                        if !global_val.mutable {\n-                            return Err(EvalError::ModifiedConstantMemory);\n-                        }\n-                        match global_val.data {\n-                            Some(Value::ByRef(ptr)) => self.memory.write_repeat(ptr, 0, size)?,\n-                            None => match self.ty_to_primval_kind(dest_ty) {\n-                                Ok(kind) => self.globals\n-                                                .get_mut(&cid)\n-                                                .expect(\"already checked\")\n-                                                .data = Some(Value::ByVal(PrimVal::new(0, kind))),\n-                                Err(_) => {\n-                                    let ptr = self.alloc_ptr_with_substs(dest_ty, substs)?;\n-                                    self.memory.write_repeat(ptr, 0, size)?;\n-                                    self.globals.get_mut(&cid).expect(\"already checked\").data = Some(Value::ByRef(ptr));\n-                                },\n-                            },\n-                            Some(Value::ByVal(val)) => self.globals.get_mut(&cid).expect(\"already checked\").data = Some(Value::ByVal(PrimVal::new(0, val.kind))),\n-                            Some(Value::ByValPair(a, b)) => self.globals.get_mut(&cid).expect(\"already checked\").data = Some(Value::ByValPair(\n-                                PrimVal::new(0, a.kind),\n-                                PrimVal::new(0, b.kind),\n-                            )),\n-                        }\n-                    }\n+                    Lvalue::Global(cid) => self.modify_global(cid, init)?,\n                 }\n             }\n "}]}