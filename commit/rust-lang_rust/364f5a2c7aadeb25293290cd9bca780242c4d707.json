{"sha": "364f5a2c7aadeb25293290cd9bca780242c4d707", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2NGY1YTJjN2FhZGViMjUyOTMyOTBjZDliY2E3ODAyNDJjNGQ3MDc=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-10-07T14:04:22Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2020-11-24T09:37:15Z"}, "message": "clippy: Let rustc handle describing lints", "tree": {"sha": "f225a14cc115237daef249dc445912cece4de814", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f225a14cc115237daef249dc445912cece4de814"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/364f5a2c7aadeb25293290cd9bca780242c4d707", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAl+81EsACgkQHKDfKvWd\naKVF3w/+JawXAy0INTdZSVY6A0yjIHxuKB2mbGgFj4VhqcXV7/QLxgeC7y7Clubi\nyZjxoW6xoEwMHDw9bAEongFBrojmnc9W6/BNYfarsqhGz811ok/UbNU2fM66KB14\npGz15IzmB+wyeu7ZSE79x0pmn8AoTqlhkvf9J/SjycN8a+YIApoVsCMswhiNFvb5\na4FUAfGzqli+l5KtTKQ/MfBYy9TqRbRdM7zxRgDpVc/swbWJ4MytLsoPbbJLhczX\nGk7uyc42qivCSv/o6DDEcQRK+/HNHqYZ9jleZqW8A0pLzCAm04kJdZiudRhpjHzd\nQCyPThojuYi+AGVCcHhBc9scrmAnzyc7QhjjMdMXcj3fE4wKNTP5AG9p2BGebLg4\nxoi/x5mpXtPBr+clKRQ7vde8S7UpSsNCae14UJMGtLnZ+Dd2FMAtxdpYoFh72qj7\nHsEzJTtrnjuR12FPknRdfgik0FXI/K6QVTiK1RxrnFbZB2el+HYyO4q5IoIaoMpZ\n09eGnBF0sZYYnYNF2XPf5F6+ObEMp3cW9kPRqzKoCdp5VS9EUFUJVQrmotv2eIKg\nPHrDdcuyYR3XDnzh8nNsMHqHGKlP3n3MpXFalV/4jEdbWIcouDryH8/iQfhRcvoC\nT19wTLo2kmx0ha0WEo7/uOK9hTd+7chccIrpJ/E8nrpJfsfle6Q=\n=KWUI\n-----END PGP SIGNATURE-----", "payload": "tree f225a14cc115237daef249dc445912cece4de814\nparent 13db749c4bbb85f93f1b256548a468754b70fde3\nauthor flip1995 <hello@philkrones.com> 1602079462 +0200\ncommitter flip1995 <philipp.krones@embecosm.com> 1606210635 +0100\n\nclippy: Let rustc handle describing lints\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/364f5a2c7aadeb25293290cd9bca780242c4d707", "html_url": "https://github.com/rust-lang/rust/commit/364f5a2c7aadeb25293290cd9bca780242c4d707", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/364f5a2c7aadeb25293290cd9bca780242c4d707/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13db749c4bbb85f93f1b256548a468754b70fde3", "url": "https://api.github.com/repos/rust-lang/rust/commits/13db749c4bbb85f93f1b256548a468754b70fde3", "html_url": "https://github.com/rust-lang/rust/commit/13db749c4bbb85f93f1b256548a468754b70fde3"}], "stats": {"total": 121, "additions": 0, "deletions": 121}, "files": [{"sha": "ef31c72481a236793b026fac2c02ca820268ac2c", "filename": "src/tools/clippy/src/driver.rs", "status": "modified", "additions": 0, "deletions": 121, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/364f5a2c7aadeb25293290cd9bca780242c4d707/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364f5a2c7aadeb25293290cd9bca780242c4d707/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs?ref=364f5a2c7aadeb25293290cd9bca780242c4d707", "patch": "@@ -8,7 +8,6 @@\n \n // FIXME: switch to something more ergonomic here, once available.\n // (Currently there is no way to opt into sysroot crates without `extern crate`.)\n-extern crate rustc_data_structures;\n extern crate rustc_driver;\n extern crate rustc_errors;\n extern crate rustc_interface;\n@@ -26,8 +25,6 @@ use std::panic;\n use std::path::{Path, PathBuf};\n use std::process::{exit, Command};\n \n-mod lintlist;\n-\n /// If a command-line option matches `find_arg`, then apply the predicate `pred` on its value. If\n /// true, then return it. The parameter is assumed to be either `--arg=value` or `--arg value`.\n fn arg_value<'a, T: Deref<Target = str>>(\n@@ -92,113 +89,6 @@ impl rustc_driver::Callbacks for ClippyCallbacks {\n     }\n }\n \n-#[allow(clippy::find_map, clippy::filter_map)]\n-fn describe_lints() {\n-    use lintlist::{Level, Lint, ALL_LINTS, LINT_LEVELS};\n-    use rustc_data_structures::fx::FxHashSet;\n-\n-    println!(\n-        \"\n-Available lint options:\n-    -W <foo>           Warn about <foo>\n-    -A <foo>           Allow <foo>\n-    -D <foo>           Deny <foo>\n-    -F <foo>           Forbid <foo> (deny <foo> and all attempts to override)\n-\n-\"\n-    );\n-\n-    let lint_level = |lint: &Lint| {\n-        LINT_LEVELS\n-            .iter()\n-            .find(|level_mapping| level_mapping.0 == lint.group)\n-            .map(|(_, level)| match level {\n-                Level::Allow => \"allow\",\n-                Level::Warn => \"warn\",\n-                Level::Deny => \"deny\",\n-            })\n-            .unwrap()\n-    };\n-\n-    let mut lints: Vec<_> = ALL_LINTS.iter().collect();\n-    // The sort doesn't case-fold but it's doubtful we care.\n-    lints.sort_by_cached_key(|x: &&Lint| (lint_level(x), x.name));\n-\n-    let max_lint_name_len = lints\n-        .iter()\n-        .map(|lint| lint.name.len())\n-        .map(|len| len + \"clippy::\".len())\n-        .max()\n-        .unwrap_or(0);\n-\n-    let padded = |x: &str| {\n-        let mut s = \" \".repeat(max_lint_name_len - x.chars().count());\n-        s.push_str(x);\n-        s\n-    };\n-\n-    let scoped = |x: &str| format!(\"clippy::{}\", x);\n-\n-    let lint_groups: FxHashSet<_> = lints.iter().map(|lint| lint.group).collect();\n-\n-    println!(\"Lint checks provided by clippy:\\n\");\n-    println!(\"    {}  {:7.7}  meaning\", padded(\"name\"), \"default\");\n-    println!(\"    {}  {:7.7}  -------\", padded(\"----\"), \"-------\");\n-\n-    let print_lints = |lints: &[&Lint]| {\n-        for lint in lints {\n-            let name = lint.name.replace(\"_\", \"-\");\n-            println!(\n-                \"    {}  {:7.7}  {}\",\n-                padded(&scoped(&name)),\n-                lint_level(lint),\n-                lint.desc\n-            );\n-        }\n-        println!(\"\\n\");\n-    };\n-\n-    print_lints(&lints);\n-\n-    let max_group_name_len = std::cmp::max(\n-        \"clippy::all\".len(),\n-        lint_groups\n-            .iter()\n-            .map(|group| group.len())\n-            .map(|len| len + \"clippy::\".len())\n-            .max()\n-            .unwrap_or(0),\n-    );\n-\n-    let padded_group = |x: &str| {\n-        let mut s = \" \".repeat(max_group_name_len - x.chars().count());\n-        s.push_str(x);\n-        s\n-    };\n-\n-    println!(\"Lint groups provided by clippy:\\n\");\n-    println!(\"    {}  sub-lints\", padded_group(\"name\"));\n-    println!(\"    {}  ---------\", padded_group(\"----\"));\n-    println!(\"    {}  the set of all clippy lints\", padded_group(\"clippy::all\"));\n-\n-    let print_lint_groups = || {\n-        for group in lint_groups {\n-            let name = group.to_lowercase().replace(\"_\", \"-\");\n-            let desc = lints\n-                .iter()\n-                .filter(|&lint| lint.group == group)\n-                .map(|lint| lint.name)\n-                .map(|name| name.replace(\"_\", \"-\"))\n-                .collect::<Vec<String>>()\n-                .join(\", \");\n-            println!(\"    {}  {}\", padded_group(&scoped(&name)), desc);\n-        }\n-        println!(\"\\n\");\n-    };\n-\n-    print_lint_groups();\n-}\n-\n fn display_help() {\n     println!(\n         \"\\\n@@ -379,17 +269,6 @@ pub fn main() {\n             exit(0);\n         }\n \n-        let should_describe_lints = || {\n-            let args: Vec<_> = env::args().collect();\n-            args.windows(2)\n-                .any(|args| args[1] == \"help\" && matches!(args[0].as_str(), \"-W\" | \"-A\" | \"-D\" | \"-F\"))\n-        };\n-\n-        if !wrapper_mode && should_describe_lints() {\n-            describe_lints();\n-            exit(0);\n-        }\n-\n         // this conditional check for the --sysroot flag is there so users can call\n         // `clippy_driver` directly\n         // without having to pass --sysroot or anything"}]}