{"sha": "671ab42a3b86addf7b90ff126554a092579e589a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MWFiNDJhM2I4NmFkZGY3YjkwZmYxMjY1NTRhMDkyNTc5ZTU4OWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-29T05:51:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-29T05:51:51Z"}, "message": "auto merge of #10127 : thestinger/rust/cold, r=pcwalton\n\nThis allows a function to marked as infrequently called, resulting in\r\nany branch calling it to be considered colder.", "tree": {"sha": "9be83bf730af3c4c600aec162208a6b3eb1c36d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9be83bf730af3c4c600aec162208a6b3eb1c36d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/671ab42a3b86addf7b90ff126554a092579e589a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/671ab42a3b86addf7b90ff126554a092579e589a", "html_url": "https://github.com/rust-lang/rust/commit/671ab42a3b86addf7b90ff126554a092579e589a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/671ab42a3b86addf7b90ff126554a092579e589a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dba60700804119f7e953e6b2b72ce4875c9d60cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/dba60700804119f7e953e6b2b72ce4875c9d60cb", "html_url": "https://github.com/rust-lang/rust/commit/dba60700804119f7e953e6b2b72ce4875c9d60cb"}, {"sha": "541e5f84d7ccbf02f8fdab6da0ff92f7ffbf0866", "url": "https://api.github.com/repos/rust-lang/rust/commits/541e5f84d7ccbf02f8fdab6da0ff92f7ffbf0866", "html_url": "https://github.com/rust-lang/rust/commit/541e5f84d7ccbf02f8fdab6da0ff92f7ffbf0866"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "64c6678ec5f726490511b211ddb24b9c00546475", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671ab42a3b86addf7b90ff126554a092579e589a/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671ab42a3b86addf7b90ff126554a092579e589a/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=671ab42a3b86addf7b90ff126554a092579e589a", "patch": "@@ -693,6 +693,8 @@ pub mod llvm {\n         pub fn LLVMAddReturnAttribute(Fn: ValueRef, PA: c_uint);\n         pub fn LLVMRemoveReturnAttribute(Fn: ValueRef, PA: c_uint);\n \n+        pub fn LLVMAddColdAttribute(Fn: ValueRef);\n+\n         pub fn LLVMRemoveFunctionAttr(Fn: ValueRef,\n                                       PA: c_ulonglong,\n                                       HighPA: c_ulonglong);"}, {"sha": "16c0e052f5fcd870c6bd4ed5e0e89b6436dc6786", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/671ab42a3b86addf7b90ff126554a092579e589a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671ab42a3b86addf7b90ff126554a092579e589a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=671ab42a3b86addf7b90ff126554a092579e589a", "patch": "@@ -202,19 +202,21 @@ pub fn get_extern_fn(externs: &mut ExternMap, llmod: ModuleRef, name: &str,\n     f\n }\n \n-pub fn get_extern_rust_fn(ccx: &mut CrateContext, inputs: &[ty::t], output: ty::t,\n-                          name: &str) -> ValueRef {\n+fn get_extern_rust_fn(ccx: &mut CrateContext, inputs: &[ty::t], output: ty::t,\n+                      name: &str, did: ast::DefId) -> ValueRef {\n     match ccx.externs.find_equiv(&name) {\n         Some(n) => return *n,\n         None => ()\n     }\n     let f = decl_rust_fn(ccx, inputs, output, name);\n+    do csearch::get_item_attrs(ccx.tcx.cstore, did) |meta_items| {\n+        set_llvm_fn_attrs(meta_items.iter().map(|&x| attr::mk_attr(x)).to_owned_vec(), f)\n+    }\n     ccx.externs.insert(name.to_owned(), f);\n     f\n }\n \n-pub fn decl_rust_fn(ccx: &mut CrateContext, inputs: &[ty::t], output: ty::t,\n-                    name: &str) -> ValueRef {\n+fn decl_rust_fn(ccx: &mut CrateContext, inputs: &[ty::t], output: ty::t, name: &str) -> ValueRef {\n     let llfty = type_of_rust_fn(ccx, inputs, output);\n     let llfn = decl_cdecl_fn(ccx.llmod, name, llfty);\n \n@@ -481,6 +483,10 @@ pub fn set_llvm_fn_attrs(attrs: &[ast::Attribute], llfn: ValueRef) {\n     if contains_name(attrs, \"no_split_stack\") {\n         set_no_split_stack(llfn);\n     }\n+\n+    if contains_name(attrs, \"cold\") {\n+        unsafe { llvm::LLVMAddColdAttribute(llfn) }\n+    }\n }\n \n pub fn set_always_inline(f: ValueRef) {\n@@ -840,7 +846,7 @@ pub fn trans_external_path(ccx: &mut CrateContext, did: ast::DefId, t: ty::t) ->\n         ty::ty_bare_fn(ref fn_ty) => {\n             match fn_ty.abis.for_arch(ccx.sess.targ_cfg.arch) {\n                 Some(Rust) | Some(RustIntrinsic) => {\n-                    get_extern_rust_fn(ccx, fn_ty.sig.inputs, fn_ty.sig.output, name)\n+                    get_extern_rust_fn(ccx, fn_ty.sig.inputs, fn_ty.sig.output, name, did)\n                 }\n                 Some(*) | None => {\n                     let c = foreign::llvm_calling_convention(ccx, fn_ty.abis);\n@@ -851,7 +857,7 @@ pub fn trans_external_path(ccx: &mut CrateContext, did: ast::DefId, t: ty::t) ->\n             }\n         }\n         ty::ty_closure(ref f) => {\n-            get_extern_rust_fn(ccx, f.sig.inputs, f.sig.output, name)\n+            get_extern_rust_fn(ccx, f.sig.inputs, f.sig.output, name, did)\n         }\n         _ => {\n             let llty = type_of(ccx, t);"}, {"sha": "7fcd674009d88e9fe9a8807bc53493ac5eaf9252", "filename": "src/libstd/rt/borrowck.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/671ab42a3b86addf7b90ff126554a092579e589a/src%2Flibstd%2Frt%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671ab42a3b86addf7b90ff126554a092579e589a/src%2Flibstd%2Frt%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fborrowck.rs?ref=671ab42a3b86addf7b90ff126554a092579e589a", "patch": "@@ -57,6 +57,7 @@ pub fn clear_task_borrow_list() {\n     let _ = try_take_task_borrow_list();\n }\n \n+#[cold]\n unsafe fn fail_borrowed(box: *mut raw::Box<()>, file: *c_char, line: size_t) -> ! {\n     debug_borrow(\"fail_borrowed: \", box, 0, 0, file, line);\n "}, {"sha": "89126bf9c9c8823e3396916f0c421cedbee5a221", "filename": "src/libstd/unstable/lang.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671ab42a3b86addf7b90ff126554a092579e589a/src%2Flibstd%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671ab42a3b86addf7b90ff126554a092579e589a/src%2Flibstd%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Flang.rs?ref=671ab42a3b86addf7b90ff126554a092579e589a", "patch": "@@ -16,11 +16,13 @@ use libc::{c_char, size_t, uintptr_t};\n use rt::task;\n use rt::borrowck;\n \n+#[cold]\n #[lang=\"fail_\"]\n pub fn fail_(expr: *c_char, file: *c_char, line: size_t) -> ! {\n     task::begin_unwind(expr, file, line);\n }\n \n+#[cold]\n #[lang=\"fail_bounds_check\"]\n pub fn fail_bounds_check(file: *c_char, line: size_t, index: size_t, len: size_t) -> ! {\n     let msg = format!(\"index out of bounds: the len is {} but the index is {}\","}, {"sha": "0a148d334ab611229e551c95968416b42871dbcf", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/671ab42a3b86addf7b90ff126554a092579e589a/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/671ab42a3b86addf7b90ff126554a092579e589a/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=671ab42a3b86addf7b90ff126554a092579e589a", "patch": "@@ -365,6 +365,11 @@ extern \"C\" void LLVMRemoveReturnAttribute(LLVMValueRef Fn, LLVMAttribute PA) {\n                       AttributeSet::get(A->getContext(), AttributeSet::ReturnIndex,  B));\n }\n \n+extern \"C\" void LLVMAddColdAttribute(LLVMValueRef Fn) {\n+  Function *A = unwrap<Function>(Fn);\n+  A->addAttribute(AttributeSet::FunctionIndex, Attribute::Cold);\n+}\n+\n extern \"C\" LLVMValueRef LLVMBuildAtomicLoad(LLVMBuilderRef B,\n                                             LLVMValueRef source,\n                                             const char* Name,"}, {"sha": "a6b887f058af89933c1c5c7265020f0cbcd2a556", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/671ab42a3b86addf7b90ff126554a092579e589a/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/671ab42a3b86addf7b90ff126554a092579e589a/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=671ab42a3b86addf7b90ff126554a092579e589a", "patch": "@@ -629,3 +629,4 @@ LLVMRustAddAlwaysInlinePass\n LLVMAddReturnAttribute\n LLVMRemoveReturnAttribute\n LLVMTypeToString\n+LLVMAddColdAttribute"}]}