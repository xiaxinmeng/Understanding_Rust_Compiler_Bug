{"sha": "09efc4e855c2aa4144936af987d4fdde6705a34f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ZWZjNGU4NTVjMmFhNDE0NDkzNmFmOTg3ZDRmZGRlNjcwNWEzNGY=", "commit": {"author": {"name": "OGINO Masanori", "email": "masanori.ogino@gmail.com", "date": "2013-08-01T15:34:59Z"}, "committer": {"name": "OGINO Masanori", "email": "masanori.ogino@gmail.com", "date": "2013-08-02T00:12:05Z"}, "message": "Replace 'blk' -> 'block' in AstBuilder.\n\nI didn't rename variables because they are local and are not parts of\nthe public interfaces.\n\nSigned-off-by: OGINO Masanori <masanori.ogino@gmail.com>", "tree": {"sha": "368b18f038b876fdda33b94a1438729e2b843552", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/368b18f038b876fdda33b94a1438729e2b843552"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09efc4e855c2aa4144936af987d4fdde6705a34f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09efc4e855c2aa4144936af987d4fdde6705a34f", "html_url": "https://github.com/rust-lang/rust/commit/09efc4e855c2aa4144936af987d4fdde6705a34f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09efc4e855c2aa4144936af987d4fdde6705a34f/comments", "author": {"login": "omasanori", "id": 167209, "node_id": "MDQ6VXNlcjE2NzIwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/167209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omasanori", "html_url": "https://github.com/omasanori", "followers_url": "https://api.github.com/users/omasanori/followers", "following_url": "https://api.github.com/users/omasanori/following{/other_user}", "gists_url": "https://api.github.com/users/omasanori/gists{/gist_id}", "starred_url": "https://api.github.com/users/omasanori/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omasanori/subscriptions", "organizations_url": "https://api.github.com/users/omasanori/orgs", "repos_url": "https://api.github.com/users/omasanori/repos", "events_url": "https://api.github.com/users/omasanori/events{/privacy}", "received_events_url": "https://api.github.com/users/omasanori/received_events", "type": "User", "site_admin": false}, "committer": {"login": "omasanori", "id": 167209, "node_id": "MDQ6VXNlcjE2NzIwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/167209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omasanori", "html_url": "https://github.com/omasanori", "followers_url": "https://api.github.com/users/omasanori/followers", "following_url": "https://api.github.com/users/omasanori/following{/other_user}", "gists_url": "https://api.github.com/users/omasanori/gists{/gist_id}", "starred_url": "https://api.github.com/users/omasanori/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omasanori/subscriptions", "organizations_url": "https://api.github.com/users/omasanori/orgs", "repos_url": "https://api.github.com/users/omasanori/repos", "events_url": "https://api.github.com/users/omasanori/events{/privacy}", "received_events_url": "https://api.github.com/users/omasanori/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb5743bfb2f634d2f5c8ef484a04e63d1a24cef6", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb5743bfb2f634d2f5c8ef484a04e63d1a24cef6", "html_url": "https://github.com/rust-lang/rust/commit/eb5743bfb2f634d2f5c8ef484a04e63d1a24cef6"}], "stats": {"total": 70, "additions": 35, "deletions": 35}, "files": [{"sha": "c373a3894884e50bc2286db265bf254a739e2577", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/09efc4e855c2aa4144936af987d4fdde6705a34f/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09efc4e855c2aa4144936af987d4fdde6705a34f/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=09efc4e855c2aa4144936af987d4fdde6705a34f", "patch": "@@ -76,12 +76,12 @@ pub trait AstBuilder {\n     fn stmt_let(&self, sp: span, mutbl: bool, ident: ast::ident, ex: @ast::expr) -> @ast::stmt;\n \n     // blocks\n-    fn blk(&self, span: span, stmts: ~[@ast::stmt], expr: Option<@ast::expr>) -> ast::Block;\n-    fn blk_expr(&self, expr: @ast::expr) -> ast::Block;\n-    fn blk_all(&self, span: span,\n-               view_items: ~[ast::view_item],\n-               stmts: ~[@ast::stmt],\n-               expr: Option<@ast::expr>) -> ast::Block;\n+    fn block(&self, span: span, stmts: ~[@ast::stmt], expr: Option<@ast::expr>) -> ast::Block;\n+    fn block_expr(&self, expr: @ast::expr) -> ast::Block;\n+    fn block_all(&self, span: span,\n+                 view_items: ~[ast::view_item],\n+                 stmts: ~[@ast::stmt],\n+                 expr: Option<@ast::expr>) -> ast::Block;\n \n     // expressions\n     fn expr(&self, span: span, node: ast::expr_) -> @ast::expr;\n@@ -105,7 +105,7 @@ pub trait AstBuilder {\n     fn expr_method_call(&self, span: span,\n                         expr: @ast::expr, ident: ast::ident,\n                         args: ~[@ast::expr]) -> @ast::expr;\n-    fn expr_blk(&self, b: ast::Block) -> @ast::expr;\n+    fn expr_block(&self, b: ast::Block) -> @ast::expr;\n \n     fn field_imm(&self, span: span, name: ident, e: @ast::expr) -> ast::Field;\n     fn expr_struct(&self, span: span, path: ast::Path, fields: ~[ast::Field]) -> @ast::expr;\n@@ -387,18 +387,18 @@ impl AstBuilder for @ExtCtxt {\n         @respan(sp, ast::stmt_decl(@decl, self.next_id()))\n     }\n \n-    fn blk(&self, span: span, stmts: ~[@ast::stmt], expr: Option<@expr>) -> ast::Block {\n-        self.blk_all(span, ~[], stmts, expr)\n+    fn block(&self, span: span, stmts: ~[@ast::stmt], expr: Option<@expr>) -> ast::Block {\n+        self.block_all(span, ~[], stmts, expr)\n     }\n \n-    fn blk_expr(&self, expr: @ast::expr) -> ast::Block {\n-        self.blk_all(expr.span, ~[], ~[], Some(expr))\n+    fn block_expr(&self, expr: @ast::expr) -> ast::Block {\n+        self.block_all(expr.span, ~[], ~[], Some(expr))\n     }\n-    fn blk_all(&self,\n-               span: span,\n-               view_items: ~[ast::view_item],\n-               stmts: ~[@ast::stmt],\n-               expr: Option<@ast::expr>) -> ast::Block {\n+    fn block_all(&self,\n+                 span: span,\n+                 view_items: ~[ast::view_item],\n+                 stmts: ~[@ast::stmt],\n+                 expr: Option<@ast::expr>) -> ast::Block {\n            ast::Block {\n                view_items: view_items,\n                stmts: stmts,\n@@ -474,7 +474,7 @@ impl AstBuilder for @ExtCtxt {\n         self.expr(span,\n                   ast::expr_method_call(self.next_id(), expr, ident, ~[], args, ast::NoSugar))\n     }\n-    fn expr_blk(&self, b: ast::Block) -> @ast::expr {\n+    fn expr_block(&self, b: ast::Block) -> @ast::expr {\n         self.expr(b.span, ast::expr_block(b))\n     }\n     fn field_imm(&self, span: span, name: ident, e: @ast::expr) -> ast::Field {\n@@ -577,7 +577,7 @@ impl AstBuilder for @ExtCtxt {\n         ast::arm {\n             pats: pats,\n             guard: None,\n-            body: self.blk_expr(expr)\n+            body: self.block_expr(expr)\n         }\n     }\n \n@@ -591,8 +591,8 @@ impl AstBuilder for @ExtCtxt {\n \n     fn expr_if(&self, span: span,\n                cond: @ast::expr, then: @ast::expr, els: Option<@ast::expr>) -> @ast::expr {\n-        let els = els.map(|x| self.expr_blk(self.blk_expr(*x)));\n-        self.expr(span, ast::expr_if(cond, self.blk_expr(then), els))\n+        let els = els.map(|x| self.expr_block(self.block_expr(*x)));\n+        self.expr(span, ast::expr_if(cond, self.block_expr(then), els))\n     }\n \n     fn lambda_fn_decl(&self, span: span, fn_decl: ast::fn_decl, blk: ast::Block) -> @ast::expr {\n@@ -618,23 +618,23 @@ impl AstBuilder for @ExtCtxt {\n     }\n \n     fn lambda_expr(&self, span: span, ids: ~[ast::ident], expr: @ast::expr) -> @ast::expr {\n-        self.lambda(span, ids, self.blk_expr(expr))\n+        self.lambda(span, ids, self.block_expr(expr))\n     }\n     fn lambda_expr_0(&self, span: span, expr: @ast::expr) -> @ast::expr {\n-        self.lambda0(span, self.blk_expr(expr))\n+        self.lambda0(span, self.block_expr(expr))\n     }\n     fn lambda_expr_1(&self, span: span, expr: @ast::expr, ident: ast::ident) -> @ast::expr {\n-        self.lambda1(span, self.blk_expr(expr), ident)\n+        self.lambda1(span, self.block_expr(expr), ident)\n     }\n \n     fn lambda_stmts(&self, span: span, ids: ~[ast::ident], stmts: ~[@ast::stmt]) -> @ast::expr {\n-        self.lambda(span, ids, self.blk(span, stmts, None))\n+        self.lambda(span, ids, self.block(span, stmts, None))\n     }\n     fn lambda_stmts_0(&self, span: span, stmts: ~[@ast::stmt]) -> @ast::expr {\n-        self.lambda0(span, self.blk(span, stmts, None))\n+        self.lambda0(span, self.block(span, stmts, None))\n     }\n     fn lambda_stmts_1(&self, span: span, stmts: ~[@ast::stmt], ident: ast::ident) -> @ast::expr {\n-        self.lambda1(span, self.blk(span, stmts, None), ident)\n+        self.lambda1(span, self.block(span, stmts, None), ident)\n     }\n \n     fn arg(&self, span: span, ident: ast::ident, ty: ast::Ty) -> ast::arg {"}, {"sha": "0a2731f2f879dd6b292c8b7200f96c91d05cee0b", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09efc4e855c2aa4144936af987d4fdde6705a34f/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09efc4e855c2aa4144936af987d4fdde6705a34f/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=09efc4e855c2aa4144936af987d4fdde6705a34f", "patch": "@@ -178,7 +178,7 @@ fn encodable_substructure(cx: @ExtCtxt, span: span,\n                                           ~[cx.expr_str(span,\n                                             cx.str_of(substr.type_ident)),\n                                             blk]);\n-            cx.expr_blk(cx.blk(span, ~[me], Some(ret)))\n+            cx.expr_block(cx.block(span, ~[me], Some(ret)))\n         }\n \n         _ => cx.bug(\"expected Struct or EnumMatching in deriving(Encodable)\")"}, {"sha": "61eaa98ae16b352747a886a8d00b9f7d1bf26bae", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09efc4e855c2aa4144936af987d4fdde6705a34f/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09efc4e855c2aa4144936af987d4fdde6705a34f/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=09efc4e855c2aa4144936af987d4fdde6705a34f", "patch": "@@ -528,7 +528,7 @@ impl<'self> MethodDef<'self> {\n \n         let method_ident = cx.ident_of(self.name);\n         let fn_decl = cx.fn_decl(args, ret_type);\n-        let body_block = cx.blk_expr(body);\n+        let body_block = cx.block_expr(body);\n \n \n         // Create the method."}, {"sha": "c0f472ff456300041932817feca45a8003839fd5", "filename": "src/libsyntax/ext/deriving/to_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09efc4e855c2aa4144936af987d4fdde6705a34f/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09efc4e855c2aa4144936af987d4fdde6705a34f/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs?ref=09efc4e855c2aa4144936af987d4fdde6705a34f", "patch": "@@ -79,7 +79,7 @@ fn to_str_substructure(cx: @ExtCtxt, span: span,\n             }\n             push(cx.expr_str(span, end));\n \n-            cx.expr_blk(cx.blk(span, stmts, Some(cx.expr_ident(span, buf))))\n+            cx.expr_block(cx.block(span, stmts, Some(cx.expr_ident(span, buf))))\n         }\n     };\n "}, {"sha": "be8c0e2bd99d4f615e9662894a9d38e8afbf957f", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09efc4e855c2aa4144936af987d4fdde6705a34f/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09efc4e855c2aa4144936af987d4fdde6705a34f/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=09efc4e855c2aa4144936af987d4fdde6705a34f", "patch": "@@ -323,5 +323,5 @@ fn pieces_to_expr(cx: @ExtCtxt, sp: span,\n                            nargs, expected_nargs));\n     }\n \n-    cx.expr_blk(cx.blk(fmt_sp, stms, Some(buf())))\n+    cx.expr_block(cx.block(fmt_sp, stms, Some(buf())))\n }"}, {"sha": "d5f032cd97831c158d8468a54a5be8c169d91ee0", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/09efc4e855c2aa4144936af987d4fdde6705a34f/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09efc4e855c2aa4144936af987d4fdde6705a34f/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=09efc4e855c2aa4144936af987d4fdde6705a34f", "patch": "@@ -705,11 +705,11 @@ fn expand_tts(cx: @ExtCtxt,\n                                   id_ext(\"tt\"),\n                                   cx.expr_vec_uniq(sp, ~[]));\n \n-    cx.expr_blk(\n-        cx.blk_all(sp, uses,\n-                   ~[stmt_let_sp,\n-                     stmt_let_tt] + mk_tts(cx, sp, tts),\n-                   Some(cx.expr_ident(sp, id_ext(\"tt\")))))\n+    cx.expr_block(\n+        cx.block_all(sp, uses,\n+                     ~[stmt_let_sp,\n+                       stmt_let_tt] + mk_tts(cx, sp, tts),\n+                     Some(cx.expr_ident(sp, id_ext(\"tt\")))))\n }\n \n fn expand_parse_call(cx: @ExtCtxt,"}]}