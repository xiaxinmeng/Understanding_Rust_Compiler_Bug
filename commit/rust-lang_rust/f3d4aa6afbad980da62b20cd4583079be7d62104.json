{"sha": "f3d4aa6afbad980da62b20cd4583079be7d62104", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZDRhYTZhZmJhZDk4MGRhNjJiMjBjZDQ1ODMwNzliZTdkNjIxMDQ=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-11-13T17:27:27Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-12-06T12:42:24Z"}, "message": "Implement lowering of if-let guards to MIR", "tree": {"sha": "6d24f04e766861f077338af0be9e5c137d483206", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d24f04e766861f077338af0be9e5c137d483206"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3d4aa6afbad980da62b20cd4583079be7d62104", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3d4aa6afbad980da62b20cd4583079be7d62104", "html_url": "https://github.com/rust-lang/rust/commit/f3d4aa6afbad980da62b20cd4583079be7d62104", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3d4aa6afbad980da62b20cd4583079be7d62104/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bab20800f0e7e6252c5c0da0a7a1ba123785cbca", "url": "https://api.github.com/repos/rust-lang/rust/commits/bab20800f0e7e6252c5c0da0a7a1ba123785cbca", "html_url": "https://github.com/rust-lang/rust/commit/bab20800f0e7e6252c5c0da0a7a1ba123785cbca"}], "stats": {"total": 95, "additions": 84, "deletions": 11}, "files": [{"sha": "f850295e62f5bddbfc5b827e2e1eaa2fda546a81", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3d4aa6afbad980da62b20cd4583079be7d62104/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d4aa6afbad980da62b20cd4583079be7d62104/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=f3d4aa6afbad980da62b20cd4583079be7d62104", "patch": "@@ -1722,6 +1722,8 @@ pub enum MatchSource {\n     IfDesugar { contains_else_clause: bool },\n     /// An `if let _ = _ { .. }` (optionally with `else { .. }`).\n     IfLetDesugar { contains_else_clause: bool },\n+    /// An `if let _ = _ => { .. }` match guard.\n+    IfLetGuardDesugar,\n     /// A `while _ { .. }` (which was desugared to a `loop { match _ { .. } }`).\n     WhileDesugar,\n     /// A `while let _ = _ { .. }` (which was desugared to a\n@@ -1740,7 +1742,7 @@ impl MatchSource {\n         use MatchSource::*;\n         match self {\n             Normal => \"match\",\n-            IfDesugar { .. } | IfLetDesugar { .. } => \"if\",\n+            IfDesugar { .. } | IfLetDesugar { .. } | IfLetGuardDesugar => \"if\",\n             WhileDesugar | WhileLetDesugar => \"while\",\n             ForLoopDesugar => \"for\",\n             TryDesugar => \"?\","}, {"sha": "d4715b836ea0febb21cbcad35a17eae1982dd244", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 45, "deletions": 9, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f3d4aa6afbad980da62b20cd4583079be7d62104/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d4aa6afbad980da62b20cd4583079be7d62104/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=f3d4aa6afbad980da62b20cd4583079be7d62104", "patch": "@@ -228,6 +228,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         guard: Option<&Guard<'tcx>>,\n         fake_borrow_temps: &Vec<(Place<'tcx>, Local)>,\n         scrutinee_span: Span,\n+        arm_span: Option<Span>,\n         arm_scope: Option<region::Scope>,\n     ) -> BasicBlock {\n         if candidate.subcandidates.is_empty() {\n@@ -239,6 +240,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 guard,\n                 fake_borrow_temps,\n                 scrutinee_span,\n+                arm_span,\n                 true,\n             )\n         } else {\n@@ -274,6 +276,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         guard,\n                         &fake_borrow_temps,\n                         scrutinee_span,\n+                        arm_span,\n                         schedule_drops,\n                     );\n                     if arm_scope.is_none() {\n@@ -436,6 +439,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             &fake_borrow_temps,\n             irrefutable_pat.span,\n             None,\n+            None,\n         )\n         .unit()\n     }\n@@ -817,11 +821,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// For an example of a case where we set `otherwise_block`, even for an\n     /// exhaustive match consider:\n     ///\n+    /// ```rust\n     /// match x {\n     ///     (true, true) => (),\n     ///     (_, false) => (),\n     ///     (false, true) => (),\n     /// }\n+    /// ```\n     ///\n     /// For this match, we check if `x.0` matches `true` (for the first\n     /// arm). If that's false, we check `x.1`. If it's `true` we check if\n@@ -935,11 +941,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Link up matched candidates. For example, if we have something like\n     /// this:\n     ///\n+    /// ```rust\n     /// ...\n     /// Some(x) if cond => ...\n     /// Some(x) => ...\n     /// Some(x) if cond => ...\n     /// ...\n+    /// ```\n     ///\n     /// We generate real edges from:\n     /// * `start_block` to the `prebinding_block` of the first pattern,\n@@ -1517,7 +1525,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Initializes each of the bindings from the candidate by\n     /// moving/copying/ref'ing the source as appropriate. Tests the guard, if\n     /// any, and then branches to the arm. Returns the block for the case where\n-    /// the guard fails.\n+    /// the guard succeeds.\n     ///\n     /// Note: we do not check earlier that if there is a guard,\n     /// there cannot be move bindings. We avoid a use-after-move by only\n@@ -1529,6 +1537,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         guard: Option<&Guard<'tcx>>,\n         fake_borrows: &Vec<(Place<'tcx>, Local)>,\n         scrutinee_span: Span,\n+        arm_span: Option<Span>,\n         schedule_drops: bool,\n     ) -> BasicBlock {\n         debug!(\"bind_and_guard_matched_candidate(candidate={:?})\", candidate);\n@@ -1659,15 +1668,42 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 self.cfg.push_assign(block, scrutinee_source_info, Place::from(temp), borrow);\n             }\n \n-            // the block to branch to if the guard fails; if there is no\n-            // guard, this block is simply unreachable\n-            let guard = match guard {\n-                Guard::If(e) => self.hir.mirror(e.clone()),\n+            let (guard_span, (post_guard_block, otherwise_post_guard_block)) = match guard {\n+                Guard::If(e) => {\n+                    let e = self.hir.mirror(e.clone());\n+                    let source_info = self.source_info(e.span);\n+                    (e.span, self.test_bool(block, e, source_info))\n+                },\n+                Guard::IfLet(pat, scrutinee) => {\n+                    let scrutinee_span = scrutinee.span();\n+                    let scrutinee_place = unpack!(block = self.lower_scrutinee(block, scrutinee.clone(), scrutinee_span));\n+                    let mut guard_candidate = Candidate::new(scrutinee_place, &pat, false);\n+                    let wildcard = Pat::wildcard_from_ty(pat.ty);\n+                    let mut otherwise_candidate = Candidate::new(scrutinee_place, &wildcard, false);\n+                    let fake_borrow_temps =\n+                        self.lower_match_tree(block, pat.span, false, &mut [&mut guard_candidate, &mut otherwise_candidate]);\n+                    self.declare_bindings(\n+                        None,\n+                        pat.span.to(arm_span.unwrap()),\n+                        pat,\n+                        ArmHasGuard(false),\n+                        Some((Some(&scrutinee_place), scrutinee.span())),\n+                    );\n+                    let post_guard_block = self.bind_pattern(\n+                        self.source_info(pat.span),\n+                        guard_candidate,\n+                        None,\n+                        &fake_borrow_temps,\n+                        scrutinee.span(),\n+                        None,\n+                        None,\n+                    );\n+                    let otherwise_post_guard_block = otherwise_candidate.pre_binding_block.unwrap();\n+                    (scrutinee_span, (post_guard_block, otherwise_post_guard_block))\n+                }\n             };\n-            let source_info = self.source_info(guard.span);\n-            let guard_end = self.source_info(tcx.sess.source_map().end_point(guard.span));\n-            let (post_guard_block, otherwise_post_guard_block) =\n-                self.test_bool(block, guard, source_info);\n+            let source_info = self.source_info(guard_span);\n+            let guard_end = self.source_info(tcx.sess.source_map().end_point(guard_span));\n             let guard_frame = self.guard_context.pop().unwrap();\n             debug!(\"Exiting guard building context with locals: {:?}\", guard_frame);\n "}, {"sha": "0f38c30818fd572b40790cbc6f83c227c2fb9146", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3d4aa6afbad980da62b20cd4583079be7d62104/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d4aa6afbad980da62b20cd4583079be7d62104/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=f3d4aa6afbad980da62b20cd4583079be7d62104", "patch": "@@ -1220,6 +1220,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         arm.guard.as_ref(),\n                         &fake_borrow_temps,\n                         scrutinee_span,\n+                        Some(arm.span),\n                         Some(arm.scope),\n                     );\n "}, {"sha": "aac1e505b653b748916f64cbc42eaacde83a2cc4", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3d4aa6afbad980da62b20cd4583079be7d62104/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d4aa6afbad980da62b20cd4583079be7d62104/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=f3d4aa6afbad980da62b20cd4583079be7d62104", "patch": "@@ -778,7 +778,7 @@ fn convert_arm<'tcx>(cx: &mut Cx<'_, 'tcx>, arm: &'tcx hir::Arm<'tcx>) -> Arm<'t\n         pattern: cx.pattern_from_hir(&arm.pat),\n         guard: arm.guard.as_ref().map(|g| match g {\n             hir::Guard::If(ref e) => Guard::If(e.to_ref()),\n-            hir::Guard::IfLet(ref pat, ref e) => Guard::IfLet(cx.pattern_from_hir(pat), e.to_ref())\n+            hir::Guard::IfLet(ref pat, ref e) => Guard::IfLet(cx.pattern_from_hir(pat), e.to_ref()),\n         }),\n         body: arm.body.to_ref(),\n         lint_level: LintLevel::Explicit(arm.hir_id),"}, {"sha": "29b7e176b0e1ad076bf76570d8500a52e2576abc", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f3d4aa6afbad980da62b20cd4583079be7d62104/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d4aa6afbad980da62b20cd4583079be7d62104/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=f3d4aa6afbad980da62b20cd4583079be7d62104", "patch": "@@ -164,10 +164,20 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n         for arm in arms {\n             // Check the arm for some things unrelated to exhaustiveness.\n             self.check_patterns(&arm.pat);\n+            if let Some(hir::Guard::IfLet(ref pat, _)) = arm.guard {\n+                self.check_patterns(pat);\n+            }\n         }\n \n         let mut cx = self.new_cx(scrut.hir_id);\n \n+        for arm in arms {\n+            if let Some(hir::Guard::IfLet(ref pat, _)) = arm.guard {\n+                let tpat = self.lower_pattern(&mut cx, pat, &mut false).0;\n+                check_if_let_guard(&mut cx, &tpat, pat.hir_id);\n+            }\n+        }\n+\n         let mut have_errors = false;\n \n         let arms: Vec<_> = arms\n@@ -360,12 +370,28 @@ fn irrefutable_let_pattern(tcx: TyCtxt<'_>, span: Span, id: HirId, source: hir::\n         let msg = match source {\n             hir::MatchSource::IfLetDesugar { .. } => \"irrefutable if-let pattern\",\n             hir::MatchSource::WhileLetDesugar => \"irrefutable while-let pattern\",\n+            hir::MatchSource::IfLetGuardDesugar => \"irrefutable if-let guard\",\n             _ => bug!(),\n         };\n         lint.build(msg).emit()\n     });\n }\n \n+fn check_if_let_guard<'p, 'tcx>(\n+    cx: &mut MatchCheckCtxt<'p, 'tcx>,\n+    pat: &'p super::Pat<'tcx>,\n+    pat_id: HirId,\n+) {\n+    let arms = [MatchArm { pat, hir_id: pat_id, has_guard: false }];\n+    let report = compute_match_usefulness(&cx, &arms, pat_id, pat.ty);\n+    report_arm_reachability(&cx, &report, hir::MatchSource::IfLetGuardDesugar);\n+\n+    if report.non_exhaustiveness_witnesses.is_empty() {\n+        // The match is exhaustive, i.e. the if let pattern is irrefutable.\n+        irrefutable_let_pattern(cx.tcx, pat.span, pat_id, hir::MatchSource::IfLetGuardDesugar)\n+    }\n+}\n+\n /// Report unreachable arms, if any.\n fn report_arm_reachability<'p, 'tcx>(\n     cx: &MatchCheckCtxt<'p, 'tcx>,\n@@ -390,6 +416,11 @@ fn report_arm_reachability<'p, 'tcx>(\n                         }\n                     }\n \n+                    hir::MatchSource::IfLetGuardDesugar => {\n+                        assert_eq!(arm_index, 0);\n+                        unreachable_pattern(cx.tcx, arm.pat.span, arm.hir_id, None);\n+                    }\n+\n                     hir::MatchSource::ForLoopDesugar | hir::MatchSource::Normal => {\n                         unreachable_pattern(cx.tcx, arm.pat.span, arm.hir_id, catchall);\n                     }"}, {"sha": "2d6bbff460d7fb6ea61eb613b91f2dfc44996957", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3d4aa6afbad980da62b20cd4583079be7d62104/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d4aa6afbad980da62b20cd4583079be7d62104/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=f3d4aa6afbad980da62b20cd4583079be7d62104", "patch": "@@ -45,6 +45,8 @@ impl NonConstExpr {\n                 return None;\n             }\n \n+            Self::Match(IfLetGuardDesugar) => bug!(\"if-let guard outside a `match` expression\"),\n+\n             // All other expressions are allowed.\n             Self::Loop(Loop | While | WhileLet)\n             | Self::Match("}, {"sha": "135f289a2b3f5c09f109c99f9279e3677a958b0c", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3d4aa6afbad980da62b20cd4583079be7d62104/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3d4aa6afbad980da62b20cd4583079be7d62104/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=f3d4aa6afbad980da62b20cd4583079be7d62104", "patch": "@@ -730,6 +730,7 @@ fn desugaring_name(des: hir::MatchSource) -> String {\n             \"MatchSource::IfLetDesugar {{ contains_else_clause: {} }}\",\n             contains_else_clause\n         ),\n+        hir::MatchSource::IfLetGuardDesugar => \"MatchSource::IfLetGuardDesugar\".to_string(),\n         hir::MatchSource::IfDesugar { contains_else_clause } => format!(\n             \"MatchSource::IfDesugar {{ contains_else_clause: {} }}\",\n             contains_else_clause"}]}