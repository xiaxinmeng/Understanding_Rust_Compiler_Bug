{"sha": "bc450b17e3bfe1c195f8f286a3228cca1f706a74", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNDUwYjE3ZTNiZmUxYzE5NWY4ZjI4NmEzMjI4Y2NhMWY3MDZhNzQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-08-07T19:56:26Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-08-13T22:27:37Z"}, "message": "core: Change the argument order on splitn and rsplitn for strs.\n\nThis makes it consistent with the same functions for slices,\nand allows the search closure to be specified last.\n\n[breaking-change]", "tree": {"sha": "a8f8ed6957c524055c8fbe2b390d98533abd2872", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8f8ed6957c524055c8fbe2b390d98533abd2872"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc450b17e3bfe1c195f8f286a3228cca1f706a74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc450b17e3bfe1c195f8f286a3228cca1f706a74", "html_url": "https://github.com/rust-lang/rust/commit/bc450b17e3bfe1c195f8f286a3228cca1f706a74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc450b17e3bfe1c195f8f286a3228cca1f706a74/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e1024f8d3721dccfac436abf99da9bf0febdc7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e1024f8d3721dccfac436abf99da9bf0febdc7f", "html_url": "https://github.com/rust-lang/rust/commit/4e1024f8d3721dccfac436abf99da9bf0febdc7f"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "f6cd217b580cd24be78747dc23cca861906771ef", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc450b17e3bfe1c195f8f286a3228cca1f706a74/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc450b17e3bfe1c195f8f286a3228cca1f706a74/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=bc450b17e3bfe1c195f8f286a3228cca1f706a74", "patch": "@@ -233,7 +233,7 @@ fn parse_exec_env(line: &str) -> Option<(String, String)> {\n     parse_name_value_directive(line, \"exec-env\").map(|nv| {\n         // nv is either FOO or FOO=BAR\n         let mut strs: Vec<String> = nv.as_slice()\n-                                      .splitn('=', 1)\n+                                      .splitn(1, '=')\n                                       .map(|s| s.to_string())\n                                       .collect();\n "}, {"sha": "4f7db7b41f38b7403ef1a496250790a34b400d26", "filename": "src/libcore/str.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bc450b17e3bfe1c195f8f286a3228cca1f706a74/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc450b17e3bfe1c195f8f286a3228cca1f706a74/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=bc450b17e3bfe1c195f8f286a3228cca1f706a74", "patch": "@@ -1147,22 +1147,22 @@ pub trait StrSlice<'a> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let v: Vec<&str> = \"Mary had a little lambda\".splitn(' ', 2).collect();\n+    /// let v: Vec<&str> = \"Mary had a little lambda\".splitn(2, ' ').collect();\n     /// assert_eq!(v, vec![\"Mary\", \"had\", \"a little lambda\"]);\n     ///\n-    /// let v: Vec<&str> = \"abc1def2ghi\".splitn(|c: char| c.is_digit(), 1).collect();\n+    /// let v: Vec<&str> = \"abc1def2ghi\".splitn(1, |c: char| c.is_digit()).collect();\n     /// assert_eq!(v, vec![\"abc\", \"def2ghi\"]);\n     ///\n-    /// let v: Vec<&str> = \"lionXXtigerXleopard\".splitn('X', 2).collect();\n+    /// let v: Vec<&str> = \"lionXXtigerXleopard\".splitn(2, 'X').collect();\n     /// assert_eq!(v, vec![\"lion\", \"\", \"tigerXleopard\"]);\n     ///\n-    /// let v: Vec<&str> = \"abcXdef\".splitn('X', 0).collect();\n+    /// let v: Vec<&str> = \"abcXdef\".splitn(0, 'X').collect();\n     /// assert_eq!(v, vec![\"abcXdef\"]);\n     ///\n-    /// let v: Vec<&str> = \"\".splitn('X', 1).collect();\n+    /// let v: Vec<&str> = \"\".splitn(1, 'X').collect();\n     /// assert_eq!(v, vec![\"\"]);\n     /// ```\n-    fn splitn<Sep: CharEq>(&self, sep: Sep, count: uint) -> CharSplitsN<'a, Sep>;\n+    fn splitn<Sep: CharEq>(&self, count: uint, sep: Sep) -> CharSplitsN<'a, Sep>;\n \n     /// An iterator over substrings of `self`, separated by characters\n     /// matched by `sep`.\n@@ -1197,16 +1197,16 @@ pub trait StrSlice<'a> {\n     /// # Example\n     ///\n     /// ```rust\n-    /// let v: Vec<&str> = \"Mary had a little lamb\".rsplitn(' ', 2).collect();\n+    /// let v: Vec<&str> = \"Mary had a little lamb\".rsplitn(2, ' ').collect();\n     /// assert_eq!(v, vec![\"lamb\", \"little\", \"Mary had a\"]);\n     ///\n-    /// let v: Vec<&str> = \"abc1def2ghi\".rsplitn(|c: char| c.is_digit(), 1).collect();\n+    /// let v: Vec<&str> = \"abc1def2ghi\".rsplitn(1, |c: char| c.is_digit()).collect();\n     /// assert_eq!(v, vec![\"ghi\", \"abc1def\"]);\n     ///\n-    /// let v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn('X', 2).collect();\n+    /// let v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(2, 'X').collect();\n     /// assert_eq!(v, vec![\"leopard\", \"tiger\", \"lionX\"]);\n     /// ```\n-    fn rsplitn<Sep: CharEq>(&self, sep: Sep, count: uint) -> CharSplitsN<'a, Sep>;\n+    fn rsplitn<Sep: CharEq>(&self, count: uint, sep: Sep) -> CharSplitsN<'a, Sep>;\n \n     /// An iterator over the start and end indices of the disjoint\n     /// matches of `sep` within `self`.\n@@ -1697,7 +1697,7 @@ impl<'a> StrSlice<'a> for &'a str {\n     }\n \n     #[inline]\n-    fn splitn<Sep: CharEq>(&self, sep: Sep, count: uint)\n+    fn splitn<Sep: CharEq>(&self, count: uint, sep: Sep)\n         -> CharSplitsN<'a, Sep> {\n         CharSplitsN {\n             iter: self.split(sep),\n@@ -1716,7 +1716,7 @@ impl<'a> StrSlice<'a> for &'a str {\n     }\n \n     #[inline]\n-    fn rsplitn<Sep: CharEq>(&self, sep: Sep, count: uint)\n+    fn rsplitn<Sep: CharEq>(&self, count: uint, sep: Sep)\n         -> CharSplitsN<'a, Sep> {\n         CharSplitsN {\n             iter: self.split(sep),"}, {"sha": "f3e4b0b21adf85ba94b9f918bd48fdacd5d3406c", "filename": "src/libnum/rational.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc450b17e3bfe1c195f8f286a3228cca1f706a74/src%2Flibnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc450b17e3bfe1c195f8f286a3228cca1f706a74/src%2Flibnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Frational.rs?ref=bc450b17e3bfe1c195f8f286a3228cca1f706a74", "patch": "@@ -341,7 +341,7 @@ impl<T: FromStr + Clone + Integer + PartialOrd>\n     FromStr for Ratio<T> {\n     /// Parses `numer/denom` or just `numer`.\n     fn from_str(s: &str) -> Option<Ratio<T>> {\n-        let mut split = s.splitn('/', 1);\n+        let mut split = s.splitn(1, '/');\n \n         let num = split.next().and_then(|n| FromStr::from_str(n));\n         let den = split.next().or(Some(\"1\")).and_then(|d| FromStr::from_str(d));\n@@ -357,7 +357,7 @@ impl<T: FromStrRadix + Clone + Integer + PartialOrd>\n     FromStrRadix for Ratio<T> {\n     /// Parses `numer/denom` where the numbers are in base `radix`.\n     fn from_str_radix(s: &str, radix: uint) -> Option<Ratio<T>> {\n-        let split: Vec<&str> = s.splitn('/', 1).collect();\n+        let split: Vec<&str> = s.splitn(1, '/').collect();\n         if split.len() < 2 {\n             None\n         } else {"}, {"sha": "13b094a2cf2e6475bfacc54c19ed7a979a1e86d4", "filename": "src/libregex/parse.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bc450b17e3bfe1c195f8f286a3228cca1f706a74/src%2Flibregex%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc450b17e3bfe1c195f8f286a3228cca1f706a74/src%2Flibregex%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fparse.rs?ref=bc450b17e3bfe1c195f8f286a3228cca1f706a74", "patch": "@@ -13,6 +13,7 @@ use std::cmp;\n use std::fmt;\n use std::iter;\n use std::num;\n+use std::slice;\n \n /// Static data containing Unicode ranges for general categories and scripts.\n use unicode::regex::{UNICODE_CLASSES, PERLD, PERLS, PERLW};\n@@ -518,7 +519,7 @@ impl<'a> Parser<'a> {\n             min = try!(self.parse_uint(inner.as_slice()));\n             max = Some(min);\n         } else {\n-            let pieces: Vec<&str> = inner.as_slice().splitn(',', 1).collect();\n+            let pieces: Vec<&str> = inner.as_slice().splitn(1, ',').collect();\n             let (smin, smax) = (pieces[0], pieces[1]);\n             if smin.len() == 0 {\n                 return self.err(\"Max repetitions cannot be specified \\\n@@ -1017,9 +1018,9 @@ fn is_valid_cap(c: char) -> bool {\n }\n \n fn find_class(classes: NamedClasses, name: &str) -> Option<Vec<(char, char)>> {\n-    match classes.bsearch(|&(s, _)| s.cmp(&name)) {\n-        Some(i) => Some(Vec::from_slice(classes[i].val1())),\n-        None => None,\n+    match classes.binary_search(|&(s, _)| s.cmp(&name)) {\n+        slice::Found(i) => Some(Vec::from_slice(classes[i].val1())),\n+        slice::NotFound(_) => None,\n     }\n }\n "}, {"sha": "507a7641f2201bf100982cf9cb3b8e2e63527679", "filename": "src/libregex/vm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc450b17e3bfe1c195f8f286a3228cca1f706a74/src%2Flibregex%2Fvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc450b17e3bfe1c195f8f286a3228cca1f706a74/src%2Flibregex%2Fvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fvm.rs?ref=bc450b17e3bfe1c195f8f286a3228cca1f706a74", "patch": "@@ -35,7 +35,6 @@\n \n use std::cmp;\n use std::mem;\n-use std::slice;\n use std::slice::MutableSlice;\n use compile::{\n     Program,"}, {"sha": "826579b62fcba23a1f08b0da0a43a5325dc67bed", "filename": "src/librustc/driver/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc450b17e3bfe1c195f8f286a3228cca1f706a74/src%2Flibrustc%2Fdriver%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc450b17e3bfe1c195f8f286a3228cca1f706a74/src%2Flibrustc%2Fdriver%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fconfig.rs?ref=bc450b17e3bfe1c195f8f286a3228cca1f706a74", "patch": "@@ -353,7 +353,7 @@ pub fn build_codegen_options(matches: &getopts::Matches) -> CodegenOptions\n {\n     let mut cg = basic_codegen_options();\n     for option in matches.opt_strs(\"C\").move_iter() {\n-        let mut iter = option.as_slice().splitn('=', 1);\n+        let mut iter = option.as_slice().splitn(1, '=');\n         let key = iter.next().unwrap();\n         let value = iter.next();\n         let option_to_lookup = key.replace(\"-\", \"_\");\n@@ -750,7 +750,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     let mut externs = HashMap::new();\n     for arg in matches.opt_strs(\"extern\").iter() {\n-        let mut parts = arg.as_slice().splitn('=', 1);\n+        let mut parts = arg.as_slice().splitn(1, '=');\n         let name = match parts.next() {\n             Some(s) => s,\n             None => early_error(\"--extern value must not be empty\"),"}, {"sha": "dc600e0da3ec06ae26253c8ada1eee7ff7f2b918", "filename": "src/librustc/driver/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc450b17e3bfe1c195f8f286a3228cca1f706a74/src%2Flibrustc%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc450b17e3bfe1c195f8f286a3228cca1f706a74/src%2Flibrustc%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fmod.rs?ref=bc450b17e3bfe1c195f8f286a3228cca1f706a74", "patch": "@@ -356,7 +356,7 @@ pub enum PpMode {\n }\n \n fn parse_pretty(sess: &Session, name: &str) -> (PpMode, Option<driver::UserIdentifiedItem>) {\n-    let mut split = name.splitn('=', 1);\n+    let mut split = name.splitn(1, '=');\n     let first = split.next().unwrap();\n     let opt_second = split.next();\n     let first = match first {"}, {"sha": "fb1666bef0d2f467d8757c6b8d6bf244a0e7f596", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc450b17e3bfe1c195f8f286a3228cca1f706a74/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc450b17e3bfe1c195f8f286a3228cca1f706a74/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=bc450b17e3bfe1c195f8f286a3228cca1f706a74", "patch": "@@ -328,7 +328,7 @@ fn acquire_input(input: &str,\n fn parse_externs(matches: &getopts::Matches) -> Result<core::Externs, String> {\n     let mut externs = HashMap::new();\n     for arg in matches.opt_strs(\"extern\").iter() {\n-        let mut parts = arg.as_slice().splitn('=', 1);\n+        let mut parts = arg.as_slice().splitn(1, '=');\n         let name = match parts.next() {\n             Some(s) => s,\n             None => {"}, {"sha": "67605360a48cb665d1b4621aca5650012f4b174f", "filename": "src/libsyntax/crateid.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc450b17e3bfe1c195f8f286a3228cca1f706a74/src%2Flibsyntax%2Fcrateid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc450b17e3bfe1c195f8f286a3228cca1f706a74/src%2Flibsyntax%2Fcrateid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcrateid.rs?ref=bc450b17e3bfe1c195f8f286a3228cca1f706a74", "patch": "@@ -51,7 +51,7 @@ impl fmt::Show for CrateId {\n \n impl FromStr for CrateId {\n     fn from_str(s: &str) -> Option<CrateId> {\n-        let pieces: Vec<&str> = s.splitn('#', 1).collect();\n+        let pieces: Vec<&str> = s.splitn(1, '#').collect();\n         let path = pieces.get(0).to_string();\n \n         if path.as_slice().starts_with(\"/\") || path.as_slice().ends_with(\"/\") ||\n@@ -60,15 +60,15 @@ impl FromStr for CrateId {\n         }\n \n         let path_pieces: Vec<&str> = path.as_slice()\n-                                         .rsplitn('/', 1)\n+                                         .rsplitn(1, '/')\n                                          .collect();\n         let inferred_name = *path_pieces.get(0);\n \n         let (name, version) = if pieces.len() == 1 {\n             (inferred_name.to_string(), None)\n         } else {\n             let hash_pieces: Vec<&str> = pieces.get(1)\n-                                               .splitn(':', 1)\n+                                               .splitn(1, ':')\n                                                .collect();\n             let (hash_name, hash_version) = if hash_pieces.len() == 1 {\n                 (\"\", *hash_pieces.get(0))"}, {"sha": "9ced6cb62af00f0c310167f6720f498782f9db30", "filename": "src/liburl/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc450b17e3bfe1c195f8f286a3228cca1f706a74/src%2Fliburl%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc450b17e3bfe1c195f8f286a3228cca1f706a74/src%2Fliburl%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliburl%2Flib.rs?ref=bc450b17e3bfe1c195f8f286a3228cca1f706a74", "patch": "@@ -396,7 +396,7 @@ pub fn decode_form_urlencoded(s: &[u8])\n }\n \n fn split_char_first(s: &str, c: char) -> (&str, &str) {\n-    let mut iter = s.splitn(c, 1);\n+    let mut iter = s.splitn(1, c);\n \n     match (iter.next(), iter.next()) {\n         (Some(a), Some(b)) => (a, b),"}]}