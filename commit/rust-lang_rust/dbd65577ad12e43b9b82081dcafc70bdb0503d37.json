{"sha": "dbd65577ad12e43b9b82081dcafc70bdb0503d37", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZDY1NTc3YWQxMmU0M2I5YjgyMDgxZGNhZmM3MGJkYjA1MDNkMzc=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-24T00:51:49Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-24T00:51:49Z"}, "message": "fix core-map.rs benchmark", "tree": {"sha": "bc02cfce4c447a68201946ddbb3b1e45bafc106f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc02cfce4c447a68201946ddbb3b1e45bafc106f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbd65577ad12e43b9b82081dcafc70bdb0503d37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbd65577ad12e43b9b82081dcafc70bdb0503d37", "html_url": "https://github.com/rust-lang/rust/commit/dbd65577ad12e43b9b82081dcafc70bdb0503d37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbd65577ad12e43b9b82081dcafc70bdb0503d37/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f0fa143bc06002d06064795cb92f8e9a4fec007", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f0fa143bc06002d06064795cb92f8e9a4fec007", "html_url": "https://github.com/rust-lang/rust/commit/7f0fa143bc06002d06064795cb92f8e9a4fec007"}], "stats": {"total": 208, "additions": 175, "deletions": 33}, "files": [{"sha": "d401b594c4c069d7b2cff6b5b5de8f383cae7eea", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 175, "deletions": 33, "changes": 208, "blob_url": "https://github.com/rust-lang/rust/blob/dbd65577ad12e43b9b82081dcafc70bdb0503d37/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd65577ad12e43b9b82081dcafc70bdb0503d37/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=dbd65577ad12e43b9b82081dcafc70bdb0503d37", "patch": "@@ -8,15 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-/*\n-\n-\n-\n-*/\n-\n extern mod std;\n use std::map;\n-use core::mutable::Mut;\n+use std::treemap::TreeMap;\n use core::hashmap::linear::*;\n use core::io::WriterUtil;\n \n@@ -38,13 +32,10 @@ fn timed(result: &mut float,\n     *result = (end - start);\n }\n \n-fn int_benchmarks<M: map::Map<uint, uint>>(make_map: fn() -> M,\n-                                           rng: @rand::Rng,\n-                                           num_keys: uint,\n-                                           results: &mut Results) {\n+fn old_int_benchmarks(rng: @rand::Rng, num_keys: uint, results: &mut Results) {\n \n     {\n-        let map = make_map();\n+        let map = map::HashMap();\n         do timed(&mut results.sequential_ints) {\n             for uint::range(0, num_keys) |i| {\n                 map.insert(i, i+1);\n@@ -57,7 +48,7 @@ fn int_benchmarks<M: map::Map<uint, uint>>(make_map: fn() -> M,\n     }\n \n     {\n-        let map = make_map();\n+        let map = map::HashMap();\n         do timed(&mut results.random_ints) {\n             for uint::range(0, num_keys) |i| {\n                 map.insert(rng.next() as uint, i);\n@@ -66,7 +57,7 @@ fn int_benchmarks<M: map::Map<uint, uint>>(make_map: fn() -> M,\n     }\n \n     {\n-        let map = make_map();\n+        let map = map::HashMap();\n         for uint::range(0, num_keys) |i| {\n             map.insert(i, i);;\n         }\n@@ -79,12 +70,9 @@ fn int_benchmarks<M: map::Map<uint, uint>>(make_map: fn() -> M,\n     }\n }\n \n-fn str_benchmarks<M: map::Map<~str, uint>>(make_map: fn() -> M,\n-                                           rng: @rand::Rng,\n-                                           num_keys: uint,\n-                                           results: &mut Results) {\n+fn old_str_benchmarks(rng: @rand::Rng, num_keys: uint, results: &mut Results) {\n     {\n-        let map = make_map();\n+        let map = map::HashMap();\n         do timed(&mut results.sequential_strings) {\n             for uint::range(0, num_keys) |i| {\n                 let s = uint::to_str(i, 10);\n@@ -99,7 +87,7 @@ fn str_benchmarks<M: map::Map<~str, uint>>(make_map: fn() -> M,\n     }\n \n     {\n-        let map = make_map();\n+        let map = map::HashMap();\n         do timed(&mut results.random_strings) {\n             for uint::range(0, num_keys) |i| {\n                 let s = uint::to_str(rng.next() as uint, 10);\n@@ -109,7 +97,7 @@ fn str_benchmarks<M: map::Map<~str, uint>>(make_map: fn() -> M,\n     }\n \n     {\n-        let map = make_map();\n+        let map = map::HashMap();\n         for uint::range(0, num_keys) |i| {\n             map.insert(uint::to_str(i, 10), i);\n         }\n@@ -121,6 +109,158 @@ fn str_benchmarks<M: map::Map<~str, uint>>(make_map: fn() -> M,\n     }\n }\n \n+fn linear_int_benchmarks(rng: @rand::Rng, num_keys: uint, results: &mut Results) {\n+    {\n+        let mut map = LinearMap::new();\n+        do timed(&mut results.sequential_ints) {\n+            for uint::range(0, num_keys) |i| {\n+                map.insert(i, i+1);\n+            }\n+\n+            for uint::range(0, num_keys) |i| {\n+                assert map.find(&i).unwrap() == &(i+1);\n+            }\n+        }\n+    }\n+\n+    {\n+        let mut map = LinearMap::new();\n+        do timed(&mut results.random_ints) {\n+            for uint::range(0, num_keys) |i| {\n+                map.insert(rng.next() as uint, i);\n+            }\n+        }\n+    }\n+\n+    {\n+        let mut map = LinearMap::new();\n+        for uint::range(0, num_keys) |i| {\n+            map.insert(i, i);;\n+        }\n+\n+        do timed(&mut results.delete_ints) {\n+            for uint::range(0, num_keys) |i| {\n+                assert map.remove(&i);\n+            }\n+        }\n+    }\n+}\n+\n+fn linear_str_benchmarks(rng: @rand::Rng, num_keys: uint, results: &mut Results) {\n+    {\n+        let mut map = LinearMap::new();\n+        do timed(&mut results.sequential_strings) {\n+            for uint::range(0, num_keys) |i| {\n+                let s = uint::to_str(i, 10);\n+                map.insert(s, i);\n+            }\n+\n+            for uint::range(0, num_keys) |i| {\n+                let s = uint::to_str(i, 10);\n+                assert map.find(&s).unwrap() == &i;\n+            }\n+        }\n+    }\n+\n+    {\n+        let mut map = LinearMap::new();\n+        do timed(&mut results.random_strings) {\n+            for uint::range(0, num_keys) |i| {\n+                let s = uint::to_str(rng.next() as uint, 10);\n+                map.insert(s, i);\n+            }\n+        }\n+    }\n+\n+    {\n+        let mut map = LinearMap::new();\n+        for uint::range(0, num_keys) |i| {\n+            map.insert(uint::to_str(i, 10), i);\n+        }\n+        do timed(&mut results.delete_strings) {\n+            for uint::range(0, num_keys) |i| {\n+                assert map.remove(&uint::to_str(i, 10));\n+            }\n+        }\n+    }\n+}\n+\n+fn tree_int_benchmarks(rng: @rand::Rng, num_keys: uint, results: &mut Results) {\n+    {\n+        let mut map = TreeMap::new();\n+        do timed(&mut results.sequential_ints) {\n+            for uint::range(0, num_keys) |i| {\n+                map.insert(i, i+1);\n+            }\n+\n+            for uint::range(0, num_keys) |i| {\n+                assert map.find(&i).unwrap() == &(i+1);\n+            }\n+        }\n+    }\n+\n+    {\n+        let mut map = TreeMap::new();\n+        do timed(&mut results.random_ints) {\n+            for uint::range(0, num_keys) |i| {\n+                map.insert(rng.next() as uint, i);\n+            }\n+        }\n+    }\n+\n+    {\n+        let mut map = TreeMap::new();\n+        for uint::range(0, num_keys) |i| {\n+            map.insert(i, i);;\n+        }\n+\n+        do timed(&mut results.delete_ints) {\n+            for uint::range(0, num_keys) |i| {\n+                assert map.remove(&i);\n+            }\n+        }\n+    }\n+}\n+\n+fn tree_str_benchmarks(rng: @rand::Rng, num_keys: uint, results: &mut Results) {\n+    {\n+        let mut map = TreeMap::new();\n+        do timed(&mut results.sequential_strings) {\n+            for uint::range(0, num_keys) |i| {\n+                let s = uint::to_str(i, 10);\n+                map.insert(s, i);\n+            }\n+\n+            for uint::range(0, num_keys) |i| {\n+                let s = uint::to_str(i, 10);\n+                assert map.find(&s).unwrap() == &i;\n+            }\n+        }\n+    }\n+\n+    {\n+        let mut map = TreeMap::new();\n+        do timed(&mut results.random_strings) {\n+            for uint::range(0, num_keys) |i| {\n+                let s = uint::to_str(rng.next() as uint, 10);\n+                map.insert(s, i);\n+            }\n+        }\n+    }\n+\n+    {\n+        let mut map = TreeMap::new();\n+        for uint::range(0, num_keys) |i| {\n+            map.insert(uint::to_str(i, 10), i);\n+        }\n+        do timed(&mut results.delete_strings) {\n+            for uint::range(0, num_keys) |i| {\n+                assert map.remove(&uint::to_str(i, 10));\n+            }\n+        }\n+    }\n+}\n+\n fn write_header(header: &str) {\n     io::stdout().write_str(header);\n     io::stdout().write_str(\"\\n\");\n@@ -167,22 +307,24 @@ fn main() {\n     {\n         let rng = rand::seeded_rng(&seed);\n         let mut results = empty_results();\n-        int_benchmarks::<map::HashMap<uint, uint>>(\n-            map::HashMap, rng, num_keys, &mut results);\n-        str_benchmarks::<map::HashMap<~str, uint>>(\n-            map::HashMap, rng, num_keys, &mut results);\n-        write_results(\"libstd::map::hashmap\", &results);\n+        old_int_benchmarks(rng, num_keys, &mut results);\n+        old_str_benchmarks(rng, num_keys, &mut results);\n+        write_results(\"std::map::HashMap\", &results);\n+    }\n+\n+    {\n+        let rng = rand::seeded_rng(&seed);\n+        let mut results = empty_results();\n+        linear_int_benchmarks(rng, num_keys, &mut results);\n+        linear_str_benchmarks(rng, num_keys, &mut results);\n+        write_results(\"core::hashmap::linear::LinearMap\", &results);\n     }\n \n     {\n         let rng = rand::seeded_rng(&seed);\n         let mut results = empty_results();\n-        int_benchmarks::<@Mut<LinearMap<uint, uint>>>(\n-            || @Mut(LinearMap::new()),\n-            rng, num_keys, &mut results);\n-        str_benchmarks::<@Mut<LinearMap<~str, uint>>>(\n-            || @Mut(LinearMap::new()),\n-            rng, num_keys, &mut results);\n-        write_results(\"libstd::map::hashmap\", &results);\n+        tree_int_benchmarks(rng, num_keys, &mut results);\n+        tree_str_benchmarks(rng, num_keys, &mut results);\n+        write_results(\"std::treemap::TreeMap\", &results);\n     }\n }"}]}