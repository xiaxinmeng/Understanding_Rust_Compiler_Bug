{"sha": "22c0f628df2353e121650b7618dd4bd71535c2bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyYzBmNjI4ZGYyMzUzZTEyMTY1MGI3NjE4ZGQ0YmQ3MTUzNWMyYmY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-11-15T09:36:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-15T09:36:20Z"}, "message": "Rollup merge of #66013 - nnethercote:avoid-hashing-twice-in-get_query, r=Zoxc\n\nAvoid hashing the key twice in `get_query()`.\n\nFor a single-threaded parallel compiler, this reduces instruction counts\nacross several benchmarks, by up to 2.8%.\n\nThe commit also adds documentation about `Sharded`'s use of `FxHasher`.\n\nr? @Zoxc", "tree": {"sha": "a25a20bdd2fe1a8ab7d79bf64d84d01a22cf8d36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a25a20bdd2fe1a8ab7d79bf64d84d01a22cf8d36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22c0f628df2353e121650b7618dd4bd71535c2bf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdznGUCRBK7hj4Ov3rIwAAdHIIAEJ0lSBoDbwY3J2hqvfjEHv8\nwSnFYQYEkDVGGCHi3BGe1c6xL8iG69zKQPEugC4NtdXTFNjZVtcrGQYkADev9348\nfcY2NdfeFooT/H7D1CxggwUIX1FMmN4bJBdHW8qhS9T81DvNqWBYlVR5BDkgYv3H\nRcwRisQJ4KsDJvxoA+OySXurXh/UbaV6XQuih3xO92toODTK7x7yXqKfdsNL931+\neXvLxZ4SfoQWeIvt4O6VozWEvuXi3ETZx55x9kHlyIgdlMDGxBp8bhB7hVdGucQw\nE4N6rYTHRALd/NRRnDU89A8CdHbyLle5oxU0P2HZloqpkS3mCgGrJvqHF++YLVc=\n=Tdhy\n-----END PGP SIGNATURE-----\n", "payload": "tree a25a20bdd2fe1a8ab7d79bf64d84d01a22cf8d36\nparent 00c0c31554bec14a05f38e15fa698bcb839e998c\nparent 1aceaaa969d85195966e453590cbfc68771bf904\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1573810580 +0900\ncommitter GitHub <noreply@github.com> 1573810580 +0900\n\nRollup merge of #66013 - nnethercote:avoid-hashing-twice-in-get_query, r=Zoxc\n\nAvoid hashing the key twice in `get_query()`.\n\nFor a single-threaded parallel compiler, this reduces instruction counts\nacross several benchmarks, by up to 2.8%.\n\nThe commit also adds documentation about `Sharded`'s use of `FxHasher`.\n\nr? @Zoxc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22c0f628df2353e121650b7618dd4bd71535c2bf", "html_url": "https://github.com/rust-lang/rust/commit/22c0f628df2353e121650b7618dd4bd71535c2bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22c0f628df2353e121650b7618dd4bd71535c2bf/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00c0c31554bec14a05f38e15fa698bcb839e998c", "url": "https://api.github.com/repos/rust-lang/rust/commits/00c0c31554bec14a05f38e15fa698bcb839e998c", "html_url": "https://github.com/rust-lang/rust/commit/00c0c31554bec14a05f38e15fa698bcb839e998c"}, {"sha": "1aceaaa969d85195966e453590cbfc68771bf904", "url": "https://api.github.com/repos/rust-lang/rust/commits/1aceaaa969d85195966e453590cbfc68771bf904", "html_url": "https://github.com/rust-lang/rust/commit/1aceaaa969d85195966e453590cbfc68771bf904"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "38877dee71106fea5d63515805ffc28337599cfd", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22c0f628df2353e121650b7618dd4bd71535c2bf/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c0f628df2353e121650b7618dd4bd71535c2bf/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=22c0f628df2353e121650b7618dd4bd71535c2bf", "patch": "@@ -59,6 +59,7 @@\n #![feature(log_syntax)]\n #![feature(associated_type_bounds)]\n #![feature(rustc_attrs)]\n+#![feature(hash_raw_entry)]\n \n #![recursion_limit=\"512\"]\n "}, {"sha": "52a784d3fc0be105dd428eec5881e37c451501f4", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/22c0f628df2353e121650b7618dd4bd71535c2bf/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c0f628df2353e121650b7618dd4bd71535c2bf/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=22c0f628df2353e121650b7618dd4bd71535c2bf", "patch": "@@ -14,12 +14,13 @@ use errors::Level;\n use errors::Diagnostic;\n use errors::FatalError;\n use errors::Handler;\n-use rustc_data_structures::fx::{FxHashMap};\n+use rustc_data_structures::fx::{FxHasher, FxHashMap};\n use rustc_data_structures::sync::{Lrc, Lock};\n use rustc_data_structures::sharded::Sharded;\n use rustc_data_structures::thin_vec::ThinVec;\n #[cfg(not(parallel_compiler))]\n use rustc_data_structures::cold_path;\n+use std::hash::{Hash, Hasher};\n use std::mem;\n use std::ptr;\n use std::collections::hash_map::Entry;\n@@ -82,8 +83,17 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n     pub(super) fn try_get(tcx: TyCtxt<'tcx>, span: Span, key: &Q::Key) -> TryGetJob<'a, 'tcx, Q> {\n         let cache = Q::query_cache(tcx);\n         loop {\n-            let mut lock = cache.get_shard_by_value(key).lock();\n-            if let Some(value) = lock.results.get(key) {\n+            // We compute the key's hash once and then use it for both the\n+            // shard lookup and the hashmap lookup. This relies on the fact\n+            // that both of them use `FxHasher`.\n+            let mut state = FxHasher::default();\n+            key.hash(&mut state);\n+            let key_hash = state.finish();\n+\n+            let mut lock = cache.get_shard_by_hash(key_hash).lock();\n+            if let Some((_, value)) =\n+                lock.results.raw_entry().from_key_hashed_nocheck(key_hash, key)\n+            {\n                 tcx.prof.query_cache_hit(Q::NAME);\n                 let result = (value.value.clone(), value.index);\n                 #[cfg(debug_assertions)]"}, {"sha": "a28a5e0f0415a575a8c32683f36153c7674b3b9f", "filename": "src/librustc_data_structures/sharded.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22c0f628df2353e121650b7618dd4bd71535c2bf/src%2Flibrustc_data_structures%2Fsharded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c0f628df2353e121650b7618dd4bd71535c2bf/src%2Flibrustc_data_structures%2Fsharded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsharded.rs?ref=22c0f628df2353e121650b7618dd4bd71535c2bf", "patch": "@@ -60,6 +60,7 @@ impl<T> Sharded<T> {\n         }\n     }\n \n+    /// The shard is selected by hashing `val` with `FxHasher`.\n     #[inline]\n     pub fn get_shard_by_value<K: Hash + ?Sized>(&self, val: &K) -> &Lock<T> {\n         if SHARDS == 1 {\n@@ -69,6 +70,11 @@ impl<T> Sharded<T> {\n         }\n     }\n \n+    /// Get a shard with a pre-computed hash value. If `get_shard_by_value` is\n+    /// ever used in combination with `get_shard_by_hash` on a single `Sharded`\n+    /// instance, then `hash` must be computed with `FxHasher`. Otherwise,\n+    /// `hash` can be computed with any hasher, so long as that hasher is used\n+    /// consistently for each `Sharded` instance.\n     #[inline]\n     pub fn get_shard_by_hash(&self, hash: u64) -> &Lock<T> {\n         let hash_len = mem::size_of::<usize>();"}]}