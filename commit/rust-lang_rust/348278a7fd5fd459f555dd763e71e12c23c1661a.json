{"sha": "348278a7fd5fd459f555dd763e71e12c23c1661a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ODI3OGE3ZmQ1ZmQ0NTlmNTU1ZGQ3NjNlNzFlMTJjMjNjMTY2MWE=", "commit": {"author": {"name": "Michael Bradshaw", "email": "mjbshaw@google.com", "date": "2020-02-08T05:53:22Z"}, "committer": {"name": "Michael Bradshaw", "email": "mjbshaw@google.com", "date": "2020-02-08T05:53:22Z"}, "message": "Stabilize Once::is_completed", "tree": {"sha": "0911656aa1da86bce9846c14ac180fca6e691d3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0911656aa1da86bce9846c14ac180fca6e691d3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/348278a7fd5fd459f555dd763e71e12c23c1661a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/348278a7fd5fd459f555dd763e71e12c23c1661a", "html_url": "https://github.com/rust-lang/rust/commit/348278a7fd5fd459f555dd763e71e12c23c1661a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/348278a7fd5fd459f555dd763e71e12c23c1661a/comments", "author": {"login": "mjbshaw", "id": 1204698, "node_id": "MDQ6VXNlcjEyMDQ2OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1204698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjbshaw", "html_url": "https://github.com/mjbshaw", "followers_url": "https://api.github.com/users/mjbshaw/followers", "following_url": "https://api.github.com/users/mjbshaw/following{/other_user}", "gists_url": "https://api.github.com/users/mjbshaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjbshaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjbshaw/subscriptions", "organizations_url": "https://api.github.com/users/mjbshaw/orgs", "repos_url": "https://api.github.com/users/mjbshaw/repos", "events_url": "https://api.github.com/users/mjbshaw/events{/privacy}", "received_events_url": "https://api.github.com/users/mjbshaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mjbshaw", "id": 1204698, "node_id": "MDQ6VXNlcjEyMDQ2OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1204698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjbshaw", "html_url": "https://github.com/mjbshaw", "followers_url": "https://api.github.com/users/mjbshaw/followers", "following_url": "https://api.github.com/users/mjbshaw/following{/other_user}", "gists_url": "https://api.github.com/users/mjbshaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjbshaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjbshaw/subscriptions", "organizations_url": "https://api.github.com/users/mjbshaw/orgs", "repos_url": "https://api.github.com/users/mjbshaw/repos", "events_url": "https://api.github.com/users/mjbshaw/events{/privacy}", "received_events_url": "https://api.github.com/users/mjbshaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8498c5f5b02dbb4ed58a1eb4901b0b733342c35f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8498c5f5b02dbb4ed58a1eb4901b0b733342c35f", "html_url": "https://github.com/rust-lang/rust/commit/8498c5f5b02dbb4ed58a1eb4901b0b733342c35f"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "b99b4d8d9fdf012bb15caa6138e836176113a543", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/348278a7fd5fd459f555dd763e71e12c23c1661a/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/348278a7fd5fd459f555dd763e71e12c23c1661a/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=348278a7fd5fd459f555dd763e71e12c23c1661a", "patch": "@@ -331,14 +331,14 @@ impl Once {\n     ///   * `call_once` was called, but has not yet completed,\n     ///   * the `Once` instance is poisoned\n     ///\n-    /// It is also possible that immediately after `is_completed`\n-    /// returns false, some other thread finishes executing\n-    /// `call_once`.\n+    /// This function returning `false` does not mean that `Once` has not been\n+    /// executed. For example, it may have been executed in the time between\n+    /// when `is_completed` starts executing and when it returns, in which case\n+    /// the `false` return value would be stale (but still permissible).\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(once_is_completed)]\n     /// use std::sync::Once;\n     ///\n     /// static INIT: Once = Once::new();\n@@ -351,7 +351,6 @@ impl Once {\n     /// ```\n     ///\n     /// ```\n-    /// #![feature(once_is_completed)]\n     /// use std::sync::Once;\n     /// use std::thread;\n     ///\n@@ -364,7 +363,7 @@ impl Once {\n     /// assert!(handle.join().is_err());\n     /// assert_eq!(INIT.is_completed(), false);\n     /// ```\n-    #[unstable(feature = \"once_is_completed\", issue = \"54890\")]\n+    #[stable(feature = \"once_is_completed\", since = \"1.44.0\")]\n     #[inline]\n     pub fn is_completed(&self) -> bool {\n         // An `Acquire` load is enough because that makes all the initialization"}]}