{"sha": "0f193d1a62c128ae94e1f21d7c1212d7c9e95b7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMTkzZDFhNjJjMTI4YWU5NGUxZjIxZDdjMTIxMmQ3YzllOTViN2Q=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-19T19:14:05Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-19T19:14:05Z"}, "message": "Small cleanups in assert!() and panic_fmt lint.\n\n(From the PR feedback.)\n\nCo-authored-by: Esteban K\u00fcber <esteban@kuber.com.ar>", "tree": {"sha": "23763844bd8e1688ef0e5e4ed22275765ce70ce8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23763844bd8e1688ef0e5e4ed22275765ce70ce8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f193d1a62c128ae94e1f21d7c1212d7c9e95b7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f193d1a62c128ae94e1f21d7c1212d7c9e95b7d", "html_url": "https://github.com/rust-lang/rust/commit/0f193d1a62c128ae94e1f21d7c1212d7c9e95b7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f193d1a62c128ae94e1f21d7c1212d7c9e95b7d/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff8df0bbe38d8b1216661c6544de4187e41eb45b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff8df0bbe38d8b1216661c6544de4187e41eb45b", "html_url": "https://github.com/rust-lang/rust/commit/ff8df0bbe38d8b1216661c6544de4187e41eb45b"}], "stats": {"total": 98, "additions": 48, "deletions": 50}, "files": [{"sha": "bb6d3f6a0076cb54918c608ae35685d5ec571ab1", "filename": "compiler/rustc_builtin_macros/src/assert.rs", "status": "modified", "additions": 29, "deletions": 31, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/0f193d1a62c128ae94e1f21d7c1212d7c9e95b7d/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f193d1a62c128ae94e1f21d7c1212d7c9e95b7d/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs?ref=0f193d1a62c128ae94e1f21d7c1212d7c9e95b7d", "patch": "@@ -27,37 +27,35 @@ pub fn expand_assert<'cx>(\n     // context to pick up whichever is currently in scope.\n     let sp = cx.with_call_site_ctxt(sp);\n \n-    let panic_call = {\n-        if let Some(tokens) = custom_message {\n-            // Pass the custom message to panic!().\n-            cx.expr(\n-                sp,\n-                ExprKind::MacCall(MacCall {\n-                    path: Path::from_ident(Ident::new(sym::panic, sp)),\n-                    args: P(MacArgs::Delimited(\n-                        DelimSpan::from_single(sp),\n-                        MacDelimiter::Parenthesis,\n-                        tokens,\n-                    )),\n-                    prior_type_ascription: None,\n-                }),\n-            )\n-        } else {\n-            // Pass our own message directly to $crate::panicking::panic(),\n-            // because it might contain `{` and `}` that should always be\n-            // passed literally.\n-            cx.expr_call_global(\n-                sp,\n-                cx.std_path(&[sym::panicking, sym::panic]),\n-                vec![cx.expr_str(\n-                    DUMMY_SP,\n-                    Symbol::intern(&format!(\n-                        \"assertion failed: {}\",\n-                        pprust::expr_to_string(&cond_expr).escape_debug()\n-                    )),\n-                )],\n-            )\n-        }\n+    let panic_call = if let Some(tokens) = custom_message {\n+        // Pass the custom message to panic!().\n+        cx.expr(\n+            sp,\n+            ExprKind::MacCall(MacCall {\n+                path: Path::from_ident(Ident::new(sym::panic, sp)),\n+                args: P(MacArgs::Delimited(\n+                    DelimSpan::from_single(sp),\n+                    MacDelimiter::Parenthesis,\n+                    tokens,\n+                )),\n+                prior_type_ascription: None,\n+            }),\n+        )\n+    } else {\n+        // Pass our own message directly to $crate::panicking::panic(),\n+        // because it might contain `{` and `}` that should always be\n+        // passed literally.\n+        cx.expr_call_global(\n+            sp,\n+            cx.std_path(&[sym::panicking, sym::panic]),\n+            vec![cx.expr_str(\n+                DUMMY_SP,\n+                Symbol::intern(&format!(\n+                    \"assertion failed: {}\",\n+                    pprust::expr_to_string(&cond_expr).escape_debug()\n+                )),\n+            )],\n+        )\n     };\n     let if_expr =\n         cx.expr_if(sp, cx.expr(sp, ExprKind::Unary(UnOp::Not, cond_expr)), panic_call, None);"}, {"sha": "288e1d61bbf4945f84e4bfd03984202898d493a2", "filename": "compiler/rustc_lint/src/panic_fmt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0f193d1a62c128ae94e1f21d7c1212d7c9e95b7d/compiler%2Frustc_lint%2Fsrc%2Fpanic_fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f193d1a62c128ae94e1f21d7c1212d7c9e95b7d/compiler%2Frustc_lint%2Fsrc%2Fpanic_fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpanic_fmt.rs?ref=0f193d1a62c128ae94e1f21d7c1212d7c9e95b7d", "patch": "@@ -72,8 +72,8 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n                     }\n                     if looks_like_placeholder {\n                         cx.struct_span_lint(PANIC_FMT, arg.span.source_callsite(), |lint| {\n-                            let mut l = lint.build(\"Panic message contains an unused formatting placeholder\");\n-                            l.note(\"This message is not used as a format string when given without arguments, but will be in a future Rust version\");\n+                            let mut l = lint.build(\"panic message contains an unused formatting placeholder\");\n+                            l.note(\"this message is not used as a format string when given without arguments, but will be in a future Rust version\");\n                             if expn.call_site.contains(arg.span) {\n                                 l.span_suggestion(\n                                     arg.span.shrink_to_hi(),\n@@ -92,8 +92,8 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n                         });\n                     } else {\n                         cx.struct_span_lint(PANIC_FMT, expn.call_site, |lint| {\n-                            let mut l = lint.build(\"Panic message contains a brace\");\n-                            l.note(\"This message is not used as a format string, but will be in a future Rust version\");\n+                            let mut l = lint.build(\"panic message contains a brace\");\n+                            l.note(\"this message is not used as a format string, but will be in a future Rust version\");\n                             if expn.call_site.contains(arg.span) {\n                                 l.span_suggestion(\n                                     arg.span.shrink_to_lo(),"}, {"sha": "6ab5fafee887c291e06d6f00298aa03dae9196b7", "filename": "src/test/ui/panic-brace.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0f193d1a62c128ae94e1f21d7c1212d7c9e95b7d/src%2Ftest%2Fui%2Fpanic-brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f193d1a62c128ae94e1f21d7c1212d7c9e95b7d/src%2Ftest%2Fui%2Fpanic-brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-brace.rs?ref=0f193d1a62c128ae94e1f21d7c1212d7c9e95b7d", "patch": "@@ -2,9 +2,9 @@\n \n #[allow(unreachable_code)]\n fn main() {\n-    panic!(\"here's a brace: {\"); //~ WARN Panic message contains a brace\n-    std::panic!(\"another one: }\"); //~ WARN Panic message contains a brace\n-    core::panic!(\"Hello {}\"); //~ WARN Panic message contains an unused formatting placeholder\n-    assert!(false, \"{:03x} bla\"); //~ WARN Panic message contains an unused formatting placeholder\n-    debug_assert!(false, \"{{}} bla\"); //~ WARN Panic message contains a brace\n+    panic!(\"here's a brace: {\"); //~ WARN panic message contains a brace\n+    std::panic!(\"another one: }\"); //~ WARN panic message contains a brace\n+    core::panic!(\"Hello {}\"); //~ WARN panic message contains an unused formatting placeholder\n+    assert!(false, \"{:03x} bla\"); //~ WARN panic message contains an unused formatting placeholder\n+    debug_assert!(false, \"{{}} bla\"); //~ WARN panic message contains a brace\n }"}, {"sha": "00b005a59d8c6d61fe4eabf789026410df61e8a3", "filename": "src/test/ui/panic-brace.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0f193d1a62c128ae94e1f21d7c1212d7c9e95b7d/src%2Ftest%2Fui%2Fpanic-brace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f193d1a62c128ae94e1f21d7c1212d7c9e95b7d/src%2Ftest%2Fui%2Fpanic-brace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-brace.stderr?ref=0f193d1a62c128ae94e1f21d7c1212d7c9e95b7d", "patch": "@@ -1,35 +1,35 @@\n-warning: Panic message contains a brace\n+warning: panic message contains a brace\n   --> $DIR/panic-brace.rs:5:5\n    |\n LL |     panic!(\"here's a brace: {\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(panic_fmt)]` on by default\n-   = note: This message is not used as a format string, but will be in a future Rust version\n+   = note: this message is not used as a format string, but will be in a future Rust version\n help: add a \"{}\" format string to use the message literally\n    |\n LL |     panic!(\"{}\", \"here's a brace: {\");\n    |            ^^^^^\n \n-warning: Panic message contains a brace\n+warning: panic message contains a brace\n   --> $DIR/panic-brace.rs:6:5\n    |\n LL |     std::panic!(\"another one: }\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: This message is not used as a format string, but will be in a future Rust version\n+   = note: this message is not used as a format string, but will be in a future Rust version\n help: add a \"{}\" format string to use the message literally\n    |\n LL |     std::panic!(\"{}\", \"another one: }\");\n    |                 ^^^^^\n \n-warning: Panic message contains an unused formatting placeholder\n+warning: panic message contains an unused formatting placeholder\n   --> $DIR/panic-brace.rs:7:18\n    |\n LL |     core::panic!(\"Hello {}\");\n    |                  ^^^^^^^^^^\n    |\n-   = note: This message is not used as a format string when given without arguments, but will be in a future Rust version\n+   = note: this message is not used as a format string when given without arguments, but will be in a future Rust version\n help: add the missing argument(s)\n    |\n LL |     core::panic!(\"Hello {}\", argument);\n@@ -39,13 +39,13 @@ help: or add a \"{}\" format string to use the message literally\n LL |     core::panic!(\"{}\", \"Hello {}\");\n    |                  ^^^^^\n \n-warning: Panic message contains an unused formatting placeholder\n+warning: panic message contains an unused formatting placeholder\n   --> $DIR/panic-brace.rs:8:20\n    |\n LL |     assert!(false, \"{:03x} bla\");\n    |                    ^^^^^^^^^^^^\n    |\n-   = note: This message is not used as a format string when given without arguments, but will be in a future Rust version\n+   = note: this message is not used as a format string when given without arguments, but will be in a future Rust version\n help: add the missing argument(s)\n    |\n LL |     assert!(false, \"{:03x} bla\", argument);\n@@ -55,13 +55,13 @@ help: or add a \"{}\" format string to use the message literally\n LL |     assert!(false, \"{}\", \"{:03x} bla\");\n    |                    ^^^^^\n \n-warning: Panic message contains a brace\n+warning: panic message contains a brace\n   --> $DIR/panic-brace.rs:9:5\n    |\n LL |     debug_assert!(false, \"{{}} bla\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: This message is not used as a format string, but will be in a future Rust version\n+   = note: this message is not used as a format string, but will be in a future Rust version\n help: add a \"{}\" format string to use the message literally\n    |\n LL |     debug_assert!(false, \"{}\", \"{{}} bla\");"}]}