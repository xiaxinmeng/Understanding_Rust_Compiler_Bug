{"sha": "e8b6b2ac0c115e7208d725b4f6340e68194d0cf3", "node_id": "C_kwDOAAsO6NoAKGU4YjZiMmFjMGMxMTVlNzIwOGQ3MjViNGY2MzQwZTY4MTk0ZDBjZjM", "commit": {"author": {"name": "Wigy", "email": "attila@parity.io", "date": "2021-12-31T08:37:39Z"}, "committer": {"name": "Wigy", "email": "attila@parity.io", "date": "2022-01-02T18:36:02Z"}, "message": "erasing_op lint ignored when output type is different from the non-const one", "tree": {"sha": "9061305ce5e370ccd13dfd2f1c23773af07b493f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9061305ce5e370ccd13dfd2f1c23773af07b493f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8b6b2ac0c115e7208d725b4f6340e68194d0cf3", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEmTtAhJ0nkW08x4CR/vQmp9tLO/AFAmHR8JMACgkQ/vQmp9tL\nO/CwOg//fXNgESfWrrR5JmviQACERVfRgx3xx1T7mthOVFpLDhWmo1gguWU5uYFh\njuI7nUmexb4ZarYARxZGxSgfyBOGUrrH5eoKu5rVX/1byN0n8259RFty6z5sF2C7\nWUSgI+xj0VwsR64vTE2tSryEb2xTw/lCXO0EZN+TXHQnkNw2iQzVDJk4Mm0eBLLr\nog+/V6pzHgQ1ujeQoDKvxUJhX5kpVIBJ9mtw51mPRbkZbIUJtDXe4HqAatxRGte3\nz4UerckNszPqcOlraS8JDpSzHKM0plLtvYF65cHQhhrS0W5Mz0Emh7qvTJ26xyCF\nLJWEe1K6p36hTcPCnhy36bdAB97sNnOuwEFWxHy7cBxATi3zu6G92JEyBUW0WfSM\nr5/gsr2z17c0KtOGOxlgb+x8QEqRgyEhQZeImy2D7pX5gmQYpZED/VP7MZD9gJRy\nbd0WoAesUs0rr8yzR7RwJXOyMTH7Yg3YK7xw7PW6qy2ZN5sqke5eFc53GCEo0ueN\n2qGcM8aE6wVsHthHnt5QwKpI/pjPjaah1W6XxfH/M5RcwA+i1F4A7/iicbTooba3\n61CZECyWiuTWaNctejPtlt0OTuitE+VxjO5Jkw1mlng0hSRg5gzLpYQalas1Vq3o\nf+8hJYJU2uEx4wEZor6PHml+APgEecvh+1M7GaCigpqOj9q9QXk=\n=6a+X\n-----END PGP SIGNATURE-----", "payload": "tree 9061305ce5e370ccd13dfd2f1c23773af07b493f\nparent b25dbc6a4d934668bfb2a75a43b995516eac40f0\nauthor Wigy <attila@parity.io> 1640939859 +0100\ncommitter Wigy <attila@parity.io> 1641148562 +0100\n\nerasing_op lint ignored when output type is different from the non-const one\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8b6b2ac0c115e7208d725b4f6340e68194d0cf3", "html_url": "https://github.com/rust-lang/rust/commit/e8b6b2ac0c115e7208d725b4f6340e68194d0cf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8b6b2ac0c115e7208d725b4f6340e68194d0cf3/comments", "author": null, "committer": null, "parents": [{"sha": "b25dbc6a4d934668bfb2a75a43b995516eac40f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b25dbc6a4d934668bfb2a75a43b995516eac40f0", "html_url": "https://github.com/rust-lang/rust/commit/b25dbc6a4d934668bfb2a75a43b995516eac40f0"}], "stats": {"total": 119, "additions": 95, "deletions": 24}, "files": [{"sha": "bb6acd8c5dd4b064bf8bed5a0f4b9a6de41acf19", "filename": "clippy_lints/src/erasing_op.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e8b6b2ac0c115e7208d725b4f6340e68194d0cf3/clippy_lints%2Fsrc%2Ferasing_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b6b2ac0c115e7208d725b4f6340e68194d0cf3/clippy_lints%2Fsrc%2Ferasing_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ferasing_op.rs?ref=e8b6b2ac0c115e7208d725b4f6340e68194d0cf3", "patch": "@@ -1,9 +1,11 @@\n use clippy_utils::consts::{constant_simple, Constant};\n use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::ty::same_type_and_consts;\n+\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::TypeckResults;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::source_map::Span;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -35,24 +37,34 @@ impl<'tcx> LateLintPass<'tcx> for ErasingOp {\n             return;\n         }\n         if let ExprKind::Binary(ref cmp, left, right) = e.kind {\n+            let tck = cx.typeck_results();\n             match cmp.node {\n                 BinOpKind::Mul | BinOpKind::BitAnd => {\n-                    check(cx, left, e.span);\n-                    check(cx, right, e.span);\n+                    check(cx, tck, left, right, e);\n+                    check(cx, tck, right, left, e);\n                 },\n-                BinOpKind::Div => check(cx, left, e.span),\n+                BinOpKind::Div => check(cx, tck, left, right, e),\n                 _ => (),\n             }\n         }\n     }\n }\n \n-fn check(cx: &LateContext<'_>, e: &Expr<'_>, span: Span) {\n-    if constant_simple(cx, cx.typeck_results(), e) == Some(Constant::Int(0)) {\n+fn different_types(tck: &TypeckResults<'tcx>, input: &'tcx Expr<'_>, output: &'tcx Expr<'_>) -> bool {\n+    let input_ty = tck.expr_ty(input).peel_refs();\n+    let output_ty = tck.expr_ty(output).peel_refs();\n+    !same_type_and_consts(input_ty, output_ty)\n+}\n+\n+fn check(cx: &LateContext<'cx>, tck: &TypeckResults<'cx>, op: &Expr<'cx>, other: &Expr<'cx>, parent: &Expr<'cx>) {\n+    if constant_simple(cx, tck, op) == Some(Constant::Int(0)) {\n+        if different_types(tck, other, parent) {\n+            return;\n+        }\n         span_lint(\n             cx,\n             ERASING_OP,\n-            span,\n+            parent.span,\n             \"this operation will always return zero. This is likely not the intended outcome\",\n         );\n     }"}, {"sha": "ae2fad0086daa0af39d6838418b407dfcad2c1a9", "filename": "tests/ui/erasing_op.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e8b6b2ac0c115e7208d725b4f6340e68194d0cf3/tests%2Fui%2Ferasing_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b6b2ac0c115e7208d725b4f6340e68194d0cf3/tests%2Fui%2Ferasing_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferasing_op.rs?ref=e8b6b2ac0c115e7208d725b4f6340e68194d0cf3", "patch": "@@ -1,3 +1,34 @@\n+struct Length(u8);\n+struct Meter;\n+\n+impl core::ops::Mul<Meter> for u8 {\n+    type Output = Length;\n+    fn mul(self, _: Meter) -> Length {\n+        Length(self)\n+    }\n+}\n+\n+#[derive(Clone, Default, PartialEq, Eq, Hash)]\n+struct Vec1 {\n+    x: i32,\n+}\n+\n+impl core::ops::Mul<Vec1> for i32 {\n+    type Output = Vec1;\n+    fn mul(self, mut right: Vec1) -> Vec1 {\n+        right.x *= self;\n+        right\n+    }\n+}\n+\n+impl core::ops::Mul<i32> for Vec1 {\n+    type Output = Vec1;\n+    fn mul(mut self, right: i32) -> Vec1 {\n+        self.x *= right;\n+        self\n+    }\n+}\n+\n #[allow(clippy::no_effect)]\n #[warn(clippy::erasing_op)]\n fn main() {\n@@ -6,4 +37,7 @@ fn main() {\n     x * 0;\n     0 & x;\n     0 / x;\n+    0 * Meter; // no error: Output type is different from the non-zero argument\n+    0 * Vec1 { x: 5 };\n+    Vec1 { x: 5 } * 0;\n }"}, {"sha": "165ed9bfe58b1b0bda9f79560e47a457d2964a43", "filename": "tests/ui/erasing_op.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e8b6b2ac0c115e7208d725b4f6340e68194d0cf3/tests%2Fui%2Ferasing_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8b6b2ac0c115e7208d725b4f6340e68194d0cf3/tests%2Fui%2Ferasing_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferasing_op.stderr?ref=e8b6b2ac0c115e7208d725b4f6340e68194d0cf3", "patch": "@@ -1,22 +1,34 @@\n error: this operation will always return zero. This is likely not the intended outcome\n-  --> $DIR/erasing_op.rs:6:5\n+  --> $DIR/erasing_op.rs:37:5\n    |\n LL |     x * 0;\n    |     ^^^^^\n    |\n    = note: `-D clippy::erasing-op` implied by `-D warnings`\n \n error: this operation will always return zero. This is likely not the intended outcome\n-  --> $DIR/erasing_op.rs:7:5\n+  --> $DIR/erasing_op.rs:38:5\n    |\n LL |     0 & x;\n    |     ^^^^^\n \n error: this operation will always return zero. This is likely not the intended outcome\n-  --> $DIR/erasing_op.rs:8:5\n+  --> $DIR/erasing_op.rs:39:5\n    |\n LL |     0 / x;\n    |     ^^^^^\n \n-error: aborting due to 3 previous errors\n+error: this operation will always return zero. This is likely not the intended outcome\n+  --> $DIR/erasing_op.rs:41:5\n+   |\n+LL |     0 * Vec1 { x: 5 };\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: this operation will always return zero. This is likely not the intended outcome\n+  --> $DIR/erasing_op.rs:42:5\n+   |\n+LL |     Vec1 { x: 5 } * 0;\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n "}, {"sha": "12bbda71f434813ca78c1e499bb3d70e82106490", "filename": "tests/ui/identity_op.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e8b6b2ac0c115e7208d725b4f6340e68194d0cf3/tests%2Fui%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8b6b2ac0c115e7208d725b4f6340e68194d0cf3/tests%2Fui%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.rs?ref=e8b6b2ac0c115e7208d725b4f6340e68194d0cf3", "patch": "@@ -11,6 +11,17 @@ impl std::ops::Shl<i32> for A {\n         self\n     }\n }\n+\n+struct Length(u8);\n+struct Meter;\n+\n+impl core::ops::Mul<Meter> for u8 {\n+    type Output = Length;\n+    fn mul(self, _: Meter) -> Length {\n+        Length(self)\n+    }\n+}\n+\n #[allow(\n     clippy::eq_op,\n     clippy::no_effect,\n@@ -53,4 +64,6 @@ fn main() {\n \n     let mut a = A(\"\".into());\n     let b = a << 0; // no error: non-integer\n+\n+    1 * Meter; // no error: non-integer\n }"}, {"sha": "0103cf5457e81a8a313dc1b78506497679903647", "filename": "tests/ui/identity_op.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e8b6b2ac0c115e7208d725b4f6340e68194d0cf3/tests%2Fui%2Fidentity_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8b6b2ac0c115e7208d725b4f6340e68194d0cf3/tests%2Fui%2Fidentity_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.stderr?ref=e8b6b2ac0c115e7208d725b4f6340e68194d0cf3", "patch": "@@ -1,79 +1,79 @@\n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:26:5\n+  --> $DIR/identity_op.rs:37:5\n    |\n LL |     x + 0;\n    |     ^^^^^\n    |\n    = note: `-D clippy::identity-op` implied by `-D warnings`\n \n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:27:5\n+  --> $DIR/identity_op.rs:38:5\n    |\n LL |     x + (1 - 1);\n    |     ^^^^^^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:29:5\n+  --> $DIR/identity_op.rs:40:5\n    |\n LL |     0 + x;\n    |     ^^^^^\n \n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:32:5\n+  --> $DIR/identity_op.rs:43:5\n    |\n LL |     x | (0);\n    |     ^^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:35:5\n+  --> $DIR/identity_op.rs:46:5\n    |\n LL |     x * 1;\n    |     ^^^^^\n \n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:36:5\n+  --> $DIR/identity_op.rs:47:5\n    |\n LL |     1 * x;\n    |     ^^^^^\n \n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:42:5\n+  --> $DIR/identity_op.rs:53:5\n    |\n LL |     -1 & x;\n    |     ^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `u`\n-  --> $DIR/identity_op.rs:45:5\n+  --> $DIR/identity_op.rs:56:5\n    |\n LL |     u & 255;\n    |     ^^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `42`\n-  --> $DIR/identity_op.rs:48:5\n+  --> $DIR/identity_op.rs:59:5\n    |\n LL |     42 << 0;\n    |     ^^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `1`\n-  --> $DIR/identity_op.rs:49:5\n+  --> $DIR/identity_op.rs:60:5\n    |\n LL |     1 >> 0;\n    |     ^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `42`\n-  --> $DIR/identity_op.rs:50:5\n+  --> $DIR/identity_op.rs:61:5\n    |\n LL |     42 >> 0;\n    |     ^^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `&x`\n-  --> $DIR/identity_op.rs:51:5\n+  --> $DIR/identity_op.rs:62:5\n    |\n LL |     &x >> 0;\n    |     ^^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:52:5\n+  --> $DIR/identity_op.rs:63:5\n    |\n LL |     x >> &0;\n    |     ^^^^^^^"}]}