{"sha": "e35d2867f14a36094bdceadc731fdd1d26882fc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNWQyODY3ZjE0YTM2MDk0YmRjZWFkYzczMWZkZDFkMjY4ODJmYzk=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-07-25T20:52:47Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-07-25T20:52:47Z"}, "message": "Fix diagnostic by using predicate in GATs too", "tree": {"sha": "cc3a02a88dad363a2a7660437d7f251f89c6f5dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc3a02a88dad363a2a7660437d7f251f89c6f5dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e35d2867f14a36094bdceadc731fdd1d26882fc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e35d2867f14a36094bdceadc731fdd1d26882fc9", "html_url": "https://github.com/rust-lang/rust/commit/e35d2867f14a36094bdceadc731fdd1d26882fc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e35d2867f14a36094bdceadc731fdd1d26882fc9/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31a3bb59ce42ae86e19c2e316d0809e8606c810f", "url": "https://api.github.com/repos/rust-lang/rust/commits/31a3bb59ce42ae86e19c2e316d0809e8606c810f", "html_url": "https://github.com/rust-lang/rust/commit/31a3bb59ce42ae86e19c2e316d0809e8606c810f"}], "stats": {"total": 32, "additions": 5, "deletions": 27}, "files": [{"sha": "b739e2fe1fbc4ffecb0aed169e2a8064bf34526d", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e35d2867f14a36094bdceadc731fdd1d26882fc9/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e35d2867f14a36094bdceadc731fdd1d26882fc9/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=e35d2867f14a36094bdceadc731fdd1d26882fc9", "patch": "@@ -1220,11 +1220,7 @@ fn compare_projection_bounds<'tcx>(\n     // we want <T as X>::Y to normalize to S. This is valid because we are\n     // checking the default value specifically here. Add this equality to the\n     // ParamEnv for normalization specifically.\n-    let normalize_param_env = if impl_ty.defaultness.is_final() {\n-        // If the associated type is final then normalization can already\n-        // do this without the explicit predicate.\n-        param_env\n-    } else {\n+    let normalize_param_env = {\n         let mut predicates = param_env.caller_bounds().iter().collect::<Vec<_>>();\n         predicates.push(\n             ty::Binder::dummy(ty::ProjectionPredicate {"}, {"sha": "7510c58d57489aa76158811c06c3ae1fd8bcdfd1", "filename": "src/test/ui/generic-associated-types/unsatisfied-outlives-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e35d2867f14a36094bdceadc731fdd1d26882fc9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e35d2867f14a36094bdceadc731fdd1d26882fc9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.rs?ref=e35d2867f14a36094bdceadc731fdd1d26882fc9", "patch": "@@ -7,7 +7,7 @@ trait ATy {\n \n impl<'b> ATy for &'b () {\n     type Item<'a> = &'b ();\n-    //~^ ERROR cannot infer an appropriate lifetime\n+    //~^ ERROR does not fulfill the required lifetime\n }\n \n trait StaticTy {"}, {"sha": "5d612284a21873ebef696a19e25ac31a8ab9c65f", "filename": "src/test/ui/generic-associated-types/unsatisfied-outlives-bound.stderr", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e35d2867f14a36094bdceadc731fdd1d26882fc9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e35d2867f14a36094bdceadc731fdd1d26882fc9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatisfied-outlives-bound.stderr?ref=e35d2867f14a36094bdceadc731fdd1d26882fc9", "patch": "@@ -1,31 +1,14 @@\n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'b` due to conflicting requirements\n+error[E0477]: the type `&'b ()` does not fulfill the required lifetime\n   --> $DIR/unsatisfied-outlives-bound.rs:9:5\n    |\n LL |     type Item<'a> = &'b ();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: first, the lifetime cannot outlive the lifetime `'b` as defined on the impl at 8:6...\n-  --> $DIR/unsatisfied-outlives-bound.rs:8:6\n-   |\n-LL | impl<'b> ATy for &'b () {\n-   |      ^^\n-note: ...so that the types are compatible\n-  --> $DIR/unsatisfied-outlives-bound.rs:9:5\n-   |\n-LL |     type Item<'a> = &'b ();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected `ATy`\n-              found `ATy`\n-note: but, the lifetime must be valid for the lifetime `'a` as defined on the associated item at 9:15...\n+note: type must outlive the lifetime `'a` as defined on the associated item at 9:15\n   --> $DIR/unsatisfied-outlives-bound.rs:9:15\n    |\n LL |     type Item<'a> = &'b ();\n    |               ^^\n-note: ...so that the type `&()` will meet its required lifetime bounds\n-  --> $DIR/unsatisfied-outlives-bound.rs:9:5\n-   |\n-LL |     type Item<'a> = &'b ();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0477]: the type `&'a ()` does not fulfill the required lifetime\n   --> $DIR/unsatisfied-outlives-bound.rs:18:5\n@@ -37,5 +20,4 @@ LL |     type Item<'a> = &'a ();\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0477, E0495.\n-For more information about an error, try `rustc --explain E0477`.\n+For more information about this error, try `rustc --explain E0477`."}]}