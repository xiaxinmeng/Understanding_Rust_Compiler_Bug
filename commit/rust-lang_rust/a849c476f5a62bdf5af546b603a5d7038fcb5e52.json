{"sha": "a849c476f5a62bdf5af546b603a5d7038fcb5e52", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4NDljNDc2ZjVhNjJiZGY1YWY1NDZiNjAzYTVkNzAzOGZjYjVlNTI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-10-26T02:52:02Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-10-26T02:56:49Z"}, "message": "Encapsulate the lock-free mpsc queue in the MessageQueue type", "tree": {"sha": "1d9d504d2cada34134e44c70027a0e375b7498c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d9d504d2cada34134e44c70027a0e375b7498c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a849c476f5a62bdf5af546b603a5d7038fcb5e52", "comment_count": 13, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a849c476f5a62bdf5af546b603a5d7038fcb5e52", "html_url": "https://github.com/rust-lang/rust/commit/a849c476f5a62bdf5af546b603a5d7038fcb5e52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a849c476f5a62bdf5af546b603a5d7038fcb5e52/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ce5081f4d7a8d636f67204e0e62fe0e9164b560", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ce5081f4d7a8d636f67204e0e62fe0e9164b560", "html_url": "https://github.com/rust-lang/rust/commit/1ce5081f4d7a8d636f67204e0e62fe0e9164b560"}], "stats": {"total": 72, "additions": 15, "deletions": 57}, "files": [{"sha": "10e457368f007e3e36ccdb8f2e33a2fd7105b192", "filename": "src/libstd/rt/message_queue.rs", "status": "modified", "additions": 11, "deletions": 49, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/a849c476f5a62bdf5af546b603a5d7038fcb5e52/src%2Flibstd%2Frt%2Fmessage_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a849c476f5a62bdf5af546b603a5d7038fcb5e52/src%2Flibstd%2Frt%2Fmessage_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmessage_queue.rs?ref=a849c476f5a62bdf5af546b603a5d7038fcb5e52", "patch": "@@ -11,83 +11,45 @@\n //! A concurrent queue that supports multiple producers and a\n //! single consumer.\n \n-use container::Container;\n use kinds::Send;\n use vec::OwnedVector;\n-use cell::Cell;\n-use option::*;\n-use unstable::sync::{UnsafeArc, LittleLock};\n+use option::Option;\n use clone::Clone;\n+use rt::mpsc_queue::Queue;\n \n pub struct MessageQueue<T> {\n-    priv state: UnsafeArc<State<T>>\n-}\n-\n-struct State<T> {\n-    count: uint,\n-    queue: ~[T],\n-    lock: LittleLock\n+    priv queue: Queue<T>\n }\n \n impl<T: Send> MessageQueue<T> {\n     pub fn new() -> MessageQueue<T> {\n         MessageQueue {\n-            state: UnsafeArc::new(State {\n-                count: 0,\n-                queue: ~[],\n-                lock: LittleLock::new()\n-            })\n+            queue: Queue::new()\n         }\n     }\n \n+    #[inline]\n     pub fn push(&mut self, value: T) {\n-        unsafe {\n-            let value = Cell::new(value);\n-            let state = self.state.get();\n-            do (*state).lock.lock {\n-                (*state).count += 1;\n-                (*state).queue.push(value.take());\n-            }\n-        }\n+        self.queue.push(value)\n     }\n \n+    #[inline]\n     pub fn pop(&mut self) -> Option<T> {\n-        unsafe {\n-            let state = self.state.get();\n-            do (*state).lock.lock {\n-                if !(*state).queue.is_empty() {\n-                    (*state).count += 1;\n-                    Some((*state).queue.shift())\n-                } else {\n-                    None\n-                }\n-            }\n-        }\n+        self.queue.pop()\n     }\n \n     /// A pop that may sometimes miss enqueued elements, but is much faster\n     /// to give up without doing any synchronization\n+    #[inline]\n     pub fn casual_pop(&mut self) -> Option<T> {\n-        unsafe {\n-            let state = self.state.get();\n-            // NB: Unsynchronized check\n-            if (*state).count == 0 { return None; }\n-            do (*state).lock.lock {\n-                if !(*state).queue.is_empty() {\n-                    (*state).count += 1;\n-                    Some((*state).queue.shift())\n-                } else {\n-                    None\n-                }\n-            }\n-        }\n+        self.queue.pop()\n     }\n }\n \n impl<T: Send> Clone for MessageQueue<T> {\n     fn clone(&self) -> MessageQueue<T> {\n         MessageQueue {\n-            state: self.state.clone()\n+            queue: self.queue.clone()\n         }\n     }\n }"}, {"sha": "4f39a1df4fa53f1f041c5f15da739b0c13e1c7bc", "filename": "src/libstd/rt/mpsc_queue.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a849c476f5a62bdf5af546b603a5d7038fcb5e52/src%2Flibstd%2Frt%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a849c476f5a62bdf5af546b603a5d7038fcb5e52/src%2Flibstd%2Frt%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmpsc_queue.rs?ref=a849c476f5a62bdf5af546b603a5d7038fcb5e52", "patch": "@@ -159,10 +159,6 @@ impl<T: Send> Queue<T> {\n         unsafe { (*self.state.get()).push(value) }\n     }\n \n-    pub fn casual_pop(&mut self) -> Option<T> {\n-        unsafe { (*self.state.get()).pop() }\n-    }\n-\n     pub fn pop(&mut self) -> Option<T> {\n         unsafe{ (*self.state.get()).pop() }\n     }"}, {"sha": "b008a8a74f2cb4678a6379bb153f5338d8224310", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a849c476f5a62bdf5af546b603a5d7038fcb5e52/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a849c476f5a62bdf5af546b603a5d7038fcb5e52/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=a849c476f5a62bdf5af546b603a5d7038fcb5e52", "patch": "@@ -19,7 +19,7 @@ use super::stack::{StackPool};\n use super::rtio::EventLoop;\n use super::context::Context;\n use super::task::{Task, AnySched, Sched};\n-use super::mpsc_queue::Queue;\n+use super::message_queue::MessageQueue;\n use rt::kill::BlockedTask;\n use rt::local_ptr;\n use rt::local::Local;\n@@ -47,7 +47,7 @@ pub struct Scheduler {\n     /// The queue of incoming messages from other schedulers.\n     /// These are enqueued by SchedHandles after which a remote callback\n     /// is triggered to handle the message.\n-    priv message_queue: Queue<SchedMessage>,\n+    priv message_queue: MessageQueue<SchedMessage>,\n     /// A shared list of sleeping schedulers. We'll use this to wake\n     /// up schedulers when pushing work onto the work queue.\n     sleeper_list: SleeperList,\n@@ -137,7 +137,7 @@ impl Scheduler {\n \n         let mut sched = Scheduler {\n             sleeper_list: sleeper_list,\n-            message_queue: Queue::new(),\n+            message_queue: MessageQueue::new(),\n             sleepy: false,\n             no_sleep: false,\n             event_loop: event_loop,\n@@ -802,7 +802,7 @@ pub enum SchedMessage {\n \n pub struct SchedHandle {\n     priv remote: ~RemoteCallback,\n-    priv queue: Queue<SchedMessage>,\n+    priv queue: MessageQueue<SchedMessage>,\n     sched_id: uint\n }\n "}]}