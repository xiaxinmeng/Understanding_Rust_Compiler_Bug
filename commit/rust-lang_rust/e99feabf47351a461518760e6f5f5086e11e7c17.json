{"sha": "e99feabf47351a461518760e6f5f5086e11e7c17", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5OWZlYWJmNDczNTFhNDYxNTE4NzYwZTZmNWY1MDg2ZTExZTdjMTc=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-27T00:36:08Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-27T00:36:08Z"}, "message": "Add a result_str method to std.sha1.sha1.", "tree": {"sha": "f50af696d3f3432d5237654445face3543268ce4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f50af696d3f3432d5237654445face3543268ce4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e99feabf47351a461518760e6f5f5086e11e7c17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e99feabf47351a461518760e6f5f5086e11e7c17", "html_url": "https://github.com/rust-lang/rust/commit/e99feabf47351a461518760e6f5f5086e11e7c17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e99feabf47351a461518760e6f5f5086e11e7c17/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac6e1131e91d27f1211e028587e5f68e2900cdd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac6e1131e91d27f1211e028587e5f68e2900cdd2", "html_url": "https://github.com/rust-lang/rust/commit/ac6e1131e91d27f1211e028587e5f68e2900cdd2"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "3899dddbc2764561d30cf030e402a7deae0c2a52", "filename": "src/lib/sha1.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e99feabf47351a461518760e6f5f5086e11e7c17/src%2Flib%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99feabf47351a461518760e6f5f5086e11e7c17/src%2Flib%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fsha1.rs?ref=e99feabf47351a461518760e6f5f5086e11e7c17", "patch": "@@ -19,6 +19,9 @@ state type sha1 = state obj {\n                         // until reset is called\n                         fn result() -> vec[u8];\n \n+                        // Same as above, just a hex-string version.\n+                        fn result_str() -> str;\n+\n                         // Reset the sha1 state for reuse. This is called\n                         // automatically during construction\n                         fn reset();\n@@ -259,6 +262,15 @@ fn mk_sha1() -> sha1 {\n         fn result() -> vec[u8] {\n             ret mk_result(st);\n         }\n+\n+        fn result_str() -> str {\n+            auto r = mk_result(st);\n+            auto s = \"\";\n+            for (u8 b in r) {\n+                s += _uint.to_str(b as uint, 16u);\n+            }\n+            ret s;\n+        }\n     }\n \n     auto st = rec(h = _vec.init_elt_mut[u32](0u32, digest_buf_len),"}]}