{"sha": "1303687d4811e8c3e261e14adbfb9850b23ff973", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMDM2ODdkNDgxMWU4YzNlMjYxZTE0YWRiZmI5ODUwYjIzZmY5NzM=", "commit": {"author": {"name": "arcnmx", "email": "arcnmx@users.noreply.github.com", "date": "2015-10-19T00:01:55Z"}, "committer": {"name": "arcnmx", "email": "arcnmx@users.noreply.github.com", "date": "2015-10-19T00:03:09Z"}, "message": "Clean up thread::spawn", "tree": {"sha": "a15754ba1aba48028a56989ff9ef03b1bc150434", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a15754ba1aba48028a56989ff9ef03b1bc150434"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1303687d4811e8c3e261e14adbfb9850b23ff973", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1303687d4811e8c3e261e14adbfb9850b23ff973", "html_url": "https://github.com/rust-lang/rust/commit/1303687d4811e8c3e261e14adbfb9850b23ff973", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1303687d4811e8c3e261e14adbfb9850b23ff973/comments", "author": {"login": "arcnmx", "id": 13426784, "node_id": "MDQ6VXNlcjEzNDI2Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/13426784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arcnmx", "html_url": "https://github.com/arcnmx", "followers_url": "https://api.github.com/users/arcnmx/followers", "following_url": "https://api.github.com/users/arcnmx/following{/other_user}", "gists_url": "https://api.github.com/users/arcnmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/arcnmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arcnmx/subscriptions", "organizations_url": "https://api.github.com/users/arcnmx/orgs", "repos_url": "https://api.github.com/users/arcnmx/repos", "events_url": "https://api.github.com/users/arcnmx/events{/privacy}", "received_events_url": "https://api.github.com/users/arcnmx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arcnmx", "id": 13426784, "node_id": "MDQ6VXNlcjEzNDI2Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/13426784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arcnmx", "html_url": "https://github.com/arcnmx", "followers_url": "https://api.github.com/users/arcnmx/followers", "following_url": "https://api.github.com/users/arcnmx/following{/other_user}", "gists_url": "https://api.github.com/users/arcnmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/arcnmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arcnmx/subscriptions", "organizations_url": "https://api.github.com/users/arcnmx/orgs", "repos_url": "https://api.github.com/users/arcnmx/repos", "events_url": "https://api.github.com/users/arcnmx/events{/privacy}", "received_events_url": "https://api.github.com/users/arcnmx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3f497861d426c8724dd84f161ca21f274663963", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3f497861d426c8724dd84f161ca21f274663963", "html_url": "https://github.com/rust-lang/rust/commit/d3f497861d426c8724dd84f161ca21f274663963"}], "stats": {"total": 39, "additions": 16, "deletions": 23}, "files": [{"sha": "9b8f63997b64278ffd88bbcf282cb8a5e6c02ad0", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1303687d4811e8c3e261e14adbfb9850b23ff973/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1303687d4811e8c3e261e14adbfb9850b23ff973/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=1303687d4811e8c3e261e14adbfb9850b23ff973", "patch": "@@ -162,7 +162,6 @@\n \n use prelude::v1::*;\n \n-use alloc::boxed::FnBox;\n use any::Any;\n use cell::UnsafeCell;\n use fmt;\n@@ -249,16 +248,6 @@ impl Builder {\n     pub fn spawn<F, T>(self, f: F) -> io::Result<JoinHandle<T>> where\n         F: FnOnce() -> T, F: Send + 'static, T: Send + 'static\n     {\n-        unsafe {\n-            self.spawn_inner(Box::new(f)).map(JoinHandle)\n-        }\n-    }\n-\n-    // NB: this function is unsafe as the lifetime parameter of the code to run\n-    //     in the new thread is not tied into the return value, and the return\n-    //     value must not outlast that lifetime.\n-    unsafe fn spawn_inner<'a, T: Send>(self, f: Box<FnBox() -> T + Send + 'a>)\n-                                       -> io::Result<JoinInner<T>> {\n         let Builder { name, stack_size } = self;\n \n         let stack_size = stack_size.unwrap_or(util::min_stack());\n@@ -274,22 +263,26 @@ impl Builder {\n             if let Some(name) = their_thread.name() {\n                 imp::Thread::set_name(name);\n             }\n-            thread_info::set(imp::guard::current(), their_thread);\n-            let mut output = None;\n-            let try_result = {\n-                let ptr = &mut output;\n-                unwind::try(move || *ptr = Some(f()))\n-            };\n-            *their_packet.get() = Some(try_result.map(|()| {\n-                output.unwrap()\n-            }));\n+            unsafe {\n+                thread_info::set(imp::guard::current(), their_thread);\n+                let mut output = None;\n+                let try_result = {\n+                    let ptr = &mut output;\n+                    unwind::try(move || *ptr = Some(f()))\n+                };\n+                *their_packet.get() = Some(try_result.map(|()| {\n+                    output.unwrap()\n+                }));\n+            }\n         };\n \n-        Ok(JoinInner {\n-            native: Some(try!(imp::Thread::new(stack_size, Box::new(main)))),\n+        Ok(JoinHandle(JoinInner {\n+            native: unsafe {\n+                Some(try!(imp::Thread::new(stack_size, Box::new(main))))\n+            },\n             thread: my_thread,\n             packet: Packet(my_packet),\n-        })\n+        }))\n     }\n }\n "}]}