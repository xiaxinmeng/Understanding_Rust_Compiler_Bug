{"sha": "b1475e5cd4a1fc3075e193dc97dbc8f52f2f49ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNDc1ZTVjZDRhMWZjMzA3NWUxOTNkYzk3ZGJjOGY1MmYyZjQ5ZWQ=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-15T04:05:50Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-15T04:05:50Z"}, "message": "Implement Rvalue::Box allocations.", "tree": {"sha": "35b60fe96486a1f2099565a4601b7b58c5d08f3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35b60fe96486a1f2099565a4601b7b58c5d08f3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1475e5cd4a1fc3075e193dc97dbc8f52f2f49ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1475e5cd4a1fc3075e193dc97dbc8f52f2f49ed", "html_url": "https://github.com/rust-lang/rust/commit/b1475e5cd4a1fc3075e193dc97dbc8f52f2f49ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1475e5cd4a1fc3075e193dc97dbc8f52f2f49ed/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7c7764c931b59f4bf56ad8bba1a31bb6ac70d4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7c7764c931b59f4bf56ad8bba1a31bb6ac70d4d", "html_url": "https://github.com/rust-lang/rust/commit/a7c7764c931b59f4bf56ad8bba1a31bb6ac70d4d"}], "stats": {"total": 39, "additions": 26, "deletions": 13}, "files": [{"sha": "5e45e717dfebca7f41995b42300eb16a707f3971", "filename": "src/interpreter.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b1475e5cd4a1fc3075e193dc97dbc8f52f2f49ed/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1475e5cd4a1fc3075e193dc97dbc8f52f2f49ed/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=b1475e5cd4a1fc3075e193dc97dbc8f52f2f49ed", "patch": "@@ -10,7 +10,7 @@ use std::ops::Deref;\n use std::rc::Rc;\n \n use error::EvalResult;\n-use memory::{FieldRepr, Memory, Pointer, Repr};\n+use memory::{self, FieldRepr, Memory, Pointer, Repr};\n use primval::{self, PrimVal};\n \n const TRACE_EXECUTION: bool = true;\n@@ -319,6 +319,12 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                 self.memory.write_ptr(dest, ptr)\n             }\n \n+            Box(ty) => {\n+                let repr = self.ty_to_repr(ty);\n+                let ptr = self.memory.allocate(repr.size());\n+                self.memory.write_ptr(dest, ptr)\n+            }\n+\n             ref r => panic!(\"can't handle rvalue: {:?}\", r),\n         }\n     }\n@@ -476,7 +482,7 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                 self.make_variant_repr(&adt_def.variants[0], substs)\n             }\n \n-            ty::TyRef(_, ty::TypeAndMut { ty, .. }) => {\n+            ty::TyRef(_, ty::TypeAndMut { ty, .. }) | ty::TyBox(ty) => {\n                 Repr::Pointer { target: Box::new(self.ty_to_repr(ty)) }\n             }\n \n@@ -523,6 +529,15 @@ impl<'mir, 'tcx: 'mir> Deref for CachedMir<'mir, 'tcx> {\n }\n \n pub fn interpret_start_points<'tcx>(tcx: &TyCtxt<'tcx>, mir_map: &MirMap<'tcx>) {\n+    /// Print the given allocation and all allocations it depends on.\n+    fn print_allocation_tree(memory: &Memory, alloc_id: memory::AllocId) {\n+        let alloc = memory.get(alloc_id).unwrap();\n+        println!(\"  {:?}\", alloc);\n+        for &target_alloc in alloc.relocations.values() {\n+            print_allocation_tree(memory, target_alloc);\n+        }\n+    }\n+\n     for (&id, mir) in &mir_map.map {\n         for attr in tcx.map.attrs(id) {\n             use syntax::attr::AttrMetaMethods;\n@@ -543,7 +558,8 @@ pub fn interpret_start_points<'tcx>(tcx: &TyCtxt<'tcx>, mir_map: &MirMap<'tcx>)\n                 miri.run().unwrap();\n \n                 if let Some(ret) = return_ptr {\n-                    println!(\"Returned: {:?}\\n\", miri.memory.get(ret.alloc_id).unwrap());\n+                    println!(\"Result:\");\n+                    print_allocation_tree(&miri.memory, ret.alloc_id);\n                 }\n             }\n         }"}, {"sha": "3675476e2ee1d9b167c93c4918b86ee7a29af501", "filename": "src/memory.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b1475e5cd4a1fc3075e193dc97dbc8f52f2f49ed/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1475e5cd4a1fc3075e193dc97dbc8f52f2f49ed/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=b1475e5cd4a1fc3075e193dc97dbc8f52f2f49ed", "patch": "@@ -16,16 +16,6 @@ pub struct Memory {\n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub struct AllocId(u64);\n \n-/// A relocation represents a part of an allocation which points into another allocation. This is\n-/// used to represent pointers existing in the virtual memory.\n-#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n-pub struct Relocation {\n-    /// The offset in the allocation where the relocation starts.\n-    offset: usize,\n-    /// The allocation this relocation points into.\n-    target: AllocId,\n-}\n-\n #[derive(Debug)]\n pub struct Allocation {\n     pub bytes: Vec<u8>,"}, {"sha": "c97633c656981cbf44ff49b579843c531bcdc516", "filename": "test/heap.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b1475e5cd4a1fc3075e193dc97dbc8f52f2f49ed/test%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1475e5cd4a1fc3075e193dc97dbc8f52f2f49ed/test%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Fheap.rs?ref=b1475e5cd4a1fc3075e193dc97dbc8f52f2f49ed", "patch": "@@ -0,0 +1,7 @@\n+#![feature(custom_attribute)]\n+#![allow(dead_code, unused_attributes)]\n+\n+#[miri_run]\n+fn make_box() -> Box<i32> {\n+    Box::new(42)\n+}"}]}