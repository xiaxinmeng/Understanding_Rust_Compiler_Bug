{"sha": "222cfbec6493d3cd099a7592e7948a7172469a66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMmNmYmVjNjQ5M2QzY2QwOTlhNzU5MmU3OTQ4YTcxNzI0NjlhNjY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-27T00:32:57Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-27T02:15:10Z"}, "message": "rustdoc: Add command line option parsing and a config record", "tree": {"sha": "ca24c8d8a098b09affb44fb1cec11414fafedfd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca24c8d8a098b09affb44fb1cec11414fafedfd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/222cfbec6493d3cd099a7592e7948a7172469a66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/222cfbec6493d3cd099a7592e7948a7172469a66", "html_url": "https://github.com/rust-lang/rust/commit/222cfbec6493d3cd099a7592e7948a7172469a66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/222cfbec6493d3cd099a7592e7948a7172469a66/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21650d02121a7ac63de344e901c7946236573c9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/21650d02121a7ac63de344e901c7946236573c9e", "html_url": "https://github.com/rust-lang/rust/commit/21650d02121a7ac63de344e901c7946236573c9e"}], "stats": {"total": 258, "additions": 258, "deletions": 0}, "files": [{"sha": "da84fef584d0770cf692a9705d18d2765439cec0", "filename": "src/rustdoc/config.rs", "status": "added", "additions": 257, "deletions": 0, "changes": 257, "blob_url": "https://github.com/rust-lang/rust/blob/222cfbec6493d3cd099a7592e7948a7172469a66/src%2Frustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/222cfbec6493d3cd099a7592e7948a7172469a66/src%2Frustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fconfig.rs?ref=222cfbec6493d3cd099a7592e7948a7172469a66", "patch": "@@ -0,0 +1,257 @@\n+import std::getopts;\n+\n+export output_format::{};\n+export output_style::{};\n+export config;\n+export parse_config;\n+\n+#[doc = \"The type of document to output\"]\n+enum output_format {\n+    #[doc = \"Markdown\"]\n+    markdown,\n+    #[doc = \"HTML, via markdown and pandoc\"]\n+    pandoc_html\n+}\n+\n+#[doc = \"How to organize the output\"]\n+enum output_style {\n+    #[doc = \"All in a single document\"]\n+    doc_per_crate,\n+    #[doc = \"Each module in its own document\"]\n+    doc_per_mod\n+}\n+\n+#[doc = \"The configuration for a rustdoc session\"]\n+type config = {\n+    input_crate: str,\n+    output_dir: str,\n+    output_format: output_format,\n+    output_style: output_style,\n+    pandoc_cmd: option<str>\n+};\n+\n+fn opt_output_dir() -> str { \"output-dir\" }\n+fn opt_output_format() -> str { \"output-format\" }\n+fn opt_output_style() -> str { \"output-style\" }\n+fn opt_pandoc_cmd() -> str { \"pandoc-cmd\" }\n+\n+fn opts() -> [(getopts::opt, str)] {\n+    [\n+        (getopts::optopt(opt_output_dir()),\n+         \"put documents here\"),\n+        (getopts::optopt(opt_output_format()),\n+         \"either 'markdown' or 'html'\"),\n+        (getopts::optopt(opt_output_style()),\n+         \"either 'doc-per-crate' or 'doc-per-mod'\"),\n+        (getopts::optopt(opt_pandoc_cmd()),\n+         \"the command for running pandoc\")\n+    ]\n+}\n+\n+fn default_config(input_crate: str) -> config {\n+    {\n+        input_crate: input_crate,\n+        output_dir: \".\",\n+        output_format: pandoc_html,\n+        output_style: doc_per_mod,\n+        pandoc_cmd: none\n+    }\n+}\n+\n+fn parse_config(args: [str]) -> result::t<config, str> {\n+    let args = vec::tail(args);\n+    let opts = tuple::first(vec::unzip(opts()));\n+    alt getopts::getopts(args, opts) {\n+        result::ok(match) {\n+            if vec::len(match.free) == 1u {\n+                let input_crate = vec::head(match.free);\n+                config_from_opts(input_crate, match)\n+            } else if vec::is_empty(match.free) {\n+                result::err(\"no crates specified\")\n+            } else {\n+                result::err(\"multiple crates specified\")\n+            }\n+        }\n+        result::err(f) {\n+            result::err(getopts::fail_str(f))\n+        }\n+    }\n+}\n+\n+fn config_from_opts(\n+    input_crate: str,\n+    match: getopts::match\n+) -> result::t<config, str> {\n+\n+    let config = default_config(input_crate);\n+    let result = result::ok(config);\n+    let result = result::chain(result) {|config|\n+        let output_dir = getopts::opt_maybe_str(match, opt_output_dir());\n+        result::ok({\n+            output_dir: option::from_maybe(config.output_dir, output_dir)\n+            with config\n+        })\n+    };\n+    let result = result::chain(result) {|config|\n+        let output_format = getopts::opt_maybe_str(\n+            match, opt_output_format());\n+        option::maybe(result::ok(config), output_format) {|output_format|\n+            result::chain(parse_output_format(output_format)) {|output_format|\n+                result::ok({\n+                    output_format: output_format\n+                    with config\n+                })\n+            }\n+        }\n+    };\n+    let result = result::chain(result) {|config|\n+        let output_style = getopts::opt_maybe_str(match, opt_output_style());\n+        option::maybe(result::ok(config), output_style) {|output_style|\n+            result::chain(parse_output_style(output_style)) {|output_style|\n+                result::ok({\n+                    output_style: output_style\n+                    with config\n+                })\n+            }\n+        }\n+    };\n+    let result = result::chain(result) {|config|\n+        let pandoc_cmd = getopts::opt_maybe_str(match, opt_pandoc_cmd());\n+        let pandoc_cmd = maybe_find_pandoc(config, pandoc_cmd);\n+        result::chain(pandoc_cmd) {|pandoc_cmd|\n+            result::ok({\n+                pandoc_cmd: pandoc_cmd\n+                with config\n+            })\n+        }\n+    };\n+    ret result;\n+}\n+\n+fn parse_output_format(output_format: str) -> result::t<output_format, str> {\n+    alt output_format {\n+      \"markdown\" { result::ok(markdown) }\n+      \"html\" { result::ok(pandoc_html) }\n+      _ { result::err(#fmt(\"unknown output format '%s'\", output_format)) }\n+    }\n+}\n+\n+fn parse_output_style(output_style: str) -> result::t<output_style, str> {\n+    alt output_style {\n+      \"doc-per-crate\" { result::ok(doc_per_crate) }\n+      \"doc-per-mod\" { result::ok(doc_per_mod) }\n+      _ { result::err(#fmt(\"unknown output style '%s'\", output_style)) }\n+    }\n+}\n+\n+fn maybe_find_pandoc(\n+    _config: config,\n+    maybe_pandoc_cmd: option<str>\n+) -> result::t<option<str>, str> {\n+    // FIXME: When we actually need pandoc then look for it first\n+    // on the path, then in cabal; test to make sure pandoc works\n+    alt maybe_pandoc_cmd {\n+      some(pandoc_cmd) { result::ok(some(pandoc_cmd)) }\n+      none { result::ok(some(\"pandoc\")) }\n+    }\n+}\n+\n+#[test]\n+fn should_error_with_no_crates() {\n+    let config = parse_config([\"rustdoc\"]);\n+    assert result::get_err(config) == \"no crates specified\";\n+}\n+\n+#[test]\n+fn should_error_with_multiple_crates() {\n+    let config = parse_config([\"rustdoc\", \"crate1.rc\", \"crate2.rc\"]);\n+    assert result::get_err(config) == \"multiple crates specified\";\n+}\n+\n+#[test]\n+fn should_set_output_dir_to_cwd_if_not_provided() {\n+    let config = parse_config([\"rustdoc\", \"crate.rc\"]);\n+    assert result::get(config).output_dir == \".\";\n+}\n+\n+#[test]\n+fn should_set_output_dir_if_provided() {\n+    let config = parse_config([\n+        \"rustdoc\", \"crate.rc\", \"--output-dir\", \"snuggles\"\n+    ]);\n+    assert result::get(config).output_dir == \"snuggles\";\n+}\n+\n+#[test]\n+fn should_set_output_format_to_pandoc_html_if_not_provided() {\n+    let config = parse_config([\"rustdoc\", \"crate.rc\"]);\n+    assert result::get(config).output_format == pandoc_html;\n+}\n+\n+#[test]\n+fn should_set_output_format_to_markdown_if_requested() {\n+    let config = parse_config([\n+        \"rustdoc\", \"crate.rc\", \"--output-format\", \"markdown\"\n+    ]);\n+    assert result::get(config).output_format == markdown;\n+}\n+\n+#[test]\n+fn should_set_output_format_to_pandoc_html_if_requested() {\n+    let config = parse_config([\n+        \"rustdoc\", \"crate.rc\", \"--output-format\", \"html\"\n+    ]);\n+    assert result::get(config).output_format == pandoc_html;\n+}\n+\n+#[test]\n+fn should_error_on_bogus_format() {\n+    let config = parse_config([\n+        \"rustdoc\", \"crate.rc\", \"--output-format\", \"bogus\"\n+    ]);\n+    assert result::get_err(config) == \"unknown output format 'bogus'\";\n+}\n+\n+#[test]\n+fn should_set_output_style_to_doc_per_mod_by_default() {\n+    let config = parse_config([\"rustdoc\", \"crate.rc\"]);\n+    assert result::get(config).output_style == doc_per_mod;\n+}\n+\n+#[test]\n+fn should_set_output_style_to_one_doc_if_requested() {\n+    let config = parse_config([\n+        \"rustdoc\", \"crate.rc\", \"--output-style\", \"doc-per-crate\"\n+    ]);\n+    assert result::get(config).output_style == doc_per_crate;\n+}\n+\n+#[test]\n+fn should_set_output_style_to_doc_per_mod_if_requested() {\n+    let config = parse_config([\n+        \"rustdoc\", \"crate.rc\", \"--output-style\", \"doc-per-mod\"\n+    ]);\n+    assert result::get(config).output_style == doc_per_mod;\n+}\n+\n+#[test]\n+fn should_error_on_bogus_output_style() {\n+    let config = parse_config([\n+        \"rustdoc\", \"crate.rc\", \"--output-style\", \"bogus\"\n+    ]);\n+    assert result::get_err(config) == \"unknown output style 'bogus'\";\n+}\n+\n+#[test]\n+fn should_set_pandoc_command_if_requested() {\n+    let config = parse_config([\n+        \"rustdoc\", \"crate.rc\", \"--pandoc-cmd\", \"panda-bear-doc\"\n+    ]);\n+    assert result::get(config).pandoc_cmd == some(\"panda-bear-doc\");\n+}\n+\n+#[test]\n+fn should_set_pandoc_command_when_using_pandoc() {\n+    let config = parse_config([\"rustdoc\", \"crate.rc\"]);\n+    assert result::get(config).pandoc_cmd == some(\"pandoc\");\n+}\n\\ No newline at end of file"}, {"sha": "c2bf87475b15b3e901438b4f71330604259886da", "filename": "src/rustdoc/rustdoc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/222cfbec6493d3cd099a7592e7948a7172469a66/src%2Frustdoc%2Frustdoc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/222cfbec6493d3cd099a7592e7948a7172469a66/src%2Frustdoc%2Frustdoc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rc?ref=222cfbec6493d3cd099a7592e7948a7172469a66", "patch": "@@ -12,6 +12,7 @@\n use std;\n use rustc;\n \n+mod config;\n mod parse;\n mod extract;\n mod attr_parser;"}]}