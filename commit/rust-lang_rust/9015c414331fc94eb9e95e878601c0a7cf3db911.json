{"sha": "9015c414331fc94eb9e95e878601c0a7cf3db911", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwMTVjNDE0MzMxZmM5NGViOWU5NWU4Nzg2MDFjMGE3Y2YzZGI5MTE=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-06-09T22:04:58Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-06-09T22:04:58Z"}, "message": "save_analysis: improve pretty printing of enum", "tree": {"sha": "545bd924daca7ebab1948868a38122bebefed118", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/545bd924daca7ebab1948868a38122bebefed118"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9015c414331fc94eb9e95e878601c0a7cf3db911", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9015c414331fc94eb9e95e878601c0a7cf3db911", "html_url": "https://github.com/rust-lang/rust/commit/9015c414331fc94eb9e95e878601c0a7cf3db911", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9015c414331fc94eb9e95e878601c0a7cf3db911/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51e17249da9aa6ee30f88e30813a0d5b04cd2427", "url": "https://api.github.com/repos/rust-lang/rust/commits/51e17249da9aa6ee30f88e30813a0d5b04cd2427", "html_url": "https://github.com/rust-lang/rust/commit/51e17249da9aa6ee30f88e30813a0d5b04cd2427"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "da8956ccb4da483d08091253a6c9b222754b3f79", "filename": "src/librustc_hir_pretty/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9015c414331fc94eb9e95e878601c0a7cf3db911/src%2Flibrustc_hir_pretty%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9015c414331fc94eb9e95e878601c0a7cf3db911/src%2Flibrustc_hir_pretty%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir_pretty%2Flib.rs?ref=9015c414331fc94eb9e95e878601c0a7cf3db911", "patch": "@@ -239,6 +239,16 @@ pub fn fn_to_string(\n     to_string(NO_ANN, |s| s.print_fn(decl, header, name, generics, vis, arg_names, body_id))\n }\n \n+pub fn enum_def_to_string(\n+    enum_definition: &hir::EnumDef<'_>,\n+    generics: &hir::Generics<'_>,\n+    name: Symbol,\n+    span: rustc_span::Span,\n+    visibility: &hir::Visibility<'_>,\n+) -> String {\n+    to_string(NO_ANN, |s| s.print_enum_def(enum_definition, generics, name, span, visibility))\n+}\n+\n impl<'a> State<'a> {\n     pub fn cbox(&mut self, u: usize) {\n         self.s.cbox(u);"}, {"sha": "1ecec5c1c68aaa041f0f74d5c80efde3654cc132", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9015c414331fc94eb9e95e878601c0a7cf3db911/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9015c414331fc94eb9e95e878601c0a7cf3db911/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=9015c414331fc94eb9e95e878601c0a7cf3db911", "patch": "@@ -17,7 +17,7 @@ use rustc_hir::def::{CtorOf, DefKind as HirDefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::Node;\n-use rustc_hir_pretty::{fn_to_string, ty_to_string};\n+use rustc_hir_pretty::{enum_def_to_string, fn_to_string, ty_to_string};\n use rustc_middle::hir::map::Map;\n use rustc_middle::middle::cstore::ExternCrate;\n use rustc_middle::middle::privacy::AccessLevels;\n@@ -292,13 +292,12 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                     attributes: lower_attributes(item.attrs.to_vec(), self),\n                 }))\n             }\n-            hir::ItemKind::Enum(ref def, _) => {\n+            hir::ItemKind::Enum(ref def, ref generics) => {\n                 let name = item.ident.to_string();\n                 let qualname = format!(\"::{}\", self.tcx.def_path_str(def_id));\n                 filter!(self.span_utils, item.ident.span);\n-                let variants_str =\n-                    def.variants.iter().map(|v| v.ident.to_string()).collect::<Vec<_>>().join(\", \");\n-                let value = format!(\"{}::{{{}}}\", name, variants_str);\n+                let value =\n+                    enum_def_to_string(def, generics, item.ident.name, item.span, &item.vis);\n                 Some(Data::DefData(Def {\n                     kind: DefKind::Enum,\n                     id: id_from_def_id(def_id),"}]}