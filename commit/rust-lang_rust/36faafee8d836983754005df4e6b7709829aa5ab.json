{"sha": "36faafee8d836983754005df4e6b7709829aa5ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ZmFhZmVlOGQ4MzY5ODM3NTQwMDVkZjRlNmI3NzA5ODI5YWE1YWI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-11-25T14:00:26Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-12-01T18:44:29Z"}, "message": "Use suggestions instead of notes ref mismatches\n\nOn type mismatch errors, use a suggestion when encountering minimal\ndifferences in type differences due to refs, instead of a note.", "tree": {"sha": "73a4fa4f0e0dfc8ba35d65d776057e361442baa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73a4fa4f0e0dfc8ba35d65d776057e361442baa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36faafee8d836983754005df4e6b7709829aa5ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36faafee8d836983754005df4e6b7709829aa5ab", "html_url": "https://github.com/rust-lang/rust/commit/36faafee8d836983754005df4e6b7709829aa5ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36faafee8d836983754005df4e6b7709829aa5ab/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3ed21272d5f50c37c09f2a7f06c40f56b6ac298", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3ed21272d5f50c37c09f2a7f06c40f56b6ac298", "html_url": "https://github.com/rust-lang/rust/commit/e3ed21272d5f50c37c09f2a7f06c40f56b6ac298"}], "stats": {"total": 94, "additions": 58, "deletions": 36}, "files": [{"sha": "4724a0fa51b97f00c73caa82e48180aa1aa61c06", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/36faafee8d836983754005df4e6b7709829aa5ab/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36faafee8d836983754005df4e6b7709829aa5ab/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=36faafee8d836983754005df4e6b7709829aa5ab", "patch": "@@ -134,10 +134,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }\n         }\n \n-        if let Some(suggestion) = self.check_ref(expr,\n-                                                 checked_ty,\n-                                                 expected) {\n-            err.help(&suggestion);\n+        if let Some((msg, suggestion)) = self.check_ref(expr, checked_ty, expected) {\n+            err.span_suggestion(expr.span, msg, suggestion);\n         } else {\n             let mode = probe::Mode::MethodCall;\n             let suggestions = self.probe_for_return_type(syntax_pos::DUMMY_SP,\n@@ -214,15 +212,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                  expr: &hir::Expr,\n                  checked_ty: Ty<'tcx>,\n                  expected: Ty<'tcx>)\n-                 -> Option<String> {\n+                 -> Option<(&'static str, String)> {\n         match (&expected.sty, &checked_ty.sty) {\n             (&ty::TyRef(_, exp), &ty::TyRef(_, check)) => match (&exp.ty.sty, &check.ty.sty) {\n                 (&ty::TyStr, &ty::TyArray(arr, _)) |\n                 (&ty::TyStr, &ty::TySlice(arr)) if arr == self.tcx.types.u8 => {\n                     if let hir::ExprLit(_) = expr.node {\n                         let sp = self.sess().codemap().call_span_if_macro(expr.span);\n                         if let Ok(src) = self.tcx.sess.codemap().span_to_snippet(sp) {\n-                            return Some(format!(\"try `{}`\", &src[1..]));\n+                            return Some((\"consider removing the leading `b`\",\n+                                         src[1..].to_string()));\n                         }\n                     }\n                     None\n@@ -232,7 +231,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     if let hir::ExprLit(_) = expr.node {\n                         let sp = self.sess().codemap().call_span_if_macro(expr.span);\n                         if let Ok(src) = self.tcx.sess.codemap().span_to_snippet(sp) {\n-                            return Some(format!(\"try `b{}`\", src));\n+                            return Some((\"consider adding a leading `b`\",\n+                                         format!(\"b{}\", src)));\n                         }\n                     }\n                     None\n@@ -260,12 +260,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     // Use the callsite's span if this is a macro call. #41858\n                     let sp = self.sess().codemap().call_span_if_macro(expr.span);\n                     if let Ok(src) = self.tcx.sess.codemap().span_to_snippet(sp) {\n-                        return Some(format!(\"try with `{}{}`\",\n-                                            match mutability.mutbl {\n-                                                hir::Mutability::MutMutable => \"&mut \",\n-                                                hir::Mutability::MutImmutable => \"&\",\n-                                            },\n-                                            &src));\n+                        return Some(match mutability.mutbl {\n+                            hir::Mutability::MutMutable => {\n+                                (\"consider mutably borrowing here\", format!(\"&mut {}\", src))\n+                            }\n+                            hir::Mutability::MutImmutable => {\n+                                (\"consider borrowing here\", format!(\"&{}\", src))\n+                            }\n+                        });\n                     }\n                 }\n                 None\n@@ -284,7 +286,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         // Maybe remove `&`?\n                         hir::ExprAddrOf(_, ref expr) => {\n                             if let Ok(code) = self.tcx.sess.codemap().span_to_snippet(expr.span) {\n-                                return Some(format!(\"try with `{}`\", code));\n+                                return Some((\"consider removing the borrow\",\n+                                             code));\n                             }\n                         }\n \n@@ -295,7 +298,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                                 expr.span) {\n                                 let sp = self.sess().codemap().call_span_if_macro(expr.span);\n                                 if let Ok(code) = self.tcx.sess.codemap().span_to_snippet(sp) {\n-                                    return Some(format!(\"try with `*{}`\", code));\n+                                    return Some((\"consider dereferencing the borrow\",\n+                                                 format!(\"*{}\", code)));\n                                 }\n                             }\n                         },"}, {"sha": "27b23f083217dd7b695e63bdbeefe12f04185d8c", "filename": "src/test/compile-fail/issue-13058.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36faafee8d836983754005df4e6b7709829aa5ab/src%2Ftest%2Fcompile-fail%2Fissue-13058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36faafee8d836983754005df4e6b7709829aa5ab/src%2Ftest%2Fcompile-fail%2Fissue-13058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13058.rs?ref=36faafee8d836983754005df4e6b7709829aa5ab", "patch": "@@ -35,5 +35,5 @@ fn check<'r, I: Iterator<Item=usize>, T: Itble<'r, usize, I>>(cont: &T) -> bool\n fn main() {\n     check((3, 5));\n //~^ ERROR mismatched types\n-//~| HELP try with `&(3, 5)`\n+//~| HELP consider borrowing here\n }"}, {"sha": "98ec3d9693fb8488f63381e9c4399dabff217d5c", "filename": "src/test/ui/deref-suggestion.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/36faafee8d836983754005df4e6b7709829aa5ab/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36faafee8d836983754005df4e6b7709829aa5ab/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-suggestion.stderr?ref=36faafee8d836983754005df4e6b7709829aa5ab", "patch": "@@ -17,31 +17,37 @@ error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:23:10\n    |\n 23 |     foo3(u); //~ ERROR mismatched types\n-   |          ^ expected u32, found &u32\n+   |          ^\n+   |          |\n+   |          expected u32, found &u32\n+   |          help: consider dereferencing the borrow: `*u`\n    |\n    = note: expected type `u32`\n               found type `&u32`\n-   = help: try with `*u`\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:30:9\n    |\n 30 |     foo(&\"aaa\".to_owned()); //~ ERROR mismatched types\n-   |         ^^^^^^^^^^^^^^^^^ expected struct `std::string::String`, found reference\n+   |         ^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         expected struct `std::string::String`, found reference\n+   |         help: consider removing the borrow: `\"aaa\".to_owned()`\n    |\n    = note: expected type `std::string::String`\n               found type `&std::string::String`\n-   = help: try with `\"aaa\".to_owned()`\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:31:9\n    |\n 31 |     foo(&mut \"aaa\".to_owned()); //~ ERROR mismatched types\n-   |         ^^^^^^^^^^^^^^^^^^^^^ expected struct `std::string::String`, found mutable reference\n+   |         ^^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         expected struct `std::string::String`, found mutable reference\n+   |         help: consider removing the borrow: `\"aaa\".to_owned()`\n    |\n    = note: expected type `std::string::String`\n               found type `&mut std::string::String`\n-   = help: try with `\"aaa\".to_owned()`\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:12:20"}, {"sha": "0a3e18043fe45ee51caba0651b583988235538fb", "filename": "src/test/ui/span/coerce-suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36faafee8d836983754005df4e6b7709829aa5ab/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36faafee8d836983754005df4e6b7709829aa5ab/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.rs?ref=36faafee8d836983754005df4e6b7709829aa5ab", "patch": "@@ -23,7 +23,7 @@ fn main() {\n     //~^ ERROR E0308\n     //~| NOTE expected &str, found struct `std::string::String`\n     //~| NOTE expected type `&str`\n-    //~| HELP try with `&String::new()`\n+    //~| HELP consider borrowing here\n     let y = String::new();\n     test(&y);\n     //~^ ERROR E0308"}, {"sha": "604b38bef6cc4d941d0a22a2e2529b6fb1af08b4", "filename": "src/test/ui/span/coerce-suggestions.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/36faafee8d836983754005df4e6b7709829aa5ab/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36faafee8d836983754005df4e6b7709829aa5ab/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr?ref=36faafee8d836983754005df4e6b7709829aa5ab", "patch": "@@ -14,11 +14,13 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:22:19\n    |\n 22 |     let x: &str = String::new();\n-   |                   ^^^^^^^^^^^^^ expected &str, found struct `std::string::String`\n+   |                   ^^^^^^^^^^^^^\n+   |                   |\n+   |                   expected &str, found struct `std::string::String`\n+   |                   help: consider borrowing here: `&String::new()`\n    |\n    = note: expected type `&str`\n               found type `std::string::String`\n-   = help: try with `&String::new()`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:28:10\n@@ -48,11 +50,13 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:42:9\n    |\n 42 |     s = format!(\"foo\");\n-   |         ^^^^^^^^^^^^^^ expected mutable reference, found struct `std::string::String`\n+   |         ^^^^^^^^^^^^^^\n+   |         |\n+   |         expected mutable reference, found struct `std::string::String`\n+   |         help: consider mutably borrowing here: `&mut format!(\"foo\")`\n    |\n    = note: expected type `&mut std::string::String`\n               found type `std::string::String`\n-   = help: try with `&mut format!(\"foo\")`\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 6 previous errors"}, {"sha": "b232bf74666b11df30d2544a894ab18c0526d021", "filename": "src/test/ui/str-lit-type-mismatch.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/36faafee8d836983754005df4e6b7709829aa5ab/src%2Ftest%2Fui%2Fstr-lit-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36faafee8d836983754005df4e6b7709829aa5ab/src%2Ftest%2Fui%2Fstr-lit-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr-lit-type-mismatch.stderr?ref=36faafee8d836983754005df4e6b7709829aa5ab", "patch": "@@ -2,31 +2,37 @@ error[E0308]: mismatched types\n   --> $DIR/str-lit-type-mismatch.rs:13:20\n    |\n 13 |     let x: &[u8] = \"foo\"; //~ ERROR mismatched types\n-   |                    ^^^^^ expected slice, found str\n+   |                    ^^^^^\n+   |                    |\n+   |                    expected slice, found str\n+   |                    help: consider adding a leading `b`: `b\"foo\"`\n    |\n    = note: expected type `&[u8]`\n               found type `&'static str`\n-   = help: try `b\"foo\"`\n \n error[E0308]: mismatched types\n   --> $DIR/str-lit-type-mismatch.rs:14:23\n    |\n 14 |     let y: &[u8; 4] = \"baaa\"; //~ ERROR mismatched types\n-   |                       ^^^^^^ expected array of 4 elements, found str\n+   |                       ^^^^^^\n+   |                       |\n+   |                       expected array of 4 elements, found str\n+   |                       help: consider adding a leading `b`: `b\"baaa\"`\n    |\n    = note: expected type `&[u8; 4]`\n               found type `&'static str`\n-   = help: try `b\"baaa\"`\n \n error[E0308]: mismatched types\n   --> $DIR/str-lit-type-mismatch.rs:15:19\n    |\n 15 |     let z: &str = b\"foo\"; //~ ERROR mismatched types\n-   |                   ^^^^^^ expected str, found array of 3 elements\n+   |                   ^^^^^^\n+   |                   |\n+   |                   expected str, found array of 3 elements\n+   |                   help: consider removing the leading `b`: `\"foo\"`\n    |\n    = note: expected type `&str`\n               found type `&'static [u8; 3]`\n-   = help: try `\"foo\"`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "444684507d387e91d54fd362d2d09eb6e2eb650b", "filename": "src/test/ui/suggestions/str-array-assignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36faafee8d836983754005df4e6b7709829aa5ab/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36faafee8d836983754005df4e6b7709829aa5ab/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.rs?ref=36faafee8d836983754005df4e6b7709829aa5ab", "patch": "@@ -28,5 +28,5 @@ fn main() { //~ NOTE expected `()` because of default return type\n   //~^ ERROR mismatched types\n   //~| NOTE expected &str, found str\n   //~| NOTE expected type\n-  //~| HELP try with `&s[..2]`\n+  //~| HELP consider borrowing here\n }"}, {"sha": "c65639805af6c48d936fccbfe7cd7c51f21fb0e1", "filename": "src/test/ui/suggestions/str-array-assignment.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36faafee8d836983754005df4e6b7709829aa5ab/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36faafee8d836983754005df4e6b7709829aa5ab/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.stderr?ref=36faafee8d836983754005df4e6b7709829aa5ab", "patch": "@@ -34,11 +34,13 @@ error[E0308]: mismatched types\n   --> $DIR/str-array-assignment.rs:27:17\n    |\n 27 |   let w: &str = s[..2];\n-   |                 ^^^^^^ expected &str, found str\n+   |                 ^^^^^^\n+   |                 |\n+   |                 expected &str, found str\n+   |                 help: consider borrowing here: `&s[..2]`\n    |\n    = note: expected type `&str`\n               found type `str`\n-   = help: try with `&s[..2]`\n \n error: aborting due to 4 previous errors\n "}]}