{"sha": "9b910e19ce9bcd27c6dad220aba38121dc85138e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliOTEwZTE5Y2U5YmNkMjdjNmRhZDIyMGFiYTM4MTIxZGM4NTEzOGU=", "commit": {"author": {"name": "oliver", "email": "16816606+o752d@users.noreply.github.com", "date": "2020-11-22T04:44:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-22T04:44:47Z"}, "message": "a typo\n\ntypo", "tree": {"sha": "36297030e53a3ad875103cb6e3999cb599c399f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36297030e53a3ad875103cb6e3999cb599c399f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b910e19ce9bcd27c6dad220aba38121dc85138e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfuey/CRBK7hj4Ov3rIwAAdHIIAF6ionAOYxHI86bnwkb/VAEv\nlV6Y2EnNL5L7gbYWn1httjVpCcoWR0rcKgSC+jfu/5RAQ1f2JqFAFgqWNuP6tz/e\nle/tQq66BzVmH8ofo6mSAjIKgA7Z+S6bTvn0mdL7TlYFnpuP2dzQMOriQsSB+c2Q\nfRADN2l7kwHKAI651Rx24q76ABbKAOMPGcfiudW7j3FYtiZF2khrRq4xsr7Frker\nZn/TZ3zryiKUkAS57/GND55gSlzKartnrTdjAn2LSmCgiRW5rF7eP7xqfJvDikW+\n+aWagSDxayU2sMdzcQJBd85emi2nIGyqtegdfGF26S3erq1ZtkWrrjbjE6CmTP0=\n=ci1k\n-----END PGP SIGNATURE-----\n", "payload": "tree 36297030e53a3ad875103cb6e3999cb599c399f5\nparent 0402c6ace7aff13bef4791f578ffb623da69fef2\nauthor oliver <16816606+o752d@users.noreply.github.com> 1606020287 +0000\ncommitter GitHub <noreply@github.com> 1606020287 +0000\n\na typo\n\ntypo"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b910e19ce9bcd27c6dad220aba38121dc85138e", "html_url": "https://github.com/rust-lang/rust/commit/9b910e19ce9bcd27c6dad220aba38121dc85138e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b910e19ce9bcd27c6dad220aba38121dc85138e/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0402c6ace7aff13bef4791f578ffb623da69fef2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0402c6ace7aff13bef4791f578ffb623da69fef2", "html_url": "https://github.com/rust-lang/rust/commit/0402c6ace7aff13bef4791f578ffb623da69fef2"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "62c73dbac48b4a28f622158d525361242913d2bb", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b910e19ce9bcd27c6dad220aba38121dc85138e/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b910e19ce9bcd27c6dad220aba38121dc85138e/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=9b910e19ce9bcd27c6dad220aba38121dc85138e", "patch": "@@ -129,7 +129,7 @@ fn match_assert_with_message<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>)\n         if let ExprKind::Block(ref block, _) = arms[0].body.kind;\n         if block.stmts.is_empty();\n         if let Some(block_expr) = &block.expr;\n-        // inner block is optional. unwarp it if it exists, or use the expression as is otherwise.\n+        // inner block is optional. unwrap it if it exists, or use the expression as is otherwise.\n         if let Some(begin_panic_call) = match block_expr.kind {\n             ExprKind::Block(ref inner_block, _) => &inner_block.expr,\n             _ => &block.expr,"}]}