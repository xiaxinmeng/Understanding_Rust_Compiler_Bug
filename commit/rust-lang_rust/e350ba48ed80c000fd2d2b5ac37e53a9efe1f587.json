{"sha": "e350ba48ed80c000fd2d2b5ac37e53a9efe1f587", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNTBiYTQ4ZWQ4MGMwMDBmZDJkMmI1YWMzN2U1M2E5ZWZlMWY1ODc=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "mackendy@localhost.localdomain", "date": "2018-05-09T21:14:43Z"}, "committer": {"name": "Dylan MacKenzie", "email": "mackendy@localhost.localdomain", "date": "2018-05-09T21:14:43Z"}, "message": "Use the \"Safety\" heading instead of \"Undefined Behavior\"", "tree": {"sha": "93f7112a1ec13e5ca1ec0f28e14292111e7b097e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93f7112a1ec13e5ca1ec0f28e14292111e7b097e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e350ba48ed80c000fd2d2b5ac37e53a9efe1f587", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e350ba48ed80c000fd2d2b5ac37e53a9efe1f587", "html_url": "https://github.com/rust-lang/rust/commit/e350ba48ed80c000fd2d2b5ac37e53a9efe1f587", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e350ba48ed80c000fd2d2b5ac37e53a9efe1f587/comments", "author": null, "committer": null, "parents": [{"sha": "d7209d5babae4e1e428771287eaca6165e43972c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7209d5babae4e1e428771287eaca6165e43972c", "html_url": "https://github.com/rust-lang/rust/commit/d7209d5babae4e1e428771287eaca6165e43972c"}], "stats": {"total": 74, "additions": 9, "deletions": 65}, "files": [{"sha": "df3f6c430311a93214dae543355ec1d1ca9ce5fb", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e350ba48ed80c000fd2d2b5ac37e53a9efe1f587/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e350ba48ed80c000fd2d2b5ac37e53a9efe1f587/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=e350ba48ed80c000fd2d2b5ac37e53a9efe1f587", "patch": "@@ -971,12 +971,6 @@ extern \"rust-intrinsic\" {\n     ///\n     /// # Safety\n     ///\n-    /// `copy_nonoverlapping` is unsafe because it dereferences a raw pointer.\n-    /// The caller must ensure that `src` points to a valid sequence of type\n-    /// `T`.\n-    ///\n-    /// # Undefined Behavior\n-    ///\n     /// Behavior is undefined if any of the following conditions are violated:\n     ///\n     /// * The region of memory which begins at `src` and has a length of\n@@ -986,17 +980,19 @@ extern \"rust-intrinsic\" {\n     ///   `count * size_of::<T>()` bytes must be valid (but may or may not be\n     ///   initialized).\n     ///\n+    /// * The two regions of memory must *not* overlap.\n+    ///\n     /// * `src` must be properly aligned.\n     ///\n     /// * `dst` must be properly aligned.\n     ///\n-    /// * The two regions of memory must *not* overlap.\n+    /// Additionally, if `T` is not [`Copy`], only the region at `src` *or* the\n+    /// region at `dst` can be used or dropped after calling\n+    /// `copy_nonoverlapping`.  `copy_nonoverlapping` creates bitwise copies of\n+    /// `T`, regardless of whether `T: Copy`, which can result in undefined\n+    /// behavior if both copies are used.\n     ///\n-    /// Additionally, if `T` is not [`Copy`](../marker/trait.Copy.html), only\n-    /// the region at `src` *or* the region at `dst` can be used or dropped\n-    /// after calling `copy_nonoverlapping`.  `copy_nonoverlapping` creates\n-    /// bitwise copies of `T`, regardless of whether `T: Copy`, which can result\n-    /// in undefined behavior if both copies are used.\n+    /// [`Copy`]: ../marker/trait.Copy.html\n     ///\n     /// # Examples\n     ///\n@@ -1060,11 +1056,6 @@ extern \"rust-intrinsic\" {\n     ///\n     /// # Safety\n     ///\n-    /// `copy` is unsafe because it dereferences a raw pointer. The caller must\n-    /// ensure that `src` points to a valid sequence of type `T`.\n-    ///\n-    /// # Undefined Behavior\n-    ///\n     /// Behavior is undefined if any of the following conditions are violated:\n     ///\n     /// * The region of memory which begins at `src` and has a length of\n@@ -1112,11 +1103,6 @@ extern \"rust-intrinsic\" {\n     ///\n     /// # Safety\n     ///\n-    /// `write_bytes` is unsafe because it dereferences a raw pointer. The\n-    /// caller must ensure that the poiinter points to a valid value of type `T`.\n-    ///\n-    /// # Undefined Behavior\n-    ///\n     /// Behavior is undefined if any of the following conditions are violated:\n     ///\n     /// * The region of memory which begins at `dst` and has a length of"}, {"sha": "50627ee464d39d5401b1c416f98f2101100e7189", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 43, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e350ba48ed80c000fd2d2b5ac37e53a9efe1f587/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e350ba48ed80c000fd2d2b5ac37e53a9efe1f587/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=e350ba48ed80c000fd2d2b5ac37e53a9efe1f587", "patch": "@@ -54,11 +54,6 @@ pub use intrinsics::write_bytes;\n ///\n /// # Safety\n ///\n-/// `drop_in_place` is unsafe because it dereferences a raw pointer. The caller\n-/// must ensure that the pointer points to a valid value of type `T`.\n-///\n-/// # Undefined Behavior\n-///\n /// Behavior is undefined if any of the following conditions are violated:\n ///\n /// * `to_drop` must point to valid memory.\n@@ -153,11 +148,6 @@ pub const fn null_mut<T>() -> *mut T { 0 as *mut T }\n ///\n /// # Safety\n ///\n-/// `swap` is unsafe because it dereferences a raw pointer. The caller must\n-/// ensure that both pointers point to valid values of type `T`.\n-///\n-/// # Undefined Behavior\n-///\n /// Behavior is undefined if any of the following conditions are violated:\n ///\n /// * `x` and `y` must point to valid, initialized memory.\n@@ -307,14 +297,9 @@ unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n /// operates on raw pointers instead of references. When references are\n /// available, [`mem::replace`] should be preferred.\n ///\n-/// # Safety\n-///\n-/// `replace` is unsafe because it dereferences a raw pointer. The caller\n-/// must ensure that the pointer points to a valid value of type `T`.\n-///\n /// [`mem::replace`]: ../mem/fn.replace.html\n ///\n-/// # Undefined Behavior\n+/// # Safety\n ///\n /// Behavior is undefined if any of the following conditions are violated:\n ///\n@@ -350,11 +335,6 @@ pub unsafe fn replace<T>(dest: *mut T, mut src: T) -> T {\n ///\n /// # Safety\n ///\n-/// `read` is unsafe because it dereferences a raw pointer. The caller\n-/// must ensure that the pointer points to a valid value of type `T`.\n-///\n-/// # Undefined Behavior\n-///\n /// Behavior is undefined if any of the following conditions are violated:\n ///\n /// * `src` must point to valid, initialized memory.\n@@ -440,11 +420,6 @@ pub unsafe fn read<T>(src: *const T) -> T {\n ///\n /// # Safety\n ///\n-/// `read_unaligned` is unsafe because it dereferences a raw pointer. The caller\n-/// must ensure that the pointer points to a valid value of type `T`.\n-///\n-/// # Undefined Behavior\n-///\n /// Behavior is undefined if any of the following conditions are violated:\n ///\n /// * `src` must point to valid, initialized memory.\n@@ -523,10 +498,6 @@ pub unsafe fn read_unaligned<T>(src: *const T) -> T {\n ///\n /// # Safety\n ///\n-/// `write` is unsafe because it dereferences a raw pointer.\n-///\n-/// # Undefined Behavior\n-///\n /// Behavior is undefined if any of the following conditions are violated:\n ///\n /// * `dst` must point to valid memory.\n@@ -600,10 +571,6 @@ pub unsafe fn write<T>(dst: *mut T, src: T) {\n ///\n /// # Safety\n ///\n-/// `write_unaligned` is unsafe because it dereferences a raw pointer.\n-///\n-/// # Undefined Behavior\n-///\n /// Behavior is undefined if any of the following conditions are violated:\n ///\n /// * `dst` must point to valid memory.\n@@ -671,11 +638,6 @@ pub unsafe fn write_unaligned<T>(dst: *mut T, src: T) {\n ///\n /// # Safety\n ///\n-/// `read_volatile` is unsafe because it dereferences a raw pointer. The caller\n-/// must ensure that the pointer points to a valid value of type `T`.\n-///\n-/// # Undefined Behavior\n-///\n /// Behavior is undefined if any of the following conditions are violated:\n ///\n /// * `src` must point to valid, initialized memory.\n@@ -741,10 +703,6 @@ pub unsafe fn read_volatile<T>(src: *const T) -> T {\n ///\n /// # Safety\n ///\n-/// `write_volatile` is unsafe because it dereferences a raw pointer.\n-///\n-/// # Undefined Behavior\n-///\n /// Behavior is undefined if any of the following conditions are violated:\n ///\n /// * `dst` must point to valid memory."}]}