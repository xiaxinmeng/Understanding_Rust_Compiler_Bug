{"sha": "2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZDYzYTJlMTBhYTEzMGY2ZDdiMTBkZGFhZDhmODEyMGQxYjhjNTg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-23T23:19:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-23T23:19:53Z"}, "message": "Rollup merge of #57779 - estebank:recover-struct-fields, r=davidtwco\n\nRecover from parse errors in literal struct fields and incorrect float literals\n\nFix #52496.", "tree": {"sha": "cc97523c0cfde2cfcc0429ffcd87633bb4016ab4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc97523c0cfde2cfcc0429ffcd87633bb4016ab4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcSPaZCRBK7hj4Ov3rIwAAdHIIAGiG80jyueT4HBZ6wiK/hAkF\nCxyXeMqaFKsNMoWiSI65+1sTUai3EGAForZ6TE009QNUrD6hoJAfnB4LzPEc9jnR\nt2OVyEMMRIt//X00zs7WpyqtsXkY6zwAH78If4IAi+ErAmon73yPKG+ihN1ufMN6\nScV0mEHBB3Ql5nLFgzl8gWPhUQ/cCikBamQdQvMEqlfVV0JS7dG9E7lmi88Jc2HD\nmRD7L7vgid//6lP0gLcv+bNVdQoomMlyaXI2QVxTyoofqJqn1csr77tLAUHr8ARf\nJfhSR4nKDv3W8M/8tnvObFzDm2sjoF8lZ78zIfVP0xePdJ1cOABADnMFMpnX6Jc=\n=UUvI\n-----END PGP SIGNATURE-----\n", "payload": "tree cc97523c0cfde2cfcc0429ffcd87633bb4016ab4\nparent b0ec43f5692754c06701a534755f346aecc1d122\nparent 4745b86202f0e96b4c0d0de05220a5ac4b5308ef\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1548285593 +0100\ncommitter GitHub <noreply@github.com> 1548285593 +0100\n\nRollup merge of #57779 - estebank:recover-struct-fields, r=davidtwco\n\nRecover from parse errors in literal struct fields and incorrect float literals\n\nFix #52496.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58", "html_url": "https://github.com/rust-lang/rust/commit/2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0ec43f5692754c06701a534755f346aecc1d122", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0ec43f5692754c06701a534755f346aecc1d122", "html_url": "https://github.com/rust-lang/rust/commit/b0ec43f5692754c06701a534755f346aecc1d122"}, {"sha": "4745b86202f0e96b4c0d0de05220a5ac4b5308ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/4745b86202f0e96b4c0d0de05220a5ac4b5308ef", "html_url": "https://github.com/rust-lang/rust/commit/4745b86202f0e96b4c0d0de05220a5ac4b5308ef"}], "stats": {"total": 269, "additions": 225, "deletions": 44}, "files": [{"sha": "325bc2fb91ab8951159d98e98cf0ce5becc4a409", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 84, "deletions": 10, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58", "patch": "@@ -100,6 +100,7 @@ pub enum PathStyle {\n enum SemiColonMode {\n     Break,\n     Ignore,\n+    Comma,\n }\n \n #[derive(Clone, Copy, PartialEq, Debug)]\n@@ -1988,6 +1989,44 @@ impl<'a> Parser<'a> {\n \n                 result.unwrap()\n             }\n+            token::Dot if self.look_ahead(1, |t| match t {\n+                token::Literal(parse::token::Lit::Integer(_) , _) => true,\n+                _ => false,\n+            }) => { // recover from `let x = .4;`\n+                let lo = self.span;\n+                self.bump();\n+                if let token::Literal(\n+                    parse::token::Lit::Integer(val),\n+                    suffix,\n+                ) = self.token {\n+                    let suffix = suffix.and_then(|s| {\n+                        let s = s.as_str().get();\n+                        if [\"f32\", \"f64\"].contains(&s) {\n+                            Some(s)\n+                        } else {\n+                            None\n+                        }\n+                    }).unwrap_or(\"\");\n+                    self.bump();\n+                    let sp = lo.to(self.prev_span);\n+                    let mut err = self.diagnostic()\n+                        .struct_span_err(sp, \"float literals must have an integer part\");\n+                    err.span_suggestion_with_applicability(\n+                        sp,\n+                        \"must have an integer part\",\n+                        format!(\"0.{}{}\", val, suffix),\n+                        Applicability::MachineApplicable,\n+                    );\n+                    err.emit();\n+                    return Ok(match suffix {\n+                        \"f32\" => ast::LitKind::Float(val, ast::FloatTy::F32),\n+                        \"f64\" => ast::LitKind::Float(val, ast::FloatTy::F64),\n+                        _ => ast::LitKind::FloatUnsuffixed(val),\n+                    });\n+                } else {\n+                    unreachable!();\n+                };\n+            }\n             _ => { return self.unexpected_last(&self.token); }\n         };\n \n@@ -2656,8 +2695,24 @@ impl<'a> Parser<'a> {\n                 break;\n             }\n \n+            let mut recovery_field = None;\n+            if let token::Ident(ident, _) = self.token {\n+                if !self.token.is_reserved_ident() && self.look_ahead(1, |t| *t == token::Colon) {\n+                    // Use in case of error after field-looking code: `S { foo: () with a }`\n+                    let mut ident = ident.clone();\n+                    ident.span = self.span;\n+                    recovery_field = Some(ast::Field {\n+                        ident,\n+                        span: self.span,\n+                        expr: self.mk_expr(self.span, ExprKind::Err, ThinVec::new()),\n+                        is_shorthand: false,\n+                        attrs: ThinVec::new(),\n+                    });\n+                }\n+            }\n+            let mut parsed_field = None;\n             match self.parse_field() {\n-                Ok(f) => fields.push(f),\n+                Ok(f) => parsed_field = Some(f),\n                 Err(mut e) => {\n                     e.span_label(struct_sp, \"while parsing this struct\");\n                     e.emit();\n@@ -2666,19 +2721,28 @@ impl<'a> Parser<'a> {\n                     // what comes next as additional fields, rather than\n                     // bailing out until next `}`.\n                     if self.token != token::Comma {\n-                        self.recover_stmt();\n-                        break;\n+                        self.recover_stmt_(SemiColonMode::Comma, BlockMode::Ignore);\n+                        if self.token != token::Comma {\n+                            break;\n+                        }\n                     }\n                 }\n             }\n \n             match self.expect_one_of(&[token::Comma],\n                                      &[token::CloseDelim(token::Brace)]) {\n-                Ok(()) => {}\n+                Ok(()) => if let Some(f) = parsed_field.or(recovery_field) {\n+                    // only include the field if there's no parse error for the field name\n+                    fields.push(f);\n+                }\n                 Err(mut e) => {\n+                    if let Some(f) = recovery_field {\n+                        fields.push(f);\n+                    }\n+                    e.span_label(struct_sp, \"while parsing this struct\");\n                     e.emit();\n-                    self.recover_stmt();\n-                    break;\n+                    self.recover_stmt_(SemiColonMode::Comma, BlockMode::Ignore);\n+                    self.eat(&token::Comma);\n                 }\n             }\n         }\n@@ -4542,13 +4606,13 @@ impl<'a> Parser<'a> {\n                 token::CloseDelim(token::DelimToken::Brace) => {\n                     if brace_depth == 0 {\n                         debug!(\"recover_stmt_ return - close delim {:?}\", self.token);\n-                        return;\n+                        break;\n                     }\n                     brace_depth -= 1;\n                     self.bump();\n                     if in_block && bracket_depth == 0 && brace_depth == 0 {\n                         debug!(\"recover_stmt_ return - block end {:?}\", self.token);\n-                        return;\n+                        break;\n                     }\n                 }\n                 token::CloseDelim(token::DelimToken::Bracket) => {\n@@ -4560,15 +4624,25 @@ impl<'a> Parser<'a> {\n                 }\n                 token::Eof => {\n                     debug!(\"recover_stmt_ return - Eof\");\n-                    return;\n+                    break;\n                 }\n                 token::Semi => {\n                     self.bump();\n                     if break_on_semi == SemiColonMode::Break &&\n                        brace_depth == 0 &&\n                        bracket_depth == 0 {\n                         debug!(\"recover_stmt_ return - Semi\");\n-                        return;\n+                        break;\n+                    }\n+                }\n+                token::Comma => {\n+                    if break_on_semi == SemiColonMode::Comma &&\n+                       brace_depth == 0 &&\n+                       bracket_depth == 0 {\n+                        debug!(\"recover_stmt_ return - Semi\");\n+                        break;\n+                    } else {\n+                        self.bump();\n                     }\n                 }\n                 _ => {"}, {"sha": "4e9453653735a45d5cfc0d2b8f37f775d795a5bf", "filename": "src/test/ui/issues/issue-52496.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58/src%2Ftest%2Fui%2Fissues%2Fissue-52496.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58/src%2Ftest%2Fui%2Fissues%2Fissue-52496.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52496.rs?ref=2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58", "patch": "@@ -0,0 +1,12 @@\n+struct Foo { bar: f64, baz: i64, bat: i64 }\n+\n+fn main() {\n+    let _ = Foo { bar: .5, baz: 42 };\n+    //~^ ERROR float literals must have an integer part\n+    //~| ERROR missing field `bat` in initializer of `Foo`\n+    let bar = 1.5f32;\n+    let _ = Foo { bar.into(), bat: -1, . };\n+    //~^ ERROR expected one of\n+    //~| ERROR missing fields `bar`, `baz` in initializer of `Foo`\n+    //~| ERROR expected identifier, found `.`\n+}"}, {"sha": "43009a15bd49a2466cba97a6fa403de17b536ffb", "filename": "src/test/ui/issues/issue-52496.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58/src%2Ftest%2Fui%2Fissues%2Fissue-52496.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58/src%2Ftest%2Fui%2Fissues%2Fissue-52496.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52496.stderr?ref=2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58", "patch": "@@ -0,0 +1,37 @@\n+error: float literals must have an integer part\n+  --> $DIR/issue-52496.rs:4:24\n+   |\n+LL |     let _ = Foo { bar: .5, baz: 42 };\n+   |                        ^^ help: must have an integer part: `0.5`\n+\n+error: expected one of `,` or `}`, found `.`\n+  --> $DIR/issue-52496.rs:8:22\n+   |\n+LL |     let _ = Foo { bar.into(), bat: -1, . };\n+   |             ---      ^ expected one of `,` or `}` here\n+   |             |\n+   |             while parsing this struct\n+\n+error: expected identifier, found `.`\n+  --> $DIR/issue-52496.rs:8:40\n+   |\n+LL |     let _ = Foo { bar.into(), bat: -1, . };\n+   |             ---                        ^ expected identifier\n+   |             |\n+   |             while parsing this struct\n+\n+error[E0063]: missing field `bat` in initializer of `Foo`\n+  --> $DIR/issue-52496.rs:4:13\n+   |\n+LL |     let _ = Foo { bar: .5, baz: 42 };\n+   |             ^^^ missing `bat`\n+\n+error[E0063]: missing fields `bar`, `baz` in initializer of `Foo`\n+  --> $DIR/issue-52496.rs:8:13\n+   |\n+LL |     let _ = Foo { bar.into(), bat: -1, . };\n+   |             ^^^ missing `bar`, `baz`\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0063`."}, {"sha": "2c1e152dcee750ceb10b086d0428453405c048e1", "filename": "src/test/ui/parser/removed-syntax-with-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-1.rs?ref=2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58", "patch": "@@ -5,7 +5,6 @@ fn main() {\n     }\n \n     let a = S { foo: (), bar: () };\n-    let b = S { foo: () with a };\n+    let b = S { foo: () with a, bar: () };\n     //~^ ERROR expected one of `,`, `.`, `?`, `}`, or an operator, found `with`\n-    //~| ERROR missing field `bar` in initializer of `main::S`\n }"}, {"sha": "a157873916a649779a6bf94b8ee84ebc692bb4d9", "filename": "src/test/ui/parser/removed-syntax-with-1.stderr", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-1.stderr?ref=2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58", "patch": "@@ -1,15 +1,10 @@\n error: expected one of `,`, `.`, `?`, `}`, or an operator, found `with`\n   --> $DIR/removed-syntax-with-1.rs:8:25\n    |\n-LL |     let b = S { foo: () with a };\n-   |                         ^^^^ expected one of `,`, `.`, `?`, `}`, or an operator here\n+LL |     let b = S { foo: () with a, bar: () };\n+   |             -           ^^^^ expected one of `,`, `.`, `?`, `}`, or an operator here\n+   |             |\n+   |             while parsing this struct\n \n-error[E0063]: missing field `bar` in initializer of `main::S`\n-  --> $DIR/removed-syntax-with-1.rs:8:13\n-   |\n-LL |     let b = S { foo: () with a };\n-   |             ^ missing `bar`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0063`."}, {"sha": "f666da49696ba6499a352052288992918b6d225b", "filename": "src/test/ui/parser/removed-syntax-with-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-2.rs?ref=2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58", "patch": "@@ -7,6 +7,5 @@ fn main() {\n     let a = S { foo: (), bar: () };\n     let b = S { foo: (), with a };\n     //~^ ERROR expected one of `,` or `}`, found `a`\n-    //~| ERROR cannot find value `with` in this scope\n-    //~| ERROR struct `main::S` has no field named `with`\n+    //~| ERROR missing field `bar` in initializer of `main::S`\n }"}, {"sha": "7717b49d3a2c7d443c98770a5a28208776a80018", "filename": "src/test/ui/parser/removed-syntax-with-2.stderr", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-2.stderr?ref=2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58", "patch": "@@ -2,23 +2,16 @@ error: expected one of `,` or `}`, found `a`\n   --> $DIR/removed-syntax-with-2.rs:8:31\n    |\n LL |     let b = S { foo: (), with a };\n-   |                               ^ expected one of `,` or `}` here\n+   |             -                 ^ expected one of `,` or `}` here\n+   |             |\n+   |             while parsing this struct\n \n-error[E0425]: cannot find value `with` in this scope\n-  --> $DIR/removed-syntax-with-2.rs:8:26\n+error[E0063]: missing field `bar` in initializer of `main::S`\n+  --> $DIR/removed-syntax-with-2.rs:8:13\n    |\n LL |     let b = S { foo: (), with a };\n-   |                          ^^^^ not found in this scope\n+   |             ^ missing `bar`\n \n-error[E0560]: struct `main::S` has no field named `with`\n-  --> $DIR/removed-syntax-with-2.rs:8:26\n-   |\n-LL |     let b = S { foo: (), with a };\n-   |                          ^^^^ `main::S` does not have this field\n-   |\n-   = note: available fields are: `foo`, `bar`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors occurred: E0425, E0560.\n-For more information about an error, try `rustc --explain E0425`.\n+For more information about this error, try `rustc --explain E0063`."}, {"sha": "58c40b3d96a4973af4ccf42bccd710f69345900a", "filename": "src/test/ui/parser/struct-field-numeric-shorthand.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58/src%2Ftest%2Fui%2Fparser%2Fstruct-field-numeric-shorthand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58/src%2Ftest%2Fui%2Fparser%2Fstruct-field-numeric-shorthand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-field-numeric-shorthand.rs?ref=2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58", "patch": "@@ -1,6 +1,9 @@\n struct Rgb(u8, u8, u8);\n \n fn main() {\n-    let _ = Rgb { 0, 1, 2 }; //~ ERROR expected identifier, found `0`\n-                             //~| ERROR missing fields `0`, `1`, `2` in initializer of `Rgb`\n+    let _ = Rgb { 0, 1, 2 };\n+    //~^ ERROR expected identifier, found `0`\n+    //~| ERROR expected identifier, found `1`\n+    //~| ERROR expected identifier, found `2`\n+    //~| ERROR missing fields `0`, `1`, `2` in initializer of `Rgb`\n }"}, {"sha": "cfb1f8201475469697bf279cf7b945673ec5cfb1", "filename": "src/test/ui/parser/struct-field-numeric-shorthand.stderr", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58/src%2Ftest%2Fui%2Fparser%2Fstruct-field-numeric-shorthand.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58/src%2Ftest%2Fui%2Fparser%2Fstruct-field-numeric-shorthand.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-field-numeric-shorthand.stderr?ref=2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58", "patch": "@@ -1,17 +1,33 @@\n error: expected identifier, found `0`\n   --> $DIR/struct-field-numeric-shorthand.rs:4:19\n    |\n-LL |     let _ = Rgb { 0, 1, 2 }; //~ ERROR expected identifier, found `0`\n+LL |     let _ = Rgb { 0, 1, 2 };\n    |             ---   ^ expected identifier\n    |             |\n    |             while parsing this struct\n \n+error: expected identifier, found `1`\n+  --> $DIR/struct-field-numeric-shorthand.rs:4:22\n+   |\n+LL |     let _ = Rgb { 0, 1, 2 };\n+   |             ---      ^ expected identifier\n+   |             |\n+   |             while parsing this struct\n+\n+error: expected identifier, found `2`\n+  --> $DIR/struct-field-numeric-shorthand.rs:4:25\n+   |\n+LL |     let _ = Rgb { 0, 1, 2 };\n+   |             ---         ^ expected identifier\n+   |             |\n+   |             while parsing this struct\n+\n error[E0063]: missing fields `0`, `1`, `2` in initializer of `Rgb`\n   --> $DIR/struct-field-numeric-shorthand.rs:4:13\n    |\n-LL |     let _ = Rgb { 0, 1, 2 }; //~ ERROR expected identifier, found `0`\n+LL |     let _ = Rgb { 0, 1, 2 };\n    |             ^^^ missing `0`, `1`, `2`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0063`."}, {"sha": "506ef8900b881e69d95737365d0dc00135ec19a0", "filename": "src/test/ui/suggestions/recover-invalid-float.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58/src%2Ftest%2Fui%2Fsuggestions%2Frecover-invalid-float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58/src%2Ftest%2Fui%2Fsuggestions%2Frecover-invalid-float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frecover-invalid-float.rs?ref=2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58", "patch": "@@ -0,0 +1,11 @@\n+fn main() {\n+    let _: usize = .3;\n+    //~^ ERROR float literals must have an integer part\n+    //~| ERROR mismatched types\n+    let _: usize = .42f32;\n+    //~^ ERROR float literals must have an integer part\n+    //~| ERROR mismatched types\n+    let _: usize = .5f64;\n+    //~^ ERROR float literals must have an integer part\n+    //~| ERROR mismatched types\n+}"}, {"sha": "c464676b444cc391344ad6ba0ceac1c5b058269f", "filename": "src/test/ui/suggestions/recover-invalid-float.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58/src%2Ftest%2Fui%2Fsuggestions%2Frecover-invalid-float.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58/src%2Ftest%2Fui%2Fsuggestions%2Frecover-invalid-float.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frecover-invalid-float.stderr?ref=2dd63a2e10aa130f6d7b10ddaad8f8120d1b8c58", "patch": "@@ -0,0 +1,42 @@\n+error: float literals must have an integer part\n+  --> $DIR/recover-invalid-float.rs:2:20\n+   |\n+LL |     let _: usize = .3;\n+   |                    ^^ help: must have an integer part: `0.3`\n+\n+error: float literals must have an integer part\n+  --> $DIR/recover-invalid-float.rs:5:20\n+   |\n+LL |     let _: usize = .42f32;\n+   |                    ^^^^^^ help: must have an integer part: `0.42f32`\n+\n+error: float literals must have an integer part\n+  --> $DIR/recover-invalid-float.rs:8:20\n+   |\n+LL |     let _: usize = .5f64;\n+   |                    ^^^^^ help: must have an integer part: `0.5f64`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/recover-invalid-float.rs:2:20\n+   |\n+LL |     let _: usize = .3;\n+   |                    ^^ expected usize, found floating-point number\n+   |\n+   = note: expected type `usize`\n+              found type `{float}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/recover-invalid-float.rs:5:20\n+   |\n+LL |     let _: usize = .42f32;\n+   |                    ^^^^^^ expected usize, found f32\n+\n+error[E0308]: mismatched types\n+  --> $DIR/recover-invalid-float.rs:8:20\n+   |\n+LL |     let _: usize = .5f64;\n+   |                    ^^^^^ expected usize, found f64\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}