{"sha": "d3ad264a91d9efba20c59753d88bc350f99dd952", "node_id": "C_kwDOAAsO6NoAKGQzYWQyNjRhOTFkOWVmYmEyMGM1OTc1M2Q4OGJjMzUwZjk5ZGQ5NTI", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-29T10:48:28Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-29T10:48:28Z"}, "message": "remove some manual hash stable impls", "tree": {"sha": "3ca8b519c88cc15ed47d4e2e39c77ab5349ea2cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ca8b519c88cc15ed47d4e2e39c77ab5349ea2cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3ad264a91d9efba20c59753d88bc350f99dd952", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3ad264a91d9efba20c59753d88bc350f99dd952", "html_url": "https://github.com/rust-lang/rust/commit/d3ad264a91d9efba20c59753d88bc350f99dd952", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3ad264a91d9efba20c59753d88bc350f99dd952/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dfdd64433b07239fbac50b8227b6e03a0ba8f30", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dfdd64433b07239fbac50b8227b6e03a0ba8f30", "html_url": "https://github.com/rust-lang/rust/commit/7dfdd64433b07239fbac50b8227b6e03a0ba8f30"}], "stats": {"total": 104, "additions": 15, "deletions": 89}, "files": [{"sha": "ce8591734188077a14b3d8b3c8d2db460d720217", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d3ad264a91d9efba20c59753d88bc350f99dd952/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ad264a91d9efba20c59753d88bc350f99dd952/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=d3ad264a91d9efba20c59753d88bc350f99dd952", "patch": "@@ -3,6 +3,7 @@ use rustc_index::bit_set;\n use rustc_index::vec;\n use smallvec::SmallVec;\n use std::hash::{BuildHasher, Hash, Hasher};\n+use std::marker::PhantomData;\n use std::mem;\n \n #[cfg(test)]\n@@ -261,6 +262,10 @@ impl<CTX> HashStable<CTX> for ! {\n     }\n }\n \n+impl<CTX, T> HashStable<CTX> for PhantomData<T> {\n+    fn hash_stable(&self, _ctx: &mut CTX, _hasher: &mut StableHasher) {}\n+}\n+\n impl<CTX> HashStable<CTX> for ::std::num::NonZeroU32 {\n     #[inline]\n     fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {"}, {"sha": "1f9b474ade12b79a0ca4de6775a619c910da7f83", "filename": "compiler/rustc_middle/src/traits/query.rs", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d3ad264a91d9efba20c59753d88bc350f99dd952/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ad264a91d9efba20c59753d88bc350f99dd952/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs?ref=d3ad264a91d9efba20c59753d88bc350f99dd952", "patch": "@@ -9,13 +9,9 @@ use crate::infer::canonical::{Canonical, QueryResponse};\n use crate::ty::error::TypeError;\n use crate::ty::subst::GenericArg;\n use crate::ty::{self, Ty, TyCtxt};\n-\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_errors::struct_span_err;\n-use rustc_query_system::ich::StableHashingContext;\n use rustc_span::source_map::Span;\n use std::iter::FromIterator;\n-use std::mem;\n \n pub mod type_op {\n     use crate::ty::fold::TypeFoldable;\n@@ -226,29 +222,9 @@ pub struct NormalizationResult<'tcx> {\n /// case they are called implied bounds). They are fed to the\n /// `OutlivesEnv` which in turn is supplied to the region checker and\n /// other parts of the inference system.\n-#[derive(Clone, Debug, TypeFoldable, TypeVisitable, Lift)]\n+#[derive(Clone, Debug, TypeFoldable, TypeVisitable, Lift, HashStable)]\n pub enum OutlivesBound<'tcx> {\n     RegionSubRegion(ty::Region<'tcx>, ty::Region<'tcx>),\n     RegionSubParam(ty::Region<'tcx>, ty::ParamTy),\n     RegionSubProjection(ty::Region<'tcx>, ty::ProjectionTy<'tcx>),\n }\n-\n-impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for OutlivesBound<'tcx> {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        mem::discriminant(self).hash_stable(hcx, hasher);\n-        match *self {\n-            OutlivesBound::RegionSubRegion(ref a, ref b) => {\n-                a.hash_stable(hcx, hasher);\n-                b.hash_stable(hcx, hasher);\n-            }\n-            OutlivesBound::RegionSubParam(ref a, ref b) => {\n-                a.hash_stable(hcx, hasher);\n-                b.hash_stable(hcx, hasher);\n-            }\n-            OutlivesBound::RegionSubProjection(ref a, ref b) => {\n-                a.hash_stable(hcx, hasher);\n-                b.hash_stable(hcx, hasher);\n-            }\n-        }\n-    }\n-}"}, {"sha": "cd00b26b8def0b77d72455ecb6fe07dcd4631747", "filename": "compiler/rustc_middle/src/ty/impls_ty.rs", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d3ad264a91d9efba20c59753d88bc350f99dd952/compiler%2Frustc_middle%2Fsrc%2Fty%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ad264a91d9efba20c59753d88bc350f99dd952/compiler%2Frustc_middle%2Fsrc%2Fty%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fimpls_ty.rs?ref=d3ad264a91d9efba20c59753d88bc350f99dd952", "patch": "@@ -101,46 +101,6 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for ty::subst::GenericArgKin\n     }\n }\n \n-impl<'a> HashStable<StableHashingContext<'a>> for ty::EarlyBoundRegion {\n-    #[inline]\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        self.def_id.hash_stable(hcx, hasher);\n-        self.index.hash_stable(hcx, hasher);\n-        self.name.hash_stable(hcx, hasher);\n-    }\n-}\n-\n-impl<'a> HashStable<StableHashingContext<'a>> for ty::RegionVid {\n-    #[inline]\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        self.index().hash_stable(hcx, hasher);\n-    }\n-}\n-\n-impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for ty::ConstVid<'tcx> {\n-    #[inline]\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        self.index.hash_stable(hcx, hasher);\n-    }\n-}\n-\n-impl<'tcx> HashStable<StableHashingContext<'tcx>> for ty::BoundVar {\n-    #[inline]\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'tcx>, hasher: &mut StableHasher) {\n-        self.index().hash_stable(hcx, hasher);\n-    }\n-}\n-\n-impl<'a, 'tcx, T> HashStable<StableHashingContext<'a>> for ty::Binder<'tcx, T>\n-where\n-    T: HashStable<StableHashingContext<'a>>,\n-{\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        self.as_ref().skip_binder().hash_stable(hcx, hasher);\n-        self.bound_vars().hash_stable(hcx, hasher);\n-    }\n-}\n-\n // AllocIds get resolved to whatever they point to (to be stable)\n impl<'a> HashStable<StableHashingContext<'a>> for mir::interpret::AllocId {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {"}, {"sha": "da9d51a29b18c45d79caa7a03597dff9118cd403", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 23, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d3ad264a91d9efba20c59753d88bc350f99dd952/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ad264a91d9efba20c59753d88bc350f99dd952/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=d3ad264a91d9efba20c59753d88bc350f99dd952", "patch": "@@ -1182,22 +1182,13 @@ impl<'tcx> OpaqueHiddenType<'tcx> {\n /// identified by both a universe, as well as a name residing within that universe. Distinct bound\n /// regions/types/consts within the same universe simply have an unknown relationship to one\n /// another.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, PartialOrd, Ord)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n+#[derive(HashStable, TyEncodable, TyDecodable)]\n pub struct Placeholder<T> {\n     pub universe: UniverseIndex,\n     pub name: T,\n }\n \n-impl<'a, T> HashStable<StableHashingContext<'a>> for Placeholder<T>\n-where\n-    T: HashStable<StableHashingContext<'a>>,\n-{\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        self.universe.hash_stable(hcx, hasher);\n-        self.name.hash_stable(hcx, hasher);\n-    }\n-}\n-\n pub type PlaceholderRegion = Placeholder<BoundRegionKind>;\n \n pub type PlaceholderType = Placeholder<BoundVar>;\n@@ -1581,6 +1572,7 @@ impl<'tcx> PolyTraitRef<'tcx> {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable, TypeVisitable)]\n+#[derive(HashStable)]\n pub struct ParamEnvAnd<'tcx, T> {\n     pub param_env: ParamEnv<'tcx>,\n     pub value: T,\n@@ -1598,18 +1590,6 @@ impl<'tcx, T> ParamEnvAnd<'tcx, T> {\n     }\n }\n \n-impl<'a, 'tcx, T> HashStable<StableHashingContext<'a>> for ParamEnvAnd<'tcx, T>\n-where\n-    T: HashStable<StableHashingContext<'a>>,\n-{\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        let ParamEnvAnd { ref param_env, ref value } = *self;\n-\n-        param_env.hash_stable(hcx, hasher);\n-        value.hash_stable(hcx, hasher);\n-    }\n-}\n-\n #[derive(Copy, Clone, Debug, HashStable, Encodable, Decodable)]\n pub struct Destructor {\n     /// The `DefId` of the destructor method"}, {"sha": "e961e3bf155459337f663f7e2fb5fe46f9406cb9", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d3ad264a91d9efba20c59753d88bc350f99dd952/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ad264a91d9efba20c59753d88bc350f99dd952/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=d3ad264a91d9efba20c59753d88bc350f99dd952", "patch": "@@ -986,6 +986,7 @@ pub enum BoundVariableKind {\n ///\n /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n+#[derive(HashStable)]\n pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);\n \n impl<'tcx, T> Binder<'tcx, T>\n@@ -1332,6 +1333,7 @@ impl<'tcx> fmt::Debug for Region<'tcx> {\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, PartialOrd, Ord)]\n+#[derive(HashStable)]\n pub struct EarlyBoundRegion {\n     pub def_id: DefId,\n     pub index: u32,\n@@ -1345,14 +1347,16 @@ impl fmt::Debug for EarlyBoundRegion {\n }\n \n /// A **`const`** **v**ariable **ID**.\n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+#[derive(HashStable, TyEncodable, TyDecodable)]\n pub struct ConstVid<'tcx> {\n     pub index: u32,\n     pub phantom: PhantomData<&'tcx ()>,\n }\n \n rustc_index::newtype_index! {\n     /// A **region** (lifetime) **v**ariable **ID**.\n+    #[derive(HashStable)]\n     pub struct RegionVid {\n         DEBUG_FORMAT = custom,\n     }\n@@ -1365,6 +1369,7 @@ impl Atom for RegionVid {\n }\n \n rustc_index::newtype_index! {\n+    #[derive(HashStable)]\n     pub struct BoundVar { .. }\n }\n "}]}