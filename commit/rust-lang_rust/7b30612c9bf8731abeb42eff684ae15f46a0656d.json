{"sha": "7b30612c9bf8731abeb42eff684ae15f46a0656d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMzA2MTJjOWJmODczMWFiZWI0MmVmZjY4NGFlMTVmNDZhMDY1NmQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-24T23:02:41Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-02T21:04:11Z"}, "message": "add is_any_ptr type test; this also helps pacify tidy", "tree": {"sha": "6d49654b414462b13b96c256b700001d42c03599", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d49654b414462b13b96c256b700001d42c03599"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b30612c9bf8731abeb42eff684ae15f46a0656d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b30612c9bf8731abeb42eff684ae15f46a0656d", "html_url": "https://github.com/rust-lang/rust/commit/7b30612c9bf8731abeb42eff684ae15f46a0656d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b30612c9bf8731abeb42eff684ae15f46a0656d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "144e5e99b5854c15bb9908a61e38b23f66fb6b46", "url": "https://api.github.com/repos/rust-lang/rust/commits/144e5e99b5854c15bb9908a61e38b23f66fb6b46", "html_url": "https://github.com/rust-lang/rust/commit/144e5e99b5854c15bb9908a61e38b23f66fb6b46"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "14da3875cdd79344a2b71015b94a3f487ad5a44b", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b30612c9bf8731abeb42eff684ae15f46a0656d/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b30612c9bf8731abeb42eff684ae15f46a0656d/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=7b30612c9bf8731abeb42eff684ae15f46a0656d", "patch": "@@ -1863,6 +1863,12 @@ impl<'tcx> TyS<'tcx> {\n         }\n     }\n \n+    /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).\n+    #[inline]\n+    pub fn is_any_ptr(&self) -> bool {\n+        self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()\n+    }\n+\n     /// Returns `true` if this type is an `Arc<T>`.\n     #[inline]\n     pub fn is_arc(&self) -> bool {"}, {"sha": "edddbc88500630d272b15d6a8be2423967de4cd4", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b30612c9bf8731abeb42eff684ae15f46a0656d/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b30612c9bf8731abeb42eff684ae15f46a0656d/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=7b30612c9bf8731abeb42eff684ae15f46a0656d", "patch": "@@ -105,8 +105,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 assert!(\n                     src.layout.ty.is_bool()       || src.layout.ty.is_char()     ||\n                     src.layout.ty.is_enum()       || src.layout.ty.is_integral() ||\n-                    src.layout.ty.is_unsafe_ptr() || src.layout.ty.is_fn_ptr()   ||\n-                    src.layout.ty.is_region_ptr(),\n+                    src.layout.ty.is_any_ptr(),\n                     \"Unexpected cast from type {:?}\", src.layout.ty\n                 )\n         }\n@@ -143,8 +142,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n \n         // Handle casting any ptr to raw ptr (might be a fat ptr).\n-        if (src.layout.ty.is_region_ptr() || src.layout.ty.is_unsafe_ptr() || src.layout.ty.is_fn_ptr()) &&\n-            dest_layout.ty.is_unsafe_ptr()\n+        if src.layout.ty.is_any_ptr() && dest_layout.ty.is_unsafe_ptr()\n         {\n             // The only possible size-unequal case was handled above.\n             assert_eq!(src.layout.size, dest_layout.size);"}, {"sha": "24bb712410089ee663210350b2d40318656ab977", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b30612c9bf8731abeb42eff684ae15f46a0656d/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b30612c9bf8731abeb42eff684ae15f46a0656d/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=7b30612c9bf8731abeb42eff684ae15f46a0656d", "patch": "@@ -302,7 +302,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let r = self.force_bits(right.to_scalar()?, right.layout.size)?;\n                 self.binary_int_op(bin_op, l, left.layout, r, right.layout)\n             }\n-            _ if left.layout.ty.is_unsafe_ptr() || left.layout.ty.is_fn_ptr() => {\n+            _ if left.layout.ty.is_any_ptr() => {\n                 // The RHS type must be the same *or an integer type* (for `Offset`)\n                 assert!(\n                     right.layout.ty == left.layout.ty || right.layout.ty.is_integral(),"}, {"sha": "5b89b0262aca5ce48b435d371e0f2d897baf248b", "filename": "src/test/ui/consts/const-eval/match-test-ptr-null.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b30612c9bf8731abeb42eff684ae15f46a0656d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b30612c9bf8731abeb42eff684ae15f46a0656d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.rs?ref=7b30612c9bf8731abeb42eff684ae15f46a0656d", "patch": "@@ -1,4 +1,3 @@\n-\n fn main() {\n     // Make sure match uses the usual pointer comparison code path -- i.e., it should complain\n     // that pointer comparison is disallowed, not that parts of a pointer are accessed as raw"}]}