{"sha": "78573149cbeb0d0b626d128a8950f1220ed551ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4NTczMTQ5Y2JlYjBkMGI2MjZkMTI4YTg5NTBmMTIyMGVkNTUxYWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-23T02:46:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-23T02:46:09Z"}, "message": "auto merge of #9989 : luqmana/rust/mut-everywhere, r=alexcrichton", "tree": {"sha": "eb8c74945054822c9c9b4afea428ebd2970561a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb8c74945054822c9c9b4afea428ebd2970561a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78573149cbeb0d0b626d128a8950f1220ed551ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78573149cbeb0d0b626d128a8950f1220ed551ad", "html_url": "https://github.com/rust-lang/rust/commit/78573149cbeb0d0b626d128a8950f1220ed551ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78573149cbeb0d0b626d128a8950f1220ed551ad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22a5ebdc6b13089d2322d9944bdec1507d21eec2", "url": "https://api.github.com/repos/rust-lang/rust/commits/22a5ebdc6b13089d2322d9944bdec1507d21eec2", "html_url": "https://github.com/rust-lang/rust/commit/22a5ebdc6b13089d2322d9944bdec1507d21eec2"}, {"sha": "b2b2095eaf2e71b1b60797a96c097572928f001c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2b2095eaf2e71b1b60797a96c097572928f001c", "html_url": "https://github.com/rust-lang/rust/commit/b2b2095eaf2e71b1b60797a96c097572928f001c"}], "stats": {"total": 244, "additions": 188, "deletions": 56}, "files": [{"sha": "40a3bc12798f75e390a647171587048d46266a2e", "filename": "doc/rust.md", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/78573149cbeb0d0b626d128a8950f1220ed551ad/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/78573149cbeb0d0b626d128a8950f1220ed551ad/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=78573149cbeb0d0b626d128a8950f1220ed551ad", "patch": "@@ -3395,16 +3395,23 @@ a [temporary](#lvalues-rvalues-and-temporaries), or a local variable.\n A _local variable_ (or *stack-local* allocation) holds a value directly,\n allocated within the stack's memory. The value is a part of the stack frame.\n \n-Local variables are immutable unless declared with `let mut`.  The\n-`mut` keyword applies to all local variables declared within that\n-declaration (so `let mut (x, y) = ...` declares two mutable variables, `x` and\n-`y`).\n+Local variables are immutable unless declared otherwise like: `let mut x = ...`.\n \n Function parameters are immutable unless declared with `mut`. The\n `mut` keyword applies only to the following parameter (so `|mut x, y|`\n and `fn f(mut x: ~int, y: ~int)` declare one mutable variable `x` and\n one immutable variable `y`).\n \n+Methods that take either `self` or `~self` can optionally place them in a\n+mutable slot by prefixing them with `mut` (similar to regular arguments):\n+\n+~~~\n+trait Changer {\n+    fn change(mut self) -> Self;\n+    fn modify(mut ~self) -> ~Self;\n+}\n+~~~\n+\n Local variables are not initialized when allocated; the entire frame worth of\n local variables are allocated at once, on frame-entry, in an uninitialized\n state. Subsequent statements within a function may or may not initialize the"}, {"sha": "10232730329427165e7221a768cc2228ea6727f0", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=78573149cbeb0d0b626d128a8950f1220ed551ad", "patch": "@@ -975,9 +975,9 @@ fn get_explicit_self(item: ebml::Doc) -> ast::explicit_self_ {\n     let explicit_self_kind = string[0];\n     match explicit_self_kind as char {\n         's' => { return ast::sty_static; }\n-        'v' => { return ast::sty_value; }\n+        'v' => { return ast::sty_value(get_mutability(string[1])); }\n         '@' => { return ast::sty_box(get_mutability(string[1])); }\n-        '~' => { return ast::sty_uniq; }\n+        '~' => { return ast::sty_uniq(get_mutability(string[1])); }\n         '&' => {\n             // FIXME(#4846) expl. region\n             return ast::sty_region(None, get_mutability(string[1]));"}, {"sha": "bae0dcc2a5203e576c8a1f7cdfa9085749d0f3cb", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=78573149cbeb0d0b626d128a8950f1220ed551ad", "patch": "@@ -662,8 +662,9 @@ fn encode_explicit_self(ebml_w: &mut writer::Encoder, explicit_self: ast::explic\n         sty_static => {\n             ebml_w.writer.write(&[ 's' as u8 ]);\n         }\n-        sty_value => {\n+        sty_value(m) => {\n             ebml_w.writer.write(&[ 'v' as u8 ]);\n+            encode_mutability(ebml_w, m);\n         }\n         sty_region(_, m) => {\n             // FIXME(#4846) encode custom lifetime\n@@ -674,8 +675,9 @@ fn encode_explicit_self(ebml_w: &mut writer::Encoder, explicit_self: ast::explic\n             ebml_w.writer.write(&[ '@' as u8 ]);\n             encode_mutability(ebml_w, m);\n         }\n-        sty_uniq => {\n+        sty_uniq(m) => {\n             ebml_w.writer.write(&[ '~' as u8 ]);\n+            encode_mutability(ebml_w, m);\n         }\n     }\n "}, {"sha": "3d7f28b8b30b1503fa57df1d27e84ca6ddce9efd", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=78573149cbeb0d0b626d128a8950f1220ed551ad", "patch": "@@ -410,7 +410,7 @@ impl tr for ast::Def {\n             ast::DefMethod(did0.tr(xcx), did1.map(|did1| did1.tr(xcx)))\n           }\n           ast::DefSelfTy(nid) => { ast::DefSelfTy(xcx.tr_id(nid)) }\n-          ast::DefSelf(nid) => { ast::DefSelf(xcx.tr_id(nid)) }\n+          ast::DefSelf(nid, m) => { ast::DefSelf(xcx.tr_id(nid), m) }\n           ast::DefMod(did) => { ast::DefMod(did.tr(xcx)) }\n           ast::DefForeignMod(did) => { ast::DefForeignMod(did.tr(xcx)) }\n           ast::DefStatic(did, m) => { ast::DefStatic(did.tr(xcx), m) }"}, {"sha": "71934c9f2a7ed93db87d3a2cd125009c32d4f400", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=78573149cbeb0d0b626d128a8950f1220ed551ad", "patch": "@@ -392,7 +392,7 @@ fn visit_fn(v: &mut LivenessVisitor,\n     match *fk {\n         visit::fk_method(_, _, method) => {\n             match method.explicit_self.node {\n-                sty_value | sty_region(*) | sty_box(_) | sty_uniq => {\n+                sty_value(_) | sty_region(*) | sty_box(_) | sty_uniq(_) => {\n                     fn_maps.add_variable(Arg(method.self_id,\n                                              special_idents::self_));\n                 }"}, {"sha": "eb03027ad71ffd3b0c1bcc0693e338230e6ac3b6", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=78573149cbeb0d0b626d128a8950f1220ed551ad", "patch": "@@ -488,12 +488,12 @@ impl mem_categorization_ctxt {\n             }\n           }\n \n-          ast::DefSelf(self_id) => {\n+          ast::DefSelf(self_id, mutbl) => {\n             @cmt_ {\n                 id:id,\n                 span:span,\n                 cat:cat_self(self_id),\n-                mutbl: McImmutable,\n+                mutbl: if mutbl { McDeclared } else { McImmutable },\n                 ty:expr_ty\n             }\n           }"}, {"sha": "5001614647a88993af475cc9f2d8e6b41ad1b7a3", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=78573149cbeb0d0b626d128a8950f1220ed551ad", "patch": "@@ -227,7 +227,7 @@ pub fn moved_variable_node_id_from_def(def: Def) -> Option<NodeId> {\n       DefBinding(nid, _) |\n       DefArg(nid, _) |\n       DefLocal(nid, _) |\n-      DefSelf(nid) => Some(nid),\n+      DefSelf(nid, _) => Some(nid),\n \n       _ => None\n     }"}, {"sha": "ee36b807ac79c358311f26e9524d3efc4ca0853b", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=78573149cbeb0d0b626d128a8950f1220ed551ad", "patch": "@@ -150,7 +150,7 @@ enum Mutability {\n \n enum SelfBinding {\n     NoSelfBinding,\n-    HasSelfBinding(NodeId)\n+    HasSelfBinding(NodeId, explicit_self)\n }\n \n impl Visitor<()> for Resolver {\n@@ -3799,8 +3799,12 @@ impl Resolver {\n                 NoSelfBinding => {\n                     // Nothing to do.\n                 }\n-                HasSelfBinding(self_node_id) => {\n-                    let def_like = DlDef(DefSelf(self_node_id));\n+                HasSelfBinding(self_node_id, explicit_self) => {\n+                    let mutable = match explicit_self.node {\n+                        sty_uniq(m) | sty_value(m) if m == MutMutable => true,\n+                        _ => false\n+                    };\n+                    let def_like = DlDef(DefSelf(self_node_id, mutable));\n                     *function_value_rib.self_binding = Some(def_like);\n                 }\n             }\n@@ -3937,7 +3941,7 @@ impl Resolver {\n         // we only have self ty if it is a non static method\n         let self_binding = match method.explicit_self.node {\n           sty_static => { NoSelfBinding }\n-          _ => { HasSelfBinding(method.self_id) }\n+          _ => { HasSelfBinding(method.self_id, method.explicit_self) }\n         };\n \n         self.resolve_function(rib_kind,"}, {"sha": "56f1e0478410264a2ad13ab01b99894237dc9eeb", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=78573149cbeb0d0b626d128a8950f1220ed551ad", "patch": "@@ -1099,7 +1099,7 @@ pub fn trans_local_var(bcx: @mut Block, def: ast::Def) -> Datum {\n         ast::DefLocal(nid, _) | ast::DefBinding(nid, _) => {\n             take_local(bcx, bcx.fcx.lllocals, nid)\n         }\n-        ast::DefSelf(nid) => {\n+        ast::DefSelf(nid, _) => {\n             let self_info: ValSelfData = match bcx.fcx.llself {\n                 Some(ref self_info) => *self_info,\n                 None => {"}, {"sha": "d9f7cdeeb2ef11877ea3a68c0143df639bdcf7b2", "filename": "src/librustc/middle/trans/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs?ref=78573149cbeb0d0b626d128a8950f1220ed551ad", "patch": "@@ -144,7 +144,7 @@ pub fn maybe_instantiate_inline(ccx: @mut CrateContext, fn_id: ast::DefId)\n                       debug!(\"calling inline trans_fn with self_ty {}\",\n                              ty_to_str(ccx.tcx, self_ty));\n                       match mth.explicit_self.node {\n-                          ast::sty_value => impl_self(self_ty, ty::ByRef),\n+                          ast::sty_value(_) => impl_self(self_ty, ty::ByRef),\n                           _ => impl_self(self_ty, ty::ByCopy),\n                       }\n                   }"}, {"sha": "61384c72efa259ec2d5fd8b452bc96171165f6e2", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=78573149cbeb0d0b626d128a8950f1220ed551ad", "patch": "@@ -120,7 +120,7 @@ pub fn trans_method(ccx: @mut CrateContext,\n         debug!(\"calling trans_fn with self_ty {}\",\n                self_ty.repr(ccx.tcx));\n         match method.explicit_self.node {\n-          ast::sty_value => impl_self(self_ty, ty::ByRef),\n+          ast::sty_value(_) => impl_self(self_ty, ty::ByRef),\n           _ => impl_self(self_ty, ty::ByCopy),\n         }\n       }"}, {"sha": "dd0c6c12a69aacf3077fdf7f683562ef7ab956ae", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=78573149cbeb0d0b626d128a8950f1220ed551ad", "patch": "@@ -672,7 +672,7 @@ fn ty_of_method_or_bare_fn<AC:AstConv,RS:RegionScope + Clone + 'static>(\n     {\n         match self_info.explicit_self.node {\n             ast::sty_static => None,\n-            ast::sty_value => {\n+            ast::sty_value(_) => {\n                 Some(self_info.untransformed_self_ty)\n             }\n             ast::sty_region(ref lifetime, mutability) => {\n@@ -689,7 +689,7 @@ fn ty_of_method_or_bare_fn<AC:AstConv,RS:RegionScope + Clone + 'static>(\n                                 ty::mt {ty: self_info.untransformed_self_ty,\n                                         mutbl: mutability}))\n             }\n-            ast::sty_uniq => {\n+            ast::sty_uniq(_) => {\n                 Some(ty::mk_uniq(this.tcx(),\n                                  ty::mt {ty: self_info.untransformed_self_ty,\n                                          mutbl: ast::MutImmutable}))"}, {"sha": "af1d5ce3cc608afc5b62ea8944b027566d468921", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=78573149cbeb0d0b626d128a8950f1220ed551ad", "patch": "@@ -1082,7 +1082,7 @@ impl<'self> LookupContext<'self> {\n             ast::sty_static => {\n                 self.bug(~\"static method for object type receiver\");\n             }\n-            ast::sty_value => {\n+            ast::sty_value(_) => {\n                 ty::mk_err() // error reported in `enforce_object_limitations()`\n             }\n             ast::sty_region(*) | ast::sty_box(*) | ast::sty_uniq(*) => {\n@@ -1141,7 +1141,7 @@ impl<'self> LookupContext<'self> {\n                      through an object\");\n             }\n \n-            ast::sty_value => { // reason (a) above\n+            ast::sty_value(_) => { // reason (a) above\n                 self.tcx().sess.span_err(\n                     self.expr.span,\n                     \"cannot call a method with a by-value receiver \\\n@@ -1198,7 +1198,7 @@ impl<'self> LookupContext<'self> {\n                 false\n             }\n \n-            sty_value => {\n+            sty_value(_) => {\n                 rcvr_matches_ty(self.fcx, rcvr_ty, candidate)\n             }\n \n@@ -1236,7 +1236,7 @@ impl<'self> LookupContext<'self> {\n                 }\n             }\n \n-            sty_uniq => {\n+            sty_uniq(_) => {\n                 debug!(\"(is relevant?) explicit self is a unique pointer\");\n                 match ty::get(rcvr_ty).sty {\n                     ty::ty_uniq(mt) => {\n@@ -1369,7 +1369,7 @@ impl<'self> LookupContext<'self> {\n \n pub fn get_mode_from_explicit_self(explicit_self: ast::explicit_self_) -> SelfMode {\n     match explicit_self {\n-        sty_value => ty::ByRef,\n+        sty_value(_) => ty::ByRef,\n         _ => ty::ByCopy,\n     }\n }"}, {"sha": "4514564ff1f6c98f806193841e3e62c099d8dbb5", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=78573149cbeb0d0b626d128a8950f1220ed551ad", "patch": "@@ -3254,7 +3254,7 @@ pub fn ty_param_bounds_and_ty_for_def(fcx: @mut FnCtxt,\n                                       defn: ast::Def)\n                                    -> ty_param_bounds_and_ty {\n     match defn {\n-      ast::DefArg(nid, _) | ast::DefLocal(nid, _) | ast::DefSelf(nid) |\n+      ast::DefArg(nid, _) | ast::DefLocal(nid, _) | ast::DefSelf(nid, _) |\n       ast::DefBinding(nid, _) => {\n           let typ = fcx.local_ty(sp, nid);\n           return no_params(typ);"}, {"sha": "09fc7b5c15c34f96abc49fcefc734d64b672fe2e", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=78573149cbeb0d0b626d128a8950f1220ed551ad", "patch": "@@ -58,7 +58,7 @@ fn encl_region_of_def(fcx: @mut FnCtxt, def: ast::Def) -> ty::Region {\n     let tcx = fcx.tcx();\n     match def {\n         DefLocal(node_id, _) | DefArg(node_id, _) |\n-        DefSelf(node_id) | DefBinding(node_id, _) => {\n+        DefSelf(node_id, _) | DefBinding(node_id, _) => {\n             tcx.region_maps.encl_region(node_id)\n         }\n         DefUpvar(_, subdef, closure_id, body_id) => {"}, {"sha": "dd1ad8263da860c2d1eb6d9864f6ffc2a8244855", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=78573149cbeb0d0b626d128a8950f1220ed551ad", "patch": "@@ -388,8 +388,8 @@ impl Clean<SelfTy> for ast::explicit_self {\n     fn clean(&self) -> SelfTy {\n         match self.node {\n             ast::sty_static => SelfStatic,\n-            ast::sty_value => SelfValue,\n-            ast::sty_uniq => SelfOwned,\n+            ast::sty_value(_) => SelfValue,\n+            ast::sty_uniq(_) => SelfOwned,\n             ast::sty_region(lt, mt) => SelfBorrowed(lt.clean(), mt.clean()),\n             ast::sty_box(mt) => SelfManaged(mt.clean()),\n         }\n@@ -1171,7 +1171,7 @@ fn resolve_type(path: Path, tpbs: Option<~[TyParamBound]>,\n \n     let (def_id, kind) = match *d {\n         ast::DefFn(i, _) => (i, TypeFunction),\n-        ast::DefSelf(i) | ast::DefSelfTy(i) => return Self(i),\n+        ast::DefSelf(i, _) | ast::DefSelfTy(i) => return Self(i),\n         ast::DefTy(i) => (i, TypeEnum),\n         ast::DefTrait(i) => {\n             debug!(\"saw DefTrait in def_to_id\");"}, {"sha": "372f1950c1de0047979beff35f0f4eb80999cb83", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=78573149cbeb0d0b626d128a8950f1220ed551ad", "patch": "@@ -227,7 +227,7 @@ pub enum MethodProvenance {\n pub enum Def {\n     DefFn(DefId, purity),\n     DefStaticMethod(/* method */ DefId, MethodProvenance, purity),\n-    DefSelf(NodeId),\n+    DefSelf(NodeId, bool /* is_mutbl */),\n     DefSelfTy(/* trait id */ NodeId),\n     DefMod(DefId),\n     DefForeignMod(DefId),\n@@ -921,10 +921,10 @@ pub enum ret_style {\n #[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]\n pub enum explicit_self_ {\n     sty_static,                                // no self\n-    sty_value,                                 // `self`\n-    sty_region(Option<Lifetime>, Mutability), // `&'lt self`\n+    sty_value(Mutability),                     // `self`\n+    sty_region(Option<Lifetime>, Mutability),  // `&'lt self`\n     sty_box(Mutability),                       // `@self`\n-    sty_uniq                                   // `~self`\n+    sty_uniq(Mutability)                       // `~self`\n }\n \n pub type explicit_self = Spanned<explicit_self_>;"}, {"sha": "1d9d5512ff424b960b414c09a4021b1413ca102a", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=78573149cbeb0d0b626d128a8950f1220ed551ad", "patch": "@@ -66,7 +66,7 @@ pub fn def_id_of_def(d: Def) -> DefId {\n       DefUse(id) | DefStruct(id) | DefTrait(id) | DefMethod(id, _) => {\n         id\n       }\n-      DefArg(id, _) | DefLocal(id, _) | DefSelf(id) | DefSelfTy(id)\n+      DefArg(id, _) | DefLocal(id, _) | DefSelf(id, _) | DefSelfTy(id)\n       | DefUpvar(id, _, _, _) | DefBinding(id, _) | DefRegion(id)\n       | DefTyParamBinder(id) | DefLabel(id) => {\n         local_def(id)"}, {"sha": "c60259304aef23cac3baea73919089ceff543ee4", "filename": "src/libsyntax/ext/deriving/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs?ref=78573149cbeb0d0b626d128a8950f1220ed551ad", "patch": "@@ -240,13 +240,13 @@ pub fn get_explicit_self(cx: @ExtCtxt, span: Span, self_ptr: &Option<PtrTy>)\n     let self_path = cx.expr_self(span);\n     match *self_ptr {\n         None => {\n-            (self_path, respan(span, ast::sty_value))\n+            (self_path, respan(span, ast::sty_value(ast::MutImmutable)))\n         }\n         Some(ref ptr) => {\n             let self_ty = respan(\n                 span,\n                 match *ptr {\n-                    Send => ast::sty_uniq,\n+                    Send => ast::sty_uniq(ast::MutImmutable),\n                     Managed(mutbl) => ast::sty_box(mutbl),\n                     Borrowed(ref lt, mutbl) => {\n                         let lt = lt.map(|s| cx.lifetime(span, cx.ident_of(s)));"}, {"sha": "605e259cf0c2b2e89e18cada2eecd75b9b436296", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=78573149cbeb0d0b626d128a8950f1220ed551ad", "patch": "@@ -3438,15 +3438,11 @@ impl Parser {\n \n     // parse the argument list and result type of a function\n     // that may have a self type.\n-    fn parse_fn_decl_with_self(\n-        &self,\n-        parse_arg_fn:\n-        &fn(&Parser) -> arg\n-    ) -> (explicit_self, fn_decl) {\n-        fn maybe_parse_explicit_self(\n-            cnstr: &fn(v: Mutability) -> ast::explicit_self_,\n-            p: &Parser\n-        ) -> ast::explicit_self_ {\n+    fn parse_fn_decl_with_self(&self, parse_arg_fn: &fn(&Parser) -> arg)\n+        -> (explicit_self, fn_decl) {\n+\n+        fn maybe_parse_explicit_self(cnstr: &fn(v: Mutability) -> ast::explicit_self_,\n+                                     p: &Parser) -> ast::explicit_self_ {\n             // We need to make sure it isn't a type\n             if p.look_ahead(1, |t| token::is_keyword(keywords::Self, t)) ||\n                 ((p.look_ahead(1, |t| token::is_keyword(keywords::Const, t)) ||\n@@ -3524,25 +3520,39 @@ impl Parser {\n                     self.span_err(*self.last_span,\n                                   \"mutability declaration not allowed here\");\n                 }\n-                sty_uniq\n+                sty_uniq(MutImmutable)\n             }, self)\n           }\n           token::IDENT(*) if self.is_self_ident() => {\n             self.bump();\n-            sty_value\n+            sty_value(MutImmutable)\n           }\n           token::BINOP(token::STAR) => {\n             // Possibly \"*self\" or \"*mut self\" -- not supported. Try to avoid\n             // emitting cryptic \"unexpected token\" errors.\n             self.bump();\n-            if self.token_is_mutability(self.token) {\n-                self.bump();\n-            }\n+            let mutability = if self.token_is_mutability(self.token) {\n+                self.parse_mutability()\n+            } else { MutImmutable };\n             if self.is_self_ident() {\n                 self.span_err(*self.span, \"cannot pass self by unsafe pointer\");\n                 self.bump();\n             }\n-            sty_value\n+            sty_value(mutability)\n+          }\n+          _ if self.token_is_mutability(self.token) &&\n+               self.look_ahead(1, |t| token::is_keyword(keywords::Self, t)) => {\n+            let mutability = self.parse_mutability();\n+            self.expect_self_ident();\n+            sty_value(mutability)\n+          }\n+          _ if self.token_is_mutability(self.token) &&\n+               self.look_ahead(1, |t| *t == token::TILDE) &&\n+               self.look_ahead(2, |t| token::is_keyword(keywords::Self, t)) => {\n+            let mutability = self.parse_mutability();\n+            self.bump();\n+            self.expect_self_ident();\n+            sty_uniq(mutability)\n           }\n           _ => {\n             sty_static"}, {"sha": "0e330da31e6235915279d8a1b062ea05d9709c9d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=78573149cbeb0d0b626d128a8950f1220ed551ad", "patch": "@@ -1686,8 +1686,14 @@ pub fn explicit_self_to_str(explicit_self: &ast::explicit_self_, intr: @ident_in\n pub fn print_explicit_self(s: @ps, explicit_self: ast::explicit_self_) -> bool {\n     match explicit_self {\n         ast::sty_static => { return false; }\n-        ast::sty_value => { word(s.s, \"self\"); }\n-        ast::sty_uniq => { word(s.s, \"~self\"); }\n+        ast::sty_value(m) => {\n+            print_mutability(s, m);\n+            word(s.s, \"self\");\n+        }\n+        ast::sty_uniq(m) => {\n+            print_mutability(s, m);\n+            word(s.s, \"~self\");\n+        }\n         ast::sty_region(ref lt, m) => {\n             word(s.s, \"&\");\n             print_opt_lifetime(s, lt);"}, {"sha": "aa88004cd11994a6a82ed20887f8d09484b9d0af", "filename": "src/test/run-pass/by-value-self-in-mut-slot.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Ftest%2Frun-pass%2Fby-value-self-in-mut-slot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Ftest%2Frun-pass%2Fby-value-self-in-mut-slot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fby-value-self-in-mut-slot.rs?ref=78573149cbeb0d0b626d128a8950f1220ed551ad", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct X {\n+    a: int\n+}\n+\n+trait Changer {\n+    fn change(mut self) -> Self;\n+}\n+\n+impl Changer for X {\n+    fn change(mut self) -> X {\n+        self.a = 55;\n+        self\n+    }\n+}\n+\n+pub fn main() {\n+    let x = X { a: 32 };\n+    let new_x = x.change();\n+    assert_eq!(new_x.a, 55);\n+}"}, {"sha": "08d10fd11703b062b3637524042c7b2eca1d316d", "filename": "src/test/run-pass/self-in-mut-slot-default-method.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-default-method.rs?ref=78573149cbeb0d0b626d128a8950f1220ed551ad", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct X {\n+    a: int\n+}\n+\n+trait Changer {\n+    fn change(mut self) -> Self {\n+        self.set_to(55);\n+        self\n+    }\n+\n+    fn change_again(mut ~self) -> ~Self {\n+        self.set_to(45);\n+        self\n+    }\n+\n+    fn set_to(&mut self, a: int);\n+}\n+\n+impl Changer for X {\n+    fn set_to(&mut self, a: int) {\n+        self.a = a;\n+    }\n+}\n+\n+pub fn main() {\n+    let x = X { a: 32 };\n+    let new_x = x.change();\n+    assert_eq!(new_x.a, 55);\n+\n+    let x = ~new_x;\n+    let new_x = x.change_again();\n+    assert_eq!(new_x.a, 45);\n+}"}, {"sha": "7c2f52211761f1c3de9bf3e6b1ef3559c2fc06c8", "filename": "src/test/run-pass/uniq-self-in-mut-slot.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Ftest%2Frun-pass%2Funiq-self-in-mut-slot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78573149cbeb0d0b626d128a8950f1220ed551ad/src%2Ftest%2Frun-pass%2Funiq-self-in-mut-slot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-self-in-mut-slot.rs?ref=78573149cbeb0d0b626d128a8950f1220ed551ad", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct X {\n+    a: int\n+}\n+\n+trait Changer {\n+    fn change(mut ~self) -> ~Self;\n+}\n+\n+impl Changer for X {\n+    fn change(mut ~self) -> ~X {\n+        self.a = 55;\n+        self\n+    }\n+}\n+\n+pub fn main() {\n+    let x = ~X { a: 32 };\n+    let new_x = x.change();\n+    assert_eq!(new_x.a, 55);\n+}"}]}