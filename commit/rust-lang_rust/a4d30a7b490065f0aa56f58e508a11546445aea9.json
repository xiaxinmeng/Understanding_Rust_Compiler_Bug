{"sha": "a4d30a7b490065f0aa56f58e508a11546445aea9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ZDMwYTdiNDkwMDY1ZjBhYTU2ZjU4ZTUwOGExMTU0NjQ0NWFlYTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-26T23:22:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-26T23:22:39Z"}, "message": "Auto merge of #77876 - tmiasko:simplify-locals, r=wesleywiser\n\nRemove unused set-discriminant statements and assignments regardless of rvalue\n\n* Represent use counts with u32\n* Unify use count visitors\n* Change RemoveStatements visitor into a function\n* Remove unused set-discriminant statements\n* Use exhaustive match to clarify what is being optimized\n* Remove unused assignments regardless of rvalue kind", "tree": {"sha": "bbdc3de20631e3de526db464604dc767a99b30fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbdc3de20631e3de526db464604dc767a99b30fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4d30a7b490065f0aa56f58e508a11546445aea9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4d30a7b490065f0aa56f58e508a11546445aea9", "html_url": "https://github.com/rust-lang/rust/commit/a4d30a7b490065f0aa56f58e508a11546445aea9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4d30a7b490065f0aa56f58e508a11546445aea9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd542592f08ca0d1f7255600115c2eafdf6b5da7", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd542592f08ca0d1f7255600115c2eafdf6b5da7", "html_url": "https://github.com/rust-lang/rust/commit/fd542592f08ca0d1f7255600115c2eafdf6b5da7"}, {"sha": "4c3e06a0ba557c5915d8c00f23455461549f07f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c3e06a0ba557c5915d8c00f23455461549f07f6", "html_url": "https://github.com/rust-lang/rust/commit/4c3e06a0ba557c5915d8c00f23455461549f07f6"}], "stats": {"total": 567, "additions": 404, "deletions": 163}, "files": [{"sha": "b7c9a3a8688ec7907c976b0b5363dffbe09c09f4", "filename": "compiler/rustc_mir/src/transform/simplify.rs", "status": "modified", "additions": 110, "deletions": 143, "changes": 253, "blob_url": "https://github.com/rust-lang/rust/blob/a4d30a7b490065f0aa56f58e508a11546445aea9/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d30a7b490065f0aa56f58e508a11546445aea9/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify.rs?ref=a4d30a7b490065f0aa56f58e508a11546445aea9", "patch": "@@ -35,6 +35,7 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n use smallvec::SmallVec;\n use std::borrow::Cow;\n+use std::convert::TryInto;\n \n pub struct SimplifyCfg {\n     label: String,\n@@ -322,32 +323,17 @@ impl<'tcx> MirPass<'tcx> for SimplifyLocals {\n         trace!(\"running SimplifyLocals on {:?}\", body.source);\n \n         // First, we're going to get a count of *actual* uses for every `Local`.\n-        // Take a look at `DeclMarker::visit_local()` to see exactly what is ignored.\n-        let mut used_locals = {\n-            let mut marker = DeclMarker::new(body);\n-            marker.visit_body(&body);\n-\n-            marker.local_counts\n-        };\n-\n-        let arg_count = body.arg_count;\n+        let mut used_locals = UsedLocals::new(body);\n \n         // Next, we're going to remove any `Local` with zero actual uses. When we remove those\n         // `Locals`, we're also going to subtract any uses of other `Locals` from the `used_locals`\n         // count. For example, if we removed `_2 = discriminant(_1)`, then we'll subtract one from\n         // `use_counts[_1]`. That in turn might make `_1` unused, so we loop until we hit a\n         // fixedpoint where there are no more unused locals.\n-        loop {\n-            let mut remove_statements = RemoveStatements::new(&mut used_locals, arg_count, tcx);\n-            remove_statements.visit_body(body);\n-\n-            if !remove_statements.modified {\n-                break;\n-            }\n-        }\n+        remove_unused_definitions(&mut used_locals, body);\n \n         // Finally, we'll actually do the work of shrinking `body.local_decls` and remapping the `Local`s.\n-        let map = make_local_map(&mut body.local_decls, used_locals, arg_count);\n+        let map = make_local_map(&mut body.local_decls, &used_locals);\n \n         // Only bother running the `LocalUpdater` if we actually found locals to remove.\n         if map.iter().any(Option::is_none) {\n@@ -363,14 +349,14 @@ impl<'tcx> MirPass<'tcx> for SimplifyLocals {\n /// Construct the mapping while swapping out unused stuff out from the `vec`.\n fn make_local_map<V>(\n     local_decls: &mut IndexVec<Local, V>,\n-    used_locals: IndexVec<Local, usize>,\n-    arg_count: usize,\n+    used_locals: &UsedLocals,\n ) -> IndexVec<Local, Option<Local>> {\n     let mut map: IndexVec<Local, Option<Local>> = IndexVec::from_elem(None, &*local_decls);\n     let mut used = Local::new(0);\n-    for (alive_index, count) in used_locals.iter_enumerated() {\n-        // The `RETURN_PLACE` and arguments are always live.\n-        if alive_index.as_usize() > arg_count && *count == 0 {\n+\n+    for alive_index in local_decls.indices() {\n+        // `is_used` treats the `RETURN_PLACE` and arguments as used.\n+        if !used_locals.is_used(alive_index) {\n             continue;\n         }\n \n@@ -384,149 +370,130 @@ fn make_local_map<V>(\n     map\n }\n \n-struct DeclMarker<'a, 'tcx> {\n-    pub local_counts: IndexVec<Local, usize>,\n-    pub body: &'a Body<'tcx>,\n+/// Keeps track of used & unused locals.\n+struct UsedLocals {\n+    increment: bool,\n+    arg_count: u32,\n+    use_count: IndexVec<Local, u32>,\n }\n \n-impl<'a, 'tcx> DeclMarker<'a, 'tcx> {\n-    pub fn new(body: &'a Body<'tcx>) -> Self {\n-        Self { local_counts: IndexVec::from_elem(0, &body.local_decls), body }\n+impl UsedLocals {\n+    /// Determines which locals are used & unused in the given body.\n+    fn new(body: &Body<'_>) -> Self {\n+        let mut this = Self {\n+            increment: true,\n+            arg_count: body.arg_count.try_into().unwrap(),\n+            use_count: IndexVec::from_elem(0, &body.local_decls),\n+        };\n+        this.visit_body(body);\n+        this\n     }\n-}\n \n-impl<'a, 'tcx> Visitor<'tcx> for DeclMarker<'a, 'tcx> {\n-    fn visit_local(&mut self, local: &Local, ctx: PlaceContext, location: Location) {\n-        // Ignore storage markers altogether, they get removed along with their otherwise unused\n-        // decls.\n-        // FIXME: Extend this to all non-uses.\n-        if ctx.is_storage_marker() {\n-            return;\n-        }\n+    /// Checks if local is used.\n+    ///\n+    /// Return place and arguments are always considered used.\n+    fn is_used(&self, local: Local) -> bool {\n+        trace!(\"is_used({:?}): use_count: {:?}\", local, self.use_count[local]);\n+        local.as_u32() <= self.arg_count || self.use_count[local] != 0\n+    }\n \n-        // Ignore stores of constants because `ConstProp` and `CopyProp` can remove uses of many\n-        // of these locals. However, if the local is still needed, then it will be referenced in\n-        // another place and we'll mark it as being used there.\n-        if ctx == PlaceContext::MutatingUse(MutatingUseContext::Store)\n-            || ctx == PlaceContext::MutatingUse(MutatingUseContext::Projection)\n-        {\n-            let block = &self.body.basic_blocks()[location.block];\n-            if location.statement_index != block.statements.len() {\n-                let stmt = &block.statements[location.statement_index];\n-\n-                if let StatementKind::Assign(box (dest, rvalue)) = &stmt.kind {\n-                    if !dest.is_indirect() && dest.local == *local {\n-                        let can_skip = match rvalue {\n-                            Rvalue::Use(_)\n-                            | Rvalue::Discriminant(_)\n-                            | Rvalue::BinaryOp(_, _, _)\n-                            | Rvalue::CheckedBinaryOp(_, _, _)\n-                            | Rvalue::Repeat(_, _)\n-                            | Rvalue::AddressOf(_, _)\n-                            | Rvalue::Len(_)\n-                            | Rvalue::UnaryOp(_, _)\n-                            | Rvalue::Aggregate(_, _) => true,\n-\n-                            _ => false,\n-                        };\n-\n-                        if can_skip {\n-                            trace!(\"skipping store of {:?} to {:?}\", rvalue, dest);\n-                            return;\n-                        }\n-                    }\n-                }\n-            }\n-        }\n+    /// Updates the use counts to reflect the removal of given statement.\n+    fn statement_removed(&mut self, statement: &Statement<'tcx>) {\n+        self.increment = false;\n \n-        self.local_counts[*local] += 1;\n+        // The location of the statement is irrelevant.\n+        let location = Location { block: START_BLOCK, statement_index: 0 };\n+        self.visit_statement(statement, location);\n     }\n-}\n-\n-struct StatementDeclMarker<'a, 'tcx> {\n-    used_locals: &'a mut IndexVec<Local, usize>,\n-    statement: &'a Statement<'tcx>,\n-}\n \n-impl<'a, 'tcx> StatementDeclMarker<'a, 'tcx> {\n-    pub fn new(\n-        used_locals: &'a mut IndexVec<Local, usize>,\n-        statement: &'a Statement<'tcx>,\n-    ) -> Self {\n-        Self { used_locals, statement }\n+    /// Visits a left-hand side of an assignment.\n+    fn visit_lhs(&mut self, place: &Place<'tcx>, location: Location) {\n+        if place.is_indirect() {\n+            // A use, not a definition.\n+            self.visit_place(place, PlaceContext::MutatingUse(MutatingUseContext::Store), location);\n+        } else {\n+            // A definition. Although, it still might use other locals for indexing.\n+            self.super_projection(\n+                place.local,\n+                &place.projection,\n+                PlaceContext::MutatingUse(MutatingUseContext::Projection),\n+                location,\n+            );\n+        }\n     }\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for StatementDeclMarker<'a, 'tcx> {\n-    fn visit_local(&mut self, local: &Local, context: PlaceContext, _location: Location) {\n-        // Skip the lvalue for assignments\n-        if let StatementKind::Assign(box (p, _)) = self.statement.kind {\n-            if p.local == *local && context.is_place_assignment() {\n-                return;\n+impl Visitor<'_> for UsedLocals {\n+    fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {\n+        match statement.kind {\n+            StatementKind::LlvmInlineAsm(..)\n+            | StatementKind::Retag(..)\n+            | StatementKind::Coverage(..)\n+            | StatementKind::FakeRead(..)\n+            | StatementKind::AscribeUserType(..) => {\n+                self.super_statement(statement, location);\n             }\n-        }\n \n-        let use_count = &mut self.used_locals[*local];\n-        // If this is the local we're removing...\n-        if *use_count != 0 {\n-            *use_count -= 1;\n-        }\n-    }\n-}\n+            StatementKind::Nop => {}\n \n-struct RemoveStatements<'a, 'tcx> {\n-    used_locals: &'a mut IndexVec<Local, usize>,\n-    arg_count: usize,\n-    tcx: TyCtxt<'tcx>,\n-    modified: bool,\n-}\n+            StatementKind::StorageLive(_local) | StatementKind::StorageDead(_local) => {}\n \n-impl<'a, 'tcx> RemoveStatements<'a, 'tcx> {\n-    fn new(\n-        used_locals: &'a mut IndexVec<Local, usize>,\n-        arg_count: usize,\n-        tcx: TyCtxt<'tcx>,\n-    ) -> Self {\n-        Self { used_locals, arg_count, tcx, modified: false }\n-    }\n+            StatementKind::Assign(box (ref place, ref rvalue)) => {\n+                self.visit_lhs(place, location);\n+                self.visit_rvalue(rvalue, location);\n+            }\n \n-    fn keep_local(&self, l: Local) -> bool {\n-        trace!(\"keep_local({:?}): count: {:?}\", l, self.used_locals[l]);\n-        l.as_usize() <= self.arg_count || self.used_locals[l] != 0\n+            StatementKind::SetDiscriminant { ref place, variant_index: _ } => {\n+                self.visit_lhs(place, location);\n+            }\n+        }\n     }\n-}\n \n-impl<'a, 'tcx> MutVisitor<'tcx> for RemoveStatements<'a, 'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n-        self.tcx\n+    fn visit_local(&mut self, local: &Local, _ctx: PlaceContext, _location: Location) {\n+        if self.increment {\n+            self.use_count[*local] += 1;\n+        } else {\n+            assert_ne!(self.use_count[*local], 0);\n+            self.use_count[*local] -= 1;\n+        }\n     }\n+}\n \n-    fn visit_basic_block_data(&mut self, block: BasicBlock, data: &mut BasicBlockData<'tcx>) {\n-        // Remove unnecessary StorageLive and StorageDead annotations.\n-        let mut i = 0usize;\n-        data.statements.retain(|stmt| {\n-            let keep = match &stmt.kind {\n-                StatementKind::StorageLive(l) | StatementKind::StorageDead(l) => {\n-                    self.keep_local(*l)\n-                }\n-                StatementKind::Assign(box (place, _)) => self.keep_local(place.local),\n-                _ => true,\n-            };\n-\n-            if !keep {\n-                trace!(\"removing statement {:?}\", stmt);\n-                self.modified = true;\n-\n-                let mut visitor = StatementDeclMarker::new(self.used_locals, stmt);\n-                visitor.visit_statement(stmt, Location { block, statement_index: i });\n-            }\n+/// Removes unused definitions. Updates the used locals to reflect the changes made.\n+fn remove_unused_definitions<'a, 'tcx>(used_locals: &'a mut UsedLocals, body: &mut Body<'tcx>) {\n+    // The use counts are updated as we remove the statements. A local might become unused\n+    // during the retain operation, leading to a temporary inconsistency (storage statements or\n+    // definitions referencing the local might remain). For correctness it is crucial that this\n+    // computation reaches a fixed point.\n+\n+    let mut modified = true;\n+    while modified {\n+        modified = false;\n+\n+        for data in body.basic_blocks_mut() {\n+            // Remove unnecessary StorageLive and StorageDead annotations.\n+            data.statements.retain(|statement| {\n+                let keep = match &statement.kind {\n+                    StatementKind::StorageLive(local) | StatementKind::StorageDead(local) => {\n+                        used_locals.is_used(*local)\n+                    }\n+                    StatementKind::Assign(box (place, _)) => used_locals.is_used(place.local),\n \n-            i += 1;\n+                    StatementKind::SetDiscriminant { ref place, .. } => {\n+                        used_locals.is_used(place.local)\n+                    }\n+                    _ => true,\n+                };\n \n-            keep\n-        });\n+                if !keep {\n+                    trace!(\"removing statement {:?}\", statement);\n+                    modified = true;\n+                    used_locals.statement_removed(statement);\n+                }\n \n-        self.super_basic_block_data(block, data);\n+                keep\n+            });\n+        }\n     }\n }\n "}, {"sha": "ce6757a047cb363244d787560162a229e5a9a6ca", "filename": "src/test/codegen-units/item-collection/instantiation-through-vtable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Finstantiation-through-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Finstantiation-through-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Finstantiation-through-vtable.rs?ref=a4d30a7b490065f0aa56f58e508a11546445aea9", "patch": "@@ -1,6 +1,5 @@\n // ignore-tidy-linelength\n-// compile-flags:-Zprint-mono-items=eager\n-// compile-flags:-Zinline-in-all-cgus\n+// compile-flags:-Zprint-mono-items=eager -Zinline-in-all-cgus -Zmir-opt-level=0\n \n #![deny(dead_code)]\n #![feature(start)]"}, {"sha": "da35789ce8de79fc5e719f13f8052126f29f2c88", "filename": "src/test/codegen/lifetime_start_end.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fcodegen%2Flifetime_start_end.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fcodegen%2Flifetime_start_end.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Flifetime_start_end.rs?ref=a4d30a7b490065f0aa56f58e508a11546445aea9", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -O -C no-prepopulate-passes\n+// compile-flags: -O -C no-prepopulate-passes -Zmir-opt-level=0\n \n #![crate_type = \"lib\"]\n \n@@ -18,10 +18,10 @@ pub fn test() {\n // CHECK: [[S_b:%[0-9]+]] = bitcast { i32, i32 }** %b to i8*\n // CHECK: call void @llvm.lifetime.start{{.*}}(i{{[0-9 ]+}}, i8* [[S_b]])\n \n-// CHECK: [[S__4:%[0-9]+]] = bitcast { i32, i32 }* %_4 to i8*\n+// CHECK: [[S__4:%[0-9]+]] = bitcast { i32, i32 }* %_5 to i8*\n // CHECK: call void @llvm.lifetime.start{{.*}}(i{{[0-9 ]+}}, i8* [[S__4]])\n \n-// CHECK: [[E__4:%[0-9]+]] = bitcast { i32, i32 }* %_4 to i8*\n+// CHECK: [[E__4:%[0-9]+]] = bitcast { i32, i32 }* %_5 to i8*\n // CHECK: call void @llvm.lifetime.end{{.*}}(i{{[0-9 ]+}}, i8* [[E__4]])\n \n // CHECK: [[E_b:%[0-9]+]] = bitcast { i32, i32 }** %b to i8*"}, {"sha": "3c9ecec2cbf58aee3c31f04304ae2879cb560d1c", "filename": "src/test/codegen/loads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fcodegen%2Floads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fcodegen%2Floads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Floads.rs?ref=a4d30a7b490065f0aa56f58e508a11546445aea9", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -C no-prepopulate-passes -Zmir-opt-level=0\n \n #![crate_type = \"lib\"]\n "}, {"sha": "5e76f1d67e6f7ea9d7d1912fa4ffacfcd75b3fac", "filename": "src/test/codegen/naked-functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnaked-functions.rs?ref=a4d30a7b490065f0aa56f58e508a11546445aea9", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -C no-prepopulate-passes -Zmir-opt-level=0\n \n #![crate_type = \"lib\"]\n #![feature(naked_functions)]"}, {"sha": "b4cc26f3f9d79976564abfc9de8c00685fd23c0a", "filename": "src/test/codegen/refs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fcodegen%2Frefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fcodegen%2Frefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frefs.rs?ref=a4d30a7b490065f0aa56f58e508a11546445aea9", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -C no-prepopulate-passes -Zmir-opt-level=0\n \n #![crate_type = \"lib\"]\n "}, {"sha": "4a00a6c72f79ea2572b4b29bca8eea9e8b931b15", "filename": "src/test/incremental/hashes/closure_expressions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs?ref=a4d30a7b490065f0aa56f58e508a11546445aea9", "patch": "@@ -7,7 +7,7 @@\n \n // build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n+// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans -Zmir-opt-level=0\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n@@ -53,7 +53,7 @@ pub fn change_parameter_pattern() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, typeck\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, typeck, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_parameter_pattern() {\n     let _ = |(x,): (u32,)| x;"}, {"sha": "26ff6b109dc326f2703462523cf07418d32114fb", "filename": "src/test/incremental/hashes/enum_constructors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs?ref=a4d30a7b490065f0aa56f58e508a11546445aea9", "patch": "@@ -7,7 +7,7 @@\n \n // build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3\n-// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans\n+// compile-flags: -Z query-dep-graph -Zincremental-ignore-spans -Zmir-opt-level=0\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "dca8f30c89494774fedf3762e9646818569fe43b", "filename": "src/test/mir-opt/simplify-locals.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fmir-opt%2Fsimplify-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fmir-opt%2Fsimplify-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals.rs?ref=a4d30a7b490065f0aa56f58e508a11546445aea9", "patch": "@@ -0,0 +1,74 @@\n+// compile-flags: -C overflow-checks=off\n+\n+#![feature(box_syntax)]\n+#![feature(thread_local)]\n+\n+#[derive(Copy, Clone)]\n+enum E {\n+     A,\n+     B,\n+}\n+\n+// EMIT_MIR simplify_locals.c.SimplifyLocals.diff\n+fn c() {\n+    let bytes = [0u8; 10];\n+    // Unused cast\n+    let _: &[u8] = &bytes;\n+}\n+\n+// EMIT_MIR simplify_locals.d1.SimplifyLocals.diff\n+fn d1() {\n+    // Unused set discriminant\n+    let _ = E::A;\n+}\n+\n+// EMIT_MIR simplify_locals.d2.SimplifyLocals.diff\n+fn d2() {\n+    // Unused set discriminant\n+    {(10, E::A)}.1 = E::B;\n+}\n+\n+// EMIT_MIR simplify_locals.r.SimplifyLocals.diff\n+fn r() {\n+    let mut a = 1;\n+    // Unused references\n+    let _ = &a;\n+    let _ = &mut a;\n+}\n+\n+#[thread_local] static mut X: u32 = 0;\n+\n+// EMIT_MIR simplify_locals.t1.SimplifyLocals.diff\n+fn t1() {\n+    // Unused thread local\n+    unsafe { X };\n+}\n+\n+// EMIT_MIR simplify_locals.t2.SimplifyLocals.diff\n+fn t2() {\n+    // Unused thread local\n+    unsafe { &mut X };\n+}\n+\n+// EMIT_MIR simplify_locals.t3.SimplifyLocals.diff\n+fn t3() {\n+    // Unused thread local\n+    unsafe { *&mut X };\n+}\n+\n+// EMIT_MIR simplify_locals.t4.SimplifyLocals.diff\n+fn t4() -> u32 {\n+    // Used thread local\n+    unsafe { X + 1 }\n+}\n+\n+fn main() {\n+    c();\n+    d1();\n+    d2();\n+    r();\n+    t1();\n+    t2();\n+    t3();\n+    t4();\n+}"}, {"sha": "dbac7dff9e2bbb953efe360636916dbdd69e56b2", "filename": "src/test/mir-opt/simplify_locals.c.SimplifyLocals.diff", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fmir-opt%2Fsimplify_locals.c.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fmir-opt%2Fsimplify_locals.c.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.c.SimplifyLocals.diff?ref=a4d30a7b490065f0aa56f58e508a11546445aea9", "patch": "@@ -0,0 +1,28 @@\n+- // MIR for `c` before SimplifyLocals\n++ // MIR for `c` after SimplifyLocals\n+  \n+  fn c() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/simplify-locals.rs:13:8: 13:8\n+      let _1: [u8; 10];                    // in scope 0 at $DIR/simplify-locals.rs:14:9: 14:14\n+-     let mut _2: &[u8];                   // in scope 0 at $DIR/simplify-locals.rs:16:20: 16:26\n+-     let mut _3: &[u8; 10];               // in scope 0 at $DIR/simplify-locals.rs:16:20: 16:26\n+-     let _4: &[u8; 10];                   // in scope 0 at $DIR/simplify-locals.rs:16:20: 16:26\n+      scope 1 {\n+          debug bytes => _1;               // in scope 1 at $DIR/simplify-locals.rs:14:9: 14:14\n+          scope 2 {\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/simplify-locals.rs:14:9: 14:14\n+          _1 = [const 0_u8; 10];           // scope 0 at $DIR/simplify-locals.rs:14:17: 14:26\n+-         StorageLive(_2);                 // scope 1 at $DIR/simplify-locals.rs:16:20: 16:26\n+-         _3 = &_1;                        // scope 1 at $DIR/simplify-locals.rs:16:20: 16:26\n+-         _2 = move _3 as &[u8] (Pointer(Unsize)); // scope 1 at $DIR/simplify-locals.rs:16:20: 16:26\n+-         StorageDead(_2);                 // scope 1 at $DIR/simplify-locals.rs:16:26: 16:27\n+          _0 = const ();                   // scope 0 at $DIR/simplify-locals.rs:13:8: 17:2\n+          StorageDead(_1);                 // scope 0 at $DIR/simplify-locals.rs:17:1: 17:2\n+          return;                          // scope 0 at $DIR/simplify-locals.rs:17:2: 17:2\n+      }\n+  }\n+  "}, {"sha": "76bf175d073d788338e1f1ad86037bf4fef1815b", "filename": "src/test/mir-opt/simplify_locals.d1.SimplifyLocals.diff", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d1.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d1.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d1.SimplifyLocals.diff?ref=a4d30a7b490065f0aa56f58e508a11546445aea9", "patch": "@@ -0,0 +1,18 @@\n+- // MIR for `d1` before SimplifyLocals\n++ // MIR for `d1` after SimplifyLocals\n+  \n+  fn d1() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/simplify-locals.rs:20:9: 20:9\n+-     let mut _1: E;                       // in scope 0 at $DIR/simplify-locals.rs:22:13: 22:17\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_1);                 // scope 0 at $DIR/simplify-locals.rs:22:13: 22:17\n+-         discriminant(_1) = 0;            // scope 0 at $DIR/simplify-locals.rs:22:13: 22:17\n+-         StorageDead(_1);                 // scope 0 at $DIR/simplify-locals.rs:22:17: 22:18\n+          _0 = const ();                   // scope 0 at $DIR/simplify-locals.rs:20:9: 23:2\n+          return;                          // scope 0 at $DIR/simplify-locals.rs:23:2: 23:2\n+      }\n+  }\n+  "}, {"sha": "c06fa09053ce8f7b9cc7bd1f38263745f505cd32", "filename": "src/test/mir-opt/simplify_locals.d2.SimplifyLocals.diff", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.d2.SimplifyLocals.diff?ref=a4d30a7b490065f0aa56f58e508a11546445aea9", "patch": "@@ -0,0 +1,38 @@\n+- // MIR for `d2` before SimplifyLocals\n++ // MIR for `d2` after SimplifyLocals\n+  \n+  fn d2() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/simplify-locals.rs:26:9: 26:9\n+-     let mut _1: E;                       // in scope 0 at $DIR/simplify-locals.rs:28:22: 28:26\n+-     let mut _2: (i32, E);                // in scope 0 at $DIR/simplify-locals.rs:28:5: 28:17\n+-     let mut _3: E;                       // in scope 0 at $DIR/simplify-locals.rs:28:11: 28:15\n+  \n+      bb0: {\n+-         StorageLive(_1);                 // scope 0 at $DIR/simplify-locals.rs:28:22: 28:26\n+-         discriminant(_1) = 1;            // scope 0 at $DIR/simplify-locals.rs:28:22: 28:26\n+-         StorageLive(_2);                 // scope 0 at $DIR/simplify-locals.rs:28:5: 28:17\n+-         StorageLive(_3);                 // scope 0 at $DIR/simplify-locals.rs:28:11: 28:15\n+-         discriminant(_3) = 0;            // scope 0 at $DIR/simplify-locals.rs:28:11: 28:15\n+-         (_2.0: i32) = const 10_i32;      // scope 0 at $DIR/simplify-locals.rs:28:6: 28:16\n+-         (_2.1: E) = const E::A;          // scope 0 at $DIR/simplify-locals.rs:28:6: 28:16\n+-                                          // ty::Const\n+-                                          // + ty: E\n+-                                          // + val: Value(Scalar(0x00))\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/simplify-locals.rs:28:6: 28:16\n+-                                          // + literal: Const { ty: E, val: Value(Scalar(0x00)) }\n+-         StorageDead(_3);                 // scope 0 at $DIR/simplify-locals.rs:28:15: 28:16\n+-         (_2.1: E) = const E::B;          // scope 0 at $DIR/simplify-locals.rs:28:5: 28:26\n+-                                          // ty::Const\n+-                                          // + ty: E\n+-                                          // + val: Value(Scalar(0x01))\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/simplify-locals.rs:28:5: 28:26\n+-                                          // + literal: Const { ty: E, val: Value(Scalar(0x01)) }\n+-         StorageDead(_1);                 // scope 0 at $DIR/simplify-locals.rs:28:25: 28:26\n+-         StorageDead(_2);                 // scope 0 at $DIR/simplify-locals.rs:28:26: 28:27\n+          _0 = const ();                   // scope 0 at $DIR/simplify-locals.rs:26:9: 29:2\n+          return;                          // scope 0 at $DIR/simplify-locals.rs:29:2: 29:2\n+      }\n+  }\n+  "}, {"sha": "85cf398d316939650d99bb46100dad1cbc0ae696", "filename": "src/test/mir-opt/simplify_locals.r.SimplifyLocals.diff", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fmir-opt%2Fsimplify_locals.r.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fmir-opt%2Fsimplify_locals.r.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.r.SimplifyLocals.diff?ref=a4d30a7b490065f0aa56f58e508a11546445aea9", "patch": "@@ -0,0 +1,31 @@\n+- // MIR for `r` before SimplifyLocals\n++ // MIR for `r` after SimplifyLocals\n+  \n+  fn r() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/simplify-locals.rs:32:8: 32:8\n+      let mut _1: i32;                     // in scope 0 at $DIR/simplify-locals.rs:33:9: 33:14\n+-     let mut _2: &i32;                    // in scope 0 at $DIR/simplify-locals.rs:35:13: 35:15\n+-     let mut _3: &mut i32;                // in scope 0 at $DIR/simplify-locals.rs:36:13: 36:19\n+      scope 1 {\n+          debug a => _1;                   // in scope 1 at $DIR/simplify-locals.rs:33:9: 33:14\n+          scope 2 {\n+              scope 3 {\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/simplify-locals.rs:33:9: 33:14\n+          _1 = const 1_i32;                // scope 0 at $DIR/simplify-locals.rs:33:17: 33:18\n+-         StorageLive(_2);                 // scope 1 at $DIR/simplify-locals.rs:35:13: 35:15\n+-         _2 = &_1;                        // scope 1 at $DIR/simplify-locals.rs:35:13: 35:15\n+-         StorageDead(_2);                 // scope 1 at $DIR/simplify-locals.rs:35:15: 35:16\n+-         StorageLive(_3);                 // scope 2 at $DIR/simplify-locals.rs:36:13: 36:19\n+-         _3 = &mut _1;                    // scope 2 at $DIR/simplify-locals.rs:36:13: 36:19\n+-         StorageDead(_3);                 // scope 2 at $DIR/simplify-locals.rs:36:19: 36:20\n+          _0 = const ();                   // scope 0 at $DIR/simplify-locals.rs:32:8: 37:2\n+          StorageDead(_1);                 // scope 0 at $DIR/simplify-locals.rs:37:1: 37:2\n+          return;                          // scope 0 at $DIR/simplify-locals.rs:37:2: 37:2\n+      }\n+  }\n+  "}, {"sha": "991a0721cca302bfaefebf1325988c555f1e2a50", "filename": "src/test/mir-opt/simplify_locals.t1.SimplifyLocals.diff", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t1.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t1.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t1.SimplifyLocals.diff?ref=a4d30a7b490065f0aa56f58e508a11546445aea9", "patch": "@@ -0,0 +1,22 @@\n+- // MIR for `t1` before SimplifyLocals\n++ // MIR for `t1` after SimplifyLocals\n+  \n+  fn t1() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/simplify-locals.rs:42:9: 42:9\n+-     let _1: u32;                         // in scope 0 at $DIR/simplify-locals.rs:44:14: 44:15\n+-     let mut _2: *mut u32;                // in scope 0 at $DIR/simplify-locals.rs:44:14: 44:15\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_1);                 // scope 0 at $DIR/simplify-locals.rs:44:5: 44:17\n+-         StorageLive(_2);                 // scope 1 at $DIR/simplify-locals.rs:44:14: 44:15\n+-         _2 = &/*tls*/ mut X;             // scope 1 at $DIR/simplify-locals.rs:44:14: 44:15\n+-         _1 = (*_2);                      // scope 1 at $DIR/simplify-locals.rs:44:14: 44:15\n+-         StorageDead(_2);                 // scope 0 at $DIR/simplify-locals.rs:44:17: 44:18\n+-         StorageDead(_1);                 // scope 0 at $DIR/simplify-locals.rs:44:17: 44:18\n+          _0 = const ();                   // scope 0 at $DIR/simplify-locals.rs:42:9: 45:2\n+          return;                          // scope 0 at $DIR/simplify-locals.rs:45:2: 45:2\n+      }\n+  }\n+  "}, {"sha": "6c9ed96e78ffe401f2668f3aec5f04d488a1112c", "filename": "src/test/mir-opt/simplify_locals.t2.SimplifyLocals.diff", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t2.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t2.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t2.SimplifyLocals.diff?ref=a4d30a7b490065f0aa56f58e508a11546445aea9", "patch": "@@ -0,0 +1,22 @@\n+- // MIR for `t2` before SimplifyLocals\n++ // MIR for `t2` after SimplifyLocals\n+  \n+  fn t2() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/simplify-locals.rs:48:9: 48:9\n+-     let _1: &mut u32;                    // in scope 0 at $DIR/simplify-locals.rs:50:14: 50:20\n+-     let mut _2: *mut u32;                // in scope 0 at $DIR/simplify-locals.rs:50:19: 50:20\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_1);                 // scope 0 at $DIR/simplify-locals.rs:50:5: 50:22\n+-         StorageLive(_2);                 // scope 1 at $DIR/simplify-locals.rs:50:19: 50:20\n+-         _2 = &/*tls*/ mut X;             // scope 1 at $DIR/simplify-locals.rs:50:19: 50:20\n+-         _1 = &mut (*_2);                 // scope 1 at $DIR/simplify-locals.rs:50:14: 50:20\n+-         StorageDead(_2);                 // scope 0 at $DIR/simplify-locals.rs:50:22: 50:23\n+-         StorageDead(_1);                 // scope 0 at $DIR/simplify-locals.rs:50:22: 50:23\n+          _0 = const ();                   // scope 0 at $DIR/simplify-locals.rs:48:9: 51:2\n+          return;                          // scope 0 at $DIR/simplify-locals.rs:51:2: 51:2\n+      }\n+  }\n+  "}, {"sha": "2d5fb352f8be3b013602ed76b175ff5e11a1d8a9", "filename": "src/test/mir-opt/simplify_locals.t3.SimplifyLocals.diff", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t3.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t3.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t3.SimplifyLocals.diff?ref=a4d30a7b490065f0aa56f58e508a11546445aea9", "patch": "@@ -0,0 +1,26 @@\n+- // MIR for `t3` before SimplifyLocals\n++ // MIR for `t3` after SimplifyLocals\n+  \n+  fn t3() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/simplify-locals.rs:54:9: 54:9\n+-     let _1: u32;                         // in scope 0 at $DIR/simplify-locals.rs:56:14: 56:21\n+-     let mut _2: &mut u32;                // in scope 0 at $DIR/simplify-locals.rs:56:15: 56:21\n+-     let mut _3: *mut u32;                // in scope 0 at $DIR/simplify-locals.rs:56:20: 56:21\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_1);                 // scope 0 at $DIR/simplify-locals.rs:56:5: 56:23\n+-         StorageLive(_2);                 // scope 1 at $DIR/simplify-locals.rs:56:15: 56:21\n+-         StorageLive(_3);                 // scope 1 at $DIR/simplify-locals.rs:56:20: 56:21\n+-         _3 = &/*tls*/ mut X;             // scope 1 at $DIR/simplify-locals.rs:56:20: 56:21\n+-         _2 = &mut (*_3);                 // scope 1 at $DIR/simplify-locals.rs:56:15: 56:21\n+-         _1 = (*_2);                      // scope 1 at $DIR/simplify-locals.rs:56:14: 56:21\n+-         StorageDead(_3);                 // scope 0 at $DIR/simplify-locals.rs:56:23: 56:24\n+-         StorageDead(_2);                 // scope 0 at $DIR/simplify-locals.rs:56:23: 56:24\n+-         StorageDead(_1);                 // scope 0 at $DIR/simplify-locals.rs:56:23: 56:24\n+          _0 = const ();                   // scope 0 at $DIR/simplify-locals.rs:54:9: 57:2\n+          return;                          // scope 0 at $DIR/simplify-locals.rs:57:2: 57:2\n+      }\n+  }\n+  "}, {"sha": "e0e9b3ef4062a68bca106a1e8a857111b4a47e23", "filename": "src/test/mir-opt/simplify_locals.t4.SimplifyLocals.diff", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t4.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t4.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals.t4.SimplifyLocals.diff?ref=a4d30a7b490065f0aa56f58e508a11546445aea9", "patch": "@@ -0,0 +1,22 @@\n+- // MIR for `t4` before SimplifyLocals\n++ // MIR for `t4` after SimplifyLocals\n+  \n+  fn t4() -> u32 {\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/simplify-locals.rs:60:12: 60:15\n+      let mut _1: u32;                     // in scope 0 at $DIR/simplify-locals.rs:62:14: 62:15\n+      let mut _2: *mut u32;                // in scope 0 at $DIR/simplify-locals.rs:62:14: 62:15\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 1 at $DIR/simplify-locals.rs:62:14: 62:15\n+          StorageLive(_2);                 // scope 1 at $DIR/simplify-locals.rs:62:14: 62:15\n+          _2 = &/*tls*/ mut X;             // scope 1 at $DIR/simplify-locals.rs:62:14: 62:15\n+          _1 = (*_2);                      // scope 1 at $DIR/simplify-locals.rs:62:14: 62:15\n+          _0 = Add(move _1, const 1_u32);  // scope 1 at $DIR/simplify-locals.rs:62:14: 62:19\n+          StorageDead(_1);                 // scope 1 at $DIR/simplify-locals.rs:62:18: 62:19\n+          StorageDead(_2);                 // scope 0 at $DIR/simplify-locals.rs:63:1: 63:2\n+          return;                          // scope 0 at $DIR/simplify-locals.rs:63:2: 63:2\n+      }\n+  }\n+  "}, {"sha": "dae0cbb65a4b3f871ddfe1a5f333b86cbeb86999", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.PreCodegen.after.32bit.mir", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.32bit.mir?ref=a4d30a7b490065f0aa56f58e508a11546445aea9", "patch": "@@ -3,18 +3,14 @@\n fn change_loop_body() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/while_let_loops.rs:5:27: 5:27\n     let mut _1: i32;                     // in scope 0 at $DIR/while_let_loops.rs:6:9: 6:15\n-    let mut _2: std::option::Option<u32>; // in scope 0 at $DIR/while_let_loops.rs:7:28: 7:32\n     scope 1 {\n         debug _x => _1;                  // in scope 1 at $DIR/while_let_loops.rs:6:9: 6:15\n     }\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/while_let_loops.rs:6:9: 6:15\n         _1 = const 0_i32;                // scope 0 at $DIR/while_let_loops.rs:6:18: 6:19\n-        StorageLive(_2);                 // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n-        discriminant(_2) = 0;            // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n         _0 = const ();                   // scope 1 at $DIR/while_let_loops.rs:7:5: 10:6\n-        StorageDead(_2);                 // scope 1 at $DIR/while_let_loops.rs:10:5: 10:6\n         StorageDead(_1);                 // scope 0 at $DIR/while_let_loops.rs:11:1: 11:2\n         return;                          // scope 0 at $DIR/while_let_loops.rs:11:2: 11:2\n     }"}, {"sha": "dae0cbb65a4b3f871ddfe1a5f333b86cbeb86999", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.PreCodegen.after.64bit.mir", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.64bit.mir?ref=a4d30a7b490065f0aa56f58e508a11546445aea9", "patch": "@@ -3,18 +3,14 @@\n fn change_loop_body() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/while_let_loops.rs:5:27: 5:27\n     let mut _1: i32;                     // in scope 0 at $DIR/while_let_loops.rs:6:9: 6:15\n-    let mut _2: std::option::Option<u32>; // in scope 0 at $DIR/while_let_loops.rs:7:28: 7:32\n     scope 1 {\n         debug _x => _1;                  // in scope 1 at $DIR/while_let_loops.rs:6:9: 6:15\n     }\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/while_let_loops.rs:6:9: 6:15\n         _1 = const 0_i32;                // scope 0 at $DIR/while_let_loops.rs:6:18: 6:19\n-        StorageLive(_2);                 // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n-        discriminant(_2) = 0;            // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n         _0 = const ();                   // scope 1 at $DIR/while_let_loops.rs:7:5: 10:6\n-        StorageDead(_2);                 // scope 1 at $DIR/while_let_loops.rs:10:5: 10:6\n         StorageDead(_1);                 // scope 0 at $DIR/while_let_loops.rs:11:1: 11:2\n         return;                          // scope 0 at $DIR/while_let_loops.rs:11:2: 11:2\n     }"}, {"sha": "0895f4c18e3879b3a674f70b38b72ea5a3e929fe", "filename": "src/test/ui/lint/issue-69485-var-size-diffs-too-large.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fui%2Flint%2Fissue-69485-var-size-diffs-too-large.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fui%2Flint%2Fissue-69485-var-size-diffs-too-large.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-69485-var-size-diffs-too-large.rs?ref=a4d30a7b490065f0aa56f58e508a11546445aea9", "patch": "@@ -1,5 +1,6 @@\n // build-fail\n // only-x86_64\n+// compile-flags: -Zmir-opt-level=0\n \n fn main() {\n     Bug::V([0; !0]); //~ ERROR is too big for the current"}, {"sha": "51eac95afb9ceb093699f85db530ae8d6de71a93", "filename": "src/test/ui/lint/issue-69485-var-size-diffs-too-large.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fui%2Flint%2Fissue-69485-var-size-diffs-too-large.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fui%2Flint%2Fissue-69485-var-size-diffs-too-large.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-69485-var-size-diffs-too-large.stderr?ref=a4d30a7b490065f0aa56f58e508a11546445aea9", "patch": "@@ -1,5 +1,5 @@\n error: the type `[u8; 18446744073709551615]` is too big for the current architecture\n-  --> $DIR/issue-69485-var-size-diffs-too-large.rs:5:12\n+  --> $DIR/issue-69485-var-size-diffs-too-large.rs:6:12\n    |\n LL |     Bug::V([0; !0]);\n    |            ^^^^^^^"}, {"sha": "c857eb459b8de0af33d9b3c94a26efdf56fa12bf", "filename": "src/test/ui/recursion/issue-38591-non-regular-dropck-recursion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4d30a7b490065f0aa56f58e508a11546445aea9/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.rs?ref=a4d30a7b490065f0aa56f58e508a11546445aea9", "patch": "@@ -5,6 +5,7 @@\n \n // build-fail\n // normalize-stderr-test: \".nll/\" -> \"/\"\n+// compile-flags: -Zmir-opt-level=0\n \n struct S<T> {\n     t: T,"}]}