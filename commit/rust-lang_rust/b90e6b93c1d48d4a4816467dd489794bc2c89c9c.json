{"sha": "b90e6b93c1d48d4a4816467dd489794bc2c89c9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MGU2YjkzYzFkNDhkNGE0ODE2NDY3ZGQ0ODk3OTRiYzJjODljOWM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-31T21:36:51Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-31T21:36:51Z"}, "message": "Whitespace churn.", "tree": {"sha": "898876f89449eb62ed492ed2b3e21e957a0e7e63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/898876f89449eb62ed492ed2b3e21e957a0e7e63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b90e6b93c1d48d4a4816467dd489794bc2c89c9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b90e6b93c1d48d4a4816467dd489794bc2c89c9c", "html_url": "https://github.com/rust-lang/rust/commit/b90e6b93c1d48d4a4816467dd489794bc2c89c9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b90e6b93c1d48d4a4816467dd489794bc2c89c9c/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfca901cfe0e9671569f0a77274c713b7da6d637", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfca901cfe0e9671569f0a77274c713b7da6d637", "html_url": "https://github.com/rust-lang/rust/commit/cfca901cfe0e9671569f0a77274c713b7da6d637"}], "stats": {"total": 103, "additions": 64, "deletions": 39}, "files": [{"sha": "b6d57e2751fc191284460442890f08050f67420f", "filename": "src/boot/be/x86.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90e6b93c1d48d4a4816467dd489794bc2c89c9c/src%2Fboot%2Fbe%2Fx86.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b90e6b93c1d48d4a4816467dd489794bc2c89c9c/src%2Fboot%2Fbe%2Fx86.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fx86.ml?ref=b90e6b93c1d48d4a4816467dd489794bc2c89c9c", "patch": "@@ -315,7 +315,7 @@ let emit_target_specific\n                     match cell with\n                         Il.Cell (Il.Reg (Il.Hreg hr, _)) -> hr = eax\n                       | _ -> false\n-                  in                    \n+                  in\n                     if is_eax lhs\n                     then\n                       mov rhs_ecx rhs"}, {"sha": "114e225169428a4d8391145838108fa8fe31adbb", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 63, "deletions": 38, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/b90e6b93c1d48d4a4816467dd489794bc2c89c9c/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b90e6b93c1d48d4a4816467dd489794bc2c89c9c/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=b90e6b93c1d48d4a4816467dd489794bc2c89c9c", "patch": "@@ -37,32 +37,38 @@ log_task_state(rust_task *task, maybe_proxy<rust_task> *target) {\n     }\n }\n \n-extern \"C\" CDECL char const *str_buf(rust_task *task, rust_str *s);\n+extern \"C\" CDECL char const *\n+str_buf(rust_task *task, rust_str *s);\n \n-extern \"C\" void upcall_grow_task(rust_task *task, size_t n_frame_bytes) {\n+extern \"C\" void\n+upcall_grow_task(rust_task *task, size_t n_frame_bytes) {\n     LOG_UPCALL_ENTRY(task);\n     task->grow(n_frame_bytes);\n }\n \n-extern \"C\" CDECL void upcall_log_int(rust_task *task, int32_t i) {\n+extern \"C\" CDECL\n+void upcall_log_int(rust_task *task, int32_t i) {\n     LOG_UPCALL_ENTRY(task);\n     task->log(rust_log::UPCALL | rust_log::ULOG,\n               \"rust: %\" PRId32 \" (0x%\" PRIx32 \")\", i, i);\n }\n \n-extern \"C\" CDECL void upcall_log_str(rust_task *task, rust_str *str) {\n+extern \"C\" CDECL void\n+upcall_log_str(rust_task *task, rust_str *str) {\n     LOG_UPCALL_ENTRY(task);\n     const char *c = str_buf(task, str);\n     task->log(rust_log::UPCALL | rust_log::ULOG, \"rust: %s\", c);\n }\n \n-extern \"C\" CDECL void upcall_trace_word(rust_task *task, uintptr_t i) {\n+extern \"C\" CDECL void\n+upcall_trace_word(rust_task *task, uintptr_t i) {\n     LOG_UPCALL_ENTRY(task);\n     task->log(rust_log::UPCALL | rust_log::TRACE, \"trace: 0x%\" PRIxPTR \"\", i,\n               i, (char) i);\n }\n \n-extern \"C\" CDECL void upcall_trace_str(rust_task *task, char const *c) {\n+extern \"C\" CDECL void\n+upcall_trace_str(rust_task *task, char const *c) {\n     LOG_UPCALL_ENTRY(task);\n     task->log(rust_log::UPCALL | rust_log::TRACE, \"trace: %s\", c);\n }\n@@ -77,7 +83,8 @@ upcall_new_port(rust_task *task, size_t unit_sz) {\n     return new (dom) rust_port(task, unit_sz);\n }\n \n-extern \"C\" CDECL void upcall_del_port(rust_task *task, rust_port *port) {\n+extern \"C\" CDECL void\n+upcall_del_port(rust_task *task, rust_port *port) {\n     LOG_UPCALL_ENTRY(task);\n     task->log(rust_log::UPCALL | rust_log::MEM | rust_log::COMM,\n               \"upcall del_port(0x%\" PRIxPTR \")\", (uintptr_t) port);\n@@ -117,7 +124,8 @@ upcall_flush_chan(rust_task *task, rust_chan *chan) {\n  * Cannot Yield: If the task were to unwind, the dropped ref would still\n  * appear to be live, causing modify-after-free errors.\n  */\n-extern \"C\" CDECL void upcall_del_chan(rust_task *task, rust_chan *chan) {\n+extern \"C\" CDECL\n+void upcall_del_chan(rust_task *task, rust_chan *chan) {\n     LOG_UPCALL_ENTRY(task);\n \n     task->log(rust_log::UPCALL | rust_log::MEM | rust_log::COMM,\n@@ -166,13 +174,15 @@ upcall_clone_chan(rust_task *task,\n     return new (target_task->dom) rust_chan(target_task, port);\n }\n \n-extern \"C\" CDECL void upcall_yield(rust_task *task) {\n+extern \"C\" CDECL void\n+upcall_yield(rust_task *task) {\n     LOG_UPCALL_ENTRY(task);\n     task->log(rust_log::UPCALL | rust_log::COMM, \"upcall yield()\");\n     task->yield(1);\n }\n \n-extern \"C\" CDECL void upcall_sleep(rust_task *task, size_t time_in_us) {\n+extern \"C\" CDECL void\n+upcall_sleep(rust_task *task, size_t time_in_us) {\n     LOG_UPCALL_ENTRY(task);\n     task->log(rust_log::UPCALL | rust_log::TASK, \"elapsed %d\",\n               task->yield_timer.get_elapsed_time());\n@@ -242,8 +252,11 @@ upcall_recv(rust_task *task, uintptr_t *dptr, rust_port *port) {\n     task->yield(3);\n }\n \n-extern \"C\" CDECL void upcall_fail(rust_task *task, char const *expr,\n-    char const *file, size_t line) {\n+extern \"C\" CDECL void\n+upcall_fail(rust_task *task,\n+            char const *expr,\n+            char const *file,\n+            size_t line) {\n     LOG_UPCALL_ENTRY(task);\n     task->log(rust_log::UPCALL | rust_log::ERR,\n               \"upcall fail '%s', %s:%\" PRIdPTR, expr, file, line);\n@@ -290,8 +303,7 @@ upcall_exit(rust_task *task) {\n }\n \n extern \"C\" CDECL uintptr_t\n-upcall_malloc(rust_task *task, size_t nbytes, type_desc *td)\n-{\n+upcall_malloc(rust_task *task, size_t nbytes, type_desc *td) {\n     LOG_UPCALL_ENTRY(task);\n \n     task->dom->log(rust_log::UPCALL|rust_log::MEM,\n@@ -311,8 +323,7 @@ upcall_malloc(rust_task *task, size_t nbytes, type_desc *td)\n  * Called whenever an object's ref count drops to zero.\n  */\n extern \"C\" CDECL void\n-upcall_free(rust_task *task, void* ptr, uintptr_t is_gc)\n-{\n+upcall_free(rust_task *task, void* ptr, uintptr_t is_gc) {\n     LOG_UPCALL_ENTRY(task);\n     rust_dom *dom = task->dom;\n     dom->log(rust_log::UPCALL|rust_log::MEM,\n@@ -322,8 +333,7 @@ upcall_free(rust_task *task, void* ptr, uintptr_t is_gc)\n }\n \n extern \"C\" CDECL uintptr_t\n-upcall_mark(rust_task *task, void* ptr)\n-{\n+upcall_mark(rust_task *task, void* ptr) {\n     LOG_UPCALL_ENTRY(task);\n \n     rust_dom *dom = task->dom;\n@@ -356,8 +366,7 @@ upcall_new_str(rust_task *task, char const *s, size_t fill) {\n }\n \n extern \"C\" CDECL rust_vec *\n-upcall_new_vec(rust_task *task, size_t fill, type_desc *td)\n-{\n+upcall_new_vec(rust_task *task, size_t fill, type_desc *td) {\n     LOG_UPCALL_ENTRY(task);\n     rust_dom *dom = task->dom;\n     dom->log(rust_log::UPCALL|rust_log::MEM,\n@@ -376,8 +385,10 @@ upcall_new_vec(rust_task *task, size_t fill, type_desc *td)\n }\n \n extern \"C\" CDECL rust_str *\n-upcall_vec_grow(rust_task *task, rust_vec *v, size_t n_bytes, uintptr_t is_gc)\n-{\n+upcall_vec_grow(rust_task *task,\n+                rust_vec *v,\n+                size_t n_bytes,\n+                uintptr_t is_gc) {\n     LOG_UPCALL_ENTRY(task);\n     rust_dom *dom = task->dom;\n     task->log(rust_log::UPCALL|rust_log::MEM,\n@@ -419,18 +430,25 @@ upcall_vec_grow(rust_task *task, rust_vec *v, size_t n_bytes, uintptr_t is_gc)\n }\n \n static rust_crate_cache::c_sym *\n-fetch_c_sym(rust_task *task, rust_crate const *curr_crate, size_t lib_num,\n-    size_t c_sym_num, char const *library, char const *symbol) {\n+fetch_c_sym(rust_task *task,\n+            rust_crate const *curr_crate,\n+            size_t lib_num,\n+            size_t c_sym_num,\n+            char const *library,\n+            char const *symbol) {\n     rust_crate_cache *cache = task->get_crate_cache(curr_crate);\n     rust_crate_cache::lib *l = cache->get_lib(lib_num, library);\n     return cache->get_c_sym(c_sym_num, l, symbol);\n }\n \n-extern \"C\" CDECL uintptr_t upcall_require_rust_sym(rust_task *task,\n-    rust_crate const *curr_crate, size_t lib_num, // # of lib\n-    size_t c_sym_num, // # of C sym \"rust_crate\" in lib\n-    size_t rust_sym_num, // # of rust sym\n-    char const *library, char const **path) {\n+extern \"C\" CDECL uintptr_t\n+upcall_require_rust_sym(rust_task *task,\n+                        rust_crate const *curr_crate,\n+                        size_t lib_num, // # of lib\n+                        size_t c_sym_num, // # of C sym \"rust_crate\" in lib\n+                        size_t rust_sym_num, // # of rust sym\n+                        char const *library,\n+                        char const **path) {\n     LOG_UPCALL_ENTRY(task);\n     rust_dom *dom = task->dom;\n \n@@ -469,10 +487,13 @@ extern \"C\" CDECL uintptr_t upcall_require_rust_sym(rust_task *task,\n     return addr;\n }\n \n-extern \"C\" CDECL uintptr_t upcall_require_c_sym(rust_task *task,\n-    rust_crate const *curr_crate, size_t lib_num, // # of lib\n-    size_t c_sym_num, // # of C sym\n-    char const *library, char const *symbol) {\n+extern \"C\" CDECL uintptr_t\n+upcall_require_c_sym(rust_task *task,\n+                     rust_crate const *curr_crate,\n+                     size_t lib_num, // # of lib\n+                     size_t c_sym_num, // # of C sym\n+                     char const *library,\n+                     char const *symbol) {\n     LOG_UPCALL_ENTRY(task);\n \n     task->log(rust_log::UPCALL | rust_log::CACHE,\n@@ -503,8 +524,7 @@ upcall_get_type_desc(rust_task *task,\n                      size_t size,\n                      size_t align,\n                      size_t n_descs,\n-                     type_desc const **descs)\n-{\n+                     type_desc const **descs) {\n     LOG_UPCALL_ENTRY(task);\n     task->log(rust_log::UPCALL | rust_log::CACHE,\n               \"upcall get_type_desc with size=%\" PRIdPTR\n@@ -551,8 +571,11 @@ upcall_new_task(rust_task *spawner, const char *name) {\n }\n \n extern \"C\" CDECL rust_task *\n-upcall_start_task(rust_task *spawner, rust_task *task,\n-    uintptr_t exit_task_glue, uintptr_t spawnee_fn, size_t callsz) {\n+upcall_start_task(rust_task *spawner,\n+                  rust_task *task,\n+                  uintptr_t exit_task_glue,\n+                  uintptr_t spawnee_fn,\n+                  size_t callsz) {\n     LOG_UPCALL_ENTRY(spawner);\n \n     rust_dom *dom = spawner->dom;\n@@ -590,7 +613,9 @@ upcall_new_thread(rust_task *task, const char *name) {\n extern \"C\" CDECL maybe_proxy<rust_task> *\n upcall_start_thread(rust_task *spawner,\n                     maybe_proxy<rust_task> *root_task_proxy,\n-    uintptr_t exit_task_glue, uintptr_t spawnee_fn, size_t callsz) {\n+                    uintptr_t exit_task_glue,\n+                    uintptr_t spawnee_fn,\n+                    size_t callsz) {\n     LOG_UPCALL_ENTRY(spawner);\n \n     rust_dom *dom = spawner->dom;"}]}