{"sha": "0e67d1735858d6c1bb8d1b9005cd371d31fdfd2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNjdkMTczNTg1OGQ2YzFiYjhkMWI5MDA1Y2QzNzFkMzFmZGZkMmM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-10-17T15:24:46Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-10-17T15:24:46Z"}, "message": "make `erase_regions` use a query instead of an ad-hoc cache", "tree": {"sha": "afa8119cc737db3f35ff580c012bff957b81f117", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afa8119cc737db3f35ff580c012bff957b81f117"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e67d1735858d6c1bb8d1b9005cd371d31fdfd2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e67d1735858d6c1bb8d1b9005cd371d31fdfd2c", "html_url": "https://github.com/rust-lang/rust/commit/0e67d1735858d6c1bb8d1b9005cd371d31fdfd2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e67d1735858d6c1bb8d1b9005cd371d31fdfd2c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ae18a18b48850dc3e45ab1a09b243b6c61c265e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ae18a18b48850dc3e45ab1a09b243b6c61c265e", "html_url": "https://github.com/rust-lang/rust/commit/0ae18a18b48850dc3e45ab1a09b243b6c61c265e"}], "stats": {"total": 164, "additions": 99, "deletions": 65}, "files": [{"sha": "ae3157e81a0a71a044fa285df66258a4800224f3", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e67d1735858d6c1bb8d1b9005cd371d31fdfd2c/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e67d1735858d6c1bb8d1b9005cd371d31fdfd2c/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=0e67d1735858d6c1bb8d1b9005cd371d31fdfd2c", "patch": "@@ -609,6 +609,7 @@ define_dep_nodes!( <'tcx>\n     [] PostorderCnums,\n     [] HasCloneClosures(CrateNum),\n     [] HasCopyClosures(CrateNum),\n+    [] EraseRegionsTy { ty: Ty<'tcx> },\n \n     [] Freevars(DefId),\n     [] MaybeUnusedTraitImport(DefId),"}, {"sha": "3d5e8ea583ccc71b3c78d0dd0160c58838183340", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e67d1735858d6c1bb8d1b9005cd371d31fdfd2c/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e67d1735858d6c1bb8d1b9005cd371d31fdfd2c/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=0e67d1735858d6c1bb8d1b9005cd371d31fdfd2c", "patch": "@@ -892,9 +892,6 @@ pub struct GlobalCtxt<'tcx> {\n     // Internal cache for metadata decoding. No need to track deps on this.\n     pub rcache: RefCell<FxHashMap<ty::CReaderCacheKey, Ty<'tcx>>>,\n \n-    // FIXME dep tracking -- should be harmless enough\n-    pub normalized_cache: RefCell<FxHashMap<Ty<'tcx>, Ty<'tcx>>>,\n-\n     /// Caches the results of trait selection. This cache is used\n     /// for things that do not have to do with the parameters in scope.\n     pub selection_cache: traits::SelectionCache<'tcx>,\n@@ -1172,7 +1169,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             maps: maps::Maps::new(providers),\n             mir_passes,\n             rcache: RefCell::new(FxHashMap()),\n-            normalized_cache: RefCell::new(FxHashMap()),\n             selection_cache: traits::SelectionCache::new(),\n             evaluation_cache: traits::EvaluationCache::new(),\n             crate_name: Symbol::intern(crate_name),"}, {"sha": "4f8fca67949b5ddd645ffba529ec183e74290184", "filename": "src/librustc/ty/erase_regions.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/0e67d1735858d6c1bb8d1b9005cd371d31fdfd2c/src%2Flibrustc%2Fty%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e67d1735858d6c1bb8d1b9005cd371d31fdfd2c/src%2Flibrustc%2Fty%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferase_regions.rs?ref=0e67d1735858d6c1bb8d1b9005cd371d31fdfd2c", "patch": "@@ -0,0 +1,79 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use ty::{self, Ty, TyCtxt};\n+use ty::fold::{TypeFolder, TypeFoldable};\n+\n+pub(super) fn provide(providers: &mut ty::maps::Providers) {\n+    *providers = ty::maps::Providers {\n+        erase_regions_ty,\n+        ..*providers\n+    };\n+}\n+\n+fn erase_regions_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {\n+    // NB: use `super_fold_with` here. If we used `fold_with`, it\n+    // could invoke the `erase_regions_ty` query recursively.\n+    ty.super_fold_with(&mut RegionEraserVisitor { tcx })\n+}\n+\n+impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n+    /// Returns an equivalent value with all free regions removed (note\n+    /// that late-bound regions remain, because they are important for\n+    /// subtyping, but they are anonymized and normalized as well)..\n+    pub fn erase_regions<T>(self, value: &T) -> T\n+        where T : TypeFoldable<'tcx>\n+    {\n+        let value1 = value.fold_with(&mut RegionEraserVisitor { tcx: self });\n+        debug!(\"erase_regions({:?}) = {:?}\", value, value1);\n+        value1\n+    }\n+}\n+\n+struct RegionEraserVisitor<'a, 'gcx: 'tcx, 'tcx: 'a> {\n+    tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+}\n+\n+impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for RegionEraserVisitor<'a, 'gcx, 'tcx> {\n+    fn tcx<'b>(&'b self) -> TyCtxt<'b, 'gcx, 'tcx> {\n+        self.tcx\n+    }\n+\n+    fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n+        if let Some(ty_lifted) = self.tcx.lift_to_global(&ty) {\n+            self.tcx.erase_regions_ty(ty_lifted)\n+        } else {\n+            ty.super_fold_with(self)\n+        }\n+    }\n+\n+    fn fold_binder<T>(&mut self, t: &ty::Binder<T>) -> ty::Binder<T>\n+        where T : TypeFoldable<'tcx>\n+    {\n+        let u = self.tcx.anonymize_late_bound_regions(t);\n+        u.super_fold_with(self)\n+    }\n+\n+    fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n+        // because late-bound regions affect subtyping, we can't\n+        // erase the bound/free distinction, but we can replace\n+        // all free regions with 'erased.\n+        //\n+        // Note that we *CAN* replace early-bound regions -- the\n+        // type system never \"sees\" those, they get substituted\n+        // away. In trans, they will always be erased to 'erased\n+        // whenever a substitution occurs.\n+        match *r {\n+            ty::ReLateBound(..) => r,\n+            _ => self.tcx.types.re_erased\n+        }\n+    }\n+}\n+"}, {"sha": "edd4329fa419c39f03cbd4e1dd443d8271e705d7", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0e67d1735858d6c1bb8d1b9005cd371d31fdfd2c/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e67d1735858d6c1bb8d1b9005cd371d31fdfd2c/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=0e67d1735858d6c1bb8d1b9005cd371d31fdfd2c", "patch": "@@ -444,67 +444,6 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for RegionReplacer<'a, 'gcx, 'tcx> {\n     }\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-// Region eraser\n-\n-impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n-    /// Returns an equivalent value with all free regions removed (note\n-    /// that late-bound regions remain, because they are important for\n-    /// subtyping, but they are anonymized and normalized as well)..\n-    pub fn erase_regions<T>(self, value: &T) -> T\n-        where T : TypeFoldable<'tcx>\n-    {\n-        let value1 = value.fold_with(&mut RegionEraser(self));\n-        debug!(\"erase_regions({:?}) = {:?}\",\n-               value, value1);\n-        return value1;\n-\n-        struct RegionEraser<'a, 'gcx: 'a+'tcx, 'tcx: 'a>(TyCtxt<'a, 'gcx, 'tcx>);\n-\n-        impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for RegionEraser<'a, 'gcx, 'tcx> {\n-            fn tcx<'b>(&'b self) -> TyCtxt<'b, 'gcx, 'tcx> { self.0 }\n-\n-            fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-                if let Some(u) = self.tcx().normalized_cache.borrow().get(&ty).cloned() {\n-                    return u;\n-                }\n-\n-                // FIXME(eddyb) should local contexts have a cache too?\n-                if let Some(ty_lifted) = self.tcx().lift_to_global(&ty) {\n-                    let tcx = self.tcx().global_tcx();\n-                    let t_norm = ty_lifted.super_fold_with(&mut RegionEraser(tcx));\n-                    tcx.normalized_cache.borrow_mut().insert(ty_lifted, t_norm);\n-                    t_norm\n-                } else {\n-                    ty.super_fold_with(self)\n-                }\n-            }\n-\n-            fn fold_binder<T>(&mut self, t: &ty::Binder<T>) -> ty::Binder<T>\n-                where T : TypeFoldable<'tcx>\n-            {\n-                let u = self.tcx().anonymize_late_bound_regions(t);\n-                u.super_fold_with(self)\n-            }\n-\n-            fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n-                // because late-bound regions affect subtyping, we can't\n-                // erase the bound/free distinction, but we can replace\n-                // all free regions with 'erased.\n-                //\n-                // Note that we *CAN* replace early-bound regions -- the\n-                // type system never \"sees\" those, they get substituted\n-                // away. In trans, they will always be erased to 'erased\n-                // whenever a substitution occurs.\n-                match *r {\n-                    ty::ReLateBound(..) => r,\n-                    _ => self.tcx().types.re_erased\n-                }\n-            }\n-        }\n-    }\n-}\n-\n ///////////////////////////////////////////////////////////////////////////\n // Region shifter\n //"}, {"sha": "8f8cda0e0f1d1dff3c4be091232d5595ce0635bc", "filename": "src/librustc/ty/maps/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e67d1735858d6c1bb8d1b9005cd371d31fdfd2c/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e67d1735858d6c1bb8d1b9005cd371d31fdfd2c/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fconfig.rs?ref=0e67d1735858d6c1bb8d1b9005cd371d31fdfd2c", "patch": "@@ -75,6 +75,12 @@ impl<'tcx> QueryDescription for queries::super_predicates_of<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::erase_regions_ty<'tcx> {\n+    fn describe(_tcx: TyCtxt, ty: Ty<'tcx>) -> String {\n+        format!(\"erasing regions from `{:?}`\", ty)\n+    }\n+}\n+\n impl<'tcx> QueryDescription for queries::type_param_predicates<'tcx> {\n     fn describe(tcx: TyCtxt, (_, def_id): (DefId, DefId)) -> String {\n         let id = tcx.hir.as_local_node_id(def_id).unwrap();"}, {"sha": "95192dc5baeae91711d14ddb6292069c1e5dc2c8", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0e67d1735858d6c1bb8d1b9005cd371d31fdfd2c/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e67d1735858d6c1bb8d1b9005cd371d31fdfd2c/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=0e67d1735858d6c1bb8d1b9005cd371d31fdfd2c", "patch": "@@ -341,12 +341,21 @@ define_maps! { <'tcx>\n \n     [] fn has_copy_closures: HasCopyClosures(CrateNum) -> bool,\n     [] fn has_clone_closures: HasCloneClosures(CrateNum) -> bool,\n+\n+    // Erases regions from `ty` to yield a new type.\n+    // Normally you would just use `tcx.erase_regions(&value)`,\n+    // however, which uses this query as a kind of cache.\n+    [] fn erase_regions_ty: erase_regions_ty(Ty<'tcx>) -> Ty<'tcx>,\n }\n \n //////////////////////////////////////////////////////////////////////\n // These functions are little shims used to find the dep-node for a\n // given query when there is not a *direct* mapping:\n \n+fn erase_regions_ty<'tcx>(ty: Ty<'tcx>) -> DepConstructor<'tcx> {\n+    DepConstructor::EraseRegionsTy { ty }\n+}\n+\n fn type_param_predicates<'tcx>((item_id, param_id): (DefId, DefId)) -> DepConstructor<'tcx> {\n     DepConstructor::TypeParamPredicates {\n         item_id,"}, {"sha": "3fc9d854f295f76f73dfe58b21076e424fd038c2", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e67d1735858d6c1bb8d1b9005cd371d31fdfd2c/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e67d1735858d6c1bb8d1b9005cd371d31fdfd2c/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=0e67d1735858d6c1bb8d1b9005cd371d31fdfd2c", "patch": "@@ -701,6 +701,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::CompileCodegenUnit |\n         DepKind::FulfillObligation |\n         DepKind::VtableMethods |\n+        DepKind::EraseRegionsTy |\n \n         // These are just odd\n         DepKind::Null |\n@@ -773,6 +774,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::ConstIsRvaluePromotableToStatic => {\n             force!(const_is_rvalue_promotable_to_static, def_id!());\n         }\n+        DepKind::RvaluePromotableMap => { force!(rvalue_promotable_map, def_id!()); }\n         DepKind::ImplParent => { force!(impl_parent, def_id!()); }\n         DepKind::TraitOfItem => { force!(trait_of_item, def_id!()); }\n         DepKind::IsExportedSymbol => { force!(is_exported_symbol, def_id!()); }"}, {"sha": "129c81c5cd61f75cc0c96b628c324c5b44085973", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e67d1735858d6c1bb8d1b9005cd371d31fdfd2c/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e67d1735858d6c1bb8d1b9005cd371d31fdfd2c/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=0e67d1735858d6c1bb8d1b9005cd371d31fdfd2c", "patch": "@@ -90,6 +90,7 @@ pub mod adjustment;\n pub mod binding;\n pub mod cast;\n pub mod error;\n+mod erase_regions;\n pub mod fast_reject;\n pub mod fold;\n pub mod inhabitedness;\n@@ -2575,6 +2576,7 @@ fn original_crate_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n pub fn provide(providers: &mut ty::maps::Providers) {\n     util::provide(providers);\n     context::provide(providers);\n+    erase_regions::provide(providers);\n     *providers = ty::maps::Providers {\n         associated_item,\n         associated_item_def_ids,"}]}