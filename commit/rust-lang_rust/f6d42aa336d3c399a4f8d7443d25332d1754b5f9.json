{"sha": "f6d42aa336d3c399a4f8d7443d25332d1754b5f9", "node_id": "C_kwDOAAsO6NoAKGY2ZDQyYWEzMzZkM2MzOTlhNGY4ZDc0NDNkMjUzMzJkMTc1NGI1Zjk", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-08-05T09:14:15Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-08-05T09:14:15Z"}, "message": "remove an unnecessary `str::rfind`", "tree": {"sha": "ac29ab4c769d940346fd0077bb0e5d6380a6fd25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac29ab4c769d940346fd0077bb0e5d6380a6fd25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6d42aa336d3c399a4f8d7443d25332d1754b5f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6d42aa336d3c399a4f8d7443d25332d1754b5f9", "html_url": "https://github.com/rust-lang/rust/commit/f6d42aa336d3c399a4f8d7443d25332d1754b5f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6d42aa336d3c399a4f8d7443d25332d1754b5f9/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f5d8d49eb6111931091f700d07518cd2b80bc18", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f5d8d49eb6111931091f700d07518cd2b80bc18", "html_url": "https://github.com/rust-lang/rust/commit/1f5d8d49eb6111931091f700d07518cd2b80bc18"}], "stats": {"total": 62, "additions": 28, "deletions": 34}, "files": [{"sha": "fc54eedcffee17eb9f552afb773953b419379f31", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 22, "deletions": 31, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/f6d42aa336d3c399a4f8d7443d25332d1754b5f9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d42aa336d3c399a4f8d7443d25332d1754b5f9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=f6d42aa336d3c399a4f8d7443d25332d1754b5f9", "patch": "@@ -50,7 +50,6 @@ use rustc_span::hygiene::DesugaringKind;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::{BytePos, Pos};\n use rustc_target::spec::abi::Abi::RustIntrinsic;\n use rustc_trait_selection::infer::InferCtxtExt;\n use rustc_trait_selection::traits::{self, ObligationCauseCode};\n@@ -2391,37 +2390,29 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 expr,\n                 Some(span),\n             );\n+        } else if let ty::RawPtr(ty_and_mut) = expr_t.kind()\n+            && let ty::Adt(adt_def, _) = ty_and_mut.ty.kind()\n+            && let ExprKind::Field(base_expr, _) = expr.kind\n+            && adt_def.variants().len() == 1\n+            && adt_def\n+                .variants()\n+                .iter()\n+                .next()\n+                .unwrap()\n+                .fields\n+                .iter()\n+                .any(|f| f.ident(self.tcx) == field)\n+        {\n+            err.multipart_suggestion(\n+                \"to access the field, dereference first\",\n+                vec![\n+                    (base_expr.span.shrink_to_lo(), \"(*\".to_string()),\n+                    (base_expr.span.shrink_to_hi(), \")\".to_string()),\n+                ],\n+                Applicability::MaybeIncorrect,\n+            );\n         } else {\n-            let mut found = false;\n-\n-            if let ty::RawPtr(ty_and_mut) = expr_t.kind()\n-                && let ty::Adt(adt_def, _) = ty_and_mut.ty.kind()\n-            {\n-                if adt_def.variants().len() == 1\n-                    && adt_def\n-                        .variants()\n-                        .iter()\n-                        .next()\n-                        .unwrap()\n-                        .fields\n-                        .iter()\n-                        .any(|f| f.ident(self.tcx) == field)\n-                {\n-                    if let Some(dot_loc) = expr_snippet.rfind('.') {\n-                        found = true;\n-                        err.span_suggestion(\n-                            expr.span.with_hi(expr.span.lo() + BytePos::from_usize(dot_loc)),\n-                            \"to access the field, dereference first\",\n-                            format!(\"(*{})\", &expr_snippet[0..dot_loc]),\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    }\n-                }\n-            }\n-\n-            if !found {\n-                err.help(\"methods are immutable and cannot be assigned to\");\n-            }\n+            err.help(\"methods are immutable and cannot be assigned to\");\n         }\n \n         err.emit();"}, {"sha": "7a0cfb2cf51a727bb39f0df6a92a3cf93e5842ed", "filename": "src/test/ui/typeck/issue-91210-ptr-method.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f6d42aa336d3c399a4f8d7443d25332d1754b5f9/src%2Ftest%2Fui%2Ftypeck%2Fissue-91210-ptr-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6d42aa336d3c399a4f8d7443d25332d1754b5f9/src%2Ftest%2Fui%2Ftypeck%2Fissue-91210-ptr-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91210-ptr-method.stderr?ref=f6d42aa336d3c399a4f8d7443d25332d1754b5f9", "patch": "@@ -2,9 +2,12 @@ error[E0615]: attempted to take value of method `read` on type `*mut Foo`\n   --> $DIR/issue-91210-ptr-method.rs:10:7\n    |\n LL |     x.read = 4;\n-   |     - ^^^^ method, not a field\n-   |     |\n-   |     help: to access the field, dereference first: `(*x)`\n+   |       ^^^^ method, not a field\n+   |\n+help: to access the field, dereference first\n+   |\n+LL |     (*x).read = 4;\n+   |     ++ +\n \n error: aborting due to previous error\n "}]}