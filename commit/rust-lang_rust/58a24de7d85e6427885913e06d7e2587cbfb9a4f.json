{"sha": "58a24de7d85e6427885913e06d7e2587cbfb9a4f", "node_id": "C_kwDOAAsO6NoAKDU4YTI0ZGU3ZDg1ZTY0Mjc4ODU5MTNlMDZkN2UyNTg3Y2JmYjlhNGY", "commit": {"author": {"name": "TheDoctor314", "email": "64731940+TheDoctor314@users.noreply.github.com", "date": "2021-11-15T15:21:48Z"}, "committer": {"name": "TheDoctor314", "email": "64731940+TheDoctor314@users.noreply.github.com", "date": "2021-11-15T16:58:22Z"}, "message": "Fix `impl_def_from_trait`\n\nRevert \"Fix `impl_trait` function to emit correct ast\"\n\nThis reverts commit 55a4813151a8f36dcdb520c45a461fe5dfbed499.\n\nFix `impl_def_from_trait`\n\nIt now generates the correct `ast::Impl` using\n`generate_trait_impl_text` and parses it to form the right node (copied\nfrom the private fn 'make::ast_from_text').", "tree": {"sha": "583c542b9e0833c69e40b6d8d910947b87c2d1cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/583c542b9e0833c69e40b6d8d910947b87c2d1cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58a24de7d85e6427885913e06d7e2587cbfb9a4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58a24de7d85e6427885913e06d7e2587cbfb9a4f", "html_url": "https://github.com/rust-lang/rust/commit/58a24de7d85e6427885913e06d7e2587cbfb9a4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58a24de7d85e6427885913e06d7e2587cbfb9a4f/comments", "author": {"login": "TheDoctor314", "id": 64731940, "node_id": "MDQ6VXNlcjY0NzMxOTQw", "avatar_url": "https://avatars.githubusercontent.com/u/64731940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TheDoctor314", "html_url": "https://github.com/TheDoctor314", "followers_url": "https://api.github.com/users/TheDoctor314/followers", "following_url": "https://api.github.com/users/TheDoctor314/following{/other_user}", "gists_url": "https://api.github.com/users/TheDoctor314/gists{/gist_id}", "starred_url": "https://api.github.com/users/TheDoctor314/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TheDoctor314/subscriptions", "organizations_url": "https://api.github.com/users/TheDoctor314/orgs", "repos_url": "https://api.github.com/users/TheDoctor314/repos", "events_url": "https://api.github.com/users/TheDoctor314/events{/privacy}", "received_events_url": "https://api.github.com/users/TheDoctor314/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TheDoctor314", "id": 64731940, "node_id": "MDQ6VXNlcjY0NzMxOTQw", "avatar_url": "https://avatars.githubusercontent.com/u/64731940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TheDoctor314", "html_url": "https://github.com/TheDoctor314", "followers_url": "https://api.github.com/users/TheDoctor314/followers", "following_url": "https://api.github.com/users/TheDoctor314/following{/other_user}", "gists_url": "https://api.github.com/users/TheDoctor314/gists{/gist_id}", "starred_url": "https://api.github.com/users/TheDoctor314/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TheDoctor314/subscriptions", "organizations_url": "https://api.github.com/users/TheDoctor314/orgs", "repos_url": "https://api.github.com/users/TheDoctor314/repos", "events_url": "https://api.github.com/users/TheDoctor314/events{/privacy}", "received_events_url": "https://api.github.com/users/TheDoctor314/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55a4813151a8f36dcdb520c45a461fe5dfbed499", "url": "https://api.github.com/repos/rust-lang/rust/commits/55a4813151a8f36dcdb520c45a461fe5dfbed499", "html_url": "https://github.com/rust-lang/rust/commit/55a4813151a8f36dcdb520c45a461fe5dfbed499"}], "stats": {"total": 91, "additions": 26, "deletions": 65}, "files": [{"sha": "5ba045d3c8f193d8cfb9260143890800c73f3b55", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/58a24de7d85e6427885913e06d7e2587cbfb9a4f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a24de7d85e6427885913e06d7e2587cbfb9a4f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=58a24de7d85e6427885913e06d7e2587cbfb9a4f", "patch": "@@ -160,7 +160,24 @@ fn impl_def_from_trait(\n     if trait_items.is_empty() {\n         return None;\n     }\n-    let impl_def = make::impl_trait(&trait_path, &adt, \"\");\n+    let impl_def = {\n+        use syntax::ast::Impl;\n+        let text = generate_trait_impl_text(adt, trait_path.to_string().as_str(), \"\");\n+        let parse = syntax::SourceFile::parse(&text);\n+        let node = match parse.tree().syntax().descendants().find_map(Impl::cast) {\n+            Some(it) => it,\n+            None => {\n+                panic!(\n+                    \"Failed to make ast node `{}` from text {}\",\n+                    std::any::type_name::<Impl>(),\n+                    text\n+                )\n+            }\n+        };\n+        let node = node.clone_subtree();\n+        assert_eq!(node.syntax().text_range().start(), 0.into());\n+        node\n+    };\n \n     let (impl_def, first_assoc_item) =\n         add_trait_assoc_items_to_impl(sema, trait_items, trait_, impl_def, target_scope);"}, {"sha": "e1938307cf36eb7559eae80857214b9a442a5690", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 8, "deletions": 64, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/58a24de7d85e6427885913e06d7e2587cbfb9a4f/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a24de7d85e6427885913e06d7e2587cbfb9a4f/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=58a24de7d85e6427885913e06d7e2587cbfb9a4f", "patch": "@@ -10,13 +10,9 @@\n //! `parse(format!())` we use internally is an implementation detail -- long\n //! term, it will be replaced with direct tree manipulation.\n use itertools::Itertools;\n-use smol_str::SmolStr;\n use stdx::{format_to, never};\n \n-use crate::{\n-    ast::{self, HasAttrs, HasGenericParams, HasName, HasTypeBounds},\n-    AstNode, SourceFile, SyntaxKind, SyntaxToken,\n-};\n+use crate::{ast, AstNode, SourceFile, SyntaxKind, SyntaxToken};\n \n /// While the parent module defines basic atomic \"constructors\", the `ext`\n /// module defines shortcuts for common things.\n@@ -153,65 +149,13 @@ pub fn impl_(\n     ast_from_text(&format!(\"impl{} {}{} {{}}\", params, ty, ty_params))\n }\n \n-pub fn impl_trait(trait_: &ast::Path, adt: &ast::Adt, code: &str) -> ast::Impl {\n-    let generic_params = adt.generic_param_list();\n-    let mut buf = String::with_capacity(code.len());\n-    buf.push_str(\"\\n\\n\");\n-    adt.attrs()\n-        .filter(|attr| attr.as_simple_call().map(|(name, _arg)| name == \"cfg\").unwrap_or(false))\n-        .for_each(|attr| buf.push_str(format!(\"{}\\n\", attr.to_string()).as_str()));\n-    buf.push_str(\"impl\");\n-    if let Some(generic_params) = &generic_params {\n-        let lifetimes = generic_params.lifetime_params().map(|lt| format!(\"{}\", lt.syntax()));\n-        let type_params = generic_params.type_params().map(|type_param| {\n-            let mut buf = String::new();\n-            if let Some(it) = type_param.name() {\n-                format_to!(buf, \"{}\", it.syntax());\n-            }\n-            if let Some(it) = type_param.colon_token() {\n-                format_to!(buf, \"{} \", it);\n-            }\n-            if let Some(it) = type_param.type_bound_list() {\n-                format_to!(buf, \"{}\", it.syntax());\n-            }\n-            buf\n-        });\n-        let const_params = generic_params.const_params().map(|t| t.syntax().to_string());\n-        let generics = lifetimes.chain(type_params).chain(const_params).format(\", \");\n-        format_to!(buf, \"<{}>\", generics);\n-    }\n-    buf.push(' ');\n-    let trait_text = trait_.to_string();\n-    buf.push_str(&trait_text);\n-    buf.push_str(\" for \");\n-\n-    buf.push_str(&adt.name().unwrap().text());\n-    if let Some(generic_params) = generic_params {\n-        let lifetime_params = generic_params\n-            .lifetime_params()\n-            .filter_map(|it| it.lifetime())\n-            .map(|it| SmolStr::from(it.text()));\n-        let type_params = generic_params\n-            .type_params()\n-            .filter_map(|it| it.name())\n-            .map(|it| SmolStr::from(it.text()));\n-        let const_params = generic_params\n-            .const_params()\n-            .filter_map(|it| it.name())\n-            .map(|it| SmolStr::from(it.text()));\n-        format_to!(buf, \"<{}>\", lifetime_params.chain(type_params).chain(const_params).format(\", \"))\n-    }\n-\n-    match adt.where_clause() {\n-        Some(where_clause) => {\n-            format_to!(buf, \"\\n{}\\n{{\\n{}\\n}}\", where_clause, code);\n-        }\n-        None => {\n-            format_to!(buf, \" {{\\n{}\\n}}\", code);\n-        }\n-    }\n-\n-    ast_from_text(&buf)\n+pub fn impl_trait(\n+    trait_: ast::Path,\n+    ty: ast::Path,\n+    ty_params: Option<ast::GenericParamList>,\n+) -> ast::Impl {\n+    let ty_params = ty_params.map_or_else(String::new, |params| params.to_string());\n+    ast_from_text(&format!(\"impl{2} {} for {}{2} {{}}\", trait_, ty, ty_params))\n }\n \n pub(crate) fn generic_arg_list() -> ast::GenericArgList {"}]}