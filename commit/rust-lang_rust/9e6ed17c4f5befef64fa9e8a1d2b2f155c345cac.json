{"sha": "9e6ed17c4f5befef64fa9e8a1d2b2f155c345cac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNmVkMTdjNGY1YmVmZWY2NGZhOWU4YTFkMmIyZjE1NWMzNDVjYWM=", "commit": {"author": {"name": "Corentin Henry", "email": "corentinhenry@gmail.com", "date": "2018-01-26T15:22:43Z"}, "committer": {"name": "Corentin Henry", "email": "corentinhenry@gmail.com", "date": "2018-01-26T15:22:58Z"}, "message": "make Command.argv Send on unix platforms\n\nImplementing Send for a specific field rather than the whole struct is\nsafer: if a field is changed/modified and becomes non-Send, we can catch\nit.", "tree": {"sha": "71555ec1dc85c80bc964272905d6d8ae79755f77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71555ec1dc85c80bc964272905d6d8ae79755f77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e6ed17c4f5befef64fa9e8a1d2b2f155c345cac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e6ed17c4f5befef64fa9e8a1d2b2f155c345cac", "html_url": "https://github.com/rust-lang/rust/commit/9e6ed17c4f5befef64fa9e8a1d2b2f155c345cac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e6ed17c4f5befef64fa9e8a1d2b2f155c345cac/comments", "author": {"login": "little-dude", "id": 6646324, "node_id": "MDQ6VXNlcjY2NDYzMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6646324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/little-dude", "html_url": "https://github.com/little-dude", "followers_url": "https://api.github.com/users/little-dude/followers", "following_url": "https://api.github.com/users/little-dude/following{/other_user}", "gists_url": "https://api.github.com/users/little-dude/gists{/gist_id}", "starred_url": "https://api.github.com/users/little-dude/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/little-dude/subscriptions", "organizations_url": "https://api.github.com/users/little-dude/orgs", "repos_url": "https://api.github.com/users/little-dude/repos", "events_url": "https://api.github.com/users/little-dude/events{/privacy}", "received_events_url": "https://api.github.com/users/little-dude/received_events", "type": "User", "site_admin": false}, "committer": {"login": "little-dude", "id": 6646324, "node_id": "MDQ6VXNlcjY2NDYzMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6646324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/little-dude", "html_url": "https://github.com/little-dude", "followers_url": "https://api.github.com/users/little-dude/followers", "following_url": "https://api.github.com/users/little-dude/following{/other_user}", "gists_url": "https://api.github.com/users/little-dude/gists{/gist_id}", "starred_url": "https://api.github.com/users/little-dude/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/little-dude/subscriptions", "organizations_url": "https://api.github.com/users/little-dude/orgs", "repos_url": "https://api.github.com/users/little-dude/repos", "events_url": "https://api.github.com/users/little-dude/events{/privacy}", "received_events_url": "https://api.github.com/users/little-dude/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "831ff775703eb5126f741fc3be1cf829ec060011", "url": "https://api.github.com/repos/rust-lang/rust/commits/831ff775703eb5126f741fc3be1cf829ec060011", "html_url": "https://github.com/rust-lang/rust/commit/831ff775703eb5126f741fc3be1cf829ec060011"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "7e057401fab70a2a0d41407677e97c90916e9a2b", "filename": "src/libstd/sys/unix/process/process_common.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9e6ed17c4f5befef64fa9e8a1d2b2f155c345cac/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e6ed17c4f5befef64fa9e8a1d2b2f155c345cac/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=9e6ed17c4f5befef64fa9e8a1d2b2f155c345cac", "patch": "@@ -45,7 +45,7 @@ pub struct Command {\n     // other keys.\n     program: CString,\n     args: Vec<CString>,\n-    argv: Vec<*const c_char>,\n+    argv: Argv,\n     env: CommandEnv<DefaultEnvKey>,\n \n     cwd: Option<CString>,\n@@ -58,6 +58,12 @@ pub struct Command {\n     stderr: Option<Stdio>,\n }\n \n+// Create a new type for argv, so that we can make it `Send`\n+struct Argv(Vec<*const c_char>);\n+\n+// It is safe to make Argv Send, because it contains pointers to memory owned by `Command.args`\n+unsafe impl Send for Argv {}\n+\n // passed back to std::process with the pipes connected to the child, if any\n // were requested\n pub struct StdioPipes {\n@@ -87,17 +93,12 @@ pub enum Stdio {\n     Fd(FileDesc),\n }\n \n-// Command is not Send by default due to the Command.argv field containing a raw pointers. However\n-// it is safe to implement Send, because anyway, these pointers point to memory owned by the\n-// Command.args field.\n-unsafe impl Send for Command {}\n-\n impl Command {\n     pub fn new(program: &OsStr) -> Command {\n         let mut saw_nul = false;\n         let program = os2c(program, &mut saw_nul);\n         Command {\n-            argv: vec![program.as_ptr(), ptr::null()],\n+            argv: Argv(vec![program.as_ptr(), ptr::null()]),\n             program,\n             args: Vec::new(),\n             env: Default::default(),\n@@ -116,8 +117,8 @@ impl Command {\n         // Overwrite the trailing NULL pointer in `argv` and then add a new null\n         // pointer.\n         let arg = os2c(arg, &mut self.saw_nul);\n-        self.argv[self.args.len() + 1] = arg.as_ptr();\n-        self.argv.push(ptr::null());\n+        self.argv.0[self.args.len() + 1] = arg.as_ptr();\n+        self.argv.0.push(ptr::null());\n \n         // Also make sure we keep track of the owned value to schedule a\n         // destructor for this memory.\n@@ -138,7 +139,7 @@ impl Command {\n         self.saw_nul\n     }\n     pub fn get_argv(&self) -> &Vec<*const c_char> {\n-        &self.argv\n+        &self.argv.0\n     }\n \n     #[allow(dead_code)]"}]}