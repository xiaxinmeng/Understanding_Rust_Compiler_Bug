{"sha": "7fb1a4e2d1606f444d1ac40654b3ad11b081a07c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmYjFhNGUyZDE2MDZmNDQ0ZDFhYzQwNjU0YjNhZDExYjA4MWEwN2M=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-02T22:19:52Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-02T22:19:52Z"}, "message": "Camel case core::intrinsic", "tree": {"sha": "1356f3cce4487f489bb3147dd479fc6b58a297f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1356f3cce4487f489bb3147dd479fc6b58a297f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fb1a4e2d1606f444d1ac40654b3ad11b081a07c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fb1a4e2d1606f444d1ac40654b3ad11b081a07c", "html_url": "https://github.com/rust-lang/rust/commit/7fb1a4e2d1606f444d1ac40654b3ad11b081a07c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fb1a4e2d1606f444d1ac40654b3ad11b081a07c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80c4f74c29ede062909db2b048b5b75820730994", "url": "https://api.github.com/repos/rust-lang/rust/commits/80c4f74c29ede062909db2b048b5b75820730994", "html_url": "https://github.com/rust-lang/rust/commit/80c4f74c29ede062909db2b048b5b75820730994"}], "stats": {"total": 141, "additions": 70, "deletions": 71}, "files": [{"sha": "02729382dab79d7c2140e7c0494d9ed095e3ad27", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fb1a4e2d1606f444d1ac40654b3ad11b081a07c/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fb1a4e2d1606f444d1ac40654b3ad11b081a07c/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=7fb1a4e2d1606f444d1ac40654b3ad11b081a07c", "patch": "@@ -340,8 +340,8 @@ fn mk_ident_interner() -> ident_interner {\n                      @~\"[]\", @~\"unary-\", @~\"__extensions__\", @~\"self\",\n                      @~\"item\", @~\"block\", @~\"stmt\", @~\"pat\", @~\"expr\",\n                      @~\"ty\", @~\"ident\", @~\"path\", @~\"tt\", @~\"matchers\",\n-                     @~\"str\", @~\"ty_visitor\", @~\"arg\", @~\"descrim\",\n-                     @~\"__rust_abi\", @~\"__rust_stack_shim\", @~\"tydesc\",\n+                     @~\"str\", @~\"TyVisitor\", @~\"arg\", @~\"descrim\",\n+                     @~\"__rust_abi\", @~\"__rust_stack_shim\", @~\"TyDesc\",\n                      @~\"dtor\", @~\"main\", @~\"<opaque>\", @~\"blk\", @~\"static\",\n                      @~\"intrinsic\", @~\"__foreign_mod__\"];\n "}, {"sha": "71262dfc1f00c378e11a18b4c515f3c47fa86f1f", "filename": "src/rustc/front/intrinsic.rs", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/7fb1a4e2d1606f444d1ac40654b3ad11b081a07c/src%2Frustc%2Ffront%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fb1a4e2d1606f444d1ac40654b3ad11b081a07c/src%2Frustc%2Ffront%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fintrinsic.rs?ref=7fb1a4e2d1606f444d1ac40654b3ad11b081a07c", "patch": "@@ -4,23 +4,22 @@\n mod intrinsic {\n \n     import rusti::visit_tydesc;\n-    export ty_visitor, get_tydesc, visit_tydesc, tydesc;\n+    export TyVisitor, get_tydesc, visit_tydesc, TyDesc;\n \n     // FIXME (#2712): remove this when the interface has settled and the\n     // version in sys is no longer present.\n-    fn get_tydesc<T>() -> *tydesc {\n-        rusti::get_tydesc::<T>() as *tydesc\n+    fn get_tydesc<T>() -> *TyDesc {\n+        rusti::get_tydesc::<T>() as *TyDesc\n     }\n \n-    #[allow(non_camel_case_types)]\n-    enum tydesc = {\n+    enum TyDesc = {\n         first_param: **u8,\n         size: uint,\n         align: uint\n         // Remaining fields not listed\n     };\n \n-    trait ty_visitor {\n+    trait TyVisitor {\n         fn visit_bot() -> bool;\n         fn visit_nil() -> bool;\n         fn visit_bool() -> bool;\n@@ -49,36 +48,36 @@ mod intrinsic {\n         fn visit_estr_slice() -> bool;\n         fn visit_estr_fixed(n: uint, sz: uint, align: uint) -> bool;\n \n-        fn visit_box(mtbl: uint, inner: *tydesc) -> bool;\n-        fn visit_uniq(mtbl: uint, inner: *tydesc) -> bool;\n-        fn visit_ptr(mtbl: uint, inner: *tydesc) -> bool;\n-        fn visit_rptr(mtbl: uint, inner: *tydesc) -> bool;\n+        fn visit_box(mtbl: uint, inner: *TyDesc) -> bool;\n+        fn visit_uniq(mtbl: uint, inner: *TyDesc) -> bool;\n+        fn visit_ptr(mtbl: uint, inner: *TyDesc) -> bool;\n+        fn visit_rptr(mtbl: uint, inner: *TyDesc) -> bool;\n \n-        fn visit_vec(mtbl: uint, inner: *tydesc) -> bool;\n-        fn visit_unboxed_vec(mtbl: uint, inner: *tydesc) -> bool;\n-        fn visit_evec_box(mtbl: uint, inner: *tydesc) -> bool;\n-        fn visit_evec_uniq(mtbl: uint, inner: *tydesc) -> bool;\n-        fn visit_evec_slice(mtbl: uint, inner: *tydesc) -> bool;\n+        fn visit_vec(mtbl: uint, inner: *TyDesc) -> bool;\n+        fn visit_unboxed_vec(mtbl: uint, inner: *TyDesc) -> bool;\n+        fn visit_evec_box(mtbl: uint, inner: *TyDesc) -> bool;\n+        fn visit_evec_uniq(mtbl: uint, inner: *TyDesc) -> bool;\n+        fn visit_evec_slice(mtbl: uint, inner: *TyDesc) -> bool;\n         fn visit_evec_fixed(n: uint, sz: uint, align: uint,\n-                            mtbl: uint, inner: *tydesc) -> bool;\n+                            mtbl: uint, inner: *TyDesc) -> bool;\n \n         fn visit_enter_rec(n_fields: uint,\n                            sz: uint, align: uint) -> bool;\n         fn visit_rec_field(i: uint, name: &str,\n-                           mtbl: uint, inner: *tydesc) -> bool;\n+                           mtbl: uint, inner: *TyDesc) -> bool;\n         fn visit_leave_rec(n_fields: uint,\n                            sz: uint, align: uint) -> bool;\n \n         fn visit_enter_class(n_fields: uint,\n                              sz: uint, align: uint) -> bool;\n         fn visit_class_field(i: uint, name: &str,\n-                             mtbl: uint, inner: *tydesc) -> bool;\n+                             mtbl: uint, inner: *TyDesc) -> bool;\n         fn visit_leave_class(n_fields: uint,\n                              sz: uint, align: uint) -> bool;\n \n         fn visit_enter_tup(n_fields: uint,\n                            sz: uint, align: uint) -> bool;\n-        fn visit_tup_field(i: uint, inner: *tydesc) -> bool;\n+        fn visit_tup_field(i: uint, inner: *TyDesc) -> bool;\n         fn visit_leave_tup(n_fields: uint,\n                            sz: uint, align: uint) -> bool;\n \n@@ -88,7 +87,7 @@ mod intrinsic {\n                                     disr_val: int,\n                                     n_fields: uint,\n                                     name: &str) -> bool;\n-        fn visit_enum_variant_field(i: uint, inner: *tydesc) -> bool;\n+        fn visit_enum_variant_field(i: uint, inner: *TyDesc) -> bool;\n         fn visit_leave_enum_variant(variant: uint,\n                                     disr_val: int,\n                                     n_fields: uint,\n@@ -98,8 +97,8 @@ mod intrinsic {\n \n         fn visit_enter_fn(purity: uint, proto: uint,\n                           n_inputs: uint, retstyle: uint) -> bool;\n-        fn visit_fn_input(i: uint, mode: uint, inner: *tydesc) -> bool;\n-        fn visit_fn_output(retstyle: uint, inner: *tydesc) -> bool;\n+        fn visit_fn_input(i: uint, mode: uint, inner: *TyDesc) -> bool;\n+        fn visit_fn_output(retstyle: uint, inner: *TyDesc) -> bool;\n         fn visit_leave_fn(purity: uint, proto: uint,\n                           n_inputs: uint, retstyle: uint) -> bool;\n \n@@ -110,13 +109,13 @@ mod intrinsic {\n         fn visit_self() -> bool;\n         fn visit_type() -> bool;\n         fn visit_opaque_box() -> bool;\n-        fn visit_constr(inner: *tydesc) -> bool;\n+        fn visit_constr(inner: *TyDesc) -> bool;\n         fn visit_closure_ptr(ck: uint) -> bool;\n     }\n \n     #[abi = \"rust-intrinsic\"]\n     extern mod rusti {\n         fn get_tydesc<T>() -> *();\n-        fn visit_tydesc(td: *tydesc, &&tv: ty_visitor);\n+        fn visit_tydesc(td: *TyDesc, &&tv: TyVisitor);\n     }\n }"}, {"sha": "f93fc3a01fb81931dd3931717b71e43c62940959", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fb1a4e2d1606f444d1ac40654b3ad11b081a07c/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fb1a4e2d1606f444d1ac40654b3ad11b081a07c/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=7fb1a4e2d1606f444d1ac40654b3ad11b081a07c", "patch": "@@ -2562,7 +2562,7 @@ fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::foreign_item) {\n       }\n       ~\"visit_tydesc\" => {\n           let tydesc_name = syntax::parse::token::special_idents::tydesc;\n-          let ty_visitor_name = tcx.sess.ident_of(~\"ty_visitor\");\n+          let ty_visitor_name = tcx.sess.ident_of(~\"TyVisitor\");\n           assert tcx.intrinsic_defs.contains_key(tydesc_name);\n           assert ccx.tcx.intrinsic_defs.contains_key(ty_visitor_name);\n           let (_, tydesc_ty) = tcx.intrinsic_defs.get(tydesc_name);"}, {"sha": "d43adc74bd9b28a80a4156f2aa56997923fa0ef6", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/7fb1a4e2d1606f444d1ac40654b3ad11b081a07c/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fb1a4e2d1606f444d1ac40654b3ad11b081a07c/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=7fb1a4e2d1606f444d1ac40654b3ad11b081a07c", "patch": "@@ -1,5 +1,5 @@\n \n-import intrinsic::{tydesc, get_tydesc, visit_tydesc, ty_visitor};\n+import intrinsic::{TyDesc, get_tydesc, visit_tydesc, TyVisitor};\n import libc::c_void;\n \n // FIXME: this is a near-duplicate of code in core::vec.\n@@ -22,10 +22,10 @@ fn align(size: uint, align: uint) -> uint {\n     ((size + align) - 1u) & !(align - 1u)\n }\n \n-enum ptr_visit_adaptor<V: ty_visitor movable_ptr> = {\n+enum ptr_visit_adaptor<V: TyVisitor movable_ptr> = {\n     inner: V\n };\n-impl<V: ty_visitor movable_ptr> ptr_visit_adaptor<V>: ty_visitor {\n+impl<V: TyVisitor movable_ptr> ptr_visit_adaptor<V>: TyVisitor {\n \n     #[inline(always)]\n     fn bump(sz: uint) {\n@@ -207,35 +207,35 @@ impl<V: ty_visitor movable_ptr> ptr_visit_adaptor<V>: ty_visitor {\n         true\n     }\n \n-    fn visit_box(mtbl: uint, inner: *tydesc) -> bool {\n+    fn visit_box(mtbl: uint, inner: *TyDesc) -> bool {\n         self.align_to::<@u8>();\n         if ! self.inner.visit_box(mtbl, inner) { return false; }\n         self.bump_past::<@u8>();\n         true\n     }\n \n-    fn visit_uniq(mtbl: uint, inner: *tydesc) -> bool {\n+    fn visit_uniq(mtbl: uint, inner: *TyDesc) -> bool {\n         self.align_to::<~u8>();\n         if ! self.inner.visit_uniq(mtbl, inner) { return false; }\n         self.bump_past::<~u8>();\n         true\n     }\n \n-    fn visit_ptr(mtbl: uint, inner: *tydesc) -> bool {\n+    fn visit_ptr(mtbl: uint, inner: *TyDesc) -> bool {\n         self.align_to::<*u8>();\n         if ! self.inner.visit_ptr(mtbl, inner) { return false; }\n         self.bump_past::<*u8>();\n         true\n     }\n \n-    fn visit_rptr(mtbl: uint, inner: *tydesc) -> bool {\n+    fn visit_rptr(mtbl: uint, inner: *TyDesc) -> bool {\n         self.align_to::<&static/u8>();\n         if ! self.inner.visit_rptr(mtbl, inner) { return false; }\n         self.bump_past::<&static/u8>();\n         true\n     }\n \n-    fn visit_unboxed_vec(mtbl: uint, inner: *tydesc) -> bool {\n+    fn visit_unboxed_vec(mtbl: uint, inner: *TyDesc) -> bool {\n         self.align_to::<unboxed_vec_repr>();\n         // FIXME: Inner really has to move its own pointers on this one.\n         // or else possibly we could have some weird interface wherein we\n@@ -245,36 +245,36 @@ impl<V: ty_visitor movable_ptr> ptr_visit_adaptor<V>: ty_visitor {\n         true\n     }\n \n-    fn visit_vec(mtbl: uint, inner: *tydesc) -> bool {\n+    fn visit_vec(mtbl: uint, inner: *TyDesc) -> bool {\n         self.align_to::<~[u8]>();\n         if ! self.inner.visit_vec(mtbl, inner) { return false; }\n         self.bump_past::<~[u8]>();\n         true\n     }\n \n-    fn visit_evec_box(mtbl: uint, inner: *tydesc) -> bool {\n+    fn visit_evec_box(mtbl: uint, inner: *TyDesc) -> bool {\n         self.align_to::<@[u8]>();\n         if ! self.inner.visit_evec_box(mtbl, inner) { return false; }\n         self.bump_past::<@[u8]>();\n         true\n     }\n \n-    fn visit_evec_uniq(mtbl: uint, inner: *tydesc) -> bool {\n+    fn visit_evec_uniq(mtbl: uint, inner: *TyDesc) -> bool {\n         self.align_to::<~[u8]>();\n         if ! self.inner.visit_evec_uniq(mtbl, inner) { return false; }\n         self.bump_past::<~[u8]>();\n         true\n     }\n \n-    fn visit_evec_slice(mtbl: uint, inner: *tydesc) -> bool {\n+    fn visit_evec_slice(mtbl: uint, inner: *TyDesc) -> bool {\n         self.align_to::<&static/[u8]>();\n         if ! self.inner.visit_evec_slice(mtbl, inner) { return false; }\n         self.bump_past::<&static/[u8]>();\n         true\n     }\n \n     fn visit_evec_fixed(n: uint, sz: uint, align: uint,\n-                        mtbl: uint, inner: *tydesc) -> bool {\n+                        mtbl: uint, inner: *TyDesc) -> bool {\n         self.align(align);\n         if ! self.inner.visit_evec_fixed(n, sz, align, mtbl, inner) {\n             return false;\n@@ -290,7 +290,7 @@ impl<V: ty_visitor movable_ptr> ptr_visit_adaptor<V>: ty_visitor {\n     }\n \n     fn visit_rec_field(i: uint, name: &str,\n-                       mtbl: uint, inner: *tydesc) -> bool {\n+                       mtbl: uint, inner: *TyDesc) -> bool {\n         if ! self.inner.visit_rec_field(i, name, mtbl, inner) { return false; }\n         true\n     }\n@@ -309,7 +309,7 @@ impl<V: ty_visitor movable_ptr> ptr_visit_adaptor<V>: ty_visitor {\n     }\n \n     fn visit_class_field(i: uint, name: &str,\n-                         mtbl: uint, inner: *tydesc) -> bool {\n+                         mtbl: uint, inner: *TyDesc) -> bool {\n         if ! self.inner.visit_class_field(i, name, mtbl, inner) {\n             return false;\n         }\n@@ -329,7 +329,7 @@ impl<V: ty_visitor movable_ptr> ptr_visit_adaptor<V>: ty_visitor {\n         true\n     }\n \n-    fn visit_tup_field(i: uint, inner: *tydesc) -> bool {\n+    fn visit_tup_field(i: uint, inner: *TyDesc) -> bool {\n         if ! self.inner.visit_tup_field(i, inner) { return false; }\n         true\n     }\n@@ -347,12 +347,12 @@ impl<V: ty_visitor movable_ptr> ptr_visit_adaptor<V>: ty_visitor {\n         true\n     }\n \n-    fn visit_fn_input(i: uint, mode: uint, inner: *tydesc) -> bool {\n+    fn visit_fn_input(i: uint, mode: uint, inner: *TyDesc) -> bool {\n         if ! self.inner.visit_fn_input(i, mode, inner) { return false; }\n         true\n     }\n \n-    fn visit_fn_output(retstyle: uint, inner: *tydesc) -> bool {\n+    fn visit_fn_output(retstyle: uint, inner: *TyDesc) -> bool {\n         if ! self.inner.visit_fn_output(retstyle, inner) { return false; }\n         true\n     }\n@@ -382,7 +382,7 @@ impl<V: ty_visitor movable_ptr> ptr_visit_adaptor<V>: ty_visitor {\n         true\n     }\n \n-    fn visit_enum_variant_field(i: uint, inner: *tydesc) -> bool {\n+    fn visit_enum_variant_field(i: uint, inner: *TyDesc) -> bool {\n         if ! self.inner.visit_enum_variant_field(i, inner) { return false; }\n         true\n     }\n@@ -404,9 +404,9 @@ impl<V: ty_visitor movable_ptr> ptr_visit_adaptor<V>: ty_visitor {\n     }\n \n     fn visit_trait() -> bool {\n-        self.align_to::<ty_visitor>();\n+        self.align_to::<TyVisitor>();\n         if ! self.inner.visit_trait() { return false; }\n-        self.bump_past::<ty_visitor>();\n+        self.bump_past::<TyVisitor>();\n         true\n     }\n \n@@ -444,7 +444,7 @@ impl<V: ty_visitor movable_ptr> ptr_visit_adaptor<V>: ty_visitor {\n         true\n     }\n \n-    fn visit_constr(inner: *tydesc) -> bool {\n+    fn visit_constr(inner: *TyDesc) -> bool {\n         if ! self.inner.visit_constr(inner) { return false; }\n         true\n     }\n@@ -470,10 +470,10 @@ impl my_visitor {\n         }\n     }\n \n-    fn visit_inner(inner: *tydesc) -> bool {\n+    fn visit_inner(inner: *TyDesc) -> bool {\n         let u = my_visitor(*self);\n         let v = ptr_visit_adaptor({inner: u});\n-        visit_tydesc(inner, v as ty_visitor);\n+        visit_tydesc(inner, v as TyVisitor);\n         true\n     }\n }\n@@ -485,7 +485,7 @@ impl my_visitor: movable_ptr {\n     }\n }\n \n-impl my_visitor: ty_visitor {\n+impl my_visitor: TyVisitor {\n \n     fn visit_bot() -> bool { true }\n     fn visit_nil() -> bool { true }\n@@ -525,23 +525,23 @@ impl my_visitor: ty_visitor {\n     fn visit_estr_fixed(_n: uint, _sz: uint,\n                         _align: uint) -> bool { true }\n \n-    fn visit_box(_mtbl: uint, _inner: *tydesc) -> bool { true }\n-    fn visit_uniq(_mtbl: uint, _inner: *tydesc) -> bool { true }\n-    fn visit_ptr(_mtbl: uint, _inner: *tydesc) -> bool { true }\n-    fn visit_rptr(_mtbl: uint, _inner: *tydesc) -> bool { true }\n+    fn visit_box(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_uniq(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_ptr(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_rptr(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n \n-    fn visit_vec(_mtbl: uint, _inner: *tydesc) -> bool { true }\n-    fn visit_unboxed_vec(_mtbl: uint, _inner: *tydesc) -> bool { true }\n-    fn visit_evec_box(_mtbl: uint, _inner: *tydesc) -> bool { true }\n-    fn visit_evec_uniq(_mtbl: uint, _inner: *tydesc) -> bool { true }\n-    fn visit_evec_slice(_mtbl: uint, _inner: *tydesc) -> bool { true }\n+    fn visit_vec(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_unboxed_vec(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_evec_box(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_evec_uniq(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_evec_slice(_mtbl: uint, _inner: *TyDesc) -> bool { true }\n     fn visit_evec_fixed(_n: uint, _sz: uint, _align: uint,\n-                        _mtbl: uint, _inner: *tydesc) -> bool { true }\n+                        _mtbl: uint, _inner: *TyDesc) -> bool { true }\n \n     fn visit_enter_rec(_n_fields: uint,\n                        _sz: uint, _align: uint) -> bool { true }\n     fn visit_rec_field(_i: uint, _name: &str,\n-                       _mtbl: uint, inner: *tydesc) -> bool {\n+                       _mtbl: uint, inner: *TyDesc) -> bool {\n         error!(\"rec field!\");\n         self.visit_inner(inner)\n     }\n@@ -551,15 +551,15 @@ impl my_visitor: ty_visitor {\n     fn visit_enter_class(_n_fields: uint,\n                          _sz: uint, _align: uint) -> bool { true }\n     fn visit_class_field(_i: uint, _name: &str,\n-                         _mtbl: uint, inner: *tydesc) -> bool {\n+                         _mtbl: uint, inner: *TyDesc) -> bool {\n         self.visit_inner(inner)\n     }\n     fn visit_leave_class(_n_fields: uint,\n                          _sz: uint, _align: uint) -> bool { true }\n \n     fn visit_enter_tup(_n_fields: uint,\n                        _sz: uint, _align: uint) -> bool { true }\n-    fn visit_tup_field(_i: uint, inner: *tydesc) -> bool {\n+    fn visit_tup_field(_i: uint, inner: *TyDesc) -> bool {\n         error!(\"tup field!\");\n         self.visit_inner(inner)\n     }\n@@ -575,7 +575,7 @@ impl my_visitor: ty_visitor {\n                                 _disr_val: int,\n                                 _n_fields: uint,\n                                 _name: &str) -> bool { true }\n-    fn visit_enum_variant_field(_i: uint, inner: *tydesc) -> bool {\n+    fn visit_enum_variant_field(_i: uint, inner: *TyDesc) -> bool {\n         self.visit_inner(inner)\n     }\n     fn visit_leave_enum_variant(_variant: uint,\n@@ -587,8 +587,8 @@ impl my_visitor: ty_visitor {\n \n     fn visit_enter_fn(_purity: uint, _proto: uint,\n                       _n_inputs: uint, _retstyle: uint) -> bool { true }\n-    fn visit_fn_input(_i: uint, _mode: uint, _inner: *tydesc) -> bool { true }\n-    fn visit_fn_output(_retstyle: uint, _inner: *tydesc) -> bool { true }\n+    fn visit_fn_input(_i: uint, _mode: uint, _inner: *TyDesc) -> bool { true }\n+    fn visit_fn_output(_retstyle: uint, _inner: *TyDesc) -> bool { true }\n     fn visit_leave_fn(_purity: uint, _proto: uint,\n                       _n_inputs: uint, _retstyle: uint) -> bool { true }\n \n@@ -600,11 +600,11 @@ impl my_visitor: ty_visitor {\n     fn visit_self() -> bool { true }\n     fn visit_type() -> bool { true }\n     fn visit_opaque_box() -> bool { true }\n-    fn visit_constr(_inner: *tydesc) -> bool { true }\n+    fn visit_constr(_inner: *TyDesc) -> bool { true }\n     fn visit_closure_ptr(_ck: uint) -> bool { true }\n }\n \n-fn get_tydesc_for<T>(&&_t: T) -> *tydesc {\n+fn get_tydesc_for<T>(&&_t: T) -> *TyDesc {\n     get_tydesc::<T>()\n }\n \n@@ -618,7 +618,7 @@ fn main() {\n     let td = get_tydesc_for(r);\n     unsafe { error!(\"tydesc sz: %u, align: %u\",\n                     (*td).size, (*td).align); }\n-    let v = v as ty_visitor;\n+    let v = v as TyVisitor;\n     visit_tydesc(td, v);\n \n     for (copy u.vals).each |s| {"}]}