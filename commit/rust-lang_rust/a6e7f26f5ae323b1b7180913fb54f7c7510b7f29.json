{"sha": "a6e7f26f5ae323b1b7180913fb54f7c7510b7f29", "node_id": "C_kwDOAAsO6NoAKGE2ZTdmMjZmNWFlMzIzYjFiNzE4MDkxM2ZiNTRmN2M3NTEwYjdmMjk", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-12-20T18:24:40Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-03-05T10:39:03Z"}, "message": "Update tests.", "tree": {"sha": "ac4070e03c01c6d26489d95bc7c1a7b04f5d5966", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac4070e03c01c6d26489d95bc7c1a7b04f5d5966"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6e7f26f5ae323b1b7180913fb54f7c7510b7f29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6e7f26f5ae323b1b7180913fb54f7c7510b7f29", "html_url": "https://github.com/rust-lang/rust/commit/a6e7f26f5ae323b1b7180913fb54f7c7510b7f29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6e7f26f5ae323b1b7180913fb54f7c7510b7f29/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b9e214c406fd1a899d4324ad20ffb0de6823abb", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b9e214c406fd1a899d4324ad20ffb0de6823abb", "html_url": "https://github.com/rust-lang/rust/commit/3b9e214c406fd1a899d4324ad20ffb0de6823abb"}], "stats": {"total": 183, "additions": 120, "deletions": 63}, "files": [{"sha": "ce847c86bedde078bf1190e1127ba9f86d8fa6d8", "filename": "src/test/ui/suggestions/missing-lifetime-specifier.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6e7f26f5ae323b1b7180913fb54f7c7510b7f29/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6e7f26f5ae323b1b7180913fb54f7c7510b7f29/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.rs?ref=a6e7f26f5ae323b1b7180913fb54f7c7510b7f29", "patch": "@@ -45,13 +45,15 @@ thread_local! {\n     //~| ERROR this union takes 2 lifetime arguments but 1 lifetime argument was supplied\n     //~| ERROR this union takes 2 lifetime arguments but 1 lifetime argument was supplied\n     //~| ERROR this union takes 2 lifetime arguments but 1 lifetime argument was supplied\n+    //~| ERROR this union takes 2 lifetime arguments but 1 lifetime argument was supplied\n }\n thread_local! {\n     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n     //~^ ERROR this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n     //~| ERROR this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n     //~| ERROR this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n     //~| ERROR this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n+    //~| ERROR this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n     //~| ERROR missing lifetime\n     //~| ERROR missing lifetime\n }"}, {"sha": "b04ea1c9158df41d7692e79859099fb46c3dca15", "filename": "src/test/ui/suggestions/missing-lifetime-specifier.stderr", "status": "modified", "additions": 111, "deletions": 58, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/a6e7f26f5ae323b1b7180913fb54f7c7510b7f29/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6e7f26f5ae323b1b7180913fb54f7c7510b7f29/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr?ref=a6e7f26f5ae323b1b7180913fb54f7c7510b7f29", "patch": "@@ -13,14 +13,15 @@ LL |     static a: RefCell<HashMap<i32, Vec<Vec<Foo<'static, 'static>>>>> = RefC\n error[E0106]: missing lifetime specifiers\n   --> $DIR/missing-lifetime-specifier.rs:18:44\n    |\n-LL |     static a: RefCell<HashMap<i32, Vec<Vec<Foo>>>> = RefCell::new(HashMap::new());\n-   |                                            ^^^ expected 2 lifetime parameters\n-   |\n-   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-help: consider using the `'static` lifetime\n-   |\n-LL |     static a: RefCell<HashMap<i32, Vec<Vec<Foo<'static, 'static>>>>> = RefCell::new(HashMap::new());\n-   |                                            ~~~~~~~~~~~~~~~~~~~~~\n+LL | / thread_local! {\n+LL | |     static a: RefCell<HashMap<i32, Vec<Vec<Foo>>>> = RefCell::new(HashMap::new());\n+   | |                                            ^^^ expected 2 lifetime parameters\n+LL | |\n+LL | |\n+LL | | }\n+   | |_-\n+   |\n+   = help: this function's return type contains a borrowed value, but the signature does not say which one of `init`'s 3 lifetimes it is borrowed from\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/missing-lifetime-specifier.rs:23:44\n@@ -49,26 +50,32 @@ LL |     static b: RefCell<HashMap<i32, Vec<Vec<&Bar<'static, 'static>>>>> = Ref\n error[E0106]: missing lifetime specifier\n   --> $DIR/missing-lifetime-specifier.rs:23:44\n    |\n-LL |     static b: RefCell<HashMap<i32, Vec<Vec<&Bar>>>> = RefCell::new(HashMap::new());\n-   |                                            ^ expected named lifetime parameter\n-   |\n-   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-help: consider using the `'static` lifetime\n-   |\n-LL |     static b: RefCell<HashMap<i32, Vec<Vec<&'static Bar>>>> = RefCell::new(HashMap::new());\n-   |                                            ~~~~~~~~\n+LL | / thread_local! {\n+LL | |     static b: RefCell<HashMap<i32, Vec<Vec<&Bar>>>> = RefCell::new(HashMap::new());\n+   | |                                            ^ expected named lifetime parameter\n+LL | |\n+LL | |\n+LL | |\n+LL | |\n+LL | | }\n+   | |_-\n+   |\n+   = help: this function's return type contains a borrowed value, but the signature does not say which one of `init`'s 4 lifetimes it is borrowed from\n \n error[E0106]: missing lifetime specifiers\n   --> $DIR/missing-lifetime-specifier.rs:23:45\n    |\n-LL |     static b: RefCell<HashMap<i32, Vec<Vec<&Bar>>>> = RefCell::new(HashMap::new());\n-   |                                             ^^^ expected 2 lifetime parameters\n-   |\n-   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-help: consider using the `'static` lifetime\n-   |\n-LL |     static b: RefCell<HashMap<i32, Vec<Vec<&Bar<'static, 'static>>>>> = RefCell::new(HashMap::new());\n-   |                                             ~~~~~~~~~~~~~~~~~~~~~\n+LL | / thread_local! {\n+LL | |     static b: RefCell<HashMap<i32, Vec<Vec<&Bar>>>> = RefCell::new(HashMap::new());\n+   | |                                             ^^^ expected 2 lifetime parameters\n+LL | |\n+LL | |\n+LL | |\n+LL | |\n+LL | | }\n+   | |_-\n+   |\n+   = help: this function's return type contains a borrowed value, but the signature does not say which one of `init`'s 4 lifetimes it is borrowed from\n \n error[E0106]: missing lifetime specifiers\n   --> $DIR/missing-lifetime-specifier.rs:30:48\n@@ -85,14 +92,15 @@ LL |     static c: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'static, i32>>>>> =\n error[E0106]: missing lifetime specifiers\n   --> $DIR/missing-lifetime-specifier.rs:30:48\n    |\n-LL |     static c: RefCell<HashMap<i32, Vec<Vec<Qux<i32>>>>> = RefCell::new(HashMap::new());\n-   |                                                ^ expected 2 lifetime parameters\n-   |\n-   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-help: consider using the `'static` lifetime\n+LL | / thread_local! {\n+LL | |     static c: RefCell<HashMap<i32, Vec<Vec<Qux<i32>>>>> = RefCell::new(HashMap::new());\n+   | |                                                ^ expected 2 lifetime parameters\n+LL | |\n+LL | |\n+LL | | }\n+   | |_-\n    |\n-LL |     static c: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n-   |                                                +++++++++++++++++\n+   = help: this function's return type contains a borrowed value, but the signature does not say which one of `init`'s 3 lifetimes it is borrowed from\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/missing-lifetime-specifier.rs:35:44\n@@ -121,26 +129,50 @@ LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'static, i32>>>>>\n error[E0106]: missing lifetime specifier\n   --> $DIR/missing-lifetime-specifier.rs:35:44\n    |\n-LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<i32>>>>> = RefCell::new(HashMap::new());\n-   |                                            ^ expected named lifetime parameter\n-   |\n-   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-help: consider using the `'static` lifetime\n-   |\n-LL |     static d: RefCell<HashMap<i32, Vec<Vec<&'static Tar<i32>>>>> = RefCell::new(HashMap::new());\n-   |                                            ~~~~~~~~\n+LL | / thread_local! {\n+LL | |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<i32>>>>> = RefCell::new(HashMap::new());\n+   | |                                            ^ expected named lifetime parameter\n+LL | |\n+LL | |\n+LL | |\n+LL | |\n+LL | | }\n+   | |_-\n+   |\n+   = help: this function's return type contains a borrowed value, but the signature does not say which one of `init`'s 4 lifetimes it is borrowed from\n \n error[E0106]: missing lifetime specifiers\n   --> $DIR/missing-lifetime-specifier.rs:35:49\n    |\n-LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<i32>>>>> = RefCell::new(HashMap::new());\n-   |                                                 ^ expected 2 lifetime parameters\n+LL | / thread_local! {\n+LL | |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<i32>>>>> = RefCell::new(HashMap::new());\n+   | |                                                 ^ expected 2 lifetime parameters\n+LL | |\n+LL | |\n+LL | |\n+LL | |\n+LL | | }\n+   | |_-\n+   |\n+   = help: this function's return type contains a borrowed value, but the signature does not say which one of `init`'s 4 lifetimes it is borrowed from\n+\n+error[E0107]: this union takes 2 lifetime arguments but 1 lifetime argument was supplied\n+  --> $DIR/missing-lifetime-specifier.rs:43:44\n    |\n-   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-help: consider using the `'static` lifetime\n+LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                            ^^^ ------- supplied 1 lifetime argument\n+   |                                            |\n+   |                                            expected 2 lifetime arguments\n    |\n-LL |     static d: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n-   |                                                 +++++++++++++++++\n+note: union defined here, with 2 lifetime parameters: `'t`, `'k`\n+  --> $DIR/missing-lifetime-specifier.rs:11:11\n+   |\n+LL | pub union Qux<'t, 'k, I> {\n+   |           ^^^ --  --\n+help: add missing lifetime argument\n+   |\n+LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, '_, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                       ++++\n \n error[E0107]: this union takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:43:44\n@@ -157,7 +189,7 @@ LL | pub union Qux<'t, 'k, I> {\n    |           ^^^ --  --\n help: add missing lifetime argument\n    |\n-LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, '_, i32>>>>> = RefCell::new(HashMap::new());\n+LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'k, i32>>>>> = RefCell::new(HashMap::new());\n    |                                                       ++++\n \n error[E0107]: this union takes 2 lifetime arguments but 1 lifetime argument was supplied\n@@ -215,7 +247,7 @@ LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, '_, i32>>>>> = RefC\n    |                                                       ++++\n \n error[E0107]: this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n-  --> $DIR/missing-lifetime-specifier.rs:50:45\n+  --> $DIR/missing-lifetime-specifier.rs:51:45\n    |\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                             ^^^ ------- supplied 1 lifetime argument\n@@ -233,7 +265,7 @@ LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, '_, i32>>>>> = Ref\n    |                                                        ++++\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/missing-lifetime-specifier.rs:50:44\n+  --> $DIR/missing-lifetime-specifier.rs:51:44\n    |\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                            ^ expected named lifetime parameter\n@@ -245,7 +277,7 @@ LL |     static f: RefCell<HashMap<i32, Vec<Vec<&'static Tar<'static, i32>>>>> =\n    |                                            ~~~~~~~~\n \n error[E0107]: this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n-  --> $DIR/missing-lifetime-specifier.rs:50:45\n+  --> $DIR/missing-lifetime-specifier.rs:51:45\n    |\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                             ^^^ ------- supplied 1 lifetime argument\n@@ -263,19 +295,40 @@ LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'k, i32>>>>> = Ref\n    |                                                        ++++\n \n error[E0106]: missing lifetime specifier\n-  --> $DIR/missing-lifetime-specifier.rs:50:44\n+  --> $DIR/missing-lifetime-specifier.rs:51:44\n+   |\n+LL | / thread_local! {\n+LL | |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n+   | |                                            ^ expected named lifetime parameter\n+LL | |\n+LL | |\n+...  |\n+LL | |\n+LL | | }\n+   | |_-\n+   |\n+   = help: this function's return type contains a borrowed value, but the signature does not say which one of `init`'s 3 lifetimes it is borrowed from\n+\n+error[E0107]: this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n+  --> $DIR/missing-lifetime-specifier.rs:51:45\n    |\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n-   |                                            ^ expected named lifetime parameter\n+   |                                             ^^^ ------- supplied 1 lifetime argument\n+   |                                             |\n+   |                                             expected 2 lifetime arguments\n    |\n-   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-help: consider using the `'static` lifetime\n+note: trait defined here, with 2 lifetime parameters: `'t`, `'k`\n+  --> $DIR/missing-lifetime-specifier.rs:15:7\n    |\n-LL |     static f: RefCell<HashMap<i32, Vec<Vec<&'static Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n-   |                                            ~~~~~~~~\n+LL | trait Tar<'t, 'k, I> {}\n+   |       ^^^ --  --\n+help: add missing lifetime argument\n+   |\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'k, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                        ++++\n \n error[E0107]: this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n-  --> $DIR/missing-lifetime-specifier.rs:50:45\n+  --> $DIR/missing-lifetime-specifier.rs:51:45\n    |\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                             ^^^ ------- supplied 1 lifetime argument\n@@ -293,7 +346,7 @@ LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'k, i32>>>>> = Ref\n    |                                                        ++++\n \n error[E0107]: this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n-  --> $DIR/missing-lifetime-specifier.rs:50:45\n+  --> $DIR/missing-lifetime-specifier.rs:51:45\n    |\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, i32>>>>> = RefCell::new(HashMap::new());\n    |                                             ^^^ ------- supplied 1 lifetime argument\n@@ -310,7 +363,7 @@ help: add missing lifetime argument\n LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, '_, i32>>>>> = RefCell::new(HashMap::new());\n    |                                                        ++++\n \n-error: aborting due to 22 previous errors\n+error: aborting due to 24 previous errors\n \n Some errors have detailed explanations: E0106, E0107.\n For more information about an error, try `rustc --explain E0106`."}, {"sha": "8dc0e75f1af22467dc3f416b3f48439d5b07f228", "filename": "src/test/ui/threads-sendsync/issue-43733.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6e7f26f5ae323b1b7180913fb54f7c7510b7f29/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6e7f26f5ae323b1b7180913fb54f7c7510b7f29/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.mir.stderr?ref=a6e7f26f5ae323b1b7180913fb54f7c7510b7f29", "patch": "@@ -1,13 +1,13 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/issue-43733.rs:17:5\n+  --> $DIR/issue-43733.rs:19:5\n    |\n LL |     __KEY.get(Default::default)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/issue-43733.rs:20:42\n+  --> $DIR/issue-43733.rs:22:42\n    |\n LL | static FOO: std::thread::LocalKey<Foo> = std::thread::LocalKey::new(__getit);\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function"}, {"sha": "9926ed09bb4a84088a35e520f0bcd0124fef0a4b", "filename": "src/test/ui/threads-sendsync/issue-43733.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6e7f26f5ae323b1b7180913fb54f7c7510b7f29/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6e7f26f5ae323b1b7180913fb54f7c7510b7f29/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.rs?ref=a6e7f26f5ae323b1b7180913fb54f7c7510b7f29", "patch": "@@ -4,6 +4,8 @@\n #![feature(thread_local)]\n #![feature(cfg_target_thread_local, thread_local_internals)]\n \n+use std::cell::RefCell;\n+\n type Foo = std::cell::RefCell<String>;\n \n #[cfg(target_thread_local)]\n@@ -13,7 +15,7 @@ static __KEY: std::thread::__FastLocalKeyInner<Foo> = std::thread::__FastLocalKe\n #[cfg(not(target_thread_local))]\n static __KEY: std::thread::__OsLocalKeyInner<Foo> = std::thread::__OsLocalKeyInner::new();\n \n-fn __getit() -> std::option::Option<&'static Foo> {\n+fn __getit(_: Option<&mut Option<RefCell<String>>>) -> std::option::Option<&'static Foo> {\n     __KEY.get(Default::default) //~ ERROR call to unsafe function is unsafe\n }\n "}, {"sha": "8dc0e75f1af22467dc3f416b3f48439d5b07f228", "filename": "src/test/ui/threads-sendsync/issue-43733.thir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6e7f26f5ae323b1b7180913fb54f7c7510b7f29/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6e7f26f5ae323b1b7180913fb54f7c7510b7f29/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.thir.stderr?ref=a6e7f26f5ae323b1b7180913fb54f7c7510b7f29", "patch": "@@ -1,13 +1,13 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/issue-43733.rs:17:5\n+  --> $DIR/issue-43733.rs:19:5\n    |\n LL |     __KEY.get(Default::default)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/issue-43733.rs:20:42\n+  --> $DIR/issue-43733.rs:22:42\n    |\n LL | static FOO: std::thread::LocalKey<Foo> = std::thread::LocalKey::new(__getit);\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function"}]}