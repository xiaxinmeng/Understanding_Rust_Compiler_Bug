{"sha": "4691a7515079c56895bae727b2b7aa92a784f1a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2OTFhNzUxNTA3OWM1Njg5NWJhZTcyN2IyYjdhYTkyYTc4NGYxYTQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-20T08:12:26Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-20T08:12:26Z"}, "message": "Begin porting rules for testsuite execution.", "tree": {"sha": "c61db45b74910879fb033278140bc9668c4c881b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c61db45b74910879fb033278140bc9668c4c881b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4691a7515079c56895bae727b2b7aa92a784f1a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4691a7515079c56895bae727b2b7aa92a784f1a4", "html_url": "https://github.com/rust-lang/rust/commit/4691a7515079c56895bae727b2b7aa92a784f1a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4691a7515079c56895bae727b2b7aa92a784f1a4/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74a585eeb764882a482f1092d3701426023ea151", "url": "https://api.github.com/repos/rust-lang/rust/commits/74a585eeb764882a482f1092d3701426023ea151", "html_url": "https://github.com/rust-lang/rust/commit/74a585eeb764882a482f1092d3701426023ea151"}], "stats": {"total": 139, "additions": 106, "deletions": 33}, "files": [{"sha": "9f2446424b6d128773ccd3d3707aff084b4fb0de", "filename": "Makefile.in", "status": "modified", "additions": 103, "deletions": 17, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/4691a7515079c56895bae727b2b7aa92a784f1a4/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/4691a7515079c56895bae727b2b7aa92a784f1a4/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=4691a7515079c56895bae727b2b7aa92a784f1a4", "patch": "@@ -70,7 +70,7 @@ ifdef CFG_WINDOWSY\n   CFG_LIB_NAME=$(1).dll\n   CFG_LDPATH :=$(CFG_LDPATH):$(CFG_LLVM_BINDIR)\n   CFG_LDPATH :=$(CFG_LDPATH):$$PATH\n-  CFG_RUN_PROGRAM=PATH=$(CFG_LDPATH) $(1)\n+  CFG_RUN_TARG=PATH=$(CFG_LDPATH) $(1)\n \n   CFG_PATH_MUNGE := $(strip | perl -p                  \\\n                            -e 's@\\\\(.)@/\\1@go;'        \\\n@@ -87,7 +87,7 @@ ifdef CFG_UNIXY\n \n   CFG_EXE_SUFFIX :=\n   CFG_LDPATH :=$(CFG_LDPATH):$(CFG_LLVM_LIBDIR)\n-  CFG_RUN_PROGRAM=\\\n+  CFG_RUN_TARG=\\\n       LD_LIBRARY_PATH=$(dir $(1)):$(CFG_LDPATH) $(CFG_VALGRIND) $(1)\n \n   CFG_BOOT_NATIVE := 1\n@@ -97,7 +97,7 @@ ifdef CFG_UNIXY\n     CFG_LIB_NAME=$(1).dll\n     CFG_LDPATH :=$(CFG_LDPATH):$(CFG_LLVM_BINDIR)\n     CFG_LDPATH :=$(CFG_LDPATH):$$PATH\n-    CFG_RUN_PROGRAM=PATH=$(CFG_LDPATH) $(1)\n+    CFG_RUN_TARG=PATH=$(CFG_LDPATH) $(1)\n \n     CFG_INFO := $(info cfg: mingw-cross)\n     CFG_GCC_CROSS := i586-mingw32msvc-\n@@ -178,7 +178,7 @@ else\n   E = echo $(1)\n endif\n \n-R := $(CFG_RUN_PROGRAM)\n+R := $(CFG_RUN_TARG)\n S := $(CFG_SRC_DIR)\n X := $(CFG_EXE_SUFFIX)\n \n@@ -187,8 +187,8 @@ VPATH := $(S)doc $(S)src\n \n # Compilers we build, we now know how to run.\n BOOT := $(Q)OCAMLRUNPARAM=\"b1\" boot/rustboot$(X) $(CFG_BOOT_FLAGS) -L stage0\n-STAGE0 := $(Q)$(CFG_RUN_PROGRAM) stage0/rustc$(X) $(CFG_RUSTC_FLAGS) -L stage1\n-STAGE1 := $(Q)$(CFG_RUN_PROGRAM) stage1/rustc$(X) $(CFG_RUSTC_FLAGS) -L stage2\n+STAGE0 := $(Q)$(CFG_RUN_TARG) stage0/rustc$(X) $(CFG_RUSTC_FLAGS) -L stage1\n+STAGE1 := $(Q)$(CFG_RUN_TARG) stage1/rustc$(X) $(CFG_RUSTC_FLAGS) -L stage2\n \n # \"Source\" files we generate in builddir along the way.\n GENERATED := boot/fe/lexer.ml boot/version.ml\n@@ -336,17 +336,26 @@ COMPILER_CRATE := comp/rustc.rc\n COMPILER_INPUTS := $(wildcard $(addprefix $(S)src/comp/, \\\n                                 rustc.rc *.rs */*.rs))\n \n+######################################################################\n+# test dependency variables\n+######################################################################\n+\n+LREQ := rt/$(CFG_RUNTIME) llvmext/$(CFG_LLVMEXT)\n+BREQ := boot/rustboot$(X) boot/$(CFG_STDLIB)\n+SREQ0 := stage0/rustc$(X) $(LREQ)\n+SREQ1 := stage1/rustc$(X) $(LREQ)\n+\n ######################################################################\n # Single-target rules\n ######################################################################\n \n all: boot/rustboot$(X)          \\\n+     boot/$(CFG_STDLIB)         \\\n      rt/$(CFG_RUNTIME)          \\\n      llvmext/$(CFG_LLVMEXT)     \\\n-     stage0/$(CFG_STDLIB)       \\\n-     stage1/$(CFG_STDLIB)       \\\n      stage0/rustc$(X)           \\\n      stage0/glue.o              \\\n+     stage0/$(CFG_STDLIB)       \\\n      $(GENERATED)\n \n rt/$(CFG_RUNTIME): $(RUNTIME_OBJS) $(MKFILES) $(RUNTIME_HDR)\n@@ -375,27 +384,25 @@ boot/version.ml: $(MKFILES)\n       --pretty=format:'let version = \"prerelease (%h %ci)\";;' >$@ || exit 1\n \n \n-stage0/$(CFG_STDLIB): $(S)src/$(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n-                      boot/rustboot$(X) $(MKFILES)\n+boot/$(CFG_STDLIB): $(S)src/$(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n+                    boot/rustboot$(X) $(MKFILES)\n \t@$(call E, compile: $@)\n \t$(BOOT) -shared -o $@ $<\n \n-stage1/$(CFG_STDLIB): $(S)src/$(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n+stage0/$(CFG_STDLIB): $(S)src/$(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n                       stage0/rustc$(X) $(MKFILES)\n \t@$(call E, compile: $@)\n \t$(STAGE0) -shared -o $@ $<\n \n \n stage0/rustc$(X): $(S)src/$(COMPILER_CRATE) $(COMPILER_INPUTS) \\\n-                  boot/rustboot$(X) rt/$(CFG_RUNTIME) \\\n-                  stage0/$(CFG_STDLIB)\n+                  $(BREQ)\n \t@$(call E, compile: $@)\n \t$(BOOT) -minimal -o $@ $<\n \t$(Q)chmod 0755 $@\n \n stage1/rustc$(X): $(S)src/$(COMPILER_CRATE) $(COMPILER_INPUTS) \\\n-                  stage0/rustc$(X) rt/$(CFG_RUNTIME) \\\n-                  stage1/$(CFG_STDLIB)\n+                  $(SREQ0) stage0/$(CFG_STDLIB)\n \t@$(call E, compile: $@)\n \t$(STAGE0) -o $@ $<\n \t$(Q)chmod 0755 $@\n@@ -412,7 +419,7 @@ stage1/glue.bc: stage1/rustc$(X) stage1/$(CFG_STDLIB) \\\n \t$(STAGE1) -o $@ -glue\n \n ######################################################################\n-# Pattern rules\n+# Library and boot rules\n ######################################################################\n \n rt/%.o: rt/%.cpp $(MKFILES)\n@@ -437,6 +444,35 @@ llvmext/%.o: llvmext/%.cpp $(MKFILES)\n \t@$(call E, lex-gen: $@)\n \t$(Q)ocamllex$(OPT) -q -o $@ $<\n \n+\n+######################################################################\n+# Testing rules\n+######################################################################\n+\n+%.boot$(X): %.rs $(BREQ)\n+\t@$(call E, compile [boot]: $@)\n+\t$(BOOT) -o $@ $<\n+\n+%.boot$(X): %.rc $(BREQ)\n+\t@$(call E, compile [boot]: $@)\n+\t$(BOOT) -o $@ $<\n+\n+%.stage0$(X): %.o rt/$(CFG_RUNTIME) stage0/glue.o\n+\t@$(call E, link [llvm]: $@)\n+\t$(Q)gcc $(CFG_GCC_CFLAGS) stage0/glue.o -o $@ $< -Lstage0 -lrustrt\n+\t@# dsymutil sometimes fails or prints a warning, but the\n+\t@# program still runs.  Since it simplifies debugging other\n+\t@# programs, I\\'ll live with the noise.\n+\t-$(Q)$(DSYMUTIL) $@\n+\n+%.stage0.bc: %.rc $(SREQ0)\n+\t@$(call E, compile [stage0]: $@)\n+\t$(STAGE0) -o $@ $<\n+\n+%.stage0.bc: %.rs $(SREQ0)\n+\t@$(call E, compile [stage0]: $@)\n+\t$(STAGE0) -o $@ $<\n+\n %.o: %.s\n \t@$(call E, assemble [llvm]: $@)\n \t$(Q)gcc $(CFG_GCC_CFLAGS) -o $@ -c $<\n@@ -445,11 +481,61 @@ llvmext/%.o: llvmext/%.cpp $(MKFILES)\n \t@$(call E, dis [llvm]: $@)\n \t$(Q)$(CFG_LLVM_BINDIR)/llvm-dis -o $@ $<\n \n-\n %.s: %.bc\n \t@$(call E, compile [llvm]: $@)\n \t$(Q)$(CFG_LLVM_BINDIR)/llc $(CFG_LLC_CFLAGS) -o $@ $<\n \n+# Cancel the implicit .out rule in GNU make.\n+%.out: %\n+\n+%.out: %.out.tmp\n+\t$(Q)mv $< $@\n+\n+test/run-pass/%.out.tmp: test/run-pass/%$(CFG_EXE_SUFFIX) rt/$(CFG_RUNTIME)\n+\t$(Q)rm -f $<.tmp\n+\t@$(call E, run: $@)\n+\t$(Q)$(call CFG_RUN_TARG, $<) > $@\n+\n+test/bench/shootout/%.out.tmp: test/bench/shootout/%$(X) \\\n+                               rt/$(CFG_RUNTIME)\n+\t$(Q)rm -f $<.tmp\n+\t@$(call E, run: $@)\n+\t$(Q)$(call CFG_RUN_TARG, $<) > $@\n+\n+test/bench/99-bottles/%.out.tmp: test/bench/99-bottles/%$(X) \\\n+                                 rt/$(CFG_RUNTIME)\n+\t$(Q)rm -f $<.tmp\n+\t@$(call E, run: $@)\n+\t$(Q)$(call CFG_RUN_TARG, $<) > $@\n+\n+test/run-fail/%.out.tmp: test/run-fail/%$(X) \\\n+                         rt/$(CFG_RUNTIME)\n+\t$(Q)rm -f $<.tmp\n+\t@$(call E, run: $@)\n+\t$(Q)grep -q error-pattern $(S)src/test/run-fail/$(basename $*).rs\n+\t$(Q)rm -f $@\n+\t$(Q)$(call CFG_RUN_TARG, $<) >$@ 2>&1 ; X=$$? ; \\\n+      if [ $$X -eq 0 ] ; then exit 1 ; else exit 0 ; fi\n+\t$(Q)grep --text --quiet \\\n+      \"$$(grep error-pattern $(S)src/test/run-fail/$(basename $*).rs \\\n+        | cut -d : -f 2- | tr -d '\\n\\r')\" $@\n+\n+test/compile-fail/%.boot.out.tmp: test/compile-fail/%.rs $(BREQ)\n+\t@$(call E, compile [boot]: $@)\n+\t$(Q)grep -q error-pattern $<\n+\t$(Q)rm -f $@\n+\t$(BOOT) -o $(@:.out=$(X)) $< >$@ 2>&1; test $$? -ne 0\n+\t$(Q)grep --text --quiet \\\n+      \"$$(grep error-pattern $< | cut -d : -f 2- | tr -d '\\n\\r')\" $@\n+\n+test/compile-fail/%.stage0.out.tmp: test/compile-fail/%.rs $(SREQ0)\n+\t@$(call E, compile [stage0]: $@)\n+\t$(Q)grep -q error-pattern $<\n+\t$(Q)rm -f $@\n+\t$(STAGE0) -o $(@:.out=$(X)) $< >$@ 2>&1; test $$? -ne 0\n+\t$(Q)grep --text --quiet \\\n+      \"$$(grep error-pattern $< | cut -d : -f 2- | tr -d '\\n\\r')\" $@\n+\n \n ######################################################################\n # Cleanup"}, {"sha": "8125e2c4d7a0c342980e565d4b6c05689927d5f8", "filename": "configure", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4691a7515079c56895bae727b2b7aa92a784f1a4/configure", "raw_url": "https://github.com/rust-lang/rust/raw/4691a7515079c56895bae727b2b7aa92a784f1a4/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=4691a7515079c56895bae727b2b7aa92a784f1a4", "patch": "@@ -33,13 +33,6 @@ copy() {\n     cp $1 $2\n }\n \n-make_test_subdirs() {\n-    for t in run-pass run-fail compile-fail\n-    do\n-        make_dir $1/test/$t\n-    done\n-}\n-\n putvar() {\n     local T\n     eval T=\\$$1\n@@ -89,19 +82,13 @@ for i in \\\n     doc \\\n     boot/fe boot/me boot/be boot/driver boot/util \\\n     rt rt/isaac rt/bigint rt/sync rt/test \\\n-    llvmext\n+    llvmext \\\n+    state0 stage1 stage2 \\\n+    test/run-pass test/run-fail test/compile-fail\n do\n     make_dir $i\n done\n \n-make_test_subdirs boot\n-\n-for i in 0 1 2\n-do\n-    make_dir stage$i\n-    make_test_subdirs stage$i\n-done\n-\n msg \"inspecting environment\"\n \n CFG_OSTYPE=$(uname -s)"}]}