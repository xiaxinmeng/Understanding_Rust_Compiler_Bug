{"sha": "2e3f51775a6427f34878c2041be8e0c8d656ea3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlM2Y1MTc3NWE2NDI3ZjM0ODc4YzIwNDFiZThlMGM4ZDY1NmVhM2M=", "commit": {"author": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2020-05-28T17:54:08Z"}, "committer": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2020-06-25T09:27:06Z"}, "message": "Add unstable rustc option to control self-contained linkage mode", "tree": {"sha": "6a83ddce2996d250553a500a38e315d86f24293b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a83ddce2996d250553a500a38e315d86f24293b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e3f51775a6427f34878c2041be8e0c8d656ea3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e3f51775a6427f34878c2041be8e0c8d656ea3c", "html_url": "https://github.com/rust-lang/rust/commit/2e3f51775a6427f34878c2041be8e0c8d656ea3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e3f51775a6427f34878c2041be8e0c8d656ea3c/comments", "author": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1557fb031b272b4c5bfcc7de5df7eddc7b36a584", "url": "https://api.github.com/repos/rust-lang/rust/commits/1557fb031b272b4c5bfcc7de5df7eddc7b36a584", "html_url": "https://github.com/rust-lang/rust/commit/1557fb031b272b4c5bfcc7de5df7eddc7b36a584"}], "stats": {"total": 61, "additions": 42, "deletions": 19}, "files": [{"sha": "ae1e4da75333176459cd34451875db5b61feae2b", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 37, "deletions": 17, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2e3f51775a6427f34878c2041be8e0c8d656ea3c/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e3f51775a6427f34878c2041be8e0c8d656ea3c/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=2e3f51775a6427f34878c2041be8e0c8d656ea3c", "patch": "@@ -140,7 +140,12 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(\n // The third parameter is for env vars, used on windows to set up the\n // path for MSVC to find its DLLs, and gcc to find its bundled\n // toolchain\n-fn get_linker(sess: &Session, linker: &Path, flavor: LinkerFlavor) -> Command {\n+fn get_linker(\n+    sess: &Session,\n+    linker: &Path,\n+    flavor: LinkerFlavor,\n+    self_contained: bool,\n+) -> Command {\n     let msvc_tool = windows_registry::find_tool(&sess.opts.target_triple.triple(), \"link.exe\");\n \n     // If our linker looks like a batch script on Windows then to execute this\n@@ -199,7 +204,7 @@ fn get_linker(sess: &Session, linker: &Path, flavor: LinkerFlavor) -> Command {\n \n     // The compiler's sysroot often has some bundled tools, so add it to the\n     // PATH for the child.\n-    let mut new_path = sess.host_filesearch(PathKind::All).get_tools_search_paths();\n+    let mut new_path = sess.host_filesearch(PathKind::All).get_tools_search_paths(self_contained);\n     let mut msvc_changed_path = false;\n     if sess.target.target.options.is_like_msvc {\n         if let Some(ref tool) = msvc_tool {\n@@ -563,7 +568,7 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n                     .iter()\n                     .copied()\n                     .flatten()\n-                    .map(|obj| get_object_file_path(sess, obj).into_os_string())\n+                    .map(|obj| get_object_file_path(sess, obj, fallback).into_os_string())\n                     .collect::<Vec<_>>()\n             };\n             let pre_objects_static_pie = get_objects(pre_objects, LinkOutputKind::StaticPicExe);\n@@ -1066,9 +1071,11 @@ fn get_crt_libs_path(sess: &Session) -> Option<PathBuf> {\n     }\n }\n \n-fn get_object_file_path(sess: &Session, name: &str) -> PathBuf {\n+fn get_object_file_path(sess: &Session, name: &str, self_contained: bool) -> PathBuf {\n     // prefer system {,dll}crt2.o libs, see get_crt_libs_path comment for more details\n-    if sess.target.target.llvm_target.contains(\"windows-gnu\") {\n+    if sess.opts.debugging_opts.link_self_contained.is_none()\n+        && sess.target.target.llvm_target.contains(\"windows-gnu\")\n+    {\n         if let Some(compiler_libs_path) = get_crt_libs_path(sess) {\n             let file_path = compiler_libs_path.join(name);\n             if file_path.exists() {\n@@ -1081,9 +1088,12 @@ fn get_object_file_path(sess: &Session, name: &str) -> PathBuf {\n     if file_path.exists() {\n         return file_path;\n     }\n-    let file_path = fs.get_selfcontained_lib_path().join(name);\n-    if file_path.exists() {\n-        return file_path;\n+    // Special directory with objects used only in self-contained linkage mode\n+    if self_contained {\n+        let file_path = fs.get_selfcontained_lib_path().join(name);\n+        if file_path.exists() {\n+            return file_path;\n+        }\n     }\n     for search_path in fs.search_paths() {\n         let file_path = search_path.dir.join(name);\n@@ -1268,6 +1278,10 @@ fn link_output_kind(sess: &Session, crate_type: CrateType) -> LinkOutputKind {\n /// Whether we link to our own CRT objects instead of relying on gcc to pull them.\n /// We only provide such support for a very limited number of targets.\n fn crt_objects_fallback(sess: &Session, crate_type: CrateType) -> bool {\n+    if let Some(self_contained) = sess.opts.debugging_opts.link_self_contained {\n+        return self_contained;\n+    }\n+\n     match sess.target.target.options.crt_objects_fallback {\n         // FIXME: Find a better heuristic for \"native musl toolchain is available\",\n         // based on host and linker path, for example.\n@@ -1292,7 +1306,7 @@ fn add_pre_link_objects(\n     let opts = &sess.target.target.options;\n     let objects = if fallback { &opts.pre_link_objects_fallback } else { &opts.pre_link_objects };\n     for obj in objects.get(&link_output_kind).iter().copied().flatten() {\n-        cmd.add_object(&get_object_file_path(sess, obj));\n+        cmd.add_object(&get_object_file_path(sess, obj, fallback));\n     }\n }\n \n@@ -1306,7 +1320,7 @@ fn add_post_link_objects(\n     let opts = &sess.target.target.options;\n     let objects = if fallback { &opts.post_link_objects_fallback } else { &opts.post_link_objects };\n     for obj in objects.get(&link_output_kind).iter().copied().flatten() {\n-        cmd.add_object(&get_object_file_path(sess, obj));\n+        cmd.add_object(&get_object_file_path(sess, obj, fallback));\n     }\n }\n \n@@ -1468,9 +1482,12 @@ fn link_local_crate_native_libs_and_dependent_crate_libs<'a, B: ArchiveBuilder<'\n }\n \n /// Add sysroot and other globally set directories to the directory search list.\n-fn add_library_search_dirs(cmd: &mut dyn Linker, sess: &Session) {\n+fn add_library_search_dirs(cmd: &mut dyn Linker, sess: &Session, self_contained: bool) {\n     // Prefer system mingw-w64 libs, see get_crt_libs_path comment for more details.\n-    if cfg!(windows) && sess.target.target.llvm_target.contains(\"windows-gnu\") {\n+    if sess.opts.debugging_opts.link_self_contained.is_none()\n+        && cfg!(windows)\n+        && sess.target.target.llvm_target.contains(\"windows-gnu\")\n+    {\n         if let Some(compiler_libs_path) = get_crt_libs_path(sess) {\n             cmd.include_path(&compiler_libs_path);\n         }\n@@ -1481,8 +1498,11 @@ fn add_library_search_dirs(cmd: &mut dyn Linker, sess: &Session) {\n     let lib_path = sess.target_filesearch(PathKind::All).get_lib_path();\n     cmd.include_path(&fix_windows_verbatim_for_gcc(&lib_path));\n \n-    let lib_path = sess.target_filesearch(PathKind::All).get_selfcontained_lib_path();\n-    cmd.include_path(&fix_windows_verbatim_for_gcc(&lib_path));\n+    // Special directory with libraries used only in self-contained linkage mode\n+    if self_contained {\n+        let lib_path = sess.target_filesearch(PathKind::All).get_selfcontained_lib_path();\n+        cmd.include_path(&fix_windows_verbatim_for_gcc(&lib_path));\n+    }\n }\n \n /// Add options making relocation sections in the produced ELF files read-only\n@@ -1545,13 +1565,13 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     codegen_results: &CodegenResults,\n     target_cpu: &str,\n ) -> Command {\n-    let base_cmd = get_linker(sess, path, flavor);\n+    let crt_objects_fallback = crt_objects_fallback(sess, crate_type);\n+    let base_cmd = get_linker(sess, path, flavor, crt_objects_fallback);\n     // FIXME: Move `/LIBPATH` addition for uwp targets from the linker construction\n     // to the linker args construction.\n     assert!(base_cmd.get_args().is_empty() || sess.target.target.target_vendor == \"uwp\");\n     let cmd = &mut *codegen_results.linker_info.to_linker(base_cmd, &sess, flavor, target_cpu);\n     let link_output_kind = link_output_kind(sess, crate_type);\n-    let crt_objects_fallback = crt_objects_fallback(sess, crate_type);\n \n     // NO-OPT-OUT, OBJECT-FILES-MAYBE, CUSTOMIZATION-POINT\n     add_pre_link_args(cmd, sess, flavor);\n@@ -1597,7 +1617,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n \n     // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n     // FIXME: Order-dependent, at least relatively to other args adding searh directories.\n-    add_library_search_dirs(cmd, sess);\n+    add_library_search_dirs(cmd, sess, crt_objects_fallback);\n \n     // OBJECT-FILES-YES\n     add_local_crate_regular_objects(cmd, codegen_results);"}, {"sha": "675a880cef47c4c98fb2a6609ab0ea7e1a99feb6", "filename": "src/librustc_session/filesearch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e3f51775a6427f34878c2041be8e0c8d656ea3c/src%2Flibrustc_session%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e3f51775a6427f34878c2041be8e0c8d656ea3c/src%2Flibrustc_session%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Ffilesearch.rs?ref=2e3f51775a6427f34878c2041be8e0c8d656ea3c", "patch": "@@ -92,13 +92,13 @@ impl<'a> FileSearch<'a> {\n     }\n \n     // Returns a list of directories where target-specific tool binaries are located.\n-    pub fn get_tools_search_paths(&self) -> Vec<PathBuf> {\n+    pub fn get_tools_search_paths(&self, self_contained: bool) -> Vec<PathBuf> {\n         let mut p = PathBuf::from(self.sysroot);\n         p.push(find_libdir(self.sysroot).as_ref());\n         p.push(RUST_LIB_DIR);\n         p.push(&self.triple);\n         p.push(\"bin\");\n-        vec![p.clone(), p.join(\"self-contained\")]\n+        if self_contained { vec![p.clone(), p.join(\"self-contained\")] } else { vec![p.clone()] }\n     }\n }\n "}, {"sha": "055ae2fa2b5e51ef6bdb0c90f387cf31b71836e1", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e3f51775a6427f34878c2041be8e0c8d656ea3c/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e3f51775a6427f34878c2041be8e0c8d656ea3c/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=2e3f51775a6427f34878c2041be8e0c8d656ea3c", "patch": "@@ -888,6 +888,9 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"keep hygiene data after analysis (default: no)\"),\n     link_native_libraries: bool = (true, parse_bool, [UNTRACKED],\n         \"link native libraries in the linker invocation (default: yes)\"),\n+    link_self_contained: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+        \"control whether to link Rust provided C objects/libraries or rely\n+         on C toolchain installed in the system\"),\n     link_only: bool = (false, parse_bool, [TRACKED],\n         \"link the `.rlink` file generated by `-Z no-link` (default: no)\"),\n     llvm_time_trace: bool = (false, parse_bool, [UNTRACKED],"}]}