{"sha": "de5cebdba58770ab555476bc4cdf23d89bd0c3ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNWNlYmRiYTU4NzcwYWI1NTU0NzZiYzRjZGYyM2Q4OWJkMGMzZWE=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-07-21T22:54:30Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-07-31T17:37:21Z"}, "message": "Provide test configuration through struct\n\nThis is far more sound than passing many different arguments of the same\ntype.", "tree": {"sha": "3c03fae0a1973b2dbb8cbdb4c455af5aa4663f2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c03fae0a1973b2dbb8cbdb4c455af5aa4663f2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de5cebdba58770ab555476bc4cdf23d89bd0c3ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de5cebdba58770ab555476bc4cdf23d89bd0c3ea", "html_url": "https://github.com/rust-lang/rust/commit/de5cebdba58770ab555476bc4cdf23d89bd0c3ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de5cebdba58770ab555476bc4cdf23d89bd0c3ea/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad40e4517f1969e60eac9fcac2affa75bb2e715e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad40e4517f1969e60eac9fcac2affa75bb2e715e", "html_url": "https://github.com/rust-lang/rust/commit/ad40e4517f1969e60eac9fcac2affa75bb2e715e"}], "stats": {"total": 49, "additions": 21, "deletions": 28}, "files": [{"sha": "c73e6d4b3554f8c02b157a4e65254cf3f1d0584e", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/de5cebdba58770ab555476bc4cdf23d89bd0c3ea/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5cebdba58770ab555476bc4cdf23d89bd0c3ea/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=de5cebdba58770ab555476bc4cdf23d89bd0c3ea", "patch": "@@ -513,12 +513,7 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector, position: Sp\n                     let text = lines.collect::<Vec<Cow<str>>>().join(\"\\n\");\n                     nb_lines += doc[prev_offset..offset].lines().count();\n                     let line = tests.get_line() + (nb_lines - 1);\n-                    let filename = tests.get_filename();\n-                    tests.add_test(text.to_owned(),\n-                                   block_info.should_panic, block_info.no_run,\n-                                   block_info.ignore, block_info.test_harness,\n-                                   block_info.compile_fail, block_info.error_codes,\n-                                   line, filename, block_info.allow_fail);\n+                    tests.add_test(text, block_info, line);\n                     prev_offset = offset;\n                 } else {\n                     handler.span_warn(position, \"invalid start of a new code block\");\n@@ -543,16 +538,16 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector, position: Sp\n }\n \n #[derive(Eq, PartialEq, Clone, Debug)]\n-struct LangString {\n+pub struct LangString {\n     original: String,\n-    should_panic: bool,\n-    no_run: bool,\n-    ignore: bool,\n-    rust: bool,\n-    test_harness: bool,\n-    compile_fail: bool,\n-    error_codes: Vec<String>,\n-    allow_fail: bool,\n+    pub should_panic: bool,\n+    pub no_run: bool,\n+    pub ignore: bool,\n+    pub rust: bool,\n+    pub test_harness: bool,\n+    pub compile_fail: bool,\n+    pub error_codes: Vec<String>,\n+    pub allow_fail: bool,\n }\n \n impl LangString {"}, {"sha": "2885ce615d246d7357f542ef205de8a09be6e3d4", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/de5cebdba58770ab555476bc4cdf23d89bd0c3ea/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5cebdba58770ab555476bc4cdf23d89bd0c3ea/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=de5cebdba58770ab555476bc4cdf23d89bd0c3ea", "patch": "@@ -42,7 +42,7 @@ use errors;\n use errors::emitter::ColorConfig;\n \n use clean::Attributes;\n-use html::markdown;\n+use html::markdown::{self, LangString};\n \n #[derive(Clone, Default)]\n pub struct TestOptions {\n@@ -533,10 +533,8 @@ impl Collector {\n         format!(\"{} - {} (line {})\", filename, self.names.join(\"::\"), line)\n     }\n \n-    pub fn add_test(&mut self, test: String,\n-                    should_panic: bool, no_run: bool, should_ignore: bool,\n-                    as_test_harness: bool, compile_fail: bool, error_codes: Vec<String>,\n-                    line: usize, filename: FileName, allow_fail: bool) {\n+    pub fn add_test(&mut self, test: String, config: LangString, line: usize) {\n+        let filename = self.get_filename();\n         let name = self.generate_name(line, &filename);\n         let cfgs = self.cfgs.clone();\n         let libs = self.libs.clone();\n@@ -551,10 +549,10 @@ impl Collector {\n         self.tests.push(testing::TestDescAndFn {\n             desc: testing::TestDesc {\n                 name: testing::DynTestName(name.clone()),\n-                ignore: should_ignore,\n+                ignore: config.ignore,\n                 // compiler failures are test failures\n                 should_panic: testing::ShouldPanic::No,\n-                allow_fail,\n+                allow_fail: config.allow_fail,\n             },\n             testfn: testing::DynTestFn(box move || {\n                 let panic = io::set_panic(None);\n@@ -572,11 +570,11 @@ impl Collector {\n                                  libs,\n                                  cg,\n                                  externs,\n-                                 should_panic,\n-                                 no_run,\n-                                 as_test_harness,\n-                                 compile_fail,\n-                                 error_codes,\n+                                 config.should_panic,\n+                                 config.no_run,\n+                                 config.test_harness,\n+                                 config.compile_fail,\n+                                 config.error_codes,\n                                  &opts,\n                                  maybe_sysroot,\n                                  linker,\n@@ -604,7 +602,7 @@ impl Collector {\n         self.position = position;\n     }\n \n-    pub fn get_filename(&self) -> FileName {\n+    fn get_filename(&self) -> FileName {\n         if let Some(ref codemap) = self.codemap {\n             let filename = codemap.span_to_filename(self.position);\n             if let FileName::Real(ref filename) = filename {"}]}