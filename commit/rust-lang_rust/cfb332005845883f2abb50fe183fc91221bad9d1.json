{"sha": "cfb332005845883f2abb50fe183fc91221bad9d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmYjMzMjAwNTg0NTg4M2YyYWJiNTBmZTE4M2ZjOTEyMjFiYWQ5ZDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-21T19:43:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-21T19:43:00Z"}, "message": "Auto merge of #4932 - lzutao:rustup-67355, r=matthiaskrgr\n\nrustup \"Merge `ast::Mutability` and `mir::Mutability`\"\n\ncc https://github.com/rust-lang/rust/pull/67355\nchangelog: none", "tree": {"sha": "ef3209543691cd324ad79e70d275799540ef287e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef3209543691cd324ad79e70d275799540ef287e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfb332005845883f2abb50fe183fc91221bad9d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfb332005845883f2abb50fe183fc91221bad9d1", "html_url": "https://github.com/rust-lang/rust/commit/cfb332005845883f2abb50fe183fc91221bad9d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfb332005845883f2abb50fe183fc91221bad9d1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "961c1a5df2aa20e92ee6a8f277f384fd4249366d", "url": "https://api.github.com/repos/rust-lang/rust/commits/961c1a5df2aa20e92ee6a8f277f384fd4249366d", "html_url": "https://github.com/rust-lang/rust/commit/961c1a5df2aa20e92ee6a8f277f384fd4249366d"}, {"sha": "d1ca5f1d7cb83793b729cfa5199a451594eec042", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1ca5f1d7cb83793b729cfa5199a451594eec042", "html_url": "https://github.com/rust-lang/rust/commit/d1ca5f1d7cb83793b729cfa5199a451594eec042"}], "stats": {"total": 101, "additions": 49, "deletions": 52}, "files": [{"sha": "19e5aace557a792341f09efaceb7b4cde95ebcb6", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfb332005845883f2abb50fe183fc91221bad9d1/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb332005845883f2abb50fe183fc91221bad9d1/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=cfb332005845883f2abb50fe183fc91221bad9d1", "patch": "@@ -553,7 +553,7 @@ fn is_mutable_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>, span: Span,\n         Tuple(ref substs) => substs.types().any(|ty| is_mutable_ty(cx, ty, span, tys)),\n         Array(ty, _) | Slice(ty) => is_mutable_ty(cx, ty, span, tys),\n         RawPtr(ty::TypeAndMut { ty, mutbl }) | Ref(_, ty, mutbl) => {\n-            mutbl == hir::Mutability::Mutable || is_mutable_ty(cx, ty, span, tys)\n+            mutbl == hir::Mutability::Mut || is_mutable_ty(cx, ty, span, tys)\n         },\n         // calling something constitutes a side effect, so return true on all callables\n         // also never calls need not be used, so return true for them, too\n@@ -658,7 +658,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for StaticMutVisitor<'a, 'tcx> {\n                     tys.clear();\n                 }\n             },\n-            Assign(ref target, _) | AssignOp(_, ref target, _) | AddrOf(_, hir::Mutability::Mutable, ref target) => {\n+            Assign(ref target, _) | AssignOp(_, ref target, _) | AddrOf(_, hir::Mutability::Mut, ref target) => {\n                 self.mutates_static |= is_mutated_static(self.cx, target)\n             },\n             _ => {},"}, {"sha": "706d102177e5472ac59ee29473577abf7100b13c", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cfb332005845883f2abb50fe183fc91221bad9d1/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb332005845883f2abb50fe183fc91221bad9d1/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=cfb332005845883f2abb50fe183fc91221bad9d1", "patch": "@@ -1507,8 +1507,8 @@ fn make_iterator_snippet(cx: &LateContext<'_, '_>, arg: &Expr, applic_ref: &mut\n                 if has_iter_method(cx, cx.tables.expr_ty(&arg_inner)).is_some() =>\n             {\n                 let meth_name = match mutability {\n-                    Mutability::Mutable => \"iter_mut\",\n-                    Mutability::Immutable => \"iter\",\n+                    Mutability::Mut => \"iter_mut\",\n+                    Mutability::Not => \"iter\",\n                 };\n                 format!(\n                     \"{}.{}()\",\n@@ -1540,14 +1540,14 @@ fn check_for_loop_over_map_kv<'a, 'tcx>(\n             let (new_pat_span, kind, ty, mutbl) = match cx.tables.expr_ty(arg).kind {\n                 ty::Ref(_, ty, mutbl) => match (&pat[0].kind, &pat[1].kind) {\n                     (key, _) if pat_is_wild(key, body) => (pat[1].span, \"value\", ty, mutbl),\n-                    (_, value) if pat_is_wild(value, body) => (pat[0].span, \"key\", ty, Mutability::Immutable),\n+                    (_, value) if pat_is_wild(value, body) => (pat[0].span, \"key\", ty, Mutability::Not),\n                     _ => return,\n                 },\n                 _ => return,\n             };\n             let mutbl = match mutbl {\n-                Mutability::Immutable => \"\",\n-                Mutability::Mutable => \"_mut\",\n+                Mutability::Not => \"\",\n+                Mutability::Mut => \"_mut\",\n             };\n             let arg = match arg.kind {\n                 ExprKind::AddrOf(BorrowKind::Ref, _, ref expr) => &**expr,\n@@ -1868,7 +1868,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                 self.visit_expr(rhs);\n             },\n             ExprKind::AddrOf(BorrowKind::Ref, mutbl, ref expr) => {\n-                if mutbl == Mutability::Mutable {\n+                if mutbl == Mutability::Mut {\n                     self.prefer_mutable = true;\n                 }\n                 self.visit_expr(expr);\n@@ -1879,7 +1879,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                     let ty = self.cx.tables.expr_ty_adjusted(expr);\n                     self.prefer_mutable = false;\n                     if let ty::Ref(_, _, mutbl) = ty.kind {\n-                        if mutbl == Mutability::Mutable {\n+                        if mutbl == Mutability::Mut {\n                             self.prefer_mutable = true;\n                         }\n                     }\n@@ -1891,7 +1891,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                 for (ty, expr) in self.cx.tcx.fn_sig(def_id).inputs().skip_binder().iter().zip(args) {\n                     self.prefer_mutable = false;\n                     if let ty::Ref(_, _, mutbl) = ty.kind {\n-                        if mutbl == Mutability::Mutable {\n+                        if mutbl == Mutability::Mut {\n                             self.prefer_mutable = true;\n                         }\n                     }\n@@ -2084,7 +2084,7 @@ impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n                         }\n                     },\n                     ExprKind::Assign(ref lhs, _) if lhs.hir_id == expr.hir_id => *state = VarState::DontWarn,\n-                    ExprKind::AddrOf(BorrowKind::Ref, mutability, _) if mutability == Mutability::Mutable => {\n+                    ExprKind::AddrOf(BorrowKind::Ref, mutability, _) if mutability == Mutability::Mut => {\n                         *state = VarState::DontWarn\n                     },\n                     _ => (),\n@@ -2168,7 +2168,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n                             VarState::DontWarn\n                         }\n                     },\n-                    ExprKind::AddrOf(BorrowKind::Ref, mutability, _) if mutability == Mutability::Mutable => {\n+                    ExprKind::AddrOf(BorrowKind::Ref, mutability, _) if mutability == Mutability::Mut => {\n                         self.state = VarState::DontWarn\n                     },\n                     _ => (),"}, {"sha": "cf7650d02bf4f2d19bdad58d0c22707a593743ab", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfb332005845883f2abb50fe183fc91221bad9d1/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb332005845883f2abb50fe183fc91221bad9d1/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=cfb332005845883f2abb50fe183fc91221bad9d1", "patch": "@@ -571,7 +571,7 @@ fn is_panic_block(block: &Block) -> bool {\n fn check_match_ref_pats(cx: &LateContext<'_, '_>, ex: &Expr, arms: &[Arm], expr: &Expr) {\n     if has_only_ref_pats(arms) {\n         let mut suggs = Vec::new();\n-        let (title, msg) = if let ExprKind::AddrOf(BorrowKind::Ref, Mutability::Immutable, ref inner) = ex.kind {\n+        let (title, msg) = if let ExprKind::AddrOf(BorrowKind::Ref, Mutability::Not, ref inner) = ex.kind {\n             let span = ex.span.source_callsite();\n             suggs.push((span, Sugg::hir_with_macro_callsite(cx, inner, \"..\").to_string()));\n             ("}, {"sha": "f819fdc17b1283f4704beb3d2475714c77c383f3", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfb332005845883f2abb50fe183fc91221bad9d1/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb332005845883f2abb50fe183fc91221bad9d1/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=cfb332005845883f2abb50fe183fc91221bad9d1", "patch": "@@ -91,7 +91,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemReplace {\n                         // argument's type. All that's left is to get\n                         // replacee's path.\n                         let replaced_path = match func_args[0].kind {\n-                            ExprKind::AddrOf(BorrowKind::Ref, Mutability::Mutable, ref replaced) => {\n+                            ExprKind::AddrOf(BorrowKind::Ref, Mutability::Mut, ref replaced) => {\n                                 if let ExprKind::Path(QPath::Resolved(None, ref replaced_path)) = replaced.kind {\n                                     replaced_path\n                                 } else {"}, {"sha": "0b6be920d9940cf3172de2145ad8cbf4bf8c0eab", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cfb332005845883f2abb50fe183fc91221bad9d1/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb332005845883f2abb50fe183fc91221bad9d1/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=cfb332005845883f2abb50fe183fc91221bad9d1", "patch": "@@ -2824,8 +2824,8 @@ fn ty_has_iter_method(cx: &LateContext<'_, '_>, self_ref_ty: Ty<'_>) -> Option<(\n             _ => unreachable!(),\n         };\n         let method_name = match mutbl {\n-            hir::Mutability::Immutable => \"iter\",\n-            hir::Mutability::Mutable => \"iter_mut\",\n+            hir::Mutability::Not => \"iter\",\n+            hir::Mutability::Mut => \"iter_mut\",\n         };\n         (ty_name, method_name)\n     })\n@@ -3015,8 +3015,8 @@ impl SelfKind {\n             }\n \n             let trait_path = match mutability {\n-                hir::Mutability::Immutable => &paths::ASREF_TRAIT,\n-                hir::Mutability::Mutable => &paths::ASMUT_TRAIT,\n+                hir::Mutability::Not => &paths::ASREF_TRAIT,\n+                hir::Mutability::Mut => &paths::ASMUT_TRAIT,\n             };\n \n             let trait_def_id = match get_trait_def_id(cx, trait_path) {\n@@ -3028,10 +3028,8 @@ impl SelfKind {\n \n         match self {\n             Self::Value => matches_value(parent_ty, ty),\n-            Self::Ref => {\n-                matches_ref(cx, hir::Mutability::Immutable, parent_ty, ty) || ty == parent_ty && is_copy(cx, ty)\n-            },\n-            Self::RefMut => matches_ref(cx, hir::Mutability::Mutable, parent_ty, ty),\n+            Self::Ref => matches_ref(cx, hir::Mutability::Not, parent_ty, ty) || ty == parent_ty && is_copy(cx, ty),\n+            Self::RefMut => matches_ref(cx, hir::Mutability::Mut, parent_ty, ty),\n             Self::No => ty != parent_ty,\n         }\n     }"}, {"sha": "5dc5e4023e90df22d1425aa37c92e6c31878a2bc", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfb332005845883f2abb50fe183fc91221bad9d1/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb332005845883f2abb50fe183fc91221bad9d1/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=cfb332005845883f2abb50fe183fc91221bad9d1", "patch": "@@ -632,8 +632,8 @@ fn check_cast(cx: &LateContext<'_, '_>, span: Span, e: &Expr, ty: &Ty) {\n         if !in_constant(cx, e.hir_id);\n         then {\n             let (msg, sugg_fn) = match mut_ty.mutbl {\n-                Mutability::Mutable => (\"`0 as *mut _` detected\", \"std::ptr::null_mut\"),\n-                Mutability::Immutable => (\"`0 as *const _` detected\", \"std::ptr::null\"),\n+                Mutability::Mut => (\"`0 as *mut _` detected\", \"std::ptr::null_mut\"),\n+                Mutability::Not => (\"`0 as *const _` detected\", \"std::ptr::null\"),\n             };\n \n             let (sugg, appl) = if let TyKind::Infer = mut_ty.ty.kind {"}, {"sha": "5bc0ff806b9d30583d9c00b366c6d3542e1de7e4", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cfb332005845883f2abb50fe183fc91221bad9d1/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb332005845883f2abb50fe183fc91221bad9d1/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=cfb332005845883f2abb50fe183fc91221bad9d1", "patch": "@@ -58,15 +58,15 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for MutVisitor<'a, 'tcx> {\n             // Let's ignore the generated code.\n             intravisit::walk_expr(self, arg);\n             intravisit::walk_expr(self, body);\n-        } else if let hir::ExprKind::AddrOf(hir::BorrowKind::Ref, hir::Mutability::Mutable, ref e) = expr.kind {\n-            if let hir::ExprKind::AddrOf(hir::BorrowKind::Ref, hir::Mutability::Mutable, _) = e.kind {\n+        } else if let hir::ExprKind::AddrOf(hir::BorrowKind::Ref, hir::Mutability::Mut, ref e) = expr.kind {\n+            if let hir::ExprKind::AddrOf(hir::BorrowKind::Ref, hir::Mutability::Mut, _) = e.kind {\n                 span_lint(\n                     self.cx,\n                     MUT_MUT,\n                     expr.span,\n                     \"generally you want to avoid `&mut &mut _` if possible\",\n                 );\n-            } else if let ty::Ref(_, _, hir::Mutability::Mutable) = self.cx.tables.expr_ty(e).kind {\n+            } else if let ty::Ref(_, _, hir::Mutability::Mut) = self.cx.tables.expr_ty(e).kind {\n                 span_lint(\n                     self.cx,\n                     MUT_MUT,\n@@ -82,14 +82,14 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for MutVisitor<'a, 'tcx> {\n             _,\n             hir::MutTy {\n                 ty: ref pty,\n-                mutbl: hir::Mutability::Mutable,\n+                mutbl: hir::Mutability::Mut,\n             },\n         ) = ty.kind\n         {\n             if let hir::TyKind::Rptr(\n                 _,\n                 hir::MutTy {\n-                    mutbl: hir::Mutability::Mutable,\n+                    mutbl: hir::Mutability::Mut,\n                     ..\n                 },\n             ) = pty.kind"}, {"sha": "a8d1454096ab425b7a8225f8b01e11c78d76d229", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cfb332005845883f2abb50fe183fc91221bad9d1/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb332005845883f2abb50fe183fc91221bad9d1/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=cfb332005845883f2abb50fe183fc91221bad9d1", "patch": "@@ -56,12 +56,11 @@ fn check_arguments<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arguments: &[Expr], typ\n             let parameters = type_definition.fn_sig(cx.tcx).skip_binder().inputs();\n             for (argument, parameter) in arguments.iter().zip(parameters.iter()) {\n                 match parameter.kind {\n-                    ty::Ref(_, _, Mutability::Immutable)\n+                    ty::Ref(_, _, Mutability::Not)\n                     | ty::RawPtr(ty::TypeAndMut {\n-                        mutbl: Mutability::Immutable,\n-                        ..\n+                        mutbl: Mutability::Not, ..\n                     }) => {\n-                        if let ExprKind::AddrOf(BorrowKind::Ref, Mutability::Mutable, _) = argument.kind {\n+                        if let ExprKind::AddrOf(BorrowKind::Ref, Mutability::Mut, _) = argument.kind {\n                             span_lint(\n                                 cx,\n                                 UNNECESSARY_MUT_PASSED,"}, {"sha": "99815301010522ca8acac35644318e1c69e663d0", "filename": "clippy_lints/src/mutable_debug_assertion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfb332005845883f2abb50fe183fc91221bad9d1/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb332005845883f2abb50fe183fc91221bad9d1/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs?ref=cfb332005845883f2abb50fe183fc91221bad9d1", "patch": "@@ -129,15 +129,15 @@ impl<'a, 'tcx> MutArgVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for MutArgVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr) {\n         match expr.kind {\n-            ExprKind::AddrOf(BorrowKind::Ref, Mutability::Mutable, _) => {\n+            ExprKind::AddrOf(BorrowKind::Ref, Mutability::Mut, _) => {\n                 self.found = true;\n                 return;\n             },\n             ExprKind::Path(_) => {\n                 if let Some(adj) = self.cx.tables.adjustments().get(expr.hir_id) {\n                     if adj\n                         .iter()\n-                        .any(|a| matches!(a.target.kind, ty::Ref(_, _, Mutability::Mutable)))\n+                        .any(|a| matches!(a.target.kind, ty::Ref(_, _, Mutability::Mut)))\n                     {\n                         self.found = true;\n                         return;"}, {"sha": "70d459db0c62af512056aec97a446f247c4b7a56", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfb332005845883f2abb50fe183fc91221bad9d1/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb332005845883f2abb50fe183fc91221bad9d1/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=cfb332005845883f2abb50fe183fc91221bad9d1", "patch": "@@ -42,7 +42,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n         if e.span.from_expansion() || self.derived_item.is_some() {\n             return;\n         }\n-        if let ExprKind::AddrOf(BorrowKind::Ref, Mutability::Immutable, ref inner) = e.kind {\n+        if let ExprKind::AddrOf(BorrowKind::Ref, Mutability::Not, ref inner) = e.kind {\n             if let ty::Ref(..) = cx.tables.expr_ty(inner).kind {\n                 for adj3 in cx.tables.expr_adjustments(e).windows(3) {\n                     if let [Adjustment {\n@@ -83,10 +83,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n         if_chain! {\n             if let PatKind::Binding(BindingAnnotation::Ref, .., name, _) = pat.kind;\n             if let ty::Ref(_, tam, mutbl) = cx.tables.pat_ty(pat).kind;\n-            if mutbl == Mutability::Immutable;\n+            if mutbl == Mutability::Not;\n             if let ty::Ref(_, _, mutbl) = tam.kind;\n             // only lint immutable refs, because borrowed `&mut T` cannot be moved out\n-            if mutbl == Mutability::Immutable;\n+            if mutbl == Mutability::Not;\n             then {\n                 span_lint_and_then(\n                     cx,"}, {"sha": "e9b7aa4a7efa6ea4afc22595b4c14caf6cb52f97", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfb332005845883f2abb50fe183fc91221bad9d1/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb332005845883f2abb50fe183fc91221bad9d1/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=cfb332005845883f2abb50fe183fc91221bad9d1", "patch": "@@ -62,7 +62,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrowedRef {\n \n         if_chain! {\n             // Only lint immutable refs, because `&mut ref T` may be useful.\n-            if let PatKind::Ref(ref sub_pat, Mutability::Immutable) = pat.kind;\n+            if let PatKind::Ref(ref sub_pat, Mutability::Not) = pat.kind;\n \n             // Check sub_pat got a `ref` keyword (excluding `ref mut`).\n             if let PatKind::Binding(BindingAnnotation::Ref, .., spanned_name, _) = sub_pat.kind;"}, {"sha": "c0a7d37f1695cd097d04e95a7bfda955e8a20874", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfb332005845883f2abb50fe183fc91221bad9d1/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb332005845883f2abb50fe183fc91221bad9d1/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=cfb332005845883f2abb50fe183fc91221bad9d1", "patch": "@@ -151,7 +151,7 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl, fn_id: HirId, opt_body_id:\n     let fn_ty = sig.skip_binder();\n \n     for (idx, (arg, ty)) in decl.inputs.iter().zip(fn_ty.inputs()).enumerate() {\n-        if let ty::Ref(_, ty, Mutability::Immutable) = ty.kind {\n+        if let ty::Ref(_, ty, Mutability::Not) = ty.kind {\n             if is_type_diagnostic_item(cx, ty, Symbol::intern(\"vec_type\")) {\n                 let mut ty_snippet = None;\n                 if_chain! {\n@@ -255,15 +255,15 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl, fn_id: HirId, opt_body_id:\n     }\n \n     if let FunctionRetTy::Return(ref ty) = decl.output {\n-        if let Some((out, Mutability::Mutable, _)) = get_rptr_lm(ty) {\n+        if let Some((out, Mutability::Mut, _)) = get_rptr_lm(ty) {\n             let mut immutables = vec![];\n             for (_, ref mutbl, ref argspan) in decl\n                 .inputs\n                 .iter()\n                 .filter_map(|ty| get_rptr_lm(ty))\n                 .filter(|&(lt, _, _)| lt.name == out.name)\n             {\n-                if *mutbl == Mutability::Mutable {\n+                if *mutbl == Mutability::Mut {\n                     return;\n                 }\n                 immutables.push(*argspan);"}, {"sha": "bae64e85e7f55691dc1c11d71e3b9bbf07878cc4", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfb332005845883f2abb50fe183fc91221bad9d1/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb332005845883f2abb50fe183fc91221bad9d1/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=cfb332005845883f2abb50fe183fc91221bad9d1", "patch": "@@ -385,7 +385,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                         ),\n                         |db| {\n                             let arg = sugg::Sugg::hir(cx, &args[0], \"..\");\n-                            let (deref, cast) = if mutbl == Mutability::Mutable {\n+                            let (deref, cast) = if mutbl == Mutability::Mut {\n                                 (\"&mut *\", \"*mut\")\n                             } else {\n                                 (\"&*\", \"*const\")\n@@ -433,7 +433,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                             if let ty::Uint(ast::UintTy::U8) = slice_ty.kind;\n                             if from_mutbl == to_mutbl;\n                             then {\n-                                let postfix = if from_mutbl == Mutability::Mutable {\n+                                let postfix = if from_mutbl == Mutability::Mut {\n                                     \"_mut\"\n                                 } else {\n                                     \"\"\n@@ -473,7 +473,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                             let sugg_paren = arg\n                                                 .as_ty(cx.tcx.mk_ptr(ty_from_and_mut))\n                                                 .as_ty(cx.tcx.mk_ptr(ty_to_and_mut));\n-                                            let sugg = if to_mutbl == Mutability::Mutable {\n+                                            let sugg = if to_mutbl == Mutability::Mut {\n                                                 sugg_paren.mut_addr_deref()\n                                             } else {\n                                                 sugg_paren.addr_deref()"}, {"sha": "77ef436afb10c31d7b8eb0a29d7c1103c1aa4203", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfb332005845883f2abb50fe183fc91221bad9d1/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb332005845883f2abb50fe183fc91221bad9d1/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=cfb332005845883f2abb50fe183fc91221bad9d1", "patch": "@@ -98,7 +98,7 @@ impl<'a, 'tcx> TriviallyCopyPassByRef {\n             }\n \n             if_chain! {\n-                if let ty::Ref(input_lt, ty, Mutability::Immutable) = ty.kind;\n+                if let ty::Ref(input_lt, ty, Mutability::Not) = ty.kind;\n                 if !output_lts.contains(&input_lt);\n                 if is_copy(cx, ty);\n                 if let Some(size) = cx.layout_of(ty).ok().map(|l| l.size.bytes());"}, {"sha": "478c8fe686dcafb92cfb1be09c3583ad17037446", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfb332005845883f2abb50fe183fc91221bad9d1/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb332005845883f2abb50fe183fc91221bad9d1/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=cfb332005845883f2abb50fe183fc91221bad9d1", "patch": "@@ -395,7 +395,7 @@ fn check_ty_rptr(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty, is_local: bool, lt:\n                     } else {\n                         format!(\"{} \", lt.name.ident().as_str())\n                     };\n-                    let mutopt = if mut_ty.mutbl == Mutability::Mutable {\n+                    let mutopt = if mut_ty.mutbl == Mutability::Mut {\n                         \"mut \"\n                     } else {\n                         \"\"\n@@ -2387,9 +2387,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RefToMut {\n         if_chain! {\n             if let ExprKind::Unary(UnOp::UnDeref, e) = &expr.kind;\n             if let ExprKind::Cast(e, t) = &e.kind;\n-            if let TyKind::Ptr(MutTy { mutbl: Mutability::Mutable, .. }) = t.kind;\n+            if let TyKind::Ptr(MutTy { mutbl: Mutability::Mut, .. }) = t.kind;\n             if let ExprKind::Cast(e, t) = &e.kind;\n-            if let TyKind::Ptr(MutTy { mutbl: Mutability::Immutable, .. }) = t.kind;\n+            if let TyKind::Ptr(MutTy { mutbl: Mutability::Not, .. }) = t.kind;\n             if let ty::Ref(..) = cx.tables.node_type(e.hir_id).kind;\n             then {\n                 span_lint("}, {"sha": "e307cc3baf27f8b18960dad0298a007e3787f2ff", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfb332005845883f2abb50fe183fc91221bad9d1/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb332005845883f2abb50fe183fc91221bad9d1/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=cfb332005845883f2abb50fe183fc91221bad9d1", "patch": "@@ -166,7 +166,7 @@ impl_lint_pass!(LintWithoutLintPass => [LINT_WITHOUT_LINT_PASS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n-        if let hir::ItemKind::Static(ref ty, Mutability::Immutable, _) = item.kind {\n+        if let hir::ItemKind::Static(ref ty, Mutability::Not, _) = item.kind {\n             if is_lint_ref_type(cx, ty) {\n                 self.declared_lints.insert(item.ident.name, item.span);\n             }\n@@ -219,7 +219,7 @@ fn is_lint_ref_type<'tcx>(cx: &LateContext<'_, 'tcx>, ty: &Ty) -> bool {\n         _,\n         MutTy {\n             ty: ref inner,\n-            mutbl: Mutability::Immutable,\n+            mutbl: Mutability::Not,\n         },\n     ) = ty.kind\n     {"}, {"sha": "557d2894d37fb268a32e9ed2d0d085b6e4f2a5d6", "filename": "tests/ui/author/for_loop.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfb332005845883f2abb50fe183fc91221bad9d1/tests%2Fui%2Fauthor%2Ffor_loop.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/cfb332005845883f2abb50fe183fc91221bad9d1/tests%2Fui%2Fauthor%2Ffor_loop.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Ffor_loop.stdout?ref=cfb332005845883f2abb50fe183fc91221bad9d1", "patch": "@@ -22,7 +22,7 @@ if_chain! {\n     if let ExprKind::Path(ref path2) = func1.kind;\n     if match_qpath(path2, &[\"{{root}}\", \"std\", \"iter\", \"Iterator\", \"next\"]);\n     if args1.len() == 1;\n-    if let ExprKind::AddrOf(BorrowKind::Ref, Mutability::Mutable, ref inner) = args1[0].kind;\n+    if let ExprKind::AddrOf(BorrowKind::Ref, Mutability::Mut, ref inner) = args1[0].kind;\n     if let ExprKind::Path(ref path3) = inner.kind;\n     if match_qpath(path3, &[\"iter\"]);\n     if arms1.len() == 2;"}]}