{"sha": "2bfb20f392c6a51ded93e7342fd8c4b163bf8160", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZmIyMGYzOTJjNmE1MWRlZDkzZTczNDJmZDhjNGIxNjNiZjgxNjA=", "commit": {"author": {"name": "Jonathan Turner", "email": "jonathandturner@users.noreply.github.com", "date": "2016-08-31T13:29:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-31T13:29:08Z"}, "message": "Rollup merge of #35926 - matthew-piziak:bit-or-xor-examples, r=GuillaumeGomez\n\nadd evocative examples for `BitOr` and `BitXor`\n\nThese are exactly equivalent to PR #35809, with one caveat: I do not believe there is a non-bitwise binary XOR operator in Rust, so here it's expressed as `(a || b) && !(a && b)`.\n\nAlternative decompositions are `(a && !b) || (!a && b)` and `(a || b) && (!a || !b)`.  Let me know if you think one of those would be clearer.\n\nr? @GuillaumeGomez", "tree": {"sha": "3e6b0dc918b36243601e999517bca94f2dcef8c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e6b0dc918b36243601e999517bca94f2dcef8c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bfb20f392c6a51ded93e7342fd8c4b163bf8160", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bfb20f392c6a51ded93e7342fd8c4b163bf8160", "html_url": "https://github.com/rust-lang/rust/commit/2bfb20f392c6a51ded93e7342fd8c4b163bf8160", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bfb20f392c6a51ded93e7342fd8c4b163bf8160/comments", "author": {"login": "jonathandturner", "id": 111457284, "node_id": "O_kgDOBqS0BA", "avatar_url": "https://avatars.githubusercontent.com/u/111457284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathandturner", "html_url": "https://github.com/jonathandturner", "followers_url": "https://api.github.com/users/jonathandturner/followers", "following_url": "https://api.github.com/users/jonathandturner/following{/other_user}", "gists_url": "https://api.github.com/users/jonathandturner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathandturner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathandturner/subscriptions", "organizations_url": "https://api.github.com/users/jonathandturner/orgs", "repos_url": "https://api.github.com/users/jonathandturner/repos", "events_url": "https://api.github.com/users/jonathandturner/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathandturner/received_events", "type": "Organization", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45ca620383ce8f9a5de33c09096bcfddd55fd3d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/45ca620383ce8f9a5de33c09096bcfddd55fd3d1", "html_url": "https://github.com/rust-lang/rust/commit/45ca620383ce8f9a5de33c09096bcfddd55fd3d1"}, {"sha": "8ca9fa11f9a04a7ffa4cded6775336d55268e7ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ca9fa11f9a04a7ffa4cded6775336d55268e7ac", "html_url": "https://github.com/rust-lang/rust/commit/8ca9fa11f9a04a7ffa4cded6775336d55268e7ac"}], "stats": {"total": 99, "additions": 81, "deletions": 18}, "files": [{"sha": "041a6c62f2fc3654989d58badf9f2e2455d3400e", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 81, "deletions": 18, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/2bfb20f392c6a51ded93e7342fd8c4b163bf8160/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bfb20f392c6a51ded93e7342fd8c4b163bf8160/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=2bfb20f392c6a51ded93e7342fd8c4b163bf8160", "patch": "@@ -948,25 +948,55 @@ bitand_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n ///\n /// # Examples\n ///\n-/// A trivial implementation of `BitOr`. When `Foo | Foo` happens, it ends up\n-/// calling `bitor`, and therefore, `main` prints `Bitwise Or-ing!`.\n+/// In this example, the `|` operator is lifted to a trivial `Scalar` type.\n ///\n /// ```\n /// use std::ops::BitOr;\n ///\n-/// struct Foo;\n+/// #[derive(Debug, PartialEq)]\n+/// struct Scalar(bool);\n ///\n-/// impl BitOr for Foo {\n-///     type Output = Foo;\n+/// impl BitOr for Scalar {\n+///     type Output = Self;\n ///\n-///     fn bitor(self, _rhs: Foo) -> Foo {\n-///         println!(\"Bitwise Or-ing!\");\n-///         self\n+///     // rhs is the \"right-hand side\" of the expression `a | b`\n+///     fn bitor(self, rhs: Self) -> Self {\n+///         Scalar(self.0 | rhs.0)\n+///     }\n+/// }\n+///\n+/// fn main() {\n+///     assert_eq!(Scalar(true) | Scalar(true), Scalar(true));\n+///     assert_eq!(Scalar(true) | Scalar(false), Scalar(true));\n+///     assert_eq!(Scalar(false) | Scalar(true), Scalar(true));\n+///     assert_eq!(Scalar(false) | Scalar(false), Scalar(false));\n+/// }\n+/// ```\n+///\n+/// In this example, the `BitOr` trait is implemented for a `BooleanVector`\n+/// struct.\n+///\n+/// ```\n+/// use std::ops::BitOr;\n+///\n+/// #[derive(Debug, PartialEq)]\n+/// struct BooleanVector(Vec<bool>);\n+///\n+/// impl BitOr for BooleanVector {\n+///     type Output = Self;\n+///\n+///     fn bitor(self, BooleanVector(rhs): Self) -> Self {\n+///         let BooleanVector(lhs) = self;\n+///         assert_eq!(lhs.len(), rhs.len());\n+///         BooleanVector(lhs.iter().zip(rhs.iter()).map(|(x, y)| *x || *y).collect())\n ///     }\n /// }\n ///\n /// fn main() {\n-///     Foo | Foo;\n+///     let bv1 = BooleanVector(vec![true, true, false, false]);\n+///     let bv2 = BooleanVector(vec![true, false, true, false]);\n+///     let expected = BooleanVector(vec![true, true, true, false]);\n+///     assert_eq!(bv1 | bv2, expected);\n /// }\n /// ```\n #[lang = \"bitor\"]\n@@ -1001,25 +1031,58 @@ bitor_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n ///\n /// # Examples\n ///\n-/// A trivial implementation of `BitXor`. When `Foo ^ Foo` happens, it ends up\n-/// calling `bitxor`, and therefore, `main` prints `Bitwise Xor-ing!`.\n+/// In this example, the `^` operator is lifted to a trivial `Scalar` type.\n ///\n /// ```\n /// use std::ops::BitXor;\n ///\n-/// struct Foo;\n+/// #[derive(Debug, PartialEq)]\n+/// struct Scalar(bool);\n ///\n-/// impl BitXor for Foo {\n-///     type Output = Foo;\n+/// impl BitXor for Scalar {\n+///     type Output = Self;\n ///\n-///     fn bitxor(self, _rhs: Foo) -> Foo {\n-///         println!(\"Bitwise Xor-ing!\");\n-///         self\n+///     // rhs is the \"right-hand side\" of the expression `a ^ b`\n+///     fn bitxor(self, rhs: Self) -> Self {\n+///         Scalar(self.0 ^ rhs.0)\n+///     }\n+/// }\n+///\n+/// fn main() {\n+///     assert_eq!(Scalar(true) ^ Scalar(true), Scalar(false));\n+///     assert_eq!(Scalar(true) ^ Scalar(false), Scalar(true));\n+///     assert_eq!(Scalar(false) ^ Scalar(true), Scalar(true));\n+///     assert_eq!(Scalar(false) ^ Scalar(false), Scalar(false));\n+/// }\n+/// ```\n+///\n+/// In this example, the `BitXor` trait is implemented for a `BooleanVector`\n+/// struct.\n+///\n+/// ```\n+/// use std::ops::BitXor;\n+///\n+/// #[derive(Debug, PartialEq)]\n+/// struct BooleanVector(Vec<bool>);\n+///\n+/// impl BitXor for BooleanVector {\n+///     type Output = Self;\n+///\n+///     fn bitxor(self, BooleanVector(rhs): Self) -> Self {\n+///         let BooleanVector(lhs) = self;\n+///         assert_eq!(lhs.len(), rhs.len());\n+///         BooleanVector(lhs.iter()\n+///                          .zip(rhs.iter())\n+///                          .map(|(x, y)| (*x || *y) && !(*x && *y))\n+///                          .collect())\n ///     }\n /// }\n ///\n /// fn main() {\n-///     Foo ^ Foo;\n+///     let bv1 = BooleanVector(vec![true, true, false, false]);\n+///     let bv2 = BooleanVector(vec![true, false, true, false]);\n+///     let expected = BooleanVector(vec![false, true, true, false]);\n+///     assert_eq!(bv1 ^ bv2, expected);\n /// }\n /// ```\n #[lang = \"bitxor\"]"}]}