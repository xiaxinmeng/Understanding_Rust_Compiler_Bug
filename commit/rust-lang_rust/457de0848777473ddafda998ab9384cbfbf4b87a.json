{"sha": "457de0848777473ddafda998ab9384cbfbf4b87a", "node_id": "C_kwDOAAsO6NoAKDQ1N2RlMDg0ODc3NzQ3M2RkYWZkYTk5OGFiOTM4NGNiZmJmNGI4N2E", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-19T20:17:50Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-09T16:38:28Z"}, "message": "Forbid hashing HIR outside of indexing.", "tree": {"sha": "1bd81b92a97c9df730c1cbf2aed5686e3cac5ff5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bd81b92a97c9df730c1cbf2aed5686e3cac5ff5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/457de0848777473ddafda998ab9384cbfbf4b87a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/457de0848777473ddafda998ab9384cbfbf4b87a", "html_url": "https://github.com/rust-lang/rust/commit/457de0848777473ddafda998ab9384cbfbf4b87a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/457de0848777473ddafda998ab9384cbfbf4b87a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd1ace488fc328ee20397783e3046971e6f09ac5", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd1ace488fc328ee20397783e3046971e6f09ac5", "html_url": "https://github.com/rust-lang/rust/commit/cd1ace488fc328ee20397783e3046971e6f09ac5"}], "stats": {"total": 218, "additions": 86, "deletions": 132}, "files": [{"sha": "0d89ffb726435bedbb013372707ac883c2262555", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/457de0848777473ddafda998ab9384cbfbf4b87a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/457de0848777473ddafda998ab9384cbfbf4b87a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=457de0848777473ddafda998ab9384cbfbf4b87a", "patch": "@@ -3552,6 +3552,7 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_hir\",\n  \"rustc_index\",\n+ \"rustc_query_system\",\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n@@ -4333,6 +4334,7 @@ dependencies = [\n  \"rustc_index\",\n  \"rustc_metadata\",\n  \"rustc_middle\",\n+ \"rustc_query_system\",\n  \"rustc_session\",\n  \"rustc_span\",\n  \"smallvec\","}, {"sha": "7989af24d9986107290d3fa9b6ad0d75adb73a7d", "filename": "compiler/rustc_ast_lowering/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/457de0848777473ddafda998ab9384cbfbf4b87a/compiler%2Frustc_ast_lowering%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/457de0848777473ddafda998ab9384cbfbf4b87a/compiler%2Frustc_ast_lowering%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2FCargo.toml?ref=457de0848777473ddafda998ab9384cbfbf4b87a", "patch": "@@ -14,6 +14,7 @@ rustc_hir = { path = \"../rustc_hir\" }\n rustc_target = { path = \"../rustc_target\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_index = { path = \"../rustc_index\" }\n+rustc_query_system = { path = \"../rustc_query_system\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_errors = { path = \"../rustc_errors\" }\n rustc_session = { path = \"../rustc_session\" }"}, {"sha": "80b95b99b165e9985e6f4d56d82eb2a981248c06", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 5, "deletions": 40, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/457de0848777473ddafda998ab9384cbfbf4b87a/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457de0848777473ddafda998ab9384cbfbf4b87a/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=457de0848777473ddafda998ab9384cbfbf4b87a", "patch": "@@ -51,13 +51,14 @@ use rustc_hir::definitions::{DefKey, DefPathData, Definitions};\n use rustc_hir::intravisit;\n use rustc_hir::{ConstArg, GenericArg, InferKind, ParamName};\n use rustc_index::vec::{Idx, IndexVec};\n+use rustc_query_system::ich::StableHashingContext;\n use rustc_session::lint::builtin::BARE_TRAIT_OBJECTS;\n use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::utils::{FlattenNonterminals, NtToTokenstream};\n use rustc_session::Session;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::ExpnId;\n-use rustc_span::source_map::{respan, CachingSourceMapView, DesugaringKind};\n+use rustc_span::source_map::{respan, DesugaringKind};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -179,6 +180,8 @@ pub trait ResolverAstLowering {\n     /// This should only return `None` during testing.\n     fn definitions(&mut self) -> &mut Definitions;\n \n+    fn create_stable_hashing_context(&self) -> StableHashingContext<'_>;\n+\n     fn lint_buffer(&mut self) -> &mut LintBuffer;\n \n     fn next_node_id(&mut self) -> NodeId;\n@@ -201,37 +204,6 @@ pub trait ResolverAstLowering {\n     ) -> LocalDefId;\n }\n \n-struct LoweringHasher<'a> {\n-    source_map: CachingSourceMapView<'a>,\n-    resolver: &'a dyn ResolverAstLowering,\n-}\n-\n-impl<'a> rustc_span::HashStableContext for LoweringHasher<'a> {\n-    #[inline]\n-    fn hash_spans(&self) -> bool {\n-        true\n-    }\n-\n-    #[inline]\n-    fn def_span(&self, id: LocalDefId) -> Span {\n-        self.resolver.def_span(id)\n-    }\n-\n-    #[inline]\n-    fn def_path_hash(&self, def_id: DefId) -> DefPathHash {\n-        self.resolver.def_path_hash(def_id)\n-    }\n-\n-    #[inline]\n-    fn span_data_to_lines_and_cols(\n-        &mut self,\n-        span: &rustc_span::SpanData,\n-    ) -> Option<(Lrc<rustc_span::SourceFile>, usize, rustc_span::BytePos, usize, rustc_span::BytePos)>\n-    {\n-        self.source_map.span_data_to_lines_and_cols(span)\n-    }\n-}\n-\n /// Context of `impl Trait` in code, which determines whether it is allowed in an HIR subtree,\n /// and if so, what meaning it has.\n #[derive(Debug)]\n@@ -440,13 +412,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.arena.alloc(krate)\n     }\n \n-    fn create_stable_hashing_context(&self) -> LoweringHasher<'_> {\n-        LoweringHasher {\n-            source_map: CachingSourceMapView::new(self.sess.source_map()),\n-            resolver: self.resolver,\n-        }\n-    }\n-\n     fn with_hir_id_owner(\n         &mut self,\n         owner: NodeId,\n@@ -566,7 +531,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             allow_internal_unstable,\n             reason,\n             self.sess.edition(),\n-            self.create_stable_hashing_context(),\n+            self.resolver.create_stable_hashing_context(),\n         )\n     }\n "}, {"sha": "80e48a4f74b4f47274e837b5e1daffa0372d18c9", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/457de0848777473ddafda998ab9384cbfbf4b87a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457de0848777473ddafda998ab9384cbfbf4b87a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=457de0848777473ddafda998ab9384cbfbf4b87a", "patch": "@@ -51,18 +51,21 @@ fn insert_vec_map<K: Idx, V: Clone>(map: &mut IndexVec<K, Option<V>>, k: K, v: V\n     map[k] = Some(v);\n }\n \n-fn hash_body(\n-    hcx: &mut StableHashingContext<'_>,\n+fn hash_body<'s, 'hir: 's>(\n+    hcx: &mut StableHashingContext<'s>,\n     item_like: impl for<'a> HashStable<StableHashingContext<'a>>,\n+    hash_bodies: bool,\n+    owner: LocalDefId,\n+    bodies: &'hir IndexVec<ItemLocalId, Option<&'hir Body<'hir>>>,\n ) -> Fingerprint {\n     let mut stable_hasher = StableHasher::new();\n-    hcx.while_hashing_hir_bodies(true, |hcx| {\n-        item_like.hash_stable(hcx, &mut stable_hasher);\n+    hcx.with_hir_bodies(hash_bodies, owner, bodies, |hcx| {\n+        item_like.hash_stable(hcx, &mut stable_hasher)\n     });\n     stable_hasher.finish()\n }\n \n-impl<'a, 'hir> NodeCollector<'a, 'hir> {\n+impl<'a, 'hir: 'a> NodeCollector<'a, 'hir> {\n     pub(super) fn root(\n         sess: &'a Session,\n         arena: &'hir Arena<'hir>,\n@@ -91,15 +94,16 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n     }\n \n     fn insert_owner(&mut self, owner: LocalDefId, node: OwnerNode<'hir>) {\n-        let hash = hash_body(&mut self.hcx, node);\n-\n         let mut nodes = IndexVec::new();\n         nodes.push(Some(ParentedNode { parent: ItemLocalId::new(0), node: node.into() }));\n \n         let bodies = &self.krate.owners[owner].as_ref().unwrap().bodies;\n \n+        let hash = hash_body(&mut self.hcx, node, true, owner, bodies);\n+        let node_hash = hash_body(&mut self.hcx, node, false, owner, bodies);\n+\n         debug_assert!(self.map[owner].is_none());\n-        self.map[owner] = Some(self.arena.alloc(OwnerNodes { hash, nodes, bodies }));\n+        self.map[owner] = Some(self.arena.alloc(OwnerNodes { hash, node_hash, nodes, bodies }));\n     }\n \n     fn insert(&mut self, span: Span, hir_id: HirId, node: Node<'hir>) {\n@@ -176,7 +180,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n     }\n }\n \n-impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n+impl<'a, 'hir: 'a> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     type Map = Map<'hir>;\n \n     /// Because we want to track parent items and so forth, enable"}, {"sha": "8c11fd8a280fc5de8088a08f411d685766569259", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/457de0848777473ddafda998ab9384cbfbf4b87a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457de0848777473ddafda998ab9384cbfbf4b87a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=457de0848777473ddafda998ab9384cbfbf4b87a", "patch": "@@ -874,21 +874,21 @@ impl<'hir> Map<'hir> {\n \n     pub fn expect_item(&self, id: HirId) -> &'hir Item<'hir> {\n         match self.tcx.hir_owner(id.expect_owner()) {\n-            Some(Owner { node: OwnerNode::Item(item) }) => item,\n+            Some(Owner { node: OwnerNode::Item(item), .. }) => item,\n             _ => bug!(\"expected item, found {}\", self.node_to_string(id)),\n         }\n     }\n \n     pub fn expect_impl_item(&self, id: HirId) -> &'hir ImplItem<'hir> {\n         match self.tcx.hir_owner(id.expect_owner()) {\n-            Some(Owner { node: OwnerNode::ImplItem(item) }) => item,\n+            Some(Owner { node: OwnerNode::ImplItem(item), .. }) => item,\n             _ => bug!(\"expected impl item, found {}\", self.node_to_string(id)),\n         }\n     }\n \n     pub fn expect_trait_item(&self, id: HirId) -> &'hir TraitItem<'hir> {\n         match self.tcx.hir_owner(id.expect_owner()) {\n-            Some(Owner { node: OwnerNode::TraitItem(item) }) => item,\n+            Some(Owner { node: OwnerNode::TraitItem(item), .. }) => item,\n             _ => bug!(\"expected trait item, found {}\", self.node_to_string(id)),\n         }\n     }\n@@ -902,7 +902,7 @@ impl<'hir> Map<'hir> {\n \n     pub fn expect_foreign_item(&self, id: HirId) -> &'hir ForeignItem<'hir> {\n         match self.tcx.hir_owner(id.expect_owner()) {\n-            Some(Owner { node: OwnerNode::ForeignItem(item) }) => item,\n+            Some(Owner { node: OwnerNode::ForeignItem(item), .. }) => item,\n             _ => bug!(\"expected foreign item, found {}\", self.node_to_string(id)),\n         }\n     }"}, {"sha": "6d24190eefb5c06c10f6d89a794c0c365aa3ff29", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/457de0848777473ddafda998ab9384cbfbf4b87a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457de0848777473ddafda998ab9384cbfbf4b87a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=457de0848777473ddafda998ab9384cbfbf4b87a", "patch": "@@ -39,12 +39,14 @@ pub struct IndexedHir<'hir> {\n #[derive(Copy, Clone, Debug)]\n pub struct Owner<'tcx> {\n     node: OwnerNode<'tcx>,\n+    node_hash: Fingerprint,\n }\n \n impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for Owner<'tcx> {\n+    #[inline]\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        let Owner { node } = self;\n-        hcx.while_hashing_hir_bodies(false, |hcx| node.hash_stable(hcx, hasher));\n+        let Owner { node: _, node_hash } = self;\n+        node_hash.hash_stable(hcx, hasher)\n     }\n }\n \n@@ -61,6 +63,8 @@ pub struct ParentedNode<'tcx> {\n pub struct OwnerNodes<'tcx> {\n     /// Pre-computed hash of the full HIR.\n     hash: Fingerprint,\n+    /// Pre-computed hash of the top node.\n+    node_hash: Fingerprint,\n     /// Full HIR for the current owner.\n     // The zeroth node's parent is trash, but is never accessed.\n     nodes: IndexVec<ItemLocalId, Option<ParentedNode<'tcx>>>,\n@@ -69,10 +73,11 @@ pub struct OwnerNodes<'tcx> {\n }\n \n impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for OwnerNodes<'tcx> {\n+    #[inline]\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         // We ignore the `nodes` and `bodies` fields since these refer to information included in\n         // `hash` which is hashed in the collector and used for the crate hash.\n-        let OwnerNodes { hash, nodes: _, bodies: _ } = *self;\n+        let OwnerNodes { hash, node_hash: _, nodes: _, bodies: _ } = *self;\n         hash.hash_stable(hcx, hasher);\n     }\n }\n@@ -130,7 +135,7 @@ pub fn provide(providers: &mut Providers) {\n         let owner = tcx.index_hir(()).map[id].as_ref()?;\n         let node = owner.nodes[ItemLocalId::new(0)].as_ref().unwrap().node;\n         let node = node.as_owner().unwrap(); // Indexing must ensure it is an OwnerNode.\n-        Some(Owner { node })\n+        Some(Owner { node, node_hash: owner.node_hash })\n     };\n     providers.hir_owner_nodes = |tcx, id| tcx.index_hir(()).map[id].as_deref();\n     providers.hir_owner_parent = |tcx, id| {"}, {"sha": "5dea574c48417bc77c7ebff0a76a3d259a09f854", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/457de0848777473ddafda998ab9384cbfbf4b87a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457de0848777473ddafda998ab9384cbfbf4b87a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=457de0848777473ddafda998ab9384cbfbf4b87a", "patch": "@@ -1342,20 +1342,15 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline(always)]\n     pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {\n-        let krate = self.gcx.untracked_crate;\n         let resolutions = &self.gcx.untracked_resolutions;\n-\n-        StableHashingContext::new(self.sess, krate, &resolutions.definitions, &*resolutions.cstore)\n+        StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)\n     }\n \n     #[inline(always)]\n     pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {\n-        let krate = self.gcx.untracked_crate;\n         let resolutions = &self.gcx.untracked_resolutions;\n-\n         StableHashingContext::ignore_spans(\n             self.sess,\n-            krate,\n             &resolutions.definitions,\n             &*resolutions.cstore,\n         )"}, {"sha": "cfef2073373cc93c71bdbc91ec22735361ad323d", "filename": "compiler/rustc_query_system/src/ich/hcx.rs", "status": "modified", "additions": 36, "deletions": 28, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/457de0848777473ddafda998ab9384cbfbf4b87a/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457de0848777473ddafda998ab9384cbfbf4b87a/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs?ref=457de0848777473ddafda998ab9384cbfbf4b87a", "patch": "@@ -6,6 +6,7 @@ use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::definitions::{DefPathHash, Definitions};\n+use rustc_index::vec::IndexVec;\n use rustc_session::cstore::CrateStore;\n use rustc_session::Session;\n use rustc_span::source_map::SourceMap;\n@@ -27,7 +28,6 @@ pub struct StableHashingContext<'a> {\n     cstore: &'a dyn CrateStore,\n     pub(super) body_resolver: BodyResolver<'a>,\n     hash_spans: bool,\n-    hash_bodies: bool,\n     pub(super) node_id_hashing_mode: NodeIdHashingMode,\n \n     // Very often, we are hashing something that does not need the\n@@ -46,24 +46,19 @@ pub enum NodeIdHashingMode {\n /// We could also just store a plain reference to the `hir::Crate` but we want\n /// to avoid that the crate is used to get untracked access to all of the HIR.\n #[derive(Clone, Copy)]\n-pub(super) struct BodyResolver<'tcx>(&'tcx hir::Crate<'tcx>);\n-\n-impl<'tcx> BodyResolver<'tcx> {\n-    /// Returns a reference to the `hir::Body` with the given `BodyId`.\n-    /// **Does not do any tracking**; use carefully.\n-    pub(super) fn body(self, id: hir::BodyId) -> &'tcx hir::Body<'tcx> {\n-        self.0.body(id)\n-    }\n+pub(super) enum BodyResolver<'tcx> {\n+    Forbidden,\n+    Traverse {\n+        hash_bodies: bool,\n+        owner: LocalDefId,\n+        bodies: &'tcx IndexVec<hir::ItemLocalId, Option<&'tcx hir::Body<'tcx>>>,\n+    },\n }\n \n impl<'a> StableHashingContext<'a> {\n-    /// The `krate` here is only used for mapping `BodyId`s to `Body`s.\n-    /// Don't use it for anything else or you'll run the risk of\n-    /// leaking data out of the tracking system.\n     #[inline]\n     fn new_with_or_without_spans(\n         sess: &'a Session,\n-        krate: &'a hir::Crate<'a>,\n         definitions: &'a Definitions,\n         cstore: &'a dyn CrateStore,\n         always_ignore_spans: bool,\n@@ -72,27 +67,24 @@ impl<'a> StableHashingContext<'a> {\n             !always_ignore_spans && !sess.opts.debugging_opts.incremental_ignore_spans;\n \n         StableHashingContext {\n-            body_resolver: BodyResolver(krate),\n+            body_resolver: BodyResolver::Forbidden,\n             definitions,\n             cstore,\n             caching_source_map: None,\n             raw_source_map: sess.source_map(),\n             hash_spans: hash_spans_initial,\n-            hash_bodies: true,\n             node_id_hashing_mode: NodeIdHashingMode::HashDefPath,\n         }\n     }\n \n     #[inline]\n     pub fn new(\n         sess: &'a Session,\n-        krate: &'a hir::Crate<'a>,\n         definitions: &'a Definitions,\n         cstore: &'a dyn CrateStore,\n     ) -> Self {\n         Self::new_with_or_without_spans(\n             sess,\n-            krate,\n             definitions,\n             cstore,\n             /*always_ignore_spans=*/ false,\n@@ -102,20 +94,41 @@ impl<'a> StableHashingContext<'a> {\n     #[inline]\n     pub fn ignore_spans(\n         sess: &'a Session,\n-        krate: &'a hir::Crate<'a>,\n         definitions: &'a Definitions,\n         cstore: &'a dyn CrateStore,\n     ) -> Self {\n         let always_ignore_spans = true;\n-        Self::new_with_or_without_spans(sess, krate, definitions, cstore, always_ignore_spans)\n+        Self::new_with_or_without_spans(sess, definitions, cstore, always_ignore_spans)\n     }\n \n+    /// Allow hashing\n     #[inline]\n-    pub fn while_hashing_hir_bodies<F: FnOnce(&mut Self)>(&mut self, hash_bodies: bool, f: F) {\n-        let prev_hash_bodies = self.hash_bodies;\n-        self.hash_bodies = hash_bodies;\n+    pub fn while_hashing_hir_bodies(&mut self, hb: bool, f: impl FnOnce(&mut Self)) {\n+        let prev = match &mut self.body_resolver {\n+            BodyResolver::Forbidden => panic!(\"Hashing HIR bodies is forbidden.\"),\n+            BodyResolver::Traverse { ref mut hash_bodies, .. } => {\n+                std::mem::replace(hash_bodies, hb)\n+            }\n+        };\n         f(self);\n-        self.hash_bodies = prev_hash_bodies;\n+        match &mut self.body_resolver {\n+            BodyResolver::Forbidden => unreachable!(),\n+            BodyResolver::Traverse { ref mut hash_bodies, .. } => *hash_bodies = prev,\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn with_hir_bodies(\n+        &mut self,\n+        hash_bodies: bool,\n+        owner: LocalDefId,\n+        bodies: &'a IndexVec<hir::ItemLocalId, Option<&'a hir::Body<'a>>>,\n+        f: impl FnOnce(&mut Self),\n+    ) {\n+        let prev = self.body_resolver;\n+        self.body_resolver = BodyResolver::Traverse { hash_bodies, owner, bodies };\n+        f(self);\n+        self.body_resolver = prev;\n     }\n \n     #[inline]\n@@ -152,11 +165,6 @@ impl<'a> StableHashingContext<'a> {\n         self.definitions.def_path_hash(def_id)\n     }\n \n-    #[inline]\n-    pub fn hash_bodies(&self) -> bool {\n-        self.hash_bodies\n-    }\n-\n     #[inline]\n     pub fn source_map(&mut self) -> &mut CachingSourceMapView<'a> {\n         match self.caching_source_map {"}, {"sha": "dc208b36f938e8aeb77febd2bc5cb77814597aed", "filename": "compiler/rustc_query_system/src/ich/impls_hir.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/457de0848777473ddafda998ab9384cbfbf4b87a/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457de0848777473ddafda998ab9384cbfbf4b87a/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fimpls_hir.rs?ref=457de0848777473ddafda998ab9384cbfbf4b87a", "patch": "@@ -1,6 +1,7 @@\n //! This module contains `HashStable` implementations for various HIR data\n //! types in no particular order.\n \n+use crate::ich::hcx::BodyResolver;\n use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n@@ -29,8 +30,13 @@ impl<'ctx> rustc_hir::HashStableContext for StableHashingContext<'ctx> {\n     #[inline]\n     fn hash_body_id(&mut self, id: hir::BodyId, hasher: &mut StableHasher) {\n         let hcx = self;\n-        if hcx.hash_bodies() {\n-            hcx.body_resolver.body(id).hash_stable(hcx, hasher);\n+        match hcx.body_resolver {\n+            BodyResolver::Forbidden => panic!(\"Hashing HIR bodies is forbidden.\"),\n+            BodyResolver::Traverse { hash_bodies: false, .. } => {}\n+            BodyResolver::Traverse { hash_bodies: true, owner, bodies } => {\n+                assert_eq!(id.hir_id.owner, owner);\n+                bodies[id.hir_id.local_id].unwrap().hash_stable(hcx, hasher);\n+            }\n         }\n     }\n "}, {"sha": "bd27c16c732a9b11c74d7751b6d80a3bf6f0713c", "filename": "compiler/rustc_resolve/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/457de0848777473ddafda998ab9384cbfbf4b87a/compiler%2Frustc_resolve%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/457de0848777473ddafda998ab9384cbfbf4b87a/compiler%2Frustc_resolve%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2FCargo.toml?ref=457de0848777473ddafda998ab9384cbfbf4b87a", "patch": "@@ -23,6 +23,7 @@ rustc_feature = { path = \"../rustc_feature\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_metadata = { path = \"../rustc_metadata\" }\n+rustc_query_system = { path = \"../rustc_query_system\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_span = { path = \"../rustc_span\" }\n smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "f08878ea9255e34f43f75f21733cd71ad42dcf03", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 6, "deletions": 39, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/457de0848777473ddafda998ab9384cbfbf4b87a/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457de0848777473ddafda998ab9384cbfbf4b87a/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=457de0848777473ddafda998ab9384cbfbf4b87a", "patch": "@@ -54,13 +54,14 @@ use rustc_middle::hir::exports::ExportMap;\n use rustc_middle::span_bug;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, DefIdTree, MainDefinition, ResolverOutputs};\n+use rustc_query_system::ich::StableHashingContext;\n use rustc_session::cstore::{CrateStore, MetadataLoaderDyn};\n use rustc_session::lint;\n use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::Session;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::{ExpnId, ExpnKind, LocalExpnId, MacroKind, SyntaxContext, Transparency};\n-use rustc_span::source_map::{CachingSourceMapView, Spanned};\n+use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -1177,6 +1178,10 @@ impl ResolverAstLowering for Resolver<'_> {\n         &mut self.definitions\n     }\n \n+    fn create_stable_hashing_context(&self) -> StableHashingContext<'_> {\n+        StableHashingContext::new(self.session, &self.definitions, self.crate_loader.cstore())\n+    }\n+\n     fn lint_buffer(&mut self) -> &mut LintBuffer {\n         &mut self.lint_buffer\n     }\n@@ -1245,37 +1250,6 @@ impl ResolverAstLowering for Resolver<'_> {\n     }\n }\n \n-struct ExpandHasher<'a, 'b> {\n-    source_map: CachingSourceMapView<'a>,\n-    resolver: &'a Resolver<'b>,\n-}\n-\n-impl<'a, 'b> rustc_span::HashStableContext for ExpandHasher<'a, 'b> {\n-    #[inline]\n-    fn hash_spans(&self) -> bool {\n-        true\n-    }\n-\n-    #[inline]\n-    fn def_span(&self, id: LocalDefId) -> Span {\n-        self.resolver.def_span(id)\n-    }\n-\n-    #[inline]\n-    fn def_path_hash(&self, def_id: DefId) -> DefPathHash {\n-        self.resolver.def_path_hash(def_id)\n-    }\n-\n-    #[inline]\n-    fn span_data_to_lines_and_cols(\n-        &mut self,\n-        span: &rustc_span::SpanData,\n-    ) -> Option<(Lrc<rustc_span::SourceFile>, usize, rustc_span::BytePos, usize, rustc_span::BytePos)>\n-    {\n-        self.source_map.span_data_to_lines_and_cols(span)\n-    }\n-}\n-\n impl<'a> Resolver<'a> {\n     pub fn new(\n         session: &'a Session,\n@@ -1456,13 +1430,6 @@ impl<'a> Resolver<'a> {\n         self.arenas.new_module(parent, kind, expn_id, span, no_implicit_prelude, module_map)\n     }\n \n-    fn create_stable_hashing_context(&self) -> ExpandHasher<'_, 'a> {\n-        ExpandHasher {\n-            source_map: CachingSourceMapView::new(self.session.source_map()),\n-            resolver: self,\n-        }\n-    }\n-\n     pub fn next_node_id(&mut self) -> NodeId {\n         let next = self\n             .next_node_id"}]}