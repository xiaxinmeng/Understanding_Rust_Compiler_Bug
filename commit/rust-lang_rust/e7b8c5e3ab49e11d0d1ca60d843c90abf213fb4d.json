{"sha": "e7b8c5e3ab49e11d0d1ca60d843c90abf213fb4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3YjhjNWUzYWI0OWUxMWQwZDFjYTYwZDg0M2M5MGFiZjIxM2ZiNGQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-04-25T08:54:00Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-04-25T08:54:00Z"}, "message": "save-analysis: implement JSON dumps", "tree": {"sha": "21e8d7536f1e616b0a48a49eeef355e65f088999", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21e8d7536f1e616b0a48a49eeef355e65f088999"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7b8c5e3ab49e11d0d1ca60d843c90abf213fb4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7b8c5e3ab49e11d0d1ca60d843c90abf213fb4d", "html_url": "https://github.com/rust-lang/rust/commit/e7b8c5e3ab49e11d0d1ca60d843c90abf213fb4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7b8c5e3ab49e11d0d1ca60d843c90abf213fb4d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40963c47f833f1c9a44861a5f7eb762c54257254", "url": "https://api.github.com/repos/rust-lang/rust/commits/40963c47f833f1c9a44861a5f7eb762c54257254", "html_url": "https://github.com/rust-lang/rust/commit/40963c47f833f1c9a44861a5f7eb762c54257254"}], "stats": {"total": 213, "additions": 144, "deletions": 69}, "files": [{"sha": "fec9e985e04cdc4d9c49340bb1418ba94b9062d9", "filename": "mk/crates.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7b8c5e3ab49e11d0d1ca60d843c90abf213fb4d/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e7b8c5e3ab49e11d0d1ca60d843c90abf213fb4d/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=e7b8c5e3ab49e11d0d1ca60d843c90abf213fb4d", "patch": "@@ -120,7 +120,7 @@ DEPS_rustc_trans := arena flate getopts graphviz libc rustc rustc_back rustc_mir\n                     log syntax serialize rustc_llvm rustc_platform_intrinsics \\\n                     rustc_const_math rustc_const_eval rustc_incremental\n DEPS_rustc_incremental := rbml rustc serialize rustc_data_structures\n-DEPS_rustc_save_analysis := rustc log syntax\n+DEPS_rustc_save_analysis := rustc log syntax serialize\n DEPS_rustc_typeck := rustc syntax rustc_platform_intrinsics rustc_const_math \\\n                      rustc_const_eval\n "}, {"sha": "76f5569ecb6a22d278133fcfd6f0ea2d2bf9987e", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7b8c5e3ab49e11d0d1ca60d843c90abf213fb4d/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e7b8c5e3ab49e11d0d1ca60d843c90abf213fb4d/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=e7b8c5e3ab49e11d0d1ca60d843c90abf213fb4d", "patch": "@@ -12,3 +12,4 @@ crate-type = [\"dylib\"]\n log = { path = \"../liblog\" }\n rustc = { path = \"../librustc\" }\n syntax = { path = \"../libsyntax\" }\n+serialize = { path = \"../librustc_serialize\" }"}, {"sha": "4d6512db861e5063aa0d53992f33f45d1459e11d", "filename": "src/librustc_save_analysis/csv_dumper.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e7b8c5e3ab49e11d0d1ca60d843c90abf213fb4d/src%2Flibrustc_save_analysis%2Fcsv_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7b8c5e3ab49e11d0d1ca60d843c90abf213fb4d/src%2Flibrustc_save_analysis%2Fcsv_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fcsv_dumper.rs?ref=e7b8c5e3ab49e11d0d1ca60d843c90abf213fb4d", "patch": "@@ -42,24 +42,20 @@ impl<'a, 'b, W: Write> CsvDumper<'a, 'b, W> {\n }\n \n impl<'a, 'b, W: Write + 'b> Dump for CsvDumper<'a, 'b, W> {\n-    fn crate_prelude(&mut self, span: Span, data: CratePreludeData) {\n-        let crate_root = data.crate_root.unwrap_or(\"<no source>\".to_owned());\n-\n+    fn crate_prelude(&mut self, data: CratePreludeData) {\n         let values = make_values_str(&[\n             (\"name\", &data.crate_name),\n-            (\"crate_root\", &crate_root)\n+            (\"crate_root\", &data.crate_root)\n         ]);\n \n-        self.record(\"crate\", span, values);\n+        self.record(\"crate\", data.span, values);\n \n         for c in data.external_crates {\n             let num = c.num.to_string();\n-            let lo_loc = self.span.sess.codemap().lookup_char_pos(span.lo);\n-            let file_name = SpanUtils::make_path_string(&lo_loc.file.name);\n             let values = make_values_str(&[\n                 (\"name\", &c.name),\n                 (\"crate\", &num),\n-                (\"file_name\", &file_name)\n+                (\"file_name\", &c.file_name)\n             ]);\n \n             self.record_raw(&format!(\"external_crate{}\\n\", values));"}, {"sha": "2fbeac8be835941be06804483a12900d538e5323", "filename": "src/librustc_save_analysis/data.rs", "status": "modified", "additions": 33, "deletions": 30, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/e7b8c5e3ab49e11d0d1ca60d843c90abf213fb4d/src%2Flibrustc_save_analysis%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7b8c5e3ab49e11d0d1ca60d843c90abf213fb4d/src%2Flibrustc_save_analysis%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdata.rs?ref=e7b8c5e3ab49e11d0d1ca60d843c90abf213fb4d", "patch": "@@ -23,11 +23,12 @@ use syntax::codemap::Span;\n pub struct CrateData {\n     pub name: String,\n     pub number: u32,\n+    pub span: Span,\n }\n \n /// Data for any entity in the Rust language. The actual data contained varies\n /// with the kind of entity being queried. See the nested structs for details.\n-#[derive(Debug)]\n+#[derive(Debug, RustcEncodable)]\n pub enum Data {\n     /// Data for Enums.\n     EnumData(EnumData),\n@@ -79,22 +80,24 @@ pub enum Data {\n }\n \n /// Data for the prelude of a crate.\n-#[derive(Debug)]\n+#[derive(Debug, RustcEncodable)]\n pub struct CratePreludeData {\n     pub crate_name: String,\n-    pub crate_root: Option<String>,\n-    pub external_crates: Vec<ExternalCrateData>\n+    pub crate_root: String,\n+    pub external_crates: Vec<ExternalCrateData>,\n+    pub span: Span,\n }\n \n /// Data for external crates in the prelude of a crate.\n-#[derive(Debug)]\n+#[derive(Debug, RustcEncodable)]\n pub struct ExternalCrateData {\n     pub name: String,\n-    pub num: CrateNum\n+    pub num: CrateNum,\n+    pub file_name: String,\n }\n \n /// Data for enum declarations.\n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, RustcEncodable)]\n pub struct EnumData {\n     pub id: NodeId,\n     pub value: String,\n@@ -104,7 +107,7 @@ pub struct EnumData {\n }\n \n /// Data for extern crates.\n-#[derive(Debug)]\n+#[derive(Debug, RustcEncodable)]\n pub struct ExternCrateData {\n     pub id: NodeId,\n     pub name: String,\n@@ -115,15 +118,15 @@ pub struct ExternCrateData {\n }\n \n /// Data about a function call.\n-#[derive(Debug)]\n+#[derive(Debug, RustcEncodable)]\n pub struct FunctionCallData {\n     pub span: Span,\n     pub scope: NodeId,\n     pub ref_id: DefId,\n }\n \n /// Data for all kinds of functions and methods.\n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, RustcEncodable)]\n pub struct FunctionData {\n     pub id: NodeId,\n     pub name: String,\n@@ -134,14 +137,14 @@ pub struct FunctionData {\n }\n \n /// Data about a function call.\n-#[derive(Debug)]\n+#[derive(Debug, RustcEncodable)]\n pub struct FunctionRefData {\n     pub span: Span,\n     pub scope: NodeId,\n     pub ref_id: DefId,\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, RustcEncodable)]\n pub struct ImplData {\n     pub id: NodeId,\n     pub span: Span,\n@@ -150,7 +153,7 @@ pub struct ImplData {\n     pub self_ref: Option<DefId>,\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, RustcEncodable)]\n // FIXME: this struct should not exist. However, removing it requires heavy\n // refactoring of dump_visitor.rs. See PR 31838 for more info.\n pub struct ImplData2 {\n@@ -164,23 +167,23 @@ pub struct ImplData2 {\n     pub self_ref: Option<TypeRefData>,\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, RustcEncodable)]\n pub struct InheritanceData {\n     pub span: Span,\n     pub base_id: DefId,\n     pub deriv_id: NodeId\n }\n \n /// Data about a macro declaration.\n-#[derive(Debug)]\n+#[derive(Debug, RustcEncodable)]\n pub struct MacroData {\n     pub span: Span,\n     pub name: String,\n     pub qualname: String,\n }\n \n /// Data about a macro use.\n-#[derive(Debug)]\n+#[derive(Debug, RustcEncodable)]\n pub struct MacroUseData {\n     pub span: Span,\n     pub name: String,\n@@ -193,7 +196,7 @@ pub struct MacroUseData {\n }\n \n /// Data about a method call.\n-#[derive(Debug)]\n+#[derive(Debug, RustcEncodable)]\n pub struct MethodCallData {\n     pub span: Span,\n     pub scope: NodeId,\n@@ -202,7 +205,7 @@ pub struct MethodCallData {\n }\n \n /// Data for method declarations (methods with a body are treated as functions).\n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, RustcEncodable)]\n pub struct MethodData {\n     pub id: NodeId,\n     pub qualname: String,\n@@ -211,7 +214,7 @@ pub struct MethodData {\n }\n \n /// Data for modules.\n-#[derive(Debug)]\n+#[derive(Debug, RustcEncodable)]\n pub struct ModData {\n     pub id: NodeId,\n     pub name: String,\n@@ -222,15 +225,15 @@ pub struct ModData {\n }\n \n /// Data for a reference to a module.\n-#[derive(Debug)]\n+#[derive(Debug, RustcEncodable)]\n pub struct ModRefData {\n     pub span: Span,\n     pub scope: NodeId,\n     pub ref_id: Option<DefId>,\n     pub qualname: String\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, RustcEncodable)]\n pub struct StructData {\n     pub span: Span,\n     pub id: NodeId,\n@@ -240,7 +243,7 @@ pub struct StructData {\n     pub value: String\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, RustcEncodable)]\n pub struct StructVariantData {\n     pub span: Span,\n     pub id: NodeId,\n@@ -250,7 +253,7 @@ pub struct StructVariantData {\n     pub scope: NodeId\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, RustcEncodable)]\n pub struct TraitData {\n     pub span: Span,\n     pub id: NodeId,\n@@ -259,7 +262,7 @@ pub struct TraitData {\n     pub value: String\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, RustcEncodable)]\n pub struct TupleVariantData {\n     pub span: Span,\n     pub id: NodeId,\n@@ -271,7 +274,7 @@ pub struct TupleVariantData {\n }\n \n /// Data for a typedef.\n-#[derive(Debug)]\n+#[derive(Debug, RustcEncodable)]\n pub struct TypedefData {\n     pub id: NodeId,\n     pub span: Span,\n@@ -280,15 +283,15 @@ pub struct TypedefData {\n }\n \n /// Data for a reference to a type or trait.\n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, RustcEncodable)]\n pub struct TypeRefData {\n     pub span: Span,\n     pub scope: NodeId,\n     pub ref_id: Option<DefId>,\n     pub qualname: String,\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, RustcEncodable)]\n pub struct UseData {\n     pub id: NodeId,\n     pub span: Span,\n@@ -297,7 +300,7 @@ pub struct UseData {\n     pub scope: NodeId\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, RustcEncodable)]\n pub struct UseGlobData {\n     pub id: NodeId,\n     pub span: Span,\n@@ -306,7 +309,7 @@ pub struct UseGlobData {\n }\n \n /// Data for local and global variables (consts and statics).\n-#[derive(Debug)]\n+#[derive(Debug, RustcEncodable)]\n pub struct VariableData {\n     pub id: NodeId,\n     pub name: String,\n@@ -319,7 +322,7 @@ pub struct VariableData {\n \n /// Data for the use of some item (e.g., the use of a local variable, which\n /// will refer to that variables declaration (by ref_id)).\n-#[derive(Debug)]\n+#[derive(Debug, RustcEncodable)]\n pub struct VariableRefData {\n     pub name: String,\n     pub span: Span,"}, {"sha": "feb428b07462e484ef314756041408a3f298bdf5", "filename": "src/librustc_save_analysis/dump.rs", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e7b8c5e3ab49e11d0d1ca60d843c90abf213fb4d/src%2Flibrustc_save_analysis%2Fdump.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7b8c5e3ab49e11d0d1ca60d843c90abf213fb4d/src%2Flibrustc_save_analysis%2Fdump.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump.rs?ref=e7b8c5e3ab49e11d0d1ca60d843c90abf213fb4d", "patch": "@@ -8,33 +8,31 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use syntax::codemap::Span;\n-\n use super::data::*;\n \n pub trait Dump {\n-    fn crate_prelude(&mut self, _: Span, _: CratePreludeData) {}\n-    fn enum_data(&mut self, EnumData) {}\n-    fn extern_crate(&mut self, ExternCrateData) {}\n-    fn impl_data(&mut self, ImplData) {}\n-    fn inheritance(&mut self, InheritanceData) {}\n-    fn function(&mut self, FunctionData) {}\n-    fn function_ref(&mut self, FunctionRefData) {}\n-    fn function_call(&mut self, FunctionCallData) {}\n-    fn method(&mut self, MethodData) {}\n-    fn method_call(&mut self, MethodCallData) {}\n-    fn macro_data(&mut self, MacroData) {}\n-    fn macro_use(&mut self, MacroUseData) {}\n-    fn mod_data(&mut self, ModData) {}\n-    fn mod_ref(&mut self, ModRefData) {}\n-    fn struct_data(&mut self, StructData) {}\n-    fn struct_variant(&mut self, StructVariantData) {}\n-    fn trait_data(&mut self, TraitData) {}\n-    fn tuple_variant(&mut self, TupleVariantData) {}\n-    fn type_ref(&mut self, TypeRefData) {}\n-    fn typedef(&mut self, TypedefData) {}\n-    fn use_data(&mut self, UseData) {}\n-    fn use_glob(&mut self, UseGlobData) {}\n-    fn variable(&mut self, VariableData) {}\n-    fn variable_ref(&mut self, VariableRefData) {}\n+    fn crate_prelude(&mut self, CratePreludeData);\n+    fn enum_data(&mut self, EnumData);\n+    fn extern_crate(&mut self, ExternCrateData);\n+    fn impl_data(&mut self, ImplData);\n+    fn inheritance(&mut self, InheritanceData);\n+    fn function(&mut self, FunctionData);\n+    fn function_ref(&mut self, FunctionRefData);\n+    fn function_call(&mut self, FunctionCallData);\n+    fn method(&mut self, MethodData);\n+    fn method_call(&mut self, MethodCallData);\n+    fn macro_data(&mut self, MacroData);\n+    fn macro_use(&mut self, MacroUseData);\n+    fn mod_data(&mut self, ModData);\n+    fn mod_ref(&mut self, ModRefData);\n+    fn struct_data(&mut self, StructData);\n+    fn struct_variant(&mut self, StructVariantData);\n+    fn trait_data(&mut self, TraitData);\n+    fn tuple_variant(&mut self, TupleVariantData);\n+    fn type_ref(&mut self, TypeRefData);\n+    fn typedef(&mut self, TypedefData);\n+    fn use_data(&mut self, UseData);\n+    fn use_glob(&mut self, UseGlobData);\n+    fn variable(&mut self, VariableData);\n+    fn variable_ref(&mut self, VariableRefData);\n }"}, {"sha": "a4efb68e63c25f78ca9c80934c223fc5a60d4c83", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e7b8c5e3ab49e11d0d1ca60d843c90abf213fb4d/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7b8c5e3ab49e11d0d1ca60d843c90abf213fb4d/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=e7b8c5e3ab49e11d0d1ca60d843c90abf213fb4d", "patch": "@@ -119,20 +119,23 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n \n         // Info about all the external crates referenced from this crate.\n         let external_crates = self.save_ctxt.get_external_crates().into_iter().map(|c| {\n+            let lo_loc = self.span.sess.codemap().lookup_char_pos(c.span.lo);\n             ExternalCrateData {\n                 name: c.name,\n-                num: c.number\n+                num: c.number,\n+                file_name: SpanUtils::make_path_string(&lo_loc.file.name),\n             }\n         }).collect();\n \n         // The current crate.\n         let data = CratePreludeData {\n             crate_name: name.into(),\n-            crate_root: crate_root,\n-            external_crates: external_crates\n+            crate_root: crate_root.unwrap_or(\"<no source>\".to_owned()),\n+            external_crates: external_crates,\n+            span: krate.span,\n         };\n \n-        self.dumper.crate_prelude(krate.span, data);\n+        self.dumper.crate_prelude(data);\n     }\n \n     // Return all non-empty prefixes of a path."}, {"sha": "8a631ad8b32c62d086066157b9951532085cc6fb", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/e7b8c5e3ab49e11d0d1ca60d843c90abf213fb4d/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7b8c5e3ab49e11d0d1ca60d843c90abf213fb4d/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=e7b8c5e3ab49e11d0d1ca60d843c90abf213fb4d", "patch": "@@ -0,0 +1,63 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::io::Write;\n+\n+use rustc_serialize::json::as_json;\n+\n+use super::data::*;\n+use super::dump::Dump;\n+\n+pub struct JsonDumper<'b, W: 'b> {\n+    output: &'b mut W,\n+}\n+\n+impl<'b, W: Write> JsonDumper<'b, W> {\n+    pub fn new(writer: &'b mut W) -> JsonDumper<'b, W> {\n+        JsonDumper { output: writer }\n+    }\n+}\n+\n+macro_rules! impl_fn {\n+    ($fn_name: ident, $data_type: ident) => {\n+        fn $fn_name(&mut self, data: $data_type) {\n+            if let Err(_) = write!(self.output, \"{}\", as_json(&data)) {\n+                error!(\"Error writing output '{}'\", as_json(&data));\n+            }\n+        }        \n+    }\n+}\n+\n+impl<'b, W: Write + 'b> Dump for JsonDumper<'b, W> {\n+    impl_fn!(crate_prelude, CratePreludeData);\n+    impl_fn!(enum_data, EnumData);\n+    impl_fn!(extern_crate, ExternCrateData);\n+    impl_fn!(impl_data, ImplData);\n+    impl_fn!(inheritance, InheritanceData);\n+    impl_fn!(function, FunctionData);\n+    impl_fn!(function_ref, FunctionRefData);\n+    impl_fn!(function_call, FunctionCallData);\n+    impl_fn!(method, MethodData);\n+    impl_fn!(method_call, MethodCallData);\n+    impl_fn!(macro_data, MacroData);\n+    impl_fn!(macro_use, MacroUseData);\n+    impl_fn!(mod_data, ModData);\n+    impl_fn!(mod_ref, ModRefData);\n+    impl_fn!(struct_data, StructData);\n+    impl_fn!(struct_variant, StructVariantData);\n+    impl_fn!(trait_data, TraitData);\n+    impl_fn!(tuple_variant, TupleVariantData);\n+    impl_fn!(type_ref, TypeRefData);\n+    impl_fn!(typedef, TypedefData);\n+    impl_fn!(use_data, UseData);\n+    impl_fn!(use_glob, UseGlobData);\n+    impl_fn!(variable, VariableData);\n+    impl_fn!(variable_ref, VariableRefData);\n+}"}, {"sha": "db7a7a64998a1658d699c84ecf3cc962fa54d150", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e7b8c5e3ab49e11d0d1ca60d843c90abf213fb4d/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7b8c5e3ab49e11d0d1ca60d843c90abf213fb4d/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=e7b8c5e3ab49e11d0d1ca60d843c90abf213fb4d", "patch": "@@ -26,6 +26,7 @@\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;\n+extern crate serialize as rustc_serialize;\n \n use rustc::hir::{self, lowering};\n use rustc::hir::map::NodeItem;\n@@ -45,13 +46,15 @@ use syntax::visit::{self, Visitor};\n use syntax::print::pprust::ty_to_string;\n \n mod csv_dumper;\n+mod json_dumper;\n mod data;\n mod dump;\n mod dump_visitor;\n #[macro_use]\n pub mod span_utils;\n \n pub use self::csv_dumper::CsvDumper;\n+pub use self::json_dumper::JsonDumper;\n pub use self::data::*;\n pub use self::dump::Dump;\n pub use self::dump_visitor::DumpVisitor;\n@@ -104,9 +107,17 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n         let mut result = Vec::new();\n \n         for n in self.tcx.sess.cstore.crates() {\n+            let span = match self.tcx.sess.cstore.extern_crate(n) {\n+                Some(ref c) => c.span,\n+                None => {\n+                    debug!(\"Skipping crate {}, no data\", n);\n+                    continue;\n+                }\n+            };\n             result.push(CrateData {\n                 name: (&self.tcx.sess.cstore.crate_name(n)[..]).to_owned(),\n                 number: n,\n+                span: span,\n             });\n         }\n "}]}