{"sha": "cc5392e76bb164a8a08bf7c4e99fdf0bf339193a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNTM5MmU3NmJiMTY0YThhMDhiZjdjNGU5OWZkZjBiZjMzOTE5M2E=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-03-28T20:18:39Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-03-28T20:44:40Z"}, "message": "linker: Use data execution prevention options by default when linker supports them", "tree": {"sha": "7ff248c2a316e85d3704ec07434ac3f70e2aedbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ff248c2a316e85d3704ec07434ac3f70e2aedbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc5392e76bb164a8a08bf7c4e99fdf0bf339193a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc5392e76bb164a8a08bf7c4e99fdf0bf339193a", "html_url": "https://github.com/rust-lang/rust/commit/cc5392e76bb164a8a08bf7c4e99fdf0bf339193a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc5392e76bb164a8a08bf7c4e99fdf0bf339193a/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a20eb6a9da36c88ee929826c4f1eb8d7ea393b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a20eb6a9da36c88ee929826c4f1eb8d7ea393b2", "html_url": "https://github.com/rust-lang/rust/commit/4a20eb6a9da36c88ee929826c4f1eb8d7ea393b2"}], "stats": {"total": 96, "additions": 23, "deletions": 73}, "files": [{"sha": "686ebc13ea3fce35fa546d01e95d2284bdcda98a", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc5392e76bb164a8a08bf7c4e99fdf0bf339193a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5392e76bb164a8a08bf7c4e99fdf0bf339193a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=cc5392e76bb164a8a08bf7c4e99fdf0bf339193a", "patch": "@@ -1651,6 +1651,10 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n         cmd.add_eh_frame_header();\n     }\n \n+    // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n+    // Make the binary compatible with data execution prevention schemes.\n+    cmd.add_no_exec();\n+\n     // NO-OPT-OUT, OBJECT-FILES-NO\n     // Avoid linking to dynamic libraries unless they satisfy some undefined symbols\n     // at the point at which they are specified on the command line."}, {"sha": "e19274e579b95e59dc1d3fa03fa487e01d788caa", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cc5392e76bb164a8a08bf7c4e99fdf0bf339193a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5392e76bb164a8a08bf7c4e99fdf0bf339193a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=cc5392e76bb164a8a08bf7c4e99fdf0bf339193a", "patch": "@@ -130,6 +130,7 @@ pub trait Linker {\n     fn group_end(&mut self);\n     fn linker_plugin_lto(&mut self);\n     fn add_eh_frame_header(&mut self) {}\n+    fn add_no_exec(&mut self) {}\n     fn add_as_needed(&mut self) {}\n     fn finalize(&mut self);\n }\n@@ -643,6 +644,14 @@ impl<'a> Linker for GccLinker<'a> {\n         self.linker_arg(\"--eh-frame-hdr\");\n     }\n \n+    fn add_no_exec(&mut self) {\n+        if self.sess.target.is_like_windows {\n+            self.linker_arg(\"--nxcompat\");\n+        } else if self.sess.target.linker_is_gnu {\n+            self.linker_arg(\"-znoexecstack\");\n+        }\n+    }\n+\n     fn add_as_needed(&mut self) {\n         if self.sess.target.linker_is_gnu {\n             self.linker_arg(\"--as-needed\");\n@@ -885,6 +894,10 @@ impl<'a> Linker for MsvcLinker<'a> {\n     fn linker_plugin_lto(&mut self) {\n         // Do nothing\n     }\n+\n+    fn add_no_exec(&mut self) {\n+        self.cmd.arg(\"/NXCOMPAT\");\n+    }\n }\n \n pub struct EmLinker<'a> {"}, {"sha": "dd0170987824a70cf61bd8d9dc4f0e158f88c82c", "filename": "compiler/rustc_target/src/spec/dragonfly_base.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc5392e76bb164a8a08bf7c4e99fdf0bf339193a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5392e76bb164a8a08bf7c4e99fdf0bf339193a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs?ref=cc5392e76bb164a8a08bf7c4e99fdf0bf339193a", "patch": "@@ -1,23 +1,13 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, RelroLevel, TargetOptions};\n+use crate::spec::{RelroLevel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n-    let mut args = LinkArgs::new();\n-    args.insert(\n-        LinkerFlavor::Gcc,\n-        vec![\n-            // Always enable NX protection when it is available\n-            \"-Wl,-z,noexecstack\".to_string(),\n-        ],\n-    );\n-\n     TargetOptions {\n         os: \"dragonfly\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n         os_family: Some(\"unix\".to_string()),\n         linker_is_gnu: true,\n         has_rpath: true,\n-        pre_link_args: args,\n         position_independent_executables: true,\n         relro_level: RelroLevel::Full,\n         dwarf_version: Some(2),"}, {"sha": "ad3383cc5f26144fffcac082c212407ccab7fec1", "filename": "compiler/rustc_target/src/spec/freebsd_base.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc5392e76bb164a8a08bf7c4e99fdf0bf339193a/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5392e76bb164a8a08bf7c4e99fdf0bf339193a/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs?ref=cc5392e76bb164a8a08bf7c4e99fdf0bf339193a", "patch": "@@ -1,23 +1,13 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, RelroLevel, TargetOptions};\n+use crate::spec::{RelroLevel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n-    let mut args = LinkArgs::new();\n-    args.insert(\n-        LinkerFlavor::Gcc,\n-        vec![\n-            // Always enable NX protection when it is available\n-            \"-Wl,-z,noexecstack\".to_string(),\n-        ],\n-    );\n-\n     TargetOptions {\n         os: \"freebsd\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n         os_family: Some(\"unix\".to_string()),\n         linker_is_gnu: true,\n         has_rpath: true,\n-        pre_link_args: args,\n         position_independent_executables: true,\n         eliminate_frame_pointer: false, // FIXME 43575\n         relro_level: RelroLevel::Full,"}, {"sha": "eeefd056e4b746818ed731df599920e39afa8edc", "filename": "compiler/rustc_target/src/spec/linux_base.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc5392e76bb164a8a08bf7c4e99fdf0bf339193a/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5392e76bb164a8a08bf7c4e99fdf0bf339193a/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs?ref=cc5392e76bb164a8a08bf7c4e99fdf0bf339193a", "patch": "@@ -1,23 +1,13 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, RelroLevel, TargetOptions};\n+use crate::spec::{RelroLevel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n-    let mut args = LinkArgs::new();\n-    args.insert(\n-        LinkerFlavor::Gcc,\n-        vec![\n-            // Always enable NX protection when it is available\n-            \"-Wl,-z,noexecstack\".to_string(),\n-        ],\n-    );\n-\n     TargetOptions {\n         os: \"linux\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n         os_family: Some(\"unix\".to_string()),\n         linker_is_gnu: true,\n         has_rpath: true,\n-        pre_link_args: args,\n         position_independent_executables: true,\n         relro_level: RelroLevel::Full,\n         has_elf_tls: true,"}, {"sha": "d17d729c289eb3491ae4283955f2258ac1271cf1", "filename": "compiler/rustc_target/src/spec/linux_kernel_base.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc5392e76bb164a8a08bf7c4e99fdf0bf339193a/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5392e76bb164a8a08bf7c4e99fdf0bf339193a/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs?ref=cc5392e76bb164a8a08bf7c4e99fdf0bf339193a", "patch": "@@ -1,11 +1,6 @@\n-use crate::spec::{\n-    LinkArgs, LinkerFlavor, PanicStrategy, RelocModel, RelroLevel, StackProbeType, TargetOptions,\n-};\n+use crate::spec::{PanicStrategy, RelocModel, RelroLevel, StackProbeType, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n-    let mut pre_link_args = LinkArgs::new();\n-    pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-Wl,-z,noexecstack\".to_string()]);\n-\n     TargetOptions {\n         env: \"gnu\".to_string(),\n         disable_redzone: true,\n@@ -17,7 +12,6 @@ pub fn opts() -> TargetOptions {\n         needs_plt: true,\n         relro_level: RelroLevel::Full,\n         relocation_model: RelocModel::Static,\n-        pre_link_args,\n \n         ..Default::default()\n     }"}, {"sha": "4ed7685ca07703208ca6601dbd40084a9cfbfaf4", "filename": "compiler/rustc_target/src/spec/msvc_base.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cc5392e76bb164a8a08bf7c4e99fdf0bf339193a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5392e76bb164a8a08bf7c4e99fdf0bf339193a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsvc_base.rs?ref=cc5392e76bb164a8a08bf7c4e99fdf0bf339193a", "patch": "@@ -5,13 +5,6 @@ pub fn opts() -> TargetOptions {\n         // Suppress the verbose logo and authorship debugging output, which would needlessly\n         // clog any log files.\n         \"/NOLOGO\".to_string(),\n-        // Tell the compiler that non-code sections can be marked as non-executable,\n-        // including stack pages.\n-        // UEFI is fully compatible to non-executable data pages.\n-        // In fact, firmware might enforce this, so we better let the linker know about this,\n-        // so it will fail if the compiler ever tries placing code on the stack\n-        // (e.g., trampoline constructs and alike).\n-        \"/NXCOMPAT\".to_string(),\n     ];\n     let mut pre_link_args = LinkArgs::new();\n     pre_link_args.insert(LinkerFlavor::Msvc, pre_link_args_msvc.clone());"}, {"sha": "a6fd01ab110df8dbfd134debac2a419db167aad4", "filename": "compiler/rustc_target/src/spec/openbsd_base.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc5392e76bb164a8a08bf7c4e99fdf0bf339193a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5392e76bb164a8a08bf7c4e99fdf0bf339193a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs?ref=cc5392e76bb164a8a08bf7c4e99fdf0bf339193a", "patch": "@@ -1,15 +1,6 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, RelroLevel, TargetOptions};\n+use crate::spec::{RelroLevel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n-    let mut args = LinkArgs::new();\n-    args.insert(\n-        LinkerFlavor::Gcc,\n-        vec![\n-            // Always enable NX protection when it is available\n-            \"-Wl,-z,noexecstack\".to_string(),\n-        ],\n-    );\n-\n     TargetOptions {\n         os: \"openbsd\".to_string(),\n         dynamic_linking: true,\n@@ -18,7 +9,6 @@ pub fn opts() -> TargetOptions {\n         linker_is_gnu: true,\n         has_rpath: true,\n         abi_return_struct_as_int: true,\n-        pre_link_args: args,\n         position_independent_executables: true,\n         eliminate_frame_pointer: false, // FIXME 43575\n         relro_level: RelroLevel::Full,"}, {"sha": "0afb4a72ac14ffd37bf0c43eab92942d3fc3ce06", "filename": "compiler/rustc_target/src/spec/redox_base.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc5392e76bb164a8a08bf7c4e99fdf0bf339193a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5392e76bb164a8a08bf7c4e99fdf0bf339193a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs?ref=cc5392e76bb164a8a08bf7c4e99fdf0bf339193a", "patch": "@@ -1,15 +1,6 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, RelroLevel, TargetOptions};\n+use crate::spec::{RelroLevel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n-    let mut args = LinkArgs::new();\n-    args.insert(\n-        LinkerFlavor::Gcc,\n-        vec![\n-            // Always enable NX protection when it is available\n-            \"-Wl,-z,noexecstack\".to_string(),\n-        ],\n-    );\n-\n     TargetOptions {\n         os: \"redox\".to_string(),\n         env: \"relibc\".to_string(),\n@@ -18,7 +9,6 @@ pub fn opts() -> TargetOptions {\n         os_family: Some(\"unix\".to_string()),\n         linker_is_gnu: true,\n         has_rpath: true,\n-        pre_link_args: args,\n         position_independent_executables: true,\n         relro_level: RelroLevel::Full,\n         has_elf_tls: true,"}, {"sha": "7036f338150c294ddc2f84fad8f850579fed6c1a", "filename": "compiler/rustc_target/src/spec/windows_gnu_base.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc5392e76bb164a8a08bf7c4e99fdf0bf339193a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5392e76bb164a8a08bf7c4e99fdf0bf339193a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs?ref=cc5392e76bb164a8a08bf7c4e99fdf0bf339193a", "patch": "@@ -9,8 +9,6 @@ pub fn opts() -> TargetOptions {\n             // Tell GCC to avoid linker plugins, because we are not bundling\n             // them with Windows installer, and Rust does its own LTO anyways.\n             \"-fno-use-linker-plugin\".to_string(),\n-            // Always enable DEP (NX bit) when it is available\n-            \"-Wl,--nxcompat\".to_string(),\n             // Enable ASLR\n             \"-Wl,--dynamicbase\".to_string(),\n             // ASLR will rebase it anyway so leaving that option enabled only leads to confusion"}, {"sha": "6365e5650e47163671cc70e5d1745ff63e6e31fd", "filename": "compiler/rustc_target/src/spec/x86_64_fortanix_unknown_sgx.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc5392e76bb164a8a08bf7c4e99fdf0bf339193a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc5392e76bb164a8a08bf7c4e99fdf0bf339193a/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs?ref=cc5392e76bb164a8a08bf7c4e99fdf0bf339193a", "patch": "@@ -4,8 +4,6 @@ use super::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions};\n \n pub fn target() -> Target {\n     const PRE_LINK_ARGS: &[&str] = &[\n-        \"-z\",\n-        \"noexecstack\",\n         \"-e\",\n         \"elf_entry\",\n         \"-Bstatic\","}]}