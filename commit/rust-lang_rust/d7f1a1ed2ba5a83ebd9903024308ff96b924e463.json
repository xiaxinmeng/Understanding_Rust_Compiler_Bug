{"sha": "d7f1a1ed2ba5a83ebd9903024308ff96b924e463", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ZjFhMWVkMmJhNWE4M2ViZDk5MDMwMjQzMDhmZjk2YjkyNGU0NjM=", "commit": {"author": {"name": "xiongmao86", "email": "xiongmao86dev@sina.com", "date": "2020-04-18T10:29:36Z"}, "committer": {"name": "xiongmao86", "email": "xiongmao86dev@sina.com", "date": "2020-04-18T10:29:36Z"}, "message": "Change note_span argument for span_lint_and_note.", "tree": {"sha": "4059f3ec8f95803d90fdec0793ab5b4b44b69e5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4059f3ec8f95803d90fdec0793ab5b4b44b69e5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7f1a1ed2ba5a83ebd9903024308ff96b924e463", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7f1a1ed2ba5a83ebd9903024308ff96b924e463", "html_url": "https://github.com/rust-lang/rust/commit/d7f1a1ed2ba5a83ebd9903024308ff96b924e463", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7f1a1ed2ba5a83ebd9903024308ff96b924e463/comments", "author": {"login": "xiongmao86", "id": 1770218, "node_id": "MDQ6VXNlcjE3NzAyMTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1770218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiongmao86", "html_url": "https://github.com/xiongmao86", "followers_url": "https://api.github.com/users/xiongmao86/followers", "following_url": "https://api.github.com/users/xiongmao86/following{/other_user}", "gists_url": "https://api.github.com/users/xiongmao86/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiongmao86/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiongmao86/subscriptions", "organizations_url": "https://api.github.com/users/xiongmao86/orgs", "repos_url": "https://api.github.com/users/xiongmao86/repos", "events_url": "https://api.github.com/users/xiongmao86/events{/privacy}", "received_events_url": "https://api.github.com/users/xiongmao86/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xiongmao86", "id": 1770218, "node_id": "MDQ6VXNlcjE3NzAyMTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1770218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiongmao86", "html_url": "https://github.com/xiongmao86", "followers_url": "https://api.github.com/users/xiongmao86/followers", "following_url": "https://api.github.com/users/xiongmao86/following{/other_user}", "gists_url": "https://api.github.com/users/xiongmao86/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiongmao86/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiongmao86/subscriptions", "organizations_url": "https://api.github.com/users/xiongmao86/orgs", "repos_url": "https://api.github.com/users/xiongmao86/repos", "events_url": "https://api.github.com/users/xiongmao86/events{/privacy}", "received_events_url": "https://api.github.com/users/xiongmao86/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf4e35339b1d5a613588b45c53d0e88da5363c65", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf4e35339b1d5a613588b45c53d0e88da5363c65", "html_url": "https://github.com/rust-lang/rust/commit/cf4e35339b1d5a613588b45c53d0e88da5363c65"}], "stats": {"total": 82, "additions": 47, "deletions": 35}, "files": [{"sha": "66722786eab49c52f1429ada6f21cd7e80a15b0b", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7f1a1ed2ba5a83ebd9903024308ff96b924e463/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f1a1ed2ba5a83ebd9903024308ff96b924e463/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=d7f1a1ed2ba5a83ebd9903024308ff96b924e463", "patch": "@@ -183,7 +183,7 @@ fn lint_same_then_else(cx: &LateContext<'_, '_>, blocks: &[&Block<'_>]) {\n             IF_SAME_THEN_ELSE,\n             j.span,\n             \"this `if` has identical blocks\",\n-            i.span,\n+            Some(i.span),\n             \"same as this\",\n         );\n     }\n@@ -206,7 +206,7 @@ fn lint_same_cond(cx: &LateContext<'_, '_>, conds: &[&Expr<'_>]) {\n             IFS_SAME_COND,\n             j.span,\n             \"this `if` has the same condition as a previous `if`\",\n-            i.span,\n+            Some(i.span),\n             \"same as this\",\n         );\n     }\n@@ -234,7 +234,7 @@ fn lint_same_fns_in_if_cond(cx: &LateContext<'_, '_>, conds: &[&Expr<'_>]) {\n             SAME_FUNCTIONS_IN_IF_CONDITION,\n             j.span,\n             \"this `if` has the same function call as a previous `if`\",\n-            i.span,\n+            Some(i.span),\n             \"same as this\",\n         );\n     }"}, {"sha": "d79aa2ef0209e1da9f8046572e73e79b46c40a41", "filename": "clippy_lints/src/copy_iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f1a1ed2ba5a83ebd9903024308ff96b924e463/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f1a1ed2ba5a83ebd9903024308ff96b924e463/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopy_iterator.rs?ref=d7f1a1ed2ba5a83ebd9903024308ff96b924e463", "patch": "@@ -46,7 +46,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CopyIterator {\n                     COPY_ITERATOR,\n                     item.span,\n                     \"you are implementing `Iterator` on a `Copy` type\",\n-                    item.span,\n+                    None,\n                     \"consider implementing `IntoIterator` instead\",\n                 );\n             }"}, {"sha": "dc05f5b658fb7c806597810236d6536dba879bb4", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f1a1ed2ba5a83ebd9903024308ff96b924e463/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f1a1ed2ba5a83ebd9903024308ff96b924e463/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=d7f1a1ed2ba5a83ebd9903024308ff96b924e463", "patch": "@@ -168,7 +168,7 @@ fn check_copy_clone<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, item: &Item<'_>, trait\n             EXPL_IMPL_CLONE_ON_COPY,\n             item.span,\n             \"you are implementing `Clone` explicitly on a `Copy` type\",\n-            item.span,\n+            Some(item.span),\n             \"consider deriving `Clone` or removing `Copy`\",\n         );\n     }"}, {"sha": "9de9056c14029a8d1bb6bd7a8b4244068ca889d6", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7f1a1ed2ba5a83ebd9903024308ff96b924e463/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f1a1ed2ba5a83ebd9903024308ff96b924e463/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=d7f1a1ed2ba5a83ebd9903024308ff96b924e463", "patch": "@@ -135,7 +135,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DropForgetRef {\n                                        lint,\n                                        expr.span,\n                                        &msg,\n-                                       arg.span,\n+                                       Some(arg.span),\n                                        &format!(\"argument has type `{}`\", arg_ty));\n                 } else if is_copy(cx, arg_ty) {\n                     if match_def_path(cx, def_id, &paths::DROP) {\n@@ -151,7 +151,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DropForgetRef {\n                                        lint,\n                                        expr.span,\n                                        &msg,\n-                                       arg.span,\n+                                       Some(arg.span),\n                                        &format!(\"argument has type {}\", arg_ty));\n                 }\n             }"}, {"sha": "5206266ccf2a6d5e76d11b2c3be52c24c0537b63", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f1a1ed2ba5a83ebd9903024308ff96b924e463/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f1a1ed2ba5a83ebd9903024308ff96b924e463/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=d7f1a1ed2ba5a83ebd9903024308ff96b924e463", "patch": "@@ -310,7 +310,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ReadVisitor<'a, 'tcx> {\n                             EVAL_ORDER_DEPENDENCE,\n                             expr.span,\n                             \"unsequenced read of a variable\",\n-                            self.write_expr.span,\n+                            Some(self.write_expr.span),\n                             \"whether read occurs before this write depends on evaluation order\"\n                         );\n                     }"}, {"sha": "eb4b7a826f2ce10d8a05c9f2259f5098af96ce96", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7f1a1ed2ba5a83ebd9903024308ff96b924e463/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f1a1ed2ba5a83ebd9903024308ff96b924e463/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=d7f1a1ed2ba5a83ebd9903024308ff96b924e463", "patch": "@@ -149,7 +149,7 @@ fn check_assign(cx: &EarlyContext<'_>, expr: &Expr) {\n                                  really are doing `.. = ({op} ..)`\",\n                                 op = op\n                             ),\n-                            eqop_span,\n+                            None,\n                             &format!(\"to remove this lint, use either `{op}=` or `= {op}`\", op = op),\n                         );\n                     }\n@@ -227,7 +227,7 @@ fn check_else(cx: &EarlyContext<'_>, expr: &Expr) {\n                 SUSPICIOUS_ELSE_FORMATTING,\n                 else_span,\n                 &format!(\"this is an `else {}` but the formatting might hide it\", else_desc),\n-                else_span,\n+                None,\n                 &format!(\n                     \"to remove this lint, remove the `else` or remove the new line between \\\n                      `else` and `{}`\",\n@@ -266,7 +266,7 @@ fn check_array(cx: &EarlyContext<'_>, expr: &Expr) {\n                         POSSIBLE_MISSING_COMMA,\n                         lint_span,\n                         \"possibly missing a comma here\",\n-                        lint_span,\n+                        None,\n                         \"to remove this lint, add a comma or write the expr in a single line\",\n                     );\n                 }\n@@ -297,7 +297,7 @@ fn check_missing_else(cx: &EarlyContext<'_>, first: &Expr, second: &Expr) {\n                     SUSPICIOUS_ELSE_FORMATTING,\n                     else_span,\n                     &format!(\"this looks like {} but the `else` is missing\", looks_like),\n-                    else_span,\n+                    None,\n                     &format!(\n                         \"to remove this lint, add the missing `else` or add a new line before {}\",\n                         next_thing,"}, {"sha": "270e306e15f7a37ba243dfbaa717ed7b48c23aa2", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7f1a1ed2ba5a83ebd9903024308ff96b924e463/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f1a1ed2ba5a83ebd9903024308ff96b924e463/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=d7f1a1ed2ba5a83ebd9903024308ff96b924e463", "patch": "@@ -637,7 +637,7 @@ fn check_overlapping_arms<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ex: &'tcx Expr<'\n                     MATCH_OVERLAPPING_ARM,\n                     start.span,\n                     \"some ranges overlap\",\n-                    end.span,\n+                    Some(end.span),\n                     \"overlaps with this\",\n                 );\n             }\n@@ -675,7 +675,7 @@ fn check_wild_err_arm(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n                                 MATCH_WILD_ERR_ARM,\n                                 arm.pat.span,\n                                 &format!(\"`Err({})` matches all errors\", &ident_bind_name),\n-                                arm.pat.span,\n+                                None,\n                                 \"match each error separately or use the error output\",\n                             );\n                         }"}, {"sha": "7c652229d33de63b6363d707785c427cf2263b56", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7f1a1ed2ba5a83ebd9903024308ff96b924e463/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f1a1ed2ba5a83ebd9903024308ff96b924e463/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=d7f1a1ed2ba5a83ebd9903024308ff96b924e463", "patch": "@@ -2577,7 +2577,7 @@ fn lint_map_unwrap_or_else<'a, 'tcx>(\n                 },\n                 expr.span,\n                 msg,\n-                expr.span,\n+                None,\n                 &format!(\n                     \"replace `map({0}).unwrap_or_else({1})` with `map_or_else({1}, {0})`\",\n                     map_snippet, unwrap_snippet,\n@@ -2757,7 +2757,7 @@ fn lint_filter_next<'a, 'tcx>(\n                 FILTER_NEXT,\n                 expr.span,\n                 msg,\n-                expr.span,\n+                None,\n                 &format!(\"replace `filter({0}).next()` with `find({0})`\", filter_snippet),\n             );\n         } else {\n@@ -2816,7 +2816,7 @@ fn lint_filter_map_next<'a, 'tcx>(\n                 FILTER_MAP_NEXT,\n                 expr.span,\n                 msg,\n-                expr.span,\n+                None,\n                 &format!(\"replace `filter_map({0}).next()` with `find_map({0})`\", filter_snippet),\n             );\n         } else {"}, {"sha": "d596d86370f12f1a09604368caf2f04590c46d08", "filename": "clippy_lints/src/utils/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d7f1a1ed2ba5a83ebd9903024308ff96b924e463/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f1a1ed2ba5a83ebd9903024308ff96b924e463/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs?ref=d7f1a1ed2ba5a83ebd9903024308ff96b924e463", "patch": "@@ -108,15 +108,15 @@ pub fn span_lint_and_note<'a, T: LintContext>(\n     lint: &'static Lint,\n     span: Span,\n     msg: &str,\n-    note_span: Span,\n+    note_span: Option<Span>,\n     note: &str,\n ) {\n-    cx.struct_span_lint(lint, span, |diag| {\n-        let mut diag = diag.build(msg);\n-        if note_span == span {\n-            diag.note(note);\n+    cx.struct_span_lint(lint, span, |ldb| {\n+        let mut db = ldb.build(msg);\n+        if let Some(note_span) = note_span {\n+            db.span_note(note_span, note);\n         } else {\n-            diag.span_note(note_span, note);\n+            db.note(note);\n         }\n         docs_link(&mut diag, lint);\n         diag.emit();"}, {"sha": "6ac8d5e71b30c3dae4168a9ec36164c453f39ca3", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d7f1a1ed2ba5a83ebd9903024308ff96b924e463/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f1a1ed2ba5a83ebd9903024308ff96b924e463/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=d7f1a1ed2ba5a83ebd9903024308ff96b924e463", "patch": "@@ -198,8 +198,8 @@ declare_clippy_lint! {\n     /// );\n     /// span_lint_and_help(cx, TEST_LINT, expr.span, lint_msg, Some(expr.span), help_msg);\n     /// span_lint_and_help(cx, TEST_LINT, expr.span, lint_msg, None, help_msg);\n-    /// span_lint_and_note(cx, TEST_LINT, expr.span, lint_msg, expr.span, note_msg);\n-    /// span_lint_and_note(cx, TEST_LINT, expr.span, lint_msg, expr.span, note_msg);\n+    /// span_lint_and_note(cx, TEST_LINT, expr.span, lint_msg, Some(expr.span), note_msg);\n+    /// span_lint_and_note(cx, TEST_LINT, expr.span, lint_msg, None, note_msg);\n     /// ```\n     pub COLLAPSIBLE_SPAN_LINT_CALLS,\n     internal,\n@@ -486,15 +486,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CollapsibleCalls {\n                     },\n                     \"span_note\" if sle.eq_expr(&and_then_args[2], &span_call_args[1]) => {\n                         let note_snippet = snippet(cx, span_call_args[2].span, r#\"\"...\"\"#);\n-                        suggest_note(cx, expr, &and_then_snippets, note_snippet.borrow());\n+                        suggest_note(cx, expr, &and_then_snippets, note_snippet.borrow(), true);\n                     },\n                     \"help\" => {\n                         let help_snippet = snippet(cx, span_call_args[1].span, r#\"\"...\"\"#);\n                         suggest_help(cx, expr, &and_then_snippets, help_snippet.borrow(), false);\n                     }\n                     \"note\" => {\n                         let note_snippet = snippet(cx, span_call_args[1].span, r#\"\"...\"\"#);\n-                        suggest_note(cx, expr, &and_then_snippets, note_snippet.borrow());\n+                        suggest_note(cx, expr, &and_then_snippets, note_snippet.borrow(), false);\n                     }\n                     _  => (),\n                 }\n@@ -606,7 +606,19 @@ fn suggest_help(\n     );\n }\n \n-fn suggest_note(cx: &LateContext<'_, '_>, expr: &Expr<'_>, and_then_snippets: &AndThenSnippets<'_>, note: &str) {\n+fn suggest_note(\n+    cx: &LateContext<'_, '_>,\n+    expr: &Expr<'_>,\n+    and_then_snippets: &AndThenSnippets<'_>,\n+    note: &str,\n+    with_span: bool,\n+) {\n+    let note_span = if with_span {\n+        format!(\"Some({})\", and_then_snippets.span)\n+    } else {\n+        \"None\".to_string()\n+    };\n+\n     span_lint_and_sugg(\n         cx,\n         COLLAPSIBLE_SPAN_LINT_CALLS,\n@@ -619,7 +631,7 @@ fn suggest_note(cx: &LateContext<'_, '_>, expr: &Expr<'_>, and_then_snippets: &A\n             and_then_snippets.lint,\n             and_then_snippets.span,\n             and_then_snippets.msg,\n-            and_then_snippets.span,\n+            note_span,\n             note\n         ),\n         Applicability::MachineApplicable,"}, {"sha": "e588c23345e2fdd8ad010e05a0db259589f7bade", "filename": "tests/ui/collapsible_span_lint_calls.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7f1a1ed2ba5a83ebd9903024308ff96b924e463/tests%2Fui%2Fcollapsible_span_lint_calls.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d7f1a1ed2ba5a83ebd9903024308ff96b924e463/tests%2Fui%2Fcollapsible_span_lint_calls.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_span_lint_calls.fixed?ref=d7f1a1ed2ba5a83ebd9903024308ff96b924e463", "patch": "@@ -38,7 +38,7 @@ fn span_lint_and_note<'a, T: LintContext>(\n     lint: &'static Lint,\n     span: Span,\n     msg: &str,\n-    note_span: Span,\n+    note_span: Option<Span>,\n     note: &str,\n ) {\n }\n@@ -75,8 +75,8 @@ impl EarlyLintPass for Pass {\n         span_lint_and_sugg(cx, TEST_LINT, expr.span, lint_msg, help_msg, sugg.to_string(), Applicability::MachineApplicable);\n         span_lint_and_help(cx, TEST_LINT, expr.span, lint_msg, Some(expr.span), help_msg);\n         span_lint_and_help(cx, TEST_LINT, expr.span, lint_msg, None, help_msg);\n-        span_lint_and_note(cx, TEST_LINT, expr.span, lint_msg, expr.span, note_msg);\n-        span_lint_and_note(cx, TEST_LINT, expr.span, lint_msg, expr.span, note_msg);\n+        span_lint_and_note(cx, TEST_LINT, expr.span, lint_msg, Some(expr.span), note_msg);\n+        span_lint_and_note(cx, TEST_LINT, expr.span, lint_msg, None, note_msg);\n \n         // This expr shouldn't trigger this lint.\n         span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {"}, {"sha": "d5dd3bb562b429d9265f3ba1d5c80a4c977a4dc2", "filename": "tests/ui/collapsible_span_lint_calls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f1a1ed2ba5a83ebd9903024308ff96b924e463/tests%2Fui%2Fcollapsible_span_lint_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f1a1ed2ba5a83ebd9903024308ff96b924e463/tests%2Fui%2Fcollapsible_span_lint_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_span_lint_calls.rs?ref=d7f1a1ed2ba5a83ebd9903024308ff96b924e463", "patch": "@@ -38,7 +38,7 @@ fn span_lint_and_note<'a, T: LintContext>(\n     lint: &'static Lint,\n     span: Span,\n     msg: &str,\n-    note_span: Span,\n+    note_span: Option<Span>,\n     note: &str,\n ) {\n }"}, {"sha": "874d4a9f255c27dcaa542325be407d65d25cfabd", "filename": "tests/ui/collapsible_span_lint_calls.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7f1a1ed2ba5a83ebd9903024308ff96b924e463/tests%2Fui%2Fcollapsible_span_lint_calls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7f1a1ed2ba5a83ebd9903024308ff96b924e463/tests%2Fui%2Fcollapsible_span_lint_calls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_span_lint_calls.stderr?ref=d7f1a1ed2ba5a83ebd9903024308ff96b924e463", "patch": "@@ -35,15 +35,15 @@ error: this call is collspible\n LL | /         span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n LL | |             db.span_note(expr.span, note_msg);\n LL | |         });\n-   | |__________^ help: collapse into: `span_lint_and_note(cx, TEST_LINT, expr.span, lint_msg, expr.span, note_msg)`\n+   | |__________^ help: collapse into: `span_lint_and_note(cx, TEST_LINT, expr.span, lint_msg, Some(expr.span), note_msg)`\n \n error: this call is collspible\n   --> $DIR/collapsible_span_lint_calls.rs:87:9\n    |\n LL | /         span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |db| {\n LL | |             db.note(note_msg);\n LL | |         });\n-   | |__________^ help: collapse into: `span_lint_and_note(cx, TEST_LINT, expr.span, lint_msg, expr.span, note_msg)`\n+   | |__________^ help: collapse into: `span_lint_and_note(cx, TEST_LINT, expr.span, lint_msg, None, note_msg)`\n \n error: aborting due to 5 previous errors\n "}]}