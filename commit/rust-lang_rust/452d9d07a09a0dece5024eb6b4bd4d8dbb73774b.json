{"sha": "452d9d07a09a0dece5024eb6b4bd4d8dbb73774b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MmQ5ZDA3YTA5YTBkZWNlNTAyNGViNmI0YmQ0ZDhkYmI3Mzc3NGI=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-09-22T07:56:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-22T07:56:43Z"}, "message": "Rollup merge of #54422 - ljedrz:simplify_first_last, r=Mark-Simulacrum\n\nSimplify slice's first(_mut) and last(_mut) with get\n\nThis change makes these functions easier to read and interpret. I haven't detected any difference in performance locally.\n\nr? @Mark-Simulacrum", "tree": {"sha": "0585d367e0e51af6a38972233ae3e22f7064b5de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0585d367e0e51af6a38972233ae3e22f7064b5de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/452d9d07a09a0dece5024eb6b4bd4d8dbb73774b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbpfW7CRBK7hj4Ov3rIwAAdHIIAAYkRJga9+bME0mH6HKJ7iDM\nUHCrUfJVrRkIfveYfo+sXSk6EvK8sGoJ0igDiXyUkSdrL/EsFGSBfbznXtmFEiku\nGEP7PEPYEr4LpKFcR7q8LpRB4BAbvg8NRdSgwQXoADe7/6GKscNqo5rYix/qCQkc\nD6lMuj4pvjDX3SQpZGUK0ni3J9mKn33SSH73LP6sQoh7fQgdsct+8OaeRmWZy1RU\n4lq8yNYb3p5xUFexWUSfgmBIqQk+ph0NMUKu7owd9BtrKLIZOFdVdPyLX2gFziC6\nsORPOJbdxxUGZC9NX4Vp7E4t3mNqmLInuE1JfSIp416J+QiUjmt8lh5SVBD99yw=\n=+6wn\n-----END PGP SIGNATURE-----\n", "payload": "tree 0585d367e0e51af6a38972233ae3e22f7064b5de\nparent 317b212fa1cc2941f0fcaa14eea6f2ab1514df56\nparent 48f46056b7604acd1fb328e41792eb25d1d37163\nauthor Pietro Albini <pietro@pietroalbini.org> 1537603003 +0200\ncommitter GitHub <noreply@github.com> 1537603003 +0200\n\nRollup merge of #54422 - ljedrz:simplify_first_last, r=Mark-Simulacrum\n\nSimplify slice's first(_mut) and last(_mut) with get\n\nThis change makes these functions easier to read and interpret. I haven't detected any difference in performance locally.\n\nr? @Mark-Simulacrum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/452d9d07a09a0dece5024eb6b4bd4d8dbb73774b", "html_url": "https://github.com/rust-lang/rust/commit/452d9d07a09a0dece5024eb6b4bd4d8dbb73774b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/452d9d07a09a0dece5024eb6b4bd4d8dbb73774b/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "317b212fa1cc2941f0fcaa14eea6f2ab1514df56", "url": "https://api.github.com/repos/rust-lang/rust/commits/317b212fa1cc2941f0fcaa14eea6f2ab1514df56", "html_url": "https://github.com/rust-lang/rust/commit/317b212fa1cc2941f0fcaa14eea6f2ab1514df56"}, {"sha": "48f46056b7604acd1fb328e41792eb25d1d37163", "url": "https://api.github.com/repos/rust-lang/rust/commits/48f46056b7604acd1fb328e41792eb25d1d37163", "html_url": "https://github.com/rust-lang/rust/commit/48f46056b7604acd1fb328e41792eb25d1d37163"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "aed9020d9d14a09b8124310dd23716310e4efc7c", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/452d9d07a09a0dece5024eb6b4bd4d8dbb73774b/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452d9d07a09a0dece5024eb6b4bd4d8dbb73774b/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=452d9d07a09a0dece5024eb6b4bd4d8dbb73774b", "patch": "@@ -119,7 +119,7 @@ impl<T> [T] {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn first(&self) -> Option<&T> {\n-        if self.is_empty() { None } else { Some(&self[0]) }\n+        self.get(0)\n     }\n \n     /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.\n@@ -137,7 +137,7 @@ impl<T> [T] {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn first_mut(&mut self) -> Option<&mut T> {\n-        if self.is_empty() { None } else { Some(&mut self[0]) }\n+        self.get_mut(0)\n     }\n \n     /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.\n@@ -239,7 +239,8 @@ impl<T> [T] {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn last(&self) -> Option<&T> {\n-        if self.is_empty() { None } else { Some(&self[self.len() - 1]) }\n+        let last_idx = self.len().checked_sub(1)?;\n+        self.get(last_idx)\n     }\n \n     /// Returns a mutable pointer to the last item in the slice.\n@@ -257,9 +258,8 @@ impl<T> [T] {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn last_mut(&mut self) -> Option<&mut T> {\n-        let len = self.len();\n-        if len == 0 { return None; }\n-        Some(&mut self[len - 1])\n+        let last_idx = self.len().checked_sub(1)?;\n+        self.get_mut(last_idx)\n     }\n \n     /// Returns a reference to an element or subslice depending on the type of"}]}