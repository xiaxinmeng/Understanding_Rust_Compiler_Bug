{"sha": "c850ffe01a4d3d8eef74f2c5220a65ec8d167b72", "node_id": "C_kwDOAAsO6NoAKGM4NTBmZmUwMWE0ZDNkOGVlZjc0ZjJjNTIyMGE2NWVjOGQxNjdiNzI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-18T12:20:06Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-18T12:20:06Z"}, "message": "add support for new RMW orders", "tree": {"sha": "3244b53024cf2750dbee9f8b9da48eff255e30cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3244b53024cf2750dbee9f8b9da48eff255e30cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c850ffe01a4d3d8eef74f2c5220a65ec8d167b72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c850ffe01a4d3d8eef74f2c5220a65ec8d167b72", "html_url": "https://github.com/rust-lang/rust/commit/c850ffe01a4d3d8eef74f2c5220a65ec8d167b72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c850ffe01a4d3d8eef74f2c5220a65ec8d167b72/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1174cda4f1d3aff6d2a34e7300d5ea12769de0f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1174cda4f1d3aff6d2a34e7300d5ea12769de0f5", "html_url": "https://github.com/rust-lang/rust/commit/1174cda4f1d3aff6d2a34e7300d5ea12769de0f5"}], "stats": {"total": 129, "additions": 79, "deletions": 50}, "files": [{"sha": "d446eff537f31f1be283d83af6981c3f1b0e2966", "filename": "src/shims/intrinsics/atomic.rs", "status": "modified", "additions": 60, "deletions": 24, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/c850ffe01a4d3d8eef74f2c5220a65ec8d167b72/src%2Fshims%2Fintrinsics%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c850ffe01a4d3d8eef74f2c5220a65ec8d167b72/src%2Fshims%2Fintrinsics%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics%2Fatomic.rs?ref=c850ffe01a4d3d8eef74f2c5220a65ec8d167b72", "patch": "@@ -49,57 +49,93 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"cxchg_seqcst_seqcst\" =>\n                 this.atomic_compare_exchange(args, dest, AtomicRwOrd::SeqCst, AtomicReadOrd::SeqCst)?,\n             #[rustfmt::skip]\n-            \"cxchg_acquire_acquire\" =>\n-                this.atomic_compare_exchange(args, dest, AtomicRwOrd::Acquire, AtomicReadOrd::Acquire)?,\n+            \"cxchg_seqcst_acquire\" =>\n+                this.atomic_compare_exchange(args, dest, AtomicRwOrd::SeqCst, AtomicReadOrd::Acquire)?,\n             #[rustfmt::skip]\n-            \"cxchg_release_relaxed\" =>\n-                this.atomic_compare_exchange(args, dest, AtomicRwOrd::Release, AtomicReadOrd::Relaxed)?,\n+            \"cxchg_seqcst_relaxed\" =>\n+                this.atomic_compare_exchange(args, dest, AtomicRwOrd::SeqCst, AtomicReadOrd::Relaxed)?,\n+            #[rustfmt::skip]\n+            \"cxchg_acqrel_seqcst\" =>\n+                this.atomic_compare_exchange(args, dest, AtomicRwOrd::AcqRel, AtomicReadOrd::SeqCst)?,\n             #[rustfmt::skip]\n             \"cxchg_acqrel_acquire\" =>\n                 this.atomic_compare_exchange(args, dest, AtomicRwOrd::AcqRel, AtomicReadOrd::Acquire)?,\n             #[rustfmt::skip]\n-            \"cxchg_relaxed_relaxed\" =>\n-                this.atomic_compare_exchange(args, dest, AtomicRwOrd::Relaxed, AtomicReadOrd::Relaxed)?,\n+            \"cxchg_acqrel_relaxed\" =>\n+                this.atomic_compare_exchange(args, dest, AtomicRwOrd::AcqRel, AtomicReadOrd::Relaxed)?,\n+            #[rustfmt::skip]\n+            \"cxchg_acquire_seqcst\" =>\n+                this.atomic_compare_exchange(args, dest, AtomicRwOrd::Acquire, AtomicReadOrd::SeqCst)?,\n+            #[rustfmt::skip]\n+            \"cxchg_acquire_acquire\" =>\n+                this.atomic_compare_exchange(args, dest, AtomicRwOrd::Acquire, AtomicReadOrd::Acquire)?,\n             #[rustfmt::skip]\n             \"cxchg_acquire_relaxed\" =>\n                 this.atomic_compare_exchange(args, dest, AtomicRwOrd::Acquire, AtomicReadOrd::Relaxed)?,\n             #[rustfmt::skip]\n-            \"cxchg_acqrel_relaxed\" =>\n-                this.atomic_compare_exchange(args, dest, AtomicRwOrd::AcqRel, AtomicReadOrd::Relaxed)?,\n+            \"cxchg_release_seqcst\" =>\n+                this.atomic_compare_exchange(args, dest, AtomicRwOrd::Release, AtomicReadOrd::SeqCst)?,\n             #[rustfmt::skip]\n-            \"cxchg_seqcst_relaxed\" =>\n-                this.atomic_compare_exchange(args, dest, AtomicRwOrd::SeqCst, AtomicReadOrd::Relaxed)?,\n+            \"cxchg_release_acquire\" =>\n+                this.atomic_compare_exchange(args, dest, AtomicRwOrd::Release, AtomicReadOrd::Acquire)?,\n             #[rustfmt::skip]\n-            \"cxchg_seqcst_acquire\" =>\n-                this.atomic_compare_exchange(args, dest, AtomicRwOrd::SeqCst, AtomicReadOrd::Acquire)?,\n+            \"cxchg_release_relaxed\" =>\n+                this.atomic_compare_exchange(args, dest, AtomicRwOrd::Release, AtomicReadOrd::Relaxed)?,\n+            #[rustfmt::skip]\n+            \"cxchg_relaxed_seqcst\" =>\n+                this.atomic_compare_exchange(args, dest, AtomicRwOrd::Relaxed, AtomicReadOrd::SeqCst)?,\n+            #[rustfmt::skip]\n+            \"cxchg_relaxed_acquire\" =>\n+                this.atomic_compare_exchange(args, dest, AtomicRwOrd::Relaxed, AtomicReadOrd::Acquire)?,\n+            #[rustfmt::skip]\n+            \"cxchg_relaxed_relaxed\" =>\n+                this.atomic_compare_exchange(args, dest, AtomicRwOrd::Relaxed, AtomicReadOrd::Relaxed)?,\n \n             #[rustfmt::skip]\n             \"cxchgweak_seqcst_seqcst\" =>\n                 this.atomic_compare_exchange_weak(args, dest, AtomicRwOrd::SeqCst, AtomicReadOrd::SeqCst)?,\n             #[rustfmt::skip]\n-            \"cxchgweak_acquire_acquire\" =>\n-                this.atomic_compare_exchange_weak(args, dest, AtomicRwOrd::Acquire, AtomicReadOrd::Acquire)?,\n+            \"cxchgweak_seqcst_acquire\" =>\n+                this.atomic_compare_exchange_weak(args, dest, AtomicRwOrd::SeqCst, AtomicReadOrd::Acquire)?,\n             #[rustfmt::skip]\n-            \"cxchgweak_release_relaxed\" =>\n-                this.atomic_compare_exchange_weak(args, dest, AtomicRwOrd::Release, AtomicReadOrd::Relaxed)?,\n+            \"cxchgweak_seqcst_relaxed\" =>\n+                this.atomic_compare_exchange_weak(args, dest, AtomicRwOrd::SeqCst, AtomicReadOrd::Relaxed)?,\n+            #[rustfmt::skip]\n+            \"cxchgweak_acqrel_seqcst\" =>\n+                this.atomic_compare_exchange_weak(args, dest, AtomicRwOrd::AcqRel, AtomicReadOrd::SeqCst)?,\n             #[rustfmt::skip]\n             \"cxchgweak_acqrel_acquire\" =>\n                 this.atomic_compare_exchange_weak(args, dest, AtomicRwOrd::AcqRel, AtomicReadOrd::Acquire)?,\n             #[rustfmt::skip]\n-            \"cxchgweak_relaxed_relaxed\" =>\n-                this.atomic_compare_exchange_weak(args, dest, AtomicRwOrd::Relaxed, AtomicReadOrd::Relaxed)?,\n+            \"cxchgweak_acqrel_relaxed\" =>\n+                this.atomic_compare_exchange_weak(args, dest, AtomicRwOrd::AcqRel, AtomicReadOrd::Relaxed)?,\n+            #[rustfmt::skip]\n+            \"cxchgweak_acquire_seqcst\" =>\n+                this.atomic_compare_exchange_weak(args, dest, AtomicRwOrd::Acquire, AtomicReadOrd::SeqCst)?,\n+            #[rustfmt::skip]\n+            \"cxchgweak_acquire_acquire\" =>\n+                this.atomic_compare_exchange_weak(args, dest, AtomicRwOrd::Acquire, AtomicReadOrd::Acquire)?,\n             #[rustfmt::skip]\n             \"cxchgweak_acquire_relaxed\" =>\n                 this.atomic_compare_exchange_weak(args, dest, AtomicRwOrd::Acquire, AtomicReadOrd::Relaxed)?,\n             #[rustfmt::skip]\n-            \"cxchgweak_acqrel_relaxed\" =>\n-                this.atomic_compare_exchange_weak(args, dest, AtomicRwOrd::AcqRel, AtomicReadOrd::Relaxed)?,\n+            \"cxchgweak_release_seqcst\" =>\n+                this.atomic_compare_exchange_weak(args, dest, AtomicRwOrd::Release, AtomicReadOrd::SeqCst)?,\n             #[rustfmt::skip]\n-            \"cxchgweak_seqcst_relaxed\" =>\n-                this.atomic_compare_exchange_weak(args, dest, AtomicRwOrd::SeqCst, AtomicReadOrd::Relaxed)?,\n+            \"cxchgweak_release_acquire\" =>\n+                this.atomic_compare_exchange_weak(args, dest, AtomicRwOrd::Release, AtomicReadOrd::Acquire)?,\n             #[rustfmt::skip]\n-            \"cxchgweak_seqcst_acquire\" =>\n-                this.atomic_compare_exchange_weak(args, dest, AtomicRwOrd::SeqCst, AtomicReadOrd::Acquire)?,\n+            \"cxchgweak_release_relaxed\" =>\n+                this.atomic_compare_exchange_weak(args, dest, AtomicRwOrd::Release, AtomicReadOrd::Relaxed)?,\n+            #[rustfmt::skip]\n+            \"cxchgweak_relaxed_seqcst\" =>\n+                this.atomic_compare_exchange_weak(args, dest, AtomicRwOrd::Relaxed, AtomicReadOrd::SeqCst)?,\n+            #[rustfmt::skip]\n+            \"cxchgweak_relaxed_acquire\" =>\n+                this.atomic_compare_exchange_weak(args, dest, AtomicRwOrd::Relaxed, AtomicReadOrd::Acquire)?,\n+            #[rustfmt::skip]\n+            \"cxchgweak_relaxed_relaxed\" =>\n+                this.atomic_compare_exchange_weak(args, dest, AtomicRwOrd::Relaxed, AtomicReadOrd::Relaxed)?,\n \n             #[rustfmt::skip]\n             \"or_seqcst\" =>"}, {"sha": "e3d80a78916f6a22880e2c995faf9ffcb6273880", "filename": "tests/pass/atomic.rs", "status": "modified", "additions": 19, "deletions": 26, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c850ffe01a4d3d8eef74f2c5220a65ec8d167b72/tests%2Fpass%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c850ffe01a4d3d8eef74f2c5220a65ec8d167b72/tests%2Fpass%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fatomic.rs?ref=c850ffe01a4d3d8eef74f2c5220a65ec8d167b72", "patch": "@@ -51,18 +51,22 @@ fn atomic_all_ops() {\n     static ATOMIC: AtomicIsize = AtomicIsize::new(0);\n     static ATOMIC_UNSIGNED: AtomicU64 = AtomicU64::new(0);\n \n+    let load_orders = [Relaxed, Acquire, SeqCst];\n+    let stored_orders = [Relaxed, Release, SeqCst];\n+    let rmw_orders = [Relaxed, Release, Acquire, AcqRel, SeqCst];\n+\n     // loads\n-    for o in [Relaxed, Acquire, SeqCst] {\n+    for o in load_orders {\n         ATOMIC.load(o);\n     }\n \n     // stores\n-    for o in [Relaxed, Release, SeqCst] {\n+    for o in stored_orders {\n         ATOMIC.store(1, o);\n     }\n \n     // most RMWs\n-    for o in [Relaxed, Release, Acquire, AcqRel, SeqCst] {\n+    for o in rmw_orders {\n         ATOMIC.swap(0, o);\n         ATOMIC.fetch_or(0, o);\n         ATOMIC.fetch_xor(0, o);\n@@ -76,37 +80,26 @@ fn atomic_all_ops() {\n         ATOMIC_UNSIGNED.fetch_max(0, o);\n     }\n \n-    // RMWs with deparate failure ordering\n-    ATOMIC.store(0, SeqCst);\n-    assert_eq!(ATOMIC.compare_exchange(0, 1, Relaxed, Relaxed), Ok(0));\n-    assert_eq!(ATOMIC.compare_exchange(0, 2, Acquire, Relaxed), Err(1));\n-    assert_eq!(ATOMIC.compare_exchange(0, 1, Release, Relaxed), Err(1));\n-    assert_eq!(ATOMIC.compare_exchange(1, 0, AcqRel, Relaxed), Ok(1));\n-    ATOMIC.compare_exchange(0, 1, SeqCst, Relaxed).ok();\n-    ATOMIC.compare_exchange(0, 1, Acquire, Acquire).ok();\n-    ATOMIC.compare_exchange(0, 1, AcqRel, Acquire).ok();\n-    ATOMIC.compare_exchange(0, 1, SeqCst, Acquire).ok();\n-    ATOMIC.compare_exchange(0, 1, SeqCst, SeqCst).ok();\n-\n-    ATOMIC.store(0, SeqCst);\n-    compare_exchange_weak_loop!(ATOMIC, 0, 1, Relaxed, Relaxed);\n-    assert_eq!(ATOMIC.compare_exchange_weak(0, 2, Acquire, Relaxed), Err(1));\n-    assert_eq!(ATOMIC.compare_exchange_weak(0, 1, Release, Relaxed), Err(1));\n-    compare_exchange_weak_loop!(ATOMIC, 1, 0, AcqRel, Relaxed);\n-    assert_eq!(ATOMIC.load(Relaxed), 0);\n-    ATOMIC.compare_exchange_weak(0, 1, SeqCst, Relaxed).ok();\n-    ATOMIC.compare_exchange_weak(0, 1, Acquire, Acquire).ok();\n-    ATOMIC.compare_exchange_weak(0, 1, AcqRel, Acquire).ok();\n-    ATOMIC.compare_exchange_weak(0, 1, SeqCst, Acquire).ok();\n-    ATOMIC.compare_exchange_weak(0, 1, SeqCst, SeqCst).ok();\n+    // RMWs with separate failure ordering\n+    for o1 in rmw_orders {\n+        for o2 in load_orders {\n+            let _res = ATOMIC.compare_exchange(0, 0, o1, o2);\n+            let _res = ATOMIC.compare_exchange_weak(0, 0, o1, o2);\n+        }\n+    }\n }\n \n fn atomic_u64() {\n     static ATOMIC: AtomicU64 = AtomicU64::new(0);\n \n     ATOMIC.store(1, SeqCst);\n     assert_eq!(ATOMIC.compare_exchange(0, 0x100, AcqRel, Acquire), Err(1));\n+    assert_eq!(ATOMIC.compare_exchange(0, 1, Release, Relaxed), Err(1));\n+    assert_eq!(ATOMIC.compare_exchange(1, 0, AcqRel, Relaxed), Ok(1));\n+    assert_eq!(ATOMIC.compare_exchange(0, 1, Relaxed, Relaxed), Ok(0));\n     compare_exchange_weak_loop!(ATOMIC, 1, 0x100, AcqRel, Acquire);\n+    assert_eq!(ATOMIC.compare_exchange_weak(0, 2, Acquire, Relaxed), Err(0x100));\n+    assert_eq!(ATOMIC.compare_exchange_weak(0, 1, Release, Relaxed), Err(0x100));\n     assert_eq!(ATOMIC.load(Relaxed), 0x100);\n \n     assert_eq!(ATOMIC.fetch_max(0x10, SeqCst), 0x100);"}]}