{"sha": "052b3fd4a0c484638a8e8b30f9b628abfaeffde4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MmIzZmQ0YTBjNDg0NjM4YThlOGIzMGY5YjYyOGFiZmFlZmZkZTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-10T14:24:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-10T14:24:41Z"}, "message": "Auto merge of #31499 - kamalmarhubi:cfg-flag-invalid-cfgs, r=brson\n\nA spec like `#[cfg(foo(bar))]` is not allowed as an attribute. This\nmakes the same spec be rejected by the compiler if passed in as a\n`--cfg` argument.\n\nFixes #31495", "tree": {"sha": "e5a0a76a85a29cf3d4c360b6a33bb3451ce85ba6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5a0a76a85a29cf3d4c360b6a33bb3451ce85ba6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/052b3fd4a0c484638a8e8b30f9b628abfaeffde4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/052b3fd4a0c484638a8e8b30f9b628abfaeffde4", "html_url": "https://github.com/rust-lang/rust/commit/052b3fd4a0c484638a8e8b30f9b628abfaeffde4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/052b3fd4a0c484638a8e8b30f9b628abfaeffde4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32d962d16fc0abcb63fd705b3cde35025da77a13", "url": "https://api.github.com/repos/rust-lang/rust/commits/32d962d16fc0abcb63fd705b3cde35025da77a13", "html_url": "https://github.com/rust-lang/rust/commit/32d962d16fc0abcb63fd705b3cde35025da77a13"}, {"sha": "c32c7c24860eb6ed65bdec2491ba99b6eb5550b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c32c7c24860eb6ed65bdec2491ba99b6eb5550b8", "html_url": "https://github.com/rust-lang/rust/commit/c32c7c24860eb6ed65bdec2491ba99b6eb5550b8"}], "stats": {"total": 107, "additions": 86, "deletions": 21}, "files": [{"sha": "efc2dc2814a61c42afa92e031a71bbd19274825b", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 60, "deletions": 21, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/052b3fd4a0c484638a8e8b30f9b628abfaeffde4/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052b3fd4a0c484638a8e8b30f9b628abfaeffde4/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=052b3fd4a0c484638a8e8b30f9b628abfaeffde4", "patch": "@@ -164,7 +164,11 @@ pub fn run_compiler<'a>(args: &[String],\n \n     let descriptions = diagnostics_registry();\n \n-    do_or_return!(callbacks.early_callback(&matches, &descriptions, sopts.error_format), None);\n+    do_or_return!(callbacks.early_callback(&matches,\n+                                           &sopts,\n+                                           &descriptions,\n+                                           sopts.error_format),\n+                                           None);\n \n     let (odir, ofile) = make_output(&matches);\n     let (input, input_file_path) = match make_input(&matches.free) {\n@@ -251,6 +255,7 @@ pub trait CompilerCalls<'a> {\n     // else (e.g., selecting input and output).\n     fn early_callback(&mut self,\n                       _: &getopts::Matches,\n+                      _: &config::Options,\n                       _: &diagnostics::registry::Registry,\n                       _: ErrorOutputType)\n                       -> Compilation {\n@@ -324,34 +329,68 @@ pub trait CompilerCalls<'a> {\n #[derive(Copy, Clone)]\n pub struct RustcDefaultCalls;\n \n+fn handle_explain(code: &str,\n+                  descriptions: &diagnostics::registry::Registry,\n+                  output: ErrorOutputType) {\n+    let normalised = if !code.starts_with(\"E\") {\n+        format!(\"E{0:0>4}\", code)\n+    } else {\n+        code.to_string()\n+    };\n+    match descriptions.find_description(&normalised) {\n+        Some(ref description) => {\n+            // Slice off the leading newline and print.\n+            print!(\"{}\", &description[1..]);\n+        }\n+        None => {\n+            early_error(output, &format!(\"no extended information for {}\", code));\n+        }\n+    }\n+}\n+\n+fn check_cfg(sopts: &config::Options,\n+             output: ErrorOutputType) {\n+    let mut emitter: Box<Emitter> = match output {\n+        config::ErrorOutputType::HumanReadable(color_config) => {\n+            Box::new(errors::emitter::BasicEmitter::stderr(color_config))\n+        }\n+        config::ErrorOutputType::Json => Box::new(errors::json::JsonEmitter::basic()),\n+    };\n+\n+    let mut saw_invalid_predicate = false;\n+    for item in sopts.cfg.iter() {\n+        match item.node {\n+            ast::MetaList(ref pred, _) => {\n+                saw_invalid_predicate = true;\n+                emitter.emit(None,\n+                             &format!(\"invalid predicate in --cfg command line argument: `{}`\",\n+                                      pred),\n+                             None,\n+                             errors::Level::Fatal);\n+            }\n+            _ => {},\n+        }\n+    }\n+\n+    if saw_invalid_predicate {\n+        panic!(errors::FatalError);\n+    }\n+}\n+\n impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n     fn early_callback(&mut self,\n                       matches: &getopts::Matches,\n+                      sopts: &config::Options,\n                       descriptions: &diagnostics::registry::Registry,\n                       output: ErrorOutputType)\n                       -> Compilation {\n-        match matches.opt_str(\"explain\") {\n-            Some(ref code) => {\n-                let normalised = if !code.starts_with(\"E\") {\n-                    format!(\"E{0:0>4}\", code)\n-                } else {\n-                    code.to_string()\n-                };\n-                match descriptions.find_description(&normalised) {\n-                    Some(ref description) => {\n-                        // Slice off the leading newline and print.\n-                        print!(\"{}\", &description[1..]);\n-                    }\n-                    None => {\n-                        early_error(output, &format!(\"no extended information for {}\", code));\n-                    }\n-                }\n-                return Compilation::Stop;\n-            }\n-            None => (),\n+        if let Some(ref code) = matches.opt_str(\"explain\") {\n+            handle_explain(code, descriptions, output);\n+            return Compilation::Stop;\n         }\n \n-        return Compilation::Continue;\n+        check_cfg(sopts, output);\n+        Compilation::Continue\n     }\n \n     fn no_input(&mut self,"}, {"sha": "09fe6cec49c2e4b653d50509504a947df6f00fa7", "filename": "src/test/compile-fail/cfg-attr-invalid-predicate.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/052b3fd4a0c484638a8e8b30f9b628abfaeffde4/src%2Ftest%2Fcompile-fail%2Fcfg-attr-invalid-predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052b3fd4a0c484638a8e8b30f9b628abfaeffde4/src%2Ftest%2Fcompile-fail%2Fcfg-attr-invalid-predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcfg-attr-invalid-predicate.rs?ref=052b3fd4a0c484638a8e8b30f9b628abfaeffde4", "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[cfg(foo(bar))] //~ ERROR invalid predicate `foo`\n+fn main() {}"}, {"sha": "794b8bb86bb5741a3a9ac850ce563a87116b12a3", "filename": "src/test/compile-fail/issue-31495.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/052b3fd4a0c484638a8e8b30f9b628abfaeffde4/src%2Ftest%2Fcompile-fail%2Fissue-31495.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052b3fd4a0c484638a8e8b30f9b628abfaeffde4/src%2Ftest%2Fcompile-fail%2Fissue-31495.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-31495.rs?ref=052b3fd4a0c484638a8e8b30f9b628abfaeffde4", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --cfg foo(bar)\n+// error-pattern: invalid predicate in --cfg command line argument: `foo`\n+fn main() {}"}, {"sha": "42784e009ee44a962b2259610754335e8771006b", "filename": "src/test/run-pass-fulldeps/compiler-calls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/052b3fd4a0c484638a8e8b30f9b628abfaeffde4/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052b3fd4a0c484638a8e8b30f9b628abfaeffde4/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs?ref=052b3fd4a0c484638a8e8b30f9b628abfaeffde4", "patch": "@@ -34,6 +34,7 @@ struct TestCalls {\n impl<'a> CompilerCalls<'a> for TestCalls {\n     fn early_callback(&mut self,\n                       _: &getopts::Matches,\n+                      _: &config::Options,\n                       _: &diagnostics::registry::Registry,\n                       _: config::ErrorOutputType)\n                       -> Compilation {"}]}