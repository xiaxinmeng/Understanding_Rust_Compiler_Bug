{"sha": "389352c4bbd56024eefd1566e06dcba04d223f92", "node_id": "C_kwDOAAsO6NoAKDM4OTM1MmM0YmJkNTYwMjRlZWZkMTU2NmUwNmRjYmEwNGQyMjNmOTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-15T05:39:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-15T05:39:29Z"}, "message": "Auto merge of #98123 - JohnTitor:rollup-rfg1a4s, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #97822 (Filter out intrinsics if we have other import candidates to suggest)\n - #98026 (Move some tests to more reasonable directories)\n - #98067 (compiler: remove unused deps)\n - #98078 (Use unchecked mul to compute slice sizes)\n - #98083 (Rename rustc_serialize::opaque::Encoder as MemEncoder.)\n - #98087 (Suggest adding a `#[macro_export]` to a private macro)\n - #98113 (Fix misspelling of \"constraint\" as \"contraint\")\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "edb2f035bc8ad77fd480002ddfc6d6562cde5a2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edb2f035bc8ad77fd480002ddfc6d6562cde5a2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/389352c4bbd56024eefd1566e06dcba04d223f92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/389352c4bbd56024eefd1566e06dcba04d223f92", "html_url": "https://github.com/rust-lang/rust/commit/389352c4bbd56024eefd1566e06dcba04d223f92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/389352c4bbd56024eefd1566e06dcba04d223f92/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddb6cc85243ac4761fbc32a407b10216544fe57b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddb6cc85243ac4761fbc32a407b10216544fe57b", "html_url": "https://github.com/rust-lang/rust/commit/ddb6cc85243ac4761fbc32a407b10216544fe57b"}, {"sha": "1b8fc2f8f66f49bfa1538eeac2a9bd776833b22f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b8fc2f8f66f49bfa1538eeac2a9bd776833b22f", "html_url": "https://github.com/rust-lang/rust/commit/1b8fc2f8f66f49bfa1538eeac2a9bd776833b22f"}], "stats": {"total": 528, "additions": 322, "deletions": 206}, "files": [{"sha": "b47e8147404c50272a4974bb8ecd28abbc24ae39", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -3678,7 +3678,6 @@ dependencies = [\n  \"libloading\",\n  \"measureme 10.0.0\",\n  \"rustc-demangle\",\n- \"rustc_arena\",\n  \"rustc_ast\",\n  \"rustc_attr\",\n  \"rustc_codegen_ssa\",\n@@ -3801,7 +3800,6 @@ dependencies = [\n  \"rustc_ast\",\n  \"rustc_ast_pretty\",\n  \"rustc_codegen_ssa\",\n- \"rustc_const_eval\",\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n  \"rustc_errors\",\n@@ -3816,7 +3814,6 @@ dependencies = [\n  \"rustc_parse\",\n  \"rustc_plugin_impl\",\n  \"rustc_save_analysis\",\n- \"rustc_serialize\",\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n@@ -3912,7 +3909,6 @@ dependencies = [\n  \"rustc_ast\",\n  \"rustc_data_structures\",\n  \"rustc_error_messages\",\n- \"rustc_feature\",\n  \"rustc_index\",\n  \"rustc_macros\",\n  \"rustc_serialize\",\n@@ -3973,7 +3969,6 @@ dependencies = [\n  \"rustc_macros\",\n  \"rustc_middle\",\n  \"rustc_serialize\",\n- \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"smallvec\",\n@@ -4207,7 +4202,6 @@ dependencies = [\n  \"rustc_index\",\n  \"rustc_middle\",\n  \"rustc_serialize\",\n- \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"smallvec\",\n@@ -4229,7 +4223,6 @@ dependencies = [\n  \"rustc_index\",\n  \"rustc_middle\",\n  \"rustc_mir_dataflow\",\n- \"rustc_query_system\",\n  \"rustc_serialize\",\n  \"rustc_session\",\n  \"rustc_span\",\n@@ -4244,7 +4237,6 @@ name = \"rustc_monomorphize\"\n version = \"0.0.0\"\n dependencies = [\n  \"rustc_data_structures\",\n- \"rustc_errors\",\n  \"rustc_hir\",\n  \"rustc_index\",\n  \"rustc_middle\",\n@@ -4296,7 +4288,6 @@ dependencies = [\n  \"rustc_index\",\n  \"rustc_lexer\",\n  \"rustc_middle\",\n- \"rustc_parse\",\n  \"rustc_serialize\",\n  \"rustc_session\",\n  \"rustc_span\",\n@@ -4311,10 +4302,8 @@ dependencies = [\n  \"libloading\",\n  \"rustc_ast\",\n  \"rustc_errors\",\n- \"rustc_hir\",\n  \"rustc_lint\",\n  \"rustc_metadata\",\n- \"rustc_middle\",\n  \"rustc_session\",\n  \"rustc_span\",\n ]\n@@ -4353,7 +4342,6 @@ dependencies = [\n  \"rustc_serialize\",\n  \"rustc_session\",\n  \"rustc_span\",\n- \"rustc_type_ir\",\n  \"tracing\",\n ]\n \n@@ -4375,7 +4363,6 @@ dependencies = [\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n- \"rustc_type_ir\",\n  \"smallvec\",\n  \"tracing\",\n ]\n@@ -4495,7 +4482,6 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_hir\",\n  \"rustc_middle\",\n- \"rustc_query_system\",\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\","}, {"sha": "e5b61d7000a32c1d1d56b463ec2c97e2007003cf", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -31,7 +31,7 @@ use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_macros::HashStable_Generic;\n-use rustc_serialize::{self, Decoder, Encoder};\n+use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_span::source_map::{respan, Spanned};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n@@ -2488,11 +2488,11 @@ rustc_index::newtype_index! {\n     }\n }\n \n-impl<S: Encoder> rustc_serialize::Encodable<S> for AttrId {\n+impl<S: Encoder> Encodable<S> for AttrId {\n     fn encode(&self, _s: &mut S) {}\n }\n \n-impl<D: Decoder> rustc_serialize::Decodable<D> for AttrId {\n+impl<D: Decoder> Decodable<D> for AttrId {\n     fn decode(_: &mut D) -> AttrId {\n         crate::attr::mk_attr_id()\n     }"}, {"sha": "cb7804ca3752d7fb79ec6084fae347f99946a290", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -871,7 +871,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     self.lower_angle_bracketed_parameter_data(data, ParamMode::Explicit, itctx).0\n                 }\n                 GenericArgs::Parenthesized(ref data) => {\n-                    self.assoc_ty_contraint_param_error_emit(data);\n+                    self.emit_bad_parenthesized_trait_in_assoc_ty(data);\n                     self.lower_angle_bracketed_parameter_data(\n                         &data.as_angle_bracketed_args(),\n                         ParamMode::Explicit,\n@@ -982,7 +982,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n     }\n \n-    fn assoc_ty_contraint_param_error_emit(&self, data: &ParenthesizedArgs) -> () {\n+    fn emit_bad_parenthesized_trait_in_assoc_ty(&self, data: &ParenthesizedArgs) {\n         let mut err = self.sess.struct_span_err(\n             data.span,\n             \"parenthesized generic arguments cannot be used in associated type constraints\","}, {"sha": "b486af133760f73ef2e68b45318224fa1b1918aa", "filename": "compiler/rustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2FCargo.toml?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -16,7 +16,6 @@ measureme = \"10.0.0\"\n tracing = \"0.1\"\n rustc_middle = { path = \"../rustc_middle\" }\n rustc-demangle = \"0.1.21\"\n-rustc_arena = { path = \"../rustc_arena\" }\n rustc_attr = { path = \"../rustc_attr\" }\n rustc_codegen_ssa = { path = \"../rustc_codegen_ssa\" }\n rustc_symbol_mangling = { path = \"../rustc_symbol_mangling\" }"}, {"sha": "e6f402ef19d870b69516a5bf5cefc0adb4fcfb82", "filename": "compiler/rustc_codegen_ssa/src/glue.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_codegen_ssa%2Fsrc%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_codegen_ssa%2Fsrc%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fglue.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -39,7 +39,12 @@ pub fn size_and_align_of_dst<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n             // The info in this case is the length of the str, so the size is that\n             // times the unit size.\n             (\n-                bx.mul(info.unwrap(), bx.const_usize(unit.size.bytes())),\n+                // All slice sizes must fit into `isize`, so this multiplication cannot (signed) wrap.\n+                // NOTE: ideally, we want the effects of both `unchecked_smul` and `unchecked_umul`\n+                // (resulting in `mul nsw nuw` in LLVM IR), since we know that the multiplication\n+                // cannot signed wrap, and that both operands are non-negative. But at the time of writing,\n+                // `BuilderMethods` can't do this, and it doesn't seem to enable any further optimizations.\n+                bx.unchecked_smul(info.unwrap(), bx.const_usize(unit.size.bytes())),\n                 bx.const_usize(unit.align.abi.bytes()),\n             )\n         }"}, {"sha": "750432b0b26530450f0a999762cb6d9751716c2c", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -29,7 +29,8 @@ use rustc_middle::dep_graph::WorkProduct;\n use rustc_middle::middle::dependency_format::Dependencies;\n use rustc_middle::middle::exported_symbols::SymbolExportKind;\n use rustc_middle::ty::query::{ExternProviders, Providers};\n-use rustc_serialize::{opaque, Decodable, Decoder, Encodable, Encoder};\n+use rustc_serialize::opaque::{MemDecoder, MemEncoder};\n+use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_session::config::{CrateType, OutputFilenames, OutputType, RUST_CGU_EXT};\n use rustc_session::cstore::{self, CrateSource};\n use rustc_session::utils::NativeLibKind;\n@@ -203,7 +204,7 @@ const RUSTC_VERSION: Option<&str> = option_env!(\"CFG_VERSION\");\n \n impl CodegenResults {\n     pub fn serialize_rlink(codegen_results: &CodegenResults) -> Vec<u8> {\n-        let mut encoder = opaque::Encoder::new();\n+        let mut encoder = MemEncoder::new();\n         encoder.emit_raw_bytes(RLINK_MAGIC);\n         // `emit_raw_bytes` is used to make sure that the version representation does not depend on\n         // Encoder's inner representation of `u32`.\n@@ -230,7 +231,7 @@ impl CodegenResults {\n             return Err(\".rlink file was produced with encoding version {version_array}, but the current version is {RLINK_VERSION}\".to_string());\n         }\n \n-        let mut decoder = opaque::Decoder::new(&data[4..], 0);\n+        let mut decoder = MemDecoder::new(&data[4..], 0);\n         let rustc_version = decoder.read_str();\n         let current_version = RUSTC_VERSION.unwrap();\n         if rustc_version != current_version {"}, {"sha": "5ff2d18dd2be375bd77725bb8f217b25110840cf", "filename": "compiler/rustc_data_structures/src/fingerprint.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -1,5 +1,5 @@\n use crate::stable_hasher;\n-use rustc_serialize::{Decodable, Encodable};\n+use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use std::convert::TryInto;\n use std::hash::{Hash, Hasher};\n \n@@ -142,14 +142,14 @@ impl stable_hasher::StableHasherResult for Fingerprint {\n \n impl_stable_hash_via_hash!(Fingerprint);\n \n-impl<E: rustc_serialize::Encoder> Encodable<E> for Fingerprint {\n+impl<E: Encoder> Encodable<E> for Fingerprint {\n     #[inline]\n     fn encode(&self, s: &mut E) {\n         s.emit_raw_bytes(&self.to_le_bytes());\n     }\n }\n \n-impl<D: rustc_serialize::Decoder> Decodable<D> for Fingerprint {\n+impl<D: Decoder> Decodable<D> for Fingerprint {\n     #[inline]\n     fn decode(d: &mut D) -> Self {\n         Fingerprint::from_le_bytes(d.read_raw_bytes(16).try_into().unwrap())\n@@ -184,7 +184,7 @@ impl std::fmt::Display for PackedFingerprint {\n     }\n }\n \n-impl<E: rustc_serialize::Encoder> Encodable<E> for PackedFingerprint {\n+impl<E: Encoder> Encodable<E> for PackedFingerprint {\n     #[inline]\n     fn encode(&self, s: &mut E) {\n         // Copy to avoid taking reference to packed field.\n@@ -193,7 +193,7 @@ impl<E: rustc_serialize::Encoder> Encodable<E> for PackedFingerprint {\n     }\n }\n \n-impl<D: rustc_serialize::Decoder> Decodable<D> for PackedFingerprint {\n+impl<D: Decoder> Decodable<D> for PackedFingerprint {\n     #[inline]\n     fn decode(d: &mut D) -> Self {\n         Self(Fingerprint::decode(d))"}, {"sha": "08d5d4f343c77ecb26db2d71437b4ee9f1a13a63", "filename": "compiler/rustc_driver/Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2FCargo.toml?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -7,7 +7,6 @@ edition = \"2021\"\n crate-type = [\"dylib\"]\n \n [dependencies]\n-libc = \"0.2\"\n tracing = { version = \"0.1.28\" }\n serde_json = \"1.0.59\"\n rustc_log = { path = \"../rustc_log\" }\n@@ -21,19 +20,20 @@ rustc_feature = { path = \"../rustc_feature\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_hir_pretty = { path = \"../rustc_hir_pretty\" }\n rustc_metadata = { path = \"../rustc_metadata\" }\n-rustc_const_eval = { path = \"../rustc_const_eval\" }\n rustc_parse = { path = \"../rustc_parse\" }\n rustc_plugin_impl = { path = \"../rustc_plugin_impl\" }\n rustc_save_analysis = { path = \"../rustc_save_analysis\" }\n rustc_codegen_ssa = { path = \"../rustc_codegen_ssa\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_error_codes = { path = \"../rustc_error_codes\" }\n rustc_interface = { path = \"../rustc_interface\" }\n-rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_typeck = { path = \"../rustc_typeck\" }\n \n+[target.'cfg(unix)'.dependencies]\n+libc = \"0.2\"\n+\n [target.'cfg(windows)'.dependencies]\n winapi = { version = \"0.3\", features = [\"consoleapi\", \"debugapi\", \"processenv\"] }\n "}, {"sha": "47ace7ca3a750e6eb77bbebad402377d6eb9ede6", "filename": "compiler/rustc_hir/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2FCargo.toml?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -8,7 +8,6 @@ doctest = false\n \n [dependencies]\n rustc_target = { path = \"../rustc_target\" }\n-rustc_feature = { path = \"../rustc_feature\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_error_messages = { path = \"../rustc_error_messages\" }"}, {"sha": "9c325faae80588ec57b9a3496e86a8a7309dbad6", "filename": "compiler/rustc_incremental/src/persist/load.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -4,7 +4,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::memmap::Mmap;\n use rustc_middle::dep_graph::{SerializedDepGraph, WorkProduct, WorkProductId};\n use rustc_middle::ty::OnDiskCache;\n-use rustc_serialize::opaque::Decoder;\n+use rustc_serialize::opaque::MemDecoder;\n use rustc_serialize::Decodable;\n use rustc_session::config::IncrementalStateAssertion;\n use rustc_session::Session;\n@@ -156,7 +156,7 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n \n         if let LoadResult::Ok { data: (work_products_data, start_pos) } = load_result {\n             // Decode the list of work_products\n-            let mut work_product_decoder = Decoder::new(&work_products_data[..], start_pos);\n+            let mut work_product_decoder = MemDecoder::new(&work_products_data[..], start_pos);\n             let work_products: Vec<SerializedWorkProduct> =\n                 Decodable::decode(&mut work_product_decoder);\n \n@@ -193,7 +193,7 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n             LoadResult::DataOutOfDate => LoadResult::DataOutOfDate,\n             LoadResult::Error { message } => LoadResult::Error { message },\n             LoadResult::Ok { data: (bytes, start_pos) } => {\n-                let mut decoder = Decoder::new(&bytes, start_pos);\n+                let mut decoder = MemDecoder::new(&bytes, start_pos);\n                 let prev_commandline_args_hash = u64::decode(&mut decoder);\n \n                 if prev_commandline_args_hash != expected_hash {"}, {"sha": "bbc2b767734714152aea4a8a31084d4bf2725008", "filename": "compiler/rustc_infer/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_infer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_infer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2FCargo.toml?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -14,7 +14,6 @@ rustc_errors = { path = \"../rustc_errors\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_macros = { path = \"../rustc_macros\" }\n-rustc_session = { path = \"../rustc_session\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_target = { path = \"../rustc_target\" }"}, {"sha": "26b1b9948a0472c226654f8118609790eb112ebe", "filename": "compiler/rustc_interface/Cargo.toml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2FCargo.toml?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -7,7 +7,6 @@ edition = \"2021\"\n doctest = false\n \n [dependencies]\n-libc = \"0.2\"\n libloading = \"0.7.1\"\n tracing = \"0.1\"\n rustc-rayon-core = { version = \"0.4.0\", optional = true }\n@@ -49,6 +48,9 @@ rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n rustc_ty_utils = { path = \"../rustc_ty_utils\" }\n tempfile = \"3.2\"\n \n+[target.'cfg(unix)'.dependencies]\n+libc = \"0.2\"\n+\n [target.'cfg(windows)'.dependencies]\n winapi = { version = \"0.3\", features = [\"libloaderapi\"] }\n "}, {"sha": "c1ded99a25af56fd51bd35c24ce6f6bfbe4cd6f7", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -26,7 +26,8 @@ use rustc_middle::ty::codec::TyDecoder;\n use rustc_middle::ty::fast_reject::SimplifiedType;\n use rustc_middle::ty::GeneratorDiagnosticData;\n use rustc_middle::ty::{self, ParameterizedOverTcx, Ty, TyCtxt, Visibility};\n-use rustc_serialize::{opaque, Decodable, Decoder};\n+use rustc_serialize::opaque::MemDecoder;\n+use rustc_serialize::{Decodable, Decoder};\n use rustc_session::cstore::{\n     CrateSource, ExternCrate, ForeignModule, LinkagePreference, NativeLib,\n };\n@@ -154,7 +155,7 @@ struct ImportedSourceFile {\n }\n \n pub(super) struct DecodeContext<'a, 'tcx> {\n-    opaque: opaque::Decoder<'a>,\n+    opaque: MemDecoder<'a>,\n     cdata: Option<CrateMetadataRef<'a>>,\n     blob: &'a MetadataBlob,\n     sess: Option<&'tcx Session>,\n@@ -186,7 +187,7 @@ pub(super) trait Metadata<'a, 'tcx>: Copy {\n     fn decoder(self, pos: usize) -> DecodeContext<'a, 'tcx> {\n         let tcx = self.tcx();\n         DecodeContext {\n-            opaque: opaque::Decoder::new(self.blob(), pos),\n+            opaque: MemDecoder::new(self.blob(), pos),\n             cdata: self.cdata(),\n             blob: self.blob(),\n             sess: self.sess().or(tcx.map(|tcx| tcx.sess)),\n@@ -418,7 +419,7 @@ impl<'a, 'tcx> TyDecoder for DecodeContext<'a, 'tcx> {\n     where\n         F: FnOnce(&mut Self) -> R,\n     {\n-        let new_opaque = opaque::Decoder::new(self.opaque.data, pos);\n+        let new_opaque = MemDecoder::new(self.opaque.data, pos);\n         let old_opaque = mem::replace(&mut self.opaque, new_opaque);\n         let old_state = mem::replace(&mut self.lazy_state, LazyState::NoNode);\n         let r = f(self);"}, {"sha": "26fb21020008a712fcaefe98c930f4476570522f", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -27,7 +27,8 @@ use rustc_middle::ty::codec::TyEncoder;\n use rustc_middle::ty::fast_reject::{self, SimplifiedType, TreatParams};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, SymbolName, Ty, TyCtxt};\n-use rustc_serialize::{opaque, Encodable, Encoder};\n+use rustc_serialize::opaque::MemEncoder;\n+use rustc_serialize::{Encodable, Encoder};\n use rustc_session::config::CrateType;\n use rustc_session::cstore::{ForeignModule, LinkagePreference, NativeLib};\n use rustc_span::hygiene::{ExpnIndex, HygieneEncodeContext, MacroKind};\n@@ -43,7 +44,7 @@ use std::num::NonZeroUsize;\n use tracing::{debug, trace};\n \n pub(super) struct EncodeContext<'a, 'tcx> {\n-    opaque: opaque::Encoder,\n+    opaque: MemEncoder,\n     tcx: TyCtxt<'tcx>,\n     feat: &'tcx rustc_feature::Features,\n \n@@ -93,8 +94,8 @@ macro_rules! encoder_methods {\n }\n \n impl<'a, 'tcx> Encoder for EncodeContext<'a, 'tcx> {\n-    type Ok = <opaque::Encoder as Encoder>::Ok;\n-    type Err = <opaque::Encoder as Encoder>::Err;\n+    type Ok = <MemEncoder as Encoder>::Ok;\n+    type Err = <MemEncoder as Encoder>::Err;\n \n     encoder_methods! {\n         emit_usize(usize);\n@@ -2180,7 +2181,7 @@ pub fn encode_metadata(tcx: TyCtxt<'_>) -> EncodedMetadata {\n }\n \n fn encode_metadata_impl(tcx: TyCtxt<'_>) -> EncodedMetadata {\n-    let mut encoder = opaque::Encoder::new();\n+    let mut encoder = MemEncoder::new();\n     encoder.emit_raw_bytes(METADATA_HEADER);\n \n     // Will be filled with the root position after encoding everything."}, {"sha": "04f0847f5cccc4d1a0c01cc67aabf0445ac2219b", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -22,7 +22,7 @@ use rustc_middle::ty::fast_reject::SimplifiedType;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, ReprOptions, Ty};\n use rustc_middle::ty::{GeneratorDiagnosticData, ParameterizedOverTcx, TyCtxt};\n-use rustc_serialize::opaque::Encoder;\n+use rustc_serialize::opaque::MemEncoder;\n use rustc_session::config::SymbolManglingVersion;\n use rustc_session::cstore::{CrateDepKind, ForeignModule, LinkagePreference, NativeLib};\n use rustc_span::edition::Edition;\n@@ -323,7 +323,7 @@ macro_rules! define_tables {\n         }\n \n         impl TableBuilders {\n-            fn encode(&self, buf: &mut Encoder) -> LazyTables {\n+            fn encode(&self, buf: &mut MemEncoder) -> LazyTables {\n                 LazyTables {\n                     $($name: self.$name.encode(buf)),+\n                 }"}, {"sha": "5ab4269ae99ade6d44f21fba1b2b1af707b5ef86", "filename": "compiler/rustc_metadata/src/rmeta/table.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -4,8 +4,8 @@ use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_hir::def::{CtorKind, CtorOf};\n use rustc_index::vec::Idx;\n use rustc_middle::ty::ParameterizedOverTcx;\n-use rustc_serialize::opaque::Encoder;\n-use rustc_serialize::Encoder as _;\n+use rustc_serialize::opaque::MemEncoder;\n+use rustc_serialize::Encoder;\n use rustc_span::hygiene::MacroKind;\n use std::convert::TryInto;\n use std::marker::PhantomData;\n@@ -281,7 +281,7 @@ where\n         Some(value).write_to_bytes(&mut self.blocks[i]);\n     }\n \n-    pub(crate) fn encode<const N: usize>(&self, buf: &mut Encoder) -> LazyTable<I, T>\n+    pub(crate) fn encode<const N: usize>(&self, buf: &mut MemEncoder) -> LazyTable<I, T>\n     where\n         Option<T>: FixedSizeEncoding<ByteArray = [u8; N]>,\n     {"}, {"sha": "1279f5aee369194446ff1705cabb0151528db50a", "filename": "compiler/rustc_middle/src/mir/graph_cyclic_cache.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgraph_cyclic_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgraph_cyclic_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgraph_cyclic_cache.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -3,7 +3,7 @@ use rustc_data_structures::graph::{\n };\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::OnceCell;\n-use rustc_serialize as serialize;\n+use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n \n /// Helper type to cache the result of `graph::is_cyclic`.\n #[derive(Clone, Debug)]\n@@ -36,17 +36,17 @@ impl GraphIsCyclicCache {\n     }\n }\n \n-impl<S: serialize::Encoder> serialize::Encodable<S> for GraphIsCyclicCache {\n+impl<S: Encoder> Encodable<S> for GraphIsCyclicCache {\n     #[inline]\n     fn encode(&self, s: &mut S) {\n-        serialize::Encodable::encode(&(), s);\n+        Encodable::encode(&(), s);\n     }\n }\n \n-impl<D: serialize::Decoder> serialize::Decodable<D> for GraphIsCyclicCache {\n+impl<D: Decoder> Decodable<D> for GraphIsCyclicCache {\n     #[inline]\n     fn decode(d: &mut D) -> Self {\n-        let () = serialize::Decodable::decode(d);\n+        let () = Decodable::decode(d);\n         Self::new()\n     }\n }"}, {"sha": "620cf7e336ba47274f0521d7e13e114305fcc6c8", "filename": "compiler/rustc_middle/src/mir/predecessors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -3,7 +3,7 @@\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::OnceCell;\n use rustc_index::vec::IndexVec;\n-use rustc_serialize as serialize;\n+use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use smallvec::SmallVec;\n \n use crate::mir::{BasicBlock, BasicBlockData};\n@@ -54,12 +54,12 @@ impl PredecessorCache {\n     }\n }\n \n-impl<S: serialize::Encoder> serialize::Encodable<S> for PredecessorCache {\n+impl<S: Encoder> Encodable<S> for PredecessorCache {\n     #[inline]\n     fn encode(&self, _s: &mut S) {}\n }\n \n-impl<D: serialize::Decoder> serialize::Decodable<D> for PredecessorCache {\n+impl<D: Decoder> Decodable<D> for PredecessorCache {\n     #[inline]\n     fn decode(_: &mut D) -> Self {\n         Self::new()"}, {"sha": "99d13fcfef43e32e2d326e898b6c5813b08e3d4b", "filename": "compiler/rustc_middle/src/mir/switch_sources.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fswitch_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fswitch_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fswitch_sources.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -5,7 +5,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::stable_map::FxHashMap;\n use rustc_data_structures::sync::OnceCell;\n use rustc_index::vec::IndexVec;\n-use rustc_serialize as serialize;\n+use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use smallvec::SmallVec;\n \n use crate::mir::{BasicBlock, BasicBlockData, Terminator, TerminatorKind};\n@@ -54,12 +54,12 @@ impl SwitchSourceCache {\n     }\n }\n \n-impl<S: serialize::Encoder> serialize::Encodable<S> for SwitchSourceCache {\n+impl<S: Encoder> Encodable<S> for SwitchSourceCache {\n     #[inline]\n     fn encode(&self, _s: &mut S) {}\n }\n \n-impl<D: serialize::Decoder> serialize::Decodable<D> for SwitchSourceCache {\n+impl<D: Decoder> Decodable<D> for SwitchSourceCache {\n     #[inline]\n     fn decode(_: &mut D) -> Self {\n         Self::new()"}, {"sha": "7228e3f33b126e5bcf16e882c94b536e8cc92e06", "filename": "compiler/rustc_middle/src/mir/traversal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -1,7 +1,7 @@\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::OnceCell;\n use rustc_index::bit_set::BitSet;\n-use rustc_serialize as serialize;\n+use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n \n use super::*;\n \n@@ -365,12 +365,12 @@ impl PostorderCache {\n     }\n }\n \n-impl<S: serialize::Encoder> serialize::Encodable<S> for PostorderCache {\n+impl<S: Encoder> Encodable<S> for PostorderCache {\n     #[inline]\n     fn encode(&self, _s: &mut S) {}\n }\n \n-impl<D: serialize::Decoder> serialize::Decodable<D> for PostorderCache {\n+impl<D: Decoder> Decodable<D> for PostorderCache {\n     #[inline]\n     fn decode(_: &mut D) -> Self {\n         Self::new()"}, {"sha": "a0c70a3fd81f1880dda81c076e65b3022b7a4fdf", "filename": "compiler/rustc_mir_dataflow/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_mir_dataflow%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_mir_dataflow%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2FCargo.toml?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -18,6 +18,5 @@ rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_middle = { path = \"../rustc_middle\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n-rustc_session = { path = \"../rustc_session\" }\n rustc_target = { path = \"../rustc_target\" }\n rustc_span = { path = \"../rustc_span\" }"}, {"sha": "8a8098e9ab996db255c48ecc2310389576fca848", "filename": "compiler/rustc_mir_transform/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_mir_transform%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_mir_transform%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2FCargo.toml?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -19,7 +19,6 @@ rustc_index = { path = \"../rustc_index\" }\n rustc_middle = { path = \"../rustc_middle\" }\n rustc_const_eval = { path = \"../rustc_const_eval\" }\n rustc_mir_dataflow = { path = \"../rustc_mir_dataflow\" }\n-rustc_query_system = { path = \"../rustc_query_system\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_target = { path = \"../rustc_target\" }"}, {"sha": "e4ac47f4982cbd60debb0f9ca2fd36c3d53e3d8e", "filename": "compiler/rustc_monomorphize/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_monomorphize%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_monomorphize%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2FCargo.toml?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -10,7 +10,6 @@ doctest = false\n smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n tracing = \"0.1\"\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n-rustc_errors = { path = \"../rustc_errors\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_middle = { path = \"../rustc_middle\" }"}, {"sha": "787d37277c6c03c557842773372379b74ffadc40", "filename": "compiler/rustc_passes/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2FCargo.toml?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -12,7 +12,6 @@ rustc_errors = { path = \"../rustc_errors\" }\n rustc_expand = { path = \"../rustc_expand\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n-rustc_parse = { path = \"../rustc_parse\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_target = { path = \"../rustc_target\" }\n rustc_ast = { path = \"../rustc_ast\" }"}, {"sha": "b6ea533c80bddc8973167b78d7c368e5d2f302d2", "filename": "compiler/rustc_plugin_impl/Cargo.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_plugin_impl%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_plugin_impl%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_plugin_impl%2FCargo.toml?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -9,9 +9,7 @@ doctest = false\n \n [dependencies]\n libloading = \"0.7.1\"\n-rustc_middle = { path = \"../rustc_middle\" }\n rustc_errors = { path = \"../rustc_errors\" }\n-rustc_hir = { path = \"../rustc_hir\" }\n rustc_lint = { path = \"../rustc_lint\" }\n rustc_metadata = { path = \"../rustc_metadata\" }\n rustc_ast = { path = \"../rustc_ast\" }"}, {"sha": "5673bb83b15f47bb7cf0e1d6e6ccb71e6b82ff0e", "filename": "compiler/rustc_query_impl/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_query_impl%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_query_impl%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2FCargo.toml?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -20,7 +20,6 @@ rustc_query_system = { path = \"../rustc_query_system\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_span = { path = \"../rustc_span\" }\n-rustc_type_ir = { path = \"../rustc_type_ir\" }\n tracing = \"0.1\"\n \n [features]"}, {"sha": "d7327ca4bc60200f56dfb477856ef61f1bc78379", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_query_system::dep_graph::DepContext;\n use rustc_query_system::query::{QueryCache, QueryContext, QuerySideEffects};\n use rustc_serialize::{\n-    opaque::{self, FileEncodeResult, FileEncoder, IntEncodedWithFixedSize},\n+    opaque::{FileEncodeResult, FileEncoder, IntEncodedWithFixedSize, MemDecoder},\n     Decodable, Decoder, Encodable, Encoder,\n };\n use rustc_session::Session;\n@@ -158,7 +158,7 @@ impl<'sess> rustc_middle::ty::OnDiskCache<'sess> for OnDiskCache<'sess> {\n \n         // Wrap in a scope so we can borrow `data`.\n         let footer: Footer = {\n-            let mut decoder = opaque::Decoder::new(&data, start_pos);\n+            let mut decoder = MemDecoder::new(&data, start_pos);\n \n             // Decode the *position* of the footer, which can be found in the\n             // last 8 bytes of the file.\n@@ -437,7 +437,7 @@ impl<'sess> OnDiskCache<'sess> {\n         let serialized_data = self.serialized_data.read();\n         let mut decoder = CacheDecoder {\n             tcx,\n-            opaque: opaque::Decoder::new(serialized_data.as_deref().unwrap_or(&[]), pos.to_usize()),\n+            opaque: MemDecoder::new(serialized_data.as_deref().unwrap_or(&[]), pos.to_usize()),\n             source_map: self.source_map,\n             file_index_to_file: &self.file_index_to_file,\n             file_index_to_stable_id: &self.file_index_to_stable_id,\n@@ -458,7 +458,7 @@ impl<'sess> OnDiskCache<'sess> {\n /// will also handle things that contain `Ty` instances.\n pub struct CacheDecoder<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    opaque: opaque::Decoder<'a>,\n+    opaque: MemDecoder<'a>,\n     source_map: &'a SourceMap,\n     file_index_to_file: &'a Lock<FxHashMap<SourceFileIndex, Lrc<SourceFile>>>,\n     file_index_to_stable_id: &'a FxHashMap<SourceFileIndex, EncodedSourceFileId>,\n@@ -510,7 +510,7 @@ trait DecoderWithPosition: Decoder {\n     fn position(&self) -> usize;\n }\n \n-impl<'a> DecoderWithPosition for opaque::Decoder<'a> {\n+impl<'a> DecoderWithPosition for MemDecoder<'a> {\n     fn position(&self) -> usize {\n         self.position()\n     }\n@@ -586,7 +586,7 @@ impl<'a, 'tcx> TyDecoder for CacheDecoder<'a, 'tcx> {\n     {\n         debug_assert!(pos < self.opaque.data.len());\n \n-        let new_opaque = opaque::Decoder::new(self.opaque.data, pos);\n+        let new_opaque = MemDecoder::new(self.opaque.data, pos);\n         let old_opaque = mem::replace(&mut self.opaque, new_opaque);\n         let r = f(self);\n         self.opaque = old_opaque;"}, {"sha": "b5a37cf324b008fa10c4351cec36e95adecc34e5", "filename": "compiler/rustc_query_system/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_query_system%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_query_system%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2FCargo.toml?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -21,7 +21,6 @@ rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_target = { path = \"../rustc_target\" }\n-rustc_type_ir = { path = \"../rustc_type_ir\" }\n parking_lot = \"0.11\"\n smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n "}, {"sha": "d583b45698ac4160b50f852adc91f781b3bebcc4", "filename": "compiler/rustc_query_system/src/dep_graph/serialized.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -19,7 +19,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::sync::Lock;\n use rustc_index::vec::{Idx, IndexVec};\n-use rustc_serialize::opaque::{self, FileEncodeResult, FileEncoder, IntEncodedWithFixedSize};\n+use rustc_serialize::opaque::{FileEncodeResult, FileEncoder, IntEncodedWithFixedSize, MemDecoder};\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use smallvec::SmallVec;\n use std::convert::TryInto;\n@@ -96,11 +96,11 @@ impl<K: DepKind> SerializedDepGraph<K> {\n     }\n }\n \n-impl<'a, K: DepKind + Decodable<opaque::Decoder<'a>>> Decodable<opaque::Decoder<'a>>\n+impl<'a, K: DepKind + Decodable<MemDecoder<'a>>> Decodable<MemDecoder<'a>>\n     for SerializedDepGraph<K>\n {\n     #[instrument(level = \"debug\", skip(d))]\n-    fn decode(d: &mut opaque::Decoder<'a>) -> SerializedDepGraph<K> {\n+    fn decode(d: &mut MemDecoder<'a>) -> SerializedDepGraph<K> {\n         let start_position = d.position();\n \n         // The last 16 bytes are the node count and edge count."}, {"sha": "b0e7679af972bea31ad96a6d5b64b25de7813d34", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -10,7 +10,9 @@ use crate::imports::{Import, ImportKind};\n use crate::macros::{MacroRulesBinding, MacroRulesScope, MacroRulesScopeRef};\n use crate::Namespace::{self, MacroNS, TypeNS, ValueNS};\n use crate::{Determinacy, ExternPreludeEntry, Finalize, Module, ModuleKind, ModuleOrUniformRoot};\n-use crate::{NameBinding, NameBindingKind, ParentScope, PathResult, PerNS, ResolutionError};\n+use crate::{\n+    MacroData, NameBinding, NameBindingKind, ParentScope, PathResult, PerNS, ResolutionError,\n+};\n use crate::{Resolver, ResolverArenas, Segment, ToNameBinding, VisResolutionError};\n \n use rustc_ast::visit::{self, AssocCtxt, Visitor};\n@@ -20,7 +22,6 @@ use rustc_ast_lowering::ResolverAstLowering;\n use rustc_attr as attr;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{struct_span_err, Applicability};\n-use rustc_expand::base::SyntaxExtension;\n use rustc_expand::expand::AstFragment;\n use rustc_hir::def::{self, *};\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID};\n@@ -180,26 +181,32 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    pub(crate) fn get_macro(&mut self, res: Res) -> Option<Lrc<SyntaxExtension>> {\n+    pub(crate) fn get_macro(&mut self, res: Res) -> Option<MacroData> {\n         match res {\n             Res::Def(DefKind::Macro(..), def_id) => Some(self.get_macro_by_def_id(def_id)),\n-            Res::NonMacroAttr(_) => Some(self.non_macro_attr.clone()),\n+            Res::NonMacroAttr(_) => {\n+                Some(MacroData { ext: self.non_macro_attr.clone(), macro_rules: false })\n+            }\n             _ => None,\n         }\n     }\n \n-    pub(crate) fn get_macro_by_def_id(&mut self, def_id: DefId) -> Lrc<SyntaxExtension> {\n-        if let Some(ext) = self.macro_map.get(&def_id) {\n-            return ext.clone();\n+    pub(crate) fn get_macro_by_def_id(&mut self, def_id: DefId) -> MacroData {\n+        if let Some(macro_data) = self.macro_map.get(&def_id) {\n+            return macro_data.clone();\n         }\n \n-        let ext = Lrc::new(match self.cstore().load_macro_untracked(def_id, &self.session) {\n-            LoadedMacro::MacroDef(item, edition) => self.compile_macro(&item, edition).0,\n-            LoadedMacro::ProcMacro(ext) => ext,\n-        });\n+        let (ext, macro_rules) = match self.cstore().load_macro_untracked(def_id, &self.session) {\n+            LoadedMacro::MacroDef(item, edition) => (\n+                Lrc::new(self.compile_macro(&item, edition).0),\n+                matches!(item.kind, ItemKind::MacroDef(def) if def.macro_rules),\n+            ),\n+            LoadedMacro::ProcMacro(extz) => (Lrc::new(extz), false),\n+        };\n \n-        self.macro_map.insert(def_id, ext.clone());\n-        ext\n+        let macro_data = MacroData { ext, macro_rules };\n+        self.macro_map.insert(def_id, macro_data.clone());\n+        macro_data\n     }\n \n     pub(crate) fn build_reduced_graph(\n@@ -1251,7 +1258,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         };\n \n         let res = Res::Def(DefKind::Macro(ext.macro_kind()), def_id.to_def_id());\n-        self.r.macro_map.insert(def_id.to_def_id(), ext);\n+        self.r.macro_map.insert(def_id.to_def_id(), MacroData { ext, macro_rules });\n         self.r.local_macro_def_scopes.insert(def_id, parent_scope.module);\n \n         if macro_rules {"}, {"sha": "e934e189f05f33ac13faa41a5eb019ae5a346222", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -241,7 +241,7 @@ impl<'a> Resolver<'a> {\n                 {\n                     // The macro is a proc macro derive\n                     if let Some(def_id) = module.expansion.expn_data().macro_def_id {\n-                        let ext = self.get_macro_by_def_id(def_id);\n+                        let ext = self.get_macro_by_def_id(def_id).ext;\n                         if ext.builtin_name.is_none()\n                             && ext.macro_kind() == MacroKind::Derive\n                             && parent.expansion.outer_expn_is_descendant_of(*ctxt)"}, {"sha": "c6aa57f039d4fe8ab30ddac5c3a1da72ce6824a1", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -12,7 +12,7 @@ use rustc_ast::NodeId;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::intern::Interned;\n use rustc_errors::{pluralize, struct_span_err, Applicability, MultiSpan};\n-use rustc_hir::def::{self, PartialRes};\n+use rustc_hir::def::{self, DefKind, PartialRes};\n use rustc_middle::metadata::ModChild;\n use rustc_middle::span_bug;\n use rustc_middle::ty;\n@@ -922,11 +922,28 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                         .note(&format!(\"consider declaring type or module `{}` with `pub`\", ident))\n                         .emit();\n                 } else {\n-                    let note_msg =\n-                        format!(\"consider marking `{}` as `pub` in the imported module\", ident);\n-                    struct_span_err!(self.r.session, import.span, E0364, \"{}\", error_msg)\n-                        .span_note(import.span, &note_msg)\n-                        .emit();\n+                    let mut err =\n+                        struct_span_err!(self.r.session, import.span, E0364, \"{error_msg}\");\n+                    match binding.kind {\n+                        NameBindingKind::Res(Res::Def(DefKind::Macro(_), def_id), _)\n+                            // exclude decl_macro\n+                            if self.r.get_macro_by_def_id(def_id).macro_rules =>\n+                        {\n+                            err.span_help(\n+                                binding.span,\n+                                \"consider adding a `#[macro_export]` to the macro in the imported module\",\n+                            );\n+                        }\n+                        _ => {\n+                            err.span_note(\n+                                import.span,\n+                                &format!(\n+                                    \"consider marking `{ident}` as `pub` in the imported module\"\n+                                ),\n+                            );\n+                        }\n+                    }\n+                    err.emit();\n                 }\n             }\n         }"}, {"sha": "460d505ba98b50b0de92d24d7988a839201e7f39", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -396,7 +396,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n \n         // Try to lookup name in more relaxed fashion for better error reporting.\n         let ident = path.last().unwrap().ident;\n-        let candidates = self\n+        let mut candidates = self\n             .r\n             .lookup_import_candidates(ident, ns, &self.parent_scope, is_expected)\n             .into_iter()\n@@ -408,6 +408,18 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             })\n             .collect::<Vec<_>>();\n         let crate_def_id = CRATE_DEF_ID.to_def_id();\n+        // Try to filter out intrinsics candidates, as long as we have\n+        // some other candidates to suggest.\n+        let intrinsic_candidates: Vec<_> = candidates\n+            .drain_filter(|sugg| {\n+                let path = path_names_to_string(&sugg.path);\n+                path.starts_with(\"core::intrinsics::\") || path.starts_with(\"std::intrinsics::\")\n+            })\n+            .collect();\n+        if candidates.is_empty() {\n+            // Put them back if we have no more candidates to suggest...\n+            candidates.extend(intrinsic_candidates);\n+        }\n         if candidates.is_empty() && is_expected(Res::Def(DefKind::Enum, crate_def_id)) {\n             let mut enum_candidates: Vec<_> = self\n                 .r"}, {"sha": "ac4e23cc04db5348f70fa27eb3aa9f91d89e89ec", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -866,6 +866,12 @@ struct DeriveData {\n     has_derive_copy: bool,\n }\n \n+#[derive(Clone)]\n+struct MacroData {\n+    ext: Lrc<SyntaxExtension>,\n+    macro_rules: bool,\n+}\n+\n /// The main resolver class.\n ///\n /// This is the visitor that walks the whole crate.\n@@ -965,7 +971,7 @@ pub struct Resolver<'a> {\n     registered_attrs: FxHashSet<Ident>,\n     registered_tools: RegisteredTools,\n     macro_use_prelude: FxHashMap<Symbol, &'a NameBinding<'a>>,\n-    macro_map: FxHashMap<DefId, Lrc<SyntaxExtension>>,\n+    macro_map: FxHashMap<DefId, MacroData>,\n     dummy_ext_bang: Lrc<SyntaxExtension>,\n     dummy_ext_derive: Lrc<SyntaxExtension>,\n     non_macro_attr: Lrc<SyntaxExtension>,\n@@ -1522,7 +1528,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn is_builtin_macro(&mut self, res: Res) -> bool {\n-        self.get_macro(res).map_or(false, |ext| ext.builtin_name.is_some())\n+        self.get_macro(res).map_or(false, |macro_data| macro_data.ext.builtin_name.is_some())\n     }\n \n     fn macro_def(&self, mut ctxt: SyntaxContext) -> DefId {"}, {"sha": "c86c2280d1986dfa4b7c76c059d0140f7e420242", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -658,7 +658,7 @@ impl<'a> Resolver<'a> {\n             res\n         };\n \n-        res.map(|res| (self.get_macro(res), res))\n+        res.map(|res| (self.get_macro(res).map(|macro_data| macro_data.ext), res))\n     }\n \n     pub(crate) fn finalize_macro_resolutions(&mut self) {\n@@ -853,7 +853,7 @@ impl<'a> Resolver<'a> {\n         // Reserve some names that are not quite covered by the general check\n         // performed on `Resolver::builtin_attrs`.\n         if ident.name == sym::cfg || ident.name == sym::cfg_attr {\n-            let macro_kind = self.get_macro(res).map(|ext| ext.macro_kind());\n+            let macro_kind = self.get_macro(res).map(|macro_data| macro_data.ext.macro_kind());\n             if macro_kind.is_some() && sub_namespace_match(macro_kind, Some(MacroKind::Attr)) {\n                 self.session.span_err(\n                     ident.span,"}, {"sha": "f828c0b71063d85c1966e47bcef5eae2ef379996", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -1,5 +1,5 @@\n use crate::leb128::{self, max_leb128_len};\n-use crate::serialize::{self, Decoder as _, Encoder as _};\n+use crate::serialize::{Decodable, Decoder, Encodable, Encoder};\n use std::convert::TryInto;\n use std::fs::File;\n use std::io::{self, Write};\n@@ -11,13 +11,13 @@ use std::ptr;\n // Encoder\n // -----------------------------------------------------------------------------\n \n-pub struct Encoder {\n+pub struct MemEncoder {\n     pub data: Vec<u8>,\n }\n \n-impl Encoder {\n-    pub fn new() -> Encoder {\n-        Encoder { data: vec![] }\n+impl MemEncoder {\n+    pub fn new() -> MemEncoder {\n+        MemEncoder { data: vec![] }\n     }\n \n     #[inline]\n@@ -53,7 +53,7 @@ macro_rules! write_leb128 {\n /// [utf8]: https://en.wikipedia.org/w/index.php?title=UTF-8&oldid=1058865525#Codepage_layout\n const STR_SENTINEL: u8 = 0xC1;\n \n-impl serialize::Encoder for Encoder {\n+impl Encoder for MemEncoder {\n     type Ok = Vec<u8>;\n     type Err = !;\n \n@@ -161,7 +161,7 @@ pub type FileEncodeResult = Result<usize, io::Error>;\n // `FileEncoder` encodes data to file via fixed-size buffer.\n //\n // When encoding large amounts of data to a file, using `FileEncoder` may be\n-// preferred over using `Encoder` to encode to a `Vec`, and then writing the\n+// preferred over using `MemEncoder` to encode to a `Vec`, and then writing the\n // `Vec` to file, as the latter uses as much memory as there is encoded data,\n // while the former uses the fixed amount of memory allocated to the buffer.\n // `FileEncoder` also has the advantage of not needing to reallocate as data\n@@ -425,7 +425,7 @@ macro_rules! file_encoder_write_leb128 {\n     }};\n }\n \n-impl serialize::Encoder for FileEncoder {\n+impl Encoder for FileEncoder {\n     type Ok = usize;\n     type Err = io::Error;\n \n@@ -535,15 +535,15 @@ impl serialize::Encoder for FileEncoder {\n // Decoder\n // -----------------------------------------------------------------------------\n \n-pub struct Decoder<'a> {\n+pub struct MemDecoder<'a> {\n     pub data: &'a [u8],\n     position: usize,\n }\n \n-impl<'a> Decoder<'a> {\n+impl<'a> MemDecoder<'a> {\n     #[inline]\n-    pub fn new(data: &'a [u8], position: usize) -> Decoder<'a> {\n-        Decoder { data, position }\n+    pub fn new(data: &'a [u8], position: usize) -> MemDecoder<'a> {\n+        MemDecoder { data, position }\n     }\n \n     #[inline]\n@@ -566,7 +566,7 @@ macro_rules! read_leb128 {\n     ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};\n }\n \n-impl<'a> serialize::Decoder for Decoder<'a> {\n+impl<'a> Decoder for MemDecoder<'a> {\n     #[inline]\n     fn read_u128(&mut self) -> u128 {\n         read_leb128!(self, read_u128_leb128)\n@@ -688,25 +688,25 @@ impl<'a> serialize::Decoder for Decoder<'a> {\n \n // Specialize encoding byte slices. This specialization also applies to encoding `Vec<u8>`s, etc.,\n // since the default implementations call `encode` on their slices internally.\n-impl serialize::Encodable<Encoder> for [u8] {\n-    fn encode(&self, e: &mut Encoder) {\n-        serialize::Encoder::emit_usize(e, self.len());\n+impl Encodable<MemEncoder> for [u8] {\n+    fn encode(&self, e: &mut MemEncoder) {\n+        Encoder::emit_usize(e, self.len());\n         e.emit_raw_bytes(self);\n     }\n }\n \n-impl serialize::Encodable<FileEncoder> for [u8] {\n+impl Encodable<FileEncoder> for [u8] {\n     fn encode(&self, e: &mut FileEncoder) {\n-        serialize::Encoder::emit_usize(e, self.len());\n+        Encoder::emit_usize(e, self.len());\n         e.emit_raw_bytes(self);\n     }\n }\n \n // Specialize decoding `Vec<u8>`. This specialization also applies to decoding `Box<[u8]>`s, etc.,\n // since the default implementations call `decode` to produce a `Vec<u8>` internally.\n-impl<'a> serialize::Decodable<Decoder<'a>> for Vec<u8> {\n-    fn decode(d: &mut Decoder<'a>) -> Self {\n-        let len = serialize::Decoder::read_usize(d);\n+impl<'a> Decodable<MemDecoder<'a>> for Vec<u8> {\n+    fn decode(d: &mut MemDecoder<'a>) -> Self {\n+        let len = Decoder::read_usize(d);\n         d.read_raw_bytes(len).to_owned()\n     }\n }\n@@ -718,17 +718,17 @@ impl IntEncodedWithFixedSize {\n     pub const ENCODED_SIZE: usize = 8;\n }\n \n-impl serialize::Encodable<Encoder> for IntEncodedWithFixedSize {\n+impl Encodable<MemEncoder> for IntEncodedWithFixedSize {\n     #[inline]\n-    fn encode(&self, e: &mut Encoder) {\n+    fn encode(&self, e: &mut MemEncoder) {\n         let _start_pos = e.position();\n         e.emit_raw_bytes(&self.0.to_le_bytes());\n         let _end_pos = e.position();\n         debug_assert_eq!((_end_pos - _start_pos), IntEncodedWithFixedSize::ENCODED_SIZE);\n     }\n }\n \n-impl serialize::Encodable<FileEncoder> for IntEncodedWithFixedSize {\n+impl Encodable<FileEncoder> for IntEncodedWithFixedSize {\n     #[inline]\n     fn encode(&self, e: &mut FileEncoder) {\n         let _start_pos = e.position();\n@@ -738,9 +738,9 @@ impl serialize::Encodable<FileEncoder> for IntEncodedWithFixedSize {\n     }\n }\n \n-impl<'a> serialize::Decodable<Decoder<'a>> for IntEncodedWithFixedSize {\n+impl<'a> Decodable<MemDecoder<'a>> for IntEncodedWithFixedSize {\n     #[inline]\n-    fn decode(decoder: &mut Decoder<'a>) -> IntEncodedWithFixedSize {\n+    fn decode(decoder: &mut MemDecoder<'a>) -> IntEncodedWithFixedSize {\n         let _start_pos = decoder.position();\n         let bytes = decoder.read_raw_bytes(IntEncodedWithFixedSize::ENCODED_SIZE);\n         let value = u64::from_le_bytes(bytes.try_into().unwrap());"}, {"sha": "4eafb6fabde8e683028a261249f25484744468f2", "filename": "compiler/rustc_serialize/tests/opaque.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_serialize%2Ftests%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_serialize%2Ftests%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Ftests%2Fopaque.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -1,7 +1,7 @@\n #![allow(rustc::internal)]\n \n use rustc_macros::{Decodable, Encodable};\n-use rustc_serialize::opaque::{Decoder, Encoder};\n+use rustc_serialize::opaque::{MemDecoder, MemEncoder};\n use rustc_serialize::{Decodable, Encodable, Encoder as EncoderTrait};\n use std::fmt::Debug;\n \n@@ -28,16 +28,18 @@ struct Struct {\n     q: Option<u32>,\n }\n \n-fn check_round_trip<T: Encodable<Encoder> + for<'a> Decodable<Decoder<'a>> + PartialEq + Debug>(\n+fn check_round_trip<\n+    T: Encodable<MemEncoder> + for<'a> Decodable<MemDecoder<'a>> + PartialEq + Debug,\n+>(\n     values: Vec<T>,\n ) {\n-    let mut encoder = Encoder::new();\n+    let mut encoder = MemEncoder::new();\n     for value in &values {\n         Encodable::encode(value, &mut encoder);\n     }\n \n     let data = encoder.finish().unwrap();\n-    let mut decoder = Decoder::new(&data[..], 0);\n+    let mut decoder = MemDecoder::new(&data[..], 0);\n \n     for value in values {\n         let decoded = Decodable::decode(&mut decoder);"}, {"sha": "5d3d56b1e66998d4f3e1b9557a5be051ed561751", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -1911,13 +1911,13 @@ impl_pos! {\n     pub struct CharPos(pub usize);\n }\n \n-impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {\n+impl<S: Encoder> Encodable<S> for BytePos {\n     fn encode(&self, s: &mut S) {\n         s.emit_u32(self.0);\n     }\n }\n \n-impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {\n+impl<D: Decoder> Decodable<D> for BytePos {\n     fn decode(d: &mut D) -> BytePos {\n         BytePos(d.read_u32())\n     }"}, {"sha": "d5befa10e23638f7bd9fd7860284c8d1fa6dae36", "filename": "compiler/rustc_symbol_mangling/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_symbol_mangling%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_symbol_mangling%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2FCargo.toml?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -16,5 +16,4 @@ rustc_middle = { path = \"../rustc_middle\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_target = { path = \"../rustc_target\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n-rustc_query_system = { path = \"../rustc_query_system\" }\n rustc_session = { path = \"../rustc_session\" }"}, {"sha": "9407218439993f71fa2b0e2f109e403e055b81ff", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 25, "deletions": 47, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -14,7 +14,7 @@ use crate::UintTy;\n use self::TyKind::*;\n \n use rustc_data_structures::stable_hasher::HashStable;\n-use rustc_serialize::{Decodable, Encodable};\n+use rustc_serialize::{Decodable, Decoder, Encodable};\n \n /// Defines the kinds of types used by the type system.\n ///\n@@ -833,56 +833,34 @@ where\n     I::AllocId: Decodable<D>,\n {\n     fn decode(d: &mut D) -> Self {\n-        match rustc_serialize::Decoder::read_usize(d) {\n+        match Decoder::read_usize(d) {\n             0 => Bool,\n             1 => Char,\n-            2 => Int(rustc_serialize::Decodable::decode(d)),\n-            3 => Uint(rustc_serialize::Decodable::decode(d)),\n-            4 => Float(rustc_serialize::Decodable::decode(d)),\n-            5 => Adt(rustc_serialize::Decodable::decode(d), rustc_serialize::Decodable::decode(d)),\n-            6 => Foreign(rustc_serialize::Decodable::decode(d)),\n+            2 => Int(Decodable::decode(d)),\n+            3 => Uint(Decodable::decode(d)),\n+            4 => Float(Decodable::decode(d)),\n+            5 => Adt(Decodable::decode(d), Decodable::decode(d)),\n+            6 => Foreign(Decodable::decode(d)),\n             7 => Str,\n-            8 => {\n-                Array(rustc_serialize::Decodable::decode(d), rustc_serialize::Decodable::decode(d))\n-            }\n-            9 => Slice(rustc_serialize::Decodable::decode(d)),\n-            10 => RawPtr(rustc_serialize::Decodable::decode(d)),\n-            11 => Ref(\n-                rustc_serialize::Decodable::decode(d),\n-                rustc_serialize::Decodable::decode(d),\n-                rustc_serialize::Decodable::decode(d),\n-            ),\n-            12 => {\n-                FnDef(rustc_serialize::Decodable::decode(d), rustc_serialize::Decodable::decode(d))\n-            }\n-            13 => FnPtr(rustc_serialize::Decodable::decode(d)),\n-            14 => Dynamic(\n-                rustc_serialize::Decodable::decode(d),\n-                rustc_serialize::Decodable::decode(d),\n-            ),\n-            15 => Closure(\n-                rustc_serialize::Decodable::decode(d),\n-                rustc_serialize::Decodable::decode(d),\n-            ),\n-            16 => Generator(\n-                rustc_serialize::Decodable::decode(d),\n-                rustc_serialize::Decodable::decode(d),\n-                rustc_serialize::Decodable::decode(d),\n-            ),\n-            17 => GeneratorWitness(rustc_serialize::Decodable::decode(d)),\n+            8 => Array(Decodable::decode(d), Decodable::decode(d)),\n+            9 => Slice(Decodable::decode(d)),\n+            10 => RawPtr(Decodable::decode(d)),\n+            11 => Ref(Decodable::decode(d), Decodable::decode(d), Decodable::decode(d)),\n+            12 => FnDef(Decodable::decode(d), Decodable::decode(d)),\n+            13 => FnPtr(Decodable::decode(d)),\n+            14 => Dynamic(Decodable::decode(d), Decodable::decode(d)),\n+            15 => Closure(Decodable::decode(d), Decodable::decode(d)),\n+            16 => Generator(Decodable::decode(d), Decodable::decode(d), Decodable::decode(d)),\n+            17 => GeneratorWitness(Decodable::decode(d)),\n             18 => Never,\n-            19 => Tuple(rustc_serialize::Decodable::decode(d)),\n-            20 => Projection(rustc_serialize::Decodable::decode(d)),\n-            21 => {\n-                Opaque(rustc_serialize::Decodable::decode(d), rustc_serialize::Decodable::decode(d))\n-            }\n-            22 => Param(rustc_serialize::Decodable::decode(d)),\n-            23 => {\n-                Bound(rustc_serialize::Decodable::decode(d), rustc_serialize::Decodable::decode(d))\n-            }\n-            24 => Placeholder(rustc_serialize::Decodable::decode(d)),\n-            25 => Infer(rustc_serialize::Decodable::decode(d)),\n-            26 => Error(rustc_serialize::Decodable::decode(d)),\n+            19 => Tuple(Decodable::decode(d)),\n+            20 => Projection(Decodable::decode(d)),\n+            21 => Opaque(Decodable::decode(d), Decodable::decode(d)),\n+            22 => Param(Decodable::decode(d)),\n+            23 => Bound(Decodable::decode(d), Decodable::decode(d)),\n+            24 => Placeholder(Decodable::decode(d)),\n+            25 => Infer(Decodable::decode(d)),\n+            26 => Error(Decodable::decode(d)),\n             _ => panic!(\n                 \"{}\",\n                 format!("}, {"sha": "da09ae9dd0662152c3efbceef17496fd157e4734", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::hir::map::Map;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_serialize::{\n-    opaque::{Decoder, FileEncoder},\n+    opaque::{FileEncoder, MemDecoder},\n     Decodable, Encodable, Encoder,\n };\n use rustc_session::getopts;\n@@ -336,7 +336,7 @@ pub(crate) fn load_call_locations(\n         let mut all_calls: AllCallLocations = FxHashMap::default();\n         for path in with_examples {\n             let bytes = fs::read(&path).map_err(|e| format!(\"{} (for path {})\", e, path))?;\n-            let mut decoder = Decoder::new(&bytes, 0);\n+            let mut decoder = MemDecoder::new(&bytes, 0);\n             let calls = AllCallLocations::decode(&mut decoder);\n \n             for (function, fn_calls) in calls.into_iter() {"}, {"sha": "a5dbef93460272a18a8c9857fc0df95bc7bf90e8", "filename": "src/test/codegen/issue-96497-slice-size-nowrap.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fcodegen%2Fissue-96497-slice-size-nowrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fcodegen%2Fissue-96497-slice-size-nowrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-96497-slice-size-nowrap.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -0,0 +1,29 @@\n+// This test case checks that LLVM is aware that computing the size of a slice cannot wrap.\n+// The possibility of wrapping results in an additional branch when dropping boxed slices\n+// in some situations, see https://github.com/rust-lang/rust/issues/96497#issuecomment-1112865218\n+\n+// compile-flags: -O\n+// min-llvm-version: 14.0\n+\n+#![crate_type=\"lib\"]\n+\n+// CHECK-LABEL: @simple_size_of_nowrap\n+#[no_mangle]\n+pub fn simple_size_of_nowrap(x: &[u32]) -> usize {\n+    // Make sure the shift used to compute the size has a nowrap flag.\n+\n+    // CHECK: [[A:%.*]] = shl nsw {{.*}}, 2\n+    // CHECK-NEXT: ret {{.*}} [[A]]\n+    core::mem::size_of_val(x)\n+}\n+\n+// CHECK-LABEL: @drop_write\n+#[no_mangle]\n+pub fn drop_write(mut x: Box<[u32]>) {\n+    // Check that this write is optimized out.\n+    // This depends on the size calculation not wrapping,\n+    // since otherwise LLVM can't tell that the memory is always deallocated if the slice len > 0.\n+\n+    // CHECK-NOT: store i32 42\n+    x[1] = 42;\n+}"}, {"sha": "4ad4ef60a5294728fef1b8d20bbb089bb2cb2695", "filename": "src/test/ui-fulldeps/deriving-encodable-decodable-box.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-box.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -7,7 +7,7 @@ extern crate rustc_macros;\n extern crate rustc_serialize;\n \n use rustc_macros::{Decodable, Encodable};\n-use rustc_serialize::opaque;\n+use rustc_serialize::opaque::{MemDecoder, MemEncoder};\n use rustc_serialize::{Decodable, Encodable, Encoder};\n \n #[derive(Encodable, Decodable)]\n@@ -18,11 +18,11 @@ struct A {\n fn main() {\n     let obj = A { foo: Box::new([true, false]) };\n \n-    let mut encoder = opaque::Encoder::new();\n+    let mut encoder = MemEncoder::new();\n     obj.encode(&mut encoder);\n     let data = encoder.finish().unwrap();\n \n-    let mut decoder = opaque::Decoder::new(&data, 0);\n+    let mut decoder = MemDecoder::new(&data, 0);\n     let obj2 = A::decode(&mut decoder);\n \n     assert_eq!(obj.foo, obj2.foo);"}, {"sha": "3ac3abae692afc4ef605fe6d96d6ed050cb3151e", "filename": "src/test/ui-fulldeps/deriving-encodable-decodable-cell-refcell.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-cell-refcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-cell-refcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fderiving-encodable-decodable-cell-refcell.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -9,7 +9,7 @@ extern crate rustc_macros;\n extern crate rustc_serialize;\n \n use rustc_macros::{Decodable, Encodable};\n-use rustc_serialize::opaque;\n+use rustc_serialize::opaque::{MemDecoder, MemEncoder};\n use rustc_serialize::{Decodable, Encodable, Encoder};\n use std::cell::{Cell, RefCell};\n \n@@ -27,11 +27,11 @@ struct B {\n fn main() {\n     let obj = B { foo: Cell::new(true), bar: RefCell::new(A { baz: 2 }) };\n \n-    let mut encoder = opaque::Encoder::new();\n+    let mut encoder = MemEncoder::new();\n     obj.encode(&mut encoder);\n     let data = encoder.finish().unwrap();\n \n-    let mut decoder = opaque::Decoder::new(&data, 0);\n+    let mut decoder = MemDecoder::new(&data, 0);\n     let obj2 = B::decode(&mut decoder);\n \n     assert_eq!(obj.foo.get(), obj2.foo.get());"}, {"sha": "b7b6e1b860d358c6b7f512766f88ed0b58f26013", "filename": "src/test/ui-fulldeps/issue-14021.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui-fulldeps%2Fissue-14021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui-fulldeps%2Fissue-14021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-14021.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -8,7 +8,7 @@ extern crate rustc_macros;\n extern crate rustc_serialize;\n \n use rustc_macros::{Decodable, Encodable};\n-use rustc_serialize::opaque;\n+use rustc_serialize::opaque::{MemDecoder, MemEncoder};\n use rustc_serialize::{Decodable, Encodable, Encoder};\n \n #[derive(Encodable, Decodable, PartialEq, Debug)]\n@@ -17,11 +17,11 @@ struct UnitLikeStruct;\n pub fn main() {\n     let obj = UnitLikeStruct;\n \n-    let mut encoder = opaque::Encoder::new();\n+    let mut encoder = MemEncoder::new();\n     obj.encode(&mut encoder);\n     let data = encoder.finish().unwrap();\n \n-    let mut decoder = opaque::Decoder::new(&data, 0);\n+    let mut decoder = MemDecoder::new(&data, 0);\n     let obj2 = UnitLikeStruct::decode(&mut decoder);\n \n     assert_eq!(obj, obj2);"}, {"sha": "503647ef4a82f16fc7a04a7dcb39608c0f410019", "filename": "src/test/ui/consts/issue-39974.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Fconsts%2Fissue-39974.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Fconsts%2Fissue-39974.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-39974.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "previous_filename": "src/test/ui/issues/issue-39974.rs"}, {"sha": "56365e51e0a741cccbc150fdaa0900b4c48ba2c3", "filename": "src/test/ui/consts/issue-39974.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Fconsts%2Fissue-39974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Fconsts%2Fissue-39974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-39974.stderr?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "previous_filename": "src/test/ui/issues/issue-39974.stderr"}, {"sha": "6aca159c47e3462c48b876e26313e6b04e087490", "filename": "src/test/ui/lifetimes/issue-17728.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Flifetimes%2Fissue-17728.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Flifetimes%2Fissue-17728.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-17728.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "previous_filename": "src/test/ui/issues/issue-17728.rs"}, {"sha": "3b25902d757e0d8c32bfbb0808feaaeb5b81acef", "filename": "src/test/ui/lifetimes/issue-17728.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Flifetimes%2Fissue-17728.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Flifetimes%2Fissue-17728.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-17728.stderr?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "previous_filename": "src/test/ui/issues/issue-17728.stderr"}, {"sha": "a7b27a99929a739aaec706ce1436d7b67d595820", "filename": "src/test/ui/lifetimes/issue-55796.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Flifetimes%2Fissue-55796.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Flifetimes%2Fissue-55796.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-55796.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "previous_filename": "src/test/ui/issues/issue-55796.rs"}, {"sha": "5809a56cd4b6b638d5f6811fd8b72d28aebae0ab", "filename": "src/test/ui/lifetimes/issue-55796.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Flifetimes%2Fissue-55796.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Flifetimes%2Fissue-55796.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-55796.stderr?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "previous_filename": "src/test/ui/issues/issue-55796.stderr"}, {"sha": "e11cdc82f32c7cdd203dbce95e62b8038c9ec37a", "filename": "src/test/ui/lto/issue-11154.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Flto%2Fissue-11154.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Flto%2Fissue-11154.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flto%2Fissue-11154.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "previous_filename": "src/test/ui/issues/issue-11154.rs"}, {"sha": "8eec8b37c85ec24320a5ccc68b260046e49cd6fd", "filename": "src/test/ui/lto/issue-11154.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Flto%2Fissue-11154.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Flto%2Fissue-11154.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flto%2Fissue-11154.stderr?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "previous_filename": "src/test/ui/issues/issue-11154.stderr"}, {"sha": "f70ca87e304a91961d5b1c62f1b24204d6a9d3e7", "filename": "src/test/ui/macros/rfc-2011-nicer-assert-messages/feature-gate-generic_assert.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Ffeature-gate-generic_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Ffeature-gate-generic_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Ffeature-gate-generic_assert.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "previous_filename": "src/test/ui/rfc-2011-nicer-assert-messages/feature-gate-generic_assert.rs"}, {"sha": "a923eb24421010995c5cc203d49e4893ad4690fb", "filename": "src/test/ui/nll/issue-46023.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Fnll%2Fissue-46023.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Fnll%2Fissue-46023.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-46023.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "previous_filename": "src/test/ui/issues/issue-46023.rs"}, {"sha": "ca19c2501205d48dec17ff4cc86336a27e72cadf", "filename": "src/test/ui/nll/issue-46023.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Fnll%2Fissue-46023.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Fnll%2Fissue-46023.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-46023.stderr?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "previous_filename": "src/test/ui/issues/issue-46023.stderr"}, {"sha": "d0aab528ed480df369b2d21f02bf0cd814a529ce", "filename": "src/test/ui/privacy/macro-private-reexport.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Fprivacy%2Fmacro-private-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Fprivacy%2Fmacro-private-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fmacro-private-reexport.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -0,0 +1,17 @@\n+// edition:2021\n+\n+#![feature(decl_macro)]\n+\n+mod foo {\n+    macro_rules! bar {\n+        () => {};\n+    }\n+\n+    pub use bar as _; //~ ERROR `bar` is only public within the crate, and cannot be re-exported outside\n+\n+    macro baz() {}\n+\n+    pub use baz as _; //~ ERROR `baz` is private, and cannot be re-exported\n+}\n+\n+fn main() {}"}, {"sha": "b8768f3612e61f3df8447f35c2c6899df9719dfd", "filename": "src/test/ui/privacy/macro-private-reexport.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Fprivacy%2Fmacro-private-reexport.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Fprivacy%2Fmacro-private-reexport.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fmacro-private-reexport.stderr?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -0,0 +1,29 @@\n+error[E0364]: `bar` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/macro-private-reexport.rs:10:13\n+   |\n+LL |     pub use bar as _;\n+   |             ^^^^^^^^\n+   |\n+help: consider adding a `#[macro_export]` to the macro in the imported module\n+  --> $DIR/macro-private-reexport.rs:6:5\n+   |\n+LL | /     macro_rules! bar {\n+LL | |         () => {};\n+LL | |     }\n+   | |_____^\n+\n+error[E0364]: `baz` is private, and cannot be re-exported\n+  --> $DIR/macro-private-reexport.rs:14:13\n+   |\n+LL |     pub use baz as _;\n+   |             ^^^^^^^^\n+   |\n+note: consider marking `baz` as `pub` in the imported module\n+  --> $DIR/macro-private-reexport.rs:14:13\n+   |\n+LL |     pub use baz as _;\n+   |             ^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0364`."}, {"sha": "c0956ef85aff6b2b6765880228149179d8a866d9", "filename": "src/test/ui/resolve/filter-intrinsics.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Fresolve%2Ffilter-intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Fresolve%2Ffilter-intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ffilter-intrinsics.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -0,0 +1,10 @@\n+fn main() {\n+    // Should suggest only `std::mem::size_of`\n+    let _ = size_of::<usize>();\n+    //~^ ERROR cannot find\n+\n+    // Should suggest `std::intrinsics::fabsf64`,\n+    // since there is no non-intrinsic to suggest.\n+    let _ = fabsf64(1.0);\n+    //~^ ERROR cannot find\n+}"}, {"sha": "955070891fbbea6084e5f9d027515d79dbe07b28", "filename": "src/test/ui/resolve/filter-intrinsics.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Fresolve%2Ffilter-intrinsics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Fresolve%2Ffilter-intrinsics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ffilter-intrinsics.stderr?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -0,0 +1,25 @@\n+error[E0425]: cannot find function `size_of` in this scope\n+  --> $DIR/filter-intrinsics.rs:3:13\n+   |\n+LL |     let _ = size_of::<usize>();\n+   |             ^^^^^^^ not found in this scope\n+   |\n+help: consider importing this function\n+   |\n+LL | use std::mem::size_of;\n+   |\n+\n+error[E0425]: cannot find function `fabsf64` in this scope\n+  --> $DIR/filter-intrinsics.rs:8:13\n+   |\n+LL |     let _ = fabsf64(1.0);\n+   |             ^^^^^^^ not found in this scope\n+   |\n+help: consider importing this function\n+   |\n+LL | use std::intrinsics::fabsf64;\n+   |\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "9f8c928c32c04dd96cdeedc02ca64d3193677484", "filename": "src/test/ui/rust-2018/uniform-paths/macro-rules.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.stderr?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -4,11 +4,11 @@ error[E0364]: `legacy_macro` is only public within the crate, and cannot be re-e\n LL |     pub use legacy_macro as _;\n    |             ^^^^^^^^^^^^^^^^^\n    |\n-note: consider marking `legacy_macro` as `pub` in the imported module\n-  --> $DIR/macro-rules.rs:11:13\n+help: consider adding a `#[macro_export]` to the macro in the imported module\n+  --> $DIR/macro-rules.rs:7:5\n    |\n-LL |     pub use legacy_macro as _;\n-   |             ^^^^^^^^^^^^^^^^^\n+LL |     macro_rules! legacy_macro { () => () }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0659]: `legacy_macro` is ambiguous\n   --> $DIR/macro-rules.rs:31:13"}, {"sha": "fdd11512da3a3503d73331c885308f6096b7ba45", "filename": "src/test/ui/traits/issue-18400.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Ftraits%2Fissue-18400.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Ftraits%2Fissue-18400.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-18400.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "previous_filename": "src/test/ui/issues/issue-18400.rs"}, {"sha": "92e0f60079f72078831c52035ccfbb776c69b991", "filename": "src/test/ui/traits/issue-18400.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Ftraits%2Fissue-18400.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Ftraits%2Fissue-18400.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-18400.stderr?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "previous_filename": "src/test/ui/issues/issue-18400.stderr"}, {"sha": "fe1cfb3dffa9e8f30d99ec7c2f5808c9625d80ad", "filename": "src/test/ui/traits/issue-18412.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Ftraits%2Fissue-18412.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Ftraits%2Fissue-18412.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-18412.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "previous_filename": "src/test/ui/issues/issue-18412.rs"}, {"sha": "b9b4c972e586ec82043fa89b79402715f7b95992", "filename": "src/test/ui/traits/issue-35869.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Ftraits%2Fissue-35869.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Ftraits%2Fissue-35869.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-35869.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "previous_filename": "src/test/ui/issues/issue-35869.rs"}, {"sha": "0780109b8432ec5b653fb412705121efa3b762a1", "filename": "src/test/ui/traits/issue-35869.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Ftraits%2Fissue-35869.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Ftraits%2Fissue-35869.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-35869.stderr?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "previous_filename": "src/test/ui/issues/issue-35869.stderr"}, {"sha": "dd2784841758cfcbec14d49636bdcd8f723b10ac", "filename": "src/test/ui/typeck/issue-29124.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Ftypeck%2Fissue-29124.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Ftypeck%2Fissue-29124.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-29124.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "previous_filename": "src/test/ui/issues/issue-29124.rs"}, {"sha": "c5d2ec0840996ac6afc42868ae0082c82226f913", "filename": "src/test/ui/typeck/issue-29124.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Ftypeck%2Fissue-29124.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftest%2Fui%2Ftypeck%2Fissue-29124.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-29124.stderr?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "previous_filename": "src/test/ui/issues/issue-29124.stderr"}, {"sha": "f59121181d29b702559b39e9ab5a3cc618e3b710", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389352c4bbd56024eefd1566e06dcba04d223f92/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=389352c4bbd56024eefd1566e06dcba04d223f92", "patch": "@@ -7,8 +7,8 @@ use std::path::Path;\n \n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n-const ROOT_ENTRY_LIMIT: usize = 969;\n-const ISSUES_ENTRY_LIMIT: usize = 2211;\n+const ROOT_ENTRY_LIMIT: usize = 968;\n+const ISSUES_ENTRY_LIMIT: usize = 2179;\n \n fn check_entries(path: &Path, bad: &mut bool) {\n     let dirs = walkdir::WalkDir::new(&path.join(\"test/ui\"))"}]}