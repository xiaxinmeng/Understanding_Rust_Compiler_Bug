{"sha": "3f8095e55043f35e08adba5fe5b0a2d687ebc514", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmODA5NWU1NTA0M2YzNWUwOGFkYmE1ZmU1YjBhMmQ2ODdlYmM1MTQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-23T07:04:50Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-28T23:25:35Z"}, "message": "core::rt: Add a very basic multi-threaded scheduling test", "tree": {"sha": "9ec5e2b31e47d2294e5f7d8d5e4cbcb9af8e0464", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ec5e2b31e47d2294e5f7d8d5e4cbcb9af8e0464"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f8095e55043f35e08adba5fe5b0a2d687ebc514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f8095e55043f35e08adba5fe5b0a2d687ebc514", "html_url": "https://github.com/rust-lang/rust/commit/3f8095e55043f35e08adba5fe5b0a2d687ebc514", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f8095e55043f35e08adba5fe5b0a2d687ebc514/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f107c415f1c88b016b9da0fa9c58e6b61f82589", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f107c415f1c88b016b9da0fa9c58e6b61f82589", "html_url": "https://github.com/rust-lang/rust/commit/7f107c415f1c88b016b9da0fa9c58e6b61f82589"}], "stats": {"total": 72, "additions": 70, "deletions": 2}, "files": [{"sha": "e78d50beebe1b12aff40825b6db0f4a918a9dd99", "filename": "src/libcore/rt/sched.rs", "status": "modified", "additions": 70, "deletions": 2, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/3f8095e55043f35e08adba5fe5b0a2d687ebc514/src%2Flibcore%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f8095e55043f35e08adba5fe5b0a2d687ebc514/src%2Flibcore%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fsched.rs?ref=3f8095e55043f35e08adba5fe5b0a2d687ebc514", "patch": "@@ -114,6 +114,8 @@ pub impl Scheduler {\n         };\n \n         fn wake_up() {\n+            let sched = Local::take::<Scheduler>();\n+            sched.resume_task_from_queue();\n         }\n     }\n \n@@ -127,8 +129,8 @@ pub impl Scheduler {\n         self.event_loop.callback(resume_task_from_queue);\n \n         fn resume_task_from_queue() {\n-            let scheduler = Local::take::<Scheduler>();\n-            scheduler.resume_task_from_queue();\n+            let sched = Local::take::<Scheduler>();\n+            sched.resume_task_from_queue();\n         }\n     }\n \n@@ -606,4 +608,70 @@ mod test {\n             };\n         }\n     }\n+\n+    #[test]\n+    fn multithreading() {\n+        use clone::Clone;\n+        use iter::Times;\n+        use rt::work_queue::WorkQueue;\n+        use rt::comm::*;\n+        use container::Container;\n+        use vec::OwnedVector;\n+        use rt::rtio::RemoteCallback;\n+\n+        do run_in_bare_thread {\n+            let work_queue1 = WorkQueue::new();\n+            let work_queue2 = work_queue1.clone();\n+\n+            let loop1 = ~UvEventLoop::new();\n+            let mut sched1 = ~Scheduler::new(loop1, work_queue1.clone());\n+            let handle1 = sched1.make_handle();\n+            let sched1_cell = Cell(sched1);\n+            let handle1_cell = Cell(handle1);\n+\n+            let loop2 = ~UvEventLoop::new();\n+            let mut sched2 = ~Scheduler::new(loop2, work_queue2.clone());\n+            let handle2 = sched2.make_handle();\n+            let sched2_cell = Cell(sched2);\n+            let handle2_cell = Cell(handle2);\n+\n+            let _thread1 = do Thread::start {\n+                let mut sched1 = sched1_cell.take();\n+                sched1.run();\n+            };\n+\n+            let _thread2 = do Thread::start {\n+                let mut sched2 = sched2_cell.take();\n+                let handle1_cell = Cell(handle1_cell.take());\n+                let handle2_cell = Cell(handle2_cell.take());\n+\n+                let task = ~do Coroutine::new(&mut sched2.stack_pool) {\n+                    // Hold handles to keep the schedulers alive\n+                    let mut handle1 = handle1_cell.take();\n+                    let mut handle2 = handle2_cell.take();\n+\n+                    let mut ports = ~[];\n+                    for 10.times {\n+                        let (port, chan) = oneshot();\n+                        let chan_cell = Cell(chan);\n+                        do spawntask_later {\n+                            chan_cell.take().send(());\n+                        }\n+                        ports.push(port);\n+\n+                        // Make sure the other scheduler is awake\n+                        handle1.remote.fire();\n+                        handle2.remote.fire();\n+                    }\n+\n+                    while !ports.is_empty() {\n+                        ports.pop().recv();\n+                    }\n+                };\n+\n+                sched2.enqueue_task(task);\n+                sched2.run();\n+            };\n+        }\n+    }\n }"}]}