{"sha": "71c2daa60aa71446451d5fa9a2c43e9881e83f03", "node_id": "C_kwDOAAsO6NoAKDcxYzJkYWE2MGFhNzE0NDY0NTFkNWZhOWEyYzQzZTk4ODFlODNmMDM", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-01T13:50:33Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-28T16:51:30Z"}, "message": "Move `ModuloArithmetic` into `Operators` lint pass", "tree": {"sha": "3073371949042b00c98f9b71b937398228881b61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3073371949042b00c98f9b71b937398228881b61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71c2daa60aa71446451d5fa9a2c43e9881e83f03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71c2daa60aa71446451d5fa9a2c43e9881e83f03", "html_url": "https://github.com/rust-lang/rust/commit/71c2daa60aa71446451d5fa9a2c43e9881e83f03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71c2daa60aa71446451d5fa9a2c43e9881e83f03/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0b0ee5bdcbf9005cdd7f48e0ad350b42387e1c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0b0ee5bdcbf9005cdd7f48e0ad350b42387e1c6", "html_url": "https://github.com/rust-lang/rust/commit/c0b0ee5bdcbf9005cdd7f48e0ad350b42387e1c6"}], "stats": {"total": 106, "additions": 53, "deletions": 53}, "files": [{"sha": "fea98c08e4a5b82211f1df003d6373b7ff65f6be", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71c2daa60aa71446451d5fa9a2c43e9881e83f03/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c2daa60aa71446451d5fa9a2c43e9881e83f03/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=71c2daa60aa71446451d5fa9a2c43e9881e83f03", "patch": "@@ -379,7 +379,6 @@ store.register_lints(&[\n     mixed_read_write_in_expression::MIXED_READ_WRITE_IN_EXPRESSION,\n     module_style::MOD_MODULE_FILES,\n     module_style::SELF_NAMED_MODULE_FILES,\n-    modulo_arithmetic::MODULO_ARITHMETIC,\n     mut_key::MUTABLE_KEY_TYPE,\n     mut_mut::MUT_MUT,\n     mut_mutex_lock::MUT_MUTEX_LOCK,\n@@ -434,6 +433,7 @@ store.register_lints(&[\n     operators::INTEGER_ARITHMETIC,\n     operators::INTEGER_DIVISION,\n     operators::MISREFACTORED_ASSIGN_OP,\n+    operators::MODULO_ARITHMETIC,\n     operators::MODULO_ONE,\n     operators::OP_REF,\n     operators::VERBOSE_BIT_MASK,"}, {"sha": "970e9db4772cb192eaf80ba336d213f92061f6e7", "filename": "clippy_lints/src/lib.register_restriction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71c2daa60aa71446451d5fa9a2c43e9881e83f03/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c2daa60aa71446451d5fa9a2c43e9881e83f03/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_restriction.rs?ref=71c2daa60aa71446451d5fa9a2c43e9881e83f03", "patch": "@@ -47,11 +47,11 @@ store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), ve\n     LintId::of(mixed_read_write_in_expression::MIXED_READ_WRITE_IN_EXPRESSION),\n     LintId::of(module_style::MOD_MODULE_FILES),\n     LintId::of(module_style::SELF_NAMED_MODULE_FILES),\n-    LintId::of(modulo_arithmetic::MODULO_ARITHMETIC),\n     LintId::of(operators::FLOAT_ARITHMETIC),\n     LintId::of(operators::FLOAT_CMP_CONST),\n     LintId::of(operators::INTEGER_ARITHMETIC),\n     LintId::of(operators::INTEGER_DIVISION),\n+    LintId::of(operators::MODULO_ARITHMETIC),\n     LintId::of(panic_in_result_fn::PANIC_IN_RESULT_FN),\n     LintId::of(panic_unimplemented::PANIC),\n     LintId::of(panic_unimplemented::TODO),"}, {"sha": "724674471f2977912a24ce1c76ea127f0a6024d2", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71c2daa60aa71446451d5fa9a2c43e9881e83f03/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c2daa60aa71446451d5fa9a2c43e9881e83f03/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=71c2daa60aa71446451d5fa9a2c43e9881e83f03", "patch": "@@ -295,7 +295,6 @@ mod missing_enforced_import_rename;\n mod missing_inline;\n mod mixed_read_write_in_expression;\n mod module_style;\n-mod modulo_arithmetic;\n mod mut_key;\n mod mut_mut;\n mod mut_mutex_lock;\n@@ -738,7 +737,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || Box::new(trait_bounds::TraitBounds::new(max_trait_bounds)));\n     store.register_late_pass(|| Box::new(comparison_chain::ComparisonChain));\n     store.register_late_pass(|| Box::new(mut_key::MutableKeyType));\n-    store.register_late_pass(|| Box::new(modulo_arithmetic::ModuloArithmetic));\n     store.register_early_pass(|| Box::new(reference::DerefAddrOf));\n     store.register_early_pass(|| Box::new(double_parens::DoubleParens));\n     store.register_late_pass(|| Box::new(format_impl::FormatImpl::new()));"}, {"sha": "7db38f0fcfbc2bb915f6bb43f8e8787dbe1f3eb3", "filename": "clippy_lints/src/operators/mod.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/71c2daa60aa71446451d5fa9a2c43e9881e83f03/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c2daa60aa71446451d5fa9a2c43e9881e83f03/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fmod.rs?ref=71c2daa60aa71446451d5fa9a2c43e9881e83f03", "patch": "@@ -16,6 +16,7 @@ mod float_equality_without_abs;\n mod identity_op;\n mod integer_division;\n mod misrefactored_assign_op;\n+mod modulo_arithmetic;\n mod modulo_one;\n mod numeric_arithmetic;\n mod op_ref;\n@@ -618,6 +619,28 @@ declare_clippy_lint! {\n     \"taking a number modulo +/-1, which can either panic/overflow or always returns 0\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for modulo arithmetic.\n+    ///\n+    /// ### Why is this bad?\n+    /// The results of modulo (%) operation might differ\n+    /// depending on the language, when negative numbers are involved.\n+    /// If you interop with different languages it might be beneficial\n+    /// to double check all places that use modulo arithmetic.\n+    ///\n+    /// For example, in Rust `17 % -3 = 2`, but in Python `17 % -3 = -1`.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let x = -17 % 3;\n+    /// ```\n+    #[clippy::version = \"1.42.0\"]\n+    pub MODULO_ARITHMETIC,\n+    restriction,\n+    \"any modulo arithmetic statement\"\n+}\n+\n pub struct Operators {\n     arithmetic_context: numeric_arithmetic::Context,\n     verbose_bit_mask_threshold: u64,\n@@ -644,6 +667,7 @@ impl_lint_pass!(Operators => [\n     FLOAT_CMP,\n     FLOAT_CMP_CONST,\n     MODULO_ONE,\n+    MODULO_ARITHMETIC,\n ]);\n impl Operators {\n     pub fn new(verbose_bit_mask_threshold: u64) -> Self {\n@@ -678,10 +702,12 @@ impl<'tcx> LateLintPass<'tcx> for Operators {\n                 cmp_owned::check(cx, op.node, lhs, rhs);\n                 float_cmp::check(cx, e, op.node, lhs, rhs);\n                 modulo_one::check(cx, e, op.node, rhs);\n+                modulo_arithmetic::check(cx, e, op.node, lhs, rhs);\n             },\n             ExprKind::AssignOp(op, lhs, rhs) => {\n                 self.arithmetic_context.check_binary(cx, e, op.node, lhs, rhs);\n                 misrefactored_assign_op::check(cx, e, op.node, lhs, rhs);\n+                modulo_arithmetic::check(cx, e, op.node, lhs, rhs);\n             },\n             ExprKind::Assign(lhs, rhs, _) => {\n                 assign_op_pattern::check(cx, e, lhs, rhs);"}, {"sha": "af4e74947f41d60ceeaaeb6442852e08e8d36a1f", "filename": "clippy_lints/src/operators/modulo_arithmetic.rs", "status": "renamed", "additions": 25, "deletions": 49, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/71c2daa60aa71446451d5fa9a2c43e9881e83f03/clippy_lints%2Fsrc%2Foperators%2Fmodulo_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c2daa60aa71446451d5fa9a2c43e9881e83f03/clippy_lints%2Fsrc%2Foperators%2Fmodulo_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fmodulo_arithmetic.rs?ref=71c2daa60aa71446451d5fa9a2c43e9881e83f03", "patch": "@@ -2,35 +2,35 @@ use clippy_utils::consts::{constant, Constant};\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::sext;\n use if_chain::if_chain;\n-use rustc_hir::{BinOpKind, Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n+use rustc_hir::{BinOpKind, Expr};\n+use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n use std::fmt::Display;\n \n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for modulo arithmetic.\n-    ///\n-    /// ### Why is this bad?\n-    /// The results of modulo (%) operation might differ\n-    /// depending on the language, when negative numbers are involved.\n-    /// If you interop with different languages it might be beneficial\n-    /// to double check all places that use modulo arithmetic.\n-    ///\n-    /// For example, in Rust `17 % -3 = 2`, but in Python `17 % -3 = -1`.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// let x = -17 % 3;\n-    /// ```\n-    #[clippy::version = \"1.42.0\"]\n-    pub MODULO_ARITHMETIC,\n-    restriction,\n-    \"any modulo arithmetic statement\"\n-}\n+use super::MODULO_ARITHMETIC;\n \n-declare_lint_pass!(ModuloArithmetic => [MODULO_ARITHMETIC]);\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    e: &'tcx Expr<'_>,\n+    op: BinOpKind,\n+    lhs: &'tcx Expr<'_>,\n+    rhs: &'tcx Expr<'_>,\n+) {\n+    if op == BinOpKind::Rem {\n+        let lhs_operand = analyze_operand(lhs, cx, e);\n+        let rhs_operand = analyze_operand(rhs, cx, e);\n+        if_chain! {\n+            if let Some(lhs_operand) = lhs_operand;\n+            if let Some(rhs_operand) = rhs_operand;\n+            then {\n+                check_const_operands(cx, e, &lhs_operand, &rhs_operand);\n+            }\n+            else {\n+                check_non_const_operands(cx, e, lhs);\n+            }\n+        }\n+    };\n+}\n \n struct OperandInfo {\n     string_representation: Option<String>,\n@@ -124,27 +124,3 @@ fn check_non_const_operands<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>,\n         );\n     }\n }\n-\n-impl<'tcx> LateLintPass<'tcx> for ModuloArithmetic {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        match &expr.kind {\n-            ExprKind::Binary(op, lhs, rhs) | ExprKind::AssignOp(op, lhs, rhs) => {\n-                if op.node == BinOpKind::Rem {\n-                    let lhs_operand = analyze_operand(lhs, cx, expr);\n-                    let rhs_operand = analyze_operand(rhs, cx, expr);\n-                    if_chain! {\n-                        if let Some(lhs_operand) = lhs_operand;\n-                        if let Some(rhs_operand) = rhs_operand;\n-                        then {\n-                            check_const_operands(cx, expr, &lhs_operand, &rhs_operand);\n-                        }\n-                        else {\n-                            check_non_const_operands(cx, expr, lhs);\n-                        }\n-                    }\n-                };\n-            },\n-            _ => {},\n-        }\n-    }\n-}", "previous_filename": "clippy_lints/src/modulo_arithmetic.rs"}]}