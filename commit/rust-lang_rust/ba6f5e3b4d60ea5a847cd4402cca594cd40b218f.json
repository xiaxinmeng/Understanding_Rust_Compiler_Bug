{"sha": "ba6f5e3b4d60ea5a847cd4402cca594cd40b218f", "node_id": "C_kwDOAAsO6NoAKGJhNmY1ZTNiNGQ2MGVhNWE4NDdjZDQ0MDJjY2E1OTRjZDQwYjIxOGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-18T10:03:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-18T10:03:28Z"}, "message": "Auto merge of #110605 - csmoe:open-cgo, r=Kobzol\n\nsupport PGO on custom project\n\nmake PGO easier for custom toolchain distribution.\n\nr? `@Kobzol`", "tree": {"sha": "c0edf2700cf9a230cfac768523571b21ca12a5fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0edf2700cf9a230cfac768523571b21ca12a5fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba6f5e3b4d60ea5a847cd4402cca594cd40b218f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba6f5e3b4d60ea5a847cd4402cca594cd40b218f", "html_url": "https://github.com/rust-lang/rust/commit/ba6f5e3b4d60ea5a847cd4402cca594cd40b218f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba6f5e3b4d60ea5a847cd4402cca594cd40b218f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9052ca9393d3182b6c029d1d34b30837a3747f34", "url": "https://api.github.com/repos/rust-lang/rust/commits/9052ca9393d3182b6c029d1d34b30837a3747f34", "html_url": "https://github.com/rust-lang/rust/commit/9052ca9393d3182b6c029d1d34b30837a3747f34"}, {"sha": "27beb46d77efb0004c3bbc31495b1d38a541b39a", "url": "https://api.github.com/repos/rust-lang/rust/commits/27beb46d77efb0004c3bbc31495b1d38a541b39a", "html_url": "https://github.com/rust-lang/rust/commit/27beb46d77efb0004c3bbc31495b1d38a541b39a"}], "stats": {"total": 92, "additions": 59, "deletions": 33}, "files": [{"sha": "8d03d3759bf00dba0147a116b9102f2c1aee12ff", "filename": "src/ci/stage-build.py", "status": "modified", "additions": 59, "deletions": 33, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/ba6f5e3b4d60ea5a847cd4402cca594cd40b218f/src%2Fci%2Fstage-build.py", "raw_url": "https://github.com/rust-lang/rust/raw/ba6f5e3b4d60ea5a847cd4402cca594cd40b218f/src%2Fci%2Fstage-build.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fstage-build.py?ref=ba6f5e3b4d60ea5a847cd4402cca594cd40b218f", "patch": "@@ -48,7 +48,6 @@\n \n LLVM_BOLT_CRATES = LLVM_PGO_CRATES\n \n-\n class Pipeline:\n     # Paths\n     def checkout_path(self) -> Path:\n@@ -451,6 +450,44 @@ def cmd(\n             )\n     return subprocess.run(args, env=environment, check=True)\n \n+class BenchmarkRunner:\n+    def run_rustc(self, pipeline: Pipeline):\n+        raise NotImplementedError\n+\n+    def run_llvm(self, pipeline: Pipeline):\n+        raise NotImplementedError\n+\n+    def run_bolt(self, pipeline: Pipeline):\n+        raise NotImplementedError\n+\n+class DefaultBenchmarkRunner(BenchmarkRunner):\n+    def run_rustc(self, pipeline: Pipeline):\n+        # Here we're profiling the `rustc` frontend, so we also include `Check`.\n+        # The benchmark set includes various stress tests that put the frontend under pressure.\n+        run_compiler_benchmarks(\n+            pipeline,\n+            profiles=[\"Check\", \"Debug\", \"Opt\"],\n+            scenarios=[\"All\"],\n+            crates=RUSTC_PGO_CRATES,\n+            env=dict(\n+                LLVM_PROFILE_FILE=str(pipeline.rustc_profile_template_path())\n+            )\n+        )\n+    def run_llvm(self, pipeline: Pipeline):\n+        run_compiler_benchmarks(\n+            pipeline,\n+            profiles=[\"Debug\", \"Opt\"],\n+            scenarios=[\"Full\"],\n+            crates=LLVM_PGO_CRATES\n+        )\n+\n+    def run_bolt(self, pipeline: Pipeline):\n+        run_compiler_benchmarks(\n+            pipeline,\n+            profiles=[\"Check\", \"Debug\", \"Opt\"],\n+            scenarios=[\"Full\"],\n+            crates=LLVM_BOLT_CRATES\n+        )\n \n def run_compiler_benchmarks(\n         pipeline: Pipeline,\n@@ -580,14 +617,10 @@ def create_pipeline() -> Pipeline:\n         raise Exception(f\"Optimized build is not supported for platform {sys.platform}\")\n \n \n-def gather_llvm_profiles(pipeline: Pipeline):\n+def gather_llvm_profiles(pipeline: Pipeline, runner: BenchmarkRunner):\n     LOGGER.info(\"Running benchmarks with PGO instrumented LLVM\")\n-    run_compiler_benchmarks(\n-        pipeline,\n-        profiles=[\"Debug\", \"Opt\"],\n-        scenarios=[\"Full\"],\n-        crates=LLVM_PGO_CRATES\n-    )\n+\n+    runner.run_llvm(pipeline)\n \n     profile_path = pipeline.llvm_profile_merged_file()\n     LOGGER.info(f\"Merging LLVM PGO profiles to {profile_path}\")\n@@ -609,20 +642,12 @@ def gather_llvm_profiles(pipeline: Pipeline):\n     delete_directory(pipeline.llvm_profile_dir_root())\n \n \n-def gather_rustc_profiles(pipeline: Pipeline):\n+def gather_rustc_profiles(pipeline: Pipeline, runner: BenchmarkRunner):\n     LOGGER.info(\"Running benchmarks with PGO instrumented rustc\")\n \n-    # Here we're profiling the `rustc` frontend, so we also include `Check`.\n-    # The benchmark set includes various stress tests that put the frontend under pressure.\n-    run_compiler_benchmarks(\n-        pipeline,\n-        profiles=[\"Check\", \"Debug\", \"Opt\"],\n-        scenarios=[\"All\"],\n-        crates=RUSTC_PGO_CRATES,\n-        env=dict(\n-            LLVM_PROFILE_FILE=str(pipeline.rustc_profile_template_path())\n-        )\n-    )\n+\n+    runner.run_rustc(pipeline)\n+\n \n     profile_path = pipeline.rustc_profile_merged_file()\n     LOGGER.info(f\"Merging Rustc PGO profiles to {profile_path}\")\n@@ -644,14 +669,10 @@ def gather_rustc_profiles(pipeline: Pipeline):\n     delete_directory(pipeline.rustc_profile_dir_root())\n \n \n-def gather_llvm_bolt_profiles(pipeline: Pipeline):\n+def gather_llvm_bolt_profiles(pipeline: Pipeline, runner: BenchmarkRunner):\n     LOGGER.info(\"Running benchmarks with BOLT instrumented LLVM\")\n-    run_compiler_benchmarks(\n-        pipeline,\n-        profiles=[\"Check\", \"Debug\", \"Opt\"],\n-        scenarios=[\"Full\"],\n-        crates=LLVM_BOLT_CRATES\n-    )\n+\n+    runner.run_bolt(pipeline)\n \n     merged_profile_path = pipeline.llvm_bolt_profile_merged_file()\n     profile_files_path = Path(\"/tmp/prof.fdata\")\n@@ -744,7 +765,7 @@ def record_metrics(pipeline: Pipeline, timer: Timer):\n     log_metrics(metrics)\n \n \n-def execute_build_pipeline(timer: Timer, pipeline: Pipeline, final_build_args: List[str]):\n+def execute_build_pipeline(timer: Timer, pipeline: Pipeline, runner: BenchmarkRunner, final_build_args: List[str]):\n     # Clear and prepare tmp directory\n     shutil.rmtree(pipeline.opt_artifacts(), ignore_errors=True)\n     os.makedirs(pipeline.opt_artifacts(), exist_ok=True)\n@@ -762,7 +783,7 @@ def execute_build_pipeline(timer: Timer, pipeline: Pipeline, final_build_args: L\n             record_metrics(pipeline, rustc_build)\n \n         with stage1.section(\"Gather profiles\"):\n-            gather_llvm_profiles(pipeline)\n+            gather_llvm_profiles(pipeline, runner)\n         print_free_disk_space(pipeline)\n \n     clear_llvm_files(pipeline)\n@@ -781,7 +802,7 @@ def execute_build_pipeline(timer: Timer, pipeline: Pipeline, final_build_args: L\n             record_metrics(pipeline, rustc_build)\n \n         with stage2.section(\"Gather profiles\"):\n-            gather_rustc_profiles(pipeline)\n+            gather_rustc_profiles(pipeline, runner)\n         print_free_disk_space(pipeline)\n \n     clear_llvm_files(pipeline)\n@@ -804,7 +825,7 @@ def execute_build_pipeline(timer: Timer, pipeline: Pipeline, final_build_args: L\n                 record_metrics(pipeline, rustc_build)\n \n             with stage3.section(\"Gather profiles\"):\n-                gather_llvm_bolt_profiles(pipeline)\n+                gather_llvm_bolt_profiles(pipeline, runner)\n \n         # LLVM is not being cleared here, we want to reuse the previous build\n         print_free_disk_space(pipeline)\n@@ -819,7 +840,7 @@ def execute_build_pipeline(timer: Timer, pipeline: Pipeline, final_build_args: L\n         record_metrics(pipeline, stage4)\n \n \n-if __name__ == \"__main__\":\n+def run(runner: BenchmarkRunner):\n     logging.basicConfig(\n         level=logging.DEBUG,\n         format=\"%(name)s %(levelname)-4s: %(message)s\",\n@@ -832,8 +853,9 @@ def execute_build_pipeline(timer: Timer, pipeline: Pipeline, final_build_args: L\n \n     timer = Timer()\n     pipeline = create_pipeline()\n+\n     try:\n-        execute_build_pipeline(timer, pipeline, build_args)\n+        execute_build_pipeline(timer, pipeline, runner, build_args)\n     except BaseException as e:\n         LOGGER.error(\"The multi-stage build has failed\")\n         raise e\n@@ -842,3 +864,7 @@ def execute_build_pipeline(timer: Timer, pipeline: Pipeline, final_build_args: L\n         print_free_disk_space(pipeline)\n \n     print_binary_sizes(pipeline)\n+\n+if __name__ == \"__main__\":\n+    runner = DefaultBenchmarkRunner()\n+    run(runner)"}]}