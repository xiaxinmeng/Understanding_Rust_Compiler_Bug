{"sha": "b47c9690d2974ec0318f1e87bf38f8f7ee6cf202", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0N2M5NjkwZDI5NzRlYzAzMThmMWU4N2JmMzhmOGY3ZWU2Y2YyMDI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-08-16T15:29:08Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-08-23T23:46:11Z"}, "message": "bootstrap: Merge the libtest build step with libstd\n\nSince its inception rustbuild has always worked in three stages: one for\nlibstd, one for libtest, and one for rustc. These three stages were\narchitected around crates.io dependencies, where rustc wants to depend\non crates.io crates but said crates don't explicitly depend on libstd,\nrequiring a sysroot assembly step in the middle. This same logic was\napplied for libtest where libtest wants to depend on crates.io crates\n(`getopts`) but `getopts` didn't say that it depended on std, so it\nneeded `std` built ahead of time.\n\nLots of time has passed since the inception of rustbuild, however,\nand we've since gotten to the point where even `std` itself is depending\non crates.io crates (albeit with some wonky configuration). This\ncommit applies the same logic to the two dependencies that the `test`\ncrate pulls in from crates.io, `getopts` and `unicode-width`. Over the\nmany years since rustbuild's inception `unicode-width` was the only\ndependency picked up by the `test` crate, so the extra configuration\nnecessary to get crates building in this crate graph is unlikely to be\ntoo much of a burden on developers.\n\nAfter this patch it means that there are now only two build phasese of\nrustbuild, one for libstd and one for rustc. The libtest/libproc_macro\nbuild phase is all lumped into one now with `std`.\n\nThis was originally motivated by rust-lang/cargo#7216 where Cargo was\nhaving to deal with synthesizing dependency edges but this commit makes\nthem explicit in this repository.", "tree": {"sha": "feabd0f676038aa5d3c9fb10330ae0ff793af44c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/feabd0f676038aa5d3c9fb10330ae0ff793af44c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202", "html_url": "https://github.com/rust-lang/rust/commit/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3def0f3d5b2eadf1bd8f182c4fc3b32b2fccd0dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3def0f3d5b2eadf1bd8f182c4fc3b32b2fccd0dc", "html_url": "https://github.com/rust-lang/rust/commit/3def0f3d5b2eadf1bd8f182c4fc3b32b2fccd0dc"}], "stats": {"total": 659, "additions": 162, "deletions": 497}, "files": [{"sha": "8ae21c8663706247c9bb9c629b6b0c4d37c5ecfe", "filename": "Cargo.lock", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b47c9690d2974ec0318f1e87bf38f8f7ee6cf202", "patch": "@@ -1139,10 +1139,12 @@ dependencies = [\n \n [[package]]\n name = \"getopts\"\n-version = \"0.2.19\"\n+version = \"0.2.21\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"72327b15c228bfe31f1390f93dd5e9279587f0463836393c9df719ce62a3e450\"\n+checksum = \"14dbbfd5c71d70241ecf9e6f13737f7b5ce823821063188d7e46c41d371eebd5\"\n dependencies = [\n+ \"rustc-std-workspace-core\",\n+ \"rustc-std-workspace-std\",\n  \"unicode-width\",\n ]\n \n@@ -2375,6 +2377,9 @@ dependencies = [\n [[package]]\n name = \"proc_macro\"\n version = \"0.0.0\"\n+dependencies = [\n+ \"std\",\n+]\n \n [[package]]\n name = \"profiler_builtins\"\n@@ -3063,6 +3068,13 @@ dependencies = [\n  \"core\",\n ]\n \n+[[package]]\n+name = \"rustc-std-workspace-std\"\n+version = \"1.0.0\"\n+dependencies = [\n+ \"std\",\n+]\n+\n [[package]]\n name = \"rustc-workspace-hack\"\n version = \"1.0.0\"\n@@ -4068,6 +4080,10 @@ dependencies = [\n [[package]]\n name = \"term\"\n version = \"0.0.0\"\n+dependencies = [\n+ \"core\",\n+ \"std\",\n+]\n \n [[package]]\n name = \"term\"\n@@ -4114,8 +4130,13 @@ dependencies = [\n name = \"test\"\n version = \"0.0.0\"\n dependencies = [\n+ \"core\",\n  \"getopts\",\n+ \"libc\",\n+ \"panic_abort\",\n+ \"panic_unwind\",\n  \"proc_macro\",\n+ \"std\",\n  \"term 0.0.0\",\n ]\n \n@@ -4483,9 +4504,14 @@ checksum = \"aa6024fc12ddfd1c6dbc14a80fa2324d4568849869b779f6bd37e5e4c03344d1\"\n \n [[package]]\n name = \"unicode-width\"\n-version = \"0.1.5\"\n+version = \"0.1.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"882386231c45df4700b275c7ff55b6f3698780a650026380e72dabe76fa46526\"\n+checksum = \"7007dbd421b92cc6e28410fe7362e2e0a2503394908f417b68ec8d1c364c4e20\"\n+dependencies = [\n+ \"compiler_builtins\",\n+ \"rustc-std-workspace-core\",\n+ \"rustc-std-workspace-std\",\n+]\n \n [[package]]\n name = \"unicode-xid\""}, {"sha": "a242f090fbc07e889723c334dcb8689b3314be7b", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=b47c9690d2974ec0318f1e87bf38f8f7ee6cf202", "patch": "@@ -68,6 +68,7 @@ rustc-workspace-hack = { path = 'src/tools/rustc-workspace-hack' }\n # here\n rustc-std-workspace-core = { path = 'src/tools/rustc-std-workspace-core' }\n rustc-std-workspace-alloc = { path = 'src/tools/rustc-std-workspace-alloc' }\n+rustc-std-workspace-std = { path = 'src/tools/rustc-std-workspace-std' }\n \n [patch.\"https://github.com/rust-lang/rust-clippy\"]\n clippy_lints = { path = \"src/tools/clippy/clippy_lints\" }"}, {"sha": "4f5de1ecd2b44f8aa0cabf0e56249e191f62197d", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=b47c9690d2974ec0318f1e87bf38f8f7ee6cf202", "patch": "@@ -337,7 +337,6 @@ impl<'a> Builder<'a> {\n         match kind {\n             Kind::Build => describe!(\n                 compile::Std,\n-                compile::Test,\n                 compile::Rustc,\n                 compile::CodegenBackend,\n                 compile::StartupObjects,\n@@ -363,7 +362,6 @@ impl<'a> Builder<'a> {\n             ),\n             Kind::Check | Kind::Clippy | Kind::Fix => describe!(\n                 check::Std,\n-                check::Test,\n                 check::Rustc,\n                 check::CodegenBackend,\n                 check::Rustdoc\n@@ -425,8 +423,6 @@ impl<'a> Builder<'a> {\n                 doc::TheBook,\n                 doc::Standalone,\n                 doc::Std,\n-                doc::Test,\n-                doc::WhitelistedRustc,\n                 doc::Rustc,\n                 doc::Rustdoc,\n                 doc::ErrorIndex,\n@@ -801,7 +797,7 @@ impl<'a> Builder<'a> {\n         }\n \n         match mode {\n-            Mode::Std | Mode::Test | Mode::ToolBootstrap | Mode::ToolStd | Mode::ToolTest=> {},\n+            Mode::Std | Mode::ToolBootstrap | Mode::ToolStd => {},\n             Mode::Rustc | Mode::Codegen | Mode::ToolRustc => {\n                 // Build proc macros both for the host and the target\n                 if target != compiler.host && cmd != \"check\" {\n@@ -852,7 +848,6 @@ impl<'a> Builder<'a> {\n         // things still build right, please do!\n         match mode {\n             Mode::Std => metadata.push_str(\"std\"),\n-            Mode::Test => metadata.push_str(\"test\"),\n             _ => {},\n         }\n         cargo.env(\"__CARGO_DEFAULT_LIB_METADATA\", &metadata);\n@@ -948,9 +943,9 @@ impl<'a> Builder<'a> {\n \n         let debuginfo_level = match mode {\n             Mode::Rustc | Mode::Codegen => self.config.rust_debuginfo_level_rustc,\n-            Mode::Std | Mode::Test => self.config.rust_debuginfo_level_std,\n+            Mode::Std => self.config.rust_debuginfo_level_std,\n             Mode::ToolBootstrap | Mode::ToolStd |\n-            Mode::ToolTest | Mode::ToolRustc => self.config.rust_debuginfo_level_tools,\n+            Mode::ToolRustc => self.config.rust_debuginfo_level_tools,\n         };\n         cargo.env(\"RUSTC_DEBUGINFO_LEVEL\", debuginfo_level.to_string());\n \n@@ -1150,7 +1145,6 @@ impl<'a> Builder<'a> {\n \n         match (mode, self.config.rust_codegen_units_std, self.config.rust_codegen_units) {\n             (Mode::Std, Some(n), _) |\n-            (Mode::Test, Some(n), _) |\n             (_, _, Some(n)) => {\n                 cargo.env(\"RUSTC_CODEGEN_UNITS\", n.to_string());\n             }"}, {"sha": "2bb90fdb04edcef41bfe0e2df25743d1f4460307", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 64, "deletions": 89, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=b47c9690d2974ec0318f1e87bf38f8f7ee6cf202", "patch": "@@ -365,27 +365,6 @@ fn dist_with_same_targets_and_hosts() {\n             },\n         ]\n     );\n-    assert_eq!(\n-        first(builder.cache.all::<compile::Test>()),\n-        &[\n-            compile::Test {\n-                compiler: Compiler { host: a, stage: 0 },\n-                target: a,\n-            },\n-            compile::Test {\n-                compiler: Compiler { host: a, stage: 1 },\n-                target: a,\n-            },\n-            compile::Test {\n-                compiler: Compiler { host: a, stage: 2 },\n-                target: a,\n-            },\n-            compile::Test {\n-                compiler: Compiler { host: a, stage: 1 },\n-                target: b,\n-            },\n-        ]\n-    );\n     assert_eq!(\n         first(builder.cache.all::<compile::Assemble>()),\n         &[\n@@ -415,7 +394,47 @@ fn build_default() {\n     let b = INTERNER.intern_str(\"B\");\n     let c = INTERNER.intern_str(\"C\");\n \n-    assert!(!builder.cache.all::<compile::Std>().is_empty());\n+    assert_eq!(\n+        first(builder.cache.all::<compile::Std>()),\n+        &[\n+            compile::Std {\n+                compiler: Compiler { host: a, stage: 0 },\n+                target: a,\n+            },\n+            compile::Std {\n+                compiler: Compiler { host: a, stage: 1 },\n+                target: a,\n+            },\n+            compile::Std {\n+                compiler: Compiler { host: a, stage: 2 },\n+                target: a,\n+            },\n+            compile::Std {\n+                compiler: Compiler { host: b, stage: 2 },\n+                target: a,\n+            },\n+            compile::Std {\n+                compiler: Compiler { host: a, stage: 1 },\n+                target: b,\n+            },\n+            compile::Std {\n+                compiler: Compiler { host: a, stage: 2 },\n+                target: b,\n+            },\n+            compile::Std {\n+                compiler: Compiler { host: b, stage: 2 },\n+                target: b,\n+            },\n+            compile::Std {\n+                compiler: Compiler { host: a, stage: 2 },\n+                target: c,\n+            },\n+            compile::Std {\n+                compiler: Compiler { host: b, stage: 2 },\n+                target: c,\n+            },\n+        ]\n+    );\n     assert!(!builder.cache.all::<compile::Assemble>().is_empty());\n     assert_eq!(\n         first(builder.cache.all::<compile::Rustc>()),\n@@ -450,63 +469,61 @@ fn build_default() {\n             },\n         ]\n     );\n+}\n+\n+#[test]\n+fn build_with_target_flag() {\n+    let mut config = configure(&[\"B\"], &[\"C\"]);\n+    config.skip_only_host_steps = true;\n+    let build = Build::new(config);\n+    let mut builder = Builder::new(&build);\n+    builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Build), &[]);\n+\n+    let a = INTERNER.intern_str(\"A\");\n+    let b = INTERNER.intern_str(\"B\");\n+    let c = INTERNER.intern_str(\"C\");\n \n     assert_eq!(\n-        first(builder.cache.all::<compile::Test>()),\n+        first(builder.cache.all::<compile::Std>()),\n         &[\n-            compile::Test {\n+            compile::Std {\n                 compiler: Compiler { host: a, stage: 0 },\n                 target: a,\n             },\n-            compile::Test {\n+            compile::Std {\n                 compiler: Compiler { host: a, stage: 1 },\n                 target: a,\n             },\n-            compile::Test {\n+            compile::Std {\n                 compiler: Compiler { host: a, stage: 2 },\n                 target: a,\n             },\n-            compile::Test {\n+            compile::Std {\n                 compiler: Compiler { host: b, stage: 2 },\n                 target: a,\n             },\n-            compile::Test {\n+            compile::Std {\n                 compiler: Compiler { host: a, stage: 1 },\n                 target: b,\n             },\n-            compile::Test {\n+            compile::Std {\n                 compiler: Compiler { host: a, stage: 2 },\n                 target: b,\n             },\n-            compile::Test {\n+            compile::Std {\n                 compiler: Compiler { host: b, stage: 2 },\n                 target: b,\n             },\n-            compile::Test {\n+            compile::Std {\n                 compiler: Compiler { host: a, stage: 2 },\n                 target: c,\n             },\n-            compile::Test {\n+            compile::Std {\n                 compiler: Compiler { host: b, stage: 2 },\n                 target: c,\n             },\n         ]\n     );\n-}\n-\n-#[test]\n-fn build_with_target_flag() {\n-    let mut config = configure(&[\"B\"], &[\"C\"]);\n-    config.skip_only_host_steps = true;\n-    let build = Build::new(config);\n-    let mut builder = Builder::new(&build);\n-    builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Build), &[]);\n-\n-    let a = INTERNER.intern_str(\"A\");\n-    let b = INTERNER.intern_str(\"B\");\n-    let c = INTERNER.intern_str(\"C\");\n-\n-    assert!(!builder.cache.all::<compile::Std>().is_empty());\n     assert_eq!(\n         first(builder.cache.all::<compile::Assemble>()),\n         &[\n@@ -541,48 +558,6 @@ fn build_with_target_flag() {\n             },\n         ]\n     );\n-\n-    assert_eq!(\n-        first(builder.cache.all::<compile::Test>()),\n-        &[\n-            compile::Test {\n-                compiler: Compiler { host: a, stage: 0 },\n-                target: a,\n-            },\n-            compile::Test {\n-                compiler: Compiler { host: a, stage: 1 },\n-                target: a,\n-            },\n-            compile::Test {\n-                compiler: Compiler { host: a, stage: 2 },\n-                target: a,\n-            },\n-            compile::Test {\n-                compiler: Compiler { host: b, stage: 2 },\n-                target: a,\n-            },\n-            compile::Test {\n-                compiler: Compiler { host: a, stage: 1 },\n-                target: b,\n-            },\n-            compile::Test {\n-                compiler: Compiler { host: a, stage: 2 },\n-                target: b,\n-            },\n-            compile::Test {\n-                compiler: Compiler { host: b, stage: 2 },\n-                target: b,\n-            },\n-            compile::Test {\n-                compiler: Compiler { host: a, stage: 2 },\n-                target: c,\n-            },\n-            compile::Test {\n-                compiler: Compiler { host: b, stage: 2 },\n-                target: c,\n-            },\n-        ]\n-    );\n }\n \n #[test]"}, {"sha": "e9a9b7881a068f9dd8d1bfa49ced037652a47aa9", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 2, "deletions": 53, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=b47c9690d2974ec0318f1e87bf38f8f7ee6cf202", "patch": "@@ -1,6 +1,6 @@\n //! Implementation of compiling the compiler and standard library, in \"check\"-based modes.\n \n-use crate::compile::{run_cargo, std_cargo, test_cargo, rustc_cargo, rustc_cargo_env,\n+use crate::compile::{run_cargo, std_cargo, rustc_cargo, rustc_cargo_env,\n                      add_to_sysroot};\n use crate::builder::{RunConfig, Builder, Kind, ShouldRun, Step};\n use crate::tool::{prepare_tool_cargo, SourceType};\n@@ -92,7 +92,7 @@ impl Step for Rustc {\n         let compiler = builder.compiler(0, builder.config.build);\n         let target = self.target;\n \n-        builder.ensure(Test { target });\n+        builder.ensure(Std { target });\n \n         let mut cargo = builder.cargo(compiler, Mode::Rustc, target,\n             cargo_subcommand(builder.kind));\n@@ -159,47 +159,6 @@ impl Step for CodegenBackend {\n     }\n }\n \n-#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n-pub struct Test {\n-    pub target: Interned<String>,\n-}\n-\n-impl Step for Test {\n-    type Output = ();\n-    const DEFAULT: bool = true;\n-\n-    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.all_krates(\"test\")\n-    }\n-\n-    fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(Test {\n-            target: run.target,\n-        });\n-    }\n-\n-    fn run(self, builder: &Builder<'_>) {\n-        let compiler = builder.compiler(0, builder.config.build);\n-        let target = self.target;\n-\n-        builder.ensure(Std { target });\n-\n-        let mut cargo = builder.cargo(compiler, Mode::Test, target, cargo_subcommand(builder.kind));\n-        test_cargo(builder, &compiler, target, &mut cargo);\n-\n-        builder.info(&format!(\"Checking test artifacts ({} -> {})\", &compiler.host, target));\n-        run_cargo(builder,\n-                  &mut cargo,\n-                  args(builder.kind),\n-                  &libtest_stamp(builder, compiler, target),\n-                  true);\n-\n-        let libdir = builder.sysroot_libdir(compiler, target);\n-        let hostdir = builder.sysroot_libdir(compiler, compiler.host);\n-        add_to_sysroot(builder, &libdir, &hostdir, &libtest_stamp(builder, compiler, target));\n-    }\n-}\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Rustdoc {\n     pub target: Interned<String>,\n@@ -258,16 +217,6 @@ pub fn libstd_stamp(\n     builder.cargo_out(compiler, Mode::Std, target).join(\".libstd-check.stamp\")\n }\n \n-/// Cargo's output path for libtest in a given stage, compiled by a particular\n-/// compiler for the specified target.\n-pub fn libtest_stamp(\n-    builder: &Builder<'_>,\n-    compiler: Compiler,\n-    target: Interned<String>,\n-) -> PathBuf {\n-    builder.cargo_out(compiler, Mode::Test, target).join(\".libtest-check.stamp\")\n-}\n-\n /// Cargo's output path for librustc in a given stage, compiled by a particular\n /// compiler for the specified target.\n pub fn librustc_stamp("}, {"sha": "7dad146b48d8333534cabbb35ca6f193db982021", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 3, "deletions": 136, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=b47c9690d2974ec0318f1e87bf38f8f7ee6cf202", "patch": "@@ -216,7 +216,7 @@ pub fn std_cargo(builder: &Builder<'_>,\n \n         cargo.arg(\"--features\").arg(features)\n             .arg(\"--manifest-path\")\n-            .arg(builder.src.join(\"src/libstd/Cargo.toml\"));\n+            .arg(builder.src.join(\"src/libtest/Cargo.toml\"));\n \n         if target.contains(\"musl\") {\n             if let Some(p) = builder.musl_root(target) {\n@@ -358,129 +358,6 @@ impl Step for StartupObjects {\n     }\n }\n \n-#[derive(Debug, PartialOrd, Ord, Copy, Clone, PartialEq, Eq, Hash)]\n-pub struct Test {\n-    pub target: Interned<String>,\n-    pub compiler: Compiler,\n-}\n-\n-impl Step for Test {\n-    type Output = ();\n-    const DEFAULT: bool = true;\n-\n-    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.all_krates(\"test\")\n-    }\n-\n-    fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(Test {\n-            compiler: run.builder.compiler(run.builder.top_stage, run.host),\n-            target: run.target,\n-        });\n-    }\n-\n-    /// Builds libtest.\n-    ///\n-    /// This will build libtest and supporting libraries for a particular stage of\n-    /// the build using the `compiler` targeting the `target` architecture. The\n-    /// artifacts created will also be linked into the sysroot directory.\n-    fn run(self, builder: &Builder<'_>) {\n-        let target = self.target;\n-        let compiler = self.compiler;\n-\n-        builder.ensure(Std { compiler, target });\n-\n-        if builder.config.keep_stage.contains(&compiler.stage) {\n-            builder.info(\"Warning: Using a potentially old libtest. This may not behave well.\");\n-            builder.ensure(TestLink {\n-                compiler,\n-                target_compiler: compiler,\n-                target,\n-            });\n-            return;\n-        }\n-\n-        let compiler_to_use = builder.compiler_for(compiler.stage, compiler.host, target);\n-        if compiler_to_use != compiler {\n-            builder.ensure(Test {\n-                compiler: compiler_to_use,\n-                target,\n-            });\n-            builder.info(\n-                &format!(\"Uplifting stage1 test ({} -> {})\", builder.config.build, target));\n-            builder.ensure(TestLink {\n-                compiler: compiler_to_use,\n-                target_compiler: compiler,\n-                target,\n-            });\n-            return;\n-        }\n-\n-        let mut cargo = builder.cargo(compiler, Mode::Test, target, \"build\");\n-        test_cargo(builder, &compiler, target, &mut cargo);\n-\n-        builder.info(&format!(\"Building stage{} test artifacts ({} -> {})\", compiler.stage,\n-                &compiler.host, target));\n-        run_cargo(builder,\n-                  &mut cargo,\n-                  vec![],\n-                  &libtest_stamp(builder, compiler, target),\n-                  false);\n-\n-        builder.ensure(TestLink {\n-            compiler: builder.compiler(compiler.stage, builder.config.build),\n-            target_compiler: compiler,\n-            target,\n-        });\n-    }\n-}\n-\n-/// Same as `std_cargo`, but for libtest\n-pub fn test_cargo(builder: &Builder<'_>,\n-                  _compiler: &Compiler,\n-                  _target: Interned<String>,\n-                  cargo: &mut Command) {\n-    if let Some(target) = env::var_os(\"MACOSX_STD_DEPLOYMENT_TARGET\") {\n-        cargo.env(\"MACOSX_DEPLOYMENT_TARGET\", target);\n-    }\n-    cargo.arg(\"--manifest-path\")\n-        .arg(builder.src.join(\"src/libtest/Cargo.toml\"));\n-}\n-\n-#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n-pub struct TestLink {\n-    pub compiler: Compiler,\n-    pub target_compiler: Compiler,\n-    pub target: Interned<String>,\n-}\n-\n-impl Step for TestLink {\n-    type Output = ();\n-\n-    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.never()\n-    }\n-\n-    /// Same as `std_link`, only for libtest\n-    fn run(self, builder: &Builder<'_>) {\n-        let compiler = self.compiler;\n-        let target_compiler = self.target_compiler;\n-        let target = self.target;\n-        builder.info(&format!(\"Copying stage{} test from stage{} ({} -> {} / {})\",\n-                target_compiler.stage,\n-                compiler.stage,\n-                &compiler.host,\n-                target_compiler.host,\n-                target));\n-        add_to_sysroot(\n-            builder,\n-            &builder.sysroot_libdir(target_compiler, target),\n-            &builder.sysroot_libdir(target_compiler, compiler.host),\n-            &libtest_stamp(builder, compiler, target)\n-        );\n-    }\n-}\n-\n #[derive(Debug, PartialOrd, Ord, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Rustc {\n     pub target: Interned<String>,\n@@ -512,7 +389,7 @@ impl Step for Rustc {\n         let compiler = self.compiler;\n         let target = self.target;\n \n-        builder.ensure(Test { compiler, target });\n+        builder.ensure(Std { compiler, target });\n \n         if builder.config.keep_stage.contains(&compiler.stage) {\n             builder.info(\"Warning: Using a potentially old librustc. This may not behave well.\");\n@@ -541,7 +418,7 @@ impl Step for Rustc {\n         }\n \n         // Ensure that build scripts and proc macros have a std / libproc_macro to link against.\n-        builder.ensure(Test {\n+        builder.ensure(Std {\n             compiler: builder.compiler(self.compiler.stage, builder.config.build),\n             target: builder.config.build,\n         });\n@@ -872,16 +749,6 @@ pub fn libstd_stamp(\n     builder.cargo_out(compiler, Mode::Std, target).join(\".libstd.stamp\")\n }\n \n-/// Cargo's output path for libtest in a given stage, compiled by a particular\n-/// compiler for the specified target.\n-pub fn libtest_stamp(\n-    builder: &Builder<'_>,\n-    compiler: Compiler,\n-    target: Interned<String>,\n-) -> PathBuf {\n-    builder.cargo_out(compiler, Mode::Test, target).join(\".libtest.stamp\")\n-}\n-\n /// Cargo's output path for librustc in a given stage, compiled by a particular\n /// compiler for the specified target.\n pub fn librustc_stamp("}, {"sha": "0f4ac63651ca9ff02b76312fc3fadb2d976775c8", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=b47c9690d2974ec0318f1e87bf38f8f7ee6cf202", "patch": "@@ -678,12 +678,7 @@ impl Step for Std {\n         if builder.hosts.iter().any(|t| t == target) {\n             builder.ensure(compile::Rustc { compiler, target });\n         } else {\n-            if builder.no_std(target) == Some(true) {\n-                // the `test` doesn't compile for no-std targets\n-                builder.ensure(compile::Std { compiler, target });\n-            } else {\n-                builder.ensure(compile::Test { compiler, target });\n-            }\n+            builder.ensure(compile::Std { compiler, target });\n         }\n \n         let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, target));\n@@ -912,6 +907,7 @@ impl Step for Src {\n             \"src/libproc_macro\",\n             \"src/tools/rustc-std-workspace-core\",\n             \"src/tools/rustc-std-workspace-alloc\",\n+            \"src/tools/rustc-std-workspace-std\",\n             \"src/librustc\",\n             \"src/libsyntax\",\n         ];"}, {"sha": "6805474aa049f8aa16e3d7c3fe899e77f7cb2acc", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 127, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=b47c9690d2974ec0318f1e87bf38f8f7ee6cf202", "patch": "@@ -478,138 +478,12 @@ impl Step for Std {\n             builder.run(&mut cargo);\n             builder.cp_r(&my_out, &out);\n         };\n-        for krate in &[\"alloc\", \"core\", \"std\"] {\n+        for krate in &[\"alloc\", \"core\", \"std\", \"proc_macro\", \"test\"] {\n             run_cargo_rustdoc_for(krate);\n         }\n     }\n }\n \n-#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n-pub struct Test {\n-    stage: u32,\n-    target: Interned<String>,\n-}\n-\n-impl Step for Test {\n-    type Output = ();\n-    const DEFAULT: bool = true;\n-\n-    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        let builder = run.builder;\n-        run.krate(\"test\").default_condition(builder.config.docs)\n-    }\n-\n-    fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(Test {\n-            stage: run.builder.top_stage,\n-            target: run.target,\n-        });\n-    }\n-\n-    /// Compile all libtest documentation.\n-    ///\n-    /// This will generate all documentation for libtest and its dependencies. This\n-    /// is largely just a wrapper around `cargo doc`.\n-    fn run(self, builder: &Builder<'_>) {\n-        let stage = self.stage;\n-        let target = self.target;\n-        builder.info(&format!(\"Documenting stage{} test ({})\", stage, target));\n-        let out = builder.doc_out(target);\n-        t!(fs::create_dir_all(&out));\n-        let compiler = builder.compiler_for(stage, builder.config.build, target);\n-\n-        // Build libstd docs so that we generate relative links\n-        builder.ensure(Std { stage, target });\n-\n-        builder.ensure(compile::Test { compiler, target });\n-        let out_dir = builder.stage_out(compiler, Mode::Test)\n-                           .join(target).join(\"doc\");\n-\n-        // See docs in std above for why we symlink\n-        let my_out = builder.crate_doc_out(target);\n-        t!(symlink_dir_force(&builder.config, &my_out, &out_dir));\n-\n-        let mut cargo = builder.cargo(compiler, Mode::Test, target, \"doc\");\n-        compile::test_cargo(builder, &compiler, target, &mut cargo);\n-\n-        cargo.arg(\"--no-deps\")\n-             .arg(\"-p\").arg(\"test\")\n-             .env(\"RUSTDOC_RESOURCE_SUFFIX\", crate::channel::CFG_RELEASE_NUM)\n-             .env(\"RUSTDOC_GENERATE_REDIRECT_PAGES\", \"1\");\n-\n-        builder.run(&mut cargo);\n-        builder.cp_r(&my_out, &out);\n-    }\n-}\n-\n-#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n-pub struct WhitelistedRustc {\n-    stage: u32,\n-    target: Interned<String>,\n-}\n-\n-impl Step for WhitelistedRustc {\n-    type Output = ();\n-    const DEFAULT: bool = true;\n-    const ONLY_HOSTS: bool = true;\n-\n-    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        let builder = run.builder;\n-        run.krate(\"rustc-main\").default_condition(builder.config.docs)\n-    }\n-\n-    fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(WhitelistedRustc {\n-            stage: run.builder.top_stage,\n-            target: run.target,\n-        });\n-    }\n-\n-    /// Generates whitelisted compiler crate documentation.\n-    ///\n-    /// This will generate all documentation for crates that are whitelisted\n-    /// to be included in the standard documentation. This documentation is\n-    /// included in the standard Rust documentation, so we should always\n-    /// document it and symlink to merge with the rest of the std and test\n-    /// documentation. We don't build other compiler documentation\n-    /// here as we want to be able to keep it separate from the standard\n-    /// documentation. This is largely just a wrapper around `cargo doc`.\n-    fn run(self, builder: &Builder<'_>) {\n-        let stage = self.stage;\n-        let target = self.target;\n-        builder.info(&format!(\"Documenting stage{} whitelisted compiler ({})\", stage, target));\n-        let out = builder.doc_out(target);\n-        t!(fs::create_dir_all(&out));\n-        let compiler = builder.compiler_for(stage, builder.config.build, target);\n-\n-        // Build libstd docs so that we generate relative links\n-        builder.ensure(Std { stage, target });\n-\n-        builder.ensure(compile::Rustc { compiler, target });\n-        let out_dir = builder.stage_out(compiler, Mode::Rustc)\n-                           .join(target).join(\"doc\");\n-\n-        // See docs in std above for why we symlink\n-        let my_out = builder.crate_doc_out(target);\n-        t!(symlink_dir_force(&builder.config, &my_out, &out_dir));\n-\n-        let mut cargo = builder.cargo(compiler, Mode::Rustc, target, \"doc\");\n-        compile::rustc_cargo(builder, &mut cargo);\n-\n-        // We don't want to build docs for internal compiler dependencies in this\n-        // step (there is another step for that). Therefore, we whitelist the crates\n-        // for which docs must be built.\n-        for krate in &[\"proc_macro\"] {\n-            cargo.arg(\"-p\").arg(krate)\n-                 .env(\"RUSTDOC_RESOURCE_SUFFIX\", crate::channel::CFG_RELEASE_NUM)\n-                 .env(\"RUSTDOC_GENERATE_REDIRECT_PAGES\", \"1\");\n-        }\n-\n-        builder.run(&mut cargo);\n-        builder.cp_r(&my_out, &out);\n-    }\n-}\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Rustc {\n     stage: u32,"}, {"sha": "c0e0ad1a857b954ab1a69c8736cb0a84928dca11", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=b47c9690d2974ec0318f1e87bf38f8f7ee6cf202", "patch": "@@ -297,9 +297,6 @@ pub enum Mode {\n     /// Build the standard library, placing output in the \"stageN-std\" directory.\n     Std,\n \n-    /// Build libtest, placing output in the \"stageN-test\" directory.\n-    Test,\n-\n     /// Build librustc, and compiler libraries, placing output in the \"stageN-rustc\" directory.\n     Rustc,\n \n@@ -315,7 +312,6 @@ pub enum Mode {\n     /// Compile a tool which uses all libraries we compile (up to rustc).\n     /// Doesn't use the stage0 compiler libraries like \"other\", and includes\n     /// tools like rustdoc, cargo, rls, etc.\n-    ToolTest,\n     ToolStd,\n     ToolRustc,\n }\n@@ -536,11 +532,10 @@ impl Build {\n     fn stage_out(&self, compiler: Compiler, mode: Mode) -> PathBuf {\n         let suffix = match mode {\n             Mode::Std => \"-std\",\n-            Mode::Test => \"-test\",\n             Mode::Rustc => \"-rustc\",\n             Mode::Codegen => \"-codegen\",\n             Mode::ToolBootstrap => \"-bootstrap-tools\",\n-            Mode::ToolStd | Mode::ToolTest | Mode::ToolRustc => \"-tools\",\n+            Mode::ToolStd | Mode::ToolRustc => \"-tools\",\n         };\n         self.out.join(&*compiler.host)\n                 .join(format!(\"stage{}{}\", compiler.stage, suffix))"}, {"sha": "2bb053cc2b002e7a914480c856a2baf5d3c7b1f7", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 8, "deletions": 28, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=b47c9690d2974ec0318f1e87bf38f8f7ee6cf202", "patch": "@@ -1040,21 +1040,10 @@ impl Step for Compiletest {\n             builder.ensure(compile::Rustc { compiler, target });\n         }\n \n-        if builder.no_std(target) == Some(true) {\n-            // the `test` doesn't compile for no-std targets\n-            builder.ensure(compile::Std { compiler, target });\n-        } else {\n-            builder.ensure(compile::Test { compiler, target });\n-        }\n-\n-        if builder.no_std(target) == Some(true) {\n-            // for no_std run-make (e.g., thumb*),\n-            // we need a host compiler which is called by cargo.\n-            builder.ensure(compile::Std { compiler, target: compiler.host });\n-        }\n+        builder.ensure(compile::Std { compiler, target });\n+        // ensure that `libproc_macro` is available on the host.\n+        builder.ensure(compile::Std { compiler, target: compiler.host });\n \n-        // HACK(eddyb) ensure that `libproc_macro` is available on the host.\n-        builder.ensure(compile::Test { compiler, target: compiler.host });\n         // Also provide `rust_test_helpers` for the host.\n         builder.ensure(native::TestHelpers { target: compiler.host });\n \n@@ -1399,7 +1388,7 @@ impl Step for DocTest {\n     fn run(self, builder: &Builder<'_>) {\n         let compiler = self.compiler;\n \n-        builder.ensure(compile::Test {\n+        builder.ensure(compile::Std {\n             compiler,\n             target: compiler.host,\n         });\n@@ -1709,8 +1698,7 @@ impl Step for Crate {\n \n     fn should_run(mut run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let builder = run.builder;\n-        run = run.krate(\"test\");\n-        for krate in run.builder.in_tree_crates(\"std\") {\n+        for krate in run.builder.in_tree_crates(\"test\") {\n             if !(krate.name.starts_with(\"rustc_\") && krate.name.ends_with(\"san\")) {\n                 run = run.path(krate.local_path(&builder).to_str().unwrap());\n             }\n@@ -1734,14 +1722,9 @@ impl Step for Crate {\n             });\n         };\n \n-        for krate in builder.in_tree_crates(\"std\") {\n-            if run.path.ends_with(&krate.local_path(&builder)) {\n-                make(Mode::Std, krate);\n-            }\n-        }\n         for krate in builder.in_tree_crates(\"test\") {\n             if run.path.ends_with(&krate.local_path(&builder)) {\n-                make(Mode::Test, krate);\n+                make(Mode::Std, krate);\n             }\n         }\n     }\n@@ -1761,7 +1744,7 @@ impl Step for Crate {\n         let test_kind = self.test_kind;\n         let krate = self.krate;\n \n-        builder.ensure(compile::Test { compiler, target });\n+        builder.ensure(compile::Std { compiler, target });\n         builder.ensure(RemoteCopyLibs { compiler, target });\n \n         // If we're not doing a full bootstrap but we're testing a stage2\n@@ -1775,9 +1758,6 @@ impl Step for Crate {\n             Mode::Std => {\n                 compile::std_cargo(builder, &compiler, target, &mut cargo);\n             }\n-            Mode::Test => {\n-                compile::test_cargo(builder, &compiler, target, &mut cargo);\n-            }\n             Mode::Rustc => {\n                 builder.ensure(compile::Rustc { compiler, target });\n                 compile::rustc_cargo(builder, &mut cargo);\n@@ -1979,7 +1959,7 @@ impl Step for RemoteCopyLibs {\n             return;\n         }\n \n-        builder.ensure(compile::Test { compiler, target });\n+        builder.ensure(compile::Std { compiler, target });\n \n         builder.info(&format!(\"REMOTE copy libs to emulator ({})\", target));\n         t!(fs::create_dir_all(builder.out.join(\"tmp\")));"}, {"sha": "54fe26f18e741d0a7558ada111628bb68cc84ee3", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 3, "deletions": 36, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=b47c9690d2974ec0318f1e87bf38f8f7ee6cf202", "patch": "@@ -577,12 +577,6 @@ impl Step for Cargo {\n     }\n \n     fn run(self, builder: &Builder<'_>) -> PathBuf {\n-        // Cargo depends on procedural macros, so make sure the host\n-        // libstd/libproc_macro is available.\n-        builder.ensure(compile::Test {\n-            compiler: self.compiler,\n-            target: builder.config.build,\n-        });\n         builder.ensure(ToolBuild {\n             compiler: self.compiler,\n             target: self.target,\n@@ -650,31 +644,10 @@ macro_rules! tool_extended {\n \n tool_extended!((self, builder),\n     Cargofmt, rustfmt, \"src/tools/rustfmt\", \"cargo-fmt\", {};\n-    CargoClippy, clippy, \"src/tools/clippy\", \"cargo-clippy\", {\n-        // Clippy depends on procedural macros, so make sure that's built for\n-        // the compiler itself.\n-        builder.ensure(compile::Test {\n-            compiler: self.compiler,\n-            target: builder.config.build,\n-        });\n-    };\n-    Clippy, clippy, \"src/tools/clippy\", \"clippy-driver\", {\n-        // Clippy depends on procedural macros, so make sure that's built for\n-        // the compiler itself.\n-        builder.ensure(compile::Test {\n-            compiler: self.compiler,\n-            target: builder.config.build,\n-        });\n-    };\n+    CargoClippy, clippy, \"src/tools/clippy\", \"cargo-clippy\", {};\n+    Clippy, clippy, \"src/tools/clippy\", \"clippy-driver\", {};\n     Miri, miri, \"src/tools/miri\", \"miri\", {};\n-    CargoMiri, miri, \"src/tools/miri\", \"cargo-miri\", {\n-        // Miri depends on procedural macros, so make sure that's built for\n-        // the compiler itself.\n-        builder.ensure(compile::Test {\n-            compiler: self.compiler,\n-            target: builder.config.build,\n-        });\n-    };\n+    CargoMiri, miri, \"src/tools/miri\", \"cargo-miri\", {};\n     Rls, rls, \"src/tools/rls\", \"rls\", {\n         let clippy = builder.ensure(Clippy {\n             compiler: self.compiler,\n@@ -684,12 +657,6 @@ tool_extended!((self, builder),\n         if clippy.is_some() {\n             self.extra_features.push(\"clippy\".to_owned());\n         }\n-        // RLS depends on procedural macros, so make sure that's built for\n-        // the compiler itself.\n-        builder.ensure(compile::Test {\n-            compiler: self.compiler,\n-            target: builder.config.build,\n-        });\n     };\n     Rustfmt, rustfmt, \"src/tools/rustfmt\", \"rustfmt\", {};\n );"}, {"sha": "187bdac80019d51e914a6c70ec31e914c567d231", "filename": "src/libproc_macro/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/src%2Flibproc_macro%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/src%2Flibproc_macro%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2FCargo.toml?ref=b47c9690d2974ec0318f1e87bf38f8f7ee6cf202", "patch": "@@ -6,3 +6,6 @@ edition = \"2018\"\n \n [lib]\n path = \"lib.rs\"\n+\n+[dependencies]\n+std = { path = \"../libstd\" }"}, {"sha": "2931e0bda95185cc5ee5a84c883276aa73f113eb", "filename": "src/libterm/Cargo.toml", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/src%2Flibterm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/src%2Flibterm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2FCargo.toml?ref=b47c9690d2974ec0318f1e87bf38f8f7ee6cf202", "patch": "@@ -5,6 +5,8 @@ version = \"0.0.0\"\n edition = \"2018\"\n \n [lib]\n-name = \"term\"\n path = \"lib.rs\"\n-crate-type = [\"dylib\", \"rlib\"]\n+\n+[dependencies]\n+core = { path = \"../libcore\" }\n+std = { path = \"../libstd\" }"}, {"sha": "170fbb984cf9b5aa7bfed063c320f24e8fe178a1", "filename": "src/libtest/Cargo.toml", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/src%2Flibtest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/src%2Flibtest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2FCargo.toml?ref=b47c9690d2974ec0318f1e87bf38f8f7ee6cf202", "patch": "@@ -10,8 +10,22 @@ path = \"lib.rs\"\n crate-type = [\"dylib\", \"rlib\"]\n \n [dependencies]\n-getopts = \"0.2.19\"\n+getopts = { version = \"0.2.21\", features = ['rustc-dep-of-std'] }\n term = { path = \"../libterm\" }\n+std = { path = \"../libstd\" }\n+core = { path = \"../libcore\" }\n+libc = { version = \"0.2\", default-features = false }\n+panic_unwind = { path = \"../libpanic_unwind\" }\n+panic_abort = { path = \"../libpanic_abort\" }\n \n # not actually used but needed to always have proc_macro in the sysroot\n proc_macro = { path = \"../libproc_macro\" }\n+\n+# Forward features to the `std` crate as necessary\n+[features]\n+backtrace = [\"std/backtrace\"]\n+compiler-builtins-c = [\"std/compiler-builtins-c\"]\n+llvm-libunwind = [\"std/llvm-libunwind\"]\n+panic-unwind = [\"std/panic_unwind\"]\n+panic_immediate_abort = [\"std/panic_immediate_abort\"]\n+profiler = [\"std/profiler\"]"}, {"sha": "ce1644809dbe65e6b835067fd75915c93b9956e1", "filename": "src/tools/rustc-std-workspace-std/Cargo.toml", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/src%2Ftools%2Frustc-std-workspace-std%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/src%2Ftools%2Frustc-std-workspace-std%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustc-std-workspace-std%2FCargo.toml?ref=b47c9690d2974ec0318f1e87bf38f8f7ee6cf202", "patch": "@@ -0,0 +1,15 @@\n+[package]\n+name = \"rustc-std-workspace-std\"\n+version = \"1.0.0\"\n+authors = [\"Alex Crichton <alex@alexcrichton.com>\"]\n+license = 'MIT OR Apache-2.0'\n+description = \"\"\"\n+Hack for the compiler's own build system\n+\"\"\"\n+edition = \"2018\"\n+\n+[lib]\n+path = \"lib.rs\"\n+\n+[dependencies]\n+std = { path = \"../../libstd\" }"}, {"sha": "2228907f304c47fe8594e0ba24f0f2e0a1b6ea40", "filename": "src/tools/rustc-std-workspace-std/README.md", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/src%2Ftools%2Frustc-std-workspace-std%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/src%2Ftools%2Frustc-std-workspace-std%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustc-std-workspace-std%2FREADME.md?ref=b47c9690d2974ec0318f1e87bf38f8f7ee6cf202", "patch": "@@ -0,0 +1,3 @@\n+# The `rustc-std-workspace-std` crate\n+\n+See documentation for the `rustc-std-workspace-core` crate."}, {"sha": "f40d09cafbb4791f5d0c8d835c1250804c1a2669", "filename": "src/tools/rustc-std-workspace-std/lib.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/src%2Ftools%2Frustc-std-workspace-std%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/src%2Ftools%2Frustc-std-workspace-std%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustc-std-workspace-std%2Flib.rs?ref=b47c9690d2974ec0318f1e87bf38f8f7ee6cf202", "patch": "@@ -0,0 +1 @@\n+pub use std::*;"}, {"sha": "e07a07234c71e586633db80e8dc48a4bd9188746", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b47c9690d2974ec0318f1e87bf38f8f7ee6cf202/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=b47c9690d2974ec0318f1e87bf38f8f7ee6cf202", "patch": "@@ -90,15 +90,18 @@ const WHITELIST: &[Crate<'_>] = &[\n     Crate(\"crossbeam-epoch\"),\n     Crate(\"crossbeam-utils\"),\n     Crate(\"datafrog\"),\n+    Crate(\"dlmalloc\"),\n     Crate(\"either\"),\n     Crate(\"ena\"),\n     Crate(\"env_logger\"),\n     Crate(\"filetime\"),\n     Crate(\"flate2\"),\n+    Crate(\"fortanix-sgx-abi\"),\n     Crate(\"fuchsia-zircon\"),\n     Crate(\"fuchsia-zircon-sys\"),\n     Crate(\"getopts\"),\n     Crate(\"getrandom\"),\n+    Crate(\"hashbrown\"),\n     Crate(\"humantime\"),\n     Crate(\"indexmap\"),\n     Crate(\"itertools\"),"}]}