{"sha": "27a6a304e2baaabca88059753f020377f2476978", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3YTZhMzA0ZTJiYWFhYmNhODgwNTk3NTNmMDIwMzc3ZjI0NzY5Nzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-24T10:03:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-24T10:03:20Z"}, "message": "Auto merge of #62908 - fakenine:normalize_use_of_backticks_compiler_messages_p17, r=alexreg\n\nnormalize use of backticks for compiler messages in remaining modules\n\nhttps://github.com/rust-lang/rust/issues/60532", "tree": {"sha": "adffee9867aa6c342a98bcc6c9638a14b8c76ccf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adffee9867aa6c342a98bcc6c9638a14b8c76ccf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27a6a304e2baaabca88059753f020377f2476978", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27a6a304e2baaabca88059753f020377f2476978", "html_url": "https://github.com/rust-lang/rust/commit/27a6a304e2baaabca88059753f020377f2476978", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27a6a304e2baaabca88059753f020377f2476978/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7f28678bbf4e16893bb6a718e427504167a9494", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7f28678bbf4e16893bb6a718e427504167a9494", "html_url": "https://github.com/rust-lang/rust/commit/a7f28678bbf4e16893bb6a718e427504167a9494"}, {"sha": "66815c613a9eddd0728db8154181624894bd1ea9", "url": "https://api.github.com/repos/rust-lang/rust/commits/66815c613a9eddd0728db8154181624894bd1ea9", "html_url": "https://github.com/rust-lang/rust/commit/66815c613a9eddd0728db8154181624894bd1ea9"}], "stats": {"total": 136, "additions": 68, "deletions": 68}, "files": [{"sha": "655028324e157f84371c3caff798c9564ddd87ad", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a6a304e2baaabca88059753f020377f2476978/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=27a6a304e2baaabca88059753f020377f2476978", "patch": "@@ -485,7 +485,7 @@ Erroneous code example:\n fn foo() {}\n \n #[main]\n-fn f() {} // error: multiple functions with a #[main] attribute\n+fn f() {} // error: multiple functions with a `#[main]` attribute\n ```\n \n This error indicates that the compiler found multiple functions with the"}, {"sha": "6282fde59cad4dadfcbe3856a1e5d84933fe9011", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a6a304e2baaabca88059753f020377f2476978/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=27a6a304e2baaabca88059753f020377f2476978", "patch": "@@ -874,7 +874,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n             constraints.retain(|constraint| {\n                 let (edge_changed, retain) = body(constraint);\n                 if edge_changed {\n-                    debug!(\"Updated due to constraint {:?}\", constraint);\n+                    debug!(\"updated due to constraint {:?}\", constraint);\n                     changed = true;\n                 }\n                 retain"}, {"sha": "0c83bbc1e5394aafb079097016d09afaedb7702a", "filename": "src/librustc/infer/region_constraints/leak_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a6a304e2baaabca88059753f020377f2476978/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fleak_check.rs?ref=27a6a304e2baaabca88059753f020377f2476978", "patch": "@@ -78,10 +78,10 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n                 }\n \n                 return Err(if overly_polymorphic {\n-                    debug!(\"Overly polymorphic!\");\n+                    debug!(\"overly polymorphic!\");\n                     TypeError::RegionsOverlyPolymorphic(placeholder.name, tainted_region)\n                 } else {\n-                    debug!(\"Not as polymorphic!\");\n+                    debug!(\"not as polymorphic!\");\n                     TypeError::RegionsInsufficientlyPolymorphic(placeholder.name, tainted_region)\n                 });\n             }"}, {"sha": "53c099c0b43395959eb77d030b5d4acf892675e6", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a6a304e2baaabca88059753f020377f2476978/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=27a6a304e2baaabca88059753f020377f2476978", "patch": "@@ -120,9 +120,9 @@ fn find_item(item: &Item, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n                 ctxt.attr_main_fn = Some((item.hir_id, item.span));\n             } else {\n                 struct_span_err!(ctxt.session, item.span, E0137,\n-                                 \"multiple functions with a #[main] attribute\")\n-                .span_label(item.span, \"additional #[main] function\")\n-                .span_label(ctxt.attr_main_fn.unwrap().1, \"first #[main] function\")\n+                                 \"multiple functions with a `#[main]` attribute\")\n+                .span_label(item.span, \"additional `#[main]` function\")\n+                .span_label(ctxt.attr_main_fn.unwrap().1, \"first `#[main]` function\")\n                 .emit();\n             }\n         },"}, {"sha": "524d5ddf9290038b02a3195935b0e013bd2b9c2f", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a6a304e2baaabca88059753f020377f2476978/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=27a6a304e2baaabca88059753f020377f2476978", "patch": "@@ -994,7 +994,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n         let deref_ty = match base_cmt_ty.builtin_deref(true) {\n             Some(mt) => mt.ty,\n             None => {\n-                debug!(\"Explicit deref of non-derefable type: {:?}\", base_cmt_ty);\n+                debug!(\"explicit deref of non-derefable type: {:?}\", base_cmt_ty);\n                 return Err(());\n             }\n         };\n@@ -1317,7 +1317,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n                 let element_ty = match cmt.ty.builtin_index() {\n                     Some(ty) => ty,\n                     None => {\n-                        debug!(\"Explicit index of non-indexable type {:?}\", cmt);\n+                        debug!(\"explicit index of non-indexable type {:?}\", cmt);\n                         return Err(());\n                     }\n                 };"}, {"sha": "abb896a7c9bebdbddfb6ce7d3c70ae00132581df", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a6a304e2baaabca88059753f020377f2476978/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=27a6a304e2baaabca88059753f020377f2476978", "patch": "@@ -1645,7 +1645,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     }\n                 }\n                 Some(LifetimeUseSet::Many) => {\n-                    debug!(\"Not one use lifetime\");\n+                    debug!(\"not one use lifetime\");\n                 }\n                 None => {\n                     let hir_id = self.tcx.hir().as_local_hir_id(def_id).unwrap();"}, {"sha": "67fc3520745dd90ffbd660fd24c7d810d417b574", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a6a304e2baaabca88059753f020377f2476978/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=27a6a304e2baaabca88059753f020377f2476978", "patch": "@@ -643,19 +643,19 @@ rustc_queries! {\n         }\n         query is_sanitizer_runtime(_: CrateNum) -> bool {\n             fatal_cycle\n-            desc { \"query a crate is #![sanitizer_runtime]\" }\n+            desc { \"query a crate is `#![sanitizer_runtime]`\" }\n         }\n         query is_profiler_runtime(_: CrateNum) -> bool {\n             fatal_cycle\n-            desc { \"query a crate is #![profiler_runtime]\" }\n+            desc { \"query a crate is `#![profiler_runtime]`\" }\n         }\n         query panic_strategy(_: CrateNum) -> PanicStrategy {\n             fatal_cycle\n             desc { \"query a crate's configured panic strategy\" }\n         }\n         query is_no_builtins(_: CrateNum) -> bool {\n             fatal_cycle\n-            desc { \"test whether a crate has #![no_builtins]\" }\n+            desc { \"test whether a crate has `#![no_builtins]`\" }\n         }\n         query symbol_mangling_version(_: CrateNum) -> SymbolManglingVersion {\n             fatal_cycle"}, {"sha": "470a08fad23b56ac3a941a738311bd136bb5025a", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a6a304e2baaabca88059753f020377f2476978/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=27a6a304e2baaabca88059753f020377f2476978", "patch": "@@ -1144,9 +1144,9 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n     lto: LtoCli = (LtoCli::Unspecified, parse_lto, [TRACKED],\n         \"perform LLVM link-time optimizations\"),\n     target_cpu: Option<String> = (None, parse_opt_string, [TRACKED],\n-        \"select target processor (rustc --print target-cpus for details)\"),\n+        \"select target processor (`rustc --print target-cpus` for details)\"),\n     target_feature: String = (String::new(), parse_string, [TRACKED],\n-        \"target specific attributes (rustc --print target-features for details)\"),\n+        \"target specific attributes (`rustc --print target-features` for details)\"),\n     passes: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n         \"a list of extra LLVM passes to run (space separated)\"),\n     llvm_args: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n@@ -1172,9 +1172,9 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n     no_redzone: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"disable the use of the redzone\"),\n     relocation_model: Option<String> = (None, parse_opt_string, [TRACKED],\n-        \"choose the relocation model to use (rustc --print relocation-models for details)\"),\n+        \"choose the relocation model to use (`rustc --print relocation-models` for details)\"),\n     code_model: Option<String> = (None, parse_opt_string, [TRACKED],\n-        \"choose the code model to use (rustc --print code-models for details)\"),\n+        \"choose the code model to use (`rustc --print code-models` for details)\"),\n     metadata: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n         \"metadata to mangle symbol names with\"),\n     extra_filename: String = (String::new(), parse_string, [UNTRACKED],\n@@ -1184,7 +1184,7 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n     remark: Passes = (Passes::Some(Vec::new()), parse_passes, [UNTRACKED],\n         \"print remarks for these optimization passes (space separated, or \\\"all\\\")\"),\n     no_stack_check: bool = (false, parse_bool, [UNTRACKED],\n-        \"the --no-stack-check flag is deprecated and does nothing\"),\n+        \"the `--no-stack-check` flag is deprecated and does nothing\"),\n     debuginfo: Option<usize> = (None, parse_opt_uint, [TRACKED],\n         \"debug info emission level, 0 = no debug info, 1 = line tables only, \\\n          2 = full debug info with variable and type information\"),\n@@ -1400,9 +1400,9 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     thinlto: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"enable ThinLTO when possible\"),\n     inline_in_all_cgus: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-        \"control whether #[inline] functions are in all cgus\"),\n+        \"control whether `#[inline]` functions are in all CGUs\"),\n     tls_model: Option<String> = (None, parse_opt_string, [TRACKED],\n-        \"choose the TLS model to use (rustc --print tls-models for details)\"),\n+        \"choose the TLS model to use (`rustc --print tls-models` for details)\"),\n     saturating_float_casts: bool = (false, parse_bool, [TRACKED],\n         \"make float->int casts UB-free: numbers outside the integer type's range are clipped to \\\n          the max/min integer respectively, and NaN is mapped to 0\"),"}, {"sha": "14a288f5af1a02771ca2f07c61cff3710be1cb90", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a6a304e2baaabca88059753f020377f2476978/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=27a6a304e2baaabca88059753f020377f2476978", "patch": "@@ -1656,7 +1656,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             ObligationCauseCode::TrivialBound => {\n                 err.help(\"see issue #48214\");\n                 if tcx.sess.opts.unstable_features.is_nightly_build() {\n-                    err.help(\"add #![feature(trivial_bounds)] to the \\\n+                    err.help(\"add `#![feature(trivial_bounds)]` to the \\\n                               crate attributes to enable\",\n                     );\n                 }"}, {"sha": "b0bd137f2cc4a0d4c41714fc7a0164f3fa911489", "filename": "src/librustc_data_structures/flock.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src%2Flibrustc_data_structures%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a6a304e2baaabca88059753f020377f2476978/src%2Flibrustc_data_structures%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fflock.rs?ref=27a6a304e2baaabca88059753f020377f2476978", "patch": "@@ -238,14 +238,14 @@ cfg_if! {\n                                 .write(true);\n                 }\n \n-                debug!(\"Attempting to open lock file `{}`\", p.display());\n+                debug!(\"attempting to open lock file `{}`\", p.display());\n                 let file = match open_options.open(p) {\n                     Ok(file) => {\n-                        debug!(\"Lock file opened successfully\");\n+                        debug!(\"lock file opened successfully\");\n                         file\n                     }\n                     Err(err) => {\n-                        debug!(\"Error opening lock file: {}\", err);\n+                        debug!(\"error opening lock file: {}\", err);\n                         return Err(err)\n                     }\n                 };\n@@ -262,7 +262,7 @@ cfg_if! {\n                         dwFlags |= LOCKFILE_EXCLUSIVE_LOCK;\n                     }\n \n-                    debug!(\"Attempting to acquire lock on lock file `{}`\",\n+                    debug!(\"attempting to acquire lock on lock file `{}`\",\n                            p.display());\n                     LockFileEx(file.as_raw_handle(),\n                                dwFlags,\n@@ -273,10 +273,10 @@ cfg_if! {\n                 };\n                 if ret == 0 {\n                     let err = io::Error::last_os_error();\n-                    debug!(\"Failed acquiring file lock: {}\", err);\n+                    debug!(\"failed acquiring file lock: {}\", err);\n                     Err(err)\n                 } else {\n-                    debug!(\"Successfully acquired lock.\");\n+                    debug!(\"successfully acquired lock\");\n                     Ok(Lock { _file: file })\n                 }\n             }"}, {"sha": "cb17401f6247b98c7aa25f0b763348f261f8d471", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a6a304e2baaabca88059753f020377f2476978/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=27a6a304e2baaabca88059753f020377f2476978", "patch": "@@ -892,7 +892,7 @@ fn print_with_analysis(\n                                 suffix (b::c::d)\");\n             let hir_id = tcx.hir().node_to_hir_id(nodeid);\n             let node = tcx.hir().find(hir_id).unwrap_or_else(|| {\n-                tcx.sess.fatal(&format!(\"--pretty flowgraph couldn't find id: {}\", nodeid))\n+                tcx.sess.fatal(&format!(\"`--pretty=flowgraph` couldn't find ID: {}\", nodeid))\n             });\n \n             match blocks::Code::from_node(&tcx.hir(), hir_id) {\n@@ -904,7 +904,7 @@ fn print_with_analysis(\n                     print_flowgraph(variants, tcx, code, mode, out)\n                 }\n                 None => {\n-                    let message = format!(\"--pretty=flowgraph needs block, fn, or method; \\\n+                    let message = format!(\"`--pretty=flowgraph` needs block, fn, or method; \\\n                                             got {:?}\",\n                                             node);\n "}, {"sha": "f2461f70161311767247034882ce47e7dad28720", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a6a304e2baaabca88059753f020377f2476978/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=27a6a304e2baaabca88059753f020377f2476978", "patch": "@@ -311,7 +311,7 @@ fn check_expr_kind<'a, 'tcx>(\n         }\n         hir::ExprKind::Cast(ref from, _) => {\n             let expr_promotability = v.check_expr(from);\n-            debug!(\"Checking const cast(id={})\", from.hir_id);\n+            debug!(\"checking const cast(id={})\", from.hir_id);\n             let cast_in = CastTy::from_ty(v.tables.expr_ty(from));\n             let cast_out = CastTy::from_ty(v.tables.expr_ty(e));\n             match (cast_in, cast_out) {\n@@ -338,15 +338,15 @@ fn check_expr_kind<'a, 'tcx>(\n                     if v.in_static {\n                         for attr in &v.tcx.get_attrs(did)[..] {\n                             if attr.check_name(sym::thread_local) {\n-                                debug!(\"Reference to Static(id={:?}) is unpromotable \\\n-                                       due to a #[thread_local] attribute\", did);\n+                                debug!(\"reference to `Static(id={:?})` is unpromotable \\\n+                                        due to a `#[thread_local]` attribute\", did);\n                                 return NotPromotable;\n                             }\n                         }\n                         Promotable\n                     } else {\n-                        debug!(\"Reference to Static(id={:?}) is unpromotable as it is not \\\n-                               referenced from a static\", did);\n+                        debug!(\"reference to `Static(id={:?})` is unpromotable as it is not \\\n+                                referenced from a static\", did);\n                         NotPromotable\n                     }\n                 }"}, {"sha": "cfba42580fcef9c45dab3a3480e4fbcbf9500b52", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a6a304e2baaabca88059753f020377f2476978/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=27a6a304e2baaabca88059753f020377f2476978", "patch": "@@ -898,7 +898,7 @@ impl<'a> Resolver<'a> {\n                 let msg = \"macro_escape is a deprecated synonym for macro_use\";\n                 let mut err = self.session.struct_span_warn(attr.span, msg);\n                 if let ast::AttrStyle::Inner = attr.style {\n-                    err.help(\"consider an outer attribute, #[macro_use] mod ...\").emit();\n+                    err.help(\"consider an outer attribute, `#[macro_use]` mod ...\").emit();\n                 } else {\n                     err.emit();\n                 }"}, {"sha": "c987a46b567370186242d52150802464a6f57f95", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a6a304e2baaabca88059753f020377f2476978/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=27a6a304e2baaabca88059753f020377f2476978", "patch": "@@ -111,7 +111,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             let span = match self.tcx.extern_crate(n.as_def_id()) {\n                 Some(&ExternCrate { span, .. }) => span,\n                 None => {\n-                    debug!(\"Skipping crate {}, no data\", n);\n+                    debug!(\"skipping crate {}, no data\", n);\n                     continue;\n                 }\n             };\n@@ -469,7 +469,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                         )\n                     }\n                     None => {\n-                        debug!(\"Could not find container for method {} at {:?}\", id, span);\n+                        debug!(\"could not find container for method {} at {:?}\", id, span);\n                         // This is not necessarily a bug, if there was a compilation error,\n                         // the tables we need might not exist.\n                         return None;\n@@ -550,7 +550,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                     }\n                     ty::Tuple(..) => None,\n                     _ => {\n-                        debug!(\"Expected struct or union type, found {:?}\", ty);\n+                        debug!(\"expected struct or union type, found {:?}\", ty);\n                         None\n                     }\n                 }\n@@ -580,7 +580,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                 let method_id = match self.tables.type_dependent_def_id(expr_hir_id) {\n                     Some(id) => id,\n                     None => {\n-                        debug!(\"Could not resolve method id for {:?}\", expr);\n+                        debug!(\"could not resolve method id for {:?}\", expr);\n                         return None;\n                     }\n                 };"}, {"sha": "4765d1a045504144024be6372e54a55a586bf949", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a6a304e2baaabca88059753f020377f2476978/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=27a6a304e2baaabca88059753f020377f2476978", "patch": "@@ -287,7 +287,7 @@ macro_rules! supported_targets {\n                         // run-time that the parser works correctly\n                         t = Target::from_json(t.to_json())\n                             .map_err(LoadTargetError::Other)?;\n-                        debug!(\"Got builtin target: {:?}\", t);\n+                        debug!(\"got builtin target: {:?}\", t);\n                         Ok(t)\n                     },\n                 )+"}, {"sha": "0d325bb7ec102089cd9c6fe6649dfdcd66c77619", "filename": "src/test/ui/cross/cross-fn-cache-hole.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src%2Ftest%2Fui%2Fcross%2Fcross-fn-cache-hole.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27a6a304e2baaabca88059753f020377f2476978/src%2Ftest%2Fui%2Fcross%2Fcross-fn-cache-hole.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross%2Fcross-fn-cache-hole.stderr?ref=27a6a304e2baaabca88059753f020377f2476978", "patch": "@@ -11,7 +11,7 @@ LL | | }\n    | |_^ the trait `Bar<u32>` is not implemented for `i32`\n    |\n    = help: see issue #48214\n-   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "1b69270d624f4d499d6aa3c63dcce5dfcb8f6364", "filename": "src/test/ui/deprecation/deprecated-macro_escape-inner.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecated-macro_escape-inner.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27a6a304e2baaabca88059753f020377f2476978/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecated-macro_escape-inner.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecated-macro_escape-inner.stderr?ref=27a6a304e2baaabca88059753f020377f2476978", "patch": "@@ -4,5 +4,5 @@ warning: macro_escape is a deprecated synonym for macro_use\n LL |     #![macro_escape]\n    |     ^^^^^^^^^^^^^^^^\n    |\n-   = help: consider an outer attribute, #[macro_use] mod ...\n+   = help: consider an outer attribute, `#[macro_use]` mod ...\n "}, {"sha": "f4d5e10369ac76aebf5df842594ebc0aeebeeb3a", "filename": "src/test/ui/error-codes/E0137.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src%2Ftest%2Fui%2Ferror-codes%2FE0137.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27a6a304e2baaabca88059753f020377f2476978/src%2Ftest%2Fui%2Ferror-codes%2FE0137.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0137.stderr?ref=27a6a304e2baaabca88059753f020377f2476978", "patch": "@@ -1,11 +1,11 @@\n-error[E0137]: multiple functions with a #[main] attribute\n+error[E0137]: multiple functions with a `#[main]` attribute\n   --> $DIR/E0137.rs:7:1\n    |\n LL | fn foo() {}\n-   | ----------- first #[main] function\n+   | ----------- first `#[main]` function\n ...\n LL | fn f() {}\n-   | ^^^^^^^^^ additional #[main] function\n+   | ^^^^^^^^^ additional `#[main]` function\n \n error: aborting due to previous error\n "}, {"sha": "a0b770e971134036653843dbdfe70ba9a94ecd43", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27a6a304e2baaabca88059753f020377f2476978/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr?ref=27a6a304e2baaabca88059753f020377f2476978", "patch": "@@ -184,7 +184,7 @@ warning: macro_escape is a deprecated synonym for macro_use\n LL |     mod inner { #![macro_escape] }\n    |                 ^^^^^^^^^^^^^^^^\n    |\n-   = help: consider an outer attribute, #[macro_use] mod ...\n+   = help: consider an outer attribute, `#[macro_use]` mod ...\n \n warning: the feature `rust1` has been stable since 1.0.0 and no longer requires an attribute to enable\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:89:12"}, {"sha": "8575c1660c5a19dc6e9bcdeac086453b1f0213f6", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-macro_escape.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27a6a304e2baaabca88059753f020377f2476978/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.stderr?ref=27a6a304e2baaabca88059753f020377f2476978", "patch": "@@ -4,5 +4,5 @@ warning: macro_escape is a deprecated synonym for macro_use\n LL | #![macro_escape]\n    | ^^^^^^^^^^^^^^^^\n    |\n-   = help: consider an outer attribute, #[macro_use] mod ...\n+   = help: consider an outer attribute, `#[macro_use]` mod ...\n "}, {"sha": "b4d4c992c9086dada5c1517953c2ecbc06eb6771", "filename": "src/test/ui/feature-gates/feature-gate-trivial_bounds.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27a6a304e2baaabca88059753f020377f2476978/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trivial_bounds.stderr?ref=27a6a304e2baaabca88059753f020377f2476978", "patch": "@@ -5,7 +5,7 @@ LL | enum E where i32: Foo { V }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n    |\n    = help: see issue #48214\n-   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `i32: Foo` is not satisfied\n   --> $DIR/feature-gate-trivial_bounds.rs:12:1\n@@ -14,7 +14,7 @@ LL | struct S where i32: Foo;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n    |\n    = help: see issue #48214\n-   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `i32: Foo` is not satisfied\n   --> $DIR/feature-gate-trivial_bounds.rs:14:1\n@@ -23,7 +23,7 @@ LL | trait T where i32: Foo {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n    |\n    = help: see issue #48214\n-   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `i32: Foo` is not satisfied\n   --> $DIR/feature-gate-trivial_bounds.rs:16:1\n@@ -32,7 +32,7 @@ LL | union U where i32: Foo { f: i32 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n    |\n    = help: see issue #48214\n-   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `i32: Foo` is not satisfied\n   --> $DIR/feature-gate-trivial_bounds.rs:20:1\n@@ -47,7 +47,7 @@ LL | | }\n    | |_^ the trait `Foo` is not implemented for `i32`\n    |\n    = help: see issue #48214\n-   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `i32: Foo` is not satisfied\n   --> $DIR/feature-gate-trivial_bounds.rs:28:1\n@@ -62,7 +62,7 @@ LL | | }\n    | |_^ the trait `Foo` is not implemented for `i32`\n    |\n    = help: see issue #48214\n-   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `std::string::String: std::ops::Neg` is not satisfied\n   --> $DIR/feature-gate-trivial_bounds.rs:36:1\n@@ -73,7 +73,7 @@ LL | | }\n    | |_^ the trait `std::ops::Neg` is not implemented for `std::string::String`\n    |\n    = help: see issue #48214\n-   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: `i32` is not an iterator\n   --> $DIR/feature-gate-trivial_bounds.rs:40:1\n@@ -86,7 +86,7 @@ LL | | }\n    = help: the trait `std::iter::Iterator` is not implemented for `i32`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n    = help: see issue #48214\n-   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/feature-gate-trivial_bounds.rs:52:1\n@@ -97,7 +97,7 @@ LL | struct TwoStrs(str, str) where str: Sized;\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: see issue #48214\n-   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the size for values of type `(dyn A + 'static)` cannot be known at compilation time\n   --> $DIR/feature-gate-trivial_bounds.rs:55:1\n@@ -111,7 +111,7 @@ LL | | }\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Dst<(dyn A + 'static)>`\n    = help: see issue #48214\n-   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/feature-gate-trivial_bounds.rs:59:1\n@@ -124,7 +124,7 @@ LL | | }\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: see issue #48214\n-   = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n+   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error: aborting due to 11 previous errors\n "}, {"sha": "e4685b1e004565192f9f18faf048eb8ac9a662c2", "filename": "src/test/ui/multiple-main-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src%2Ftest%2Fui%2Fmultiple-main-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a6a304e2baaabca88059753f020377f2476978/src%2Ftest%2Fui%2Fmultiple-main-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmultiple-main-2.rs?ref=27a6a304e2baaabca88059753f020377f2476978", "patch": "@@ -5,5 +5,5 @@ fn bar() {\n }\n \n #[main]\n-fn foo() { //~ ERROR multiple functions with a #[main] attribute\n+fn foo() { //~ ERROR multiple functions with a `#[main]` attribute\n }"}, {"sha": "24bc9a8878b080ea7280eb093d3e5ca985a5329d", "filename": "src/test/ui/multiple-main-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src%2Ftest%2Fui%2Fmultiple-main-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27a6a304e2baaabca88059753f020377f2476978/src%2Ftest%2Fui%2Fmultiple-main-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmultiple-main-2.stderr?ref=27a6a304e2baaabca88059753f020377f2476978", "patch": "@@ -1,13 +1,13 @@\n-error[E0137]: multiple functions with a #[main] attribute\n+error[E0137]: multiple functions with a `#[main]` attribute\n   --> $DIR/multiple-main-2.rs:8:1\n    |\n LL | / fn bar() {\n LL | | }\n-   | |_- first #[main] function\n+   | |_- first `#[main]` function\n ...\n LL | / fn foo() {\n LL | | }\n-   | |_^ additional #[main] function\n+   | |_^ additional `#[main]` function\n \n error: aborting due to previous error\n "}, {"sha": "d1b5ae9a83315acc7acea3782d936e80f8c5db37", "filename": "src/test/ui/multiple-main-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src%2Ftest%2Fui%2Fmultiple-main-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a6a304e2baaabca88059753f020377f2476978/src%2Ftest%2Fui%2Fmultiple-main-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmultiple-main-3.rs?ref=27a6a304e2baaabca88059753f020377f2476978", "patch": "@@ -6,6 +6,6 @@ fn main1() {\n \n mod foo {\n     #[main]\n-    fn main2() { //~ ERROR multiple functions with a #[main] attribute\n+    fn main2() { //~ ERROR multiple functions with a `#[main]` attribute\n     }\n }"}, {"sha": "ec171b76a284a293309242d8168490678f3989b4", "filename": "src/test/ui/multiple-main-3.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src%2Ftest%2Fui%2Fmultiple-main-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27a6a304e2baaabca88059753f020377f2476978/src%2Ftest%2Fui%2Fmultiple-main-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmultiple-main-3.stderr?ref=27a6a304e2baaabca88059753f020377f2476978", "patch": "@@ -1,13 +1,13 @@\n-error[E0137]: multiple functions with a #[main] attribute\n+error[E0137]: multiple functions with a `#[main]` attribute\n   --> $DIR/multiple-main-3.rs:9:5\n    |\n LL | / fn main1() {\n LL | | }\n-   | |_- first #[main] function\n+   | |_- first `#[main]` function\n ...\n LL | /     fn main2() {\n LL | |     }\n-   | |_____^ additional #[main] function\n+   | |_____^ additional `#[main]` function\n \n error: aborting due to previous error\n "}, {"sha": "6a728b02f92f2731f8b98dccb41528cc3bf3e9db", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a6a304e2baaabca88059753f020377f2476978/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=27a6a304e2baaabca88059753f020377f2476978", "patch": "@@ -143,7 +143,7 @@ pub fn check(path: &Path, bad: &mut bool, verbose: bool) -> CollectedFeatures {\n         println!(\"Expected a gate test for the feature '{}'.\", name);\n         println!(\"Hint: create a failing test file named 'feature-gate-{}.rs'\\\n                 \\n      in the 'ui' test suite, with its failures due to\\\n-                \\n      missing usage of #![feature({})].\", name, name);\n+                \\n      missing usage of `#![feature({})]`.\", name, name);\n         println!(\"Hint: If you already have such a test and don't want to rename it,\\\n                 \\n      you can also add a // gate-test-{} line to the test file.\",\n                  name);"}, {"sha": "579a20e1142bea7d9d1959516a606ddcd328c54e", "filename": "src/tools/tidy/src/libcoretest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src%2Ftools%2Ftidy%2Fsrc%2Flibcoretest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a6a304e2baaabca88059753f020377f2476978/src%2Ftools%2Ftidy%2Fsrc%2Flibcoretest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flibcoretest.rs?ref=27a6a304e2baaabca88059753f020377f2476978", "patch": "@@ -17,7 +17,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n                 if !contents.starts_with(\"//\") && contents.contains(\"#[test]\") {\n                     tidy_error!(\n                         bad,\n-                        \"{} contains #[test]; libcore tests must be placed inside \\\n+                        \"`{}` contains `#[test]`; libcore tests must be placed inside \\\n                         `src/libcore/tests/`\",\n                         subpath.display()\n                     );"}]}