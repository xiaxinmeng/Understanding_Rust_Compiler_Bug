{"sha": "70e85d146fee03c09e28a02c9c18d56e74254f3c", "node_id": "C_kwDOAAsO6NoAKDcwZTg1ZDE0NmZlZTAzYzA5ZTI4YTAyYzljMThkNTZlNzQyNTRmM2M", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-05T01:15:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-05T01:15:46Z"}, "message": "Auto merge of #10403 - smoelius:fix-107877, r=Jarcho\n\nFix rust-lang/rust#107877, etc.\n\nFix #10009\nFix #10387\nFix https://github.com/rust-lang/rust/issues/107877\n\nThe fix is to verify that the associated item's trait is implemented before trying to project the item's type.\n\nr? `@Jarcho`\n\n---\n\nchangelog: ICE: [`needless_borrow`]: No longer panics on ambiguous projections\n[#10403](https://github.com/rust-lang/rust-clippy/pull/10403)\n<!-- changelog_checked -->", "tree": {"sha": "7613924ff07dd42517ee69b96194f882d99d142a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7613924ff07dd42517ee69b96194f882d99d142a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70e85d146fee03c09e28a02c9c18d56e74254f3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70e85d146fee03c09e28a02c9c18d56e74254f3c", "html_url": "https://github.com/rust-lang/rust/commit/70e85d146fee03c09e28a02c9c18d56e74254f3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70e85d146fee03c09e28a02c9c18d56e74254f3c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78f0f78826c394eab1b522761014e38a8b02f66e", "url": "https://api.github.com/repos/rust-lang/rust/commits/78f0f78826c394eab1b522761014e38a8b02f66e", "html_url": "https://github.com/rust-lang/rust/commit/78f0f78826c394eab1b522761014e38a8b02f66e"}, {"sha": "f95d9deafd0f4d206eea02f2ab56b1c495f2f8d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f95d9deafd0f4d206eea02f2ab56b1c495f2f8d3", "html_url": "https://github.com/rust-lang/rust/commit/f95d9deafd0f4d206eea02f2ab56b1c495f2f8d3"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "6409050ea66cff265122d4a6de6222f5d5a128e6", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70e85d146fee03c09e28a02c9c18d56e74254f3c/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e85d146fee03c09e28a02c9c18d56e74254f3c/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=70e85d146fee03c09e28a02c9c18d56e74254f3c", "patch": "@@ -1357,10 +1357,10 @@ fn replace_types<'tcx>(\n                     && let Some(term_ty) = projection_predicate.term.ty()\n                     && let ty::Param(term_param_ty) = term_ty.kind()\n                 {\n-                    let item_def_id = projection_predicate.projection_ty.def_id;\n-                    let assoc_item = cx.tcx.associated_item(item_def_id);\n-                    let projection = cx.tcx\n-                        .mk_projection(assoc_item.def_id, cx.tcx.mk_substs_trait(new_ty, []));\n+                    let projection = cx.tcx.mk_ty(ty::Alias(\n+                        ty::Projection,\n+                        projection_predicate.projection_ty.with_self_ty(cx.tcx, new_ty),\n+                    ));\n \n                     if let Ok(projected_ty) = cx.tcx.try_normalize_erasing_regions(cx.param_env, projection)\n                         && substs[term_param_ty.index as usize] != ty::GenericArg::from(projected_ty)"}, {"sha": "7f5bae60d55d9b4837577bac7c1d630236f0bedb", "filename": "tests/ui/crashes/ice-rust-107877.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/70e85d146fee03c09e28a02c9c18d56e74254f3c/tests%2Fui%2Fcrashes%2Fice-rust-107877.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e85d146fee03c09e28a02c9c18d56e74254f3c/tests%2Fui%2Fcrashes%2Fice-rust-107877.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-rust-107877.rs?ref=70e85d146fee03c09e28a02c9c18d56e74254f3c", "patch": "@@ -0,0 +1,17 @@\n+#![allow(dead_code)]\n+\n+struct Foo;\n+\n+impl<'a> std::convert::TryFrom<&'a String> for Foo {\n+    type Error = std::convert::Infallible;\n+\n+    fn try_from(_: &'a String) -> Result<Self, Self::Error> {\n+        Ok(Foo)\n+    }\n+}\n+\n+fn find<E>(_: impl std::convert::TryInto<Foo, Error = E>) {}\n+\n+fn main() {\n+    find(&String::new());\n+}"}]}