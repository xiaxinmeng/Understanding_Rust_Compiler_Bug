{"sha": "22dcfa1d8d18687d7ca0b91974bce4202d3383e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZGNmYTFkOGQxODY4N2Q3Y2EwYjkxOTc0YmNlNDIwMmQzMzgzZTk=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-01-17T19:39:15Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-01-23T19:55:06Z"}, "message": "Add relevant associated constants to the float types", "tree": {"sha": "bb5e434d70f651da3a7bb8921beb172fdcb97998", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb5e434d70f651da3a7bb8921beb172fdcb97998"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22dcfa1d8d18687d7ca0b91974bce4202d3383e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22dcfa1d8d18687d7ca0b91974bce4202d3383e9", "html_url": "https://github.com/rust-lang/rust/commit/22dcfa1d8d18687d7ca0b91974bce4202d3383e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22dcfa1d8d18687d7ca0b91974bce4202d3383e9/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5ff8064a4fe5b2bc70ee209b19d129b8ffc3ebc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5ff8064a4fe5b2bc70ee209b19d129b8ffc3ebc", "html_url": "https://github.com/rust-lang/rust/commit/b5ff8064a4fe5b2bc70ee209b19d129b8ffc3ebc"}], "stats": {"total": 163, "additions": 135, "deletions": 28}, "files": [{"sha": "da8dd9acd9f48d013d81690ca05f3314fc3cd3a3", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 68, "deletions": 14, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/22dcfa1d8d18687d7ca0b91974bce4202d3383e9/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22dcfa1d8d18687d7ca0b91974bce4202d3383e9/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=22dcfa1d8d18687d7ca0b91974bce4202d3383e9", "patch": "@@ -15,56 +15,56 @@ use crate::num::FpCategory;\n \n /// The radix or base of the internal representation of `f32`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const RADIX: u32 = 2;\n+pub const RADIX: u32 = f32::RADIX;\n \n /// Number of significant digits in base 2.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MANTISSA_DIGITS: u32 = 24;\n+pub const MANTISSA_DIGITS: u32 = f32::MANTISSA_DIGITS;\n /// Approximate number of significant digits in base 10.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const DIGITS: u32 = 6;\n+pub const DIGITS: u32 = f32::DIGITS;\n \n /// [Machine epsilon] value for `f32`.\n ///\n /// This is the difference between `1.0` and the next larger representable number.\n ///\n /// [Machine epsilon]: https://en.wikipedia.org/wiki/Machine_epsilon\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const EPSILON: f32 = 1.1920929e-7_f32;\n+pub const EPSILON: f32 = f32::EPSILON;\n \n /// Smallest finite `f32` value.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MIN: f32 = -3.40282347e+38_f32;\n+pub const MIN: f32 = f32::MIN;\n /// Smallest positive normal `f32` value.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MIN_POSITIVE: f32 = 1.17549435e-38_f32;\n+pub const MIN_POSITIVE: f32 = f32::MIN_POSITIVE;\n /// Largest finite `f32` value.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MAX: f32 = 3.40282347e+38_f32;\n+pub const MAX: f32 = f32::MAX;\n \n /// One greater than the minimum possible normal power of 2 exponent.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MIN_EXP: i32 = -125;\n+pub const MIN_EXP: i32 = f32::MIN_EXP;\n /// Maximum possible power of 2 exponent.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MAX_EXP: i32 = 128;\n+pub const MAX_EXP: i32 = f32::MAX_EXP;\n \n /// Minimum possible normal power of 10 exponent.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MIN_10_EXP: i32 = -37;\n+pub const MIN_10_EXP: i32 = f32::MIN_10_EXP;\n /// Maximum possible power of 10 exponent.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MAX_10_EXP: i32 = 38;\n+pub const MAX_10_EXP: i32 = f32::MAX_10_EXP;\n \n /// Not a Number (NaN).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const NAN: f32 = 0.0_f32 / 0.0_f32;\n+pub const NAN: f32 = f32::NAN;\n /// Infinity (\u221e).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const INFINITY: f32 = 1.0_f32 / 0.0_f32;\n+pub const INFINITY: f32 = f32::INFINITY;\n /// Negative infinity (\u2212\u221e).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const NEG_INFINITY: f32 = -1.0_f32 / 0.0_f32;\n+pub const NEG_INFINITY: f32 = f32::NEG_INFINITY;\n \n /// Basic mathematical constants.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -153,6 +153,60 @@ pub mod consts {\n #[lang = \"f32\"]\n #[cfg(not(test))]\n impl f32 {\n+    /// The radix or base of the internal representation of `f32`.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const RADIX: u32 = 2;\n+\n+    /// Number of significant digits in base 2.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const MANTISSA_DIGITS: u32 = 24;\n+\n+    /// Approximate number of significant digits in base 10.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const DIGITS: u32 = 6;\n+\n+    /// [Machine epsilon] value for `f32`.\n+    ///\n+    /// This is the difference between `1.0` and the next larger representable number.\n+    ///\n+    /// [Machine epsilon]: https://en.wikipedia.org/wiki/Machine_epsilon\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const EPSILON: f32 = 1.19209290e-07_f32;\n+\n+    /// Smallest finite `f32` value.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const MIN: f32 = -3.40282347e+38_f32;\n+    /// Smallest positive normal `f32` value.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const MIN_POSITIVE: f32 = 1.17549435e-38_f32;\n+    /// Largest finite `f32` value.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const MAX: f32 = 3.40282347e+38_f32;\n+\n+    /// One greater than the minimum possible normal power of 2 exponent.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const MIN_EXP: i32 = -125;\n+    /// Maximum possible power of 2 exponent.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const MAX_EXP: i32 = 128;\n+\n+    /// Minimum possible normal power of 10 exponent.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const MIN_10_EXP: i32 = -37;\n+    /// Maximum possible power of 10 exponent.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const MAX_10_EXP: i32 = 38;\n+\n+    /// Not a Number (NaN).\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const NAN: f32 = 0.0_f32 / 0.0_f32;\n+    /// Infinity (\u221e).\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const INFINITY: f32 = 1.0_f32 / 0.0_f32;\n+    /// Negative infinity (-\u221e).\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const NEG_INFINITY: f32 = -1.0_f32 / 0.0_f32;\n+\n     /// Returns `true` if this value is `NaN`.\n     ///\n     /// ```"}, {"sha": "a6081f184ab22f5b4c4c0291c049081e94dbc2bd", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 67, "deletions": 14, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/22dcfa1d8d18687d7ca0b91974bce4202d3383e9/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22dcfa1d8d18687d7ca0b91974bce4202d3383e9/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=22dcfa1d8d18687d7ca0b91974bce4202d3383e9", "patch": "@@ -15,56 +15,56 @@ use crate::num::FpCategory;\n \n /// The radix or base of the internal representation of `f64`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const RADIX: u32 = 2;\n+pub const RADIX: u32 = f64::RADIX;\n \n /// Number of significant digits in base 2.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MANTISSA_DIGITS: u32 = 53;\n+pub const MANTISSA_DIGITS: u32 = f64::MANTISSA_DIGITS;\n /// Approximate number of significant digits in base 10.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const DIGITS: u32 = 15;\n+pub const DIGITS: u32 = f64::DIGITS;\n \n /// [Machine epsilon] value for `f64`.\n ///\n /// This is the difference between `1.0` and the next larger representable number.\n ///\n /// [Machine epsilon]: https://en.wikipedia.org/wiki/Machine_epsilon\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const EPSILON: f64 = 2.2204460492503131e-16_f64;\n+pub const EPSILON: f64 = f64::EPSILON;\n \n /// Smallest finite `f64` value.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MIN: f64 = -1.7976931348623157e+308_f64;\n+pub const MIN: f64 = f64::MIN;\n /// Smallest positive normal `f64` value.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MIN_POSITIVE: f64 = 2.2250738585072014e-308_f64;\n+pub const MIN_POSITIVE: f64 = f64::MIN_POSITIVE;\n /// Largest finite `f64` value.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MAX: f64 = 1.7976931348623157e+308_f64;\n+pub const MAX: f64 = f64::MAX;\n \n /// One greater than the minimum possible normal power of 2 exponent.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MIN_EXP: i32 = -1021;\n+pub const MIN_EXP: i32 = f64::MIN_EXP;\n /// Maximum possible power of 2 exponent.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MAX_EXP: i32 = 1024;\n+pub const MAX_EXP: i32 = f64::MAX_EXP;\n \n /// Minimum possible normal power of 10 exponent.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MIN_10_EXP: i32 = -307;\n+pub const MIN_10_EXP: i32 = f64::MIN_10_EXP;\n /// Maximum possible power of 10 exponent.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const MAX_10_EXP: i32 = 308;\n+pub const MAX_10_EXP: i32 = f64::MAX_10_EXP;\n \n /// Not a Number (NaN).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const NAN: f64 = 0.0_f64 / 0.0_f64;\n+pub const NAN: f64 = f64::NAN;\n /// Infinity (\u221e).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const INFINITY: f64 = 1.0_f64 / 0.0_f64;\n+pub const INFINITY: f64 = f64::INFINITY;\n /// Negative infinity (\u2212\u221e).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const NEG_INFINITY: f64 = -1.0_f64 / 0.0_f64;\n+pub const NEG_INFINITY: f64 = f64::NEG_INFINITY;\n \n /// Basic mathematical constants.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -153,6 +153,59 @@ pub mod consts {\n #[lang = \"f64\"]\n #[cfg(not(test))]\n impl f64 {\n+    /// The radix or base of the internal representation of `f64`.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const RADIX: u32 = 2;\n+\n+    /// Number of significant digits in base 2.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const MANTISSA_DIGITS: u32 = 53;\n+    /// Approximate number of significant digits in base 10.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const DIGITS: u32 = 15;\n+\n+    /// [Machine epsilon] value for `f64`.\n+    ///\n+    /// This is the difference between `1.0` and the next larger representable number.\n+    ///\n+    /// [Machine epsilon]: https://en.wikipedia.org/wiki/Machine_epsilon\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const EPSILON: f64 = 2.2204460492503131e-16_f64;\n+\n+    /// Smallest finite `f64` value.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const MIN: f64 = -1.7976931348623157e+308_f64;\n+    /// Smallest positive normal `f64` value.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const MIN_POSITIVE: f64 = 2.2250738585072014e-308_f64;\n+    /// Largest finite `f64` value.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const MAX: f64 = 1.7976931348623157e+308_f64;\n+\n+    /// One greater than the minimum possible normal power of 2 exponent.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const MIN_EXP: i32 = -1021;\n+    /// Maximum possible power of 2 exponent.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const MAX_EXP: i32 = 1024;\n+\n+    /// Minimum possible normal power of 10 exponent.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const MIN_10_EXP: i32 = -307;\n+    /// Maximum possible power of 10 exponent.\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const MAX_10_EXP: i32 = 308;\n+\n+    /// Not a Number (NaN).\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const NAN: f64 = 0.0_f64 / 0.0_f64;\n+    /// Infinity (\u221e).\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const INFINITY: f64 = 1.0_f64 / 0.0_f64;\n+    /// Negative infinity (-\u221e).\n+    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    pub const NEG_INFINITY: f64 = -1.0_f64 / 0.0_f64;\n+\n     /// Returns `true` if this value is `NaN`.\n     ///\n     /// ```"}]}