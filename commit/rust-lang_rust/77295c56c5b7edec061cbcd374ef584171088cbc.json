{"sha": "77295c56c5b7edec061cbcd374ef584171088cbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3Mjk1YzU2YzViN2VkZWMwNjFjYmNkMzc0ZWY1ODQxNzEwODhjYmM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-02T08:31:14Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-06T03:39:56Z"}, "message": "rt: Simplify the recv interface", "tree": {"sha": "ddd2291f926bfcd52e08fe1304cf4f19ad4ce062", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddd2291f926bfcd52e08fe1304cf4f19ad4ce062"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77295c56c5b7edec061cbcd374ef584171088cbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77295c56c5b7edec061cbcd374ef584171088cbc", "html_url": "https://github.com/rust-lang/rust/commit/77295c56c5b7edec061cbcd374ef584171088cbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77295c56c5b7edec061cbcd374ef584171088cbc/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e0efce0dad2a63fd290918df38a1d7626e6d4b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e0efce0dad2a63fd290918df38a1d7626e6d4b3", "html_url": "https://github.com/rust-lang/rust/commit/8e0efce0dad2a63fd290918df38a1d7626e6d4b3"}], "stats": {"total": 34, "additions": 13, "deletions": 21}, "files": [{"sha": "cbcc8e663e0983c5508d2bd1886b410a08863bc6", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/77295c56c5b7edec061cbcd374ef584171088cbc/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77295c56c5b7edec061cbcd374ef584171088cbc/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=77295c56c5b7edec061cbcd374ef584171088cbc", "patch": "@@ -46,8 +46,7 @@ native mod rustrt {\n     fn get_port_id(po: *rust_port) -> port_id;\n     fn rust_port_size(po: *rust_port) -> ctypes::size_t;\n     fn port_recv(dptr: *uint, po: *rust_port,\n-                 yield: *ctypes::uintptr_t,\n-                 killed: *ctypes::uintptr_t);\n+                 yield: *ctypes::uintptr_t);\n     fn rust_port_select(dptr: **rust_port, ports: **rust_port,\n                         n_ports: ctypes::size_t,\n                         yield: *ctypes::uintptr_t);\n@@ -142,21 +141,19 @@ fn recv_<T: send>(p: *rust_port) -> T {\n     // that will grab the value of the return pointer, then call this\n     // function, which we will then use to call the runtime.\n     fn recv(dptr: *uint, port: *rust_port,\n-            yield: *ctypes::uintptr_t,\n-            killed: *ctypes::uintptr_t) unsafe {\n-        rustrt::port_recv(dptr, port, yield, killed);\n+            yield: *ctypes::uintptr_t) unsafe {\n+        rustrt::port_recv(dptr, port, yield);\n     }\n     let yield = 0u;\n     let yieldp = ptr::addr_of(yield);\n-    let killed = 0u;\n-    let killedp = ptr::addr_of(killed);\n-    let res = rusti::call_with_retptr(bind recv(_, p, yieldp, killedp));\n-    if killed != 0u {\n-        fail \"killed\";\n-    }\n+    let res = rusti::call_with_retptr(bind recv(_, p, yieldp));\n     if yield != 0u {\n         // Data isn't available yet, so res has not been initialized.\n         task::yield();\n+    } else {\n+        // In the absense of compiler-generated preemption points\n+        // this is a good place to yield\n+        task::yield();\n     }\n     ret res;\n }\n@@ -186,6 +183,10 @@ fn select2<A: send, B: send>(\n     if yield != 0u {\n         // Wait for data\n         task::yield();\n+    } else {\n+        // As in recv, this is a good place to yield anyway until\n+        // the compiler generates yield calls\n+        task::yield();\n     }\n \n     // Now we know the port we're supposed to receive from"}, {"sha": "d37245c29a416682fdd8d0ebe24f9daca46abf4f", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/77295c56c5b7edec061cbcd374ef584171088cbc/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/77295c56c5b7edec061cbcd374ef584171088cbc/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=77295c56c5b7edec061cbcd374ef584171088cbc", "patch": "@@ -543,10 +543,8 @@ rust_task_yield(rust_task *task, bool *killed) {\n }\n \n extern \"C\" CDECL void\n-port_recv(uintptr_t *dptr, rust_port *port,\n-          uintptr_t *yield, uintptr_t *killed) {\n+port_recv(uintptr_t *dptr, rust_port *port, uintptr_t *yield) {\n     *yield = false;\n-    *killed = false;\n     rust_task *task = rust_task_thread::get_task();\n     {\n         scoped_lock with(port->lock);\n@@ -559,13 +557,6 @@ port_recv(uintptr_t *dptr, rust_port *port,\n             return;\n         }\n \n-        // If this task has been killed then we're not going to bother\n-        // blocking, we have to unwind.\n-        if (task->must_fail_from_being_killed()) {\n-            *killed = true;\n-            return;\n-        }\n-\n         // No data was buffered on any incoming channel, so block this task on\n         // the port. Remember the rendezvous location so that any sender task\n         // can write to it before waking up this task."}]}