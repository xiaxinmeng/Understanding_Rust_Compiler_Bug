{"sha": "5678f5aa567ae0ddf316caa90124c895f9730c62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NzhmNWFhNTY3YWUwZGRmMzE2Y2FhOTAxMjRjODk1Zjk3MzBjNjI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-26T00:40:03Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-26T00:40:03Z"}, "message": "Typecheck field expressions.", "tree": {"sha": "ed659004e5897a7ef88474c2fda7e23b761768c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed659004e5897a7ef88474c2fda7e23b761768c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5678f5aa567ae0ddf316caa90124c895f9730c62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5678f5aa567ae0ddf316caa90124c895f9730c62", "html_url": "https://github.com/rust-lang/rust/commit/5678f5aa567ae0ddf316caa90124c895f9730c62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5678f5aa567ae0ddf316caa90124c895f9730c62/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "092af6fb764207693a01bb37ce4e38ddb8010e1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/092af6fb764207693a01bb37ce4e38ddb8010e1e", "html_url": "https://github.com/rust-lang/rust/commit/092af6fb764207693a01bb37ce4e38ddb8010e1e"}], "stats": {"total": 49, "additions": 48, "deletions": 1}, "files": [{"sha": "9f2bf64cde45ce48898dd83ca4700bc7fd66c8c8", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/5678f5aa567ae0ddf316caa90124c895f9730c62/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5678f5aa567ae0ddf316caa90124c895f9730c62/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=5678f5aa567ae0ddf316caa90124c895f9730c62", "patch": "@@ -402,6 +402,28 @@ fn last_expr_of_block(&ast.block bloc) -> option.t[@ast.expr] {\n     }\n }\n \n+\n+fn field_num(session.session sess, &span sp, &ast.ident id) -> uint {\n+    let uint accum = 0u;\n+    let uint i = 0u;\n+    for (u8 c in id) {\n+        if (i == 0u) {\n+            if (c != '_' as u8) {\n+                sess.span_err(sp, \"bad numeric field on tuple\");\n+            }\n+        } else {\n+            i += 1u;\n+            if (('0' as u8) <= c && c <= ('9' as u8)) {\n+                accum *= 10u;\n+                accum += (c as uint) - ('0' as uint);\n+            } else {\n+                sess.span_err(sp, \"bad numeric field on tuple\");\n+            }\n+        }\n+    }\n+    ret accum;\n+}\n+\n // Type utilities\n \n // FIXME: remove me when == works on these tags.\n@@ -792,7 +814,6 @@ fn unify(&fn_ctxt fcx, @ty expected, @ty actual) -> unify_result {\n                 auto result = unify_step(fcx, bindings, expected_ty, actual);\n                 alt (result) {\n                     case (ures_ok(?result_ty)) {\n-                        \n                         fcx.locals.insert(expected_id, result_ty);\n                     }\n                     case (_) { /* empty */ }\n@@ -1215,7 +1236,33 @@ fn check_expr(&fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n                                         ast.expr_tup(args_1, ann));\n         }\n \n+        case (ast.expr_field(?base, ?field, _)) {\n+            auto base_1 = check_expr(fcx, base);\n+            auto base_t = expr_ty(base_1);\n+            alt (base_t.struct) {\n+                case (ty_tup(?args)) {\n+                    let uint ix = field_num(fcx.ccx.sess,\n+                                            expr.span, field);\n+                    if (ix >= _vec.len[tup(bool,@ty)](args)) {\n+                        fcx.ccx.sess.span_err(expr.span,\n+                                              \"bad index on tuple\");\n+                    }\n+                    auto ann = ast.ann_type(args.(ix)._1);\n+                    ret @fold.respan[ast.expr_](expr.span,\n+                                                ast.expr_field(base_1,\n+                                                               field,\n+                                                               ann));\n+                }\n+                case (_) {\n+                    fcx.ccx.sess.unimpl(\"base type for expr_field \"\n+                                        + \"in typeck.check_expr: \"\n+                                        + ty_to_str(base_t));\n+                }\n+            }\n+        }\n+\n         case (_) {\n+            fcx.ccx.sess.unimpl(\"expr type in typeck.check_expr\");\n             // TODO\n             ret expr;\n         }"}]}