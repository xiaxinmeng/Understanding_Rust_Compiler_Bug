{"sha": "9897442f27f15840b459c3e8a480c9082775fbd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4OTc0NDJmMjdmMTU4NDBiNDU5YzNlOGE0ODBjOTA4Mjc3NWZiZDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-23T18:24:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-23T18:24:10Z"}, "message": "Auto merge of #4018 - rust-lang:or_fn_call_variants, r=oli-obk\n\nIgnore non-const ctor expressions in or_fn_call\n\nFixes https://github.com/rust-lang/rust-clippy/issues/1338\n\nShould have been fixed by #919, however that focuses on const ctor expressions only, and `.or(Some(local))` isn't const.\n\nThis also automatically ignores things like `.or(Some(local.clone())` which we don't actually want to do; I need to figure out what to do here.\n\nchangelog: Fixed false positive in [`or_fn_call`] pertaining to enum variant constructors\n\nr? @oli-obk @phansch", "tree": {"sha": "c39907e8963f28558be0c9c83d51b0c461c6ca9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c39907e8963f28558be0c9c83d51b0c461c6ca9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9897442f27f15840b459c3e8a480c9082775fbd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9897442f27f15840b459c3e8a480c9082775fbd1", "html_url": "https://github.com/rust-lang/rust/commit/9897442f27f15840b459c3e8a480c9082775fbd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9897442f27f15840b459c3e8a480c9082775fbd1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65d60e95fb58e54c855e3f9974f554b56f5d9c93", "url": "https://api.github.com/repos/rust-lang/rust/commits/65d60e95fb58e54c855e3f9974f554b56f5d9c93", "html_url": "https://github.com/rust-lang/rust/commit/65d60e95fb58e54c855e3f9974f554b56f5d9c93"}, {"sha": "b03cf3ff97f3edc0f153a5f069ef431ab642873e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b03cf3ff97f3edc0f153a5f069ef431ab642873e", "html_url": "https://github.com/rust-lang/rust/commit/b03cf3ff97f3edc0f153a5f069ef431ab642873e"}], "stats": {"total": 46, "additions": 41, "deletions": 5}, "files": [{"sha": "d8595ea9004ca55bc35af91e7055a104062faa66", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9897442f27f15840b459c3e8a480c9082775fbd1/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9897442f27f15840b459c3e8a480c9082775fbd1/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=9897442f27f15840b459c3e8a480c9082775fbd1", "patch": "@@ -20,11 +20,11 @@ use syntax::symbol::LocalInternedString;\n use crate::utils::paths;\n use crate::utils::sugg;\n use crate::utils::{\n-    get_arg_name, get_parent_expr, get_trait_def_id, has_iter_method, implements_trait, in_macro, is_copy, is_expn_of,\n-    is_self, is_self_ty, iter_input_pats, last_path_segment, match_path, match_qpath, match_trait_method, match_type,\n-    match_var, method_calls, method_chain_args, remove_blocks, return_ty, same_tys, single_segment_path, snippet,\n-    snippet_with_applicability, snippet_with_macro_callsite, span_lint, span_lint_and_sugg, span_lint_and_then,\n-    span_note_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth, SpanlessEq,\n+    get_arg_name, get_parent_expr, get_trait_def_id, has_iter_method, implements_trait, in_macro, is_copy,\n+    is_ctor_function, is_expn_of, is_self, is_self_ty, iter_input_pats, last_path_segment, match_path, match_qpath,\n+    match_trait_method, match_type, match_var, method_calls, method_chain_args, remove_blocks, return_ty, same_tys,\n+    single_segment_path, snippet, snippet_with_applicability, snippet_with_macro_callsite, span_lint,\n+    span_lint_and_sugg, span_lint_and_then, span_note_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth, SpanlessEq,\n };\n \n declare_clippy_lint! {\n@@ -1072,6 +1072,11 @@ fn lint_or_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span: Spa\n             return;\n         }\n \n+        // ignore enum and struct constructors\n+        if is_ctor_function(cx, &arg) {\n+            return;\n+        }\n+\n         // don't lint for constant values\n         let owner_def = cx.tcx.hir().get_parent_did_by_hir_id(arg.hir_id);\n         let promotable = cx.tcx.rvalue_promotable_map(owner_def).contains(&arg.hir_id.local_id);"}, {"sha": "e95acd343bf4b691d1654bbdc824efc0322a1a5a", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9897442f27f15840b459c3e8a480c9082775fbd1/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9897442f27f15840b459c3e8a480c9082775fbd1/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=9897442f27f15840b459c3e8a480c9082775fbd1", "patch": "@@ -742,6 +742,19 @@ pub fn is_copy<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {\n     ty.is_copy_modulo_regions(cx.tcx.global_tcx(), cx.param_env, DUMMY_SP)\n }\n \n+/// Checks if an expression is constructing a tuple-like enum variant or struct\n+pub fn is_ctor_function(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n+    if let ExprKind::Call(ref fun, _) = expr.node {\n+        if let ExprKind::Path(ref qp) = fun.node {\n+            return matches!(\n+                cx.tables.qpath_def(qp, fun.hir_id),\n+                def::Def::Variant(..) | def::Def::Ctor(..)\n+            );\n+        }\n+    }\n+    false\n+}\n+\n /// Returns `true` if a pattern is refutable.\n pub fn is_refutable(cx: &LateContext<'_, '_>, pat: &Pat) -> bool {\n     fn is_enum_variant(cx: &LateContext<'_, '_>, qpath: &QPath, id: HirId) -> bool {"}, {"sha": "395271b37ebe638ac58575f81846131104ce5153", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9897442f27f15840b459c3e8a480c9082775fbd1/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9897442f27f15840b459c3e8a480c9082775fbd1/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=9897442f27f15840b459c3e8a480c9082775fbd1", "patch": "@@ -268,3 +268,21 @@ fn main() {\n     let opt = Some(0);\n     let _ = opt.unwrap();\n }\n+\n+struct Foo(u8);\n+#[rustfmt::skip]\n+fn test_or_with_ctors() {\n+    let opt = Some(1);\n+    let opt_opt = Some(Some(1));\n+    // we also test for const promotion, this makes sure we don't hit that\n+    let two = 2;\n+\n+    let _ = opt_opt.unwrap_or(Some(2));\n+    let _ = opt_opt.unwrap_or(Some(two));\n+    let _ = opt.ok_or(Some(2));\n+    let _ = opt.ok_or(Some(two));\n+    let _ = opt.ok_or(Foo(2));\n+    let _ = opt.ok_or(Foo(two));\n+    let _ = opt.or(Some(2));\n+    let _ = opt.or(Some(two));\n+}"}]}