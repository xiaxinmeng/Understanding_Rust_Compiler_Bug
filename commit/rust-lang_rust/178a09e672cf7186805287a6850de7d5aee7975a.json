{"sha": "178a09e672cf7186805287a6850de7d5aee7975a", "node_id": "C_kwDOAAsO6NoAKDE3OGEwOWU2NzJjZjcxODY4MDUyODdhNjg1MGRlN2Q1YWVlNzk3NWE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-27T03:36:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-27T03:36:10Z"}, "message": "Rollup merge of #95340 - RalfJung:pnvi, r=oli-obk\n\ninterpret: with enforce_number_validity, ensure integers are truly Scalar::Int (i.e., no pointers)\n\nThis is required for https://github.com/rust-lang/miri/pull/2040\n\nr? ```@oli-obk```", "tree": {"sha": "5fd33867f4bc2d29cad6a7334338c7eb0f3375c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fd33867f4bc2d29cad6a7334338c7eb0f3375c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/178a09e672cf7186805287a6850de7d5aee7975a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiP9uqCRBK7hj4Ov3rIwAAYlQIAGNPRnEKD8KCKvNGeA1XVrNW\nf7IBMzIgk0QTl3HrbQP5R7lx1wtfwsHOHPAtHqQ4oIlnE6oIDPRg00A8zhB8WYNo\nVP50T3wH/dYev6I4YYU4OJFoBXJC3EJc3OXzs7Yt4kKTcKEpMJL8N4hTSm3ZjyxT\nwsTGXehd2djTdYp5oFw2EHXO99fQ+2VsfckU+GyCcEvMaCj8x37JHlBpaeaMAO27\nygl3XjPeoblPrkZqrDb/KtrkLM8JVHxtiD/eY5zQmqVqyft2SX8IiAAUadmCzF0I\npRvCnZkTBya2KDKVTnZxtbPdOs5vD7dSgYWIYTlUXpZsLDXj/oh47h9t9p4Fm2Y=\n=tOuZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 5fd33867f4bc2d29cad6a7334338c7eb0f3375c6\nparent 979c8e885edfdac7f16c47a56d538dbb3018c4cb\nparent 3bbcf64fb33e701084c664d9b691ac3c1736bd14\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1648352170 +0200\ncommitter GitHub <noreply@github.com> 1648352170 +0200\n\nRollup merge of #95340 - RalfJung:pnvi, r=oli-obk\n\ninterpret: with enforce_number_validity, ensure integers are truly Scalar::Int (i.e., no pointers)\n\nThis is required for https://github.com/rust-lang/miri/pull/2040\n\nr? ```@oli-obk```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/178a09e672cf7186805287a6850de7d5aee7975a", "html_url": "https://github.com/rust-lang/rust/commit/178a09e672cf7186805287a6850de7d5aee7975a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/178a09e672cf7186805287a6850de7d5aee7975a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "979c8e885edfdac7f16c47a56d538dbb3018c4cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/979c8e885edfdac7f16c47a56d538dbb3018c4cb", "html_url": "https://github.com/rust-lang/rust/commit/979c8e885edfdac7f16c47a56d538dbb3018c4cb"}, {"sha": "3bbcf64fb33e701084c664d9b691ac3c1736bd14", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bbcf64fb33e701084c664d9b691ac3c1736bd14", "html_url": "https://github.com/rust-lang/rust/commit/3bbcf64fb33e701084c664d9b691ac3c1736bd14"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "abd7094440e57c2a1aac6ba98d2e5e3ef740c8b8", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/178a09e672cf7186805287a6850de7d5aee7975a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178a09e672cf7186805287a6850de7d5aee7975a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=178a09e672cf7186805287a6850de7d5aee7975a", "patch": "@@ -444,6 +444,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         match scalar.try_to_int() {\n             Ok(int) => int.is_null(),\n             Err(_) => {\n+                // Can only happen during CTFE.\n                 let ptr = self.scalar_to_ptr(scalar);\n                 match self.memory.ptr_try_get_alloc(ptr) {\n                     Ok((alloc_id, offset, _)) => {\n@@ -455,7 +456,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         // Note that one-past-the-end (offset == size) is still inbounds, and never null.\n                         offset > size\n                     }\n-                    Err(offset) => offset == 0,\n+                    Err(_offset) => bug!(\"a non-int scalar is always a pointer\"),\n                 }\n             }\n         }"}, {"sha": "9da7f5e30cb9eff604835c8680f97837d8934672", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/178a09e672cf7186805287a6850de7d5aee7975a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178a09e672cf7186805287a6850de7d5aee7975a/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=178a09e672cf7186805287a6850de7d5aee7975a", "patch": "@@ -21,7 +21,7 @@ use std::hash::Hash;\n \n use super::{\n     alloc_range, CheckInAllocMsg, GlobalAlloc, InterpCx, InterpResult, MPlaceTy, Machine,\n-    MemPlaceMeta, OpTy, ScalarMaybeUninit, ValueVisitor,\n+    MemPlaceMeta, OpTy, Scalar, ScalarMaybeUninit, ValueVisitor,\n };\n \n macro_rules! throw_validation_failure {\n@@ -521,8 +521,11 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 // NOTE: Keep this in sync with the array optimization for int/float\n                 // types below!\n                 if M::enforce_number_validity(self.ecx) {\n-                    // Integers/floats in CTFE: Must be scalar bits, pointers are dangerous\n-                    let is_bits = value.check_init().map_or(false, |v| v.try_to_int().is_ok());\n+                    // Integers/floats with number validity: Must be scalar bits, pointers are dangerous.\n+                    // As a special exception we *do* match on a `Scalar` here, since we truly want\n+                    // to know its underlying representation (and *not* cast it to an integer).\n+                    let is_bits =\n+                        value.check_init().map_or(false, |v| matches!(v, Scalar::Int(..)));\n                     if !is_bits {\n                         throw_validation_failure!(self.path,\n                             { \"{:x}\", value } expected { \"initialized plain (non-pointer) bytes\" }"}]}