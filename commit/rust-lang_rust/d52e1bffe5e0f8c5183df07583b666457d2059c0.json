{"sha": "d52e1bffe5e0f8c5183df07583b666457d2059c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1MmUxYmZmZTVlMGY4YzUxODNkZjA3NTgzYjY2NjQ1N2QyMDU5YzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-13T13:01:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-13T13:01:58Z"}, "message": "auto merge of #10908 : alexcrichton/rust/issue-10907, r=cmr\n\nTurns out that one some platforms the ar/ranlib tool will die with an assertion\r\nif the file being added doesn't actually have any symbols (or if it's just not\r\nan object file presumably).\r\n\r\nThis functionality is already all exercised on the bots, it just turns out that\r\nthe bots don't have an ar tool which dies in this situation, so it's difficult\r\nfor me to add a test.\r\n\r\nCloses #10907", "tree": {"sha": "061ea74e044915c5d558612611e149130a8fc066", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/061ea74e044915c5d558612611e149130a8fc066"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d52e1bffe5e0f8c5183df07583b666457d2059c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d52e1bffe5e0f8c5183df07583b666457d2059c0", "html_url": "https://github.com/rust-lang/rust/commit/d52e1bffe5e0f8c5183df07583b666457d2059c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d52e1bffe5e0f8c5183df07583b666457d2059c0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ec471228958590f2ccf2c268f42daa53fc979d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ec471228958590f2ccf2c268f42daa53fc979d4", "html_url": "https://github.com/rust-lang/rust/commit/2ec471228958590f2ccf2c268f42daa53fc979d4"}, {"sha": "ee618e1e7590bf2cfd6431dafa0b6a9565bc91d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee618e1e7590bf2cfd6431dafa0b6a9565bc91d3", "html_url": "https://github.com/rust-lang/rust/commit/ee618e1e7590bf2cfd6431dafa0b6a9565bc91d3"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "c1916714bf28366126e81e7899fa67fe03e920b7", "filename": "src/librustc/back/archive.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d52e1bffe5e0f8c5183df07583b666457d2059c0/src%2Flibrustc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52e1bffe5e0f8c5183df07583b666457d2059c0/src%2Flibrustc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Farchive.rs?ref=d52e1bffe5e0f8c5183df07583b666457d2059c0", "patch": "@@ -103,15 +103,22 @@ impl Archive {\n     }\n \n     /// Adds an arbitrary file to this archive\n-    pub fn add_file(&mut self, file: &Path) {\n-        run_ar(self.sess, \"r\", None, [&self.dst, file]);\n+    pub fn add_file(&mut self, file: &Path, has_symbols: bool) {\n+        let cmd = if has_symbols {\"r\"} else {\"rS\"};\n+        run_ar(self.sess, cmd, None, [&self.dst, file]);\n     }\n \n     /// Removes a file from this archive\n     pub fn remove_file(&mut self, file: &str) {\n         run_ar(self.sess, \"d\", None, [&self.dst, &Path::new(file)]);\n     }\n \n+    /// Update all symbols in the archive (runs 'ar s' over it)\n+    pub fn update_symbols(&mut self) {\n+        run_ar(self.sess, \"s\", None, [&self.dst]);\n+    }\n+\n+    /// List all files in an archive\n     pub fn files(&self) -> ~[~str] {\n         let output = run_ar(self.sess, \"t\", None, [&self.dst]);\n         str::from_utf8(output.output).lines().map(|s| s.to_owned()).collect()"}, {"sha": "91680f5c2e568011bd3fc46e445e7adb3532f595", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d52e1bffe5e0f8c5183df07583b666457d2059c0/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d52e1bffe5e0f8c5183df07583b666457d2059c0/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=d52e1bffe5e0f8c5183df07583b666457d2059c0", "patch": "@@ -868,16 +868,21 @@ fn link_rlib(sess: Session,\n             // contain the metadata in a separate file.\n             let metadata = obj_filename.with_filename(METADATA_FILENAME);\n             fs::File::create(&metadata).write(trans.metadata);\n-            a.add_file(&metadata);\n+            a.add_file(&metadata, false);\n             fs::unlink(&metadata);\n \n             // For LTO purposes, the bytecode of this library is also inserted\n             // into the archive.\n             let bc = obj_filename.with_extension(\"bc\");\n-            a.add_file(&bc);\n+            a.add_file(&bc, false);\n             if !sess.opts.save_temps {\n                 fs::unlink(&bc);\n             }\n+\n+            // Now that we've added files, some platforms need us to now update\n+            // the symbol table in the archive (because some platforms die when\n+            // adding files to the archive without symbols).\n+            a.update_symbols();\n         }\n \n         None => {}"}]}