{"sha": "82fde5b62281fa51a72bb4fbbf4324ca623a68d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZmRlNWI2MjI4MWZhNTFhNzJiYjRmYmJmNDMyNGNhNjIzYTY4ZDE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-06T15:52:23Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-06T15:52:23Z"}, "message": "Remove bitflags dependency", "tree": {"sha": "cf4af12224752f2575099ed0e0f0390d40862c97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf4af12224752f2575099ed0e0f0390d40862c97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82fde5b62281fa51a72bb4fbbf4324ca623a68d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82fde5b62281fa51a72bb4fbbf4324ca623a68d1", "html_url": "https://github.com/rust-lang/rust/commit/82fde5b62281fa51a72bb4fbbf4324ca623a68d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82fde5b62281fa51a72bb4fbbf4324ca623a68d1/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75db7cc49de7342420dce56528136319bc02bad0", "url": "https://api.github.com/repos/rust-lang/rust/commits/75db7cc49de7342420dce56528136319bc02bad0", "html_url": "https://github.com/rust-lang/rust/commit/75db7cc49de7342420dce56528136319bc02bad0"}], "stats": {"total": 46, "additions": 17, "deletions": 29}, "files": [{"sha": "c6b8ab0e39861a5f01fd3636244edaf2369e03b2", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82fde5b62281fa51a72bb4fbbf4324ca623a68d1/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/82fde5b62281fa51a72bb4fbbf4324ca623a68d1/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=82fde5b62281fa51a72bb4fbbf4324ca623a68d1", "patch": "@@ -391,7 +391,6 @@ name = \"rustc_codegen_cranelift\"\n version = \"0.1.0\"\n dependencies = [\n  \"ar 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"bitflags 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"byteorder 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cranelift 0.44.0 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"cranelift-faerie 0.44.0 (git+https://github.com/CraneStation/cranelift.git)\","}, {"sha": "66256cd68e14f363b51fb17295caa43fd156251c", "filename": "Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82fde5b62281fa51a72bb4fbbf4324ca623a68d1/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/82fde5b62281fa51a72bb4fbbf4324ca623a68d1/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=82fde5b62281fa51a72bb4fbbf4324ca623a68d1", "patch": "@@ -19,7 +19,6 @@ faerie = \"0.11.0\"\n \n #goblin = \"0.0.17\"\n ar = \"0.8.0\"\n-bitflags = \"1.1.0\"\n byteorder = \"1.2.7\"\n libc = \"0.2.53\"\n gimli = \"0.19.0\""}, {"sha": "dcd9a6ab932df5546114ba9b664581263866ada1", "filename": "src/abi/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/82fde5b62281fa51a72bb4fbbf4324ca623a68d1/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82fde5b62281fa51a72bb4fbbf4324ca623a68d1/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=82fde5b62281fa51a72bb4fbbf4324ca623a68d1", "patch": "@@ -282,10 +282,7 @@ pub fn codegen_fn_prelude(fx: &mut FunctionCx<'_, '_, impl Backend>, start_ebb:\n     for (local, arg_kind, ty) in func_params {\n         let layout = fx.layout_of(ty);\n \n-        let is_ssa = !ssa_analyzed\n-            .get(&local)\n-            .unwrap()\n-            .contains(crate::analyze::Flags::NOT_SSA);\n+        let is_ssa = *ssa_analyzed.get(&local).unwrap() == crate::analyze::SsaKind::Ssa;\n \n         match arg_kind {\n             ArgKind::Normal(Some(val)) => {\n@@ -339,10 +336,7 @@ pub fn codegen_fn_prelude(fx: &mut FunctionCx<'_, '_, impl Backend>, start_ebb:\n         let ty = fx.mir.local_decls[local].ty;\n         let layout = fx.layout_of(ty);\n \n-        let is_ssa = !ssa_analyzed\n-            .get(&local)\n-            .unwrap()\n-            .contains(crate::analyze::Flags::NOT_SSA);\n+        let is_ssa = *ssa_analyzed.get(&local).unwrap() == crate::analyze::SsaKind::Ssa;\n \n         local_place(fx, local, layout, is_ssa);\n     }"}, {"sha": "762327934065b71ebb447dd36345578c99689619", "filename": "src/abi/returning.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82fde5b62281fa51a72bb4fbbf4324ca623a68d1/src%2Fabi%2Freturning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82fde5b62281fa51a72bb4fbbf4324ca623a68d1/src%2Fabi%2Freturning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Freturning.rs?ref=82fde5b62281fa51a72bb4fbbf4324ca623a68d1", "patch": "@@ -3,7 +3,7 @@ use crate::prelude::*;\n \n pub fn codegen_return_param(\n     fx: &mut FunctionCx<impl Backend>,\n-    ssa_analyzed: &HashMap<Local, crate::analyze::Flags>,\n+    ssa_analyzed: &HashMap<Local, crate::analyze::SsaKind>,\n     start_ebb: Ebb,\n ) {\n     let ret_layout = fx.return_layout();\n@@ -16,10 +16,8 @@ pub fn codegen_return_param(\n             Empty\n         }\n         PassMode::ByVal(_) | PassMode::ByValPair(_, _) => {\n-            let is_ssa = !ssa_analyzed\n-                .get(&RETURN_PLACE)\n-                .unwrap()\n-                .contains(crate::analyze::Flags::NOT_SSA);\n+            let is_ssa =\n+                *ssa_analyzed.get(&RETURN_PLACE).unwrap() == crate::analyze::SsaKind::Ssa;\n \n             super::local_place(fx, RETURN_PLACE, ret_layout, is_ssa);\n "}, {"sha": "fe58eaa18bb87f819e98b9e5b2522ff691dd389d", "filename": "src/analyze.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/82fde5b62281fa51a72bb4fbbf4324ca623a68d1/src%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82fde5b62281fa51a72bb4fbbf4324ca623a68d1/src%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fanalyze.rs?ref=82fde5b62281fa51a72bb4fbbf4324ca623a68d1", "patch": "@@ -2,22 +2,20 @@ use crate::prelude::*;\n \n use rustc::mir::StatementKind::*;\n \n-bitflags::bitflags! {\n-    pub struct Flags: u8 {\n-        const NOT_SSA = 0b00000001;\n-    }\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+pub enum SsaKind {\n+    NotSsa,\n+    Ssa,\n }\n \n-pub fn analyze(fx: &FunctionCx<'_, '_, impl Backend>) -> HashMap<Local, Flags> {\n+pub fn analyze(fx: &FunctionCx<'_, '_, impl Backend>) -> HashMap<Local, SsaKind> {\n     let mut flag_map = HashMap::new();\n \n-    for local in fx.mir.local_decls.indices() {\n-        flag_map.insert(local, Flags::empty());\n-    }\n-\n     for (local, local_decl) in fx.mir.local_decls.iter_enumerated() {\n-        if fx.clif_type(local_decl.ty).is_none() {\n-            not_ssa(&mut flag_map, local);\n+        if fx.clif_type(local_decl.ty).is_some() {\n+            flag_map.insert(local, SsaKind::Ssa);\n+        } else {\n+            flag_map.insert(local, SsaKind::NotSsa);\n         }\n     }\n \n@@ -46,13 +44,13 @@ pub fn analyze(fx: &FunctionCx<'_, '_, impl Backend>) -> HashMap<Local, Flags> {\n     flag_map\n }\n \n-fn analyze_non_ssa_place(flag_map: &mut HashMap<Local, Flags>, place: &Place) {\n+fn analyze_non_ssa_place(flag_map: &mut HashMap<Local, SsaKind>, place: &Place) {\n     match place.base {\n         PlaceBase::Local(local) => not_ssa(flag_map, local),\n         _ => {}\n     }\n }\n \n-fn not_ssa<L: ::std::borrow::Borrow<Local>>(flag_map: &mut HashMap<Local, Flags>, local: L) {\n-    *flag_map.get_mut(local.borrow()).unwrap() |= Flags::NOT_SSA;\n+fn not_ssa<L: ::std::borrow::Borrow<Local>>(flag_map: &mut HashMap<Local, SsaKind>, local: L) {\n+    *flag_map.get_mut(local.borrow()).unwrap() = SsaKind::NotSsa;\n }"}]}