{"sha": "c10a1cebe785e2e47ae30228416e57f9db751e17", "node_id": "C_kwDOAAsO6NoAKGMxMGExY2ViZTc4NWUyZTQ3YWUzMDIyODQxNmU1N2Y5ZGI3NTFlMTc", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-04-02T14:47:08Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-03-31T11:34:54Z"}, "message": "Store next_disambiguator in Definitions.", "tree": {"sha": "26af9974262483a02d72aacbf93dfa3005381a25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26af9974262483a02d72aacbf93dfa3005381a25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c10a1cebe785e2e47ae30228416e57f9db751e17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c10a1cebe785e2e47ae30228416e57f9db751e17", "html_url": "https://github.com/rust-lang/rust/commit/c10a1cebe785e2e47ae30228416e57f9db751e17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c10a1cebe785e2e47ae30228416e57f9db751e17/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b29fa94d22e7a20b3dd1eb8eae5e192ccbf89b58", "url": "https://api.github.com/repos/rust-lang/rust/commits/b29fa94d22e7a20b3dd1eb8eae5e192ccbf89b58", "html_url": "https://github.com/rust-lang/rust/commit/b29fa94d22e7a20b3dd1eb8eae5e192ccbf89b58"}], "stats": {"total": 24, "additions": 10, "deletions": 14}, "files": [{"sha": "c62d3b9be2fcc327aea251ee4c89b39188e43ca3", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c10a1cebe785e2e47ae30228416e57f9db751e17/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10a1cebe785e2e47ae30228416e57f9db751e17/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=c10a1cebe785e2e47ae30228416e57f9db751e17", "patch": "@@ -99,6 +99,7 @@ impl DefPathTable {\n #[derive(Clone, Debug)]\n pub struct Definitions {\n     table: DefPathTable,\n+    next_disambiguator: FxHashMap<(LocalDefId, DefPathData), u32>,\n \n     /// Item with a given `LocalDefId` was defined during macro expansion with ID `ExpnId`.\n     expansions_that_defined: FxHashMap<LocalDefId, ExpnId>,\n@@ -340,6 +341,7 @@ impl Definitions {\n \n         Definitions {\n             table,\n+            next_disambiguator: Default::default(),\n             expansions_that_defined: Default::default(),\n             def_id_to_span,\n             stable_crate_id,\n@@ -357,15 +359,20 @@ impl Definitions {\n         parent: LocalDefId,\n         data: DefPathData,\n         expn_id: ExpnId,\n-        mut next_disambiguator: impl FnMut(LocalDefId, DefPathData) -> u32,\n         span: Span,\n     ) -> LocalDefId {\n         debug!(\"create_def(parent={:?}, data={:?}, expn_id={:?})\", parent, data, expn_id);\n \n         // The root node must be created with `create_root_def()`.\n         assert!(data != DefPathData::CrateRoot);\n \n-        let disambiguator = next_disambiguator(parent, data);\n+        // Find the next free disambiguator for this key.\n+        let disambiguator = {\n+            let next_disamb = self.next_disambiguator.entry((parent, data)).or_insert(0);\n+            let disambiguator = *next_disamb;\n+            *next_disamb = next_disamb.checked_add(1).expect(\"disambiguator overflow\");\n+            disambiguator\n+        };\n         let key = DefKey {\n             parent: Some(parent.local_def_index),\n             disambiguated_data: DisambiguatedDefPathData { data, disambiguator },"}, {"sha": "3d31315d044febea6adffe505a861bf9ffda08a4", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c10a1cebe785e2e47ae30228416e57f9db751e17/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10a1cebe785e2e47ae30228416e57f9db751e17/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=c10a1cebe785e2e47ae30228416e57f9db751e17", "patch": "@@ -1061,7 +1061,6 @@ pub struct Resolver<'a> {\n     /// and how the `impl Trait` fragments were introduced.\n     invocation_parents: FxHashMap<LocalExpnId, (LocalDefId, ImplTraitContext)>,\n \n-    next_disambiguator: FxHashMap<(LocalDefId, DefPathData), u32>,\n     /// Some way to know that we are in a *trait* impl in `visit_assoc_item`.\n     /// FIXME: Replace with a more general AST map (together with some other fields).\n     trait_impl_items: FxHashSet<LocalDefId>,\n@@ -1249,16 +1248,7 @@ impl ResolverAstLowering for Resolver<'_> {\n             self.definitions.def_key(self.node_id_to_def_id[&node_id]),\n         );\n \n-        // Find the next free disambiguator for this key.\n-        let next_disambiguator = &mut self.next_disambiguator;\n-        let next_disambiguator = |parent, data| {\n-            let next_disamb = next_disambiguator.entry((parent, data)).or_insert(0);\n-            let disambiguator = *next_disamb;\n-            *next_disamb = next_disamb.checked_add(1).expect(\"disambiguator overflow\");\n-            disambiguator\n-        };\n-\n-        let def_id = self.definitions.create_def(parent, data, expn_id, next_disambiguator, span);\n+        let def_id = self.definitions.create_def(parent, data, expn_id, span);\n \n         // Some things for which we allocate `LocalDefId`s don't correspond to\n         // anything in the AST, so they don't have a `NodeId`. For these cases\n@@ -1430,7 +1420,6 @@ impl<'a> Resolver<'a> {\n             def_id_to_node_id,\n             placeholder_field_indices: Default::default(),\n             invocation_parents,\n-            next_disambiguator: Default::default(),\n             trait_impl_items: Default::default(),\n             legacy_const_generic_args: Default::default(),\n             item_generics_num_lifetimes: Default::default(),"}]}