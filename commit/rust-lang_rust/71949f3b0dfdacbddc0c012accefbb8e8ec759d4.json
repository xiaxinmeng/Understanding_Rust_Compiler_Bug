{"sha": "71949f3b0dfdacbddc0c012accefbb8e8ec759d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxOTQ5ZjNiMGRmZGFjYmRkYzBjMDEyYWNjZWZiYjhlOGVjNzU5ZDQ=", "commit": {"author": {"name": "Wang Xuerui", "email": "idontknw.wang@gmail.com", "date": "2016-05-16T06:10:54Z"}, "committer": {"name": "Wang Xuerui", "email": "idontknw.wang@gmail.com", "date": "2016-07-13T18:44:55Z"}, "message": "libfmt_macros: resolve all implicit refs while parsing", "tree": {"sha": "9883be99eb755d56a5e902a1e396a6cabb1ac239", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9883be99eb755d56a5e902a1e396a6cabb1ac239"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71949f3b0dfdacbddc0c012accefbb8e8ec759d4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXhownAAoJEHg5bO9pIxDsL04QALnGEiJOe2N681aOIgMG0ERg\n6lvNETZOmwYw4Alq5l605LAxXwB5uC2oY86aPlaHSmS1LdHo/Zz3tcDWivT72nCu\nLHuyElERx4AJMblbkhM4qmxz2s1T7HG9+3DqNC359uXaT8TbTFpGQfq0m+eOOKBW\ndMGtsKNC9hbhEM2wMNJorzqM33CP3DA84NU04ezDgQa4lb1e2BgrCJH/UBc9h+aX\nKkmhCB8imlXXVwfV336zogjFJeoI16jasfvCIPAHLdJkxe2rPHUB+qH93g/6/Ke8\n0KcYFnbOzvI+YFiRZiIodE0uWVswUJ6CJjJxLqUEI7wVT7nDPr5p5/QqQisYgIY/\njIS6iKDF3ZM336jTo4anYmZGJdfQ0Lt9AGLhFzJIMJd94QixZPDkj5x6UOE/2MC9\nr6u0TzkH3rtFy/2T+Ah6osSNWEdFnSvB/+2nxof4jKhBAwLdxRuu91afKGqCqt6v\n+mqPToYHTyyfg07C7iHTVFX0zA79QDBhBuktWJYgphgeyHzXZhb5VyY3eVuOlKOW\nk2T9lXTDBUE5YOknM/sJrFwF0ijS7hVH+HUuv0zKSlN9V6IS8jWg/Rc9wusK6AKt\nmjgtyAb9T9EVwMIRRp2d0O0Jd50AVOXvcDsCH+41UyKU3MHUh4QUb2L85YRbOTK/\nKYRb9qDE1xe8CJTJX8MY\n=dMXx\n-----END PGP SIGNATURE-----", "payload": "tree 9883be99eb755d56a5e902a1e396a6cabb1ac239\nparent 4a12a70a5c516d4aa5e86de52a62f41b67ab8bc0\nauthor Wang Xuerui <idontknw.wang@gmail.com> 1463379054 +0800\ncommitter Wang Xuerui <idontknw.wang@gmail.com> 1468435495 +0800\n\nlibfmt_macros: resolve all implicit refs while parsing\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71949f3b0dfdacbddc0c012accefbb8e8ec759d4", "html_url": "https://github.com/rust-lang/rust/commit/71949f3b0dfdacbddc0c012accefbb8e8ec759d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71949f3b0dfdacbddc0c012accefbb8e8ec759d4/comments", "author": {"login": "xen0n", "id": 1175567, "node_id": "MDQ6VXNlcjExNzU1Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/1175567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xen0n", "html_url": "https://github.com/xen0n", "followers_url": "https://api.github.com/users/xen0n/followers", "following_url": "https://api.github.com/users/xen0n/following{/other_user}", "gists_url": "https://api.github.com/users/xen0n/gists{/gist_id}", "starred_url": "https://api.github.com/users/xen0n/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xen0n/subscriptions", "organizations_url": "https://api.github.com/users/xen0n/orgs", "repos_url": "https://api.github.com/users/xen0n/repos", "events_url": "https://api.github.com/users/xen0n/events{/privacy}", "received_events_url": "https://api.github.com/users/xen0n/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xen0n", "id": 1175567, "node_id": "MDQ6VXNlcjExNzU1Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/1175567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xen0n", "html_url": "https://github.com/xen0n", "followers_url": "https://api.github.com/users/xen0n/followers", "following_url": "https://api.github.com/users/xen0n/following{/other_user}", "gists_url": "https://api.github.com/users/xen0n/gists{/gist_id}", "starred_url": "https://api.github.com/users/xen0n/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xen0n/subscriptions", "organizations_url": "https://api.github.com/users/xen0n/orgs", "repos_url": "https://api.github.com/users/xen0n/repos", "events_url": "https://api.github.com/users/xen0n/events{/privacy}", "received_events_url": "https://api.github.com/users/xen0n/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a12a70a5c516d4aa5e86de52a62f41b67ab8bc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a12a70a5c516d4aa5e86de52a62f41b67ab8bc0", "html_url": "https://github.com/rust-lang/rust/commit/4a12a70a5c516d4aa5e86de52a62f41b67ab8bc0"}], "stats": {"total": 57, "additions": 46, "deletions": 11}, "files": [{"sha": "983f92d9e19d886b75e32775fc393142a99dc7ed", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 46, "deletions": 11, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/71949f3b0dfdacbddc0c012accefbb8e8ec759d4/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71949f3b0dfdacbddc0c012accefbb8e8ec759d4/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=71949f3b0dfdacbddc0c012accefbb8e8ec759d4", "patch": "@@ -144,6 +144,8 @@ pub struct Parser<'a> {\n     cur: iter::Peekable<str::CharIndices<'a>>,\n     /// Error messages accumulated during parsing\n     pub errors: Vec<string::String>,\n+    /// Current position of implicit positional argument pointer\n+    curarg: usize,\n }\n \n impl<'a> Iterator for Parser<'a> {\n@@ -186,6 +188,7 @@ impl<'a> Parser<'a> {\n             input: s,\n             cur: s.char_indices().peekable(),\n             errors: vec![],\n+            curarg: 0,\n         }\n     }\n \n@@ -259,9 +262,41 @@ impl<'a> Parser<'a> {\n     /// Parses an Argument structure, or what's contained within braces inside\n     /// the format string\n     fn argument(&mut self) -> Argument<'a> {\n+        let mut pos = self.position();\n+        let mut format = self.format();\n+\n+        // Resolve CountIsNextParam's into absolute references.\n+        // Current argument's position must be known so this is done after\n+        // format parsing.\n+        // Curiously, currently {:.*} for named arguments is implemented,\n+        // and it consumes a positional arg slot just like a positional {:.*}\n+        // does. The current behavior is reproduced to prevent any\n+        // incompatibilities.\n+        match format.precision {\n+            CountIsNextParam => {\n+                // eat the current implicit arg\n+                let i = self.curarg;\n+                self.curarg += 1;\n+                format.precision = CountIsParam(i);\n+            }\n+            _ => {}\n+        }\n+\n+        // Resolve ArgumentNext's into absolute references.\n+        // This must come after count resolution because we may consume one\n+        // more arg if precision is CountIsNextParam.\n+        match pos {\n+            ArgumentNext => {\n+                let i = self.curarg;\n+                self.curarg += 1;\n+                pos = ArgumentIs(i);\n+            }\n+            _ => {}\n+        }\n+\n         Argument {\n-            position: self.position(),\n-            format: self.format(),\n+            position: pos,\n+            format: format,\n         }\n     }\n \n@@ -487,7 +522,7 @@ mod tests {\n     fn format_nothing() {\n         same(\"{}\",\n              &[NextArgument(Argument {\n-                   position: ArgumentNext,\n+                   position: ArgumentIs(0),\n                    format: fmtdflt(),\n                })]);\n     }\n@@ -565,7 +600,7 @@ mod tests {\n     fn format_counts() {\n         same(\"{:10s}\",\n              &[NextArgument(Argument {\n-                   position: ArgumentNext,\n+                   position: ArgumentIs(0),\n                    format: FormatSpec {\n                        fill: None,\n                        align: AlignUnknown,\n@@ -577,7 +612,7 @@ mod tests {\n                })]);\n         same(\"{:10$.10s}\",\n              &[NextArgument(Argument {\n-                   position: ArgumentNext,\n+                   position: ArgumentIs(0),\n                    format: FormatSpec {\n                        fill: None,\n                        align: AlignUnknown,\n@@ -589,19 +624,19 @@ mod tests {\n                })]);\n         same(\"{:.*s}\",\n              &[NextArgument(Argument {\n-                   position: ArgumentNext,\n+                   position: ArgumentIs(1),\n                    format: FormatSpec {\n                        fill: None,\n                        align: AlignUnknown,\n                        flags: 0,\n-                       precision: CountIsNextParam,\n+                       precision: CountIsParam(0),\n                        width: CountImplied,\n                        ty: \"s\",\n                    },\n                })]);\n         same(\"{:.10$s}\",\n              &[NextArgument(Argument {\n-                   position: ArgumentNext,\n+                   position: ArgumentIs(0),\n                    format: FormatSpec {\n                        fill: None,\n                        align: AlignUnknown,\n@@ -613,7 +648,7 @@ mod tests {\n                })]);\n         same(\"{:a$.b$s}\",\n              &[NextArgument(Argument {\n-                   position: ArgumentNext,\n+                   position: ArgumentIs(0),\n                    format: FormatSpec {\n                        fill: None,\n                        align: AlignUnknown,\n@@ -628,7 +663,7 @@ mod tests {\n     fn format_flags() {\n         same(\"{:-}\",\n              &[NextArgument(Argument {\n-                   position: ArgumentNext,\n+                   position: ArgumentIs(0),\n                    format: FormatSpec {\n                        fill: None,\n                        align: AlignUnknown,\n@@ -640,7 +675,7 @@ mod tests {\n                })]);\n         same(\"{:+#}\",\n              &[NextArgument(Argument {\n-                   position: ArgumentNext,\n+                   position: ArgumentIs(0),\n                    format: FormatSpec {\n                        fill: None,\n                        align: AlignUnknown,"}]}