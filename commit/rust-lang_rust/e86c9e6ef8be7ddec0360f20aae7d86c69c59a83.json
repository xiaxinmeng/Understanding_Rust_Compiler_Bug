{"sha": "e86c9e6ef8be7ddec0360f20aae7d86c69c59a83", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NmM5ZTZlZjhiZTdkZGVjMDM2MGYyMGFhZTdkODZjNjljNTlhODM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-02T03:16:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-02T03:16:22Z"}, "message": "Auto merge of #69442 - jakevossen5:master, r=Mark-Simulacrum\n\n`--explain` disambiguates no long description and invalid error codes\n\nCloses #44710\n\nFirst code contribution here, so feedback is very much appreciated!\n\ncc @zackmdavis\ncc @Mark-Simulacrum", "tree": {"sha": "82d8856872d01ee573207ec3ac37de93eb5fd6e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82d8856872d01ee573207ec3ac37de93eb5fd6e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e86c9e6ef8be7ddec0360f20aae7d86c69c59a83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e86c9e6ef8be7ddec0360f20aae7d86c69c59a83", "html_url": "https://github.com/rust-lang/rust/commit/e86c9e6ef8be7ddec0360f20aae7d86c69c59a83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e86c9e6ef8be7ddec0360f20aae7d86c69c59a83/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9dc8dad14fc31f49254d299457e34d00721c4a73", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dc8dad14fc31f49254d299457e34d00721c4a73", "html_url": "https://github.com/rust-lang/rust/commit/9dc8dad14fc31f49254d299457e34d00721c4a73"}, {"sha": "5f3ffee6b77f073b78bdc76e7a0f4811bc39e7f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f3ffee6b77f073b78bdc76e7a0f4811bc39e7f9", "html_url": "https://github.com/rust-lang/rust/commit/5f3ffee6b77f073b78bdc76e7a0f4811bc39e7f9"}], "stats": {"total": 59, "additions": 42, "deletions": 17}, "files": [{"sha": "789507fb48b526361c8fc694631032195931f8d2", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e86c9e6ef8be7ddec0360f20aae7d86c69c59a83/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86c9e6ef8be7ddec0360f20aae7d86c69c59a83/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=e86c9e6ef8be7ddec0360f20aae7d86c69c59a83", "patch": "@@ -30,7 +30,10 @@ use rustc_codegen_ssa::CodegenResults;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_data_structures::profiling::print_time_passes_entry;\n use rustc_data_structures::sync::SeqCst;\n-use rustc_errors::{registry::Registry, PResult};\n+use rustc_errors::{\n+    registry::{InvalidErrorCode, Registry},\n+    PResult,\n+};\n use rustc_feature::{find_gated_cfg, UnstableFeatures};\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_interface::util::{collect_crate_types, get_builtin_codegen_backend};\n@@ -522,11 +525,10 @@ fn stdout_isatty() -> bool {\n fn handle_explain(registry: Registry, code: &str, output: ErrorOutputType) {\n     let normalised =\n         if code.starts_with('E') { code.to_string() } else { format!(\"E{0:0>4}\", code) };\n-    match registry.find_description(&normalised) {\n-        Some(ref description) => {\n+    match registry.try_find_description(&normalised) {\n+        Ok(Some(description)) => {\n             let mut is_in_code_block = false;\n             let mut text = String::new();\n-\n             // Slice off the leading newline and print.\n             for line in description.lines() {\n                 let indent_level =\n@@ -542,16 +544,18 @@ fn handle_explain(registry: Registry, code: &str, output: ErrorOutputType) {\n                 }\n                 text.push('\\n');\n             }\n-\n             if stdout_isatty() {\n                 show_content_with_pager(&text);\n             } else {\n                 print!(\"{}\", text);\n             }\n         }\n-        None => {\n+        Ok(None) => {\n             early_error(output, &format!(\"no extended information for {}\", code));\n         }\n+        Err(InvalidErrorCode) => {\n+            early_error(output, &format!(\"{} is not a valid error code\", code));\n+        }\n     }\n }\n "}, {"sha": "4353a294cc31db9f11c53b8f3499a155c5ea790e", "filename": "src/librustc_error_codes/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e86c9e6ef8be7ddec0360f20aae7d86c69c59a83/src%2Flibrustc_error_codes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86c9e6ef8be7ddec0360f20aae7d86c69c59a83/src%2Flibrustc_error_codes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Flib.rs?ref=e86c9e6ef8be7ddec0360f20aae7d86c69c59a83", "patch": "@@ -3,8 +3,9 @@\n \n macro_rules! register_diagnostics {\n     ($($ecode:ident: $message:expr,)* ; $($code:ident,)*) => (\n-        pub static DIAGNOSTICS: &[(&str, &str)] = &[\n-            $( (stringify!($ecode), $message), )*\n+        pub static DIAGNOSTICS: &[(&str, Option<&str>)] = &[\n+            $( (stringify!($ecode), Some($message)), )*\n+            $( (stringify!($code), None), )*\n         ];\n     )\n }"}, {"sha": "0767b8dda9b8e3ac74c384bef19b233266dbf61c", "filename": "src/librustc_errors/json.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e86c9e6ef8be7ddec0360f20aae7d86c69c59a83/src%2Flibrustc_errors%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86c9e6ef8be7ddec0360f20aae7d86c69c59a83/src%2Flibrustc_errors%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fjson.rs?ref=e86c9e6ef8be7ddec0360f20aae7d86c69c59a83", "patch": "@@ -419,10 +419,10 @@ impl DiagnosticCode {\n                 DiagnosticId::Error(s) => s,\n                 DiagnosticId::Lint(s) => s,\n             };\n-            let explanation =\n-                je.registry.as_ref().and_then(|registry| registry.find_description(&s));\n+            let je_result =\n+                je.registry.as_ref().map(|registry| registry.try_find_description(&s)).unwrap();\n \n-            DiagnosticCode { code: s, explanation }\n+            DiagnosticCode { code: s, explanation: je_result.unwrap_or(None) }\n         })\n     }\n }"}, {"sha": "bc943f2c09cdf915354b69c4ec3016dcebf7ee15", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e86c9e6ef8be7ddec0360f20aae7d86c69c59a83/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86c9e6ef8be7ddec0360f20aae7d86c69c59a83/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=e86c9e6ef8be7ddec0360f20aae7d86c69c59a83", "patch": "@@ -786,8 +786,12 @@ impl HandlerInner {\n                 .emitted_diagnostic_codes\n                 .iter()\n                 .filter_map(|x| match &x {\n-                    DiagnosticId::Error(s) if registry.find_description(s).is_some() => {\n-                        Some(s.clone())\n+                    DiagnosticId::Error(s) => {\n+                        if let Ok(Some(_explanation)) = registry.try_find_description(s) {\n+                            Some(s.clone())\n+                        } else {\n+                            None\n+                        }\n                     }\n                     _ => None,\n                 })"}, {"sha": "c92a9d04775d1e819179fe8472ce3a20794fc536", "filename": "src/librustc_errors/registry.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e86c9e6ef8be7ddec0360f20aae7d86c69c59a83/src%2Flibrustc_errors%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e86c9e6ef8be7ddec0360f20aae7d86c69c59a83/src%2Flibrustc_errors%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fregistry.rs?ref=e86c9e6ef8be7ddec0360f20aae7d86c69c59a83", "patch": "@@ -1,16 +1,32 @@\n use rustc_data_structures::fx::FxHashMap;\n \n+#[derive(Debug)]\n+pub struct InvalidErrorCode;\n+\n #[derive(Clone)]\n pub struct Registry {\n-    descriptions: FxHashMap<&'static str, &'static str>,\n+    long_descriptions: FxHashMap<&'static str, Option<&'static str>>,\n }\n \n impl Registry {\n-    pub fn new(descriptions: &[(&'static str, &'static str)]) -> Registry {\n-        Registry { descriptions: descriptions.iter().cloned().collect() }\n+    pub fn new(long_descriptions: &[(&'static str, Option<&'static str>)]) -> Registry {\n+        Registry { long_descriptions: long_descriptions.iter().cloned().collect() }\n     }\n \n+    /// This will panic if an invalid error code is passed in\n     pub fn find_description(&self, code: &str) -> Option<&'static str> {\n-        self.descriptions.get(code).cloned()\n+        self.try_find_description(code).unwrap()\n+    }\n+    /// Returns `InvalidErrorCode` if the code requested does not exist in the\n+    /// registry. Otherwise, returns an `Option` where `None` means the error\n+    /// code is valid but has no extended information.\n+    pub fn try_find_description(\n+        &self,\n+        code: &str,\n+    ) -> Result<Option<&'static str>, InvalidErrorCode> {\n+        if !self.long_descriptions.contains_key(code) {\n+            return Err(InvalidErrorCode);\n+        }\n+        Ok(self.long_descriptions.get(code).unwrap().clone())\n     }\n }"}]}