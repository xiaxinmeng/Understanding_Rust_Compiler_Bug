{"sha": "60c7f37f7ca755db24a414c66a919aab8ae7a9cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYzdmMzdmN2NhNzU1ZGIyNGE0MTRjNjZhOTE5YWFiOGFlN2E5Y2M=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-03-31T23:53:26Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-04-07T02:55:45Z"}, "message": "Add spans to E0277 for impl/trait type/fn obligation disparity", "tree": {"sha": "5abfa670ba51fe0d222416aadd04c5a4a83b2bb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5abfa670ba51fe0d222416aadd04c5a4a83b2bb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60c7f37f7ca755db24a414c66a919aab8ae7a9cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60c7f37f7ca755db24a414c66a919aab8ae7a9cc", "html_url": "https://github.com/rust-lang/rust/commit/60c7f37f7ca755db24a414c66a919aab8ae7a9cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60c7f37f7ca755db24a414c66a919aab8ae7a9cc/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2375b8ae7e57c7fc068a43138bd3da8c670c8c8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2375b8ae7e57c7fc068a43138bd3da8c670c8c8d", "html_url": "https://github.com/rust-lang/rust/commit/2375b8ae7e57c7fc068a43138bd3da8c670c8c8d"}], "stats": {"total": 121, "additions": 96, "deletions": 25}, "files": [{"sha": "6a4d41ffc1ac957144168b4faa0d797d927f9b8c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 52, "deletions": 11, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/60c7f37f7ca755db24a414c66a919aab8ae7a9cc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c7f37f7ca755db24a414c66a919aab8ae7a9cc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=60c7f37f7ca755db24a414c66a919aab8ae7a9cc", "patch": "@@ -2179,19 +2179,60 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     )\n                 });\n             }\n-            ObligationCauseCode::CompareImplMethodObligation { .. } => {\n-                err.note(&format!(\n-                    \"the requirement `{}` appears on the impl method but not on the corresponding \\\n-                     trait method\",\n-                    predicate\n-                ));\n+            ObligationCauseCode::CompareImplMethodObligation {\n+                item_name,\n+                trait_item_def_id,\n+                ..\n+            } => {\n+                let msg = format!(\n+                    \"the requirement `{}` appears on the impl method `{}` but not on the \\\n+                     corresponding trait method\",\n+                    predicate, item_name,\n+                );\n+                let sp = self\n+                    .tcx\n+                    .opt_item_name(trait_item_def_id)\n+                    .map(|i| i.span)\n+                    .unwrap_or_else(|| self.tcx.def_span(trait_item_def_id));\n+                let mut assoc_span: MultiSpan = sp.into();\n+                assoc_span.push_span_label(\n+                    sp,\n+                    format!(\"this trait method doesn't have the requirement `{}`\", predicate),\n+                );\n+                if let Some(ident) = self\n+                    .tcx\n+                    .opt_associated_item(trait_item_def_id)\n+                    .and_then(|i| self.tcx.opt_item_name(i.container.id()))\n+                {\n+                    assoc_span.push_span_label(ident.span, \"in this trait\".into());\n+                }\n+                err.span_note(assoc_span, &msg);\n             }\n-            ObligationCauseCode::CompareImplTypeObligation { .. } => {\n-                err.note(&format!(\n-                    \"the requirement `{}` appears on the associated impl type but not on the \\\n+            ObligationCauseCode::CompareImplTypeObligation {\n+                item_name, trait_item_def_id, ..\n+            } => {\n+                let msg = format!(\n+                    \"the requirement `{}` appears on the associated impl type `{}` but not on the \\\n                      corresponding associated trait type\",\n-                    predicate\n-                ));\n+                    predicate, item_name,\n+                );\n+                let sp = self.tcx.def_span(trait_item_def_id);\n+                let mut assoc_span: MultiSpan = sp.into();\n+                assoc_span.push_span_label(\n+                    sp,\n+                    format!(\n+                        \"this trait associated type doesn't have the requirement `{}`\",\n+                        predicate,\n+                    ),\n+                );\n+                if let Some(ident) = self\n+                    .tcx\n+                    .opt_associated_item(trait_item_def_id)\n+                    .and_then(|i| self.tcx.opt_item_name(i.container.id()))\n+                {\n+                    assoc_span.push_span_label(ident.span, \"in this trait\".into());\n+                }\n+                err.span_note(assoc_span, &msg);\n             }\n             ObligationCauseCode::CompareImplConstObligation => {\n                 err.note(&format!("}, {"sha": "50e1c50644e356cb3ee3ce33c2cf04fd13123310", "filename": "src/test/ui/generic-associated-types/impl_bounds.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/60c7f37f7ca755db24a414c66a919aab8ae7a9cc/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60c7f37f7ca755db24a414c66a919aab8ae7a9cc/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.rs?ref=60c7f37f7ca755db24a414c66a919aab8ae7a9cc", "patch": "@@ -6,6 +6,7 @@ trait Foo {\n     type A<'a> where Self: 'a;\n     type B<'a, 'b> where 'a: 'b;\n     type C where Self: Clone;\n+    fn d() where Self: Clone;\n }\n \n #[derive(Copy, Clone)]\n@@ -19,6 +20,8 @@ impl<T> Foo for Fooy<T> {\n     //~| ERROR lifetime bound not satisfied\n     type C where Self: Copy = String;\n     //~^ ERROR the trait bound `T: Copy` is not satisfied\n+    fn d() where Self: Copy {}\n+    //~^ ERROR the trait bound `T: Copy` is not satisfied\n }\n \n fn main() {}"}, {"sha": "afa43b5693e10b581ab1df8194d5b208be127617", "filename": "src/test/ui/generic-associated-types/impl_bounds.stderr", "status": "modified", "additions": 41, "deletions": 14, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/60c7f37f7ca755db24a414c66a919aab8ae7a9cc/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60c7f37f7ca755db24a414c66a919aab8ae7a9cc/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr?ref=60c7f37f7ca755db24a414c66a919aab8ae7a9cc", "patch": "@@ -1,5 +1,5 @@\n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/impl_bounds.rs:15:5\n+  --> $DIR/impl_bounds.rs:16:5\n    |\n LL |     type A<'a> where Self: 'static = (&'a ());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,53 +8,80 @@ LL |     type A<'a> where Self: 'static = (&'a ());\n    = note: ...so that the type `Fooy<T>` will meet its required lifetime bounds\n \n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/impl_bounds.rs:17:5\n+  --> $DIR/impl_bounds.rs:18:5\n    |\n LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the lifetime `'b` as defined on the associated item at 17:16\n-  --> $DIR/impl_bounds.rs:17:16\n+note: lifetime parameter instantiated with the lifetime `'b` as defined on the associated item at 18:16\n+  --> $DIR/impl_bounds.rs:18:16\n    |\n LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n    |                ^^\n-note: but lifetime parameter must outlive the lifetime `'a` as defined on the associated item at 17:12\n-  --> $DIR/impl_bounds.rs:17:12\n+note: but lifetime parameter must outlive the lifetime `'a` as defined on the associated item at 18:12\n+  --> $DIR/impl_bounds.rs:18:12\n    |\n LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n    |            ^^\n \n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/impl_bounds.rs:17:5\n+  --> $DIR/impl_bounds.rs:18:5\n    |\n LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the lifetime `'a` as defined on the associated item at 17:12\n-  --> $DIR/impl_bounds.rs:17:12\n+note: lifetime parameter instantiated with the lifetime `'a` as defined on the associated item at 18:12\n+  --> $DIR/impl_bounds.rs:18:12\n    |\n LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n    |            ^^\n-note: but lifetime parameter must outlive the lifetime `'b` as defined on the associated item at 17:16\n-  --> $DIR/impl_bounds.rs:17:16\n+note: but lifetime parameter must outlive the lifetime `'b` as defined on the associated item at 18:16\n+  --> $DIR/impl_bounds.rs:18:16\n    |\n LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n    |                ^^\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/impl_bounds.rs:20:5\n+  --> $DIR/impl_bounds.rs:21:5\n    |\n LL |     type C where Self: Copy = String;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n    |\n    = note: required because of the requirements on the impl of `Copy` for `Fooy<T>`\n-   = note: the requirement `Fooy<T>: Copy` appears on the associated impl type but not on the corresponding associated trait type\n+note: the requirement `Fooy<T>: Copy` appears on the associated impl type `C` but not on the corresponding associated trait type\n+  --> $DIR/impl_bounds.rs:8:5\n+   |\n+LL | trait Foo {\n+   |       --- in this trait\n+...\n+LL |     type C where Self: Clone;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ this trait associated type doesn't have the requirement `Fooy<T>: Copy`\n+help: consider restricting type parameter `T`\n+   |\n+LL | impl<T: Copy> Foo for Fooy<T> {\n+   |       ^^^^^^\n+\n+error[E0277]: the trait bound `T: Copy` is not satisfied\n+  --> $DIR/impl_bounds.rs:23:5\n+   |\n+LL |     fn d() where Self: Copy {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n+   |\n+   = note: required because of the requirements on the impl of `Copy` for `Fooy<T>`\n+note: the requirement `Fooy<T>: Copy` appears on the impl method `d` but not on the corresponding trait method\n+  --> $DIR/impl_bounds.rs:9:8\n+   |\n+LL | trait Foo {\n+   |       --- in this trait\n+...\n+LL |     fn d() where Self: Clone;\n+   |        ^ this trait method doesn't have the requirement `Fooy<T>: Copy`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::marker::Copy> Foo for Fooy<T> {\n    |       ^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0277, E0310, E0478.\n For more information about an error, try `rustc --explain E0277`."}]}