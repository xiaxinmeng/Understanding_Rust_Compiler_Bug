{"sha": "30c06da78124dad8341689a15d6ccfe1450c5ab9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwYzA2ZGE3ODEyNGRhZDgzNDE2ODlhMTVkNmNjZmUxNDUwYzVhYjk=", "commit": {"author": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2018-10-15T21:24:35Z"}, "committer": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2018-10-15T21:24:35Z"}, "message": "force a newline after the `if` condition if there is a different\nindentation level", "tree": {"sha": "71e7b0ae1ca28a8d1305880cb038f55e817d4d58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71e7b0ae1ca28a8d1305880cb038f55e817d4d58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30c06da78124dad8341689a15d6ccfe1450c5ab9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEipi5pnt+pUplKNfibVYg2QghATMFAlvFBdoACgkQbVYg2Qgh\nATNEQgf/Yqg+tUNjsig+0b9yYyql3BqxYUoxV1xytvpF5nJc5ODvAT8cHv+hl9CP\nhY68dqKXg46S1nbcZyRHKS6AKfyqy6K5Eo/R4EmQQzcKHMWs4scoFzDo9xwi9A1k\nsB0lNmefhVuNi6bnJ6uYUJ9hiSGambTKqcWZ8jteMNTJwl48gqlQmthojAKF34lG\nNAxwIs8bKKD0b/8Ae75E74hIJ0SAovyTaZt95BpLMRfOjWOIsCTHghqjJJIsr4/T\np1DkQH92NKC/cwxydYH8IJV8lpFVSNHLSRikh3vp934aVZ3ZJWTPlle8+9aUlrDG\no3nlfANYk7e7Nhjb2KO4DGm1F73ihQ==\n=7ssV\n-----END PGP SIGNATURE-----", "payload": "tree 71e7b0ae1ca28a8d1305880cb038f55e817d4d58\nparent c09d7ef08843e2b23e38462ce8e6e1b07559d6d3\nauthor St\u00e9phane Campinas <stephane.campinas@gmail.com> 1539638675 +0200\ncommitter St\u00e9phane Campinas <stephane.campinas@gmail.com> 1539638675 +0200\n\nforce a newline after the `if` condition if there is a different\nindentation level\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30c06da78124dad8341689a15d6ccfe1450c5ab9", "html_url": "https://github.com/rust-lang/rust/commit/30c06da78124dad8341689a15d6ccfe1450c5ab9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30c06da78124dad8341689a15d6ccfe1450c5ab9/comments", "author": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c09d7ef08843e2b23e38462ce8e6e1b07559d6d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3", "html_url": "https://github.com/rust-lang/rust/commit/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3"}], "stats": {"total": 95, "additions": 93, "deletions": 2}, "files": [{"sha": "fbbc592e547228c2b1175bd008a7013ff8ea5017", "filename": "src/expr.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/30c06da78124dad8341689a15d6ccfe1450c5ab9/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30c06da78124dad8341689a15d6ccfe1450c5ab9/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=30c06da78124dad8341689a15d6ccfe1450c5ab9", "patch": "@@ -801,6 +801,20 @@ impl<'a> ControlFlow<'a> {\n     }\n }\n \n+/// Returns true if the last line of pat_str has leading whitespace and it is wider than the\n+/// shape's indent.\n+fn last_line_offsetted(start_column: usize, pat_str: &str) -> bool {\n+    let mut leading_whitespaces = 0;\n+    for c in pat_str.chars().rev() {\n+        match c {\n+            '\\n' => break,\n+            _ if c.is_whitespace() => leading_whitespaces += 1,\n+            _ => leading_whitespaces = 0,\n+        }\n+    }\n+    leading_whitespaces > start_column\n+}\n+\n impl<'a> ControlFlow<'a> {\n     fn rewrite_pat_expr(\n         &self,\n@@ -885,7 +899,8 @@ impl<'a> ControlFlow<'a> {\n             .saturating_sub(constr_shape.used_width() + offset + brace_overhead);\n         let force_newline_brace = (pat_expr_string.contains('\\n')\n             || pat_expr_string.len() > one_line_budget)\n-            && !last_line_extendable(&pat_expr_string);\n+            && (!last_line_extendable(&pat_expr_string)\n+                || last_line_offsetted(shape.used_width(), &pat_expr_string));\n \n         // Try to format if-else on single line.\n         if self.allow_single_line\n@@ -1977,3 +1992,29 @@ pub fn is_method_call(expr: &ast::Expr) -> bool {\n         _ => false,\n     }\n }\n+\n+#[cfg(test)]\n+mod test {\n+    use super::last_line_offsetted;\n+\n+    #[test]\n+    fn test_last_line_offsetted() {\n+        let lines = \"one\\n    two\";\n+        assert_eq!(last_line_offsetted(2, lines), true);\n+        assert_eq!(last_line_offsetted(4, lines), false);\n+        assert_eq!(last_line_offsetted(6, lines), false);\n+\n+        let lines = \"one    two\";\n+        assert_eq!(last_line_offsetted(2, lines), false);\n+        assert_eq!(last_line_offsetted(0, lines), false);\n+\n+        let lines = \"\\ntwo\";\n+        assert_eq!(last_line_offsetted(2, lines), false);\n+        assert_eq!(last_line_offsetted(0, lines), false);\n+\n+        let lines = \"one\\n    two      three\";\n+        assert_eq!(last_line_offsetted(2, lines), true);\n+        let lines = \"one\\n two      three\";\n+        assert_eq!(last_line_offsetted(2, lines), false);\n+    }\n+}"}, {"sha": "0fbb05ddc0e62749704c51e1988590227260e07c", "filename": "tests/source/issue-3038.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/30c06da78124dad8341689a15d6ccfe1450c5ab9/tests%2Fsource%2Fissue-3038.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30c06da78124dad8341689a15d6ccfe1450c5ab9/tests%2Fsource%2Fissue-3038.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3038.rs?ref=30c06da78124dad8341689a15d6ccfe1450c5ab9", "patch": "@@ -0,0 +1,20 @@\n+impl HTMLTableElement {\n+    fn func() {\n+        if number_of_row_elements == 0 {\n+            if let Some(last_tbody) = node.rev_children()\n+                    .filter_map(DomRoot::downcast::<Element>)\n+                    .find(|n| n.is::<HTMLTableSectionElement>() && n.local_name() == &local_name!(\"tbody\")) {\n+                        last_tbody.upcast::<Node>().AppendChild(new_row.upcast::<Node>())\n+                                                   .expect(\"InsertRow failed to append first row.\");\n+                    }\n+        }\n+\n+        if number_of_row_elements == 0 {\n+            if let Some(last_tbody) = node\n+                    .find(|n| n.is::<HTMLTableSectionElement>() && n.local_name() == &local_name!(\"tbody\")) {\n+                        last_tbody.upcast::<Node>().AppendChild(new_row.upcast::<Node>())\n+                                                   .expect(\"InsertRow failed to append first row.\");\n+                    }\n+        }\n+    }\n+}"}, {"sha": "faad859236dc911e9725465ad58b09be5ae1bfe5", "filename": "tests/target/issue-2985.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/30c06da78124dad8341689a15d6ccfe1450c5ab9/tests%2Ftarget%2Fissue-2985.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30c06da78124dad8341689a15d6ccfe1450c5ab9/tests%2Ftarget%2Fissue-2985.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2985.rs?ref=30c06da78124dad8341689a15d6ccfe1450c5ab9", "patch": "@@ -27,7 +27,8 @@ fn foo() {\n                                                           .map(String::as_ref)\n                                                           .unwrap_or(\"\")\n                                                           .is_empty()\n-                                                    }) {\n+                                                    })\n+            {\n                 do_something();\n             }\n         }"}, {"sha": "3c398b825d7e70fffc589243d8a950e708b387fa", "filename": "tests/target/issue-3038.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/30c06da78124dad8341689a15d6ccfe1450c5ab9/tests%2Ftarget%2Fissue-3038.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30c06da78124dad8341689a15d6ccfe1450c5ab9/tests%2Ftarget%2Fissue-3038.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3038.rs?ref=30c06da78124dad8341689a15d6ccfe1450c5ab9", "patch": "@@ -0,0 +1,29 @@\n+impl HTMLTableElement {\n+    fn func() {\n+        if number_of_row_elements == 0 {\n+            if let Some(last_tbody) = node\n+                .rev_children()\n+                .filter_map(DomRoot::downcast::<Element>)\n+                .find(|n| {\n+                    n.is::<HTMLTableSectionElement>() && n.local_name() == &local_name!(\"tbody\")\n+                })\n+            {\n+                last_tbody\n+                    .upcast::<Node>()\n+                    .AppendChild(new_row.upcast::<Node>())\n+                    .expect(\"InsertRow failed to append first row.\");\n+            }\n+        }\n+\n+        if number_of_row_elements == 0 {\n+            if let Some(last_tbody) = node.find(|n| {\n+                n.is::<HTMLTableSectionElement>() && n.local_name() == &local_name!(\"tbody\")\n+            }) {\n+                last_tbody\n+                    .upcast::<Node>()\n+                    .AppendChild(new_row.upcast::<Node>())\n+                    .expect(\"InsertRow failed to append first row.\");\n+            }\n+        }\n+    }\n+}"}]}