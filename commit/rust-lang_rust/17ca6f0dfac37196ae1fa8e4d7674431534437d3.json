{"sha": "17ca6f0dfac37196ae1fa8e4d7674431534437d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3Y2E2ZjBkZmFjMzcxOTZhZTFmYThlNGQ3Njc0NDMxNTM0NDM3ZDM=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-08-26T21:39:13Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-10-16T03:10:10Z"}, "message": "path2: Add tests for the [u8]-based methods", "tree": {"sha": "be9ef607dc6c4d68e29523bfaf1f99d07b2a1f6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be9ef607dc6c4d68e29523bfaf1f99d07b2a1f6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17ca6f0dfac37196ae1fa8e4d7674431534437d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17ca6f0dfac37196ae1fa8e4d7674431534437d3", "html_url": "https://github.com/rust-lang/rust/commit/17ca6f0dfac37196ae1fa8e4d7674431534437d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17ca6f0dfac37196ae1fa8e4d7674431534437d3/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0fc0650c53b46b01f3746ca3de578520846fe36", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0fc0650c53b46b01f3746ca3de578520846fe36", "html_url": "https://github.com/rust-lang/rust/commit/f0fc0650c53b46b01f3746ca3de578520846fe36"}], "stats": {"total": 830, "additions": 560, "deletions": 270}, "files": [{"sha": "c10b6eeeda8300fa49c9ca098cf7485a8d39ccb2", "filename": "src/libstd/path2.rs", "status": "modified", "additions": 560, "deletions": 270, "changes": 830, "blob_url": "https://github.com/rust-lang/rust/blob/17ca6f0dfac37196ae1fa8e4d7674431534437d3/src%2Flibstd%2Fpath2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ca6f0dfac37196ae1fa8e4d7674431534437d3/src%2Flibstd%2Fpath2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath2.rs?ref=17ca6f0dfac37196ae1fa8e4d7674431534437d3", "patch": "@@ -898,108 +898,257 @@ mod tests {\n     use vec::Vector;\n \n     macro_rules! t(\n-        ($path:expr, $exp:expr) => (\n+        (s: $path:expr, $exp:expr) => (\n             {\n                 let path = $path;\n                 assert_eq!(path.as_str(), Some($exp));\n             }\n+        );\n+        (v: $path:expr, $exp:expr) => (\n+            {\n+                let path = $path;\n+                assert_eq!(path.as_vec(), $exp);\n+            }\n+        )\n+    )\n+\n+    macro_rules! b(\n+        ($($arg:expr),+) => (\n+            bytes!($($arg),+)\n         )\n     )\n \n     #[test]\n     fn test_posix_paths() {\n-        t!(PosixPath::from_str(\"\"), \".\");\n-        t!(PosixPath::from_str(\"/\"), \"/\");\n-        t!(PosixPath::from_str(\"hi\"), \"hi\");\n-        t!(PosixPath::from_str(\"/lib\"), \"/lib\");\n-        t!(PosixPath::from_str(\"hi/there\"), \"hi/there\");\n-        t!(PosixPath::from_str(\"hi/there.txt\"), \"hi/there.txt\");\n-\n-        t!(PosixPath::from_str(\"hi/there/\"), \"hi/there\");\n-        t!(PosixPath::from_str(\"hi/../there\"), \"there\");\n-        t!(PosixPath::from_str(\"../hi/there\"), \"../hi/there\");\n-        t!(PosixPath::from_str(\"/../hi/there\"), \"/hi/there\");\n-        t!(PosixPath::from_str(\"foo/..\"), \".\");\n-        t!(PosixPath::from_str(\"/foo/..\"), \"/\");\n-        t!(PosixPath::from_str(\"/foo/../..\"), \"/\");\n-        t!(PosixPath::from_str(\"/foo/../../bar\"), \"/bar\");\n-        t!(PosixPath::from_str(\"/./hi/./there/.\"), \"/hi/there\");\n-        t!(PosixPath::from_str(\"/./hi/./there/./..\"), \"/hi\");\n-        t!(PosixPath::from_str(\"foo/../..\"), \"..\");\n-        t!(PosixPath::from_str(\"foo/../../..\"), \"../..\");\n-        t!(PosixPath::from_str(\"foo/../../bar\"), \"../bar\");\n-\n+        t!(v: PosixPath::new([]), b!(\".\"));\n+        t!(v: PosixPath::new(b!(\"/\")), b!(\"/\"));\n+        t!(v: PosixPath::new(b!(\"a/b/c\")), b!(\"a/b/c\"));\n+        t!(v: PosixPath::new(b!(\"a/b/c\", 0xff)), b!(\"a/b/c\", 0xff));\n+        t!(v: PosixPath::new(b!(0xff, \"/../foo\", 0x80)), b!(\"foo\", 0x80));\n+        let p = PosixPath::new(b!(\"a/b/c\", 0xff));\n+        assert_eq!(p.as_str(), None);\n+\n+        t!(s: PosixPath::from_str(\"\"), \".\");\n+        t!(s: PosixPath::from_str(\"/\"), \"/\");\n+        t!(s: PosixPath::from_str(\"hi\"), \"hi\");\n+        t!(s: PosixPath::from_str(\"/lib\"), \"/lib\");\n+        t!(s: PosixPath::from_str(\"hi/there\"), \"hi/there\");\n+        t!(s: PosixPath::from_str(\"hi/there.txt\"), \"hi/there.txt\");\n+\n+        t!(s: PosixPath::from_str(\"hi/there/\"), \"hi/there\");\n+        t!(s: PosixPath::from_str(\"hi/../there\"), \"there\");\n+        t!(s: PosixPath::from_str(\"../hi/there\"), \"../hi/there\");\n+        t!(s: PosixPath::from_str(\"/../hi/there\"), \"/hi/there\");\n+        t!(s: PosixPath::from_str(\"foo/..\"), \".\");\n+        t!(s: PosixPath::from_str(\"/foo/..\"), \"/\");\n+        t!(s: PosixPath::from_str(\"/foo/../..\"), \"/\");\n+        t!(s: PosixPath::from_str(\"/foo/../../bar\"), \"/bar\");\n+        t!(s: PosixPath::from_str(\"/./hi/./there/.\"), \"/hi/there\");\n+        t!(s: PosixPath::from_str(\"/./hi/./there/./..\"), \"/hi\");\n+        t!(s: PosixPath::from_str(\"foo/../..\"), \"..\");\n+        t!(s: PosixPath::from_str(\"foo/../../..\"), \"../..\");\n+        t!(s: PosixPath::from_str(\"foo/../../bar\"), \"../bar\");\n+\n+        assert_eq!(PosixPath::new(b!(\"foo/bar\")).into_vec(), b!(\"foo/bar\").to_owned());\n+        assert_eq!(PosixPath::new(b!(\"/foo/../../bar\")).into_vec(),\n+                   b!(\"/bar\").to_owned());\n         assert_eq!(PosixPath::from_str(\"foo/bar\").into_str(), Some(~\"foo/bar\"));\n         assert_eq!(PosixPath::from_str(\"/foo/../../bar\").into_str(), Some(~\"/bar\"));\n+\n+        let p = PosixPath::new(b!(\"foo/bar\", 0x80));\n+        assert_eq!(p.as_str(), None);\n+        assert_eq!(PosixPath::new(b!(\"foo\", 0xff, \"/bar\")).into_str(), None);\n+    }\n+\n+    #[test]\n+    fn test_posix_null_byte() {\n+        use super::null_byte::cond;\n+\n+        let mut handled = false;\n+        let mut p = do cond.trap(|v| {\n+            handled = true;\n+            assert_eq!(v.as_slice(), b!(\"foo/bar\", 0));\n+            (b!(\"/bar\").to_owned())\n+        }).inside {\n+            PosixPath::new(b!(\"foo/bar\", 0))\n+        };\n+        assert!(handled);\n+        assert_eq!(p.as_vec(), b!(\"/bar\"));\n+\n+        handled = false;\n+        do cond.trap(|v| {\n+            handled = true;\n+            assert_eq!(v.as_slice(), b!(\"f\", 0, \"o\"));\n+            (b!(\"foo\").to_owned())\n+        }).inside {\n+            p.set_filename(b!(\"f\", 0, \"o\"))\n+        };\n+        assert!(handled);\n+        assert_eq!(p.as_vec(), b!(\"/foo\"));\n+\n+        handled = false;\n+        do cond.trap(|v| {\n+            handled = true;\n+            assert_eq!(v.as_slice(), b!(\"null/\", 0, \"/byte\"));\n+            (b!(\"null/byte\").to_owned())\n+        }).inside {\n+            p.set_dirname(b!(\"null/\", 0, \"/byte\"));\n+        };\n+        assert!(handled);\n+        assert_eq!(p.as_vec(), b!(\"null/byte/foo\"));\n+\n+        handled = false;\n+        do cond.trap(|v| {\n+            handled = true;\n+            assert_eq!(v.as_slice(), b!(\"f\", 0, \"o\"));\n+            (b!(\"foo\").to_owned())\n+        }).inside {\n+            p.push(b!(\"f\", 0, \"o\"));\n+        };\n+        assert!(handled);\n+        assert_eq!(p.as_vec(), b!(\"null/byte/foo/foo\"));\n+    }\n+\n+    #[test]\n+    fn test_posix_null_byte_fail() {\n+        use super::null_byte::cond;\n+        use task;\n+\n+        macro_rules! t(\n+            ($name:expr => $code:block) => (\n+                {\n+                    let mut t = task::task();\n+                    t.supervised();\n+                    t.name($name);\n+                    let res = do t.try $code;\n+                    assert!(res.is_err());\n+                }\n+            )\n+        )\n+\n+        t!(~\"new() w/nul\" => {\n+            do cond.trap(|_| {\n+                (b!(\"null\", 0).to_owned())\n+            }).inside {\n+                PosixPath::new(b!(\"foo/bar\", 0))\n+            };\n+        })\n+\n+        t!(~\"set_filename w/nul\" => {\n+            let mut p = PosixPath::new(b!(\"foo/bar\"));\n+            do cond.trap(|_| {\n+                (b!(\"null\", 0).to_owned())\n+            }).inside {\n+                p.set_filename(b!(\"foo\", 0))\n+            };\n+        })\n+\n+        t!(~\"set_dirname w/nul\" => {\n+            let mut p = PosixPath::new(b!(\"foo/bar\"));\n+            do cond.trap(|_| {\n+                (b!(\"null\", 0).to_owned())\n+            }).inside {\n+                p.set_dirname(b!(\"foo\", 0))\n+            };\n+        })\n+\n+        t!(~\"push w/nul\" => {\n+            let mut p = PosixPath::new(b!(\"foo/bar\"));\n+            do cond.trap(|_| {\n+                (b!(\"null\", 0).to_owned())\n+            }).inside {\n+                p.push(b!(\"foo\", 0))\n+            };\n+        })\n     }\n \n     #[test]\n     fn test_posix_components() {\n         macro_rules! t(\n-            ($path:expr, $op:ident, $exp:expr) => (\n+            (s: $path:expr, $op:ident, $exp:expr) => (\n                 {\n                     let path = PosixPath::from_str($path);\n                     assert_eq!(path.$op(), ($exp).as_bytes());\n                 }\n             );\n-            ($path:expr, $op:ident, $exp:expr, opt) => (\n+            (s: $path:expr, $op:ident, $exp:expr, opt) => (\n                 {\n                     let path = PosixPath::from_str($path);\n                     let left = path.$op().map(|&x| str::from_bytes_slice(x));\n                     assert_eq!(left, $exp);\n                 }\n+            );\n+            (v: $path:expr, $op:ident, $exp:expr) => (\n+                {\n+                    let path = PosixPath::new($path);\n+                    assert_eq!(path.$op(), $exp);\n+                }\n             )\n         )\n \n-        t!(\"a/b/c\", filename, \"c\");\n-        t!(\"/a/b/c\", filename, \"c\");\n-        t!(\"a\", filename, \"a\");\n-        t!(\"/a\", filename, \"a\");\n-        t!(\".\", filename, \"\");\n-        t!(\"/\", filename, \"\");\n-        t!(\"..\", filename, \"\");\n-        t!(\"../..\", filename, \"\");\n-\n-        t!(\"a/b/c\", dirname, \"a/b\");\n-        t!(\"/a/b/c\", dirname, \"/a/b\");\n-        t!(\"a\", dirname, \".\");\n-        t!(\"/a\", dirname, \"/\");\n-        t!(\".\", dirname, \".\");\n-        t!(\"/\", dirname, \"/\");\n-        t!(\"..\", dirname, \"..\");\n-        t!(\"../..\", dirname, \"../..\");\n-\n-        t!(\"hi/there.txt\", filestem, \"there\");\n-        t!(\"hi/there\", filestem, \"there\");\n-        t!(\"there.txt\", filestem, \"there\");\n-        t!(\"there\", filestem, \"there\");\n-        t!(\".\", filestem, \"\");\n-        t!(\"/\", filestem, \"\");\n-        t!(\"foo/.bar\", filestem, \".bar\");\n-        t!(\".bar\", filestem, \".bar\");\n-        t!(\"..bar\", filestem, \".\");\n-        t!(\"hi/there..txt\", filestem, \"there.\");\n-        t!(\"..\", filestem, \"\");\n-        t!(\"../..\", filestem, \"\");\n-\n-        t!(\"hi/there.txt\", extension, Some(\"txt\"), opt);\n-        t!(\"hi/there\", extension, None, opt);\n-        t!(\"there.txt\", extension, Some(\"txt\"), opt);\n-        t!(\"there\", extension, None, opt);\n-        t!(\".\", extension, None, opt);\n-        t!(\"/\", extension, None, opt);\n-        t!(\"foo/.bar\", extension, None, opt);\n-        t!(\".bar\", extension, None, opt);\n-        t!(\"..bar\", extension, Some(\"bar\"), opt);\n-        t!(\"hi/there..txt\", extension, Some(\"txt\"), opt);\n-        t!(\"..\", extension, None, opt);\n-        t!(\"../..\", extension, None, opt);\n+        t!(v: b!(\"a/b/c\"), filename, b!(\"c\"));\n+        t!(v: b!(\"a/b/c\", 0xff), filename, b!(\"c\", 0xff));\n+        t!(v: b!(\"a/b\", 0xff, \"/c\"), filename, b!(\"c\"));\n+        t!(s: \"a/b/c\", filename, \"c\");\n+        t!(s: \"/a/b/c\", filename, \"c\");\n+        t!(s: \"a\", filename, \"a\");\n+        t!(s: \"/a\", filename, \"a\");\n+        t!(s: \".\", filename, \"\");\n+        t!(s: \"/\", filename, \"\");\n+        t!(s: \"..\", filename, \"\");\n+        t!(s: \"../..\", filename, \"\");\n+\n+        t!(v: b!(\"a/b/c\"), dirname, b!(\"a/b\"));\n+        t!(v: b!(\"a/b/c\", 0xff), dirname, b!(\"a/b\"));\n+        t!(v: b!(\"a/b\", 0xff, \"/c\"), dirname, b!(\"a/b\", 0xff));\n+        t!(s: \"a/b/c\", dirname, \"a/b\");\n+        t!(s: \"/a/b/c\", dirname, \"/a/b\");\n+        t!(s: \"a\", dirname, \".\");\n+        t!(s: \"/a\", dirname, \"/\");\n+        t!(s: \".\", dirname, \".\");\n+        t!(s: \"/\", dirname, \"/\");\n+        t!(s: \"..\", dirname, \"..\");\n+        t!(s: \"../..\", dirname, \"../..\");\n+\n+        t!(v: b!(\"hi/there.txt\"), filestem, b!(\"there\"));\n+        t!(v: b!(\"hi/there\", 0x80, \".txt\"), filestem, b!(\"there\", 0x80));\n+        t!(v: b!(\"hi/there.t\", 0x80, \"xt\"), filestem, b!(\"there\"));\n+        t!(s: \"hi/there.txt\", filestem, \"there\");\n+        t!(s: \"hi/there\", filestem, \"there\");\n+        t!(s: \"there.txt\", filestem, \"there\");\n+        t!(s: \"there\", filestem, \"there\");\n+        t!(s: \".\", filestem, \"\");\n+        t!(s: \"/\", filestem, \"\");\n+        t!(s: \"foo/.bar\", filestem, \".bar\");\n+        t!(s: \".bar\", filestem, \".bar\");\n+        t!(s: \"..bar\", filestem, \".\");\n+        t!(s: \"hi/there..txt\", filestem, \"there.\");\n+        t!(s: \"..\", filestem, \"\");\n+        t!(s: \"../..\", filestem, \"\");\n+\n+        t!(v: b!(\"hi/there.txt\"), extension, Some(b!(\"txt\")));\n+        t!(v: b!(\"hi/there\", 0x80, \".txt\"), extension, Some(b!(\"txt\")));\n+        t!(v: b!(\"hi/there.t\", 0x80, \"xt\"), extension, Some(b!(\"t\", 0x80, \"xt\")));\n+        t!(v: b!(\"hi/there\"), extension, None);\n+        t!(v: b!(\"hi/there\", 0x80), extension, None);\n+        t!(s: \"hi/there.txt\", extension, Some(\"txt\"), opt);\n+        t!(s: \"hi/there\", extension, None, opt);\n+        t!(s: \"there.txt\", extension, Some(\"txt\"), opt);\n+        t!(s: \"there\", extension, None, opt);\n+        t!(s: \".\", extension, None, opt);\n+        t!(s: \"/\", extension, None, opt);\n+        t!(s: \"foo/.bar\", extension, None, opt);\n+        t!(s: \".bar\", extension, None, opt);\n+        t!(s: \"..bar\", extension, Some(\"bar\"), opt);\n+        t!(s: \"hi/there..txt\", extension, Some(\"txt\"), opt);\n+        t!(s: \"..\", extension, None, opt);\n+        t!(s: \"../..\", extension, None, opt);\n     }\n \n     #[test]\n     fn test_posix_push() {\n         macro_rules! t(\n-            ($path:expr, $join:expr) => (\n+            (s: $path:expr, $join:expr) => (\n                 {\n                     let path = ($path);\n                     let join = ($join);\n@@ -1011,16 +1160,16 @@ mod tests {\n             )\n         )\n \n-        t!(\"a/b/c\", \"..\");\n-        t!(\"/a/b/c\", \"d\");\n-        t!(\"a/b\", \"c/d\");\n-        t!(\"a/b\", \"/c/d\");\n+        t!(s: \"a/b/c\", \"..\");\n+        t!(s: \"/a/b/c\", \"d\");\n+        t!(s: \"a/b\", \"c/d\");\n+        t!(s: \"a/b\", \"/c/d\");\n     }\n \n     #[test]\n     fn test_posix_push_path() {\n         macro_rules! t(\n-            ($path:expr, $push:expr, $exp:expr) => (\n+            (s: $path:expr, $push:expr, $exp:expr) => (\n                 {\n                     let mut p = PosixPath::from_str($path);\n                     let push = PosixPath::from_str($push);\n@@ -1030,48 +1179,79 @@ mod tests {\n             )\n         )\n \n-        t!(\"a/b/c\", \"d\", \"a/b/c/d\");\n-        t!(\"/a/b/c\", \"d\", \"/a/b/c/d\");\n-        t!(\"a/b\", \"c/d\", \"a/b/c/d\");\n-        t!(\"a/b\", \"/c/d\", \"/c/d\");\n-        t!(\"a/b\", \".\", \"a/b\");\n-        t!(\"a/b\", \"../c\", \"a/c\");\n+        t!(s: \"a/b/c\", \"d\", \"a/b/c/d\");\n+        t!(s: \"/a/b/c\", \"d\", \"/a/b/c/d\");\n+        t!(s: \"a/b\", \"c/d\", \"a/b/c/d\");\n+        t!(s: \"a/b\", \"/c/d\", \"/c/d\");\n+        t!(s: \"a/b\", \".\", \"a/b\");\n+        t!(s: \"a/b\", \"../c\", \"a/c\");\n     }\n \n     #[test]\n     fn test_posix_pop() {\n         macro_rules! t(\n-            ($path:expr, $left:expr, $right:expr) => (\n+            (s: $path:expr, $left:expr, $right:expr) => (\n                 {\n                     let mut p = PosixPath::from_str($path);\n                     let file = p.pop_opt_str();\n                     assert_eq!(p.as_str(), Some($left));\n                     assert_eq!(file.map(|s| s.as_slice()), $right);\n                 }\n+            );\n+            (v: [$($path:expr),+], [$($left:expr),+], Some($($right:expr),+)) => (\n+                {\n+                    let mut p = PosixPath::new(b!($($path),+));\n+                    let file = p.pop_opt();\n+                    assert_eq!(p.as_vec(), b!($($left),+));\n+                    assert_eq!(file.map(|v| v.as_slice()), Some(b!($($right),+)));\n+                }\n+            );\n+            (v: [$($path:expr),+], [$($left:expr),+], None) => (\n+                {\n+                    let mut p = PosixPath::new(b!($($path),+));\n+                    let file = p.pop_opt();\n+                    assert_eq!(p.as_vec(), b!($($left),+));\n+                    assert_eq!(file, None);\n+                }\n             )\n         )\n \n-        t!(\"a/b/c\", \"a/b\", Some(\"c\"));\n-        t!(\"a\", \".\", Some(\"a\"));\n-        t!(\".\", \".\", None);\n-        t!(\"/a\", \"/\", Some(\"a\"));\n-        t!(\"/\", \"/\", None);\n+        t!(v: [\"a/b/c\"], [\"a/b\"], Some(\"c\"));\n+        t!(v: [\"a\"], [\".\"], Some(\"a\"));\n+        t!(v: [\".\"], [\".\"], None);\n+        t!(v: [\"/a\"], [\"/\"], Some(\"a\"));\n+        t!(v: [\"/\"], [\"/\"], None);\n+        t!(v: [\"a/b/c\", 0x80], [\"a/b\"], Some(\"c\", 0x80));\n+        t!(v: [\"a/b\", 0x80, \"/c\"], [\"a/b\", 0x80], Some(\"c\"));\n+        t!(v: [0xff], [\".\"], Some(0xff));\n+        t!(v: [\"/\", 0xff], [\"/\"], Some(0xff));\n+        t!(s: \"a/b/c\", \"a/b\", Some(\"c\"));\n+        t!(s: \"a\", \".\", Some(\"a\"));\n+        t!(s: \".\", \".\", None);\n+        t!(s: \"/a\", \"/\", Some(\"a\"));\n+        t!(s: \"/\", \"/\", None);\n+\n+        assert_eq!(PosixPath::new(b!(\"foo/bar\", 0x80)).pop_opt_str(), None);\n+        assert_eq!(PosixPath::new(b!(\"foo\", 0x80, \"/bar\")).pop_opt_str(), Some(~\"bar\"));\n     }\n \n     #[test]\n     fn test_posix_join() {\n-        t!(PosixPath::from_str(\"a/b/c\").join_str(\"..\"), \"a/b\");\n-        t!(PosixPath::from_str(\"/a/b/c\").join_str(\"d\"), \"/a/b/c/d\");\n-        t!(PosixPath::from_str(\"a/b\").join_str(\"c/d\"), \"a/b/c/d\");\n-        t!(PosixPath::from_str(\"a/b\").join_str(\"/c/d\"), \"/c/d\");\n-        t!(PosixPath::from_str(\".\").join_str(\"a/b\"), \"a/b\");\n-        t!(PosixPath::from_str(\"/\").join_str(\"a/b\"), \"/a/b\");\n+        t!(v: PosixPath::new(b!(\"a/b/c\")).join(b!(\"..\")), b!(\"a/b\"));\n+        t!(v: PosixPath::new(b!(\"/a/b/c\")).join(b!(\"d\")), b!(\"/a/b/c/d\"));\n+        t!(v: PosixPath::new(b!(\"a/\", 0x80, \"/c\")).join(b!(0xff)), b!(\"a/\", 0x80, \"/c/\", 0xff));\n+        t!(s: PosixPath::from_str(\"a/b/c\").join_str(\"..\"), \"a/b\");\n+        t!(s: PosixPath::from_str(\"/a/b/c\").join_str(\"d\"), \"/a/b/c/d\");\n+        t!(s: PosixPath::from_str(\"a/b\").join_str(\"c/d\"), \"a/b/c/d\");\n+        t!(s: PosixPath::from_str(\"a/b\").join_str(\"/c/d\"), \"/c/d\");\n+        t!(s: PosixPath::from_str(\".\").join_str(\"a/b\"), \"a/b\");\n+        t!(s: PosixPath::from_str(\"/\").join_str(\"a/b\"), \"/a/b\");\n     }\n \n     #[test]\n     fn test_posix_join_path() {\n         macro_rules! t(\n-            ($path:expr, $join:expr, $exp:expr) => (\n+            (s: $path:expr, $join:expr, $exp:expr) => (\n                 {\n                     let path = PosixPath::from_str($path);\n                     let join = PosixPath::from_str($join);\n@@ -1081,152 +1261,251 @@ mod tests {\n             )\n         )\n \n-        t!(\"a/b/c\", \"..\", \"a/b\");\n-        t!(\"/a/b/c\", \"d\", \"/a/b/c/d\");\n-        t!(\"a/b\", \"c/d\", \"a/b/c/d\");\n-        t!(\"a/b\", \"/c/d\", \"/c/d\");\n-        t!(\".\", \"a/b\", \"a/b\");\n-        t!(\"/\", \"a/b\", \"/a/b\");\n+        t!(s: \"a/b/c\", \"..\", \"a/b\");\n+        t!(s: \"/a/b/c\", \"d\", \"/a/b/c/d\");\n+        t!(s: \"a/b\", \"c/d\", \"a/b/c/d\");\n+        t!(s: \"a/b\", \"/c/d\", \"/c/d\");\n+        t!(s: \".\", \"a/b\", \"a/b\");\n+        t!(s: \"/\", \"a/b\", \"/a/b\");\n     }\n \n     #[test]\n     fn test_posix_with_helpers() {\n-        t!(PosixPath::from_str(\"a/b/c\").with_dirname_str(\"d\"), \"d/c\");\n-        t!(PosixPath::from_str(\"a/b/c\").with_dirname_str(\"d/e\"), \"d/e/c\");\n-        t!(PosixPath::from_str(\"a/b/c\").with_dirname_str(\"\"), \"c\");\n-        t!(PosixPath::from_str(\"a/b/c\").with_dirname_str(\"/\"), \"/c\");\n-        t!(PosixPath::from_str(\"a/b/c\").with_dirname_str(\".\"), \"c\");\n-        t!(PosixPath::from_str(\"a/b/c\").with_dirname_str(\"..\"), \"../c\");\n-        t!(PosixPath::from_str(\"/\").with_dirname_str(\"foo\"), \"foo\");\n-        t!(PosixPath::from_str(\"/\").with_dirname_str(\"\"), \".\");\n-        t!(PosixPath::from_str(\"/foo\").with_dirname_str(\"bar\"), \"bar/foo\");\n-        t!(PosixPath::from_str(\"..\").with_dirname_str(\"foo\"), \"foo\");\n-        t!(PosixPath::from_str(\"../..\").with_dirname_str(\"foo\"), \"foo\");\n-        t!(PosixPath::from_str(\"foo\").with_dirname_str(\"..\"), \"../foo\");\n-        t!(PosixPath::from_str(\"foo\").with_dirname_str(\"../..\"), \"../../foo\");\n-\n-        t!(PosixPath::from_str(\"a/b/c\").with_filename_str(\"d\"), \"a/b/d\");\n-        t!(PosixPath::from_str(\".\").with_filename_str(\"foo\"), \"foo\");\n-        t!(PosixPath::from_str(\"/a/b/c\").with_filename_str(\"d\"), \"/a/b/d\");\n-        t!(PosixPath::from_str(\"/\").with_filename_str(\"foo\"), \"/foo\");\n-        t!(PosixPath::from_str(\"/a\").with_filename_str(\"foo\"), \"/foo\");\n-        t!(PosixPath::from_str(\"foo\").with_filename_str(\"bar\"), \"bar\");\n-        t!(PosixPath::from_str(\"a/b/c\").with_filename_str(\"\"), \"a/b\");\n-        t!(PosixPath::from_str(\"a/b/c\").with_filename_str(\".\"), \"a/b\");\n-        t!(PosixPath::from_str(\"a/b/c\").with_filename_str(\"..\"), \"a\");\n-        t!(PosixPath::from_str(\"/a\").with_filename_str(\"\"), \"/\");\n-        t!(PosixPath::from_str(\"foo\").with_filename_str(\"\"), \".\");\n-        t!(PosixPath::from_str(\"a/b/c\").with_filename_str(\"d/e\"), \"a/b/d/e\");\n-        t!(PosixPath::from_str(\"a/b/c\").with_filename_str(\"/d\"), \"a/b/d\");\n-        t!(PosixPath::from_str(\"..\").with_filename_str(\"foo\"), \"../foo\");\n-        t!(PosixPath::from_str(\"../..\").with_filename_str(\"foo\"), \"../../foo\");\n-\n-        t!(PosixPath::from_str(\"hi/there.txt\").with_filestem_str(\"here\"), \"hi/here.txt\");\n-        t!(PosixPath::from_str(\"hi/there.txt\").with_filestem_str(\"\"), \"hi/.txt\");\n-        t!(PosixPath::from_str(\"hi/there.txt\").with_filestem_str(\".\"), \"hi/..txt\");\n-        t!(PosixPath::from_str(\"hi/there.txt\").with_filestem_str(\"..\"), \"hi/...txt\");\n-        t!(PosixPath::from_str(\"hi/there.txt\").with_filestem_str(\"/\"), \"hi/.txt\");\n-        t!(PosixPath::from_str(\"hi/there.txt\").with_filestem_str(\"foo/bar\"), \"hi/foo/bar.txt\");\n-        t!(PosixPath::from_str(\"hi/there.foo.txt\").with_filestem_str(\"here\"), \"hi/here.txt\");\n-        t!(PosixPath::from_str(\"hi/there\").with_filestem_str(\"here\"), \"hi/here\");\n-        t!(PosixPath::from_str(\"hi/there\").with_filestem_str(\"\"), \"hi\");\n-        t!(PosixPath::from_str(\"hi\").with_filestem_str(\"\"), \".\");\n-        t!(PosixPath::from_str(\"/hi\").with_filestem_str(\"\"), \"/\");\n-        t!(PosixPath::from_str(\"hi/there\").with_filestem_str(\"..\"), \".\");\n-        t!(PosixPath::from_str(\"hi/there\").with_filestem_str(\".\"), \"hi\");\n-        t!(PosixPath::from_str(\"hi/there.\").with_filestem_str(\"foo\"), \"hi/foo.\");\n-        t!(PosixPath::from_str(\"hi/there.\").with_filestem_str(\"\"), \"hi\");\n-        t!(PosixPath::from_str(\"hi/there.\").with_filestem_str(\".\"), \".\");\n-        t!(PosixPath::from_str(\"hi/there.\").with_filestem_str(\"..\"), \"hi/...\");\n-        t!(PosixPath::from_str(\"/\").with_filestem_str(\"foo\"), \"/foo\");\n-        t!(PosixPath::from_str(\".\").with_filestem_str(\"foo\"), \"foo\");\n-        t!(PosixPath::from_str(\"hi/there..\").with_filestem_str(\"here\"), \"hi/here.\");\n-        t!(PosixPath::from_str(\"hi/there..\").with_filestem_str(\"\"), \"hi\");\n-\n-        t!(PosixPath::from_str(\"hi/there.txt\").with_extension_str(\"exe\"), \"hi/there.exe\");\n-        t!(PosixPath::from_str(\"hi/there.txt\").with_extension_str(\"\"), \"hi/there\");\n-        t!(PosixPath::from_str(\"hi/there.txt\").with_extension_str(\".\"), \"hi/there..\");\n-        t!(PosixPath::from_str(\"hi/there.txt\").with_extension_str(\"..\"), \"hi/there...\");\n-        t!(PosixPath::from_str(\"hi/there\").with_extension_str(\"txt\"), \"hi/there.txt\");\n-        t!(PosixPath::from_str(\"hi/there\").with_extension_str(\".\"), \"hi/there..\");\n-        t!(PosixPath::from_str(\"hi/there\").with_extension_str(\"..\"), \"hi/there...\");\n-        t!(PosixPath::from_str(\"hi/there.\").with_extension_str(\"txt\"), \"hi/there.txt\");\n-        t!(PosixPath::from_str(\"hi/.foo\").with_extension_str(\"txt\"), \"hi/.foo.txt\");\n-        t!(PosixPath::from_str(\"hi/there.txt\").with_extension_str(\".foo\"), \"hi/there..foo\");\n-        t!(PosixPath::from_str(\"/\").with_extension_str(\"txt\"), \"/\");\n-        t!(PosixPath::from_str(\"/\").with_extension_str(\".\"), \"/\");\n-        t!(PosixPath::from_str(\"/\").with_extension_str(\"..\"), \"/\");\n-        t!(PosixPath::from_str(\".\").with_extension_str(\"txt\"), \".\");\n+        t!(v: PosixPath::new(b!(\"a/b/c\")).with_dirname(b!(\"d\")), b!(\"d/c\"));\n+        t!(v: PosixPath::new(b!(\"a/b/c\")).with_dirname(b!(\"d/e\")), b!(\"d/e/c\"));\n+        t!(v: PosixPath::new(b!(\"a/\", 0x80, \"b/c\")).with_dirname(b!(0xff)), b!(0xff, \"/c\"));\n+        t!(v: PosixPath::new(b!(\"a/b/\", 0x80)).with_dirname(b!(\"/\", 0xcd)),\n+              b!(\"/\", 0xcd, \"/\", 0x80));\n+        t!(s: PosixPath::from_str(\"a/b/c\").with_dirname_str(\"d\"), \"d/c\");\n+        t!(s: PosixPath::from_str(\"a/b/c\").with_dirname_str(\"d/e\"), \"d/e/c\");\n+        t!(s: PosixPath::from_str(\"a/b/c\").with_dirname_str(\"\"), \"c\");\n+        t!(s: PosixPath::from_str(\"a/b/c\").with_dirname_str(\"/\"), \"/c\");\n+        t!(s: PosixPath::from_str(\"a/b/c\").with_dirname_str(\".\"), \"c\");\n+        t!(s: PosixPath::from_str(\"a/b/c\").with_dirname_str(\"..\"), \"../c\");\n+        t!(s: PosixPath::from_str(\"/\").with_dirname_str(\"foo\"), \"foo\");\n+        t!(s: PosixPath::from_str(\"/\").with_dirname_str(\"\"), \".\");\n+        t!(s: PosixPath::from_str(\"/foo\").with_dirname_str(\"bar\"), \"bar/foo\");\n+        t!(s: PosixPath::from_str(\"..\").with_dirname_str(\"foo\"), \"foo\");\n+        t!(s: PosixPath::from_str(\"../..\").with_dirname_str(\"foo\"), \"foo\");\n+        t!(s: PosixPath::from_str(\"foo\").with_dirname_str(\"..\"), \"../foo\");\n+        t!(s: PosixPath::from_str(\"foo\").with_dirname_str(\"../..\"), \"../../foo\");\n+\n+        t!(v: PosixPath::new(b!(\"a/b/c\")).with_filename(b!(\"d\")), b!(\"a/b/d\"));\n+        t!(v: PosixPath::new(b!(\"a/b/c\", 0xff)).with_filename(b!(0x80)), b!(\"a/b/\", 0x80));\n+        t!(v: PosixPath::new(b!(\"/\", 0xff, \"/foo\")).with_filename(b!(0xcd)),\n+              b!(\"/\", 0xff, \"/\", 0xcd));\n+        t!(s: PosixPath::from_str(\"a/b/c\").with_filename_str(\"d\"), \"a/b/d\");\n+        t!(s: PosixPath::from_str(\".\").with_filename_str(\"foo\"), \"foo\");\n+        t!(s: PosixPath::from_str(\"/a/b/c\").with_filename_str(\"d\"), \"/a/b/d\");\n+        t!(s: PosixPath::from_str(\"/\").with_filename_str(\"foo\"), \"/foo\");\n+        t!(s: PosixPath::from_str(\"/a\").with_filename_str(\"foo\"), \"/foo\");\n+        t!(s: PosixPath::from_str(\"foo\").with_filename_str(\"bar\"), \"bar\");\n+        t!(s: PosixPath::from_str(\"a/b/c\").with_filename_str(\"\"), \"a/b\");\n+        t!(s: PosixPath::from_str(\"a/b/c\").with_filename_str(\".\"), \"a/b\");\n+        t!(s: PosixPath::from_str(\"a/b/c\").with_filename_str(\"..\"), \"a\");\n+        t!(s: PosixPath::from_str(\"/a\").with_filename_str(\"\"), \"/\");\n+        t!(s: PosixPath::from_str(\"foo\").with_filename_str(\"\"), \".\");\n+        t!(s: PosixPath::from_str(\"a/b/c\").with_filename_str(\"d/e\"), \"a/b/d/e\");\n+        t!(s: PosixPath::from_str(\"a/b/c\").with_filename_str(\"/d\"), \"a/b/d\");\n+        t!(s: PosixPath::from_str(\"..\").with_filename_str(\"foo\"), \"../foo\");\n+        t!(s: PosixPath::from_str(\"../..\").with_filename_str(\"foo\"), \"../../foo\");\n+\n+        t!(v: PosixPath::new(b!(\"hi/there\", 0x80, \".txt\")).with_filestem(b!(0xff)),\n+              b!(\"hi/\", 0xff, \".txt\"));\n+        t!(v: PosixPath::new(b!(\"hi/there.txt\", 0x80)).with_filestem(b!(0xff)),\n+              b!(\"hi/\", 0xff, \".txt\", 0x80));\n+        t!(v: PosixPath::new(b!(\"hi/there\", 0xff)).with_filestem(b!(0x80)), b!(\"hi/\", 0x80));\n+        t!(v: PosixPath::new(b!(\"hi\", 0x80, \"/there\")).with_filestem([]), b!(\"hi\", 0x80));\n+        t!(s: PosixPath::from_str(\"hi/there.txt\").with_filestem_str(\"here\"), \"hi/here.txt\");\n+        t!(s: PosixPath::from_str(\"hi/there.txt\").with_filestem_str(\"\"), \"hi/.txt\");\n+        t!(s: PosixPath::from_str(\"hi/there.txt\").with_filestem_str(\".\"), \"hi/..txt\");\n+        t!(s: PosixPath::from_str(\"hi/there.txt\").with_filestem_str(\"..\"), \"hi/...txt\");\n+        t!(s: PosixPath::from_str(\"hi/there.txt\").with_filestem_str(\"/\"), \"hi/.txt\");\n+        t!(s: PosixPath::from_str(\"hi/there.txt\").with_filestem_str(\"foo/bar\"), \"hi/foo/bar.txt\");\n+        t!(s: PosixPath::from_str(\"hi/there.foo.txt\").with_filestem_str(\"here\"), \"hi/here.txt\");\n+        t!(s: PosixPath::from_str(\"hi/there\").with_filestem_str(\"here\"), \"hi/here\");\n+        t!(s: PosixPath::from_str(\"hi/there\").with_filestem_str(\"\"), \"hi\");\n+        t!(s: PosixPath::from_str(\"hi\").with_filestem_str(\"\"), \".\");\n+        t!(s: PosixPath::from_str(\"/hi\").with_filestem_str(\"\"), \"/\");\n+        t!(s: PosixPath::from_str(\"hi/there\").with_filestem_str(\"..\"), \".\");\n+        t!(s: PosixPath::from_str(\"hi/there\").with_filestem_str(\".\"), \"hi\");\n+        t!(s: PosixPath::from_str(\"hi/there.\").with_filestem_str(\"foo\"), \"hi/foo.\");\n+        t!(s: PosixPath::from_str(\"hi/there.\").with_filestem_str(\"\"), \"hi\");\n+        t!(s: PosixPath::from_str(\"hi/there.\").with_filestem_str(\".\"), \".\");\n+        t!(s: PosixPath::from_str(\"hi/there.\").with_filestem_str(\"..\"), \"hi/...\");\n+        t!(s: PosixPath::from_str(\"/\").with_filestem_str(\"foo\"), \"/foo\");\n+        t!(s: PosixPath::from_str(\".\").with_filestem_str(\"foo\"), \"foo\");\n+        t!(s: PosixPath::from_str(\"hi/there..\").with_filestem_str(\"here\"), \"hi/here.\");\n+        t!(s: PosixPath::from_str(\"hi/there..\").with_filestem_str(\"\"), \"hi\");\n+\n+        t!(v: PosixPath::new(b!(\"hi/there\", 0x80, \".txt\")).with_extension(b!(\"exe\")),\n+              b!(\"hi/there\", 0x80, \".exe\"));\n+        t!(v: PosixPath::new(b!(\"hi/there.txt\", 0x80)).with_extension(b!(0xff)),\n+              b!(\"hi/there.\", 0xff));\n+        t!(v: PosixPath::new(b!(\"hi/there\", 0x80)).with_extension(b!(0xff)),\n+              b!(\"hi/there\", 0x80, \".\", 0xff));\n+        t!(v: PosixPath::new(b!(\"hi/there.\", 0xff)).with_extension([]), b!(\"hi/there\"));\n+        t!(s: PosixPath::from_str(\"hi/there.txt\").with_extension_str(\"exe\"), \"hi/there.exe\");\n+        t!(s: PosixPath::from_str(\"hi/there.txt\").with_extension_str(\"\"), \"hi/there\");\n+        t!(s: PosixPath::from_str(\"hi/there.txt\").with_extension_str(\".\"), \"hi/there..\");\n+        t!(s: PosixPath::from_str(\"hi/there.txt\").with_extension_str(\"..\"), \"hi/there...\");\n+        t!(s: PosixPath::from_str(\"hi/there\").with_extension_str(\"txt\"), \"hi/there.txt\");\n+        t!(s: PosixPath::from_str(\"hi/there\").with_extension_str(\".\"), \"hi/there..\");\n+        t!(s: PosixPath::from_str(\"hi/there\").with_extension_str(\"..\"), \"hi/there...\");\n+        t!(s: PosixPath::from_str(\"hi/there.\").with_extension_str(\"txt\"), \"hi/there.txt\");\n+        t!(s: PosixPath::from_str(\"hi/.foo\").with_extension_str(\"txt\"), \"hi/.foo.txt\");\n+        t!(s: PosixPath::from_str(\"hi/there.txt\").with_extension_str(\".foo\"), \"hi/there..foo\");\n+        t!(s: PosixPath::from_str(\"/\").with_extension_str(\"txt\"), \"/\");\n+        t!(s: PosixPath::from_str(\"/\").with_extension_str(\".\"), \"/\");\n+        t!(s: PosixPath::from_str(\"/\").with_extension_str(\"..\"), \"/\");\n+        t!(s: PosixPath::from_str(\".\").with_extension_str(\"txt\"), \".\");\n     }\n \n     #[test]\n     fn test_posix_setters() {\n         macro_rules! t(\n-            ($path:expr, $set:ident, $with:ident, $arg:expr) => (\n+            (s: $path:expr, $set:ident, $with:ident, $arg:expr) => (\n                 {\n-                    let path = ($path);\n-                    let arg = ($arg);\n+                    let path = $path;\n+                    let arg = $arg;\n                     let mut p1 = PosixPath::from_str(path);\n                     p1.$set(arg);\n                     let p2 = PosixPath::from_str(path);\n                     assert_eq!(p1, p2.$with(arg));\n                 }\n+            );\n+            (v: $path:expr, $set:ident, $with:ident, $arg:expr) => (\n+                {\n+                    let path = $path;\n+                    let arg = $arg;\n+                    let mut p1 = PosixPath::new(path);\n+                    p1.$set(arg);\n+                    let p2 = PosixPath::new(path);\n+                    assert_eq!(p1, p2.$with(arg));\n+                }\n+            )\n+        )\n+\n+        t!(v: b!(\"a/b/c\"), set_dirname, with_dirname, b!(\"d\"));\n+        t!(v: b!(\"a/b/c\"), set_dirname, with_dirname, b!(\"d/e\"));\n+        t!(v: b!(\"a/\", 0x80, \"/c\"), set_dirname, with_dirname, b!(0xff));\n+        t!(s: \"a/b/c\", set_dirname_str, with_dirname_str, \"d\");\n+        t!(s: \"a/b/c\", set_dirname_str, with_dirname_str, \"d/e\");\n+        t!(s: \"/\", set_dirname_str, with_dirname_str, \"foo\");\n+        t!(s: \"/foo\", set_dirname_str, with_dirname_str, \"bar\");\n+        t!(s: \"a/b/c\", set_dirname_str, with_dirname_str, \"\");\n+        t!(s: \"../..\", set_dirname_str, with_dirname_str, \"x\");\n+        t!(s: \"foo\", set_dirname_str, with_dirname_str, \"../..\");\n+\n+        t!(v: b!(\"a/b/c\"), set_filename, with_filename, b!(\"d\"));\n+        t!(v: b!(\"/\"), set_filename, with_filename, b!(\"foo\"));\n+        t!(v: b!(0x80), set_filename, with_filename, b!(0xff));\n+        t!(s: \"a/b/c\", set_filename_str, with_filename_str, \"d\");\n+        t!(s: \"/\", set_filename_str, with_filename_str, \"foo\");\n+        t!(s: \".\", set_filename_str, with_filename_str, \"foo\");\n+        t!(s: \"a/b\", set_filename_str, with_filename_str, \"\");\n+        t!(s: \"a\", set_filename_str, with_filename_str, \"\");\n+\n+        t!(v: b!(\"hi/there.txt\"), set_filestem, with_filestem, b!(\"here\"));\n+        t!(v: b!(\"hi/there\", 0x80, \".txt\"), set_filestem, with_filestem, b!(\"here\", 0xff));\n+        t!(s: \"hi/there.txt\", set_filestem_str, with_filestem_str, \"here\");\n+        t!(s: \"hi/there.\", set_filestem_str, with_filestem_str, \"here\");\n+        t!(s: \"hi/there\", set_filestem_str, with_filestem_str, \"here\");\n+        t!(s: \"hi/there.txt\", set_filestem_str, with_filestem_str, \"\");\n+        t!(s: \"hi/there\", set_filestem_str, with_filestem_str, \"\");\n+\n+        t!(v: b!(\"hi/there.txt\"), set_extension, with_extension, b!(\"exe\"));\n+        t!(v: b!(\"hi/there.t\", 0x80, \"xt\"), set_extension, with_extension, b!(\"exe\", 0xff));\n+        t!(s: \"hi/there.txt\", set_extension_str, with_extension_str, \"exe\");\n+        t!(s: \"hi/there.\", set_extension_str, with_extension_str, \"txt\");\n+        t!(s: \"hi/there\", set_extension_str, with_extension_str, \"txt\");\n+        t!(s: \"hi/there.txt\", set_extension_str, with_extension_str, \"\");\n+        t!(s: \"hi/there\", set_extension_str, with_extension_str, \"\");\n+        t!(s: \".\", set_extension_str, with_extension_str, \"txt\");\n+    }\n+\n+    #[test]\n+    fn test_posix_getters() {\n+        macro_rules! t(\n+            (s: $path:expr, $filename:expr, $dirname:expr, $filestem:expr, $ext:expr) => (\n+                {\n+                    let path = $path;\n+                    assert_eq!(path.filename_str(), $filename);\n+                    assert_eq!(path.dirname_str(), $dirname);\n+                    assert_eq!(path.filestem_str(), $filestem);\n+                    assert_eq!(path.extension_str(), $ext);\n+                }\n+            );\n+            (v: $path:expr, $filename:expr, $dirname:expr, $filestem:expr, $ext:expr) => (\n+                {\n+                    let path = $path;\n+                    assert_eq!(path.filename(), $filename);\n+                    assert_eq!(path.dirname(), $dirname);\n+                    assert_eq!(path.filestem(), $filestem);\n+                    assert_eq!(path.extension(), $ext);\n+                }\n             )\n         )\n \n-        t!(\"a/b/c\", set_dirname_str, with_dirname_str, \"d\");\n-        t!(\"a/b/c\", set_dirname_str, with_dirname_str, \"d/e\");\n-        t!(\"/\", set_dirname_str, with_dirname_str, \"foo\");\n-        t!(\"/foo\", set_dirname_str, with_dirname_str, \"bar\");\n-        t!(\"a/b/c\", set_dirname_str, with_dirname_str, \"\");\n-        t!(\"../..\", set_dirname_str, with_dirname_str, \"x\");\n-        t!(\"foo\", set_dirname_str, with_dirname_str, \"../..\");\n-\n-        t!(\"a/b/c\", set_filename_str, with_filename_str, \"d\");\n-        t!(\"/\", set_filename_str, with_filename_str, \"foo\");\n-        t!(\".\", set_filename_str, with_filename_str, \"foo\");\n-        t!(\"a/b\", set_filename_str, with_filename_str, \"\");\n-        t!(\"a\", set_filename_str, with_filename_str, \"\");\n-\n-        t!(\"hi/there.txt\", set_filestem_str, with_filestem_str, \"here\");\n-        t!(\"hi/there.\", set_filestem_str, with_filestem_str, \"here\");\n-        t!(\"hi/there\", set_filestem_str, with_filestem_str, \"here\");\n-        t!(\"hi/there.txt\", set_filestem_str, with_filestem_str, \"\");\n-        t!(\"hi/there\", set_filestem_str, with_filestem_str, \"\");\n-\n-        t!(\"hi/there.txt\", set_extension_str, with_extension_str, \"exe\");\n-        t!(\"hi/there.\", set_extension_str, with_extension_str, \"txt\");\n-        t!(\"hi/there\", set_extension_str, with_extension_str, \"txt\");\n-        t!(\"hi/there.txt\", set_extension_str, with_extension_str, \"\");\n-        t!(\"hi/there\", set_extension_str, with_extension_str, \"\");\n-        t!(\".\", set_extension_str, with_extension_str, \"txt\");\n+        t!(v: PosixPath::new(b!(\"a/b/c\")), b!(\"c\"), b!(\"a/b\"), b!(\"c\"), None);\n+        t!(v: PosixPath::new(b!(\"a/b/\", 0xff)), b!(0xff), b!(\"a/b\"), b!(0xff), None);\n+        t!(v: PosixPath::new(b!(\"hi/there.\", 0xff)), b!(\"there.\", 0xff), b!(\"hi\"),\n+              b!(\"there\"), Some(b!(0xff)));\n+        t!(s: PosixPath::from_str(\"a/b/c\"), Some(\"c\"), Some(\"a/b\"), Some(\"c\"), None);\n+        t!(s: PosixPath::from_str(\".\"), Some(\"\"), Some(\".\"), Some(\"\"), None);\n+        t!(s: PosixPath::from_str(\"/\"), Some(\"\"), Some(\"/\"), Some(\"\"), None);\n+        t!(s: PosixPath::from_str(\"..\"), Some(\"\"), Some(\"..\"), Some(\"\"), None);\n+        t!(s: PosixPath::from_str(\"../..\"), Some(\"\"), Some(\"../..\"), Some(\"\"), None);\n+        t!(s: PosixPath::from_str(\"hi/there.txt\"), Some(\"there.txt\"), Some(\"hi\"),\n+              Some(\"there\"), Some(\"txt\"));\n+        t!(s: PosixPath::from_str(\"hi/there\"), Some(\"there\"), Some(\"hi\"), Some(\"there\"), None);\n+        t!(s: PosixPath::from_str(\"hi/there.\"), Some(\"there.\"), Some(\"hi\"),\n+              Some(\"there\"), Some(\"\"));\n+        t!(s: PosixPath::from_str(\"hi/.there\"), Some(\".there\"), Some(\"hi\"), Some(\".there\"), None);\n+        t!(s: PosixPath::from_str(\"hi/..there\"), Some(\"..there\"), Some(\"hi\"),\n+              Some(\".\"), Some(\"there\"));\n+        t!(s: PosixPath::new(b!(\"a/b/\", 0xff)), None, Some(\"a/b\"), None, None);\n+        t!(s: PosixPath::new(b!(\"a/b/\", 0xff, \".txt\")), None, Some(\"a/b\"), None, Some(\"txt\"));\n+        t!(s: PosixPath::new(b!(\"a/b/c.\", 0x80)), None, Some(\"a/b\"), Some(\"c\"), None);\n+        t!(s: PosixPath::new(b!(0xff, \"/b\")), Some(\"b\"), None, Some(\"b\"), None);\n     }\n \n     #[test]\n     fn test_posix_dir_file_path() {\n-        t!(PosixPath::from_str(\"hi/there\").dir_path(), \"hi\");\n-        t!(PosixPath::from_str(\"hi\").dir_path(), \".\");\n-        t!(PosixPath::from_str(\"/hi\").dir_path(), \"/\");\n-        t!(PosixPath::from_str(\"/\").dir_path(), \"/\");\n-        t!(PosixPath::from_str(\"..\").dir_path(), \"..\");\n-        t!(PosixPath::from_str(\"../..\").dir_path(), \"../..\");\n+        t!(v: PosixPath::new(b!(\"hi/there\", 0x80)).dir_path(), b!(\"hi\"));\n+        t!(v: PosixPath::new(b!(\"hi\", 0xff, \"/there\")).dir_path(), b!(\"hi\", 0xff));\n+        t!(s: PosixPath::from_str(\"hi/there\").dir_path(), \"hi\");\n+        t!(s: PosixPath::from_str(\"hi\").dir_path(), \".\");\n+        t!(s: PosixPath::from_str(\"/hi\").dir_path(), \"/\");\n+        t!(s: PosixPath::from_str(\"/\").dir_path(), \"/\");\n+        t!(s: PosixPath::from_str(\"..\").dir_path(), \"..\");\n+        t!(s: PosixPath::from_str(\"../..\").dir_path(), \"../..\");\n \n         macro_rules! t(\n-            ($path:expr, $exp:expr) => (\n+            (s: $path:expr, $exp:expr) => (\n                 {\n                     let path = $path;\n                     let left = path.chain_ref(|p| p.as_str());\n                     assert_eq!(left, $exp);\n                 }\n+            );\n+            (v: $path:expr, $exp:expr) => (\n+                {\n+                    let path = $path;\n+                    let left = path.map(|p| p.as_vec());\n+                    assert_eq!(left, $exp);\n+                }\n             )\n         )\n \n-        t!(PosixPath::from_str(\"hi/there\").file_path(), Some(\"there\"));\n-        t!(PosixPath::from_str(\"hi\").file_path(), Some(\"hi\"));\n-        t!(PosixPath::from_str(\".\").file_path(), None);\n-        t!(PosixPath::from_str(\"/\").file_path(), None);\n-        t!(PosixPath::from_str(\"..\").file_path(), None);\n-        t!(PosixPath::from_str(\"../..\").file_path(), None);\n+        t!(v: PosixPath::new(b!(\"hi/there\", 0x80)).file_path(), Some(b!(\"there\", 0x80)));\n+        t!(v: PosixPath::new(b!(\"hi\", 0xff, \"/there\")).file_path(), Some(b!(\"there\")));\n+        t!(s: PosixPath::from_str(\"hi/there\").file_path(), Some(\"there\"));\n+        t!(s: PosixPath::from_str(\"hi\").file_path(), Some(\"hi\"));\n+        t!(s: PosixPath::from_str(\".\").file_path(), None);\n+        t!(s: PosixPath::from_str(\"/\").file_path(), None);\n+        t!(s: PosixPath::from_str(\"..\").file_path(), None);\n+        t!(s: PosixPath::from_str(\"../..\").file_path(), None);\n     }\n \n     #[test]\n@@ -1244,7 +1523,7 @@ mod tests {\n     #[test]\n     fn test_posix_is_ancestor_of() {\n         macro_rules! t(\n-            ($path:expr, $dest:expr, $exp:expr) => (\n+            (s: $path:expr, $dest:expr, $exp:expr) => (\n                 {\n                     let path = PosixPath::from_str($path);\n                     let dest = PosixPath::from_str($dest);\n@@ -1253,32 +1532,32 @@ mod tests {\n             )\n         )\n \n-        t!(\"a/b/c\", \"a/b/c/d\", true);\n-        t!(\"a/b/c\", \"a/b/c\", true);\n-        t!(\"a/b/c\", \"a/b\", false);\n-        t!(\"/a/b/c\", \"/a/b/c\", true);\n-        t!(\"/a/b\", \"/a/b/c\", true);\n-        t!(\"/a/b/c/d\", \"/a/b/c\", false);\n-        t!(\"/a/b\", \"a/b/c\", false);\n-        t!(\"a/b\", \"/a/b/c\", false);\n-        t!(\"a/b/c\", \"a/b/d\", false);\n-        t!(\"../a/b/c\", \"a/b/c\", false);\n-        t!(\"a/b/c\", \"../a/b/c\", false);\n-        t!(\"a/b/c\", \"a/b/cd\", false);\n-        t!(\"a/b/cd\", \"a/b/c\", false);\n-        t!(\"../a/b\", \"../a/b/c\", true);\n-        t!(\".\", \"a/b\", true);\n-        t!(\".\", \".\", true);\n-        t!(\"/\", \"/\", true);\n-        t!(\"/\", \"/a/b\", true);\n-        t!(\"..\", \"a/b\", true);\n-        t!(\"../..\", \"a/b\", true);\n+        t!(s: \"a/b/c\", \"a/b/c/d\", true);\n+        t!(s: \"a/b/c\", \"a/b/c\", true);\n+        t!(s: \"a/b/c\", \"a/b\", false);\n+        t!(s: \"/a/b/c\", \"/a/b/c\", true);\n+        t!(s: \"/a/b\", \"/a/b/c\", true);\n+        t!(s: \"/a/b/c/d\", \"/a/b/c\", false);\n+        t!(s: \"/a/b\", \"a/b/c\", false);\n+        t!(s: \"a/b\", \"/a/b/c\", false);\n+        t!(s: \"a/b/c\", \"a/b/d\", false);\n+        t!(s: \"../a/b/c\", \"a/b/c\", false);\n+        t!(s: \"a/b/c\", \"../a/b/c\", false);\n+        t!(s: \"a/b/c\", \"a/b/cd\", false);\n+        t!(s: \"a/b/cd\", \"a/b/c\", false);\n+        t!(s: \"../a/b\", \"../a/b/c\", true);\n+        t!(s: \".\", \"a/b\", true);\n+        t!(s: \".\", \".\", true);\n+        t!(s: \"/\", \"/\", true);\n+        t!(s: \"/\", \"/a/b\", true);\n+        t!(s: \"..\", \"a/b\", true);\n+        t!(s: \"../..\", \"a/b\", true);\n     }\n \n     #[test]\n     fn test_posix_path_relative_from() {\n         macro_rules! t(\n-            ($path:expr, $other:expr, $exp:expr) => (\n+            (s: $path:expr, $other:expr, $exp:expr) => (\n                 {\n                     let path = PosixPath::from_str($path);\n                     let other = PosixPath::from_str($other);\n@@ -1288,62 +1567,73 @@ mod tests {\n             )\n         )\n \n-        t!(\"a/b/c\", \"a/b\", Some(\"c\"));\n-        t!(\"a/b/c\", \"a/b/d\", Some(\"../c\"));\n-        t!(\"a/b/c\", \"a/b/c/d\", Some(\"..\"));\n-        t!(\"a/b/c\", \"a/b/c\", Some(\".\"));\n-        t!(\"a/b/c\", \"a/b/c/d/e\", Some(\"../..\"));\n-        t!(\"a/b/c\", \"a/d/e\", Some(\"../../b/c\"));\n-        t!(\"a/b/c\", \"d/e/f\", Some(\"../../../a/b/c\"));\n-        t!(\"a/b/c\", \"/a/b/c\", None);\n-        t!(\"/a/b/c\", \"a/b/c\", Some(\"/a/b/c\"));\n-        t!(\"/a/b/c\", \"/a/b/c/d\", Some(\"..\"));\n-        t!(\"/a/b/c\", \"/a/b\", Some(\"c\"));\n-        t!(\"/a/b/c\", \"/a/b/c/d/e\", Some(\"../..\"));\n-        t!(\"/a/b/c\", \"/a/d/e\", Some(\"../../b/c\"));\n-        t!(\"/a/b/c\", \"/d/e/f\", Some(\"../../../a/b/c\"));\n-        t!(\"hi/there.txt\", \"hi/there\", Some(\"../there.txt\"));\n-        t!(\".\", \"a\", Some(\"..\"));\n-        t!(\".\", \"a/b\", Some(\"../..\"));\n-        t!(\".\", \".\", Some(\".\"));\n-        t!(\"a\", \".\", Some(\"a\"));\n-        t!(\"a/b\", \".\", Some(\"a/b\"));\n-        t!(\"..\", \".\", Some(\"..\"));\n-        t!(\"a/b/c\", \"a/b/c\", Some(\".\"));\n-        t!(\"/a/b/c\", \"/a/b/c\", Some(\".\"));\n-        t!(\"/\", \"/\", Some(\".\"));\n-        t!(\"/\", \".\", Some(\"/\"));\n-        t!(\"../../a\", \"b\", Some(\"../../../a\"));\n-        t!(\"a\", \"../../b\", None);\n-        t!(\"../../a\", \"../../b\", Some(\"../a\"));\n-        t!(\"../../a\", \"../../a/b\", Some(\"..\"));\n-        t!(\"../../a/b\", \"../../a\", Some(\"b\"));\n+        t!(s: \"a/b/c\", \"a/b\", Some(\"c\"));\n+        t!(s: \"a/b/c\", \"a/b/d\", Some(\"../c\"));\n+        t!(s: \"a/b/c\", \"a/b/c/d\", Some(\"..\"));\n+        t!(s: \"a/b/c\", \"a/b/c\", Some(\".\"));\n+        t!(s: \"a/b/c\", \"a/b/c/d/e\", Some(\"../..\"));\n+        t!(s: \"a/b/c\", \"a/d/e\", Some(\"../../b/c\"));\n+        t!(s: \"a/b/c\", \"d/e/f\", Some(\"../../../a/b/c\"));\n+        t!(s: \"a/b/c\", \"/a/b/c\", None);\n+        t!(s: \"/a/b/c\", \"a/b/c\", Some(\"/a/b/c\"));\n+        t!(s: \"/a/b/c\", \"/a/b/c/d\", Some(\"..\"));\n+        t!(s: \"/a/b/c\", \"/a/b\", Some(\"c\"));\n+        t!(s: \"/a/b/c\", \"/a/b/c/d/e\", Some(\"../..\"));\n+        t!(s: \"/a/b/c\", \"/a/d/e\", Some(\"../../b/c\"));\n+        t!(s: \"/a/b/c\", \"/d/e/f\", Some(\"../../../a/b/c\"));\n+        t!(s: \"hi/there.txt\", \"hi/there\", Some(\"../there.txt\"));\n+        t!(s: \".\", \"a\", Some(\"..\"));\n+        t!(s: \".\", \"a/b\", Some(\"../..\"));\n+        t!(s: \".\", \".\", Some(\".\"));\n+        t!(s: \"a\", \".\", Some(\"a\"));\n+        t!(s: \"a/b\", \".\", Some(\"a/b\"));\n+        t!(s: \"..\", \".\", Some(\"..\"));\n+        t!(s: \"a/b/c\", \"a/b/c\", Some(\".\"));\n+        t!(s: \"/a/b/c\", \"/a/b/c\", Some(\".\"));\n+        t!(s: \"/\", \"/\", Some(\".\"));\n+        t!(s: \"/\", \".\", Some(\"/\"));\n+        t!(s: \"../../a\", \"b\", Some(\"../../../a\"));\n+        t!(s: \"a\", \"../../b\", None);\n+        t!(s: \"../../a\", \"../../b\", Some(\"../a\"));\n+        t!(s: \"../../a\", \"../../a/b\", Some(\"..\"));\n+        t!(s: \"../../a/b\", \"../../a\", Some(\"b\"));\n     }\n \n     #[test]\n     fn test_posix_component_iter() {\n         macro_rules! t(\n-            ($path:expr, $exp:expr) => (\n+            (s: $path:expr, $exp:expr) => (\n                 {\n                     let path = PosixPath::from_str($path);\n                     let comps = path.component_iter().to_owned_vec();\n                     let exp: &[&str] = $exp;\n                     let exps = exp.iter().map(|x| x.as_bytes()).to_owned_vec();\n                     assert_eq!(comps, exps);\n                 }\n+            );\n+            (v: [$($arg:expr),+], [$([$($exp:expr),*]),*]) => (\n+                {\n+                    let path = PosixPath::new(b!($($arg),+));\n+                    let comps = path.component_iter().to_owned_vec();\n+                    let exp: &[&[u8]] = [$(b!($($exp),*)),*];\n+                    assert_eq!(comps.as_slice(), exp);\n+                }\n             )\n         )\n \n-        t!(\"a/b/c\", [\"a\", \"b\", \"c\"]);\n-        t!(\"a/b/d\", [\"a\", \"b\", \"d\"]);\n-        t!(\"a/b/cd\", [\"a\", \"b\", \"cd\"]);\n-        t!(\"/a/b/c\", [\"a\", \"b\", \"c\"]);\n-        t!(\"a\", [\"a\"]);\n-        t!(\"/a\", [\"a\"]);\n-        t!(\"/\", []);\n-        t!(\".\", [\".\"]);\n-        t!(\"..\", [\"..\"]);\n-        t!(\"../..\", [\"..\", \"..\"]);\n-        t!(\"../../foo\", [\"..\", \"..\", \"foo\"]);\n+        t!(v: [\"a/b/c\"], [[\"a\"], [\"b\"], [\"c\"]]);\n+        t!(v: [\"/\", 0xff, \"/a/\", 0x80], [[0xff], [\"a\"], [0x80]]);\n+        t!(v: [\"../../foo\", 0xcd, \"bar\"], [[\"..\"], [\"..\"], [\"foo\", 0xcd, \"bar\"]]);\n+        t!(s: \"a/b/c\", [\"a\", \"b\", \"c\"]);\n+        t!(s: \"a/b/d\", [\"a\", \"b\", \"d\"]);\n+        t!(s: \"a/b/cd\", [\"a\", \"b\", \"cd\"]);\n+        t!(s: \"/a/b/c\", [\"a\", \"b\", \"c\"]);\n+        t!(s: \"a\", [\"a\"]);\n+        t!(s: \"/a\", [\"a\"]);\n+        t!(s: \"/\", []);\n+        t!(s: \".\", [\".\"]);\n+        t!(s: \"..\", [\"..\"]);\n+        t!(s: \"../..\", [\"..\", \"..\"]);\n+        t!(s: \"../../foo\", [\"..\", \"..\", \"foo\"]);\n     }\n }"}]}