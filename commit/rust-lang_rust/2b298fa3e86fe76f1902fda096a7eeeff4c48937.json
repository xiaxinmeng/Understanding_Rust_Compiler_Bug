{"sha": "2b298fa3e86fe76f1902fda096a7eeeff4c48937", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMjk4ZmEzZTg2ZmU3NmYxOTAyZmRhMDk2YTdlZWVmZjRjNDg5Mzc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-23T02:52:30Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-23T02:52:30Z"}, "message": "rustc: Use a silly \"magic numbers\" hack; seems to speed things up a bit.", "tree": {"sha": "9341fde40b2202f2ab031a4f42825fc85691f3fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9341fde40b2202f2ab031a4f42825fc85691f3fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b298fa3e86fe76f1902fda096a7eeeff4c48937", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b298fa3e86fe76f1902fda096a7eeeff4c48937", "html_url": "https://github.com/rust-lang/rust/commit/2b298fa3e86fe76f1902fda096a7eeeff4c48937", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b298fa3e86fe76f1902fda096a7eeeff4c48937/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94e5ca4df862b1ff3e1fdc1c02828813050845d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/94e5ca4df862b1ff3e1fdc1c02828813050845d6", "html_url": "https://github.com/rust-lang/rust/commit/94e5ca4df862b1ff3e1fdc1c02828813050845d6"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "3e3279ed90375bdd59ee23824ee19b5cb26be3e3", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2b298fa3e86fe76f1902fda096a7eeeff4c48937/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b298fa3e86fe76f1902fda096a7eeeff4c48937/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=2b298fa3e86fe76f1902fda096a7eeeff4c48937", "patch": "@@ -42,7 +42,7 @@ fn method_ty_to_fn_ty(@type_store tystore, method m) -> t {\n //\n // TODO: It'd be really nice to be able to hide this definition from the\n // outside world, to enforce the above invariants.\n-type raw_t = rec(sty struct, option.t[str] cname, uint hash);\n+type raw_t = rec(sty struct, option.t[str] cname, uint magic, uint hash);\n type t = @raw_t;\n \n // NB: If you change this, you'll probably want to change the corresponding\n@@ -121,7 +121,8 @@ fn gen_ty(@type_store tystore, &sty st) -> t {\n \n fn gen_ty_full(@type_store tystore, &sty st, option.t[str] cname) -> t {\n     auto h = hash_type_info(st, cname);\n-    auto new_type = @rec(struct=st, cname=cname, hash=h);\n+    auto magic = mk_magic(st);\n+    auto new_type = @rec(struct=st, cname=cname, magic=magic, hash=h);\n \n     // Is it interned?\n     alt (tystore.find(new_type)) {\n@@ -789,6 +790,41 @@ fn def_to_str(ast.def_id did) -> str {\n     ret #fmt(\"%d:%d\", did._0, did._1);\n }\n \n+\n+// Generation of \"magic numbers\", which are workarounds for the lack of\n+// structural equality in rustboot.\n+\n+fn mk_magic(&sty st) -> uint {\n+    alt (st) {\n+        case (ty_nil) { ret 1u; }\n+        case (ty_bool) { ret 2u; }\n+        case (ty_int) { ret 3u; }\n+        case (ty_float) { ret 4u; }\n+        case (ty_uint) { ret 5u; }\n+        case (ty_char) { ret 6u; }\n+        case (ty_str) { ret 7u; }\n+        case (ty_task) { ret 8u; }\n+        case (ty_type) { ret 9u; }\n+        case (ty_native) { ret 10u; }\n+        case (ty_machine(?tm)) {\n+            alt (tm) {\n+                case (common.ty_i8) { ret 11u; }\n+                case (common.ty_i16) { ret 12u; }\n+                case (common.ty_i32) { ret 13u; }\n+                case (common.ty_i64) { ret 14u; }\n+                case (common.ty_u8) { ret 15u; }\n+                case (common.ty_u16) { ret 16u; }\n+                case (common.ty_u32) { ret 17u; }\n+                case (common.ty_u64) { ret 18u; }\n+                case (common.ty_f32) { ret 19u; }\n+                case (common.ty_f64) { ret 20u; }\n+            }\n+        }\n+        case (_) { ret 0u; }\n+    }\n+}\n+\n+\n // Type hashing. This function is private to this module (and slow); external\n // users should use `hash_ty()` instead.\n fn hash_type_structure(&sty st) -> uint {\n@@ -1224,6 +1260,9 @@ fn equal_type_structures(&sty a, &sty b) -> bool {\n // An expensive type equality function. This function is private to this\n // module.\n fn eq_ty_full(&t a, &t b) -> bool {\n+    // Check magic numbers (fast path).\n+    if (a.magic != 0u || b.magic != 0u) { ret a.magic == b.magic; }\n+\n     // Check hashes (fast path).\n     if (a.hash != b.hash) {\n         ret false;"}]}