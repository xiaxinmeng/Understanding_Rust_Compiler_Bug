{"sha": "4c94251f95206e0361a829fb424a5d9d8c724e11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjOTQyNTFmOTUyMDZlMDM2MWE4MjlmYjQyNGE1ZDlkOGM3MjRlMTE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-16T12:49:42Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-16T12:49:42Z"}, "message": "Several fixes", "tree": {"sha": "1ed51b83c65b297bb248f4784e3d4a2a8b489d28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ed51b83c65b297bb248f4784e3d4a2a8b489d28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c94251f95206e0361a829fb424a5d9d8c724e11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c94251f95206e0361a829fb424a5d9d8c724e11", "html_url": "https://github.com/rust-lang/rust/commit/4c94251f95206e0361a829fb424a5d9d8c724e11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c94251f95206e0361a829fb424a5d9d8c724e11/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6acfee8978e47aa21e7c816550db4c4507444c75", "url": "https://api.github.com/repos/rust-lang/rust/commits/6acfee8978e47aa21e7c816550db4c4507444c75", "html_url": "https://github.com/rust-lang/rust/commit/6acfee8978e47aa21e7c816550db4c4507444c75"}], "stats": {"total": 35, "additions": 23, "deletions": 12}, "files": [{"sha": "684e5acdbc2ef9f95013a8e8ffe6d018c17a7738", "filename": "src/base.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4c94251f95206e0361a829fb424a5d9d8c724e11/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c94251f95206e0361a829fb424a5d9d8c724e11/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=4c94251f95206e0361a829fb424a5d9d8c724e11", "patch": "@@ -1022,11 +1022,19 @@ fn trans_ptr_binop<'a, 'tcx: 'a>(\n             Offset (_) iadd;\n         }\n     } else {\n-        let lhs = lhs.load_value_pair(fx).0;\n-        let rhs = rhs.load_value_pair(fx).0;\n+        let (lhs_ptr, lhs_extra) = lhs.load_value_pair(fx);\n+        let (rhs_ptr, rhs_extra) = rhs.load_value_pair(fx);\n         let res = match bin_op {\n-            BinOp::Eq => fx.bcx.ins().icmp(IntCC::Equal, lhs, rhs),\n-            BinOp::Ne => fx.bcx.ins().icmp(IntCC::NotEqual, lhs, rhs),\n+            BinOp::Eq => {\n+                let ptr_eq = fx.bcx.ins().icmp(IntCC::Equal, lhs_ptr, rhs_ptr);\n+                let extra_eq = fx.bcx.ins().icmp(IntCC::Equal, lhs_extra, rhs_extra);\n+                fx.bcx.ins().band(ptr_eq, extra_eq)\n+            }\n+            BinOp::Ne => {\n+                let ptr_ne = fx.bcx.ins().icmp(IntCC::NotEqual, lhs_ptr, rhs_ptr);\n+                let extra_ne = fx.bcx.ins().icmp(IntCC::NotEqual, lhs_extra, rhs_extra);\n+                fx.bcx.ins().bor(ptr_ne, extra_ne)\n+            }\n             _ => unimplemented!(\n                 \"trans_ptr_binop({:?}, <fat ptr>, <fat ptr>) not implemented\",\n                 bin_op"}, {"sha": "3eaa7c06a767f5be6eac07f0487a437b92015af1", "filename": "src/intrinsics.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4c94251f95206e0361a829fb424a5d9d8c724e11/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c94251f95206e0361a829fb424a5d9d8c724e11/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=4c94251f95206e0361a829fb424a5d9d8c724e11", "patch": "@@ -119,11 +119,6 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n         fx, intrinsic, substs, args,\n \n         assume, (c _a) {};\n-        arith_offset, (v base, v offset) {\n-            let res = fx.bcx.ins().iadd(base, offset);\n-            let res = CValue::ByVal(res, ret.layout());\n-            ret.write_cvalue(fx, res);\n-        };\n         likely | unlikely, (c a) {\n             ret.write_cvalue(fx, a);\n         };\n@@ -289,14 +284,18 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             let res = fx.bcx.ins().rotr(x, y);\n             ret.write_cvalue(fx, CValue::ByVal(res, layout));\n         };\n-        offset, (c base, v offset) {\n+\n+        // The only difference between offset and arith_offset is regarding UB. Because Cranelift\n+        // doesn't have UB both are codegen'ed the same way\n+        offset | arith_offset, (c base, v offset) {\n             let pointee_ty = base.layout().ty.builtin_deref(true).unwrap().ty;\n             let pointee_size = fx.layout_of(pointee_ty).size.bytes();\n             let ptr_diff = fx.bcx.ins().imul_imm(offset, pointee_size as i64);\n             let base_val = base.load_scalar(fx);\n             let res = fx.bcx.ins().iadd(base_val, ptr_diff);\n             ret.write_cvalue(fx, CValue::ByVal(res, args[0].layout()));\n         };\n+\n         transmute, <src_ty, dst_ty> (c from) {\n             assert_eq!(from.layout().ty, src_ty);\n             let addr = from.force_stack(fx);\n@@ -314,8 +313,12 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             let inited_val = inited_place.to_cvalue(fx);\n             ret.write_cvalue(fx, inited_val);\n         };\n-        write_bytes, (v dst, v val, v count) {\n-            fx.bcx.call_memset(fx.module.target_config(), dst, val, count);\n+        write_bytes, (c dst, v val, v count) {\n+            let pointee_ty = dst.layout().ty.builtin_deref(true).unwrap().ty;\n+            let pointee_size = fx.layout_of(pointee_ty).size.bytes();\n+            let count = fx.bcx.ins().imul_imm(count, pointee_size as i64);\n+            let dst_ptr = dst.load_scalar(fx);\n+            fx.bcx.call_memset(fx.module.target_config(), dst_ptr, val, count);\n         };\n         uninit, <T> () {\n             let uninit_place = CPlace::new_stack_slot(fx, T);"}]}