{"sha": "67b7a78231c84f9e864d7074f2fc8f092290873b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3YjdhNzgyMzFjODRmOWU4NjRkNzA3NGYyZmM4ZjA5MjI5MDg3M2I=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-10-28T22:16:25Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-12-02T13:38:16Z"}, "message": "Fix tidy errors", "tree": {"sha": "4d680bf8d0ffedb107f2518fa71e50e2029e5cf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d680bf8d0ffedb107f2518fa71e50e2029e5cf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67b7a78231c84f9e864d7074f2fc8f092290873b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67b7a78231c84f9e864d7074f2fc8f092290873b", "html_url": "https://github.com/rust-lang/rust/commit/67b7a78231c84f9e864d7074f2fc8f092290873b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67b7a78231c84f9e864d7074f2fc8f092290873b/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35590b5cc8135b21e8cbb50d059febba5136d41b", "url": "https://api.github.com/repos/rust-lang/rust/commits/35590b5cc8135b21e8cbb50d059febba5136d41b", "html_url": "https://github.com/rust-lang/rust/commit/35590b5cc8135b21e8cbb50d059febba5136d41b"}], "stats": {"total": 244, "additions": 182, "deletions": 62}, "files": [{"sha": "204b3d9f7e3af26064a5554461af99d0f0a3ca74", "filename": "src/librustc/mir/cache.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc%2Fmir%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc%2Fmir%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fcache.rs?ref=67b7a78231c84f9e864d7074f2fc8f092290873b", "patch": "@@ -43,7 +43,11 @@ macro_rules! get_predecessors {\n \n macro_rules! impl_predecessor_locations {\n     ( ( $($pub:ident)? )  $name:ident $($mutability:ident)?) => {\n-        $($pub)? fn $name<'a>(&'a $($mutability)? self, loc: Location, body: &'a Body<'a>) -> impl Iterator<Item = Location> + 'a {\n+        $($pub)? fn $name<'a>(\n+            &'a $($mutability)? self,\n+            loc: Location,\n+            body: &'a Body<'a>\n+        ) -> impl Iterator<Item = Location> + 'a {\n             let if_zero_locations = if loc.statement_index == 0 {\n                 let predecessor_blocks = get_predecessors!($($mutability)? self, loc.block, body);\n                 let num_predecessor_blocks = predecessor_blocks.len();\n@@ -119,7 +123,10 @@ impl Cache {\n     impl_predecessor_locations!(() unwrap_predecessor_locations);\n \n     #[inline]\n-    pub fn basic_blocks_mut<'a, 'tcx>(&mut self, body: &'a mut Body<'tcx>) -> &'a mut IndexVec<BasicBlock, BasicBlockData<'tcx>> {\n+    pub fn basic_blocks_mut<'a, 'tcx>(\n+        &mut self,\n+        body: &'a mut Body<'tcx>\n+    ) -> &'a mut IndexVec<BasicBlock, BasicBlockData<'tcx>> {\n         debug!(\"bbm: Clearing predecessors cache for body at: {:?}\", body.span.data());\n         self.invalidate_predecessors();\n         &mut body.basic_blocks"}, {"sha": "1b1c7573484f961527821500e0dc1104451345aa", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=67b7a78231c84f9e864d7074f2fc8f092290873b", "patch": "@@ -38,7 +38,7 @@ use syntax::symbol::Symbol;\n use syntax_pos::{Span, DUMMY_SP};\n \n pub use crate::mir::interpret::AssertMessage;\n-// TODO(nashenas88) Cache only exported for use in librustc_mir/transform/check_unsafety.rs\n+// FIXME(nashenas88) Cache only exported for use in librustc_mir/transform/check_unsafety.rs\n pub use crate::mir::cache::{BodyCache, Cache, ReadOnlyBodyCache};\n pub use crate::read_only;\n "}, {"sha": "0790526e9f96b321880d9a6addd22df6bae108a8", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=67b7a78231c84f9e864d7074f2fc8f092290873b", "patch": "@@ -591,7 +591,11 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n     pub fn monomorphized_place_ty(&self, place_ref: &mir::PlaceRef<'_, 'tcx>) -> Ty<'tcx> {\n         let tcx = self.cx.tcx();\n-        let place_ty = mir::Place::ty_from(place_ref.base, place_ref.projection, self.mir.body(), tcx);\n+        let place_ty = mir::Place::ty_from(\n+            place_ref.base,\n+            place_ref.projection,\n+            self.mir.body(),\n+            tcx);\n         self.monomorphize(&place_ty.ty)\n     }\n }"}, {"sha": "1553131c5d61522bddf38b0653f5640d335ca0a5", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=67b7a78231c84f9e864d7074f2fc8f092290873b", "patch": "@@ -106,7 +106,8 @@ impl LocalsStateAtExit {\n         if locals_are_invalidated_at_exit {\n             LocalsStateAtExit::AllAreInvalidated\n         } else {\n-            let mut has_storage_dead = HasStorageDead(BitSet::new_empty(body_cache.local_decls.len()));\n+            let mut has_storage_dead\n+                = HasStorageDead(BitSet::new_empty(body_cache.local_decls.len()));\n             has_storage_dead.visit_body(body_cache);\n             let mut has_storage_dead_or_moved = has_storage_dead.0;\n             for move_out in &move_data.moves {"}, {"sha": "7f2d6a68d02c7c33bbc8de509be45c7b64c9a0b0", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 32, "deletions": 12, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=67b7a78231c84f9e864d7074f2fc8f092290873b", "patch": "@@ -205,9 +205,12 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 );\n             }\n \n-            let ty =\n-                Place::ty_from(used_place.base, used_place.projection, self.body_cache.body(), self.infcx.tcx)\n-                    .ty;\n+            let ty = Place::ty_from(\n+                used_place.base,\n+                used_place.projection,\n+                self.body_cache.body(),\n+                self.infcx.tcx\n+            ).ty;\n             let needs_note = match ty.kind {\n                 ty::Closure(id, _) => {\n                     let tables = self.infcx.tcx.typeck_tables_of(id);\n@@ -619,7 +622,12 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         // Define a small closure that we can use to check if the type of a place\n         // is a union.\n         let union_ty = |place_base, place_projection| {\n-            let ty = Place::ty_from(place_base, place_projection, self.body_cache.body(), self.infcx.tcx).ty;\n+            let ty = Place::ty_from(\n+                place_base,\n+                place_projection,\n+                self.body_cache.body(),\n+                self.infcx.tcx\n+            ).ty;\n             ty.ty_adt_def().filter(|adt| adt.is_union()).map(|_| ty)\n         };\n         let describe_place = |place| self.describe_place(place).unwrap_or_else(|| \"_\".to_owned());\n@@ -1174,11 +1182,12 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         };\n \n         // FIXME use a better heuristic than Spans\n-        let reference_desc = if return_span == self.body_cache.source_info(borrow.reserve_location).span {\n-            \"reference to\"\n-        } else {\n-            \"value referencing\"\n-        };\n+        let reference_desc\n+            = if return_span == self.body_cache.source_info(borrow.reserve_location).span {\n+                \"reference to\"\n+            } else {\n+                \"value referencing\"\n+            };\n \n         let (place_desc, note) = if let Some(place_desc) = opt_place_desc {\n             let local_kind = if let Some(local) = borrow.borrowed_place.as_local() {\n@@ -1623,15 +1632,25 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         StorageDeadOrDrop::LocalStorageDead\n                         | StorageDeadOrDrop::BoxedStorageDead => {\n                             assert!(\n-                                Place::ty_from(&place.base, proj_base, self.body_cache.body(), tcx).ty.is_box(),\n+                                Place::ty_from(\n+                                    &place.base,\n+                                    proj_base,\n+                                    self.body_cache.body(),\n+                                    tcx\n+                                ).ty.is_box(),\n                                 \"Drop of value behind a reference or raw pointer\"\n                             );\n                             StorageDeadOrDrop::BoxedStorageDead\n                         }\n                         StorageDeadOrDrop::Destructor(_) => base_access,\n                     },\n                     ProjectionElem::Field(..) | ProjectionElem::Downcast(..) => {\n-                        let base_ty = Place::ty_from(&place.base, proj_base, self.body_cache.body(), tcx).ty;\n+                        let base_ty = Place::ty_from(\n+                            &place.base,\n+                            proj_base,\n+                            self.body_cache.body(),\n+                            tcx\n+                        ).ty;\n                         match base_ty.kind {\n                             ty::Adt(def, _) if def.has_dtor(tcx) => {\n                                 // Report the outermost adt with a destructor\n@@ -1734,7 +1753,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             // Next, look through the rest of the block, checking if we are assigning the\n             // `target` (that is, the place that contains our borrow) to anything.\n             let mut annotated_closure = None;\n-            for stmt in &self.body_cache[location.block].statements[location.statement_index + 1..] {\n+            for stmt in &self.body_cache[location.block].statements[location.statement_index + 1..]\n+            {\n                 debug!(\n                     \"annotate_argument_and_return_for_borrow: target={:?} stmt={:?}\",\n                     target, stmt"}, {"sha": "3b394f853a7fdf338f1cd88a9ff8342c7dcd36ed", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=67b7a78231c84f9e864d7074f2fc8f092290873b", "patch": "@@ -369,8 +369,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     }, field)\n                 }\n                 ProjectionElem::Downcast(_, variant_index) => {\n-                    let base_ty =\n-                        Place::ty_from(place.base, place.projection, self.body_cache.body(), self.infcx.tcx).ty;\n+                    let base_ty = Place::ty_from(\n+                        place.base,\n+                        place.projection,\n+                        self.body_cache.body(),\n+                        self.infcx.tcx).ty;\n                     self.describe_field_from_ty(&base_ty, field, Some(*variant_index))\n                 }\n                 ProjectionElem::Field(_, field_type) => {\n@@ -498,9 +501,10 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         },\n                         ..\n                     }) = bbd.terminator {\n-                        if let Some(source)\n-                            = BorrowedContentSource::from_call(func.ty(self.body_cache.body(), tcx), tcx)\n-                        {\n+                        if let Some(source) = BorrowedContentSource::from_call(\n+                            func.ty(self.body_cache.body(), tcx),\n+                            tcx\n+                        ) {\n                             return source;\n                         }\n                     }\n@@ -512,7 +516,12 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n         // If we didn't find an overloaded deref or index, then assume it's a\n         // built in deref and check the type of the base.\n-        let base_ty = Place::ty_from(deref_base.base, deref_base.projection, self.body_cache.body(), tcx).ty;\n+        let base_ty = Place::ty_from(\n+            deref_base.base,\n+            deref_base.projection,\n+            self.body_cache.body(),\n+            tcx\n+        ).ty;\n         if base_ty.is_unsafe_ptr() {\n             BorrowedContentSource::DerefRawPointer\n         } else if base_ty.is_mutable_ptr() {"}, {"sha": "1ff26acd361b53c1222cd4b1b8c4a3e22ae52616", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=67b7a78231c84f9e864d7074f2fc8f092290873b", "patch": "@@ -168,7 +168,10 @@ fn do_mir_borrowck<'a, 'tcx>(\n     let free_regions =\n         nll::replace_regions_in_mir(infcx, def_id, param_env, &mut body_cache, &mut promoted);\n     let body_cache = read_only!(body_cache); // no further changes\n-    let promoted: IndexVec<_, _> = promoted.iter_mut().map(|body_cache| read_only!(body_cache)).collect();\n+    let promoted: IndexVec<_, _> = promoted\n+        .iter_mut()\n+        .map(|body_cache| read_only!(body_cache))\n+        .collect();\n \n     let location_table = &LocationTable::new(&body_cache);\n \n@@ -303,7 +306,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n         let mut initial_diag =\n             mbcx.report_conflicting_borrow(location, (&place, span), bk, &borrow);\n \n-        let scope = mbcx.body.source_info(location).scope;\n+        let scope = mbcx.body_cache.source_info(location).scope;\n         let lint_root = match &mbcx.body_cache.source_scopes[scope].local_data {\n             ClearCrossCrate::Set(data) => data.lint_root,\n             _ => id,\n@@ -339,7 +342,8 @@ fn do_mir_borrowck<'a, 'tcx>(\n \n     debug!(\"mbcx.used_mut: {:?}\", mbcx.used_mut);\n     let used_mut = mbcx.used_mut;\n-    for local in mbcx.body_cache.mut_vars_and_args_iter().filter(|local| !used_mut.contains(local)) {\n+    for local in mbcx.body_cache.mut_vars_and_args_iter().filter(|local| !used_mut.contains(local))\n+    {\n         let local_decl = &mbcx.body_cache.local_decls[local];\n         let lint_root = match &mbcx.body.source_scopes[local_decl.source_info.scope].local_data {\n             ClearCrossCrate::Set(data) => data.lint_root,"}, {"sha": "0ec72150d97b391032993919d943ad585e0028e2", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=67b7a78231c84f9e864d7074f2fc8f092290873b", "patch": "@@ -61,8 +61,12 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 projection: [proj_base @ .., ProjectionElem::Field(upvar_index, _)],\n             } => {\n                 debug_assert!(is_closure_or_generator(\n-                    Place::ty_from(&the_place_err.base, proj_base, self.body_cache.body(), self.infcx.tcx).ty\n-                ));\n+                    Place::ty_from(\n+                        &the_place_err.base,\n+                        proj_base,\n+                        self.body_cache.body(),\n+                        self.infcx.tcx\n+                    ).ty));\n \n                 item_msg = format!(\"`{}`\", access_place_desc.unwrap());\n                 if self.is_upvar_field_projection(access_place.as_ref()).is_some() {"}, {"sha": "519b59304b7687c3964c983d224ea36cdead2b0c", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=67b7a78231c84f9e864d7074f2fc8f092290873b", "patch": "@@ -298,7 +298,13 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n \n     // We also have a `#[rustc_nll]` annotation that causes us to dump\n     // information\n-    dump_annotation(infcx, body_cache.body(), def_id, &regioncx, &closure_region_requirements, errors_buffer);\n+    dump_annotation(\n+        infcx,\n+        body_cache.body(),\n+        def_id,\n+        &regioncx,\n+        &closure_region_requirements,\n+        errors_buffer);\n \n     (regioncx, polonius_output, closure_region_requirements)\n }"}, {"sha": "7200f8d8ae5956a2ea22bae2496b7dffba0cf4d1", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=67b7a78231c84f9e864d7074f2fc8f092290873b", "patch": "@@ -168,8 +168,17 @@ pub(crate) fn type_check<'tcx>(\n         &mut borrowck_context,\n         &universal_region_relations,\n         |mut cx| {\n-            cx.equate_inputs_and_outputs(body_cache.body(), universal_regions, &normalized_inputs_and_output);\n-            liveness::generate(&mut cx, body_cache, elements, flow_inits, move_data, location_table);\n+            cx.equate_inputs_and_outputs(\n+                body_cache.body(),\n+                universal_regions,\n+                &normalized_inputs_and_output);\n+            liveness::generate(\n+                &mut cx,\n+                body_cache,\n+                elements,\n+                flow_inits,\n+                move_data,\n+                location_table);\n \n             translate_outlives_facts(cx.borrowck_context);\n         },\n@@ -535,7 +544,11 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n         place_ty\n     }\n \n-    fn sanitize_promoted(&mut self, promoted_body_cache: ReadOnlyBodyCache<'b, 'tcx>, location: Location) {\n+    fn sanitize_promoted(\n+        &mut self,\n+        promoted_body_cache: ReadOnlyBodyCache<'b, 'tcx>,\n+        location: Location\n+    ) {\n         // Determine the constraints from the promoted MIR by running the type\n         // checker on the promoted MIR, then transfer the constraints back to\n         // the main MIR, changing the locations to the provided location."}, {"sha": "3f76d0e3a3cecbe6956cd035d81d0adaa4f05444", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=67b7a78231c84f9e864d7074f2fc8f092290873b", "patch": "@@ -87,7 +87,9 @@ impl<'mir, 'tcx: 'mir> RequiresStorage<'mir, 'tcx> {\n     ) -> Self {\n         RequiresStorage {\n             body_cache,\n-            borrowed_locals: RefCell::new(DataflowResultsCursor::new(borrowed_locals, body_cache.body())),\n+            borrowed_locals: RefCell::new(\n+                DataflowResultsCursor::new(borrowed_locals, body_cache.body())\n+            ),\n         }\n     }\n "}, {"sha": "9b54c66e1e572d92b2bed4a41a3a1542e4535250", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=67b7a78231c84f9e864d7074f2fc8f092290873b", "patch": "@@ -165,7 +165,9 @@ fn local_decls_for_sig<'tcx>(sig: &ty::FnSig<'tcx>, span: Span)\n         .collect()\n }\n \n-fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>) -> BodyCache<'tcx> {\n+fn build_drop_shim<'tcx>(\n+    tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>\n+) -> BodyCache<'tcx> {\n     debug!(\"build_drop_shim(def_id={:?}, ty={:?})\", def_id, ty);\n \n     // Check if this is a generator, if so, return the drop glue for it"}, {"sha": "48aa53a58c9b5ff7f7bdc6adc5aa2754a80157d1", "filename": "src/librustc_mir/transform/add_call_guards.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs?ref=67b7a78231c84f9e864d7074f2fc8f092290873b", "patch": "@@ -31,7 +31,9 @@ pub use self::AddCallGuards::*;\n  */\n \n impl<'tcx> MirPass<'tcx> for AddCallGuards {\n-    fn run_pass(&self, _tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body_cache: &mut BodyCache<'tcx>) {\n+    fn run_pass(\n+        &self, _tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body_cache: &mut BodyCache<'tcx>\n+    ) {\n         self.add_call_guards(body_cache);\n     }\n }"}, {"sha": "21bc679b9a0397c3eff8f28fc105ef3bbe9086a1", "filename": "src/librustc_mir/transform/add_moves_for_packed_drops.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs?ref=67b7a78231c84f9e864d7074f2fc8f092290873b", "patch": "@@ -46,7 +46,9 @@ impl<'tcx> MirPass<'tcx> for AddMovesForPackedDrops {\n     }\n }\n \n-pub fn add_moves_for_packed_drops<'tcx>(tcx: TyCtxt<'tcx>, body_cache: &mut BodyCache<'tcx>, def_id: DefId) {\n+pub fn add_moves_for_packed_drops<'tcx>(\n+    tcx: TyCtxt<'tcx>, body_cache: &mut BodyCache<'tcx>, def_id: DefId\n+) {\n     let patch = add_moves_for_packed_drops_patch(tcx, body_cache, def_id);\n     patch.apply(body_cache);\n }"}, {"sha": "23ab2c28063bbc75f086eca178459312f4a9eaea", "filename": "src/librustc_mir/transform/cleanup_post_borrowck.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs?ref=67b7a78231c84f9e864d7074f2fc8f092290873b", "patch": "@@ -29,7 +29,9 @@ pub struct DeleteNonCodegenStatements<'tcx> {\n }\n \n impl<'tcx> MirPass<'tcx> for CleanupNonCodegenStatements {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body_cache: &mut BodyCache<'tcx>) {\n+    fn run_pass(\n+        &self, tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body_cache: &mut BodyCache<'tcx>\n+    ) {\n         let mut delete = DeleteNonCodegenStatements { tcx };\n         delete.visit_body(body_cache);\n     }"}, {"sha": "3ea97ff68fd3fb87533a9fc6e59c9433be5c64dc", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=67b7a78231c84f9e864d7074f2fc8f092290873b", "patch": "@@ -42,7 +42,9 @@ const MAX_ALLOC_LIMIT: u64 = 1024;\n pub struct ConstProp;\n \n impl<'tcx> MirPass<'tcx> for ConstProp {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body_cache: &mut BodyCache<'tcx>) {\n+    fn run_pass(\n+        &self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body_cache: &mut BodyCache<'tcx>\n+    ) {\n         // will be evaluated by miri and produce its errors there\n         if source.promoted.is_some() {\n             return;"}, {"sha": "d2f83eeadeb84519a8c89c2b3f2db9a4d2195712", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=67b7a78231c84f9e864d7074f2fc8f092290873b", "patch": "@@ -31,7 +31,9 @@ use crate::util::def_use::DefUseAnalysis;\n pub struct CopyPropagation;\n \n impl<'tcx> MirPass<'tcx> for CopyPropagation {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body_cache: &mut BodyCache<'tcx>) {\n+    fn run_pass(\n+        &self, tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body_cache: &mut BodyCache<'tcx>\n+    ) {\n         // We only run when the MIR optimization level is > 1.\n         // This avoids a slow pass, and messing up debug info.\n         if tcx.sess.opts.debugging_opts.mir_opt_level <= 1 {\n@@ -100,7 +102,10 @@ impl<'tcx> MirPass<'tcx> for CopyPropagation {\n                                     let maybe_action = match operand {\n                                         Operand::Copy(ref src_place) |\n                                         Operand::Move(ref src_place) => {\n-                                            Action::local_copy(&body_cache, &def_use_analysis, src_place)\n+                                            Action::local_copy(\n+                                                &body_cache,\n+                                                &def_use_analysis,\n+                                                src_place)\n                                         }\n                                         Operand::Constant(ref src_constant) => {\n                                             Action::constant(src_constant)\n@@ -129,8 +134,8 @@ impl<'tcx> MirPass<'tcx> for CopyPropagation {\n                     }\n                 }\n \n-                changed =\n-                    action.perform(body_cache, &def_use_analysis, dest_local, location, tcx) || changed;\n+                changed = action.perform(body_cache, &def_use_analysis, dest_local, location, tcx)\n+                    || changed;\n                 // FIXME(pcwalton): Update the use-def chains to delete the instructions instead of\n                 // regenerating the chains.\n                 break\n@@ -273,7 +278,8 @@ impl<'tcx> Action<'tcx> {\n                 }\n \n                 // Replace all uses of the destination local with the source local.\n-                def_use_analysis.replace_all_defs_and_uses_with(dest_local, body_cache, src_local, tcx);\n+                def_use_analysis\n+                    .replace_all_defs_and_uses_with(dest_local, body_cache, src_local, tcx);\n \n                 // Finally, zap the now-useless assignment instruction.\n                 debug!(\"  Deleting assignment\");"}, {"sha": "5ad034539e0e26215e10869a9a3dda3a202657ab", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=67b7a78231c84f9e864d7074f2fc8f092290873b", "patch": "@@ -6,7 +6,9 @@ use crate::util::expand_aggregate;\n pub struct Deaggregator;\n \n impl<'tcx> MirPass<'tcx> for Deaggregator {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body_cache: &mut BodyCache<'tcx>) {\n+    fn run_pass(\n+        &self, tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body_cache: &mut BodyCache<'tcx>\n+    ) {\n         let (basic_blocks, local_decls) = body_cache.basic_blocks_and_local_decls_mut();\n         let local_decls = &*local_decls;\n         for bb in basic_blocks {"}, {"sha": "3dbebf885f70e8f024465e9c123162c38b5ea8db", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=67b7a78231c84f9e864d7074f2fc8f092290873b", "patch": "@@ -18,8 +18,9 @@ impl<'tcx> MirPass<'tcx> for Marker {\n         Cow::Borrowed(self.0)\n     }\n \n-    fn run_pass(&self, _tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, _body_cache: &mut BodyCache<'tcx>) {\n-    }\n+    fn run_pass(\n+        &self, _tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, _body_cache: &mut BodyCache<'tcx>\n+    ) {}\n }\n \n pub struct Disambiguator {"}, {"sha": "c79178dcac78f8878b0caede969ce936f34edaa0", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=67b7a78231c84f9e864d7074f2fc8f092290873b", "patch": "@@ -860,7 +860,9 @@ fn insert_switch<'tcx>(\n     }\n }\n \n-fn elaborate_generator_drops<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, body_cache: &mut BodyCache<'tcx>) {\n+fn elaborate_generator_drops<'tcx>(\n+    tcx: TyCtxt<'tcx>, def_id: DefId, body_cache: &mut BodyCache<'tcx>\n+) {\n     use crate::util::elaborate_drops::{elaborate_drop, Unwind};\n     use crate::util::patch::MirPatch;\n     use crate::shim::DropShimElaborator;\n@@ -993,7 +995,9 @@ fn create_generator_drop_shim<'tcx>(\n     body_cache\n }\n \n-fn insert_term_block<'tcx>(body_cache: &mut BodyCache<'tcx>, kind: TerminatorKind<'tcx>) -> BasicBlock {\n+fn insert_term_block<'tcx>(\n+    body_cache: &mut BodyCache<'tcx>, kind: TerminatorKind<'tcx>\n+) -> BasicBlock {\n     let term_block = BasicBlock::new(body_cache.basic_blocks().len());\n     let source_info = source_info(body_cache);\n     body_cache.basic_blocks_mut().push(BasicBlockData {\n@@ -1164,7 +1168,9 @@ where\n }\n \n impl<'tcx> MirPass<'tcx> for StateTransform {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body_cache: &mut BodyCache<'tcx>) {\n+    fn run_pass(\n+        &self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body_cache: &mut BodyCache<'tcx>\n+    ) {\n         let yield_ty = if let Some(yield_ty) = body_cache.yield_ty {\n             yield_ty\n         } else {"}, {"sha": "6721982e8469e22d3308d393b5311f3263cb13f5", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=67b7a78231c84f9e864d7074f2fc8f092290873b", "patch": "@@ -38,7 +38,9 @@ struct CallSite<'tcx> {\n }\n \n impl<'tcx> MirPass<'tcx> for Inline {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body_cache: &mut BodyCache<'tcx>) {\n+    fn run_pass(\n+        &self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body_cache: &mut BodyCache<'tcx>\n+    ) {\n         if tcx.sess.opts.debugging_opts.mir_opt_level >= 2 {\n             Inliner { tcx, source }.run_pass(body_cache);\n         }\n@@ -136,7 +138,8 @@ impl Inliner<'tcx> {\n                 debug!(\"attempting to inline callsite {:?} - success\", callsite);\n \n                 // Add callsites from inlined function\n-                for (bb, bb_data) in caller_body_cache.basic_blocks().iter_enumerated().skip(start) {\n+                for (bb, bb_data) in caller_body_cache.basic_blocks().iter_enumerated().skip(start)\n+                {\n                     if let Some(new_callsite) = self.get_valid_function_call(bb,\n                                                                              bb_data,\n                                                                              caller_body_cache,\n@@ -543,8 +546,10 @@ impl Inliner<'tcx> {\n         // and the vector is `[closure_ref, tmp0, tmp1, tmp2]`.\n         if tcx.is_closure(callsite.callee) {\n             let mut args = args.into_iter();\n-            let self_ = self.create_temp_if_necessary(args.next().unwrap(), callsite, caller_body_cache);\n-            let tuple = self.create_temp_if_necessary(args.next().unwrap(), callsite, caller_body_cache);\n+            let self_\n+                = self.create_temp_if_necessary(args.next().unwrap(), callsite, caller_body_cache);\n+            let tuple\n+                = self.create_temp_if_necessary(args.next().unwrap(), callsite, caller_body_cache);\n             assert!(args.next().is_none());\n \n             let tuple = Place::from(tuple);"}, {"sha": "3b2cea53d1c504aab2f2d7da8f86d699ba345ab2", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=67b7a78231c84f9e864d7074f2fc8f092290873b", "patch": "@@ -338,7 +338,7 @@ fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &BodyCache<'_> {\n     tcx.arena.alloc(body_cache)\n }\n \n-fn promoted_mir<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx IndexVec<Promoted, BodyCache<'tcx>> {\n+fn promoted_mir(tcx: TyCtxt, def_id: DefId) -> &IndexVec<Promoted, BodyCache> {\n     if tcx.is_constructor(def_id) {\n         return tcx.intern_promoted(IndexVec::new());\n     }"}, {"sha": "6e877d2fb74e05cee08b896debe5543a71181c4e", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=67b7a78231c84f9e864d7074f2fc8f092290873b", "patch": "@@ -64,10 +64,20 @@ impl<'tcx> MirPass<'tcx> for SanityCheck {\n             sanity_check_via_rustc_peek(tcx, body_cache.body(), def_id, &attributes, &flow_uninits);\n         }\n         if has_rustc_mir_with(&attributes, sym::rustc_peek_definite_init).is_some() {\n-            sanity_check_via_rustc_peek(tcx, body_cache.body(), def_id, &attributes, &flow_def_inits);\n+            sanity_check_via_rustc_peek(\n+                tcx,\n+                body_cache.body(),\n+                def_id,\n+                &attributes,\n+                &flow_def_inits);\n         }\n         if has_rustc_mir_with(&attributes, sym::rustc_peek_indirectly_mutable).is_some() {\n-            sanity_check_via_rustc_peek(tcx, body_cache.body(), def_id, &attributes, &flow_indirectly_mut);\n+            sanity_check_via_rustc_peek(\n+                tcx,\n+                body_cache.body(),\n+                def_id,\n+                &attributes,\n+                &flow_indirectly_mut);\n         }\n         if has_rustc_mir_with(&attributes, sym::stop_after_dataflow).is_some() {\n             tcx.sess.fatal(\"stop_after_dataflow ended compilation\");"}, {"sha": "949059f19aedaabc3052f7bfc5dc71ad193f198a", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=67b7a78231c84f9e864d7074f2fc8f092290873b", "patch": "@@ -56,7 +56,9 @@ impl<'tcx> MirPass<'tcx> for SimplifyCfg {\n         Cow::Borrowed(&self.label)\n     }\n \n-    fn run_pass(&self, _tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body_cache: &mut BodyCache<'tcx>) {\n+    fn run_pass(\n+        &self, _tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body_cache: &mut BodyCache<'tcx>\n+    ) {\n         debug!(\"SimplifyCfg({:?}) - simplifying {:?}\", self.label, body_cache.body());\n         simplify_cfg(body_cache);\n     }\n@@ -293,7 +295,9 @@ pub fn remove_dead_blocks(body_cache: &mut BodyCache<'_>) {\n pub struct SimplifyLocals;\n \n impl<'tcx> MirPass<'tcx> for SimplifyLocals {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body_cache: &mut BodyCache<'tcx>) {\n+    fn run_pass(\n+        &self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body_cache: &mut BodyCache<'tcx>\n+    ) {\n         trace!(\"running SimplifyLocals on {:?}\", source);\n         let locals = {\n             let read_only_cache = read_only!(body_cache);"}, {"sha": "62a2f269facc1167a53cb2ae69dfde794fa32e95", "filename": "src/librustc_mir/transform/uniform_array_move_out.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs?ref=67b7a78231c84f9e864d7074f2fc8f092290873b", "patch": "@@ -42,7 +42,8 @@ impl<'tcx> MirPass<'tcx> for UniformArrayMoveOut {\n         let param_env = tcx.param_env(src.def_id());\n         {\n             let read_only_cache = read_only!(body_cache);\n-            let mut visitor = UniformArrayMoveOutVisitor{ body: body_cache, patch: &mut patch, tcx, param_env};\n+            let mut visitor\n+                = UniformArrayMoveOutVisitor{ body: body_cache, patch: &mut patch, tcx, param_env};\n             visitor.visit_body(read_only_cache);\n         }\n         patch.apply(body_cache);\n@@ -219,8 +220,12 @@ impl<'tcx> MirPass<'tcx> for RestoreSubsliceArrayMoveOut<'tcx> {\n \n                         let opt_src_place = items.first().and_then(|x| *x).map(|x| x.2);\n                         let opt_size = opt_src_place.and_then(|src_place| {\n-                            let src_ty =\n-                                Place::ty_from(src_place.base, src_place.projection, body_cache.body(), tcx).ty;\n+                            let src_ty = Place::ty_from(\n+                                src_place.base,\n+                                src_place.projection,\n+                                body_cache.body(),\n+                                tcx\n+                            ).ty;\n                             if let ty::Array(_, ref size_o) = src_ty.kind {\n                                 size_o.try_eval_usize(tcx, param_env)\n                             } else {"}, {"sha": "1773dbd2e34a18678d9051106202863ca439ff81", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b7a78231c84f9e864d7074f2fc8f092290873b/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=67b7a78231c84f9e864d7074f2fc8f092290873b", "patch": "@@ -83,7 +83,8 @@ pub fn liveness_of_locals(\n     // FIXME(ecstaticmorse): Reverse post-order on the reverse CFG may generate a better iteration\n     // order when cycles are present, but the overhead of computing the reverse CFG may outweigh\n     // any benefits. Benchmark this and find out.\n-    let mut dirty_queue: WorkQueue<BasicBlock> = WorkQueue::with_none(body_cache.basic_blocks().len());\n+    let mut dirty_queue: WorkQueue<BasicBlock>\n+        = WorkQueue::with_none(body_cache.basic_blocks().len());\n     for (bb, _) in traversal::postorder(body_cache.body()) {\n         dirty_queue.insert(bb);\n     }"}]}