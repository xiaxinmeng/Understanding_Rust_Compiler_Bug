{"sha": "45f8a3b30c80b17ff78ac8d1aa14784a73ca593e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZjhhM2IzMGM4MGIxN2ZmNzhhYzhkMWFhMTQ3ODRhNzNjYTU5M2U=", "commit": {"author": {"name": "Maik Klein", "email": "maikklein@googlemail.com", "date": "2017-11-23T15:02:02Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-12-18T15:08:49Z"}, "message": "Move partitioning.rs to rustc_mir", "tree": {"sha": "ad91df531c44678f635d446f05b56ae508db7b9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad91df531c44678f635d446f05b56ae508db7b9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45f8a3b30c80b17ff78ac8d1aa14784a73ca593e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45f8a3b30c80b17ff78ac8d1aa14784a73ca593e", "html_url": "https://github.com/rust-lang/rust/commit/45f8a3b30c80b17ff78ac8d1aa14784a73ca593e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45f8a3b30c80b17ff78ac8d1aa14784a73ca593e/comments", "author": {"login": "MaikKlein", "id": 1994306, "node_id": "MDQ6VXNlcjE5OTQzMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1994306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaikKlein", "html_url": "https://github.com/MaikKlein", "followers_url": "https://api.github.com/users/MaikKlein/followers", "following_url": "https://api.github.com/users/MaikKlein/following{/other_user}", "gists_url": "https://api.github.com/users/MaikKlein/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaikKlein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaikKlein/subscriptions", "organizations_url": "https://api.github.com/users/MaikKlein/orgs", "repos_url": "https://api.github.com/users/MaikKlein/repos", "events_url": "https://api.github.com/users/MaikKlein/events{/privacy}", "received_events_url": "https://api.github.com/users/MaikKlein/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "116e43f73bb6e0beb5b27403ce7f0616ed5ce627", "url": "https://api.github.com/repos/rust-lang/rust/commits/116e43f73bb6e0beb5b27403ce7f0616ed5ce627", "html_url": "https://github.com/rust-lang/rust/commit/116e43f73bb6e0beb5b27403ce7f0616ed5ce627"}], "stats": {"total": 69, "additions": 35, "deletions": 34}, "files": [{"sha": "c3fb126ea182249df2b430e40f3bdfceb7b653fd", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/45f8a3b30c80b17ff78ac8d1aa14784a73ca593e/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f8a3b30c80b17ff78ac8d1aa14784a73ca593e/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=45f8a3b30c80b17ff78ac8d1aa14784a73ca593e", "patch": "@@ -26,6 +26,7 @@ use syntax::attr::{self, InlineAttr};\n use std::fmt::{self, Write};\n use std::iter;\n use rustc::mir::mono::Linkage;\n+use syntax_pos::symbol::Symbol;\n pub use rustc::mir::mono::MonoItem;\n \n pub fn linkage_by_name(name: &str) -> Option<Linkage> {\n@@ -83,6 +84,31 @@ pub enum InstantiationMode {\n pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n     fn as_mono_item(&self) -> &MonoItem<'tcx>;\n \n+    fn is_generic_fn(&self) -> bool {\n+        match *self.as_mono_item() {\n+            MonoItem::Fn(ref instance) => {\n+                instance.substs.types().next().is_some()\n+            }\n+            MonoItem::Static(..) |\n+            MonoItem::GlobalAsm(..) => false,\n+        }\n+    }\n+\n+    fn symbol_name(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> ty::SymbolName {\n+        match *self.as_mono_item() {\n+            MonoItem::Fn(instance) => tcx.symbol_name(instance),\n+            MonoItem::Static(node_id) => {\n+                let def_id = tcx.hir.local_def_id(node_id);\n+                tcx.symbol_name(Instance::mono(tcx, def_id))\n+            }\n+            MonoItem::GlobalAsm(node_id) => {\n+                let def_id = tcx.hir.local_def_id(node_id);\n+                ty::SymbolName {\n+                    name: Symbol::intern(&format!(\"global_asm_{:?}\", def_id)).as_str()\n+                }\n+            }\n+        }\n+    }\n     fn instantiation_mode(&self,\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>)\n                           -> InstantiationMode {"}, {"sha": "fcf0d71dccb48ab2a7121c28c745f7efa9635fd2", "filename": "src/librustc_mir/monomorphize/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45f8a3b30c80b17ff78ac8d1aa14784a73ca593e/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f8a3b30c80b17ff78ac8d1aa14784a73ca593e/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs?ref=45f8a3b30c80b17ff78ac8d1aa14784a73ca593e", "patch": "@@ -16,9 +16,11 @@ use rustc::ty::subst::Kind;\n use rustc::ty::{self, Ty, TyCtxt};\n \n pub use rustc::ty::Instance;\n+pub use self::item::{MonoItem, MonoItemExt};\n \n pub mod collector;\n pub mod item;\n+pub mod partitioning;\n \n fn fn_once_adapter_instance<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "c9defe142eaa244c52b7e708c4771664c0481453", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "renamed", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/45f8a3b30c80b17ff78ac8d1aa14784a73ca593e/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f8a3b30c80b17ff78ac8d1aa14784a73ca593e/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=45f8a3b30c80b17ff78ac8d1aa14784a73ca593e", "patch": "@@ -102,7 +102,7 @@\n //! source-level module, functions from the same module will be available for\n //! inlining, even when they are not marked #[inline].\n \n-use rustc_mir::monomorphize::collector::InliningMap;\n+use monomorphize::collector::InliningMap;\n use rustc::dep_graph::WorkProductId;\n use rustc::hir::def_id::DefId;\n use rustc::hir::map::DefPathData;\n@@ -113,7 +113,8 @@ use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use std::collections::hash_map::Entry;\n use syntax::ast::NodeId;\n use syntax::symbol::{Symbol, InternedString};\n-use trans_item::{MonoItem, BaseMonoItemExt, MonoItemExt, InstantiationMode};\n+use rustc::mir::mono::MonoItem;\n+use monomorphize::item::{MonoItemExt, InstantiationMode};\n use rustc::ty::subst::Subst;\n \n pub use rustc::mir::mono::CodegenUnit;", "previous_filename": "src/librustc_trans/partitioning.rs"}, {"sha": "79b3d314e12ffa00b5708eac8a801216bd2db3ac", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45f8a3b30c80b17ff78ac8d1aa14784a73ca593e/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f8a3b30c80b17ff78ac8d1aa14784a73ca593e/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=45f8a3b30c80b17ff78ac8d1aa14784a73ca593e", "patch": "@@ -64,7 +64,7 @@ use declare;\n use meth;\n use mir;\n use monomorphize::Instance;\n-use partitioning::{self, PartitioningStrategy, CodegenUnit, CodegenUnitExt};\n+use monomorphize::partitioning::{self, PartitioningStrategy, CodegenUnit, CodegenUnitExt};\n use symbol_names_test;\n use time_graph;\n use trans_item::{MonoItem, BaseMonoItemExt, MonoItemExt, DefPathBasedNames};"}, {"sha": "f9fbcebd32e72c03e94dcbbb11ee2fc25c2d2357", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45f8a3b30c80b17ff78ac8d1aa14784a73ca593e/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f8a3b30c80b17ff78ac8d1aa14784a73ca593e/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=45f8a3b30c80b17ff78ac8d1aa14784a73ca593e", "patch": "@@ -16,7 +16,7 @@ use rustc::hir::map as hir_map;\n use rustc::middle::const_val::ConstEvalErr;\n use debuginfo;\n use base;\n-use trans_item::{MonoItem, MonoItemExt};\n+use monomorphize::{MonoItem, MonoItemExt};\n use common::{CrateContext, val_ty};\n use declare;\n use monomorphize::Instance;"}, {"sha": "d5e71062f74d78e2e859c369eecab6a365f399e6", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45f8a3b30c80b17ff78ac8d1aa14784a73ca593e/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f8a3b30c80b17ff78ac8d1aa14784a73ca593e/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=45f8a3b30c80b17ff78ac8d1aa14784a73ca593e", "patch": "@@ -22,7 +22,7 @@ use base;\n use declare;\n use monomorphize::Instance;\n \n-use partitioning::CodegenUnit;\n+use monomorphize::partitioning::CodegenUnit;\n use type_::Type;\n use type_of::PointeeInfo;\n "}, {"sha": "c4849c621e8d5d136ebca61fda737b339bbf3a7c", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45f8a3b30c80b17ff78ac8d1aa14784a73ca593e/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f8a3b30c80b17ff78ac8d1aa14784a73ca593e/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=45f8a3b30c80b17ff78ac8d1aa14784a73ca593e", "patch": "@@ -138,7 +138,6 @@ mod llvm_util;\n mod metadata;\n mod meth;\n mod mir;\n-mod partitioning;\n mod symbol_names_test;\n mod time_graph;\n mod trans_item;"}, {"sha": "31d8e092c4ae49a05486d78c11ad89d3a054cbce", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 1, "deletions": 28, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/45f8a3b30c80b17ff78ac8d1aa14784a73ca593e/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f8a3b30c80b17ff78ac8d1aa14784a73ca593e/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=45f8a3b30c80b17ff78ac8d1aa14784a73ca593e", "patch": "@@ -25,12 +25,11 @@ use monomorphize::Instance;\n use type_of::LayoutLlvmExt;\n use rustc::hir;\n use rustc::mir::mono::{Linkage, Visibility};\n-use rustc::ty::{self, TyCtxt, TypeFoldable};\n+use rustc::ty::{TyCtxt, TypeFoldable};\n use rustc::ty::layout::LayoutOf;\n use syntax::ast;\n use syntax::attr;\n use syntax_pos::Span;\n-use syntax_pos::symbol::Symbol;\n use std::fmt;\n \n pub use rustc::mir::mono::MonoItem;\n@@ -108,22 +107,6 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n                ccx.codegen_unit().name());\n     }\n \n-    fn symbol_name(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> ty::SymbolName {\n-        match *self.as_mono_item() {\n-            MonoItem::Fn(instance) => tcx.symbol_name(instance),\n-            MonoItem::Static(node_id) => {\n-                let def_id = tcx.hir.local_def_id(node_id);\n-                tcx.symbol_name(Instance::mono(tcx, def_id))\n-            }\n-            MonoItem::GlobalAsm(node_id) => {\n-                let def_id = tcx.hir.local_def_id(node_id);\n-                ty::SymbolName {\n-                    name: Symbol::intern(&format!(\"global_asm_{:?}\", def_id)).as_str()\n-                }\n-            }\n-        }\n-    }\n-\n     fn local_span(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Option<Span> {\n         match *self.as_mono_item() {\n             MonoItem::Fn(Instance { def, .. }) => {\n@@ -136,16 +119,6 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n         }.map(|node_id| tcx.hir.span(node_id))\n     }\n \n-    fn is_generic_fn(&self) -> bool {\n-        match *self.as_mono_item() {\n-            MonoItem::Fn(ref instance) => {\n-                instance.substs.types().next().is_some()\n-            }\n-            MonoItem::Static(..) |\n-            MonoItem::GlobalAsm(..) => false,\n-        }\n-    }\n-\n     fn to_raw_string(&self) -> String {\n         match *self.as_mono_item() {\n             MonoItem::Fn(instance) => {"}]}