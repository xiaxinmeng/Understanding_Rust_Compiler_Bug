{"sha": "4b382946e4fffb0f82e821ae4f8239a439b35207", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMzgyOTQ2ZTRmZmZiMGY4MmU4MjFhZTRmODIzOWE0MzliMzUyMDc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-01-13T01:52:59Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-03-23T14:20:11Z"}, "message": "syntax: Remove warning for unnecessary path disambiguators", "tree": {"sha": "dac15552c6f71e3ecc779c462487896631b5e0c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dac15552c6f71e3ecc779c462487896631b5e0c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b382946e4fffb0f82e821ae4f8239a439b35207", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b382946e4fffb0f82e821ae4f8239a439b35207", "html_url": "https://github.com/rust-lang/rust/commit/4b382946e4fffb0f82e821ae4f8239a439b35207", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b382946e4fffb0f82e821ae4f8239a439b35207/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d51a437e28ab2cebbee9d54c3dbfe06e59f242d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d51a437e28ab2cebbee9d54c3dbfe06e59f242d1", "html_url": "https://github.com/rust-lang/rust/commit/d51a437e28ab2cebbee9d54c3dbfe06e59f242d1"}], "stats": {"total": 99, "additions": 20, "deletions": 79}, "files": [{"sha": "ab5823eaca52af4f3d7443392ffd51636a3888ed", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b382946e4fffb0f82e821ae4f8239a439b35207/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b382946e4fffb0f82e821ae4f8239a439b35207/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=4b382946e4fffb0f82e821ae4f8239a439b35207", "patch": "@@ -929,7 +929,7 @@ fn parse_nt<'a>(p: &mut Parser<'a>, sp: Span, name: &str) -> Nonterminal {\n             p.fatal(&format!(\"expected ident, found {}\", &token_str)).emit();\n             FatalError.raise()\n         }\n-        \"path\" => token::NtPath(panictry!(p.parse_path_common(PathStyle::Type, false))),\n+        \"path\" => token::NtPath(panictry!(p.parse_path(PathStyle::Type))),\n         \"meta\" => token::NtMeta(panictry!(p.parse_meta_item())),\n         \"vis\" => token::NtVis(panictry!(p.parse_visibility(true))),\n         \"lifetime\" => if p.check_lifetime() {"}, {"sha": "c3e1aa7ae117fb69ef92bfc95e445521fd359ac5", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4b382946e4fffb0f82e821ae4f8239a439b35207/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b382946e4fffb0f82e821ae4f8239a439b35207/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4b382946e4fffb0f82e821ae4f8239a439b35207", "patch": "@@ -1903,7 +1903,7 @@ impl<'a> Parser<'a> {\n         self.expect(&token::ModSep)?;\n \n         let mut path = ast::Path { segments: Vec::new(), span: syntax_pos::DUMMY_SP };\n-        self.parse_path_segments(&mut path.segments, T::PATH_STYLE, true)?;\n+        self.parse_path_segments(&mut path.segments, T::PATH_STYLE)?;\n         path.span = ty_span.to(self.prev_span);\n \n         let ty_str = self.sess.source_map().span_to_snippet(ty_span)\n@@ -2294,7 +2294,7 @@ impl<'a> Parser<'a> {\n         self.expect(&token::ModSep)?;\n \n         let qself = QSelf { ty, path_span, position: path.segments.len() };\n-        self.parse_path_segments(&mut path.segments, style, true)?;\n+        self.parse_path_segments(&mut path.segments, style)?;\n \n         Ok((qself, ast::Path { segments: path.segments, span: lo.to(self.prev_span) }))\n     }\n@@ -2310,11 +2310,6 @@ impl<'a> Parser<'a> {\n     /// `Fn(Args)` (without disambiguator)\n     /// `Fn::(Args)` (with disambiguator)\n     pub fn parse_path(&mut self, style: PathStyle) -> PResult<'a, ast::Path> {\n-        self.parse_path_common(style, true)\n-    }\n-\n-    crate fn parse_path_common(&mut self, style: PathStyle, enable_warning: bool)\n-                             -> PResult<'a, ast::Path> {\n         maybe_whole!(self, NtPath, |path| {\n             if style == PathStyle::Mod &&\n                path.segments.iter().any(|segment| segment.args.is_some()) {\n@@ -2329,7 +2324,7 @@ impl<'a> Parser<'a> {\n         if self.eat(&token::ModSep) {\n             segments.push(PathSegment::path_root(lo.shrink_to_lo().with_ctxt(mod_sep_ctxt)));\n         }\n-        self.parse_path_segments(&mut segments, style, enable_warning)?;\n+        self.parse_path_segments(&mut segments, style)?;\n \n         Ok(ast::Path { segments, span: lo.to(self.prev_span) })\n     }\n@@ -2357,11 +2352,10 @@ impl<'a> Parser<'a> {\n \n     fn parse_path_segments(&mut self,\n                            segments: &mut Vec<PathSegment>,\n-                           style: PathStyle,\n-                           enable_warning: bool)\n+                           style: PathStyle)\n                            -> PResult<'a, ()> {\n         loop {\n-            let segment = self.parse_path_segment(style, enable_warning)?;\n+            let segment = self.parse_path_segment(style)?;\n             if style == PathStyle::Expr {\n                 // In order to check for trailing angle brackets, we must have finished\n                 // recursing (`parse_path_segment` can indirectly call this function),\n@@ -2389,8 +2383,7 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    fn parse_path_segment(&mut self, style: PathStyle, enable_warning: bool)\n-                          -> PResult<'a, PathSegment> {\n+    fn parse_path_segment(&mut self, style: PathStyle) -> PResult<'a, PathSegment> {\n         let ident = self.parse_path_segment_ident()?;\n \n         let is_args_start = |token: &token::Token| match *token {\n@@ -2407,13 +2400,6 @@ impl<'a> Parser<'a> {\n         Ok(if style == PathStyle::Type && check_args_start(self) ||\n               style != PathStyle::Mod && self.check(&token::ModSep)\n                                       && self.look_ahead(1, |t| is_args_start(t)) {\n-            // Generic arguments are found - `<`, `(`, `::<` or `::(`.\n-            if self.eat(&token::ModSep) && style == PathStyle::Type && enable_warning {\n-                self.diagnostic().struct_span_warn(self.prev_span, \"unnecessary path disambiguator\")\n-                                 .span_label(self.prev_span, \"try removing `::`\").emit();\n-            }\n-            let lo = self.span;\n-\n             // We use `style == PathStyle::Expr` to check if this is in a recursion or not. If\n             // it isn't, then we reset the unmatched angle bracket count as we're about to start\n             // parsing a new path.\n@@ -2422,6 +2408,9 @@ impl<'a> Parser<'a> {\n                 self.max_angle_bracket_count = 0;\n             }\n \n+            // Generic arguments are found - `<`, `(`, `::<` or `::(`.\n+            self.eat(&token::ModSep);\n+            let lo = self.span;\n             let args = if self.eat_lt() {\n                 // `<'a, T, A = U>`\n                 let (args, bindings) =\n@@ -3043,7 +3032,7 @@ impl<'a> Parser<'a> {\n \n     // Assuming we have just parsed `.`, continue parsing into an expression.\n     fn parse_dot_suffix(&mut self, self_arg: P<Expr>, lo: Span) -> PResult<'a, P<Expr>> {\n-        let segment = self.parse_path_segment(PathStyle::Expr, true)?;\n+        let segment = self.parse_path_segment(PathStyle::Expr)?;\n         self.check_trailing_angle_brackets(&segment, token::OpenDelim(token::Paren));\n \n         Ok(match self.token {"}, {"sha": "7c93e46c30c23ff2fede4848337627b051629191", "filename": "src/test/run-pass/packed/packed-struct-generic-size.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4b382946e4fffb0f82e821ae4f8239a439b35207/src%2Ftest%2Frun-pass%2Fpacked%2Fpacked-struct-generic-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b382946e4fffb0f82e821ae4f8239a439b35207/src%2Ftest%2Frun-pass%2Fpacked%2Fpacked-struct-generic-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked%2Fpacked-struct-generic-size.rs?ref=4b382946e4fffb0f82e821ae4f8239a439b35207", "patch": "@@ -33,12 +33,12 @@ macro_rules! check {\n }\n \n pub fn main() {\n-    check!(P1::<u8, u8>, 1, 3);\n-    check!(P1::<u64, u16>, 1, 11);\n+    check!(P1<u8, u8>, 1, 3);\n+    check!(P1<u64, u16>, 1, 11);\n \n-    check!(P2::<u8, u8>, 1, 3);\n-    check!(P2::<u64, u16>, 2, 12);\n+    check!(P2<u8, u8>, 1, 3);\n+    check!(P2<u64, u16>, 2, 12);\n \n-    check!(P4C::<u8, u8>, 1, 3);\n-    check!(P4C::<u16, u64>, 4, 12);\n+    check!(P4C<u8, u8>, 1, 3);\n+    check!(P4C<u16, u64>, 4, 12);\n }"}, {"sha": "1af476c156866653129aecc797aa494b2f7b1c3d", "filename": "src/test/run-pass/packed/packed-struct-generic-size.stderr", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d51a437e28ab2cebbee9d54c3dbfe06e59f242d1/src%2Ftest%2Frun-pass%2Fpacked%2Fpacked-struct-generic-size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d51a437e28ab2cebbee9d54c3dbfe06e59f242d1/src%2Ftest%2Frun-pass%2Fpacked%2Fpacked-struct-generic-size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked%2Fpacked-struct-generic-size.stderr?ref=d51a437e28ab2cebbee9d54c3dbfe06e59f242d1", "patch": "@@ -1,36 +0,0 @@\n-warning: unnecessary path disambiguator\n-  --> $DIR/packed-struct-generic-size.rs:36:14\n-   |\n-LL |     check!(P1::<u8, u8>, 1, 3);\n-   |              ^^ try removing `::`\n-\n-warning: unnecessary path disambiguator\n-  --> $DIR/packed-struct-generic-size.rs:37:14\n-   |\n-LL |     check!(P1::<u64, u16>, 1, 11);\n-   |              ^^ try removing `::`\n-\n-warning: unnecessary path disambiguator\n-  --> $DIR/packed-struct-generic-size.rs:39:14\n-   |\n-LL |     check!(P2::<u8, u8>, 1, 3);\n-   |              ^^ try removing `::`\n-\n-warning: unnecessary path disambiguator\n-  --> $DIR/packed-struct-generic-size.rs:40:14\n-   |\n-LL |     check!(P2::<u64, u16>, 2, 12);\n-   |              ^^ try removing `::`\n-\n-warning: unnecessary path disambiguator\n-  --> $DIR/packed-struct-generic-size.rs:42:15\n-   |\n-LL |     check!(P4C::<u8, u8>, 1, 3);\n-   |               ^^ try removing `::`\n-\n-warning: unnecessary path disambiguator\n-  --> $DIR/packed-struct-generic-size.rs:43:15\n-   |\n-LL |     check!(P4C::<u16, u64>, 4, 12);\n-   |               ^^ try removing `::`\n-"}, {"sha": "b4bfba4d6e5d7c2a4742c66394cc9afbb4fe82aa", "filename": "src/test/ui/issues/issue-36116.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b382946e4fffb0f82e821ae4f8239a439b35207/src%2Ftest%2Fui%2Fissues%2Fissue-36116.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b382946e4fffb0f82e821ae4f8239a439b35207/src%2Ftest%2Fui%2Fissues%2Fissue-36116.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36116.rs?ref=4b382946e4fffb0f82e821ae4f8239a439b35207", "patch": "@@ -17,10 +17,10 @@ struct Foo<T> {\n struct S<T>(T);\n \n fn f() {\n-    let f = Some(Foo { _a: 42 }).map(|a| a as Foo::<i32>); //~ WARN unnecessary path disambiguator\n-    let g: Foo::<i32> = Foo { _a: 42 }; //~ WARN unnecessary path disambiguator\n+    let f = Some(Foo { _a: 42 }).map(|a| a as Foo::<i32>);\n+    let g: Foo::<i32> = Foo { _a: 42 };\n \n-    m!(S::<u8>); // OK, no warning\n+    m!(S::<u8>);\n }\n \n "}, {"sha": "5236db29ae4af1fcdc008a7a3035d49b10a5da12", "filename": "src/test/ui/issues/issue-36116.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d51a437e28ab2cebbee9d54c3dbfe06e59f242d1/src%2Ftest%2Fui%2Fissues%2Fissue-36116.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d51a437e28ab2cebbee9d54c3dbfe06e59f242d1/src%2Ftest%2Fui%2Fissues%2Fissue-36116.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36116.stderr?ref=d51a437e28ab2cebbee9d54c3dbfe06e59f242d1", "patch": "@@ -1,12 +0,0 @@\n-warning: unnecessary path disambiguator\n-  --> $DIR/issue-36116.rs:20:50\n-   |\n-LL |     let f = Some(Foo { _a: 42 }).map(|a| a as Foo::<i32>);\n-   |                                                  ^^ try removing `::`\n-\n-warning: unnecessary path disambiguator\n-  --> $DIR/issue-36116.rs:21:15\n-   |\n-LL |     let g: Foo::<i32> = Foo { _a: 42 };\n-   |               ^^ try removing `::`\n-"}]}