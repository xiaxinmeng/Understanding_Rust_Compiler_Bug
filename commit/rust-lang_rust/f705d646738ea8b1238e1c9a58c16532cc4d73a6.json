{"sha": "f705d646738ea8b1238e1c9a58c16532cc4d73a6", "node_id": "C_kwDOAAsO6NoAKGY3MDVkNjQ2NzM4ZWE4YjEyMzhlMWM5YTU4YzE2NTMyY2M0ZDczYTY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-26T23:53:47Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-13T04:56:44Z"}, "message": "Remove instantiate_type_scheme", "tree": {"sha": "257fa07398d8e0f105d56a355ca11e2ac92d411c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/257fa07398d8e0f105d56a355ca11e2ac92d411c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f705d646738ea8b1238e1c9a58c16532cc4d73a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f705d646738ea8b1238e1c9a58c16532cc4d73a6", "html_url": "https://github.com/rust-lang/rust/commit/f705d646738ea8b1238e1c9a58c16532cc4d73a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f705d646738ea8b1238e1c9a58c16532cc4d73a6/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dea1d1c6e03102e5a42c03e50a7ad8107b20411", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dea1d1c6e03102e5a42c03e50a7ad8107b20411", "html_url": "https://github.com/rust-lang/rust/commit/5dea1d1c6e03102e5a42c03e50a7ad8107b20411"}], "stats": {"total": 47, "additions": 13, "deletions": 34}, "files": [{"sha": "bbb2a9d641290d99e0600047f7dce368f7e39917", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 7, "deletions": 28, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f705d646738ea8b1238e1c9a58c16532cc4d73a6/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f705d646738ea8b1238e1c9a58c16532cc4d73a6/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=f705d646738ea8b1238e1c9a58c16532cc4d73a6", "patch": "@@ -22,7 +22,7 @@ use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{\n-    self, AdtKind, CanonicalUserType, DefIdTree, EarlyBinder, GenericParamDefKind, Ty, UserType,\n+    self, AdtKind, CanonicalUserType, DefIdTree, GenericParamDefKind, Ty, UserType,\n };\n use rustc_middle::ty::{GenericArgKind, InternalSubsts, SubstsRef, UserSelfTy, UserSubsts};\n use rustc_session::lint;\n@@ -333,23 +333,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    /// Basically whenever we are converting from a type scheme into\n-    /// the fn body space, we always want to normalize associated\n-    /// types as well. This function combines the two.\n-    // FIXME(compiler-errors): Remove this.\n-    fn instantiate_type_scheme<T>(&self, span: Span, substs: SubstsRef<'tcx>, value: T) -> T\n-    where\n-        T: TypeFoldable<'tcx>,\n-    {\n-        debug!(\"instantiate_type_scheme(value={:?}, substs={:?})\", value, substs);\n-        let value = EarlyBinder(value).subst(self.tcx, substs);\n-        let result = self.normalize(span, value);\n-        debug!(\"instantiate_type_scheme = {:?}\", result);\n-        result\n-    }\n-\n-    /// As `instantiate_type_scheme`, but for the bounds found in a\n-    /// generic type scheme.\n+    /// Instantiates and normalizes the bounds for a given item\n     pub(in super::super) fn instantiate_bounds(\n         &self,\n         span: Span,\n@@ -1161,10 +1145,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n         let def_id = res.def_id();\n \n-        // The things we are substituting into the type should not contain\n-        // escaping late-bound regions, and nor should the base type scheme.\n-        let ty = tcx.type_of(def_id);\n-\n         let arg_count = GenericArgCountResult {\n             explicit_late_bound,\n             correct: if infer_args_for_err.is_empty() {\n@@ -1287,8 +1267,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 },\n             )\n         });\n-        assert!(!substs.has_escaping_bound_vars());\n-        assert!(!ty.has_escaping_bound_vars());\n \n         // First, store the \"user substs\" for later.\n         self.write_user_type_annotation_from_substs(hir_id, def_id, substs, user_self_ty);\n@@ -1297,17 +1275,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Substitute the values for the type parameters into the type of\n         // the referenced item.\n-        let ty_substituted = self.instantiate_type_scheme(span, &substs, ty);\n+        let ty = tcx.bound_type_of(def_id);\n+        assert!(!substs.has_escaping_bound_vars());\n+        assert!(!ty.0.has_escaping_bound_vars());\n+        let ty_substituted = self.normalize(span, ty.subst(tcx, substs));\n \n         if let Some(UserSelfTy { impl_def_id, self_ty }) = user_self_ty {\n             // In the case of `Foo<T>::method` and `<Foo<T>>::method`, if `method`\n             // is inherent, there is no `Self` parameter; instead, the impl needs\n             // type parameters, which we can infer by unifying the provided `Self`\n             // with the substituted impl type.\n             // This also occurs for an enum variant on a type alias.\n-            let ty = tcx.type_of(impl_def_id);\n-\n-            let impl_ty = self.instantiate_type_scheme(span, &substs, ty);\n+            let impl_ty = self.normalize(span, tcx.bound_type_of(impl_def_id).subst(tcx, substs));\n             match self.at(&self.misc(span), self.param_env).eq(impl_ty, self_ty) {\n                 Ok(ok) => self.register_infer_ok_obligations(ok),\n                 Err(_) => {"}, {"sha": "274abf8177fdbb48fa4486dd294fab03dc90e524", "filename": "compiler/rustc_hir_typeck/src/method/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f705d646738ea8b1238e1c9a58c16532cc4d73a6/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f705d646738ea8b1238e1c9a58c16532cc4d73a6/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs?ref=f705d646738ea8b1238e1c9a58c16532cc4d73a6", "patch": "@@ -456,9 +456,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Instantiate late-bound regions and substitute the trait\n         // parameters into the method type to get the actual method type.\n         //\n-        // N.B., instantiate late-bound regions first so that\n-        // `instantiate_type_scheme` can normalize associated types that\n-        // may reference those regions.\n+        // N.B., instantiate late-bound regions before normalizing the\n+        // function signature so that normalization does not need to deal\n+        // with bound regions.\n         let fn_sig = tcx.bound_fn_sig(def_id);\n         let fn_sig = fn_sig.subst(self.tcx, substs);\n         let fn_sig = self.replace_bound_vars_with_fresh_vars(span, infer::FnCall, fn_sig);"}, {"sha": "54804d6a40d4515e3e88312eca9f492a7270076c", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f705d646738ea8b1238e1c9a58c16532cc4d73a6/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f705d646738ea8b1238e1c9a58c16532cc4d73a6/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=f705d646738ea8b1238e1c9a58c16532cc4d73a6", "patch": "@@ -3,11 +3,11 @@\n use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::mir;\n use crate::ty::layout::IntegerExt;\n+use crate::ty::query::TyCtxtAt;\n use crate::ty::{\n-    self, DefIdTree, FallibleTypeFolder, Ty, TyCtxt, TypeFoldable, TypeFolder,\n-    TypeSuperFoldable, TypeVisitable,\n+    self, DefIdTree, FallibleTypeFolder, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable,\n+    TypeVisitable,\n };\n-use crate::ty::query::TyCtxtAt;\n use crate::ty::{GenericArgKind, SubstsRef};\n use rustc_apfloat::Float as _;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};"}]}