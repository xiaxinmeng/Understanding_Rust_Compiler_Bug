{"sha": "8d9d07a1ca25d003b57b08f5930ae3e9a27cd37c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkOWQwN2ExY2EyNWQwMDNiNTdiMDhmNTkzMGFlM2U5YTI3Y2QzN2M=", "commit": {"author": {"name": "Theodore DeRego", "email": "tedsta@google.com", "date": "2016-11-30T22:20:44Z"}, "committer": {"name": "Theodore DeRego", "email": "tedsta@google.com", "date": "2016-11-30T22:20:44Z"}, "message": "Removed Option<ExitStatus> member from fuchsia Process struct. Destroy launchpads and close handles in Drop impls rather than manually", "tree": {"sha": "5deda16d5b8698cdb4eb97d0bf18ed84db72aeb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5deda16d5b8698cdb4eb97d0bf18ed84db72aeb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d9d07a1ca25d003b57b08f5930ae3e9a27cd37c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d9d07a1ca25d003b57b08f5930ae3e9a27cd37c", "html_url": "https://github.com/rust-lang/rust/commit/8d9d07a1ca25d003b57b08f5930ae3e9a27cd37c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d9d07a1ca25d003b57b08f5930ae3e9a27cd37c/comments", "author": {"login": "tedsta", "id": 1218723, "node_id": "MDQ6VXNlcjEyMTg3MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1218723?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tedsta", "html_url": "https://github.com/tedsta", "followers_url": "https://api.github.com/users/tedsta/followers", "following_url": "https://api.github.com/users/tedsta/following{/other_user}", "gists_url": "https://api.github.com/users/tedsta/gists{/gist_id}", "starred_url": "https://api.github.com/users/tedsta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tedsta/subscriptions", "organizations_url": "https://api.github.com/users/tedsta/orgs", "repos_url": "https://api.github.com/users/tedsta/repos", "events_url": "https://api.github.com/users/tedsta/events{/privacy}", "received_events_url": "https://api.github.com/users/tedsta/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tedsta", "id": 1218723, "node_id": "MDQ6VXNlcjEyMTg3MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1218723?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tedsta", "html_url": "https://github.com/tedsta", "followers_url": "https://api.github.com/users/tedsta/followers", "following_url": "https://api.github.com/users/tedsta/following{/other_user}", "gists_url": "https://api.github.com/users/tedsta/gists{/gist_id}", "starred_url": "https://api.github.com/users/tedsta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tedsta/subscriptions", "organizations_url": "https://api.github.com/users/tedsta/orgs", "repos_url": "https://api.github.com/users/tedsta/repos", "events_url": "https://api.github.com/users/tedsta/events{/privacy}", "received_events_url": "https://api.github.com/users/tedsta/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c1c48532f1f5ce726d1704d33366f8fb371cca0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c1c48532f1f5ce726d1704d33366f8fb371cca0", "html_url": "https://github.com/rust-lang/rust/commit/5c1c48532f1f5ce726d1704d33366f8fb371cca0"}], "stats": {"total": 77, "additions": 45, "deletions": 32}, "files": [{"sha": "20e077ccaca81c045cb6a94c11c5ff4f8b359a90", "filename": "src/libstd/sys/unix/magenta.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8d9d07a1ca25d003b57b08f5930ae3e9a27cd37c/src%2Flibstd%2Fsys%2Funix%2Fmagenta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9d07a1ca25d003b57b08f5930ae3e9a27cd37c/src%2Flibstd%2Fsys%2Funix%2Fmagenta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmagenta.rs?ref=8d9d07a1ca25d003b57b08f5930ae3e9a27cd37c", "patch": "@@ -42,6 +42,30 @@ pub const MX_INFO_PROCESS         : mx_object_info_topic_t = 3;\n \n pub const MX_HND_TYPE_JOB: u32 = 6;\n \n+// Safe wrapper around mx_handle_t\n+pub struct Handle {\n+    raw: mx_handle_t,\n+}\n+\n+impl Handle {\n+    pub fn new(raw: mx_handle_t) -> Handle {\n+        Handle {\n+            raw: raw,\n+        }\n+    }\n+\n+    pub fn raw(&self) -> mx_handle_t {\n+        self.raw\n+    }\n+}\n+\n+impl Drop for Handle {\n+    fn drop(&mut self) {\n+        use sys::mx_cvt;\n+        unsafe { mx_cvt(mx_handle_close(self.raw)).expect(\"Failed to close mx_handle_t\"); }\n+    }\n+}\n+\n // Common MX_INFO header\n #[derive(Default)]\n #[repr(C)]\n@@ -68,6 +92,8 @@ pub struct mx_info_process_t {\n }\n \n extern {\n+    pub fn mx_task_kill(handle: mx_handle_t) -> mx_status_t;\n+\n     pub fn mx_handle_close(handle: mx_handle_t) -> mx_status_t;\n \n     pub fn mx_handle_duplicate(handle: mx_handle_t, rights: mx_rights_t,"}, {"sha": "77340664b6a14895076d542e58e352812e64ee68", "filename": "src/libstd/sys/unix/process/process_fuchsia.rs", "status": "modified", "additions": 19, "deletions": 32, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8d9d07a1ca25d003b57b08f5930ae3e9a27cd37c/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9d07a1ca25d003b57b08f5930ae3e9a27cd37c/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs?ref=8d9d07a1ca25d003b57b08f5930ae3e9a27cd37c", "patch": "@@ -14,7 +14,7 @@ use mem;\n use ptr;\n \n use sys::mx_cvt;\n-use sys::magenta::{launchpad_t, mx_handle_t};\n+use sys::magenta::{Handle, launchpad_t, mx_handle_t};\n use sys::process::process_common::*;\n \n ////////////////////////////////////////////////////////////////////////////////\n@@ -33,7 +33,7 @@ impl Command {\n \n         let (launchpad, process_handle) = unsafe { self.do_exec(theirs)? };\n \n-        Ok((Process { launchpad: launchpad, handle: process_handle, status: None }, ours))\n+        Ok((Process { launchpad: launchpad, handle: Handle::new(process_handle) }, ours))\n     }\n \n     pub fn exec(&mut self, default: Stdio) -> io::Error {\n@@ -116,7 +116,7 @@ impl Command {\n \n         let process_handle = mx_cvt(launchpad_start(launchpad))?;\n \n-        // Successfully started the launchpad, so launchpad_destroy shouldn't get called\n+        // Successfully started the launchpad\n         mem::forget(launchpad_destructor);\n \n         Ok((launchpad, process_handle))\n@@ -129,62 +129,49 @@ impl Command {\n \n pub struct Process {\n     launchpad: *mut launchpad_t,\n-    handle: mx_handle_t,\n-    status: Option<ExitStatus>,\n+    handle: Handle,\n }\n \n impl Process {\n     pub fn id(&self) -> u32 {\n-        self.handle as u32\n+        self.handle.raw() as u32\n     }\n \n     pub fn kill(&mut self) -> io::Result<()> {\n         use sys::magenta::*;\n \n-        // If we've already waited on this process then the pid can be recycled\n-        // and used for another process, and we probably shouldn't be killing\n-        // random processes, so just return an error.\n-        if self.status.is_some() {\n-            Err(io::Error::new(io::ErrorKind::InvalidInput,\n-                           \"invalid argument: can't kill an exited process\"))\n-        } else {\n-            unsafe {\n-                mx_cvt(mx_handle_close(self.handle))?;\n-                launchpad_destroy(self.launchpad);\n-            }\n-            Ok(())\n-        }\n+        unsafe { mx_cvt(mx_task_kill(self.handle.raw()))?; }\n+\n+        Ok(())\n     }\n \n     pub fn wait(&mut self) -> io::Result<ExitStatus> {\n         use default::Default;\n         use sys::magenta::*;\n \n-        if let Some(status) = self.status {\n-            return Ok(status)\n-        }\n-\n         let mut proc_info: mx_info_process_t = Default::default();\n         let mut actual: mx_size_t = 0;\n         let mut avail: mx_size_t = 0;\n \n         unsafe {\n-            mx_cvt(mx_handle_wait_one(self.handle, MX_TASK_TERMINATED,\n+            mx_cvt(mx_handle_wait_one(self.handle.raw(), MX_TASK_TERMINATED,\n                                       MX_TIME_INFINITE, ptr::null_mut()))?;\n-            mx_cvt(mx_object_get_info(self.handle, MX_INFO_PROCESS,\n+            mx_cvt(mx_object_get_info(self.handle.raw(), MX_INFO_PROCESS,\n                                       &mut proc_info as *mut _ as *mut libc::c_void,\n                                       mem::size_of::<mx_info_process_t>(), &mut actual,\n                                       &mut avail))?;\n         }\n         if actual != 1 {\n-            return Err(io::Error::new(io::ErrorKind::InvalidInput,\n-                                  \"Failed to get exit status of process\"));\n-        }\n-        self.status = Some(ExitStatus::new(proc_info.rec.return_code));\n-        unsafe {\n-            mx_cvt(mx_handle_close(self.handle))?;\n-            launchpad_destroy(self.launchpad);\n+            return Err(io::Error::new(io::ErrorKind::InvalidData,\n+                                      \"Failed to get exit status of process\"));\n         }\n         Ok(ExitStatus::new(proc_info.rec.return_code))\n     }\n }\n+\n+impl Drop for Process {\n+    fn drop(&mut self) {\n+        use sys::magenta::launchpad_destroy;\n+        unsafe { launchpad_destroy(self.launchpad); }\n+    }\n+}"}]}