{"sha": "0e12a9d9ac6f69ddd72f2c028f668c0b55ac2eda", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMTJhOWQ5YWM2ZjY5ZGRkNzJmMmMwMjhmNjY4YzBiNTVhYzJlZGE=", "commit": {"author": {"name": "Eduardo S\u00e1nchez Mu\u00f1oz", "email": "esm@eduardosm.net", "date": "2020-05-03T18:04:52Z"}, "committer": {"name": "Eduardo S\u00e1nchez Mu\u00f1oz", "email": "esm@eduardosm.net", "date": "2020-05-03T19:44:32Z"}, "message": "Try to fix doc links in new `char` methods.", "tree": {"sha": "829bb71125ca8b3e61ea7384e3a1564efa74f506", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/829bb71125ca8b3e61ea7384e3a1564efa74f506"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e12a9d9ac6f69ddd72f2c028f668c0b55ac2eda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e12a9d9ac6f69ddd72f2c028f668c0b55ac2eda", "html_url": "https://github.com/rust-lang/rust/commit/0e12a9d9ac6f69ddd72f2c028f668c0b55ac2eda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e12a9d9ac6f69ddd72f2c028f668c0b55ac2eda/comments", "author": {"login": "eduardosm", "id": 761151, "node_id": "MDQ6VXNlcjc2MTE1MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/761151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eduardosm", "html_url": "https://github.com/eduardosm", "followers_url": "https://api.github.com/users/eduardosm/followers", "following_url": "https://api.github.com/users/eduardosm/following{/other_user}", "gists_url": "https://api.github.com/users/eduardosm/gists{/gist_id}", "starred_url": "https://api.github.com/users/eduardosm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eduardosm/subscriptions", "organizations_url": "https://api.github.com/users/eduardosm/orgs", "repos_url": "https://api.github.com/users/eduardosm/repos", "events_url": "https://api.github.com/users/eduardosm/events{/privacy}", "received_events_url": "https://api.github.com/users/eduardosm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eduardosm", "id": 761151, "node_id": "MDQ6VXNlcjc2MTE1MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/761151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eduardosm", "html_url": "https://github.com/eduardosm", "followers_url": "https://api.github.com/users/eduardosm/followers", "following_url": "https://api.github.com/users/eduardosm/following{/other_user}", "gists_url": "https://api.github.com/users/eduardosm/gists{/gist_id}", "starred_url": "https://api.github.com/users/eduardosm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eduardosm/subscriptions", "organizations_url": "https://api.github.com/users/eduardosm/orgs", "repos_url": "https://api.github.com/users/eduardosm/repos", "events_url": "https://api.github.com/users/eduardosm/events{/privacy}", "received_events_url": "https://api.github.com/users/eduardosm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68f89fcbf982d4b2a40d3175568bef194ee4f3b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/68f89fcbf982d4b2a40d3175568bef194ee4f3b7", "html_url": "https://github.com/rust-lang/rust/commit/68f89fcbf982d4b2a40d3175568bef194ee4f3b7"}], "stats": {"total": 29, "additions": 13, "deletions": 16}, "files": [{"sha": "35fae778437fa4289e7f672e62832441057efc50", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0e12a9d9ac6f69ddd72f2c028f668c0b55ac2eda/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e12a9d9ac6f69ddd72f2c028f668c0b55ac2eda/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=0e12a9d9ac6f69ddd72f2c028f668c0b55ac2eda", "patch": "@@ -11,11 +11,10 @@ use super::*;\n impl char {\n     /// The highest valid code point a `char` can have.\n     ///\n-    /// A [`char`] is a [Unicode Scalar Value], which means that it is a [Code\n+    /// A `char` is a [Unicode Scalar Value], which means that it is a [Code\n     /// Point], but only ones within a certain range. `MAX` is the highest valid\n     /// code point that's a valid [Unicode Scalar Value].\n     ///\n-    /// [`char`]: ../../std/primitive.char.html\n     /// [Unicode Scalar Value]: http://www.unicode.org/glossary/#unicode_scalar_value\n     /// [Code Point]: http://www.unicode.org/glossary/#code_point\n     #[unstable(feature = \"assoc_char_consts\", reason = \"recently added\", issue = \"71763\")]\n@@ -25,7 +24,7 @@ impl char {\n     /// decoding error.\n     ///\n     /// It can occur, for example, when giving ill-formed UTF-8 bytes to\n-    /// [`String::from_utf8_lossy`](../../std/string/struct.String.html#method.from_utf8_lossy).\n+    /// [`String::from_utf8_lossy`](string/struct.String.html#method.from_utf8_lossy).\n     #[unstable(feature = \"assoc_char_consts\", reason = \"recently added\", issue = \"71763\")]\n     pub const REPLACEMENT_CHARACTER: char = '\\u{FFFD}';\n \n@@ -96,7 +95,7 @@ impl char {\n \n     /// Converts a `u32` to a `char`.\n     ///\n-    /// Note that all [`char`]s are valid [`u32`]s, and can be cast to one with\n+    /// Note that all `char`s are valid [`u32`]s, and can be cast to one with\n     /// `as`:\n     ///\n     /// ```\n@@ -107,16 +106,15 @@ impl char {\n     /// ```\n     ///\n     /// However, the reverse is not true: not all valid [`u32`]s are valid\n-    /// [`char`]s. `from_u32()` will return `None` if the input is not a valid value\n-    /// for a [`char`].\n+    /// `char`s. `from_u32()` will return `None` if the input is not a valid value\n+    /// for a `char`.\n     ///\n-    /// [`char`]: ../../std/primitive.char.html\n-    /// [`u32`]: ../../std/primitive.u32.html\n+    /// [`u32`]: primitive.u32.html\n     ///\n     /// For an unsafe version of this function which ignores these checks, see\n     /// [`from_u32_unchecked`].\n     ///\n-    /// [`from_u32_unchecked`]: fn.from_u32_unchecked.html\n+    /// [`from_u32_unchecked`]: #method.from_u32_unchecked\n     ///\n     /// # Examples\n     ///\n@@ -130,7 +128,7 @@ impl char {\n     /// assert_eq!(Some('\u2764'), c);\n     /// ```\n     ///\n-    /// Returning `None` when the input is not a valid [`char`]:\n+    /// Returning `None` when the input is not a valid `char`:\n     ///\n     /// ```\n     /// use std::char;\n@@ -147,7 +145,7 @@ impl char {\n \n     /// Converts a `u32` to a `char`, ignoring validity.\n     ///\n-    /// Note that all [`char`]s are valid [`u32`]s, and can be cast to one with\n+    /// Note that all `char`s are valid [`u32`]s, and can be cast to one with\n     /// `as`:\n     ///\n     /// ```\n@@ -158,19 +156,18 @@ impl char {\n     /// ```\n     ///\n     /// However, the reverse is not true: not all valid [`u32`]s are valid\n-    /// [`char`]s. `from_u32_unchecked()` will ignore this, and blindly cast to\n-    /// [`char`], possibly creating an invalid one.\n+    /// `char`s. `from_u32_unchecked()` will ignore this, and blindly cast to\n+    /// `char`, possibly creating an invalid one.\n     ///\n-    /// [`char`]: ../../std/primitive.char.html\n-    /// [`u32`]: ../../std/primitive.u32.html\n+    /// [`u32`]: primitive.u32.html\n     ///\n     /// # Safety\n     ///\n     /// This function is unsafe, as it may construct invalid `char` values.\n     ///\n     /// For a safe version of this function, see the [`from_u32`] function.\n     ///\n-    /// [`from_u32`]: fn.from_u32.html\n+    /// [`from_u32`]: #method.from_u32\n     ///\n     /// # Examples\n     ///"}]}