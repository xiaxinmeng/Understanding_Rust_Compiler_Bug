{"sha": "af163579ed674c4b1a37f5c8d50bf348722db439", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMTYzNTc5ZWQ2NzRjNGIxYTM3ZjVjOGQ1MGJmMzQ4NzIyZGI0Mzk=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2013-10-20T06:34:01Z"}, "committer": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2013-10-23T01:22:19Z"}, "message": "libsyntax/librustc: Allow specifying mut on ~self.", "tree": {"sha": "415f973c647f0ffea0c361e451dd704b734abdeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/415f973c647f0ffea0c361e451dd704b734abdeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af163579ed674c4b1a37f5c8d50bf348722db439", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af163579ed674c4b1a37f5c8d50bf348722db439", "html_url": "https://github.com/rust-lang/rust/commit/af163579ed674c4b1a37f5c8d50bf348722db439", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af163579ed674c4b1a37f5c8d50bf348722db439/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5754848f8cd06bd3fc2bb084b5ca7bd41974e1b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5754848f8cd06bd3fc2bb084b5ca7bd41974e1b5", "html_url": "https://github.com/rust-lang/rust/commit/5754848f8cd06bd3fc2bb084b5ca7bd41974e1b5"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "10232730329427165e7221a768cc2228ea6727f0", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af163579ed674c4b1a37f5c8d50bf348722db439/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af163579ed674c4b1a37f5c8d50bf348722db439/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=af163579ed674c4b1a37f5c8d50bf348722db439", "patch": "@@ -977,7 +977,7 @@ fn get_explicit_self(item: ebml::Doc) -> ast::explicit_self_ {\n         's' => { return ast::sty_static; }\n         'v' => { return ast::sty_value(get_mutability(string[1])); }\n         '@' => { return ast::sty_box(get_mutability(string[1])); }\n-        '~' => { return ast::sty_uniq; }\n+        '~' => { return ast::sty_uniq(get_mutability(string[1])); }\n         '&' => {\n             // FIXME(#4846) expl. region\n             return ast::sty_region(None, get_mutability(string[1]));"}, {"sha": "bae0dcc2a5203e576c8a1f7cdfa9085749d0f3cb", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af163579ed674c4b1a37f5c8d50bf348722db439/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af163579ed674c4b1a37f5c8d50bf348722db439/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=af163579ed674c4b1a37f5c8d50bf348722db439", "patch": "@@ -675,8 +675,9 @@ fn encode_explicit_self(ebml_w: &mut writer::Encoder, explicit_self: ast::explic\n             ebml_w.writer.write(&[ '@' as u8 ]);\n             encode_mutability(ebml_w, m);\n         }\n-        sty_uniq => {\n+        sty_uniq(m) => {\n             ebml_w.writer.write(&[ '~' as u8 ]);\n+            encode_mutability(ebml_w, m);\n         }\n     }\n "}, {"sha": "71934c9f2a7ed93db87d3a2cd125009c32d4f400", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af163579ed674c4b1a37f5c8d50bf348722db439/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af163579ed674c4b1a37f5c8d50bf348722db439/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=af163579ed674c4b1a37f5c8d50bf348722db439", "patch": "@@ -392,7 +392,7 @@ fn visit_fn(v: &mut LivenessVisitor,\n     match *fk {\n         visit::fk_method(_, _, method) => {\n             match method.explicit_self.node {\n-                sty_value(_) | sty_region(*) | sty_box(_) | sty_uniq => {\n+                sty_value(_) | sty_region(*) | sty_box(_) | sty_uniq(_) => {\n                     fn_maps.add_variable(Arg(method.self_id,\n                                              special_idents::self_));\n                 }"}, {"sha": "ee36b807ac79c358311f26e9524d3efc4ca0853b", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af163579ed674c4b1a37f5c8d50bf348722db439/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af163579ed674c4b1a37f5c8d50bf348722db439/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=af163579ed674c4b1a37f5c8d50bf348722db439", "patch": "@@ -3801,7 +3801,7 @@ impl Resolver {\n                 }\n                 HasSelfBinding(self_node_id, explicit_self) => {\n                     let mutable = match explicit_self.node {\n-                        sty_value(m) if m == MutMutable => true,\n+                        sty_uniq(m) | sty_value(m) if m == MutMutable => true,\n                         _ => false\n                     };\n                     let def_like = DlDef(DefSelf(self_node_id, mutable));"}, {"sha": "dd0c6c12a69aacf3077fdf7f683562ef7ab956ae", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af163579ed674c4b1a37f5c8d50bf348722db439/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af163579ed674c4b1a37f5c8d50bf348722db439/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=af163579ed674c4b1a37f5c8d50bf348722db439", "patch": "@@ -689,7 +689,7 @@ fn ty_of_method_or_bare_fn<AC:AstConv,RS:RegionScope + Clone + 'static>(\n                                 ty::mt {ty: self_info.untransformed_self_ty,\n                                         mutbl: mutability}))\n             }\n-            ast::sty_uniq => {\n+            ast::sty_uniq(_) => {\n                 Some(ty::mk_uniq(this.tcx(),\n                                  ty::mt {ty: self_info.untransformed_self_ty,\n                                          mutbl: ast::MutImmutable}))"}, {"sha": "af1d5ce3cc608afc5b62ea8944b027566d468921", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af163579ed674c4b1a37f5c8d50bf348722db439/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af163579ed674c4b1a37f5c8d50bf348722db439/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=af163579ed674c4b1a37f5c8d50bf348722db439", "patch": "@@ -1236,7 +1236,7 @@ impl<'self> LookupContext<'self> {\n                 }\n             }\n \n-            sty_uniq => {\n+            sty_uniq(_) => {\n                 debug!(\"(is relevant?) explicit self is a unique pointer\");\n                 match ty::get(rcvr_ty).sty {\n                     ty::ty_uniq(mt) => {"}, {"sha": "dd1ad8263da860c2d1eb6d9864f6ffc2a8244855", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af163579ed674c4b1a37f5c8d50bf348722db439/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af163579ed674c4b1a37f5c8d50bf348722db439/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=af163579ed674c4b1a37f5c8d50bf348722db439", "patch": "@@ -389,7 +389,7 @@ impl Clean<SelfTy> for ast::explicit_self {\n         match self.node {\n             ast::sty_static => SelfStatic,\n             ast::sty_value(_) => SelfValue,\n-            ast::sty_uniq => SelfOwned,\n+            ast::sty_uniq(_) => SelfOwned,\n             ast::sty_region(lt, mt) => SelfBorrowed(lt.clean(), mt.clean()),\n             ast::sty_box(mt) => SelfManaged(mt.clean()),\n         }"}, {"sha": "372f1950c1de0047979beff35f0f4eb80999cb83", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af163579ed674c4b1a37f5c8d50bf348722db439/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af163579ed674c4b1a37f5c8d50bf348722db439/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=af163579ed674c4b1a37f5c8d50bf348722db439", "patch": "@@ -924,7 +924,7 @@ pub enum explicit_self_ {\n     sty_value(Mutability),                     // `self`\n     sty_region(Option<Lifetime>, Mutability),  // `&'lt self`\n     sty_box(Mutability),                       // `@self`\n-    sty_uniq                                   // `~self`\n+    sty_uniq(Mutability)                       // `~self`\n }\n \n pub type explicit_self = Spanned<explicit_self_>;"}, {"sha": "c60259304aef23cac3baea73919089ceff543ee4", "filename": "src/libsyntax/ext/deriving/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af163579ed674c4b1a37f5c8d50bf348722db439/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af163579ed674c4b1a37f5c8d50bf348722db439/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs?ref=af163579ed674c4b1a37f5c8d50bf348722db439", "patch": "@@ -246,7 +246,7 @@ pub fn get_explicit_self(cx: @ExtCtxt, span: Span, self_ptr: &Option<PtrTy>)\n             let self_ty = respan(\n                 span,\n                 match *ptr {\n-                    Send => ast::sty_uniq,\n+                    Send => ast::sty_uniq(ast::MutImmutable),\n                     Managed(mutbl) => ast::sty_box(mutbl),\n                     Borrowed(ref lt, mutbl) => {\n                         let lt = lt.map(|s| cx.lifetime(span, cx.ident_of(s)));"}, {"sha": "605e259cf0c2b2e89e18cada2eecd75b9b436296", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/af163579ed674c4b1a37f5c8d50bf348722db439/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af163579ed674c4b1a37f5c8d50bf348722db439/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=af163579ed674c4b1a37f5c8d50bf348722db439", "patch": "@@ -3520,7 +3520,7 @@ impl Parser {\n                     self.span_err(*self.last_span,\n                                   \"mutability declaration not allowed here\");\n                 }\n-                sty_uniq\n+                sty_uniq(MutImmutable)\n             }, self)\n           }\n           token::IDENT(*) if self.is_self_ident() => {\n@@ -3546,6 +3546,14 @@ impl Parser {\n             self.expect_self_ident();\n             sty_value(mutability)\n           }\n+          _ if self.token_is_mutability(self.token) &&\n+               self.look_ahead(1, |t| *t == token::TILDE) &&\n+               self.look_ahead(2, |t| token::is_keyword(keywords::Self, t)) => {\n+            let mutability = self.parse_mutability();\n+            self.bump();\n+            self.expect_self_ident();\n+            sty_uniq(mutability)\n+          }\n           _ => {\n             sty_static\n           }"}, {"sha": "0e330da31e6235915279d8a1b062ea05d9709c9d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/af163579ed674c4b1a37f5c8d50bf348722db439/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af163579ed674c4b1a37f5c8d50bf348722db439/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=af163579ed674c4b1a37f5c8d50bf348722db439", "patch": "@@ -1690,7 +1690,10 @@ pub fn print_explicit_self(s: @ps, explicit_self: ast::explicit_self_) -> bool {\n             print_mutability(s, m);\n             word(s.s, \"self\");\n         }\n-        ast::sty_uniq => { word(s.s, \"~self\"); }\n+        ast::sty_uniq(m) => {\n+            print_mutability(s, m);\n+            word(s.s, \"~self\");\n+        }\n         ast::sty_region(ref lt, m) => {\n             word(s.s, \"&\");\n             print_opt_lifetime(s, lt);"}]}