{"sha": "e6a6d980e086d88d7b87163a16834ceb72a1f9de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2YTZkOTgwZTA4NmQ4OGQ3Yjg3MTYzYTE2ODM0Y2ViNzJhMWY5ZGU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-10-13T15:37:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-10-13T15:37:57Z"}, "message": "Rollup merge of #45178 - Badel2:comma-after-struct, r=petrochenkov\n\nBetter error message for comma after base struct\n\n#41834\n\nThis adds a better error for commas after the base struct:\n```\nlet foo = Foo {\n    one: 111,\n    ..Foo::default(), // This comma is a syntax error\n};\n```\n\nThe current error is a generic `expected one of ...` which isn't beginner-friendly. My error looks like this:\n\n```\nerror: cannot use a comma after the base struct\n  --> tmp/example.rs:26:9\n   |\n26 |         ..Foo::default(),\n   |         ^^^^^^^^^^^^^^^^- help: remove this comma\n   |\n   = note: the base struct expansion must always be the last field\n```\n\nI even added a note for people who don't know why this isn't allowed.", "tree": {"sha": "ac1b0401e89e42fc36e13a41b75ddf196c38fbec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac1b0401e89e42fc36e13a41b75ddf196c38fbec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6a6d980e086d88d7b87163a16834ceb72a1f9de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6a6d980e086d88d7b87163a16834ceb72a1f9de", "html_url": "https://github.com/rust-lang/rust/commit/e6a6d980e086d88d7b87163a16834ceb72a1f9de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6a6d980e086d88d7b87163a16834ceb72a1f9de/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46d86d38479546c0356103b1589b47a284767a26", "url": "https://api.github.com/repos/rust-lang/rust/commits/46d86d38479546c0356103b1589b47a284767a26", "html_url": "https://github.com/rust-lang/rust/commit/46d86d38479546c0356103b1589b47a284767a26"}, {"sha": "72cfd209410da7f9dd09357a3361bb5b561dee33", "url": "https://api.github.com/repos/rust-lang/rust/commits/72cfd209410da7f9dd09357a3361bb5b561dee33", "html_url": "https://github.com/rust-lang/rust/commit/72cfd209410da7f9dd09357a3361bb5b561dee33"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "04e6cdcfe5820fe0197f73b0c46d8c5dbe8b8996", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e6a6d980e086d88d7b87163a16834ceb72a1f9de/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6a6d980e086d88d7b87163a16834ceb72a1f9de/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e6a6d980e086d88d7b87163a16834ceb72a1f9de", "patch": "@@ -2314,6 +2314,7 @@ impl<'a> Parser<'a> {\n \n         while self.token != token::CloseDelim(token::Brace) {\n             if self.eat(&token::DotDot) {\n+                let exp_span = self.prev_span;\n                 match self.parse_expr() {\n                     Ok(e) => {\n                         base = Some(e);\n@@ -2323,6 +2324,16 @@ impl<'a> Parser<'a> {\n                         self.recover_stmt();\n                     }\n                 }\n+                if self.token == token::Comma {\n+                    let mut err = self.sess.span_diagnostic.mut_span_err(\n+                        exp_span.to(self.prev_span),\n+                        \"cannot use a comma after the base struct\",\n+                    );\n+                    err.span_suggestion_short(self.span, \"remove this comma\", \"\".to_owned());\n+                    err.note(\"the base struct must always be the last field\");\n+                    err.emit();\n+                    self.recover_stmt();\n+                }\n                 break;\n             }\n "}, {"sha": "8ea62fef9fad193bc7013e50b4febbff7841245f", "filename": "src/test/ui/struct-field-init-syntax.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e6a6d980e086d88d7b87163a16834ceb72a1f9de/src%2Ftest%2Fui%2Fstruct-field-init-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6a6d980e086d88d7b87163a16834ceb72a1f9de/src%2Ftest%2Fui%2Fstruct-field-init-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstruct-field-init-syntax.rs?ref=e6a6d980e086d88d7b87163a16834ceb72a1f9de", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only\n+\n+// issue #41834\n+\n+fn main() {\n+    let foo = Foo {\n+        one: 111,\n+        ..Foo::default(),\n+        //~^ ERROR cannot use a comma after struct expansion\n+    };\n+\n+    let foo = Foo {\n+        ..Foo::default(),\n+        //~^ ERROR cannot use a comma after struct expansion\n+        one: 111,\n+    };\n+}"}, {"sha": "0bca3f83eb1a3ba40bbea0776fdd5c6d1e4d7265", "filename": "src/test/ui/struct-field-init-syntax.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e6a6d980e086d88d7b87163a16834ceb72a1f9de/src%2Ftest%2Fui%2Fstruct-field-init-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e6a6d980e086d88d7b87163a16834ceb72a1f9de/src%2Ftest%2Fui%2Fstruct-field-init-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstruct-field-init-syntax.stderr?ref=e6a6d980e086d88d7b87163a16834ceb72a1f9de", "patch": "@@ -0,0 +1,18 @@\n+error: cannot use a comma after the base struct\n+  --> $DIR/struct-field-init-syntax.rs:18:9\n+   |\n+18 |         ..Foo::default(),\n+   |         ^^^^^^^^^^^^^^^^- help: remove this comma\n+   |\n+   = note: the base struct must always be the last field\n+\n+error: cannot use a comma after the base struct\n+  --> $DIR/struct-field-init-syntax.rs:23:9\n+   |\n+23 |         ..Foo::default(),\n+   |         ^^^^^^^^^^^^^^^^- help: remove this comma\n+   |\n+   = note: the base struct must always be the last field\n+\n+error: aborting due to 2 previous errors\n+"}]}