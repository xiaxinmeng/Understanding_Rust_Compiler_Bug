{"sha": "1d42936b18d08ba414d9def35508d3baf2175c72", "node_id": "C_kwDOAAsO6NoAKDFkNDI5MzZiMThkMDhiYTQxNGQ5ZGVmMzU1MDhkM2JhZjIxNzVjNzI", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-27T11:15:06Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-27T11:19:04Z"}, "message": "Prefer doc comments over `//`-comments in compiler", "tree": {"sha": "51455a78c9b21656485c0f724385d966b0be7b77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51455a78c9b21656485c0f724385d966b0be7b77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d42936b18d08ba414d9def35508d3baf2175c72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d42936b18d08ba414d9def35508d3baf2175c72", "html_url": "https://github.com/rust-lang/rust/commit/1d42936b18d08ba414d9def35508d3baf2175c72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d42936b18d08ba414d9def35508d3baf2175c72/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e9eee68111ec742c3d60bb96078994c494a59fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e9eee68111ec742c3d60bb96078994c494a59fb", "html_url": "https://github.com/rust-lang/rust/commit/0e9eee68111ec742c3d60bb96078994c494a59fb"}], "stats": {"total": 787, "additions": 400, "deletions": 387}, "files": [{"sha": "8bb4442d1bb278f9460338a8d4f67ea8bc35032d", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -111,8 +111,8 @@ impl<CTX: rustc_span::HashStableContext> HashStable<CTX> for Path {\n }\n \n impl Path {\n-    // Convert a span and an identifier to the corresponding\n-    // one-segment path.\n+    /// Convert a span and an identifier to the corresponding\n+    /// one-segment path.\n     pub fn from_ident(ident: Ident) -> Path {\n         Path { segments: thin_vec![PathSegment::from_ident(ident)], span: ident.span, tokens: None }\n     }\n@@ -1283,7 +1283,7 @@ impl Expr {\n         )\n     }\n \n-    // To a first-order approximation, is this a pattern\n+    /// To a first-order approximation, is this a pattern?\n     pub fn is_approximately_pattern(&self) -> bool {\n         match &self.peel_parens().kind {\n             ExprKind::Box(_)"}, {"sha": "c948faeb358356b263587e00d448c54d2d9d512f", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -26,9 +26,9 @@ use thin_vec::thin_vec;\n pub struct MarkedAttrs(GrowableBitSet<AttrId>);\n \n impl MarkedAttrs {\n-    // We have no idea how many attributes there will be, so just\n-    // initiate the vectors with 0 bits. We'll grow them as necessary.\n     pub fn new() -> Self {\n+        // We have no idea how many attributes there will be, so just\n+        // initiate the vectors with 0 bits. We'll grow them as necessary.\n         MarkedAttrs(GrowableBitSet::new_empty())\n     }\n \n@@ -174,9 +174,11 @@ impl MetaItem {\n         self.ident().unwrap_or_else(Ident::empty).name\n     }\n \n-    // Example:\n-    //     #[attribute(name = \"value\")]\n-    //                 ^^^^^^^^^^^^^^\n+    /// ```text\n+    /// Example:\n+    ///     #[attribute(name = \"value\")]\n+    ///                 ^^^^^^^^^^^^^^\n+    /// ```\n     pub fn name_value_literal(&self) -> Option<&Lit> {\n         match &self.kind {\n             MetaItemKind::NameValue(v) => Some(v),"}, {"sha": "11def67c463658ebf4dd1a55603e009b8d8b17e1", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -725,10 +725,10 @@ pub fn visit_lazy_tts<T: MutVisitor>(lazy_tts: &mut Option<LazyAttrTokenStream>,\n     visit_lazy_tts_opt_mut(lazy_tts.as_mut(), vis);\n }\n \n+/// Applies ident visitor if it's an ident; applies other visits to interpolated nodes.\n+/// In practice the ident part is not actually used by specific visitors right now,\n+/// but there's a test below checking that it works.\n // No `noop_` prefix because there isn't a corresponding method in `MutVisitor`.\n-// Applies ident visitor if it's an ident; applies other visits to interpolated nodes.\n-// In practice the ident part is not actually used by specific visitors right now,\n-// but there's a test below checking that it works.\n pub fn visit_token<T: MutVisitor>(t: &mut Token, vis: &mut T) {\n     let Token { kind, span } = t;\n     match kind {"}, {"sha": "c0cc4e79a3d53161b3e985c45ba1daae69ee0efc", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -302,9 +302,9 @@ impl TokenKind {\n         Literal(Lit::new(kind, symbol, suffix))\n     }\n \n-    // An approximation to proc-macro-style single-character operators used by rustc parser.\n-    // If the operator token can be broken into two tokens, the first of which is single-character,\n-    // then this function performs that operation, otherwise it returns `None`.\n+    /// An approximation to proc-macro-style single-character operators used by rustc parser.\n+    /// If the operator token can be broken into two tokens, the first of which is single-character,\n+    /// then this function performs that operation, otherwise it returns `None`.\n     pub fn break_two_token_op(&self) -> Option<(TokenKind, TokenKind)> {\n         Some(match *self {\n             Le => (Lt, Eq),\n@@ -538,10 +538,10 @@ impl Token {\n         }\n     }\n \n-    // A convenience function for matching on identifiers during parsing.\n-    // Turns interpolated identifier (`$i: ident`) or lifetime (`$l: lifetime`) token\n-    // into the regular identifier or lifetime token it refers to,\n-    // otherwise returns the original token.\n+    /// A convenience function for matching on identifiers during parsing.\n+    /// Turns interpolated identifier (`$i: ident`) or lifetime (`$l: lifetime`) token\n+    /// into the regular identifier or lifetime token it refers to,\n+    /// otherwise returns the original token.\n     pub fn uninterpolate(&self) -> Cow<'_, Token> {\n         match &self.kind {\n             Interpolated(nt) => match **nt {\n@@ -621,7 +621,7 @@ impl Token {\n         false\n     }\n \n-    // Is the token an interpolated block (`$b:block`)?\n+    /// Is the token an interpolated block (`$b:block`)?\n     pub fn is_whole_block(&self) -> bool {\n         if let Interpolated(nt) = &self.kind && let NtBlock(..) = **nt {\n             return true;\n@@ -665,8 +665,8 @@ impl Token {\n         self.is_non_raw_ident_where(Ident::is_path_segment_keyword)\n     }\n \n-    // Returns true for reserved identifiers used internally for elided lifetimes,\n-    // unnamed method parameters, crate root module, error recovery etc.\n+    /// Returns true for reserved identifiers used internally for elided lifetimes,\n+    /// unnamed method parameters, crate root module, error recovery etc.\n     pub fn is_special_ident(&self) -> bool {\n         self.is_non_raw_ident_where(Ident::is_special)\n     }"}, {"sha": "58c6d397ea2706380e3839f23c4467ee3b47b712", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -86,12 +86,12 @@ impl TokenTree {\n         }\n     }\n \n-    // Create a `TokenTree::Token` with alone spacing.\n+    /// Create a `TokenTree::Token` with alone spacing.\n     pub fn token_alone(kind: TokenKind, span: Span) -> TokenTree {\n         TokenTree::Token(Token::new(kind, span), Spacing::Alone)\n     }\n \n-    // Create a `TokenTree::Token` with joint spacing.\n+    /// Create a `TokenTree::Token` with joint spacing.\n     pub fn token_joint(kind: TokenKind, span: Span) -> TokenTree {\n         TokenTree::Token(Token::new(kind, span), Spacing::Joint)\n     }\n@@ -413,17 +413,17 @@ impl TokenStream {\n         TokenStream(Lrc::new(self.0.iter().enumerate().map(|(i, tree)| f(i, tree)).collect()))\n     }\n \n-    // Create a token stream containing a single token with alone spacing.\n+    /// Create a token stream containing a single token with alone spacing.\n     pub fn token_alone(kind: TokenKind, span: Span) -> TokenStream {\n         TokenStream::new(vec![TokenTree::token_alone(kind, span)])\n     }\n \n-    // Create a token stream containing a single token with joint spacing.\n+    /// Create a token stream containing a single token with joint spacing.\n     pub fn token_joint(kind: TokenKind, span: Span) -> TokenStream {\n         TokenStream::new(vec![TokenTree::token_joint(kind, span)])\n     }\n \n-    // Create a token stream containing a single `Delimited`.\n+    /// Create a token stream containing a single `Delimited`.\n     pub fn delimited(span: DelimSpan, delim: Delimiter, tts: TokenStream) -> TokenStream {\n         TokenStream::new(vec![TokenTree::Delimited(span, delim, tts)])\n     }\n@@ -522,8 +522,8 @@ impl TokenStream {\n         }\n     }\n \n-    // Push `tt` onto the end of the stream, possibly gluing it to the last\n-    // token. Uses `make_mut` to maximize efficiency.\n+    /// Push `tt` onto the end of the stream, possibly gluing it to the last\n+    /// token. Uses `make_mut` to maximize efficiency.\n     pub fn push_tree(&mut self, tt: TokenTree) {\n         let vec_mut = Lrc::make_mut(&mut self.0);\n \n@@ -534,9 +534,9 @@ impl TokenStream {\n         }\n     }\n \n-    // Push `stream` onto the end of the stream, possibly gluing the first\n-    // token tree to the last token. (No other token trees will be glued.)\n-    // Uses `make_mut` to maximize efficiency.\n+    /// Push `stream` onto the end of the stream, possibly gluing the first\n+    /// token tree to the last token. (No other token trees will be glued.)\n+    /// Uses `make_mut` to maximize efficiency.\n     pub fn push_stream(&mut self, stream: TokenStream) {\n         let vec_mut = Lrc::make_mut(&mut self.0);\n "}, {"sha": "c3e0eccd3d4046a98fb52bb231f7eb1b018dd2c4", "filename": "compiler/rustc_ast_pretty/src/helpers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_ast_pretty%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_ast_pretty%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fhelpers.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -36,8 +36,8 @@ impl Printer {\n         self.nbsp()\n     }\n \n-    // Synthesizes a comment that was not textually present in the original\n-    // source file.\n+    /// Synthesizes a comment that was not textually present in the original\n+    /// source file.\n     pub fn synth_comment(&mut self, text: impl Into<Cow<'static, str>>) {\n         self.word(\"/*\");\n         self.space();"}, {"sha": "949d98f96ab6a8166802f4b76ba922c1e84ec2c4", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -58,10 +58,10 @@ impl<'a> State<'a> {\n         self.print_expr_cond_paren(expr, Self::cond_needs_par(expr))\n     }\n \n-    // Does `expr` need parentheses when printed in a condition position?\n-    //\n-    // These cases need parens due to the parse error observed in #26461: `if return {}`\n-    // parses as the erroneous construct `if (return {})`, not `if (return) {}`.\n+    /// Does `expr` need parentheses when printed in a condition position?\n+    ///\n+    /// These cases need parens due to the parse error observed in #26461: `if return {}`\n+    /// parses as the erroneous construct `if (return {})`, not `if (return) {}`.\n     pub(super) fn cond_needs_par(expr: &ast::Expr) -> bool {\n         match expr.kind {\n             ast::ExprKind::Break(..)"}, {"sha": "91c6bcb08a079db59feaaa82615000fcef6fc0a9", "filename": "compiler/rustc_attr/src/session_diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -41,7 +41,7 @@ pub(crate) struct IncorrectMetaItem {\n     pub span: Span,\n }\n \n-// Error code: E0541\n+/// Error code: E0541\n pub(crate) struct UnknownMetaItem<'a> {\n     pub span: Span,\n     pub item: String,\n@@ -200,7 +200,7 @@ pub(crate) struct InvalidReprHintNoValue {\n     pub name: String,\n }\n \n-// Error code: E0565\n+/// Error code: E0565\n pub(crate) struct UnsupportedLiteral {\n     pub span: Span,\n     pub reason: UnsupportedLiteralReason,"}, {"sha": "86c5d9cfa8121c6885338bd6e0e8765795c151bf", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -590,7 +590,7 @@ impl UseSpans<'_> {\n         }\n     }\n \n-    // Add a span label to the arguments of the closure, if it exists.\n+    /// Add a span label to the arguments of the closure, if it exists.\n     pub(super) fn args_span_label(self, err: &mut Diagnostic, message: impl Into<String>) {\n         if let UseSpans::ClosureUse { args_span, .. } = self {\n             err.span_label(args_span, message);\n@@ -628,7 +628,7 @@ impl UseSpans<'_> {\n         }\n     }\n \n-    // Add a span label to the use of the captured variable, if it exists.\n+    /// Add a span label to the use of the captured variable, if it exists.\n     pub(super) fn var_span_label(\n         self,\n         err: &mut Diagnostic,"}, {"sha": "4d87ecf5e44be224f7a692e233bac2b472d56d51", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -83,7 +83,7 @@ mod type_check;\n mod universal_regions;\n mod used_muts;\n \n-// A public API provided for the Rust compiler consumers.\n+/// A public API provided for the Rust compiler consumers.\n pub mod consumers;\n \n use borrow_set::{BorrowData, BorrowSet};"}, {"sha": "b344ab46adbde37ba6f064beb3dc68bf2e8bfa83", "filename": "compiler/rustc_borrowck/src/type_check/liveness/polonius.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fpolonius.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fpolonius.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fpolonius.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -121,8 +121,8 @@ pub(super) fn populate_access_facts<'a, 'tcx>(\n     }\n }\n \n-// For every potentially drop()-touched region `region` in `local`'s type\n-// (`kind`), emit a Polonius `use_of_var_derefs_origin(local, origin)` fact.\n+/// For every potentially drop()-touched region `region` in `local`'s type\n+/// (`kind`), emit a Polonius `use_of_var_derefs_origin(local, origin)` fact.\n pub(super) fn add_drop_of_var_derefs_origin<'tcx>(\n     typeck: &mut TypeChecker<'_, 'tcx>,\n     local: Local,"}, {"sha": "1467d4eaec06862d0d301c6db5addf09998d5112", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -300,12 +300,12 @@ struct TypeParameter {\n     ty: P<ast::Ty>,\n }\n \n-// The code snippets built up for derived code are sometimes used as blocks\n-// (e.g. in a function body) and sometimes used as expressions (e.g. in a match\n-// arm). This structure avoids committing to either form until necessary,\n-// avoiding the insertion of any unnecessary blocks.\n-//\n-// The statements come before the expression.\n+/// The code snippets built up for derived code are sometimes used as blocks\n+/// (e.g. in a function body) and sometimes used as expressions (e.g. in a match\n+/// arm). This structure avoids committing to either form until necessary,\n+/// avoiding the insertion of any unnecessary blocks.\n+///\n+/// The statements come before the expression.\n pub struct BlockOrExpr(Vec<ast::Stmt>, Option<P<Expr>>);\n \n impl BlockOrExpr {"}, {"sha": "b2a21611db7f9833088b5da57f76bfc4947a6c38", "filename": "compiler/rustc_builtin_macros/src/edition_panic.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_builtin_macros%2Fsrc%2Fedition_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_builtin_macros%2Fsrc%2Fedition_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fedition_panic.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -6,15 +6,15 @@ use rustc_span::edition::Edition;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n-// This expands to either\n-// - `$crate::panic::panic_2015!(...)` or\n-// - `$crate::panic::panic_2021!(...)`\n-// depending on the edition.\n-//\n-// This is used for both std::panic!() and core::panic!().\n-//\n-// `$crate` will refer to either the `std` or `core` crate depending on which\n-// one we're expanding from.\n+/// This expands to either\n+/// - `$crate::panic::panic_2015!(...)` or\n+/// - `$crate::panic::panic_2021!(...)`\n+/// depending on the edition.\n+///\n+/// This is used for both std::panic!() and core::panic!().\n+///\n+/// `$crate` will refer to either the `std` or `core` crate depending on which\n+/// one we're expanding from.\n pub fn expand_panic<'cx>(\n     cx: &'cx mut ExtCtxt<'_>,\n     sp: Span,\n@@ -24,10 +24,10 @@ pub fn expand_panic<'cx>(\n     expand(mac, cx, sp, tts)\n }\n \n-// This expands to either\n-// - `$crate::panic::unreachable_2015!(...)` or\n-// - `$crate::panic::unreachable_2021!(...)`\n-// depending on the edition.\n+/// This expands to either\n+/// - `$crate::panic::unreachable_2015!(...)` or\n+/// - `$crate::panic::unreachable_2021!(...)`\n+/// depending on the edition.\n pub fn expand_unreachable<'cx>(\n     cx: &'cx mut ExtCtxt<'_>,\n     sp: Span,"}, {"sha": "0b17e92efe936d94a3dfeaa334a09ac0d49a4e7f", "filename": "compiler/rustc_builtin_macros/src/source_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -164,7 +164,7 @@ pub fn expand_include<'cx>(\n     Box::new(ExpandResult { p, node_id: cx.current_expansion.lint_node_id })\n }\n \n-// include_str! : read the given file, insert it as a literal string expr\n+/// `include_str!`: read the given file, insert it as a literal string expr\n pub fn expand_include_str(\n     cx: &mut ExtCtxt<'_>,\n     sp: Span,"}, {"sha": "82baf1da28f2f2474c0e615493aa8f1bd6670945", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -13,13 +13,13 @@ use rustc_span::Span;\n use std::iter;\n use thin_vec::thin_vec;\n \n-// #[test_case] is used by custom test authors to mark tests\n-// When building for test, it needs to make the item public and gensym the name\n-// Otherwise, we'll omit the item. This behavior means that any item annotated\n-// with #[test_case] is never addressable.\n-//\n-// We mark item with an inert attribute \"rustc_test_marker\" which the test generation\n-// logic will pick up on.\n+/// #[test_case] is used by custom test authors to mark tests\n+/// When building for test, it needs to make the item public and gensym the name\n+/// Otherwise, we'll omit the item. This behavior means that any item annotated\n+/// with #[test_case] is never addressable.\n+///\n+/// We mark item with an inert attribute \"rustc_test_marker\" which the test generation\n+/// logic will pick up on.\n pub fn expand_test_case(\n     ecx: &mut ExtCtxt<'_>,\n     attr_sp: Span,"}, {"sha": "3269f62b105b97dd947ad697016ba3e737c08f1f", "filename": "compiler/rustc_builtin_macros/src/test_harness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -34,8 +34,8 @@ struct TestCtxt<'a> {\n     test_runner: Option<ast::Path>,\n }\n \n-// Traverse the crate, collecting all the test functions, eliding any\n-// existing main functions, and synthesizing a main test harness\n+/// Traverse the crate, collecting all the test functions, eliding any\n+/// existing main functions, and synthesizing a main test harness\n pub fn inject(sess: &Session, resolver: &mut dyn ResolverExpand, krate: &mut ast::Crate) {\n     let span_diagnostic = sess.diagnostic();\n     let panic_strategy = sess.panic_strategy();"}, {"sha": "34746ff6b6645c11bdda409d0af1f627908e65a0", "filename": "compiler/rustc_codegen_cranelift/src/value_and_place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -108,8 +108,8 @@ impl<'tcx> CValue<'tcx> {\n     }\n \n     // FIXME remove\n-    // Forces the data value of a dyn* value to the stack and returns a pointer to it as well as the\n-    // vtable pointer.\n+    /// Forces the data value of a dyn* value to the stack and returns a pointer to it as well as the\n+    /// vtable pointer.\n     pub(crate) fn dyn_star_force_data_on_stack(\n         self,\n         fx: &mut FunctionCx<'_, '_, 'tcx>,"}, {"sha": "837708aeb0ea9a42aa4a36aced6b7a19a40bddd3", "filename": "compiler/rustc_codegen_gcc/src/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcontext.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -88,9 +88,9 @@ pub struct CodegenCx<'gcc, 'tcx> {\n     pub vtables: RefCell<FxHashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), RValue<'gcc>>>,\n \n     // TODO(antoyo): improve the SSA API to not require those.\n-    // Mapping from function pointer type to indexes of on stack parameters.\n+    /// Mapping from function pointer type to indexes of on stack parameters.\n     pub on_stack_params: RefCell<FxHashMap<FunctionPtrType<'gcc>, FxHashSet<usize>>>,\n-    // Mapping from function to indexes of on stack parameters.\n+    /// Mapping from function to indexes of on stack parameters.\n     pub on_stack_function_params: RefCell<FxHashMap<Function<'gcc>, FxHashSet<usize>>>,\n \n     /// Cache of emitted const globals (value -> global)"}, {"sha": "ace15cfb024775d285510d9f3a035910bc4b0140", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -37,7 +37,7 @@ const VAR_ALIGN_BYTES: usize = 8;\n \n /// A context object for maintaining all state needed by the coverageinfo module.\n pub struct CrateCoverageContext<'ll, 'tcx> {\n-    // Coverage data for each instrumented function identified by DefId.\n+    /// Coverage data for each instrumented function identified by DefId.\n     pub(crate) function_coverage_map: RefCell<FxHashMap<Instance<'tcx>, FunctionCoverage<'tcx>>>,\n     pub(crate) pgo_func_name_var_map: RefCell<FxHashMap<Instance<'tcx>, &'ll llvm::Value>>,\n }"}, {"sha": "c14e1656291e87710f422f5abee59bb1eb13a072", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -35,7 +35,7 @@ pub enum LLVMRustResult {\n pub struct LLVMRustCOFFShortExport {\n     pub name: *const c_char,\n     pub ordinal_present: bool,\n-    // value of `ordinal` only important when `ordinal_present` is true\n+    /// value of `ordinal` only important when `ordinal_present` is true\n     pub ordinal: u16,\n }\n "}, {"sha": "bc3a94a4027062fcfd1ad09cf46663894e4bc441", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -194,8 +194,8 @@ pub fn to_llvm_features<'a>(sess: &Session, s: &'a str) -> SmallVec<[&'a str; 2]\n     }\n }\n \n-// Given a map from target_features to whether they are enabled or disabled,\n-// ensure only valid combinations are allowed.\n+/// Given a map from target_features to whether they are enabled or disabled,\n+/// ensure only valid combinations are allowed.\n pub fn check_tied_features(\n     sess: &Session,\n     features: &FxHashMap<&str, bool>,\n@@ -213,8 +213,8 @@ pub fn check_tied_features(\n     return None;\n }\n \n-// Used to generate cfg variables and apply features\n-// Must express features in the way Rust understands them\n+/// Used to generate cfg variables and apply features\n+/// Must express features in the way Rust understands them\n pub fn target_features(sess: &Session, allow_unstable: bool) -> Vec<Symbol> {\n     let target_machine = create_informational_target_machine(sess);\n     let mut features: Vec<Symbol> = supported_target_features(sess)"}, {"sha": "5772b7e1d812afa3c2566ecb3fd31e042e078f80", "filename": "compiler/rustc_codegen_llvm/src/type_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -238,7 +238,7 @@ impl Type {\n         unsafe { llvm::LLVMInt8TypeInContext(llcx) }\n     }\n \n-    // Creates an integer type with the given number of bits, e.g., i24\n+    /// Creates an integer type with the given number of bits, e.g., i24\n     pub fn ix_llcx(llcx: &llvm::Context, num_bits: u64) -> &Type {\n         unsafe { llvm::LLVMIntTypeInContext(llcx, num_bits as c_uint) }\n     }"}, {"sha": "39cd4a35f17781c2d0c11940a4683abaadd15688", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -1179,7 +1179,7 @@ pub fn ignored_for_lto(sess: &Session, info: &CrateInfo, cnum: CrateNum) -> bool\n         && (info.compiler_builtins == Some(cnum) || info.is_no_builtins.contains(&cnum))\n }\n \n-// This functions tries to determine the appropriate linker (and corresponding LinkerFlavor) to use\n+/// This functions tries to determine the appropriate linker (and corresponding LinkerFlavor) to use\n pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n     fn infer_from(\n         sess: &Session,"}, {"sha": "ff0c1ac4916f23f0e1651bb8a885949ac6297361", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -34,9 +34,9 @@ pub fn disable_localization(linker: &mut Command) {\n     linker.env(\"VSLANG\", \"1033\");\n }\n \n-// The third parameter is for env vars, used on windows to set up the\n-// path for MSVC to find its DLLs, and gcc to find its bundled\n-// toolchain\n+/// The third parameter is for env vars, used on windows to set up the\n+/// path for MSVC to find its DLLs, and gcc to find its bundled\n+/// toolchain\n pub fn get_linker<'a>(\n     sess: &'a Session,\n     linker: &Path,"}, {"sha": "51c5c375d51913fabe116d1a52b6245224ab0006", "filename": "compiler/rustc_codegen_ssa/src/back/metadata.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -191,38 +191,38 @@ pub enum MetadataPosition {\n     Last,\n }\n \n-// For rlibs we \"pack\" rustc metadata into a dummy object file.\n-//\n-// Historically it was needed because rustc linked rlibs as whole-archive in some cases.\n-// In that case linkers try to include all files located in an archive, so if metadata is stored\n-// in an archive then it needs to be of a form that the linker is able to process.\n-// Now it's not clear whether metadata still needs to be wrapped into an object file or not.\n-//\n-// Note, though, that we don't actually want this metadata to show up in any\n-// final output of the compiler. Instead this is purely for rustc's own\n-// metadata tracking purposes.\n-//\n-// With the above in mind, each \"flavor\" of object format gets special\n-// handling here depending on the target:\n-//\n-// * MachO - macos-like targets will insert the metadata into a section that\n-//   is sort of fake dwarf debug info. Inspecting the source of the macos\n-//   linker this causes these sections to be skipped automatically because\n-//   it's not in an allowlist of otherwise well known dwarf section names to\n-//   go into the final artifact.\n-//\n-// * WebAssembly - we actually don't have any container format for this\n-//   target. WebAssembly doesn't support the `dylib` crate type anyway so\n-//   there's no need for us to support this at this time. Consequently the\n-//   metadata bytes are simply stored as-is into an rlib.\n-//\n-// * COFF - Windows-like targets create an object with a section that has\n-//   the `IMAGE_SCN_LNK_REMOVE` flag set which ensures that if the linker\n-//   ever sees the section it doesn't process it and it's removed.\n-//\n-// * ELF - All other targets are similar to Windows in that there's a\n-//   `SHF_EXCLUDE` flag we can set on sections in an object file to get\n-//   automatically removed from the final output.\n+/// For rlibs we \"pack\" rustc metadata into a dummy object file.\n+///\n+/// Historically it was needed because rustc linked rlibs as whole-archive in some cases.\n+/// In that case linkers try to include all files located in an archive, so if metadata is stored\n+/// in an archive then it needs to be of a form that the linker is able to process.\n+/// Now it's not clear whether metadata still needs to be wrapped into an object file or not.\n+///\n+/// Note, though, that we don't actually want this metadata to show up in any\n+/// final output of the compiler. Instead this is purely for rustc's own\n+/// metadata tracking purposes.\n+///\n+/// With the above in mind, each \"flavor\" of object format gets special\n+/// handling here depending on the target:\n+///\n+/// * MachO - macos-like targets will insert the metadata into a section that\n+///   is sort of fake dwarf debug info. Inspecting the source of the macos\n+///   linker this causes these sections to be skipped automatically because\n+///   it's not in an allowlist of otherwise well known dwarf section names to\n+///   go into the final artifact.\n+///\n+/// * WebAssembly - we actually don't have any container format for this\n+///   target. WebAssembly doesn't support the `dylib` crate type anyway so\n+///   there's no need for us to support this at this time. Consequently the\n+///   metadata bytes are simply stored as-is into an rlib.\n+///\n+/// * COFF - Windows-like targets create an object with a section that has\n+///   the `IMAGE_SCN_LNK_REMOVE` flag set which ensures that if the linker\n+///   ever sees the section it doesn't process it and it's removed.\n+///\n+/// * ELF - All other targets are similar to Windows in that there's a\n+///   `SHF_EXCLUDE` flag we can set on sections in an object file to get\n+///   automatically removed from the final output.\n pub fn create_wrapper_file(\n     sess: &Session,\n     section_name: Vec<u8>,"}, {"sha": "12fca64968aac2adad6a60ceedcc2d7285b51880", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -340,20 +340,20 @@ pub struct CodegenContext<B: WriteBackendMethods> {\n     pub split_debuginfo: rustc_target::spec::SplitDebuginfo,\n     pub split_dwarf_kind: rustc_session::config::SplitDwarfKind,\n \n-    // Number of cgus excluding the allocator/metadata modules\n+    /// Number of cgus excluding the allocator/metadata modules\n     pub total_cgus: usize,\n-    // Handler to use for diagnostics produced during codegen.\n+    /// Handler to use for diagnostics produced during codegen.\n     pub diag_emitter: SharedEmitter,\n-    // LLVM optimizations for which we want to print remarks.\n+    /// LLVM optimizations for which we want to print remarks.\n     pub remark: Passes,\n-    // Worker thread number\n+    /// Worker thread number\n     pub worker: usize,\n-    // The incremental compilation session directory, or None if we are not\n-    // compiling incrementally\n+    /// The incremental compilation session directory, or None if we are not\n+    /// compiling incrementally\n     pub incr_comp_session_dir: Option<PathBuf>,\n-    // Used to update CGU re-use information during the thinlto phase.\n+    /// Used to update CGU re-use information during the thinlto phase.\n     pub cgu_reuse_tracker: CguReuseTracker,\n-    // Channel back to the main control thread to send messages to\n+    /// Channel back to the main control thread to send messages to\n     pub coordinator_send: Sender<Box<dyn Any + Send>>,\n }\n \n@@ -756,7 +756,7 @@ fn execute_work_item<B: ExtraBackendMethods>(\n     }\n }\n \n-// Actual LTO type we end up choosing based on multiple factors.\n+/// Actual LTO type we end up choosing based on multiple factors.\n pub enum ComputedLtoType {\n     No,\n     Thin,"}, {"sha": "b004fbf85a97f8bcbefa345dd17da85503dd777b", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -1,4 +1,4 @@\n-// Type Names for Debug Info.\n+//! Type Names for Debug Info.\n \n // Notes on targeting MSVC:\n // In general, MSVC's debugger attempts to parse all arguments as C++ expressions,\n@@ -26,10 +26,10 @@ use std::fmt::Write;\n \n use crate::debuginfo::wants_c_like_enum_debuginfo;\n \n-// Compute the name of the type as it should be stored in debuginfo. Does not do\n-// any caching, i.e., calling the function twice with the same type will also do\n-// the work twice. The `qualified` parameter only affects the first level of the\n-// type name, further levels (i.e., type parameters) are always fully qualified.\n+/// Compute the name of the type as it should be stored in debuginfo. Does not do\n+/// any caching, i.e., calling the function twice with the same type will also do\n+/// the work twice. The `qualified` parameter only affects the first level of the\n+/// type name, further levels (i.e., type parameters) are always fully qualified.\n pub fn compute_debuginfo_type_name<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     t: Ty<'tcx>,"}, {"sha": "34a5b638d7ebaa7cc4e7bbf1b52b03a6a34242a5", "filename": "compiler/rustc_codegen_ssa/src/mir/operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -40,10 +40,10 @@ pub enum OperandValue<V> {\n /// instead.\n #[derive(Copy, Clone)]\n pub struct OperandRef<'tcx, V> {\n-    // The value.\n+    /// The value.\n     pub val: OperandValue<V>,\n \n-    // The layout of value, based on its Rust type.\n+    /// The layout of value, based on its Rust type.\n     pub layout: TyAndLayout<'tcx>,\n }\n "}, {"sha": "88d25be6bd861d66f8a0788b5a9243ebdf7b105b", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -417,8 +417,8 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     }\n }\n \n-// A lot of the flexibility above is just needed for `Miri`, but all \"compile-time\" machines\n-// (CTFE and ConstProp) use the same instance.  Here, we share that code.\n+/// A lot of the flexibility above is just needed for `Miri`, but all \"compile-time\" machines\n+/// (CTFE and ConstProp) use the same instance.  Here, we share that code.\n pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n     type Provenance = AllocId;\n     type ProvenanceExtra = ();"}, {"sha": "2ffd73eef3ef84e41bcd788570d7549cb6d30350", "filename": "compiler/rustc_const_eval/src/interpret/projection.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fprojection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fprojection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fprojection.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -206,8 +206,8 @@ where\n         }\n     }\n \n-    // Iterates over all fields of an array. Much more efficient than doing the\n-    // same by repeatedly calling `operand_index`.\n+    /// Iterates over all fields of an array. Much more efficient than doing the\n+    /// same by repeatedly calling `operand_index`.\n     pub fn operand_array_fields<'a>(\n         &self,\n         base: &'a OpTy<'tcx, Prov>,"}, {"sha": "1a10851a9f9013d92923c9347fac038fd14a7e17", "filename": "compiler/rustc_const_eval/src/interpret/visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvisitor.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -324,7 +324,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueMut<'mir, 'tcx, M>\n \n macro_rules! make_value_visitor {\n     ($visitor_trait:ident, $value_trait:ident, $($mutability:ident)?) => {\n-        // How to traverse a value and what to do when we are at the leaves.\n+        /// How to traverse a value and what to do when we are at the leaves.\n         pub trait $visitor_trait<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>>: Sized {\n             type V: $value_trait<'mir, 'tcx, M>;\n "}, {"sha": "655ec345ed3777197a771a038839b9b01ef6861a", "filename": "compiler/rustc_const_eval/src/transform/check_consts/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -75,14 +75,14 @@ pub fn rustc_allow_const_fn_unstable(\n     attr::rustc_allow_const_fn_unstable(&tcx.sess, attrs).any(|name| name == feature_gate)\n }\n \n-// Returns `true` if the given `const fn` is \"const-stable\".\n-//\n-// Panics if the given `DefId` does not refer to a `const fn`.\n-//\n-// Const-stability is only relevant for `const fn` within a `staged_api` crate. Only \"const-stable\"\n-// functions can be called in a const-context by users of the stable compiler. \"const-stable\"\n-// functions are subject to more stringent restrictions than \"const-unstable\" functions: They\n-// cannot use unstable features and can only call other \"const-stable\" functions.\n+/// Returns `true` if the given `const fn` is \"const-stable\".\n+///\n+/// Panics if the given `DefId` does not refer to a `const fn`.\n+///\n+/// Const-stability is only relevant for `const fn` within a `staged_api` crate. Only \"const-stable\"\n+/// functions can be called in a const-context by users of the stable compiler. \"const-stable\"\n+/// functions are subject to more stringent restrictions than \"const-unstable\" functions: They\n+/// cannot use unstable features and can only call other \"const-stable\" functions.\n pub fn is_const_stable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     // A default body in a `#[const_trait]` is not const-stable because const\n     // trait fns currently cannot be const-stable. We shouldn't"}, {"sha": "27fb95dcd4031ddf4bffe1f38fd92b9a82fdd981", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -686,7 +686,7 @@ impl<'tcx> NonConstOp<'tcx> for ThreadLocalAccess {\n     }\n }\n \n-// Types that cannot appear in the signature or locals of a `const fn`.\n+/// Types that cannot appear in the signature or locals of a `const fn`.\n pub mod ty {\n     use super::*;\n "}, {"sha": "c43de3368c62fd190ec6e242e287803f9a2b1d78", "filename": "compiler/rustc_const_eval/src/util/aggregate.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Faggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Faggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Faggregate.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -9,10 +9,11 @@ use std::iter::TrustedLen;\n /// Expand `lhs = Rvalue::Aggregate(kind, operands)` into assignments to the fields.\n ///\n /// Produces something like\n-///\n+/// ```ignore (ilustrative)\n /// (lhs as Variant).field0 = arg0;     // We only have a downcast if this is an enum\n /// (lhs as Variant).field1 = arg1;\n /// discriminant(lhs) = variant_index;  // If lhs is an enum or generator.\n+/// ```\n pub fn expand_aggregate<'tcx>(\n     orig_lhs: Place<'tcx>,\n     operands: impl Iterator<Item = (Operand<'tcx>, Ty<'tcx>)> + TrustedLen,"}, {"sha": "380fbd732d505ef7e784a47213520b9e0f9f9186", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -1336,8 +1336,8 @@ mod signal_handler {\n         }\n     }\n \n-    // When an error signal (such as SIGABRT or SIGSEGV) is delivered to the\n-    // process, print a stack trace and then exit.\n+    /// When an error signal (such as SIGABRT or SIGSEGV) is delivered to the\n+    /// process, print a stack trace and then exit.\n     pub(super) fn install() {\n         unsafe {\n             const ALT_STACK_SIZE: usize = libc::MINSIGSTKSZ + 64 * 1024;"}, {"sha": "9fe5d588b1f5da117c54516eeb33c6110577ab89", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -242,8 +242,8 @@ pub enum ExpandResult<T, U> {\n     Retry(U),\n }\n \n-// `meta_item` is the attribute, and `item` is the item being modified.\n pub trait MultiItemModifier {\n+    /// `meta_item` is the attribute, and `item` is the item being modified.\n     fn expand(\n         &self,\n         ecx: &mut ExtCtxt<'_>,"}, {"sha": "234cf1b315a23f4ddd939ec58b8d4c6125cd628d", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -193,7 +193,7 @@ impl<'a> ExtCtxt<'a> {\n         self.stmt_local(local, sp)\n     }\n \n-    // Generates `let _: Type;`, which is usually used for type assertions.\n+    /// Generates `let _: Type;`, which is usually used for type assertions.\n     pub fn stmt_let_type_only(&self, span: Span, ty: P<ast::Ty>) -> ast::Stmt {\n         let local = P(ast::Local {\n             pat: self.pat_wild(span),"}, {"sha": "2510795c2e3ed5073c6aa07a2331b06c87f02e17", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -200,7 +200,7 @@ fn get_features(\n     features\n }\n \n-// `cfg_attr`-process the crate's attributes and compute the crate's features.\n+/// `cfg_attr`-process the crate's attributes and compute the crate's features.\n pub fn features(\n     sess: &Session,\n     mut krate: ast::Crate,"}, {"sha": "3e98b024c73b9ec746375578f3e0e11ac859d364", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -401,7 +401,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         krate\n     }\n \n-    // Recursively expand all macro invocations in this AST fragment.\n+    /// Recursively expand all macro invocations in this AST fragment.\n     pub fn fully_expand_fragment(&mut self, input_fragment: AstFragment) -> AstFragment {\n         let orig_expansion_data = self.cx.current_expansion.clone();\n         let orig_force_mode = self.cx.force_mode;\n@@ -1931,9 +1931,12 @@ pub struct ExpansionConfig<'feat> {\n     pub features: Option<&'feat Features>,\n     pub recursion_limit: Limit,\n     pub trace_mac: bool,\n-    pub should_test: bool,          // If false, strip `#[test]` nodes\n-    pub span_debug: bool,           // If true, use verbose debugging for `proc_macro::Span`\n-    pub proc_macro_backtrace: bool, // If true, show backtraces for proc-macro panics\n+    /// If false, strip `#[test]` nodes\n+    pub should_test: bool,\n+    /// If true, use verbose debugging for `proc_macro::Span`\n+    pub span_debug: bool,\n+    /// If true, show backtraces for proc-macro panics\n+    pub proc_macro_backtrace: bool,\n }\n \n impl<'feat> ExpansionConfig<'feat> {"}, {"sha": "042e65fc4dff407ae6b30a358f8d330fee51ab31", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -969,8 +969,8 @@ pub struct Pat<'hir> {\n     pub hir_id: HirId,\n     pub kind: PatKind<'hir>,\n     pub span: Span,\n-    // Whether to use default binding modes.\n-    // At present, this is false only for destructuring assignment.\n+    /// Whether to use default binding modes.\n+    /// At present, this is false only for destructuring assignment.\n     pub default_binding_modes: bool,\n }\n \n@@ -1078,7 +1078,7 @@ impl fmt::Display for RangeEnd {\n pub struct DotDotPos(u32);\n \n impl DotDotPos {\n-    // Panics if n >= u32::MAX.\n+    /// Panics if n >= u32::MAX.\n     pub fn new(n: Option<usize>) -> Self {\n         match n {\n             Some(n) => {\n@@ -1682,10 +1682,10 @@ impl Expr<'_> {\n         }\n     }\n \n-    // Whether this looks like a place expr, without checking for deref\n-    // adjustments.\n-    // This will return `true` in some potentially surprising cases such as\n-    // `CONSTANT.field`.\n+    /// Whether this looks like a place expr, without checking for deref\n+    /// adjustments.\n+    /// This will return `true` in some potentially surprising cases such as\n+    /// `CONSTANT.field`.\n     pub fn is_syntactic_place_expr(&self) -> bool {\n         self.is_place_expr(|_| true)\n     }\n@@ -1826,7 +1826,7 @@ impl Expr<'_> {\n         }\n     }\n \n-    // To a first-order approximation, is this a pattern\n+    /// To a first-order approximation, is this a pattern?\n     pub fn is_approximately_pattern(&self) -> bool {\n         match &self.kind {\n             ExprKind::Box(_)\n@@ -2148,11 +2148,11 @@ impl fmt::Display for LoopIdError {\n \n #[derive(Copy, Clone, Encodable, Debug, HashStable_Generic)]\n pub struct Destination {\n-    // This is `Some(_)` iff there is an explicit user-specified `label\n+    /// This is `Some(_)` iff there is an explicit user-specified 'label\n     pub label: Option<Label>,\n \n-    // These errors are caught and then reported during the diagnostics pass in\n-    // librustc_passes/loops.rs\n+    /// These errors are caught and then reported during the diagnostics pass in\n+    /// `librustc_passes/loops.rs`\n     pub target_id: Result<HirId, LoopIdError>,\n }\n \n@@ -2323,7 +2323,7 @@ pub enum ImplItemKind<'hir> {\n     Type(&'hir Ty<'hir>),\n }\n \n-// The name of the associated type for `Fn` return types.\n+/// The name of the associated type for `Fn` return types.\n pub const FN_OUTPUT_NAME: Symbol = sym::Output;\n \n /// Bind a type to an associated type (i.e., `A = Foo`).\n@@ -3247,7 +3247,7 @@ pub enum ForeignItemKind<'hir> {\n /// A variable captured by a closure.\n #[derive(Debug, Copy, Clone, Encodable, HashStable_Generic)]\n pub struct Upvar {\n-    // First span where it is accessed (there can be multiple).\n+    /// First span where it is accessed (there can be multiple).\n     pub span: Span,\n }\n "}, {"sha": "4d858bc7f61e8f706a11eee12016045ce83c01f3", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -850,7 +850,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             .is_some()\n     }\n \n-    // Sets `implicitly_sized` to true on `Bounds` if necessary\n+    /// Sets `implicitly_sized` to true on `Bounds` if necessary\n     pub(crate) fn add_implicitly_sized<'hir>(\n         &self,\n         bounds: &mut Bounds<'hir>,\n@@ -2390,7 +2390,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         path_segs\n     }\n \n-    // Check a type `Path` and convert it to a `Ty`.\n+    /// Check a type `Path` and convert it to a `Ty`.\n     pub fn res_to_ty(\n         &self,\n         opt_self_ty: Option<Ty<'tcx>>,"}, {"sha": "d6e3ddb0a613964238574c6fbc46261d8a00f620", "filename": "compiler/rustc_hir_analysis/src/check/dropck.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -233,9 +233,10 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n     result\n }\n \n-// This is an implementation of the TypeRelation trait with the\n-// aim of simply comparing for equality (without side-effects).\n-// It is not intended to be used anywhere else other than here.\n+/// This is an implementation of the [`TypeRelation`] trait with the\n+/// aim of simply comparing for equality (without side-effects).\n+///\n+/// It is not intended to be used anywhere else other than here.\n pub(crate) struct SimpleEqRelation<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,"}, {"sha": "3b286bb9c93cfd09bc2e38a9a90d31b8de8b95d9", "filename": "compiler/rustc_hir_analysis/src/variance/terms.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fterms.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -42,22 +42,22 @@ impl<'a> fmt::Debug for VarianceTerm<'a> {\n     }\n }\n \n-// The first pass over the crate simply builds up the set of inferreds.\n+/// The first pass over the crate simply builds up the set of inferreds.\n \n pub struct TermsContext<'a, 'tcx> {\n     pub tcx: TyCtxt<'tcx>,\n     pub arena: &'a DroplessArena,\n \n-    // For marker types, UnsafeCell, and other lang items where\n-    // variance is hardcoded, records the item-id and the hardcoded\n-    // variance.\n+    /// For marker types, `UnsafeCell`, and other lang items where\n+    /// variance is hardcoded, records the item-id and the hardcoded\n+    /// variance.\n     pub lang_items: Vec<(LocalDefId, Vec<ty::Variance>)>,\n \n-    // Maps from the node id of an item to the first inferred index\n-    // used for its type & region parameters.\n+    /// Maps from the node id of an item to the first inferred index\n+    /// used for its type & region parameters.\n     pub inferred_starts: LocalDefIdMap<InferredIndex>,\n \n-    // Maps from an InferredIndex to the term for that variable.\n+    /// Maps from an InferredIndex to the term for that variable.\n     pub inferred_terms: Vec<VarianceTermPtr<'a>>,\n }\n "}, {"sha": "24184bdbf5cdcd74b125f185243919086905910f", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -57,8 +57,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.note_internal_mutation_in_method(err, expr, expected, expr_ty);\n     }\n \n-    // Requires that the two types unify, and prints an error message if\n-    // they don't.\n+    /// Requires that the two types unify, and prints an error message if\n+    /// they don't.\n     pub fn demand_suptype(&self, sp: Span, expected: Ty<'tcx>, actual: Ty<'tcx>) {\n         if let Some(mut e) = self.demand_suptype_diag(sp, expected, actual) {\n             e.emit();"}, {"sha": "4f086cf597d8826dd4a4b512f73a6ae9d661f4ab", "filename": "compiler/rustc_hir_typeck/src/expectation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpectation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpectation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpectation.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -79,9 +79,9 @@ impl<'a, 'tcx> Expectation<'tcx> {\n         }\n     }\n \n-    // Resolves `expected` by a single level if it is a variable. If\n-    // there is no expected type or resolution is not possible (e.g.,\n-    // no constraints yet present), just returns `self`.\n+    /// Resolves `expected` by a single level if it is a variable. If\n+    /// there is no expected type or resolution is not possible (e.g.,\n+    /// no constraints yet present), just returns `self`.\n     fn resolve(self, fcx: &FnCtxt<'a, 'tcx>) -> Expectation<'tcx> {\n         match self {\n             NoExpectation => NoExpectation,"}, {"sha": "5166f1fd1c743fe74e0a0637c0c63beeded13243", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -914,8 +914,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     // Check if an expression `original_expr_id` comes from the condition of a while loop,\n-    // as opposed from the body of a while loop, which we can naively check by iterating\n-    // parents until we find a loop...\n+    /// as opposed from the body of a while loop, which we can naively check by iterating\n+    /// parents until we find a loop...\n     pub(super) fn comes_from_while_condition(\n         &self,\n         original_expr_id: HirId,"}, {"sha": "e5c9f439af3e07fdf3b00ceacac1da1a0dd074f2", "filename": "compiler/rustc_hir_typeck/src/inherited.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -38,19 +38,19 @@ pub struct Inherited<'tcx> {\n \n     pub(super) fulfillment_cx: RefCell<Box<dyn TraitEngine<'tcx>>>,\n \n-    // Some additional `Sized` obligations badly affect type inference.\n-    // These obligations are added in a later stage of typeck.\n-    // Removing these may also cause additional complications, see #101066.\n+    /// Some additional `Sized` obligations badly affect type inference.\n+    /// These obligations are added in a later stage of typeck.\n+    /// Removing these may also cause additional complications, see #101066.\n     pub(super) deferred_sized_obligations:\n         RefCell<Vec<(Ty<'tcx>, Span, traits::ObligationCauseCode<'tcx>)>>,\n \n-    // When we process a call like `c()` where `c` is a closure type,\n-    // we may not have decided yet whether `c` is a `Fn`, `FnMut`, or\n-    // `FnOnce` closure. In that case, we defer full resolution of the\n-    // call until upvar inference can kick in and make the\n-    // decision. We keep these deferred resolutions grouped by the\n-    // def-id of the closure, so that once we decide, we can easily go\n-    // back and process them.\n+    /// When we process a call like `c()` where `c` is a closure type,\n+    /// we may not have decided yet whether `c` is a `Fn`, `FnMut`, or\n+    /// `FnOnce` closure. In that case, we defer full resolution of the\n+    /// call until upvar inference can kick in and make the\n+    /// decision. We keep these deferred resolutions grouped by the\n+    /// def-id of the closure, so that once we decide, we can easily go\n+    /// back and process them.\n     pub(super) deferred_call_resolutions: RefCell<LocalDefIdMap<Vec<DeferredCallResolution<'tcx>>>>,\n \n     pub(super) deferred_cast_checks: RefCell<Vec<super::cast::CastCheck<'tcx>>>,"}, {"sha": "a8acaf6597aaba3064b261dc005ac964ee241598", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -438,9 +438,9 @@ fn expect_associated_value(tcx: TyCtxt<'_>, item: &NestedMetaItem) -> Symbol {\n     }\n }\n \n-// A visitor that collects all #[rustc_clean] attributes from\n-// the HIR. It is used to verify that we really ran checks for all annotated\n-// nodes.\n+/// A visitor that collects all `#[rustc_clean]` attributes from\n+/// the HIR. It is used to verify that we really ran checks for all annotated\n+/// nodes.\n pub struct FindAllAttrs<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     found_attrs: Vec<&'tcx Attribute>,"}, {"sha": "2402a7ea7c741be7bae0441777b0345129f6f521", "filename": "compiler/rustc_infer/src/infer/free_regions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffree_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffree_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffree_regions.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -29,10 +29,10 @@ impl<'a, 'tcx> RegionRelations<'a, 'tcx> {\n \n #[derive(Clone, Debug)]\n pub struct FreeRegionMap<'tcx> {\n-    // Stores the relation `a < b`, where `a` and `b` are regions.\n-    //\n-    // Invariant: only free regions like `'x` or `'static` are stored\n-    // in this relation, not scopes.\n+    /// Stores the relation `a < b`, where `a` and `b` are regions.\n+    ///\n+    /// Invariant: only free regions like `'x` or `'static` are stored\n+    /// in this relation, not scopes.\n     pub(crate) relation: TransitiveRelation<Region<'tcx>>,\n }\n "}, {"sha": "524f7a39ebbfb8f72077340dd534b13d8aafa330", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -410,19 +410,19 @@ impl<'tcx> InferCtxt<'tcx> {\n     }\n }\n \n-// Visitor that requires that (almost) all regions in the type visited outlive\n-// `least_region`. We cannot use `push_outlives_components` because regions in\n-// closure signatures are not included in their outlives components. We need to\n-// ensure all regions outlive the given bound so that we don't end up with,\n-// say, `ReVar` appearing in a return type and causing ICEs when other\n-// functions end up with region constraints involving regions from other\n-// functions.\n-//\n-// We also cannot use `for_each_free_region` because for closures it includes\n-// the regions parameters from the enclosing item.\n-//\n-// We ignore any type parameters because impl trait values are assumed to\n-// capture all the in-scope type parameters.\n+/// Visitor that requires that (almost) all regions in the type visited outlive\n+/// `least_region`. We cannot use `push_outlives_components` because regions in\n+/// closure signatures are not included in their outlives components. We need to\n+/// ensure all regions outlive the given bound so that we don't end up with,\n+/// say, `ReVar` appearing in a return type and causing ICEs when other\n+/// functions end up with region constraints involving regions from other\n+/// functions.\n+///\n+/// We also cannot use `for_each_free_region` because for closures it includes\n+/// the regions parameters from the enclosing item.\n+///\n+/// We ignore any type parameters because impl trait values are assumed to\n+/// capture all the in-scope type parameters.\n pub struct ConstrainOpaqueTypeRegionVisitor<'tcx, OP: FnMut(ty::Region<'tcx>)> {\n     pub tcx: TyCtxt<'tcx>,\n     pub op: OP,"}, {"sha": "c146902d594afd3410c42de40e99f6f926045207", "filename": "compiler/rustc_infer/src/infer/opaque_types/table.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types%2Ftable.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -9,10 +9,10 @@ use super::{OpaqueTypeDecl, OpaqueTypeMap};\n \n #[derive(Default, Debug, Clone)]\n pub struct OpaqueTypeStorage<'tcx> {\n-    // Opaque types found in explicit return types and their\n-    // associated fresh inference variable. Writeback resolves these\n-    // variables to get the concrete type, which can be used to\n-    // 'de-opaque' OpaqueTypeDecl, after typeck is done with all functions.\n+    /// Opaque types found in explicit return types and their\n+    /// associated fresh inference variable. Writeback resolves these\n+    /// variables to get the concrete type, which can be used to\n+    /// 'de-opaque' OpaqueTypeDecl, after typeck is done with all functions.\n     pub opaque_types: OpaqueTypeMap<'tcx>,\n }\n "}, {"sha": "e6a0d7e60ca772b10cd67b0630dbdc50724a4907", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -206,7 +206,7 @@ impl LintStore {\n         self.late_module_passes.push(Box::new(pass));\n     }\n \n-    // Helper method for register_early/late_pass\n+    /// Helper method for register_early/late_pass\n     pub fn register_lints(&mut self, lints: &[&'static Lint]) {\n         for lint in lints {\n             self.lints.push(lint);"}, {"sha": "af7b0793a957413b38283188befe5def41f1e234", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -67,10 +67,10 @@ impl std::ops::Deref for MetadataBlob {\n     }\n }\n \n-// A map from external crate numbers (as decoded from some crate file) to\n-// local crate numbers (as generated during this session). Each external\n-// crate may refer to types in other external crates, and each has their\n-// own crate numbers.\n+/// A map from external crate numbers (as decoded from some crate file) to\n+/// local crate numbers (as generated during this session). Each external\n+/// crate may refer to types in other external crates, and each has their\n+/// own crate numbers.\n pub(crate) type CrateNumMap = IndexVec<CrateNum, CrateNum>;\n \n pub(crate) struct CrateMetadata {"}, {"sha": "a5050d721bbb85159ba6db6a3576c182fce39b12", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -20,8 +20,8 @@ use super::{\n /// Represents the result of const evaluation via the `eval_to_allocation` query.\n #[derive(Copy, Clone, HashStable, TyEncodable, TyDecodable, Debug, Hash, Eq, PartialEq)]\n pub struct ConstAlloc<'tcx> {\n-    // the value lives here, at offset 0, and that allocation definitely is an `AllocKind::Memory`\n-    // (so you can use `AllocMap::unwrap_memory`).\n+    /// The value lives here, at offset 0, and that allocation definitely is an `AllocKind::Memory`\n+    /// (so you can use `AllocMap::unwrap_memory`).\n     pub alloc_id: AllocId,\n     pub ty: Ty<'tcx>,\n }"}, {"sha": "143435cb2a1f47bcbf11929aa4aba4a4b6e9b1da", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -471,7 +471,7 @@ pub struct ImplDerivedObligationCause<'tcx> {\n }\n \n impl<'tcx> ObligationCauseCode<'tcx> {\n-    // Return the base obligation, ignoring derived obligations.\n+    /// Returns the base obligation, ignoring derived obligations.\n     pub fn peel_derives(&self) -> &Self {\n         let mut base_cause = self;\n         while let Some((parent_code, _)) = base_cause.parent() {"}, {"sha": "921ffead521a076d0dd21ef3a830825d035f4152", "filename": "compiler/rustc_middle/src/ty/closure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -15,8 +15,8 @@ use super::{Ty, TyCtxt};\n \n use self::BorrowKind::*;\n \n-// Captures are represented using fields inside a structure.\n-// This represents accessing self in the closure structure\n+/// Captures are represented using fields inside a structure.\n+/// This represents accessing self in the closure structure\n pub const CAPTURE_STRUCT_LOCAL: mir::Local = mir::Local::from_u32(1);\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, HashStable)]\n@@ -91,7 +91,7 @@ pub enum ClosureKind {\n }\n \n impl<'tcx> ClosureKind {\n-    // This is the initial value used when doing upvar inference.\n+    /// This is the initial value used when doing upvar inference.\n     pub const LATTICE_BOTTOM: ClosureKind = ClosureKind::Fn;\n \n     /// Returns `true` if a type that impls this closure kind"}, {"sha": "bf30a403d9b945e6f0c134dfdfc47b7aeedf8932", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -713,22 +713,24 @@ impl<'tcx> TypeckResults<'tcx> {\n         self.node_substs.get(&id.local_id).cloned()\n     }\n \n-    // Returns the type of a pattern as a monotype. Like @expr_ty, this function\n-    // doesn't provide type parameter substitutions.\n+    /// Returns the type of a pattern as a monotype. Like [`expr_ty`], this function\n+    /// doesn't provide type parameter substitutions.\n+    ///\n+    /// [`expr_ty`]: TypeckResults::expr_ty\n     pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {\n         self.node_type(pat.hir_id)\n     }\n \n-    // Returns the type of an expression as a monotype.\n-    //\n-    // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in\n-    // some cases, we insert `Adjustment` annotations such as auto-deref or\n-    // auto-ref.  The type returned by this function does not consider such\n-    // adjustments.  See `expr_ty_adjusted()` instead.\n-    //\n-    // NB (2): This type doesn't provide type parameter substitutions; e.g., if you\n-    // ask for the type of \"id\" in \"id(3)\", it will return \"fn(&isize) -> isize\"\n-    // instead of \"fn(ty) -> T with T = isize\".\n+    /// Returns the type of an expression as a monotype.\n+    ///\n+    /// NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in\n+    /// some cases, we insert `Adjustment` annotations such as auto-deref or\n+    /// auto-ref.  The type returned by this function does not consider such\n+    /// adjustments.  See `expr_ty_adjusted()` instead.\n+    ///\n+    /// NB (2): This type doesn't provide type parameter substitutions; e.g., if you\n+    /// ask for the type of `id` in `id(3)`, it will return `fn(&isize) -> isize`\n+    /// instead of `fn(ty) -> T with T = isize`.\n     pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {\n         self.node_type(expr.hir_id)\n     }\n@@ -995,15 +997,15 @@ impl<'tcx> CommonConsts<'tcx> {\n     }\n }\n \n-// This struct contains information regarding the `ReFree(FreeRegion)` corresponding to a lifetime\n-// conflict.\n+/// This struct contains information regarding the `ReFree(FreeRegion)` corresponding to a lifetime\n+/// conflict.\n #[derive(Debug)]\n pub struct FreeRegionInfo {\n-    // `LocalDefId` corresponding to FreeRegion\n+    /// `LocalDefId` corresponding to FreeRegion\n     pub def_id: LocalDefId,\n-    // the bound region corresponding to FreeRegion\n+    /// the bound region corresponding to FreeRegion\n     pub boundregion: ty::BoundRegionKind,\n-    // checks if bound region is in Impl Item\n+    /// checks if bound region is in Impl Item\n     pub is_impl_item: bool,\n }\n \n@@ -1660,7 +1662,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    // Checks if the bound region is in Impl Item.\n+    /// Checks if the bound region is in Impl Item.\n     pub fn is_bound_region_in_impl_item(self, suitable_region_binding_scope: LocalDefId) -> bool {\n         let container_id = self.parent(suitable_region_binding_scope.to_def_id());\n         if self.impl_trait_ref(container_id).is_some() {"}, {"sha": "046a2660a1f6dd51b45d23616ef786ee69767ca8", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -6,7 +6,7 @@ use std::slice;\n pub struct FlagComputation {\n     pub flags: TypeFlags,\n \n-    // see `Ty::outer_exclusive_binder` for details\n+    /// see `Ty::outer_exclusive_binder` for details\n     pub outer_exclusive_binder: ty::DebruijnIndex,\n }\n "}, {"sha": "94dc029e6c0c4b88cbdef70f0b52034148cebd96", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -412,7 +412,7 @@ impl Visibility<DefId> {\n         self.map_id(|id| id.expect_local())\n     }\n \n-    // Returns `true` if this item is visible anywhere in the local crate.\n+    /// Returns `true` if this item is visible anywhere in the local crate.\n     pub fn is_visible_locally(self) -> bool {\n         match self {\n             Visibility::Public => true,\n@@ -924,9 +924,10 @@ impl<'tcx> PolyTraitPredicate<'tcx> {\n     }\n }\n \n+/// `A: B`\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]\n #[derive(HashStable, TypeFoldable, TypeVisitable, Lift)]\n-pub struct OutlivesPredicate<A, B>(pub A, pub B); // `A: B`\n+pub struct OutlivesPredicate<A, B>(pub A, pub B);\n pub type RegionOutlivesPredicate<'tcx> = OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>;\n pub type TypeOutlivesPredicate<'tcx> = OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>;\n pub type PolyRegionOutlivesPredicate<'tcx> = ty::Binder<'tcx, RegionOutlivesPredicate<'tcx>>;"}, {"sha": "ea959be2e4efd308a87364cbc6f86ed6db44c1ed", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -2241,7 +2241,7 @@ impl<'tcx> Ty<'tcx> {\n         }\n     }\n \n-    // If `self` is a primitive, return its [`Symbol`].\n+    /// If `self` is a primitive, return its [`Symbol`].\n     pub fn primitive_symbol(self) -> Option<Symbol> {\n         match self.kind() {\n             ty::Bool => Some(sym::bool),"}, {"sha": "b38a5fbf20f5b26d17ab4b44b9b678236ec482aa", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -211,7 +211,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n }\n \n-// Query provider for `trait_impls_of`.\n+/// Query provider for `trait_impls_of`.\n pub(super) fn trait_impls_of_provider(tcx: TyCtxt<'_>, trait_id: DefId) -> TraitImpls {\n     let mut impls = TraitImpls::default();\n \n@@ -255,7 +255,7 @@ pub(super) fn trait_impls_of_provider(tcx: TyCtxt<'_>, trait_id: DefId) -> Trait\n     impls\n }\n \n-// Query provider for `incoherent_impls`.\n+/// Query provider for `incoherent_impls`.\n pub(super) fn incoherent_impls_provider(tcx: TyCtxt<'_>, simp: SimplifiedType) -> &[DefId] {\n     let mut impls = Vec::new();\n "}, {"sha": "47c1ce8075674acd461a2cd8d90da3ca73dd76e4", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -1208,11 +1208,11 @@ pub fn is_trivially_const_drop<'tcx>(ty: Ty<'tcx>) -> bool {\n     }\n }\n \n-// Does the equivalent of\n-// ```\n-// let v = self.iter().map(|p| p.fold_with(folder)).collect::<SmallVec<[_; 8]>>();\n-// folder.tcx().intern_*(&v)\n-// ```\n+/// Does the equivalent of\n+/// ```ignore (ilustrative)\n+/// let v = self.iter().map(|p| p.fold_with(folder)).collect::<SmallVec<[_; 8]>>();\n+/// folder.tcx().intern_*(&v)\n+/// ```\n pub fn fold_list<'tcx, F, T>(\n     list: &'tcx ty::List<T>,\n     folder: &mut F,"}, {"sha": "d33401f07645e1db6f4a97a0ea570b341d0a04a4", "filename": "compiler/rustc_mir_build/src/build/expr/category.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fcategory.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -2,35 +2,35 @@ use rustc_middle::thir::*;\n \n #[derive(Debug, PartialEq)]\n pub(crate) enum Category {\n-    // An assignable memory location like `x`, `x.f`, `foo()[3]`, that\n-    // sort of thing. Something that could appear on the LHS of an `=`\n-    // sign.\n+    /// An assignable memory location like `x`, `x.f`, `foo()[3]`, that\n+    /// sort of thing. Something that could appear on the LHS of an `=`\n+    /// sign.\n     Place,\n \n-    // A literal like `23` or `\"foo\"`. Does not include constant\n-    // expressions like `3 + 5`.\n+    /// A literal like `23` or `\"foo\"`. Does not include constant\n+    /// expressions like `3 + 5`.\n     Constant,\n \n-    // Something that generates a new value at runtime, like `x + y`\n-    // or `foo()`.\n+    /// Something that generates a new value at runtime, like `x + y`\n+    /// or `foo()`.\n     Rvalue(RvalueFunc),\n }\n \n-// Rvalues fall into different \"styles\" that will determine which fn\n-// is best suited to generate them.\n+/// Rvalues fall into different \"styles\" that will determine which fn\n+/// is best suited to generate them.\n #[derive(Debug, PartialEq)]\n pub(crate) enum RvalueFunc {\n-    // Best generated by `into`. This is generally exprs that\n-    // cause branching, like `match`, but also includes calls.\n+    /// Best generated by `into`. This is generally exprs that\n+    /// cause branching, like `match`, but also includes calls.\n     Into,\n \n-    // Best generated by `as_rvalue`. This is usually the case.\n+    /// Best generated by `as_rvalue`. This is usually the case.\n     AsRvalue,\n }\n \n-/// Determines the category for a given expression. Note that scope\n-/// and paren expressions have no category.\n impl Category {\n+    /// Determines the category for a given expression. Note that scope\n+    /// and paren expressions have no category.\n     pub(crate) fn of(ek: &ExprKind<'_>) -> Option<Category> {\n         match *ek {\n             ExprKind::Scope { .. } => None,"}, {"sha": "baeb2718cae46414636eeafabd1bd414b639b5bd", "filename": "compiler/rustc_mir_build/src/build/misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmisc.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -34,8 +34,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         Operand::Constant(constant)\n     }\n \n-    // Returns a zero literal operand for the appropriate type, works for\n-    // bool, char and integers.\n+    /// Returns a zero literal operand for the appropriate type, works for\n+    /// bool, char and integers.\n     pub(crate) fn zero_literal(&mut self, span: Span, ty: Ty<'tcx>) -> Operand<'tcx> {\n         let literal = ConstantKind::from_bits(self.tcx, 0, ty::ParamEnv::empty().and(ty));\n "}, {"sha": "5ddae5f5300f664e5190d5ebfbf1286228274d7f", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -443,8 +443,9 @@ impl<'tcx> Scopes<'tcx> {\n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     // Adding and removing scopes\n     // ==========================\n-    //  Start a breakable scope, which tracks where `continue`, `break` and\n-    //  `return` should branch to.\n+\n+    ///  Start a breakable scope, which tracks where `continue`, `break` and\n+    ///  `return` should branch to.\n     pub(crate) fn in_breakable_scope<F>(\n         &mut self,\n         loop_block: Option<BasicBlock>,\n@@ -799,6 +800,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n     // Finding scopes\n     // ==============\n+\n     /// Returns the scope that we should use as the lifetime of an\n     /// operand. Basically, an operand must live until it is consumed.\n     /// This is similar to, but not quite the same as, the temporary\n@@ -824,6 +826,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n     // Scheduling drops\n     // ================\n+\n     pub(crate) fn schedule_drop_storage_and_value(\n         &mut self,\n         span: Span,\n@@ -996,6 +999,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n     // Other\n     // =====\n+\n     /// Returns the [DropIdx] for the innermost drop if the function unwound at\n     /// this point. The `DropIdx` will be created if it doesn't already exist.\n     fn diverge_cleanup(&mut self) -> DropIdx {"}, {"sha": "9b2260f68251abeaafe883d76d192ee94e34d9cc", "filename": "compiler/rustc_mir_transform/src/add_moves_for_packed_drops.rs", "status": "modified", "additions": 30, "deletions": 31, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_moves_for_packed_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_moves_for_packed_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_moves_for_packed_drops.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -5,37 +5,36 @@ use crate::util;\n use crate::MirPass;\n use rustc_middle::mir::patch::MirPatch;\n \n-// This pass moves values being dropped that are within a packed\n-// struct to a separate local before dropping them, to ensure that\n-// they are dropped from an aligned address.\n-//\n-// For example, if we have something like\n-// ```Rust\n-//     #[repr(packed)]\n-//     struct Foo {\n-//         dealign: u8,\n-//         data: Vec<u8>\n-//     }\n-//\n-//     let foo = ...;\n-// ```\n-//\n-// We want to call `drop_in_place::<Vec<u8>>` on `data` from an aligned\n-// address. This means we can't simply drop `foo.data` directly, because\n-// its address is not aligned.\n-//\n-// Instead, we move `foo.data` to a local and drop that:\n-// ```\n-//     storage.live(drop_temp)\n-//     drop_temp = foo.data;\n-//     drop(drop_temp) -> next\n-// next:\n-//     storage.dead(drop_temp)\n-// ```\n-//\n-// The storage instructions are required to avoid stack space\n-// blowup.\n-\n+/// This pass moves values being dropped that are within a packed\n+/// struct to a separate local before dropping them, to ensure that\n+/// they are dropped from an aligned address.\n+///\n+/// For example, if we have something like\n+/// ```ignore (ilustrative)\n+/// #[repr(packed)]\n+/// struct Foo {\n+///     dealign: u8,\n+///     data: Vec<u8>\n+/// }\n+///\n+/// let foo = ...;\n+/// ```\n+///\n+/// We want to call `drop_in_place::<Vec<u8>>` on `data` from an aligned\n+/// address. This means we can't simply drop `foo.data` directly, because\n+/// its address is not aligned.\n+///\n+/// Instead, we move `foo.data` to a local and drop that:\n+/// ```ignore (ilustrative)\n+///     storage.live(drop_temp)\n+///     drop_temp = foo.data;\n+///     drop(drop_temp) -> next\n+/// next:\n+///     storage.dead(drop_temp)\n+/// ```\n+///\n+/// The storage instructions are required to avoid stack space\n+/// blowup.\n pub struct AddMovesForPackedDrops;\n \n impl<'tcx> MirPass<'tcx> for AddMovesForPackedDrops {"}, {"sha": "932134bd6318f44d6ccacbb06ac1b0ff8e4cf188", "filename": "compiler/rustc_mir_transform/src/elaborate_box_derefs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -25,7 +25,7 @@ pub fn build_ptr_tys<'tcx>(\n     (unique_ty, nonnull_ty, ptr_ty)\n }\n \n-// Constructs the projection needed to access a Box's pointer\n+/// Constructs the projection needed to access a Box's pointer\n pub fn build_projection<'tcx>(\n     unique_ty: Ty<'tcx>,\n     nonnull_ty: Ty<'tcx>,"}, {"sha": "cf7226a129ce7fb42aee119c6efccbe7104325eb", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -295,8 +295,8 @@ impl<'tcx> InliningMap<'tcx> {\n         assert!(self.index.insert(source, start_index..end_index).is_none());\n     }\n \n-    // Internally iterate over all items referenced by `source` which will be\n-    // made available for inlining.\n+    /// Internally iterate over all items referenced by `source` which will be\n+    /// made available for inlining.\n     pub fn with_inlining_candidates<F>(&self, source: MonoItem<'tcx>, mut f: F)\n     where\n         F: FnMut(MonoItem<'tcx>),\n@@ -310,7 +310,7 @@ impl<'tcx> InliningMap<'tcx> {\n         }\n     }\n \n-    // Internally iterate over all items and the things each accesses.\n+    /// Internally iterate over all items and the things each accesses.\n     pub fn iter_accesses<F>(&self, mut f: F)\n     where\n         F: FnMut(MonoItem<'tcx>, &[MonoItem<'tcx>]),"}, {"sha": "f1b50296e2565a858e0442b88e192e1fdf12e7e2", "filename": "compiler/rustc_parse/src/lexer/unicode_chars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -1,5 +1,5 @@\n-// Characters and their corresponding confusables were collected from\n-// https://www.unicode.org/Public/security/10.0.0/confusables.txt\n+//! Characters and their corresponding confusables were collected from\n+//! <https://www.unicode.org/Public/security/10.0.0/confusables.txt>\n \n use super::StringReader;\n use crate::token::{self, Delimiter};"}, {"sha": "a084a7010885927344a3e24e834cd27e03e00fcb", "filename": "compiler/rustc_parse/src/parser/attr_wrapper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -50,7 +50,7 @@ impl AttrWrapper {\n         self.attrs\n     }\n \n-    // Prepend `self.attrs` to `attrs`.\n+    /// Prepend `self.attrs` to `attrs`.\n     // FIXME: require passing an NT to prevent misuse of this method\n     pub(crate) fn prepend_to_nt_inner(self, attrs: &mut AttrVec) {\n         let mut self_attrs = self.attrs;"}, {"sha": "c316a4dd6b41ad346527e1ff0b31512d06434a0f", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -224,9 +224,9 @@ impl MultiSugg {\n     }\n }\n \n-// SnapshotParser is used to create a snapshot of the parser\n-// without causing duplicate errors being emitted when the `Parser`\n-// is dropped.\n+/// SnapshotParser is used to create a snapshot of the parser\n+/// without causing duplicate errors being emitted when the `Parser`\n+/// is dropped.\n pub struct SnapshotParser<'a> {\n     parser: Parser<'a>,\n     unclosed_delims: Vec<UnmatchedBrace>,"}, {"sha": "d0f35b27c19fce6c88250aad6cdad3d7003288d4", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -779,26 +779,26 @@ impl<K: DepKind> DepGraph<K> {\n         }\n     }\n \n-    // Returns true if the given node has been marked as red during the\n-    // current compilation session. Used in various assertions\n+    /// Returns true if the given node has been marked as red during the\n+    /// current compilation session. Used in various assertions\n     pub fn is_red(&self, dep_node: &DepNode<K>) -> bool {\n         self.node_color(dep_node) == Some(DepNodeColor::Red)\n     }\n \n-    // Returns true if the given node has been marked as green during the\n-    // current compilation session. Used in various assertions\n+    /// Returns true if the given node has been marked as green during the\n+    /// current compilation session. Used in various assertions\n     pub fn is_green(&self, dep_node: &DepNode<K>) -> bool {\n         self.node_color(dep_node).map_or(false, |c| c.is_green())\n     }\n \n-    // This method loads all on-disk cacheable query results into memory, so\n-    // they can be written out to the new cache file again. Most query results\n-    // will already be in memory but in the case where we marked something as\n-    // green but then did not need the value, that value will never have been\n-    // loaded from disk.\n-    //\n-    // This method will only load queries that will end up in the disk cache.\n-    // Other queries will not be executed.\n+    /// This method loads all on-disk cacheable query results into memory, so\n+    /// they can be written out to the new cache file again. Most query results\n+    /// will already be in memory but in the case where we marked something as\n+    /// green but then did not need the value, that value will never have been\n+    /// loaded from disk.\n+    ///\n+    /// This method will only load queries that will end up in the disk cache.\n+    /// Other queries will not be executed.\n     pub fn exec_cache_promotions<Tcx: DepContext<DepKind = K>>(&self, tcx: Tcx) {\n         let _prof_timer = tcx.profiler().generic_activity(\"incr_comp_query_cache_promotion\");\n "}, {"sha": "2366b94732e0e8f38c4553fa632167e63dcc870c", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -196,7 +196,7 @@ pub(crate) struct NameResolution<'a> {\n }\n \n impl<'a> NameResolution<'a> {\n-    // Returns the binding for the name if it is known or None if it not known.\n+    /// Returns the binding for the name if it is known or None if it not known.\n     pub(crate) fn binding(&self) -> Option<&'a NameBinding<'a>> {\n         self.binding.and_then(|binding| {\n             if !binding.is_glob_import() || self.single_imports.is_empty() {\n@@ -228,8 +228,8 @@ fn pub_use_of_private_extern_crate_hack(import: &Import<'_>, binding: &NameBindi\n }\n \n impl<'a> Resolver<'a> {\n-    // Given a binding and an import that resolves to it,\n-    // return the corresponding binding defined by the import.\n+    /// Given a binding and an import that resolves to it,\n+    /// return the corresponding binding defined by the import.\n     pub(crate) fn import(\n         &self,\n         binding: &'a NameBinding<'a>,\n@@ -261,7 +261,7 @@ impl<'a> Resolver<'a> {\n         })\n     }\n \n-    // Define the name or return the existing binding if there is a collision.\n+    /// Define the name or return the existing binding if there is a collision.\n     pub(crate) fn try_define(\n         &mut self,\n         module: Module<'a>,"}, {"sha": "4fa0c14715e01ece4869c52c9d56dde50faa5e05", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -94,7 +94,7 @@ impl<'tcx> SaveContext<'tcx> {\n         }\n     }\n \n-    // Returns path to the compilation output (e.g., libfoo-12345678.rmeta)\n+    /// Returns path to the compilation output (e.g., libfoo-12345678.rmeta)\n     pub fn compilation_output(&self, crate_name: &str) -> PathBuf {\n         let sess = &self.tcx.sess;\n         // Save-analysis is emitted per whole session, not per each crate type\n@@ -112,7 +112,7 @@ impl<'tcx> SaveContext<'tcx> {\n         }\n     }\n \n-    // List external crates used by the current crate.\n+    /// List external crates used by the current crate.\n     pub fn get_external_crates(&self) -> Vec<ExternalCrateData> {\n         let mut result = Vec::with_capacity(self.tcx.crates(()).len());\n "}, {"sha": "a6cdd32f23b8e5048e07c3448461db3f1f895577", "filename": "compiler/rustc_serialize/src/leb128.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_serialize%2Fsrc%2Fleb128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_serialize%2Fsrc%2Fleb128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fleb128.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -7,7 +7,7 @@ macro_rules! max_leb128_len {\n     };\n }\n \n-// Returns the longest LEB128 encoding of all supported integer types.\n+/// Returns the longest LEB128 encoding of all supported integer types.\n pub const fn max_leb128_len() -> usize {\n     max_leb128_len!(u128)\n }"}, {"sha": "7c54df809f1791a985af793eac09b0986f4a39de", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -155,19 +155,19 @@ impl Encoder for MemEncoder {\n \n pub type FileEncodeResult = Result<usize, io::Error>;\n \n-// `FileEncoder` encodes data to file via fixed-size buffer.\n-//\n-// When encoding large amounts of data to a file, using `FileEncoder` may be\n-// preferred over using `MemEncoder` to encode to a `Vec`, and then writing the\n-// `Vec` to file, as the latter uses as much memory as there is encoded data,\n-// while the former uses the fixed amount of memory allocated to the buffer.\n-// `FileEncoder` also has the advantage of not needing to reallocate as data\n-// is appended to it, but the disadvantage of requiring more error handling,\n-// which has some runtime overhead.\n+/// `FileEncoder` encodes data to file via fixed-size buffer.\n+///\n+/// When encoding large amounts of data to a file, using `FileEncoder` may be\n+/// preferred over using `MemEncoder` to encode to a `Vec`, and then writing the\n+/// `Vec` to file, as the latter uses as much memory as there is encoded data,\n+/// while the former uses the fixed amount of memory allocated to the buffer.\n+/// `FileEncoder` also has the advantage of not needing to reallocate as data\n+/// is appended to it, but the disadvantage of requiring more error handling,\n+/// which has some runtime overhead.\n pub struct FileEncoder {\n-    // The input buffer. For adequate performance, we need more control over\n-    // buffering than `BufWriter` offers. If `BufWriter` ever offers a raw\n-    // buffer access API, we can use it, and remove `buf` and `buffered`.\n+    /// The input buffer. For adequate performance, we need more control over\n+    /// buffering than `BufWriter` offers. If `BufWriter` ever offers a raw\n+    /// buffer access API, we can use it, and remove `buf` and `buffered`.\n     buf: Box<[MaybeUninit<u8>]>,\n     buffered: usize,\n     flushed: usize,\n@@ -711,7 +711,7 @@ impl<'a> Decodable<MemDecoder<'a>> for Vec<u8> {\n     }\n }\n \n-// An integer that will always encode to 8 bytes.\n+/// An integer that will always encode to 8 bytes.\n pub struct IntEncodedWithFixedSize(pub u64);\n \n impl IntEncodedWithFixedSize {"}, {"sha": "1065cd384a94d21c5ba241154d870a0482c03fc0", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -78,10 +78,10 @@ use sha2::Sha256;\n #[cfg(test)]\n mod tests;\n \n-// Per-session global variables: this struct is stored in thread-local storage\n-// in such a way that it is accessible without any kind of handle to all\n-// threads within the compilation session, but is not accessible outside the\n-// session.\n+/// Per-session global variables: this struct is stored in thread-local storage\n+/// in such a way that it is accessible without any kind of handle to all\n+/// threads within the compilation session, but is not accessible outside the\n+/// session.\n pub struct SessionGlobals {\n     symbol_interner: symbol::Interner,\n     span_interner: Lock<span_encoding::SpanInterner>,\n@@ -359,8 +359,8 @@ impl FileName {\n         FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }\n     }\n \n-    // This may include transient local filesystem information.\n-    // Must not be embedded in build outputs.\n+    /// This may include transient local filesystem information.\n+    /// Must not be embedded in build outputs.\n     pub fn prefer_local(&self) -> FileNameDisplay<'_> {\n         FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }\n     }\n@@ -751,7 +751,7 @@ impl Span {\n \n     /// Checks if a span is \"internal\" to a macro in which `unsafe`\n     /// can be used without triggering the `unsafe_code` lint.\n-    //  (that is, a macro marked with `#[allow_internal_unsafe]`).\n+    /// (that is, a macro marked with `#[allow_internal_unsafe]`).\n     pub fn allows_unsafe(self) -> bool {\n         self.ctxt().outer_expn_data().allow_internal_unsafe\n     }"}, {"sha": "2ae57d9e56d7c5ce3ec0ff45c06bb8986fe231c2", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -130,14 +130,14 @@ impl FileLoader for RealFileLoader {\n /// different has no real downsides.\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Encodable, Decodable, Debug)]\n pub struct StableSourceFileId {\n-    // A hash of the source file's FileName. This is hash so that it's size\n-    // is more predictable than if we included the actual FileName value.\n+    /// A hash of the source file's [`FileName`]. This is hash so that it's size\n+    /// is more predictable than if we included the actual [`FileName`] value.\n     pub file_name_hash: u64,\n \n-    // The CrateNum of the crate this source file was originally parsed for.\n-    // We cannot include this information in the hash because at the time\n-    // of hashing we don't have the context to map from the CrateNum's numeric\n-    // value to a StableCrateId.\n+    /// The [`CrateNum`] of the crate this source file was originally parsed for.\n+    /// We cannot include this information in the hash because at the time\n+    /// of hashing we don't have the context to map from the [`CrateNum`]'s numeric\n+    /// value to a `StableCrateId`.\n     pub cnum: CrateNum,\n }\n \n@@ -402,7 +402,7 @@ impl SourceMap {\n         source_file\n     }\n \n-    // If there is a doctest offset, applies it to the line.\n+    /// If there is a doctest offset, applies it to the line.\n     pub fn doctest_offset_line(&self, file: &FileName, orig: usize) -> usize {\n         match file {\n             FileName::DocTest(_, offset) => {\n@@ -429,7 +429,7 @@ impl SourceMap {\n         Loc { file: sf, line, col, col_display }\n     }\n \n-    // If the corresponding `SourceFile` is empty, does not return a line number.\n+    /// If the corresponding `SourceFile` is empty, does not return a line number.\n     pub fn lookup_line(&self, pos: BytePos) -> Result<SourceFileAndLine, Lrc<SourceFile>> {\n         let f = self.lookup_source_file(pos);\n \n@@ -1053,9 +1053,9 @@ impl SourceMap {\n         SourceFileAndBytePos { sf, pos: offset }\n     }\n \n-    // Returns the index of the `SourceFile` (in `self.files`) that contains `pos`.\n-    // This index is guaranteed to be valid for the lifetime of this `SourceMap`,\n-    // since `source_files` is a `MonotonicVec`\n+    /// Returns the index of the [`SourceFile`] (in `self.files`) that contains `pos`.\n+    /// This index is guaranteed to be valid for the lifetime of this `SourceMap`,\n+    /// since `source_files` is a `MonotonicVec`\n     pub fn lookup_source_file_idx(&self, pos: BytePos) -> usize {\n         self.files\n             .borrow()"}, {"sha": "739716cfce382daa5e21da8680fd270525a32a48", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -2051,8 +2051,8 @@ impl Symbol {\n }\n \n impl Ident {\n-    // Returns `true` for reserved identifiers used internally for elided lifetimes,\n-    // unnamed method parameters, crate root module, error recovery etc.\n+    /// Returns `true` for reserved identifiers used internally for elided lifetimes,\n+    /// unnamed method parameters, crate root module, error recovery etc.\n     pub fn is_special(self) -> bool {\n         self.name.is_special()\n     }"}, {"sha": "1a583cf78137186d8418e205919259e5e6c85aad", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -1650,9 +1650,9 @@ pub struct TargetOptions {\n \n     /// Flag indicating whether #[thread_local] is available for this target.\n     pub has_thread_local: bool,\n-    // This is mainly for easy compatibility with emscripten.\n-    // If we give emcc .o files that are actually .bc files it\n-    // will 'just work'.\n+    /// This is mainly for easy compatibility with emscripten.\n+    /// If we give emcc .o files that are actually .bc files it\n+    /// will 'just work'.\n     pub obj_is_bitcode: bool,\n     /// Whether the target requires that emitted object code includes bitcode.\n     pub forces_embed_bitcode: bool,\n@@ -1792,12 +1792,12 @@ pub struct TargetOptions {\n     /// since this is most common among tier 1 and tier 2 targets.\n     pub supports_stack_protector: bool,\n \n-    // The name of entry function.\n-    // Default value is \"main\"\n+    /// The name of entry function.\n+    /// Default value is \"main\"\n     pub entry_name: StaticCow<str>,\n \n-    // The ABI of entry function.\n-    // Default value is `Conv::C`, i.e. C call convention\n+    /// The ABI of entry function.\n+    /// Default value is `Conv::C`, i.e. C call convention\n     pub entry_abi: Conv,\n }\n "}, {"sha": "bbb35e752e7b6120e2be0b603389789e04a127c1", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -861,7 +861,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n     }\n }\n \n-// Replaces all ReVars in a type with ty::Region's, using the provided map\n+/// Replaces all ReVars in a type with ty::Region's, using the provided map\n pub struct RegionReplacer<'a, 'tcx> {\n     vid_to_region: &'a FxHashMap<ty::RegionVid, ty::Region<'tcx>>,\n     tcx: TyCtxt<'tcx>,"}, {"sha": "ddc1be70b7f99b931a2758feac64d0be688410f8", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -829,7 +829,7 @@ impl<'tcx> TypeFolder<'tcx> for BoundVarReplacer<'_, 'tcx> {\n     }\n }\n \n-// The inverse of `BoundVarReplacer`: replaces placeholders with the bound vars from which they came.\n+/// The inverse of [`BoundVarReplacer`]: replaces placeholders with the bound vars from which they came.\n pub struct PlaceholderReplacer<'me, 'tcx> {\n     infcx: &'me InferCtxt<'tcx>,\n     mapped_regions: BTreeMap<ty::PlaceholderRegion, ty::BoundRegion>,"}, {"sha": "a251a508b48cf1777f4d86e62583066eb8caa0b7", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d42936b18d08ba414d9def35508d3baf2175c72/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=1d42936b18d08ba414d9def35508d3baf2175c72", "patch": "@@ -230,7 +230,7 @@ fn fulfill_implication<'tcx>(\n     Ok(infcx.resolve_vars_if_possible(target_substs))\n }\n \n-// Query provider for `specialization_graph_of`.\n+/// Query provider for `specialization_graph_of`.\n pub(super) fn specialization_graph_provider(\n     tcx: TyCtxt<'_>,\n     trait_id: DefId,"}]}