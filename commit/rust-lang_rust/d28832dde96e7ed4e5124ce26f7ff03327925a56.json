{"sha": "d28832dde96e7ed4e5124ce26f7ff03327925a56", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyODgzMmRkZTk2ZTdlZDRlNTEyNGNlMjZmN2ZmMDMzMjc5MjVhNTY=", "commit": {"author": {"name": "Jeremy Stucki", "email": "jeremy@myelin.ch", "date": "2019-06-21T21:49:03Z"}, "committer": {"name": "Jeremy Stucki", "email": "stucki.jeremy@gmail.com", "date": "2019-07-03T08:01:02Z"}, "message": "Remove needless lifetimes", "tree": {"sha": "822f689662d4b3ca51af4da76bfdadb3f8b83aaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/822f689662d4b3ca51af4da76bfdadb3f8b83aaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d28832dde96e7ed4e5124ce26f7ff03327925a56", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEnLVrz+MJS3aQxZ9oj1SKWi7RP1gFAl0cYL4ACgkQj1SKWi7R\nP1i1lw/+P55dyd2szb7B4GSwwDzhrK4qJvA+lhUJuuwkndo8z44SMQLtw5bVPN3C\nh+YdDCe6oq0fAOzXy+BHU+9SDIQvQWI+SkHOxTB5N4fwBBnTa8e6t4vlH06zQmWs\n2cTo6Img/CRFTKymCLZelrpyrIypQDZAaF3lpGn+NlCmMKy/8FlQYura+zBGizFu\nQF09rEm8ZUMDnSXpqTH58wjR2tqPbcyeG3E13nP7CAYjA3n1ixUAyJx/gV0DTt5L\now3uqOhb6i3Or7K3UAPK8g4D9LYULsIcn+B984+jqecAGd8fdAzG1asy5OqU9oQl\n8l+1d8bX9WDRNDXsq5imhRpE+qjuxEKr4qBCayeoClO3Z1C9sCpvVDNBPP5TFHOv\nRIZ06HWFrSJ3E4i8ZbCQbWt7too/8ig1TMaBNj7LmZOaoyMitXHXp9tssx5GIi0n\nDAUfrMYgK8Gcky8zSDe+/BZrwpcE6ehn6QdDuzP8WW0ZPK2jwHXNj4omTFYnJCKL\np0ShYSN9bquCBpmR8mCQ7PemfhZsU6sRgmuL0OjrEPtljLfSvVZJS/A8a/GhBiYl\nIYu/ozvtjcPPnwGH1wtJRUw0KGnQD/ggBORfX4jI1HK+1+AsDjcdyXIMnzMlO9XJ\nJ4qZqST7hioNqdGWPHGXg3/FqAY9TBuUsLbvsC+wlySb6g1tCNA=\n=y++l\n-----END PGP SIGNATURE-----", "payload": "tree 822f689662d4b3ca51af4da76bfdadb3f8b83aaa\nparent ec711767a7ac6911faae85d4b9285d07d5ebf949\nauthor Jeremy Stucki <jeremy@myelin.ch> 1561153743 +0200\ncommitter Jeremy Stucki <stucki.jeremy@gmail.com> 1562140862 +0200\n\nRemove needless lifetimes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d28832dde96e7ed4e5124ce26f7ff03327925a56", "html_url": "https://github.com/rust-lang/rust/commit/d28832dde96e7ed4e5124ce26f7ff03327925a56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d28832dde96e7ed4e5124ce26f7ff03327925a56/comments", "author": {"login": "jeremystucki", "id": 7629727, "node_id": "MDQ6VXNlcjc2Mjk3Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/7629727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremystucki", "html_url": "https://github.com/jeremystucki", "followers_url": "https://api.github.com/users/jeremystucki/followers", "following_url": "https://api.github.com/users/jeremystucki/following{/other_user}", "gists_url": "https://api.github.com/users/jeremystucki/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremystucki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremystucki/subscriptions", "organizations_url": "https://api.github.com/users/jeremystucki/orgs", "repos_url": "https://api.github.com/users/jeremystucki/repos", "events_url": "https://api.github.com/users/jeremystucki/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremystucki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jeremystucki", "id": 7629727, "node_id": "MDQ6VXNlcjc2Mjk3Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/7629727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremystucki", "html_url": "https://github.com/jeremystucki", "followers_url": "https://api.github.com/users/jeremystucki/followers", "following_url": "https://api.github.com/users/jeremystucki/following{/other_user}", "gists_url": "https://api.github.com/users/jeremystucki/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremystucki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremystucki/subscriptions", "organizations_url": "https://api.github.com/users/jeremystucki/orgs", "repos_url": "https://api.github.com/users/jeremystucki/repos", "events_url": "https://api.github.com/users/jeremystucki/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremystucki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec711767a7ac6911faae85d4b9285d07d5ebf949", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec711767a7ac6911faae85d4b9285d07d5ebf949", "html_url": "https://github.com/rust-lang/rust/commit/ec711767a7ac6911faae85d4b9285d07d5ebf949"}], "stats": {"total": 364, "additions": 182, "deletions": 182}, "files": [{"sha": "59b08b832d27275fe0f210cc883c414b35d6c900", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -765,7 +765,7 @@ pub fn maybe_lint_level_root(tcx: TyCtxt<'_>, id: hir::HirId) -> bool {\n     attrs.iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some())\n }\n \n-fn lint_levels<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> &'tcx LintLevelMap {\n+fn lint_levels(tcx: TyCtxt<'_>, cnum: CrateNum) -> &LintLevelMap {\n     assert_eq!(cnum, LOCAL_CRATE);\n     let mut builder = LintLevelMapBuilder {\n         levels: LintLevelSets::builder(tcx.sess),"}, {"sha": "5a580dfa420b3f22d5a3b33fabf39d7e2c0383ea", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -211,7 +211,7 @@ pub trait CrateStore {\n     fn crates_untracked(&self) -> Vec<CrateNum>;\n \n     // utility functions\n-    fn encode_metadata<'tcx>(&self, tcx: TyCtxt<'tcx>) -> EncodedMetadata;\n+    fn encode_metadata(&self, tcx: TyCtxt<'_>) -> EncodedMetadata;\n     fn metadata_encoding_version(&self) -> &[u8];\n }\n "}, {"sha": "e1889aa555f86d33b155858d796e0df9642362e8", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -26,7 +26,7 @@ use syntax_pos;\n // explored. For example, if it's a live Node::Item that is a\n // function, then we should explore its block to check for codes that\n // may need to be marked as live.\n-fn should_explore<'tcx>(tcx: TyCtxt<'tcx>, hir_id: hir::HirId) -> bool {\n+fn should_explore(tcx: TyCtxt<'_>, hir_id: hir::HirId) -> bool {\n     match tcx.hir().find(hir_id) {\n         Some(Node::Item(..)) |\n         Some(Node::ImplItem(..)) |\n@@ -662,7 +662,7 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n     }\n }\n \n-pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn check_crate(tcx: TyCtxt<'_>) {\n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n     let krate = tcx.hir().krate();\n     let live_symbols = find_live(tcx, access_levels, krate);"}, {"sha": "96b99fe4cdce2c01ca4716a4ba60be190907f59f", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -81,7 +81,7 @@ pub enum Linkage {\n     Dynamic,\n }\n \n-pub fn calculate<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn calculate(tcx: TyCtxt<'_>) {\n     let sess = &tcx.sess;\n     let fmts = sess.crate_types.borrow().iter().map(|&ty| {\n         let linkage = calculate_type(tcx, ty);\n@@ -92,7 +92,7 @@ pub fn calculate<'tcx>(tcx: TyCtxt<'tcx>) {\n     sess.dependency_formats.set(fmts);\n }\n \n-fn calculate_type<'tcx>(tcx: TyCtxt<'tcx>, ty: config::CrateType) -> DependencyList {\n+fn calculate_type(tcx: TyCtxt<'_>, ty: config::CrateType) -> DependencyList {\n     let sess = &tcx.sess;\n \n     if !sess.opts.output_types.should_codegen() {\n@@ -267,7 +267,7 @@ fn add_library(\n     }\n }\n \n-fn attempt_static<'tcx>(tcx: TyCtxt<'tcx>) -> Option<DependencyList> {\n+fn attempt_static(tcx: TyCtxt<'_>) -> Option<DependencyList> {\n     let sess = &tcx.sess;\n     let crates = cstore::used_crates(tcx, RequireStatic);\n     if !crates.iter().by_ref().all(|&(_, ref p)| p.is_some()) {\n@@ -324,7 +324,7 @@ fn activate_injected_dep(injected: Option<CrateNum>,\n \n // After the linkage for a crate has been determined we need to verify that\n // there's only going to be one allocator in the output.\n-fn verify_ok<'tcx>(tcx: TyCtxt<'tcx>, list: &[Linkage]) {\n+fn verify_ok(tcx: TyCtxt<'_>, list: &[Linkage]) {\n     let sess = &tcx.sess;\n     if list.len() == 0 {\n         return"}, {"sha": "1cc96c549e7243c943d8629bcfecc3e8f91e76f1", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -10,7 +10,7 @@ use syntax_pos::{Span, sym};\n use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use crate::hir;\n \n-fn check_mod_intrinsics<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n+fn check_mod_intrinsics(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(\n         module_def_id,\n         &mut ItemVisitor { tcx }.as_deep_visitor()"}, {"sha": "694b0a986296065b3d005a3d26aa63b5b9ba8f6b", "filename": "src/librustc/middle/lib_features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flib_features.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -142,7 +142,7 @@ impl Visitor<'tcx> for LibFeatureCollector<'tcx> {\n     }\n }\n \n-pub fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> LibFeatures {\n+pub fn collect(tcx: TyCtxt<'_>) -> LibFeatures {\n     let mut collector = LibFeatureCollector::new(tcx);\n     intravisit::walk_crate(&mut collector, tcx.hir().krate());\n     collector.lib_features"}, {"sha": "4c69f8bf28ca896207b26c172eccc55f0b67a905", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -181,7 +181,7 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n     fn visit_arm(&mut self, a: &'tcx hir::Arm) { visit_arm(self, a); }\n }\n \n-fn check_mod_liveness<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n+fn check_mod_liveness(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(\n         module_def_id,\n         &mut IrMaps::new(tcx, module_def_id).as_deep_visitor(),"}, {"sha": "6b26be34d75205cfe5e45c394236d65c4c259844", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -42,8 +42,8 @@ fn item_might_be_inlined(tcx: TyCtxt<'tcx>, item: &hir::Item, attrs: CodegenFnAt\n     }\n }\n \n-fn method_might_be_inlined<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn method_might_be_inlined(\n+    tcx: TyCtxt<'_>,\n     impl_item: &hir::ImplItem,\n     impl_src: DefId,\n ) -> bool {\n@@ -391,7 +391,7 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a, 'tcx\n #[derive(Clone, HashStable)]\n pub struct ReachableSet(pub Lrc<HirIdSet>);\n \n-fn reachable_set<'tcx>(tcx: TyCtxt<'tcx>, crate_num: CrateNum) -> ReachableSet {\n+fn reachable_set(tcx: TyCtxt<'_>, crate_num: CrateNum) -> ReachableSet {\n     debug_assert!(crate_num == LOCAL_CRATE);\n \n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);"}, {"sha": "67a4c2981a70559537f6fcf3d0b4d0b09cdc906b", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -1446,7 +1446,7 @@ impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n     }\n }\n \n-fn region_scope_tree<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ScopeTree {\n+fn region_scope_tree(tcx: TyCtxt<'_>, def_id: DefId) -> &ScopeTree {\n     let closure_base_def_id = tcx.closure_base_def_id(def_id);\n     if closure_base_def_id != def_id {\n         return tcx.region_scope_tree(closure_base_def_id);"}, {"sha": "4496f6fb90a7aa819ea092bacf9459b27b570464", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -368,7 +368,7 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n /// entire crate. You should not read the result of this query\n /// directly, but rather use `named_region_map`, `is_late_bound_map`,\n /// etc.\n-fn resolve_lifetimes<'tcx>(tcx: TyCtxt<'tcx>, for_krate: CrateNum) -> &'tcx ResolveLifetimes {\n+fn resolve_lifetimes(tcx: TyCtxt<'_>, for_krate: CrateNum) -> &ResolveLifetimes {\n     assert_eq!(for_krate, LOCAL_CRATE);\n \n     let named_region_map = krate(tcx);\n@@ -395,7 +395,7 @@ fn resolve_lifetimes<'tcx>(tcx: TyCtxt<'tcx>, for_krate: CrateNum) -> &'tcx Reso\n     tcx.arena.alloc(rl)\n }\n \n-fn krate<'tcx>(tcx: TyCtxt<'tcx>) -> NamedRegionMap {\n+fn krate(tcx: TyCtxt<'_>) -> NamedRegionMap {\n     let krate = tcx.hir().krate();\n     let mut map = NamedRegionMap {\n         defs: Default::default(),"}, {"sha": "101563d2d99ef7dde0b73583876a343b6a851cf7", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -466,7 +466,7 @@ impl<'tcx> Index<'tcx> {\n \n /// Cross-references the feature names of unstable APIs with enabled\n /// features and possibly prints errors.\n-fn check_mod_unstable_api_usage<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n+fn check_mod_unstable_api_usage(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut Checker { tcx }.as_deep_visitor());\n }\n \n@@ -836,7 +836,7 @@ impl<'tcx> TyCtxt<'tcx> {\n /// Given the list of enabled features that were not language features (i.e., that\n /// were expected to be library features), and the list of features used from\n /// libraries, identify activated features that don't exist and error about them.\n-pub fn check_unused_or_stable_features<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n \n     if tcx.stability().staged_api[&LOCAL_CRATE] {\n@@ -920,8 +920,8 @@ pub fn check_unused_or_stable_features<'tcx>(tcx: TyCtxt<'tcx>) {\n     // don't lint about unused features. We should reenable this one day!\n }\n \n-fn unnecessary_stable_feature_lint<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn unnecessary_stable_feature_lint(\n+    tcx: TyCtxt<'_>,\n     span: Span,\n     feature: Symbol,\n     since: Symbol,"}, {"sha": "59a032d53cfd67991da6d32ac16d5d41707b6597", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -2867,19 +2867,19 @@ impl<'tcx> graph::WithStartNode for Body<'tcx> {\n }\n \n impl<'tcx> graph::WithPredecessors for Body<'tcx> {\n-    fn predecessors<'graph>(\n-        &'graph self,\n+    fn predecessors(\n+        &self,\n         node: Self::Node,\n-    ) -> <Self as GraphPredecessors<'graph>>::Iter {\n+    ) -> <Self as GraphPredecessors<'_>>::Iter {\n         self.predecessors_for(node).clone().into_iter()\n     }\n }\n \n impl<'tcx> graph::WithSuccessors for Body<'tcx> {\n-    fn successors<'graph>(\n-        &'graph self,\n+    fn successors(\n+        &self,\n         node: Self::Node,\n-    ) -> <Self as GraphSuccessors<'graph>>::Iter {\n+    ) -> <Self as GraphSuccessors<'_>>::Iter {\n         self.basic_blocks[node].terminator().successors().cloned()\n     }\n }"}, {"sha": "82c53be3ec70ff15316d2fa9d5f34d9333a23090", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -269,11 +269,11 @@ impl OutputTypes {\n         self.0.contains_key(key)\n     }\n \n-    pub fn keys<'a>(&'a self) -> BTreeMapKeysIter<'a, OutputType, Option<PathBuf>> {\n+    pub fn keys(&self) -> BTreeMapKeysIter<'_, OutputType, Option<PathBuf>> {\n         self.0.keys()\n     }\n \n-    pub fn values<'a>(&'a self) -> BTreeMapValuesIter<'a, OutputType, Option<PathBuf>> {\n+    pub fn values(&self) -> BTreeMapValuesIter<'_, OutputType, Option<PathBuf>> {\n         self.0.values()\n     }\n \n@@ -316,7 +316,7 @@ impl Externs {\n         self.0.get(key)\n     }\n \n-    pub fn iter<'a>(&'a self) -> BTreeMapIter<'a, String, ExternEntry> {\n+    pub fn iter(&self) -> BTreeMapIter<'_, String, ExternEntry> {\n         self.0.iter()\n     }\n }"}, {"sha": "3cbf0ee213ae371891821890de7a2086d3e61bc8", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -215,66 +215,66 @@ impl Session {\n         *self.crate_disambiguator.get()\n     }\n \n-    pub fn struct_span_warn<'a, S: Into<MultiSpan>>(\n-        &'a self,\n+    pub fn struct_span_warn<S: Into<MultiSpan>>(\n+        &self,\n         sp: S,\n         msg: &str,\n-    ) -> DiagnosticBuilder<'a> {\n+    ) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_span_warn(sp, msg)\n     }\n-    pub fn struct_span_warn_with_code<'a, S: Into<MultiSpan>>(\n-        &'a self,\n+    pub fn struct_span_warn_with_code<S: Into<MultiSpan>>(\n+        &self,\n         sp: S,\n         msg: &str,\n         code: DiagnosticId,\n-    ) -> DiagnosticBuilder<'a> {\n+    ) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_span_warn_with_code(sp, msg, code)\n     }\n-    pub fn struct_warn<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> {\n+    pub fn struct_warn(&self, msg: &str) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_warn(msg)\n     }\n-    pub fn struct_span_err<'a, S: Into<MultiSpan>>(\n-        &'a self,\n+    pub fn struct_span_err<S: Into<MultiSpan>>(\n+        &self,\n         sp: S,\n         msg: &str,\n-    ) -> DiagnosticBuilder<'a> {\n+    ) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_span_err(sp, msg)\n     }\n-    pub fn struct_span_err_with_code<'a, S: Into<MultiSpan>>(\n-        &'a self,\n+    pub fn struct_span_err_with_code<S: Into<MultiSpan>>(\n+        &self,\n         sp: S,\n         msg: &str,\n         code: DiagnosticId,\n-    ) -> DiagnosticBuilder<'a> {\n+    ) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_span_err_with_code(sp, msg, code)\n     }\n     // FIXME: This method should be removed (every error should have an associated error code).\n-    pub fn struct_err<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> {\n+    pub fn struct_err(&self, msg: &str) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_err(msg)\n     }\n-    pub fn struct_err_with_code<'a>(\n-        &'a self,\n+    pub fn struct_err_with_code(\n+        &self,\n         msg: &str,\n         code: DiagnosticId,\n-    ) -> DiagnosticBuilder<'a> {\n+    ) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_err_with_code(msg, code)\n     }\n-    pub fn struct_span_fatal<'a, S: Into<MultiSpan>>(\n-        &'a self,\n+    pub fn struct_span_fatal<S: Into<MultiSpan>>(\n+        &self,\n         sp: S,\n         msg: &str,\n-    ) -> DiagnosticBuilder<'a> {\n+    ) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_span_fatal(sp, msg)\n     }\n-    pub fn struct_span_fatal_with_code<'a, S: Into<MultiSpan>>(\n-        &'a self,\n+    pub fn struct_span_fatal_with_code<S: Into<MultiSpan>>(\n+        &self,\n         sp: S,\n         msg: &str,\n         code: DiagnosticId,\n-    ) -> DiagnosticBuilder<'a> {\n+    ) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_span_fatal_with_code(sp, msg, code)\n     }\n-    pub fn struct_fatal<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> {\n+    pub fn struct_fatal(&self, msg: &str) -> DiagnosticBuilder<'_> {\n         self.diagnostic().struct_fatal(msg)\n     }\n \n@@ -416,7 +416,7 @@ impl Session {\n     pub fn next_node_id(&self) -> NodeId {\n         self.reserve_node_ids(1)\n     }\n-    pub fn diagnostic<'a>(&'a self) -> &'a errors::Handler {\n+    pub fn diagnostic(&self) -> &errors::Handler {\n         &self.parse_sess.span_diagnostic\n     }\n \n@@ -504,7 +504,7 @@ impl Session {\n         );\n     }\n \n-    pub fn source_map<'a>(&'a self) -> &'a source_map::SourceMap {\n+    pub fn source_map(&self) -> &source_map::SourceMap {\n         self.parse_sess.source_map()\n     }\n     pub fn verbose(&self) -> bool {"}, {"sha": "f0389bb037ac5b827aeb4e1e5bcc8e07f1d29d5a", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -145,8 +145,8 @@ pub fn find_associated_item<'tcx>(\n /// Specialization is determined by the sets of types to which the impls apply;\n /// `impl1` specializes `impl2` if it applies to a subset of the types `impl2` applies\n /// to.\n-pub(super) fn specializes<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub(super) fn specializes(\n+    tcx: TyCtxt<'_>,\n     (impl1_def_id, impl2_def_id): (DefId, DefId),\n ) -> bool {\n     debug!(\"specializes({:?}, {:?})\", impl1_def_id, impl2_def_id);\n@@ -282,10 +282,10 @@ fn fulfill_implication<'a, 'tcx>(\n }\n \n // Query provider for `specialization_graph_of`.\n-pub(super) fn specialization_graph_provider<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub(super) fn specialization_graph_provider(\n+    tcx: TyCtxt<'_>,\n     trait_id: DefId,\n-) -> &'tcx specialization_graph::Graph {\n+) -> &specialization_graph::Graph {\n     let mut sg = specialization_graph::Graph::new();\n \n     let mut trait_impls = tcx.all_impls(trait_id);"}, {"sha": "85153f99b191711eed055fe959d95e2aec3be28d", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -306,9 +306,9 @@ impl<'sess> OnDiskCache<'sess> {\n     }\n \n     /// Loads a diagnostic emitted during the previous compilation session.\n-    pub fn load_diagnostics<'tcx>(\n+    pub fn load_diagnostics(\n         &self,\n-        tcx: TyCtxt<'tcx>,\n+        tcx: TyCtxt<'_>,\n         dep_node_index: SerializedDepNodeIndex,\n     ) -> Vec<Diagnostic> {\n         let diagnostics: Option<EncodedDiagnostics> = self.load_indexed(\n@@ -335,9 +335,9 @@ impl<'sess> OnDiskCache<'sess> {\n \n     /// Returns the cached query result if there is something in the cache for\n     /// the given `SerializedDepNodeIndex`; otherwise returns `None`.\n-    pub fn try_load_query_result<'tcx, T>(\n+    pub fn try_load_query_result<T>(\n         &self,\n-        tcx: TyCtxt<'tcx>,\n+        tcx: TyCtxt<'_>,\n         dep_node_index: SerializedDepNodeIndex,\n     ) -> Option<T>\n     where"}, {"sha": "0c9e31e1ff28e9c7b8bd87167e13f701dfcd7900", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -1166,7 +1166,7 @@ macro_rules! define_provider_struct {\n /// then `force_from_dep_node()` should not fail for it. Otherwise, you can just\n /// add it to the \"We don't have enough information to reconstruct...\" group in\n /// the match below.\n-pub fn force_from_dep_node<'tcx>(tcx: TyCtxt<'tcx>, dep_node: &DepNode) -> bool {\n+pub fn force_from_dep_node(tcx: TyCtxt<'_>, dep_node: &DepNode) -> bool {\n     use crate::dep_graph::RecoverKey;\n \n     // We must avoid ever having to call force_from_dep_node() for a"}, {"sha": "2af9b448ef1eb03cc57c6733477f1b45a608750b", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -273,7 +273,7 @@ impl CleanupKind {\n     }\n }\n \n-pub fn cleanup_kinds<'tcx>(mir: &mir::Body<'tcx>) -> IndexVec<mir::BasicBlock, CleanupKind> {\n+pub fn cleanup_kinds(mir: &mir::Body<'_>) -> IndexVec<mir::BasicBlock, CleanupKind> {\n     fn discover_masters<'tcx>(result: &mut IndexVec<mir::BasicBlock, CleanupKind>,\n                               mir: &mir::Body<'tcx>) {\n         for (bb, data) in mir.basic_blocks().iter_enumerated() {"}, {"sha": "1d83aa112a8371f7cad7279431d3afac39173bb3", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -206,7 +206,7 @@ impl Assertion {\n     }\n }\n \n-pub fn check_dirty_clean_annotations<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn check_dirty_clean_annotations(tcx: TyCtxt<'_>) {\n     // can't add `#[rustc_dirty]` etc without opting in to this feature\n     if !tcx.features().rustc_attrs {\n         return;"}, {"sha": "90aefb0f32416f8bf56358ba695fb78df55ddb41", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -15,7 +15,7 @@ use super::fs::*;\n use super::file_format;\n use super::work_product;\n \n-pub fn dep_graph_tcx_init<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn dep_graph_tcx_init(tcx: TyCtxt<'_>) {\n     if !tcx.dep_graph.is_fully_enabled() {\n         return\n     }\n@@ -192,7 +192,7 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n     }))\n }\n \n-pub fn load_query_result_cache<'sess>(sess: &'sess Session) -> OnDiskCache<'sess> {\n+pub fn load_query_result_cache(sess: &Session) -> OnDiskCache<'_> {\n     if sess.opts.incremental.is_none() ||\n        !sess.opts.debugging_opts.incremental_queries {\n         return OnDiskCache::new_empty(sess.source_map());"}, {"sha": "13e2c5d1c574d6aaccf819798681b8ed19638f89", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -15,7 +15,7 @@ use super::dirty_clean;\n use super::file_format;\n use super::work_product;\n \n-pub fn save_dep_graph<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn save_dep_graph(tcx: TyCtxt<'_>) {\n     debug!(\"save_dep_graph()\");\n     tcx.dep_graph.with_ignore(|| {\n         let sess = tcx.sess;"}, {"sha": "6f9f5707935baa75ef782903d642681a23279e41", "filename": "src/librustc_mir/borrow_check/nll/region_infer/values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -162,7 +162,7 @@ impl<N: Idx> LivenessValues<N> {\n     }\n \n     /// Iterate through each region that has a value in this set.\n-    crate fn rows<'a>(&'a self) -> impl Iterator<Item = N> {\n+    crate fn rows(&self) -> impl Iterator<Item=N> {\n         self.points.rows()\n     }\n "}, {"sha": "528dfbef6946a3d5546582bb77da17ae7cd8546e", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -826,6 +826,6 @@ impl Test<'_> {\n     }\n }\n \n-fn is_switch_ty<'tcx>(ty: Ty<'tcx>) -> bool {\n+fn is_switch_ty(ty: Ty<'_>) -> bool {\n     ty.is_integral() || ty.is_char() || ty.is_bool()\n }"}, {"sha": "d356194c0034323b0c70ddca7466f8450b0fb870", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -835,7 +835,7 @@ impl<'tcx> IntRange<'tcx> {\n     fn from_ctor(tcx: TyCtxt<'tcx>, ctor: &Constructor<'tcx>) -> Option<IntRange<'tcx>> {\n         // Floating-point ranges are permitted and we don't want\n         // to consider them when constructing integer ranges.\n-        fn is_integral<'tcx>(ty: Ty<'tcx>) -> bool {\n+        fn is_integral(ty: Ty<'_>) -> bool {\n             match ty.sty {\n                 ty::Char | ty::Int(_) | ty::Uint(_) => true,\n                 _ => false,"}, {"sha": "e64bd439af43bb2b416d3069d97a6d08726cca1d", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -26,7 +26,7 @@ use std::slice;\n use syntax::ptr::P;\n use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n \n-pub(crate) fn check_match<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n+pub(crate) fn check_match(tcx: TyCtxt<'_>, def_id: DefId) {\n     let body_id = if let Some(id) = tcx.hir().as_local_hir_id(def_id) {\n         tcx.hir().body_owned_by(id)\n     } else {\n@@ -43,7 +43,7 @@ pub(crate) fn check_match<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n     }.visit_body(tcx.hir().body(body_id));\n }\n \n-fn create_e0004<'a>(sess: &'a Session, sp: Span, error_message: String) -> DiagnosticBuilder<'a> {\n+fn create_e0004(sess: &Session, sp: Span, error_message: String) -> DiagnosticBuilder<'_> {\n     struct_span_err!(sess, sp, E0004, \"{}\", &error_message)\n }\n "}, {"sha": "097d76925c8eba59cbac72ab7d207d5f66e2199b", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -281,10 +281,10 @@ impl<'tcx> InliningMap<'tcx> {\n     }\n }\n \n-pub fn collect_crate_mono_items<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub fn collect_crate_mono_items(\n+    tcx: TyCtxt<'_>,\n     mode: MonoItemCollectionMode,\n-) -> (FxHashSet<MonoItem<'tcx>>, InliningMap<'tcx>) {\n+) -> (FxHashSet<MonoItem<'_>>, InliningMap<'_>) {\n     let roots = time(tcx.sess, \"collecting roots\", || {\n         collect_roots(tcx, mode)\n     });\n@@ -315,7 +315,7 @@ pub fn collect_crate_mono_items<'tcx>(\n \n // Find all non-generic items by walking the HIR. These items serve as roots to\n // start monomorphizing from.\n-fn collect_roots<'tcx>(tcx: TyCtxt<'tcx>, mode: MonoItemCollectionMode) -> Vec<MonoItem<'tcx>> {\n+fn collect_roots(tcx: TyCtxt<'_>, mode: MonoItemCollectionMode) -> Vec<MonoItem<'_>> {\n     debug!(\"Collecting roots\");\n     let mut roots = Vec::new();\n \n@@ -912,7 +912,7 @@ fn find_vtable_types_for_unsizing<'tcx>(\n     }\n }\n \n-fn create_fn_mono_item<'tcx>(instance: Instance<'tcx>) -> MonoItem<'tcx> {\n+fn create_fn_mono_item(instance: Instance<'_>) -> MonoItem<'_> {\n     debug!(\"create_fn_mono_item(instance={})\", instance);\n     MonoItem::Fn(instance)\n }\n@@ -1114,7 +1114,7 @@ impl RootCollector<'_, 'v> {\n     }\n }\n \n-fn item_requires_monomorphization<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+fn item_requires_monomorphization(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     let generics = tcx.generics_of(def_id);\n     generics.requires_monomorphization(tcx)\n }\n@@ -1243,7 +1243,7 @@ fn collect_neighbours<'tcx>(\n     }\n }\n \n-fn def_id_to_string<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> String {\n+fn def_id_to_string(tcx: TyCtxt<'_>, def_id: DefId) -> String {\n     let mut output = String::new();\n     let printer = DefPathBasedNames::new(tcx, false, false);\n     printer.push_def_path(def_id, &mut output);"}, {"sha": "a934c921d9257e04893df143aae2d49b074e9d1d", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -839,10 +839,10 @@ where\n     }\n }\n \n-fn collect_and_partition_mono_items<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn collect_and_partition_mono_items(\n+    tcx: TyCtxt<'_>,\n     cnum: CrateNum,\n-) -> (Arc<DefIdSet>, Arc<Vec<Arc<CodegenUnit<'tcx>>>>) {\n+) -> (Arc<DefIdSet>, Arc<Vec<Arc<CodegenUnit<'_>>>>) {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     let collection_mode = match tcx.sess.opts.debugging_opts.print_mono_items {"}, {"sha": "9d142d9b700b63498f26f180c88c03233be4258d", "filename": "src/librustc_mir/util/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -8,8 +8,8 @@ use std::io::{self, Write};\n use super::pretty::dump_mir_def_ids;\n \n /// Write a graphviz DOT graph of a list of MIRs.\n-pub fn write_mir_graphviz<'tcx, W>(\n-    tcx: TyCtxt<'tcx>,\n+pub fn write_mir_graphviz<W>(\n+    tcx: TyCtxt<'_>,\n     single: Option<DefId>,\n     w: &mut W,\n ) -> io::Result<()>"}, {"sha": "b42eebc7ee3be28dfc0cd3d1cf544b7623535a1b", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -56,8 +56,8 @@ pub struct LivenessResult {\n \n /// Computes which local variables are live within the given function\n /// `mir`, including drops.\n-pub fn liveness_of_locals<'tcx>(\n-    body: &Body<'tcx>,\n+pub fn liveness_of_locals(\n+    body: &Body<'_>,\n ) -> LivenessResult {\n     let num_live_vars = body.local_decls.len();\n \n@@ -243,8 +243,8 @@ impl<'tcx> Visitor<'tcx> for DefsUsesVisitor\n     }\n }\n \n-fn block<'tcx>(\n-    b: &BasicBlockData<'tcx>,\n+fn block(\n+    b: &BasicBlockData<'_>,\n     locals: usize,\n ) -> DefsUses {\n     let mut visitor = DefsUsesVisitor {"}, {"sha": "fd2a5e452ce4b481d5ae2dc94b2170da0c96798b", "filename": "src/librustc_mir/util/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_mir%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_mir%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fmod.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -21,7 +21,7 @@ pub use self::graphviz::{graphviz_safe_def_name, write_mir_graphviz};\n pub use self::graphviz::write_node_label as write_graphviz_node_label;\n \n /// If possible, suggest replacing `ref` with `ref mut`.\n-pub fn suggest_ref_mut<'tcx>(tcx: TyCtxt<'tcx>, binding_span: Span) -> Option<(String)> {\n+pub fn suggest_ref_mut(tcx: TyCtxt<'_>, binding_span: Span) -> Option<(String)> {\n     let hi_src = tcx.sess.source_map().span_to_snippet(binding_span).unwrap();\n     if hi_src.starts_with(\"ref\")\n         && hi_src[\"ref\".len()..].starts_with(Pattern_White_Space)"}, {"sha": "77a976a54f4349f84e984ad191c0ae106db40e7c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -198,9 +198,9 @@ enum ResolutionError<'a> {\n ///\n /// This takes the error provided, combines it with the span and any additional spans inside the\n /// error and emits it.\n-fn resolve_error<'sess, 'a>(resolver: &'sess Resolver<'_>,\n-                            span: Span,\n-                            resolution_error: ResolutionError<'a>) {\n+fn resolve_error(resolver: &Resolver<'_>,\n+                 span: Span,\n+                 resolution_error: ResolutionError<'_>) {\n     resolve_struct_error(resolver, span, resolution_error).emit();\n }\n "}, {"sha": "6e8eed0f907255072a714081506e4a7aeaddecb6", "filename": "src/librustc_traits/chalk_context/program_clauses/primitive.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fprimitive.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -15,7 +15,7 @@ use crate::lowering::Lower;\n use crate::generic_types;\n use std::iter;\n \n-crate fn wf_clause_for_raw_ptr<'tcx>(tcx: TyCtxt<'tcx>, mutbl: hir::Mutability) -> Clauses<'tcx> {\n+crate fn wf_clause_for_raw_ptr(tcx: TyCtxt<'_>, mutbl: hir::Mutability) -> Clauses<'_> {\n     let ptr_ty = generic_types::raw_ptr(tcx, mutbl);\n \n     let wf_clause = ProgramClause {\n@@ -29,13 +29,13 @@ crate fn wf_clause_for_raw_ptr<'tcx>(tcx: TyCtxt<'tcx>, mutbl: hir::Mutability)\n     tcx.mk_clauses(iter::once(wf_clause))\n }\n \n-crate fn wf_clause_for_fn_ptr<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+crate fn wf_clause_for_fn_ptr(\n+    tcx: TyCtxt<'_>,\n     arity_and_output: usize,\n     variadic: bool,\n     unsafety: hir::Unsafety,\n     abi: abi::Abi,\n-) -> Clauses<'tcx> {\n+) -> Clauses<'_> {\n     let fn_ptr = generic_types::fn_ptr(tcx, arity_and_output, variadic, unsafety, abi);\n \n     let wf_clause = ProgramClause {\n@@ -50,7 +50,7 @@ crate fn wf_clause_for_fn_ptr<'tcx>(\n     tcx.mk_clauses(iter::once(wf_clause))\n }\n \n-crate fn wf_clause_for_slice<'tcx>(tcx: TyCtxt<'tcx>) -> Clauses<'tcx> {\n+crate fn wf_clause_for_slice(tcx: TyCtxt<'_>) -> Clauses<'_> {\n     let ty = generic_types::bound(tcx, 0);\n     let slice_ty = tcx.mk_slice(ty);\n \n@@ -111,7 +111,7 @@ crate fn wf_clause_for_array<'tcx>(\n     tcx.mk_clauses(iter::once(wf_clause))\n }\n \n-crate fn wf_clause_for_tuple<'tcx>(tcx: TyCtxt<'tcx>, arity: usize) -> Clauses<'tcx> {\n+crate fn wf_clause_for_tuple(tcx: TyCtxt<'_>, arity: usize) -> Clauses<'_> {\n     let type_list = generic_types::type_list(tcx, arity);\n     let tuple_ty = tcx.mk_ty(ty::Tuple(type_list));\n \n@@ -152,7 +152,7 @@ crate fn wf_clause_for_tuple<'tcx>(tcx: TyCtxt<'tcx>, arity: usize) -> Clauses<'\n     tcx.mk_clauses(iter::once(wf_clause))\n }\n \n-crate fn wf_clause_for_ref<'tcx>(tcx: TyCtxt<'tcx>, mutbl: hir::Mutability) -> Clauses<'tcx> {\n+crate fn wf_clause_for_ref(tcx: TyCtxt<'_>, mutbl: hir::Mutability) -> Clauses<'_> {\n     let region = tcx.mk_region(\n         ty::ReLateBound(ty::INNERMOST, ty::BoundRegion::BrAnon(0))\n     );\n@@ -176,7 +176,7 @@ crate fn wf_clause_for_ref<'tcx>(tcx: TyCtxt<'tcx>, mutbl: hir::Mutability) -> C\n     tcx.mk_clauses(iter::once(wf_clause))\n }\n \n-crate fn wf_clause_for_fn_def<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Clauses<'tcx> {\n+crate fn wf_clause_for_fn_def(tcx: TyCtxt<'_>, def_id: DefId) -> Clauses<'_> {\n     let fn_def = generic_types::fn_def(tcx, def_id);\n \n     let wf_clause = ProgramClause {"}, {"sha": "ecd888b606981d10422cea7acad21d1092fce5d9", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -279,10 +279,10 @@ fn dtorck_constraint_for_ty<'tcx>(\n }\n \n /// Calculates the dtorck constraint for a type.\n-crate fn adt_dtorck_constraint<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+crate fn adt_dtorck_constraint(\n+    tcx: TyCtxt<'_>,\n     def_id: DefId,\n-) -> Result<DtorckConstraint<'tcx>, NoSolution> {\n+) -> Result<DtorckConstraint<'_>, NoSolution> {\n     let def = tcx.adt_def(def_id);\n     let span = tcx.def_span(def_id);\n     debug!(\"dtorck_constraint: {:?}\", def);\n@@ -313,7 +313,7 @@ crate fn adt_dtorck_constraint<'tcx>(\n     Ok(result)\n }\n \n-fn dedup_dtorck_constraint<'tcx>(c: &mut DtorckConstraint<'tcx>) {\n+fn dedup_dtorck_constraint(c: &mut DtorckConstraint<'_>) {\n     let mut outlives = FxHashSet::default();\n     let mut dtorck_types = FxHashSet::default();\n "}, {"sha": "9ff685bb4ee8a8976c12cbe83666aea044edf0d0", "filename": "src/librustc_traits/lowering/environment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -160,7 +160,7 @@ crate fn program_clauses_for_env<'tcx>(\n     );\n }\n \n-crate fn environment<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Environment<'tcx> {\n+crate fn environment(tcx: TyCtxt<'_>, def_id: DefId) -> Environment<'_> {\n     use super::{Lower, IntoFromEnvGoal};\n     use rustc::hir::{Node, TraitItemKind, ImplItemKind, ItemKind, ForeignItemKind};\n "}, {"sha": "b0d9134c834d60dde61a541049fc048b85b736b6", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -155,7 +155,7 @@ impl<'tcx> IntoWellFormedGoal for DomainGoal<'tcx> {\n     }\n }\n \n-crate fn program_clauses_for<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Clauses<'tcx> {\n+crate fn program_clauses_for(tcx: TyCtxt<'_>, def_id: DefId) -> Clauses<'_> {\n     // FIXME(eddyb) this should only be using `def_kind`.\n     match tcx.def_key(def_id).disambiguated_data.data {\n         DefPathData::TypeNs(..) => match tcx.def_kind(def_id) {\n@@ -181,7 +181,7 @@ crate fn program_clauses_for<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Clauses<\n     }\n }\n \n-fn program_clauses_for_trait<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Clauses<'tcx> {\n+fn program_clauses_for_trait(tcx: TyCtxt<'_>, def_id: DefId) -> Clauses<'_> {\n     // `trait Trait<P1..Pn> where WC { .. } // P0 == Self`\n \n     // Rule Implemented-From-Env (see rustc guide)\n@@ -337,7 +337,7 @@ fn program_clauses_for_impl(tcx: TyCtxt<'tcx>, def_id: DefId) -> Clauses<'tcx> {\n     tcx.mk_clauses(iter::once(Clause::ForAll(ty::Binder::bind(clause))))\n }\n \n-pub fn program_clauses_for_type_def<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Clauses<'tcx> {\n+pub fn program_clauses_for_type_def(tcx: TyCtxt<'_>, def_id: DefId) -> Clauses<'_> {\n     // Rule WellFormed-Type\n     //\n     // `struct Ty<P1..Pn> where WC1, ..., WCm`\n@@ -411,10 +411,10 @@ pub fn program_clauses_for_type_def<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> C\n     tcx.mk_clauses(iter::once(well_formed_clause).chain(from_env_clauses))\n }\n \n-pub fn program_clauses_for_associated_type_def<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub fn program_clauses_for_associated_type_def(\n+    tcx: TyCtxt<'_>,\n     item_id: DefId,\n-) -> Clauses<'tcx> {\n+) -> Clauses<'_> {\n     // Rule ProjectionEq-Placeholder\n     //\n     // ```\n@@ -549,10 +549,10 @@ pub fn program_clauses_for_associated_type_def<'tcx>(\n     tcx.mk_clauses(clauses)\n }\n \n-pub fn program_clauses_for_associated_type_value<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub fn program_clauses_for_associated_type_value(\n+    tcx: TyCtxt<'_>,\n     item_id: DefId,\n-) -> Clauses<'tcx> {\n+) -> Clauses<'_> {\n     // Rule Normalize-From-Impl (see rustc guide)\n     //\n     // ```\n@@ -611,7 +611,7 @@ pub fn program_clauses_for_associated_type_value<'tcx>(\n     tcx.mk_clauses(iter::once(normalize_clause))\n }\n \n-pub fn dump_program_clauses<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn dump_program_clauses(tcx: TyCtxt<'_>) {\n     if !tcx.features().rustc_attrs {\n         return;\n     }"}, {"sha": "be00a6efe55edeeacde981b6bf26891b1897c0ff", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -775,12 +775,12 @@ impl Ord for TraitInfo {\n }\n \n /// Retrieves all traits in this crate and any dependent crates.\n-pub fn all_traits<'tcx>(tcx: TyCtxt<'tcx>) -> Vec<TraitInfo> {\n+pub fn all_traits(tcx: TyCtxt<'_>) -> Vec<TraitInfo> {\n     tcx.all_traits(LOCAL_CRATE).iter().map(|&def_id| TraitInfo { def_id }).collect()\n }\n \n /// Computes all traits in this crate and any dependent crates.\n-fn compute_all_traits<'tcx>(tcx: TyCtxt<'tcx>) -> Vec<DefId> {\n+fn compute_all_traits(tcx: TyCtxt<'_>) -> Vec<DefId> {\n     use hir::itemlikevisit;\n \n     let mut traits = vec![];"}, {"sha": "8614de1977085f3f3a2993a10a450e76115f1901", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -13,7 +13,7 @@ use rustc::util::nodemap::DefIdSet;\n \n use rustc_data_structures::fx::FxHashMap;\n \n-pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn check_crate(tcx: TyCtxt<'_>) {\n     let mut used_trait_imports = DefIdSet::default();\n     for &body_id in tcx.hir().krate().bodies.keys() {\n         let item_def_id = tcx.hir().body_owner_def_id(body_id);\n@@ -70,7 +70,7 @@ impl CheckVisitor<'tcx> {\n     }\n }\n \n-fn unused_crates_lint<'tcx>(tcx: TyCtxt<'tcx>) {\n+fn unused_crates_lint(tcx: TyCtxt<'_>) {\n     let lint = lint::builtin::UNUSED_EXTERN_CRATES;\n \n     // Collect first the crates that are completely unused.  These we"}, {"sha": "8b2f15aeabf3b8a56b403f8ad69fe3add913e85a", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -56,7 +56,7 @@ struct OnlySelfBounds(bool);\n ///////////////////////////////////////////////////////////////////////////\n // Main entry point\n \n-fn collect_mod_item_types<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n+fn collect_mod_item_types(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(\n         module_def_id,\n         &mut CollectItemTypesVisitor { tcx }.as_deep_visitor()\n@@ -253,10 +253,10 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n     }\n }\n \n-fn type_param_predicates<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn type_param_predicates(\n+    tcx: TyCtxt<'_>,\n     (item_def_id, def_id): (DefId, DefId),\n-) -> &'tcx ty::GenericPredicates<'tcx> {\n+) -> &ty::GenericPredicates<'_> {\n     use rustc::hir::*;\n \n     // In the AST, bounds can derive from two places. Either\n@@ -381,7 +381,7 @@ impl ItemCtxt<'tcx> {\n /// parameter with ID `param_id`. We use this so as to avoid running\n /// `ast_ty_to_ty`, because we want to avoid triggering an all-out\n /// conversion of the type to avoid inducing unnecessary cycles.\n-fn is_param<'tcx>(tcx: TyCtxt<'tcx>, ast_ty: &hir::Ty, param_id: hir::HirId) -> bool {\n+fn is_param(tcx: TyCtxt<'_>, ast_ty: &hir::Ty, param_id: hir::HirId) -> bool {\n     if let hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) = ast_ty.node {\n         match path.res {\n             Res::SelfTy(Some(def_id), None) | Res::Def(DefKind::TyParam, def_id) => {\n@@ -394,7 +394,7 @@ fn is_param<'tcx>(tcx: TyCtxt<'tcx>, ast_ty: &hir::Ty, param_id: hir::HirId) ->\n     }\n }\n \n-fn convert_item<'tcx>(tcx: TyCtxt<'tcx>, item_id: hir::HirId) {\n+fn convert_item(tcx: TyCtxt<'_>, item_id: hir::HirId) {\n     let it = tcx.hir().expect_item(item_id);\n     debug!(\"convert: item {} with id {}\", it.ident, it.hir_id);\n     let def_id = tcx.hir().local_def_id_from_hir_id(item_id);\n@@ -476,7 +476,7 @@ fn convert_item<'tcx>(tcx: TyCtxt<'tcx>, item_id: hir::HirId) {\n     }\n }\n \n-fn convert_trait_item<'tcx>(tcx: TyCtxt<'tcx>, trait_item_id: hir::HirId) {\n+fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::HirId) {\n     let trait_item = tcx.hir().expect_trait_item(trait_item_id);\n     let def_id = tcx.hir().local_def_id_from_hir_id(trait_item.hir_id);\n     tcx.generics_of(def_id);\n@@ -497,7 +497,7 @@ fn convert_trait_item<'tcx>(tcx: TyCtxt<'tcx>, trait_item_id: hir::HirId) {\n     tcx.predicates_of(def_id);\n }\n \n-fn convert_impl_item<'tcx>(tcx: TyCtxt<'tcx>, impl_item_id: hir::HirId) {\n+fn convert_impl_item(tcx: TyCtxt<'_>, impl_item_id: hir::HirId) {\n     let def_id = tcx.hir().local_def_id_from_hir_id(impl_item_id);\n     tcx.generics_of(def_id);\n     tcx.type_of(def_id);\n@@ -507,7 +507,7 @@ fn convert_impl_item<'tcx>(tcx: TyCtxt<'tcx>, impl_item_id: hir::HirId) {\n     }\n }\n \n-fn convert_variant_ctor<'tcx>(tcx: TyCtxt<'tcx>, ctor_id: hir::HirId) {\n+fn convert_variant_ctor(tcx: TyCtxt<'_>, ctor_id: hir::HirId) {\n     let def_id = tcx.hir().local_def_id_from_hir_id(ctor_id);\n     tcx.generics_of(def_id);\n     tcx.type_of(def_id);\n@@ -562,8 +562,8 @@ fn convert_enum_variant_types<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, variants:\n     }\n }\n \n-fn convert_variant<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn convert_variant(\n+    tcx: TyCtxt<'_>,\n     variant_did: Option<DefId>,\n     ctor_did: Option<DefId>,\n     ident: Ident,\n@@ -619,7 +619,7 @@ fn convert_variant<'tcx>(\n     )\n }\n \n-fn adt_def<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::AdtDef {\n+fn adt_def(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::AdtDef {\n     use rustc::hir::*;\n \n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n@@ -686,10 +686,10 @@ fn adt_def<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::AdtDef {\n /// Ensures that the super-predicates of the trait with a `DefId`\n /// of `trait_def_id` are converted and stored. This also ensures that\n /// the transitive super-predicates are converted.\n-fn super_predicates_of<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn super_predicates_of(\n+    tcx: TyCtxt<'_>,\n     trait_def_id: DefId,\n-) -> &'tcx ty::GenericPredicates<'tcx> {\n+) -> &ty::GenericPredicates<'_> {\n     debug!(\"super_predicates(trait_def_id={:?})\", trait_def_id);\n     let trait_hir_id = tcx.hir().as_local_hir_id(trait_def_id).unwrap();\n \n@@ -740,7 +740,7 @@ fn super_predicates_of<'tcx>(\n     })\n }\n \n-fn trait_def<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::TraitDef {\n+fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::TraitDef {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let item = tcx.hir().expect_item(hir_id);\n \n@@ -879,7 +879,7 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n     }\n }\n \n-fn generics_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::Generics {\n+fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n     use rustc::hir::*;\n \n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n@@ -1122,7 +1122,7 @@ fn generics_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::Generics {\n     })\n }\n \n-fn report_assoc_ty_on_inherent_impl<'tcx>(tcx: TyCtxt<'tcx>, span: Span) {\n+fn report_assoc_ty_on_inherent_impl(tcx: TyCtxt<'_>, span: Span) {\n     span_err!(\n         tcx.sess,\n         span,\n@@ -1131,15 +1131,15 @@ fn report_assoc_ty_on_inherent_impl<'tcx>(tcx: TyCtxt<'tcx>, span: Span) {\n     );\n }\n \n-fn type_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Ty<'tcx> {\n+fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n     checked_type_of(tcx, def_id, true).unwrap()\n }\n \n /// Same as [`type_of`] but returns [`Option`] instead of failing.\n ///\n /// If you want to fail anyway, you can set the `fail` parameter to true, but in this case,\n /// you'd better just call [`type_of`] directly.\n-pub fn checked_type_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, fail: bool) -> Option<Ty<'tcx>> {\n+pub fn checked_type_of(tcx: TyCtxt<'_>, def_id: DefId, fail: bool) -> Option<Ty<'_>> {\n     use rustc::hir::*;\n \n     let hir_id = match tcx.hir().as_local_hir_id(def_id) {\n@@ -1464,7 +1464,7 @@ pub fn checked_type_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, fail: bool) -> Op\n     })\n }\n \n-fn find_existential_constraints<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Ty<'tcx> {\n+fn find_existential_constraints(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n     use rustc::hir::{ImplItem, Item, TraitItem};\n \n     debug!(\"find_existential_constraints({:?})\", def_id);\n@@ -1682,7 +1682,7 @@ fn find_existential_constraints<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Ty<'t\n     }\n }\n \n-fn fn_sig<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> ty::PolyFnSig<'tcx> {\n+fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n     use rustc::hir::*;\n     use rustc::hir::Node::*;\n \n@@ -1758,7 +1758,7 @@ fn fn_sig<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> ty::PolyFnSig<'tcx> {\n     }\n }\n \n-fn impl_trait_ref<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<ty::TraitRef<'tcx>> {\n+fn impl_trait_ref(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::TraitRef<'_>> {\n     let icx = ItemCtxt::new(tcx, def_id);\n \n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n@@ -1773,7 +1773,7 @@ fn impl_trait_ref<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<ty::TraitRef\n     }\n }\n \n-fn impl_polarity<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> hir::ImplPolarity {\n+fn impl_polarity(tcx: TyCtxt<'_>, def_id: DefId) -> hir::ImplPolarity {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     match tcx.hir().expect_item(hir_id).node {\n         hir::ItemKind::Impl(_, polarity, ..) => polarity,\n@@ -1804,10 +1804,10 @@ fn early_bound_lifetimes_from_generics<'a, 'tcx: 'a>(\n /// Returns a list of type predicates for the definition with ID `def_id`, including inferred\n /// lifetime constraints. This includes all predicates returned by `explicit_predicates_of`, plus\n /// inferred constraints concerning which regions outlive other regions.\n-fn predicates_defined_on<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn predicates_defined_on(\n+    tcx: TyCtxt<'_>,\n     def_id: DefId,\n-) -> &'tcx ty::GenericPredicates<'tcx> {\n+) -> &ty::GenericPredicates<'_> {\n     debug!(\"predicates_defined_on({:?})\", def_id);\n     let mut result = tcx.explicit_predicates_of(def_id);\n     debug!(\n@@ -1834,7 +1834,7 @@ fn predicates_defined_on<'tcx>(\n /// Returns a list of all type predicates (explicit and implicit) for the definition with\n /// ID `def_id`. This includes all predicates returned by `predicates_defined_on`, plus\n /// `Self: Trait` predicates for traits.\n-fn predicates_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::GenericPredicates<'tcx> {\n+fn predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::GenericPredicates<'_> {\n     let mut result = tcx.predicates_defined_on(def_id);\n \n     if tcx.is_trait(def_id) {\n@@ -1861,10 +1861,10 @@ fn predicates_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::GenericPre\n \n /// Returns a list of user-specified type predicates for the definition with ID `def_id`.\n /// N.B., this does not include any implied/inferred constraints.\n-fn explicit_predicates_of<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn explicit_predicates_of(\n+    tcx: TyCtxt<'_>,\n     def_id: DefId,\n-) -> &'tcx ty::GenericPredicates<'tcx> {\n+) -> &ty::GenericPredicates<'_> {\n     use rustc::hir::*;\n     use rustc_data_structures::fx::FxHashSet;\n \n@@ -2271,15 +2271,15 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n     fty\n }\n \n-fn is_foreign_item<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+fn is_foreign_item(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     match tcx.hir().get_if_local(def_id) {\n         Some(Node::ForeignItem(..)) => true,\n         Some(_) => false,\n         _ => bug!(\"is_foreign_item applied to non-local def-id {:?}\", def_id),\n     }\n }\n \n-fn static_mutability<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<hir::Mutability> {\n+fn static_mutability(tcx: TyCtxt<'_>, def_id: DefId) -> Option<hir::Mutability> {\n     match tcx.hir().get_if_local(def_id) {\n         Some(Node::Item(&hir::Item {\n             node: hir::ItemKind::Static(_, mutbl, _), ..\n@@ -2387,7 +2387,7 @@ fn from_target_feature(\n     }\n }\n \n-fn linkage_by_name<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, name: &str) -> Linkage {\n+fn linkage_by_name(tcx: TyCtxt<'_>, def_id: DefId, name: &str) -> Linkage {\n     use rustc::mir::mono::Linkage::*;\n \n     // Use the names from src/llvm/docs/LangRef.rst here. Most types are only\n@@ -2422,7 +2422,7 @@ fn linkage_by_name<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, name: &str) -> Linkag\n     }\n }\n \n-fn codegen_fn_attrs<'tcx>(tcx: TyCtxt<'tcx>, id: DefId) -> CodegenFnAttrs {\n+fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n     let attrs = tcx.get_attrs(id);\n \n     let mut codegen_fn_attrs = CodegenFnAttrs::new();"}, {"sha": "08c7cbc389a6756309c3d7131293a46140c019ea", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -49,7 +49,7 @@ use syntax_pos::Span;\n /// impl<'a> Trait<Foo> for Bar { type X = &'a i32; }\n /// //   ^ 'a is unused and appears in assoc type, error\n /// ```\n-pub fn impl_wf_check<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn impl_wf_check(tcx: TyCtxt<'_>) {\n     // We will tag this as part of the WF check -- logically, it is,\n     // but it's one that we must perform earlier than the rest of\n     // WfCheck.\n@@ -58,7 +58,7 @@ pub fn impl_wf_check<'tcx>(tcx: TyCtxt<'tcx>) {\n     }\n }\n \n-fn check_mod_impl_wf<'tcx>(tcx: TyCtxt<'tcx>, module_def_id: DefId) {\n+fn check_mod_impl_wf(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(\n         module_def_id,\n         &mut ImplWfCheck { tcx }\n@@ -92,8 +92,8 @@ impl ItemLikeVisitor<'tcx> for ImplWfCheck<'tcx> {\n     fn visit_impl_item(&mut self, _impl_item: &'tcx hir::ImplItem) { }\n }\n \n-fn enforce_impl_params_are_constrained<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn enforce_impl_params_are_constrained(\n+    tcx: TyCtxt<'_>,\n     impl_def_id: DefId,\n     impl_item_refs: &[hir::ImplItemRef],\n ) {\n@@ -183,7 +183,7 @@ fn report_unused_parameter(tcx: TyCtxt<'_>, span: Span, kind: &str, name: &str)\n }\n \n /// Enforce that we do not have two items in an impl with the same name.\n-fn enforce_impl_items_are_distinct<'tcx>(tcx: TyCtxt<'tcx>, impl_item_refs: &[hir::ImplItemRef]) {\n+fn enforce_impl_items_are_distinct(tcx: TyCtxt<'_>, impl_item_refs: &[hir::ImplItemRef]) {\n     let mut seen_type_items = FxHashMap::default();\n     let mut seen_value_items = FxHashMap::default();\n     for impl_item_ref in impl_item_refs {"}, {"sha": "56c7544eaf57a71c4f1e0b361ce8f9634dfd7c3d", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -161,7 +161,7 @@ fn require_same_types<'tcx>(\n     })\n }\n \n-fn check_main_fn_ty<'tcx>(tcx: TyCtxt<'tcx>, main_def_id: DefId) {\n+fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n     let main_id = tcx.hir().as_local_hir_id(main_def_id).unwrap();\n     let main_span = tcx.def_span(main_def_id);\n     let main_t = tcx.type_of(main_def_id);\n@@ -226,7 +226,7 @@ fn check_main_fn_ty<'tcx>(tcx: TyCtxt<'tcx>, main_def_id: DefId) {\n     }\n }\n \n-fn check_start_fn_ty<'tcx>(tcx: TyCtxt<'tcx>, start_def_id: DefId) {\n+fn check_start_fn_ty(tcx: TyCtxt<'_>, start_def_id: DefId) {\n     let start_id = tcx.hir().as_local_hir_id(start_def_id).unwrap();\n     let start_span = tcx.def_span(start_def_id);\n     let start_t = tcx.type_of(start_def_id);\n@@ -283,7 +283,7 @@ fn check_start_fn_ty<'tcx>(tcx: TyCtxt<'tcx>, start_def_id: DefId) {\n     }\n }\n \n-fn check_for_entry_fn<'tcx>(tcx: TyCtxt<'tcx>) {\n+fn check_for_entry_fn(tcx: TyCtxt<'_>) {\n     match tcx.entry_fn(LOCAL_CRATE) {\n         Some((def_id, EntryFnType::Main)) => check_main_fn_ty(tcx, def_id),\n         Some((def_id, EntryFnType::Start)) => check_start_fn_ty(tcx, def_id),\n@@ -300,7 +300,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     impl_wf_check::provide(providers);\n }\n \n-pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx>) -> Result<(), ErrorReported> {\n+pub fn check_crate(tcx: TyCtxt<'_>) -> Result<(), ErrorReported> {\n     tcx.sess.profiler(|p| p.start_activity(\"type-check crate\"));\n \n     // this ensures that later parts of type checking can assume that items"}, {"sha": "6b8f6fccd40d73fba36dbadffc54f2d3658d9496", "filename": "src/librustc_typeck/outlives/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -20,10 +20,10 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn inferred_outlives_of<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn inferred_outlives_of(\n+    tcx: TyCtxt<'_>,\n     item_def_id: DefId,\n-) -> &'tcx [ty::Predicate<'tcx>] {\n+) -> &[ty::Predicate<'_>] {\n     let id = tcx\n         .hir()\n         .as_local_hir_id(item_def_id)\n@@ -70,10 +70,10 @@ fn inferred_outlives_of<'tcx>(\n     }\n }\n \n-fn inferred_outlives_crate<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+fn inferred_outlives_crate(\n+    tcx: TyCtxt<'_>,\n     crate_num: CrateNum,\n-) -> &'tcx CratePredicatesMap<'tcx> {\n+) -> &CratePredicatesMap<'_> {\n     assert_eq!(crate_num, LOCAL_CRATE);\n \n     // Compute a map from each struct/enum/union S to the **explicit**"}, {"sha": "5ddf95b0f80c21ab5c1d14f62a77beb578fe214a", "filename": "src/librustc_typeck/outlives/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -3,7 +3,7 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::ty::TyCtxt;\n use syntax::symbol::sym;\n \n-pub fn test_inferred_outlives<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn test_inferred_outlives(tcx: TyCtxt<'_>) {\n     tcx.hir()\n        .krate()\n        .visit_all_item_likes(&mut OutlivesTest { tcx });"}, {"sha": "783890da639f477ee40b64fdcdd1d3cddd155ae1", "filename": "src/librustc_typeck/outlives/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_typeck%2Foutlives%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_typeck%2Foutlives%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Futils.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -125,7 +125,7 @@ pub fn insert_outlives_predicate<'tcx>(\n     }\n }\n \n-fn is_free_region<'tcx>(tcx: TyCtxt<'tcx>, region: Region<'_>) -> bool {\n+fn is_free_region(tcx: TyCtxt<'_>, region: Region<'_>) -> bool {\n     // First, screen for regions that might appear in a type header.\n     match region {\n         // These correspond to `T: 'a` relationships:"}, {"sha": "343d7ea656fbb27d532d63ed696f1db19c66dca7", "filename": "src/librustc_typeck/variance/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -34,15 +34,15 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn crate_variances<'tcx>(tcx: TyCtxt<'tcx>, crate_num: CrateNum) -> &'tcx CrateVariancesMap<'tcx> {\n+fn crate_variances(tcx: TyCtxt<'_>, crate_num: CrateNum) -> &CrateVariancesMap<'_> {\n     assert_eq!(crate_num, LOCAL_CRATE);\n     let mut arena = arena::TypedArena::default();\n     let terms_cx = terms::determine_parameters_to_be_inferred(tcx, &mut arena);\n     let constraints_cx = constraints::add_constraints_from_crate(terms_cx);\n     tcx.arena.alloc(solve::solve_constraints(constraints_cx))\n }\n \n-fn variances_of<'tcx>(tcx: TyCtxt<'tcx>, item_def_id: DefId) -> &'tcx [ty::Variance] {\n+fn variances_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[ty::Variance] {\n     let id = tcx.hir().as_local_hir_id(item_def_id).expect(\"expected local def-id\");\n     let unsupported = || {\n         // Variance not relevant."}, {"sha": "0c7ebc34e8f6de8785ef6be04b2cca1dfc9043f7", "filename": "src/librustc_typeck/variance/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -3,7 +3,7 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::ty::TyCtxt;\n use syntax::symbol::sym;\n \n-pub fn test_variance<'tcx>(tcx: TyCtxt<'tcx>) {\n+pub fn test_variance(tcx: TyCtxt<'_>) {\n     tcx.hir().krate().visit_all_item_likes(&mut VarianceTest { tcx });\n }\n "}, {"sha": "50a647f244db55a563dab1bbf447a79d4fd442c5", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -17,7 +17,7 @@ use crate::html::markdown::{ErrorCodes, IdMap, Markdown, MarkdownWithToc, find_t\n use crate::test::{TestOptions, Collector};\n \n /// Separate any lines at the start of the file that begin with `# ` or `%`.\n-fn extract_leading_metadata<'a>(s: &'a str) -> (Vec<&'a str>, &'a str) {\n+fn extract_leading_metadata(s: &str) -> (Vec<&str>, &str) {\n     let mut metadata = Vec::new();\n     let mut count = 0;\n "}, {"sha": "726306d60ce1e1dbb9239e8ebd93f36fc8de7206", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -1031,7 +1031,7 @@ impl Json {\n \n      /// If the Json value is an Object, returns the value associated with the provided key.\n     /// Otherwise, returns None.\n-    pub fn find<'a>(&'a self, key: &str) -> Option<&'a Json>{\n+    pub fn find(&self, key: &str) -> Option<&Json> {\n         match *self {\n             Json::Object(ref map) => map.get(key),\n             _ => None\n@@ -1052,7 +1052,7 @@ impl Json {\n     /// If the Json value is an Object, performs a depth-first search until\n     /// a value associated with the provided key is found. If no value is found\n     /// or the Json value is not an Object, returns `None`.\n-    pub fn search<'a>(&'a self, key: &str) -> Option<&'a Json> {\n+    pub fn search(&self, key: &str) -> Option<&Json> {\n         match self {\n             &Json::Object(ref map) => {\n                 match map.get(key) {"}, {"sha": "637614a18bcc339a07f76cfd40bff8927a0e8171", "filename": "src/libsyntax_ext/assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibsyntax_ext%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d28832dde96e7ed4e5124ce26f7ff03327925a56/src%2Flibsyntax_ext%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fassert.rs?ref=d28832dde96e7ed4e5124ce26f7ff03327925a56", "patch": "@@ -131,7 +131,7 @@ fn parse_assert<'a>(\n     Ok(Assert { cond_expr, custom_message })\n }\n \n-fn parse_custom_message<'a>(parser: &mut Parser<'a>) -> Option<TokenStream> {\n+fn parse_custom_message(parser: &mut Parser<'_>) -> Option<TokenStream> {\n     let ts = parser.parse_tokens();\n     if !ts.is_empty() {\n         Some(ts)"}]}