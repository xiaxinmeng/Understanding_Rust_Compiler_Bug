{"sha": "6092828d1f432bb313818e7cfab961c0e494f69e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwOTI4MjhkMWY0MzJiYjMxMzgxOGU3Y2ZhYjk2MWMwZTQ5NGY2OWU=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2020-09-04T02:59:51Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2020-09-04T04:13:56Z"}, "message": "Add `[T; N]: TryFrom<Vec<T>>`\n\nThis is very similar to the existing `Box<[T; N]>: TryFrom<Box<[T]>>`, but allows avoiding the `shrink_to_fit` if you have a vector and not a boxed slice.", "tree": {"sha": "932fb7801ed1a3150932b3bae4b766dab336707b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/932fb7801ed1a3150932b3bae4b766dab336707b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6092828d1f432bb313818e7cfab961c0e494f69e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6092828d1f432bb313818e7cfab961c0e494f69e", "html_url": "https://github.com/rust-lang/rust/commit/6092828d1f432bb313818e7cfab961c0e494f69e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6092828d1f432bb313818e7cfab961c0e494f69e/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d0f6b113047b2cf9afbde990cee30fd5b866469", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d0f6b113047b2cf9afbde990cee30fd5b866469", "html_url": "https://github.com/rust-lang/rust/commit/0d0f6b113047b2cf9afbde990cee30fd5b866469"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "b6d923daaf2abfffef994dedb3ee7ab846d1f3ce", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/6092828d1f432bb313818e7cfab961c0e494f69e/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6092828d1f432bb313818e7cfab961c0e494f69e/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=6092828d1f432bb313818e7cfab961c0e494f69e", "patch": "@@ -55,6 +55,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use core::cmp::{self, Ordering};\n+use core::convert::TryFrom;\n use core::fmt;\n use core::hash::{Hash, Hasher};\n use core::intrinsics::{arith_offset, assume};\n@@ -2771,6 +2772,57 @@ impl From<&str> for Vec<u8> {\n     }\n }\n \n+#[stable(feature = \"array_try_from_vec\", since = \"1.47.0\")]\n+impl<T, const N: usize> TryFrom<Vec<T>> for [T; N] {\n+    type Error = Vec<T>;\n+\n+    /// Gets the entire contents of the `Vec<T>` as an array,\n+    /// if its size exactly matches that of the requested array.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::convert::TryInto;\n+    /// assert_eq!(vec![1, 2, 3].try_into(), Ok([1, 2, 3]));\n+    /// assert_eq!(<Vec<i32>>::new().try_into(), Ok([]));\n+    /// ```\n+    ///\n+    /// If the length doesn't match, the input comes back in `Err`:\n+    /// ```\n+    /// use std::convert::TryInto;\n+    /// let r: Result<[i32; 4], _> = (0..10).collect::<Vec<_>>().try_into();\n+    /// assert_eq!(r, Err(vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9]));\n+    /// ```\n+    ///\n+    /// If you're fine with just getting a prefix of the `Vec<T>`,\n+    /// you can call [`.truncate(N)`](Vec::truncate) first.\n+    /// ```\n+    /// use std::convert::TryInto;\n+    /// let mut v = String::from(\"hello world\").into_bytes();\n+    /// v.sort();\n+    /// v.truncate(2);\n+    /// let [a, b]: [_; 2] = v.try_into().unwrap();\n+    /// assert_eq!(a, b' ');\n+    /// assert_eq!(b, b'd');\n+    /// ```\n+    fn try_from(mut vec: Vec<T>) -> Result<[T; N], Vec<T>> {\n+        if vec.len() != N {\n+            return Err(vec);\n+        }\n+\n+        // SAFETY: `.set_len(0)` is always sound.\n+        unsafe { vec.set_len(0) };\n+\n+        // SAFETY: A `Vec`'s pointer is always aligned property, and\n+        // the alignment the array needs is the same as the items.\n+        // We checked earlier that we have sufficient items.\n+        // The items will not double-drop as the `set_len`\n+        // tells the `Vec` not to also drop them.\n+        let array = unsafe { ptr::read(vec.as_ptr() as *const [T; N]) };\n+        Ok(array)\n+    }\n+}\n+\n ////////////////////////////////////////////////////////////////////////////////\n // Clone-on-write\n ////////////////////////////////////////////////////////////////////////////////"}]}