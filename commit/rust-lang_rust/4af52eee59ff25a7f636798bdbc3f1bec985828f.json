{"sha": "4af52eee59ff25a7f636798bdbc3f1bec985828f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZjUyZWVlNTlmZjI1YTdmNjM2Nzk4YmRiYzNmMWJlYzk4NTgyOGY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-10-31T09:40:15Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-05T14:15:28Z"}, "message": "Repair various cases where values of distinct types were being operated\nupon (e.g., `&int` added to `int`).", "tree": {"sha": "c2755fd2d374ba8a6fb303d8c977e58be720c8dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2755fd2d374ba8a6fb303d8c977e58be720c8dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4af52eee59ff25a7f636798bdbc3f1bec985828f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4af52eee59ff25a7f636798bdbc3f1bec985828f", "html_url": "https://github.com/rust-lang/rust/commit/4af52eee59ff25a7f636798bdbc3f1bec985828f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4af52eee59ff25a7f636798bdbc3f1bec985828f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98958bcaf403354dff0a390db0206e2e03336180", "url": "https://api.github.com/repos/rust-lang/rust/commits/98958bcaf403354dff0a390db0206e2e03336180", "html_url": "https://github.com/rust-lang/rust/commit/98958bcaf403354dff0a390db0206e2e03336180"}], "stats": {"total": 71, "additions": 56, "deletions": 15}, "files": [{"sha": "3e93430eb6937cdf7b64fa0399504e592867a8ca", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4af52eee59ff25a7f636798bdbc3f1bec985828f/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af52eee59ff25a7f636798bdbc3f1bec985828f/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=4af52eee59ff25a7f636798bdbc3f1bec985828f", "patch": "@@ -132,7 +132,7 @@ impl Drop for Arena {\n \n #[inline]\n fn round_up(base: uint, align: uint) -> uint {\n-    (base.checked_add(&(align - 1))).unwrap() & !(&(align - 1))\n+    (base.checked_add(&(align - 1))).unwrap() & !(align - 1)\n }\n \n // Walk down a chunk, running the destructors for any objects stored"}, {"sha": "b29d7d33782c22817d881e1613b79d5838da6597", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4af52eee59ff25a7f636798bdbc3f1bec985828f/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af52eee59ff25a7f636798bdbc3f1bec985828f/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=4af52eee59ff25a7f636798bdbc3f1bec985828f", "patch": "@@ -919,7 +919,7 @@ impl<T> Vec<T> {\n     ///\n     /// ```\n     /// let mut vec = vec![1i, 2, 3, 4];\n-    /// vec.retain(|x| x%2 == 0);\n+    /// vec.retain(|&x| x%2 == 0);\n     /// assert_eq!(vec, vec![2, 4]);\n     /// ```\n     #[unstable = \"the closure argument may become an unboxed closure\"]"}, {"sha": "b787de4423aac71b30ff37fe490be3792b92eaf0", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4af52eee59ff25a7f636798bdbc3f1bec985828f/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af52eee59ff25a7f636798bdbc3f1bec985828f/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=4af52eee59ff25a7f636798bdbc3f1bec985828f", "patch": "@@ -787,8 +787,8 @@ impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n     /// use std::uint;\n     ///\n     /// let v = vec!(1u, 2u);\n-    /// let res: Option<Vec<uint>> = v.iter().map(|x: &uint|\n-    ///     if *x == uint::MAX { None }\n+    /// let res: Option<Vec<uint>> = v.iter().map(|&x: &uint|\n+    ///     if x == uint::MAX { None }\n     ///     else { Some(x + 1) }\n     /// ).collect();\n     /// assert!(res == Some(vec!(2u, 3u)));"}, {"sha": "2ad5521bb76cd044b332f0e303a71bb1da1cc3df", "filename": "src/libcore/result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4af52eee59ff25a7f636798bdbc3f1bec985828f/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af52eee59ff25a7f636798bdbc3f1bec985828f/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=4af52eee59ff25a7f636798bdbc3f1bec985828f", "patch": "@@ -894,8 +894,8 @@ impl<A, E, V: FromIterator<A>> FromIterator<Result<A, E>> for Result<V, E> {\n     /// use std::uint;\n     ///\n     /// let v = vec!(1u, 2u);\n-    /// let res: Result<Vec<uint>, &'static str> = v.iter().map(|x: &uint|\n-    ///     if *x == uint::MAX { Err(\"Overflow!\") }\n+    /// let res: Result<Vec<uint>, &'static str> = v.iter().map(|&x: &uint|\n+    ///     if x == uint::MAX { Err(\"Overflow!\") }\n     ///     else { Ok(x + 1) }\n     /// ).collect();\n     /// assert!(res == Ok(vec!(2u, 3u)));"}, {"sha": "aeab18ca05e30565d553bcd5257f433b8cc448a3", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4af52eee59ff25a7f636798bdbc3f1bec985828f/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af52eee59ff25a7f636798bdbc3f1bec985828f/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=4af52eee59ff25a7f636798bdbc3f1bec985828f", "patch": "@@ -356,7 +356,7 @@ fn test_iterator_size_hint() {\n     assert_eq!(vi.zip(v2.iter()).size_hint(), (3, Some(3)));\n     assert_eq!(vi.scan(0i, |_,_| Some(0i)).size_hint(), (0, Some(10)));\n     assert_eq!(vi.filter(|_| false).size_hint(), (0, Some(10)));\n-    assert_eq!(vi.map(|i| i+1).size_hint(), (10, Some(10)));\n+    assert_eq!(vi.map(|&i| i+1).size_hint(), (10, Some(10)));\n     assert_eq!(vi.filter_map(|_| Some(0i)).size_hint(), (0, Some(10)));\n }\n \n@@ -388,9 +388,9 @@ fn test_any() {\n #[test]\n fn test_find() {\n     let v: &[int] = &[1i, 3, 9, 27, 103, 14, 11];\n-    assert_eq!(*v.iter().find(|x| *x & 1 == 0).unwrap(), 14);\n-    assert_eq!(*v.iter().find(|x| *x % 3 == 0).unwrap(), 3);\n-    assert!(v.iter().find(|x| *x % 12 == 0).is_none());\n+    assert_eq!(*v.iter().find(|&&x| x & 1 == 0).unwrap(), 14);\n+    assert_eq!(*v.iter().find(|&&x| x % 3 == 0).unwrap(), 3);\n+    assert!(v.iter().find(|&&x| x % 12 == 0).is_none());\n }\n \n #[test]"}, {"sha": "d8023dd3e4e3bcf2c1be18d6b685fedc9fe2ba8d", "filename": "src/libstd/bitflags.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4af52eee59ff25a7f636798bdbc3f1bec985828f/src%2Flibstd%2Fbitflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af52eee59ff25a7f636798bdbc3f1bec985828f/src%2Flibstd%2Fbitflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitflags.rs?ref=4af52eee59ff25a7f636798bdbc3f1bec985828f", "patch": "@@ -177,13 +177,13 @@ macro_rules! bitflags {\n             /// Returns `true` if there are flags common to both `self` and `other`.\n             #[inline]\n             pub fn intersects(&self, other: $BitFlags) -> bool {\n-                !(self & other).is_empty()\n+                !(*self & other).is_empty()\n             }\n \n             /// Returns `true` all of the flags in `other` are contained within `self`.\n             #[inline]\n             pub fn contains(&self, other: $BitFlags) -> bool {\n-                (self & other) == other\n+                (*self & other) == other\n             }\n \n             /// Inserts the specified flags in-place."}, {"sha": "c3adae8cff83930253b76e3584abe0326158774d", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4af52eee59ff25a7f636798bdbc3f1bec985828f/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af52eee59ff25a7f636798bdbc3f1bec985828f/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=4af52eee59ff25a7f636798bdbc3f1bec985828f", "patch": "@@ -319,7 +319,7 @@ impl fmt::Show for Duration {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         // technically speaking, negative duration is not valid ISO 8601,\n         // but we need to print it anyway.\n-        let (abs, sign) = if self.secs < 0 { (-self, \"-\") } else { (*self, \"\") };\n+        let (abs, sign) = if self.secs < 0 { (-*self, \"-\") } else { (*self, \"\") };\n \n         let days = abs.secs / SECS_PER_DAY;\n         let secs = abs.secs - days * SECS_PER_DAY;"}, {"sha": "ac3574f5a03ee55859db873ddbfbcc9f9448c162", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4af52eee59ff25a7f636798bdbc3f1bec985828f/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af52eee59ff25a7f636798bdbc3f1bec985828f/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=4af52eee59ff25a7f636798bdbc3f1bec985828f", "patch": "@@ -96,7 +96,7 @@ impl Add<Duration, Timespec> for Timespec {\n         let d_sec = other.num_seconds();\n         // It is safe to unwrap the nanoseconds, because there cannot be\n         // more than one second left, which fits in i64 and in i32.\n-        let d_nsec = (other - Duration::seconds(d_sec))\n+        let d_nsec = (*other - Duration::seconds(d_sec))\n                      .num_nanoseconds().unwrap() as i32;\n         let mut sec = self.sec + d_sec;\n         let mut nsec = self.nsec + d_nsec;"}, {"sha": "47e1969172d2f0cb49bd3abe2dab0f0ae0ad587b", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4af52eee59ff25a7f636798bdbc3f1bec985828f/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af52eee59ff25a7f636798bdbc3f1bec985828f/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=4af52eee59ff25a7f636798bdbc3f1bec985828f", "patch": "@@ -290,7 +290,7 @@ fn search(\n     let masks_at = &masks[i];\n \n     // for every unused piece\n-    for id in range(0u, 10).filter(|id| board & (1 << (id + 50)) == 0) {\n+    for id in range(0u, 10).filter(|&id| board & (1 << (id + 50)) == 0) {\n         // for each mask that fits on the board\n         for m in masks_at[id].iter().filter(|&m| board & *m == 0) {\n             // This check is too costly."}, {"sha": "fc79e4f0edb368035c5bd6693480836dae27e3cf", "filename": "src/test/run-pass/operator-multidispatch.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4af52eee59ff25a7f636798bdbc3f1bec985828f/src%2Ftest%2Frun-pass%2Foperator-multidispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af52eee59ff25a7f636798bdbc3f1bec985828f/src%2Ftest%2Frun-pass%2Foperator-multidispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-multidispatch.rs?ref=4af52eee59ff25a7f636798bdbc3f1bec985828f", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we can overload the `+` operator for points so that two\n+// points can be added, and a point can be added to an integer.\n+\n+use std::ops;\n+\n+#[deriving(Show,PartialEq,Eq)]\n+struct Point {\n+    x: int,\n+    y: int\n+}\n+\n+impl ops::Add<Point,Point> for Point {\n+    fn add(&self, other: &Point) -> Point {\n+        Point {x: self.x + (*other).x, y: self.y + (*other).y}\n+    }\n+}\n+\n+impl ops::Add<int,Point> for Point {\n+    fn add(&self, &other: &int) -> Point {\n+        Point {x: self.x + other,\n+               y: self.y + other}\n+    }\n+}\n+\n+pub fn main() {\n+    let mut p = Point {x: 10, y: 20};\n+    p = p + Point {x: 101, y: 102};\n+    assert_eq!(p, Point {x: 111, y: 122});\n+    p = p + 1;\n+    assert_eq!(p, Point {x: 112, y: 123});\n+}"}]}