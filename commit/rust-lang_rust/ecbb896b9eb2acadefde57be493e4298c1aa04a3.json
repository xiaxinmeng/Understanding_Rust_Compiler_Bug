{"sha": "ecbb896b9eb2acadefde57be493e4298c1aa04a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjYmI4OTZiOWViMmFjYWRlZmRlNTdiZTQ5M2U0Mjk4YzFhYTA0YTM=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2017-05-15T01:29:18Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2017-06-21T03:26:22Z"}, "message": "Add `Read::initializer`.\n\nThis is an API that allows types to indicate that they can be passed\nbuffers of uninitialized memory which can improve performance.", "tree": {"sha": "f46da3b3294c60abfb2343638c79f51124ac95c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f46da3b3294c60abfb2343638c79f51124ac95c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecbb896b9eb2acadefde57be493e4298c1aa04a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecbb896b9eb2acadefde57be493e4298c1aa04a3", "html_url": "https://github.com/rust-lang/rust/commit/ecbb896b9eb2acadefde57be493e4298c1aa04a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecbb896b9eb2acadefde57be493e4298c1aa04a3/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "445077963c55297ef1e196a3525723090fe80b22", "url": "https://api.github.com/repos/rust-lang/rust/commits/445077963c55297ef1e196a3525723090fe80b22", "html_url": "https://github.com/rust-lang/rust/commit/445077963c55297ef1e196a3525723090fe80b22"}], "stats": {"total": 491, "additions": 222, "deletions": 269}, "files": [{"sha": "898fe58eeee536bff5ae749271d4148e712576ea", "filename": "src/doc/unstable-book/src/library-features/read-initializer.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fread-initializer.md", "raw_url": "https://github.com/rust-lang/rust/raw/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fread-initializer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fread-initializer.md?ref=ecbb896b9eb2acadefde57be493e4298c1aa04a3", "patch": "@@ -0,0 +1,7 @@\n+# `read_initializer`\n+\n+The tracking issue for this feature is: [#42788]\n+\n+[#0]: https://github.com/rust-lang/rust/issues/42788\n+\n+------------------------"}, {"sha": "5b8c0c339900dcfa06ecf56792d2a092b749171d", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=ecbb896b9eb2acadefde57be493e4298c1aa04a3", "patch": "@@ -19,7 +19,7 @@\n \n use fmt;\n use ffi::OsString;\n-use io::{self, SeekFrom, Seek, Read, Write};\n+use io::{self, SeekFrom, Seek, Read, Initializer, Write};\n use path::{Path, PathBuf};\n use sys::fs as fs_imp;\n use sys_common::{AsInnerMut, FromInner, AsInner, IntoInner};\n@@ -446,8 +446,10 @@ impl Read for File {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         self.inner.read(buf)\n     }\n-    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        self.inner.read_to_end(buf)\n+\n+    #[inline]\n+    unsafe fn initializer(&self) -> Initializer {\n+        Initializer::nop()\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -468,8 +470,10 @@ impl<'a> Read for &'a File {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         self.inner.read(buf)\n     }\n-    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        self.inner.read_to_end(buf)\n+\n+    #[inline]\n+    unsafe fn initializer(&self) -> Initializer {\n+        Initializer::nop()\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "296ee78aadb22137e109e3f534f1b04cb5e394fa", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=ecbb896b9eb2acadefde57be493e4298c1aa04a3", "patch": "@@ -15,7 +15,7 @@ use io::prelude::*;\n use cmp;\n use error;\n use fmt;\n-use io::{self, DEFAULT_BUF_SIZE, Error, ErrorKind, SeekFrom};\n+use io::{self, Initializer, DEFAULT_BUF_SIZE, Error, ErrorKind, SeekFrom};\n use memchr;\n \n /// The `BufReader` struct adds buffering to any reader.\n@@ -92,11 +92,16 @@ impl<R: Read> BufReader<R> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn with_capacity(cap: usize, inner: R) -> BufReader<R> {\n-        BufReader {\n-            inner: inner,\n-            buf: vec![0; cap].into_boxed_slice(),\n-            pos: 0,\n-            cap: 0,\n+        unsafe {\n+            let mut buffer = Vec::with_capacity(cap);\n+            buffer.set_len(cap);\n+            inner.initializer().initialize(&mut buffer);\n+            BufReader {\n+                inner: inner,\n+                buf: buffer.into_boxed_slice(),\n+                pos: 0,\n+                cap: 0,\n+            }\n         }\n     }\n \n@@ -180,6 +185,11 @@ impl<R: Read> Read for BufReader<R> {\n         self.consume(nread);\n         Ok(nread)\n     }\n+\n+    // we can't skip unconditionally because of the large buffer case in read.\n+    unsafe fn initializer(&self) -> Initializer {\n+        self.inner.initializer()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "616b4f47ed3eaafde0345b29dec4688ae773f6c0", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=ecbb896b9eb2acadefde57be493e4298c1aa04a3", "patch": "@@ -12,7 +12,7 @@ use io::prelude::*;\n \n use core::convert::TryInto;\n use cmp;\n-use io::{self, SeekFrom, Error, ErrorKind};\n+use io::{self, Initializer, SeekFrom, Error, ErrorKind};\n \n /// A `Cursor` wraps another type and provides it with a\n /// [`Seek`] implementation.\n@@ -229,6 +229,11 @@ impl<T> Read for Cursor<T> where T: AsRef<[u8]> {\n         self.pos += n as u64;\n         Ok(n)\n     }\n+\n+    #[inline]\n+    unsafe fn initializer(&self) -> Initializer {\n+        Initializer::nop()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "d6b41ceda439245fed9c5f09b6e5f9d24595e20b", "filename": "src/libstd/io/impls.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fimpls.rs?ref=ecbb896b9eb2acadefde57be493e4298c1aa04a3", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use cmp;\n-use io::{self, SeekFrom, Read, Write, Seek, BufRead, Error, ErrorKind};\n+use io::{self, SeekFrom, Read, Initializer, Write, Seek, BufRead, Error, ErrorKind};\n use fmt;\n use mem;\n \n@@ -23,6 +23,11 @@ impl<'a, R: Read + ?Sized> Read for &'a mut R {\n         (**self).read(buf)\n     }\n \n+    #[inline]\n+    unsafe fn initializer(&self) -> Initializer {\n+        (**self).initializer()\n+    }\n+\n     #[inline]\n     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n         (**self).read_to_end(buf)\n@@ -87,6 +92,11 @@ impl<R: Read + ?Sized> Read for Box<R> {\n         (**self).read(buf)\n     }\n \n+    #[inline]\n+    unsafe fn initializer(&self) -> Initializer {\n+        (**self).initializer()\n+    }\n+\n     #[inline]\n     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n         (**self).read_to_end(buf)\n@@ -171,6 +181,11 @@ impl<'a> Read for &'a [u8] {\n         Ok(amt)\n     }\n \n+    #[inline]\n+    unsafe fn initializer(&self) -> Initializer {\n+        Initializer::nop()\n+    }\n+\n     #[inline]\n     fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {\n         if buf.len() > self.len() {"}, {"sha": "680a5f32ae223ed31bbe35b4c6c06887aa5ada10", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 109, "deletions": 19, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=ecbb896b9eb2acadefde57be493e4298c1aa04a3", "patch": "@@ -275,6 +275,7 @@ use fmt;\n use result;\n use str;\n use memchr;\n+use ptr;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::buffered::{BufReader, BufWriter, LineWriter};\n@@ -292,7 +293,7 @@ pub use self::stdio::{stdin, stdout, stderr, Stdin, Stdout, Stderr};\n pub use self::stdio::{StdoutLock, StderrLock, StdinLock};\n #[unstable(feature = \"print_internals\", issue = \"0\")]\n pub use self::stdio::{_print, _eprint};\n-#[unstable(feature = \"libstd_io_internals\", issue = \"0\")]\n+#[unstable(feature = \"libstd_io_internals\", issue = \"42788\")]\n #[doc(no_inline, hidden)]\n pub use self::stdio::{set_panic, set_print};\n \n@@ -307,6 +308,14 @@ mod stdio;\n \n const DEFAULT_BUF_SIZE: usize = ::sys_common::io::DEFAULT_BUF_SIZE;\n \n+struct Guard<'a> { buf: &'a mut Vec<u8>, len: usize }\n+\n+impl<'a> Drop for Guard<'a> {\n+    fn drop(&mut self) {\n+        unsafe { self.buf.set_len(self.len); }\n+    }\n+}\n+\n // A few methods below (read_to_string, read_line) will append data into a\n // `String` buffer, but we need to be pretty careful when doing this. The\n // implementation will just call `.as_mut_vec()` and then delegate to a\n@@ -328,23 +337,16 @@ const DEFAULT_BUF_SIZE: usize = ::sys_common::io::DEFAULT_BUF_SIZE;\n fn append_to_string<F>(buf: &mut String, f: F) -> Result<usize>\n     where F: FnOnce(&mut Vec<u8>) -> Result<usize>\n {\n-    struct Guard<'a> { s: &'a mut Vec<u8>, len: usize }\n-        impl<'a> Drop for Guard<'a> {\n-        fn drop(&mut self) {\n-            unsafe { self.s.set_len(self.len); }\n-        }\n-    }\n-\n     unsafe {\n-        let mut g = Guard { len: buf.len(), s: buf.as_mut_vec() };\n-        let ret = f(g.s);\n-        if str::from_utf8(&g.s[g.len..]).is_err() {\n+        let mut g = Guard { len: buf.len(), buf: buf.as_mut_vec() };\n+        let ret = f(g.buf);\n+        if str::from_utf8(&g.buf[g.len..]).is_err() {\n             ret.and_then(|_| {\n                 Err(Error::new(ErrorKind::InvalidData,\n                                \"stream did not contain valid UTF-8\"))\n             })\n         } else {\n-            g.len = g.s.len();\n+            g.len = g.buf.len();\n             ret\n         }\n     }\n@@ -356,25 +358,32 @@ fn append_to_string<F>(buf: &mut String, f: F) -> Result<usize>\n // of data to return. Simply tacking on an extra DEFAULT_BUF_SIZE space every\n // time is 4,500 times (!) slower than this if the reader has a very small\n // amount of data to return.\n+//\n+// Because we're extending the buffer with uninitialized data for trusted\n+// readers, we need to make sure to truncate that if any of this panics.\n fn read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize> {\n     let start_len = buf.len();\n-    let mut len = start_len;\n+    let mut g = Guard { len: buf.len(), buf: buf };\n     let mut new_write_size = 16;\n     let ret;\n     loop {\n-        if len == buf.len() {\n+        if g.len == g.buf.len() {\n             if new_write_size < DEFAULT_BUF_SIZE {\n                 new_write_size *= 2;\n             }\n-            buf.resize(len + new_write_size, 0);\n+            unsafe {\n+                g.buf.reserve(new_write_size);\n+                g.buf.set_len(g.len + new_write_size);\n+                r.initializer().initialize(&mut g.buf[g.len..]);\n+            }\n         }\n \n-        match r.read(&mut buf[len..]) {\n+        match r.read(&mut g.buf[g.len..]) {\n             Ok(0) => {\n-                ret = Ok(len - start_len);\n+                ret = Ok(g.len - start_len);\n                 break;\n             }\n-            Ok(n) => len += n,\n+            Ok(n) => g.len += n,\n             Err(ref e) if e.kind() == ErrorKind::Interrupted => {}\n             Err(e) => {\n                 ret = Err(e);\n@@ -383,7 +392,6 @@ fn read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize>\n         }\n     }\n \n-    buf.truncate(len);\n     ret\n }\n \n@@ -494,6 +502,31 @@ pub trait Read {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn read(&mut self, buf: &mut [u8]) -> Result<usize>;\n \n+    /// Determines if this `Read`er can work with buffers of uninitialized\n+    /// memory.\n+    ///\n+    /// The default implementation returns an initializer which will zero\n+    /// buffers.\n+    ///\n+    /// If a `Read`er guarantees that it can work properly with uninitialized\n+    /// memory, it should call `Initializer::nop()`. See the documentation for\n+    /// `Initializer` for details.\n+    ///\n+    /// The behavior of this method must be independent of the state of the\n+    /// `Read`er - the method only takes `&self` so that it can be used through\n+    /// trait objects.\n+    ///\n+    /// # Unsafety\n+    ///\n+    /// This method is unsafe because a `Read`er could otherwise return a\n+    /// non-zeroing `Initializer` from another `Read` type without an `unsafe`\n+    /// block.\n+    #[unstable(feature = \"read_initializer\", issue = \"42788\")]\n+    #[inline]\n+    unsafe fn initializer(&self) -> Initializer {\n+        Initializer::zeroing()\n+    }\n+\n     /// Read all bytes until EOF in this source, placing them into `buf`.\n     ///\n     /// All bytes read from this source will be appended to the specified buffer\n@@ -829,6 +862,50 @@ pub trait Read {\n     }\n }\n \n+/// A type used to conditionally initialize buffers passed to `Read` methods.\n+#[unstable(feature = \"read_initializer\", issue = \"42788\")]\n+#[derive(Debug)]\n+pub struct Initializer(bool);\n+\n+impl Initializer {\n+    /// Returns a new `Initializer` which will zero out buffers.\n+    #[unstable(feature = \"read_initializer\", issue = \"42788\")]\n+    #[inline]\n+    pub fn zeroing() -> Initializer {\n+        Initializer(true)\n+    }\n+\n+    /// Returns a new `Initializer` which will not zero out buffers.\n+    ///\n+    /// # Unsafety\n+    ///\n+    /// This may only be called by `Read`ers which guarantee that they will not\n+    /// read from buffers passed to `Read` methods, and that the return value of\n+    /// the method accurately reflects the number of bytes that have been\n+    /// written to the head of the buffer.\n+    #[unstable(feature = \"read_initializer\", issue = \"42788\")]\n+    #[inline]\n+    pub unsafe fn nop() -> Initializer {\n+        Initializer(false)\n+    }\n+\n+    /// Indicates if a buffer should be initialized.\n+    #[unstable(feature = \"read_initializer\", issue = \"42788\")]\n+    #[inline]\n+    pub fn should_initialize(&self) -> bool {\n+        self.0\n+    }\n+\n+    /// Initializes a buffer if necessary.\n+    #[unstable(feature = \"read_initializer\", issue = \"42788\")]\n+    #[inline]\n+    pub fn initialize(&self, buf: &mut [u8]) {\n+        if self.should_initialize() {\n+            unsafe { ptr::write_bytes(buf.as_mut_ptr(), 0, buf.len()) }\n+        }\n+    }\n+}\n+\n /// A trait for objects which are byte-oriented sinks.\n ///\n /// Implementors of the `Write` trait are sometimes called 'writers'.\n@@ -1608,6 +1685,15 @@ impl<T: Read, U: Read> Read for Chain<T, U> {\n         }\n         self.second.read(buf)\n     }\n+\n+    unsafe fn initializer(&self) -> Initializer {\n+        let initializer = self.first.initializer();\n+        if initializer.should_initialize() {\n+            initializer\n+        } else {\n+            self.second.initializer()\n+        }\n+    }\n }\n \n #[stable(feature = \"chain_bufread\", since = \"1.9.0\")]\n@@ -1772,6 +1858,10 @@ impl<T: Read> Read for Take<T> {\n         self.limit -= n as u64;\n         Ok(n)\n     }\n+\n+    unsafe fn initializer(&self) -> Initializer {\n+        self.inner.initializer()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "fb489bf487b8bd66db3823874e67166c31f91d52", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=ecbb896b9eb2acadefde57be493e4298c1aa04a3", "patch": "@@ -13,7 +13,7 @@ use io::prelude::*;\n use cell::RefCell;\n use fmt;\n use io::lazy::Lazy;\n-use io::{self, BufReader, LineWriter};\n+use io::{self, Initializer, BufReader, LineWriter};\n use sync::{Arc, Mutex, MutexGuard};\n use sys::stdio;\n use sys_common::remutex::{ReentrantMutex, ReentrantMutexGuard};\n@@ -75,8 +75,10 @@ fn stderr_raw() -> io::Result<StderrRaw> { stdio::Stderr::new().map(StderrRaw) }\n \n impl Read for StdinRaw {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> { self.0.read(buf) }\n-    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        self.0.read_to_end(buf)\n+\n+    #[inline]\n+    unsafe fn initializer(&self) -> Initializer {\n+        Initializer::nop()\n     }\n }\n impl Write for StdoutRaw {\n@@ -116,12 +118,6 @@ impl<R: io::Read> io::Read for Maybe<R> {\n             Maybe::Fake => Ok(0)\n         }\n     }\n-    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        match *self {\n-            Maybe::Real(ref mut r) => handle_ebadf(r.read_to_end(buf), 0),\n-            Maybe::Fake => Ok(0)\n-        }\n-    }\n }\n \n fn handle_ebadf<T>(r: io::Result<T>, default: T) -> io::Result<T> {\n@@ -294,6 +290,10 @@ impl Read for Stdin {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         self.lock().read(buf)\n     }\n+    #[inline]\n+    unsafe fn initializer(&self) -> Initializer {\n+        Initializer::nop()\n+    }\n     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n         self.lock().read_to_end(buf)\n     }\n@@ -310,8 +310,9 @@ impl<'a> Read for StdinLock<'a> {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         self.inner.read(buf)\n     }\n-    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        self.inner.read_to_end(buf)\n+    #[inline]\n+    unsafe fn initializer(&self) -> Initializer {\n+        Initializer::nop()\n     }\n }\n "}, {"sha": "88f4214296d9c4d5b80c67981e3021db6ecb7752", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=ecbb896b9eb2acadefde57be493e4298c1aa04a3", "patch": "@@ -11,7 +11,8 @@\n #![allow(missing_copy_implementations)]\n \n use fmt;\n-use io::{self, Read, Write, ErrorKind, BufRead};\n+use io::{self, Read, Initializer, Write, ErrorKind, BufRead};\n+use mem;\n \n /// Copies the entire contents of a reader into a writer.\n ///\n@@ -47,7 +48,12 @@ use io::{self, Read, Write, ErrorKind, BufRead};\n pub fn copy<R: ?Sized, W: ?Sized>(reader: &mut R, writer: &mut W) -> io::Result<u64>\n     where R: Read, W: Write\n {\n-    let mut buf = [0; super::DEFAULT_BUF_SIZE];\n+    let mut buf = unsafe {\n+        let mut buf: [u8; super::DEFAULT_BUF_SIZE] = mem::uninitialized();\n+        reader.initializer().initialize(&mut buf);\n+        buf\n+    };\n+\n     let mut written = 0;\n     loop {\n         let len = match reader.read(&mut buf) {\n@@ -90,11 +96,19 @@ pub fn empty() -> Empty { Empty { _priv: () } }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Read for Empty {\n+    #[inline]\n     fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> { Ok(0) }\n+\n+    #[inline]\n+    unsafe fn initializer(&self) -> Initializer {\n+        Initializer::nop()\n+    }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl BufRead for Empty {\n+    #[inline]\n     fn fill_buf(&mut self) -> io::Result<&[u8]> { Ok(&[]) }\n+    #[inline]\n     fn consume(&mut self, _n: usize) {}\n }\n \n@@ -133,12 +147,18 @@ pub fn repeat(byte: u8) -> Repeat { Repeat { byte: byte } }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Read for Repeat {\n+    #[inline]\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         for slot in &mut *buf {\n             *slot = self.byte;\n         }\n         Ok(buf.len())\n     }\n+\n+    #[inline]\n+    unsafe fn initializer(&self) -> Initializer {\n+        Initializer::nop()\n+    }\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n@@ -176,7 +196,9 @@ pub fn sink() -> Sink { Sink { _priv: () } }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Write for Sink {\n+    #[inline]\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { Ok(buf.len()) }\n+    #[inline]\n     fn flush(&mut self) -> io::Result<()> { Ok(()) }\n }\n "}, {"sha": "7be1fc9cd8c94e1acca2e199d0d50e9593b9c10e", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=ecbb896b9eb2acadefde57be493e4298c1aa04a3", "patch": "@@ -11,7 +11,7 @@\n use io::prelude::*;\n \n use fmt;\n-use io;\n+use io::{self, Initializer};\n use net::{ToSocketAddrs, SocketAddr, Shutdown};\n use sys_common::net as net_imp;\n use sys_common::{AsInner, FromInner, IntoInner};\n@@ -481,8 +481,10 @@ impl TcpStream {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Read for TcpStream {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> { self.0.read(buf) }\n-    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        self.0.read_to_end(buf)\n+\n+    #[inline]\n+    unsafe fn initializer(&self) -> Initializer {\n+        Initializer::nop()\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -493,8 +495,10 @@ impl Write for TcpStream {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Read for &'a TcpStream {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> { self.0.read(buf) }\n-    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        self.0.read_to_end(buf)\n+\n+    #[inline]\n+    unsafe fn initializer(&self) -> Initializer {\n+        Initializer::nop()\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "4632c8a918e6e97b9995eada748cecf2ea6afa79", "filename": "src/libstd/process.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=ecbb896b9eb2acadefde57be493e4298c1aa04a3", "patch": "@@ -60,7 +60,7 @@ use io::prelude::*;\n use ffi::OsStr;\n use fmt;\n use fs;\n-use io;\n+use io::{self, Initializer};\n use path::Path;\n use str;\n use sys::pipe::{read2, AnonPipe};\n@@ -208,8 +208,9 @@ impl Read for ChildStdout {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         self.inner.read(buf)\n     }\n-    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        self.inner.read_to_end(buf)\n+    #[inline]\n+    unsafe fn initializer(&self) -> Initializer {\n+        Initializer::nop()\n     }\n }\n \n@@ -250,8 +251,9 @@ impl Read for ChildStderr {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         self.inner.read(buf)\n     }\n-    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        self.inner.read_to_end(buf)\n+    #[inline]\n+    unsafe fn initializer(&self) -> Initializer {\n+        Initializer::nop()\n     }\n }\n "}, {"sha": "1b37aafef560d8e98cbf40eaab8a3b62db647508", "filename": "src/libstd/sys/redox/fd.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys%2Fredox%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys%2Fredox%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ffd.rs?ref=ecbb896b9eb2acadefde57be493e4298c1aa04a3", "patch": "@@ -14,7 +14,6 @@ use io::{self, Read};\n use mem;\n use sys::{cvt, syscall};\n use sys_common::AsInner;\n-use sys_common::io::read_to_end_uninitialized;\n \n pub struct FileDesc {\n     fd: usize,\n@@ -78,10 +77,6 @@ impl<'a> Read for &'a FileDesc {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         (**self).read(buf)\n     }\n-\n-    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        unsafe { read_to_end_uninitialized(self, buf) }\n-    }\n }\n \n impl AsInner<usize> for FileDesc {"}, {"sha": "48d9cdcb2c937fe54dff5d3de77556376d82f21f", "filename": "src/libstd/sys/redox/fs.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs?ref=ecbb896b9eb2acadefde57be493e4298c1aa04a3", "patch": "@@ -285,10 +285,6 @@ impl File {\n         self.0.read(buf)\n     }\n \n-    pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        self.0.read_to_end(buf)\n-    }\n-\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n     }"}, {"sha": "ac3fd2ad6b9bed10bc08851d74db09b2dff98def", "filename": "src/libstd/sys/redox/net/tcp.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs?ref=ecbb896b9eb2acadefde57be493e4298c1aa04a3", "patch": "@@ -41,10 +41,6 @@ impl TcpStream {\n         self.0.read(buf)\n     }\n \n-    pub fn read_to_end(&self, buf: &mut Vec<u8>) -> Result<usize> {\n-        self.0.read_to_end(buf)\n-    }\n-\n     pub fn write(&self, buf: &[u8]) -> Result<usize> {\n         self.0.write(buf)\n     }"}, {"sha": "05863adf108cca7cd62e5c16b2d161b98dd8d0d1", "filename": "src/libstd/sys/redox/pipe.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys%2Fredox%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys%2Fredox%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fpipe.rs?ref=ecbb896b9eb2acadefde57be493e4298c1aa04a3", "patch": "@@ -34,10 +34,6 @@ impl AnonPipe {\n         self.0.read(buf)\n     }\n \n-    pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        self.0.read_to_end(buf)\n-    }\n-\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n     }"}, {"sha": "c839531cc26c60838966fb8bc192bb96f46120db", "filename": "src/libstd/sys/redox/stdio.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys%2Fredox%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys%2Fredox%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fstdio.rs?ref=ecbb896b9eb2acadefde57be493e4298c1aa04a3", "patch": "@@ -25,13 +25,6 @@ impl Stdin {\n         fd.into_raw();\n         ret\n     }\n-\n-    pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        let fd = FileDesc::new(0);\n-        let ret = fd.read_to_end(buf);\n-        fd.into_raw();\n-        ret\n-    }\n }\n \n impl Stdout {"}, {"sha": "94b87a6bff4908bbef10994688bdd9146fd52624", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=ecbb896b9eb2acadefde57be493e4298c1aa04a3", "patch": "@@ -17,7 +17,7 @@ use libc;\n use ascii;\n use ffi::OsStr;\n use fmt;\n-use io;\n+use io::{self, Initializer};\n use mem;\n use net::Shutdown;\n use os::unix::ffi::OsStrExt;\n@@ -516,8 +516,9 @@ impl io::Read for UnixStream {\n         io::Read::read(&mut &*self, buf)\n     }\n \n-    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        io::Read::read_to_end(&mut &*self, buf)\n+    #[inline]\n+    unsafe fn initializer(&self) -> Initializer {\n+        Initializer::nop()\n     }\n }\n \n@@ -527,8 +528,9 @@ impl<'a> io::Read for &'a UnixStream {\n         self.0.read(buf)\n     }\n \n-    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        self.0.read_to_end(buf)\n+    #[inline]\n+    unsafe fn initializer(&self) -> Initializer {\n+        Initializer::nop()\n     }\n }\n "}, {"sha": "138087f16514292efe8908de8489faa5f7ade177", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=ecbb896b9eb2acadefde57be493e4298c1aa04a3", "patch": "@@ -17,7 +17,6 @@ use mem;\n use sync::atomic::{AtomicBool, Ordering};\n use sys::cvt;\n use sys_common::AsInner;\n-use sys_common::io::read_to_end_uninitialized;\n \n #[derive(Debug)]\n pub struct FileDesc {\n@@ -232,10 +231,6 @@ impl<'a> Read for &'a FileDesc {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         (**self).read(buf)\n     }\n-\n-    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        unsafe { read_to_end_uninitialized(self, buf) }\n-    }\n }\n \n impl AsInner<c_int> for FileDesc {"}, {"sha": "59dceba895323a94e0bd3cac3aa79f7b58ca1f95", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=ecbb896b9eb2acadefde57be493e4298c1aa04a3", "patch": "@@ -491,10 +491,6 @@ impl File {\n         self.0.read(buf)\n     }\n \n-    pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        self.0.read_to_end(buf)\n-    }\n-\n     pub fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {\n         self.0.read_at(buf, offset)\n     }"}, {"sha": "8fb361a78e2d71c8cff94b0b38f48e7968d1a969", "filename": "src/libstd/sys/unix/net.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fnet.rs?ref=ecbb896b9eb2acadefde57be493e4298c1aa04a3", "patch": "@@ -198,10 +198,6 @@ impl Socket {\n         self.recv_from_with_flags(buf, MSG_PEEK)\n     }\n \n-    pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        self.0.read_to_end(buf)\n-    }\n-\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n     }"}, {"sha": "ec9b6f17dca1cfc799342d90bf0b1b954d57f70d", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=ecbb896b9eb2acadefde57be493e4298c1aa04a3", "patch": "@@ -71,10 +71,6 @@ impl AnonPipe {\n         self.0.read(buf)\n     }\n \n-    pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        self.0.read_to_end(buf)\n-    }\n-\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n     }"}, {"sha": "7a8fe25d98ee1307b0c3280c5ae2421d690081cf", "filename": "src/libstd/sys/unix/stdio.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs?ref=ecbb896b9eb2acadefde57be493e4298c1aa04a3", "patch": "@@ -25,13 +25,6 @@ impl Stdin {\n         fd.into_raw();\n         ret\n     }\n-\n-    pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        let fd = FileDesc::new(libc::STDIN_FILENO);\n-        let ret = fd.read_to_end(buf);\n-        fd.into_raw();\n-        ret\n-    }\n }\n \n impl Stdout {"}, {"sha": "7f3291cf30470b59054650c97efccb96a0ce8e09", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=ecbb896b9eb2acadefde57be493e4298c1aa04a3", "patch": "@@ -324,10 +324,6 @@ impl File {\n         self.handle.read_at(buf, offset)\n     }\n \n-    pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        self.handle.read_to_end(buf)\n-    }\n-\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.handle.write(buf)\n     }"}, {"sha": "3729d6d6534e885d6deffb996fa6ced8bd040174", "filename": "src/libstd/sys/windows/handle.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs?ref=ecbb896b9eb2acadefde57be493e4298c1aa04a3", "patch": "@@ -18,7 +18,6 @@ use ops::Deref;\n use ptr;\n use sys::c;\n use sys::cvt;\n-use sys_common::io::read_to_end_uninitialized;\n \n /// An owned container for `HANDLE` object, closing them on Drop.\n ///\n@@ -216,8 +215,4 @@ impl<'a> Read for &'a RawHandle {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         (**self).read(buf)\n     }\n-\n-    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        unsafe { read_to_end_uninitialized(self, buf) }\n-    }\n }"}, {"sha": "f2a2793425d30053ef6c1af3aa2182c4f41e7351", "filename": "src/libstd/sys/windows/net.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs?ref=ecbb896b9eb2acadefde57be493e4298c1aa04a3", "patch": "@@ -20,7 +20,6 @@ use sync::Once;\n use sys::c;\n use sys;\n use sys_common::{self, AsInner, FromInner, IntoInner};\n-use sys_common::io::read_to_end_uninitialized;\n use sys_common::net;\n use time::Duration;\n \n@@ -200,11 +199,6 @@ impl Socket {\n         self.recv_from_with_flags(buf, c::MSG_PEEK)\n     }\n \n-    pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        let mut me = self;\n-        (&mut me).read_to_end(buf)\n-    }\n-\n     pub fn set_timeout(&self, dur: Option<Duration>,\n                        kind: c_int) -> io::Result<()> {\n         let timeout = match dur {\n@@ -283,10 +277,6 @@ impl<'a> Read for &'a Socket {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         (**self).read(buf)\n     }\n-\n-    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        unsafe { read_to_end_uninitialized(self, buf) }\n-    }\n }\n \n impl Drop for Socket {"}, {"sha": "be7482c4bb1b01738d412e17d7afc06ca4256e8e", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=ecbb896b9eb2acadefde57be493e4298c1aa04a3", "patch": "@@ -164,10 +164,6 @@ impl AnonPipe {\n         self.inner.read(buf)\n     }\n \n-    pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        self.inner.read_to_end(buf)\n-    }\n-\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.write(buf)\n     }"}, {"sha": "b5e5b5760f21b9cddcbf70ec5e92b40c6f040a19", "filename": "src/libstd/sys/windows/stdio.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs?ref=ecbb896b9eb2acadefde57be493e4298c1aa04a3", "patch": "@@ -20,7 +20,6 @@ use sync::Mutex;\n use sys::c;\n use sys::cvt;\n use sys::handle::Handle;\n-use sys_common::io::read_to_end_uninitialized;\n \n pub enum Output {\n     Console(c::HANDLE),\n@@ -151,10 +150,6 @@ impl<'a> Read for &'a Stdin {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         (**self).read(buf)\n     }\n-\n-    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        unsafe { read_to_end_uninitialized(self, buf) }\n-    }\n }\n \n impl Stdout {"}, {"sha": "ab23936358e7872c15eeb793a908aed39880fde4", "filename": "src/libstd/sys_common/io.rs", "status": "modified", "additions": 0, "deletions": 129, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys_common%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys_common%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fio.rs?ref=ecbb896b9eb2acadefde57be493e4298c1aa04a3", "patch": "@@ -7,51 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-use io;\n-use io::ErrorKind;\n-use io::Read;\n-use slice::from_raw_parts_mut;\n-\n pub const DEFAULT_BUF_SIZE: usize = 8 * 1024;\n \n-// Provides read_to_end functionality over an uninitialized buffer.\n-// This function is unsafe because it calls the underlying\n-// read function with a slice into uninitialized memory. The default\n-// implementation of read_to_end for readers will zero out new memory in\n-// the buf before passing it to read, but avoiding this zero can often\n-// lead to a fairly significant performance win.\n-//\n-// Implementations using this method have to adhere to two guarantees:\n-//  *  The implementation of read never reads the buffer provided.\n-//  *  The implementation of read correctly reports how many bytes were written.\n-pub unsafe fn read_to_end_uninitialized(r: &mut Read, buf: &mut Vec<u8>) -> io::Result<usize> {\n-\n-    let start_len = buf.len();\n-    buf.reserve(16);\n-\n-    // Always try to read into the empty space of the vector (from the length to the capacity).\n-    // If the vector ever fills up then we reserve an extra byte which should trigger the normal\n-    // reallocation routines for the vector, which will likely double the size.\n-    //\n-    // This function is similar to the read_to_end function in std::io, but the logic about\n-    // reservations and slicing is different enough that this is duplicated here.\n-    loop {\n-        if buf.len() == buf.capacity() {\n-            buf.reserve(1);\n-        }\n-\n-        let buf_slice = from_raw_parts_mut(buf.as_mut_ptr().offset(buf.len() as isize),\n-                                           buf.capacity() - buf.len());\n-\n-        match r.read(buf_slice) {\n-            Ok(0) => { return Ok(buf.len() - start_len); }\n-            Ok(n) => { let len = buf.len() + n; buf.set_len(len); },\n-            Err(ref e) if e.kind() == ErrorKind::Interrupted => { }\n-            Err(e) => { return Err(e); }\n-        }\n-    }\n-}\n-\n #[cfg(test)]\n #[allow(dead_code)] // not used on emscripten\n pub mod test {\n@@ -91,89 +48,3 @@ pub mod test {\n         TempDir(ret)\n     }\n }\n-\n-#[cfg(test)]\n-mod tests {\n-    use io::prelude::*;\n-    use super::*;\n-    use io;\n-    use io::{ErrorKind, Take, Repeat, repeat};\n-    use slice::from_raw_parts;\n-\n-    struct ErrorRepeat {\n-        lr: Take<Repeat>\n-    }\n-\n-    fn error_repeat(byte: u8, limit: u64) -> ErrorRepeat {\n-        ErrorRepeat { lr: repeat(byte).take(limit) }\n-    }\n-\n-    impl Read for ErrorRepeat {\n-        fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n-            let ret = self.lr.read(buf);\n-            if let Ok(0) = ret {\n-                return Err(io::Error::new(ErrorKind::Other, \"\"))\n-            }\n-            ret\n-        }\n-    }\n-\n-    fn init_vec_data() -> Vec<u8> {\n-        let mut vec = vec![10u8; 200];\n-        unsafe { vec.set_len(0); }\n-        vec\n-    }\n-\n-    fn assert_all_eq(buf: &[u8], value: u8) {\n-        for n in buf {\n-            assert_eq!(*n, value);\n-        }\n-    }\n-\n-    fn validate(buf: &Vec<u8>, good_read_len: usize) {\n-        assert_all_eq(buf, 1u8);\n-        let cap = buf.capacity();\n-        let end_slice = unsafe { from_raw_parts(buf.as_ptr().offset(good_read_len as isize),\n-                                                    cap - good_read_len) };\n-        assert_all_eq(end_slice, 10u8);\n-    }\n-\n-    #[test]\n-    fn read_to_end_uninit_error() {\n-        let mut er = error_repeat(1,100);\n-        let mut vec = init_vec_data();\n-        if let Err(_) = unsafe { read_to_end_uninitialized(&mut er, &mut vec) } {\n-            validate(&vec, 100);\n-        } else {\n-            assert!(false);\n-        }\n-    }\n-\n-    #[test]\n-    fn read_to_end_uninit_zero_len_vec() {\n-        let mut er = repeat(1).take(100);\n-        let mut vec = Vec::new();\n-        let n = unsafe{ read_to_end_uninitialized(&mut er, &mut vec).unwrap() };\n-        assert_all_eq(&vec, 1u8);\n-        assert_eq!(vec.len(), n);\n-    }\n-\n-    #[test]\n-    fn read_to_end_uninit_good() {\n-        let mut er = repeat(1).take(100);\n-        let mut vec = init_vec_data();\n-        let n = unsafe{ read_to_end_uninitialized(&mut er, &mut vec).unwrap() };\n-        validate(&vec, 100);\n-        assert_eq!(vec.len(), n);\n-    }\n-\n-    #[bench]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n-    fn bench_uninitialized(b: &mut ::test::Bencher) {\n-        b.iter(|| {\n-            let mut lr = repeat(1).take(10000000);\n-            let mut vec = Vec::with_capacity(1024);\n-            unsafe { read_to_end_uninitialized(&mut lr, &mut vec) }\n-        });\n-    }\n-}"}, {"sha": "809b728379d065afc8941e296624e4013442fed2", "filename": "src/libstd/sys_common/net.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecbb896b9eb2acadefde57be493e4298c1aa04a3/src%2Flibstd%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fnet.rs?ref=ecbb896b9eb2acadefde57be493e4298c1aa04a3", "patch": "@@ -243,10 +243,6 @@ impl TcpStream {\n         self.inner.read(buf)\n     }\n \n-    pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {\n-        self.inner.read_to_end(buf)\n-    }\n-\n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         let len = cmp::min(buf.len(), <wrlen_t>::max_value() as usize) as wrlen_t;\n         let ret = cvt(unsafe {"}]}