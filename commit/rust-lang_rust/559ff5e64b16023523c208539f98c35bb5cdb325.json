{"sha": "559ff5e64b16023523c208539f98c35bb5cdb325", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1OWZmNWU2NGIxNjAyMzUyM2MyMDg1MzlmOThjMzViYjVjZGIzMjU=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-06-03T23:04:29Z"}, "committer": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-06-03T23:04:29Z"}, "message": "librustc: remove check::FnKind enum since we only ever use one variant.", "tree": {"sha": "25fd8c497db4e08355266e1f02842a72559dddcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25fd8c497db4e08355266e1f02842a72559dddcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/559ff5e64b16023523c208539f98c35bb5cdb325", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/559ff5e64b16023523c208539f98c35bb5cdb325", "html_url": "https://github.com/rust-lang/rust/commit/559ff5e64b16023523c208539f98c35bb5cdb325", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/559ff5e64b16023523c208539f98c35bb5cdb325/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d8a291e1cd9de0fa889c240fc1aa2694f5f11de", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d8a291e1cd9de0fa889c240fc1aa2694f5f11de", "html_url": "https://github.com/rust-lang/rust/commit/8d8a291e1cd9de0fa889c240fc1aa2694f5f11de"}], "stats": {"total": 24, "additions": 2, "deletions": 22}, "files": [{"sha": "3571404adc6af1b2a69c85c17ead64b176e2b7da", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/559ff5e64b16023523c208539f98c35bb5cdb325/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/559ff5e64b16023523c208539f98c35bb5cdb325/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=559ff5e64b16023523c208539f98c35bb5cdb325", "patch": "@@ -168,15 +168,6 @@ pub struct Inherited<'a> {\n     upvar_borrow_map: RefCell<ty::UpvarBorrowMap>,\n }\n \n-#[deriving(Clone)]\n-pub enum FnKind {\n-    // A do-closure.\n-    DoBlock,\n-\n-    // A normal closure or fn item.\n-    Vanilla\n-}\n-\n #[deriving(Clone)]\n pub struct FnStyleState {\n     pub def: ast::NodeId,\n@@ -249,11 +240,6 @@ pub struct FnCtxt<'a> {\n     // can actually be made to live as long as it needs to live.\n     region_lb: Cell<ast::NodeId>,\n \n-    // Says whether we're inside a for loop, in a do block\n-    // or neither. Helps with error messages involving the\n-    // function return type.\n-    fn_kind: FnKind,\n-\n     inh: &'a Inherited<'a>,\n \n     ccx: &'a CrateCtxt<'a>,\n@@ -289,7 +275,6 @@ fn blank_fn_ctxt<'a>(ccx: &'a CrateCtxt<'a>,\n         ret_ty: rty,\n         ps: RefCell::new(FnStyleState::function(ast::NormalFn, 0)),\n         region_lb: Cell::new(region_bnd),\n-        fn_kind: Vanilla,\n         inh: inh,\n         ccx: ccx\n     }\n@@ -356,7 +341,7 @@ fn check_bare_fn(ccx: &CrateCtxt,\n         ty::ty_bare_fn(ref fn_ty) => {\n             let inh = Inherited::new(ccx.tcx, param_env);\n             let fcx = check_fn(ccx, fn_ty.fn_style, &fn_ty.sig,\n-                               decl, id, body, Vanilla, &inh);\n+                               decl, id, body, &inh);\n \n             vtable::resolve_in_block(&fcx, body);\n             regionck::regionck_fn(&fcx, body);\n@@ -440,7 +425,6 @@ fn check_fn<'a>(ccx: &'a CrateCtxt<'a>,\n                 decl: &ast::FnDecl,\n                 id: ast::NodeId,\n                 body: &ast::Block,\n-                fn_kind: FnKind,\n                 inherited: &'a Inherited<'a>) -> FnCtxt<'a>\n {\n     /*!\n@@ -479,7 +463,6 @@ fn check_fn<'a>(ccx: &'a CrateCtxt<'a>,\n         ret_ty: ret_ty,\n         ps: RefCell::new(FnStyleState::function(fn_style, id)),\n         region_lb: Cell::new(body.id),\n-        fn_kind: fn_kind,\n         inh: inherited,\n         ccx: ccx\n     };\n@@ -2295,7 +2278,6 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                      store: ty::TraitStore,\n                      decl: &ast::FnDecl,\n                      body: ast::P<ast::Block>,\n-                     fn_kind: FnKind,\n                      expected: Option<ty::t>) {\n         let tcx = fcx.ccx.tcx;\n \n@@ -2373,7 +2355,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n         };\n \n         check_fn(fcx.ccx, inherited_style, &fty_sig,\n-                 decl, id, body, fn_kind, fcx.inh);\n+                 decl, id, body, fcx.inh);\n     }\n \n \n@@ -3044,7 +3026,6 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                       ty::RegionTraitStore(region, ast::MutMutable),\n                       decl,\n                       body,\n-                      Vanilla,\n                       expected);\n       }\n       ast::ExprProc(decl, body) => {\n@@ -3053,7 +3034,6 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                       ty::UniqTraitStore,\n                       decl,\n                       body,\n-                      Vanilla,\n                       expected);\n       }\n       ast::ExprBlock(b) => {"}]}