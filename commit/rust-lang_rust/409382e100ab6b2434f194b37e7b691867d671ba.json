{"sha": "409382e100ab6b2434f194b37e7b691867d671ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwOTM4MmUxMDBhYjZiMjQzNGYxOTRiMzdlN2I2OTE4NjdkNjcxYmE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-28T08:38:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-28T08:38:47Z"}, "message": "Rollup merge of #55244 - wesleywiser:issue-50411, r=nikomatsakis\n\nDon't rerun MIR passes when inlining\n\nFixes #50411\n\nr? @nikomatsakis\n\nI updated your commit message with additional details. Let me know if any of that is incorrect. I also added the appropriate `compile-flags` directive to the test.\n\nThanks for you help on this!\n\ncc @RalfJung related to your PR #55086", "tree": {"sha": "b8967646b0219f827c46190b79a9f245141e1800", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8967646b0219f827c46190b79a9f245141e1800"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/409382e100ab6b2434f194b37e7b691867d671ba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb1XWXCRBK7hj4Ov3rIwAAdHIIAFlcr7KQuVYZUp3ilImPJ8an\n9vWYsj8vF9XGDlIgLBVqodILxtK3PXg6S4r4Kc7XV/Fiho+XxuJtvm2euv13E0b3\nPoBl4WQntJO7N2mqZY+EKJyB7mUNP99hwsxNpU3MEbW1KJvuvy80RmE07zMDIkMB\nneRYXfVhGIVmC9f+3THgCJPSmvXRjjtoJCpCR8PDkIcWOxOFAnwh/bA2h7Iai6ym\na6uMeSDEzMKas72IWUiOBybfEgMex4rstcDrHgYYbGNQ+lr4K3n4YpdwNm7+Xjid\n+KdbV6dOsqPNmD/K/8hufmnPNoGSlY9F9bqulAdfIsutfyHpSMeLbxP+xy4D2EU=\n=OOgk\n-----END PGP SIGNATURE-----\n", "payload": "tree b8967646b0219f827c46190b79a9f245141e1800\nparent 883b8199ca7c711b1789c0ffc4a82fadf303ed13\nparent 4655866a11ddb345c84781cf4e292e99e26ee9fe\nauthor kennytm <kennytm@gmail.com> 1540715927 +0800\ncommitter GitHub <noreply@github.com> 1540715927 +0800\n\nRollup merge of #55244 - wesleywiser:issue-50411, r=nikomatsakis\n\nDon't rerun MIR passes when inlining\n\nFixes #50411\n\nr? @nikomatsakis\n\nI updated your commit message with additional details. Let me know if any of that is incorrect. I also added the appropriate `compile-flags` directive to the test.\n\nThanks for you help on this!\n\ncc @RalfJung related to your PR #55086\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/409382e100ab6b2434f194b37e7b691867d671ba", "html_url": "https://github.com/rust-lang/rust/commit/409382e100ab6b2434f194b37e7b691867d671ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/409382e100ab6b2434f194b37e7b691867d671ba/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "883b8199ca7c711b1789c0ffc4a82fadf303ed13", "url": "https://api.github.com/repos/rust-lang/rust/commits/883b8199ca7c711b1789c0ffc4a82fadf303ed13", "html_url": "https://github.com/rust-lang/rust/commit/883b8199ca7c711b1789c0ffc4a82fadf303ed13"}, {"sha": "4655866a11ddb345c84781cf4e292e99e26ee9fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/4655866a11ddb345c84781cf4e292e99e26ee9fe", "html_url": "https://github.com/rust-lang/rust/commit/4655866a11ddb345c84781cf4e292e99e26ee9fe"}], "stats": {"total": 192, "additions": 120, "deletions": 72}, "files": [{"sha": "4fea07011ccfbb65268e7d443d4e7174732a602c", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/409382e100ab6b2434f194b37e7b691867d671ba/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409382e100ab6b2434f194b37e7b691867d671ba/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=409382e100ab6b2434f194b37e7b691867d671ba", "patch": "@@ -69,13 +69,38 @@ impl<'tcx> HasLocalDecls<'tcx> for Mir<'tcx> {\n     }\n }\n \n+/// The various \"big phases\" that MIR goes through.\n+///\n+/// Warning: ordering of variants is significant\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, PartialEq, Eq, PartialOrd, Ord)]\n+pub enum MirPhase {\n+    Build = 0,\n+    Const = 1,\n+    Validated = 2,\n+    Optimized = 3,\n+}\n+\n+impl MirPhase {\n+    /// Gets the index of the current MirPhase within the set of all MirPhases.\n+    pub fn phase_index(&self) -> usize {\n+        *self as usize\n+    }\n+}\n+\n /// Lowered representation of a single function.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Mir<'tcx> {\n     /// List of basic blocks. References to basic block use a newtyped index type `BasicBlock`\n     /// that indexes into this vector.\n     basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n \n+    /// Records how far through the \"desugaring and optimization\" process this particular\n+    /// MIR has traversed. This is particularly useful when inlining, since in that context\n+    /// we instantiate the promoted constants and add them to our promoted vector -- but those\n+    /// promoted items have already been optimized, whereas ours have not. This field allows\n+    /// us to see the difference and forego optimization on the inlined promoted items.\n+    pub phase: MirPhase,\n+\n     /// List of source scopes; these are referenced by statements\n     /// and used for debuginfo. Indexed by a `SourceScope`.\n     pub source_scopes: IndexVec<SourceScope, SourceScopeData>,\n@@ -151,6 +176,7 @@ impl<'tcx> Mir<'tcx> {\n         );\n \n         Mir {\n+            phase: MirPhase::Build,\n             basic_blocks,\n             source_scopes,\n             source_scope_local_data,\n@@ -368,6 +394,7 @@ pub enum Safety {\n }\n \n impl_stable_hash_for!(struct Mir<'tcx> {\n+    phase,\n     basic_blocks,\n     source_scopes,\n     source_scope_local_data,\n@@ -616,6 +643,13 @@ impl_stable_hash_for!(enum self::ImplicitSelfKind {\n     None\n });\n \n+impl_stable_hash_for!(enum self::MirPhase {\n+    Build,\n+    Const,\n+    Validated,\n+    Optimized,\n+});\n+\n mod binding_form_impl {\n     use ich::StableHashingContext;\n     use rustc_data_structures::stable_hasher::{HashStable, StableHasher, StableHasherResult};\n@@ -2905,6 +2939,7 @@ pub enum ClosureOutlivesSubject<'tcx> {\n \n CloneTypeFoldableAndLiftImpls! {\n     BlockTailInfo,\n+    MirPhase,\n     Mutability,\n     SourceInfo,\n     UpvarDecl,\n@@ -2917,6 +2952,7 @@ CloneTypeFoldableAndLiftImpls! {\n \n BraceStructTypeFoldableImpl! {\n     impl<'tcx> TypeFoldable<'tcx> for Mir<'tcx> {\n+        phase,\n         basic_blocks,\n         source_scopes,\n         source_scope_local_data,"}, {"sha": "cfccb950e8276a64a8a1c998b76f06fae68b9561", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/409382e100ab6b2434f194b37e7b691867d671ba/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409382e100ab6b2434f194b37e7b691867d671ba/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=409382e100ab6b2434f194b37e7b691867d671ba", "patch": "@@ -184,7 +184,6 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n     }\n \n     crate fn borrows(&self) -> &IndexVec<BorrowIndex, BorrowData<'tcx>> { &self.borrow_set.borrows }\n-    pub fn scope_tree(&self) -> &Lrc<region::ScopeTree> { &self.scope_tree }\n \n     pub fn location(&self, idx: BorrowIndex) -> &Location {\n         &self.borrow_set.borrows[idx].reserve_location"}, {"sha": "c19145636e6da101b7580299e3fee13c6c7eacb1", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/409382e100ab6b2434f194b37e7b691867d671ba/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409382e100ab6b2434f194b37e7b691867d671ba/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=409382e100ab6b2434f194b37e7b691867d671ba", "patch": "@@ -724,20 +724,6 @@ impl<'a, 'tcx, D> DataflowAnalysis<'a, 'tcx, D> where D: BitDenotation\n             }\n         }\n     }\n-\n-    pub fn new_from_sets(mir: &'a Mir<'tcx>,\n-                         dead_unwinds: &'a BitSet<mir::BasicBlock>,\n-                         sets: AllSets<D::Idx>,\n-                         denotation: D) -> Self {\n-        DataflowAnalysis {\n-            mir,\n-            dead_unwinds,\n-            flow_state: DataflowState {\n-                sets: sets,\n-                operator: denotation,\n-            }\n-        }\n-    }\n }\n \n impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D> where D: BitDenotation"}, {"sha": "46c73c27fe10d547548bef204d4217cf2f08fcf6", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 73, "deletions": 57, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/409382e100ab6b2434f194b37e7b691867d671ba/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409382e100ab6b2434f194b37e7b691867d671ba/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=409382e100ab6b2434f194b37e7b691867d671ba", "patch": "@@ -11,7 +11,7 @@\n use borrow_check::nll::type_check;\n use build;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n-use rustc::mir::{Mir, Promoted};\n+use rustc::mir::{Mir, MirPhase, Promoted};\n use rustc::ty::TyCtxt;\n use rustc::ty::query::Providers;\n use rustc::ty::steal::Steal;\n@@ -155,53 +155,69 @@ pub trait MirPass {\n                           mir: &mut Mir<'tcx>);\n }\n \n-pub macro run_passes($tcx:ident, $mir:ident, $def_id:ident, $suite_index:expr; $($pass:expr,)*) {{\n-    let suite_index: usize = $suite_index;\n-    let run_passes = |mir: &mut _, promoted| {\n+pub fn run_passes(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    mir: &mut Mir<'tcx>,\n+    def_id: DefId,\n+    mir_phase: MirPhase,\n+    passes: &[&dyn MirPass],\n+) {\n+    let phase_index = mir_phase.phase_index();\n+\n+    let run_passes = |mir: &mut Mir<'tcx>, promoted| {\n+        if mir.phase >= mir_phase {\n+            return;\n+        }\n+\n         let source = MirSource {\n-            def_id: $def_id,\n-            promoted\n+            def_id,\n+            promoted,\n         };\n         let mut index = 0;\n         let mut run_pass = |pass: &dyn MirPass| {\n             let run_hooks = |mir: &_, index, is_after| {\n-                dump_mir::on_mir_pass($tcx, &format_args!(\"{:03}-{:03}\", suite_index, index),\n+                dump_mir::on_mir_pass(tcx, &format_args!(\"{:03}-{:03}\", phase_index, index),\n                                       &pass.name(), source, mir, is_after);\n             };\n             run_hooks(mir, index, false);\n-            pass.run_pass($tcx, source, mir);\n+            pass.run_pass(tcx, source, mir);\n             run_hooks(mir, index, true);\n \n             index += 1;\n         };\n-        $(run_pass(&$pass);)*\n+\n+        for pass in passes {\n+            run_pass(*pass);\n+        }\n+\n+        mir.phase = mir_phase;\n     };\n \n-    run_passes(&mut $mir, None);\n+    run_passes(mir, None);\n \n-    for (index, promoted_mir) in $mir.promoted.iter_enumerated_mut() {\n+    for (index, promoted_mir) in mir.promoted.iter_enumerated_mut() {\n         run_passes(promoted_mir, Some(index));\n \n-        // Let's make sure we don't miss any nested instances\n-        assert!(promoted_mir.promoted.is_empty());\n+        //Let's make sure we don't miss any nested instances\n+        assert!(promoted_mir.promoted.is_empty())\n     }\n-}}\n+}\n \n fn mir_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Steal<Mir<'tcx>> {\n     // Unsafety check uses the raw mir, so make sure it is run\n     let _ = tcx.unsafety_check_result(def_id);\n \n     let mut mir = tcx.mir_built(def_id).steal();\n-    run_passes![tcx, mir, def_id, 0;\n+    run_passes(tcx, &mut mir, def_id, MirPhase::Const, &[\n         // Remove all `EndRegion` statements that are not involved in borrows.\n-        cleanup_post_borrowck::CleanEndRegions,\n+        &cleanup_post_borrowck::CleanEndRegions,\n \n         // What we need to do constant evaluation.\n-        simplify::SimplifyCfg::new(\"initial\"),\n-        type_check::TypeckMir,\n-        rustc_peek::SanityCheck,\n-        uniform_array_move_out::UniformArrayMoveOut,\n-    ];\n+        &simplify::SimplifyCfg::new(\"initial\"),\n+        &type_check::TypeckMir,\n+        &rustc_peek::SanityCheck,\n+        &uniform_array_move_out::UniformArrayMoveOut,\n+    ]);\n     tcx.alloc_steal_mir(mir)\n }\n \n@@ -214,11 +230,11 @@ fn mir_validated<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n     }\n \n     let mut mir = tcx.mir_const(def_id).steal();\n-    run_passes![tcx, mir, def_id, 1;\n+    run_passes(tcx, &mut mir, def_id, MirPhase::Validated, &[\n         // What we need to run borrowck etc.\n-        qualify_consts::QualifyAndPromoteConstants,\n-        simplify::SimplifyCfg::new(\"qualify-consts\"),\n-    ];\n+        &qualify_consts::QualifyAndPromoteConstants,\n+        &simplify::SimplifyCfg::new(\"qualify-consts\"),\n+    ]);\n     tcx.alloc_steal_mir(mir)\n }\n \n@@ -232,59 +248,59 @@ fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n     }\n \n     let mut mir = tcx.mir_validated(def_id).steal();\n-    run_passes![tcx, mir, def_id, 2;\n+    run_passes(tcx, &mut mir, def_id, MirPhase::Optimized, &[\n         // Remove all things not needed by analysis\n-        no_landing_pads::NoLandingPads,\n-        simplify_branches::SimplifyBranches::new(\"initial\"),\n-        remove_noop_landing_pads::RemoveNoopLandingPads,\n+        &no_landing_pads::NoLandingPads,\n+        &simplify_branches::SimplifyBranches::new(\"initial\"),\n+        &remove_noop_landing_pads::RemoveNoopLandingPads,\n         // Remove all `AscribeUserType` statements.\n-        cleanup_post_borrowck::CleanAscribeUserType,\n+        &cleanup_post_borrowck::CleanAscribeUserType,\n         // Remove all `FakeRead` statements and the borrows that are only\n         // used for checking matches\n-        cleanup_post_borrowck::CleanFakeReadsAndBorrows,\n-        simplify::SimplifyCfg::new(\"early-opt\"),\n+        &cleanup_post_borrowck::CleanFakeReadsAndBorrows,\n+        &simplify::SimplifyCfg::new(\"early-opt\"),\n \n         // These next passes must be executed together\n-        add_call_guards::CriticalCallEdges,\n-        elaborate_drops::ElaborateDrops,\n-        no_landing_pads::NoLandingPads,\n+        &add_call_guards::CriticalCallEdges,\n+        &elaborate_drops::ElaborateDrops,\n+        &no_landing_pads::NoLandingPads,\n         // AddValidation needs to run after ElaborateDrops and before EraseRegions, and it needs\n         // an AllCallEdges pass right before it.\n-        add_call_guards::AllCallEdges,\n-        add_validation::AddValidation,\n+        &add_call_guards::AllCallEdges,\n+        &add_validation::AddValidation,\n         // AddMovesForPackedDrops needs to run after drop\n         // elaboration.\n-        add_moves_for_packed_drops::AddMovesForPackedDrops,\n+        &add_moves_for_packed_drops::AddMovesForPackedDrops,\n \n-        simplify::SimplifyCfg::new(\"elaborate-drops\"),\n+        &simplify::SimplifyCfg::new(\"elaborate-drops\"),\n \n         // No lifetime analysis based on borrowing can be done from here on out.\n \n         // From here on out, regions are gone.\n-        erase_regions::EraseRegions,\n+        &erase_regions::EraseRegions,\n \n-        lower_128bit::Lower128Bit,\n+        &lower_128bit::Lower128Bit,\n \n \n         // Optimizations begin.\n-        uniform_array_move_out::RestoreSubsliceArrayMoveOut,\n-        inline::Inline,\n+        &uniform_array_move_out::RestoreSubsliceArrayMoveOut,\n+        &inline::Inline,\n \n         // Lowering generator control-flow and variables\n         // has to happen before we do anything else to them.\n-        generator::StateTransform,\n-\n-        instcombine::InstCombine,\n-        const_prop::ConstProp,\n-        simplify_branches::SimplifyBranches::new(\"after-const-prop\"),\n-        deaggregator::Deaggregator,\n-        copy_prop::CopyPropagation,\n-        remove_noop_landing_pads::RemoveNoopLandingPads,\n-        simplify::SimplifyCfg::new(\"final\"),\n-        simplify::SimplifyLocals,\n-\n-        add_call_guards::CriticalCallEdges,\n-        dump_mir::Marker(\"PreCodegen\"),\n-    ];\n+        &generator::StateTransform,\n+\n+        &instcombine::InstCombine,\n+        &const_prop::ConstProp,\n+        &simplify_branches::SimplifyBranches::new(\"after-const-prop\"),\n+        &deaggregator::Deaggregator,\n+        &copy_prop::CopyPropagation,\n+        &remove_noop_landing_pads::RemoveNoopLandingPads,\n+        &simplify::SimplifyCfg::new(\"final\"),\n+        &simplify::SimplifyLocals,\n+\n+        &add_call_guards::CriticalCallEdges,\n+        &dump_mir::Marker(\"PreCodegen\"),\n+    ]);\n     tcx.alloc_mir(mir)\n }"}, {"sha": "1ba47d3b932ef70171f87e442d6d9fbdc506bc57", "filename": "src/test/ui/issues/issue-50411.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/409382e100ab6b2434f194b37e7b691867d671ba/src%2Ftest%2Fui%2Fissues%2Fissue-50411.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409382e100ab6b2434f194b37e7b691867d671ba/src%2Ftest%2Fui%2Fissues%2Fissue-50411.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50411.rs?ref=409382e100ab6b2434f194b37e7b691867d671ba", "patch": "@@ -0,0 +1,11 @@\n+// Regression test for #50411: the MIR inliner was causing problems\n+// here because it would inline promoted code (which had already had\n+// elaborate-drops invoked on it) and then try to elaboate drops a\n+// second time. Uncool.\n+\n+// compile-flags:-Zmir-opt-level=3\n+// compile-pass\n+\n+fn main() {\n+    let _ = (0 .. 1).filter(|_| [1].iter().all(|_| true)).count();\n+}"}]}