{"sha": "6669ea81c329b3c1451132e1139d0a8d0dc3cba0", "node_id": "C_kwDOAAsO6NoAKDY2NjllYTgxYzMyOWIzYzE0NTExMzJlMTEzOWQwYThkMGRjM2NiYTA", "commit": {"author": {"name": "DropDemBits", "email": "r3usrlnd@gmail.com", "date": "2022-08-18T07:02:42Z"}, "committer": {"name": "DropDemBits", "email": "r3usrlnd@gmail.com", "date": "2022-08-19T13:27:28Z"}, "message": "Leave attrs on the variant, not the extracted struct", "tree": {"sha": "1c1644dd088ecc83255aae55fa67378d4f29ec67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c1644dd088ecc83255aae55fa67378d4f29ec67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6669ea81c329b3c1451132e1139d0a8d0dc3cba0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6669ea81c329b3c1451132e1139d0a8d0dc3cba0", "html_url": "https://github.com/rust-lang/rust/commit/6669ea81c329b3c1451132e1139d0a8d0dc3cba0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6669ea81c329b3c1451132e1139d0a8d0dc3cba0/comments", "author": {"login": "DropDemBits", "id": 13354275, "node_id": "MDQ6VXNlcjEzMzU0Mjc1", "avatar_url": "https://avatars.githubusercontent.com/u/13354275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DropDemBits", "html_url": "https://github.com/DropDemBits", "followers_url": "https://api.github.com/users/DropDemBits/followers", "following_url": "https://api.github.com/users/DropDemBits/following{/other_user}", "gists_url": "https://api.github.com/users/DropDemBits/gists{/gist_id}", "starred_url": "https://api.github.com/users/DropDemBits/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DropDemBits/subscriptions", "organizations_url": "https://api.github.com/users/DropDemBits/orgs", "repos_url": "https://api.github.com/users/DropDemBits/repos", "events_url": "https://api.github.com/users/DropDemBits/events{/privacy}", "received_events_url": "https://api.github.com/users/DropDemBits/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DropDemBits", "id": 13354275, "node_id": "MDQ6VXNlcjEzMzU0Mjc1", "avatar_url": "https://avatars.githubusercontent.com/u/13354275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DropDemBits", "html_url": "https://github.com/DropDemBits", "followers_url": "https://api.github.com/users/DropDemBits/followers", "following_url": "https://api.github.com/users/DropDemBits/following{/other_user}", "gists_url": "https://api.github.com/users/DropDemBits/gists{/gist_id}", "starred_url": "https://api.github.com/users/DropDemBits/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DropDemBits/subscriptions", "organizations_url": "https://api.github.com/users/DropDemBits/orgs", "repos_url": "https://api.github.com/users/DropDemBits/repos", "events_url": "https://api.github.com/users/DropDemBits/events{/privacy}", "received_events_url": "https://api.github.com/users/DropDemBits/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82ff740501e1da239a6c9ff94dddf7ae1ca9aeb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/82ff740501e1da239a6c9ff94dddf7ae1ca9aeb6", "html_url": "https://github.com/rust-lang/rust/commit/82ff740501e1da239a6c9ff94dddf7ae1ca9aeb6"}], "stats": {"total": 82, "additions": 30, "deletions": 52}, "files": [{"sha": "3738718b3c6c0541f8a30d3d44880a24949979f1", "filename": "crates/ide-assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 30, "deletions": 52, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/6669ea81c329b3c1451132e1139d0a8d0dc3cba0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6669ea81c329b3c1451132e1139d0a8d0dc3cba0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=6669ea81c329b3c1451132e1139d0a8d0dc3cba0", "patch": "@@ -101,21 +101,21 @@ pub(crate) fn extract_struct_from_enum_variant(\n                 });\n             }\n \n-            let indent = enum_ast.indent_level();\n             let generic_params = enum_ast\n                 .generic_param_list()\n                 .and_then(|known_generics| extract_generic_params(&known_generics, &field_list));\n             let generics = generic_params.as_ref().map(|generics| generics.clone_for_update());\n-            let def =\n-                create_struct_def(variant_name.clone(), &variant, &field_list, generics, &enum_ast);\n+            let def = create_struct_def(variant_name.clone(), &field_list, generics, &enum_ast);\n+\n+            let enum_ast = variant.parent_enum();\n+            let indent = enum_ast.indent_level();\n             def.reindent_to(indent);\n \n-            let start_offset = &variant.parent_enum().syntax().clone();\n-            ted::insert_all_raw(\n-                ted::Position::before(start_offset),\n+            ted::insert_all(\n+                ted::Position::before(enum_ast.syntax()),\n                 vec![\n                     def.syntax().clone().into(),\n-                    make::tokens::whitespace(&format!(\"\\n\\n{}\", indent)).into(),\n+                    make::tokens::whitespace(&format!(\"\\n\\n{indent}\")).into(),\n                 ],\n             );\n \n@@ -227,8 +227,7 @@ fn tag_generics_in_variant(ty: &ast::Type, generics: &mut [(ast::GenericParam, b\n }\n \n fn create_struct_def(\n-    variant_name: ast::Name,\n-    variant: &ast::Variant,\n+    name: ast::Name,\n     field_list: &Either<ast::RecordFieldList, ast::TupleFieldList>,\n     generics: Option<ast::GenericParamList>,\n     enum_: &ast::Enum,\n@@ -269,37 +268,9 @@ fn create_struct_def(\n             field_list.into()\n         }\n     };\n-\n     field_list.reindent_to(IndentLevel::single());\n \n-    let strukt = make::struct_(enum_vis, variant_name, generics, field_list).clone_for_update();\n-\n-    // FIXME: Consider making this an actual function somewhere (like in `AttrsOwnerEdit`) after some deliberation\n-    let attrs_and_docs = |node: &SyntaxNode| {\n-        let mut select_next_ws = false;\n-        node.children_with_tokens().filter(move |child| {\n-            let accept = match child.kind() {\n-                ATTR | COMMENT => {\n-                    select_next_ws = true;\n-                    return true;\n-                }\n-                WHITESPACE if select_next_ws => true,\n-                _ => false,\n-            };\n-            select_next_ws = false;\n-\n-            accept\n-        })\n-    };\n-\n-    // copy attributes & comments from variant\n-    let variant_attrs = attrs_and_docs(variant.syntax())\n-        .map(|tok| match tok.kind() {\n-            WHITESPACE => make::tokens::single_newline().into(),\n-            _ => tok,\n-        })\n-        .collect();\n-    ted::insert_all(ted::Position::first_child_of(strukt.syntax()), variant_attrs);\n+    let strukt = make::struct_(enum_vis, name, generics, field_list).clone_for_update();\n \n     // copy attributes from enum\n     ted::insert_all(\n@@ -346,13 +317,20 @@ fn update_variant(variant: &ast::Variant, generics: Option<ast::GenericParamList\n         })\n         .unwrap_or_else(|| make::ty(&name.text()));\n \n+    // change from a record to a tuple field list\n     let tuple_field = make::tuple_field(None, ty);\n-    let replacement = make::variant(\n-        name,\n-        Some(ast::FieldList::TupleFieldList(make::tuple_field_list(iter::once(tuple_field)))),\n-    )\n-    .clone_for_update();\n-    ted::replace(variant.syntax(), replacement.syntax());\n+    let field_list = make::tuple_field_list(iter::once(tuple_field)).clone_for_update();\n+    ted::replace(variant.field_list()?.syntax(), field_list.syntax());\n+\n+    // remove any ws after the name\n+    if let Some(ws) = name\n+        .syntax()\n+        .siblings_with_tokens(syntax::Direction::Next)\n+        .find_map(|tok| tok.into_token().filter(|tok| tok.kind() == WHITESPACE))\n+    {\n+        ted::remove(SyntaxElement::Token(ws));\n+    }\n+\n     Some(())\n }\n \n@@ -628,15 +606,15 @@ enum A {\n     }\n }\"#,\n             r#\"\n-/* comment */\n-// other\n-/// comment\n-#[attr]\n struct One{\n     a: u32\n }\n \n enum A {\n+    /* comment */\n+    // other\n+    /// comment\n+    #[attr]\n     One(One)\n }\"#,\n         );\n@@ -655,13 +633,13 @@ enum A {\n     $0One(u32, u32)\n }\"#,\n             r#\"\n-/* comment */\n-// other\n-/// comment\n-#[attr]\n struct One(u32, u32);\n \n enum A {\n+    /* comment */\n+    // other\n+    /// comment\n+    #[attr]\n     One(One)\n }\"#,\n         );"}]}