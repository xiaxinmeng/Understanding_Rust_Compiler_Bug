{"sha": "fae4a9e5ba36202dc8036cf90a7dd8ace4c1336a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZTRhOWU1YmEzNjIwMmRjODAzNmNmOTBhN2RkOGFjZTRjMTMzNmE=", "commit": {"author": {"name": "James Miller", "email": "james@aatch.net", "date": "2013-06-28T04:00:30Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-06-28T14:47:59Z"}, "message": "Rename Const/Owned in more places", "tree": {"sha": "00ebaa973601fa7ffdacf59723ab821deccf1864", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00ebaa973601fa7ffdacf59723ab821deccf1864"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fae4a9e5ba36202dc8036cf90a7dd8ace4c1336a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fae4a9e5ba36202dc8036cf90a7dd8ace4c1336a", "html_url": "https://github.com/rust-lang/rust/commit/fae4a9e5ba36202dc8036cf90a7dd8ace4c1336a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fae4a9e5ba36202dc8036cf90a7dd8ace4c1336a/comments", "author": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10bcb60e8f8520c11e34758e290a21534425dee6", "url": "https://api.github.com/repos/rust-lang/rust/commits/10bcb60e8f8520c11e34758e290a21534425dee6", "html_url": "https://github.com/rust-lang/rust/commit/10bcb60e8f8520c11e34758e290a21534425dee6"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "07fb23fea48a3323c145d9f072d0885727b6ff38", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fae4a9e5ba36202dc8036cf90a7dd8ace4c1336a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae4a9e5ba36202dc8036cf90a7dd8ace4c1336a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=fae4a9e5ba36202dc8036cf90a7dd8ace4c1336a", "patch": "@@ -788,7 +788,7 @@ fn conv_builtin_bounds(tcx: ty::ctxt, ast_bounds: &Option<OptVec<ast::TyParamBou\n             }\n             builtin_bounds\n         },\n-        // ~Trait is sugar for ~Trait:Owned.\n+        // ~Trait is sugar for ~Trait:Send.\n         (&None, ty::UniqTraitStore) => {\n             let mut set = ty::EmptyBuiltinBounds(); set.add(ty::BoundSend); set\n         }"}, {"sha": "68a0ae90014266c9de62f5cead8a392c5060bc66", "filename": "src/test/compile-fail/trait-bounds-sugar.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fae4a9e5ba36202dc8036cf90a7dd8ace4c1336a/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-sugar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae4a9e5ba36202dc8036cf90a7dd8ace4c1336a/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-sugar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-sugar.rs?ref=fae4a9e5ba36202dc8036cf90a7dd8ace4c1336a", "patch": "@@ -13,7 +13,7 @@\n trait Foo {\n }\n \n-fn a(_x: ~Foo) { // should be same as ~Foo:Owned\n+fn a(_x: ~Foo) { // should be same as ~Foo:Send\n }\n \n fn b(_x: @Foo) { // should be same as ~Foo:'static\n@@ -22,15 +22,15 @@ fn b(_x: @Foo) { // should be same as ~Foo:'static\n fn c(_x: &'static Foo) { // should be same as &'static Foo:'static\n }\n \n-fn d(x: ~Foo:Const) {\n-    a(x); //~ ERROR expected bounds `Owned`\n+fn d(x: ~Foo:Freeze) {\n+    a(x); //~ ERROR expected bounds `Send`\n }\n \n-fn e(x: @Foo:Const) {\n+fn e(x: @Foo:Freeze) {\n     b(x); //~ ERROR expected bounds `'static`\n }\n \n-fn f(x: &'static Foo:Const) {\n+fn f(x: &'static Foo:Freeze) {\n     c(x); //~ ERROR expected bounds `'static`\n }\n "}, {"sha": "a3b2ea02db35867b966a328bd61b115e12d7d704", "filename": "src/test/run-pass/trait-bounds-in-arc.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fae4a9e5ba36202dc8036cf90a7dd8ace4c1336a/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae4a9e5ba36202dc8036cf90a7dd8ace4c1336a/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs?ref=fae4a9e5ba36202dc8036cf90a7dd8ace4c1336a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // Tests that a heterogeneous list of existential types can be put inside an ARC\n-// and shared between tasks as long as all types fulfill Const+Owned.\n+// and shared between tasks as long as all types fulfill Freeze+Send.\n \n // xfail-fast\n \n@@ -64,10 +64,10 @@ fn main() {\n     let dogge1 = Dogge { bark_decibels: 100, tricks_known: 42, name: ~\"alan_turing\" };\n     let dogge2 = Dogge { bark_decibels: 55,  tricks_known: 11, name: ~\"albert_einstein\" };\n     let fishe = Goldfyshe { swim_speed: 998, name: ~\"alec_guinness\" };\n-    let arc = arc::ARC(~[~catte  as ~Pet:Const+Owned,\n-                         ~dogge1 as ~Pet:Const+Owned,\n-                         ~fishe  as ~Pet:Const+Owned,\n-                         ~dogge2 as ~Pet:Const+Owned]);\n+    let arc = arc::ARC(~[~catte  as ~Pet:Freeze+Send,\n+                         ~dogge1 as ~Pet:Freeze+Send,\n+                         ~fishe  as ~Pet:Freeze+Send,\n+                         ~dogge2 as ~Pet:Freeze+Send]);\n     let (p1,c1) = comm::stream();\n     let arc1 = cell::Cell::new(arc.clone());\n     do task::spawn { check_legs(arc1.take()); c1.send(()); }\n@@ -82,21 +82,21 @@ fn main() {\n     p3.recv();\n }\n \n-fn check_legs(arc: arc::ARC<~[~Pet:Const+Owned]>) {\n+fn check_legs(arc: arc::ARC<~[~Pet:Freeze+Send]>) {\n     let mut legs = 0;\n     for arc.get().iter().advance |pet| {\n         legs += pet.num_legs();\n     }\n     assert!(legs == 12);\n }\n-fn check_names(arc: arc::ARC<~[~Pet:Const+Owned]>) {\n+fn check_names(arc: arc::ARC<~[~Pet:Freeze+Send]>) {\n     for arc.get().iter().advance |pet| {\n         do pet.name |name| {\n             assert!(name[0] == 'a' as u8 && name[1] == 'l' as u8);\n         }\n     }\n }\n-fn check_pedigree(arc: arc::ARC<~[~Pet:Const+Owned]>) {\n+fn check_pedigree(arc: arc::ARC<~[~Pet:Freeze+Send]>) {\n     for arc.get().iter().advance |pet| {\n         assert!(pet.of_good_pedigree());\n     }"}]}