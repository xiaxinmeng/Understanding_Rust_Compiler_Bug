{"sha": "c9039de613478cfe806ff287504b313424b619a5", "node_id": "C_kwDOAAsO6NoAKGM5MDM5ZGU2MTM0NzhjZmU4MDZmZjI4NzUwNGIzMTM0MjRiNjE5YTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-20T12:44:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-20T12:44:39Z"}, "message": "Auto merge of #2071 - RalfJung:provenance, r=RalfJung\n\nadjust for provenance cleanup\n\nThis is the Miri side of https://github.com/rust-lang/rust/pull/96165", "tree": {"sha": "76e0df10b77fa3d6475bc6dc5167208af9449eeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76e0df10b77fa3d6475bc6dc5167208af9449eeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9039de613478cfe806ff287504b313424b619a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9039de613478cfe806ff287504b313424b619a5", "html_url": "https://github.com/rust-lang/rust/commit/c9039de613478cfe806ff287504b313424b619a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9039de613478cfe806ff287504b313424b619a5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "598ae7418b101c47aff2131d21a7e4e22192d3ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/598ae7418b101c47aff2131d21a7e4e22192d3ba", "html_url": "https://github.com/rust-lang/rust/commit/598ae7418b101c47aff2131d21a7e4e22192d3ba"}, {"sha": "b5a76c7ff075b96415d5941c95854b217e294d9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5a76c7ff075b96415d5941c95854b217e294d9d", "html_url": "https://github.com/rust-lang/rust/commit/b5a76c7ff075b96415d5941c95854b217e294d9d"}], "stats": {"total": 141, "additions": 92, "deletions": 49}, "files": [{"sha": "fa9ce8aca882e5502b8552cbcb5d6b4b600a9e6f", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9039de613478cfe806ff287504b313424b619a5/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/c9039de613478cfe806ff287504b313424b619a5/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=c9039de613478cfe806ff287504b313424b619a5", "patch": "@@ -1 +1 @@\n-c8422403f775126c40d558838d321c063554c822\n+27af5175497936ea3413bef5816e7c0172514b9c"}, {"sha": "7625763a3bb4f450b0630728e9110fc6310c9aa9", "filename": "src/data_race.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9039de613478cfe806ff287504b313424b619a5/src%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9039de613478cfe806ff287504b313424b619a5/src%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdata_race.rs?ref=c9039de613478cfe806ff287504b313424b619a5", "patch": "@@ -999,15 +999,15 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n         if let Some(data_race) = &this.machine.data_race {\n             if data_race.multi_threaded.get() {\n                 let size = place.layout.size;\n-                let (alloc_id, base_offset, ptr) = this.ptr_get_alloc_id(place.ptr)?;\n+                let (alloc_id, base_offset, _tag) = this.ptr_get_alloc_id(place.ptr)?;\n                 // Load and log the atomic operation.\n                 // Note that atomic loads are possible even from read-only allocations, so `get_alloc_extra_mut` is not an option.\n                 let alloc_meta = &this.get_alloc_extra(alloc_id)?.data_race.as_ref().unwrap();\n                 log::trace!(\n                     \"Atomic op({}) with ordering {:?} on {:?} (size={})\",\n                     description,\n                     &atomic,\n-                    ptr,\n+                    place.ptr,\n                     size.bytes()\n                 );\n \n@@ -1039,7 +1039,7 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n                     {\n                         log::trace!(\n                             \"Updated atomic memory({:?}, size={}) to {:#?}\",\n-                            ptr,\n+                            place.ptr,\n                             size.bytes(),\n                             range.atomic_ops\n                         );"}, {"sha": "9d387b0659386f5bdb1b661695924e5790eb53c1", "filename": "src/helpers.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c9039de613478cfe806ff287504b313424b619a5/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9039de613478cfe806ff287504b313424b619a5/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=c9039de613478cfe806ff287504b313424b619a5", "patch": "@@ -271,8 +271,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// Visits the memory covered by `place`, sensitive to freezing: the 2nd parameter\n     /// of `action` will be true if this is frozen, false if this is in an `UnsafeCell`.\n     /// The range is relative to `place`.\n-    ///\n-    /// Assumes that the `place` has a proper pointer in it.\n     fn visit_freeze_sensitive(\n         &self,\n         place: &MPlaceTy<'tcx, Tag>,\n@@ -290,33 +288,30 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Store how far we proceeded into the place so far. Everything to the left of\n         // this offset has already been handled, in the sense that the frozen parts\n         // have had `action` called on them.\n-        let ptr = place.ptr.into_pointer_or_addr().unwrap();\n-        let start_offset = ptr.into_parts().1 as Size; // we just compare offsets, the abs. value never matters\n-        let mut cur_offset = start_offset;\n+        let start_addr = place.ptr.addr();\n+        let mut cur_addr = start_addr;\n         // Called when we detected an `UnsafeCell` at the given offset and size.\n         // Calls `action` and advances `cur_ptr`.\n-        let mut unsafe_cell_action = |unsafe_cell_ptr: Pointer<Option<Tag>>,\n+        let mut unsafe_cell_action = |unsafe_cell_ptr: &Pointer<Option<Tag>>,\n                                       unsafe_cell_size: Size| {\n-            let unsafe_cell_ptr = unsafe_cell_ptr.into_pointer_or_addr().unwrap();\n-            debug_assert_eq!(unsafe_cell_ptr.provenance, ptr.provenance);\n             // We assume that we are given the fields in increasing offset order,\n             // and nothing else changes.\n-            let unsafe_cell_offset = unsafe_cell_ptr.into_parts().1 as Size; // we just compare offsets, the abs. value never matters\n-            assert!(unsafe_cell_offset >= cur_offset);\n-            let frozen_size = unsafe_cell_offset - cur_offset;\n+            let unsafe_cell_addr = unsafe_cell_ptr.addr();\n+            assert!(unsafe_cell_addr >= cur_addr);\n+            let frozen_size = unsafe_cell_addr - cur_addr;\n             // Everything between the cur_ptr and this `UnsafeCell` is frozen.\n             if frozen_size != Size::ZERO {\n-                action(alloc_range(cur_offset - start_offset, frozen_size), /*frozen*/ true)?;\n+                action(alloc_range(cur_addr - start_addr, frozen_size), /*frozen*/ true)?;\n             }\n-            cur_offset += frozen_size;\n+            cur_addr += frozen_size;\n             // This `UnsafeCell` is NOT frozen.\n             if unsafe_cell_size != Size::ZERO {\n                 action(\n-                    alloc_range(cur_offset - start_offset, unsafe_cell_size),\n+                    alloc_range(cur_addr - start_addr, unsafe_cell_size),\n                     /*frozen*/ false,\n                 )?;\n             }\n-            cur_offset += unsafe_cell_size;\n+            cur_addr += unsafe_cell_size;\n             // Done\n             Ok(())\n         };\n@@ -334,7 +329,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                         .unwrap_or_else(|| place.layout.size);\n                     // Now handle this `UnsafeCell`, unless it is empty.\n                     if unsafe_cell_size != Size::ZERO {\n-                        unsafe_cell_action(place.ptr, unsafe_cell_size)\n+                        unsafe_cell_action(&place.ptr, unsafe_cell_size)\n                     } else {\n                         Ok(())\n                     }\n@@ -344,7 +339,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         // The part between the end_ptr and the end of the place is also frozen.\n         // So pretend there is a 0-sized `UnsafeCell` at the end.\n-        unsafe_cell_action(place.ptr.wrapping_offset(size, this), Size::ZERO)?;\n+        unsafe_cell_action(&place.ptr.offset(size, this)?, Size::ZERO)?;\n         // Done!\n         return Ok(());\n \n@@ -428,9 +423,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                         let mut places =\n                             fields.collect::<InterpResult<'tcx, Vec<MPlaceTy<'tcx, Tag>>>>()?;\n                         // we just compare offsets, the abs. value never matters\n-                        places.sort_by_key(|place| {\n-                            place.ptr.into_pointer_or_addr().unwrap().into_parts().1 as Size\n-                        });\n+                        places.sort_by_key(|place| place.ptr.addr());\n                         self.walk_aggregate(place, places.into_iter().map(Ok))\n                     }\n                     FieldsShape::Union { .. } | FieldsShape::Primitive => {\n@@ -777,6 +770,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// Mark a machine allocation that was just created as immutable.\n     fn mark_immutable(&mut self, mplace: &MemPlace<Tag>) {\n         let this = self.eval_context_mut();\n+        // This got just allocated, so there definitely is a pointer here.\n         this.alloc_mark_immutable(mplace.ptr.into_pointer_or_addr().unwrap().provenance.alloc_id)\n             .unwrap();\n     }"}, {"sha": "895241bcc326dbb24936cf19a146921639930c63", "filename": "src/intptrcast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9039de613478cfe806ff287504b313424b619a5/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9039de613478cfe806ff287504b313424b619a5/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=c9039de613478cfe806ff287504b313424b619a5", "patch": "@@ -128,7 +128,7 @@ impl<'mir, 'tcx> GlobalStateInner {\n \n     /// Convert a relative (tcx) pointer to an absolute address.\n     pub fn rel_ptr_to_addr(ecx: &MiriEvalContext<'mir, 'tcx>, ptr: Pointer<AllocId>) -> u64 {\n-        let (alloc_id, offset) = ptr.into_parts(); // offset is relative\n+        let (alloc_id, offset) = ptr.into_parts(); // offset is relative (AllocId provenance)\n         let base_addr = GlobalStateInner::alloc_base_addr(ecx, alloc_id);\n \n         // Add offset with the right kind of pointer-overflowing arithmetic.\n@@ -137,7 +137,7 @@ impl<'mir, 'tcx> GlobalStateInner {\n     }\n \n     pub fn abs_ptr_to_rel(ecx: &MiriEvalContext<'mir, 'tcx>, ptr: Pointer<Tag>) -> Size {\n-        let (tag, addr) = ptr.into_parts(); // addr is absolute\n+        let (tag, addr) = ptr.into_parts(); // addr is absolute (Tag provenance)\n         let base_addr = GlobalStateInner::alloc_base_addr(ecx, tag.alloc_id);\n \n         // Wrapping \"addr - base_addr\""}, {"sha": "66854921a33e8bb9c17c8c608bee1210eace6ebc", "filename": "src/machine.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c9039de613478cfe806ff287504b313424b619a5/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9039de613478cfe806ff287504b313424b619a5/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=c9039de613478cfe806ff287504b313424b619a5", "patch": "@@ -360,6 +360,7 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n         name: &str,\n         ptr: Pointer<Option<Tag>>,\n     ) {\n+        // This got just allocated, so there definitely is a pointer here.\n         let ptr = ptr.into_pointer_or_addr().unwrap();\n         this.machine.extern_statics.try_insert(Symbol::intern(name), ptr).unwrap();\n     }\n@@ -431,11 +432,13 @@ impl<'mir, 'tcx> MiriEvalContextExt<'mir, 'tcx> for MiriEvalContext<'mir, 'tcx>\n /// Machine hook implementations.\n impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n     type MemoryKind = MiriMemoryKind;\n+    type ExtraFnVal = Dlsym;\n \n     type FrameExtra = FrameData<'tcx>;\n     type AllocExtra = AllocExtra;\n+\n     type PointerTag = Tag;\n-    type ExtraFnVal = Dlsym;\n+    type TagExtra = SbTag;\n \n     type MemoryMap =\n         MonoHashMap<AllocId, (MemoryKind<MiriMemoryKind>, Allocation<Tag, Self::AllocExtra>)>;\n@@ -607,26 +610,26 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n     fn ptr_get_alloc(\n         ecx: &MiriEvalContext<'mir, 'tcx>,\n         ptr: Pointer<Self::PointerTag>,\n-    ) -> (AllocId, Size) {\n+    ) -> (AllocId, Size, Self::TagExtra) {\n         let rel = intptrcast::GlobalStateInner::abs_ptr_to_rel(ecx, ptr);\n-        (ptr.provenance.alloc_id, rel)\n+        (ptr.provenance.alloc_id, rel, ptr.provenance.sb)\n     }\n \n     #[inline(always)]\n     fn memory_read(\n         _tcx: TyCtxt<'tcx>,\n         machine: &Self,\n         alloc_extra: &AllocExtra,\n-        tag: Tag,\n+        (alloc_id, tag): (AllocId, Self::TagExtra),\n         range: AllocRange,\n     ) -> InterpResult<'tcx> {\n         if let Some(data_race) = &alloc_extra.data_race {\n-            data_race.read(tag.alloc_id, range, machine.data_race.as_ref().unwrap())?;\n+            data_race.read(alloc_id, range, machine.data_race.as_ref().unwrap())?;\n         }\n         if let Some(stacked_borrows) = &alloc_extra.stacked_borrows {\n             stacked_borrows.memory_read(\n-                tag.alloc_id,\n-                tag.sb,\n+                alloc_id,\n+                tag,\n                 range,\n                 machine.stacked_borrows.as_ref().unwrap(),\n             )\n@@ -640,16 +643,16 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         _tcx: TyCtxt<'tcx>,\n         machine: &mut Self,\n         alloc_extra: &mut AllocExtra,\n-        tag: Tag,\n+        (alloc_id, tag): (AllocId, Self::TagExtra),\n         range: AllocRange,\n     ) -> InterpResult<'tcx> {\n         if let Some(data_race) = &mut alloc_extra.data_race {\n-            data_race.write(tag.alloc_id, range, machine.data_race.as_mut().unwrap())?;\n+            data_race.write(alloc_id, range, machine.data_race.as_mut().unwrap())?;\n         }\n         if let Some(stacked_borrows) = &mut alloc_extra.stacked_borrows {\n             stacked_borrows.memory_written(\n-                tag.alloc_id,\n-                tag.sb,\n+                alloc_id,\n+                tag,\n                 range,\n                 machine.stacked_borrows.as_mut().unwrap(),\n             )\n@@ -663,19 +666,19 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         _tcx: TyCtxt<'tcx>,\n         machine: &mut Self,\n         alloc_extra: &mut AllocExtra,\n-        tag: Tag,\n+        (alloc_id, tag): (AllocId, Self::TagExtra),\n         range: AllocRange,\n     ) -> InterpResult<'tcx> {\n-        if Some(tag.alloc_id) == machine.tracked_alloc_id {\n-            register_diagnostic(NonHaltingDiagnostic::FreedAlloc(tag.alloc_id));\n+        if Some(alloc_id) == machine.tracked_alloc_id {\n+            register_diagnostic(NonHaltingDiagnostic::FreedAlloc(alloc_id));\n         }\n         if let Some(data_race) = &mut alloc_extra.data_race {\n-            data_race.deallocate(tag.alloc_id, range, machine.data_race.as_mut().unwrap())?;\n+            data_race.deallocate(alloc_id, range, machine.data_race.as_mut().unwrap())?;\n         }\n         if let Some(stacked_borrows) = &mut alloc_extra.stacked_borrows {\n             stacked_borrows.memory_deallocated(\n-                tag.alloc_id,\n-                tag.sb,\n+                alloc_id,\n+                tag,\n                 range,\n                 machine.stacked_borrows.as_mut().unwrap(),\n             )"}, {"sha": "3ada61abbd29653407710484e32226b239d3ec80", "filename": "src/shims/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9039de613478cfe806ff287504b313424b619a5/src%2Fshims%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9039de613478cfe806ff287504b313424b619a5/src%2Fshims%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fbacktrace.rs?ref=c9039de613478cfe806ff287504b313424b619a5", "patch": "@@ -124,7 +124,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let ptr = this.read_pointer(ptr)?;\n         // Take apart the pointer, we need its pieces.\n-        let (alloc_id, offset, ptr) = this.ptr_get_alloc_id(ptr)?;\n+        let (alloc_id, offset, _tag) = this.ptr_get_alloc_id(ptr)?;\n \n         let fn_instance =\n             if let Some(GlobalAlloc::Function(instance)) = this.tcx.get_global_alloc(alloc_id) {"}, {"sha": "af6064925f0437d6d9097900abd707562ed221f2", "filename": "src/shims/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c9039de613478cfe806ff287504b313424b619a5/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9039de613478cfe806ff287504b313424b619a5/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=c9039de613478cfe806ff287504b313424b619a5", "patch": "@@ -83,10 +83,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n \n         let ptr = this.read_pointer(ptr_op)?;\n-        if let Ok(ptr) = ptr.into_pointer_or_addr() {\n+        if let Ok((alloc_id, _offset, _)) = this.ptr_try_get_alloc_id(ptr) {\n             // Only do anything if we can identify the allocation this goes to.\n-            let (_, cur_align) =\n-                this.get_alloc_size_and_align(ptr.provenance.alloc_id, AllocCheck::MaybeDead)?;\n+            let (_, cur_align) = this.get_alloc_size_and_align(alloc_id, AllocCheck::MaybeDead)?;\n             if cur_align.bytes() >= req_align {\n                 // If the allocation alignment is at least the required alignment we use the\n                 // real implementation."}, {"sha": "0029de3b5a9c1a488949853b8c33064406492bdc", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9039de613478cfe806ff287504b313424b619a5/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9039de613478cfe806ff287504b313424b619a5/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=c9039de613478cfe806ff287504b313424b619a5", "patch": "@@ -702,8 +702,7 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             );\n             return Ok(());\n         }\n-        let (alloc_id, base_offset, ptr) = this.ptr_get_alloc_id(place.ptr)?;\n-        let orig_tag = ptr.provenance.sb;\n+        let (alloc_id, base_offset, orig_tag) = this.ptr_get_alloc_id(place.ptr)?;\n \n         // Ensure we bail out if the pointer goes out-of-bounds (see miri#1050).\n         let (alloc_size, _) ="}, {"sha": "7576ba78f607dd5ecff38d752b0619cefebe3e95", "filename": "tests/run-pass/issue-miri-2068.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c9039de613478cfe806ff287504b313424b619a5/tests%2Frun-pass%2Fissue-miri-2068.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9039de613478cfe806ff287504b313424b619a5/tests%2Frun-pass%2Fissue-miri-2068.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-miri-2068.rs?ref=c9039de613478cfe806ff287504b313424b619a5", "patch": "@@ -0,0 +1,48 @@\n+#![feature(pin_macro)]\n+\n+use core::future::Future;\n+use core::pin::Pin;\n+use core::task::{Context, Poll};\n+\n+use std::sync::Arc;\n+\n+struct NopWaker;\n+\n+impl std::task::Wake for NopWaker {\n+    fn wake(self: Arc<Self>) {}\n+}\n+\n+pub fn fuzzing_block_on<O, F: Future<Output = O>>(fut: F) -> O {\n+    let mut fut = std::pin::pin!(fut);\n+    let waker = std::task::Waker::from(Arc::new(NopWaker));\n+    let mut context = std::task::Context::from_waker(&waker);\n+    loop {\n+        match fut.as_mut().poll(&mut context) {\n+            Poll::Ready(v) => return v,\n+            Poll::Pending => {}\n+        }\n+    }\n+}\n+\n+pub struct LastFuture<S> {\n+    last: S,\n+}\n+\n+impl<S> Future for LastFuture<S>\n+where\n+    Self: Unpin,\n+    S: Unpin + Copy,\n+{\n+    type Output = S;\n+\n+    fn poll(self: Pin<&mut Self>, _cx: &mut Context<'_>) -> Poll<Self::Output> {\n+        return Poll::Ready(self.last);\n+    }\n+}\n+\n+fn main() {\n+    fuzzing_block_on(async {\n+        LastFuture { last: &0u32 }.await;\n+        LastFuture { last: Option::<u32>::None }.await;\n+    });\n+}"}]}