{"sha": "fe1cb88c08737a73e98f94d077bb23064de18106", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMWNiODhjMDg3MzdhNzNlOThmOTRkMDc3YmIyMzA2NGRlMTgxMDY=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-06-08T15:49:21Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-06-19T01:19:50Z"}, "message": "Use MTRef and MTLock to avoid a RefCell", "tree": {"sha": "05646690c9c1b1cb14dd4a06efd94bc7ec58ae90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05646690c9c1b1cb14dd4a06efd94bc7ec58ae90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe1cb88c08737a73e98f94d077bb23064de18106", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe1cb88c08737a73e98f94d077bb23064de18106", "html_url": "https://github.com/rust-lang/rust/commit/fe1cb88c08737a73e98f94d077bb23064de18106", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe1cb88c08737a73e98f94d077bb23064de18106/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8368f364e3ae1245a4f95040487d1781570f455a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8368f364e3ae1245a4f95040487d1781570f455a", "html_url": "https://github.com/rust-lang/rust/commit/8368f364e3ae1245a4f95040487d1781570f455a"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "96aeb969d89f96eb20f367b49609748498373db2", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/fe1cb88c08737a73e98f94d077bb23064de18106/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1cb88c08737a73e98f94d077bb23064de18106/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=fe1cb88c08737a73e98f94d077bb23064de18106", "patch": "@@ -212,7 +212,7 @@ use rustc::util::common::time;\n use monomorphize::item::{MonoItemExt, DefPathBasedNames, InstantiationMode};\n \n use rustc_data_structures::bitvec::BitVector;\n-use rustc_data_structures::sync::{ParallelIterator, par_iter, Lock};\n+use rustc_data_structures::sync::{MTRef, MTLock, ParallelIterator, par_iter};\n \n #[derive(PartialEq, Eq, Hash, Clone, Copy, Debug)]\n pub enum MonoItemCollectionMode {\n@@ -305,19 +305,25 @@ pub fn collect_crate_mono_items<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     });\n \n     debug!(\"Building mono item graph, beginning at roots\");\n-    let visited = Lock::new(FxHashSet());\n-    let inlining_map = Lock::new(InliningMap::new());\n-\n-    time(tcx.sess, \"collecting mono items\", || {\n-        par_iter(roots).for_each(|root| {\n-            let mut recursion_depths = DefIdMap();\n-            collect_items_rec(tcx,\n-                              root,\n-                              &visited,\n-                              &mut recursion_depths,\n-                              &inlining_map);\n+\n+    let mut visited = MTLock::new(FxHashSet());\n+    let mut inlining_map = MTLock::new(InliningMap::new());\n+\n+    {\n+        let visited: MTRef<'_, _> = &mut visited;\n+        let inlining_map: MTRef<'_, _> = &mut inlining_map;\n+\n+        time(tcx.sess, \"collecting mono items\", || {\n+            par_iter(roots).for_each(|root| {\n+                let mut recursion_depths = DefIdMap();\n+                collect_items_rec(tcx,\n+                                root,\n+                                visited,\n+                                &mut recursion_depths,\n+                                inlining_map);\n+            });\n         });\n-    });\n+    }\n \n     (visited.into_inner(), inlining_map.into_inner())\n }\n@@ -360,10 +366,10 @@ fn collect_roots<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n // Collect all monomorphized items reachable from `starting_point`\n fn collect_items_rec<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                    starting_point: MonoItem<'tcx>,\n-                                   visited: &Lock<FxHashSet<MonoItem<'tcx>>>,\n+                                   visited: MTRef<'_, MTLock<FxHashSet<MonoItem<'tcx>>>>,\n                                    recursion_depths: &mut DefIdMap<usize>,\n-                                   inlining_map: &Lock<InliningMap<'tcx>>) {\n-    if !visited.lock().insert(starting_point.clone()) {\n+                                   inlining_map: MTRef<'_, MTLock<InliningMap<'tcx>>>) {\n+    if !visited.lock_mut().insert(starting_point.clone()) {\n         // We've been here already, no need to search again.\n         return;\n     }\n@@ -434,7 +440,7 @@ fn collect_items_rec<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n fn record_accesses<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              caller: MonoItem<'tcx>,\n                              callees: &[MonoItem<'tcx>],\n-                             inlining_map: &Lock<InliningMap<'tcx>>) {\n+                             inlining_map: MTRef<'_, MTLock<InliningMap<'tcx>>>) {\n     let is_inlining_candidate = |mono_item: &MonoItem<'tcx>| {\n         mono_item.instantiation_mode(tcx) == InstantiationMode::LocalCopy\n     };\n@@ -444,7 +450,7 @@ fn record_accesses<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              (*mono_item, is_inlining_candidate(mono_item))\n                           });\n \n-    inlining_map.lock().record_accesses(caller, accesses);\n+    inlining_map.lock_mut().record_accesses(caller, accesses);\n }\n \n fn check_recursion_limit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,"}]}