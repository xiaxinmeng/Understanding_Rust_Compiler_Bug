{"sha": "da1ca5df6e0ce759d409ce853d836cb00542c44f", "node_id": "C_kwDOAAsO6NoAKGRhMWNhNWRmNmUwY2U3NTlkNDA5Y2U4NTNkODM2Y2IwMDU0MmM0NGY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-02T23:39:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-02T23:39:16Z"}, "message": "Rollup merge of #104298 - tbu-:pr_set_extension_caveats, r=m-ou-se\n\nAdd notes and examples about non-intuitive `PathBuf::set_extension` behavior\n\nBasically, passing the empty string will actually remove the extension instead of setting it to the empty string. This might change what is considered to be an extension. Additionally, passing an extension that contains dots will make the path only consider the last part of it to be the new extension.", "tree": {"sha": "ffd2f49f671998264f89b3fc4307883bea885ae4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffd2f49f671998264f89b3fc4307883bea885ae4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da1ca5df6e0ce759d409ce853d836cb00542c44f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjs2skCRBK7hj4Ov3rIwAA+UsIAKFMjeGb/jkUXzngKw2V75Cy\nNfx9WKj7COwGMPOpwQlZLvzCpwQpkoSPd7DsDecQtkskdbE6SQ3u8gcIt23vWW3w\n+Ytnzdz8IIjTYHPEkLOPabOMDD7bN3/52Hqd8HrAc3Y/AosCr5+nLl3yqDUTKYJQ\n/x2dmAHbrRt0RRgymej7GALEc2Q+yMIVggz4yQwIB7vauIpIIoUIJj+lEZYqf4XQ\n88ELl/E1UBL6VQtdBAfS8thYPAKfHqi5F6FUMisPAE2Qki5757cWbKTlsUYIG77l\nEQSA1Tqz0RYXjOAuFQNuPLS0fdYJxV6ZIFI9lW6THALlRumfykrajk1C4lPzBQ0=\n=Wmn4\n-----END PGP SIGNATURE-----\n", "payload": "tree ffd2f49f671998264f89b3fc4307883bea885ae4\nparent 722bc0c8ee92b391ddf6bd77f43fae1432d9234f\nparent 40916ef88f7809c5e8956a3917e00681ad25c30b\nauthor Michael Goulet <michael@errs.io> 1672702756 -0800\ncommitter GitHub <noreply@github.com> 1672702756 -0800\n\nRollup merge of #104298 - tbu-:pr_set_extension_caveats, r=m-ou-se\n\nAdd notes and examples about non-intuitive `PathBuf::set_extension` behavior\n\nBasically, passing the empty string will actually remove the extension instead of setting it to the empty string. This might change what is considered to be an extension. Additionally, passing an extension that contains dots will make the path only consider the last part of it to be the new extension.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da1ca5df6e0ce759d409ce853d836cb00542c44f", "html_url": "https://github.com/rust-lang/rust/commit/da1ca5df6e0ce759d409ce853d836cb00542c44f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da1ca5df6e0ce759d409ce853d836cb00542c44f/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "722bc0c8ee92b391ddf6bd77f43fae1432d9234f", "url": "https://api.github.com/repos/rust-lang/rust/commits/722bc0c8ee92b391ddf6bd77f43fae1432d9234f", "html_url": "https://github.com/rust-lang/rust/commit/722bc0c8ee92b391ddf6bd77f43fae1432d9234f"}, {"sha": "40916ef88f7809c5e8956a3917e00681ad25c30b", "url": "https://api.github.com/repos/rust-lang/rust/commits/40916ef88f7809c5e8956a3917e00681ad25c30b", "html_url": "https://github.com/rust-lang/rust/commit/40916ef88f7809c5e8956a3917e00681ad25c30b"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "19d8f1edaf4c91087036159194f1c6f8b67034c0", "filename": "library/std/src/path.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/da1ca5df6e0ce759d409ce853d836cb00542c44f/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da1ca5df6e0ce759d409ce853d836cb00542c44f/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=da1ca5df6e0ce759d409ce853d836cb00542c44f", "patch": "@@ -1414,14 +1414,29 @@ impl PathBuf {\n         self.push(file_name);\n     }\n \n-    /// Updates [`self.extension`] to `extension`.\n+    /// Updates [`self.extension`] to `Some(extension)` or to `None` if\n+    /// `extension` is empty.\n     ///\n     /// Returns `false` and does nothing if [`self.file_name`] is [`None`],\n     /// returns `true` and updates the extension otherwise.\n     ///\n     /// If [`self.extension`] is [`None`], the extension is added; otherwise\n     /// it is replaced.\n     ///\n+    /// If `extension` is the empty string, [`self.extension`] will be [`None`]\n+    /// afterwards, not `Some(\"\")`.\n+    ///\n+    /// # Caveats\n+    ///\n+    /// The new `extension` may contain dots and will be used in its entirety,\n+    /// but only the part after the final dot will be reflected in\n+    /// [`self.extension`].\n+    ///\n+    /// If the file stem contains internal dots and `extension` is empty, part\n+    /// of the old file stem will be considered the new [`self.extension`].\n+    ///\n+    /// See the examples below.\n+    ///\n     /// [`self.file_name`]: Path::file_name\n     /// [`self.extension`]: Path::extension\n     ///\n@@ -1435,8 +1450,20 @@ impl PathBuf {\n     /// p.set_extension(\"force\");\n     /// assert_eq!(Path::new(\"/feel/the.force\"), p.as_path());\n     ///\n-    /// p.set_extension(\"dark_side\");\n-    /// assert_eq!(Path::new(\"/feel/the.dark_side\"), p.as_path());\n+    /// p.set_extension(\"dark.side\");\n+    /// assert_eq!(Path::new(\"/feel/the.dark.side\"), p.as_path());\n+    ///\n+    /// p.set_extension(\"cookie\");\n+    /// assert_eq!(Path::new(\"/feel/the.dark.cookie\"), p.as_path());\n+    ///\n+    /// p.set_extension(\"\");\n+    /// assert_eq!(Path::new(\"/feel/the.dark\"), p.as_path());\n+    ///\n+    /// p.set_extension(\"\");\n+    /// assert_eq!(Path::new(\"/feel/the\"), p.as_path());\n+    ///\n+    /// p.set_extension(\"\");\n+    /// assert_eq!(Path::new(\"/feel/the\"), p.as_path());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn set_extension<S: AsRef<OsStr>>(&mut self, extension: S) -> bool {"}]}