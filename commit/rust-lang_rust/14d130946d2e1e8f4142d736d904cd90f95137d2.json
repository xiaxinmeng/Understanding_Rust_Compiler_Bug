{"sha": "14d130946d2e1e8f4142d736d904cd90f95137d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ZDEzMDk0NmQyZTFlOGY0MTQyZDczNmQ5MDRjZDkwZjk1MTM3ZDI=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-06-24T18:39:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-24T18:39:57Z"}, "message": "Merge pull request #210 from RalfJung/ptrcast\n\nChange how pointer casts work", "tree": {"sha": "72138951c61b43505bc241cc9c48294009b7b3b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72138951c61b43505bc241cc9c48294009b7b3b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14d130946d2e1e8f4142d736d904cd90f95137d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14d130946d2e1e8f4142d736d904cd90f95137d2", "html_url": "https://github.com/rust-lang/rust/commit/14d130946d2e1e8f4142d736d904cd90f95137d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14d130946d2e1e8f4142d736d904cd90f95137d2/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86e2367029256b14a44412ee6e78fa42d7828e1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/86e2367029256b14a44412ee6e78fa42d7828e1f", "html_url": "https://github.com/rust-lang/rust/commit/86e2367029256b14a44412ee6e78fa42d7828e1f"}, {"sha": "76a1d66e77abe7ce7e32796fcf4283dab0c5c763", "url": "https://api.github.com/repos/rust-lang/rust/commits/76a1d66e77abe7ce7e32796fcf4283dab0c5c763", "html_url": "https://github.com/rust-lang/rust/commit/76a1d66e77abe7ce7e32796fcf4283dab0c5c763"}], "stats": {"total": 123, "additions": 80, "deletions": 43}, "files": [{"sha": "cb0b1121709875b92b2c67fc48f5c250fde111c2", "filename": "src/cast.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/14d130946d2e1e8f4142d736d904cd90f95137d2/src%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d130946d2e1e8f4142d736d904cd90f95137d2/src%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcast.rs?ref=14d130946d2e1e8f4142d736d904cd90f95137d2", "patch": "@@ -19,9 +19,21 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             F32 => self.cast_float(val.to_f32()? as f64, dest_ty),\n             F64 => self.cast_float(val.to_f64()?, dest_ty),\n \n-            I8 | I16 | I32 | I64 | I128 => self.cast_signed_int(val.to_i128()?, dest_ty),\n-\n-            Bool | Char | U8 | U16 | U32 | U64 | U128 => self.cast_int(val.to_u128()?, dest_ty, false),\n+            I8 | I16 | I32 | I64 | I128 => {\n+                if val.is_ptr() {\n+                    self.cast_ptr(val, dest_ty)\n+                } else {\n+                    self.cast_signed_int(val.to_i128()?, dest_ty)\n+                }\n+            },\n+\n+            Bool | Char | U8 | U16 | U32 | U64 | U128 => {\n+                if val.is_ptr() {\n+                    self.cast_ptr(val, dest_ty)\n+                } else {\n+                    self.cast_int(val.to_u128()?, dest_ty, false)\n+                }\n+            },\n \n             FnPtr | Ptr => self.cast_ptr(val, dest_ty),\n         }\n@@ -70,6 +82,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             TyChar if v as u8 as u128 == v => Ok(PrimVal::Bytes(v)),\n             TyChar => Err(EvalError::InvalidChar(v)),\n \n+            // No alignment check needed for raw pointers\n             TyRawPtr(_) => Ok(PrimVal::Bytes(v % (1 << self.memory.pointer_size()))),\n \n             _ => Err(EvalError::Unimplemented(format!(\"int to {:?} cast\", ty))),\n@@ -94,8 +107,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     fn cast_ptr(&self, ptr: PrimVal, ty: Ty<'tcx>) -> EvalResult<'tcx, PrimVal> {\n         use rustc::ty::TypeVariants::*;\n         match ty.sty {\n-            TyRef(..) | TyRawPtr(_) | TyFnPtr(_) | TyInt(_) | TyUint(_) =>\n+            // Casting to a reference or fn pointer is not permitted by rustc, no need to support it here.\n+            TyRawPtr(_) | TyInt(IntTy::Is) | TyUint(UintTy::Us) =>\n                 Ok(ptr),\n+            TyInt(_) | TyUint(_) => Err(EvalError::ReadPointerAsBytes),\n             _ => Err(EvalError::Unimplemented(format!(\"ptr to {:?} cast\", ty))),\n         }\n     }"}, {"sha": "919232d9eef703c949051a24fb1a0deef994e242", "filename": "src/error.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14d130946d2e1e8f4142d736d904cd90f95137d2/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d130946d2e1e8f4142d736d904cd90f95137d2/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=14d130946d2e1e8f4142d736d904cd90f95137d2", "patch": "@@ -21,7 +21,7 @@ pub enum EvalError<'tcx> {\n         access: bool,\n         allocation_size: u64,\n     },\n-    NullPointerOutOfBounds,\n+    InvalidNullPointerUsage,\n     ReadPointerAsBytes,\n     ReadBytesAsPointer,\n     InvalidPointerMath,\n@@ -84,8 +84,8 @@ impl<'tcx> Error for EvalError<'tcx> {\n                 \"invalid enum discriminant value read\",\n             EvalError::PointerOutOfBounds { .. } =>\n                 \"pointer offset outside bounds of allocation\",\n-            EvalError::NullPointerOutOfBounds =>\n-                \"invalid NULL pointer offset\",\n+            EvalError::InvalidNullPointerUsage =>\n+                \"invalid use of NULL pointer\",\n             EvalError::ReadPointerAsBytes =>\n                 \"a raw memory access tried to access part of a pointer value as raw bytes\",\n             EvalError::ReadBytesAsPointer =>"}, {"sha": "2c27dea2843b052a3842371789a972b113bb192d", "filename": "src/eval_context.rs", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/14d130946d2e1e8f4142d736d904cd90f95137d2/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d130946d2e1e8f4142d736d904cd90f95137d2/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=14d130946d2e1e8f4142d736d904cd90f95137d2", "patch": "@@ -664,6 +664,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             Ref(_, _, ref lvalue) => {\n                 let src = self.eval_lvalue(lvalue)?;\n                 let (ptr, extra) = self.force_allocation(src)?.to_ptr_and_extra();\n+                let ty = self.lvalue_ty(lvalue);\n \n                 let val = match extra {\n                     LvalueExtra::None => Value::ByVal(ptr),\n@@ -673,6 +674,29 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         bug!(\"attempted to take a reference to an enum downcast lvalue\"),\n                 };\n \n+                // Check alignment and non-NULLness.\n+                let (_, align) = self.size_and_align_of_dst(ty, val)?;\n+                match ptr {\n+                    PrimVal::Ptr(ptr) => {\n+                        self.memory.check_align(ptr, align, 0)?;\n+                    }\n+                    PrimVal::Bytes(bytes) => {\n+                        let v = ((bytes as u128) % (1 << self.memory.pointer_size())) as u64;\n+                        if v == 0 {\n+                            return Err(EvalError::InvalidNullPointerUsage);\n+                        }\n+                        if v % align != 0 {\n+                            return Err(EvalError::AlignmentCheckFailed {\n+                                has: v % align,\n+                                required: align,\n+                            });\n+                        }\n+                    }\n+                    PrimVal::Undef => {\n+                        return Err(EvalError::ReadUndefBytes);\n+                    }\n+                }\n+\n                 self.write_value(val, dest, dest_ty)?;\n             }\n \n@@ -717,19 +741,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                 (Value::ByVal(_), _) => bug!(\"expected fat ptr\"),\n                             }\n                         } else {\n-                            // First, try casting\n-                            let dest_val = self.value_to_primval(src, src_ty).and_then(\n-                                |src_val| { self.cast_primval(src_val, src_ty, dest_ty) })\n-                                // Alternatively, if the sizes are equal, try just reading at the target type\n-                                .or_else(|err| {\n-                                    let size = self.type_size(src_ty)?;\n-                                    if size.is_some() && size == self.type_size(dest_ty)? {\n-                                        self.value_to_primval(src, dest_ty)\n-                                    } else {\n-                                        Err(err)\n-                                    }\n-                                });\n-                            self.write_value(Value::ByVal(dest_val?), dest, dest_ty)?;\n+                            let src_val = self.value_to_primval(src, src_ty)?;\n+                            let dest_val = self.cast_primval(src_val, src_ty, dest_ty)?;\n+                            self.write_value(Value::ByVal(dest_val), dest, dest_ty)?;\n                         }\n                     }\n \n@@ -908,7 +922,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         // allocation.\n \n         if ptr.is_null()? { // NULL pointers must only be offset by 0\n-            return if offset == 0 { Ok(ptr) } else { Err(EvalError::NullPointerOutOfBounds) };\n+            return if offset == 0 { Ok(ptr) } else { Err(EvalError::InvalidNullPointerUsage) };\n         }\n         // FIXME: assuming here that type size is < i64::max_value()\n         let pointee_size = self.type_size(pointee_ty)?.expect(\"cannot offset a pointer to an unsized type\") as i64;\n@@ -919,7 +933,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.memory.check_bounds(ptr, false)?;\n             } else if ptr.is_null()? {\n                 // We moved *to* a NULL pointer.  That seems wrong, LLVM considers the NULL pointer its own small allocation.  Reject this, for now.\n-                return Err(EvalError::NullPointerOutOfBounds);\n+                return Err(EvalError::InvalidNullPointerUsage);\n             }\n             Ok(ptr)\n         } else {"}, {"sha": "ae5f65a7166c6847fcfb0959fc27435a87123af8", "filename": "tests/compile-fail/int_ptr_cast.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/14d130946d2e1e8f4142d736d904cd90f95137d2/tests%2Fcompile-fail%2Fint_ptr_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d130946d2e1e8f4142d736d904cd90f95137d2/tests%2Fcompile-fail%2Fint_ptr_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fint_ptr_cast.rs?ref=14d130946d2e1e8f4142d736d904cd90f95137d2", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let x = 2usize as *const u32;\n+    // This must fail because alignment is violated\n+    let _ = unsafe { &*x }; //~ ERROR: tried to access memory with alignment 2, but alignment 4 is required\n+}"}, {"sha": "1897066f7bcc3c7078ebee8135f9b34da862acc7", "filename": "tests/compile-fail/int_ptr_cast2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/14d130946d2e1e8f4142d736d904cd90f95137d2/tests%2Fcompile-fail%2Fint_ptr_cast2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d130946d2e1e8f4142d736d904cd90f95137d2/tests%2Fcompile-fail%2Fint_ptr_cast2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fint_ptr_cast2.rs?ref=14d130946d2e1e8f4142d736d904cd90f95137d2", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let x = 0usize as *const u32;\n+    // This must fail because the pointer is NULL\n+    let _ = unsafe { &*x }; //~ ERROR: invalid use of NULL pointer\n+}"}, {"sha": "396c71ebb03d18298eff130625e9b26d108a402c", "filename": "tests/compile-fail/ptr_int_cast.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14d130946d2e1e8f4142d736d904cd90f95137d2/tests%2Fcompile-fail%2Fptr_int_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d130946d2e1e8f4142d736d904cd90f95137d2/tests%2Fcompile-fail%2Fptr_int_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_int_cast.rs?ref=14d130946d2e1e8f4142d736d904cd90f95137d2", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let x = &1;\n+    // Casting down to u8 and back up to a pointer loses too much precision; this must not work.\n+    let x = x as *const i32;\n+    let x = x as u8; //~ ERROR: a raw memory access tried to access part of a pointer value as raw bytes\n+    let x = x as *const i32;\n+    let _ = unsafe { *x };\n+}"}, {"sha": "4cf353298b9e8c7757adba02e770109f4fcb18fc", "filename": "tests/compile-fail/reference_to_packed.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14d130946d2e1e8f4142d736d904cd90f95137d2/tests%2Fcompile-fail%2Freference_to_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d130946d2e1e8f4142d736d904cd90f95137d2/tests%2Fcompile-fail%2Freference_to_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freference_to_packed.rs?ref=14d130946d2e1e8f4142d736d904cd90f95137d2", "patch": "@@ -11,6 +11,6 @@ fn main() {\n         x: 42,\n         y: 99,\n     };\n-    let p = &foo.x;\n-    let i = *p; //~ ERROR tried to access memory with alignment 1, but alignment 4 is required\n-}\n\\ No newline at end of file\n+    let p = &foo.x; //~ ERROR tried to access memory with alignment 1, but alignment 4 is required\n+    let i = *p;\n+}"}, {"sha": "5761f23b7dd41a6dc8b4648b58a13df1e9fb0b69", "filename": "tests/compile-fail/reference_to_packed_unsafe.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/86e2367029256b14a44412ee6e78fa42d7828e1f/tests%2Fcompile-fail%2Freference_to_packed_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e2367029256b14a44412ee6e78fa42d7828e1f/tests%2Fcompile-fail%2Freference_to_packed_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freference_to_packed_unsafe.rs?ref=86e2367029256b14a44412ee6e78fa42d7828e1f", "patch": "@@ -1,16 +0,0 @@\n-#![allow(dead_code, unused_variables)]\n-\n-#[repr(packed)]\n-struct Foo {\n-    x: i32,\n-    y: i32,\n-}\n-\n-fn main() {\n-    let foo = Foo {\n-        x: 42,\n-        y: 99,\n-    };\n-    let p: *const i32 = &foo.x;\n-    let x = unsafe { *p + foo.x }; //~ ERROR tried to access memory with alignment 1, but alignment 4 is required\n-}"}, {"sha": "fcab430f8fcbc869d04273ff171990b05b0a0aee", "filename": "tests/compile-fail/unaligned_ptr_cast.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14d130946d2e1e8f4142d736d904cd90f95137d2/tests%2Fcompile-fail%2Funaligned_ptr_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d130946d2e1e8f4142d736d904cd90f95137d2/tests%2Fcompile-fail%2Funaligned_ptr_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_ptr_cast.rs?ref=14d130946d2e1e8f4142d736d904cd90f95137d2", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    let x = &2u16;\n+    let x = x as *const _ as *const u32;\n+    // This must fail because alignment is violated\n+    let _ = unsafe { &*x }; //~ ERROR: tried to access memory with alignment 2, but alignment 4 is required\n+}"}, {"sha": "88fb16e069ec90b0ff625029e513694f63611f34", "filename": "tests/run-pass/ptr_int_casts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14d130946d2e1e8f4142d736d904cd90f95137d2/tests%2Frun-pass%2Fptr_int_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14d130946d2e1e8f4142d736d904cd90f95137d2/tests%2Frun-pass%2Fptr_int_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fptr_int_casts.rs?ref=14d130946d2e1e8f4142d736d904cd90f95137d2", "patch": "@@ -13,7 +13,7 @@ fn main() {\n \n     {   // ptr-int-ptr\n         let x = 13;\n-        let mut y = &x as *const _ as usize;\n+        let mut y = &x as &_ as *const _ as usize;\n         y += 13;\n         y -= 13;\n         let y = y as *const _;\n@@ -22,7 +22,7 @@ fn main() {\n \n     {   // fnptr-int-fnptr\n         let x : fn() -> i32 = f;\n-        let y : *mut u8 = unsafe { mem::transmute(x) };\n+        let y : *mut u8 = unsafe { mem::transmute(x as fn() -> i32) };\n         let mut y = y as usize;\n         y += 13;\n         y -= 13;"}]}