{"sha": "690a6a6c0eff1a3edeb5f4c2dcbf9994760c3184", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5MGE2YTZjMGVmZjFhM2VkZWI1ZjRjMmRjYmY5OTk0NzYwYzMxODQ=", "commit": {"author": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-10-14T20:09:28Z"}, "committer": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-10-14T20:52:07Z"}, "message": "manual-unwrap-or / remove unwrap_or_else suggestion due to ownership issues", "tree": {"sha": "3a11ed147d00e6e4e0ef66300b72fada4375a53c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a11ed147d00e6e4e0ef66300b72fada4375a53c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/690a6a6c0eff1a3edeb5f4c2dcbf9994760c3184", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/690a6a6c0eff1a3edeb5f4c2dcbf9994760c3184", "html_url": "https://github.com/rust-lang/rust/commit/690a6a6c0eff1a3edeb5f4c2dcbf9994760c3184", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/690a6a6c0eff1a3edeb5f4c2dcbf9994760c3184/comments", "author": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8fb69f065a427f5d3fc7222b834cad9a2a7a712", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8fb69f065a427f5d3fc7222b834cad9a2a7a712", "html_url": "https://github.com/rust-lang/rust/commit/a8fb69f065a427f5d3fc7222b834cad9a2a7a712"}], "stats": {"total": 99, "additions": 69, "deletions": 30}, "files": [{"sha": "ddb8cc25077e177bc3420f09a0e476799ab02e18", "filename": "clippy_lints/src/manual_unwrap_or.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/690a6a6c0eff1a3edeb5f4c2dcbf9994760c3184/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/690a6a6c0eff1a3edeb5f4c2dcbf9994760c3184/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs?ref=690a6a6c0eff1a3edeb5f4c2dcbf9994760c3184", "patch": "@@ -33,7 +33,7 @@ declare_clippy_lint! {\n     /// ```\n     pub MANUAL_UNWRAP_OR,\n     complexity,\n-    \"finds patterns that can be encoded more concisely with `Option::unwrap_or(_else)`\"\n+    \"finds patterns that can be encoded more concisely with `Option::unwrap_or`\"\n }\n \n declare_lint_pass!(ManualUnwrapOr => [MANUAL_UNWRAP_OR]);\n@@ -83,26 +83,19 @@ fn lint_option_unwrap_or_case<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tc\n         if let Some(scrutinee_snippet) = utils::snippet_opt(cx, scrutinee.span);\n         if let Some(none_body_snippet) = utils::snippet_opt(cx, none_arm.body.span);\n         if let Some(indent) = utils::indent_of(cx, expr.span);\n+        if constant_simple(cx, cx.typeck_results(), none_arm.body).is_some();\n         then {\n             let reindented_none_body =\n                 utils::reindent_multiline(none_body_snippet.into(), true, Some(indent));\n-            let eager_eval = constant_simple(cx, cx.typeck_results(), none_arm.body).is_some();\n-            let method = if eager_eval {\n-                \"unwrap_or\"\n-            } else {\n-                \"unwrap_or_else\"\n-            };\n             utils::span_lint_and_sugg(\n                 cx,\n                 MANUAL_UNWRAP_OR, expr.span,\n-                &format!(\"this pattern reimplements `Option::{}`\", &method),\n+                \"this pattern reimplements `Option::unwrap_or`\",\n                 \"replace with\",\n                 format!(\n-                    \"{}.{}({}{})\",\n+                    \"{}.unwrap_or({})\",\n                     scrutinee_snippet,\n-                    method,\n-                    if eager_eval { \"\" } else { \"|| \" },\n-                    reindented_none_body\n+                    reindented_none_body,\n                 ),\n                 Applicability::MachineApplicable,\n             );"}, {"sha": "6301d623a2b12955c92a29c9afcf13bbb2deff51", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/690a6a6c0eff1a3edeb5f4c2dcbf9994760c3184/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/690a6a6c0eff1a3edeb5f4c2dcbf9994760c3184/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=690a6a6c0eff1a3edeb5f4c2dcbf9994760c3184", "patch": "@@ -1183,7 +1183,7 @@ vec![\n     Lint {\n         name: \"manual_unwrap_or\",\n         group: \"complexity\",\n-        desc: \"finds patterns that can be encoded more concisely with `Option::unwrap_or(_else)`\",\n+        desc: \"finds patterns that can be encoded more concisely with `Option::unwrap_or`\",\n         deprecation: None,\n         module: \"manual_unwrap_or\",\n     },"}, {"sha": "a8736f1e6efe159c7390fc719585a2a2745369ae", "filename": "tests/ui/manual_unwrap_or.fixed", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/690a6a6c0eff1a3edeb5f4c2dcbf9994760c3184/tests%2Fui%2Fmanual_unwrap_or.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/690a6a6c0eff1a3edeb5f4c2dcbf9994760c3184/tests%2Fui%2Fmanual_unwrap_or.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_unwrap_or.fixed?ref=690a6a6c0eff1a3edeb5f4c2dcbf9994760c3184", "patch": "@@ -12,10 +12,11 @@ fn unwrap_or() {\n     Some(1).unwrap_or(1 + 42);\n \n     // multiline case\n-    Some(1).unwrap_or_else(|| {\n-        let a = 1 + 42;\n-        let b = a + 42;\n-        b + 42\n+    #[rustfmt::skip]\n+    Some(1).unwrap_or({\n+        42 + 42\n+            + 42 + 42 + 42\n+            + 42 + 42 + 42\n     });\n \n     // string case\n@@ -40,6 +41,28 @@ fn unwrap_or() {\n             None => break,\n         };\n     }\n+\n+    // cases where the none arm isn't a constant expression\n+    // are not linted due to potential ownership issues\n+\n+    // ownership issue example, don't lint\n+    struct NonCopyable;\n+    let mut option: Option<NonCopyable> = None;\n+    match option {\n+        Some(x) => x,\n+        None => {\n+            option = Some(NonCopyable);\n+            // some more code ...\n+            option.unwrap()\n+        },\n+    };\n+\n+    // ownership issue example, don't lint\n+    let option: Option<&str> = None;\n+    match option {\n+        Some(s) => s,\n+        None => &format!(\"{} {}!\", \"hello\", \"world\"),\n+    };\n }\n \n fn main() {}"}, {"sha": "bede8cffc326ecea9783815694c69bf9141c9352", "filename": "tests/ui/manual_unwrap_or.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/690a6a6c0eff1a3edeb5f4c2dcbf9994760c3184/tests%2Fui%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/690a6a6c0eff1a3edeb5f4c2dcbf9994760c3184/tests%2Fui%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_unwrap_or.rs?ref=690a6a6c0eff1a3edeb5f4c2dcbf9994760c3184", "patch": "@@ -21,13 +21,14 @@ fn unwrap_or() {\n     };\n \n     // multiline case\n+    #[rustfmt::skip]\n     match Some(1) {\n         Some(i) => i,\n         None => {\n-            let a = 1 + 42;\n-            let b = a + 42;\n-            b + 42\n-        },\n+            42 + 42\n+                + 42 + 42 + 42\n+                + 42 + 42 + 42\n+        }\n     };\n \n     // string case\n@@ -55,6 +56,28 @@ fn unwrap_or() {\n             None => break,\n         };\n     }\n+\n+    // cases where the none arm isn't a constant expression\n+    // are not linted due to potential ownership issues\n+\n+    // ownership issue example, don't lint\n+    struct NonCopyable;\n+    let mut option: Option<NonCopyable> = None;\n+    match option {\n+        Some(x) => x,\n+        None => {\n+            option = Some(NonCopyable);\n+            // some more code ...\n+            option.unwrap()\n+        },\n+    };\n+\n+    // ownership issue example, don't lint\n+    let option: Option<&str> = None;\n+    match option {\n+        Some(s) => s,\n+        None => &format!(\"{} {}!\", \"hello\", \"world\"),\n+    };\n }\n \n fn main() {}"}, {"sha": "674f2952635f6298adeb7d3cbfae994a804e7a10", "filename": "tests/ui/manual_unwrap_or.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/690a6a6c0eff1a3edeb5f4c2dcbf9994760c3184/tests%2Fui%2Fmanual_unwrap_or.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/690a6a6c0eff1a3edeb5f4c2dcbf9994760c3184/tests%2Fui%2Fmanual_unwrap_or.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_unwrap_or.stderr?ref=690a6a6c0eff1a3edeb5f4c2dcbf9994760c3184", "patch": "@@ -27,29 +27,29 @@ LL | |         None => 1 + 42,\n LL | |     };\n    | |_____^ help: replace with: `Some(1).unwrap_or(1 + 42)`\n \n-error: this pattern reimplements `Option::unwrap_or_else`\n-  --> $DIR/manual_unwrap_or.rs:24:5\n+error: this pattern reimplements `Option::unwrap_or`\n+  --> $DIR/manual_unwrap_or.rs:25:5\n    |\n LL | /     match Some(1) {\n LL | |         Some(i) => i,\n LL | |         None => {\n-LL | |             let a = 1 + 42;\n+LL | |             42 + 42\n ...  |\n-LL | |         },\n+LL | |         }\n LL | |     };\n    | |_____^\n    |\n help: replace with\n    |\n-LL |     Some(1).unwrap_or_else(|| {\n-LL |         let a = 1 + 42;\n-LL |         let b = a + 42;\n-LL |         b + 42\n+LL |     Some(1).unwrap_or({\n+LL |         42 + 42\n+LL |             + 42 + 42 + 42\n+LL |             + 42 + 42 + 42\n LL |     });\n    |\n \n error: this pattern reimplements `Option::unwrap_or`\n-  --> $DIR/manual_unwrap_or.rs:34:5\n+  --> $DIR/manual_unwrap_or.rs:35:5\n    |\n LL | /     match Some(\"Bob\") {\n LL | |         Some(i) => i,"}]}