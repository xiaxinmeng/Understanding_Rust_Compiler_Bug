{"sha": "f80d6dc4c1b9da9d4181742efe1a2206c7d6f5c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MGQ2ZGM0YzFiOWRhOWQ0MTgxNzQyZWZlMWEyMjA2YzdkNmY1YzU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-06-28T18:15:34Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-07-04T01:06:36Z"}, "message": "rustc: improve -Z trans-stats to report per-fn LLVM instruction counts and translation timing", "tree": {"sha": "38b68923733e54d3e7556416d5931ba4bfb8aeff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38b68923733e54d3e7556416d5931ba4bfb8aeff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f80d6dc4c1b9da9d4181742efe1a2206c7d6f5c5", "comment_count": 13, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f80d6dc4c1b9da9d4181742efe1a2206c7d6f5c5", "html_url": "https://github.com/rust-lang/rust/commit/f80d6dc4c1b9da9d4181742efe1a2206c7d6f5c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f80d6dc4c1b9da9d4181742efe1a2206c7d6f5c5/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c6fc46c030ab0515a052fa99c9e10c75cfc8184", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c6fc46c030ab0515a052fa99c9e10c75cfc8184", "html_url": "https://github.com/rust-lang/rust/commit/0c6fc46c030ab0515a052fa99c9e10c75cfc8184"}], "stats": {"total": 94, "additions": 66, "deletions": 28}, "files": [{"sha": "0ea7c7296243d3955cb58050ad57589c26cb2474", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 54, "deletions": 11, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/f80d6dc4c1b9da9d4181742efe1a2206c7d6f5c5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f80d6dc4c1b9da9d4181742efe1a2206c7d6f5c5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=f80d6dc4c1b9da9d4181742efe1a2206c7d6f5c5", "patch": "@@ -72,6 +72,7 @@ use std::uint;\n use std::vec;\n use std::local_data;\n use extra::time;\n+use extra::sort;\n use syntax::ast::ident;\n use syntax::ast_map::{path, path_elt_to_str, path_name};\n use syntax::ast_util::{local_def, path_to_ident};\n@@ -141,6 +142,48 @@ fn fcx_has_nonzero_span(fcx: fn_ctxt) -> bool {\n     }\n }\n \n+struct StatRecorder<'self> {\n+    ccx: @mut CrateContext,\n+    name: &'self str,\n+    start: u64,\n+    istart: uint,\n+}\n+\n+impl<'self> StatRecorder<'self> {\n+    pub fn new(ccx: @mut CrateContext,\n+               name: &'self str) -> StatRecorder<'self> {\n+        let start = if ccx.sess.trans_stats() {\n+            time::precise_time_ns()\n+        } else {\n+            0\n+        };\n+        let istart = ccx.stats.n_llvm_insns;\n+        StatRecorder {\n+            ccx: ccx,\n+            name: name,\n+            start: start,\n+            istart: istart,\n+        }\n+    }\n+}\n+\n+#[unsafe_destructor]\n+impl<'self> Drop for StatRecorder<'self> {\n+    pub fn drop(&self) {\n+        if self.ccx.sess.trans_stats() {\n+            let end = time::precise_time_ns();\n+            let elapsed = ((end - self.start) / 1_000_000) as uint;\n+            let iend = self.ccx.stats.n_llvm_insns;\n+            self.ccx.stats.fn_stats.push((self.name.to_owned(),\n+                                          elapsed,\n+                                          iend - self.istart));\n+            self.ccx.stats.n_fns += 1;\n+            // Reset LLVM insn count to avoid compound costs.\n+            self.ccx.stats.n_llvm_insns = self.istart;\n+        }\n+    }\n+}\n+\n pub fn decl_fn(llmod: ModuleRef, name: &str, cc: lib::llvm::CallConv, ty: Type) -> ValueRef {\n     let llfn: ValueRef = do name.as_c_str |buf| {\n         unsafe {\n@@ -1866,18 +1909,16 @@ pub fn trans_fn(ccx: @mut CrateContext,\n                 param_substs: Option<@param_substs>,\n                 id: ast::node_id,\n                 attrs: &[ast::attribute]) {\n-    let do_time = ccx.sess.trans_stats();\n-    let start = if do_time { time::get_time() }\n-                else { time::Timespec::new(0, 0) };\n+\n+    let the_path_str = path_str(ccx.sess, path);\n+    let _s = StatRecorder::new(ccx, the_path_str);\n     debug!(\"trans_fn(self_arg=%?, param_substs=%s)\",\n            self_arg,\n            param_substs.repr(ccx.tcx));\n     let _icx = push_ctxt(\"trans_fn\");\n-    ccx.stats.n_fns += 1;\n-    let the_path_str = path_str(ccx.sess, path);\n     let output_type = ty::ty_fn_ret(ty::node_id_to_type(ccx.tcx, id));\n     trans_closure(ccx,\n-                  path,\n+                  copy path,\n                   decl,\n                   body,\n                   llfndecl,\n@@ -1893,10 +1934,6 @@ pub fn trans_fn(ccx: @mut CrateContext,\n                       }\n                   },\n                   |_bcx| { });\n-    if do_time {\n-        let end = time::get_time();\n-        ccx.log_fn_time(the_path_str, start, end);\n-    }\n }\n \n pub fn trans_enum_variant(ccx: @mut CrateContext,\n@@ -2961,8 +2998,14 @@ pub fn trans_crate(sess: session::Session,\n         io::println(fmt!(\"n_monos: %u\", ccx.stats.n_monos));\n         io::println(fmt!(\"n_inlines: %u\", ccx.stats.n_inlines));\n         io::println(fmt!(\"n_closures: %u\", ccx.stats.n_closures));\n+        io::println(\"fn stats:\");\n+        do sort::quick_sort(ccx.stats.fn_stats) |&(_, _, insns_a), &(_, _, insns_b)| {\n+            insns_a > insns_b\n+        }\n+        for ccx.stats.fn_stats.iter().advance |&(name, ms, insns)| {\n+            io::println(fmt!(\"%u insns, %u ms, %s\", insns, ms, name));\n+        }\n     }\n-\n     if ccx.sess.count_llvm_insns() {\n         for ccx.stats.llvm_insns.iter().advance |(&k, &v)| {\n             io::println(fmt!(\"%-7u %s\", v, k));"}, {"sha": "b62b73423e9b1be8b03472378be325658a24f901", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f80d6dc4c1b9da9d4181742efe1a2206c7d6f5c5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f80d6dc4c1b9da9d4181742efe1a2206c7d6f5c5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=f80d6dc4c1b9da9d4181742efe1a2206c7d6f5c5", "patch": "@@ -46,6 +46,9 @@ pub fn B(cx: block) -> BuilderRef {\n }\n \n pub fn count_insn(cx: block, category: &str) {\n+    if cx.ccx().sess.trans_stats() {\n+        cx.ccx().stats.n_llvm_insns += 1;\n+    }\n     do base::with_insn_ctxt |v| {\n         let h = &mut cx.ccx().stats.llvm_insns;\n "}, {"sha": "e4537332e5615db10a8c810b196c2611ea492752", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f80d6dc4c1b9da9d4181742efe1a2206c7d6f5c5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f80d6dc4c1b9da9d4181742efe1a2206c7d6f5c5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=f80d6dc4c1b9da9d4181742efe1a2206c7d6f5c5", "patch": "@@ -96,8 +96,10 @@ pub struct Stats {\n     n_monos: uint,\n     n_inlines: uint,\n     n_closures: uint,\n+    n_llvm_insns: uint,\n+    llvm_insn_ctxt: ~[~str],\n     llvm_insns: HashMap<~str, uint>,\n-    fn_times: ~[(~str, int)] // (ident, time)\n+    fn_stats: ~[(~str, uint, uint)] // (ident, time-in-ms, llvm-instructions)\n }\n \n pub struct BuilderRef_res {"}, {"sha": "ebaa3179442843e3f20b7331084ef98ec9b3f3b4", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f80d6dc4c1b9da9d4181742efe1a2206c7d6f5c5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f80d6dc4c1b9da9d4181742efe1a2206c7d6f5c5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=f80d6dc4c1b9da9d4181742efe1a2206c7d6f5c5", "patch": "@@ -210,8 +210,10 @@ impl CrateContext {\n                     n_monos: 0u,\n                     n_inlines: 0u,\n                     n_closures: 0u,\n+                    n_llvm_insns: 0u,\n+                    llvm_insn_ctxt: ~[],\n                     llvm_insns: HashMap::new(),\n-                    fn_times: ~[]\n+                    fn_stats: ~[]\n                   },\n                   upcalls: upcall::declare_upcalls(targ_cfg, llmod),\n                   tydesc_type: tydesc_type,\n@@ -226,12 +228,6 @@ impl CrateContext {\n             }\n         }\n     }\n-\n-    pub fn log_fn_time(&mut self, name: ~str, start: time::Timespec, end: time::Timespec) {\n-        let elapsed = 1000 * ((end.sec - start.sec) as int) +\n-            ((end.nsec as int) - (start.nsec as int)) / 1000000;\n-        self.stats.fn_times.push((name, elapsed));\n-    }\n }\n \n #[unsafe_destructor]"}, {"sha": "84a91cf161504f8e9b8f1911c3d2107caea65e4e", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f80d6dc4c1b9da9d4181742efe1a2206c7d6f5c5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f80d6dc4c1b9da9d4181742efe1a2206c7d6f5c5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=f80d6dc4c1b9da9d4181742efe1a2206c7d6f5c5", "patch": "@@ -738,15 +738,9 @@ pub fn make_generic_glue(ccx: @mut CrateContext,\n                          name: &str)\n                       -> ValueRef {\n     let _icx = push_ctxt(\"make_generic_glue\");\n-    if !ccx.sess.trans_stats() {\n-        return make_generic_glue_inner(ccx, t, llfn, helper);\n-    }\n-\n-    let start = time::get_time();\n-    let llval = make_generic_glue_inner(ccx, t, llfn, helper);\n-    let end = time::get_time();\n-    ccx.log_fn_time(fmt!(\"glue %s %s\", name, ty_to_short_str(ccx.tcx, t)), start, end);\n-    return llval;\n+    let glue_name = fmt!(\"glue %s %s\", name, ty_to_short_str(ccx.tcx, t));\n+    let _s = StatRecorder::new(ccx, glue_name);\n+    make_generic_glue_inner(ccx, t, llfn, helper)\n }\n \n pub fn emit_tydescs(ccx: &mut CrateContext) {"}]}