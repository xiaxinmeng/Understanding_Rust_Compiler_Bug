{"sha": "cfca901cfe0e9671569f0a77274c713b7da6d637", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmY2E5MDFjZmUwZTk2NzE1NjlmMGE3NzI3NGM3MTNiN2RhNmQ2Mzc=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-31T20:29:00Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-31T20:29:08Z"}, "message": "Add block-comment support, various additional operators. Rustc can lex itself now.", "tree": {"sha": "45869c3da8d9ee9101fd62743083c71bc58c92e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45869c3da8d9ee9101fd62743083c71bc58c92e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfca901cfe0e9671569f0a77274c713b7da6d637", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfca901cfe0e9671569f0a77274c713b7da6d637", "html_url": "https://github.com/rust-lang/rust/commit/cfca901cfe0e9671569f0a77274c713b7da6d637", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfca901cfe0e9671569f0a77274c713b7da6d637/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47e86a05ae7c76046319e8f326f2e85de1c505b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/47e86a05ae7c76046319e8f326f2e85de1c505b1", "html_url": "https://github.com/rust-lang/rust/commit/47e86a05ae7c76046319e8f326f2e85de1c505b1"}], "stats": {"total": 224, "additions": 164, "deletions": 60}, "files": [{"sha": "95aac8c519ed051f625c87105d965c8aa7fe8790", "filename": "src/comp/fe/lexer.rs", "status": "modified", "additions": 120, "deletions": 23, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/cfca901cfe0e9671569f0a77274c713b7da6d637/src%2Fcomp%2Ffe%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfca901cfe0e9671569f0a77274c713b7da6d637/src%2Fcomp%2Ffe%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffe%2Flexer.rs?ref=cfca901cfe0e9671569f0a77274c713b7da6d637", "patch": "@@ -238,16 +238,48 @@ fn consume_any_whitespace(reader rdr) {\n \n fn consume_any_line_comment(reader rdr) {\n     if (rdr.curr() == '/') {\n-        if (rdr.next() == '/') {\n-            while (rdr.curr() != '\\n') {\n+        alt (rdr.next()) {\n+            case ('/') {\n+                while (rdr.curr() != '\\n') {\n+                    rdr.bump();\n+                }\n+                // Restart whitespace munch.\n+                be consume_any_whitespace(rdr);\n+            }\n+            case ('*') {\n                 rdr.bump();\n+                rdr.bump();\n+                be consume_block_comment(rdr);\n+            }\n+            case (_) {\n+                ret;\n             }\n-            // Restart whitespace munch.\n-            be consume_any_whitespace(rdr);\n         }\n     }\n }\n \n+\n+fn consume_block_comment(reader rdr) {\n+    let int level = 1;\n+    while (level > 0) {\n+        if (rdr.curr() == '/' && rdr.next() == '*') {\n+            rdr.bump();\n+            rdr.bump();\n+            level += 1;\n+        } else {\n+            if (rdr.curr() == '*' && rdr.next() == '/') {\n+                rdr.bump();\n+                rdr.bump();\n+                level -= 1;\n+            } else {\n+                rdr.bump();\n+            }\n+        }\n+    }\n+    // restart whitespace munch.\n+    be consume_any_whitespace(rdr);\n+}\n+\n fn next_token(reader rdr) -> token.token {\n     auto accum_str = \"\";\n     auto accum_int = 0;\n@@ -310,18 +342,19 @@ fn next_token(reader rdr) -> token.token {\n     }\n \n \n-    fn op_or_opeq(reader rdr, token.op op) -> token.token {\n+    fn binop(reader rdr, token.binop op) -> token.token {\n         rdr.bump();\n         if (rdr.next() == '=') {\n             rdr.bump();\n-            ret token.OPEQ(op);\n+            ret token.BINOPEQ(op);\n         } else {\n-            ret token.OP(op);\n+            ret token.BINOP(op);\n         }\n     }\n \n     alt (c) {\n         // One-byte tokens.\n+        case (':') { rdr.bump(); ret token.COLON(); }\n         case (';') { rdr.bump(); ret token.SEMI(); }\n         case (',') { rdr.bump(); ret token.COMMA(); }\n         case ('.') { rdr.bump(); ret token.DOT(); }\n@@ -334,16 +367,74 @@ fn next_token(reader rdr) -> token.token {\n         case ('@') { rdr.bump(); ret token.AT(); }\n         case ('#') { rdr.bump(); ret token.POUND(); }\n         case ('_') { rdr.bump(); ret token.UNDERSCORE(); }\n+        case ('~') { rdr.bump(); ret token.TILDE(); }\n+\n \n         // Multi-byte tokens.\n         case ('=') {\n-            if (rdr.next() == '=') {\n-                rdr.bump();\n+            rdr.bump();\n+            if (rdr.curr() == '=') {\n                 rdr.bump();\n-                ret token.OP(token.EQEQ());\n+                ret token.EQEQ();\n             } else {\n+                ret token.EQ();\n+            }\n+        }\n+\n+        case ('!') {\n+            rdr.bump();\n+            if (rdr.curr() == '=') {\n                 rdr.bump();\n-                ret token.OP(token.EQ());\n+                ret token.NE();\n+            } else {\n+                ret token.NOT();\n+            }\n+        }\n+\n+        case ('<') {\n+            rdr.bump();\n+            alt (rdr.curr()) {\n+                case ('=') {\n+                    rdr.bump();\n+                    ret token.LE();\n+                }\n+                case ('<') {\n+                    ret binop(rdr, token.LSL());\n+                }\n+                case ('-') {\n+                    rdr.bump();\n+                    ret token.LARROW();\n+                }\n+                case ('|') {\n+                    rdr.bump();\n+                    ret token.SEND();\n+                }\n+                case (_) {\n+                    ret token.LT();\n+                }\n+            }\n+        }\n+\n+        case ('>') {\n+            rdr.bump();\n+            alt (rdr.curr()) {\n+                case ('=') {\n+                    rdr.bump();\n+                    ret token.GE();\n+                }\n+\n+                case ('>') {\n+                    if (rdr.next() == '>') {\n+                        rdr.bump();\n+                        ret binop(rdr, token.ASR());\n+                    } else {\n+                        ret binop(rdr, token.LSR());\n+                    }\n+                }\n+\n+                case (_) {\n+                    ret token.GT();\n+                }\n             }\n         }\n \n@@ -426,42 +517,48 @@ fn next_token(reader rdr) -> token.token {\n                 rdr.bump();\n                 ret token.RARROW();\n             } else {\n-                ret op_or_opeq(rdr, token.MINUS());\n+                ret binop(rdr, token.MINUS());\n             }\n         }\n \n         case ('&') {\n             if (rdr.next() == '&') {\n                 rdr.bump();\n                 rdr.bump();\n-                ret token.OP(token.ANDAND());\n+                ret token.ANDAND();\n             } else {\n-                ret op_or_opeq(rdr, token.AND());\n+                ret binop(rdr, token.AND());\n+            }\n+        }\n+\n+        case ('|') {\n+            if (rdr.next() == '|') {\n+                rdr.bump();\n+                rdr.bump();\n+                ret token.OROR();\n+            } else {\n+                ret binop(rdr, token.OR());\n             }\n         }\n \n         case ('+') {\n-            ret op_or_opeq(rdr, token.PLUS());\n+            ret binop(rdr, token.PLUS());\n         }\n \n         case ('*') {\n-            ret op_or_opeq(rdr, token.STAR());\n+            ret binop(rdr, token.STAR());\n         }\n \n         case ('/') {\n-            ret op_or_opeq(rdr, token.STAR());\n-        }\n-\n-        case ('!') {\n-            ret op_or_opeq(rdr, token.NOT());\n+            ret binop(rdr, token.STAR());\n         }\n \n         case ('^') {\n-            ret op_or_opeq(rdr, token.CARET());\n+            ret binop(rdr, token.CARET());\n         }\n \n         case ('%') {\n-            ret op_or_opeq(rdr, token.PERCENT());\n+            ret binop(rdr, token.PERCENT());\n         }\n \n     }"}, {"sha": "e9e6f2228d8d11ee041b5c4743d2d879538e3c80", "filename": "src/comp/fe/token.rs", "status": "modified", "additions": 44, "deletions": 37, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/cfca901cfe0e9671569f0a77274c713b7da6d637/src%2Fcomp%2Ffe%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfca901cfe0e9671569f0a77274c713b7da6d637/src%2Fcomp%2Ffe%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffe%2Ftoken.rs?ref=cfca901cfe0e9671569f0a77274c713b7da6d637", "patch": "@@ -3,33 +3,36 @@ import util.common.ty_mach_to_str;\n import std._int;\n import std._uint;\n \n-type op = tag\n+type binop = tag\n     (PLUS(),\n      MINUS(),\n      STAR(),\n      SLASH(),\n      PERCENT(),\n+     CARET(),\n+     AND(),\n+     OR(),\n+     LSL(),\n+     LSR(),\n+     ASR());\n+\n+type token = tag\n+    (/* Expression-operator symbols. */\n      EQ(),\n      LT(),\n      LE(),\n      EQEQ(),\n      NE(),\n      GE(),\n      GT(),\n-     NOT(),\n-     TILDE(),\n-     CARET(),\n-     AND(),\n      ANDAND(),\n-     OR(),\n      OROR(),\n-     LSL(),\n-     LSR(),\n-     ASR());\n+     NOT(),\n+     TILDE(),\n+\n+     BINOP(binop),\n+     BINOPEQ(binop),\n \n-type token = tag\n-    (OP(op),\n-     OPEQ(op),\n      AS(),\n      WITH(),\n \n@@ -152,40 +155,44 @@ type token = tag\n      BRACEQUOTE(str),\n      EOF());\n \n-fn op_to_str(op o) -> str {\n+fn binop_to_str(binop o) -> str {\n     alt (o) {\n-         case (PLUS()) { ret \"+\"; }\n-         case (MINUS()) { ret \"-\"; }\n-         case (STAR()) { ret \"*\"; }\n-         case (SLASH()) { ret \"/\"; }\n-         case (PERCENT()) { ret \"%\"; }\n-         case (EQ()) { ret \"=\"; }\n-         case (LT()) { ret \"<\"; }\n-         case (LE()) { ret \"<=\"; }\n-         case (EQEQ()) { ret \"==\"; }\n-         case (NE()) { ret \"!=\"; }\n-         case (GE()) { ret \">=\"; }\n-         case (GT()) { ret \">\"; }\n-         case (NOT()) { ret \"!\"; }\n-         case (TILDE()) { ret \"~\"; }\n-         case (CARET()) { ret \"^\"; }\n-         case (AND()) { ret \"&\"; }\n-         case (ANDAND()) { ret \"&&\"; }\n-         case (OR()) { ret \"|\"; }\n-         case (OROR()) { ret \"||\"; }\n-         case (LSL()) { ret \"<<\"; }\n-         case (LSR()) { ret \">>\"; }\n-         case (ASR()) { ret \">>>\"; }\n+        case (PLUS()) { ret \"+\"; }\n+        case (MINUS()) { ret \"-\"; }\n+        case (STAR()) { ret \"*\"; }\n+        case (SLASH()) { ret \"/\"; }\n+        case (PERCENT()) { ret \"%\"; }\n+        case (CARET()) { ret \"^\"; }\n+        case (AND()) { ret \"&\"; }\n+        case (OR()) { ret \"|\"; }\n+        case (LSL()) { ret \"<<\"; }\n+        case (LSR()) { ret \">>\"; }\n+        case (ASR()) { ret \">>>\"; }\n     }\n }\n \n fn to_str(token t) -> str {\n     alt (t) {\n-        case (OP(op)) { ret op_to_str(op); }\n-        case (OPEQ(op)) { ret op_to_str(op) + \"=\"; }\n+\n+        case (EQ()) { ret \"=\"; }\n+        case (LT()) { ret \"<\"; }\n+        case (LE()) { ret \"<=\"; }\n+        case (EQEQ()) { ret \"==\"; }\n+        case (NE()) { ret \"!=\"; }\n+        case (GE()) { ret \">=\"; }\n+        case (GT()) { ret \">\"; }\n+        case (NOT()) { ret \"!\"; }\n+        case (TILDE()) { ret \"~\"; }\n+        case (OROR()) { ret \"||\"; }\n+        case (ANDAND()) { ret \"&&\"; }\n+\n+        case (BINOP(op)) { ret binop_to_str(op); }\n+        case (BINOPEQ(op)) { ret binop_to_str(op) + \"=\"; }\n+\n         case (AS()) { ret \"as\"; }\n         case (WITH()) { ret \"with\"; }\n \n+\n         /* Structural symbols */\n         case (AT()) { ret \"@\"; }\n         case (DOT()) { ret \".\"; }"}]}