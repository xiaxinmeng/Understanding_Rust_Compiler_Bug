{"sha": "19bd93467617a447c22ec32cc1cf14d40cb84ccf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5YmQ5MzQ2NzYxN2E0NDdjMjJlYzMyY2MxY2YxNGQ0MGNiODRjY2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-18T11:04:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-18T11:04:07Z"}, "message": "Auto merge of #67379 - Mark-Simulacrum:revert-par-4-default, r=Mark-Simulacrum\n\nRevert enabling parallelism by default\n\nWe will re-land a similar patch at a future date but for now we should get a nightly\nreleased in a few hours with the parallel patch, so this should be\nreverted to make sure that the next nightly is not parallel-enabled.\n\nr? @ghost", "tree": {"sha": "82ce6096679ca921b3eb76f24cf8480ecfc77802", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82ce6096679ca921b3eb76f24cf8480ecfc77802"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19bd93467617a447c22ec32cc1cf14d40cb84ccf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19bd93467617a447c22ec32cc1cf14d40cb84ccf", "html_url": "https://github.com/rust-lang/rust/commit/19bd93467617a447c22ec32cc1cf14d40cb84ccf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19bd93467617a447c22ec32cc1cf14d40cb84ccf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ed3b8bb7b100afecf7d5f52eafbb70fec27f537", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ed3b8bb7b100afecf7d5f52eafbb70fec27f537", "html_url": "https://github.com/rust-lang/rust/commit/3ed3b8bb7b100afecf7d5f52eafbb70fec27f537"}, {"sha": "7f00a5f26a4687c0c667d2ca02cb73eef677ae2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f00a5f26a4687c0c667d2ca02cb73eef677ae2e", "html_url": "https://github.com/rust-lang/rust/commit/7f00a5f26a4687c0c667d2ca02cb73eef677ae2e"}], "stats": {"total": 86, "additions": 50, "deletions": 36}, "files": [{"sha": "f3b2a73d3c5dc54fb20e1e037cbf87a2443d92e9", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/19bd93467617a447c22ec32cc1cf14d40cb84ccf/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19bd93467617a447c22ec32cc1cf14d40cb84ccf/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=19bd93467617a447c22ec32cc1cf14d40cb84ccf", "patch": "@@ -4,10 +4,10 @@\n //! our CI.\n \n use std::env;\n-//use std::ffi::OsString;\n+use std::ffi::OsString;\n use std::fmt;\n use std::fs;\n-//use std::iter;\n+use std::iter;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n \n@@ -204,8 +204,8 @@ impl Step for Cargo {\n     }\n \n     /// Runs `cargo test` for `cargo` packaged with Rust.\n-    fn run(self, _builder: &Builder<'_>) {\n-        /*let compiler = builder.compiler(self.stage, self.host);\n+    fn run(self, builder: &Builder<'_>) {\n+        let compiler = builder.compiler(self.stage, self.host);\n \n         builder.ensure(tool::Cargo {\n             compiler,\n@@ -235,7 +235,7 @@ impl Step for Cargo {\n \n         cargo.env(\"PATH\", &path_for_cargo(builder, compiler));\n \n-        try_run(builder, &mut cargo.into());*/\n+        try_run(builder, &mut cargo.into());\n     }\n }\n \n@@ -590,14 +590,14 @@ impl Step for Clippy {\n     }\n }\n \n-//fn path_for_cargo(builder: &Builder<'_>, compiler: Compiler) -> OsString {\n-//    // Configure PATH to find the right rustc. NB. we have to use PATH\n-//    // and not RUSTC because the Cargo test suite has tests that will\n-//    // fail if rustc is not spelled `rustc`.\n-//    let path = builder.sysroot(compiler).join(\"bin\");\n-//    let old_path = env::var_os(\"PATH\").unwrap_or_default();\n-//    env::join_paths(iter::once(path).chain(env::split_paths(&old_path))).expect(\"\")\n-//}\n+fn path_for_cargo(builder: &Builder<'_>, compiler: Compiler) -> OsString {\n+    // Configure PATH to find the right rustc. NB. we have to use PATH\n+    // and not RUSTC because the Cargo test suite has tests that will\n+    // fail if rustc is not spelled `rustc`.\n+    let path = builder.sysroot(compiler).join(\"bin\");\n+    let old_path = env::var_os(\"PATH\").unwrap_or_default();\n+    env::join_paths(iter::once(path).chain(env::split_paths(&old_path))).expect(\"\")\n+}\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct RustdocTheme {"}, {"sha": "38d1d2baf25075cc06fb2f296a8a12fa66e82c0c", "filename": "src/ci/run.sh", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/19bd93467617a447c22ec32cc1cf14d40cb84ccf/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/19bd93467617a447c22ec32cc1cf14d40cb84ccf/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=19bd93467617a447c22ec32cc1cf14d40cb84ccf", "patch": "@@ -37,8 +37,6 @@ if [ \"$DIST_SRC\" = \"\" ]; then\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --disable-dist-src\"\n fi\n \n-RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set rust.parallel-compiler\"\n-\n # If we're deploying artifacts then we set the release channel, otherwise if\n # we're not deploying then we want to be sure to enable all assertions because\n # we'll be running tests\n@@ -55,6 +53,9 @@ if [ \"$DEPLOY$DEPLOY_ALT\" = \"1\" ]; then\n   if [ \"$NO_LLVM_ASSERTIONS\" = \"1\" ]; then\n     RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --disable-llvm-assertions\"\n   elif [ \"$DEPLOY_ALT\" != \"\" ]; then\n+    if [ \"$NO_PARALLEL_COMPILER\" = \"\" ]; then\n+      RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set rust.parallel-compiler\"\n+    fi\n     RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-llvm-assertions\"\n     RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set rust.verify-llvm-ir\"\n   fi"}, {"sha": "d952bf7ab9e2541ee18f8d4c62e4c8a3ea14a494", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/19bd93467617a447c22ec32cc1cf14d40cb84ccf/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19bd93467617a447c22ec32cc1cf14d40cb84ccf/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=19bd93467617a447c22ec32cc1cf14d40cb84ccf", "patch": "@@ -3,7 +3,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_index::vec::{Idx, IndexVec};\n use smallvec::SmallVec;\n-use rustc_data_structures::sync::{Lrc, Lock, AtomicU32, AtomicUsize, Ordering};\n+use rustc_data_structures::sync::{Lrc, Lock, AtomicU32, AtomicU64, Ordering};\n use rustc_data_structures::sharded::{self, Sharded};\n use std::sync::atomic::Ordering::SeqCst;\n use std::env;\n@@ -485,8 +485,8 @@ impl DepGraph {\n         if cfg!(debug_assertions) {\n             let current_dep_graph = &self.data.as_ref().unwrap().current;\n \n-            Some((current_dep_graph.total_read_count.load(SeqCst) as u64,\n-                  current_dep_graph.total_duplicate_read_count.load(SeqCst) as u64))\n+            Some((current_dep_graph.total_read_count.load(SeqCst),\n+                  current_dep_graph.total_duplicate_read_count.load(SeqCst)))\n         } else {\n             None\n         }\n@@ -970,8 +970,8 @@ pub(super) struct CurrentDepGraph {\n \n     /// These are simple counters that are for profiling and\n     /// debugging and only active with `debug_assertions`.\n-    total_read_count: AtomicUsize,\n-    total_duplicate_read_count: AtomicUsize,\n+    total_read_count: AtomicU64,\n+    total_duplicate_read_count: AtomicU64,\n }\n \n impl CurrentDepGraph {\n@@ -1012,8 +1012,8 @@ impl CurrentDepGraph {\n             )),\n             anon_id_seed: stable_hasher.finish(),\n             forbidden_edge,\n-            total_read_count: AtomicUsize::new(0),\n-            total_duplicate_read_count: AtomicUsize::new(0),\n+            total_read_count: AtomicU64::new(0),\n+            total_duplicate_read_count: AtomicU64::new(0),\n         }\n     }\n "}, {"sha": "fb541637e5f79da6c267ea39fc4b67493ee26e3c", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19bd93467617a447c22ec32cc1cf14d40cb84ccf/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19bd93467617a447c22ec32cc1cf14d40cb84ccf/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=19bd93467617a447c22ec32cc1cf14d40cb84ccf", "patch": "@@ -24,7 +24,6 @@\n #![feature(integer_atomics)]\n #![feature(test)]\n #![feature(associated_type_bounds)]\n-#![feature(cfg_target_has_atomic)]\n \n #![cfg_attr(unix, feature(libc))]\n "}, {"sha": "6a19f52897e5de97d976aaae88e5b954060b81f5", "filename": "src/librustc_data_structures/sync.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19bd93467617a447c22ec32cc1cf14d40cb84ccf/src%2Flibrustc_data_structures%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19bd93467617a447c22ec32cc1cf14d40cb84ccf/src%2Flibrustc_data_structures%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsync.rs?ref=19bd93467617a447c22ec32cc1cf14d40cb84ccf", "patch": "@@ -317,9 +317,7 @@ cfg_if! {\n         pub use parking_lot::MutexGuard as LockGuard;\n         pub use parking_lot::MappedMutexGuard as MappedLockGuard;\n \n-        pub use std::sync::atomic::{AtomicBool, AtomicUsize, AtomicU32};\n-        #[cfg(target_has_atomic = \"64\")]\n-        pub use std::sync::atomic::{AtomicU64};\n+        pub use std::sync::atomic::{AtomicBool, AtomicUsize, AtomicU32, AtomicU64};\n \n         pub use crossbeam_utils::atomic::AtomicCell;\n "}, {"sha": "7f3bab8f23299b0041127dadd3fddcb0f7a57a6e", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/19bd93467617a447c22ec32cc1cf14d40cb84ccf/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19bd93467617a447c22ec32cc1cf14d40cb84ccf/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=19bd93467617a447c22ec32cc1cf14d40cb84ccf", "patch": "@@ -1358,11 +1358,11 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"prints the LLVM optimization passes being run\"),\n     ast_json: bool = (false, parse_bool, [UNTRACKED],\n         \"print the AST as JSON and halt\"),\n-    // We default to min(4, vCPUs) here since we want to avoid spawning *too*\n-    // many threads -- that causes scalability issues due to contention on\n-    // the jobserver pipe (at least) -- but 4 is a reasonable amount on systems\n-    // with lots of cores.\n-    threads: usize = (std::cmp::min(::num_cpus::get(), 4), parse_threads, [UNTRACKED],\n+    // We default to 1 here since we want to behave like\n+    // a sequential compiler for now. This'll likely be adjusted\n+    // in the future. Note that -Zthreads=0 is the way to get\n+    // the num_cpus behavior.\n+    threads: usize = (1, parse_threads, [UNTRACKED],\n         \"use a thread pool with N threads\"),\n     ast_json_noexpand: bool = (false, parse_bool, [UNTRACKED],\n         \"print the pre-expansion AST as JSON and halt\"),"}, {"sha": "150d207e5bfe9cb6fa46b24b212eda63ad788962", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19bd93467617a447c22ec32cc1cf14d40cb84ccf/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19bd93467617a447c22ec32cc1cf14d40cb84ccf/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=19bd93467617a447c22ec32cc1cf14d40cb84ccf", "patch": "@@ -14,7 +14,7 @@ use rustc_errors::ErrorReported;\n \n use rustc_data_structures::base_n;\n use rustc_data_structures::sync::{\n-    self, Lrc, Lock, OneThread, Once, AtomicUsize, Ordering,\n+    self, Lrc, Lock, OneThread, Once, AtomicU64, AtomicUsize, Ordering,\n     Ordering::SeqCst,\n };\n use rustc_data_structures::impl_stable_hash_via_hash;\n@@ -119,7 +119,7 @@ pub struct Session {\n     /// If `-zprint-fuel=crate`, `Some(crate)`.\n     pub print_fuel_crate: Option<String>,\n     /// Always set to zero and incremented so that we can print fuel expended by a crate.\n-    pub print_fuel: AtomicUsize,\n+    pub print_fuel: AtomicU64,\n \n     /// Loaded up early on in the initialization of this `Session` to avoid\n     /// false positives about a job server in our environment.\n@@ -1116,7 +1116,7 @@ fn build_session_(\n         out_of_fuel: false,\n     });\n     let print_fuel_crate = sopts.debugging_opts.print_fuel.clone();\n-    let print_fuel = AtomicUsize::new(0);\n+    let print_fuel = AtomicU64::new(0);\n \n     let working_dir = env::current_dir().unwrap_or_else(|e|\n         parse_sess.span_diagnostic"}, {"sha": "cbddef082be6732465e712fc4a213ecd20134c36", "filename": "src/test/ui/traits/cycle-cache-err-60010.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19bd93467617a447c22ec32cc1cf14d40cb84ccf/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19bd93467617a447c22ec32cc1cf14d40cb84ccf/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.rs?ref=19bd93467617a447c22ec32cc1cf14d40cb84ccf", "patch": "@@ -28,7 +28,7 @@ struct SalsaStorage {\n }\n \n impl Database for RootDatabase {\n-    type Storage = SalsaStorage;\n+    type Storage = SalsaStorage; //~ ERROR overflow\n }\n impl HasQueryGroup for RootDatabase {}\n impl<DB> Query<DB> for ParseQuery"}, {"sha": "295845b1146ef6451629878cc5f5064abbfb7bbd", "filename": "src/test/ui/traits/cycle-cache-err-60010.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/19bd93467617a447c22ec32cc1cf14d40cb84ccf/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19bd93467617a447c22ec32cc1cf14d40cb84ccf/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr?ref=19bd93467617a447c22ec32cc1cf14d40cb84ccf", "patch": "@@ -6,6 +6,22 @@ LL |     _parse: <ParseQuery as Query<RootDatabase>>::Data,\n    |\n    = note: required because of the requirements on the impl of `Query<RootDatabase>` for `ParseQuery`\n \n-error: aborting due to previous error\n+error[E0275]: overflow evaluating the requirement `Runtime<RootDatabase>: std::panic::RefUnwindSafe`\n+  --> $DIR/cycle-cache-err-60010.rs:31:5\n+   |\n+LL |     type Storage;\n+   |          ------- associated type defined here\n+...\n+LL | impl Database for RootDatabase {\n+   | ------------------------------ in this `impl` item\n+LL |     type Storage = SalsaStorage;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: required because it appears within the type `RootDatabase`\n+   = note: required because of the requirements on the impl of `SourceDatabase` for `RootDatabase`\n+   = note: required because of the requirements on the impl of `Query<RootDatabase>` for `ParseQuery`\n+   = note: required because it appears within the type `SalsaStorage`\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0275`."}]}