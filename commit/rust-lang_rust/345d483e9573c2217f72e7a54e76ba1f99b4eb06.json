{"sha": "345d483e9573c2217f72e7a54e76ba1f99b4eb06", "node_id": "C_kwDOAAsO6NoAKDM0NWQ0ODNlOTU3M2MyMjE3ZjcyZTdhNTRlNzZiYTFmOTliNGViMDY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-15T05:44:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-15T05:44:47Z"}, "message": "Rollup merge of #89859 - RalfJung:write-discriminant, r=oli-obk\n\nadd dedicated error variant for writing the discriminant of an uninhabited enum variant\n\nThis is conceptually different from hitting an `Unreachable` terminator. Also add some sanity check making sure we don't write discriminants of things that do not have discriminants.\n\nr? ``@oli-obk``", "tree": {"sha": "1104be5663dc8ce250b290eecf0884adc1fa78d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1104be5663dc8ce250b290eecf0884adc1fa78d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/345d483e9573c2217f72e7a54e76ba1f99b4eb06", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhaRVPCRBK7hj4Ov3rIwAA8noIACMHi+vQQ2S/lj8Ujl4isztj\nT97ZAbU5A48ufleTmp+dBAi2dENhhjOB60taDaX3OW9wUF3r036ncaScDreA1DF6\nRxne4/OkByXHmdaawy26apKmuJBxCBO+lRLIBNI249KmPH4NEckGdQtTv2vHSAhn\nMaLty1SUj+kEfS84Vq33QzZiWVo/TqNMGBD2pUlLvdd3FysGgP3U9ApOKdJoTddE\nMb+o80vj4rQKLhb13R2oIrXKg2eAj2n2S1LeQjBQyMnfL27vBKSe02cSekTzA8dY\n58YxWDWfQN/dlVX5H+AGhjxRWdZq9qmXeL0Y1CurQ9jXL7RcqYW2aMeCRItCjvE=\n=Fhg1\n-----END PGP SIGNATURE-----\n", "payload": "tree 1104be5663dc8ce250b290eecf0884adc1fa78d5\nparent b74ae0487b81628f67f5ca66a12ebd636eb9cafe\nparent c5a68cf0a65fe94022f5c5fd0fc47ccfcda81929\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1634276687 +0200\ncommitter GitHub <noreply@github.com> 1634276687 +0200\n\nRollup merge of #89859 - RalfJung:write-discriminant, r=oli-obk\n\nadd dedicated error variant for writing the discriminant of an uninhabited enum variant\n\nThis is conceptually different from hitting an `Unreachable` terminator. Also add some sanity check making sure we don't write discriminants of things that do not have discriminants.\n\nr? ``@oli-obk``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/345d483e9573c2217f72e7a54e76ba1f99b4eb06", "html_url": "https://github.com/rust-lang/rust/commit/345d483e9573c2217f72e7a54e76ba1f99b4eb06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/345d483e9573c2217f72e7a54e76ba1f99b4eb06/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b74ae0487b81628f67f5ca66a12ebd636eb9cafe", "url": "https://api.github.com/repos/rust-lang/rust/commits/b74ae0487b81628f67f5ca66a12ebd636eb9cafe", "html_url": "https://github.com/rust-lang/rust/commit/b74ae0487b81628f67f5ca66a12ebd636eb9cafe"}, {"sha": "c5a68cf0a65fe94022f5c5fd0fc47ccfcda81929", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5a68cf0a65fe94022f5c5fd0fc47ccfcda81929", "html_url": "https://github.com/rust-lang/rust/commit/c5a68cf0a65fe94022f5c5fd0fc47ccfcda81929"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "b6682b13ed2168e4556dc602007da80cdb3b6294", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/345d483e9573c2217f72e7a54e76ba1f99b4eb06/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/345d483e9573c2217f72e7a54e76ba1f99b4eb06/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=345d483e9573c2217f72e7a54e76ba1f99b4eb06", "patch": "@@ -618,6 +618,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     }\n \n     /// Read discriminant, return the runtime value as well as the variant index.\n+    /// Can also legally be called on non-enums (e.g. through the discriminant_value intrinsic)!\n     pub fn read_discriminant(\n         &self,\n         op: &OpTy<'tcx, M::PointerTag>,"}, {"sha": "d425b84bdaf26d508773a623b5b70f9d58663e42", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/345d483e9573c2217f72e7a54e76ba1f99b4eb06/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/345d483e9573c2217f72e7a54e76ba1f99b4eb06/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=345d483e9573c2217f72e7a54e76ba1f99b4eb06", "patch": "@@ -988,10 +988,23 @@ where\n         variant_index: VariantIdx,\n         dest: &PlaceTy<'tcx, M::PointerTag>,\n     ) -> InterpResult<'tcx> {\n+        // This must be an enum or generator.\n+        match dest.layout.ty.kind() {\n+            ty::Adt(adt, _) => assert!(adt.is_enum()),\n+            ty::Generator(..) => {}\n+            _ => span_bug!(\n+                self.cur_span(),\n+                \"write_discriminant called on non-variant-type (neither enum nor generator)\"\n+            ),\n+        }\n         // Layout computation excludes uninhabited variants from consideration\n         // therefore there's no way to represent those variants in the given layout.\n+        // Essentially, uninhabited variants do not have a tag that corresponds to their\n+        // discriminant, so we cannot do anything here.\n+        // When evaluating we will always error before even getting here, but ConstProp 'executes'\n+        // dead code, so we cannot ICE here.\n         if dest.layout.for_variant(self, variant_index).abi.is_uninhabited() {\n-            throw_ub!(Unreachable);\n+            throw_ub!(UninhabitedEnumVariantWritten)\n         }\n \n         match dest.layout.variants {"}, {"sha": "9472a287e5a41907c5f434729376484048582a1e", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/345d483e9573c2217f72e7a54e76ba1f99b4eb06/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/345d483e9573c2217f72e7a54e76ba1f99b4eb06/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=345d483e9573c2217f72e7a54e76ba1f99b4eb06", "patch": "@@ -287,6 +287,8 @@ pub enum UndefinedBehaviorInfo<'tcx> {\n         target_size: u64,\n         data_size: u64,\n     },\n+    /// A discriminant of an uninhabited enum variant is written.\n+    UninhabitedEnumVariantWritten,\n }\n \n impl fmt::Display for UndefinedBehaviorInfo<'_> {\n@@ -391,6 +393,9 @@ impl fmt::Display for UndefinedBehaviorInfo<'_> {\n                 \"scalar size mismatch: expected {} bytes but got {} bytes instead\",\n                 target_size, data_size\n             ),\n+            UninhabitedEnumVariantWritten => {\n+                write!(f, \"writing discriminant of an uninhabited enum\")\n+            }\n         }\n     }\n }"}]}