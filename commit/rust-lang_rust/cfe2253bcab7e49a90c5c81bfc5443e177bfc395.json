{"sha": "cfe2253bcab7e49a90c5c81bfc5443e177bfc395", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmZTIyNTNiY2FiN2U0OWE5MGM1YzgxYmZjNTQ0M2UxNzdiZmMzOTU=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-01-17T12:24:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-17T12:24:49Z"}, "message": "Rollup merge of #80932 - jyn514:download-windows-llvm, r=Mark-Simulacrum\n\nAllow downloading LLVM on Windows and MacOS\n\n- Don't ignore packaging `llvm/lib/` for `rust-dev` when LLVM is linked\nstatically\n- Add `link-type.txt` so bootstrap knows whether llvm was linked\n  statically or dynamically\n- Don't assume CI LLVM is linked dynamically in `bootstrap::config`\n- Fall back to dynamic linking if `link-type.txt` doesn't exist\n- Fix existing bug that split the output of `llvm-config` on lines, not spaces\n- Only special case MacOS when dynamic linking. Static linking works fine.\n- Enable building LLVM tests\n\n  This works around the following llvm bug:\n\n  ```\n  llvm-config: error: component libraries and shared library\n\n  llvm-config: error: missing: /home/joshua/rustc2/build/x86_64-unknown-linux-gnu/llvm/build/lib/libgtest.a\n  llvm-config: error: missing: /home/joshua/rustc2/build/x86_64-unknown-linux-gnu/llvm/build/lib/libgtest_main.a\n  llvm-config: error: missing: /home/joshua/rustc2/build/x86_64-unknown-linux-gnu/llvm/build/lib/libLLVMTestingSupport.a\n  thread 'main' panicked at 'command did not execute successfully: \"/home/joshua/rustc2/build/x86_64-unknown-linux-gnu/llvm/build/bin/llvm-config\" \"--libfiles\"\n  ```\n\n  I'm not sure why llvm-config thinks these are required, but to avoid\n  the error, this builds them anyway.\n\n- Bump version of `download-ci-llvm-stamp`\n\n  `src/llvm-project` hasn't changed, but the generated tarball has.\n\nFixes https://github.com/rust-lang/rust/issues/77084.\n\n# Current Status\n\nThis works on both MacOS and Windows! :tada: :tada: Thanks to ```@nagisa,``` ```@halkcyon,``` ```@Lokathor,``` ```@jryans,``` and ```@poliorcetics``` for helping me test!\n\nThe `if-available` check now supports all tier 1 platforms. Although only x64 apple and x64 msvc have been tested, none of the changes here are Windows or Mac specific, and I expect this to work anywhere that LLVM artifacts are uploaded to CI (i.e. the `rust-dev` component exists).\n\n## Windows\n\nNote that if you have an old version of MSVC build tools you'll need to update them. VS Build Tools 2019 14.28 and later are known to work. With old tools, you may see an error like the following:\n\n```\nerror LNK2001: unresolved external symbol __imp___std_init_once_complete\n```", "tree": {"sha": "fd93167eeb2c59c64910bc908cc44ca9f641e8ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd93167eeb2c59c64910bc908cc44ca9f641e8ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfe2253bcab7e49a90c5c81bfc5443e177bfc395", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgBCyRCRBK7hj4Ov3rIwAAdHIIAEUahcjklC4YIslxEPuRo2Cb\nHiPuLawWwSN8l++cbKQ6XtTLm3a17NG13P2KCexAZfhUcE3nWRH8yJfSoKo7aSuP\nCcrQyLOvINHtW1k0He/RUeOr+pNu4YJexffmjkg8bgqo2mF+2TQs/vrN6Tt5lykU\nyIhjaaoCwpWIh65Q6HlRhhY0cYekR8xbtewmrNqdDhbrQgx0nb1WCX4ubnYoDobc\nq7/IVygtEIJxJJL/aVTRtLx01v7YPAo7oAUgf7in1tFsk8CSO8J1iJKWVNREcLb1\nC70WGS6v8WGBf7Y9LkDpeXN4nHbyP/b+iD3mBqwzm3/I1v9eGgFPqxOqL4MAUlA=\n=c6T5\n-----END PGP SIGNATURE-----\n", "payload": "tree fd93167eeb2c59c64910bc908cc44ca9f641e8ac\nparent ffcbeefd6414753428be7a29e289d954381423f0\nparent 5c4adbe1e12c804a03146e351e06f666f0fe1fdf\nauthor Mara Bos <m-ou.se@m-ou.se> 1610886289 +0000\ncommitter GitHub <noreply@github.com> 1610886289 +0000\n\nRollup merge of #80932 - jyn514:download-windows-llvm, r=Mark-Simulacrum\n\nAllow downloading LLVM on Windows and MacOS\n\n- Don't ignore packaging `llvm/lib/` for `rust-dev` when LLVM is linked\nstatically\n- Add `link-type.txt` so bootstrap knows whether llvm was linked\n  statically or dynamically\n- Don't assume CI LLVM is linked dynamically in `bootstrap::config`\n- Fall back to dynamic linking if `link-type.txt` doesn't exist\n- Fix existing bug that split the output of `llvm-config` on lines, not spaces\n- Only special case MacOS when dynamic linking. Static linking works fine.\n- Enable building LLVM tests\n\n  This works around the following llvm bug:\n\n  ```\n  llvm-config: error: component libraries and shared library\n\n  llvm-config: error: missing: /home/joshua/rustc2/build/x86_64-unknown-linux-gnu/llvm/build/lib/libgtest.a\n  llvm-config: error: missing: /home/joshua/rustc2/build/x86_64-unknown-linux-gnu/llvm/build/lib/libgtest_main.a\n  llvm-config: error: missing: /home/joshua/rustc2/build/x86_64-unknown-linux-gnu/llvm/build/lib/libLLVMTestingSupport.a\n  thread 'main' panicked at 'command did not execute successfully: \"/home/joshua/rustc2/build/x86_64-unknown-linux-gnu/llvm/build/bin/llvm-config\" \"--libfiles\"\n  ```\n\n  I'm not sure why llvm-config thinks these are required, but to avoid\n  the error, this builds them anyway.\n\n- Bump version of `download-ci-llvm-stamp`\n\n  `src/llvm-project` hasn't changed, but the generated tarball has.\n\nFixes https://github.com/rust-lang/rust/issues/77084.\n\n# Current Status\n\nThis works on both MacOS and Windows! :tada: :tada: Thanks to ```@nagisa,``` ```@halkcyon,``` ```@Lokathor,``` ```@jryans,``` and ```@poliorcetics``` for helping me test!\n\nThe `if-available` check now supports all tier 1 platforms. Although only x64 apple and x64 msvc have been tested, none of the changes here are Windows or Mac specific, and I expect this to work anywhere that LLVM artifacts are uploaded to CI (i.e. the `rust-dev` component exists).\n\n## Windows\n\nNote that if you have an old version of MSVC build tools you'll need to update them. VS Build Tools 2019 14.28 and later are known to work. With old tools, you may see an error like the following:\n\n```\nerror LNK2001: unresolved external symbol __imp___std_init_once_complete\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfe2253bcab7e49a90c5c81bfc5443e177bfc395", "html_url": "https://github.com/rust-lang/rust/commit/cfe2253bcab7e49a90c5c81bfc5443e177bfc395", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfe2253bcab7e49a90c5c81bfc5443e177bfc395/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffcbeefd6414753428be7a29e289d954381423f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffcbeefd6414753428be7a29e289d954381423f0", "html_url": "https://github.com/rust-lang/rust/commit/ffcbeefd6414753428be7a29e289d954381423f0"}, {"sha": "5c4adbe1e12c804a03146e351e06f666f0fe1fdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c4adbe1e12c804a03146e351e06f666f0fe1fdf", "html_url": "https://github.com/rust-lang/rust/commit/5c4adbe1e12c804a03146e351e06f666f0fe1fdf"}], "stats": {"total": 80, "additions": 54, "deletions": 26}, "files": [{"sha": "55b20adabd0451d4dac3312ff5c3da080ceda7f6", "filename": "config.toml.example", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cfe2253bcab7e49a90c5c81bfc5443e177bfc395/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/cfe2253bcab7e49a90c5c81bfc5443e177bfc395/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=cfe2253bcab7e49a90c5c81bfc5443e177bfc395", "patch": "@@ -35,9 +35,11 @@ changelog-seen = 2\n # Unless you're developing for a target where Rust CI doesn't build a compiler\n # toolchain or changing LLVM locally, you probably want to set this to true.\n #\n-# It's currently false by default due to being newly added; please file bugs if\n-# enabling this did not work for you on x86_64-unknown-linux-gnu.\n-# Other target triples are currently not supported; see #77084.\n+# This is false by default so that distributions don't unexpectedly download\n+# LLVM from the internet.\n+#\n+# All tier 1 targets are currently supported; set this to `\"if-supported\"` if\n+# you are not sure whether you're on a tier 1 target.\n #\n # We also currently only support this when building LLVM for the build triple.\n #"}, {"sha": "5350c9eefe75353837d397101b13397cda3dd5d6", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cfe2253bcab7e49a90c5c81bfc5443e177bfc395/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/cfe2253bcab7e49a90c5c81bfc5443e177bfc395/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=cfe2253bcab7e49a90c5c81bfc5443e177bfc395", "patch": "@@ -465,8 +465,21 @@ def download_stage0(self):\n \n     def downloading_llvm(self):\n         opt = self.get_toml('download-ci-llvm', 'llvm')\n+        # This is currently all tier 1 targets (since others may not have CI\n+        # artifacts)\n+        # https://doc.rust-lang.org/rustc/platform-support.html#tier-1\n+        supported_platforms = [\n+            \"aarch64-unknown-linux-gnu\",\n+            \"i686-pc-windows-gnu\",\n+            \"i686-pc-windows-msvc\",\n+            \"i686-unknown-linux-gnu\",\n+            \"x86_64-unknown-linux-gnu\",\n+            \"x86_64-apple-darwin\",\n+            \"x86_64-pc-windows-gnu\",\n+            \"x86_64-pc-windows-msvc\",\n+        ]\n         return opt == \"true\" \\\n-            or (opt == \"if-available\" and self.build == \"x86_64-unknown-linux-gnu\")\n+            or (opt == \"if-available\" and self.build in supported_platforms)\n \n     def _download_stage0_helper(self, filename, pattern, tarball_suffix, date=None):\n         if date is None:"}, {"sha": "ad937f79254447e21d4fe2de19e18d0f9511f430", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfe2253bcab7e49a90c5c81bfc5443e177bfc395/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfe2253bcab7e49a90c5c81bfc5443e177bfc395/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=cfe2253bcab7e49a90c5c81bfc5443e177bfc395", "patch": "@@ -816,8 +816,10 @@ impl Config {\n                 check_ci_llvm!(llvm.allow_old_toolchain);\n                 check_ci_llvm!(llvm.polly);\n \n-                // CI-built LLVM is shared\n-                config.llvm_link_shared = true;\n+                // CI-built LLVM can be either dynamic or static.\n+                let ci_llvm = config.out.join(&*config.build.triple).join(\"ci-llvm\");\n+                let link_type = t!(std::fs::read_to_string(ci_llvm.join(\"link-type.txt\")));\n+                config.llvm_link_shared = link_type == \"dynamic\";\n             }\n \n             if config.llvm_thin_lto {"}, {"sha": "af9c0fb04bc9d4858bc2e053f1747a61c0764d81", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/cfe2253bcab7e49a90c5c81bfc5443e177bfc395/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfe2253bcab7e49a90c5c81bfc5443e177bfc395/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=cfe2253bcab7e49a90c5c81bfc5443e177bfc395", "patch": "@@ -1800,19 +1800,11 @@ fn add_env(builder: &Builder<'_>, cmd: &mut Command, target: TargetSelection) {\n     }\n }\n \n-/// Maybe add libLLVM.so to the given destination lib-dir. It will only have\n-/// been built if LLVM tools are linked dynamically.\n+/// Maybe add LLVM object files to the given destination lib-dir. Allows either static or dynamic linking.\n ///\n-/// Note: This function does not yet support Windows, but we also don't support\n-///       linking LLVM tools dynamically on Windows yet.\n-fn maybe_install_llvm(builder: &Builder<'_>, target: TargetSelection, dst_libdir: &Path) {\n-    if !builder.config.llvm_link_shared {\n-        // We do not need to copy LLVM files into the sysroot if it is not\n-        // dynamically linked; it is already included into librustc_llvm\n-        // statically.\n-        return;\n-    }\n \n+/// Returns whether the files were actually copied.\n+fn maybe_install_llvm(builder: &Builder<'_>, target: TargetSelection, dst_libdir: &Path) -> bool {\n     if let Some(config) = builder.config.target_config.get(&target) {\n         if config.llvm_config.is_some() && !builder.config.llvm_from_ci {\n             // If the LLVM was externally provided, then we don't currently copy\n@@ -1828,7 +1820,7 @@ fn maybe_install_llvm(builder: &Builder<'_>, target: TargetSelection, dst_libdir\n             //\n             // If the LLVM is coming from ourselves (just from CI) though, we\n             // still want to install it, as it otherwise won't be available.\n-            return;\n+            return false;\n         }\n     }\n \n@@ -1837,31 +1829,48 @@ fn maybe_install_llvm(builder: &Builder<'_>, target: TargetSelection, dst_libdir\n     // clear why this is the case, though. llvm-config will emit the versioned\n     // paths and we don't want those in the sysroot (as we're expecting\n     // unversioned paths).\n-    if target.contains(\"apple-darwin\") {\n+    if target.contains(\"apple-darwin\") && builder.config.llvm_link_shared {\n         let src_libdir = builder.llvm_out(target).join(\"lib\");\n         let llvm_dylib_path = src_libdir.join(\"libLLVM.dylib\");\n         if llvm_dylib_path.exists() {\n             builder.install(&llvm_dylib_path, dst_libdir, 0o644);\n         }\n+        !builder.config.dry_run\n     } else if let Ok(llvm_config) = crate::native::prebuilt_llvm_config(builder, target) {\n-        let files = output(Command::new(llvm_config).arg(\"--libfiles\"));\n-        for file in files.lines() {\n+        let mut cmd = Command::new(llvm_config);\n+        cmd.arg(\"--libfiles\");\n+        builder.verbose(&format!(\"running {:?}\", cmd));\n+        let files = output(&mut cmd);\n+        for file in files.trim_end().split(' ') {\n             builder.install(Path::new(file), dst_libdir, 0o644);\n         }\n+        !builder.config.dry_run\n+    } else {\n+        false\n     }\n }\n \n /// Maybe add libLLVM.so to the target lib-dir for linking.\n pub fn maybe_install_llvm_target(builder: &Builder<'_>, target: TargetSelection, sysroot: &Path) {\n     let dst_libdir = sysroot.join(\"lib/rustlib\").join(&*target.triple).join(\"lib\");\n-    maybe_install_llvm(builder, target, &dst_libdir);\n+    // We do not need to copy LLVM files into the sysroot if it is not\n+    // dynamically linked; it is already included into librustc_llvm\n+    // statically.\n+    if builder.config.llvm_link_shared {\n+        maybe_install_llvm(builder, target, &dst_libdir);\n+    }\n }\n \n /// Maybe add libLLVM.so to the runtime lib-dir for rustc itself.\n pub fn maybe_install_llvm_runtime(builder: &Builder<'_>, target: TargetSelection, sysroot: &Path) {\n     let dst_libdir =\n         sysroot.join(builder.sysroot_libdir_relative(Compiler { stage: 1, host: target }));\n-    maybe_install_llvm(builder, target, &dst_libdir);\n+    // We do not need to copy LLVM files into the sysroot if it is not\n+    // dynamically linked; it is already included into librustc_llvm\n+    // statically.\n+    if builder.config.llvm_link_shared {\n+        maybe_install_llvm(builder, target, &dst_libdir);\n+    }\n }\n \n #[derive(Clone, Debug, Eq, Hash, PartialEq)]\n@@ -1973,7 +1982,10 @@ impl Step for RustDev {\n         // `$ORIGIN/../lib` can find it. It may also be used as a dependency\n         // of `rustc-dev` to support the inherited `-lLLVM` when using the\n         // compiler libraries.\n-        maybe_install_llvm(builder, target, &tarball.image_dir().join(\"lib\"));\n+        let dst_libdir = tarball.image_dir().join(\"lib\");\n+        maybe_install_llvm(builder, target, &dst_libdir);\n+        let link_type = if builder.config.llvm_link_shared { \"dynamic\" } else { \"static\" };\n+        t!(std::fs::write(tarball.image_dir().join(\"link-type.txt\"), link_type), dst_libdir);\n \n         Some(tarball.generate())\n     }"}, {"sha": "fb5b058cb4d74a46c6e4de30695d020f9a834a93", "filename": "src/bootstrap/download-ci-llvm-stamp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfe2253bcab7e49a90c5c81bfc5443e177bfc395/src%2Fbootstrap%2Fdownload-ci-llvm-stamp", "raw_url": "https://github.com/rust-lang/rust/raw/cfe2253bcab7e49a90c5c81bfc5443e177bfc395/src%2Fbootstrap%2Fdownload-ci-llvm-stamp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdownload-ci-llvm-stamp?ref=cfe2253bcab7e49a90c5c81bfc5443e177bfc395", "patch": "@@ -1,4 +1,4 @@\n Change this file to make users of the `download-ci-llvm` configuration download\n a new version of LLVM from CI, even if the LLVM submodule hasn\u2019t changed.\n \n-Last change is for: https://github.com/rust-lang/rust/pull/80087\n+Last change is for: https://github.com/rust-lang/rust/pull/80932"}, {"sha": "609ac8b366952113bfb3be057b628a7107bdbd36", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfe2253bcab7e49a90c5c81bfc5443e177bfc395/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfe2253bcab7e49a90c5c81bfc5443e177bfc395/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=cfe2253bcab7e49a90c5c81bfc5443e177bfc395", "patch": "@@ -171,7 +171,6 @@ impl Step for Llvm {\n             .define(\"LLVM_TARGETS_TO_BUILD\", llvm_targets)\n             .define(\"LLVM_EXPERIMENTAL_TARGETS_TO_BUILD\", llvm_exp_targets)\n             .define(\"LLVM_INCLUDE_EXAMPLES\", \"OFF\")\n-            .define(\"LLVM_INCLUDE_TESTS\", \"OFF\")\n             .define(\"LLVM_INCLUDE_DOCS\", \"OFF\")\n             .define(\"LLVM_INCLUDE_BENCHMARKS\", \"OFF\")\n             .define(\"LLVM_ENABLE_TERMINFO\", \"OFF\")"}]}