{"sha": "ae0b00cadace32fd85c6786df24a20d6b55a87d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMGIwMGNhZGFjZTMyZmQ4NWM2Nzg2ZGYyNGEyMGQ2YjU1YTg3ZDI=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-19T14:24:23Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-04T09:17:37Z"}, "message": "Add and update tests", "tree": {"sha": "8d349cff0f2f719756e29082ab595fece401b180", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d349cff0f2f719756e29082ab595fece401b180"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae0b00cadace32fd85c6786df24a20d6b55a87d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae0b00cadace32fd85c6786df24a20d6b55a87d2", "html_url": "https://github.com/rust-lang/rust/commit/ae0b00cadace32fd85c6786df24a20d6b55a87d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae0b00cadace32fd85c6786df24a20d6b55a87d2/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "137a640d61a4c0fe3c88ae0062d1ae01faf8fbf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/137a640d61a4c0fe3c88ae0062d1ae01faf8fbf5", "html_url": "https://github.com/rust-lang/rust/commit/137a640d61a4c0fe3c88ae0062d1ae01faf8fbf5"}], "stats": {"total": 111, "additions": 57, "deletions": 54}, "files": [{"sha": "0fd7ccd55fb2dd76a765e7953519050178ad708e", "filename": "src/test/run-pass-fulldeps/newtype_index.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae0b00cadace32fd85c6786df24a20d6b55a87d2/src%2Ftest%2Frun-pass-fulldeps%2Fnewtype_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae0b00cadace32fd85c6786df24a20d6b55a87d2/src%2Ftest%2Frun-pass-fulldeps%2Fnewtype_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fnewtype_index.rs?ref=ae0b00cadace32fd85c6786df24a20d6b55a87d2", "patch": "@@ -2,7 +2,6 @@\n \n #[macro_use] extern crate rustc_data_structures;\n extern crate rustc_serialize;\n-use rustc_serialize::{Decodable, Decoder};\n \n use rustc_data_structures::indexed_vec::Idx;\n "}, {"sha": "43ca9e75393095255de640fd75327cae146ab6c1", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae0b00cadace32fd85c6786df24a20d6b55a87d2/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae0b00cadace32fd85c6786df24a20d6b55a87d2/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs?ref=ae0b00cadace32fd85c6786df24a20d6b55a87d2", "patch": "@@ -78,9 +78,9 @@ const fn i32_ops2(c: i32, d: i32) -> bool { c < d }\n const fn i32_ops3(c: i32, d: i32) -> bool { c != d }\n const fn i32_ops4(c: i32, d: i32) -> i32 { c + d }\n const fn char_cast(u: u8) -> char { u as char }\n-const unsafe fn foo4() -> i32 { 42 }\n-const unsafe fn foo5<T>() -> *const T { 0 as *const T }\n-const unsafe fn foo6<T>() -> *mut T { 0 as *mut T }\n+const unsafe fn ret_i32_no_unsafe() -> i32 { 42 }\n+const unsafe fn ret_null_ptr_no_unsafe<T>() -> *const T { 0 as *const T }\n+const unsafe fn ret_null_mut_ptr_no_unsafe<T>() -> *mut T { 0 as *mut T }\n \n // not ok\n const fn foo11<T: std::fmt::Display>(t: T) -> T { t }"}, {"sha": "f11b43dcd865ce54e407a2c7a5f537acebcdc818", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ae0b00cadace32fd85c6786df24a20d6b55a87d2/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae0b00cadace32fd85c6786df24a20d6b55a87d2/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.rs?ref=ae0b00cadace32fd85c6786df24a20d6b55a87d2", "patch": "@@ -11,22 +11,24 @@\n // gate-test-min_const_unsafe_fn\n \n // ok\n-const unsafe fn foo4() -> i32 { 42 }\n-const unsafe fn foo5<T>() -> *const T { 0 as *const T }\n-const unsafe fn foo6<T>() -> *mut T { 0 as *mut T }\n+const unsafe fn ret_i32_no_unsafe() -> i32 { 42 }\n+const unsafe fn ret_null_ptr_no_unsafe<T>() -> *const T { 0 as *const T }\n+const unsafe fn ret_null_mut_ptr_no_unsafe<T>() -> *mut T { 0 as *mut T }\n const fn no_unsafe() { unsafe {} }\n \n // not ok\n-const fn foo8() -> i32 {\n-    unsafe { foo4() } //~ ERROR calls to `const unsafe fn` in const fns are unstable\n+const fn call_unsafe_const_fn() -> i32 {\n+    unsafe { ret_i32_no_unsafe() } //~ ERROR calls to `const unsafe fn` in const fns are unstable\n }\n-const fn foo9() -> *const String {\n-    unsafe { foo5::<String>() } //~ ERROR calls to `const unsafe fn` in const fns are unstable\n+const fn call_unsafe_generic_const_fn() -> *const String {\n+    unsafe { ret_null_ptr_no_unsafe::<String>() }\n+    //~^ ERROR calls to `const unsafe fn` in const fns are unstable\n }\n-const fn foo10() -> *const Vec<std::cell::Cell<u32>> {\n-    unsafe { foo6::<Vec<std::cell::Cell<u32>>>() } //~ ERROR calls to `const unsafe fn` in const fns\n+const fn call_unsafe_generic_cell_const_fn() -> *const Vec<std::cell::Cell<u32>> {\n+    unsafe { ret_null_mut_ptr_no_unsafe::<Vec<std::cell::Cell<u32>>>() }\n+    //~^ ERROR calls to `const unsafe fn` in const fns\n }\n-const unsafe fn foo30_3(x: *mut usize) -> usize { *x } //~ ERROR not allowed in const fn\n+const unsafe fn deref_forbidden(x: *mut usize) -> usize { *x } //~ ERROR not allowed in const fn\n //~^ dereferencing raw pointers in constant functions\n \n fn main() {}"}, {"sha": "8d885545cde563913b0ada2222a6e0a3dc617a09", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ae0b00cadace32fd85c6786df24a20d6b55a87d2/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae0b00cadace32fd85c6786df24a20d6b55a87d2/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.stderr?ref=ae0b00cadace32fd85c6786df24a20d6b55a87d2", "patch": "@@ -1,13 +1,13 @@\n error[E0658]: dereferencing raw pointers in constant functions is unstable (see issue #51911)\n-  --> $DIR/min_const_fn_unsafe.rs:29:51\n+  --> $DIR/min_const_fn_unsafe.rs:31:59\n    |\n-LL | const unsafe fn foo30_3(x: *mut usize) -> usize { *x } //~ ERROR not allowed in const fn\n-   |                                                   ^^\n+LL | const unsafe fn deref_forbidden(x: *mut usize) -> usize { *x } //~ ERROR not allowed in const fn\n+   |                                                           ^^\n    |\n    = help: add #![feature(const_raw_ptr_deref)] to the crate attributes to enable\n \n error[E0658]: unions in const fn are unstable (see issue #51909)\n-  --> $DIR/min_const_fn_unsafe.rs:36:5\n+  --> $DIR/min_const_fn_unsafe.rs:38:5\n    |\n LL |     Foo { x: () }.y //~ ERROR not allowed in const fn\n    |     ^^^^^^^^^^^^^^^\n@@ -17,37 +17,37 @@ LL |     Foo { x: () }.y //~ ERROR not allowed in const fn\n error[E0658]: calls to `const unsafe fn` in const fns are unstable (see issue #55607)\n   --> $DIR/min_const_fn_unsafe.rs:21:14\n    |\n-LL |     unsafe { foo4() } //~ ERROR calls to `const unsafe fn` in const fns are unstable\n-   |              ^^^^^^\n+LL |     unsafe { ret_i32_no_unsafe() } //~ ERROR calls to `const unsafe fn` in const fns are unstable\n+   |              ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(min_const_unsafe_fn)] to the crate attributes to enable\n \n error[E0658]: calls to `const unsafe fn` in const fns are unstable (see issue #55607)\n   --> $DIR/min_const_fn_unsafe.rs:24:14\n    |\n-LL |     unsafe { foo5::<String>() } //~ ERROR calls to `const unsafe fn` in const fns are unstable\n-   |              ^^^^^^^^^^^^^^^^\n+LL |     unsafe { ret_null_ptr_no_unsafe::<String>() }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(min_const_unsafe_fn)] to the crate attributes to enable\n \n error[E0658]: calls to `const unsafe fn` in const fns are unstable (see issue #55607)\n-  --> $DIR/min_const_fn_unsafe.rs:27:14\n+  --> $DIR/min_const_fn_unsafe.rs:28:14\n    |\n-LL |     unsafe { foo6::<Vec<std::cell::Cell<u32>>>() } //~ ERROR calls to `const unsafe fn` in const fns\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     unsafe { ret_null_mut_ptr_no_unsafe::<Vec<std::cell::Cell<u32>>>() }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(min_const_unsafe_fn)] to the crate attributes to enable\n \n error: dereference of raw pointer is unsafe and unsafe operations are not allowed in const fn\n-  --> $DIR/min_const_fn_unsafe.rs:29:51\n+  --> $DIR/min_const_fn_unsafe.rs:31:59\n    |\n-LL | const unsafe fn foo30_3(x: *mut usize) -> usize { *x } //~ ERROR not allowed in const fn\n-   |                                                   ^^ dereference of raw pointer\n+LL | const unsafe fn deref_forbidden(x: *mut usize) -> usize { *x } //~ ERROR not allowed in const fn\n+   |                                                           ^^ dereference of raw pointer\n    |\n    = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n error: access to union field is unsafe and unsafe operations are not allowed in const fn\n-  --> $DIR/min_const_fn_unsafe.rs:36:5\n+  --> $DIR/min_const_fn_unsafe.rs:38:5\n    |\n LL |     Foo { x: () }.y //~ ERROR not allowed in const fn\n    |     ^^^^^^^^^^^^^^^ access to union field"}, {"sha": "8a6884bc6b93c3207e5c09b4ff2cc942834c5cdb", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe_feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ae0b00cadace32fd85c6786df24a20d6b55a87d2/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_feature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae0b00cadace32fd85c6786df24a20d6b55a87d2/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_feature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_feature_gate.rs?ref=ae0b00cadace32fd85c6786df24a20d6b55a87d2", "patch": "@@ -50,6 +50,9 @@ const unsafe fn foo30_3(x: *mut usize) -> usize { *x } //~ ERROR not allowed in\n const unsafe fn foo30_4(x: *mut usize) -> &'static usize { &*x } //~ ERROR not allowed in const fn\n //~^ dereferencing raw pointers in constant functions\n \n+const fn foo30_5(x: *mut usize) -> &'static usize { unsafe { &*x } } //~ ERROR not allowed\n+//~^ dereferencing raw pointers in constant functions\n+\n fn main() {}\n \n const unsafe fn no_union() {"}, {"sha": "4336db65813b3e95753803e623fe8705bf3ccb7f", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe_feature_gate.stderr", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ae0b00cadace32fd85c6786df24a20d6b55a87d2/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_feature_gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae0b00cadace32fd85c6786df24a20d6b55a87d2/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_feature_gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_feature_gate.stderr?ref=ae0b00cadace32fd85c6786df24a20d6b55a87d2", "patch": "@@ -14,8 +14,16 @@ LL | const unsafe fn foo30_4(x: *mut usize) -> &'static usize { &*x } //~ ERROR\n    |\n    = help: add #![feature(const_raw_ptr_deref)] to the crate attributes to enable\n \n+error[E0658]: dereferencing raw pointers in constant functions is unstable (see issue #51911)\n+  --> $DIR/min_const_fn_unsafe_feature_gate.rs:53:62\n+   |\n+LL | const fn foo30_5(x: *mut usize) -> &'static usize { unsafe { &*x } } //~ ERROR not allowed\n+   |                                                              ^^^\n+   |\n+   = help: add #![feature(const_raw_ptr_deref)] to the crate attributes to enable\n+\n error[E0658]: unions in const fn are unstable (see issue #51909)\n-  --> $DIR/min_const_fn_unsafe_feature_gate.rs:57:5\n+  --> $DIR/min_const_fn_unsafe_feature_gate.rs:60:5\n    |\n LL |     Foo { x: () }.y //~ ERROR not allowed in const fn\n    |     ^^^^^^^^^^^^^^^\n@@ -62,14 +70,22 @@ LL | const unsafe fn foo30_4(x: *mut usize) -> &'static usize { &*x } //~ ERROR\n    |\n    = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n+error: dereference of raw pointer is unsafe and unsafe operations are not allowed in const fn\n+  --> $DIR/min_const_fn_unsafe_feature_gate.rs:53:62\n+   |\n+LL | const fn foo30_5(x: *mut usize) -> &'static usize { unsafe { &*x } } //~ ERROR not allowed\n+   |                                                              ^^^ dereference of raw pointer\n+   |\n+   = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+\n error: access to union field is unsafe and unsafe operations are not allowed in const fn\n-  --> $DIR/min_const_fn_unsafe_feature_gate.rs:57:5\n+  --> $DIR/min_const_fn_unsafe_feature_gate.rs:60:5\n    |\n LL |     Foo { x: () }.y //~ ERROR not allowed in const fn\n    |     ^^^^^^^^^^^^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 11 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "f589e4739baf17145f7d3e09d0e1e68e086a95fb", "filename": "src/test/ui/unsafe/ranged_ints4_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae0b00cadace32fd85c6786df24a20d6b55a87d2/src%2Ftest%2Fui%2Funsafe%2Franged_ints4_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae0b00cadace32fd85c6786df24a20d6b55a87d2/src%2Ftest%2Fui%2Funsafe%2Franged_ints4_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints4_const.rs?ref=ae0b00cadace32fd85c6786df24a20d6b55a87d2", "patch": "@@ -7,13 +7,13 @@ fn main() {}\n \n const fn foo() -> NonZero<u32> {\n     let mut x = unsafe { NonZero(1) };\n-    x.0 = 0; //~ ERROR statements in constant functions are unstable\n+    x.0 = 0;\n     //~^ ERROR mutation of layout constrained field is unsafe\n     x\n }\n \n const fn bar() -> NonZero<u32> {\n     let mut x = unsafe { NonZero(1) };\n-    unsafe { x.0 = 0 }; //~ ERROR statements in constant functions are unstable\n+    unsafe { x.0 = 0 }; // this is UB\n     x\n }"}, {"sha": "fe83b15ce5cec456b434aee6cf703a5c4ae52eeb", "filename": "src/test/ui/unsafe/ranged_ints4_const.stderr", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ae0b00cadace32fd85c6786df24a20d6b55a87d2/src%2Ftest%2Fui%2Funsafe%2Franged_ints4_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae0b00cadace32fd85c6786df24a20d6b55a87d2/src%2Ftest%2Fui%2Funsafe%2Franged_ints4_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints4_const.stderr?ref=ae0b00cadace32fd85c6786df24a20d6b55a87d2", "patch": "@@ -1,28 +1,11 @@\n-error[E0658]: statements in constant functions are unstable (see issue #48821)\n-  --> $DIR/ranged_ints4_const.rs:10:5\n-   |\n-LL |     x.0 = 0; //~ ERROR statements in constant functions are unstable\n-   |     ^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n-error[E0658]: statements in constant functions are unstable (see issue #48821)\n-  --> $DIR/ranged_ints4_const.rs:17:14\n-   |\n-LL |     unsafe { x.0 = 0 }; //~ ERROR statements in constant functions are unstable\n-   |              ^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n error[E0133]: mutation of layout constrained field is unsafe and requires unsafe function or block\n   --> $DIR/ranged_ints4_const.rs:10:5\n    |\n-LL |     x.0 = 0; //~ ERROR statements in constant functions are unstable\n+LL |     x.0 = 0;\n    |     ^^^^^^^ mutation of layout constrained field\n    |\n    = note: mutating layout constrained fields cannot statically be checked for valid values\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0133, E0658.\n-For more information about an error, try `rustc --explain E0133`.\n+For more information about this error, try `rustc --explain E0133`."}]}