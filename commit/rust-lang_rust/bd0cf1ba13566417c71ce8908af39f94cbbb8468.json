{"sha": "bd0cf1ba13566417c71ce8908af39f94cbbb8468", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMGNmMWJhMTM1NjY0MTdjNzFjZTg5MDhhZjM5Zjk0Y2JiYjg0Njg=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2015-10-18T21:32:50Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2015-10-19T07:42:04Z"}, "message": "Don't use GCC's startup objects (crtbegin.o/crtend.o); build and use our own (for now on for -windows-gnu target only).\nSince it isn't possible to disable linkage of just GCC startup objects, we now need logic for finding libc installation directory and copying the required startup files (e.g. crt2.o) to rustlib directory.\nBonus change: use the `-nodefaultlibs` flag on Windows, thus paving the way to direct linker invocation.", "tree": {"sha": "a7c052d273a7991cf99151c855318dc99e7a5473", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7c052d273a7991cf99151c855318dc99e7a5473"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd0cf1ba13566417c71ce8908af39f94cbbb8468", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd0cf1ba13566417c71ce8908af39f94cbbb8468", "html_url": "https://github.com/rust-lang/rust/commit/bd0cf1ba13566417c71ce8908af39f94cbbb8468", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd0cf1ba13566417c71ce8908af39f94cbbb8468/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c807ff3b449a8dafc5cef539e5e65b2fe6dab879", "url": "https://api.github.com/repos/rust-lang/rust/commits/c807ff3b449a8dafc5cef539e5e65b2fe6dab879", "html_url": "https://github.com/rust-lang/rust/commit/c807ff3b449a8dafc5cef539e5e65b2fe6dab879"}], "stats": {"total": 241, "additions": 217, "deletions": 24}, "files": [{"sha": "1360a1ff0ee883d9cb6be0653319dff6f4350d5d", "filename": "configure", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bd0cf1ba13566417c71ce8908af39f94cbbb8468/configure", "raw_url": "https://github.com/rust-lang/rust/raw/bd0cf1ba13566417c71ce8908af39f94cbbb8468/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=bd0cf1ba13566417c71ce8908af39f94cbbb8468", "patch": "@@ -625,6 +625,7 @@ valopt_nosave local-rust-root \"/usr/local\" \"set prefix for local rust binary\"\n valopt_nosave host \"${CFG_BUILD}\" \"GNUs ./configure syntax LLVM host triples\"\n valopt_nosave target \"${CFG_HOST}\" \"GNUs ./configure syntax LLVM target triples\"\n valopt_nosave mandir \"${CFG_PREFIX}/share/man\" \"install man pages in PATH\"\n+valopt_nosave libc-dir \"/usr/lib\" \"installation directory of the system libc\"\n \n # Temporarily support old triples until buildbots get updated\n CFG_BUILD=$(to_llvm_triple $CFG_BUILD)\n@@ -1080,6 +1081,9 @@ program_transform_name=$($CFG_CC -v 2>&1 | sed -n \"s/.*--program-transform-name=\n CFG_STDCPP_NAME=$(echo \"stdc++\" | sed \"${program_transform_name}\")\n putvar CFG_STDCPP_NAME\n \n+#CFG_LIB_SEARCH_PATH=$($CFG_CC -print-search-dirs | sed -n \"/libraries: =/  { s/.*=//; P }\")\n+#putvar CFG_LIB_SEARCH_PATH\n+\n # a little post-processing of various config values\n CFG_PREFIX=${CFG_PREFIX%/}\n CFG_MANDIR=${CFG_MANDIR%/}\n@@ -1280,6 +1284,16 @@ $ pacman -R cmake && pacman -S mingw-w64-x86_64-cmake\n             putvar CFG_DISABLE_JEMALLOC\n             ;;\n \n+        *-windows-gnu)\n+            if [ -z \"$CFG_LIBC_DIR_PROVIDED\" ]; then\n+                # Use gcc location to find mingw libc directory\n+                for dir in $(dirname $CFG_GCC)/../*-mingw32/lib; do\n+                    if [ -d \"$dir\" ]; then\n+                        CFG_LIBC_DIR=$dir\n+                    fi\n+                done\n+            fi\n+            ;;\n         *)\n             ;;\n     esac\n@@ -1738,6 +1752,7 @@ putvar CFG_AARCH64_LINUX_ANDROID_NDK\n putvar CFG_ARM_LINUX_ANDROIDEABI_NDK\n putvar CFG_I686_LINUX_ANDROID_NDK\n putvar CFG_MANDIR\n+putvar CFG_LIBC_DIR\n \n # Avoid spurious warnings from clang by feeding it original source on\n # ccache-miss rather than preprocessed input."}, {"sha": "ced8bf43163e7049fcd70e40fe39b382f896af55", "filename": "mk/cfg/i686-pc-windows-gnu.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd0cf1ba13566417c71ce8908af39f94cbbb8468/mk%2Fcfg%2Fi686-pc-windows-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/bd0cf1ba13566417c71ce8908af39f94cbbb8468/mk%2Fcfg%2Fi686-pc-windows-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-pc-windows-gnu.mk?ref=bd0cf1ba13566417c71ce8908af39f94cbbb8468", "patch": "@@ -22,3 +22,4 @@ CFG_LDPATH_i686-pc-windows-gnu :=\n CFG_RUN_i686-pc-windows-gnu=$(2)\n CFG_RUN_TARG_i686-pc-windows-gnu=$(call CFG_RUN_i686-pc-windows-gnu,,$(2))\n CFG_GNU_TRIPLE_i686-pc-windows-gnu := i686-w64-mingw32\n+CFG_LIBC_STARTUP_OBJECTS_i686-pc-windows-gnu := crt2.o dllcrt2.o"}, {"sha": "0f49b6d585c6e9571eb66429a1ac5224e7dbe01b", "filename": "mk/cfg/x86_64-pc-windows-gnu.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd0cf1ba13566417c71ce8908af39f94cbbb8468/mk%2Fcfg%2Fx86_64-pc-windows-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/bd0cf1ba13566417c71ce8908af39f94cbbb8468/mk%2Fcfg%2Fx86_64-pc-windows-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-pc-windows-gnu.mk?ref=bd0cf1ba13566417c71ce8908af39f94cbbb8468", "patch": "@@ -22,3 +22,4 @@ CFG_LDPATH_x86_64-pc-windows-gnu :=\n CFG_RUN_x86_64-pc-windows-gnu=$(2)\n CFG_RUN_TARG_x86_64-pc-windows-gnu=$(call CFG_RUN_x86_64-pc-windows-gnu,,$(2))\n CFG_GNU_TRIPLE_x86_64-pc-windows-gnu := x86_64-w64-mingw32\n+CFG_LIBC_STARTUP_OBJECTS_x86_64-pc-windows-gnu := crt2.o dllcrt2.o\n\\ No newline at end of file"}, {"sha": "fcb3d4a1e53a2c77880a34ad7b3224f7358dace9", "filename": "mk/target.mk", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/bd0cf1ba13566417c71ce8908af39f94cbbb8468/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/bd0cf1ba13566417c71ce8908af39f94cbbb8468/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=bd0cf1ba13566417c71ce8908af39f94cbbb8468", "patch": "@@ -132,6 +132,60 @@ $$(TBIN$(1)_T_$(2)_H_$(3))/$(4)$$(X_$(2)): \\\n \n endef\n \n+# Macro for building runtime startup objects\n+# Of those we have two kinds:\n+# - Rust runtime-specific: these are Rust's equivalents of GCC's crti.o/crtn.o,\n+# - LibC-specific: these we don't build ourselves, but copy them from the system lib directory.\n+#\n+# $(1) - stage\n+# $(2) - target triple\n+# $(3) - host triple\n+define TARGET_RT_STARTUP\n+\n+# Expand build rules for rsbegin.o and rsend.o\n+$$(foreach obj,rsbegin rsend, \\\n+\t$$(eval $$(call TARGET_RUSTRT_STARTUP_OBJ,$(1),$(2),$(3),$$(obj))) )\n+\n+$$(foreach obj,$$(CFG_LIBC_STARTUP_OBJECTS_$(2)), \\\n+\t$$(eval $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.core : $$(TLIB$(1)_T_$(2)_H_$(3))/$$(obj)) \\\n+\t$$(eval $$(call COPY_LIBC_STARTUP,$$(TLIB$(1)_T_$(2)_H_$(3)),$$(obj))) )\n+endef\n+\n+# TARGET_RT_STARTUP's helper for copying LibC startup objects\n+# $(1) - target lib directory\n+# $(2) - object name\n+define COPY_LIBC_STARTUP\n+\n+$(1)/$(2) : $$(CFG_LIBC_DIR)/$(2)\n+\t@$$(call E, cp: $$@)\n+\t@cp $$^ $$@\n+endef\n+\n+# Macro for building runtime startup/shutdown object files;\n+# these are Rust's equivalent of crti.o, crtn.o\n+#\n+# $(1) - stage\n+# $(2) - target triple\n+# $(3) - host triple\n+# $(4) - object name\n+define TARGET_RUSTRT_STARTUP_OBJ\n+\n+$$(TLIB$(1)_T_$(2)_H_$(3))/$(4).o:\\\n+\t\t$(S)src/rtstartup/$(4).rs \\\n+\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.core \\\n+\t\t$$(HSREQ$(1)_T_$(2)_H_$(3)) \\\n+\t\t| $$(TBIN$(1)_T_$(2)_H_$(3))/\n+\t@$$(call E, rustc: $$@)\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) --emit=obj -o $$@ $$<\n+\n+# Add dependencies on Rust startup objects to all crates that depend on core.\n+# This ensures that they are built after core (since they depend on it),\n+# but before everything else (since they are needed for linking dylib crates).\n+$$(foreach crate, $$(TARGET_CRATES), \\\n+\t$$(if $$(findstring core,$$(DEPS_$$(crate))), \\\n+\t\t$$(eval $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(crate) : $$(TLIB$(1)_T_$(2)_H_$(3))/$(4).o) ))\n+endef\n+\n # Every recipe in RUST_TARGET_STAGE_N outputs to $$(TLIB$(1)_T_$(2)_H_$(3),\n # a directory that can be cleaned out during the middle of a run of\n # the get-snapshot.py script.  Therefore, every recipe needs to have\n@@ -174,3 +228,8 @@ $(foreach host,$(CFG_HOST), \\\n   $(foreach stage,$(STAGES), \\\n    $(foreach tool,$(TOOLS), \\\n     $(eval $(call TARGET_TOOL,$(stage),$(target),$(host),$(tool)))))))\n+\n+$(foreach host,$(CFG_HOST), \\\n+ $(foreach target,$(CFG_TARGET), \\\n+  $(foreach stage,$(STAGES), \\\n+   \t$(eval $(call TARGET_RT_STARTUP,$(stage),$(target),$(host))))))"}, {"sha": "fa12bbd89323c78e2a56e758b48468e0a337747c", "filename": "src/librustc_back/target/i686_pc_windows_gnu.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bd0cf1ba13566417c71ce8908af39f94cbbb8468/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd0cf1ba13566417c71ce8908af39f94cbbb8468/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_pc_windows_gnu.rs?ref=bd0cf1ba13566417c71ce8908af39f94cbbb8468", "patch": "@@ -11,17 +11,12 @@\n use target::Target;\n \n pub fn target() -> Target {\n-    let mut options = super::windows_base::opts();\n-    options.cpu = \"pentium4\".to_string();\n+    let mut base = super::windows_base::opts();\n+    base.cpu = \"pentium4\".to_string();\n \n     // Mark all dynamic libraries and executables as compatible with the larger 4GiB address\n     // space available to x86 Windows binaries on x86_64.\n-    options.pre_link_args.push(\"-Wl,--large-address-aware\".to_string());\n-\n-    // Make sure that we link to the dynamic libgcc, otherwise cross-module\n-    // DWARF stack unwinding will not work.\n-    // This behavior may be overridden by -Clink-args=\"-static-libgcc\"\n-    options.pre_link_args.push(\"-shared-libgcc\".to_string());\n+    base.pre_link_args.push(\"-Wl,--large-address-aware\".to_string());\n \n     Target {\n         llvm_target: \"i686-pc-windows-gnu\".to_string(),\n@@ -31,6 +26,6 @@ pub fn target() -> Target {\n         target_os: \"windows\".to_string(),\n         target_env: \"gnu\".to_string(),\n         target_vendor: \"pc\".to_string(),\n-        options: options,\n+        options: base,\n     }\n }"}, {"sha": "7af31e33aba0f9106cbbbfa08e8fe44573f1ee43", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bd0cf1ba13566417c71ce8908af39f94cbbb8468/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd0cf1ba13566417c71ce8908af39f94cbbb8468/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=bd0cf1ba13566417c71ce8908af39f94cbbb8468", "patch": "@@ -98,16 +98,25 @@ pub struct TargetOptions {\n     pub linker: String,\n     /// Archive utility to use when managing archives. Defaults to \"ar\".\n     pub ar: String,\n+\n     /// Linker arguments that are unconditionally passed *before* any\n     /// user-defined libraries.\n     pub pre_link_args: Vec<String>,\n+    /// Objects to link before all others, always found within the\n+    /// sysroot folder.\n+    pub pre_link_objects_exe: Vec<String>, // ... when linking an executable\n+    pub pre_link_objects_dll: Vec<String>, // ... when linking a dylib\n+    /// Linker arguments that are unconditionally passed after any\n+    /// user-defined but before post_link_objects.  Standard platform\n+    /// libraries that should be always be linked to, usually go here.\n+    pub late_link_args: Vec<String>,\n+    /// Objects to link after all others, always found within the\n+    /// sysroot folder.\n+    pub post_link_objects: Vec<String>,\n     /// Linker arguments that are unconditionally passed *after* any\n     /// user-defined libraries.\n     pub post_link_args: Vec<String>,\n-    /// Objects to link before and after all others, always found within the\n-    /// sysroot folder.\n-    pub pre_link_objects: Vec<String>,\n-    pub post_link_objects: Vec<String>,\n+\n     /// Default CPU to pass to LLVM. Corresponds to `llc -mcpu=$cpu`. Defaults\n     /// to \"default\".\n     pub cpu: String,\n@@ -219,8 +228,10 @@ impl Default for TargetOptions {\n             no_compiler_rt: false,\n             no_default_libraries: true,\n             position_independent_executables: false,\n-            pre_link_objects: Vec::new(),\n+            pre_link_objects_exe: Vec::new(),\n+            pre_link_objects_dll: Vec::new(),\n             post_link_objects: Vec::new(),\n+            late_link_args: Vec::new(),\n             archive_format: String::new(),\n             custom_unwind_resume: false,\n             lib_allocation_crate: \"alloc_system\".to_string(),"}, {"sha": "fc1e192f1e15da9dea536d989327c7053eb78096", "filename": "src/librustc_back/target/windows_base.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bd0cf1ba13566417c71ce8908af39f94cbbb8468/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd0cf1ba13566417c71ce8908af39f94cbbb8468/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs?ref=bd0cf1ba13566417c71ce8908af39f94cbbb8468", "patch": "@@ -23,10 +23,7 @@ pub fn opts() -> TargetOptions {\n         exe_suffix: \".exe\".to_string(),\n         staticlib_prefix: \"\".to_string(),\n         staticlib_suffix: \".lib\".to_string(),\n-        // Unfortunately right now passing -nodefaultlibs to gcc on windows\n-        // doesn't work so hot (in terms of native dependencies). This flag\n-        // should hopefully be removed one day though!\n-        no_default_libraries: false,\n+        no_default_libraries: true,\n         is_like_windows: true,\n         archive_format: \"gnu\".to_string(),\n         pre_link_args: vec!(\n@@ -63,7 +60,32 @@ pub fn opts() -> TargetOptions {\n \n             // Always enable DEP (NX bit) when it is available\n             \"-Wl,--nxcompat\".to_string(),\n+\n+            // Do not use the standard system startup files or libraries when linking\n+            \"-nostdlib\".to_string(),\n+        ),\n+        pre_link_objects_exe: vec!(\n+            \"crt2.o\".to_string(),\n+            \"rsbegin.o\".to_string(),\n+        ),\n+        pre_link_objects_dll: vec!(\n+            \"dllcrt2.o\".to_string(),\n+            \"rsbegin.o\".to_string(),\n+        ),\n+        late_link_args: vec!(\n+            \"-lmingwex\".to_string(),\n+            \"-lmingw32\".to_string(),\n+            \"-lgcc\".to_string(), // alas, mingw* libraries above depend on libgcc\n+            \"-lmsvcrt\".to_string(),\n+            \"-ladvapi32\".to_string(),\n+            \"-lshell32\".to_string(),\n+            \"-luser32\".to_string(),\n+            \"-lkernel32\".to_string(),\n+        ),\n+        post_link_objects: vec!(\n+            \"rsend.o\".to_string()\n         ),\n+        custom_unwind_resume: true,\n         exe_allocation_crate: super::maybe_jemalloc(),\n \n         .. Default::default()"}, {"sha": "3e8438539156f02f0909616abfe820be230e77b0", "filename": "src/librustc_back/target/x86_64_pc_windows_gnu.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd0cf1ba13566417c71ce8908af39f94cbbb8468/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd0cf1ba13566417c71ce8908af39f94cbbb8468/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_gnu.rs?ref=bd0cf1ba13566417c71ce8908af39f94cbbb8468", "patch": "@@ -13,10 +13,7 @@ use target::Target;\n pub fn target() -> Target {\n     let mut base = super::windows_base::opts();\n     base.cpu = \"x86-64\".to_string();\n-    // On Win64 unwinding is handled by the OS, so we can link libgcc statically.\n-    base.pre_link_args.push(\"-static-libgcc\".to_string());\n     base.pre_link_args.push(\"-m64\".to_string());\n-    base.custom_unwind_resume = true;\n \n     Target {\n         llvm_target: \"x86_64-pc-windows-gnu\".to_string(),"}, {"sha": "dafbb924a9ca5739b5a3e397bd40d6329700565d", "filename": "src/librustc_back/target/x86_64_unknown_linux_musl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd0cf1ba13566417c71ce8908af39f94cbbb8468/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd0cf1ba13566417c71ce8908af39f94cbbb8468/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_linux_musl.rs?ref=bd0cf1ba13566417c71ce8908af39f94cbbb8468", "patch": "@@ -58,8 +58,8 @@ pub fn target() -> Target {\n     //\n     // Each target directory for musl has these object files included in it so\n     // they'll be included from there.\n-    base.pre_link_objects.push(\"crt1.o\".to_string());\n-    base.pre_link_objects.push(\"crti.o\".to_string());\n+    base.pre_link_objects_exe.push(\"crt1.o\".to_string());\n+    base.pre_link_objects_exe.push(\"crti.o\".to_string());\n     base.post_link_objects.push(\"crtn.o\".to_string());\n \n     // MUSL support doesn't currently include dynamic linking, so there's no"}, {"sha": "21b438ae81401b4e8457757a8510b584ea4e36c8", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bd0cf1ba13566417c71ce8908af39f94cbbb8468/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd0cf1ba13566417c71ce8908af39f94cbbb8468/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=bd0cf1ba13566417c71ce8908af39f94cbbb8468", "patch": "@@ -850,7 +850,13 @@ fn link_natively(sess: &Session, dylib: bool,\n \n     let root = sess.target_filesearch(PathKind::Native).get_lib_path();\n     cmd.args(&sess.target.target.options.pre_link_args);\n-    for obj in &sess.target.target.options.pre_link_objects {\n+\n+    let pre_link_objects = if dylib {\n+        &sess.target.target.options.pre_link_objects_dll\n+    } else {\n+        &sess.target.target.options.pre_link_objects_exe\n+    };\n+    for obj in pre_link_objects {\n         cmd.arg(root.join(obj));\n     }\n \n@@ -866,6 +872,7 @@ fn link_natively(sess: &Session, dylib: bool,\n             linker.link_staticlib(\"compiler-rt\");\n         }\n     }\n+    cmd.args(&sess.target.target.options.late_link_args);\n     for obj in &sess.target.target.options.post_link_objects {\n         cmd.arg(root.join(obj));\n     }"}, {"sha": "17684b74b7019814483aaf12f6a6ff8be0a2b7b0", "filename": "src/rtstartup/rsbegin.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/bd0cf1ba13566417c71ce8908af39f94cbbb8468/src%2Frtstartup%2Frsbegin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd0cf1ba13566417c71ce8908af39f94cbbb8468/src%2Frtstartup%2Frsbegin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frtstartup%2Frsbegin.rs?ref=bd0cf1ba13566417c71ce8908af39f94cbbb8468", "patch": "@@ -0,0 +1,61 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(no_std)]\n+#![feature(linkage)]\n+\n+#![crate_type=\"rlib\"]\n+#![no_std]\n+#![allow(non_camel_case_types)]\n+\n+#[cfg(all(target_os=\"windows\", target_arch = \"x86\", target_env=\"gnu\"))]\n+pub mod eh_frames\n+{\n+    #[no_mangle]\n+    #[link_section = \".eh_frame\"]\n+    pub static __EH_FRAME_BEGIN__: [u8; 0] = [];\n+\n+    // Scratch space for unwinder's internal book-keeping.\n+    // This is defined as `struct object` in $GCC/libgcc/unwind-dw2-fde.h.\n+    static mut obj: [isize; 6] = [0; 6];\n+\n+    extern {\n+        fn rust_eh_register_frames(eh_frame_begin: *const u8, object: *mut u8);\n+        fn rust_eh_unregister_frames(eh_frame_begin: *const u8, object: *mut u8);\n+    }\n+\n+    unsafe fn init() {\n+        rust_eh_register_frames(&__EH_FRAME_BEGIN__ as *const u8,\n+                                &mut obj as *mut _ as *mut u8);\n+    }\n+\n+    unsafe fn uninit() {\n+        rust_eh_unregister_frames(&__EH_FRAME_BEGIN__ as *const u8,\n+                                  &mut obj as *mut _ as *mut u8);\n+    }\n+\n+    pub mod ms_init\n+    {\n+        // .CRT$X?? sections are roughly analogous to ELF's .init_array and .fini_array,\n+        // except that they exploit the fact that linker will sort them alphabitically,\n+        // so e.g. sections with names between .CRT$XIA and .CRT$XIZ are guaranteed to be\n+        // placed between those two, without requiring any ordering of objects on the linker\n+        // command line.\n+        // Note that ordering of same-named sections from different objects is not guaranteed.\n+        // Since .CRT$XIA contains init array's header symbol, which must always come first,\n+        // we place our initialization callback into .CRT$XIB.\n+\n+        #[link_section = \".CRT$XIB\"] // .CRT$XI? : C initialization callbacks\n+        pub static P_INIT: unsafe fn() = super::init;\n+\n+        #[link_section = \".CRT$XTY\"] // .CRT$XT? : C termination callbacks\n+        pub static P_UNINIT: unsafe fn() = super::uninit;\n+    }\n+}"}, {"sha": "df7759877e9f820b9bd4c5c3f90b98ee7ace55ec", "filename": "src/rtstartup/rsend.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bd0cf1ba13566417c71ce8908af39f94cbbb8468/src%2Frtstartup%2Frsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd0cf1ba13566417c71ce8908af39f94cbbb8468/src%2Frtstartup%2Frsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frtstartup%2Frsend.rs?ref=bd0cf1ba13566417c71ce8908af39f94cbbb8468", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(no_std)]\n+\n+#![crate_type=\"rlib\"]\n+#![no_std]\n+\n+#[cfg(all(target_os=\"windows\", target_arch = \"x86\", target_env=\"gnu\"))]\n+pub mod eh_frames\n+{\n+    // Terminate the frame unwind info section with a 0 as a sentinel;\n+    // this would be the 'length' field in a real FDE.\n+    #[no_mangle]\n+    #[link_section = \".eh_frame\"]\n+    pub static __EH_FRAME_END__: u32 = 0;\n+}"}]}