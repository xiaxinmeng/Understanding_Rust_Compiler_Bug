{"sha": "aaa682c534f488b51063e015a23597b344a335ff", "node_id": "C_kwDOAAsO6NoAKGFhYTY4MmM1MzRmNDg4YjUxMDYzZTAxNWEyMzU5N2IzNDRhMzM1ZmY", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-12-28T21:25:47Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-12-28T21:25:47Z"}, "message": "Implement `try{}` block type inference", "tree": {"sha": "f1e4f666623eb8c6b1e636be6c3f374791a6ebe6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1e4f666623eb8c6b1e636be6c3f374791a6ebe6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aaa682c534f488b51063e015a23597b344a335ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aaa682c534f488b51063e015a23597b344a335ff", "html_url": "https://github.com/rust-lang/rust/commit/aaa682c534f488b51063e015a23597b344a335ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aaa682c534f488b51063e015a23597b344a335ff/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef303f224fb67fa09fe007894242828fa17d24f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef303f224fb67fa09fe007894242828fa17d24f8", "html_url": "https://github.com/rust-lang/rust/commit/ef303f224fb67fa09fe007894242828fa17d24f8"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "d4050f9af49c2a2273d97a70fe7b29369bdca1f3", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/aaa682c534f488b51063e015a23597b344a335ff/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaa682c534f488b51063e015a23597b344a335ff/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=aaa682c534f488b51063e015a23597b344a335ff", "patch": "@@ -152,11 +152,20 @@ impl<'a> InferenceContext<'a> {\n                 .1\n             }\n             Expr::TryBlock { body } => {\n-                self.with_breakable_ctx(BreakableKind::Block, self.err_ty(), None, |this| {\n-                    let _inner = this.infer_expr(*body, expected);\n+                // The type that is returned from the try block\n+                let try_ty = self.table.new_type_var();\n+                if let Some(ty) = expected.only_has_type(&mut self.table) {\n+                    self.unify(&try_ty, &ty);\n+                }\n+\n+                // The ok-ish type that is expected from the last expression\n+                let ok_ty = self.resolve_associated_type(try_ty.clone(), self.resolve_ops_try_ok());\n+\n+                self.with_breakable_ctx(BreakableKind::Block, ok_ty.clone(), None, |this| {\n+                    this.infer_expr(*body, &Expectation::has_type(ok_ty));\n                 });\n-                // FIXME should be std::result::Result<{inner}, _>\n-                self.err_ty()\n+\n+                try_ty\n             }\n             Expr::Async { body } => {\n                 let ret_ty = self.table.new_type_var();"}, {"sha": "146145523b242d3098232ad0f92176937b000630", "filename": "crates/hir-ty/src/tests/simple.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/aaa682c534f488b51063e015a23597b344a335ff/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaa682c534f488b51063e015a23597b344a335ff/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs?ref=aaa682c534f488b51063e015a23597b344a335ff", "patch": "@@ -2064,17 +2064,17 @@ fn fn_pointer_return() {\n fn block_modifiers_smoke_test() {\n     check_infer(\n         r#\"\n-//- minicore: future\n+//- minicore: future, try\n async fn main() {\n     let x = unsafe { 92 };\n     let y = async { async { () }.await };\n-    let z = try { () };\n+    let z: core::ops::ControlFlow<(), _> = try { () };\n     let w = const { 92 };\n     let t = 'a: { 92 };\n }\n         \"#,\n         expect![[r#\"\n-            16..162 '{     ...2 }; }': ()\n+            16..193 '{     ...2 }; }': ()\n             26..27 'x': i32\n             30..43 'unsafe { 92 }': i32\n             30..43 'unsafe { 92 }': i32\n@@ -2086,17 +2086,17 @@ async fn main() {\n             65..77 'async { () }': impl Future<Output = ()>\n             65..83 'async ....await': ()\n             73..75 '()': ()\n-            95..96 'z': {unknown}\n-            99..109 'try { () }': ()\n-            99..109 'try { () }': {unknown}\n-            105..107 '()': ()\n-            119..120 'w': i32\n-            123..135 'const { 92 }': i32\n-            123..135 'const { 92 }': i32\n-            131..133 '92': i32\n-            145..146 't': i32\n-            149..159 ''a: { 92 }': i32\n-            155..157 '92': i32\n+            95..96 'z': ControlFlow<(), ()>\n+            130..140 'try { () }': ()\n+            130..140 'try { () }': ControlFlow<(), ()>\n+            136..138 '()': ()\n+            150..151 'w': i32\n+            154..166 'const { 92 }': i32\n+            154..166 'const { 92 }': i32\n+            162..164 '92': i32\n+            176..177 't': i32\n+            180..190 ''a: { 92 }': i32\n+            186..188 '92': i32\n         \"#]],\n     )\n }"}]}