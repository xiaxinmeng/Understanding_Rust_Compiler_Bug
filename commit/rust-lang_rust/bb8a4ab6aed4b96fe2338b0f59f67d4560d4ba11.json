{"sha": "bb8a4ab6aed4b96fe2338b0f59f67d4560d4ba11", "node_id": "C_kwDOAAsO6NoAKGJiOGE0YWI2YWVkNGI5NmZlMjMzOGIwZjU5ZjY3ZDQ1NjBkNGJhMTE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-08T10:08:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-08T10:08:58Z"}, "message": "Rollup merge of #91467 - ChrisDenton:confusing-os-string, r=Mark-Simulacrum\n\nEmphasise that an OsStr[ing] is not necessarily a platform string\n\nFixes #53261\n\nSince that issue was filed, #56141 added a further clarification to the `OsString` docs. However the ffi docs may still leave the impression that an `OsStr` is in the platform native form. This PR aims to further emphasise that an `OsStr` is not necessarily a platform string.", "tree": {"sha": "3b62ac89dc360aa2bd69b10c79f71494cf46cf29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b62ac89dc360aa2bd69b10c79f71494cf46cf29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb8a4ab6aed4b96fe2338b0f59f67d4560d4ba11", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhsIQ6CRBK7hj4Ov3rIwAA0gQIAFHlc7ThoBmWe481L9Qz1wYe\noABc1z7Yl/D/sf7uwbs336RPt/6AGHyysBKDcGbAprhMZcEj87Ql0kcgM0T7j+gr\nFqHPV4pyVO1RZlblSOztLwXTT3G4Ckh6ybsmFLYeapnlcymslaio5+5+O9yRvjop\n0OvZvLwpPCULcPLiJyVls5fRouSpREYIHkupzVZh5PoSaR1HJQYXLtG/1g2553jD\n0qnDQPJHIsu1j8PapLQhmTQ8Jjr6XH20Qocnf2joyjNxkwmb8vrJQ7WR/MI0WtMi\nFOr0LY5tvCvLwUb4LI1ykC31DxHw1DnIVOz6naLWB3lTo4eblfJeoQs91kXc1B8=\n=U3vm\n-----END PGP SIGNATURE-----\n", "payload": "tree 3b62ac89dc360aa2bd69b10c79f71494cf46cf29\nparent 871cf2bc9e4221ec1dfdcfdb3f8d66ab42d6201b\nparent 49aa5baf36feb22818d8614b43f24f73e530d884\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1638958138 +0100\ncommitter GitHub <noreply@github.com> 1638958138 +0100\n\nRollup merge of #91467 - ChrisDenton:confusing-os-string, r=Mark-Simulacrum\n\nEmphasise that an OsStr[ing] is not necessarily a platform string\n\nFixes #53261\n\nSince that issue was filed, #56141 added a further clarification to the `OsString` docs. However the ffi docs may still leave the impression that an `OsStr` is in the platform native form. This PR aims to further emphasise that an `OsStr` is not necessarily a platform string.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb8a4ab6aed4b96fe2338b0f59f67d4560d4ba11", "html_url": "https://github.com/rust-lang/rust/commit/bb8a4ab6aed4b96fe2338b0f59f67d4560d4ba11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb8a4ab6aed4b96fe2338b0f59f67d4560d4ba11/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "871cf2bc9e4221ec1dfdcfdb3f8d66ab42d6201b", "url": "https://api.github.com/repos/rust-lang/rust/commits/871cf2bc9e4221ec1dfdcfdb3f8d66ab42d6201b", "html_url": "https://github.com/rust-lang/rust/commit/871cf2bc9e4221ec1dfdcfdb3f8d66ab42d6201b"}, {"sha": "49aa5baf36feb22818d8614b43f24f73e530d884", "url": "https://api.github.com/repos/rust-lang/rust/commits/49aa5baf36feb22818d8614b43f24f73e530d884", "html_url": "https://github.com/rust-lang/rust/commit/49aa5baf36feb22818d8614b43f24f73e530d884"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "019b64c395eda5dbe38288ed8782b025125208f5", "filename": "library/std/src/ffi/mod.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bb8a4ab6aed4b96fe2338b0f59f67d4560d4ba11/library%2Fstd%2Fsrc%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb8a4ab6aed4b96fe2338b0f59f67d4560d4ba11/library%2Fstd%2Fsrc%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fmod.rs?ref=bb8a4ab6aed4b96fe2338b0f59f67d4560d4ba11", "patch": "@@ -81,9 +81,9 @@\n //! [`OsStr`] and Rust strings work similarly to those for [`CString`]\n //! and [`CStr`].\n //!\n-//! * [`OsString`] represents an owned string in whatever\n-//! representation the operating system prefers. In the Rust standard\n-//! library, various APIs that transfer strings to/from the operating\n+//! * [`OsString`] losslessly represents an owned platform string. However, this\n+//! representation is not necessarily in a form native to the platform.\n+//! In the Rust standard library, various APIs that transfer strings to/from the operating\n //! system use [`OsString`] instead of plain strings. For example,\n //! [`env::var_os()`] is used to query environment variables; it\n //! returns an <code>[Option]<[OsString]></code>. If the environment variable\n@@ -92,9 +92,9 @@\n //! your code can detect errors in case the environment variable did\n //! not in fact contain valid Unicode data.\n //!\n-//! * [`OsStr`] represents a borrowed reference to a string in a\n-//! format that can be passed to the operating system. It can be\n-//! converted into a UTF-8 Rust string slice in a similar way to\n+//! * [`OsStr`] losslessly represents a borrowed reference to a platform string.\n+//! However, this representation is not necessarily in a form native to the platform.\n+//! It can be converted into a UTF-8 Rust string slice in a similar way to\n //! [`OsString`].\n //!\n //! # Conversions\n@@ -113,16 +113,19 @@\n //!\n //! ## On Windows\n //!\n+//! An [`OsStr`] can be losslessly converted to a native Windows string. And\n+//! a native Windows string can be losslessly converted to an [`OsString`].\n+//!\n //! On Windows, [`OsStr`] implements the\n //! <code>std::os::windows::ffi::[OsStrExt][windows.OsStrExt]</code> trait,\n //! which provides an [`encode_wide`] method. This provides an\n-//! iterator that can be [`collect`]ed into a vector of [`u16`].\n+//! iterator that can be [`collect`]ed into a vector of [`u16`]. After a nul\n+//! characters is appended, this is the same as a native Windows string.\n //!\n //! Additionally, on Windows [`OsString`] implements the\n //! <code>std::os::windows:ffi::[OsStringExt][windows.OsStringExt]</code>\n-//! trait, which provides a [`from_wide`] method. The result of this\n-//! method is an [`OsString`] which can be round-tripped to a Windows\n-//! string losslessly.\n+//! trait, which provides a [`from_wide`] method to convert a native Windows\n+//! string (without the terminating nul character) to an [`OsString`].\n //!\n //! [Unicode scalar value]: https://www.unicode.org/glossary/#unicode_scalar_value\n //! [Unicode code point]: https://www.unicode.org/glossary/#code_point"}]}