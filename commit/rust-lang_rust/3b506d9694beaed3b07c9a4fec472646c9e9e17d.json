{"sha": "3b506d9694beaed3b07c9a4fec472646c9e9e17d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNTA2ZDk2OTRiZWFlZDNiMDdjOWE0ZmVjNDcyNjQ2YzllOWUxN2Q=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-24T03:25:29Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-29T19:23:07Z"}, "message": "Remove `NodeState::OnDfsStack`.\n\nIt's not necessary; cycles (which are rare) can be detected by looking\nat the node stack.\n\nThis change speeds things up slightly, as well as simplifying the code a\nlittle.", "tree": {"sha": "16f27adb92bd9f8379e6f7a574cd9212cea6caf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16f27adb92bd9f8379e6f7a574cd9212cea6caf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b506d9694beaed3b07c9a4fec472646c9e9e17d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b506d9694beaed3b07c9a4fec472646c9e9e17d", "html_url": "https://github.com/rust-lang/rust/commit/3b506d9694beaed3b07c9a4fec472646c9e9e17d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b506d9694beaed3b07c9a4fec472646c9e9e17d/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06c68947ad88f22a8342fe6b54dc0fe54de6e011", "url": "https://api.github.com/repos/rust-lang/rust/commits/06c68947ad88f22a8342fe6b54dc0fe54de6e011", "html_url": "https://github.com/rust-lang/rust/commit/06c68947ad88f22a8342fe6b54dc0fe54de6e011"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "3cbd955a72815e0a73368b7c0b50b23fd44b275d", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3b506d9694beaed3b07c9a4fec472646c9e9e17d/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b506d9694beaed3b07c9a4fec472646c9e9e17d/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=3b506d9694beaed3b07c9a4fec472646c9e9e17d", "patch": "@@ -235,10 +235,6 @@ enum NodeState {\n     /// This obligation was resolved to an error. Error nodes are\n     /// removed from the vector by the compression step.\n     Error,\n-\n-    /// This is a temporary state used in DFS loops to detect cycles,\n-    /// it should not exist outside of these DFSes.\n-    OnDfsStack,\n }\n \n #[derive(Debug)]\n@@ -491,7 +487,6 @@ impl<O: ForestObligation> ObligationForest<O> {\n                 NodeState::Pending => {},\n                 NodeState::Success => self.find_cycles_from_node(&mut stack, processor, index),\n                 NodeState::Waiting | NodeState::Done | NodeState::Error => {},\n-                NodeState::OnDfsStack => self.find_cycles_from_node(&mut stack, processor, index),\n             }\n         }\n \n@@ -506,20 +501,25 @@ impl<O: ForestObligation> ObligationForest<O> {\n     {\n         let node = &self.nodes[index];\n         match node.state.get() {\n-            NodeState::OnDfsStack => {\n-                let rpos = stack.iter().rposition(|&n| n == index).unwrap();\n-                processor.process_backedge(stack[rpos..].iter().map(GetObligation(&self.nodes)),\n-                                           PhantomData);\n-            }\n             NodeState::Success => {\n-                node.state.set(NodeState::OnDfsStack);\n-                stack.push(index);\n-                for &index in node.dependents.iter() {\n-                    self.find_cycles_from_node(stack, processor, index);\n+                match stack.iter().rposition(|&n| n == index) {\n+                    None => {\n+                        stack.push(index);\n+                        for &index in node.dependents.iter() {\n+                            self.find_cycles_from_node(stack, processor, index);\n+                        }\n+                        stack.pop();\n+                        node.state.set(NodeState::Done);\n+                    }\n+                    Some(rpos) => {\n+                        // Cycle detected.\n+                        processor.process_backedge(\n+                            stack[rpos..].iter().map(GetObligation(&self.nodes)),\n+                            PhantomData\n+                        );\n+                    }\n                 }\n-                stack.pop();\n-                node.state.set(NodeState::Done);\n-            },\n+            }\n             NodeState::Waiting | NodeState::Pending => {\n                 // This node is still reachable from some pending node. We\n                 // will get to it when they are all processed.\n@@ -598,7 +598,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n \n     fn mark_as_waiting_from(&self, node: &Node<O>) {\n         match node.state.get() {\n-            NodeState::Waiting | NodeState::Error | NodeState::OnDfsStack => return,\n+            NodeState::Waiting | NodeState::Error => return,\n             NodeState::Success => node.state.set(NodeState::Waiting),\n             NodeState::Pending | NodeState::Done => {},\n         }\n@@ -659,7 +659,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n                     dead_nodes += 1;\n                     self.insert_into_error_cache(index);\n                 }\n-                NodeState::OnDfsStack | NodeState::Success => unreachable!()\n+                NodeState::Success => unreachable!()\n             }\n         }\n "}]}