{"sha": "e3b0a728b4aa886fcb451b2a3bd7662942a5acaa", "node_id": "C_kwDOAAsO6NoAKGUzYjBhNzI4YjRhYTg4NmZjYjQ1MWIyYTNiZDc2NjI5NDJhNWFjYWE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-18T19:05:49Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-28T02:07:35Z"}, "message": "Erase impl regions when checking for impossible to eagerly monomorphize items", "tree": {"sha": "9be689198918130f279885a498c861aeedbdfc0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9be689198918130f279885a498c861aeedbdfc0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3b0a728b4aa886fcb451b2a3bd7662942a5acaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3b0a728b4aa886fcb451b2a3bd7662942a5acaa", "html_url": "https://github.com/rust-lang/rust/commit/e3b0a728b4aa886fcb451b2a3bd7662942a5acaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3b0a728b4aa886fcb451b2a3bd7662942a5acaa/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bf139e3609255f6bdeae0f8dcc40eeb1021148b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bf139e3609255f6bdeae0f8dcc40eeb1021148b", "html_url": "https://github.com/rust-lang/rust/commit/5bf139e3609255f6bdeae0f8dcc40eeb1021148b"}], "stats": {"total": 67, "additions": 48, "deletions": 19}, "files": [{"sha": "c286046fb674c1627af3a06aa165961b335624d9", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 29, "deletions": 19, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e3b0a728b4aa886fcb451b2a3bd7662942a5acaa/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b0a728b4aa886fcb451b2a3bd7662942a5acaa/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=e3b0a728b4aa886fcb451b2a3bd7662942a5acaa", "patch": "@@ -1326,27 +1326,40 @@ fn create_mono_items_for_default_impls<'tcx>(\n         return;\n     }\n \n+    let Some(trait_ref) = tcx.impl_trait_ref(item.owner_id) else {\n+        return;\n+    };\n+\n+    // Lifetimes never affect trait selection, so we are allowed to eagerly\n+    // instantiate an instance of an impl method if the impl (and method,\n+    // which we check below) is only parameterized over lifetime. In that case,\n+    // we use the ReErased, which has no lifetime information associated with\n+    // it, to validate whether or not the impl is legal to instantiate at all.\n+    let only_region_params = |param: &ty::GenericParamDef, _: &_| match param.kind {\n+        GenericParamDefKind::Lifetime => tcx.lifetimes.re_erased.into(),\n+        GenericParamDefKind::Type { .. } | GenericParamDefKind::Const { .. } => {\n+            unreachable!(\n+                \"`own_requires_monomorphization` check means that \\\n+                we should have no type/const params\"\n+            )\n+        }\n+    };\n+    let impl_substs = InternalSubsts::for_item(tcx, item.owner_id.to_def_id(), only_region_params);\n+    let trait_ref = trait_ref.subst(tcx, impl_substs);\n+\n     // Unlike 'lazy' monomorphization that begins by collecting items transitively\n     // called by `main` or other global items, when eagerly monomorphizing impl\n     // items, we never actually check that the predicates of this impl are satisfied\n     // in a empty reveal-all param env (i.e. with no assumptions).\n     //\n-    // Even though this impl has no substitutions, because we don't consider higher-\n-    // ranked predicates such as `for<'a> &'a mut [u8]: Copy` to be trivially false,\n-    // we must now check that the impl has no impossible-to-satisfy predicates.\n-    if tcx.subst_and_check_impossible_predicates((\n-        item.owner_id.to_def_id(),\n-        &InternalSubsts::identity_for_item(tcx, item.owner_id.to_def_id()),\n-    )) {\n+    // Even though this impl has no type or const substitutions, because we don't\n+    // consider higher-ranked predicates such as `for<'a> &'a mut [u8]: Copy` to\n+    // be trivially false. We must now check that the impl has no impossible-to-satisfy\n+    // predicates.\n+    if tcx.subst_and_check_impossible_predicates((item.owner_id.to_def_id(), impl_substs)) {\n         return;\n     }\n \n-    let Some(trait_ref) = tcx.impl_trait_ref(item.owner_id) else {\n-        return;\n-    };\n-\n-    let trait_ref = trait_ref.subst_identity();\n-\n     let param_env = ty::ParamEnv::reveal_all();\n     let trait_ref = tcx.normalize_erasing_regions(param_env, trait_ref);\n     let overridden_methods = tcx.impl_item_implementor_ids(item.owner_id);\n@@ -1359,12 +1372,9 @@ fn create_mono_items_for_default_impls<'tcx>(\n             continue;\n         }\n \n-        let substs = InternalSubsts::for_item(tcx, method.def_id, |param, _| match param.kind {\n-            GenericParamDefKind::Lifetime => tcx.lifetimes.re_erased.into(),\n-            GenericParamDefKind::Type { .. } | GenericParamDefKind::Const { .. } => {\n-                trait_ref.substs[param.index as usize]\n-            }\n-        });\n+        // As mentioned above, the method is legal to eagerly instantiate if it\n+        // only has lifetime substitutions. This is validated by\n+        let substs = trait_ref.substs.extend_to(tcx, method.def_id, only_region_params);\n         let instance = ty::Instance::expect_resolve(tcx, param_env, method.def_id, substs);\n \n         let mono_item = create_fn_mono_item(tcx, instance, DUMMY_SP);"}, {"sha": "21eb2c9b2f2da329cc9cd3e703115a66ba753f21", "filename": "tests/ui/codegen/mono-impossible-2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e3b0a728b4aa886fcb451b2a3bd7662942a5acaa/tests%2Fui%2Fcodegen%2Fmono-impossible-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b0a728b4aa886fcb451b2a3bd7662942a5acaa/tests%2Fui%2Fcodegen%2Fmono-impossible-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcodegen%2Fmono-impossible-2.rs?ref=e3b0a728b4aa886fcb451b2a3bd7662942a5acaa", "patch": "@@ -0,0 +1,19 @@\n+//compile-flags: --crate-type=lib -Clink-dead-code=on\n+// build-pass\n+\n+// Make sure that we don't monomorphize the impossible method `<() as Visit>::visit`,\n+// which does not hold under a reveal-all param env.\n+\n+pub trait Visit {\n+    fn visit() {}\n+}\n+\n+pub trait Array {\n+    type Element;\n+}\n+\n+impl<'a> Visit for () where (): Array<Element = &'a ()> {}\n+\n+impl Array for () {\n+    type Element = ();\n+}"}]}