{"sha": "6c18a3d7756cd0522ac4de58abc4470cd9bd7b42", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMThhM2Q3NzU2Y2QwNTIyYWM0ZGU1OGFiYzQ0NzBjZDliZDdiNDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-04T11:37:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-04T11:37:37Z"}, "message": "Auto merge of #63825 - nathanwhit:check-run-results, r=Mark-Simulacrum\n\nAllow checking of run-pass execution output in compiletest\n\nCloses #63751\nAdds a `check-run-results` flag to compiletest headers, which if enabled checks the output of the execution of a run-pass test's binary against expected output.", "tree": {"sha": "f02695b5f607b3239bab4770fc4e91d63805edb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f02695b5f607b3239bab4770fc4e91d63805edb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c18a3d7756cd0522ac4de58abc4470cd9bd7b42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c18a3d7756cd0522ac4de58abc4470cd9bd7b42", "html_url": "https://github.com/rust-lang/rust/commit/6c18a3d7756cd0522ac4de58abc4470cd9bd7b42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c18a3d7756cd0522ac4de58abc4470cd9bd7b42/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f42f3e108db9390038a93fc95d9376aa871ae34", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f42f3e108db9390038a93fc95d9376aa871ae34", "html_url": "https://github.com/rust-lang/rust/commit/5f42f3e108db9390038a93fc95d9376aa871ae34"}, {"sha": "12adc395c375d4ab14d24624a0ccdd519d5a5978", "url": "https://api.github.com/repos/rust-lang/rust/commits/12adc395c375d4ab14d24624a0ccdd519d5a5978", "html_url": "https://github.com/rust-lang/rust/commit/12adc395c375d4ab14d24624a0ccdd519d5a5978"}], "stats": {"total": 228, "additions": 123, "deletions": 105}, "files": [{"sha": "04d924a9aed20732e3fc37f32515a30f2c866b33", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-expected-behavior.rs", "status": "modified", "additions": 2, "deletions": 82, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/6c18a3d7756cd0522ac4de58abc4470cd9bd7b42/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c18a3d7756cd0522ac4de58abc4470cd9bd7b42/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs?ref=6c18a3d7756cd0522ac4de58abc4470cd9bd7b42", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n-// ignore-cloudabi no processes\n-// ignore-emscripten no processes\n-// ignore-sgx no processes\n+// check-run-results\n \n // Tests ensuring that `dbg!(expr)` has the expected run-time behavior.\n // as well as some compile time properties we expect.\n@@ -18,7 +16,7 @@ struct Point<T> {\n #[derive(Debug, PartialEq)]\n struct NoCopy(usize);\n \n-fn test() {\n+fn main() {\n     let a: Unit = dbg!(Unit);\n     let _: Unit = dbg!(a);\n     // We can move `a` because it's Copy.\n@@ -67,81 +65,3 @@ fn test() {\n     assert_eq!((1u8, 2u32, \"Yeah\"), dbg!(1u8, 2u32,\n                                          \"Yeah\",));\n }\n-\n-fn validate_stderr(stderr: Vec<String>) {\n-    assert_eq!(stderr, &[\n-        \":22] Unit = Unit\",\n-\n-        \":23] a = Unit\",\n-\n-        \":29] Point{x: 42, y: 24,} = Point {\",\n-        \"    x: 42,\",\n-        \"    y: 24,\",\n-        \"}\",\n-\n-        \":30] b = Point {\",\n-        \"    x: 42,\",\n-        \"    y: 24,\",\n-        \"}\",\n-\n-        \":38]\",\n-\n-        \":42] &a = NoCopy(\",\n-        \"    1337,\",\n-        \")\",\n-\n-        \":42] dbg!(& a) = NoCopy(\",\n-        \"    1337,\",\n-        \")\",\n-        \":47] f(&42) = 42\",\n-\n-        \"before\",\n-        \":52] { foo += 1; eprintln!(\\\"before\\\"); 7331 } = 7331\",\n-\n-        \":60] (\\\"Yeah\\\",) = (\",\n-        \"    \\\"Yeah\\\",\",\n-        \")\",\n-\n-        \":63] 1 = 1\",\n-        \":63] 2 = 2\",\n-\n-        \":67] 1u8 = 1\",\n-        \":67] 2u32 = 2\",\n-        \":67] \\\"Yeah\\\" = \\\"Yeah\\\"\",\n-    ]);\n-}\n-\n-fn main() {\n-    // The following is a hack to deal with compiletest's inability\n-    // to check the output (to stdout) of run-pass tests.\n-    use std::env;\n-    use std::process::Command;\n-\n-    let mut args = env::args();\n-    let prog = args.next().unwrap();\n-    let child = args.next();\n-    if let Some(\"child\") = child.as_ref().map(|s| &**s) {\n-        // Only run the test if we've been spawned as 'child'\n-        test()\n-    } else {\n-        // This essentially spawns as 'child' to run the tests\n-        // and then it collects output of stderr and checks the output\n-        // against what we expect.\n-        let out = Command::new(&prog).arg(\"child\").output().unwrap();\n-        assert!(out.status.success());\n-        assert!(out.stdout.is_empty());\n-\n-        let stderr = String::from_utf8(out.stderr).unwrap();\n-        let stderr = stderr.lines().map(|mut s| {\n-            if s.starts_with(\"[\") {\n-                // Strip `[` and file path:\n-                s = s.trim_start_matches(\"[\");\n-                assert!(s.starts_with(file!()));\n-                s = s.trim_start_matches(file!());\n-            }\n-            s.to_owned()\n-        }).collect();\n-\n-        validate_stderr(stderr);\n-    }\n-}"}, {"sha": "707b38cf37af0f3bd1796c4aa858ebdf0aaaeea4", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-expected-behavior.run.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6c18a3d7756cd0522ac4de58abc4470cd9bd7b42/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c18a3d7756cd0522ac4de58abc4470cd9bd7b42/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.run.stderr?ref=6c18a3d7756cd0522ac4de58abc4470cd9bd7b42", "patch": "@@ -0,0 +1,28 @@\n+[$DIR/dbg-macro-expected-behavior.rs:20] Unit = Unit\n+[$DIR/dbg-macro-expected-behavior.rs:21] a = Unit\n+[$DIR/dbg-macro-expected-behavior.rs:27] Point{x: 42, y: 24,} = Point {\n+    x: 42,\n+    y: 24,\n+}\n+[$DIR/dbg-macro-expected-behavior.rs:28] b = Point {\n+    x: 42,\n+    y: 24,\n+}\n+[$DIR/dbg-macro-expected-behavior.rs:36]\n+[$DIR/dbg-macro-expected-behavior.rs:40] &a = NoCopy(\n+    1337,\n+)\n+[$DIR/dbg-macro-expected-behavior.rs:40] dbg!(& a) = NoCopy(\n+    1337,\n+)\n+[$DIR/dbg-macro-expected-behavior.rs:45] f(&42) = 42\n+before\n+[$DIR/dbg-macro-expected-behavior.rs:50] { foo += 1; eprintln!(\"before\"); 7331 } = 7331\n+[$DIR/dbg-macro-expected-behavior.rs:58] (\"Yeah\",) = (\n+    \"Yeah\",\n+)\n+[$DIR/dbg-macro-expected-behavior.rs:61] 1 = 1\n+[$DIR/dbg-macro-expected-behavior.rs:61] 2 = 2\n+[$DIR/dbg-macro-expected-behavior.rs:65] 1u8 = 1\n+[$DIR/dbg-macro-expected-behavior.rs:65] 2u32 = 2\n+[$DIR/dbg-macro-expected-behavior.rs:65] \"Yeah\" = \"Yeah\""}, {"sha": "edb9eb7d860e2da24a80125063b49056c29a3c3c", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c18a3d7756cd0522ac4de58abc4470cd9bd7b42/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c18a3d7756cd0522ac4de58abc4470cd9bd7b42/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=6c18a3d7756cd0522ac4de58abc4470cd9bd7b42", "patch": "@@ -333,10 +333,12 @@ pub fn expected_output_path(\n     testpaths.file.with_extension(extension)\n }\n \n-pub const UI_EXTENSIONS: &[&str] = &[UI_STDERR, UI_STDOUT, UI_FIXED];\n+pub const UI_EXTENSIONS: &[&str] = &[UI_STDERR, UI_STDOUT, UI_FIXED, UI_RUN_STDERR, UI_RUN_STDOUT];\n pub const UI_STDERR: &str = \"stderr\";\n pub const UI_STDOUT: &str = \"stdout\";\n pub const UI_FIXED: &str = \"fixed\";\n+pub const UI_RUN_STDERR: &str = \"run.stderr\";\n+pub const UI_RUN_STDOUT: &str = \"run.stdout\";\n \n /// Absolute path to the directory where all output for all tests in the given\n /// `relative_dir` group should reside. Example:"}, {"sha": "3ba8cffe2b559e7676bc20b3177f6995b4831a90", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6c18a3d7756cd0522ac4de58abc4470cd9bd7b42/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c18a3d7756cd0522ac4de58abc4470cd9bd7b42/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=6c18a3d7756cd0522ac4de58abc4470cd9bd7b42", "patch": "@@ -137,6 +137,11 @@ impl EarlyProps {\n                    config.parse_needs_sanitizer_support(ln) {\n                     props.ignore = Ignore::Ignore;\n                 }\n+\n+                if config.target == \"wasm32-unknown-unknown\" && config.parse_check_run_results(ln) {\n+                    props.ignore = Ignore::Ignore;\n+                }\n+\n             }\n \n             if (config.mode == common::DebugInfoGdb || config.mode == common::DebugInfoGdbLldb) &&\n@@ -326,6 +331,8 @@ pub struct TestProps {\n     pub force_host: bool,\n     // Check stdout for error-pattern output as well as stderr\n     pub check_stdout: bool,\n+    // Check stdout & stderr for output of run-pass test\n+    pub check_run_results: bool,\n     // For UI tests, allows compiler to generate arbitrary output to stdout\n     pub dont_check_compiler_stdout: bool,\n     // For UI tests, allows compiler to generate arbitrary output to stderr\n@@ -388,6 +395,7 @@ impl TestProps {\n             build_aux_docs: false,\n             force_host: false,\n             check_stdout: false,\n+            check_run_results: false,\n             dont_check_compiler_stdout: false,\n             dont_check_compiler_stderr: false,\n             no_prefer_dynamic: false,\n@@ -468,6 +476,10 @@ impl TestProps {\n                 self.check_stdout = config.parse_check_stdout(ln);\n             }\n \n+            if !self.check_run_results {\n+                self.check_run_results = config.parse_check_run_results(ln);\n+            }\n+\n             if !self.dont_check_compiler_stdout {\n                 self.dont_check_compiler_stdout = config.parse_dont_check_compiler_stdout(ln);\n             }\n@@ -712,6 +724,10 @@ impl Config {\n         self.parse_name_directive(line, \"check-stdout\")\n     }\n \n+    fn parse_check_run_results(&self, line: &str) -> bool {\n+        self.parse_name_directive(line, \"check-run-results\")\n+    }\n+\n     fn parse_dont_check_compiler_stdout(&self, line: &str) -> bool {\n         self.parse_name_directive(line, \"dont-check-compiler-stdout\")\n     }"}, {"sha": "11e6b06d55363107a7939967b178f549b36a74a2", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 74, "deletions": 22, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/6c18a3d7756cd0522ac4de58abc4470cd9bd7b42/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c18a3d7756cd0522ac4de58abc4470cd9bd7b42/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=6c18a3d7756cd0522ac4de58abc4470cd9bd7b42", "patch": "@@ -2,6 +2,7 @@\n \n use crate::common::{CompareMode, PassMode};\n use crate::common::{expected_output_path, UI_EXTENSIONS, UI_FIXED, UI_STDERR, UI_STDOUT};\n+use crate::common::{UI_RUN_STDERR, UI_RUN_STDOUT};\n use crate::common::{output_base_dir, output_base_name, output_testname_unique};\n use crate::common::{Codegen, CodegenUnits, Rustdoc};\n use crate::common::{DebugInfoCdb, DebugInfoGdbLldb, DebugInfoGdb, DebugInfoLldb};\n@@ -288,6 +289,11 @@ enum ReadFrom {\n     Stdin(String),\n }\n \n+enum TestOutput {\n+    Compile,\n+    Run,\n+}\n+\n impl<'test> TestCx<'test> {\n     /// Code executed for each revision in turn (or, if there are no\n     /// revisions, exactly once, with revision == None).\n@@ -2930,6 +2936,61 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n+    fn load_compare_outputs(&self, proc_res: &ProcRes,\n+        output_kind: TestOutput, explicit_format: bool) -> usize {\n+\n+        let (stderr_kind, stdout_kind) = match output_kind {\n+            TestOutput::Compile => (UI_STDERR, UI_STDOUT),\n+            TestOutput::Run => (UI_RUN_STDERR, UI_RUN_STDOUT)\n+        };\n+\n+        let expected_stderr = self.load_expected_output(stderr_kind);\n+        let expected_stdout = self.load_expected_output(stdout_kind);\n+\n+        let normalized_stdout = match output_kind {\n+            TestOutput::Run if self.config.remote_test_client.is_some() => {\n+                // When tests are run using the remote-test-client, the string\n+                // 'uploaded \"$TEST_BUILD_DIR/<test_executable>, waiting for result\"'\n+                // is printed to stdout by the client and then captured in the ProcRes,\n+                // so it needs to be removed when comparing the run-pass test execution output\n+                lazy_static! {\n+                    static ref REMOTE_TEST_RE: Regex = Regex::new(\n+                        \"^uploaded \\\"\\\\$TEST_BUILD_DIR(/[[:alnum:]_\\\\-]+)+\\\", waiting for result\\n\"\n+                    ).unwrap();\n+                }\n+                REMOTE_TEST_RE.replace(\n+                    &self.normalize_output(&proc_res.stdout, &self.props.normalize_stdout),\n+                    \"\"\n+                ).to_string()\n+            }\n+            _ => self.normalize_output(&proc_res.stdout, &self.props.normalize_stdout)\n+        };\n+\n+        let stderr = if explicit_format {\n+            proc_res.stderr.clone()\n+        } else {\n+            json::extract_rendered(&proc_res.stderr)\n+        };\n+\n+        let normalized_stderr = self.normalize_output(&stderr, &self.props.normalize_stderr);\n+        let mut errors = 0;\n+        match output_kind {\n+            TestOutput::Compile => {\n+                if !self.props.dont_check_compiler_stdout {\n+                    errors += self.compare_output(\"stdout\", &normalized_stdout, &expected_stdout);\n+                }\n+                if !self.props.dont_check_compiler_stderr {\n+                    errors += self.compare_output(\"stderr\", &normalized_stderr, &expected_stderr);\n+                }\n+            }\n+            TestOutput::Run => {\n+                errors += self.compare_output(stdout_kind, &normalized_stdout, &expected_stdout);\n+                errors += self.compare_output(stderr_kind, &normalized_stderr, &expected_stderr);\n+            }\n+        }\n+        errors\n+    }\n+\n     fn run_ui_test(&self) {\n         // if the user specified a format in the ui test\n         // print the output to the stderr file, otherwise extract\n@@ -2942,32 +3003,13 @@ impl<'test> TestCx<'test> {\n         let proc_res = self.compile_test();\n         self.check_if_test_should_compile(&proc_res);\n \n-        let expected_stderr = self.load_expected_output(UI_STDERR);\n-        let expected_stdout = self.load_expected_output(UI_STDOUT);\n         let expected_fixed = self.load_expected_output(UI_FIXED);\n \n-        let normalized_stdout =\n-            self.normalize_output(&proc_res.stdout, &self.props.normalize_stdout);\n-\n-        let stderr = if explicit {\n-            proc_res.stderr.clone()\n-        } else {\n-            json::extract_rendered(&proc_res.stderr)\n-        };\n-\n-        let normalized_stderr = self.normalize_output(&stderr, &self.props.normalize_stderr);\n-\n-        let mut errors = 0;\n-        if !self.props.dont_check_compiler_stdout {\n-            errors += self.compare_output(\"stdout\", &normalized_stdout, &expected_stdout);\n-        }\n-        if !self.props.dont_check_compiler_stderr {\n-            errors += self.compare_output(\"stderr\", &normalized_stderr, &expected_stderr);\n-        }\n-\n         let modes_to_prune = vec![CompareMode::Nll];\n         self.prune_duplicate_outputs(&modes_to_prune);\n \n+        let mut errors = self.load_compare_outputs(&proc_res, TestOutput::Compile, explicit);\n+\n         if self.config.compare_mode.is_some() {\n             // don't test rustfix with nll right now\n         } else if self.config.rustfix_coverage {\n@@ -3045,7 +3087,17 @@ impl<'test> TestCx<'test> {\n \n         if self.should_run_successfully() {\n             let proc_res = self.exec_compiled_test();\n-\n+            let run_output_errors = if self.props.check_run_results {\n+                self.load_compare_outputs(&proc_res, TestOutput::Run, explicit)\n+            } else {\n+                0\n+            };\n+            if run_output_errors > 0 {\n+                self.fatal_proc_rec(\n+                    &format!(\"{} errors occured comparing run output.\", run_output_errors),\n+                    &proc_res,\n+                );\n+            }\n             if !proc_res.status.success() {\n                 self.fatal_proc_rec(\"test run failed!\", &proc_res);\n             }"}]}