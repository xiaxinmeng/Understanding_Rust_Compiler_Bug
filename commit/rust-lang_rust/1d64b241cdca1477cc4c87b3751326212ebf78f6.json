{"sha": "1d64b241cdca1477cc4c87b3751326212ebf78f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkNjRiMjQxY2RjYTE0NzdjYzRjODdiMzc1MTMyNjIxMmViZjc4ZjY=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-07-30T14:39:03Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-08-01T12:48:42Z"}, "message": "Switch syntax attribute tracking to BitVector", "tree": {"sha": "2a77cf6735bd3bac9ae6b21ff6c5ff2d0366ff17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a77cf6735bd3bac9ae6b21ff6c5ff2d0366ff17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d64b241cdca1477cc4c87b3751326212ebf78f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d64b241cdca1477cc4c87b3751326212ebf78f6", "html_url": "https://github.com/rust-lang/rust/commit/1d64b241cdca1477cc4c87b3751326212ebf78f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d64b241cdca1477cc4c87b3751326212ebf78f6/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c069ceba81a0fffc1ce95aaf7e8339e11bf2796", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c069ceba81a0fffc1ce95aaf7e8339e11bf2796", "html_url": "https://github.com/rust-lang/rust/commit/8c069ceba81a0fffc1ce95aaf7e8339e11bf2796"}], "stats": {"total": 56, "additions": 23, "deletions": 33}, "files": [{"sha": "28c1e4324de7a3070c90f2c4cce5a694dc3ce2e8", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1d64b241cdca1477cc4c87b3751326212ebf78f6/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d64b241cdca1477cc4c87b3751326212ebf78f6/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1d64b241cdca1477cc4c87b3751326212ebf78f6", "patch": "@@ -23,6 +23,7 @@ use ext::hygiene::{Mark, SyntaxContext};\n use print::pprust;\n use ptr::P;\n use rustc_data_structures::indexed_vec;\n+use rustc_data_structures::indexed_vec::Idx;\n use symbol::{Symbol, keywords};\n use tokenstream::{ThinTokenStream, TokenStream};\n \n@@ -1910,9 +1911,18 @@ pub enum AttrStyle {\n     Inner,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, PartialOrd, Ord, Copy)]\n pub struct AttrId(pub usize);\n \n+impl Idx for AttrId {\n+    fn new(idx: usize) -> Self {\n+        AttrId(idx)\n+    }\n+    fn index(self) -> usize {\n+        self.0\n+    }\n+}\n+\n /// Meta-data associated with an item\n /// Doc-comments are promoted to attributes that have is_sugared_doc = true\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]"}, {"sha": "7fbc5d4c41a50929331da18fe4a386efb7c49cb5", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1d64b241cdca1477cc4c87b3751326212ebf78f6/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d64b241cdca1477cc4c87b3751326212ebf78f6/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=1d64b241cdca1477cc4c87b3751326212ebf78f6", "patch": "@@ -41,51 +41,27 @@ use std::iter;\n \n pub fn mark_used(attr: &Attribute) {\n     debug!(\"Marking {:?} as used.\", attr);\n-    let AttrId(id) = attr.id;\n     GLOBALS.with(|globals| {\n-        let mut slot = globals.used_attrs.lock();\n-        let idx = (id / 64) as usize;\n-        let shift = id % 64;\n-        if slot.len() <= idx {\n-            slot.resize(idx + 1, 0);\n-        }\n-        slot[idx] |= 1 << shift;\n+        globals.used_attrs.lock().insert(attr.id);\n     });\n }\n \n pub fn is_used(attr: &Attribute) -> bool {\n-    let AttrId(id) = attr.id;\n     GLOBALS.with(|globals| {\n-        let slot = globals.used_attrs.lock();\n-        let idx = (id / 64) as usize;\n-        let shift = id % 64;\n-        slot.get(idx).map(|bits| bits & (1 << shift) != 0)\n-            .unwrap_or(false)\n+        globals.used_attrs.lock().contains(attr.id)\n     })\n }\n \n pub fn mark_known(attr: &Attribute) {\n     debug!(\"Marking {:?} as known.\", attr);\n-    let AttrId(id) = attr.id;\n     GLOBALS.with(|globals| {\n-        let mut slot = globals.known_attrs.lock();\n-        let idx = (id / 64) as usize;\n-        let shift = id % 64;\n-        if slot.len() <= idx {\n-            slot.resize(idx + 1, 0);\n-        }\n-        slot[idx] |= 1 << shift;\n+        globals.known_attrs.lock().insert(attr.id);\n     });\n }\n \n pub fn is_known(attr: &Attribute) -> bool {\n-    let AttrId(id) = attr.id;\n     GLOBALS.with(|globals| {\n-        let slot = globals.known_attrs.lock();\n-        let idx = (id / 64) as usize;\n-        let shift = id % 64;\n-        slot.get(idx).map(|bits| bits & (1 << shift) != 0)\n-            .unwrap_or(false)\n+        globals.known_attrs.lock().contains(attr.id)\n     })\n }\n "}, {"sha": "16507ec5a5dd53856af13c0aac665948527ec2cb", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1d64b241cdca1477cc4c87b3751326212ebf78f6/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d64b241cdca1477cc4c87b3751326212ebf78f6/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=1d64b241cdca1477cc4c87b3751326212ebf78f6", "patch": "@@ -43,6 +43,8 @@ extern crate rustc_target;\n extern crate serialize as rustc_serialize; // used by deriving\n \n use rustc_data_structures::sync::Lock;\n+use rustc_data_structures::bitvec::BitVector;\n+use ast::AttrId;\n \n // A variant of 'try!' that panics on an Err. This is used as a crutch on the\n // way towards a non-panic!-prone parser. It should be used for fatal parsing\n@@ -75,16 +77,18 @@ macro_rules! unwrap_or {\n }\n \n pub struct Globals {\n-    used_attrs: Lock<Vec<u64>>,\n-    known_attrs: Lock<Vec<u64>>,\n+    used_attrs: Lock<BitVector<AttrId>>,\n+    known_attrs: Lock<BitVector<AttrId>>,\n     syntax_pos_globals: syntax_pos::Globals,\n }\n \n impl Globals {\n     fn new() -> Globals {\n         Globals {\n-            used_attrs: Lock::new(Vec::new()),\n-            known_attrs: Lock::new(Vec::new()),\n+            // We have no idea how many attributes their will be, so just\n+            // initiate the vectors with 0 bits. We'll grow them as necessary.\n+            used_attrs: Lock::new(BitVector::new(0)),\n+            known_attrs: Lock::new(BitVector::new(0)),\n             syntax_pos_globals: syntax_pos::Globals::new(),\n         }\n     }"}]}