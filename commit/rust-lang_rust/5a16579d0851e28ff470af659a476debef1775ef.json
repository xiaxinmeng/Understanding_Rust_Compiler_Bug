{"sha": "5a16579d0851e28ff470af659a476debef1775ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMTY1NzlkMDg1MWUyOGZmNDcwYWY2NTlhNDc2ZGViZWYxNzc1ZWY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-26T15:10:06Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-26T15:10:06Z"}, "message": "Rollup merge of #55383 - nnethercote:coerce_unsized-SmallVec, r=davidtwco\n\nUse `SmallVec` for the queue in `coerce_unsized`.\n\nThis reduces the number of allocations done for the `tuple-stress`\nbenchmark by 4%.", "tree": {"sha": "adc28c1b3e7a8e462ebb4bd9ca0a9752cf821838", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adc28c1b3e7a8e462ebb4bd9ca0a9752cf821838"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a16579d0851e28ff470af659a476debef1775ef", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlvTLk8ACgkQ/vbIBR0O\nATzY+hAAt1o0ix2ja3IRWLf8T5S5y2y1N+bq0IObbIpCS34/iAvhLgdJqS4V0p9N\nlHKIwmn9aPc/80zE2P5SySEYCQvA86Ns/rlkdT571dm6S1/wIq1uPIwcf0daiNfP\nPsdoFKUuvxJrKKY19w0PuYzBCDYKWyE1vvvTOlXmYMxBGT7c/v+L8HwI/rVkmKQJ\n6nh8wiWjrqANbBrmpIMUXd4Gc1ns4CE2fedSjujXP0Pv76MN8wrK7FP7ri55KHGQ\nBdnIsoYKqVg2goqNFF4By2vY5SjJKCae4hAM+mZPHxbBbk9XZtob2TGu1vcH3r/o\nfYnDpvRpMoelFa6Ie/7zypVNGJ8gxRCttEQ4IHDHbRXhu8yYjnjGZuBYPLbnDXWU\nFUD4NYC7EsIMI5ZMImOV0zQ6QKG4p7wULSUIQ6UaSuhKznKe9TONwqDrPrG7Zf6T\n0hAgOEtigDjP6ZqH75FGBW9Tc7ZxovAKczy3kKSXHwnS6tEyylE+kPAamEmJ8nZq\nD2Imh6Q/mPtsQm4bd5Ph5bOqZONb5zY+YS8vJb9OznDypPOKDia3Hbx+06Qq/yeJ\nkxD7yRI0xStMwMi8rKd5dL/PE7XzSK7+zhdjG+NgQTDoOzr3EN5NNbg3uwD1bcS2\ns4kMkFk3rXjLmtTQs9IGXKHs6AJUVPtOEhmOp0bGc7B2/KP2w1Q=\n=kxZu\n-----END PGP SIGNATURE-----", "payload": "tree adc28c1b3e7a8e462ebb4bd9ca0a9752cf821838\nparent 5572f2df7f62a49d47e6609d990d4b4fa072bbcb\nparent 526dc1421b48e3ee8357d58d997e7a0f4bb26915\nauthor kennytm <kennytm@gmail.com> 1540566606 +0800\ncommitter kennytm <kennytm@gmail.com> 1540566606 +0800\n\nRollup merge of #55383 - nnethercote:coerce_unsized-SmallVec, r=davidtwco\n\nUse `SmallVec` for the queue in `coerce_unsized`.\n\nThis reduces the number of allocations done for the `tuple-stress`\nbenchmark by 4%.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a16579d0851e28ff470af659a476debef1775ef", "html_url": "https://github.com/rust-lang/rust/commit/5a16579d0851e28ff470af659a476debef1775ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a16579d0851e28ff470af659a476debef1775ef/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5572f2df7f62a49d47e6609d990d4b4fa072bbcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5572f2df7f62a49d47e6609d990d4b4fa072bbcb", "html_url": "https://github.com/rust-lang/rust/commit/5572f2df7f62a49d47e6609d990d4b4fa072bbcb"}, {"sha": "526dc1421b48e3ee8357d58d997e7a0f4bb26915", "url": "https://api.github.com/repos/rust-lang/rust/commits/526dc1421b48e3ee8357d58d997e7a0f4bb26915", "html_url": "https://github.com/rust-lang/rust/commit/526dc1421b48e3ee8357d58d997e7a0f4bb26915"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "3bdd038bff19c2560f81b3d64ce9368a5db95b76", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5a16579d0851e28ff470af659a476debef1775ef/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a16579d0851e28ff470af659a476debef1775ef/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=5a16579d0851e28ff470af659a476debef1775ef", "patch": "@@ -61,7 +61,7 @@\n //! we may want to adjust precisely when coercions occur.\n \n use check::{FnCtxt, Needs};\n-\n+use errors::DiagnosticBuilder;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::infer::{Coercion, InferResult, InferOk};\n@@ -72,14 +72,12 @@ use rustc::ty::{self, TypeAndMut, Ty, ClosureSubsts};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::error::TypeError;\n use rustc::ty::relate::RelateResult;\n-use errors::DiagnosticBuilder;\n+use smallvec::{smallvec, SmallVec};\n+use std::ops::Deref;\n use syntax::feature_gate;\n use syntax::ptr::P;\n use syntax_pos;\n \n-use std::collections::VecDeque;\n-use std::ops::Deref;\n-\n struct Coerce<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     fcx: &'a FnCtxt<'a, 'gcx, 'tcx>,\n     cause: ObligationCause<'tcx>,\n@@ -536,26 +534,32 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n \n         let mut selcx = traits::SelectionContext::new(self);\n \n-        // Use a FIFO queue for this custom fulfillment procedure. (The maximum\n-        // length is almost always 1.)\n-        let mut queue = VecDeque::with_capacity(1);\n-\n         // Create an obligation for `Source: CoerceUnsized<Target>`.\n         let cause = ObligationCause::misc(self.cause.span, self.body_id);\n-        queue.push_back(self.tcx.predicate_for_trait_def(self.fcx.param_env,\n-                                                         cause,\n-                                                         coerce_unsized_did,\n-                                                         0,\n-                                                         coerce_source,\n-                                                         &[coerce_target.into()]));\n+\n+        // Use a FIFO queue for this custom fulfillment procedure.\n+        //\n+        // A Vec (or SmallVec) is not a natural choice for a queue. However,\n+        // this code path is hot, and this queue usually has a max length of 1\n+        // and almost never more than 3. By using a SmallVec we avoid an\n+        // allocation, at the (very small) cost of (occasionally) having to\n+        // shift subsequent elements down when removing the front element.\n+        let mut queue: SmallVec<[_; 4]> =\n+            smallvec![self.tcx.predicate_for_trait_def(self.fcx.param_env,\n+                                                       cause,\n+                                                       coerce_unsized_did,\n+                                                       0,\n+                                                       coerce_source,\n+                                                       &[coerce_target.into()])];\n \n         let mut has_unsized_tuple_coercion = false;\n \n         // Keep resolving `CoerceUnsized` and `Unsize` predicates to avoid\n         // emitting a coercion in cases like `Foo<$1>` -> `Foo<$2>`, where\n         // inference might unify those two inner type variables later.\n         let traits = [coerce_unsized_did, unsize_did];\n-        while let Some(obligation) = queue.pop_front() {\n+        while !queue.is_empty() {\n+            let obligation = queue.remove(0);\n             debug!(\"coerce_unsized resolve step: {:?}\", obligation);\n             let trait_ref = match obligation.predicate {\n                 ty::Predicate::Trait(ref tr) if traits.contains(&tr.def_id()) => {"}]}