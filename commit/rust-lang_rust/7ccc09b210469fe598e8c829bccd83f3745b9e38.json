{"sha": "7ccc09b210469fe598e8c829bccd83f3745b9e38", "node_id": "C_kwDOAAsO6NoAKDdjY2MwOWIyMTA0NjlmZTU5OGU4YzgyOWJjY2Q4M2YzNzQ1YjllMzg", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2022-02-14T19:05:45Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2022-05-13T16:03:06Z"}, "message": "Extend ptr::null and null_mut to all thin (including extern) types\n\nFixes https://github.com/rust-lang/rust/issues/93959\n\nThis change was accepted in https://rust-lang.github.io/rfcs/2580-ptr-meta.html\n\nNote that this changes the signature of **stable** functions.\nThe change should be backward-compatible, but it is **insta-stable**\nsince it cannot (easily, at all?) be made available only\nthrough a `#![feature(\u2026)]` opt-in.\n\nThe RFC also proposed the same change for `NonNull::dangling`,\nwhich makes sense it terms of its signature but not in terms of its implementation.\n`dangling` uses `align_of()` as an address. But what `align_of()` should be for\nextern types or whether it should be allowed at all remains an open question.\n\nThis commit depends on https://github.com/rust-lang/rust/pull/93977, which is not yet\npart of the bootstrap compiler. So `#[cfg]` is used to only apply the change in\nstage 1+. As far a I know bounds cannot be made conditional with `#[cfg]`, so the\nentire functions are duplicated. This is unfortunate but temporary.\n\nSince this duplication makes it less obvious in the diff,\nthe new definitions differ in:\n\n* More permissive bounds (`Thin` instead of implied `Sized`)\n* Different implementation\n* Having `rustc_allow_const_fn_unstable(ptr_metadata)`", "tree": {"sha": "245f40054a79777e0f4bf8bb6ec7c4914a2cbc18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/245f40054a79777e0f4bf8bb6ec7c4914a2cbc18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ccc09b210469fe598e8c829bccd83f3745b9e38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ccc09b210469fe598e8c829bccd83f3745b9e38", "html_url": "https://github.com/rust-lang/rust/commit/7ccc09b210469fe598e8c829bccd83f3745b9e38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ccc09b210469fe598e8c829bccd83f3745b9e38/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c80ac003b59a2e708f127a721904e92ea51d0b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c80ac003b59a2e708f127a721904e92ea51d0b9", "html_url": "https://github.com/rust-lang/rust/commit/1c80ac003b59a2e708f127a721904e92ea51d0b9"}], "stats": {"total": 60, "additions": 59, "deletions": 1}, "files": [{"sha": "0658ed812d1a68be7f56b2f196cf245c21bd1bb9", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7ccc09b210469fe598e8c829bccd83f3745b9e38/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ccc09b210469fe598e8c829bccd83f3745b9e38/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=7ccc09b210469fe598e8c829bccd83f3745b9e38", "patch": "@@ -507,10 +507,33 @@ pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n #[rustc_promotable]\n #[rustc_const_stable(feature = \"const_ptr_null\", since = \"1.24.0\")]\n #[rustc_diagnostic_item = \"ptr_null\"]\n+#[cfg(bootstrap)]\n pub const fn null<T>() -> *const T {\n     invalid(0)\n }\n \n+/// Creates a null raw pointer.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::ptr;\n+///\n+/// let p: *const i32 = ptr::null();\n+/// assert!(p.is_null());\n+/// ```\n+#[inline(always)]\n+#[must_use]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_promotable]\n+#[rustc_const_stable(feature = \"const_ptr_null\", since = \"1.24.0\")]\n+#[rustc_allow_const_fn_unstable(ptr_metadata)]\n+#[rustc_diagnostic_item = \"ptr_null\"]\n+#[cfg(not(bootstrap))]\n+pub const fn null<T: ?Sized + Thin>() -> *const T {\n+    from_raw_parts(0 as *const (), ())\n+}\n+\n /// Creates a null mutable raw pointer.\n ///\n /// # Examples\n@@ -527,6 +550,7 @@ pub const fn null<T>() -> *const T {\n #[rustc_promotable]\n #[rustc_const_stable(feature = \"const_ptr_null\", since = \"1.24.0\")]\n #[rustc_diagnostic_item = \"ptr_null_mut\"]\n+#[cfg(bootstrap)]\n pub const fn null_mut<T>() -> *mut T {\n     invalid_mut(0)\n }\n@@ -657,6 +681,28 @@ where\n     addr as *mut T\n }\n \n+/// Creates a null mutable raw pointer.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::ptr;\n+///\n+/// let p: *mut i32 = ptr::null_mut();\n+/// assert!(p.is_null());\n+/// ```\n+#[inline(always)]\n+#[must_use]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_promotable]\n+#[rustc_const_stable(feature = \"const_ptr_null\", since = \"1.24.0\")]\n+#[rustc_allow_const_fn_unstable(ptr_metadata)]\n+#[rustc_diagnostic_item = \"ptr_null_mut\"]\n+#[cfg(not(bootstrap))]\n+pub const fn null_mut<T: ?Sized + Thin>() -> *mut T {\n+    from_raw_parts_mut(0 as *mut (), ())\n+}\n+\n /// Forms a raw slice from a pointer and a length.\n ///\n /// The `len` argument is the number of **elements**, not the number of bytes."}, {"sha": "c5242ad04de84b44282e86599dc2800c8fc8375d", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ccc09b210469fe598e8c829bccd83f3745b9e38/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ccc09b210469fe598e8c829bccd83f3745b9e38/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=7ccc09b210469fe598e8c829bccd83f3745b9e38", "patch": "@@ -93,6 +93,18 @@ fn test_is_null() {\n \n     let nmi: *mut dyn ToString = null_mut::<isize>();\n     assert!(nmi.is_null());\n+\n+    #[cfg(not(bootstrap))]\n+    {\n+        extern \"C\" {\n+            type Extern;\n+        }\n+        let ec: *const Extern = null::<Extern>();\n+        assert!(ec.is_null());\n+\n+        let em: *mut Extern = null_mut::<Extern>();\n+        assert!(em.is_null());\n+    }\n }\n \n #[test]"}, {"sha": "a2205b718c1ca31579578a1636f0b2836a16d093", "filename": "src/test/ui/cast/casts-issue-46365.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ccc09b210469fe598e8c829bccd83f3745b9e38/src%2Ftest%2Fui%2Fcast%2Fcasts-issue-46365.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ccc09b210469fe598e8c829bccd83f3745b9e38/src%2Ftest%2Fui%2Fcast%2Fcasts-issue-46365.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcasts-issue-46365.rs?ref=7ccc09b210469fe598e8c829bccd83f3745b9e38", "patch": "@@ -3,5 +3,5 @@ struct Lorem {\n }\n \n fn main() {\n-    let _foo: *mut Lorem = core::ptr::null_mut(); // no error here\n+    let _foo: *mut Lorem = core::ptr::NonNull::dangling().as_ptr(); // no error here\n }"}]}