{"sha": "af133382f20b2e506b9e14b93e714fb76c7f6902", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMTMzMzgyZjIwYjJlNTA2YjllMTRiOTNlNzE0ZmI3NmM3ZjY5MDI=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-09-02T20:41:36Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-09-03T19:16:53Z"}, "message": "Check test/example/benchmark on x.py check\n\nOften when modifying compiler code you'll miss that you've changed an API used\nby unit tests, since x.py check didn't previously catch that.\n\nIt's also useful to have this for editing with rust-analyzer and similar tooling\nwhere editing tests previously didn't notify you of errors in test files.", "tree": {"sha": "8963bcdb0547c8543a4336887fc64dec30d53c89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8963bcdb0547c8543a4336887fc64dec30d53c89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af133382f20b2e506b9e14b93e714fb76c7f6902", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af133382f20b2e506b9e14b93e714fb76c7f6902", "html_url": "https://github.com/rust-lang/rust/commit/af133382f20b2e506b9e14b93e714fb76c7f6902", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af133382f20b2e506b9e14b93e714fb76c7f6902/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22769917b0c55786540f2445c6e04fa95fe82c2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/22769917b0c55786540f2445c6e04fa95fe82c2f", "html_url": "https://github.com/rust-lang/rust/commit/22769917b0c55786540f2445c6e04fa95fe82c2f"}], "stats": {"total": 63, "additions": 61, "deletions": 2}, "files": [{"sha": "4708b207156c97b3e71646a534f02f02553557a2", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af133382f20b2e506b9e14b93e714fb76c7f6902/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af133382f20b2e506b9e14b93e714fb76c7f6902/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=af133382f20b2e506b9e14b93e714fb76c7f6902", "patch": "@@ -382,7 +382,7 @@ impl<'a> Builder<'a> {\n                 native::Lld\n             ),\n             Kind::Check | Kind::Clippy | Kind::Fix | Kind::Format => {\n-                describe!(check::Std, check::Rustc, check::Rustdoc, check::Clippy)\n+                describe!(check::Std, check::Rustc, check::Rustdoc, check::Clippy, check::Bootstrap)\n             }\n             Kind::Test => describe!(\n                 crate::toolstate::ToolStateCheck,"}, {"sha": "ead0bd0413b9c168f6e0e44a5c5d8cde561081df", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 60, "deletions": 1, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/af133382f20b2e506b9e14b93e714fb76c7f6902/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af133382f20b2e506b9e14b93e714fb76c7f6902/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=af133382f20b2e506b9e14b93e714fb76c7f6902", "patch": "@@ -66,6 +66,43 @@ impl Step for Std {\n         let libdir = builder.sysroot_libdir(compiler, target);\n         let hostdir = builder.sysroot_libdir(compiler, compiler.host);\n         add_to_sysroot(&builder, &libdir, &hostdir, &libstd_stamp(builder, compiler, target));\n+\n+        // Then run cargo again, once we've put the rmeta files for the library\n+        // crates into the sysroot. This is needed because e.g., core's tests\n+        // depend on `libtest` -- Cargo presumes it will exist, but it doesn't\n+        // since we initialize with an empty sysroot.\n+        //\n+        // Currently only the \"libtest\" tree of crates does this.\n+\n+        let mut cargo = builder.cargo(\n+            compiler,\n+            Mode::Std,\n+            SourceType::InTree,\n+            target,\n+            cargo_subcommand(builder.kind),\n+        );\n+        std_cargo(builder, target, compiler.stage, &mut cargo);\n+        cargo.arg(\"--all-targets\");\n+\n+        // Explicitly pass -p for all dependencies krates -- this will force cargo\n+        // to also check the tests/benches/examples for these crates, rather\n+        // than just the leaf crate.\n+        for krate in builder.in_tree_crates(\"test\") {\n+            cargo.arg(\"-p\").arg(krate.name);\n+        }\n+\n+        builder.info(&format!(\n+            \"Checking std test/bench/example targets ({} -> {})\",\n+            &compiler.host, target\n+        ));\n+        run_cargo(\n+            builder,\n+            cargo,\n+            args(builder.kind),\n+            &libstd_test_stamp(builder, compiler, target),\n+            vec![],\n+            true,\n+        );\n     }\n }\n \n@@ -106,6 +143,14 @@ impl Step for Rustc {\n             cargo_subcommand(builder.kind),\n         );\n         rustc_cargo(builder, &mut cargo, target);\n+        cargo.arg(\"--all-targets\");\n+\n+        // Explicitly pass -p for all compiler krates -- this will force cargo\n+        // to also check the tests/benches/examples for these crates, rather\n+        // than just the leaf crate.\n+        for krate in builder.in_tree_crates(\"rustc-main\") {\n+            cargo.arg(\"-p\").arg(krate.name);\n+        }\n \n         builder.info(&format!(\"Checking compiler artifacts ({} -> {})\", &compiler.host, target));\n         run_cargo(\n@@ -149,7 +194,7 @@ macro_rules! tool_check_step {\n \n                 builder.ensure(Rustc { target });\n \n-                let cargo = prepare_tool_cargo(\n+                let mut cargo = prepare_tool_cargo(\n                     builder,\n                     compiler,\n                     Mode::ToolRustc,\n@@ -160,6 +205,8 @@ macro_rules! tool_check_step {\n                     &[],\n                 );\n \n+                cargo.arg(\"--all-targets\");\n+\n                 builder.info(&format!(\n                     \"Checking {} artifacts ({} -> {})\",\n                     stringify!($name).to_lowercase(),\n@@ -202,12 +249,24 @@ tool_check_step!(Rustdoc, \"src/tools/rustdoc\", SourceType::InTree);\n // rejected.\n tool_check_step!(Clippy, \"src/tools/clippy\", SourceType::InTree);\n \n+tool_check_step!(Bootstrap, \"src/bootstrap\", SourceType::InTree);\n+\n /// Cargo's output path for the standard library in a given stage, compiled\n /// by a particular compiler for the specified target.\n fn libstd_stamp(builder: &Builder<'_>, compiler: Compiler, target: TargetSelection) -> PathBuf {\n     builder.cargo_out(compiler, Mode::Std, target).join(\".libstd-check.stamp\")\n }\n \n+/// Cargo's output path for the standard library in a given stage, compiled\n+/// by a particular compiler for the specified target.\n+fn libstd_test_stamp(\n+    builder: &Builder<'_>,\n+    compiler: Compiler,\n+    target: TargetSelection,\n+) -> PathBuf {\n+    builder.cargo_out(compiler, Mode::Std, target).join(\".libstd-check-test.stamp\")\n+}\n+\n /// Cargo's output path for librustc in a given stage, compiled by a particular\n /// compiler for the specified target.\n fn librustc_stamp(builder: &Builder<'_>, compiler: Compiler, target: TargetSelection) -> PathBuf {"}]}