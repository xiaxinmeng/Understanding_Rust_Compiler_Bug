{"sha": "3ad299aa670face2085d2abec6e8481fa582068a", "node_id": "C_kwDOAAsO6NoAKDNhZDI5OWFhNjcwZmFjZTIwODVkMmFiZWM2ZTg0ODFmYTU4MjA2OGE", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-03-03T11:10:02Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-03-14T15:52:47Z"}, "message": "debuginfo: change cpp-like naming for generator environments so that NatVis works for them", "tree": {"sha": "0e4cceb87c75f145bbc77fda35ddd2713c611ee5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e4cceb87c75f145bbc77fda35ddd2713c611ee5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ad299aa670face2085d2abec6e8481fa582068a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ad299aa670face2085d2abec6e8481fa582068a", "html_url": "https://github.com/rust-lang/rust/commit/3ad299aa670face2085d2abec6e8481fa582068a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ad299aa670face2085d2abec6e8481fa582068a/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07ebc13d87796622bb6e4ac46a7e6a054bc4c680", "url": "https://api.github.com/repos/rust-lang/rust/commits/07ebc13d87796622bb6e4ac46a7e6a054bc4c680", "html_url": "https://github.com/rust-lang/rust/commit/07ebc13d87796622bb6e4ac46a7e6a054bc4c680"}], "stats": {"total": 175, "additions": 125, "deletions": 50}, "files": [{"sha": "ee0658f486a06666cd5359d71a21590dc63fae65", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 92, "deletions": 48, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/3ad299aa670face2085d2abec6e8481fa582068a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ad299aa670face2085d2abec6e8481fa582068a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=3ad299aa670face2085d2abec6e8481fa582068a", "patch": "@@ -16,13 +16,14 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::def_id::DefId;\n use rustc_hir::definitions::{DefPathData, DefPathDataName, DisambiguatedDefPathData};\n use rustc_hir::{AsyncGeneratorKind, GeneratorKind, Mutability};\n-use rustc_middle::ty::layout::IntegerExt;\n+use rustc_middle::ty::layout::{IntegerExt, TyAndLayout};\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n-use rustc_middle::ty::{self, AdtDef, ExistentialProjection, ParamEnv, Ty, TyCtxt};\n+use rustc_middle::ty::{self, ExistentialProjection, GeneratorSubsts, ParamEnv, Ty, TyCtxt};\n use rustc_query_system::ich::NodeIdHashingMode;\n use rustc_target::abi::{Integer, TagEncoding, Variants};\n use smallvec::SmallVec;\n \n+use std::borrow::Cow;\n use std::fmt::Write;\n \n use crate::debuginfo::wants_c_like_enum_debuginfo;\n@@ -76,7 +77,16 @@ fn push_debuginfo_type_name<'tcx>(\n             let ty_and_layout = tcx.layout_of(ParamEnv::reveal_all().and(t)).expect(\"layout error\");\n \n             if def.is_enum() && cpp_like_debuginfo && !wants_c_like_enum_debuginfo(ty_and_layout) {\n-                msvc_enum_fallback(tcx, t, def, substs, output, visited);\n+                msvc_enum_fallback(\n+                    tcx,\n+                    ty_and_layout,\n+                    &|output, visited| {\n+                        push_item_name(tcx, def.did(), true, output);\n+                        push_generic_params_internal(tcx, substs, output, visited);\n+                    },\n+                    output,\n+                    visited,\n+                );\n             } else {\n                 push_item_name(tcx, def.did(), qualified, output);\n                 push_generic_params_internal(tcx, substs, output, visited);\n@@ -352,40 +362,26 @@ fn push_debuginfo_type_name<'tcx>(\n         ty::Closure(def_id, substs) | ty::Generator(def_id, substs, ..) => {\n             // Name will be \"{closure_env#0}<T1, T2, ...>\", \"{generator_env#0}<T1, T2, ...>\", or\n             // \"{async_fn_env#0}<T1, T2, ...>\", etc.\n-            let def_key = tcx.def_key(def_id);\n-\n-            if qualified {\n-                let parent_def_id = DefId { index: def_key.parent.unwrap(), ..def_id };\n-                push_item_name(tcx, parent_def_id, true, output);\n-                output.push_str(\"::\");\n+            // In the case of cpp-like debuginfo, the name additionally gets wrapped inside of\n+            // an artificial `enum$<>` type, as defined in msvc_enum_fallback().\n+            if cpp_like_debuginfo && matches!(t.kind(), ty::Generator(..)) {\n+                let ty_and_layout = tcx.layout_of(ParamEnv::reveal_all().and(t)).unwrap();\n+                msvc_enum_fallback(\n+                    tcx,\n+                    ty_and_layout,\n+                    &|output, visited| {\n+                        push_closure_or_generator_name(tcx, def_id, substs, true, output, visited);\n+                    },\n+                    output,\n+                    visited,\n+                );\n+            } else {\n+                push_closure_or_generator_name(tcx, def_id, substs, qualified, output, visited);\n             }\n-\n-            let mut label = String::with_capacity(20);\n-            write!(&mut label, \"{}_env\", generator_kind_label(tcx.generator_kind(def_id))).unwrap();\n-\n-            push_disambiguated_special_name(\n-                &label,\n-                def_key.disambiguated_data.disambiguator,\n-                cpp_like_debuginfo,\n-                output,\n-            );\n-\n-            // We also need to add the generic arguments of the async fn/generator or\n-            // the enclosing function (for closures or async blocks), so that we end\n-            // up with a unique name for every instantiation.\n-\n-            // Find the generics of the enclosing function, as defined in the source code.\n-            let enclosing_fn_def_id = tcx.typeck_root_def_id(def_id);\n-            let generics = tcx.generics_of(enclosing_fn_def_id);\n-\n-            // Truncate the substs to the length of the above generics. This will cut off\n-            // anything closure- or generator-specific.\n-            let substs = substs.truncate_to(tcx, generics);\n-            push_generic_params_internal(tcx, substs, output, visited);\n         }\n         // Type parameters from polymorphized functions.\n         ty::Param(_) => {\n-            output.push_str(&format!(\"{:?}\", t));\n+            write!(output, \"{:?}\", t).unwrap();\n         }\n         ty::Error(_)\n         | ty::Infer(_)\n@@ -408,24 +404,32 @@ fn push_debuginfo_type_name<'tcx>(\n     // `EnumMemberDescriptionFactor::create_member_descriptions`.\n     fn msvc_enum_fallback<'tcx>(\n         tcx: TyCtxt<'tcx>,\n-        ty: Ty<'tcx>,\n-        def: AdtDef<'tcx>,\n-        substs: SubstsRef<'tcx>,\n+        ty_and_layout: TyAndLayout<'tcx>,\n+        push_inner: &dyn Fn(/*output*/ &mut String, /*visited*/ &mut FxHashSet<Ty<'tcx>>),\n         output: &mut String,\n         visited: &mut FxHashSet<Ty<'tcx>>,\n     ) {\n-        let layout = tcx.layout_of(tcx.param_env(def.did()).and(ty)).expect(\"layout error\");\n+        debug_assert!(!wants_c_like_enum_debuginfo(ty_and_layout));\n+        let ty = ty_and_layout.ty;\n \n         output.push_str(\"enum$<\");\n-        push_item_name(tcx, def.did(), true, output);\n-        push_generic_params_internal(tcx, substs, output, visited);\n+        push_inner(output, visited);\n+\n+        let variant_name = |variant_index| match ty.kind() {\n+            ty::Adt(adt_def, _) => {\n+                debug_assert!(adt_def.is_enum());\n+                Cow::from(adt_def.variant(variant_index).name.as_str())\n+            }\n+            ty::Generator(..) => GeneratorSubsts::variant_name(variant_index),\n+            _ => unreachable!(),\n+        };\n \n         if let Variants::Multiple {\n             tag_encoding: TagEncoding::Niche { dataful_variant, .. },\n             tag,\n             variants,\n             ..\n-        } = &layout.variants\n+        } = &ty_and_layout.variants\n         {\n             let dataful_variant_layout = &variants[*dataful_variant];\n \n@@ -439,16 +443,13 @@ fn push_debuginfo_type_name<'tcx>(\n             let max = dataful_discriminant_range.end;\n             let max = tag.value.size(&tcx).truncate(max);\n \n-            let dataful_variant_name = def.variant(*dataful_variant).name.as_str();\n-\n-            output.push_str(&format!(\", {}, {}, {}\", min, max, dataful_variant_name));\n-        } else if let Variants::Single { index: variant_idx } = &layout.variants {\n+            let dataful_variant_name = variant_name(*dataful_variant);\n+            write!(output, \", {}, {}, {}\", min, max, dataful_variant_name).unwrap();\n+        } else if let Variants::Single { index: variant_idx } = &ty_and_layout.variants {\n             // Uninhabited enums can't be constructed and should never need to be visualized so\n             // skip this step for them.\n-            if def.variants().len() != 0 {\n-                let variant = def.variant(*variant_idx).name.as_str();\n-\n-                output.push_str(&format!(\", {}\", variant));\n+            if !ty_and_layout.abi.is_uninhabited() {\n+                write!(output, \", {}\", variant_name(*variant_idx)).unwrap();\n             }\n         }\n         push_close_angle_bracket(true, output);\n@@ -700,6 +701,49 @@ pub fn push_generic_params<'tcx>(tcx: TyCtxt<'tcx>, substs: SubstsRef<'tcx>, out\n     push_generic_params_internal(tcx, substs, output, &mut visited);\n }\n \n+fn push_closure_or_generator_name<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: DefId,\n+    substs: SubstsRef<'tcx>,\n+    qualified: bool,\n+    output: &mut String,\n+    visited: &mut FxHashSet<Ty<'tcx>>,\n+) {\n+    // Name will be \"{closure_env#0}<T1, T2, ...>\", \"{generator_env#0}<T1, T2, ...>\", or\n+    // \"{async_fn_env#0}<T1, T2, ...>\", etc.\n+    let def_key = tcx.def_key(def_id);\n+    let generator_kind = tcx.generator_kind(def_id);\n+\n+    if qualified {\n+        let parent_def_id = DefId { index: def_key.parent.unwrap(), ..def_id };\n+        push_item_name(tcx, parent_def_id, true, output);\n+        output.push_str(\"::\");\n+    }\n+\n+    let mut label = String::with_capacity(20);\n+    write!(&mut label, \"{}_env\", generator_kind_label(generator_kind)).unwrap();\n+\n+    push_disambiguated_special_name(\n+        &label,\n+        def_key.disambiguated_data.disambiguator,\n+        cpp_like_debuginfo(tcx),\n+        output,\n+    );\n+\n+    // We also need to add the generic arguments of the async fn/generator or\n+    // the enclosing function (for closures or async blocks), so that we end\n+    // up with a unique name for every instantiation.\n+\n+    // Find the generics of the enclosing function, as defined in the source code.\n+    let enclosing_fn_def_id = tcx.typeck_root_def_id(def_id);\n+    let generics = tcx.generics_of(enclosing_fn_def_id);\n+\n+    // Truncate the substs to the length of the above generics. This will cut off\n+    // anything closure- or generator-specific.\n+    let substs = substs.truncate_to(tcx, generics);\n+    push_generic_params_internal(tcx, substs, output, visited);\n+}\n+\n fn push_close_angle_bracket(cpp_like_debuginfo: bool, output: &mut String) {\n     // MSVC debugger always treats `>>` as a shift, even when parsing templates,\n     // so add a space to avoid confusion."}, {"sha": "8995605e3dd7208f12a8d96fa99e396f9e56ce9f", "filename": "src/test/codegen/async-fn-debug-msvc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ad299aa670face2085d2abec6e8481fa582068a/src%2Ftest%2Fcodegen%2Fasync-fn-debug-msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ad299aa670face2085d2abec6e8481fa582068a/src%2Ftest%2Fcodegen%2Fasync-fn-debug-msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasync-fn-debug-msvc.rs?ref=3ad299aa670face2085d2abec6e8481fa582068a", "patch": "@@ -16,7 +16,7 @@ async fn async_fn_test() {\n \n // FIXME: No way to reliably check the filename.\n \n-// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"async_fn_env$0\", {{.*}}, align: {{32|64}},\n+// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"enum$<async_fn_debug_msvc::async_fn_test::async_fn_env$0>\",\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"variant0\", scope: [[GEN]],\n // For brevity, we only check the struct name and members of the last variant.\n // CHECK-SAME: file: [[FILE:![0-9]*]], line: 11,"}, {"sha": "74b1eb948b0f77f07a341260aa7687473107fbea", "filename": "src/test/codegen/generator-debug-msvc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ad299aa670face2085d2abec6e8481fa582068a/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ad299aa670face2085d2abec6e8481fa582068a/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs?ref=3ad299aa670face2085d2abec6e8481fa582068a", "patch": "@@ -20,7 +20,7 @@ fn generator_test() -> impl Generator<Yield = i32, Return = ()> {\n \n // FIXME: No way to reliably check the filename.\n \n-// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"generator_env$0\"\n+// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"enum$<generator_debug_msvc::generator_test::generator_env$0>\"\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"variant0\", scope: [[GEN]],\n // For brevity, we only check the struct name and members of the last variant.\n // CHECK-SAME: file: [[FILE:![0-9]*]], line: 14,"}, {"sha": "a972943d58e0232620458a12277bb0932a191977", "filename": "src/test/debuginfo/generator-objects.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3ad299aa670face2085d2abec6e8481fa582068a/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ad299aa670face2085d2abec6e8481fa582068a/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs?ref=3ad299aa670face2085d2abec6e8481fa582068a", "patch": "@@ -37,6 +37,37 @@\n // lldb-command:print b\n // lldbg-check:(generator_objects::main::{generator_env#0}) $3 =\n \n+// === CDB TESTS ===================================================================================\n+\n+// cdb-command: g\n+// cdb-command: dx b\n+// cdb-check: b                : Unresumed [Type: enum$<generator_objects::main::generator_env$0>]\n+// cdb-check:    [variant]        : Unresumed\n+// cdb-check:    [+0x000] _ref__a          : 0x[...] : 5 [Type: int *]\n+\n+// cdb-command: g\n+// cdb-command: dx b\n+// cdb-check: b                : Suspend0 [Type: enum$<generator_objects::main::generator_env$0>]\n+// cdb-check:    [variant]        : Suspend0\n+// cdb-check:    [+0x008] c                : 6 [Type: int]\n+// cdb-check:    [+0x00c] d                : 7 [Type: int]\n+// cdb-check:    [+0x000] _ref__a          : 0x[...] : 5 [Type: int *]\n+\n+// cdb-command: g\n+// cdb-command: dx b\n+// cdb-check: b                : Suspend1 [Type: enum$<generator_objects::main::generator_env$0>]\n+// cdb-check:    [variant]        : Suspend1\n+// cdb-check:    [+0x008] c                : 7 [Type: int]\n+// cdb-check:    [+0x00c] d                : 8 [Type: int]\n+// cdb-check:    [+0x000] _ref__a          : 0x[...] : 6 [Type: int *]\n+\n+// cdb-command: g\n+// cdb-command: dx b\n+// cdb-check: b                : Returned [Type: enum$<generator_objects::main::generator_env$0>]\n+// cdb-check:    [<Raw View>]     [Type: enum$<generator_objects::main::generator_env$0>]\n+// cdb-check:    [variant]        : Returned\n+// cdb-check:    [+0x000] _ref__a          : 0x[...] : 6 [Type: int *]\n+\n #![feature(omit_gdb_pretty_printer_section, generators, generator_trait)]\n #![omit_gdb_pretty_printer_section]\n "}]}