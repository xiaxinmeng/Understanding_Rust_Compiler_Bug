{"sha": "b6e28b59679e3e4ee47b20090035ef33889b3f3b", "node_id": "C_kwDOAAsO6NoAKGI2ZTI4YjU5Njc5ZTNlNGVlNDdiMjAwOTAwMzVlZjMzODg5YjNmM2I", "commit": {"author": {"name": "topjohnwu", "email": "topjohnwu@google.com", "date": "2022-06-24T21:27:37Z"}, "committer": {"name": "topjohnwu", "email": "topjohnwu@google.com", "date": "2022-06-24T21:28:08Z"}, "message": "Allow dynamically linking against libLLVM on macOS\n\nCreate symlinks to workaround file missing error in llvm-config", "tree": {"sha": "86cdc8a797fc568adbba11914aaaea6c2952ebf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86cdc8a797fc568adbba11914aaaea6c2952ebf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6e28b59679e3e4ee47b20090035ef33889b3f3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6e28b59679e3e4ee47b20090035ef33889b3f3b", "html_url": "https://github.com/rust-lang/rust/commit/b6e28b59679e3e4ee47b20090035ef33889b3f3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6e28b59679e3e4ee47b20090035ef33889b3f3b/comments", "author": {"login": "topjohnwu", "id": 7337301, "node_id": "MDQ6VXNlcjczMzczMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/7337301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topjohnwu", "html_url": "https://github.com/topjohnwu", "followers_url": "https://api.github.com/users/topjohnwu/followers", "following_url": "https://api.github.com/users/topjohnwu/following{/other_user}", "gists_url": "https://api.github.com/users/topjohnwu/gists{/gist_id}", "starred_url": "https://api.github.com/users/topjohnwu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topjohnwu/subscriptions", "organizations_url": "https://api.github.com/users/topjohnwu/orgs", "repos_url": "https://api.github.com/users/topjohnwu/repos", "events_url": "https://api.github.com/users/topjohnwu/events{/privacy}", "received_events_url": "https://api.github.com/users/topjohnwu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topjohnwu", "id": 7337301, "node_id": "MDQ6VXNlcjczMzczMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/7337301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topjohnwu", "html_url": "https://github.com/topjohnwu", "followers_url": "https://api.github.com/users/topjohnwu/followers", "following_url": "https://api.github.com/users/topjohnwu/following{/other_user}", "gists_url": "https://api.github.com/users/topjohnwu/gists{/gist_id}", "starred_url": "https://api.github.com/users/topjohnwu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topjohnwu/subscriptions", "organizations_url": "https://api.github.com/users/topjohnwu/orgs", "repos_url": "https://api.github.com/users/topjohnwu/repos", "events_url": "https://api.github.com/users/topjohnwu/events{/privacy}", "received_events_url": "https://api.github.com/users/topjohnwu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdca237d5194bf8a1c9b437ebd2114d1c2ba6195", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdca237d5194bf8a1c9b437ebd2114d1c2ba6195", "html_url": "https://github.com/rust-lang/rust/commit/fdca237d5194bf8a1c9b437ebd2114d1c2ba6195"}], "stats": {"total": 57, "additions": 41, "deletions": 16}, "files": [{"sha": "d30f69ffc5190e85c16ef0dd44b2d5871305962d", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b6e28b59679e3e4ee47b20090035ef33889b3f3b/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e28b59679e3e4ee47b20090035ef33889b3f3b/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=b6e28b59679e3e4ee47b20090035ef33889b3f3b", "patch": "@@ -107,15 +107,11 @@ use std::cell::{Cell, RefCell};\n use std::collections::{HashMap, HashSet};\n use std::env;\n use std::fs::{self, File};\n+use std::io;\n use std::path::{Path, PathBuf};\n use std::process::{self, Command};\n use std::str;\n \n-#[cfg(unix)]\n-use std::os::unix::fs::symlink as symlink_file;\n-#[cfg(windows)]\n-use std::os::windows::fs::symlink_file;\n-\n use filetime::FileTime;\n use once_cell::sync::OnceCell;\n \n@@ -1446,7 +1442,7 @@ impl Build {\n                 src = t!(fs::canonicalize(src));\n             } else {\n                 let link = t!(fs::read_link(src));\n-                t!(symlink_file(link, dst));\n+                t!(self.symlink_file(link, dst));\n                 return;\n             }\n         }\n@@ -1571,6 +1567,14 @@ impl Build {\n         iter.map(|e| t!(e)).collect::<Vec<_>>().into_iter()\n     }\n \n+    fn symlink_file<P: AsRef<Path>, Q: AsRef<Path>>(&self, src: P, link: Q) -> io::Result<()> {\n+        #[cfg(unix)]\n+        use std::os::unix::fs::symlink as symlink_file;\n+        #[cfg(windows)]\n+        use std::os::windows::fs::symlink_file;\n+        if !self.config.dry_run { symlink_file(src.as_ref(), link.as_ref()) } else { Ok(()) }\n+    }\n+\n     fn remove(&self, f: &Path) {\n         if self.config.dry_run {\n             return;"}, {"sha": "e1ca8b487babfc72ccc77be7e4ed23e5f92bf78a", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b6e28b59679e3e4ee47b20090035ef33889b3f3b/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6e28b59679e3e4ee47b20090035ef33889b3f3b/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=b6e28b59679e3e4ee47b20090035ef33889b3f3b", "patch": "@@ -238,9 +238,7 @@ impl Step for Llvm {\n             };\n \n         builder.update_submodule(&Path::new(\"src\").join(\"llvm-project\"));\n-        if builder.llvm_link_shared()\n-            && (target.contains(\"windows\") || target.contains(\"apple-darwin\"))\n-        {\n+        if builder.llvm_link_shared() && target.contains(\"windows\") {\n             panic!(\"shared linking to LLVM is not currently supported on {}\", target.triple);\n         }\n \n@@ -346,7 +344,9 @@ impl Step for Llvm {\n         //\n         // If we're not linking rustc to a dynamic LLVM, though, then don't link\n         // tools to it.\n-        if builder.llvm_link_tools_dynamically(target) && builder.llvm_link_shared() {\n+        let llvm_link_shared =\n+            builder.llvm_link_tools_dynamically(target) && builder.llvm_link_shared();\n+        if llvm_link_shared {\n             cfg.define(\"LLVM_LINK_LLVM_DYLIB\", \"ON\");\n         }\n \n@@ -425,18 +425,18 @@ impl Step for Llvm {\n             );\n         }\n \n-        if let Some(ref suffix) = builder.config.llvm_version_suffix {\n+        let llvm_version_suffix = if let Some(ref suffix) = builder.config.llvm_version_suffix {\n             // Allow version-suffix=\"\" to not define a version suffix at all.\n-            if !suffix.is_empty() {\n-                cfg.define(\"LLVM_VERSION_SUFFIX\", suffix);\n-            }\n+            if !suffix.is_empty() { Some(suffix.to_string()) } else { None }\n         } else if builder.config.channel == \"dev\" {\n             // Changes to a version suffix require a complete rebuild of the LLVM.\n             // To avoid rebuilds during a time of version bump, don't include rustc\n             // release number on the dev channel.\n-            cfg.define(\"LLVM_VERSION_SUFFIX\", \"-rust-dev\");\n+            Some(\"-rust-dev\".to_string())\n         } else {\n-            let suffix = format!(\"-rust-{}-{}\", builder.version, builder.config.channel);\n+            Some(format!(\"-rust-{}-{}\", builder.version, builder.config.channel))\n+        };\n+        if let Some(ref suffix) = llvm_version_suffix {\n             cfg.define(\"LLVM_VERSION_SUFFIX\", suffix);\n         }\n \n@@ -465,6 +465,27 @@ impl Step for Llvm {\n \n         cfg.build();\n \n+        // When building LLVM with LLVM_LINK_LLVM_DYLIB for macOS, an unversioned\n+        // libLLVM.dylib will be built. However, llvm-config will still look\n+        // for a versioned path like libLLVM-14.dylib. Manually create a symbolic\n+        // link to make llvm-config happy.\n+        if llvm_link_shared && target.contains(\"apple-darwin\") {\n+            let mut cmd = Command::new(&build_llvm_config);\n+            let version = output(cmd.arg(\"--version\"));\n+            let major = version.split('.').next().unwrap();\n+            let lib_name = match llvm_version_suffix {\n+                Some(s) => format!(\"lib/libLLVM-{}{}.dylib\", major, s),\n+                None => format!(\"lib/libLLVM-{}.dylib\", major),\n+            };\n+\n+            // The reason why we build the library path from llvm-config is because\n+            // the output of llvm-config depends on its location in the file system.\n+            // Make sure we create the symlink exactly where it's needed.\n+            let llvm_base = build_llvm_config.parent().unwrap().parent().unwrap();\n+            let lib_llvm = llvm_base.join(lib_name);\n+            t!(builder.symlink_file(\"libLLVM.dylib\", &lib_llvm));\n+        }\n+\n         t!(stamp.write());\n \n         build_llvm_config"}]}