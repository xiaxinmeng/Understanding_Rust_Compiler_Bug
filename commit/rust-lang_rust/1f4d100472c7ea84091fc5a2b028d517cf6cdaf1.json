{"sha": "1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNGQxMDA0NzJjN2VhODQwOTFmYzVhMmIwMjhkNTE3Y2Y2Y2RhZjE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-11T19:51:44Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-17T21:15:24Z"}, "message": "move E0637 to lowering and improve output, add more tests", "tree": {"sha": "5f870311b74e4826c7d60adf2829b187b0aed1c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f870311b74e4826c7d60adf2829b187b0aed1c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "html_url": "https://github.com/rust-lang/rust/commit/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68da108d56577657135af0186826ddef93104d22", "url": "https://api.github.com/repos/rust-lang/rust/commits/68da108d56577657135af0186826ddef93104d22", "html_url": "https://github.com/rust-lang/rust/commit/68da108d56577657135af0186826ddef93104d22"}], "stats": {"total": 618, "additions": 539, "deletions": 79}, "files": [{"sha": "95b73d5f87b39fff6cfc2e260225ef2739333c83", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -436,7 +436,9 @@ pub fn walk_lifetime<'v, V: Visitor<'v>>(visitor: &mut V, lifetime: &'v Lifetime\n             visitor.visit_ident(ident);\n         }\n         LifetimeName::Param(ParamName::Fresh(_)) |\n+        LifetimeName::Param(ParamName::Error) |\n         LifetimeName::Static |\n+        LifetimeName::Error |\n         LifetimeName::Implicit |\n         LifetimeName::Underscore => {}\n     }\n@@ -747,7 +749,7 @@ pub fn walk_generic_param<'v, V: Visitor<'v>>(visitor: &mut V, param: &'v Generi\n     walk_list!(visitor, visit_attribute, &param.attrs);\n     match param.name {\n         ParamName::Plain(ident) => visitor.visit_ident(ident),\n-        ParamName::Fresh(_) => {}\n+        ParamName::Error | ParamName::Fresh(_) => {}\n     }\n     match param.kind {\n         GenericParamKind::Lifetime { .. } => {}"}, {"sha": "1fc677b0e2926903581a1ff9d8a72a12e66e062a", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 84, "deletions": 22, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -316,6 +316,11 @@ enum AnonymousLifetimeMode {\n     /// For **Deprecated** cases, report an error.\n     CreateParameter,\n \n+    /// Give a hard error when either `&` or `'_` is written. Used to\n+    /// rule out things like `where T: Foo<'_>`. Does not imply an\n+    /// error on default object bounds (e.g., `Box<dyn Foo>`).\n+    ReportError,\n+\n     /// Pass responsibility to `resolve_lifetime` code for all cases.\n     PassThrough,\n }\n@@ -736,6 +741,10 @@ impl<'a> LoweringContext<'a> {\n                         keywords::UnderscoreLifetime.name().as_interned_str(),\n                         hir::LifetimeParamKind::Elided,\n                     ),\n+                    ParamName::Error => (\n+                        keywords::UnderscoreLifetime.name().as_interned_str(),\n+                        hir::LifetimeParamKind::Error,\n+                    ),\n                 };\n \n                 // Add a definition for the in-band lifetime def\n@@ -792,7 +801,7 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     /// When we have either an elided or `'_` lifetime in an impl\n-    /// header, we convert it to\n+    /// header, we convert it to an in-band lifetime.\n     fn collect_fresh_in_band_lifetime(&mut self, span: Span) -> ParamName {\n         assert!(self.is_collecting_in_band_lifetimes);\n         let index = self.lifetimes_to_define.len();\n@@ -1475,7 +1484,7 @@ impl<'a> LoweringContext<'a> {\n                         }\n                     }\n                     hir::LifetimeName::Param(_) => lifetime.name,\n-                    hir::LifetimeName::Static => return,\n+                    hir::LifetimeName::Error | hir::LifetimeName::Static => return,\n                 };\n \n                 if !self.currently_bound_lifetimes.contains(&name)\n@@ -2163,7 +2172,7 @@ impl<'a> LoweringContext<'a> {\n                         }\n                     }\n                     hir::LifetimeName::Param(_) => lifetime.name,\n-                    hir::LifetimeName::Static => return,\n+                    hir::LifetimeName::Error | hir::LifetimeName::Static => return,\n                 };\n \n                 if !self.currently_bound_lifetimes.contains(&name) {\n@@ -2294,17 +2303,15 @@ impl<'a> LoweringContext<'a> {\n         itctx: ImplTraitContext<'_>,\n     ) -> hir::GenericBound {\n         match *tpb {\n-            GenericBound::Trait(ref ty, modifier) => hir::GenericBound::Trait(\n-                self.lower_poly_trait_ref(ty, itctx),\n-                self.lower_trait_bound_modifier(modifier),\n-            ),\n-            GenericBound::Outlives(ref lifetime) => {\n-                // We don't want to accept `'a: '_`:\n-                self.with_anonymous_lifetime_mode(\n-                    AnonymousLifetimeMode::PassThrough,\n-                    |this| hir::GenericBound::Outlives(this.lower_lifetime(lifetime)),\n+            GenericBound::Trait(ref ty, modifier) => {\n+                hir::GenericBound::Trait(\n+                    self.lower_poly_trait_ref(ty, itctx),\n+                    self.lower_trait_bound_modifier(modifier),\n                 )\n             }\n+            GenericBound::Outlives(ref lifetime) => {\n+                hir::GenericBound::Outlives(self.lower_lifetime(lifetime))\n+            }\n         }\n     }\n \n@@ -2323,6 +2330,8 @@ impl<'a> LoweringContext<'a> {\n                     AnonymousLifetimeMode::PassThrough => {\n                         self.new_named_lifetime(l.id, span, hir::LifetimeName::Underscore)\n                     }\n+\n+                    AnonymousLifetimeMode::ReportError => self.new_error_lifetime(Some(l.id), span),\n                 },\n             ident => {\n                 self.maybe_collect_in_band_lifetime(ident);\n@@ -2361,16 +2370,26 @@ impl<'a> LoweringContext<'a> {\n                            add_bounds: &NodeMap<Vec<GenericBound>>,\n                            mut itctx: ImplTraitContext<'_>)\n                            -> hir::GenericParam {\n-        let mut bounds = self.lower_param_bounds(&param.bounds, itctx.reborrow());\n+        let mut bounds = self.with_anonymous_lifetime_mode(\n+            AnonymousLifetimeMode::ReportError,\n+            |this| this.lower_param_bounds(&param.bounds, itctx.reborrow()),\n+        );\n+\n         match param.kind {\n             GenericParamKind::Lifetime => {\n                 let was_collecting_in_band = self.is_collecting_in_band_lifetimes;\n                 self.is_collecting_in_band_lifetimes = false;\n \n-                let lt = self.lower_lifetime(&Lifetime { id: param.id, ident: param.ident });\n+                let lt = self.with_anonymous_lifetime_mode(\n+                    AnonymousLifetimeMode::ReportError,\n+                    |this| this.lower_lifetime(&Lifetime { id: param.id, ident: param.ident }),\n+                );\n                 let param_name = match lt.name {\n                     hir::LifetimeName::Param(param_name) => param_name,\n-                    _ => hir::ParamName::Plain(lt.name.ident()),\n+                    hir::LifetimeName::Implicit\n+                        | hir::LifetimeName::Underscore\n+                        | hir::LifetimeName::Static => hir::ParamName::Plain(lt.name.ident()),\n+                    hir::LifetimeName::Error => ParamName::Error,\n                 };\n                 let param = hir::GenericParam {\n                     id: lt.id,\n@@ -2494,13 +2513,18 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_where_clause(&mut self, wc: &WhereClause) -> hir::WhereClause {\n-        hir::WhereClause {\n-            id: self.lower_node_id(wc.id).node_id,\n-            predicates: wc.predicates\n-                .iter()\n-                .map(|predicate| self.lower_where_predicate(predicate))\n-                .collect(),\n-        }\n+        self.with_anonymous_lifetime_mode(\n+            AnonymousLifetimeMode::ReportError,\n+            |this| {\n+                hir::WhereClause {\n+                    id: this.lower_node_id(wc.id).node_id,\n+                    predicates: wc.predicates\n+                        .iter()\n+                        .map(|predicate| this.lower_where_predicate(predicate))\n+                        .collect(),\n+                }\n+            },\n+        )\n     }\n \n     fn lower_where_predicate(&mut self, pred: &WherePredicate) -> hir::WherePredicate {\n@@ -4843,10 +4867,38 @@ impl<'a> LoweringContext<'a> {\n                 }\n             }\n \n+            AnonymousLifetimeMode::ReportError => self.new_error_lifetime(None, span),\n+\n             AnonymousLifetimeMode::PassThrough => self.new_implicit_lifetime(span),\n         }\n     }\n \n+    /// Report an error on illegal use of `'_` or a `&T` with no explicit lifetime;\n+    /// return a \"error lifetime\".\n+    fn new_error_lifetime(&mut self, id: Option<NodeId>, span: Span) -> hir::Lifetime {\n+        let (id, msg, label) = match id {\n+            Some(id) => (id, \"`'_` cannot be used here\", \"`'_` is a reserved lifetime name\"),\n+\n+            None => (\n+                self.next_id().node_id,\n+                \"`&` without an explicit lifetime name cannot be used here\",\n+                \"explicit lifetime name needed here\",\n+            ),\n+        };\n+\n+        let mut err = struct_span_err!(\n+            self.sess,\n+            span,\n+            E0637,\n+            \"{}\",\n+            msg,\n+        );\n+        err.span_label(span, label);\n+        err.emit();\n+\n+        self.new_named_lifetime(id, span, hir::LifetimeName::Error)\n+    }\n+\n     /// Invoked to create the lifetime argument(s) for a path like\n     /// `std::cell::Ref<T>`; note that implicit lifetimes in these\n     /// sorts of cases are deprecated. This may therefore report a warning or an\n@@ -4861,6 +4913,12 @@ impl<'a> LoweringContext<'a> {\n             //     impl Foo for std::cell::Ref<u32> // note lack of '_\n             AnonymousLifetimeMode::CreateParameter => {}\n \n+            AnonymousLifetimeMode::ReportError => {\n+                return (0..count)\n+                    .map(|_| self.new_error_lifetime(None, span))\n+                    .collect();\n+            }\n+\n             // This is the normal case.\n             AnonymousLifetimeMode::PassThrough => {}\n         }\n@@ -4891,6 +4949,10 @@ impl<'a> LoweringContext<'a> {\n             // `resolve_lifetime` has the code to make that happen.\n             AnonymousLifetimeMode::CreateParameter => {}\n \n+            AnonymousLifetimeMode::ReportError => {\n+                // ReportError applies to explicit use of `'_`.\n+            }\n+\n             // This is the normal case.\n             AnonymousLifetimeMode::PassThrough => {}\n         }"}, {"sha": "01b68ae669b67b76a73be9309ac6a03313c6e005", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -208,13 +208,18 @@ pub enum ParamName {\n     /// where `'f` is something like `Fresh(0)`. The indices are\n     /// unique per impl, but not necessarily continuous.\n     Fresh(usize),\n+\n+    /// Indicates an illegal name was given and an error has been\n+    /// repored (so we should squelch other derived errors). Occurs\n+    /// when e.g. `'_` is used in the wrong place.\n+    Error,\n }\n \n impl ParamName {\n     pub fn ident(&self) -> Ident {\n         match *self {\n             ParamName::Plain(ident) => ident,\n-            ParamName::Fresh(_) => keywords::UnderscoreLifetime.ident(),\n+            ParamName::Error | ParamName::Fresh(_) => keywords::UnderscoreLifetime.ident(),\n         }\n     }\n \n@@ -234,6 +239,10 @@ pub enum LifetimeName {\n     /// User typed nothing. e.g. the lifetime in `&u32`.\n     Implicit,\n \n+    /// Indicates an error during lowering (usually `'_` in wrong place)\n+    /// that was already reported.\n+    Error,\n+\n     /// User typed `'_`.\n     Underscore,\n \n@@ -245,6 +254,7 @@ impl LifetimeName {\n     pub fn ident(&self) -> Ident {\n         match *self {\n             LifetimeName::Implicit => keywords::Invalid.ident(),\n+            LifetimeName::Error => keywords::Invalid.ident(),\n             LifetimeName::Underscore => keywords::UnderscoreLifetime.ident(),\n             LifetimeName::Static => keywords::StaticLifetime.ident(),\n             LifetimeName::Param(param_name) => param_name.ident(),\n@@ -260,7 +270,7 @@ impl LifetimeName {\n             // in the compiler is concerned -- `Fresh(_)` variants act\n             // equivalently to \"some fresh name\". They correspond to\n             // early-bound regions on an impl, in other words.\n-            LifetimeName::Param(_) | LifetimeName::Static => false,\n+            LifetimeName::Error | LifetimeName::Param(_) | LifetimeName::Static => false,\n         }\n     }\n \n@@ -513,6 +523,9 @@ pub enum LifetimeParamKind {\n     // Indication that the lifetime was elided like both cases here:\n     // `fn foo(x: &u8) -> &'_ u8 { x }`\n     Elided,\n+\n+    // Indication that the lifetime name was somehow in error.\n+    Error,\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]"}, {"sha": "fe663c68cd50b45ee61f88f53b7549a60f5b4e3a", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -144,14 +144,16 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::ImplItemId {\n \n impl_stable_hash_for!(enum hir::ParamName {\n     Plain(name),\n-    Fresh(index)\n+    Fresh(index),\n+    Error,\n });\n \n impl_stable_hash_for!(enum hir::LifetimeName {\n     Param(param_name),\n     Implicit,\n     Underscore,\n     Static,\n+    Error,\n });\n \n impl_stable_hash_for!(struct hir::Label {\n@@ -210,7 +212,8 @@ impl_stable_hash_for!(struct hir::GenericParam {\n impl_stable_hash_for!(enum hir::LifetimeParamKind {\n     Explicit,\n     InBand,\n-    Elided\n+    Elided,\n+    Error,\n });\n \n impl<'a> HashStable<StableHashingContext<'a>> for hir::GenericParamKind {"}, {"sha": "0c8224710d396b7aac3a07db27c0fe0dc4db9824", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -755,8 +755,9 @@ for ::middle::resolve_lifetime::Set1<T>\n }\n \n impl_stable_hash_for!(enum ::middle::resolve_lifetime::LifetimeDefOrigin {\n-    Explicit,\n-    InBand\n+    ExplicitOrElided,\n+    InBand,\n+    Error,\n });\n \n impl_stable_hash_for!(enum ::middle::resolve_lifetime::Region {"}, {"sha": "671604918f7f01c00228c759fb819da8c2d9e819", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 33, "deletions": 24, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -43,20 +43,23 @@ use hir::{self, GenericParamKind, LifetimeParamKind};\n /// This is used to prevent the usage of in-band lifetimes in `Fn`/`fn` syntax.\n #[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug)]\n pub enum LifetimeDefOrigin {\n-    // Explicit binders like `fn foo<'a>(x: &'a u8)`\n-    Explicit,\n+    // Explicit binders like `fn foo<'a>(x: &'a u8)` or elided like `impl Foo<&u32>`\n+    ExplicitOrElided,\n     // In-band declarations like `fn foo(x: &'a u8)`\n     InBand,\n+    // Some kind of erroneous origin\n+    Error,\n }\n \n impl LifetimeDefOrigin {\n     fn from_param(param: &GenericParam) -> Self {\n         match param.kind {\n             GenericParamKind::Lifetime { kind } => {\n-                if kind == LifetimeParamKind::InBand {\n-                    LifetimeDefOrigin::InBand\n-                } else {\n-                    LifetimeDefOrigin::Explicit\n+                match kind {\n+                    LifetimeParamKind::InBand => LifetimeDefOrigin::InBand,\n+                    LifetimeParamKind::Explicit => LifetimeDefOrigin::ExplicitOrElided,\n+                    LifetimeParamKind::Elided => LifetimeDefOrigin::ExplicitOrElided,\n+                    LifetimeParamKind::Error => LifetimeDefOrigin::Error,\n                 }\n             }\n             _ => bug!(\"expected a lifetime param\"),\n@@ -612,6 +615,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         // If the user wrote an explicit name, use that.\n                         self.visit_lifetime(lifetime);\n                     }\n+                    LifetimeName::Error => { }\n                 }\n             }\n             hir::TyKind::Rptr(ref lifetime_ref, ref mt) => {\n@@ -1631,6 +1635,12 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n     fn resolve_lifetime_ref(&mut self, lifetime_ref: &'tcx hir::Lifetime) {\n         debug!(\"resolve_lifetime_ref(lifetime_ref={:?})\", lifetime_ref);\n+\n+        // If we've already reported an error, just ignore `lifetime_ref`.\n+        if let LifetimeName::Error = lifetime_ref.name {\n+            return;\n+        }\n+\n         // Walk up the scope chain, tracking the number of fn scopes\n         // that we pass through, until we find a lifetime with the\n         // given name or we run out of scopes.\n@@ -1650,16 +1660,17 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 }\n \n                 Scope::Binder { ref lifetimes, s, .. } => {\n-                    let name = match lifetime_ref.name {\n-                        LifetimeName::Param(param_name) => param_name,\n+                    match lifetime_ref.name {\n+                        LifetimeName::Param(param_name) => {\n+                            if let Some(&def) = lifetimes.get(&param_name.modern()) {\n+                                break Some(def.shifted(late_depth));\n+                            }\n+                        }\n                         _ => bug!(\"expected LifetimeName::Param\"),\n-                    };\n-                    if let Some(&def) = lifetimes.get(&name.modern()) {\n-                        break Some(def.shifted(late_depth));\n-                    } else {\n-                        late_depth += 1;\n-                        scope = s;\n                     }\n+\n+                    late_depth += 1;\n+                    scope = s;\n                 }\n \n                 Scope::Elision { s, .. } | Scope::ObjectLifetimeDefault { s, .. } => {\n@@ -1709,8 +1720,10 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     }\n \n                     Region::Static\n-                    | Region::EarlyBound(_, _, LifetimeDefOrigin::Explicit)\n-                    | Region::LateBound(_, _, LifetimeDefOrigin::Explicit)\n+                    | Region::EarlyBound(_, _, LifetimeDefOrigin::ExplicitOrElided)\n+                    | Region::LateBound(_, _, LifetimeDefOrigin::ExplicitOrElided)\n+                    | Region::EarlyBound(_, _, LifetimeDefOrigin::Error)\n+                    | Region::LateBound(_, _, LifetimeDefOrigin::Error)\n                     | Region::LateBoundAnon(..)\n                     | Region::Free(..) => {}\n                 }\n@@ -2339,14 +2352,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 match bound {\n                     hir::GenericBound::Outlives(lt) => match lt.name {\n                         hir::LifetimeName::Underscore => {\n-                            let mut err = struct_span_err!(\n-                                self.tcx.sess,\n-                                lt.span,\n-                                E0637,\n-                                \"invalid lifetime bound name: `'_`\"\n-                            );\n-                            err.span_label(lt.span, \"`'_` is a reserved lifetime name\");\n-                            err.emit();\n+                            self.tcx.sess.delay_span_bug(lt.span, \"use of `'_` in illegal place, but not caught by lowering\")\n                         }\n                         hir::LifetimeName::Static => {\n                             self.insert_lifetime(lt, Region::Static);\n@@ -2364,6 +2370,9 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                         hir::LifetimeName::Param(_) | hir::LifetimeName::Implicit => {\n                             self.resolve_lifetime_ref(lt);\n                         }\n+                        hir::LifetimeName::Error => {\n+                            // No need to do anything, error already reported.\n+                        }\n                     }\n                     _ => bug!(),\n                 }"}, {"sha": "bc5f688729c368fa653bf2910f744246fe454261", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -2074,6 +2074,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExplicitOutlivesRequirements {\n                     hir::GenericParamKind::Type { .. } => {\n                         match param.name {\n                             hir::ParamName::Fresh(_) => { continue; },\n+                            hir::ParamName::Error => { continue; },\n                             hir::ParamName::Plain(name) => name.to_string()\n                         }\n                     }"}, {"sha": "ab80eaba699242b9c7467ec5e835dd9848af97ca", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -563,6 +563,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let lifetime = self.try_match_adt_and_generic_args(substs, needle_fr, args, search_stack)?;\n         match lifetime.name {\n             hir::LifetimeName::Param(_)\n+            | hir::LifetimeName::Error\n             | hir::LifetimeName::Static\n             | hir::LifetimeName::Underscore => {\n                 let region_name = self.synthesize_region_name(counter);"}, {"sha": "713e267543269782bca472b3d5d818906276c909", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -816,7 +816,10 @@ fn check_variances_for_type_defn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n \n         let param = &hir_generics.params[index];\n-        report_bivariance(tcx, param.span, param.name.ident().name);\n+        match param.name {\n+            hir::ParamName::Error => { }\n+            _ => report_bivariance(tcx, param.span, param.name.ident().name),\n+        }\n     }\n }\n "}, {"sha": "b4f769a749f80ae3b5484fb9354d7be7c44892ec", "filename": "src/test/ui/error-codes/E0637.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Ferror-codes%2FE0637.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Ferror-codes%2FE0637.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0637.rs?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct Foo<'a: '_>(&'a u8); //~ ERROR invalid lifetime bound name: `'_`\n-fn foo<'a: '_>(_: &'a u8) {} //~ ERROR invalid lifetime bound name: `'_`\n+struct Foo<'a: '_>(&'a u8); //~ ERROR cannot be used here\n+fn foo<'a: '_>(_: &'a u8) {} //~ ERROR cannot be used here\n \n struct Bar<'a>(&'a u8);\n-impl<'a: '_> Bar<'a> { //~ ERROR invalid lifetime bound name: `'_`\n+impl<'a: '_> Bar<'a> { //~ ERROR cannot be used here\n   fn bar() {}\n }\n "}, {"sha": "2a4545fc43d08d193293e3b8ec95fd9ace0ab77b", "filename": "src/test/ui/error-codes/E0637.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Ferror-codes%2FE0637.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Ferror-codes%2FE0637.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0637.stderr?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -1,19 +1,19 @@\n-error[E0637]: invalid lifetime bound name: `'_`\n+error[E0637]: `'_` cannot be used here\n   --> $DIR/E0637.rs:11:16\n    |\n-LL | struct Foo<'a: '_>(&'a u8); //~ ERROR invalid lifetime bound name: `'_`\n+LL | struct Foo<'a: '_>(&'a u8); //~ ERROR cannot be used here\n    |                ^^ `'_` is a reserved lifetime name\n \n-error[E0637]: invalid lifetime bound name: `'_`\n+error[E0637]: `'_` cannot be used here\n   --> $DIR/E0637.rs:12:12\n    |\n-LL | fn foo<'a: '_>(_: &'a u8) {} //~ ERROR invalid lifetime bound name: `'_`\n+LL | fn foo<'a: '_>(_: &'a u8) {} //~ ERROR cannot be used here\n    |            ^^ `'_` is a reserved lifetime name\n \n-error[E0637]: invalid lifetime bound name: `'_`\n+error[E0637]: `'_` cannot be used here\n   --> $DIR/E0637.rs:15:10\n    |\n-LL | impl<'a: '_> Bar<'a> { //~ ERROR invalid lifetime bound name: `'_`\n+LL | impl<'a: '_> Bar<'a> { //~ ERROR cannot be used here\n    |          ^^ `'_` is a reserved lifetime name\n \n error: aborting due to 3 previous errors"}, {"sha": "a851e6b2071b26be0cbe770a573c92536869210d", "filename": "src/test/ui/underscore-lifetime/in-binder.Rust2015.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-binder.Rust2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-binder.Rust2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-binder.Rust2015.stderr?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -0,0 +1,46 @@\n+error[E0637]: `'_` cannot be used here\n+  --> $DIR/in-binder.rs:12:6\n+   |\n+LL | impl<'_> IceCube<'_> {}\n+   |      ^^ `'_` is a reserved lifetime name\n+\n+error[E0637]: `'_` cannot be used here\n+  --> $DIR/in-binder.rs:17:15\n+   |\n+LL | struct Struct<'_> {\n+   |               ^^ `'_` is a reserved lifetime name\n+\n+error[E0637]: `'_` cannot be used here\n+  --> $DIR/in-binder.rs:23:11\n+   |\n+LL | enum Enum<'_> {\n+   |           ^^ `'_` is a reserved lifetime name\n+\n+error[E0637]: `'_` cannot be used here\n+  --> $DIR/in-binder.rs:29:13\n+   |\n+LL | union Union<'_> {\n+   |             ^^ `'_` is a reserved lifetime name\n+\n+error[E0637]: `'_` cannot be used here\n+  --> $DIR/in-binder.rs:35:13\n+   |\n+LL | trait Trait<'_> {\n+   |             ^^ `'_` is a reserved lifetime name\n+\n+error[E0637]: `'_` cannot be used here\n+  --> $DIR/in-binder.rs:40:8\n+   |\n+LL | fn foo<'_>() {\n+   |        ^^ `'_` is a reserved lifetime name\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/in-binder.rs:12:18\n+   |\n+LL | impl<'_> IceCube<'_> {}\n+   |                  ^^ expected lifetime parameter\n+\n+error: aborting due to 7 previous errors\n+\n+Some errors occurred: E0106, E0637.\n+For more information about an error, try `rustc --explain E0106`."}, {"sha": "77da3038724b885384dcd8be0de6fac7ee47ce72", "filename": "src/test/ui/underscore-lifetime/in-binder.Rust2018.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-binder.Rust2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-binder.Rust2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-binder.Rust2018.stderr?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -0,0 +1,39 @@\n+error[E0637]: `'_` cannot be used here\n+  --> $DIR/in-binder.rs:12:6\n+   |\n+LL | impl<'_> IceCube<'_> {}\n+   |      ^^ `'_` is a reserved lifetime name\n+\n+error[E0637]: `'_` cannot be used here\n+  --> $DIR/in-binder.rs:17:15\n+   |\n+LL | struct Struct<'_> {\n+   |               ^^ `'_` is a reserved lifetime name\n+\n+error[E0637]: `'_` cannot be used here\n+  --> $DIR/in-binder.rs:23:11\n+   |\n+LL | enum Enum<'_> {\n+   |           ^^ `'_` is a reserved lifetime name\n+\n+error[E0637]: `'_` cannot be used here\n+  --> $DIR/in-binder.rs:29:13\n+   |\n+LL | union Union<'_> {\n+   |             ^^ `'_` is a reserved lifetime name\n+\n+error[E0637]: `'_` cannot be used here\n+  --> $DIR/in-binder.rs:35:13\n+   |\n+LL | trait Trait<'_> {\n+   |             ^^ `'_` is a reserved lifetime name\n+\n+error[E0637]: `'_` cannot be used here\n+  --> $DIR/in-binder.rs:40:8\n+   |\n+LL | fn foo<'_>() {\n+   |        ^^ `'_` is a reserved lifetime name\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0637`."}, {"sha": "fc0602a0ba96888b12968eb9969a98561afd597b", "filename": "src/test/ui/underscore-lifetime/in-binder.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-binder.rs?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -0,0 +1,45 @@\n+// Check that we error when `'_` appears as the name of a lifetime parameter.\n+//\n+// Regression test for #52098.\n+\n+// revisions: Rust2015 Rust2018\n+//[Rust2018] edition:2018\n+\n+struct IceCube<'a> {\n+    v: Vec<&'a char>\n+}\n+\n+impl<'_> IceCube<'_> {}\n+//[Rust2015]~^ ERROR\n+//[Rust2015]~| ERROR\n+//[Rust2018]~^^^ ERROR\n+\n+struct Struct<'_> {\n+//[Rust2015]~^ ERROR\n+//[Rust2018]~^^ ERROR\n+    v: Vec<&'static char>\n+}\n+\n+enum Enum<'_> {\n+//[Rust2015]~^ ERROR\n+//[Rust2018]~^^ ERROR\n+    Variant\n+}\n+\n+union Union<'_> {\n+//[Rust2015]~^ ERROR\n+//[Rust2018]~^^ ERROR\n+    a: u32\n+}\n+\n+trait Trait<'_> {\n+//[Rust2015]~^ ERROR\n+//[Rust2018]~^^ ERROR\n+}\n+\n+fn foo<'_>() {\n+    //[Rust2015]~^ ERROR\n+    //[Rust2018]~^^ ERROR\n+}\n+\n+fn main() {}"}, {"sha": "959254b8bb8156023bedf7b8d99584ca4913dc24", "filename": "src/test/ui/underscore-lifetime/in-fn-return-illegal.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.rs?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that the `'_` used in structs/enums gives an error.\n+\n+use std::fmt::Debug;\n+\n+fn foo(x: &u32, y: &u32) -> &'_ u32 { loop { } } //~ ERROR\n+\n+fn main() { }"}, {"sha": "6536e6b278eda082c1b61d7b4bd03b7347f25c50", "filename": "src/test/ui/underscore-lifetime/in-fn-return-illegal.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -0,0 +1,11 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/in-fn-return-illegal.rs:15:30\n+   |\n+LL | fn foo(x: &u32, y: &u32) -> &'_ u32 { loop { } } //~ ERROR\n+   |                              ^^ expected lifetime parameter\n+   |\n+   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "be605ed50a5cdeb87af0f92aa50da2cfe37d8740", "filename": "src/test/ui/underscore-lifetime/in-struct.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-struct.rs?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that the `'_` used in structs/enums gives an error.\n+\n+use std::fmt::Debug;\n+\n+struct Foo {\n+    x: &'_ u32, //~ ERROR\n+}\n+\n+struct Bar {\n+    Variant(&'_ u32), //~ ERROR\n+}\n+\n+fn main() { }"}, {"sha": "b60b3db408d31f7620283a31cbde234e7091f872", "filename": "src/test/ui/underscore-lifetime/in-struct.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-struct.stderr?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -0,0 +1,15 @@\n+error: expected `:`, found `(`\n+  --> $DIR/in-struct.rs:20:12\n+   |\n+LL |     Variant(&'_ u32), //~ ERROR\n+   |            ^ expected `:`\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/in-struct.rs:16:9\n+   |\n+LL |     x: &'_ u32, //~ ERROR\n+   |         ^^ expected lifetime parameter\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "2652fc62bb6228e93f152cf8f945f45302ac8a6f", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-binders.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.rs?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -15,13 +15,13 @@ impl Foo<'_> { //~ ERROR missing lifetime specifier\n     fn x() {}\n }\n \n-fn foo<'_> //~ ERROR invalid lifetime parameter name: `'_`\n+fn foo<'_> //~ ERROR cannot be used here\n (_: Foo<'_>) {}\n \n trait Meh<'a> {}\n impl<'a> Meh<'a> for u8 {}\n \n-fn meh() -> Box<for<'_> Meh<'_>> //~ ERROR invalid lifetime parameter name: `'_`\n+fn meh() -> Box<for<'_> Meh<'_>> //~ ERROR cannot be used here\n //~^ ERROR missing lifetime specifier\n {\n   Box::new(5u8)"}, {"sha": "fc9f3e642d4026993c11373f94b3042c432e717a", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-binders.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -1,3 +1,15 @@\n+error[E0637]: `'_` cannot be used here\n+  --> $DIR/underscore-lifetime-binders.rs:18:8\n+   |\n+LL | fn foo<'_> //~ ERROR cannot be used here\n+   |        ^^ `'_` is a reserved lifetime name\n+\n+error[E0637]: `'_` cannot be used here\n+  --> $DIR/underscore-lifetime-binders.rs:24:21\n+   |\n+LL | fn meh() -> Box<for<'_> Meh<'_>> //~ ERROR cannot be used here\n+   |                     ^^ `'_` is a reserved lifetime name\n+\n error[E0106]: missing lifetime specifier\n   --> $DIR/underscore-lifetime-binders.rs:12:17\n    |\n@@ -10,22 +22,10 @@ error[E0106]: missing lifetime specifier\n LL | impl Foo<'_> { //~ ERROR missing lifetime specifier\n    |          ^^ expected lifetime parameter\n \n-error[E0262]: invalid lifetime parameter name: `'_`\n-  --> $DIR/underscore-lifetime-binders.rs:18:8\n-   |\n-LL | fn foo<'_> //~ ERROR invalid lifetime parameter name: `'_`\n-   |        ^^ '_ is a reserved lifetime name\n-\n-error[E0262]: invalid lifetime parameter name: `'_`\n-  --> $DIR/underscore-lifetime-binders.rs:24:21\n-   |\n-LL | fn meh() -> Box<for<'_> Meh<'_>> //~ ERROR invalid lifetime parameter name: `'_`\n-   |                     ^^ '_ is a reserved lifetime name\n-\n error[E0106]: missing lifetime specifier\n   --> $DIR/underscore-lifetime-binders.rs:24:29\n    |\n-LL | fn meh() -> Box<for<'_> Meh<'_>> //~ ERROR invalid lifetime parameter name: `'_`\n+LL | fn meh() -> Box<for<'_> Meh<'_>> //~ ERROR cannot be used here\n    |                             ^^ expected lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n@@ -41,5 +41,5 @@ LL | fn foo2(_: &'_ u8, y: &'_ u8) -> &'_ u8 { y } //~ ERROR missing lifetime sp\n \n error: aborting due to 6 previous errors\n \n-Some errors occurred: E0106, E0262.\n+Some errors occurred: E0106, E0637.\n For more information about an error, try `rustc --explain E0106`."}, {"sha": "b514ff43860750c545b11892b5c841507cac28aa", "filename": "src/test/ui/underscore-lifetime/underscore-outlives-bounds.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-outlives-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-outlives-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-outlives-bounds.rs?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -0,0 +1,8 @@\n+// Regression test to check that `'b: '_` gets an error, because it's\n+// basically useless.\n+//\n+// #54902\n+\n+trait Foo<'a> {}\n+impl<'b: '_> Foo<'b> for i32 {}\n+fn main() { }"}, {"sha": "4b38a26f957f96c915b6ef4be937c16f66a00a2d", "filename": "src/test/ui/underscore-lifetime/underscore-outlives-bounds.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-outlives-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-outlives-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-outlives-bounds.stderr?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -0,0 +1,9 @@\n+error[E0637]: `'_` cannot be used here\n+  --> $DIR/underscore-outlives-bounds.rs:7:10\n+   |\n+LL | impl<'b: '_> Foo<'b> for i32 {}\n+   |          ^^ `'_` is a reserved lifetime name\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0637`."}, {"sha": "ee6b35d878e8b400e23283a6a04152cebc8c46fb", "filename": "src/test/ui/underscore-lifetime/where-clause-inherent-impl-ampersand.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-inherent-impl-ampersand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-inherent-impl-ampersand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-inherent-impl-ampersand.rs?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -0,0 +1,18 @@\n+// revisions: rust2015 rust2018\n+//[rust2018] edition:2018\n+\n+trait WithType<T> {}\n+trait WithRegion<'a> { }\n+\n+struct Foo<T> {\n+    t: T\n+}\n+\n+impl<T> Foo<T>\n+where\n+    T: WithType<&u32>\n+//[rust2015]~^ ERROR\n+//[rust2018]~^^ ERROR\n+{ }\n+\n+fn main() {}"}, {"sha": "fe726cb49c73737a3c244d520e5ceba3dbbf7c67", "filename": "src/test/ui/underscore-lifetime/where-clause-inherent-impl-ampersand.rust2015.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-inherent-impl-ampersand.rust2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-inherent-impl-ampersand.rust2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-inherent-impl-ampersand.rust2015.stderr?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -0,0 +1,9 @@\n+error[E0637]: `&` without an explicit lifetime name cannot be used here\n+  --> $DIR/where-clause-inherent-impl-ampersand.rs:13:17\n+   |\n+LL |     T: WithType<&u32>\n+   |                 ^ explicit lifetime name needed here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0637`."}, {"sha": "fe726cb49c73737a3c244d520e5ceba3dbbf7c67", "filename": "src/test/ui/underscore-lifetime/where-clause-inherent-impl-ampersand.rust2018.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-inherent-impl-ampersand.rust2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-inherent-impl-ampersand.rust2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-inherent-impl-ampersand.rust2018.stderr?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -0,0 +1,9 @@\n+error[E0637]: `&` without an explicit lifetime name cannot be used here\n+  --> $DIR/where-clause-inherent-impl-ampersand.rs:13:17\n+   |\n+LL |     T: WithType<&u32>\n+   |                 ^ explicit lifetime name needed here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0637`."}, {"sha": "55aecbc9fcffe2fd0e126d4ce49a6a9c9d1b701d", "filename": "src/test/ui/underscore-lifetime/where-clause-inherent-impl-underscore.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-inherent-impl-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-inherent-impl-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-inherent-impl-underscore.rs?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -0,0 +1,18 @@\n+// revisions: rust2015 rust2018\n+//[rust2018] edition:2018\n+\n+trait WithType<T> {}\n+trait WithRegion<'a> { }\n+\n+struct Foo<T> {\n+    t: T\n+}\n+\n+impl<T> Foo<T>\n+where\n+    T: WithRegion<'_>\n+//[rust2015]~^ ERROR\n+//[rust2018]~^^ ERROR\n+{ }\n+\n+fn main() {}"}, {"sha": "95939fd6b7e0374880dc80125675d197447865c8", "filename": "src/test/ui/underscore-lifetime/where-clause-inherent-impl-underscore.rust2015.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-inherent-impl-underscore.rust2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-inherent-impl-underscore.rust2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-inherent-impl-underscore.rust2015.stderr?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -0,0 +1,9 @@\n+error[E0637]: `'_` cannot be used here\n+  --> $DIR/where-clause-inherent-impl-underscore.rs:13:19\n+   |\n+LL |     T: WithRegion<'_>\n+   |                   ^^ `'_` is a reserved lifetime name\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0637`."}, {"sha": "95939fd6b7e0374880dc80125675d197447865c8", "filename": "src/test/ui/underscore-lifetime/where-clause-inherent-impl-underscore.rust2018.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-inherent-impl-underscore.rust2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-inherent-impl-underscore.rust2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-inherent-impl-underscore.rust2018.stderr?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -0,0 +1,9 @@\n+error[E0637]: `'_` cannot be used here\n+  --> $DIR/where-clause-inherent-impl-underscore.rs:13:19\n+   |\n+LL |     T: WithRegion<'_>\n+   |                   ^^ `'_` is a reserved lifetime name\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0637`."}, {"sha": "47de6a7af9c081e1bd757214e189e51941a96522", "filename": "src/test/ui/underscore-lifetime/where-clause-trait-impl-region.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-trait-impl-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-trait-impl-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-trait-impl-region.rs?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -0,0 +1,16 @@\n+// revisions: rust2015 rust2018\n+//[rust2018] edition:2018\n+\n+trait WithType<T> {}\n+trait WithRegion<'a> { }\n+\n+trait Foo { }\n+\n+impl<T> Foo for Vec<T>\n+where\n+    T: WithType<&u32>\n+//[rust2015]~^ ERROR\n+//[rust2018]~^^ ERROR\n+{ }\n+\n+fn main() {}"}, {"sha": "fbd14de21078b1440a47035103bbf782f88edc9d", "filename": "src/test/ui/underscore-lifetime/where-clause-trait-impl-region.rust2015.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-trait-impl-region.rust2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-trait-impl-region.rust2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-trait-impl-region.rust2015.stderr?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -0,0 +1,9 @@\n+error[E0637]: `&` without an explicit lifetime name cannot be used here\n+  --> $DIR/where-clause-trait-impl-region.rs:11:17\n+   |\n+LL |     T: WithType<&u32>\n+   |                 ^ explicit lifetime name needed here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0637`."}, {"sha": "fbd14de21078b1440a47035103bbf782f88edc9d", "filename": "src/test/ui/underscore-lifetime/where-clause-trait-impl-region.rust2018.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-trait-impl-region.rust2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-trait-impl-region.rust2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-trait-impl-region.rust2018.stderr?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -0,0 +1,9 @@\n+error[E0637]: `&` without an explicit lifetime name cannot be used here\n+  --> $DIR/where-clause-trait-impl-region.rs:11:17\n+   |\n+LL |     T: WithType<&u32>\n+   |                 ^ explicit lifetime name needed here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0637`."}, {"sha": "67db6be5361813f13b129351e5c03f32d80c7690", "filename": "src/test/ui/underscore-lifetime/where-clause-trait-impl-underscore.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-trait-impl-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-trait-impl-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-trait-impl-underscore.rs?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -0,0 +1,16 @@\n+// revisions: rust2015 rust2018\n+//[rust2018] edition:2018\n+\n+trait WithType<T> {}\n+trait WithRegion<'a> { }\n+\n+trait Foo { }\n+\n+impl<T> Foo for Vec<T>\n+where\n+    T: WithRegion<'_>\n+//[rust2015]~^ ERROR\n+//[rust2018]~^^ ERROR\n+{ }\n+\n+fn main() {}"}, {"sha": "92caff0dcde9977d669106c969a4bab8540e72df", "filename": "src/test/ui/underscore-lifetime/where-clause-trait-impl-underscore.rust2015.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-trait-impl-underscore.rust2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-trait-impl-underscore.rust2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-trait-impl-underscore.rust2015.stderr?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -0,0 +1,9 @@\n+error[E0637]: `'_` cannot be used here\n+  --> $DIR/where-clause-trait-impl-underscore.rs:11:19\n+   |\n+LL |     T: WithRegion<'_>\n+   |                   ^^ `'_` is a reserved lifetime name\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0637`."}, {"sha": "92caff0dcde9977d669106c969a4bab8540e72df", "filename": "src/test/ui/underscore-lifetime/where-clause-trait-impl-underscore.rust2018.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-trait-impl-underscore.rust2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-trait-impl-underscore.rust2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clause-trait-impl-underscore.rust2018.stderr?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -0,0 +1,9 @@\n+error[E0637]: `'_` cannot be used here\n+  --> $DIR/where-clause-trait-impl-underscore.rs:11:19\n+   |\n+LL |     T: WithRegion<'_>\n+   |                   ^^ `'_` is a reserved lifetime name\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0637`."}, {"sha": "da91718fec334c3cfe0b54b00e7c29af7f4b5184", "filename": "src/test/ui/underscore-lifetime/where-clauses.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clauses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clauses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clauses.rs?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -0,0 +1,3 @@\n+trait Foo<'a> {}\n+impl<'b: '_> Foo<'b> for i32 {}\n+fn main() { }"}, {"sha": "98ac5b5b3dc40bf2981272a5a5a02601786cefa4", "filename": "src/test/ui/underscore-lifetime/where-clauses.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clauses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f4d100472c7ea84091fc5a2b028d517cf6cdaf1/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clauses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fwhere-clauses.stderr?ref=1f4d100472c7ea84091fc5a2b028d517cf6cdaf1", "patch": "@@ -0,0 +1,9 @@\n+error[E0637]: `'_` cannot be used here\n+  --> $DIR/where-clauses.rs:2:10\n+   |\n+LL | impl<'b: '_> Foo<'b> for i32 {}\n+   |          ^^ `'_` is a reserved lifetime name\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0637`."}]}