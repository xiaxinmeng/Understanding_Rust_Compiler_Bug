{"sha": "7ee0aeacaffb3dc259a9e93a752345cf6ce35a1e", "node_id": "C_kwDOAAsO6NoAKDdlZTBhZWFjYWZmYjNkYzI1OWE5ZTkzYTc1MjM0NWNmNmNlMzVhMWU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-21T22:14:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-21T22:14:00Z"}, "message": "Rollup merge of #103339 - Rageking8:fix-some-typos, r=fee1-dead\n\nFix some typos", "tree": {"sha": "c642f846e3acf8dfc6a7764d538fed33f7b25660", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c642f846e3acf8dfc6a7764d538fed33f7b25660"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ee0aeacaffb3dc259a9e93a752345cf6ce35a1e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjUxmoCRBK7hj4Ov3rIwAAI+IIAIELSpi4riiW/7VAJua4i0xW\nPolDvwpcacJgfTmTjkpa9/GFag3P4LWiVeO1mlObPYWzCmDswALr9HuO9ZvtsTsR\n8xVLVUuT4pSSgePpjvl83Yur3aHg6riYRNPlN+sCuBTwhELqumRFoZoToZqv2KFl\nmFQWw+V8DjnorkupIlybY8Qt2eAxLKiQCFwKumQROGK5dl+POP8l/Ph3nyKYRzvG\n0naRy7h5iTT+oHvNgbnazA3f5yTUBL/vhdV3VELRvtohaJDi/uB6e5cBh5uMHUy4\nHyLXnxN80mkPCmeJrDVZXeVd7qLKl9eb2QOb0NGOd6hbQIJWoBN2js3uylf9q48=\n=8xeH\n-----END PGP SIGNATURE-----\n", "payload": "tree c642f846e3acf8dfc6a7764d538fed33f7b25660\nparent e67f09ac799e4a6e4e90147d62c94c9ddcc94197\nparent 62a2a1d257e6776bcd669ca5dd7a2c7a30017ce2\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1666390440 +0200\ncommitter GitHub <noreply@github.com> 1666390440 +0200\n\nRollup merge of #103339 - Rageking8:fix-some-typos, r=fee1-dead\n\nFix some typos\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ee0aeacaffb3dc259a9e93a752345cf6ce35a1e", "html_url": "https://github.com/rust-lang/rust/commit/7ee0aeacaffb3dc259a9e93a752345cf6ce35a1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ee0aeacaffb3dc259a9e93a752345cf6ce35a1e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e67f09ac799e4a6e4e90147d62c94c9ddcc94197", "url": "https://api.github.com/repos/rust-lang/rust/commits/e67f09ac799e4a6e4e90147d62c94c9ddcc94197", "html_url": "https://github.com/rust-lang/rust/commit/e67f09ac799e4a6e4e90147d62c94c9ddcc94197"}, {"sha": "62a2a1d257e6776bcd669ca5dd7a2c7a30017ce2", "url": "https://api.github.com/repos/rust-lang/rust/commits/62a2a1d257e6776bcd669ca5dd7a2c7a30017ce2", "html_url": "https://github.com/rust-lang/rust/commit/62a2a1d257e6776bcd669ca5dd7a2c7a30017ce2"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "406f0270dcc1b50587a35354ad677152f7287f47", "filename": "compiler/rustc_data_structures/src/sso/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ee0aeacaffb3dc259a9e93a752345cf6ce35a1e/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee0aeacaffb3dc259a9e93a752345cf6ce35a1e/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs?ref=7ee0aeacaffb3dc259a9e93a752345cf6ce35a1e", "patch": "@@ -27,7 +27,7 @@ pub struct SsoHashSet<T> {\n     map: SsoHashMap<T, ()>,\n }\n \n-/// Adapter function used ot return\n+/// Adapter function used to return\n /// result if SsoHashMap functions into\n /// result SsoHashSet should return.\n #[inline(always)]"}, {"sha": "a7e86141a04ee3ff3f759684506361279c914377", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ee0aeacaffb3dc259a9e93a752345cf6ce35a1e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee0aeacaffb3dc259a9e93a752345cf6ce35a1e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=7ee0aeacaffb3dc259a9e93a752345cf6ce35a1e", "patch": "@@ -51,7 +51,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         match ty::Instance::resolve_opt_const_arg(\n             self, param_env,\n-            // FIXME: maybe have a seperate version for resolving mir::UnevaluatedConst?\n+            // FIXME: maybe have a separate version for resolving mir::UnevaluatedConst?\n             ct.def, ct.substs,\n         ) {\n             Ok(Some(instance)) => {"}, {"sha": "c8276854016f0bc273fe044403fdd786f6b1a8f2", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ee0aeacaffb3dc259a9e93a752345cf6ce35a1e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee0aeacaffb3dc259a9e93a752345cf6ce35a1e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=7ee0aeacaffb3dc259a9e93a752345cf6ce35a1e", "patch": "@@ -264,7 +264,7 @@ fn project_and_unify_type<'cx, 'tcx>(\n     };\n     debug!(?normalized, ?obligations, \"project_and_unify_type result\");\n     let actual = obligation.predicate.term;\n-    // For an example where this is neccessary see src/test/ui/impl-trait/nested-return-type2.rs\n+    // For an example where this is necessary see src/test/ui/impl-trait/nested-return-type2.rs\n     // This allows users to omit re-mentioning all bounds on an associated type and just use an\n     // `impl Trait` for the assoc type to add more bounds.\n     let InferOk { value: actual, obligations: new } ="}, {"sha": "dec668bec10edd262f6b5133b62c89cbe154d646", "filename": "src/test/ui/generic-associated-types/bugs/issue-91762.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ee0aeacaffb3dc259a9e93a752345cf6ce35a1e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-91762.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee0aeacaffb3dc259a9e93a752345cf6ce35a1e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-91762.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-91762.rs?ref=7ee0aeacaffb3dc259a9e93a752345cf6ce35a1e", "patch": "@@ -1,7 +1,7 @@\n // check-fail\n // known-bug\n \n-// We almost certaintly want this to pass, but\n+// We almost certainly want this to pass, but\n // it's particularly difficult currently, because we need a way of specifying\n // that `<Self::Base as Functor>::With<T> = Self` without using that when we have\n // a `U`. See `https://github.com/rust-lang/rust/pull/92728` for a (hacky)"}, {"sha": "a5442dd82f028171868e7ca89c238f40f212f0c2", "filename": "src/test/ui/let-else/let-else-non-diverging.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ee0aeacaffb3dc259a9e93a752345cf6ce35a1e/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee0aeacaffb3dc259a9e93a752345cf6ce35a1e/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.rs?ref=7ee0aeacaffb3dc259a9e93a752345cf6ce35a1e", "patch": "@@ -11,7 +11,7 @@ fn main() {\n \n     // Ensure that uninhabited types do not \"diverge\".\n     // This might be relaxed in the future, but when it is,\n-    // it should be an explicitly wanted descision.\n+    // it should be an explicitly wanted decision.\n     let Some(x) = Some(1) else { foo::<Uninhabited>() }; //~ ERROR does not diverge\n }\n "}, {"sha": "6986ad6217240423c3772114e11ddbb9fa3c943a", "filename": "src/test/ui/traits/trait-upcasting/multiple-occurrence-ambiguousity.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7ee0aeacaffb3dc259a9e93a752345cf6ce35a1e/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmultiple-occurrence-ambiguousity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ee0aeacaffb3dc259a9e93a752345cf6ce35a1e/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmultiple-occurrence-ambiguousity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmultiple-occurrence-ambiguousity.rs?ref=7ee0aeacaffb3dc259a9e93a752345cf6ce35a1e", "previous_filename": "src/test/ui/traits/trait-upcasting/multiple-occurence-ambiguousity.rs"}, {"sha": "9564813512c4af5bf9e8eb0c42a76a802efa43b9", "filename": "src/test/ui/traits/trait-upcasting/multiple-occurrence-ambiguousity.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ee0aeacaffb3dc259a9e93a752345cf6ce35a1e/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmultiple-occurrence-ambiguousity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ee0aeacaffb3dc259a9e93a752345cf6ce35a1e/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmultiple-occurrence-ambiguousity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmultiple-occurrence-ambiguousity.stderr?ref=7ee0aeacaffb3dc259a9e93a752345cf6ce35a1e", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/multiple-occurence-ambiguousity.rs:21:26\n+  --> $DIR/multiple-occurrence-ambiguousity.rs:21:26\n    |\n LL |     let t: &dyn Bar<_> = s;\n    |            -----------   ^ expected trait `Bar`, found trait `Foo`", "previous_filename": "src/test/ui/traits/trait-upcasting/multiple-occurence-ambiguousity.stderr"}]}