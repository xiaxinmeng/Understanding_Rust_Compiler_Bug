{"sha": "a423fa7b4683e6d8cf3abaaaf1567fbaccfb266b", "node_id": "C_kwDOAAsO6NoAKGE0MjNmYTdiNDY4M2U2ZDhjZjNhYmFhYWYxNTY3ZmJhY2NmYjI2NmI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-23T05:18:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-23T05:18:06Z"}, "message": "Rollup merge of #108208 - cjgillot:flood-enum, r=oli-obk\n\nCorrectly handle aggregates in DataflowConstProp\n\nThe previous implementation from https://github.com/rust-lang/rust/pull/107411 flooded target of an aggregate assignment with `Bottom`, corresponding to the `deinit` that the interpreter does.\n\nAs a consequence, when assigning `target = Enum::Variant#i(...)` all the `(target as Variant#j)` were at `Bottom` while they should have been `Top`.\n\nThis PR replaces that flooding with `Top`.\n\nAside, it corrects a second bug where the wrong place would be used to assign to enum variant fields, resulting to nothing happening.\n\nFixes https://github.com/rust-lang/rust/issues/108166", "tree": {"sha": "4a26c3f7bf5ed17963e55a6f98a2b8348302ea63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a26c3f7bf5ed17963e55a6f98a2b8348302ea63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a423fa7b4683e6d8cf3abaaaf1567fbaccfb266b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj9vcOCRBK7hj4Ov3rIwAAVEkIAE36iBPYtYDhPxLfTa+kUmBX\nTXYOTkJTYEVPa0uPDjol+PKdN4PBLYcOU/bs4ZcmYhgzIs4N9ei0/N/XAzVGY6J3\nvfsrClIeOdYpxJisW6zW38ce6FwH8rCipcqIG2dzh4CG75kb6PzMRk8OO6nDqXlv\nmwSpgaD4+o78tN4R7Sjr2ZYPp+3SnfONYA4AI/lRnWvHBEdIv9RFYCje4olRLIVu\n97qiGD/XzU/BEw0qOrN4u/PtCI1v50LemzK6rZnKnrfS25MPCWmK+LBnZwcG8TN4\nK9WrFEPe9ZvzUM8/vGEw3WLKASx3bLKwsKm0yismFnooScFQiyoRK5BxbRpKXCQ=\n=vlnS\n-----END PGP SIGNATURE-----\n", "payload": "tree 4a26c3f7bf5ed17963e55a6f98a2b8348302ea63\nparent ef27e438074252c2c36250dc0f54e89f7da4999d\nparent efb468866e5757d404c220c812f52f8657b2fdce\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1677129486 +0100\ncommitter GitHub <noreply@github.com> 1677129486 +0100\n\nRollup merge of #108208 - cjgillot:flood-enum, r=oli-obk\n\nCorrectly handle aggregates in DataflowConstProp\n\nThe previous implementation from https://github.com/rust-lang/rust/pull/107411 flooded target of an aggregate assignment with `Bottom`, corresponding to the `deinit` that the interpreter does.\n\nAs a consequence, when assigning `target = Enum::Variant#i(...)` all the `(target as Variant#j)` were at `Bottom` while they should have been `Top`.\n\nThis PR replaces that flooding with `Top`.\n\nAside, it corrects a second bug where the wrong place would be used to assign to enum variant fields, resulting to nothing happening.\n\nFixes https://github.com/rust-lang/rust/issues/108166\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a423fa7b4683e6d8cf3abaaaf1567fbaccfb266b", "html_url": "https://github.com/rust-lang/rust/commit/a423fa7b4683e6d8cf3abaaaf1567fbaccfb266b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a423fa7b4683e6d8cf3abaaaf1567fbaccfb266b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef27e438074252c2c36250dc0f54e89f7da4999d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef27e438074252c2c36250dc0f54e89f7da4999d", "html_url": "https://github.com/rust-lang/rust/commit/ef27e438074252c2c36250dc0f54e89f7da4999d"}, {"sha": "efb468866e5757d404c220c812f52f8657b2fdce", "url": "https://api.github.com/repos/rust-lang/rust/commits/efb468866e5757d404c220c812f52f8657b2fdce", "html_url": "https://github.com/rust-lang/rust/commit/efb468866e5757d404c220c812f52f8657b2fdce"}], "stats": {"total": 129, "additions": 120, "deletions": 9}, "files": [{"sha": "49ded10ba1fed68122234a02337d8671d1524a3e", "filename": "compiler/rustc_mir_transform/src/dataflow_const_prop.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a423fa7b4683e6d8cf3abaaaf1567fbaccfb266b/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a423fa7b4683e6d8cf3abaaaf1567fbaccfb266b/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs?ref=a423fa7b4683e6d8cf3abaaaf1567fbaccfb266b", "patch": "@@ -122,7 +122,10 @@ impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'_, 'tcx> {\n     ) {\n         match rvalue {\n             Rvalue::Aggregate(kind, operands) => {\n-                state.flood_with(target.as_ref(), self.map(), FlatSet::Bottom);\n+                // If we assign `target = Enum::Variant#0(operand)`,\n+                // we must make sure that all `target as Variant#i` are `Top`.\n+                state.flood(target.as_ref(), self.map());\n+\n                 if let Some(target_idx) = self.map().find(target.as_ref()) {\n                     let (variant_target, variant_index) = match **kind {\n                         AggregateKind::Tuple | AggregateKind::Closure(..) => {\n@@ -131,18 +134,21 @@ impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'_, 'tcx> {\n                         AggregateKind::Adt(def_id, variant_index, ..) => {\n                             match self.tcx.def_kind(def_id) {\n                                 DefKind::Struct => (Some(target_idx), None),\n-                                DefKind::Enum => (Some(target_idx), Some(variant_index)),\n+                                DefKind::Enum => (\n+                                    self.map.apply(target_idx, TrackElem::Variant(variant_index)),\n+                                    Some(variant_index),\n+                                ),\n                                 _ => (None, None),\n                             }\n                         }\n                         _ => (None, None),\n                     };\n-                    if let Some(target) = variant_target {\n+                    if let Some(variant_target_idx) = variant_target {\n                         for (field_index, operand) in operands.iter().enumerate() {\n-                            if let Some(field) = self\n-                                .map()\n-                                .apply(target, TrackElem::Field(Field::from_usize(field_index)))\n-                            {\n+                            if let Some(field) = self.map().apply(\n+                                variant_target_idx,\n+                                TrackElem::Field(Field::from_usize(field_index)),\n+                            ) {\n                                 let result = self.handle_operand(operand, state);\n                                 state.insert_idx(field, result, self.map());\n                             }\n@@ -151,6 +157,11 @@ impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'_, 'tcx> {\n                     if let Some(variant_index) = variant_index\n                         && let Some(discr_idx) = self.map().apply(target_idx, TrackElem::Discriminant)\n                     {\n+                        // We are assigning the discriminant as part of an aggregate.\n+                        // This discriminant can only alias a variant field's value if the operand\n+                        // had an invalid value for that type.\n+                        // Using invalid values is UB, so we are allowed to perform the assignment\n+                        // without extra flooding.\n                         let enum_ty = target.ty(self.local_decls, self.tcx).ty;\n                         if let Some(discr_val) = self.eval_discriminant(enum_ty, variant_index) {\n                             state.insert_value_idx(discr_idx, FlatSet::Elem(discr_val), &self.map);"}, {"sha": "c4002d65e5db57c7c0981d1b1a5c7b237819b754", "filename": "tests/mir-opt/dataflow-const-prop/enum.multiple.DataflowConstProp.diff", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/a423fa7b4683e6d8cf3abaaaf1567fbaccfb266b/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.multiple.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a423fa7b4683e6d8cf3abaaaf1567fbaccfb266b/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.multiple.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.multiple.DataflowConstProp.diff?ref=a423fa7b4683e6d8cf3abaaaf1567fbaccfb266b", "patch": "@@ -0,0 +1,82 @@\n+- // MIR for `multiple` before DataflowConstProp\n++ // MIR for `multiple` after DataflowConstProp\n+  \n+  fn multiple(_1: bool, _2: u8) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/enum.rs:+0:13: +0:14\n+      debug i => _2;                       // in scope 0 at $DIR/enum.rs:+0:22: +0:23\n+      let mut _0: ();                      // return place in scope 0 at $DIR/enum.rs:+0:29: +0:29\n+      let _3: std::option::Option<u8>;     // in scope 0 at $DIR/enum.rs:+1:9: +1:10\n+      let mut _4: bool;                    // in scope 0 at $DIR/enum.rs:+1:16: +1:17\n+      let mut _5: u8;                      // in scope 0 at $DIR/enum.rs:+2:14: +2:15\n+      let mut _7: isize;                   // in scope 0 at $DIR/enum.rs:+9:23: +9:30\n+      scope 1 {\n+          debug e => _3;                   // in scope 1 at $DIR/enum.rs:+1:9: +1:10\n+          let _6: u8;                      // in scope 1 at $DIR/enum.rs:+9:9: +9:10\n+          let _8: u8;                      // in scope 1 at $DIR/enum.rs:+9:28: +9:29\n+          scope 2 {\n+              debug x => _6;               // in scope 2 at $DIR/enum.rs:+9:9: +9:10\n+              let _9: u8;                  // in scope 2 at $DIR/enum.rs:+11:9: +11:10\n+              scope 4 {\n+                  debug y => _9;           // in scope 4 at $DIR/enum.rs:+11:9: +11:10\n+              }\n+          }\n+          scope 3 {\n+              debug i => _8;               // in scope 3 at $DIR/enum.rs:+9:28: +9:29\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/enum.rs:+1:9: +1:10\n+          StorageLive(_4);                 // scope 0 at $DIR/enum.rs:+1:16: +1:17\n+          _4 = _1;                         // scope 0 at $DIR/enum.rs:+1:16: +1:17\n+          switchInt(move _4) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/enum.rs:+1:16: +1:17\n+      }\n+  \n+      bb1: {\n+          StorageLive(_5);                 // scope 0 at $DIR/enum.rs:+2:14: +2:15\n+          _5 = _2;                         // scope 0 at $DIR/enum.rs:+2:14: +2:15\n+          _3 = Option::<u8>::Some(move _5); // scope 0 at $DIR/enum.rs:+2:9: +2:16\n+          StorageDead(_5);                 // scope 0 at $DIR/enum.rs:+2:15: +2:16\n+          goto -> bb3;                     // scope 0 at $DIR/enum.rs:+1:13: +5:6\n+      }\n+  \n+      bb2: {\n+          _3 = Option::<u8>::None;         // scope 0 at $DIR/enum.rs:+4:9: +4:13\n+          goto -> bb3;                     // scope 0 at $DIR/enum.rs:+1:13: +5:6\n+      }\n+  \n+      bb3: {\n+          StorageDead(_4);                 // scope 0 at $DIR/enum.rs:+5:5: +5:6\n+          StorageLive(_6);                 // scope 1 at $DIR/enum.rs:+9:9: +9:10\n+          _7 = discriminant(_3);           // scope 1 at $DIR/enum.rs:+9:19: +9:20\n+          switchInt(move _7) -> [0: bb4, 1: bb6, otherwise: bb5]; // scope 1 at $DIR/enum.rs:+9:13: +9:20\n+      }\n+  \n+      bb4: {\n+          _6 = const 0_u8;                 // scope 1 at $DIR/enum.rs:+9:45: +9:46\n+          goto -> bb7;                     // scope 1 at $DIR/enum.rs:+9:45: +9:46\n+      }\n+  \n+      bb5: {\n+          unreachable;                     // scope 1 at $DIR/enum.rs:+9:19: +9:20\n+      }\n+  \n+      bb6: {\n+          StorageLive(_8);                 // scope 1 at $DIR/enum.rs:+9:28: +9:29\n+          _8 = ((_3 as Some).0: u8);       // scope 1 at $DIR/enum.rs:+9:28: +9:29\n+          _6 = _8;                         // scope 3 at $DIR/enum.rs:+9:34: +9:35\n+          StorageDead(_8);                 // scope 1 at $DIR/enum.rs:+9:34: +9:35\n+          goto -> bb7;                     // scope 1 at $DIR/enum.rs:+9:34: +9:35\n+      }\n+  \n+      bb7: {\n+          StorageLive(_9);                 // scope 2 at $DIR/enum.rs:+11:9: +11:10\n+          _9 = _6;                         // scope 2 at $DIR/enum.rs:+11:13: +11:14\n+          _0 = const ();                   // scope 0 at $DIR/enum.rs:+0:29: +12:2\n+          StorageDead(_9);                 // scope 2 at $DIR/enum.rs:+12:1: +12:2\n+          StorageDead(_6);                 // scope 1 at $DIR/enum.rs:+12:1: +12:2\n+          StorageDead(_3);                 // scope 0 at $DIR/enum.rs:+12:1: +12:2\n+          return;                          // scope 0 at $DIR/enum.rs:+12:2: +12:2\n+      }\n+  }\n+  "}, {"sha": "79a20d7ef457dc09058ed54f19e1ee67ffa2462d", "filename": "tests/mir-opt/dataflow-const-prop/enum.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a423fa7b4683e6d8cf3abaaaf1567fbaccfb266b/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a423fa7b4683e6d8cf3abaaaf1567fbaccfb266b/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.rs?ref=a423fa7b4683e6d8cf3abaaaf1567fbaccfb266b", "patch": "@@ -46,7 +46,23 @@ fn mutate_discriminant() -> u8 {\n     )\n }\n \n+// EMIT_MIR enum.multiple.DataflowConstProp.diff\n+fn multiple(x: bool, i: u8) {\n+    let e = if x {\n+        Some(i)\n+    } else {\n+        None\n+    };\n+    // The dataflow state must have:\n+    //   discriminant(e) => Top\n+    //   (e as Some).0 => Top\n+    let x = match e { Some(i) => i, None => 0 };\n+    // Therefore, `x` should be `Top` here, and no replacement shall happen.\n+    let y = x;\n+}\n+\n fn main() {\n     simple();\n     mutate_discriminant();\n+    multiple(false, 5);\n }"}, {"sha": "22bdc35d694c1168a71a0ab12063b289418866b8", "filename": "tests/mir-opt/dataflow-const-prop/enum.simple.DataflowConstProp.diff", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a423fa7b4683e6d8cf3abaaaf1567fbaccfb266b/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.simple.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a423fa7b4683e6d8cf3abaaaf1567fbaccfb266b/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.simple.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Fenum.simple.DataflowConstProp.diff?ref=a423fa7b4683e6d8cf3abaaaf1567fbaccfb266b", "patch": "@@ -45,8 +45,10 @@\n   \n       bb3: {\n           StorageLive(_4);                 // scope 1 at $DIR/enum.rs:+2:29: +2:30\n-          _4 = ((_1 as V1).0: i32);        // scope 1 at $DIR/enum.rs:+2:29: +2:30\n-          _2 = _4;                         // scope 3 at $DIR/enum.rs:+2:35: +2:36\n+-         _4 = ((_1 as V1).0: i32);        // scope 1 at $DIR/enum.rs:+2:29: +2:30\n+-         _2 = _4;                         // scope 3 at $DIR/enum.rs:+2:35: +2:36\n++         _4 = const 0_i32;                // scope 1 at $DIR/enum.rs:+2:29: +2:30\n++         _2 = const 0_i32;                // scope 3 at $DIR/enum.rs:+2:35: +2:36\n           StorageDead(_4);                 // scope 1 at $DIR/enum.rs:+2:35: +2:36\n           goto -> bb4;                     // scope 1 at $DIR/enum.rs:+2:35: +2:36\n       }"}]}