{"sha": "ab79cf951b6d4c853d855c9b351e826be4b8233e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNzljZjk1MWI2ZDRjODUzZDg1NWM5YjM1MWU4MjZiZTRiODIzM2U=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-17T20:20:54Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-19T13:34:28Z"}, "message": "save the user-provided type immediately upon return from astconv", "tree": {"sha": "6285b673c5b4d3602fe8a4417b7cc63a9902c8c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6285b673c5b4d3602fe8a4417b7cc63a9902c8c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab79cf951b6d4c853d855c9b351e826be4b8233e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab79cf951b6d4c853d855c9b351e826be4b8233e", "html_url": "https://github.com/rust-lang/rust/commit/ab79cf951b6d4c853d855c9b351e826be4b8233e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab79cf951b6d4c853d855c9b351e826be4b8233e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d98e9e0aa6a990ec12f476c495be6720ad81f51", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d98e9e0aa6a990ec12f476c495be6720ad81f51", "html_url": "https://github.com/rust-lang/rust/commit/2d98e9e0aa6a990ec12f476c495be6720ad81f51"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "b184b77b7edd732f9d07898c2c8030f18772267b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ab79cf951b6d4c853d855c9b351e826be4b8233e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab79cf951b6d4c853d855c9b351e826be4b8233e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ab79cf951b6d4c853d855c9b351e826be4b8233e", "patch": "@@ -2357,6 +2357,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         t\n     }\n \n+    pub fn to_ty_saving_user_provided_ty(&self, ast_ty: &hir::Ty) -> Ty<'tcx> {\n+        let ty = self.to_ty(ast_ty);\n+        let c_ty = self.infcx.canonicalize_response(&ty);\n+        self.tables.borrow_mut().user_provided_tys_mut().insert(ast_ty.hir_id, c_ty);\n+        ty\n+    }\n+\n     pub fn node_ty(&self, id: hir::HirId) -> Ty<'tcx> {\n         match self.tables.borrow().node_types().get(id) {\n             Some(&t) => t,\n@@ -4153,7 +4160,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             hir::ExprKind::Cast(ref e, ref t) => {\n                 // Find the type of `e`. Supply hints based on the type we are casting to,\n                 // if appropriate.\n-                let t_cast = self.to_ty(t);\n+                let t_cast = self.to_ty_saving_user_provided_ty(t);\n                 let t_cast = self.resolve_type_vars_if_possible(&t_cast);\n                 let t_expr = self.check_expr_with_expectation(e, ExpectCastableToType(t_cast));\n                 let t_cast = self.resolve_type_vars_if_possible(&t_cast);\n@@ -4166,8 +4173,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     let mut deferred_cast_checks = self.deferred_cast_checks.borrow_mut();\n                     match cast::CastCheck::new(self, e, t_expr, t_cast, t.span, expr.span) {\n                         Ok(cast_check) => {\n-                            let c_ty = self.infcx.canonicalize_response(&t_cast);\n-                            self.tables.borrow_mut().user_provided_tys_mut().insert(t.hir_id, c_ty);\n                             deferred_cast_checks.push(cast_check);\n                             t_cast\n                         }\n@@ -4178,10 +4183,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n             }\n             hir::ExprKind::Type(ref e, ref t) => {\n-                let ty = self.to_ty(&t);\n+                let ty = self.to_ty_saving_user_provided_ty(&t);\n                 self.check_expr_eq_type(&e, ty);\n-                let c_ty = self.infcx.canonicalize_response(&ty);\n-                self.tables.borrow_mut().user_provided_tys_mut().insert(t.hir_id, c_ty);\n                 ty\n             }\n             hir::ExprKind::Array(ref args) => {"}]}