{"sha": "9ea8d5806d8adb8d717247f157651d4ed5ab8d33", "node_id": "C_kwDOAAsO6NoAKDllYThkNTgwNmQ4YWRiOGQ3MTcyNDdmMTU3NjUxZDRlZDVhYjhkMzM", "commit": {"author": {"name": "bitgaoshu", "email": "bitgaoshu@gmail.com", "date": "2022-06-24T14:17:26Z"}, "committer": {"name": "bitgaoshu", "email": "bitgaoshu@gmail.com", "date": "2022-06-24T15:04:35Z"}, "message": "fix test in qualify_method:  stay in trait path", "tree": {"sha": "9ce11b879042bd12cf734fd8ea3859b6ebd0c7f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ce11b879042bd12cf734fd8ea3859b6ebd0c7f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ea8d5806d8adb8d717247f157651d4ed5ab8d33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ea8d5806d8adb8d717247f157651d4ed5ab8d33", "html_url": "https://github.com/rust-lang/rust/commit/9ea8d5806d8adb8d717247f157651d4ed5ab8d33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ea8d5806d8adb8d717247f157651d4ed5ab8d33/comments", "author": {"login": "bitgaoshu", "id": 7943146, "node_id": "MDQ6VXNlcjc5NDMxNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/7943146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitgaoshu", "html_url": "https://github.com/bitgaoshu", "followers_url": "https://api.github.com/users/bitgaoshu/followers", "following_url": "https://api.github.com/users/bitgaoshu/following{/other_user}", "gists_url": "https://api.github.com/users/bitgaoshu/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitgaoshu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitgaoshu/subscriptions", "organizations_url": "https://api.github.com/users/bitgaoshu/orgs", "repos_url": "https://api.github.com/users/bitgaoshu/repos", "events_url": "https://api.github.com/users/bitgaoshu/events{/privacy}", "received_events_url": "https://api.github.com/users/bitgaoshu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bitgaoshu", "id": 7943146, "node_id": "MDQ6VXNlcjc5NDMxNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/7943146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitgaoshu", "html_url": "https://github.com/bitgaoshu", "followers_url": "https://api.github.com/users/bitgaoshu/followers", "following_url": "https://api.github.com/users/bitgaoshu/following{/other_user}", "gists_url": "https://api.github.com/users/bitgaoshu/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitgaoshu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitgaoshu/subscriptions", "organizations_url": "https://api.github.com/users/bitgaoshu/orgs", "repos_url": "https://api.github.com/users/bitgaoshu/repos", "events_url": "https://api.github.com/users/bitgaoshu/events{/privacy}", "received_events_url": "https://api.github.com/users/bitgaoshu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e6bff79f460701f82e01e614b890d86edbb91c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e6bff79f460701f82e01e614b890d86edbb91c7", "html_url": "https://github.com/rust-lang/rust/commit/9e6bff79f460701f82e01e614b890d86edbb91c7"}], "stats": {"total": 46, "additions": 35, "deletions": 11}, "files": [{"sha": "71d3e0b212f84dbd4b09d6e0782bd51fa06f5119", "filename": "crates/ide-assists/src/handlers/qualify_method_call.rs", "status": "modified", "additions": 34, "deletions": 10, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9ea8d5806d8adb8d717247f157651d4ed5ab8d33/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea8d5806d8adb8d717247f157651d4ed5ab8d33/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs?ref=9ea8d5806d8adb8d717247f157651d4ed5ab8d33", "patch": "@@ -1,8 +1,5 @@\n-use hir::{ItemInNs, ModuleDef};\n-use ide_db::{\n-    assists::{AssistId, AssistKind},\n-    imports::import_assets::item_for_path_search,\n-};\n+use hir::{db::HirDatabase, AsAssocItem, AssocItem, AssocItemContainer, ItemInNs, ModuleDef};\n+use ide_db::assists::{AssistId, AssistKind};\n use syntax::{ast, AstNode};\n \n use crate::{\n@@ -67,6 +64,33 @@ pub(crate) fn qualify_method_call(acc: &mut Assists, ctx: &AssistContext) -> Opt\n     Some(())\n }\n \n+fn item_for_path_search(db: &dyn HirDatabase, item: ItemInNs) -> Option<ItemInNs> {\n+    Some(match item {\n+        ItemInNs::Types(_) | ItemInNs::Values(_) => match item_as_assoc(db, item) {\n+            Some(assoc_item) => match assoc_item.container(db) {\n+                AssocItemContainer::Trait(trait_) => ItemInNs::from(ModuleDef::from(trait_)),\n+                AssocItemContainer::Impl(impl_) => {\n+                    let impled_trait = if matches!(assoc_item, AssocItem::Function(..)) {\n+                        impl_.trait_(db)\n+                    } else {\n+                        None\n+                    };\n+                    match impled_trait {\n+                        None => ItemInNs::from(ModuleDef::from(impl_.self_ty(db).as_adt()?)),\n+                        Some(t) => ItemInNs::from(ModuleDef::from(t)),\n+                    }\n+                }\n+            },\n+            None => item,\n+        },\n+        ItemInNs::Macros(_) => item,\n+    })\n+}\n+\n+fn item_as_assoc(db: &dyn HirDatabase, item: ItemInNs) -> Option<AssocItem> {\n+    item.as_module_def().and_then(|module_def| module_def.as_assoc_item(db))\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;\n@@ -281,7 +305,7 @@ use test_mod::*;\n \n fn main() {\n     let test_struct = test_mod::TestStruct {};\n-    TestStruct::test_method(&test_struct)\n+    TestTrait::test_method(&test_struct)\n }\n \"#,\n         );\n@@ -324,7 +348,7 @@ use test_mod::*;\n \n fn main() {\n     let test_struct = test_mod::TestStruct {};\n-    TestStruct::test_method(&test_struct, 12, 32u)\n+    TestTrait::test_method(&test_struct, 12, 32u)\n }\n \"#,\n         );\n@@ -367,7 +391,7 @@ use test_mod::*;\n \n fn main() {\n     let test_struct = test_mod::TestStruct {};\n-    TestStruct::test_method(test_struct, 12, 32u)\n+    TestTrait::test_method(test_struct, 12, 32u)\n }\n \"#,\n         );\n@@ -410,7 +434,7 @@ use test_mod::*;\n \n fn main() {\n     let test_struct = test_mod::TestStruct {};\n-    TestStruct::test_method(&mut test_struct, 12, 32u)\n+    TestTrait::test_method(&mut test_struct, 12, 32u)\n }\n \"#,\n         );\n@@ -480,7 +504,7 @@ use test_mod::*;\n \n fn main() {\n     let test_struct = TestStruct {};\n-    TestStruct::test_method::<()>(&test_struct)\n+    TestTrait::test_method::<()>(&test_struct)\n }\n \"#,\n         );"}, {"sha": "08b0f9535d70ffed07aacd85c8aaa37a56258d7b", "filename": "crates/ide-db/src/imports/import_assets.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ea8d5806d8adb8d717247f157651d4ed5ab8d33/crates%2Fide-db%2Fsrc%2Fimports%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ea8d5806d8adb8d717247f157651d4ed5ab8d33/crates%2Fide-db%2Fsrc%2Fimports%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fimports%2Fimport_assets.rs?ref=9ea8d5806d8adb8d717247f157651d4ed5ab8d33", "patch": "@@ -401,7 +401,7 @@ fn import_for_item(\n     })\n }\n \n-pub fn item_for_path_search(db: &RootDatabase, item: ItemInNs) -> Option<ItemInNs> {\n+fn item_for_path_search(db: &RootDatabase, item: ItemInNs) -> Option<ItemInNs> {\n     Some(match item {\n         ItemInNs::Types(_) | ItemInNs::Values(_) => match item_as_assoc(db, item) {\n             Some(assoc_item) => match assoc_item.container(db) {"}]}