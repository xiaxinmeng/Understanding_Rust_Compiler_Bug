{"sha": "9907ad6ed9fde5ccdb58a7d59d652a4c8a98a346", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5MDdhZDZlZDlmZGU1Y2NkYjU4YTdkNTlkNjUyYTRjOGE5OGEzNDY=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-04-18T01:42:22Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-05-06T12:14:21Z"}, "message": "Define UB in float-to-int casts to saturate\n\n- Round to zero, and representable values cast directly.\n- `NaN` goes to 0\n- Values beyond the limits of the type are saturated to the \"nearest value\"\n  (essentially rounding to zero, in some sense) in the integral type, so e.g.\n  `f32::INFINITY` would go to `{u,i}N::MAX.`", "tree": {"sha": "7470f8e3ea081729bd155d40dab7310f601c5940", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7470f8e3ea081729bd155d40dab7310f601c5940"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9907ad6ed9fde5ccdb58a7d59d652a4c8a98a346", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9907ad6ed9fde5ccdb58a7d59d652a4c8a98a346", "html_url": "https://github.com/rust-lang/rust/commit/9907ad6ed9fde5ccdb58a7d59d652a4c8a98a346", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9907ad6ed9fde5ccdb58a7d59d652a4c8a98a346/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0c61a904482129989f5c1e5cb9f1008efb76f7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0c61a904482129989f5c1e5cb9f1008efb76f7f", "html_url": "https://github.com/rust-lang/rust/commit/a0c61a904482129989f5c1e5cb9f1008efb76f7f"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "bb532abd84bdeece18a367deccc9eda0cbd0cea5", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9907ad6ed9fde5ccdb58a7d59d652a4c8a98a346/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9907ad6ed9fde5ccdb58a7d59d652a4c8a98a346/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=9907ad6ed9fde5ccdb58a7d59d652a4c8a98a346", "patch": "@@ -768,7 +768,7 @@ fn cast_float_to_int<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n ) -> Bx::Value {\n     let fptosui_result = if signed { bx.fptosi(x, int_ty) } else { bx.fptoui(x, int_ty) };\n \n-    if !bx.cx().sess().opts.debugging_opts.saturating_float_casts {\n+    if let Some(false) = bx.cx().sess().opts.debugging_opts.saturating_float_casts {\n         return fptosui_result;\n     }\n "}, {"sha": "ad1934c97865e3410f44bcba5025b3f57027525e", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9907ad6ed9fde5ccdb58a7d59d652a4c8a98a346/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9907ad6ed9fde5ccdb58a7d59d652a4c8a98a346/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=9907ad6ed9fde5ccdb58a7d59d652a4c8a98a346", "patch": "@@ -558,7 +558,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(sanitizer, Some(Sanitizer::Address));\n     tracked!(sanitizer_memory_track_origins, 2);\n     tracked!(sanitizer_recover, vec![Sanitizer::Address]);\n-    tracked!(saturating_float_casts, true);\n+    tracked!(saturating_float_casts, Some(true));\n     tracked!(share_generics, Some(true));\n     tracked!(show_span, Some(String::from(\"abc\")));\n     tracked!(src_hash_algorithm, Some(SourceFileHashAlgorithm::Sha1));"}, {"sha": "7fcf6d138506098eb3603f1bb38f3c7672145f76", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9907ad6ed9fde5ccdb58a7d59d652a4c8a98a346/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9907ad6ed9fde5ccdb58a7d59d652a4c8a98a346/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=9907ad6ed9fde5ccdb58a7d59d652a4c8a98a346", "patch": "@@ -936,9 +936,9 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"enable origins tracking in MemorySanitizer\"),\n     sanitizer_recover: Vec<Sanitizer> = (vec![], parse_sanitizer_list, [TRACKED],\n         \"enable recovery for selected sanitizers\"),\n-    saturating_float_casts: bool = (false, parse_bool, [TRACKED],\n+    saturating_float_casts: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"make float->int casts UB-free: numbers outside the integer type's range are clipped to \\\n-        the max/min integer respectively, and NaN is mapped to 0 (default: no)\"),\n+        the max/min integer respectively, and NaN is mapped to 0 (default: yes)\"),\n     save_analysis: bool = (false, parse_bool, [UNTRACKED],\n         \"write syntax and type analysis (in JSON format) information, in \\\n         addition to normal output (default: no)\"),"}, {"sha": "789feea12d6d7e8a67ecfd84b406b5fb99571c37", "filename": "src/test/codegen/unchecked-float-casts.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9907ad6ed9fde5ccdb58a7d59d652a4c8a98a346/src%2Ftest%2Fcodegen%2Funchecked-float-casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9907ad6ed9fde5ccdb58a7d59d652a4c8a98a346/src%2Ftest%2Fcodegen%2Funchecked-float-casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funchecked-float-casts.rs?ref=9907ad6ed9fde5ccdb58a7d59d652a4c8a98a346", "patch": "@@ -1,7 +1,7 @@\n-// compile-flags: -C no-prepopulate-passes\n+// This file tests that we don't generate any code for saturation when using the\n+// unchecked intrinsics.\n \n-// This file tests that we don't generate any code for saturation if\n-// -Z saturating-float-casts is not enabled.\n+// compile-flags: -C opt-level=3\n \n #![crate_type = \"lib\"]\n \n@@ -12,7 +12,7 @@ pub fn f32_to_u32(x: f32) -> u32 {\n     // CHECK-NOT: fcmp\n     // CHECK-NOT: icmp\n     // CHECK-NOT: select\n-    x as u32\n+    unsafe { x.to_int_unchecked() }\n }\n \n // CHECK-LABEL: @f32_to_i32\n@@ -22,7 +22,7 @@ pub fn f32_to_i32(x: f32) -> i32 {\n     // CHECK-NOT: fcmp\n     // CHECK-NOT: icmp\n     // CHECK-NOT: select\n-    x as i32\n+    unsafe { x.to_int_unchecked() }\n }\n \n #[no_mangle]\n@@ -31,5 +31,5 @@ pub fn f64_to_u16(x: f64) -> u16 {\n     // CHECK-NOT: fcmp\n     // CHECK-NOT: icmp\n     // CHECK-NOT: select\n-    x as u16\n+    unsafe { x.to_int_unchecked() }\n }"}, {"sha": "811efaefbb5bdc7714d050f102058cbe822eaa8c", "filename": "src/test/ui/numbers-arithmetic/saturating-float-casts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9907ad6ed9fde5ccdb58a7d59d652a4c8a98a346/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fsaturating-float-casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9907ad6ed9fde5ccdb58a7d59d652a4c8a98a346/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fsaturating-float-casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fsaturating-float-casts.rs?ref=9907ad6ed9fde5ccdb58a7d59d652a4c8a98a346", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // Tests saturating float->int casts. See u128-as-f32.rs for the opposite direction.\n-// compile-flags: -Z saturating-float-casts\n \n #![feature(test, stmt_expr_attributes)]\n #![deny(overflowing_literals)]"}]}