{"sha": "730679685ebad64e94b50961bb6c8c2e385529e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMDY3OTY4NWViYWQ2NGU5NGI1MDk2MWJiNmM4YzJlMzg1NTI5ZTQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-08T14:47:23Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-10T04:40:34Z"}, "message": "Use correct line offsets for doctests (fixes #45868)", "tree": {"sha": "8e0f4529205efb84263d8b6fd7f0e1f5ce0ddf02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e0f4529205efb84263d8b6fd7f0e1f5ce0ddf02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/730679685ebad64e94b50961bb6c8c2e385529e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/730679685ebad64e94b50961bb6c8c2e385529e4", "html_url": "https://github.com/rust-lang/rust/commit/730679685ebad64e94b50961bb6c8c2e385529e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/730679685ebad64e94b50961bb6c8c2e385529e4/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b193de98af5b8c6e2b50908ea64323b9095a1a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b193de98af5b8c6e2b50908ea64323b9095a1a4", "html_url": "https://github.com/rust-lang/rust/commit/1b193de98af5b8c6e2b50908ea64323b9095a1a4"}], "stats": {"total": 66, "additions": 55, "deletions": 11}, "files": [{"sha": "1c3d4af9e1888cd19f79915a1de2d21a929e5fc7", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/730679685ebad64e94b50961bb6c8c2e385529e4/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/730679685ebad64e94b50961bb6c8c2e385529e4/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=730679685ebad64e94b50961bb6c8c2e385529e4", "patch": "@@ -990,7 +990,7 @@ impl EmitterWriter {\n                     buffer.append(buffer_msg_line_offset,\n                                   &format!(\"{}:{}:{}\",\n                                            loc.file.name,\n-                                           loc.line,\n+                                           cm.doctest_offset_line(loc.line),\n                                            loc.col.0 + 1),\n                                   Style::LineAndColumn);\n                     for _ in 0..max_line_num_len {\n@@ -1000,7 +1000,7 @@ impl EmitterWriter {\n                     buffer.prepend(0,\n                                    &format!(\"{}:{}:{} - \",\n                                             loc.file.name,\n-                                            loc.line,\n+                                            cm.doctest_offset_line(loc.line),\n                                             loc.col.0 + 1),\n                                    Style::LineAndColumn);\n                 }"}, {"sha": "f2f387ee190a2a637f973d95c96c415240700ef0", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/730679685ebad64e94b50961bb6c8c2e385529e4/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/730679685ebad64e94b50961bb6c8c2e385529e4/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=730679685ebad64e94b50961bb6c8c2e385529e4", "patch": "@@ -103,6 +103,7 @@ pub trait CodeMapper {\n     fn merge_spans(&self, sp_lhs: Span, sp_rhs: Span) -> Option<Span>;\n     fn call_span_if_macro(&self, sp: Span) -> Span;\n     fn ensure_filemap_source_present(&self, file_map: Rc<FileMap>) -> bool;\n+    fn doctest_offset_line(&self, line: usize) -> usize;\n }\n \n impl CodeSuggestion {"}, {"sha": "e66add20376fac9d06983ffc3d6b1e50aba83ca4", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/730679685ebad64e94b50961bb6c8c2e385529e4/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/730679685ebad64e94b50961bb6c8c2e385529e4/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=730679685ebad64e94b50961bb6c8c2e385529e4", "patch": "@@ -196,7 +196,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'a, I> {\n                     .map(|l| map_line(l).for_code())\n                     .collect::<Vec<&str>>().join(\"\\n\");\n                 let krate = krate.as_ref().map(|s| &**s);\n-                let test = test::make_test(&test, krate, false,\n+                let (test, _) = test::make_test(&test, krate, false,\n                                            &Default::default());\n                 let channel = if test.contains(\"#![feature(\") {\n                     \"&amp;version=nightly\"\n@@ -607,7 +607,7 @@ pub fn render(w: &mut fmt::Formatter,\n                         .map(|l| map_line(l).for_code())\n                         .collect::<Vec<&str>>().join(\"\\n\");\n                     let krate = krate.as_ref().map(|s| &**s);\n-                    let test = test::make_test(&test, krate, false,\n+                    let (test, _) = test::make_test(&test, krate, false,\n                                                &Default::default());\n                     let channel = if test.contains(\"#![feature(\") {\n                         \"&amp;version=nightly\""}, {"sha": "5432f5cb6e1656b4c0f8891c4a1d2d007fee0873", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/730679685ebad64e94b50961bb6c8c2e385529e4/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/730679685ebad64e94b50961bb6c8c2e385529e4/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=730679685ebad64e94b50961bb6c8c2e385529e4", "patch": "@@ -176,15 +176,16 @@ fn scrape_test_config(krate: &::rustc::hir::Crate) -> TestOptions {\n     opts\n }\n \n-fn run_test(test: &str, cratename: &str, filename: &FileName, cfgs: Vec<String>, libs: SearchPaths,\n+fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n+            cfgs: Vec<String>, libs: SearchPaths,\n             externs: Externs,\n             should_panic: bool, no_run: bool, as_test_harness: bool,\n             compile_fail: bool, mut error_codes: Vec<String>, opts: &TestOptions,\n             maybe_sysroot: Option<PathBuf>,\n             linker: Option<PathBuf>) {\n     // the test harness wants its own `main` & top level functions, so\n     // never wrap the test in `fn main() { ... }`\n-    let test = make_test(test, Some(cratename), as_test_harness, opts);\n+    let (test, line_offset) = make_test(test, Some(cratename), as_test_harness, opts);\n     // FIXME(#44940): if doctests ever support path remapping, then this filename\n     // needs to be the result of CodeMap::span_to_unmapped_path\n     let input = config::Input::Str {\n@@ -234,7 +235,9 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, cfgs: Vec<String>,\n         }\n     }\n     let data = Arc::new(Mutex::new(Vec::new()));\n-    let codemap = Rc::new(CodeMap::new(sessopts.file_path_mapping()));\n+    let codemap = Rc::new(CodeMap::new_doctest(\n+        sessopts.file_path_mapping(), filename.clone(), line as isize - line_offset as isize\n+    ));\n     let emitter = errors::emitter::EmitterWriter::new(box Sink(data.clone()),\n                                                       Some(codemap.clone()),\n                                                       false);\n@@ -326,13 +329,14 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, cfgs: Vec<String>,\n     }\n }\n \n+/// Makes the test file. Also returns the number of lines before the code begins\n pub fn make_test(s: &str,\n                  cratename: Option<&str>,\n                  dont_insert_main: bool,\n                  opts: &TestOptions)\n-                 -> String {\n+                 -> (String, usize) {\n     let (crate_attrs, everything_else) = partition_source(s);\n-\n+    let mut line_offset = 0;\n     let mut prog = String::new();\n \n     if opts.attrs.is_empty() {\n@@ -341,11 +345,13 @@ pub fn make_test(s: &str,\n         // commonly used to make tests fail in case they trigger warnings, so having this there in\n         // that case may cause some tests to pass when they shouldn't have.\n         prog.push_str(\"#![allow(unused)]\\n\");\n+        line_offset += 1;\n     }\n \n     // Next, any attributes that came from the crate root via #![doc(test(attr(...)))].\n     for attr in &opts.attrs {\n         prog.push_str(&format!(\"#![{}]\\n\", attr));\n+        line_offset += 1;\n     }\n \n     // Now push any outer attributes from the example, assuming they\n@@ -358,6 +364,7 @@ pub fn make_test(s: &str,\n         if let Some(cratename) = cratename {\n             if s.contains(cratename) {\n                 prog.push_str(&format!(\"extern crate {};\\n\", cratename));\n+                line_offset += 1;\n             }\n         }\n     }\n@@ -379,14 +386,15 @@ pub fn make_test(s: &str,\n         prog.push_str(&everything_else);\n     } else {\n         prog.push_str(\"fn main() {\\n\");\n+        line_offset += 1;\n         prog.push_str(&everything_else);\n         prog = prog.trim().into();\n         prog.push_str(\"\\n}\");\n     }\n \n     info!(\"final test program: {}\", prog);\n \n-    prog\n+    (prog, line_offset)\n }\n \n // FIXME(aburka): use a real parser to deal with multiline attributes\n@@ -543,6 +551,7 @@ impl Collector {\n                         run_test(&test,\n                                  &cratename,\n                                  &filename,\n+                                 line,\n                                  cfgs,\n                                  libs,\n                                  externs,"}, {"sha": "a58a61c36361b4d82f0dd548a1f08464e1344d04", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/730679685ebad64e94b50961bb6c8c2e385529e4/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/730679685ebad64e94b50961bb6c8c2e385529e4/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=730679685ebad64e94b50961bb6c8c2e385529e4", "patch": "@@ -131,6 +131,9 @@ pub struct CodeMap {\n     // -Zremap-path-prefix to all FileMaps allocated within this CodeMap.\n     path_mapping: FilePathMapping,\n     stable_id_to_filemap: RefCell<FxHashMap<StableFilemapId, Rc<FileMap>>>,\n+    /// In case we are in a doctest, replace all file names with the PathBuf,\n+    /// and add the given offsets to the line info\n+    doctest_offset: Option<(FileName, isize)>,\n }\n \n impl CodeMap {\n@@ -140,9 +143,19 @@ impl CodeMap {\n             file_loader: Box::new(RealFileLoader),\n             path_mapping,\n             stable_id_to_filemap: RefCell::new(FxHashMap()),\n+            doctest_offset: None,\n         }\n     }\n \n+    pub fn new_doctest(path_mapping: FilePathMapping,\n+                       file: FileName, line: isize) -> CodeMap {\n+        CodeMap {\n+            doctest_offset: Some((file, line)),\n+            ..CodeMap::new(path_mapping)\n+        }\n+\n+    }\n+\n     pub fn with_file_loader(file_loader: Box<FileLoader>,\n                             path_mapping: FilePathMapping)\n                             -> CodeMap {\n@@ -151,6 +164,7 @@ impl CodeMap {\n             file_loader,\n             path_mapping,\n             stable_id_to_filemap: RefCell::new(FxHashMap()),\n+            doctest_offset: None,\n         }\n     }\n \n@@ -164,7 +178,12 @@ impl CodeMap {\n \n     pub fn load_file(&self, path: &Path) -> io::Result<Rc<FileMap>> {\n         let src = self.file_loader.read_file(path)?;\n-        Ok(self.new_filemap(path.to_owned().into(), src))\n+        let filename = if let Some((ref name, _)) = self.doctest_offset {\n+            name.clone()\n+        } else {\n+            path.to_owned().into()\n+        };\n+        Ok(self.new_filemap(filename, src))\n     }\n \n     pub fn files(&self) -> Ref<Vec<Rc<FileMap>>> {\n@@ -303,6 +322,18 @@ impl CodeMap {\n                  pos.col.to_usize() + 1)).to_string()\n     }\n \n+    // If there is a doctest_offset, apply it to the line\n+    pub fn doctest_offset_line(&self, mut orig: usize) -> usize {\n+        if let Some((_, line)) = self.doctest_offset {\n+            if line >= 0 {\n+                orig = orig + line as usize;\n+            } else {\n+                orig = orig - (-line) as usize;\n+            }\n+        }\n+        orig\n+    }\n+\n     /// Lookup source information about a BytePos\n     pub fn lookup_char_pos(&self, pos: BytePos) -> Loc {\n         let chpos = self.bytepos_to_file_charpos(pos);\n@@ -681,6 +712,9 @@ impl CodeMapper for CodeMap {\n             }\n         )\n     }\n+    fn doctest_offset_line(&self, line: usize) -> usize {\n+        self.doctest_offset_line(line)\n+    }\n }\n \n #[derive(Clone)]"}]}