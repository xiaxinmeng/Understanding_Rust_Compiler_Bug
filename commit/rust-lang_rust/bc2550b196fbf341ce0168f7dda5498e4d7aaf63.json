{"sha": "bc2550b196fbf341ce0168f7dda5498e4d7aaf63", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMjU1MGIxOTZmYmYzNDFjZTAxNjhmN2RkYTU0OThlNGQ3YWFmNjM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-28T13:59:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-28T13:59:22Z"}, "message": "update tests", "tree": {"sha": "f1c9038fd1e3f36a4ff30fb2c115914ac2cc1350", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1c9038fd1e3f36a4ff30fb2c115914ac2cc1350"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc2550b196fbf341ce0168f7dda5498e4d7aaf63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc2550b196fbf341ce0168f7dda5498e4d7aaf63", "html_url": "https://github.com/rust-lang/rust/commit/bc2550b196fbf341ce0168f7dda5498e4d7aaf63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc2550b196fbf341ce0168f7dda5498e4d7aaf63/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afeaea7051a41269043b1443b9db1e8e44aa4a3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/afeaea7051a41269043b1443b9db1e8e44aa4a3e", "html_url": "https://github.com/rust-lang/rust/commit/afeaea7051a41269043b1443b9db1e8e44aa4a3e"}], "stats": {"total": 83, "additions": 36, "deletions": 47}, "files": [{"sha": "37320e1ba3e0a50a2f5a0675e627fbefee68d6a7", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bc2550b196fbf341ce0168f7dda5498e4d7aaf63/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc2550b196fbf341ce0168f7dda5498e4d7aaf63/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=bc2550b196fbf341ce0168f7dda5498e4d7aaf63", "patch": "@@ -31,7 +31,7 @@ pub mod ast;\n #[doc(hidden)]\n pub mod fuzz;\n \n-use std::sync::Arc;\n+use std::{sync::Arc, fmt::Write};\n \n use ra_text_edit::AtomTextEdit;\n \n@@ -68,6 +68,14 @@ impl Parse {\n             Err(self.errors)\n         }\n     }\n+\n+    pub fn debug_dump(&self) -> String {\n+        let mut buf = self.tree.syntax().debug_dump();\n+        for err in self.errors.iter() {\n+            writeln!(buf, \"err: `{}`\", err).unwrap();\n+        }\n+        buf\n+    }\n }\n \n /// `SourceFile` represents a parse tree for a single Rust file.\n@@ -83,6 +91,12 @@ impl SourceFile {\n         TreeArc::cast(root)\n     }\n \n+    pub fn parse2(text: &str) -> Parse {\n+        let (green, errors) = parsing::parse_text(text);\n+        let tree = SourceFile::new(green);\n+        Parse { tree, errors: Arc::new(errors) }\n+    }\n+\n     pub fn parse(text: &str) -> TreeArc<SourceFile> {\n         let (green, _errors) = parsing::parse_text(text);\n         SourceFile::new(green)"}, {"sha": "dc913cf2b2e77233494d8f91e6ed925c88e8c5ae", "filename": "crates/ra_syntax/src/parsing/reparsing.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bc2550b196fbf341ce0168f7dda5498e4d7aaf63/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc2550b196fbf341ce0168f7dda5498e4d7aaf63/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs?ref=bc2550b196fbf341ce0168f7dda5498e4d7aaf63", "patch": "@@ -166,29 +166,31 @@ fn merge_errors(\n \n #[cfg(test)]\n mod tests {\n+    use std::sync::Arc;\n+\n     use test_utils::{extract_range, assert_eq_text};\n \n-    use crate::{SourceFile, AstNode};\n+    use crate::{SourceFile, AstNode, Parse};\n     use super::*;\n \n     fn do_check(before: &str, replace_with: &str, reparsed_len: u32) {\n         let (range, before) = extract_range(before);\n         let edit = AtomTextEdit::replace(range, replace_with.to_owned());\n         let after = edit.apply(before.clone());\n \n-        let fully_reparsed = SourceFile::parse(&after);\n+        let fully_reparsed = SourceFile::parse2(&after);\n         let incrementally_reparsed = {\n             let f = SourceFile::parse(&before);\n             let edit = AtomTextEdit { delete: range, insert: replace_with.to_string() };\n             let (green, new_errors, range) =\n                 incremental_reparse(f.syntax(), &edit, f.errors()).unwrap();\n             assert_eq!(range.len(), reparsed_len.into(), \"reparsed fragment has wrong length\");\n-            SourceFile::new(green, new_errors)\n+            Parse { tree: SourceFile::new(green), errors: Arc::new(new_errors) }\n         };\n \n         assert_eq_text!(\n-            &fully_reparsed.syntax().debug_dump(),\n-            &incrementally_reparsed.syntax().debug_dump(),\n+            &fully_reparsed.tree.syntax().debug_dump(),\n+            &incrementally_reparsed.tree.syntax().debug_dump(),\n         );\n     }\n "}, {"sha": "769125d11bb59217bd1bbc3b89cffb946dc44512", "filename": "crates/ra_syntax/src/syntax_node.rs", "status": "modified", "additions": 4, "deletions": 26, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bc2550b196fbf341ce0168f7dda5498e4d7aaf63/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc2550b196fbf341ce0168f7dda5498e4d7aaf63/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs?ref=bc2550b196fbf341ce0168f7dda5498e4d7aaf63", "patch": "@@ -256,37 +256,18 @@ impl SyntaxNode {\n     }\n \n     pub fn debug_dump(&self) -> String {\n-        let mut errors: Vec<_> = match self.ancestors().find_map(SourceFile::cast) {\n-            Some(file) => file.errors(),\n-            None => self.root_data().to_vec(),\n-        };\n-        errors.sort_by_key(|e| e.offset());\n-        let mut err_pos = 0;\n         let mut level = 0;\n         let mut buf = String::new();\n-        macro_rules! indent {\n-            () => {\n-                for _ in 0..level {\n-                    buf.push_str(\"  \");\n-                }\n-            };\n-        }\n \n         for event in self.preorder_with_tokens() {\n             match event {\n                 WalkEvent::Enter(element) => {\n-                    indent!();\n+                    for _ in 0..level {\n+                        buf.push_str(\"  \");\n+                    }\n                     match element {\n                         SyntaxElement::Node(node) => writeln!(buf, \"{:?}\", node).unwrap(),\n-                        SyntaxElement::Token(token) => {\n-                            writeln!(buf, \"{:?}\", token).unwrap();\n-                            let off = token.range().end();\n-                            while err_pos < errors.len() && errors[err_pos].offset() <= off {\n-                                indent!();\n-                                writeln!(buf, \"err: `{}`\", errors[err_pos]).unwrap();\n-                                err_pos += 1;\n-                            }\n-                        }\n+                        SyntaxElement::Token(token) => writeln!(buf, \"{:?}\", token).unwrap(),\n                     }\n                     level += 1;\n                 }\n@@ -295,9 +276,6 @@ impl SyntaxNode {\n         }\n \n         assert_eq!(level, 0);\n-        for err in errors[err_pos..].iter() {\n-            writeln!(buf, \"err: `{}`\", err).unwrap();\n-        }\n \n         buf\n     }"}, {"sha": "4b711f271656f628a8e89eb335ce711c9b9926c2", "filename": "crates/ra_syntax/tests/test.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bc2550b196fbf341ce0168f7dda5498e4d7aaf63/crates%2Fra_syntax%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc2550b196fbf341ce0168f7dda5498e4d7aaf63/crates%2Fra_syntax%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftests%2Ftest.rs?ref=bc2550b196fbf341ce0168f7dda5498e4d7aaf63", "patch": "@@ -8,7 +8,7 @@ use std::{\n };\n \n use test_utils::{project_dir, dir_tests, read_text, collect_tests};\n-use ra_syntax::{SourceFile, AstNode, fuzz};\n+use ra_syntax::{SourceFile, fuzz};\n \n #[test]\n fn lexer_tests() {\n@@ -21,26 +21,21 @@ fn lexer_tests() {\n #[test]\n fn parser_tests() {\n     dir_tests(&test_data_dir(), &[\"parser/inline/ok\", \"parser/ok\"], |text, path| {\n-        let file = SourceFile::parse(text);\n-        let errors = file.errors();\n+        let parse = SourceFile::parse2(text);\n+        let errors = parse.errors.as_slice();\n         assert_eq!(\n-            &*errors,\n+            errors,\n             &[] as &[ra_syntax::SyntaxError],\n             \"There should be no errors in the file {:?}\",\n-            path.display()\n+            path.display(),\n         );\n-        file.syntax().debug_dump()\n+        parse.debug_dump()\n     });\n     dir_tests(&test_data_dir(), &[\"parser/err\", \"parser/inline/err\"], |text, path| {\n-        let file = SourceFile::parse(text);\n-        let errors = file.errors();\n-        assert_ne!(\n-            &*errors,\n-            &[] as &[ra_syntax::SyntaxError],\n-            \"There should be errors in the file {:?}\",\n-            path.display()\n-        );\n-        file.syntax().debug_dump()\n+        let parse = SourceFile::parse2(text);\n+        let errors = parse.errors.as_slice();\n+        assert!(!errors.is_empty(), \"There should be errors in the file {:?}\", path.display());\n+        parse.debug_dump()\n     });\n }\n "}]}