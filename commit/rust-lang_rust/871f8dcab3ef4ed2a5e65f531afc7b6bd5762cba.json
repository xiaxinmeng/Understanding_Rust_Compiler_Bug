{"sha": "871f8dcab3ef4ed2a5e65f531afc7b6bd5762cba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MWY4ZGNhYjNlZjRlZDJhNWU2NWY1MzFhZmM3YjZiZDU3NjJjYmE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-07-04T11:33:48Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-07-04T11:33:48Z"}, "message": "don't run clippy on dependencies when running cargo clippy", "tree": {"sha": "fdf53681edd5a793b4310cb54d3f8a69fca6374f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdf53681edd5a793b4310cb54d3f8a69fca6374f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/871f8dcab3ef4ed2a5e65f531afc7b6bd5762cba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXekmcAAoJEFbW7qD8Z6xGhRsQAIfMNLgLEymQx4XSk/LElycS\n8ZgerM9P94iXEFTAi7GL719AYlr45d4G7Le0WeH3PJ66hRum+5Jm+k0Rpy12zujb\ntsKRlKk9SoU4eIkz/tGvHM/T7eBN0mS0qZCIZ84wk8svoMBDY5uxgsxJr7kjeiM+\nEG+bg+YrJnYrnV5ZPGOSvEn47/3aQVF0jNq35gJbi/1mfIXw71ggGx5ZqvbcJivV\ns6fF7/cK7agzhX3Ccj5hDgE0y09VnxP/R4OvDdpp/ZpuiWonZuRWGY+Cma5DLPmV\nAlKs43fC8MBCNXGZpA6Irlyx72MWguNijI0LRHXIJHX9rJMjy0LnhSVsNpkjNmf0\nWmxQDtvc4zu2AKvyAJAdq/EBrp/YH2W5DapcYHkdBwBwfiU8hM4VYIYELf19HXnJ\noMLDigFxBwq7qCHAXDkcwU4SiVhRTD6OgzRztn+jHg03ScvQpFeWtoIpFHJac4bB\n0uNQUjj+yzEZEyC6vjhtwXVcRDgEaULbd5MeiAoOS0pQ5m5p3eaEmD+XKx+jvZva\nbmDxerhd5TRr0CpKDhjDv+Xi9Vg1a0unrKMjJ5Fa5VF5wVCtlXouEcR66/dYu11b\nhUxtOEVALDhjrjpEEhdjg2FxD+9aDOVtL8QiZYMLFb2e8fkeT7HVU2uPv16kFV9r\nkPkNPTbZwQxY3DO/gUXB\n=VDBf\n-----END PGP SIGNATURE-----", "payload": "tree fdf53681edd5a793b4310cb54d3f8a69fca6374f\nparent 5d6e4a6f4d83ce8307aa9c65ce14af06668ef7b6\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1467632028 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1467632028 +0200\n\ndon't run clippy on dependencies when running cargo clippy"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/871f8dcab3ef4ed2a5e65f531afc7b6bd5762cba", "html_url": "https://github.com/rust-lang/rust/commit/871f8dcab3ef4ed2a5e65f531afc7b6bd5762cba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/871f8dcab3ef4ed2a5e65f531afc7b6bd5762cba/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d6e4a6f4d83ce8307aa9c65ce14af06668ef7b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d6e4a6f4d83ce8307aa9c65ce14af06668ef7b6", "html_url": "https://github.com/rust-lang/rust/commit/5d6e4a6f4d83ce8307aa9c65ce14af06668ef7b6"}], "stats": {"total": 100, "additions": 55, "deletions": 45}, "files": [{"sha": "9541e70ecc0ba9c7792d18aced8405be59d443dd", "filename": "src/main.rs", "status": "modified", "additions": 55, "deletions": 45, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/871f8dcab3ef4ed2a5e65f531afc7b6bd5762cba/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/871f8dcab3ef4ed2a5e65f531afc7b6bd5762cba/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=871f8dcab3ef4ed2a5e65f531afc7b6bd5762cba", "patch": "@@ -18,17 +18,17 @@ use std::process::Command;\n \n use clippy_lints::utils::cargo;\n \n-struct ClippyCompilerCalls(RustcDefaultCalls);\n-\n-impl std::default::Default for ClippyCompilerCalls {\n-    fn default() -> Self {\n-        Self::new()\n-    }\n+struct ClippyCompilerCalls {\n+    default: RustcDefaultCalls,\n+    run_lints: bool,\n }\n \n impl ClippyCompilerCalls {\n-    fn new() -> Self {\n-        ClippyCompilerCalls(RustcDefaultCalls)\n+    fn new(run_lints: bool) -> Self {\n+        ClippyCompilerCalls {\n+            default: RustcDefaultCalls,\n+            run_lints: run_lints,\n+        }\n     }\n }\n \n@@ -39,7 +39,7 @@ impl<'a> CompilerCalls<'a> for ClippyCompilerCalls {\n                       descriptions: &rustc_errors::registry::Registry,\n                       output: ErrorOutputType)\n                       -> Compilation {\n-        self.0.early_callback(matches, sopts, descriptions, output)\n+        self.default.early_callback(matches, sopts, descriptions, output)\n     }\n     fn no_input(&mut self,\n                 matches: &getopts::Matches,\n@@ -48,7 +48,7 @@ impl<'a> CompilerCalls<'a> for ClippyCompilerCalls {\n                 ofile: &Option<PathBuf>,\n                 descriptions: &rustc_errors::registry::Registry)\n                 -> Option<(Input, Option<PathBuf>)> {\n-        self.0.no_input(matches, sopts, odir, ofile, descriptions)\n+        self.default.no_input(matches, sopts, odir, ofile, descriptions)\n     }\n     fn late_callback(&mut self,\n                      matches: &getopts::Matches,\n@@ -57,44 +57,46 @@ impl<'a> CompilerCalls<'a> for ClippyCompilerCalls {\n                      odir: &Option<PathBuf>,\n                      ofile: &Option<PathBuf>)\n                      -> Compilation {\n-        self.0.late_callback(matches, sess, input, odir, ofile)\n+        self.default.late_callback(matches, sess, input, odir, ofile)\n     }\n     fn build_controller(&mut self, sess: &Session, matches: &getopts::Matches) -> driver::CompileController<'a> {\n-        let mut control = self.0.build_controller(sess, matches);\n-\n-        let old = std::mem::replace(&mut control.after_parse.callback, box |_| {});\n-        control.after_parse.callback = Box::new(move |state| {\n-            {\n-                let mut registry = rustc_plugin::registry::Registry::new(state.session, state.krate.as_ref().expect(\"at this compilation stage the krate must be parsed\"));\n-                registry.args_hidden = Some(Vec::new());\n-                clippy_lints::register_plugins(&mut registry);\n-\n-                let rustc_plugin::registry::Registry { early_lint_passes,\n-                                                       late_lint_passes,\n-                                                       lint_groups,\n-                                                       llvm_passes,\n-                                                       attributes,\n-                                                       mir_passes,\n-                                                       .. } = registry;\n-                let sess = &state.session;\n-                let mut ls = sess.lint_store.borrow_mut();\n-                for pass in early_lint_passes {\n-                    ls.register_early_pass(Some(sess), true, pass);\n-                }\n-                for pass in late_lint_passes {\n-                    ls.register_late_pass(Some(sess), true, pass);\n-                }\n+        let mut control = self.default.build_controller(sess, matches);\n+\n+        if self.run_lints {\n+            let old = std::mem::replace(&mut control.after_parse.callback, box |_| {});\n+            control.after_parse.callback = Box::new(move |state| {\n+                {\n+                    let mut registry = rustc_plugin::registry::Registry::new(state.session, state.krate.as_ref().expect(\"at this compilation stage the krate must be parsed\"));\n+                    registry.args_hidden = Some(Vec::new());\n+                    clippy_lints::register_plugins(&mut registry);\n+\n+                    let rustc_plugin::registry::Registry { early_lint_passes,\n+                                                           late_lint_passes,\n+                                                           lint_groups,\n+                                                           llvm_passes,\n+                                                           attributes,\n+                                                           mir_passes,\n+                                                           .. } = registry;\n+                    let sess = &state.session;\n+                    let mut ls = sess.lint_store.borrow_mut();\n+                    for pass in early_lint_passes {\n+                        ls.register_early_pass(Some(sess), true, pass);\n+                    }\n+                    for pass in late_lint_passes {\n+                        ls.register_late_pass(Some(sess), true, pass);\n+                    }\n \n-                for (name, to) in lint_groups {\n-                    ls.register_group(Some(sess), true, name, to);\n-                }\n+                    for (name, to) in lint_groups {\n+                        ls.register_group(Some(sess), true, name, to);\n+                    }\n \n-                sess.plugin_llvm_passes.borrow_mut().extend(llvm_passes);\n-                sess.mir_passes.borrow_mut().extend(mir_passes);\n-                sess.plugin_attributes.borrow_mut().extend(attributes);\n-            }\n-            old(state);\n-        });\n+                    sess.plugin_llvm_passes.borrow_mut().extend(llvm_passes);\n+                    sess.mir_passes.borrow_mut().extend(mir_passes);\n+                    sess.plugin_attributes.borrow_mut().extend(attributes);\n+                }\n+                old(state);\n+            });\n+        }\n \n         control\n     }\n@@ -129,6 +131,7 @@ pub fn main() {\n     };\n \n     if let Some(\"clippy\") = std::env::args().nth(1).as_ref().map(AsRef::as_ref) {\n+        // this arm is executed on the initial call to `cargo clippy`\n         let manifest_path = std::env::args().skip(2).find(|val| val.starts_with(\"--manifest-path=\"));\n         let mut metadata = cargo::metadata(manifest_path).expect(\"could not obtain cargo metadata\");\n         assert_eq!(metadata.version, 1);\n@@ -149,12 +152,19 @@ pub fn main() {\n             }\n         }\n     } else {\n+        // this arm is executed when cargo-clippy runs `cargo rustc` with the `RUSTC` env var set to itself\n+\n+        // this conditional check for the --sysroot flag is there so users can call `cargo-clippy` directly\n+        // without having to pass --sysroot or anything\n         let args: Vec<String> = if env::args().any(|s| s == \"--sysroot\") {\n             env::args().collect()\n         } else {\n             env::args().chain(Some(\"--sysroot\".to_owned())).chain(Some(sys_root)).collect()\n         };\n-        let (result, _) = rustc_driver::run_compiler(&args, &mut ClippyCompilerCalls::new());\n+        // this check ensures that dependencies are built but not linted and the final crate is\n+        // linted but not built\n+        let mut ccc = ClippyCompilerCalls::new(env::args().any(|s| s == \"-Zno-trans\"));\n+        let (result, _) = rustc_driver::run_compiler(&args, &mut ccc);\n \n         if let Err(err_count) = result {\n             if err_count > 0 {"}]}