{"sha": "bdc37aa05722818e8edb5d93825a62921f351913", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkYzM3YWEwNTcyMjgxOGU4ZWRiNWQ5MzgyNWE2MjkyMWYzNTE5MTM=", "commit": {"author": {"name": "bobtwinkles", "email": "srkoser+GitHub@gmail.com", "date": "2018-01-25T06:45:45Z"}, "committer": {"name": "bobtwinkles", "email": "srkoser+GitHub@gmail.com", "date": "2018-02-05T20:00:40Z"}, "message": "mir: Add TerminatorKind::FalseUnwind\n\nSometimes a simple goto misses the cleanup/unwind edges. Specifically, in the\ncase of infinite loops such as those introduced by a loop statement without any\nother out edges. Analogous to TerminatorKind::FalseEdges; this new terminator\nkind is used when we want borrowck to consider an unwind path, but real control\nflow should never actually take it.", "tree": {"sha": "e686d6556cb4fa96d54ce78d716b46b4fe63ffc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e686d6556cb4fa96d54ce78d716b46b4fe63ffc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdc37aa05722818e8edb5d93825a62921f351913", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdc37aa05722818e8edb5d93825a62921f351913", "html_url": "https://github.com/rust-lang/rust/commit/bdc37aa05722818e8edb5d93825a62921f351913", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdc37aa05722818e8edb5d93825a62921f351913/comments", "author": {"login": "bobtwinkles", "id": 1514748, "node_id": "MDQ6VXNlcjE1MTQ3NDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1514748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobtwinkles", "html_url": "https://github.com/bobtwinkles", "followers_url": "https://api.github.com/users/bobtwinkles/followers", "following_url": "https://api.github.com/users/bobtwinkles/following{/other_user}", "gists_url": "https://api.github.com/users/bobtwinkles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobtwinkles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobtwinkles/subscriptions", "organizations_url": "https://api.github.com/users/bobtwinkles/orgs", "repos_url": "https://api.github.com/users/bobtwinkles/repos", "events_url": "https://api.github.com/users/bobtwinkles/events{/privacy}", "received_events_url": "https://api.github.com/users/bobtwinkles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bobtwinkles", "id": 1514748, "node_id": "MDQ6VXNlcjE1MTQ3NDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1514748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobtwinkles", "html_url": "https://github.com/bobtwinkles", "followers_url": "https://api.github.com/users/bobtwinkles/followers", "following_url": "https://api.github.com/users/bobtwinkles/following{/other_user}", "gists_url": "https://api.github.com/users/bobtwinkles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobtwinkles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobtwinkles/subscriptions", "organizations_url": "https://api.github.com/users/bobtwinkles/orgs", "repos_url": "https://api.github.com/users/bobtwinkles/repos", "events_url": "https://api.github.com/users/bobtwinkles/events{/privacy}", "received_events_url": "https://api.github.com/users/bobtwinkles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ca88ae6ae2f864dcdd924f099cdf6a345476196", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ca88ae6ae2f864dcdd924f099cdf6a345476196", "html_url": "https://github.com/rust-lang/rust/commit/5ca88ae6ae2f864dcdd924f099cdf6a345476196"}], "stats": {"total": 115, "additions": 97, "deletions": 18}, "files": [{"sha": "e78c2ad7c88b74ebc6a29125a688126768b24ad1", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=bdc37aa05722818e8edb5d93825a62921f351913", "patch": "@@ -201,6 +201,10 @@ for mir::TerminatorKind<'gcx> {\n                     target.hash_stable(hcx, hasher);\n                 }\n             }\n+            mir::TerminatorKind::FalseUnwind { ref real_target, ref unwind } => {\n+                real_target.hash_stable(hcx, hasher);\n+                unwind.hash_stable(hcx, hasher);\n+            }\n         }\n     }\n }"}, {"sha": "e7284a2716fd112ea8704e46180f995051ff9fd3", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=bdc37aa05722818e8edb5d93825a62921f351913", "patch": "@@ -803,9 +803,28 @@ pub enum TerminatorKind<'tcx> {\n     /// Indicates the end of the dropping of a generator\n     GeneratorDrop,\n \n+    /// A block where control flow only ever takes one real path, but borrowck\n+    /// needs to be more conservative.\n     FalseEdges {\n+        /// The target normal control flow will take\n         real_target: BasicBlock,\n-        imaginary_targets: Vec<BasicBlock>\n+        /// The list of blocks control flow could conceptually take, but won't\n+        /// in practice\n+        imaginary_targets: Vec<BasicBlock>,\n+    },\n+    /// A terminator for blocks that only take one path in reality, but where we\n+    /// reserve the right to unwind in borrowck, even if it won't happen in practice.\n+    /// This can arise in infinite loops with no function calls for example.\n+    FalseUnwind {\n+        /// The target normal control flow will take\n+        real_target: BasicBlock,\n+        /// The imaginary cleanup block link. This particular path will never be taken\n+        /// in practice, but in order to avoid fragility we want to always\n+        /// consider it in borrowck. We don't want to accept programs which\n+        /// pass borrowck only when panic=abort or some assertions are disabled\n+        /// due to release vs. debug mode builds. This needs to be an Option because\n+        /// of the remove_noop_landing_pads and no_landing_pads passes\n+        unwind: Option<BasicBlock>,\n     },\n }\n \n@@ -865,6 +884,8 @@ impl<'tcx> TerminatorKind<'tcx> {\n                 s.extend_from_slice(imaginary_targets);\n                 s.into_cow()\n             }\n+            FalseUnwind { real_target: t, unwind: Some(u) } => vec![t, u].into_cow(),\n+            FalseUnwind { real_target: ref t, unwind: None } => slice::from_ref(t).into_cow(),\n         }\n     }\n \n@@ -897,6 +918,8 @@ impl<'tcx> TerminatorKind<'tcx> {\n                 s.extend(imaginary_targets.iter_mut());\n                 s\n             }\n+            FalseUnwind { real_target: ref mut t, unwind: Some(ref mut u) } => vec![t, u],\n+            FalseUnwind { ref mut real_target, unwind: None } => vec![real_target],\n         }\n     }\n \n@@ -916,7 +939,8 @@ impl<'tcx> TerminatorKind<'tcx> {\n             TerminatorKind::Call { cleanup: ref mut unwind, .. } |\n             TerminatorKind::Assert { cleanup: ref mut unwind, .. } |\n             TerminatorKind::DropAndReplace { ref mut unwind, .. } |\n-            TerminatorKind::Drop { ref mut unwind, .. } => {\n+            TerminatorKind::Drop { ref mut unwind, .. } |\n+            TerminatorKind::FalseUnwind { ref mut unwind, .. } => {\n                 Some(unwind)\n             }\n         }\n@@ -1045,7 +1069,8 @@ impl<'tcx> TerminatorKind<'tcx> {\n \n                 write!(fmt, \")\")\n             },\n-            FalseEdges { .. } => write!(fmt, \"falseEdges\")\n+            FalseEdges { .. } => write!(fmt, \"falseEdges\"),\n+            FalseUnwind { .. } => write!(fmt, \"falseUnwind\"),\n         }\n     }\n \n@@ -1087,6 +1112,8 @@ impl<'tcx> TerminatorKind<'tcx> {\n                 l.resize(imaginary_targets.len() + 1, \"imaginary\".into());\n                 l\n             }\n+            FalseUnwind { unwind: Some(_), .. } => vec![\"real\".into(), \"cleanup\".into()],\n+            FalseUnwind { unwind: None, .. } => vec![\"real\".into()],\n         }\n     }\n }\n@@ -2189,7 +2216,8 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n             Return => Return,\n             Unreachable => Unreachable,\n             FalseEdges { real_target, ref imaginary_targets } =>\n-                FalseEdges { real_target, imaginary_targets: imaginary_targets.clone() }\n+                FalseEdges { real_target, imaginary_targets: imaginary_targets.clone() },\n+            FalseUnwind { real_target, unwind } => FalseUnwind { real_target, unwind },\n         };\n         Terminator {\n             source_info: self.source_info,\n@@ -2231,7 +2259,8 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n             Return |\n             GeneratorDrop |\n             Unreachable |\n-            FalseEdges { .. } => false\n+            FalseEdges { .. } |\n+            FalseUnwind { .. } => false\n         }\n     }\n }"}, {"sha": "b26e1854d97fddf9a71909ef8c35848f21cc821b", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=bdc37aa05722818e8edb5d93825a62921f351913", "patch": "@@ -495,15 +495,21 @@ macro_rules! make_mir_visitor {\n                         self.visit_operand(value, source_location);\n                         self.visit_branch(block, resume);\n                         drop.map(|t| self.visit_branch(block, t));\n-\n                     }\n \n-                    TerminatorKind::FalseEdges { real_target, ref imaginary_targets } => {\n+                    TerminatorKind::FalseEdges { real_target, ref imaginary_targets} => {\n                         self.visit_branch(block, real_target);\n                         for target in imaginary_targets {\n                             self.visit_branch(block, *target);\n                         }\n                     }\n+\n+                    TerminatorKind::FalseUnwind { real_target, unwind } => {\n+                        self.visit_branch(block, real_target);\n+                        if let Some(unwind) = unwind {\n+                            self.visit_branch(block, unwind);\n+                        }\n+                    }\n                 }\n             }\n "}, {"sha": "6a19392a6e88b5c0f5a6d74e5f34668c4f2e7be0", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=bdc37aa05722818e8edb5d93825a62921f351913", "patch": "@@ -576,7 +576,8 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n             TerminatorKind::Goto { target: _ }\n             | TerminatorKind::Abort\n             | TerminatorKind::Unreachable\n-            | TerminatorKind::FalseEdges { .. } => {\n+            | TerminatorKind::FalseEdges { real_target: _, imaginary_targets: _ }\n+            | TerminatorKind::FalseUnwind { real_target: _, unwind: _ } => {\n                 // no data used, thus irrelevant to borrowck\n             }\n         }"}, {"sha": "7ca8d0bdd500bb841a8dc849ce5b5ed4909d900d", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=bdc37aa05722818e8edb5d93825a62921f351913", "patch": "@@ -796,7 +796,8 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::Unreachable\n             | TerminatorKind::Drop { .. }\n-            | TerminatorKind::FalseEdges { .. } => {\n+            | TerminatorKind::FalseEdges { .. }\n+            | TerminatorKind::FalseUnwind { .. } => {\n                 // no checks needed for these\n             }\n \n@@ -1152,6 +1153,18 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     self.assert_iscleanup(mir, block_data, *target, is_cleanup);\n                 }\n             }\n+            TerminatorKind::FalseUnwind {\n+                real_target,\n+                unwind\n+            } => {\n+                self.assert_iscleanup(mir, block_data, real_target, is_cleanup);\n+                if let Some(unwind) = unwind {\n+                    if is_cleanup {\n+                        span_mirbug!(self, block_data, \"cleanup in cleanup block via false unwind\");\n+                    }\n+                    self.assert_iscleanup(mir, block_data, unwind, true);\n+                }\n+            }\n         }\n     }\n "}, {"sha": "e2096bf5356c15ff748fe90a3a0c88582ee80d81", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=bdc37aa05722818e8edb5d93825a62921f351913", "patch": "@@ -728,7 +728,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                TerminatorKind::FalseEdges {\n                                    real_target: block,\n                                    imaginary_targets:\n-                                       vec![candidate.next_candidate_pre_binding_block]});\n+                                       vec![candidate.next_candidate_pre_binding_block],\n+                               });\n \n         self.bind_matched_candidate(block, candidate.bindings);\n \n@@ -749,7 +750,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                TerminatorKind::FalseEdges {\n                                    real_target: otherwise,\n                                    imaginary_targets:\n-                                       vec![candidate.next_candidate_pre_binding_block] });\n+                                       vec![candidate.next_candidate_pre_binding_block],\n+                               });\n             Some(otherwise)\n         } else {\n             self.cfg.terminate(block, candidate_source_info,"}, {"sha": "ad6ac6876ce669b241a1e881bac1c5124fe09d10", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=bdc37aa05722818e8edb5d93825a62921f351913", "patch": "@@ -517,6 +517,7 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n             mir::TerminatorKind::Yield {..} |\n             mir::TerminatorKind::Goto {..} |\n             mir::TerminatorKind::FalseEdges {..} |\n+            mir::TerminatorKind::FalseUnwind {..} |\n             mir::TerminatorKind::Unreachable => {}\n         }\n     }"}, {"sha": "9c7d9b398cc566561d27e7fccbf8f1e6350923d1", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=bdc37aa05722818e8edb5d93825a62921f351913", "patch": "@@ -864,6 +864,14 @@ impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D> where D: BitDenotation\n                     self.propagate_bits_into_entry_set_for(in_out, changed, target);\n                 }\n             }\n+            mir::TerminatorKind::FalseUnwind { ref real_target, unwind } => {\n+                self.propagate_bits_into_entry_set_for(in_out, changed, real_target);\n+                if let Some(ref unwind) = unwind {\n+                    if !self.dead_unwinds.contains(&bb) {\n+                        self.propagate_bits_into_entry_set_for(in_out, changed, unwind);\n+                    }\n+                }\n+            }\n         }\n     }\n "}, {"sha": "635d99e7737a97467025175374c2b11837bea2d9", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=bdc37aa05722818e8edb5d93825a62921f351913", "patch": "@@ -346,6 +346,7 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n             TerminatorKind::Abort |\n             TerminatorKind::GeneratorDrop |\n             TerminatorKind::FalseEdges { .. } |\n+            TerminatorKind::FalseUnwind { .. } |\n             TerminatorKind::Unreachable => { }\n \n             TerminatorKind::Return => {"}, {"sha": "606bda51edb1fdfe304a01c4eada0f125c0b7abe", "filename": "src/librustc_mir/interpret/terminator/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs?ref=bdc37aa05722818e8edb5d93825a62921f351913", "patch": "@@ -165,6 +165,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             Resume => unimplemented!(),\n             Abort => unimplemented!(),\n             FalseEdges { .. } => bug!(\"should have been eliminated by `simplify_branches` mir pass\"),\n+            FalseUnwind { .. } => bug!(\"should have been eliminated by `simplify_branches` mir pass\"),\n             Unreachable => return err!(Unreachable),\n         }\n "}, {"sha": "a80dfaef0dab1b276ff74892f80facd2c3d879b9", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=bdc37aa05722818e8edb5d93825a62921f351913", "patch": "@@ -636,7 +636,8 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n             mir::TerminatorKind::Assert { .. } => {}\n             mir::TerminatorKind::GeneratorDrop |\n             mir::TerminatorKind::Yield { .. } |\n-            mir::TerminatorKind::FalseEdges { .. } => bug!(),\n+            mir::TerminatorKind::FalseEdges { .. } |\n+            mir::TerminatorKind::FalseUnwind { .. } => bug!(),\n         }\n \n         self.super_terminator_kind(block, kind, location);"}, {"sha": "bbc7803b84d8e1a87e68b52102533d4a32ed3134", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=bdc37aa05722818e8edb5d93825a62921f351913", "patch": "@@ -76,7 +76,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             TerminatorKind::Abort |\n             TerminatorKind::Return |\n             TerminatorKind::Unreachable |\n-            TerminatorKind::FalseEdges { .. } => {\n+            TerminatorKind::FalseEdges { .. } |\n+            TerminatorKind::FalseUnwind { .. } => {\n                 // safe (at least as emitted during MIR construction)\n             }\n "}, {"sha": "2d861921c9c8d6d7ee91c86045c64eb7dfc6f8d1", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=bdc37aa05722818e8edb5d93825a62921f351913", "patch": "@@ -813,6 +813,9 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n                     *target = self.update_target(*target);\n                 }\n             }\n+            TerminatorKind::FalseUnwind { real_target: _ , unwind: _ } =>\n+                // see the ordering of passes in the optimized_mir query.\n+                bug!(\"False unwinds should have been removed before inlining\")\n         }\n     }\n "}, {"sha": "741e39fe068800a9e770cb58417e56b2be3696a7", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=bdc37aa05722818e8edb5d93825a62921f351913", "patch": "@@ -327,7 +327,8 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n                 TerminatorKind::GeneratorDrop |\n                 TerminatorKind::Yield { .. } |\n                 TerminatorKind::Unreachable |\n-                TerminatorKind::FalseEdges { .. } => None,\n+                TerminatorKind::FalseEdges { .. } |\n+                TerminatorKind::FalseUnwind { .. } => None,\n \n                 TerminatorKind::Return => {\n                     // Check for unused values. This usually means"}, {"sha": "cd80d25c410f1fc9e906406a9bd35b26f1a2a948", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=bdc37aa05722818e8edb5d93825a62921f351913", "patch": "@@ -75,7 +75,8 @@ impl RemoveNoopLandingPads {\n             TerminatorKind::Goto { .. } |\n             TerminatorKind::Resume |\n             TerminatorKind::SwitchInt { .. } |\n-            TerminatorKind::FalseEdges { .. } => {\n+            TerminatorKind::FalseEdges { .. } |\n+            TerminatorKind::FalseUnwind { .. } => {\n                 terminator.successors().iter().all(|succ| {\n                     nop_landing_pads.contains(succ.index())\n                 })"}, {"sha": "41089f567bd710c65d99219109fc428c2615bec5", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=bdc37aa05722818e8edb5d93825a62921f351913", "patch": "@@ -64,6 +64,9 @@ impl MirPass for SimplifyBranches {\n                 TerminatorKind::FalseEdges { real_target, .. } => {\n                     TerminatorKind::Goto { target: real_target }\n                 },\n+                TerminatorKind::FalseUnwind { real_target, .. } => {\n+                    TerminatorKind::Goto { target: real_target }\n+                },\n                 _ => continue\n             };\n         }"}, {"sha": "e4705674e229233eb817f87db48a4459e758abee", "filename": "src/librustc_passes/mir_stats.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc_passes%2Fmir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc_passes%2Fmir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fmir_stats.rs?ref=bdc37aa05722818e8edb5d93825a62921f351913", "patch": "@@ -123,6 +123,7 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n             TerminatorKind::GeneratorDrop => \"TerminatorKind::GeneratorDrop\",\n             TerminatorKind::Yield { .. } => \"TerminatorKind::Yield\",\n             TerminatorKind::FalseEdges { .. } => \"TerminatorKind::FalseEdges\",\n+            TerminatorKind::FalseUnwind { .. } => \"TerminatorKind::FalseUnwind\",\n         }, kind);\n         self.super_terminator_kind(block, kind, location);\n     }"}, {"sha": "f683703ce6d53403851dcb5567bd0fda34871dba", "filename": "src/librustc_trans/mir/analyze.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs?ref=bdc37aa05722818e8edb5d93825a62921f351913", "patch": "@@ -242,7 +242,8 @@ pub fn cleanup_kinds<'a, 'tcx>(mir: &mir::Mir<'tcx>) -> IndexVec<mir::BasicBlock\n                 TerminatorKind::Unreachable |\n                 TerminatorKind::SwitchInt { .. } |\n                 TerminatorKind::Yield { .. } |\n-                TerminatorKind::FalseEdges { .. } => {\n+                TerminatorKind::FalseEdges { .. } |\n+                TerminatorKind::FalseUnwind { .. } => {\n                     /* nothing to do */\n                 }\n                 TerminatorKind::Call { cleanup: unwind, .. } |"}, {"sha": "bb2a7840faee76e38b57d152e84991fd835948a9", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdc37aa05722818e8edb5d93825a62921f351913/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=bdc37aa05722818e8edb5d93825a62921f351913", "patch": "@@ -608,8 +608,9 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                         cleanup);\n             }\n             mir::TerminatorKind::GeneratorDrop |\n-            mir::TerminatorKind::Yield { .. } |\n-            mir::TerminatorKind::FalseEdges { .. } => bug!(\"generator ops in trans\"),\n+            mir::TerminatorKind::Yield { .. } => bug!(\"generator ops in trans\"),\n+            mir::TerminatorKind::FalseEdges { .. } |\n+            mir::TerminatorKind::FalseUnwind { .. } => bug!(\"borrowck false edges in trans\"),\n         }\n     }\n "}]}