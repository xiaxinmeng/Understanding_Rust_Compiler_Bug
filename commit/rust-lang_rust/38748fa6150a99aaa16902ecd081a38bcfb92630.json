{"sha": "38748fa6150a99aaa16902ecd081a38bcfb92630", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NzQ4ZmE2MTUwYTk5YWFhMTY5MDJlY2QwODFhMzhiY2ZiOTI2MzA=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-22T13:47:16Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-22T13:47:16Z"}, "message": "refactor away IntegerPtr", "tree": {"sha": "16cba87ed2759ace487694afa41b4bdc8bc81475", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16cba87ed2759ace487694afa41b4bdc8bc81475"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38748fa6150a99aaa16902ecd081a38bcfb92630", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJX4+DkAAoJEFbW7qD8Z6xGCjoP/izaXstcNIia6d9YL3cUaG/o\ngRe6xni/rALnO6t79P5HgHYmhBKg6374Uh8BomMu0XwY4S0zMd6PeYFZCzyxZuo9\n4cwcXYt+YbSkFhstXCMzLisMlR3N0IOw/yuwnnZNIOjzweI8zOIT5qmDHZ5VeEnS\nLEeD9EO2nx8TIQ7CdywAUuPyYUhr87sYY5EXqmPnp7eueuXv34OerCPEr120yGKO\nkbkyqjQ81EQlBKB0yMjKNihQuyOJMvhjl20MkjHBBDGbt3Ug9S1sRrlAQcSEeA5L\noCf3xTnZ0n2khxVF9s1gltfzBcEKCLJmrxrwtmhAU2qX4KVcebiuWVcCEC2jSyjV\nTmulQUIQNBJ3qFX3+6kiIAZNmhAsu42z4fLv5fscb5VP8zYqyLLgTe91gpT4tVJ5\n3hIbrX9j9afngaJUihiEciJdQ7ApoNvtXMYGFe/dmwNYadl1JSXSYSDEDxHiGmd3\nS4hvpbR3zwmtPCqpjbhdlvqxYczVzsAPSxuJLfBdSjHsnjV/r4jo1+ppYHURR2s7\nNtw2oKiiAx5KEqJCHPAe64p4qoA748MHWHhO31AGKaebvvZVav40txOPoqfoJtD2\nf0zOIvz5rx7tHGTFbhnbFz8ychlyG38e1yaQmm3+sfQ318ODBAbzmeK9bEiU6960\nmyK9b7i+5VlDDS1dOfYD\n=EE88\n-----END PGP SIGNATURE-----", "payload": "tree 16cba87ed2759ace487694afa41b4bdc8bc81475\nparent 875a4542f9eeace01f1ee5ec5fd25904601f58c5\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1474552036 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1474552036 +0200\n\nrefactor away IntegerPtr"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38748fa6150a99aaa16902ecd081a38bcfb92630", "html_url": "https://github.com/rust-lang/rust/commit/38748fa6150a99aaa16902ecd081a38bcfb92630", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38748fa6150a99aaa16902ecd081a38bcfb92630/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "875a4542f9eeace01f1ee5ec5fd25904601f58c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/875a4542f9eeace01f1ee5ec5fd25904601f58c5", "html_url": "https://github.com/rust-lang/rust/commit/875a4542f9eeace01f1ee5ec5fd25904601f58c5"}], "stats": {"total": 68, "additions": 24, "deletions": 44}, "files": [{"sha": "fde3db15968cf4da951261349dce41628e427dc9", "filename": "src/error.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/38748fa6150a99aaa16902ecd081a38bcfb92630/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38748fa6150a99aaa16902ecd081a38bcfb92630/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=38748fa6150a99aaa16902ecd081a38bcfb92630", "patch": "@@ -10,7 +10,7 @@ use syntax::codemap::Span;\n pub enum EvalError<'tcx> {\n     FunctionPointerTyMismatch(&'tcx BareFnTy<'tcx>, &'tcx BareFnTy<'tcx>),\n     DanglingPointerDeref,\n-    ZstAllocAccess,\n+    InvalidMemoryAccess,\n     InvalidFunctionPointer,\n     InvalidBool,\n     InvalidDiscriminant,\n@@ -20,7 +20,6 @@ pub enum EvalError<'tcx> {\n         allocation_size: usize,\n     },\n     ReadPointerAsBytes,\n-    ReadBytesAsPointer,\n     InvalidPointerMath,\n     ReadUndefBytes,\n     InvalidBoolOp(mir::BinOp),\n@@ -54,8 +53,8 @@ impl<'tcx> Error for EvalError<'tcx> {\n         match *self {\n             EvalError::FunctionPointerTyMismatch(..) =>\n                 \"tried to call a function through a function pointer of a different type\",\n-            EvalError::ZstAllocAccess =>\n-                \"tried to access the ZST allocation\",\n+            EvalError::InvalidMemoryAccess =>\n+                \"tried to access memory through an invalid pointer\",\n             EvalError::DanglingPointerDeref =>\n                 \"dangling pointer was dereferenced\",\n             EvalError::InvalidFunctionPointer =>\n@@ -68,8 +67,6 @@ impl<'tcx> Error for EvalError<'tcx> {\n                 \"pointer offset outside bounds of allocation\",\n             EvalError::ReadPointerAsBytes =>\n                 \"a raw memory access tried to access part of a pointer value as raw bytes\",\n-            EvalError::ReadBytesAsPointer =>\n-                \"attempted to interpret some raw bytes as a pointer address\",\n             EvalError::InvalidPointerMath =>\n                 \"attempted to do math or a comparison on pointers into different allocations\",\n             EvalError::ReadUndefBytes =>"}, {"sha": "6227999569cf462d29064ce74626cb543ca0f5b3", "filename": "src/interpreter/cast.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/38748fa6150a99aaa16902ecd081a38bcfb92630/src%2Finterpreter%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38748fa6150a99aaa16902ecd081a38bcfb92630/src%2Finterpreter%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fcast.rs?ref=38748fa6150a99aaa16902ecd081a38bcfb92630", "patch": "@@ -25,8 +25,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             U16(u) => self.cast_const_int(u as u64, ty, false),\n             U32(u) => self.cast_const_int(u as u64, ty, false),\n             Char(c) => self.cast_const_int(c as u64, ty, false),\n-            U64(u) |\n-            IntegerPtr(u) => self.cast_const_int(u, ty, false),\n+            U64(u) => self.cast_const_int(u, ty, false),\n             FnPtr(ptr) |\n             Ptr(ptr) => self.cast_ptr(ptr, ty),\n         }\n@@ -74,7 +73,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             ty::TyFloat(ast::FloatTy::F64) => Ok(F64(v as f64)),\n             ty::TyFloat(ast::FloatTy::F32) if negative => Ok(F32(v as i64 as f32)),\n             ty::TyFloat(ast::FloatTy::F32) => Ok(F32(v as f32)),\n-            ty::TyRawPtr(_) => Ok(IntegerPtr(v)),\n+            ty::TyRawPtr(_) => Ok(Ptr(Pointer::from_int(v as usize))),\n             ty::TyChar if v as u8 as u64 == v => Ok(Char(v as u8 as char)),\n             ty::TyChar => Err(EvalError::InvalidChar(v)),\n             _ => Err(EvalError::Unimplemented(format!(\"int to {:?} cast\", ty))),"}, {"sha": "9de72dc6225b410b43077f5228d0dcbd1227da7a", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38748fa6150a99aaa16902ecd081a38bcfb92630/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38748fa6150a99aaa16902ecd081a38bcfb92630/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=38748fa6150a99aaa16902ecd081a38bcfb92630", "patch": "@@ -1064,13 +1064,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             &ty::TyRef(_, ty::TypeAndMut { ty, .. }) |\n             &ty::TyRawPtr(ty::TypeAndMut { ty, .. }) => {\n                 if self.type_is_sized(ty) {\n-                    match self.memory.read_ptr(ptr) {\n-                        Ok(p) => PrimVal::Ptr(p),\n-                        Err(EvalError::ReadBytesAsPointer) => {\n-                            PrimVal::IntegerPtr(self.memory.read_usize(ptr)?)\n-                        }\n-                        Err(e) => return Err(e),\n-                    }\n+                    PrimVal::Ptr(self.memory.read_ptr(ptr)?)\n                 } else {\n                     bug!(\"primitive read of fat pointer type: {:?}\", ty);\n                 }"}, {"sha": "38b62254130f6920a584d5d7f6db7686ad3ff172", "filename": "src/interpreter/terminator/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/38748fa6150a99aaa16902ecd081a38bcfb92630/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38748fa6150a99aaa16902ecd081a38bcfb92630/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fintrinsics.rs?ref=38748fa6150a99aaa16902ecd081a38bcfb92630", "patch": "@@ -132,18 +132,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let ptr_arg = args_ptrs[0];\n                 let offset = self.memory.read_isize(args_ptrs[1])?;\n \n-                match self.memory.read_ptr(ptr_arg) {\n-                    Ok(ptr) => {\n-                        let result_ptr = ptr.offset(offset as isize * pointee_size);\n-                        self.memory.write_ptr(dest, result_ptr)?;\n-                    }\n-                    Err(EvalError::ReadBytesAsPointer) => {\n-                        let addr = self.memory.read_isize(ptr_arg)?;\n-                        let result_addr = addr + offset * pointee_size as i64;\n-                        self.memory.write_isize(dest, result_addr)?;\n-                    }\n-                    Err(e) => return Err(e),\n-                }\n+                let ptr = self.memory.read_ptr(ptr_arg)?;\n+                let result_ptr = ptr.offset(offset as isize * pointee_size);\n+                self.memory.write_ptr(dest, result_ptr)?;\n             }\n \n             \"overflowing_sub\" => {"}, {"sha": "27e6ffff00ebe409744ca1a12d1ac657cdec75e5", "filename": "src/memory.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38748fa6150a99aaa16902ecd081a38bcfb92630/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38748fa6150a99aaa16902ecd081a38bcfb92630/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=38748fa6150a99aaa16902ecd081a38bcfb92630", "patch": "@@ -55,6 +55,12 @@ impl Pointer {\n     pub fn points_to_zst(&self) -> bool {\n         self.alloc_id == ZST_ALLOC_ID\n     }\n+    pub fn from_int(i: usize) -> Self {\n+        Pointer {\n+            alloc_id: ZST_ALLOC_ID,\n+            offset: i,\n+        }\n+    }\n     fn zst_ptr() -> Self {\n         Pointer {\n             alloc_id: ZST_ALLOC_ID,\n@@ -279,7 +285,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             Some(alloc) => Ok(alloc),\n             None => match self.functions.get(&id) {\n                 Some(_) => Err(EvalError::DerefFunctionPointer),\n-                None if id == ZST_ALLOC_ID => Err(EvalError::ZstAllocAccess),\n+                None if id == ZST_ALLOC_ID => Err(EvalError::InvalidMemoryAccess),\n                 None => Err(EvalError::DanglingPointerDeref),\n             }\n         }\n@@ -291,7 +297,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             Some(alloc) => Ok(alloc),\n             None => match self.functions.get(&id) {\n                 Some(_) => Err(EvalError::DerefFunctionPointer),\n-                None if id == ZST_ALLOC_ID => Err(EvalError::ZstAllocAccess),\n+                None if id == ZST_ALLOC_ID => Err(EvalError::InvalidMemoryAccess),\n                 None => Err(EvalError::DanglingPointerDeref),\n             }\n         }\n@@ -511,7 +517,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         let alloc = self.get(ptr.alloc_id)?;\n         match alloc.relocations.get(&ptr.offset) {\n             Some(&alloc_id) => Ok(Pointer { alloc_id: alloc_id, offset: offset }),\n-            None => Err(EvalError::ReadBytesAsPointer),\n+            None => Ok(Pointer::from_int(offset)),\n         }\n     }\n \n@@ -522,7 +528,6 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n     }\n \n     pub fn write_primval(&mut self, ptr: Pointer, val: PrimVal) -> EvalResult<'tcx, ()> {\n-        let pointer_size = self.pointer_size();\n         match val {\n             PrimVal::Bool(b) => self.write_bool(ptr, b),\n             PrimVal::I8(n)   => self.write_int(ptr, n as i64, 1),\n@@ -534,7 +539,6 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             PrimVal::U32(n)  => self.write_uint(ptr, n as u64, 4),\n             PrimVal::U64(n)  => self.write_uint(ptr, n as u64, 8),\n             PrimVal::Char(c) => self.write_uint(ptr, c as u64, 4),\n-            PrimVal::IntegerPtr(n) => self.write_uint(ptr, n as u64, pointer_size),\n             PrimVal::F32(f) => self.write_f32(ptr, f),\n             PrimVal::F64(f) => self.write_f64(ptr, f),\n             PrimVal::FnPtr(p) |"}, {"sha": "717ad99dbcd50b813321f2c77af5331909584c3a", "filename": "src/primval.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/38748fa6150a99aaa16902ecd081a38bcfb92630/src%2Fprimval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38748fa6150a99aaa16902ecd081a38bcfb92630/src%2Fprimval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fprimval.rs?ref=38748fa6150a99aaa16902ecd081a38bcfb92630", "patch": "@@ -14,7 +14,6 @@ pub enum PrimVal {\n \n     Ptr(Pointer),\n     FnPtr(Pointer),\n-    IntegerPtr(u64),\n     Char(char),\n \n     F32(f32), F64(f64),\n@@ -209,14 +208,8 @@ pub fn binary_op<'tcx>(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> Eva\n             })\n         }\n \n-        (IntegerPtr(l), IntegerPtr(r)) => int_binops!(IntegerPtr, l, r),\n-\n-        (Ptr(_), IntegerPtr(_)) |\n-        (IntegerPtr(_), Ptr(_)) |\n         (FnPtr(_), Ptr(_)) |\n-        (Ptr(_), FnPtr(_)) |\n-        (FnPtr(_), IntegerPtr(_)) |\n-        (IntegerPtr(_), FnPtr(_)) =>\n+        (Ptr(_), FnPtr(_)) =>\n             unrelated_ptr_ops(bin_op)?,\n \n         (FnPtr(l_ptr), FnPtr(r_ptr)) => match bin_op {"}, {"sha": "fcf34ed44c93aa523d2fd73dbb939a8a3e056bb6", "filename": "tests/compile-fail/null_pointer_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38748fa6150a99aaa16902ecd081a38bcfb92630/tests%2Fcompile-fail%2Fnull_pointer_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38748fa6150a99aaa16902ecd081a38bcfb92630/tests%2Fcompile-fail%2Fnull_pointer_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnull_pointer_deref.rs?ref=38748fa6150a99aaa16902ecd081a38bcfb92630", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n-    let x: i32 = unsafe { *std::ptr::null() }; //~ ERROR: attempted to interpret some raw bytes as a pointer address\n+    let x: i32 = unsafe { *std::ptr::null() }; //~ ERROR: tried to access memory through an invalid pointer\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "937546fdc350ac17d315c8af1a40b7a322ffa47e", "filename": "tests/compile-fail/wild_pointer_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38748fa6150a99aaa16902ecd081a38bcfb92630/tests%2Fcompile-fail%2Fwild_pointer_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38748fa6150a99aaa16902ecd081a38bcfb92630/tests%2Fcompile-fail%2Fwild_pointer_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fwild_pointer_deref.rs?ref=38748fa6150a99aaa16902ecd081a38bcfb92630", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let p = 42 as *const i32;\n-    let x = unsafe { *p }; //~ ERROR: attempted to interpret some raw bytes as a pointer address\n+    let x = unsafe { *p }; //~ ERROR: tried to access memory through an invalid pointer\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "970cc9abc9daf0d2040f5629fc18e922067d8fc1", "filename": "tests/compile-fail/zst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38748fa6150a99aaa16902ecd081a38bcfb92630/tests%2Fcompile-fail%2Fzst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38748fa6150a99aaa16902ecd081a38bcfb92630/tests%2Fcompile-fail%2Fzst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fzst.rs?ref=38748fa6150a99aaa16902ecd081a38bcfb92630", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     let x = &() as *const () as *const i32;\n-    let _ = unsafe { *x }; //~ ERROR: tried to access the ZST allocation\n+    let _ = unsafe { *x }; //~ ERROR: tried to access memory through an invalid pointer\n }"}, {"sha": "78d3025587f04c95de1cc280c0fca2236720c469", "filename": "tests/run-pass/zst.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38748fa6150a99aaa16902ecd081a38bcfb92630/tests%2Frun-pass%2Fzst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38748fa6150a99aaa16902ecd081a38bcfb92630/tests%2Frun-pass%2Fzst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fzst.rs?ref=38748fa6150a99aaa16902ecd081a38bcfb92630", "patch": "@@ -21,4 +21,6 @@ fn main() {\n     assert_eq!(use_zst(), A);\n     assert_eq!(&A as *const A as *const (), &() as *const _);\n     assert_eq!(&A as *const A, &A as *const A);\n+    let x = 42 as *mut ();\n+    unsafe { *x = (); }\n }"}]}