{"sha": "d39da6f97819becd9ea41c194b5f0daa178814fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzOWRhNmY5NzgxOWJlY2Q5ZWE0MWMxOTRiNWYwZGFhMTc4ODE0ZmU=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-03-06T18:56:38Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-06T23:13:35Z"}, "message": "Remove typestate workarounds", "tree": {"sha": "71f4f00e321803d1cf9ab61de31a8725d6befeb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71f4f00e321803d1cf9ab61de31a8725d6befeb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d39da6f97819becd9ea41c194b5f0daa178814fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d39da6f97819becd9ea41c194b5f0daa178814fe", "html_url": "https://github.com/rust-lang/rust/commit/d39da6f97819becd9ea41c194b5f0daa178814fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d39da6f97819becd9ea41c194b5f0daa178814fe/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b893bec4bbdfda549a1c45bd5328b3dd78a2e05c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b893bec4bbdfda549a1c45bd5328b3dd78a2e05c", "html_url": "https://github.com/rust-lang/rust/commit/b893bec4bbdfda549a1c45bd5328b3dd78a2e05c"}], "stats": {"total": 105, "additions": 37, "deletions": 68}, "files": [{"sha": "90fe0e0c4e7db4c266ce466935a5b0017b962fdb", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d39da6f97819becd9ea41c194b5f0daa178814fe/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39da6f97819becd9ea41c194b5f0daa178814fe/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=d39da6f97819becd9ea41c194b5f0daa178814fe", "patch": "@@ -137,8 +137,6 @@ impure fn main(vec[str] args) {\n                     input_file = some[str](arg);\n                 }\n             }\n-            // FIXME: dummy node to work around typestate mis-wiring bug.\n-            i = i;\n         }\n         i += 1u;\n     }"}, {"sha": "255614d0f077837016d694a8f2f6e8a42da538f4", "filename": "src/comp/front/extfmt.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d39da6f97819becd9ea41c194b5f0daa178814fe/src%2Fcomp%2Ffront%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39da6f97819becd9ea41c194b5f0daa178814fe/src%2Fcomp%2Ffront%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fextfmt.rs?ref=d39da6f97819becd9ea41c194b5f0daa178814fe", "patch": "@@ -244,9 +244,7 @@ fn parse_count(str s, uint i, uint lim) -> tup(count, uint) {\n         ret tup(count_implied, i);\n     }\n \n-    // FIXME: These inner functions are just to avoid a rustboot\n-    // \"Unsatisfied precondition constraint\" bug with alts nested in ifs\n-    fn parse_star_count(str s, uint i, uint lim) -> tup(count, uint) {\n+    if (s.(i) == ('*' as u8)) {\n         auto param = parse_parameter(s, i + 1u, lim);\n         auto j = param._1;\n         alt (param._0) {\n@@ -257,9 +255,7 @@ fn parse_count(str s, uint i, uint lim) -> tup(count, uint) {\n                 ret tup(count_is_param(n), j);\n             }\n         }\n-    }\n-\n-    fn parse_count_(str s, uint i, uint lim) -> tup(count, uint) {\n+    } else {\n         auto num = peek_num(s, i, lim);\n         alt (num) {\n             case (none[tup(uint, uint)]) {\n@@ -270,12 +266,6 @@ fn parse_count(str s, uint i, uint lim) -> tup(count, uint) {\n             }\n         }\n     }\n-\n-    if (s.(i) == ('*' as u8)) {\n-        ret parse_star_count(s, i, lim);\n-    } else {\n-        ret parse_count_(s, i, lim);\n-    }\n }\n \n fn parse_precision(str s, uint i, uint lim) -> tup(count, uint) {\n@@ -318,9 +308,6 @@ fn parse_type(str s, uint i, uint lim) -> tup(ty, uint) {\n     } else if (_str.eq(tstr, \"t\")) {\n         t = ty_bits;\n     } else {\n-        // FIXME: This is a hack to avoid 'unsatisfied precondition\n-        // constraint' on uninitialized variable t below\n-        t = ty_bool;\n         log \"unknown type in conversion\";\n         fail;\n     }"}, {"sha": "8665a425e89fd06e60425c6b46c997656069e368", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d39da6f97819becd9ea41c194b5f0daa178814fe/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39da6f97819becd9ea41c194b5f0daa178814fe/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=d39da6f97819becd9ea41c194b5f0daa178814fe", "patch": "@@ -1365,7 +1365,7 @@ impure fn parse_initializer(parser p) -> option.t[@ast.expr] {\n impure fn parse_pat(parser p) -> @ast.pat {\n     auto lo = p.get_span();\n     auto hi = lo;\n-    auto pat = ast.pat_wild(ast.ann_none);  // FIXME: typestate bug\n+    auto pat;\n \n     alt (p.peek()) {\n         case (token.UNDERSCORE) {\n@@ -1541,38 +1541,36 @@ fn index_block(vec[@ast.stmt] stmts, option.t[@ast.expr] expr) -> ast.block_ {\n     auto index = new_str_hash[uint]();\n     auto u = 0u;\n     for (@ast.stmt s in stmts) {\n-        // FIXME: typestate bug requires we do this up top, not\n-        // down below loop. Sigh.\n-        u += 1u;\n         alt (s.node) {\n             case (ast.stmt_decl(?d)) {\n                 alt (d.node) {\n                     case (ast.decl_local(?loc)) {\n-                        index.insert(loc.ident, u-1u);\n+                        index.insert(loc.ident, u);\n                     }\n                     case (ast.decl_item(?it)) {\n                         alt (it.node) {\n                             case (ast.item_fn(?i, _, _, _, _)) {\n-                                index.insert(i, u-1u);\n+                                index.insert(i, u);\n                             }\n                             case (ast.item_mod(?i, _, _)) {\n-                                index.insert(i, u-1u);\n+                                index.insert(i, u);\n                             }\n                             case (ast.item_ty(?i, _, _, _, _)) {\n-                                index.insert(i, u-1u);\n+                                index.insert(i, u);\n                             }\n                             case (ast.item_tag(?i, _, _, _)) {\n-                                index.insert(i, u-1u);\n+                                index.insert(i, u);\n                             }\n                             case (ast.item_obj(?i, _, _, _, _)) {\n-                                index.insert(i, u-1u);\n+                                index.insert(i, u);\n                             }\n                         }\n                     }\n                 }\n             }\n             case (_) { /* fall through */ }\n         }\n+        u += 1u;\n     }\n     ret rec(stmts=stmts, expr=expr, index=index);\n }"}, {"sha": "e00d5a92c79ff15c39ebc8859434f6bff38d737b", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d39da6f97819becd9ea41c194b5f0daa178814fe/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39da6f97819becd9ea41c194b5f0daa178814fe/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=d39da6f97819becd9ea41c194b5f0daa178814fe", "patch": "@@ -929,8 +929,8 @@ fn static_size_of_tag(@crate_ctxt cx, @ty.t t) -> uint {\n         ret cx.tag_sizes.get(t);\n     }\n \n-    auto tid = tup(0, 0);           // FIXME (#250): typestate botch\n-    let vec[@ty.t] subtys = vec();  // FIXME (#250): typestate botch\n+    auto tid;\n+    let vec[@ty.t] subtys;\n     alt (t.struct) {\n         case (ty.ty_tag(?tid_, ?subtys_)) {\n             tid = tid_;\n@@ -3419,12 +3419,12 @@ fn trans_bind(@block_ctxt cx, @ast.expr f,\n         }\n \n         // Figure out which tydescs we need to pass, if any.\n-        // FIXME: typestate botch\n-        let @ty.t outgoing_fty = ty.plain_ty(ty.ty_nil);\n-        let vec[ValueRef] lltydescs = vec();\n+        let @ty.t outgoing_fty;\n+        let vec[ValueRef] lltydescs;\n         alt (f_res.generic) {\n             case (none[generic_info]) {\n                 outgoing_fty = ty.expr_ty(f);\n+                lltydescs = vec();\n             }\n             case (some[generic_info](?ginfo)) {\n                 outgoing_fty = ginfo.item_type;"}, {"sha": "3f209d3c7aed669be4a19a79d16eea7f991d92bd", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 13, "deletions": 29, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d39da6f97819becd9ea41c194b5f0daa178814fe/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39da6f97819becd9ea41c194b5f0daa178814fe/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=d39da6f97819becd9ea41c194b5f0daa178814fe", "patch": "@@ -1018,32 +1018,6 @@ fn unify(@ty.t expected, @ty.t actual, &unify_handler handler)\n         ret ures_err(terr_meth_count, expected, actual);\n       }\n \n-      // FIXME: work around buggy typestate logic for 'alt', sigh.\n-      fn is_ok(&unify_result r) -> bool {\n-          alt (r) {\n-              case (ures_ok(?tfn)) {\n-                  ret true;\n-              }\n-              case (_) {}\n-          }\n-          ret false;\n-      }\n-\n-      fn append_if_ok(&method e_meth,\n-                      &unify_result r, &mutable vec[method] result_meths) {\n-          alt (r) {\n-              case (ures_ok(?tfn)) {\n-                  alt (tfn.struct) {\n-                      case (ty_fn(?proto, ?ins, ?out)) {\n-                          result_meths += vec(rec(inputs = ins,\n-                                                  output = out\n-                                                  with e_meth));\n-                      }\n-                  }\n-              }\n-          }\n-      }\n-\n       while (i < expected_len) {\n         auto e_meth = expected_meths.(i);\n         auto a_meth = actual_meths.(i);\n@@ -1056,10 +1030,20 @@ fn unify(@ty.t expected, @ty.t actual, &unify_handler handler)\n                           expected, actual, handler,\n                           e_meth.inputs, e_meth.output,\n                           a_meth.inputs, a_meth.output);\n-        if (!is_ok(r)) {\n-          ret r;\n+        alt (r) {\n+            case (ures_ok(?tfn)) {\n+                alt (tfn.struct) {\n+                    case (ty_fn(?proto, ?ins, ?out)) {\n+                        result_meths += vec(rec(inputs = ins,\n+                                                output = out\n+                                                with e_meth));\n+                    }\n+                }\n+            }\n+            case (_) {\n+                ret r;\n+            }\n         }\n-        append_if_ok(e_meth, r, result_meths);\n         i += 1u;\n       }\n       auto t = plain_ty(ty_obj(result_meths));"}, {"sha": "c257a1677f7add3fed9cea66c5d74eaabcf95989", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d39da6f97819becd9ea41c194b5f0daa178814fe/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39da6f97819becd9ea41c194b5f0daa178814fe/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=d39da6f97819becd9ea41c194b5f0daa178814fe", "patch": "@@ -890,7 +890,7 @@ fn are_compatible(&@fn_ctxt fcx, @ty.t expected, @ty.t actual) -> bool {\n // TODO: enforce this via a predicate.\n \n fn demand_pat(&@fn_ctxt fcx, @ty.t expected, @ast.pat pat) -> @ast.pat {\n-    auto p_1 = ast.pat_wild(ast.ann_none);  // FIXME: typestate botch\n+    auto p_1;\n \n     alt (pat.node) {\n         case (ast.pat_wild(?ann)) {\n@@ -960,9 +960,7 @@ fn demand_expr(&@fn_ctxt fcx, @ty.t expected, @ast.expr e) -> @ast.expr {\n \n fn demand_expr_full(&@fn_ctxt fcx, @ty.t expected, @ast.expr e,\n                     autoderef_kind adk) -> @ast.expr {\n-    // FIXME: botch to work around typestate bug in rustboot\n-    let vec[@ast.expr] v = vec();\n-    auto e_1 = ast.expr_vec(v, ast.ann_none);\n+    auto e_1;\n \n     alt (e.node) {\n         case (ast.expr_vec(?es_0, ?ann)) {\n@@ -1167,6 +1165,10 @@ fn demand_expr_full(&@fn_ctxt fcx, @ty.t expected, @ast.expr e,\n         case (ast.expr_put(_)) { e_1 = e.node; }\n         case (ast.expr_be(_)) { e_1 = e.node; }\n         case (ast.expr_check_expr(_)) { e_1 = e.node; }\n+        case (_) {\n+            fcx.ccx.sess.unimpl(\"type unification for expression variant\");\n+            fail;\n+        }\n     }\n \n     ret @fold.respan[ast.expr_](e.span, e_1);\n@@ -1331,7 +1333,7 @@ fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n         }\n \n         auto rt_0 = next_ty_var(fcx.ccx);\n-        auto t_0 = plain_ty(ty.ty_uint); // FIXME: typestate botch\n+        auto t_0;\n         alt (expr_ty(f_0).struct) {\n             case (ty.ty_fn(?proto, _, _))   {\n                 t_0 = plain_ty(ty.ty_fn(proto, arg_tys_0, rt_0));\n@@ -1777,9 +1779,9 @@ fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n             auto result = check_call_or_bind(fcx, f, args);\n \n             // Pull the argument and return types out.\n-            auto proto_1 = ast.proto_fn;        // FIXME: typestate botch\n+            auto proto_1;\n             let vec[ty.arg] arg_tys_1 = vec();\n-            auto rt_1 = plain_ty(ty.ty_nil);    // FIXME: typestate botch\n+            auto rt_1;\n             alt (expr_ty(result._0).struct) {\n                 case (ty.ty_fn(?proto, ?arg_tys, ?rt)) {\n                     proto_1 = proto;"}]}