{"sha": "39b16077bbcac64eb62f484486c703aed405ef2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5YjE2MDc3YmJjYWM2NGViNjJmNDg0NDg2YzcwM2FlZDQwNWVmMmY=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-09T23:07:49Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-15T16:26:51Z"}, "message": "Port ID-based channels.", "tree": {"sha": "883cd01d305130374bb0438475716982c1c483c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/883cd01d305130374bb0438475716982c1c483c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39b16077bbcac64eb62f484486c703aed405ef2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39b16077bbcac64eb62f484486c703aed405ef2f", "html_url": "https://github.com/rust-lang/rust/commit/39b16077bbcac64eb62f484486c703aed405ef2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39b16077bbcac64eb62f484486c703aed405ef2f/comments", "author": null, "committer": null, "parents": [{"sha": "04af99ecb0dee1cb3df0032f7e7ba08ffc6c5bd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/04af99ecb0dee1cb3df0032f7e7ba08ffc6c5bd4", "html_url": "https://github.com/rust-lang/rust/commit/04af99ecb0dee1cb3df0032f7e7ba08ffc6c5bd4"}], "stats": {"total": 103, "additions": 96, "deletions": 7}, "files": [{"sha": "451c69dafd988108858bc8297133aa64d83c4154", "filename": "src/lib/comm.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/39b16077bbcac64eb62f484486c703aed405ef2f/src%2Flib%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b16077bbcac64eb62f484486c703aed405ef2f/src%2Flib%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fcomm.rs?ref=39b16077bbcac64eb62f484486c703aed405ef2f", "patch": "@@ -1,12 +1,15 @@\n import sys;\n import ptr;\n import unsafe;\n+import task;\n+import task::task_id;\n \n export _chan;\n export _port;\n \n export mk_port;\n export chan_from_unsafe_ptr;\n+export send;\n \n native \"rust\" mod rustrt {\n     type void;\n@@ -17,16 +20,28 @@ native \"rust\" mod rustrt {\n     fn take_chan(ch : *rust_chan);\n     fn drop_chan(ch : *rust_chan);\n     fn chan_send(ch: *rust_chan, v : *void);\n+    // FIXME: data should be -T, not &T, but this doesn't seem to be\n+    // supported yet.\n+    fn chan_id_send[~T](target_task : task_id, target_port : port_id,\n+                        data : &T);\n \n     fn new_port(unit_sz : uint) -> *rust_port;\n     fn del_port(po : *rust_port);\n     fn drop_port(po : *rust_port);\n+    fn get_port_id(po : *rust_port) -> port_id;\n }\n \n native \"rust-intrinsic\" mod rusti {\n-    fn recv[T](port : *rustrt::rust_port) -> T;\n+    fn recv[~T](port : *rustrt::rust_port) -> T;\n }\n \n+type port_id = int;\n+\n+type chan_t[~T] = {\n+    task : task_id,\n+    port : port_id\n+};\n+\n resource chan_ptr(ch: *rustrt::rust_chan) {\n     rustrt::drop_chan(ch);\n }\n@@ -36,7 +51,7 @@ resource port_ptr(po: *rustrt::rust_port) {\n     rustrt::del_port(po);\n }\n \n-obj _chan[T](raw_chan : @chan_ptr) {\n+obj _chan[~T](raw_chan : @chan_ptr) {\n     fn send(v : &T) {\n         rustrt::chan_send(**raw_chan,\n                           unsafe::reinterpret_cast(ptr::addr_of(v)));\n@@ -49,20 +64,33 @@ obj _chan[T](raw_chan : @chan_ptr) {\n     }\n }\n \n-fn chan_from_unsafe_ptr[T](ch : *u8) -> _chan[T] {\n+fn chan_from_unsafe_ptr[~T](ch : *u8) -> _chan[T] {\n     _chan(@chan_ptr(unsafe::reinterpret_cast(ch)))\n }\n \n-obj _port[T](raw_port : @port_ptr) {\n+obj _port[~T](raw_port : @port_ptr) {\n     fn mk_chan() -> _chan[T] {\n         _chan(@chan_ptr(rustrt::new_chan(**raw_port)))\n     }\n \n+    // FIXME: rename this to chan once chan is not a keyword.\n+    fn mk_chan2() -> chan_t[T] {\n+        {\n+            task: task::get_task_id(),\n+            port: rustrt::get_port_id(**raw_port)\n+        }\n+    }\n+\n     fn recv() -> T {\n         ret rusti::recv(**raw_port)\n     }\n }\n \n-fn mk_port[T]() -> _port[T] {\n+fn mk_port[~T]() -> _port[T] {\n     _port(@port_ptr(rustrt::new_port(sys::size_of[T]())))\n }\n+\n+// FIXME: make data move-mode once the snapshot is updated.\n+fn send[~T](ch : chan_t[T], data : &T) {\n+    rustrt::chan_id_send(ch.task, ch.port, data);\n+}\n\\ No newline at end of file"}, {"sha": "a4c164658a7cf0af7de383fb274a489622be4420", "filename": "src/lib/task.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39b16077bbcac64eb62f484486c703aed405ef2f/src%2Flib%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b16077bbcac64eb62f484486c703aed405ef2f/src%2Flib%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftask.rs?ref=39b16077bbcac64eb62f484486c703aed405ef2f", "patch": "@@ -5,13 +5,20 @@ native \"rust\" mod rustrt {\n     fn unsupervise();\n     fn pin_task();\n     fn unpin_task();\n+    fn get_task_id() -> task_id;\n     fn clone_chan(c: *rust_chan) -> *rust_chan;\n \n     type rust_chan;\n \n     fn set_min_stack(stack_size: uint);\n }\n \n+type task_id = int;\n+\n+fn get_task_id() -> task_id {\n+    rustrt::get_task_id()\n+}\n+\n /**\n  * Hints the scheduler to yield this task for a specified ammount of time.\n  *\n@@ -33,6 +40,7 @@ fn pin() { rustrt::pin_task(); }\n \n fn unpin() { rustrt::unpin_task(); }\n \n+// FIXME: remove this\n fn clone_chan[T](c: chan[T]) -> chan[T] {\n     let cloned = rustrt::clone_chan(unsafe::reinterpret_cast(c));\n     ret unsafe::reinterpret_cast(cloned);"}, {"sha": "a7d6a902231cbf92620fbbdca9988a5d744a5e2d", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/39b16077bbcac64eb62f484486c703aed405ef2f/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/39b16077bbcac64eb62f484486c703aed405ef2f/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=39b16077bbcac64eb62f484486c703aed405ef2f", "patch": "@@ -702,6 +702,11 @@ unpin_task(rust_task *task) {\n     task->unpin();\n }\n \n+extern \"C\" CDECL rust_task_id\n+get_task_id(rust_task *task) {\n+    return task->id;\n+}\n+\n extern \"C\" CDECL rust_chan *\n clone_chan(rust_task *task, rust_chan *chan) {\n     return chan->clone(task);\n@@ -738,6 +743,11 @@ del_port(rust_task *task, rust_port *port) {\n     task->deref();\n }\n \n+extern \"C\" CDECL rust_port_id\n+get_port_id(rust_task *task, rust_port *port) {\n+    return port->id;\n+}\n+\n extern \"C\" CDECL rust_chan*\n new_chan(rust_task *task, rust_port *port) {\n     rust_scheduler *sched = task->sched;\n@@ -775,6 +785,19 @@ chan_send(rust_task *task, rust_chan *chan, void *sptr) {\n     chan->send(sptr);\n }\n \n+extern \"C\" CDECL void\n+chan_id_send(rust_task *task, type_desc *t, rust_task_id target_task_id,\n+             rust_port_id target_port_id, void *sptr) {\n+    // FIXME: make sure this is thread-safe\n+    rust_task *target_task = task->kernel->get_task_by_id(target_task_id);\n+    if(target_task) {\n+        rust_port *port = target_task->get_port_by_id(target_port_id);\n+        if(port) {\n+            port->remote_chan->send(sptr);\n+        }\n+    }\n+}\n+\n extern \"C\" CDECL void\n port_recv(rust_task *task, uintptr_t *dptr, rust_port *port) {\n     {"}, {"sha": "e0d3a347b9872fa58b25de7aed5a36b39094e156", "filename": "src/rt/rust_port.cpp", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/39b16077bbcac64eb62f484486c703aed405ef2f/src%2Frt%2Frust_port.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/39b16077bbcac64eb62f484486c703aed405ef2f/src%2Frt%2Frust_port.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port.cpp?ref=39b16077bbcac64eb62f484486c703aed405ef2f", "patch": "@@ -1,6 +1,9 @@\n #include \"rust_internal.h\"\n #include \"rust_port.h\"\n \n+extern \"C\" CDECL rust_chan*\n+new_chan(rust_task *task, rust_port *port);\n+\n rust_port::rust_port(rust_task *task, size_t unit_sz)\n     : ref_count(1), kernel(task->kernel), task(task),\n       unit_sz(unit_sz), writers(task), chans(task) {\n@@ -10,6 +13,7 @@ rust_port::rust_port(rust_task *task, size_t unit_sz)\n         PRIxPTR, (uintptr_t)task, unit_sz, (uintptr_t)this);\n \n     id = task->register_port(this);\n+    remote_chan = new_chan(task, this);\n }\n \n rust_port::~rust_port() {\n@@ -22,6 +26,9 @@ rust_port::~rust_port() {\n         chan->disassociate();\n     }\n \n+    remote_chan->deref();\n+    remote_chan = NULL;\n+\n     task->release_port(id);\n }\n "}, {"sha": "8e7b215c154739663493b9667b99301e70c884f9", "filename": "src/rt/rust_port.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39b16077bbcac64eb62f484486c703aed405ef2f/src%2Frt%2Frust_port.h", "raw_url": "https://github.com/rust-lang/rust/raw/39b16077bbcac64eb62f484486c703aed405ef2f/src%2Frt%2Frust_port.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port.h?ref=39b16077bbcac64eb62f484486c703aed405ef2f", "patch": "@@ -5,12 +5,11 @@ class rust_port : public kernel_owned<rust_port>, public rust_cond {\n public:\n     RUST_REFCOUNTED(rust_port);\n \n-private:\n     rust_port_id id;\n \n-public:\n     rust_kernel *kernel;\n     rust_task *task;\n+    rust_chan *remote_chan;\n     size_t unit_sz;\n     ptr_vec<rust_token> writers;\n     ptr_vec<rust_chan> chans;"}, {"sha": "09f4097b9c160678a16e6eae4cd2f3ba22c74dba", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39b16077bbcac64eb62f484486c703aed405ef2f/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/39b16077bbcac64eb62f484486c703aed405ef2f/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=39b16077bbcac64eb62f484486c703aed405ef2f", "patch": "@@ -9,6 +9,7 @@ aio_serve\n aio_stop\n aio_writedata\n align_of\n+chan_id_send\n chan_send\n check_claims\n clone_chan\n@@ -25,6 +26,8 @@ debug_tydesc\n do_gc\n drop_chan\n drop_port\n+get_port_id\n+get_task_id\n get_time\n hack_allow_leaks\n ivec_copy_from_buf"}, {"sha": "ef8746a18678fc006c01f8216daa56784146ab97", "filename": "src/test/run-pass/task-comm-10.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/39b16077bbcac64eb62f484486c703aed405ef2f/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b16077bbcac64eb62f484486c703aed405ef2f/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs?ref=39b16077bbcac64eb62f484486c703aed405ef2f", "patch": "@@ -1,3 +1,10 @@\n+// FIXME: this test is xfailed until sending strings is legal again.\n+\n+//xfail-stage0\n+//xfail-stage1\n+//xfail-stage2\n+//xfail-stage3\n+\n use std;\n import std::task;\n import std::comm;"}, {"sha": "b974e2052e7f3d5962bd3051ec58952fb0e8c1f2", "filename": "src/test/run-pass/task-comm-16.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39b16077bbcac64eb62f484486c703aed405ef2f/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b16077bbcac64eb62f484486c703aed405ef2f/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs?ref=39b16077bbcac64eb62f484486c703aed405ef2f", "patch": "@@ -32,6 +32,8 @@ fn test_vec() {\n }\n \n fn test_str() {\n+    // FIXME: re-enable this once strings are unique and sendable\n+/*\n     let po = comm::mk_port();\n     let ch = po.mk_chan();\n     let s0: str = \"test\";\n@@ -42,6 +44,7 @@ fn test_str() {\n     assert (s1.(1) as u8 == 'e' as u8);\n     assert (s1.(2) as u8 == 's' as u8);\n     assert (s1.(3) as u8 == 't' as u8);\n+*/\n }\n \n fn test_tag() {"}, {"sha": "81c5d868b67eed9ea61b3c72bf828fdeb6e249fa", "filename": "src/test/stdtest/comm.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/39b16077bbcac64eb62f484486c703aed405ef2f/src%2Ftest%2Fstdtest%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b16077bbcac64eb62f484486c703aed405ef2f/src%2Ftest%2Fstdtest%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fcomm.rs?ref=39b16077bbcac64eb62f484486c703aed405ef2f", "patch": "@@ -17,3 +17,14 @@ fn send_recv() {\n     log_err v;\n     assert(42 == v);\n }\n+\n+#[test]\n+fn send_recv2() {\n+    let p = comm::mk_port[int]();\n+    let c = p.mk_chan2();\n+\n+    comm::send(c, 42);\n+    let v = p.recv();\n+    log_err v;\n+    assert(42 == v);\n+}"}]}