{"sha": "be9c2d13815eb9aa1b6213a46542aa4262127643", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlOWMyZDEzODE1ZWI5YWExYjYyMTNhNDY1NDJhYTQyNjIxMjc2NDM=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-05-20T16:49:19Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-06-18T14:36:25Z"}, "message": "Bug fixes for flowgraph construction.\n\n1. After recursively processing an ExprWhile, need to pop loop_scopes\n   the same way we do for ExprLoop.\n\n2. Proposed fix for flowgraph handling of ExprInlineAsm: we need to\n   represent the flow into the subexpressions of an `asm!` block.", "tree": {"sha": "6ceb40fff1fe88e11b9483c98ac4df04bfe18456", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ceb40fff1fe88e11b9483c98ac4df04bfe18456"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be9c2d13815eb9aa1b6213a46542aa4262127643", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be9c2d13815eb9aa1b6213a46542aa4262127643", "html_url": "https://github.com/rust-lang/rust/commit/be9c2d13815eb9aa1b6213a46542aa4262127643", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be9c2d13815eb9aa1b6213a46542aa4262127643/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34e3232705539e4506ceb4c19944f7d894413fca", "url": "https://api.github.com/repos/rust-lang/rust/commits/34e3232705539e4506ceb4c19944f7d894413fca", "html_url": "https://github.com/rust-lang/rust/commit/34e3232705539e4506ceb4c19944f7d894413fca"}], "stats": {"total": 38, "additions": 30, "deletions": 8}, "files": [{"sha": "0d8729071ef6b03a5c10c65d12ba41804da32094", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/be9c2d13815eb9aa1b6213a46542aa4262127643/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9c2d13815eb9aa1b6213a46542aa4262127643/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=be9c2d13815eb9aa1b6213a46542aa4262127643", "patch": "@@ -254,6 +254,7 @@ impl<'a> CFGBuilder<'a> {\n                 });\n                 let body_exit = self.block(&**body, cond_exit);          // 4\n                 self.add_contained_edge(body_exit, loopback);            // 5\n+                self.loop_scopes.pop();\n                 expr_exit\n             }\n \n@@ -427,8 +428,22 @@ impl<'a> CFGBuilder<'a> {\n                 self.straightline(expr, pred, [e])\n             }\n \n+            ast::ExprInlineAsm(ref inline_asm) => {\n+                let inputs = inline_asm.inputs.iter();\n+                let outputs = inline_asm.outputs.iter();\n+                fn extract_expr<A>(&(_, expr): &(A, Gc<ast::Expr>)) -> Gc<ast::Expr> { expr }\n+                let post_inputs = self.exprs(inputs.map(|a| {\n+                    debug!(\"cfg::construct InlineAsm id:{} input:{:?}\", expr.id, a);\n+                    extract_expr(a)\n+                }), pred);\n+                let post_outputs = self.exprs(outputs.map(|a| {\n+                    debug!(\"cfg::construct InlineAsm id:{} output:{:?}\", expr.id, a);\n+                    extract_expr(a)\n+                }), post_inputs);\n+                self.add_node(expr.id, [post_outputs])\n+            }\n+\n             ast::ExprMac(..) |\n-            ast::ExprInlineAsm(..) |\n             ast::ExprFnBlock(..) |\n             ast::ExprProc(..) |\n             ast::ExprLit(..) |\n@@ -444,15 +459,22 @@ impl<'a> CFGBuilder<'a> {\n             func_or_rcvr: Gc<ast::Expr>,\n             args: &[Gc<ast::Expr>]) -> CFGIndex {\n         let func_or_rcvr_exit = self.expr(func_or_rcvr, pred);\n-        self.straightline(call_expr, func_or_rcvr_exit, args)\n+        let ret = self.straightline(call_expr, func_or_rcvr_exit, args);\n+\n+        let return_ty = ty::node_id_to_type(self.tcx, call_expr.id);\n+        let fails = ty::type_is_bot(return_ty);\n+        if fails {\n+            self.add_node(ast::DUMMY_NODE_ID, [])\n+        } else {\n+            ret\n+        }\n     }\n \n-    fn exprs(&mut self,\n-             exprs: &[Gc<ast::Expr>],\n-             pred: CFGIndex) -> CFGIndex {\n+    fn exprs<I:Iterator<Gc<ast::Expr>>>(&mut self,\n+                                        mut exprs: I,\n+                                        pred: CFGIndex) -> CFGIndex {\n         //! Constructs graph for `exprs` evaluated in order\n-\n-        exprs.iter().fold(pred, |p, &e| self.expr(e, p))\n+        exprs.fold(pred, |p, e| self.expr(e, p))\n     }\n \n     fn opt_expr(&mut self,\n@@ -469,7 +491,7 @@ impl<'a> CFGBuilder<'a> {\n                     subexprs: &[Gc<ast::Expr>]) -> CFGIndex {\n         //! Handles case of an expression that evaluates `subexprs` in order\n \n-        let subexprs_exit = self.exprs(subexprs, pred);\n+        let subexprs_exit = self.exprs(subexprs.iter().map(|&e|e), pred);\n         self.add_node(expr.id, [subexprs_exit])\n     }\n "}]}