{"sha": "dabb820b002f738618371b66a4f3f4c6fee17e16", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYmI4MjBiMDAyZjczODYxODM3MWI2NmE0ZjNmNGM2ZmVlMTdlMTY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-05-06T21:52:58Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-05-15T10:43:59Z"}, "message": "Add trivial bounds lint", "tree": {"sha": "ca43216d89fca9570b25299356ca2b7a7d0ae9b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca43216d89fca9570b25299356ca2b7a7d0ae9b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dabb820b002f738618371b66a4f3f4c6fee17e16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dabb820b002f738618371b66a4f3f4c6fee17e16", "html_url": "https://github.com/rust-lang/rust/commit/dabb820b002f738618371b66a4f3f4c6fee17e16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dabb820b002f738618371b66a4f3f4c6fee17e16/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27183a903034b1fc3aa3296e497a520508493911", "url": "https://api.github.com/repos/rust-lang/rust/commits/27183a903034b1fc3aa3296e497a520508493911", "html_url": "https://github.com/rust-lang/rust/commit/27183a903034b1fc3aa3296e497a520508493911"}], "stats": {"total": 177, "additions": 177, "deletions": 0}, "files": [{"sha": "912d5c37ca3cd4bb9b01e3a5fe928998e5e9383b", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/dabb820b002f738618371b66a4f3f4c6fee17e16/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dabb820b002f738618371b66a4f3f4c6fee17e16/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=dabb820b002f738618371b66a4f3f4c6fee17e16", "patch": "@@ -1591,3 +1591,61 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExternCrate {\n         self.0 += 1;\n     }\n }\n+\n+/// Lint for trait and lifetime bounds that don't depend on type parameters\n+/// which either do nothing, or stop the item from being used.\n+pub struct TrivialConstraints;\n+\n+declare_lint! {\n+    TRIVIAL_BOUNDS,\n+    Warn,\n+    \"these bounds don't depend on an type parameters\"\n+}\n+\n+impl LintPass for TrivialConstraints {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(TRIVIAL_BOUNDS)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TrivialConstraints {\n+    fn check_item(\n+        &mut self,\n+        cx: &LateContext<'a, 'tcx>,\n+        item: &'tcx hir::Item,\n+    ) {\n+        use rustc::ty::fold::TypeFoldable;\n+        use rustc::ty::Predicate::*;\n+\n+\n+        if cx.tcx.features().trivial_bounds {\n+            let def_id = cx.tcx.hir.local_def_id(item.id);\n+            let predicates = cx.tcx.predicates_of(def_id);\n+            for predicate in &predicates.predicates {\n+                let predicate_kind_name = match *predicate {\n+                    Trait(..) => \"Trait\",\n+                    TypeOutlives(..) |\n+                    RegionOutlives(..) => \"Lifetime\",\n+\n+                    // Ignore projections, as they can only be global\n+                    // if the trait bound is global\n+                    Projection(..) |\n+                    // Ignore bounds that a user can't type\n+                    WellFormed(..) |\n+                    ObjectSafe(..) |\n+                    ClosureKind(..) |\n+                    Subtype(..) |\n+                    ConstEvaluatable(..) => continue,\n+                };\n+                if !predicate.is_global() {\n+                    cx.span_lint(\n+                        TRIVIAL_BOUNDS,\n+                        item.span,\n+                        &format!(\"{} bound {} does not depend on any type \\\n+                                or lifetime parameters\", predicate_kind_name, predicate),\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "ae44ea6b65b9ac596f6b39a8dee13be8a8e7b87b", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dabb820b002f738618371b66a4f3f4c6fee17e16/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dabb820b002f738618371b66a4f3f4c6fee17e16/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=dabb820b002f738618371b66a4f3f4c6fee17e16", "patch": "@@ -137,6 +137,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                  UnreachablePub,\n                  TypeAliasBounds,\n                  UnusedBrokenConst,\n+                 TrivialConstraints,\n                  );\n \n     add_builtin_with_new!(sess,"}, {"sha": "2d2d491bd4df3f1c1507f019371b0a7db82fc1e7", "filename": "src/test/ui/feature-gate-trivial_bounds-lint.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dabb820b002f738618371b66a4f3f4c6fee17e16/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dabb820b002f738618371b66a4f3f4c6fee17e16/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds-lint.rs?ref=dabb820b002f738618371b66a4f3f4c6fee17e16", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+\n+#![allow(unused)]\n+#![deny(trivial_bounds)] // Ignored without the trivial_bounds feature flag.\n+\n+struct A where i32: Copy;\n+\n+fn main() {}"}, {"sha": "e6988cb9f8bfe5689007c40e7d80469be4967983", "filename": "src/test/ui/trivial-bounds-lint.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/dabb820b002f738618371b66a4f3f4c6fee17e16/src%2Ftest%2Fui%2Ftrivial-bounds-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dabb820b002f738618371b66a4f3f4c6fee17e16/src%2Ftest%2Fui%2Ftrivial-bounds-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-lint.rs?ref=dabb820b002f738618371b66a4f3f4c6fee17e16", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(trivial_bounds)]\n+#![allow(unused)]\n+#![deny(trivial_bounds)]\n+\n+struct A where i32: Copy; //~ ERROR\n+\n+trait X<T: Copy> {}\n+\n+trait Y<T>: Copy {}\n+\n+trait Z {\n+    type S: Copy;\n+}\n+\n+// Check only the bound the user writes trigger the lint\n+fn trivial_elaboration<T>() where T: X<i32> + Z<S = i32>, i32: Y<T> {} // OK\n+\n+fn global_param() where i32: X<()> {} //~ ERROR\n+\n+// Should only error on the trait bound, not the implicit\n+// projection bound <i32 as Z>::S == i32.\n+fn global_projection() where i32: Z<S = i32> {} //~ ERROR\n+\n+impl A {\n+    fn new() -> A { A }\n+}\n+\n+// Lifetime bounds should be linted as well\n+fn global_lifetimes() where i32: 'static, &'static str: 'static {}\n+//~^ ERROR\n+//~| ERROR\n+\n+fn local_lifetimes<'a>() where i32: 'a, &'a str: 'a {} // OK\n+\n+fn global_outlives() where 'static: 'static {} //~ ERROR\n+\n+// Check that each bound is checked individually\n+fn mixed_bounds<T: Copy>() where i32: X<T> + Copy {} //~ ERROR\n+\n+fn main() {}"}, {"sha": "6a3e1981025cf7c8c34b10c011f93d75a3887ac6", "filename": "src/test/ui/trivial-bounds-lint.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/dabb820b002f738618371b66a4f3f4c6fee17e16/src%2Ftest%2Fui%2Ftrivial-bounds-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dabb820b002f738618371b66a4f3f4c6fee17e16/src%2Ftest%2Fui%2Ftrivial-bounds-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-lint.stderr?ref=dabb820b002f738618371b66a4f3f4c6fee17e16", "patch": "@@ -0,0 +1,50 @@\n+error: Trait bound i32: std::marker::Copy does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-lint.rs:15:1\n+   |\n+LL | struct A where i32: Copy; //~ ERROR\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/trivial-bounds-lint.rs:13:9\n+   |\n+LL | #![deny(trivial_bounds)]\n+   |         ^^^^^^^^^^^^^^\n+\n+error: Trait bound i32: X<()> does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-lint.rs:28:1\n+   |\n+LL | fn global_param() where i32: X<()> {} //~ ERROR\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: Trait bound i32: Z does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-lint.rs:32:1\n+   |\n+LL | fn global_projection() where i32: Z<S = i32> {} //~ ERROR\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: Lifetime bound i32 : 'static does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-lint.rs:39:1\n+   |\n+LL | fn global_lifetimes() where i32: 'static, &'static str: 'static {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: Lifetime bound &'static str : 'static does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-lint.rs:39:1\n+   |\n+LL | fn global_lifetimes() where i32: 'static, &'static str: 'static {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: Lifetime bound 'static : 'static does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-lint.rs:45:1\n+   |\n+LL | fn global_outlives() where 'static: 'static {} //~ ERROR\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: Trait bound i32: std::marker::Copy does not depend on any type or lifetime parameters\n+  --> $DIR/trivial-bounds-lint.rs:48:1\n+   |\n+LL | fn mixed_bounds<T: Copy>() where i32: X<T> + Copy {} //~ ERROR\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 7 previous errors\n+"}]}