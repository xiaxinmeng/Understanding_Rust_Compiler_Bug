{"sha": "aa0f6f49610962466972e659605e3c8e676ce7b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhMGY2ZjQ5NjEwOTYyNDY2OTcyZTY1OTYwNWUzYzhlNjc2Y2U3YjU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-09T04:55:43Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-09T04:56:15Z"}, "message": "stdlib: Add an offset function for simple pointer arithmetic on unsafe pointers", "tree": {"sha": "92cb959a66f74cf2000043e9d69f42744ca3a9f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92cb959a66f74cf2000043e9d69f42744ca3a9f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa0f6f49610962466972e659605e3c8e676ce7b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa0f6f49610962466972e659605e3c8e676ce7b5", "html_url": "https://github.com/rust-lang/rust/commit/aa0f6f49610962466972e659605e3c8e676ce7b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa0f6f49610962466972e659605e3c8e676ce7b5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7498d036935b9a7cbf651765783cbf92fa3e0f09", "url": "https://api.github.com/repos/rust-lang/rust/commits/7498d036935b9a7cbf651765783cbf92fa3e0f09", "html_url": "https://github.com/rust-lang/rust/commit/7498d036935b9a7cbf651765783cbf92fa3e0f09"}], "stats": {"total": 71, "additions": 48, "deletions": 23}, "files": [{"sha": "ce90ea6e16b878db1b7a425a96dbf0d0a4d6b34e", "filename": "src/lib/ptr.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa0f6f49610962466972e659605e3c8e676ce7b5/src%2Flib%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa0f6f49610962466972e659605e3c8e676ce7b5/src%2Flib%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fptr.rs?ref=aa0f6f49610962466972e659605e3c8e676ce7b5", "patch": "@@ -0,0 +1,8 @@\n+// Unsafe pointer utility functions.\n+\n+native \"rust-intrinsic\" mod rusti {\n+    fn ptr_offset[T](*T ptr, uint count) -> *T;\n+}\n+\n+fn offset[T](*T ptr, uint count) -> *T { ret rusti::ptr_offset(ptr, count); }\n+"}, {"sha": "2440ab76f1e6644ae38e252826ef933cacaeb66f", "filename": "src/lib/std.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa0f6f49610962466972e659605e3c8e676ce7b5/src%2Flib%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/aa0f6f49610962466972e659605e3c8e676ce7b5/src%2Flib%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstd.rc?ref=aa0f6f49610962466972e659605e3c8e676ce7b5", "patch": "@@ -86,6 +86,7 @@ mod getopts;\n mod term;\n mod time;\n mod smallintmap;\n+mod ptr;\n \n // Local Variables:\n // mode: rust;"}, {"sha": "be756a281598589e8970d4086c2e408f3f7b088c", "filename": "src/rt/intrinsics/intrinsics.cpp", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aa0f6f49610962466972e659605e3c8e676ce7b5/src%2Frt%2Fintrinsics%2Fintrinsics.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/aa0f6f49610962466972e659605e3c8e676ce7b5/src%2Frt%2Fintrinsics%2Fintrinsics.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.cpp?ref=aa0f6f49610962466972e659605e3c8e676ce7b5", "patch": "@@ -1,5 +1,5 @@\n // Use `clang++ -emit-llvm -S -arch i386 -O3 -I../isaac -I../uthash\n-//      -I../arch/i386 -o intrinsics.ll intrinsics.cpp`\n+//      -I../arch/i386 -fno-stack-protector -o intrinsics.ll intrinsics.cpp`\n \n #include \"../rust_internal.h\"\n \n@@ -22,3 +22,10 @@ rust_intrinsic_ivec_len(rust_task *task, type_desc *ty, rust_ivec *v)\n     return fill / ty->size;\n }\n \n+extern \"C\" void *\n+rust_intrinsic_ptr_offset(rust_task *task, type_desc *ty, void *ptr,\n+                          uintptr_t count)\n+{\n+    return &((uint8_t *)ptr)[ty->size * count];\n+}\n+"}, {"sha": "c871b6e5a31f52cc9e40c2172e91107eb0e87072", "filename": "src/rt/intrinsics/intrinsics.ll.in", "status": "modified", "additions": 31, "deletions": 22, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/aa0f6f49610962466972e659605e3c8e676ce7b5/src%2Frt%2Fintrinsics%2Fintrinsics.ll.in", "raw_url": "https://github.com/rust-lang/rust/raw/aa0f6f49610962466972e659605e3c8e676ce7b5/src%2Frt%2Fintrinsics%2Fintrinsics.ll.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.ll.in?ref=aa0f6f49610962466972e659605e3c8e676ce7b5", "patch": "@@ -4,30 +4,31 @@ target triple = \"@CFG_LLVM_TRIPLE@\"\n \n %0 = type { i32, i8**, i32 }\n %1 = type { i32, %struct.rust_task**, i32 }\n-%2 = type { %\"struct.hash_map<rust_task *, rust_handle<rust_task> *>::map_entry\"* }\n-%3 = type { %\"struct.hash_map<rust_port *, rust_handle<rust_port> *>::map_entry\"* }\n-%4 = type { %\"struct.hash_map<rust_dom *, rust_handle<rust_dom> *>::map_entry\"* }\n+%2 = type { %\"struct.hash_map<rust_port *, rust_handle<rust_port> *>::map_entry\"* }\n+%3 = type { %\"struct.hash_map<rust_scheduler *, rust_handle<rust_scheduler> *>::map_entry\"* }\n+%4 = type { i32, %class.rust_task_thread**, i32 }\n %5 = type { i32 (...)**, %6 }\n-%6 = type { i32, %struct.rust_dom**, i32 }\n-%7 = type { i32 (...)**, %8 }\n-%8 = type { i32, %class.rust_message_queue**, i32 }\n-%9 = type opaque\n-%10 = type opaque\n-%11 = type { %\"struct.hash_map<rust_port *, rust_proxy<rust_port> *>::map_entry\"* }\n+%6 = type { i32, %class.rust_message_queue**, i32 }\n+%7 = type opaque\n+%8 = type opaque\n+%9 = type { %\"struct.hash_map<rust_task *, rust_proxy<rust_task> *>::map_entry\"* }\n+%10 = type { %\"struct.hash_map<rust_port *, rust_proxy<rust_port> *>::map_entry\"* }\n %class.array_list = type { i32, %struct.maybe_proxy**, i32 }\n %class.context = type { %struct.registers_t, %class.context* }\n-%class.hash_map = type { %\"struct.hash_map<rust_task *, rust_proxy<rust_task> *>::map_entry\"* }\n+%class.hash_map = type { %\"struct.hash_map<rust_task *, rust_handle<rust_task> *>::map_entry\"* }\n %class.indexed_list = type { i32 (...)**, %1 }\n-%class.lock_and_signal = type { i32 (...)**, %struct._opaque_pthread_cond_t, %struct._opaque_pthread_mutex_t }\n+%class.lock_and_signal = type { i32 (...)**, %struct._opaque_pthread_cond_t, %struct._opaque_pthread_mutex_t, %struct._opaque_pthread_t*, i8 }\n %class.lock_free_queue = type { i32 (...)**, %\"struct.lock_free_queue<rust_message *>::pointer_t\", %\"struct.lock_free_queue<rust_message *>::pointer_t\" }\n %class.memory_region = type { i32 (...)**, %class.rust_srv*, %class.memory_region*, i32, %0, i8, i8, %class.lock_and_signal }\n-%class.rust_crate_cache = type { %struct.type_desc*, %struct.rust_dom*, i32 }\n+%class.rust_crate_cache = type { %struct.type_desc*, %struct.rust_scheduler*, i32 }\n %class.rust_handle = type opaque\n-%class.rust_kernel = type { %class.rust_thread, %class.memory_region*, %class.rust_log, %class.rust_srv*, %2, %3, %4, i8, %class.lock_and_signal, %5, %7 }\n-%class.rust_log = type { i32 (...)**, %class.rust_srv*, %struct.rust_dom*, i8, i8 }\n-%class.rust_message_queue = type { %class.lock_free_queue, %class.memory_region, %class.rust_kernel*, %10*, i32 }\n-%class.rust_srv = type { i32 (...)**, %class.memory_region, %class.memory_region }\n-%class.rust_task_list = type { %class.indexed_list, %struct.rust_dom*, i8* }\n+%class.rust_kernel = type { %class.rust_thread, %class.memory_region*, %class.rust_log, %class.rust_srv*, %class.hash_map, %2, %3, i8, %class.lock_and_signal, %4, %struct.rust_scheduler*, %class.lock_and_signal, %5 }\n+%class.rust_log = type { i32 (...)**, %class.rust_srv*, %struct.rust_scheduler*, i8, i8 }\n+%class.rust_message_queue = type { %class.lock_free_queue, %class.memory_region, %class.rust_kernel*, %8*, i32 }\n+%class.rust_srv = type { i32 (...)**, %class.memory_region }\n+%\"class.rust_task::wakeup_callback\" = type { i32 (...)** }\n+%class.rust_task_list = type { %class.indexed_list, %struct.rust_scheduler*, i8* }\n+%class.rust_task_thread = type { %class.rust_thread, i32, %class.rust_kernel* }\n %class.rust_thread = type { i32 (...)**, i8, %struct._opaque_pthread_t* }\n %class.timer = type { i32 (...)**, i64, i64 }\n %struct.UT_hash_bucket = type { %struct.UT_hash_handle*, i32, i32 }\n@@ -39,23 +40,22 @@ target triple = \"@CFG_LLVM_TRIPLE@\"\n %struct._opaque_pthread_mutex_t = type { i32, [40 x i8] }\n %struct._opaque_pthread_t = type { i32, %struct.__darwin_pthread_handler_rec*, [596 x i8] }\n %struct.gc_alloc = type { %struct.gc_alloc*, %struct.gc_alloc*, i32, [0 x i8] }\n-%\"struct.hash_map<rust_dom *, rust_handle<rust_dom> *>::map_entry\" = type opaque\n %\"struct.hash_map<rust_port *, rust_handle<rust_port> *>::map_entry\" = type opaque\n %\"struct.hash_map<rust_port *, rust_proxy<rust_port> *>::map_entry\" = type opaque\n+%\"struct.hash_map<rust_scheduler *, rust_handle<rust_scheduler> *>::map_entry\" = type opaque\n %\"struct.hash_map<rust_task *, rust_handle<rust_task> *>::map_entry\" = type opaque\n %\"struct.hash_map<rust_task *, rust_proxy<rust_task> *>::map_entry\" = type opaque\n-%\"struct.lock_free_queue<rust_message *>::node_t\" = type { %9*, %\"struct.lock_free_queue<rust_message *>::pointer_t\" }\n+%\"struct.lock_free_queue<rust_message *>::node_t\" = type { %7*, %\"struct.lock_free_queue<rust_message *>::pointer_t\" }\n %\"struct.lock_free_queue<rust_message *>::pointer_t\" = type { %\"struct.lock_free_queue<rust_message *>::node_t\"*, i32 }\n %struct.maybe_proxy = type { %struct.rc_base, %struct.rust_task* }\n %struct.randctx = type { i32, [256 x i32], [256 x i32], i32, i32, i32 }\n %struct.rc_base = type { i32 }\n %struct.registers_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i16, i16, i32, i32 }\n-%struct.rust_alarm = type { %struct.rust_task*, i32 }\n %struct.rust_cond = type { i8 }\n-%struct.rust_dom = type { %struct.rc_base, i32, %class.rust_log, i32, %class.rust_srv*, %class.memory_region, %class.memory_region, i8*, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_crate_cache, %struct.randctx, %struct.rust_task*, %struct.rust_task*, i32, %class.rust_kernel*, i32, %class.hash_map, %11, %class.rust_message_queue*, %struct._opaque_pthread_attr_t }\n %struct.rust_ivec = type { i32, i32, %union.rust_ivec_payload }\n %struct.rust_ivec_heap = type { i32, [0 x i8] }\n-%struct.rust_task = type { %struct.maybe_proxy, %struct.stk_seg*, i32, i32, %struct.gc_alloc*, %struct.rust_dom*, %class.rust_crate_cache*, i8*, %class.rust_task_list*, %struct.rust_cond*, i8*, %struct.rust_task*, i32, i32, i32, %class.timer, i32*, %class.array_list, %struct.rust_alarm, %class.rust_handle*, %class.context }\n+%struct.rust_scheduler = type { %struct.rc_base, i32, %class.rust_log, i32, %class.rust_srv*, i8*, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_crate_cache, %struct.randctx, %struct.rust_task*, %struct.rust_task*, i32, %class.rust_kernel*, i32, %9, %10, %class.rust_message_queue*, %struct._opaque_pthread_attr_t }\n+%struct.rust_task = type { %struct.maybe_proxy, %struct.stk_seg*, i32, i32, %struct.gc_alloc*, %struct.rust_scheduler*, %class.rust_crate_cache*, %class.rust_kernel*, i8*, %class.rust_task_list*, %struct.rust_cond*, i8*, %struct.rust_task*, i32, i32, i32, %class.timer, i32*, %class.array_list, %class.rust_handle*, %class.context, i32, i32, %class.memory_region, %\"class.rust_task::wakeup_callback\"*, %class.lock_and_signal }\n %struct.rust_vec = type { %struct.rc_base, i32, i32, i32, [0 x i8] }\n %struct.stk_seg = type { i32, i32, [0 x i8] }\n %struct.type_desc = type { %struct.type_desc**, i32, i32, void (i8*, %struct.rust_task*, i8*, %struct.type_desc**, i8*)*, void (i8*, %struct.rust_task*, i8*, %struct.type_desc**, i8*)*, void (i8*, %struct.rust_task*, i8*, %struct.type_desc**, i8*)*, void (i8*, %struct.rust_task*, i8*, %struct.type_desc**, i8*)*, void (i8*, %struct.rust_task*, i8*, %struct.type_desc**, i8*)*, void (i8*, %struct.rust_task*, i8*, %struct.type_desc**, i8*)*, i32, void (i8*, %struct.rust_task*, i8*, %struct.type_desc**, i8*, i8*, i8)*, %struct.UT_hash_handle, i32, [0 x %struct.type_desc*] }\n@@ -97,6 +97,15 @@ if.end17:                                         ; preds = %if.else, %entry, %i\n   ret i32 %div\n }\n \n+define linkonce_odr i8* @rust_intrinsic_ptr_offset(%struct.rust_task* nocapture %task, %struct.type_desc* nocapture %ty, i8* %ptr, i32 %count) nounwind readonly {\n+entry:\n+  %size = getelementptr inbounds %struct.type_desc* %ty, i32 0, i32 1\n+  %tmp1 = load i32* %size, align 4, !tbaa !0\n+  %mul = mul i32 %tmp1, %count\n+  %arrayidx = getelementptr inbounds i8* %ptr, i32 %mul\n+  ret i8* %arrayidx\n+}\n+\n !0 = metadata !{metadata !\"long\", metadata !1}\n !1 = metadata !{metadata !\"omnipotent char\", metadata !2}\n !2 = metadata !{metadata !\"Simple C/C++ TBAA\", null}"}]}