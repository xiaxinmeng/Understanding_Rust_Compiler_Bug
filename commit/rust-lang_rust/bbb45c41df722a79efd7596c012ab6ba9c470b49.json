{"sha": "bbb45c41df722a79efd7596c012ab6ba9c470b49", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiYjQ1YzQxZGY3MjJhNzllZmQ3NTk2YzAxMmFiNmJhOWM0NzBiNDk=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2016-02-25T15:14:05Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2016-03-15T16:59:01Z"}, "message": "Shorter output for `rustc --test` binaries.\n\nA program created with `rustc --test` prints at least one line per test.\nThis can be very verbose, especially with [data-driven tests](\nhttps://internals.rust-lang.org/t/test-and-external-test-harnesses/3145)\nwhen hundreds or thousands of tests is not rare.\n\nThis adds a `-q` or `--quiet` option that changes the output\nto one character instead of one line per test\n(except metrics and benchmarks results which have additional data to\nshow):\n\n```\n     Running target/debug/wpt-75c594dc1e6e6187\n\nrunning 314 tests\n..............................................................................\n..............................................................................\n..............................................................................\n..............................................................................\n..\ntest result: ok. 314 passed; 0 failed; 0 ignored; 0 measured\n```\n\nThis is a breaking change since the `test::TestOpts` struct\nnow has one more field.", "tree": {"sha": "9e44fca0cf629722401a591b3b08425d927d82ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e44fca0cf629722401a591b3b08425d927d82ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbb45c41df722a79efd7596c012ab6ba9c470b49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbb45c41df722a79efd7596c012ab6ba9c470b49", "html_url": "https://github.com/rust-lang/rust/commit/bbb45c41df722a79efd7596c012ab6ba9c470b49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbb45c41df722a79efd7596c012ab6ba9c470b49/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c116ae35cf49b55bd8d82e31f1ba030cf7e63867", "url": "https://api.github.com/repos/rust-lang/rust/commits/c116ae35cf49b55bd8d82e31f1ba030cf7e63867", "html_url": "https://github.com/rust-lang/rust/commit/c116ae35cf49b55bd8d82e31f1ba030cf7e63867"}], "stats": {"total": 59, "additions": 42, "deletions": 17}, "files": [{"sha": "33ec974c52739358b33a2e462969a6f5c0f735b0", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbb45c41df722a79efd7596c012ab6ba9c470b49/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbb45c41df722a79efd7596c012ab6ba9c470b49/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=bbb45c41df722a79efd7596c012ab6ba9c470b49", "patch": "@@ -155,5 +155,8 @@ pub struct Config {\n     pub lldb_python_dir: Option<String>,\n \n     // Explain what's going on\n-    pub verbose: bool\n+    pub verbose: bool,\n+\n+    // Print one character per test instead of one line\n+    pub quiet: bool,\n }"}, {"sha": "8a7ddbd91cac02ce0cd17459bee26dce2d904f71", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbb45c41df722a79efd7596c012ab6ba9c470b49/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbb45c41df722a79efd7596c012ab6ba9c470b49/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=bbb45c41df722a79efd7596c012ab6ba9c470b49", "patch": "@@ -78,6 +78,7 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n           optopt(\"\", \"host-rustcflags\", \"flags to pass to rustc for host\", \"FLAGS\"),\n           optopt(\"\", \"target-rustcflags\", \"flags to pass to rustc for target\", \"FLAGS\"),\n           optflag(\"\", \"verbose\", \"run tests verbosely, showing all output\"),\n+          optflag(\"\", \"quiet\", \"print one character per test instead of one line\"),\n           optopt(\"\", \"logfile\", \"file to log test execution to\", \"FILE\"),\n           optopt(\"\", \"target\", \"the target to build for\", \"TARGET\"),\n           optopt(\"\", \"host\", \"the host to build for\", \"HOST\"),\n@@ -158,6 +159,7 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n             !opt_str2(matches.opt_str(\"adb-test-dir\")).is_empty(),\n         lldb_python_dir: matches.opt_str(\"lldb-python-dir\"),\n         verbose: matches.opt_present(\"verbose\"),\n+        quiet: matches.opt_present(\"quiet\"),\n     }\n }\n \n@@ -191,6 +193,7 @@ pub fn log_config(config: &Config) {\n     logv(c, format!(\"adb_device_status: {}\",\n                     config.adb_device_status));\n     logv(c, format!(\"verbose: {}\", config.verbose));\n+    logv(c, format!(\"quiet: {}\", config.quiet));\n     logv(c, format!(\"\\n\"));\n }\n \n@@ -257,6 +260,7 @@ pub fn test_opts(config: &Config) -> test::TestOpts {\n             Some(ref filter) => Some(filter.clone()),\n         },\n         run_ignored: config.run_ignored,\n+        quiet: config.quiet,\n         logfile: config.logfile.clone(),\n         run_tests: true,\n         bench_benchmarks: true,"}, {"sha": "4b2ca7cd13353feaf0d9900300f7171f15553050", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 34, "deletions": 16, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/bbb45c41df722a79efd7596c012ab6ba9c470b49/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbb45c41df722a79efd7596c012ab6ba9c470b49/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=bbb45c41df722a79efd7596c012ab6ba9c470b49", "patch": "@@ -109,7 +109,7 @@ impl fmt::Display for TestName {\n     }\n }\n \n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, PartialEq, Eq)]\n enum NamePadding {\n     PadNone,\n     PadOnRight,\n@@ -301,6 +301,7 @@ pub struct TestOpts {\n     pub logfile: Option<PathBuf>,\n     pub nocapture: bool,\n     pub color: ColorConfig,\n+    pub quiet: bool,\n }\n \n impl TestOpts {\n@@ -314,6 +315,7 @@ impl TestOpts {\n             logfile: None,\n             nocapture: false,\n             color: AutoColor,\n+            quiet: false,\n         }\n     }\n }\n@@ -331,6 +333,7 @@ fn optgroups() -> Vec<getopts::OptGroup> {\n                           of stdout\", \"PATH\"),\n       getopts::optflag(\"\", \"nocapture\", \"don't capture stdout/stderr of each \\\n                                          task, allow printing directly\"),\n+      getopts::optflag(\"q\", \"quiet\", \"Display one character per test instead of one line\"),\n       getopts::optopt(\"\", \"color\", \"Configure coloring of output:\n             auto   = colorize if stdout is a tty and tests are run on serially (default);\n             always = always colorize output;\n@@ -388,6 +391,7 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n     };\n \n     let run_ignored = matches.opt_present(\"ignored\");\n+    let quiet = matches.opt_present(\"quiet\");\n \n     let logfile = matches.opt_str(\"logfile\");\n     let logfile = logfile.map(|s| PathBuf::from(&s));\n@@ -420,6 +424,7 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n         logfile: logfile,\n         nocapture: nocapture,\n         color: color,\n+        quiet: quiet,\n     };\n \n     Some(Ok(test_opts))\n@@ -451,6 +456,7 @@ struct ConsoleTestState<T> {\n     log_out: Option<File>,\n     out: OutputLocation<T>,\n     use_color: bool,\n+    quiet: bool,\n     total: usize,\n     passed: usize,\n     failed: usize,\n@@ -476,6 +482,7 @@ impl<T: Write> ConsoleTestState<T> {\n             out: out,\n             log_out: log_out,\n             use_color: use_color(opts),\n+            quiet: opts.quiet,\n             total: 0,\n             passed: 0,\n             failed: 0,\n@@ -488,15 +495,15 @@ impl<T: Write> ConsoleTestState<T> {\n     }\n \n     pub fn write_ok(&mut self) -> io::Result<()> {\n-        self.write_pretty(\"ok\", term::color::GREEN)\n+        self.write_short_result(\"ok\", \".\", term::color::GREEN)\n     }\n \n     pub fn write_failed(&mut self) -> io::Result<()> {\n-        self.write_pretty(\"FAILED\", term::color::RED)\n+        self.write_short_result(\"FAILED\", \"F\", term::color::RED)\n     }\n \n     pub fn write_ignored(&mut self) -> io::Result<()> {\n-        self.write_pretty(\"ignored\", term::color::YELLOW)\n+        self.write_short_result(\"ignored\", \"i\", term::color::YELLOW)\n     }\n \n     pub fn write_metric(&mut self) -> io::Result<()> {\n@@ -507,6 +514,16 @@ impl<T: Write> ConsoleTestState<T> {\n         self.write_pretty(\"bench\", term::color::CYAN)\n     }\n \n+    pub fn write_short_result(&mut self, verbose: &str, quiet: &str, color: term::color::Color)\n+                              -> io::Result<()> {\n+        if self.quiet {\n+            self.write_pretty(quiet, color)\n+        } else {\n+            try!(self.write_pretty(verbose, color));\n+            self.write_plain(\"\\n\")\n+        }\n+    }\n+\n     pub fn write_pretty(&mut self, word: &str, color: term::color::Color) -> io::Result<()> {\n         match self.out {\n             Pretty(ref mut term) => {\n@@ -550,28 +567,28 @@ impl<T: Write> ConsoleTestState<T> {\n     }\n \n     pub fn write_test_start(&mut self, test: &TestDesc, align: NamePadding) -> io::Result<()> {\n-        let name = test.padded_name(self.max_name_len, align);\n-        self.write_plain(&format!(\"test {} ... \", name))\n+        if self.quiet && align != PadOnRight {\n+            Ok(())\n+        } else {\n+            let name = test.padded_name(self.max_name_len, align);\n+            self.write_plain(&format!(\"test {} ... \", name))\n+        }\n     }\n \n     pub fn write_result(&mut self, result: &TestResult) -> io::Result<()> {\n-        try!(match *result {\n+        match *result {\n             TrOk => self.write_ok(),\n             TrFailed => self.write_failed(),\n             TrIgnored => self.write_ignored(),\n             TrMetrics(ref mm) => {\n                 try!(self.write_metric());\n-                self.write_plain(&format!(\": {}\", mm.fmt_metrics()))\n+                self.write_plain(&format!(\": {}\\n\", mm.fmt_metrics()))\n             }\n             TrBench(ref bs) => {\n                 try!(self.write_bench());\n-\n-                try!(self.write_plain(&format!(\": {}\", fmt_bench_samples(bs))));\n-\n-                Ok(())\n+                self.write_plain(&format!(\": {}\\n\", fmt_bench_samples(bs)))\n             }\n-        });\n-        self.write_plain(\"\\n\")\n+        }\n     }\n \n     pub fn write_log(&mut self, test: &TestDesc, result: &TestResult) -> io::Result<()> {\n@@ -629,9 +646,9 @@ impl<T: Write> ConsoleTestState<T> {\n         try!(self.write_plain(\"\\ntest result: \"));\n         if success {\n             // There's no parallelism at this point so it's safe to use color\n-            try!(self.write_ok());\n+            try!(self.write_pretty(\"ok\", term::color::GREEN));\n         } else {\n-            try!(self.write_failed());\n+            try!(self.write_pretty(\"FAILED\", term::color::RED));\n         }\n         let s = format!(\". {} passed; {} failed; {} ignored; {} measured\\n\\n\",\n                         self.passed,\n@@ -758,6 +775,7 @@ fn should_sort_failures_before_printing_them() {\n         log_out: None,\n         out: Raw(Vec::new()),\n         use_color: false,\n+        quiet: false,\n         total: 0,\n         passed: 0,\n         failed: 0,"}]}