{"sha": "f7b3e4f29c5360bb8bc7de906c8959178ab43d0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3YjNlNGYyOWM1MzYwYmI4YmM3ZGU5MDZjODk1OTE3OGFiNDNkMGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-19T14:41:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-19T14:41:28Z"}, "message": "Auto merge of #5056 - rust-lang:dissasociate-mut-key, r=flip1995\n\nAvoid mut_key on types of unknown layout\n\nThis fixes #5020 by requiring a known layout for the key type before linting. Edit: This fixes #5043, too.\n\nchangelog: none", "tree": {"sha": "8916178845e0fded67865a84cfec576e328f1f58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8916178845e0fded67865a84cfec576e328f1f58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7b3e4f29c5360bb8bc7de906c8959178ab43d0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7b3e4f29c5360bb8bc7de906c8959178ab43d0b", "html_url": "https://github.com/rust-lang/rust/commit/f7b3e4f29c5360bb8bc7de906c8959178ab43d0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7b3e4f29c5360bb8bc7de906c8959178ab43d0b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd0428f622feee209e6014b802f5717d48d9e978", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd0428f622feee209e6014b802f5717d48d9e978", "html_url": "https://github.com/rust-lang/rust/commit/fd0428f622feee209e6014b802f5717d48d9e978"}, {"sha": "59fd637ba134396ed41e1e2bb771966da7a721ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/59fd637ba134396ed41e1e2bb771966da7a721ea", "html_url": "https://github.com/rust-lang/rust/commit/59fd637ba134396ed41e1e2bb771966da7a721ea"}], "stats": {"total": 61, "additions": 45, "deletions": 16}, "files": [{"sha": "d48c4c419aef58b0399cdc519b484773efb67b35", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f7b3e4f29c5360bb8bc7de906c8959178ab43d0b/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b3e4f29c5360bb8bc7de906c8959178ab43d0b/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=f7b3e4f29c5360bb8bc7de906c8959178ab43d0b", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::{match_def_path, paths, span_lint, trait_ref_of_method, walk_ptrs_ty};\n-use rustc::ty::{Adt, Dynamic, Opaque, Param, RawPtr, Ref, Ty, TypeAndMut};\n+use rustc::ty::{Adt, Array, RawPtr, Ref, Slice, Tuple, Ty, TypeAndMut};\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -101,21 +101,24 @@ fn check_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, span: Span, ty: Ty<'tcx>) {\n         if [&paths::HASHMAP, &paths::BTREEMAP, &paths::HASHSET, &paths::BTREESET]\n             .iter()\n             .any(|path| match_def_path(cx, def.did, &**path))\n+            && is_mutable_type(cx, substs.type_at(0), span)\n         {\n-            let key_type = concrete_type(substs.type_at(0));\n-            if let Some(key_type) = key_type {\n-                if !key_type.is_freeze(cx.tcx, cx.param_env, span) {\n-                    span_lint(cx, MUTABLE_KEY_TYPE, span, \"mutable key type\");\n-                }\n-            }\n+            span_lint(cx, MUTABLE_KEY_TYPE, span, \"mutable key type\");\n         }\n     }\n }\n \n-fn concrete_type(ty: Ty<'_>) -> Option<Ty<'_>> {\n+fn is_mutable_type<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>, span: Span) -> bool {\n     match ty.kind {\n-        RawPtr(TypeAndMut { ty: inner_ty, .. }) | Ref(_, inner_ty, _) => concrete_type(inner_ty),\n-        Dynamic(..) | Opaque(..) | Param(..) => None,\n-        _ => Some(ty),\n+        RawPtr(TypeAndMut { ty: inner_ty, mutbl }) | Ref(_, inner_ty, mutbl) => {\n+            mutbl == hir::Mutability::Mut || is_mutable_type(cx, inner_ty, span)\n+        },\n+        Slice(inner_ty) => is_mutable_type(cx, inner_ty, span),\n+        Array(inner_ty, size) => {\n+            size.try_eval_usize(cx.tcx, cx.param_env).map_or(true, |u| u != 0) && is_mutable_type(cx, inner_ty, span)\n+        },\n+        Tuple(..) => ty.tuple_fields().any(|ty| is_mutable_type(cx, ty, span)),\n+        Adt(..) => cx.tcx.layout_of(cx.param_env.and(ty)).is_ok() && !ty.is_freeze(cx.tcx, cx.param_env, span),\n+        _ => false,\n     }\n }"}, {"sha": "d45cf8278a809204c83c2fbe9484511796571de3", "filename": "tests/ui/mut_key.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f7b3e4f29c5360bb8bc7de906c8959178ab43d0b/tests%2Fui%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b3e4f29c5360bb8bc7de906c8959178ab43d0b/tests%2Fui%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_key.rs?ref=f7b3e4f29c5360bb8bc7de906c8959178ab43d0b", "patch": "@@ -1,3 +1,5 @@\n+#![allow(clippy::implicit_hasher)]\n+\n use std::collections::{HashMap, HashSet};\n use std::hash::{Hash, Hasher};\n use std::sync::atomic::{AtomicUsize, Ordering::Relaxed};\n@@ -29,9 +31,27 @@ fn should_not_take_this_arg(m: &mut HashMap<Key, usize>, _n: usize) -> HashSet<K\n     m.keys().cloned().collect()\n }\n \n-fn this_is_ok(m: &mut HashMap<usize, Key>) {}\n+fn this_is_ok(_m: &mut HashMap<usize, Key>) {}\n+\n+#[allow(unused)]\n+trait Trait {\n+    type AssociatedType;\n+\n+    fn trait_fn(&self, set: std::collections::HashSet<Self::AssociatedType>);\n+}\n+\n+fn generics_are_ok_too<K>(_m: &mut HashSet<K>) {\n+    // nothing to see here, move along\n+}\n+\n+fn tuples<U>(_m: &mut HashMap<((), U), ()>) {}\n+\n+fn tuples_bad<U>(_m: &mut HashMap<(Key, U), bool>) {}\n \n fn main() {\n     let _ = should_not_take_this_arg(&mut HashMap::new(), 1);\n     this_is_ok(&mut HashMap::new());\n+    tuples::<Key>(&mut HashMap::new());\n+    tuples::<()>(&mut HashMap::new());\n+    tuples_bad::<()>(&mut HashMap::new());\n }"}, {"sha": "5af28f18d3d70f38abd8a391501855f2f77a43e8", "filename": "tests/ui/mut_key.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f7b3e4f29c5360bb8bc7de906c8959178ab43d0b/tests%2Fui%2Fmut_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7b3e4f29c5360bb8bc7de906c8959178ab43d0b/tests%2Fui%2Fmut_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_key.stderr?ref=f7b3e4f29c5360bb8bc7de906c8959178ab43d0b", "patch": "@@ -1,22 +1,28 @@\n error: mutable key type\n-  --> $DIR/mut_key.rs:27:32\n+  --> $DIR/mut_key.rs:29:32\n    |\n LL | fn should_not_take_this_arg(m: &mut HashMap<Key, usize>, _n: usize) -> HashSet<Key> {\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[deny(clippy::mutable_key_type)]` on by default\n \n error: mutable key type\n-  --> $DIR/mut_key.rs:27:72\n+  --> $DIR/mut_key.rs:29:72\n    |\n LL | fn should_not_take_this_arg(m: &mut HashMap<Key, usize>, _n: usize) -> HashSet<Key> {\n    |                                                                        ^^^^^^^^^^^^\n \n error: mutable key type\n-  --> $DIR/mut_key.rs:28:5\n+  --> $DIR/mut_key.rs:30:5\n    |\n LL |     let _other: HashMap<Key, bool> = HashMap::new();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: mutable key type\n+  --> $DIR/mut_key.rs:49:22\n+   |\n+LL | fn tuples_bad<U>(_m: &mut HashMap<(Key, U), bool>) {}\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n "}]}