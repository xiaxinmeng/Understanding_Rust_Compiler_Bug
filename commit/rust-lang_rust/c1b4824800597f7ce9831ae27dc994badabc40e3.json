{"sha": "c1b4824800597f7ce9831ae27dc994badabc40e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYjQ4MjQ4MDA1OTdmN2NlOTgzMWFlMjdkYzk5NGJhZGFiYzQwZTM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-11-19T23:24:03Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-08-19T21:28:24Z"}, "message": "factor fallback code into its own module", "tree": {"sha": "98fa80efac84c0ccf380d3f8b289a84c26f6ae3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98fa80efac84c0ccf380d3f8b289a84c26f6ae3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1b4824800597f7ce9831ae27dc994badabc40e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1b4824800597f7ce9831ae27dc994badabc40e3", "html_url": "https://github.com/rust-lang/rust/commit/c1b4824800597f7ce9831ae27dc994badabc40e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1b4824800597f7ce9831ae27dc994badabc40e3/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7960030d6915a771f5ab72c3897a7ed50c3ed4bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7960030d6915a771f5ab72c3897a7ed50c3ed4bd", "html_url": "https://github.com/rust-lang/rust/commit/7960030d6915a771f5ab72c3897a7ed50c3ed4bd"}], "stats": {"total": 98, "additions": 54, "deletions": 44}, "files": [{"sha": "5d884f1f54691ace8993a290429367c2e72307c8", "filename": "compiler/rustc_typeck/src/check/fallback.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c1b4824800597f7ce9831ae27dc994badabc40e3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b4824800597f7ce9831ae27dc994badabc40e3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffallback.rs?ref=c1b4824800597f7ce9831ae27dc994badabc40e3", "patch": "@@ -0,0 +1,52 @@\n+use crate::check::FallbackMode;\n+use crate::check::FnCtxt;\n+\n+impl<'tcx> FnCtxt<'_, 'tcx> {\n+    pub(super) fn type_inference_fallback(&self) {\n+        // All type checking constraints were added, try to fallback unsolved variables.\n+        self.select_obligations_where_possible(false, |_| {});\n+        let mut fallback_has_occurred = false;\n+\n+        // We do fallback in two passes, to try to generate\n+        // better error messages.\n+        // The first time, we do *not* replace opaque types.\n+        for ty in &self.unsolved_variables() {\n+            debug!(\"unsolved_variable = {:?}\", ty);\n+            fallback_has_occurred |= self.fallback_if_possible(ty, FallbackMode::NoOpaque);\n+        }\n+        // We now see if we can make progress. This might\n+        // cause us to unify inference variables for opaque types,\n+        // since we may have unified some other type variables\n+        // during the first phase of fallback.\n+        // This means that we only replace inference variables with their underlying\n+        // opaque types as a last resort.\n+        //\n+        // In code like this:\n+        //\n+        // ```rust\n+        // type MyType = impl Copy;\n+        // fn produce() -> MyType { true }\n+        // fn bad_produce() -> MyType { panic!() }\n+        // ```\n+        //\n+        // we want to unify the opaque inference variable in `bad_produce`\n+        // with the diverging fallback for `panic!` (e.g. `()` or `!`).\n+        // This will produce a nice error message about conflicting concrete\n+        // types for `MyType`.\n+        //\n+        // If we had tried to fallback the opaque inference variable to `MyType`,\n+        // we will generate a confusing type-check error that does not explicitly\n+        // refer to opaque types.\n+        self.select_obligations_where_possible(fallback_has_occurred, |_| {});\n+\n+        // We now run fallback again, but this time we allow it to replace\n+        // unconstrained opaque type variables, in addition to performing\n+        // other kinds of fallback.\n+        for ty in &self.unsolved_variables() {\n+            fallback_has_occurred |= self.fallback_if_possible(ty, FallbackMode::All);\n+        }\n+\n+        // See if we can make any more progress.\n+        self.select_obligations_where_possible(fallback_has_occurred, |_| {});\n+    }\n+}"}, {"sha": "9c6a441d01abfc49ab7f77c2d36037a15edb0da3", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 2, "deletions": 44, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c1b4824800597f7ce9831ae27dc994badabc40e3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b4824800597f7ce9831ae27dc994badabc40e3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=c1b4824800597f7ce9831ae27dc994badabc40e3", "patch": "@@ -75,6 +75,7 @@ mod diverges;\n pub mod dropck;\n mod expectation;\n mod expr;\n+mod fallback;\n mod fn_ctxt;\n mod gather_locals;\n mod generator_interior;\n@@ -445,50 +446,7 @@ fn typeck_with_fallback<'tcx>(\n             fcx\n         };\n \n-        // All type checking constraints were added, try to fallback unsolved variables.\n-        fcx.select_obligations_where_possible(false, |_| {});\n-        let mut fallback_has_occurred = false;\n-\n-        // We do fallback in two passes, to try to generate\n-        // better error messages.\n-        // The first time, we do *not* replace opaque types.\n-        for ty in &fcx.unsolved_variables() {\n-            fallback_has_occurred |= fcx.fallback_if_possible(ty, FallbackMode::NoOpaque);\n-        }\n-        // We now see if we can make progress. This might\n-        // cause us to unify inference variables for opaque types,\n-        // since we may have unified some other type variables\n-        // during the first phase of fallback.\n-        // This means that we only replace inference variables with their underlying\n-        // opaque types as a last resort.\n-        //\n-        // In code like this:\n-        //\n-        // ```rust\n-        // type MyType = impl Copy;\n-        // fn produce() -> MyType { true }\n-        // fn bad_produce() -> MyType { panic!() }\n-        // ```\n-        //\n-        // we want to unify the opaque inference variable in `bad_produce`\n-        // with the diverging fallback for `panic!` (e.g. `()` or `!`).\n-        // This will produce a nice error message about conflicting concrete\n-        // types for `MyType`.\n-        //\n-        // If we had tried to fallback the opaque inference variable to `MyType`,\n-        // we will generate a confusing type-check error that does not explicitly\n-        // refer to opaque types.\n-        fcx.select_obligations_where_possible(fallback_has_occurred, |_| {});\n-\n-        // We now run fallback again, but this time we allow it to replace\n-        // unconstrained opaque type variables, in addition to performing\n-        // other kinds of fallback.\n-        for ty in &fcx.unsolved_variables() {\n-            fallback_has_occurred |= fcx.fallback_if_possible(ty, FallbackMode::All);\n-        }\n-\n-        // See if we can make any more progress.\n-        fcx.select_obligations_where_possible(fallback_has_occurred, |_| {});\n+        fcx.type_inference_fallback();\n \n         // Even though coercion casts provide type hints, we check casts after fallback for\n         // backwards compatibility. This makes fallback a stronger type hint than a cast coercion."}]}