{"sha": "e34dc7f437732861be7eb875f6d7b2213b046560", "node_id": "C_kwDOAAsO6NoAKGUzNGRjN2Y0Mzc3MzI4NjFiZTdlYjg3NWY2ZDdiMjIxM2IwNDY1NjA", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-04-13T23:48:07Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-04-14T00:06:50Z"}, "message": "rustdoc-search: use ES6 `Map` for generic matching instead of `Object`", "tree": {"sha": "490676936ccc872bc6571be3a9e6351fef914832", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/490676936ccc872bc6571be3a9e6351fef914832"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e34dc7f437732861be7eb875f6d7b2213b046560", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e34dc7f437732861be7eb875f6d7b2213b046560", "html_url": "https://github.com/rust-lang/rust/commit/e34dc7f437732861be7eb875f6d7b2213b046560", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e34dc7f437732861be7eb875f6d7b2213b046560/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2179d9157ec0817ef0715f490382c6b95db355ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/2179d9157ec0817ef0715f490382c6b95db355ee", "html_url": "https://github.com/rust-lang/rust/commit/2179d9157ec0817ef0715f490382c6b95db355ee"}], "stats": {"total": 37, "additions": 14, "deletions": 23}, "files": [{"sha": "d19773f8d27bd0cc7ed5e283c7383e9525032c21", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 14, "deletions": 23, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e34dc7f437732861be7eb875f6d7b2213b046560/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/e34dc7f437732861be7eb875f6d7b2213b046560/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=e34dc7f437732861be7eb875f6d7b2213b046560", "patch": "@@ -1096,7 +1096,7 @@ function initSearch(rawSearchIndex) {\n             // The names match, but we need to be sure that all generics kinda\n             // match as well.\n             if (elem.generics.length > 0 && row.generics.length >= elem.generics.length) {\n-                const elems = Object.create(null);\n+                const elems = new Map();\n                 for (const entry of row.generics) {\n                     if (entry.name === \"\") {\n                         // Pure generic, needs to check into it.\n@@ -1106,39 +1106,30 @@ function initSearch(rawSearchIndex) {\n                         }\n                         continue;\n                     }\n-                    if (elems[entry.name] === undefined) {\n-                        elems[entry.name] = [];\n+                    let currentEntryElems;\n+                    if (elems.has(entry.name)) {\n+                        currentEntryElems = elems.get(entry.name);\n+                    } else {\n+                        currentEntryElems = [];\n+                        elems.set(entry.name, currentEntryElems);\n                     }\n-                    elems[entry.name].push(entry.ty);\n+                    currentEntryElems.push(entry.ty);\n                 }\n                 // We need to find the type that matches the most to remove it in order\n                 // to move forward.\n                 const handleGeneric = generic => {\n-                    let match = null;\n-                    if (elems[generic.name]) {\n-                        match = generic.name;\n-                    } else {\n-                        for (const elem_name in elems) {\n-                            if (!hasOwnPropertyRustdoc(elems, elem_name)) {\n-                                continue;\n-                            }\n-                            if (elem_name === generic) {\n-                                match = elem_name;\n-                                break;\n-                            }\n-                        }\n-                    }\n-                    if (match === null) {\n+                    if (!elems.has(generic.name)) {\n                         return false;\n                     }\n-                    const matchIdx = elems[match].findIndex(tmp_elem =>\n+                    const matchElems = elems.get(generic.name);\n+                    const matchIdx = matchElems.findIndex(tmp_elem =>\n                         typePassesFilter(generic.typeFilter, tmp_elem));\n                     if (matchIdx === -1) {\n                         return false;\n                     }\n-                    elems[match].splice(matchIdx, 1);\n-                    if (elems[match].length === 0) {\n-                        delete elems[match];\n+                    matchElems.splice(matchIdx, 1);\n+                    if (matchElems.length === 0) {\n+                        elems.delete(generic.name);\n                     }\n                     return true;\n                 };"}]}