{"sha": "f6b8525b1d6f75ca6cac45c5808d7eae47f296c8", "node_id": "C_kwDOAAsO6NoAKGY2Yjg1MjViMWQ2Zjc1Y2E2Y2FjNDVjNTgwOGQ3ZWFlNDdmMjk2Yzg", "commit": {"author": {"name": "bvanjoi", "email": "bohan-zhang@foxmail.com", "date": "2022-05-22T06:40:47Z"}, "committer": {"name": "bvanjoi", "email": "bohan-zhang@foxmail.com", "date": "2022-05-22T07:32:24Z"}, "message": "feat: escape format specifier(close: #12258)", "tree": {"sha": "8253535c424e48473684713096c03c88acd101d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8253535c424e48473684713096c03c88acd101d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6b8525b1d6f75ca6cac45c5808d7eae47f296c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6b8525b1d6f75ca6cac45c5808d7eae47f296c8", "html_url": "https://github.com/rust-lang/rust/commit/f6b8525b1d6f75ca6cac45c5808d7eae47f296c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6b8525b1d6f75ca6cac45c5808d7eae47f296c8/comments", "author": {"login": "bvanjoi", "id": 30187863, "node_id": "MDQ6VXNlcjMwMTg3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/30187863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bvanjoi", "html_url": "https://github.com/bvanjoi", "followers_url": "https://api.github.com/users/bvanjoi/followers", "following_url": "https://api.github.com/users/bvanjoi/following{/other_user}", "gists_url": "https://api.github.com/users/bvanjoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/bvanjoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bvanjoi/subscriptions", "organizations_url": "https://api.github.com/users/bvanjoi/orgs", "repos_url": "https://api.github.com/users/bvanjoi/repos", "events_url": "https://api.github.com/users/bvanjoi/events{/privacy}", "received_events_url": "https://api.github.com/users/bvanjoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bvanjoi", "id": 30187863, "node_id": "MDQ6VXNlcjMwMTg3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/30187863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bvanjoi", "html_url": "https://github.com/bvanjoi", "followers_url": "https://api.github.com/users/bvanjoi/followers", "following_url": "https://api.github.com/users/bvanjoi/following{/other_user}", "gists_url": "https://api.github.com/users/bvanjoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/bvanjoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bvanjoi/subscriptions", "organizations_url": "https://api.github.com/users/bvanjoi/orgs", "repos_url": "https://api.github.com/users/bvanjoi/repos", "events_url": "https://api.github.com/users/bvanjoi/events{/privacy}", "received_events_url": "https://api.github.com/users/bvanjoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3de03d4c61d2405b66337b96ea97aa21f7d04e4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3de03d4c61d2405b66337b96ea97aa21f7d04e4b", "html_url": "https://github.com/rust-lang/rust/commit/3de03d4c61d2405b66337b96ea97aa21f7d04e4b"}], "stats": {"total": 48, "additions": 43, "deletions": 5}, "files": [{"sha": "819134a255da7c9ce642b64a9a5399d42fca8866", "filename": "crates/ide-db/src/syntax_helpers/format_string.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f6b8525b1d6f75ca6cac45c5808d7eae47f296c8/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6b8525b1d6f75ca6cac45c5808d7eae47f296c8/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string.rs?ref=f6b8525b1d6f75ca6cac45c5808d7eae47f296c8", "patch": "@@ -1,7 +1,7 @@\n //! Tools to work with format string literals for the `format_args!` family of macros.\n use syntax::{\n     ast::{self, IsString},\n-    AstNode, AstToken, TextRange,\n+    AstNode, AstToken, TextRange, TextSize,\n };\n \n pub fn is_format_string(string: &ast::String) -> bool {\n@@ -48,6 +48,7 @@ pub enum FormatSpecifier {\n     Dot,\n     Asterisk,\n     QuestionMark,\n+    Escape,\n }\n \n pub fn lex_format_specifiers(\n@@ -66,7 +67,7 @@ pub fn lex_format_specifiers(\n             // Format specifier, see syntax at https://doc.rust-lang.org/std/fmt/index.html#syntax\n             if let Some((_, '{')) = chars.peek() {\n                 // Escaped format specifier, `{{`\n-                chars.next();\n+                read_escaped_format_specifier(&mut chars, &mut callback);\n                 continue;\n             }\n \n@@ -238,6 +239,11 @@ pub fn lex_format_specifiers(\n                 skip_char_and_emit(&mut chars, FormatSpecifier::Close, &mut callback);\n             }\n             continue;\n+        } else if let '}' = first_char {\n+            if let Some((_, '}')) = chars.peek() {\n+                // Escaped format specifier, `}}`\n+                read_escaped_format_specifier(&mut chars, &mut callback);\n+            }\n         }\n     }\n \n@@ -288,4 +294,15 @@ pub fn lex_format_specifiers(\n         }\n         callback(range, FormatSpecifier::Identifier);\n     }\n+\n+    fn read_escaped_format_specifier<I, F>(chars: &mut std::iter::Peekable<I>, callback: &mut F)\n+    where\n+        I: Iterator<Item = (TextRange, char)>,\n+        F: FnMut(TextRange, FormatSpecifier),\n+    {\n+        let (range, _) = chars.peek().unwrap();\n+        let offset = TextSize::from(1);\n+        callback(TextRange::new(range.start() - offset, range.end()), FormatSpecifier::Escape);\n+        chars.next();\n+    }\n }"}, {"sha": "2ed57e2013023ff5a3e542ed3d046baee46eded5", "filename": "crates/ide/src/syntax_highlighting/format.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6b8525b1d6f75ca6cac45c5808d7eae47f296c8/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6b8525b1d6f75ca6cac45c5808d7eae47f296c8/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs?ref=f6b8525b1d6f75ca6cac45c5808d7eae47f296c8", "patch": "@@ -45,5 +45,6 @@ fn highlight_format_specifier(kind: FormatSpecifier) -> Option<HlTag> {\n         FormatSpecifier::Integer | FormatSpecifier::Zero => HlTag::NumericLiteral,\n \n         FormatSpecifier::Identifier => HlTag::Symbol(SymbolKind::Local),\n+        FormatSpecifier::Escape => HlTag::EscapeSequence,\n     })\n }"}, {"sha": "c627bc9b09ab0066ee74a783af5b3c819da4e15e", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_strings.html", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f6b8525b1d6f75ca6cac45c5808d7eae47f296c8/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/f6b8525b1d6f75ca6cac45c5808d7eae47f296c8/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html?ref=f6b8525b1d6f75ca6cac45c5808d7eae47f296c8", "patch": "@@ -93,6 +93,7 @@\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"escape_sequence\">{{</span><span class=\"string_literal\">Hello</span><span class=\"escape_sequence\">}}</span><span class=\"string_literal\">\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"comment\">// from https://doc.rust-lang.org/std/fmt/index.html</span>\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>                 <span class=\"comment\">// =&gt; \"Hello\"</span>\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello, </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"world\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>   <span class=\"comment\">// =&gt; \"Hello, world!\"</span>\n@@ -105,7 +106,7 @@\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">argument</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> argument <span class=\"operator\">=</span> <span class=\"string_literal\">\"test\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>   <span class=\"comment\">// =&gt; \"test\"</span>\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"comma\">,</span> name <span class=\"operator\">=</span> <span class=\"numeric_literal\">2</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>          <span class=\"comment\">// =&gt; \"2 1\"</span>\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">a</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"variable\">c</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"variable\">b</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> a<span class=\"operator\">=</span><span class=\"string_literal\">\"a\"</span><span class=\"comma\">,</span> b<span class=\"operator\">=</span><span class=\"char_literal\">'b'</span><span class=\"comma\">,</span> c<span class=\"operator\">=</span><span class=\"numeric_literal\">3</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>  <span class=\"comment\">// =&gt; \"a 3 b\"</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"{{</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">}}\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">2</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>                       <span class=\"comment\">// =&gt; \"{2}\"</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"escape_sequence\">{{</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"escape_sequence\">}}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">2</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>                       <span class=\"comment\">// =&gt; \"{2}\"</span>\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n@@ -128,8 +129,17 @@\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 fractional digits\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">3</span><span class=\"comma\">,</span> name<span class=\"operator\">=</span><span class=\"numeric_literal\">1234.56</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 characters\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">3</span><span class=\"comma\">,</span> name<span class=\"operator\">=</span><span class=\"string_literal\">\"1234.56\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&gt;</span><span class=\"numeric_literal\">8</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 right-aligned characters\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">3</span><span class=\"comma\">,</span> name<span class=\"operator\">=</span><span class=\"string_literal\">\"1234.56\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello {{}}\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"{{ Hello\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+\n+    <span class=\"keyword\">let</span> <span class=\"punctuation\">_</span> <span class=\"operator\">=</span> <span class=\"string_literal\">\"{}\"</span>\n+    <span class=\"keyword\">let</span> <span class=\"punctuation\">_</span> <span class=\"operator\">=</span> <span class=\"string_literal\">\"{{}}\"</span><span class=\"semicolon\">;</span>\n+\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"escape_sequence\">{{</span><span class=\"escape_sequence\">}}</span><span class=\"string_literal\">\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"escape_sequence\">{{</span><span class=\"string_literal\"> Hello\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"escape_sequence\">}}</span><span class=\"string_literal\">\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"escape_sequence\">{{</span><span class=\"string_literal\">Hello</span><span class=\"escape_sequence\">}}</span><span class=\"string_literal\">\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"escape_sequence\">{{</span><span class=\"string_literal\"> Hello </span><span class=\"escape_sequence\">}}</span><span class=\"string_literal\">\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"escape_sequence\">{{</span><span class=\"string_literal\">Hello </span><span class=\"escape_sequence\">}}</span><span class=\"string_literal\">\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"escape_sequence\">{{</span><span class=\"string_literal\"> Hello</span><span class=\"escape_sequence\">}}</span><span class=\"string_literal\">\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n \n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">r\"Hello, </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"world\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n "}, {"sha": "83bdca295da8d66bf0e518f319eb74d70ffa5595", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6b8525b1d6f75ca6cac45c5808d7eae47f296c8/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6b8525b1d6f75ca6cac45c5808d7eae47f296c8/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=f6b8525b1d6f75ca6cac45c5808d7eae47f296c8", "patch": "@@ -421,6 +421,7 @@ macro_rules! toho {\n }\n \n fn main() {\n+    println!(\"Hello {{Hello}}\");\n     // from https://doc.rust-lang.org/std/fmt/index.html\n     println!(\"Hello\");                 // => \"Hello\"\n     println!(\"Hello, {}!\", \"world\");   // => \"Hello, world!\"\n@@ -456,8 +457,17 @@ fn main() {\n     println!(\"{}, `{name:.*}` has 3 fractional digits\", \"Hello\", 3, name=1234.56);\n     println!(\"{}, `{name:.*}` has 3 characters\", \"Hello\", 3, name=\"1234.56\");\n     println!(\"{}, `{name:>8.*}` has 3 right-aligned characters\", \"Hello\", 3, name=\"1234.56\");\n+\n+    let _ = \"{}\"\n+    let _ = \"{{}}\";\n+\n     println!(\"Hello {{}}\");\n     println!(\"{{ Hello\");\n+    println!(\"Hello }}\");\n+    println!(\"{{Hello}}\");\n+    println!(\"{{ Hello }}\");\n+    println!(\"{{Hello }}\");\n+    println!(\"{{ Hello}}\");\n \n     println!(r\"Hello, {}!\", \"world\");\n "}]}