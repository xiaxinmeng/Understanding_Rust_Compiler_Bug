{"sha": "6654b9aff31dccdbc2284598deacc95c67b3672c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NTRiOWFmZjMxZGNjZGJjMjI4NDU5OGRlYWNjOTVjNjdiMzY3MmM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-23T23:08:27Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-23T23:08:27Z"}, "message": "More functional", "tree": {"sha": "fbdd2ba96653f7dc124a9b19a804f8b923f53379", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbdd2ba96653f7dc124a9b19a804f8b923f53379"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6654b9aff31dccdbc2284598deacc95c67b3672c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6654b9aff31dccdbc2284598deacc95c67b3672c", "html_url": "https://github.com/rust-lang/rust/commit/6654b9aff31dccdbc2284598deacc95c67b3672c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6654b9aff31dccdbc2284598deacc95c67b3672c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75cb1c1806b2fd21b7b3f9ca7ed0ef9111bc1a35", "url": "https://api.github.com/repos/rust-lang/rust/commits/75cb1c1806b2fd21b7b3f9ca7ed0ef9111bc1a35", "html_url": "https://github.com/rust-lang/rust/commit/75cb1c1806b2fd21b7b3f9ca7ed0ef9111bc1a35"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "687b380bbe82da046faab5f4296fb634c45a2ee4", "filename": "crates/ra_ide/src/completion/completion_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6654b9aff31dccdbc2284598deacc95c67b3672c/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6654b9aff31dccdbc2284598deacc95c67b3672c/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=6654b9aff31dccdbc2284598deacc95c67b3672c", "patch": "@@ -93,7 +93,7 @@ impl fmt::Debug for CompletionItem {\n     }\n }\n \n-#[derive(Debug, Clone)]\n+#[derive(Debug, Clone, Copy)]\n pub enum CompletionScore {\n     /// If only type match\n     TypeMatch,\n@@ -202,7 +202,7 @@ impl CompletionItem {\n     }\n \n     pub fn score(&self) -> Option<CompletionScore> {\n-        self.score.clone()\n+        self.score\n     }\n \n     pub fn set_score(&mut self, score: CompletionScore) {"}, {"sha": "5aedfc47f2ce6d980185a54782df90b6f88aad3c", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6654b9aff31dccdbc2284598deacc95c67b3672c/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6654b9aff31dccdbc2284598deacc95c67b3672c/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=6654b9aff31dccdbc2284598deacc95c67b3672c", "patch": "@@ -34,7 +34,9 @@ impl Completions {\n         .set_deprecated(is_deprecated)\n         .build();\n \n-        compute_score(&mut completion_item, ctx);\n+        if let Some(score) = compute_score(&completion_item, ctx) {\n+            completion_item.set_score(score);\n+        }\n \n         self.add(completion_item);\n     }\n@@ -305,40 +307,45 @@ impl Completions {\n     }\n }\n \n-pub(crate) fn compute_score(completion_item: &mut CompletionItem, ctx: &CompletionContext) {\n+pub(crate) fn compute_score(\n+    completion_item: &CompletionItem,\n+    ctx: &CompletionContext,\n+) -> Option<CompletionScore> {\n     let (active_name, active_type) = if let Some(record_field) = &ctx.record_field_syntax {\n         if let Some((struct_field, _)) = ctx.sema.resolve_record_field(record_field) {\n             (\n                 struct_field.name(ctx.db).to_string(),\n                 struct_field.signature_ty(ctx.db).display(ctx.db).to_string(),\n             )\n         } else {\n-            return;\n+            return None;\n         }\n     } else if let Some(call_info) = call_info(ctx.db, ctx.file_position) {\n         if call_info.active_parameter_type().is_some()\n             && call_info.active_parameter_name().is_some()\n         {\n             (call_info.active_parameter_name().unwrap(), call_info.active_parameter_type().unwrap())\n         } else {\n-            return;\n+            return None;\n         }\n     } else {\n-        return;\n+        return None;\n     };\n \n     // Compute score\n     // For the same type\n     if let Some(a_parameter_type) = completion_item.detail() {\n         if &active_type == a_parameter_type {\n             // If same type + same name then go top position\n-            if active_name == completion_item.label() {\n-                completion_item.set_score(CompletionScore::TypeAndNameMatch);\n+            let res = if active_name == completion_item.label() {\n+                CompletionScore::TypeAndNameMatch\n             } else {\n-                completion_item.set_score(CompletionScore::TypeMatch);\n-            }\n+                CompletionScore::TypeMatch\n+            };\n+            return Some(res);\n         }\n     }\n+    None\n }\n \n enum Params {"}]}