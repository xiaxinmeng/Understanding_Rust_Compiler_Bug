{"sha": "c6307a2fa55c3d62c06b85b349257a8194093442", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MzA3YTJmYTU1YzNkNjJjMDZiODViMzQ5MjU3YTgxOTQwOTM0NDI=", "commit": {"author": {"name": "Djzin", "email": "djzin@users.noreply.github.com", "date": "2017-05-27T13:29:41Z"}, "committer": {"name": "Djzin", "email": "djzin@users.noreply.github.com", "date": "2017-05-27T13:29:41Z"}, "message": "copy tail bytes better for aligned types", "tree": {"sha": "5c053f517ec3c8dff7e4493a948db2d24f0276bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c053f517ec3c8dff7e4493a948db2d24f0276bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6307a2fa55c3d62c06b85b349257a8194093442", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6307a2fa55c3d62c06b85b349257a8194093442", "html_url": "https://github.com/rust-lang/rust/commit/c6307a2fa55c3d62c06b85b349257a8194093442", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6307a2fa55c3d62c06b85b349257a8194093442/comments", "author": {"login": "djzin", "id": 22416015, "node_id": "MDQ6VXNlcjIyNDE2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/22416015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djzin", "html_url": "https://github.com/djzin", "followers_url": "https://api.github.com/users/djzin/followers", "following_url": "https://api.github.com/users/djzin/following{/other_user}", "gists_url": "https://api.github.com/users/djzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/djzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djzin/subscriptions", "organizations_url": "https://api.github.com/users/djzin/orgs", "repos_url": "https://api.github.com/users/djzin/repos", "events_url": "https://api.github.com/users/djzin/events{/privacy}", "received_events_url": "https://api.github.com/users/djzin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "djzin", "id": 22416015, "node_id": "MDQ6VXNlcjIyNDE2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/22416015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djzin", "html_url": "https://github.com/djzin", "followers_url": "https://api.github.com/users/djzin/followers", "following_url": "https://api.github.com/users/djzin/following{/other_user}", "gists_url": "https://api.github.com/users/djzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/djzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djzin/subscriptions", "organizations_url": "https://api.github.com/users/djzin/orgs", "repos_url": "https://api.github.com/users/djzin/repos", "events_url": "https://api.github.com/users/djzin/events{/privacy}", "received_events_url": "https://api.github.com/users/djzin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcc970aca5d3e169c6a837c34f62b3e6e0ed74d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcc970aca5d3e169c6a837c34f62b3e6e0ed74d1", "html_url": "https://github.com/rust-lang/rust/commit/fcc970aca5d3e169c6a837c34f62b3e6e0ed74d1"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "2975d2e28dd38c17efa7453d33bc86926f9e40b6", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6307a2fa55c3d62c06b85b349257a8194093442/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=c6307a2fa55c3d62c06b85b349257a8194093442", "patch": "@@ -479,6 +479,27 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n             ptr::copy_nonoverlapping(t, y.offset(i), block_size);\n             i += block_size as isize;\n         }\n+\n+        // Swap remaining bytes 8 at a time if x & y are properly aligned\n+        if align_of::<T>() % 8 == 0 {\n+            while i + 8 <= len as isize {\n+                let t = *(x.offset(i) as *mut u64);\n+                *(x.offset(i) as *mut u64) = *(y.offset(i) as *mut u64);\n+                *(y.offset(i) as *mut u64) = t;\n+                i += 8;\n+            }\n+        }\n+\n+        // Swap remaining bytes 4 at a time if x & y are properly aligned\n+        if align_of::<T>() % 4 == 0 {\n+            while i + 4 <= len as isize {\n+                let t = *(x.offset(i) as *mut u32);\n+                *(x.offset(i) as *mut u32) = *(y.offset(i) as *mut u32);\n+                *(y.offset(i) as *mut u32) = t;\n+                i += 4;\n+            }\n+        }\n+\n         if i < len {\n             // Swap any remaining bytes\n             let mut t: UnalignedBlock = uninitialized();"}]}