{"sha": "91971f293cba3bcbe20bb93236254cc1550e1049", "node_id": "C_kwDOAAsO6NoAKDkxOTcxZjI5M2NiYTNiY2JlMjBiYjkzMjM2MjU0Y2MxNTUwZTEwNDk", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-11-05T19:40:42Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-11-06T12:25:06Z"}, "message": "Improve tracing logging", "tree": {"sha": "12e93f4a2ba0bfe6f111c6c98cf6b5efbf22dd49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12e93f4a2ba0bfe6f111c6c98cf6b5efbf22dd49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91971f293cba3bcbe20bb93236254cc1550e1049", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgbSfWKRQb2tiqhuHtakDJeupmrF\nChDbM0msU+PXaBOk8AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQFRH9jWzDtmbhhJYaHf1qLZSRmLrnHC2bLOATX8sZf67bH2jvgc4EgdwgftCIFiKlA\nQ/MaDuxJVJee6aZ7Yb7wA=\n-----END SSH SIGNATURE-----", "payload": "tree 12e93f4a2ba0bfe6f111c6c98cf6b5efbf22dd49\nparent 3da576804af9c1fb141c94d28efc63919200e046\nauthor Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1667677242 +0100\ncommitter Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1667737506 +0100\n\nImprove tracing logging\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91971f293cba3bcbe20bb93236254cc1550e1049", "html_url": "https://github.com/rust-lang/rust/commit/91971f293cba3bcbe20bb93236254cc1550e1049", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91971f293cba3bcbe20bb93236254cc1550e1049/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3da576804af9c1fb141c94d28efc63919200e046", "url": "https://api.github.com/repos/rust-lang/rust/commits/3da576804af9c1fb141c94d28efc63919200e046", "html_url": "https://github.com/rust-lang/rust/commit/3da576804af9c1fb141c94d28efc63919200e046"}], "stats": {"total": 60, "additions": 17, "deletions": 43}, "files": [{"sha": "7109c1ac9a2026ff5f493a7c9e60b65167222294", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 14, "deletions": 39, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/91971f293cba3bcbe20bb93236254cc1550e1049/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91971f293cba3bcbe20bb93236254cc1550e1049/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=91971f293cba3bcbe20bb93236254cc1550e1049", "patch": "@@ -598,6 +598,7 @@ impl<K: DepKind> DepGraph<K> {\n         }\n     }\n \n+    #[instrument(skip(self, tcx, data, parent_dep_node_index), level = \"debug\")]\n     fn try_mark_parent_green<Ctxt: QueryContext<DepKind = K>>(\n         &self,\n         tcx: Ctxt,\n@@ -613,22 +614,15 @@ impl<K: DepKind> DepGraph<K> {\n                 // This dependency has been marked as green before, we are\n                 // still fine and can continue with checking the other\n                 // dependencies.\n-                debug!(\n-                    \"try_mark_previous_green({:?}) --- found dependency {:?} to \\\n-                            be immediately green\",\n-                    dep_node, dep_dep_node,\n-                );\n+                debug!(\"dependency {dep_dep_node:?} was immediately green\");\n                 return Some(());\n             }\n             Some(DepNodeColor::Red) => {\n                 // We found a dependency the value of which has changed\n                 // compared to the previous compilation session. We cannot\n                 // mark the DepNode as green and also don't need to bother\n                 // with checking any of the other dependencies.\n-                debug!(\n-                    \"try_mark_previous_green({:?}) - END - dependency {:?} was immediately red\",\n-                    dep_node, dep_dep_node,\n-                );\n+                debug!(\"dependency {dep_dep_node:?} was immediately red\");\n                 return None;\n             }\n             None => {}\n@@ -638,51 +632,36 @@ impl<K: DepKind> DepGraph<K> {\n         // an eval_always node, let's try to mark it green recursively.\n         if !tcx.dep_context().is_eval_always(dep_dep_node.kind) {\n             debug!(\n-                \"try_mark_previous_green({:?}) --- state of dependency {:?} ({}) \\\n-                                 is unknown, trying to mark it green\",\n-                dep_node, dep_dep_node, dep_dep_node.hash,\n+                \"state of dependency {:?} ({}) is unknown, trying to mark it green\",\n+                dep_dep_node, dep_dep_node.hash,\n             );\n \n             let node_index =\n                 self.try_mark_previous_green(tcx, data, parent_dep_node_index, dep_dep_node);\n+\n             if node_index.is_some() {\n-                debug!(\n-                    \"try_mark_previous_green({:?}) --- managed to MARK dependency {:?} as green\",\n-                    dep_node, dep_dep_node\n-                );\n+                debug!(\"managed to MARK dependency {dep_dep_node:?} as green\",);\n                 return Some(());\n             }\n         }\n \n         // We failed to mark it green, so we try to force the query.\n-        debug!(\n-            \"try_mark_previous_green({:?}) --- trying to force dependency {:?}\",\n-            dep_node, dep_dep_node\n-        );\n+        debug!(\"trying to force dependency {dep_dep_node:?}\");\n         if !tcx.dep_context().try_force_from_dep_node(*dep_dep_node) {\n             // The DepNode could not be forced.\n-            debug!(\n-                \"try_mark_previous_green({:?}) - END - dependency {:?} could not be forced\",\n-                dep_node, dep_dep_node\n-            );\n+            debug!(\"dependency {dep_dep_node:?} could not be forced\");\n             return None;\n         }\n \n         let dep_dep_node_color = data.colors.get(parent_dep_node_index);\n \n         match dep_dep_node_color {\n             Some(DepNodeColor::Green(_)) => {\n-                debug!(\n-                    \"try_mark_previous_green({:?}) --- managed to FORCE dependency {:?} to green\",\n-                    dep_node, dep_dep_node\n-                );\n+                debug!(\"managed to FORCE dependency {dep_dep_node:?} to green\");\n                 return Some(());\n             }\n             Some(DepNodeColor::Red) => {\n-                debug!(\n-                    \"try_mark_previous_green({:?}) - END - dependency {:?} was red after forcing\",\n-                    dep_node, dep_dep_node\n-                );\n+                debug!(\"dependency {dep_dep_node:?} was red after forcing\",);\n                 return None;\n             }\n             None => {}\n@@ -702,23 +681,19 @@ impl<K: DepKind> DepGraph<K> {\n         // invalid state will not be persisted to the\n         // incremental compilation cache because of\n         // compilation errors being present.\n-        debug!(\n-            \"try_mark_previous_green({:?}) - END - dependency {:?} resulted in compilation error\",\n-            dep_node, dep_dep_node\n-        );\n+        debug!(\"dependency {dep_dep_node:?} resulted in compilation error\",);\n         return None;\n     }\n \n     /// Try to mark a dep-node which existed in the previous compilation session as green.\n+    #[instrument(skip(self, tcx, data, prev_dep_node_index), level = \"debug\")]\n     fn try_mark_previous_green<Ctxt: QueryContext<DepKind = K>>(\n         &self,\n         tcx: Ctxt,\n         data: &DepGraphData<K>,\n         prev_dep_node_index: SerializedDepNodeIndex,\n         dep_node: &DepNode<K>,\n     ) -> Option<DepNodeIndex> {\n-        debug!(\"try_mark_previous_green({:?}) - BEGIN\", dep_node);\n-\n         #[cfg(not(parallel_compiler))]\n         {\n             debug_assert!(!self.dep_node_exists(dep_node));\n@@ -772,7 +747,7 @@ impl<K: DepKind> DepGraph<K> {\n         // Multiple threads can all write the same color here\n         data.colors.insert(prev_dep_node_index, DepNodeColor::Green(dep_node_index));\n \n-        debug!(\"try_mark_previous_green({:?}) - END - successfully marked as green\", dep_node);\n+        debug!(\"successfully marked {dep_node:?} as green\");\n         Some(dep_node_index)\n     }\n "}, {"sha": "e370c6990a41353d9accc9cf09a48f20595cf0b6", "filename": "compiler/rustc_query_system/src/dep_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91971f293cba3bcbe20bb93236254cc1550e1049/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91971f293cba3bcbe20bb93236254cc1550e1049/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs?ref=91971f293cba3bcbe20bb93236254cc1550e1049", "patch": "@@ -52,9 +52,8 @@ pub trait DepContext: Copy {\n     }\n \n     /// Try to force a dep node to execute and see if it's green.\n+    #[instrument(skip(self), level = \"debug\")]\n     fn try_force_from_dep_node(self, dep_node: DepNode<Self::DepKind>) -> bool {\n-        debug!(\"try_force_from_dep_node({:?}) --- trying to force\", dep_node);\n-\n         let cb = self.dep_kind_info(dep_node.kind);\n         if let Some(f) = cb.force_from_dep_node {\n             f(self, dep_node);"}, {"sha": "e9972a54209416f6425abe8be0af75d76b0bff4c", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91971f293cba3bcbe20bb93236254cc1550e1049/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91971f293cba3bcbe20bb93236254cc1550e1049/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=91971f293cba3bcbe20bb93236254cc1550e1049", "patch": "@@ -563,6 +563,7 @@ where\n     Some((result, dep_node_index))\n }\n \n+#[instrument(skip(tcx, result, query), level = \"debug\")]\n fn incremental_verify_ich<CTX, K, V: Debug>(\n     tcx: CTX::DepContext,\n     result: &V,\n@@ -577,12 +578,11 @@ fn incremental_verify_ich<CTX, K, V: Debug>(\n         dep_node,\n     );\n \n-    debug!(\"BEGIN verify_ich({:?})\", dep_node);\n     let new_hash = query.hash_result.map_or(Fingerprint::ZERO, |f| {\n         tcx.with_stable_hashing_context(|mut hcx| f(&mut hcx, result))\n     });\n+\n     let old_hash = tcx.dep_graph().prev_fingerprint_of(dep_node);\n-    debug!(\"END verify_ich({:?})\", dep_node);\n \n     if Some(new_hash) != old_hash {\n         incremental_verify_ich_failed("}]}