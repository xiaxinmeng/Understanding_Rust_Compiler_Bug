{"sha": "82f8d4d6f1645dd08b107c3ead9155412637739b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZjhkNGQ2ZjE2NDVkZDA4YjEwN2MzZWFkOTE1NTQxMjYzNzczOWI=", "commit": {"author": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-04-25T15:32:33Z"}, "committer": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-07-03T23:47:38Z"}, "message": "Stop linting on macros and correctly use braces for  constructs", "tree": {"sha": "28fc1a2fa23a48a1c2f574c9987974aa317e0866", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28fc1a2fa23a48a1c2f574c9987974aa317e0866"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82f8d4d6f1645dd08b107c3ead9155412637739b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82f8d4d6f1645dd08b107c3ead9155412637739b", "html_url": "https://github.com/rust-lang/rust/commit/82f8d4d6f1645dd08b107c3ead9155412637739b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82f8d4d6f1645dd08b107c3ead9155412637739b/comments", "author": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf48a2d50d82cccac58d7c4c73700eaf66926aee", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf48a2d50d82cccac58d7c4c73700eaf66926aee", "html_url": "https://github.com/rust-lang/rust/commit/bf48a2d50d82cccac58d7c4c73700eaf66926aee"}], "stats": {"total": 60, "additions": 53, "deletions": 7}, "files": [{"sha": "1edec1cad6ec62d36a87d5341394c37c2dcd81d0", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/82f8d4d6f1645dd08b107c3ead9155412637739b/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f8d4d6f1645dd08b107c3ead9155412637739b/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=82f8d4d6f1645dd08b107c3ead9155412637739b", "patch": "@@ -1,3 +1,4 @@\n+use crate::utils;\n use crate::utils::sugg::Sugg;\n use crate::utils::{match_type, paths, span_lint_and_sugg};\n use if_chain::if_chain;\n@@ -89,6 +90,7 @@ struct OptionIfLetElseOccurence {\n     method_sugg: String,\n     some_expr: String,\n     none_expr: String,\n+    wrap_braces: bool,\n }\n \n struct ReturnBreakContinueVisitor<'tcx> {\n@@ -140,6 +142,7 @@ fn contains_return_break_continue<'tcx>(expression: &'tcx Expr<'tcx>) -> bool {\n fn detect_option_if_let_else<'a>(cx: &LateContext<'_, 'a>, expr: &'a Expr<'a>) -> Option<OptionIfLetElseOccurence> {\n     //(String, String, String, String)> {\n     if_chain! {\n+        // if !utils::in_macro(expr.span); // Don't lint macros, because it behaves weirdly\n         if let ExprKind::Match(let_body, arms, MatchSource::IfLetDesugar{contains_else_clause: true}) = &expr.kind;\n         if arms.len() == 2;\n         if match_type(cx, &cx.tables.expr_ty(let_body), &paths::OPTION);\n@@ -170,11 +173,23 @@ fn detect_option_if_let_else<'a>(cx: &LateContext<'_, 'a>, expr: &'a Expr<'a>) -\n                 return None;\n             };\n             let capture_name = id.name.to_ident_string();\n+            let wrap_braces = utils::get_enclosing_block(cx, expr.hir_id).map_or(false, |parent| {\n+                if_chain! {\n+                    if let Some(Expr { kind: ExprKind::Match(condition, arms, MatchSource::IfDesugar{contains_else_clause: true}|MatchSource::IfLetDesugar{contains_else_clause: true}), .. } ) = parent.expr;\n+                    if expr.hir_id == arms[1].body.hir_id;\n+                    then {\n+                        true\n+                    } else {\n+                        false\n+                    }\n+                }\n+            });\n             Some(OptionIfLetElseOccurence {\n                 option: format!(\"{}\", Sugg::hir(cx, let_body, \"..\")),\n                 method_sugg: format!(\"{}\", method_sugg),\n                 some_expr: format!(\"|{}| {}\", capture_name, Sugg::hir(cx, some_body, \"..\")),\n-                none_expr: format!(\"{}{}\", if method_sugg == \"map_or\" { \"\" } else { \"|| \" }, Sugg::hir(cx, none_body, \"..\"))\n+                none_expr: format!(\"{}{}\", if method_sugg == \"map_or\" { \"\" } else { \"|| \" }, Sugg::hir(cx, none_body, \"..\")),\n+                wrap_braces,\n             })\n         } else {\n             None\n@@ -192,8 +207,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OptionIfLetElse {\n                 format!(\"use Option::{} instead of an if let/else\", detection.method_sugg).as_str(),\n                 \"try\",\n                 format!(\n-                    \"{}.{}({}, {})\",\n-                    detection.option, detection.method_sugg, detection.none_expr, detection.some_expr\n+                    \"{}{}.{}({}, {}){}\",\n+                    if detection.wrap_braces { \"{ \" } else { \"\" },\n+                    detection.option, detection.method_sugg, detection.none_expr, detection.some_expr,\n+                    if detection.wrap_braces { \" }\" } else { \"\" },\n                 ),\n                 Applicability::MachineApplicable,\n             );"}, {"sha": "343e099b2b77d540a04b4ca76ff546bf2f5950e7", "filename": "tests/ui/option_if_let_else.fixed", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/82f8d4d6f1645dd08b107c3ead9155412637739b/tests%2Fui%2Foption_if_let_else.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/82f8d4d6f1645dd08b107c3ead9155412637739b/tests%2Fui%2Foption_if_let_else.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.fixed?ref=82f8d4d6f1645dd08b107c3ead9155412637739b", "patch": "@@ -5,6 +5,12 @@ fn bad1(string: Option<&str>) -> (bool, &str) {\n     string.map_or((false, \"hello\"), |x| (true, x))\n }\n \n+fn bad2(string: Option<&str>) -> Option<(bool, &str)> {\n+    if string.is_none() {\n+        None\n+    } else { string.map_or(Some((false, \"\")), |x| Some((true, x))) }\n+}\n+\n fn longer_body(arg: Option<u32>) -> u32 {\n     arg.map_or(13, |x| {\n         let y = x * x;\n@@ -42,6 +48,7 @@ fn main() {\n     let optional = Some(5);\n     let _ = optional.map_or(5, |x| x + 2);\n     let _ = bad1(None);\n+    let _ = bad2(None);\n     let _ = longer_body(None);\n     test_map_or_else(None);\n     let _ = negative_tests(None);"}, {"sha": "b0c203f06375c1b0120a8431189eebab61fc0cdb", "filename": "tests/ui/option_if_let_else.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/82f8d4d6f1645dd08b107c3ead9155412637739b/tests%2Fui%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f8d4d6f1645dd08b107c3ead9155412637739b/tests%2Fui%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.rs?ref=82f8d4d6f1645dd08b107c3ead9155412637739b", "patch": "@@ -9,6 +9,16 @@ fn bad1(string: Option<&str>) -> (bool, &str) {\n     }\n }\n \n+fn bad2(string: Option<&str>) -> Option<(bool, &str)> {\n+    if string.is_none() {\n+        None\n+    } else if let Some(x) = string {\n+        Some((true, x))\n+    } else {\n+        Some((false, \"\"))\n+    }\n+}\n+\n fn longer_body(arg: Option<u32>) -> u32 {\n     if let Some(x) = arg {\n         let y = x * x;\n@@ -50,6 +60,7 @@ fn main() {\n     let optional = Some(5);\n     let _ = if let Some(x) = optional { x + 2 } else { 5 };\n     let _ = bad1(None);\n+    let _ = bad2(None);\n     let _ = longer_body(None);\n     test_map_or_else(None);\n     let _ = negative_tests(None);"}, {"sha": "656cfb2f62ace63834413f722b1261bef8574f17", "filename": "tests/ui/option_if_let_else.stderr", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/82f8d4d6f1645dd08b107c3ead9155412637739b/tests%2Fui%2Foption_if_let_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82f8d4d6f1645dd08b107c3ead9155412637739b/tests%2Fui%2Foption_if_let_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.stderr?ref=82f8d4d6f1645dd08b107c3ead9155412637739b", "patch": "@@ -11,7 +11,18 @@ LL | |     }\n    = note: `-D clippy::option-if-let-else` implied by `-D warnings`\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:13:5\n+  --> $DIR/option_if_let_else.rs:15:12\n+   |\n+LL |       } else if let Some(x) = string {\n+   |  ____________^\n+LL | |         Some((true, x))\n+LL | |     } else {\n+LL | |         Some((false, \"\"))\n+LL | |     }\n+   | |_____^ help: try: `{ string.map_or(Some((false, \"\")), |x| Some((true, x))) }`\n+\n+error: use Option::map_or instead of an if let/else\n+  --> $DIR/option_if_let_else.rs:23:5\n    |\n LL | /     if let Some(x) = arg {\n LL | |         let y = x * x;\n@@ -30,7 +41,7 @@ LL |     })\n    |\n \n error: use Option::map_or_else instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:22:13\n+  --> $DIR/option_if_let_else.rs:32:13\n    |\n LL |       let _ = if let Some(x) = arg {\n    |  _____________^\n@@ -53,10 +64,10 @@ LL |     }, |x| x * x * x * x);\n    |\n \n error: use Option::map_or instead of an if let/else\n-  --> $DIR/option_if_let_else.rs:51:13\n+  --> $DIR/option_if_let_else.rs:61:13\n    |\n LL |     let _ = if let Some(x) = optional { x + 2 } else { 5 };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `optional.map_or(5, |x| x + 2)`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n "}]}