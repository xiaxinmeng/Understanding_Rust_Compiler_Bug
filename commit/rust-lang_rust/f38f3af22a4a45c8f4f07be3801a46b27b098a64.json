{"sha": "f38f3af22a4a45c8f4f07be3801a46b27b098a64", "node_id": "C_kwDOAAsO6NoAKGYzOGYzYWYyMmE0YTQ1YzhmNGYwN2JlMzgwMWE0NmIyN2IwOThhNjQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-22T20:41:51Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-22T20:48:39Z"}, "message": "Remove some resolver outputs.", "tree": {"sha": "25a4ccbfcba8358eb76d9dc15b9eebc41e153595", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25a4ccbfcba8358eb76d9dc15b9eebc41e153595"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f38f3af22a4a45c8f4f07be3801a46b27b098a64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f38f3af22a4a45c8f4f07be3801a46b27b098a64", "html_url": "https://github.com/rust-lang/rust/commit/f38f3af22a4a45c8f4f07be3801a46b27b098a64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f38f3af22a4a45c8f4f07be3801a46b27b098a64/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "958419d35480a9466c1c0f129fe919292e1633b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/958419d35480a9466c1c0f129fe919292e1633b2", "html_url": "https://github.com/rust-lang/rust/commit/958419d35480a9466c1c0f129fe919292e1633b2"}], "stats": {"total": 19, "additions": 0, "deletions": 19}, "files": [{"sha": "0981ba83adf28d6e6b2de9d2b8b704ece88cd8fa", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f38f3af22a4a45c8f4f07be3801a46b27b098a64/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38f3af22a4a45c8f4f07be3801a46b27b098a64/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=f38f3af22a4a45c8f4f07be3801a46b27b098a64", "patch": "@@ -1830,9 +1830,6 @@ rustc_queries! {\n     query maybe_unused_trait_imports(_: ()) -> &'tcx FxIndexSet<LocalDefId> {\n         desc { \"fetching potentially unused trait imports\" }\n     }\n-    query maybe_unused_extern_crates(_: ()) -> &'tcx [(LocalDefId, Span)] {\n-        desc { \"looking up all possibly unused extern crates\" }\n-    }\n     query names_imported_by_glob_use(def_id: LocalDefId) -> &'tcx FxHashSet<Symbol> {\n         desc { |tcx| \"finding names imported by glob use for `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n     }"}, {"sha": "e46a3416f570c82fd16b8fe4c6df01fdaa3f72bd", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f38f3af22a4a45c8f4f07be3801a46b27b098a64/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38f3af22a4a45c8f4f07be3801a46b27b098a64/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=f38f3af22a4a45c8f4f07be3801a46b27b098a64", "patch": "@@ -2504,8 +2504,6 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);\n     providers.maybe_unused_trait_imports =\n         |tcx, ()| &tcx.resolutions(()).maybe_unused_trait_imports;\n-    providers.maybe_unused_extern_crates =\n-        |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];\n     providers.names_imported_by_glob_use = |tcx, id| {\n         tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())\n     };"}, {"sha": "3995884f808cb9df7eeba8a4d24dca84dea28b51", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f38f3af22a4a45c8f4f07be3801a46b27b098a64/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38f3af22a4a45c8f4f07be3801a46b27b098a64/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=f38f3af22a4a45c8f4f07be3801a46b27b098a64", "patch": "@@ -168,12 +168,8 @@ pub struct ResolverGlobalCtxt {\n     pub effective_visibilities: EffectiveVisibilities,\n     pub extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n     pub maybe_unused_trait_imports: FxIndexSet<LocalDefId>,\n-    pub maybe_unused_extern_crates: Vec<(LocalDefId, Span)>,\n     pub reexport_map: FxHashMap<LocalDefId, Vec<ModChild>>,\n     pub glob_map: FxHashMap<LocalDefId, FxHashSet<Symbol>>,\n-    /// Extern prelude entries. The value is `true` if the entry was introduced\n-    /// via `extern crate` item and not `--extern` option or compiler built-in.\n-    pub extern_prelude: FxHashMap<Symbol, bool>,\n     pub main_def: Option<MainDefinition>,\n     pub trait_impls: FxIndexMap<DefId, Vec<LocalDefId>>,\n     /// A list of proc macro LocalDefIds, written out in the order in which"}, {"sha": "df7f91c5a272f1af15cb688d286aec729754cd3b", "filename": "compiler/rustc_resolve/src/check_unused.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f38f3af22a4a45c8f4f07be3801a46b27b098a64/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38f3af22a4a45c8f4f07be3801a46b27b098a64/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs?ref=f38f3af22a4a45c8f4f07be3801a46b27b098a64", "patch": "@@ -278,7 +278,6 @@ impl Resolver<'_, '_> {\n                 }\n                 ImportKind::ExternCrate { id, .. } => {\n                     let def_id = self.local_def_id(id);\n-                    self.maybe_unused_extern_crates.push((def_id, import.span));\n                     if self.extern_crate_map.get(&def_id).map_or(true, |&cnum| {\n                         !tcx.is_compiler_builtins(cnum)\n                             && !tcx.is_panic_runtime(cnum)"}, {"sha": "57c40a5b23e5b9749c54c072b31ac638e32eac42", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f38f3af22a4a45c8f4f07be3801a46b27b098a64/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38f3af22a4a45c8f4f07be3801a46b27b098a64/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=f38f3af22a4a45c8f4f07be3801a46b27b098a64", "patch": "@@ -946,7 +946,6 @@ pub struct Resolver<'a, 'tcx> {\n     has_pub_restricted: bool,\n     used_imports: FxHashSet<NodeId>,\n     maybe_unused_trait_imports: FxIndexSet<LocalDefId>,\n-    maybe_unused_extern_crates: Vec<(LocalDefId, Span)>,\n \n     /// Privacy errors are delayed until the end in order to deduplicate them.\n     privacy_errors: Vec<PrivacyError<'a>>,\n@@ -1284,7 +1283,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             has_pub_restricted: false,\n             used_imports: FxHashSet::default(),\n             maybe_unused_trait_imports: Default::default(),\n-            maybe_unused_extern_crates: Vec::new(),\n \n             privacy_errors: Vec::new(),\n             ambiguity_errors: Vec::new(),\n@@ -1400,7 +1398,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         let extern_crate_map = self.extern_crate_map;\n         let reexport_map = self.reexport_map;\n         let maybe_unused_trait_imports = self.maybe_unused_trait_imports;\n-        let maybe_unused_extern_crates = self.maybe_unused_extern_crates;\n         let glob_map = self.glob_map;\n         let main_def = self.main_def;\n         let confused_type_with_std_module = self.confused_type_with_std_module;\n@@ -1414,12 +1411,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             reexport_map,\n             glob_map,\n             maybe_unused_trait_imports,\n-            maybe_unused_extern_crates,\n-            extern_prelude: self\n-                .extern_prelude\n-                .iter()\n-                .map(|(ident, entry)| (ident.name, entry.introduced_by_item))\n-                .collect(),\n             main_def,\n             trait_impls: self.trait_impls,\n             proc_macros,"}]}