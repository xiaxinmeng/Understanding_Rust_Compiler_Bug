{"sha": "29b0bbf85989cdcc88e49d544f027833f1e7782f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5YjBiYmY4NTk4OWNkY2M4OGU0OWQ1NDRmMDI3ODMzZjFlNzc4MmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-23T18:11:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-23T18:11:37Z"}, "message": "Auto merge of #1189 - RalfJung:cleanup, r=RalfJung\n\nsome foreign_items cleanup\n\nCc @christianpoveda", "tree": {"sha": "789f77a13a69d213775e4be5688585efc7ddecb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/789f77a13a69d213775e4be5688585efc7ddecb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29b0bbf85989cdcc88e49d544f027833f1e7782f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29b0bbf85989cdcc88e49d544f027833f1e7782f", "html_url": "https://github.com/rust-lang/rust/commit/29b0bbf85989cdcc88e49d544f027833f1e7782f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29b0bbf85989cdcc88e49d544f027833f1e7782f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2752d1b74bb5f7bfcbf0683f9648b8bc3a6a5c29", "url": "https://api.github.com/repos/rust-lang/rust/commits/2752d1b74bb5f7bfcbf0683f9648b8bc3a6a5c29", "html_url": "https://github.com/rust-lang/rust/commit/2752d1b74bb5f7bfcbf0683f9648b8bc3a6a5c29"}, {"sha": "4a9a0a9078bd57a200c1c4d83a7ebf2e3690e3c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a9a0a9078bd57a200c1c4d83a7ebf2e3690e3c8", "html_url": "https://github.com/rust-lang/rust/commit/4a9a0a9078bd57a200c1c4d83a7ebf2e3690e3c8"}], "stats": {"total": 225, "additions": 115, "deletions": 110}, "files": [{"sha": "9ce3d2b08c23e9d050b8e9020236c5d8360e02bb", "filename": "src/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29b0bbf85989cdcc88e49d544f027833f1e7782f/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b0bbf85989cdcc88e49d544f027833f1e7782f/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=29b0bbf85989cdcc88e49d544f027833f1e7782f", "patch": "@@ -169,7 +169,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) -> Option<i64> {\n     // FIXME: We always ignore leaks on some platforms where we do not\n     // correctly implement TLS destructors.\n-    let target_os = tcx.sess.target.target.target_os.to_lowercase();\n+    let target_os = tcx.sess.target.target.target_os.as_str();\n     let ignore_leaks = config.ignore_leaks || target_os == \"windows\" || target_os == \"macos\";\n \n     let (mut ecx, ret_place) = match create_ecx(tcx, main_id, config) {"}, {"sha": "5128176acb58c66367eaa27ba4c5c773ddb46fb8", "filename": "src/helpers.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/29b0bbf85989cdcc88e49d544f027833f1e7782f/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b0bbf85989cdcc88e49d544f027833f1e7782f/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=29b0bbf85989cdcc88e49d544f027833f1e7782f", "patch": "@@ -359,25 +359,25 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// Helper function used inside the shims of foreign functions to check that isolation is\n     /// disabled. It returns an error using the `name` of the foreign function if this is not the\n     /// case.\n-    fn check_no_isolation(&mut self, name: &str) -> InterpResult<'tcx> {\n-        if !self.eval_context_mut().machine.communicate {\n+    fn check_no_isolation(&self, name: &str) -> InterpResult<'tcx> {\n+        if !self.eval_context_ref().machine.communicate {\n             throw_unsup_format!(\n                 \"`{}` not available when isolation is enabled. Pass the flag `-Zmiri-disable-isolation` to disable it.\",\n-                name\n+                name,\n             )\n         }\n         Ok(())\n     }\n     /// Helper function used inside the shims of foreign functions to assert that the target\n     /// platform is `platform`. It panics showing a message with the `name` of the foreign function\n     /// if this is not the case.\n-    fn assert_platform(&mut self, platform: &str, name: &str) {\n+    fn assert_platform(&self, platform: &str, name: &str) {\n         assert_eq!(\n-            self.eval_context_mut().tcx.sess.target.target.target_os.to_lowercase(),\n+            self.eval_context_ref().tcx.sess.target.target.target_os,\n             platform,\n             \"`{}` is only available on the `{}` platform\",\n             name,\n-            platform\n+            platform,\n         )\n     }\n \n@@ -389,8 +389,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     }\n \n     /// Gets the last error variable.\n-    fn get_last_error(&mut self) -> InterpResult<'tcx, Scalar<Tag>> {\n-        let this = self.eval_context_mut();\n+    fn get_last_error(&self) -> InterpResult<'tcx, Scalar<Tag>> {\n+        let this = self.eval_context_ref();\n         let errno_place = this.machine.last_error.unwrap();\n         this.read_scalar(errno_place.into())?.not_undef()\n     }"}, {"sha": "3d8d3bd52607a8c50f455c96e570dfc4c498ad60", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29b0bbf85989cdcc88e49d544f027833f1e7782f/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b0bbf85989cdcc88e49d544f027833f1e7782f/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=29b0bbf85989cdcc88e49d544f027833f1e7782f", "patch": "@@ -455,7 +455,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_f64(res), dest)?;\n             }\n \n-            _ => match this.tcx.sess.target.target.target_os.to_lowercase().as_str() {\n+            _ => match this.tcx.sess.target.target.target_os.as_str() {\n                 \"linux\" | \"macos\" => return posix::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest, ret),\n                 \"windows\" => return windows::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest, ret),\n                 target => throw_unsup_format!(\"The {} target platform is not supported\", target),"}, {"sha": "a8b4aad8819b0c456c0366795c0c3c793f43ccc5", "filename": "src/shims/foreign_items/posix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29b0bbf85989cdcc88e49d544f027833f1e7782f/src%2Fshims%2Fforeign_items%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b0bbf85989cdcc88e49d544f027833f1e7782f/src%2Fshims%2Fforeign_items%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix.rs?ref=29b0bbf85989cdcc88e49d544f027833f1e7782f", "patch": "@@ -322,7 +322,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             _ => {\n-                match this.tcx.sess.target.target.target_os.to_lowercase().as_str() {\n+                match this.tcx.sess.target.target.target_os.as_str() {\n                     \"linux\" => return linux::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest, ret),\n                     \"macos\" => return macos::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest, ret),\n                     _ => unreachable!(),"}, {"sha": "4d3e1798ce14856ab4f18e352129ac279a1dea3e", "filename": "src/shims/foreign_items/posix/linux.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29b0bbf85989cdcc88e49d544f027833f1e7782f/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b0bbf85989cdcc88e49d544f027833f1e7782f/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs?ref=29b0bbf85989cdcc88e49d544f027833f1e7782f", "patch": "@@ -18,7 +18,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(errno_place.to_ref().to_scalar()?, dest)?;\n             }\n \n-            // File related shims\n+            // File related shims (but also see \"syscall\" below for statx)\n \n             // The only reason this is not in the `posix` module is because the `macos` item has a\n             // different name.\n@@ -59,8 +59,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                         // so skip over it.\n                         getrandom(this, &args[1..], dest)?;\n                     }\n-                    // `statx` is used by `libstd` to retrieve metadata information in `linux`\n-                    // instead of using `stat`,`lstat` or `fstat` as in the `macos` platform.\n+                    // `statx` is used by `libstd` to retrieve metadata information on `linux`\n+                    // instead of using `stat`,`lstat` or `fstat` as on `macos`.\n                     id if id == sys_statx => {\n                         // The first argument is the syscall id,\n                         // so skip over it.\n@@ -87,7 +87,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     }\n }\n \n-// Shims the linux 'getrandom()' syscall.\n+// Shims the linux `getrandom` syscall.\n fn getrandom<'tcx>(\n     this: &mut MiriEvalContext<'_, 'tcx>,\n     args: &[OpTy<'tcx, Tag>],"}, {"sha": "aa562926686dc542aa133475c45968cb7ba8d8b5", "filename": "src/shims/fs.rs", "status": "modified", "additions": 100, "deletions": 95, "changes": 195, "blob_url": "https://github.com/rust-lang/rust/blob/29b0bbf85989cdcc88e49d544f027833f1e7782f/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b0bbf85989cdcc88e49d544f027833f1e7782f/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=29b0bbf85989cdcc88e49d544f027833f1e7782f", "patch": "@@ -63,6 +63,105 @@ impl FileHandler {\n     }\n }\n \n+impl<'mir, 'tcx> EvalContextExtPrivate<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n+trait EvalContextExtPrivate<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+    /// Emulate `stat` or `lstat` on the `macos` platform. This function is not intended to be\n+    /// called directly from `emulate_foreign_item_by_name`, so it does not check if isolation is\n+    /// disabled or if the target platform is the correct one. Please use `macos_stat` or\n+    /// `macos_lstat` instead.\n+    fn macos_stat_or_lstat(\n+        &mut self,\n+        follow_symlink: bool,\n+        path_op: OpTy<'tcx, Tag>,\n+        buf_op: OpTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+\n+        let path_scalar = this.read_scalar(path_op)?.not_undef()?;\n+        let path: PathBuf = this.read_os_str_from_c_str(path_scalar)?.into();\n+\n+        let metadata = match FileMetadata::from_path(this, path, follow_symlink)? {\n+            Some(metadata) => metadata,\n+            None => return Ok(-1),\n+        };\n+        this.macos_stat_write_buf(metadata, buf_op)\n+    }\n+\n+    fn macos_stat_write_buf(\n+        &mut self,\n+        metadata: FileMetadata,\n+        buf_op: OpTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+\n+        let mode: u16 = metadata.mode.to_u16()?;\n+\n+        let (access_sec, access_nsec) = metadata.accessed.unwrap_or((0, 0));\n+        let (created_sec, created_nsec) = metadata.created.unwrap_or((0, 0));\n+        let (modified_sec, modified_nsec) = metadata.modified.unwrap_or((0, 0));\n+\n+        let dev_t_layout = this.libc_ty_layout(\"dev_t\")?;\n+        let mode_t_layout = this.libc_ty_layout(\"mode_t\")?;\n+        let nlink_t_layout = this.libc_ty_layout(\"nlink_t\")?;\n+        let ino_t_layout = this.libc_ty_layout(\"ino_t\")?;\n+        let uid_t_layout = this.libc_ty_layout(\"uid_t\")?;\n+        let gid_t_layout = this.libc_ty_layout(\"gid_t\")?;\n+        let time_t_layout = this.libc_ty_layout(\"time_t\")?;\n+        let long_layout = this.libc_ty_layout(\"c_long\")?;\n+        let off_t_layout = this.libc_ty_layout(\"off_t\")?;\n+        let blkcnt_t_layout = this.libc_ty_layout(\"blkcnt_t\")?;\n+        let blksize_t_layout = this.libc_ty_layout(\"blksize_t\")?;\n+        let uint32_t_layout = this.libc_ty_layout(\"uint32_t\")?;\n+\n+        // We need to add 32 bits of padding after `st_rdev` if we are on a 64-bit platform.\n+        let pad_layout = if this.tcx.sess.target.ptr_width == 64 {\n+            uint32_t_layout\n+        } else {\n+            this.layout_of(this.tcx.mk_unit())?\n+        };\n+\n+        let imms = [\n+            immty_from_uint_checked(0u128, dev_t_layout)?, // st_dev\n+            immty_from_uint_checked(mode, mode_t_layout)?, // st_mode\n+            immty_from_uint_checked(0u128, nlink_t_layout)?, // st_nlink\n+            immty_from_uint_checked(0u128, ino_t_layout)?, // st_ino\n+            immty_from_uint_checked(0u128, uid_t_layout)?, // st_uid\n+            immty_from_uint_checked(0u128, gid_t_layout)?, // st_gid\n+            immty_from_uint_checked(0u128, dev_t_layout)?, // st_rdev\n+            immty_from_uint_checked(0u128, pad_layout)?, // padding for 64-bit targets\n+            immty_from_uint_checked(access_sec, time_t_layout)?, // st_atime\n+            immty_from_uint_checked(access_nsec, long_layout)?, // st_atime_nsec\n+            immty_from_uint_checked(modified_sec, time_t_layout)?, // st_mtime\n+            immty_from_uint_checked(modified_nsec, long_layout)?, // st_mtime_nsec\n+            immty_from_uint_checked(0u128, time_t_layout)?, // st_ctime\n+            immty_from_uint_checked(0u128, long_layout)?, // st_ctime_nsec\n+            immty_from_uint_checked(created_sec, time_t_layout)?, // st_birthtime\n+            immty_from_uint_checked(created_nsec, long_layout)?, // st_birthtime_nsec\n+            immty_from_uint_checked(metadata.size, off_t_layout)?, // st_size\n+            immty_from_uint_checked(0u128, blkcnt_t_layout)?, // st_blocks\n+            immty_from_uint_checked(0u128, blksize_t_layout)?, // st_blksize\n+            immty_from_uint_checked(0u128, uint32_t_layout)?, // st_flags\n+            immty_from_uint_checked(0u128, uint32_t_layout)?, // st_gen\n+        ];\n+\n+        let buf = this.deref_operand(buf_op)?;\n+        this.write_packed_immediates(buf, &imms)?;\n+\n+        Ok(0)\n+    }\n+\n+    /// Function used when a handle is not found inside `FileHandler`. It returns `Ok(-1)`and sets\n+    /// the last OS error to `libc::EBADF` (invalid file descriptor). This function uses\n+    /// `T: From<i32>` instead of `i32` directly because some fs functions return different integer\n+    /// types (like `read`, that returns an `i64`).\n+    fn handle_not_found<T: From<i32>>(&mut self) -> InterpResult<'tcx, T> {\n+        let this = self.eval_context_mut();\n+        let ebadf = this.eval_libc(\"EBADF\")?;\n+        this.set_last_error(ebadf)?;\n+        Ok((-1).into())\n+    }\n+}\n+\n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn open(\n@@ -432,29 +531,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             Some(metadata) => metadata,\n             None => return Ok(-1),\n         };\n-        macos_stat_write_buf(this, metadata, buf_op)\n-    }\n-\n-    /// Emulate `stat` or `lstat` on the `macos` platform. This function is not intended to be\n-    /// called directly from `emulate_foreign_item_by_name`, so it does not check if isolation is\n-    /// disabled or if the target platform is the correct one. Please use `macos_stat` or\n-    /// `macos_lstat` instead.\n-    fn macos_stat_or_lstat(\n-        &mut self,\n-        follow_symlink: bool,\n-        path_op: OpTy<'tcx, Tag>,\n-        buf_op: OpTy<'tcx, Tag>,\n-    ) -> InterpResult<'tcx, i32> {\n-        let this = self.eval_context_mut();\n-\n-        let path_scalar = this.read_scalar(path_op)?.not_undef()?;\n-        let path: PathBuf = this.read_os_str_from_c_str(path_scalar)?.into();\n-\n-        let metadata = match FileMetadata::from_path(this, path, follow_symlink)? {\n-            Some(metadata) => metadata,\n-            None => return Ok(-1),\n-        };\n-        macos_stat_write_buf(this, metadata, buf_op)\n+        this.macos_stat_write_buf(metadata, buf_op)\n     }\n \n     fn linux_statx(\n@@ -620,17 +697,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(0)\n     }\n \n-    /// Function used when a handle is not found inside `FileHandler`. It returns `Ok(-1)`and sets\n-    /// the last OS error to `libc::EBADF` (invalid file descriptor). This function uses\n-    /// `T: From<i32>` instead of `i32` directly because some fs functions return different integer\n-    /// types (like `read`, that returns an `i64`).\n-    fn handle_not_found<T: From<i32>>(&mut self) -> InterpResult<'tcx, T> {\n-        let this = self.eval_context_mut();\n-        let ebadf = this.eval_libc(\"EBADF\")?;\n-        this.set_last_error(ebadf)?;\n-        Ok((-1).into())\n-    }\n-\n     fn rename(\n         &mut self,\n         oldpath_op: OpTy<'tcx, Tag>,\n@@ -743,64 +809,3 @@ impl FileMetadata {\n         Ok(Some(FileMetadata { mode, size, created, accessed, modified }))\n     }\n }\n-\n-fn macos_stat_write_buf<'tcx, 'mir>(\n-    ecx: &mut MiriEvalContext<'mir, 'tcx>,\n-    metadata: FileMetadata,\n-    buf_op: OpTy<'tcx, Tag>,\n-) -> InterpResult<'tcx, i32> {\n-    let mode: u16 = metadata.mode.to_u16()?;\n-\n-    let (access_sec, access_nsec) = metadata.accessed.unwrap_or((0, 0));\n-    let (created_sec, created_nsec) = metadata.created.unwrap_or((0, 0));\n-    let (modified_sec, modified_nsec) = metadata.modified.unwrap_or((0, 0));\n-\n-    let dev_t_layout = ecx.libc_ty_layout(\"dev_t\")?;\n-    let mode_t_layout = ecx.libc_ty_layout(\"mode_t\")?;\n-    let nlink_t_layout = ecx.libc_ty_layout(\"nlink_t\")?;\n-    let ino_t_layout = ecx.libc_ty_layout(\"ino_t\")?;\n-    let uid_t_layout = ecx.libc_ty_layout(\"uid_t\")?;\n-    let gid_t_layout = ecx.libc_ty_layout(\"gid_t\")?;\n-    let time_t_layout = ecx.libc_ty_layout(\"time_t\")?;\n-    let long_layout = ecx.libc_ty_layout(\"c_long\")?;\n-    let off_t_layout = ecx.libc_ty_layout(\"off_t\")?;\n-    let blkcnt_t_layout = ecx.libc_ty_layout(\"blkcnt_t\")?;\n-    let blksize_t_layout = ecx.libc_ty_layout(\"blksize_t\")?;\n-    let uint32_t_layout = ecx.libc_ty_layout(\"uint32_t\")?;\n-\n-    // We need to add 32 bits of padding after `st_rdev` if we are on a 64-bit platform.\n-    let pad_layout = if ecx.tcx.sess.target.ptr_width == 64 {\n-        uint32_t_layout\n-    } else {\n-        ecx.layout_of(ecx.tcx.mk_unit())?\n-    };\n-\n-    let imms = [\n-        immty_from_uint_checked(0u128, dev_t_layout)?, // st_dev\n-        immty_from_uint_checked(mode, mode_t_layout)?, // st_mode\n-        immty_from_uint_checked(0u128, nlink_t_layout)?, // st_nlink\n-        immty_from_uint_checked(0u128, ino_t_layout)?, // st_ino\n-        immty_from_uint_checked(0u128, uid_t_layout)?, // st_uid\n-        immty_from_uint_checked(0u128, gid_t_layout)?, // st_gid\n-        immty_from_uint_checked(0u128, dev_t_layout)?, // st_rdev\n-        immty_from_uint_checked(0u128, pad_layout)?, // padding for 64-bit targets\n-        immty_from_uint_checked(access_sec, time_t_layout)?, // st_atime\n-        immty_from_uint_checked(access_nsec, long_layout)?, // st_atime_nsec\n-        immty_from_uint_checked(modified_sec, time_t_layout)?, // st_mtime\n-        immty_from_uint_checked(modified_nsec, long_layout)?, // st_mtime_nsec\n-        immty_from_uint_checked(0u128, time_t_layout)?, // st_ctime\n-        immty_from_uint_checked(0u128, long_layout)?, // st_ctime_nsec\n-        immty_from_uint_checked(created_sec, time_t_layout)?, // st_birthtime\n-        immty_from_uint_checked(created_nsec, long_layout)?, // st_birthtime_nsec\n-        immty_from_uint_checked(metadata.size, off_t_layout)?, // st_size\n-        immty_from_uint_checked(0u128, blkcnt_t_layout)?, // st_blocks\n-        immty_from_uint_checked(0u128, blksize_t_layout)?, // st_blksize\n-        immty_from_uint_checked(0u128, uint32_t_layout)?, // st_flags\n-        immty_from_uint_checked(0u128, uint32_t_layout)?, // st_gen\n-    ];\n-\n-    let buf = ecx.deref_operand(buf_op)?;\n-    ecx.write_packed_immediates(buf, &imms)?;\n-\n-    Ok(0)\n-}"}]}