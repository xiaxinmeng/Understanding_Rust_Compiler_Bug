{"sha": "2deca5840e108826d6aac9dfd6a1865edd957466", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZWNhNTg0MGUxMDg4MjZkNmFhYzlkZmQ2YTE4NjVlZGQ5NTc0NjY=", "commit": {"author": {"name": "Eunchong Yu", "email": "kroisse@gmail.com", "date": "2014-03-31T17:37:38Z"}, "committer": {"name": "Eunchong Yu", "email": "kroisse@gmail.com", "date": "2014-03-31T18:05:32Z"}, "message": "Json doesn't need to depend on IoError to implement Encodable #13230", "tree": {"sha": "93a34a31892dc62f35623457c23be648b9d9a81f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93a34a31892dc62f35623457c23be648b9d9a81f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2deca5840e108826d6aac9dfd6a1865edd957466", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2deca5840e108826d6aac9dfd6a1865edd957466", "html_url": "https://github.com/rust-lang/rust/commit/2deca5840e108826d6aac9dfd6a1865edd957466", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2deca5840e108826d6aac9dfd6a1865edd957466/comments", "author": {"login": "Kroisse", "id": 543661, "node_id": "MDQ6VXNlcjU0MzY2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/543661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kroisse", "html_url": "https://github.com/Kroisse", "followers_url": "https://api.github.com/users/Kroisse/followers", "following_url": "https://api.github.com/users/Kroisse/following{/other_user}", "gists_url": "https://api.github.com/users/Kroisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kroisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kroisse/subscriptions", "organizations_url": "https://api.github.com/users/Kroisse/orgs", "repos_url": "https://api.github.com/users/Kroisse/repos", "events_url": "https://api.github.com/users/Kroisse/events{/privacy}", "received_events_url": "https://api.github.com/users/Kroisse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kroisse", "id": 543661, "node_id": "MDQ6VXNlcjU0MzY2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/543661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kroisse", "html_url": "https://github.com/Kroisse", "followers_url": "https://api.github.com/users/Kroisse/followers", "following_url": "https://api.github.com/users/Kroisse/following{/other_user}", "gists_url": "https://api.github.com/users/Kroisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kroisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kroisse/subscriptions", "organizations_url": "https://api.github.com/users/Kroisse/orgs", "repos_url": "https://api.github.com/users/Kroisse/repos", "events_url": "https://api.github.com/users/Kroisse/events{/privacy}", "received_events_url": "https://api.github.com/users/Kroisse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df", "html_url": "https://github.com/rust-lang/rust/commit/1c2ccf0503b7a74e94c8e57136a0878c6bcf30df"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "996d17fd88fce00f32ca1796d1865cf1bfae7554", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2deca5840e108826d6aac9dfd6a1865edd957466/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2deca5840e108826d6aac9dfd6a1865edd957466/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=2deca5840e108826d6aac9dfd6a1865edd957466", "patch": "@@ -732,8 +732,8 @@ impl<'a> ::Encoder<io::IoError> for PrettyEncoder<'a> {\n     }\n }\n \n-impl<E: ::Encoder<io::IoError>> Encodable<E, io::IoError> for Json {\n-    fn encode(&self, e: &mut E) -> EncodeResult {\n+impl<E: ::Encoder<S>, S> Encodable<E, S> for Json {\n+    fn encode(&self, e: &mut E) -> Result<(), S> {\n         match *self {\n             Number(v) => v.encode(e),\n             String(ref v) => v.encode(e),"}]}