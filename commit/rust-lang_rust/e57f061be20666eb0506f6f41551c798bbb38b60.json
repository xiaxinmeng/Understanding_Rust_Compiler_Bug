{"sha": "e57f061be20666eb0506f6f41551c798bbb38b60", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1N2YwNjFiZTIwNjY2ZWIwNTA2ZjZmNDE1NTFjNzk4YmJiMzhiNjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-11T05:27:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-11T05:27:11Z"}, "message": "Auto merge of #38916 - estebank:pad-suggestion-list, r=nikomatsakis\n\nTeach diagnostics to correct margin of multiline messages\n\nMake the suggestion list have a correct padding:\n\n```\nerror[E0308]: mismatched types\n --> file.rs:3:20\n  |\n3 |     let x: usize = \"\";\n  |                    ^^ expected usize, found reference\n  |\n  = note: expected type `usize`\n  = note:    found type `&'static str`\n  = help: here are some functions which might fulfill your needs:\n          - .len()\n          - .foo()\n          - .bar()\n```", "tree": {"sha": "cd8e01c09388b85eb7315fc9cde960cac96ddb51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd8e01c09388b85eb7315fc9cde960cac96ddb51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e57f061be20666eb0506f6f41551c798bbb38b60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e57f061be20666eb0506f6f41551c798bbb38b60", "html_url": "https://github.com/rust-lang/rust/commit/e57f061be20666eb0506f6f41551c798bbb38b60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e57f061be20666eb0506f6f41551c798bbb38b60/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4fee525e04838dabc82beed5ae1a06051be53fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4fee525e04838dabc82beed5ae1a06051be53fd", "html_url": "https://github.com/rust-lang/rust/commit/e4fee525e04838dabc82beed5ae1a06051be53fd"}, {"sha": "04e4a60b45ec4debd20be2327cb6859271502c05", "url": "https://api.github.com/repos/rust-lang/rust/commits/04e4a60b45ec4debd20be2327cb6859271502c05", "html_url": "https://github.com/rust-lang/rust/commit/04e4a60b45ec4debd20be2327cb6859271502c05"}], "stats": {"total": 73, "additions": 55, "deletions": 18}, "files": [{"sha": "77c6c3683641726fb5d3850183da315fb0c51424", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e57f061be20666eb0506f6f41551c798bbb38b60/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e57f061be20666eb0506f6f41551c798bbb38b60/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=e57f061be20666eb0506f6f41551c798bbb38b60", "patch": "@@ -703,6 +703,40 @@ impl EmitterWriter {\n         }\n     }\n \n+    /// Add a left margin to every line but the first, given a padding length and the label being\n+    /// displayed.\n+    fn msg_with_padding(&self, msg: &str, padding: usize, label: &str) -> String {\n+        // The extra 5 ` ` is padding that's always needed to align to the `note: `:\n+        //\n+        //   error: message\n+        //     --> file.rs:13:20\n+        //      |\n+        //   13 |     <CODE>\n+        //      |      ^^^^\n+        //      |\n+        //      = note: multiline\n+        //              message\n+        //   ++^^^----xx\n+        //    |  |   | |\n+        //    |  |   | magic `2`\n+        //    |  |   length of label\n+        //    |  magic `3`\n+        //    `max_line_num_len`\n+        let padding = (0..padding + label.len() + 5)\n+            .map(|_| \" \")\n+            .collect::<String>();\n+\n+        msg.split('\\n').enumerate().fold(\"\".to_owned(), |mut acc, x| {\n+            if x.0 != 0 {\n+                acc.push_str(\"\\n\");\n+                // Align every line with first one.\n+                acc.push_str(&padding);\n+            }\n+            acc.push_str(&x.1);\n+            acc\n+        })\n+    }\n+\n     fn emit_message_default(&mut self,\n                             msp: &MultiSpan,\n                             msg: &str,\n@@ -721,7 +755,9 @@ impl EmitterWriter {\n             draw_note_separator(&mut buffer, 0, max_line_num_len + 1);\n             buffer.append(0, &level.to_string(), Style::HeaderMsg);\n             buffer.append(0, \": \", Style::NoStyle);\n-            buffer.append(0, msg, Style::NoStyle);\n+\n+            let message = self.msg_with_padding(msg, max_line_num_len, \"note\");\n+            buffer.append(0, &message, Style::NoStyle);\n         } else {\n             buffer.append(0, &level.to_string(), Style::Level(level.clone()));\n             match code {\n@@ -854,7 +890,9 @@ impl EmitterWriter {\n \n             buffer.append(0, &level.to_string(), Style::Level(level.clone()));\n             buffer.append(0, \": \", Style::HeaderMsg);\n-            buffer.append(0, msg, Style::HeaderMsg);\n+\n+            let message = self.msg_with_padding(msg, max_line_num_len, \"suggestion\");\n+            buffer.append(0, &message, Style::HeaderMsg);\n \n             let lines = cm.span_to_lines(primary_span).unwrap();\n \n@@ -930,7 +968,7 @@ impl EmitterWriter {\n                                                             max_line_num_len,\n                                                             true) {\n                                 Err(e) => panic!(\"failed to emit error: {}\", e),\n-                                _ => ()\n+                                _ => (),\n                             }\n                         }\n                     }"}, {"sha": "3bc3d1a2c970eece32250b1b74fda5b41540d384", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e57f061be20666eb0506f6f41551c798bbb38b60/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e57f061be20666eb0506f6f41551c798bbb38b60/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=e57f061be20666eb0506f6f41551c798bbb38b60", "patch": "@@ -71,15 +71,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let mut err = self.report_mismatched_types(&cause, expected, expr_ty, e);\n             if suggestions.len() > 0 {\n                 err.help(&format!(\"here are some functions which \\\n-                                   might fulfill your needs:\\n - {}\",\n-                                  self.get_best_match(&suggestions)));\n+                                   might fulfill your needs:\\n{}\",\n+                                  self.get_best_match(&suggestions).join(\"\\n\")));\n             };\n             err.emit();\n         }\n     }\n \n     fn format_method_suggestion(&self, method: &AssociatedItem) -> String {\n-        format!(\".{}({})\",\n+        format!(\"- .{}({})\",\n                 method.name,\n                 if self.has_no_input_arg(method) {\n                     \"\"\n@@ -88,15 +88,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 })\n     }\n \n-    fn display_suggested_methods(&self, methods: &[AssociatedItem]) -> String {\n+    fn display_suggested_methods(&self, methods: &[AssociatedItem]) -> Vec<String> {\n         methods.iter()\n                .take(5)\n                .map(|method| self.format_method_suggestion(&*method))\n                .collect::<Vec<String>>()\n-               .join(\"\\n - \")\n     }\n \n-    fn get_best_match(&self, methods: &[AssociatedItem]) -> String {\n+    fn get_best_match(&self, methods: &[AssociatedItem]) -> Vec<String> {\n         let no_argument_methods: Vec<_> =\n             methods.iter()\n                    .filter(|ref x| self.has_no_input_arg(&*x))"}, {"sha": "bb6f310fec81387c3c1003078f303f9c5251641f", "filename": "src/test/ui/resolve/token-error-correct-3.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e57f061be20666eb0506f6f41551c798bbb38b60/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e57f061be20666eb0506f6f41551c798bbb38b60/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr?ref=e57f061be20666eb0506f6f41551c798bbb38b60", "patch": "@@ -37,9 +37,9 @@ error[E0308]: mismatched types\n    = note: expected type `()`\n    = note:    found type `std::result::Result<bool, std::io::Error>`\n    = help: here are some functions which might fulfill your needs:\n- - .unwrap()\n- - .unwrap_err()\n- - .unwrap_or_default()\n+           - .unwrap()\n+           - .unwrap_err()\n+           - .unwrap_or_default()\n \n error: aborting due to previous error\n "}, {"sha": "ed1bcd318a4f69f280b1d6e86ee46c9b547b71a5", "filename": "src/test/ui/span/coerce-suggestions.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e57f061be20666eb0506f6f41551c798bbb38b60/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e57f061be20666eb0506f6f41551c798bbb38b60/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr?ref=e57f061be20666eb0506f6f41551c798bbb38b60", "patch": "@@ -7,8 +7,8 @@ error[E0308]: mismatched types\n    = note: expected type `usize`\n    = note:    found type `std::string::String`\n    = help: here are some functions which might fulfill your needs:\n- - .capacity()\n- - .len()\n+           - .capacity()\n+           - .len()\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:23:19\n@@ -19,10 +19,10 @@ error[E0308]: mismatched types\n    = note: expected type `&str`\n    = note:    found type `std::string::String`\n    = help: here are some functions which might fulfill your needs:\n- - .as_str()\n- - .trim()\n- - .trim_left()\n- - .trim_right()\n+           - .as_str()\n+           - .trim()\n+           - .trim_left()\n+           - .trim_right()\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:30:10"}]}