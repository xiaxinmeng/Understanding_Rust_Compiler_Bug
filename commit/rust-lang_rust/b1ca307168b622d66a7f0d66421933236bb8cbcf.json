{"sha": "b1ca307168b622d66a7f0d66421933236bb8cbcf", "node_id": "C_kwDOAAsO6NoAKGIxY2EzMDcxNjhiNjIyZDY2YTdmMGQ2NjQyMTkzMzIzNmJiOGNiY2Y", "commit": {"author": {"name": "Niki4tap", "email": "rombiklol2@gmail.com", "date": "2022-12-18T15:58:15Z"}, "committer": {"name": "Niki4tap", "email": "rombiklol2@gmail.com", "date": "2022-12-18T15:58:15Z"}, "message": "Address some of the code style issues", "tree": {"sha": "0cc847f5d381a74e7889357e6da913a1e949c367", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cc847f5d381a74e7889357e6da913a1e949c367"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1ca307168b622d66a7f0d66421933236bb8cbcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1ca307168b622d66a7f0d66421933236bb8cbcf", "html_url": "https://github.com/rust-lang/rust/commit/b1ca307168b622d66a7f0d66421933236bb8cbcf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1ca307168b622d66a7f0d66421933236bb8cbcf/comments", "author": {"login": "Niki4tap", "id": 66798058, "node_id": "MDQ6VXNlcjY2Nzk4MDU4", "avatar_url": "https://avatars.githubusercontent.com/u/66798058?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Niki4tap", "html_url": "https://github.com/Niki4tap", "followers_url": "https://api.github.com/users/Niki4tap/followers", "following_url": "https://api.github.com/users/Niki4tap/following{/other_user}", "gists_url": "https://api.github.com/users/Niki4tap/gists{/gist_id}", "starred_url": "https://api.github.com/users/Niki4tap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Niki4tap/subscriptions", "organizations_url": "https://api.github.com/users/Niki4tap/orgs", "repos_url": "https://api.github.com/users/Niki4tap/repos", "events_url": "https://api.github.com/users/Niki4tap/events{/privacy}", "received_events_url": "https://api.github.com/users/Niki4tap/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Niki4tap", "id": 66798058, "node_id": "MDQ6VXNlcjY2Nzk4MDU4", "avatar_url": "https://avatars.githubusercontent.com/u/66798058?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Niki4tap", "html_url": "https://github.com/Niki4tap", "followers_url": "https://api.github.com/users/Niki4tap/followers", "following_url": "https://api.github.com/users/Niki4tap/following{/other_user}", "gists_url": "https://api.github.com/users/Niki4tap/gists{/gist_id}", "starred_url": "https://api.github.com/users/Niki4tap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Niki4tap/subscriptions", "organizations_url": "https://api.github.com/users/Niki4tap/orgs", "repos_url": "https://api.github.com/users/Niki4tap/repos", "events_url": "https://api.github.com/users/Niki4tap/events{/privacy}", "received_events_url": "https://api.github.com/users/Niki4tap/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dae54fad3ee4b51ed286d4686f6d064b48b56cca", "url": "https://api.github.com/repos/rust-lang/rust/commits/dae54fad3ee4b51ed286d4686f6d064b48b56cca", "html_url": "https://github.com/rust-lang/rust/commit/dae54fad3ee4b51ed286d4686f6d064b48b56cca"}], "stats": {"total": 78, "additions": 27, "deletions": 51}, "files": [{"sha": "f4b7a55fa7468bf7356bc92da1e3a5cdd1ad3b66", "filename": "clippy_lints/src/fn_null_check.rs", "status": "modified", "additions": 25, "deletions": 50, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/b1ca307168b622d66a7f0d66421933236bb8cbcf/clippy_lints%2Fsrc%2Ffn_null_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1ca307168b622d66a7f0d66421933236bb8cbcf/clippy_lints%2Fsrc%2Ffn_null_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffn_null_check.rs?ref=b1ca307168b622d66a7f0d66421933236bb8cbcf", "patch": "@@ -1,7 +1,6 @@\n use clippy_utils::consts::{constant, Constant};\n use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::{is_integer_literal, is_path_diagnostic_item};\n-use if_chain::if_chain;\n use rustc_hir::{BinOpKind, Expr, ExprKind, TyKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -33,40 +32,37 @@ declare_clippy_lint! {\n }\n declare_lint_pass!(FnNullCheck => [FN_NULL_CHECK]);\n \n-const LINT_MSG: &str = \"function pointer assumed to be nullable, even though it isn't\";\n-const HELP_MSG: &str = \"try wrapping your function pointer type in `Option<T>` instead, and using `is_none` to check for null pointer value\";\n+fn lint_expr(cx: &LateContext<'_>, expr: &Expr<'_>) {\n+    span_lint_and_help(\n+        cx,\n+        FN_NULL_CHECK,\n+        expr.span,\n+        \"function pointer assumed to be nullable, even though it isn't\",\n+        None,\n+        \"try wrapping your function pointer type in `Option<T>` instead, and using `is_none` to check for null pointer value\",\n+    )\n+}\n \n fn is_fn_ptr_cast(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n-    if_chain! {\n-        if let ExprKind::Cast(cast_expr, cast_ty) = expr.kind;\n-        if let TyKind::Ptr(_) = cast_ty.kind;\n-        if cx.typeck_results().expr_ty_adjusted(cast_expr).is_fn();\n-        then {\n-            true\n-        } else {\n-            false\n-        }\n+    if let ExprKind::Cast(cast_expr, cast_ty) = expr.kind\n+        && let TyKind::Ptr(_) = cast_ty.kind\n+    {\n+        cx.typeck_results().expr_ty_adjusted(cast_expr).is_fn()\n+    } else {\n+        false\n     }\n }\n \n impl<'tcx> LateLintPass<'tcx> for FnNullCheck {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         // Catching:\n         // (fn_ptr as *<const/mut> <ty>).is_null()\n-        if_chain! {\n-            if let ExprKind::MethodCall(method_name, receiver, _, _) = expr.kind;\n-            if method_name.ident.as_str() == \"is_null\";\n-            if is_fn_ptr_cast(cx, receiver);\n-            then {\n-                span_lint_and_help(\n-                    cx,\n-                    FN_NULL_CHECK,\n-                    expr.span,\n-                    LINT_MSG,\n-                    None,\n-                    HELP_MSG\n-                );\n-            }\n+        if let ExprKind::MethodCall(method_name, receiver, _, _) = expr.kind\n+            && method_name.ident.as_str() == \"is_null\"\n+            && is_fn_ptr_cast(cx, receiver)\n+        {\n+                lint_expr(cx, expr);\n+                return;\n         }\n \n         if let ExprKind::Binary(op, left, right) = expr.kind\n@@ -85,28 +81,14 @@ impl<'tcx> LateLintPass<'tcx> for FnNullCheck {\n             // (fn_ptr as *<const/mut> <ty>) == <const that evaluates to null_ptr>\n             let c = constant(cx, cx.typeck_results(), to_check);\n             if let Some((Constant::RawPtr(0), _)) = c {\n-                span_lint_and_help(\n-                    cx,\n-                    FN_NULL_CHECK,\n-                    expr.span,\n-                    LINT_MSG,\n-                    None,\n-                    HELP_MSG\n-                );\n+                lint_expr(cx, expr);\n                 return;\n             }\n \n             // Catching:\n             // (fn_ptr as *<const/mut> <ty>) == (0 as <ty>)\n             if let ExprKind::Cast(cast_expr, _) = to_check.kind && is_integer_literal(cast_expr, 0) {\n-                span_lint_and_help(\n-                    cx,\n-                    FN_NULL_CHECK,\n-                    expr.span,\n-                    LINT_MSG,\n-                    None,\n-                    HELP_MSG\n-                );\n+                lint_expr(cx, expr);\n                 return;\n             }\n \n@@ -115,14 +97,7 @@ impl<'tcx> LateLintPass<'tcx> for FnNullCheck {\n             if let ExprKind::Call(func, []) = to_check.kind &&\n                 is_path_diagnostic_item(cx, func, sym::ptr_null)\n             {\n-                span_lint_and_help(\n-                    cx,\n-                    FN_NULL_CHECK,\n-                    expr.span,\n-                    LINT_MSG,\n-                    None,\n-                    HELP_MSG\n-                );\n+                lint_expr(cx, expr);\n             }\n         }\n     }"}, {"sha": "074a5d31763868c1478bc555bfc7f68b71a288d8", "filename": "clippy_lints/src/transmute/transmute_null_to_fn.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b1ca307168b622d66a7f0d66421933236bb8cbcf/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_null_to_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1ca307168b622d66a7f0d66421933236bb8cbcf/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_null_to_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_null_to_fn.rs?ref=b1ca307168b622d66a7f0d66421933236bb8cbcf", "patch": "@@ -18,7 +18,8 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, arg: &'t\n         return false;\n     }\n \n-    // Catching transmute over constants that resolve to `null`.\n+    // Catching:\n+    // transmute over constants that resolve to `null`.\n     let mut const_eval_context = constant_context(cx, cx.typeck_results());\n     if let ExprKind::Path(ref _qpath) = arg.kind &&\n         let Some(Constant::RawPtr(0)) = const_eval_context.expr(arg)"}]}