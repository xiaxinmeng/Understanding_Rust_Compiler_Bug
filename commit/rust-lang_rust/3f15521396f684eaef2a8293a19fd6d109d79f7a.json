{"sha": "3f15521396f684eaef2a8293a19fd6d109d79f7a", "node_id": "C_kwDOAAsO6NoAKDNmMTU1MjEzOTZmNjg0ZWFlZjJhODI5M2ExOWZkNmQxMDlkNzlmN2E", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-19T14:13:22Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-19T14:54:31Z"}, "message": "Add `GenericArgKind::as_{type,const,region}`", "tree": {"sha": "23618de7f94436a362f40f85a7769777ab4f5b4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23618de7f94436a362f40f85a7769777ab4f5b4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f15521396f684eaef2a8293a19fd6d109d79f7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f15521396f684eaef2a8293a19fd6d109d79f7a", "html_url": "https://github.com/rust-lang/rust/commit/3f15521396f684eaef2a8293a19fd6d109d79f7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f15521396f684eaef2a8293a19fd6d109d79f7a/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7f9e81650dcee3e2d5ad1973a71da644a2eff93", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7f9e81650dcee3e2d5ad1973a71da644a2eff93", "html_url": "https://github.com/rust-lang/rust/commit/d7f9e81650dcee3e2d5ad1973a71da644a2eff93"}], "stats": {"total": 186, "additions": 88, "deletions": 98}, "files": [{"sha": "2e76754c78462242bb95adc4c2f44c59a2609f95", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3f15521396f684eaef2a8293a19fd6d109d79f7a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f15521396f684eaef2a8293a19fd6d109d79f7a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=3f15521396f684eaef2a8293a19fd6d109d79f7a", "patch": "@@ -29,7 +29,6 @@ use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_middle::bug;\n use rustc_middle::ty::layout::{LayoutOf, TyAndLayout};\n-use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{\n     self, AdtKind, Instance, ParamEnv, PolyExistentialTraitRef, Ty, TyCtxt, Visibility,\n };\n@@ -1182,23 +1181,21 @@ fn build_generic_type_param_di_nodes<'ll, 'tcx>(\n             let names = get_parameter_names(cx, generics);\n             let template_params: SmallVec<_> = iter::zip(substs, names)\n                 .filter_map(|(kind, name)| {\n-                    if let GenericArgKind::Type(ty) = kind.unpack() {\n+                    kind.unpack().as_type().map(|ty| {\n                         let actual_type =\n                             cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), ty);\n                         let actual_type_di_node = type_di_node(cx, actual_type);\n                         let name = name.as_str();\n-                        Some(unsafe {\n+                        unsafe {\n                             llvm::LLVMRustDIBuilderCreateTemplateTypeParameter(\n                                 DIB(cx),\n                                 None,\n                                 name.as_ptr().cast(),\n                                 name.len(),\n                                 actual_type_di_node,\n                             )\n-                        })\n-                    } else {\n-                        None\n-                    }\n+                        }\n+                    })\n                 })\n                 .collect();\n "}, {"sha": "198e627018e93f02b62f9d8424d1d0c3b4eaeca1", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f15521396f684eaef2a8293a19fd6d109d79f7a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f15521396f684eaef2a8293a19fd6d109d79f7a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=3f15521396f684eaef2a8293a19fd6d109d79f7a", "patch": "@@ -27,7 +27,7 @@ use rustc_hir::def_id::{DefId, DefIdMap};\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir;\n use rustc_middle::ty::layout::LayoutOf;\n-use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n+use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Instance, ParamEnv, Ty, TypeVisitableExt};\n use rustc_session::config::{self, DebugInfo};\n use rustc_session::Session;\n@@ -461,23 +461,21 @@ impl<'ll, 'tcx> DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                 let names = get_parameter_names(cx, generics);\n                 iter::zip(substs, names)\n                     .filter_map(|(kind, name)| {\n-                        if let GenericArgKind::Type(ty) = kind.unpack() {\n+                        kind.unpack().as_type().map(|ty| {\n                             let actual_type =\n                                 cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), ty);\n                             let actual_type_metadata = type_di_node(cx, actual_type);\n                             let name = name.as_str();\n-                            Some(unsafe {\n+                            unsafe {\n                                 Some(llvm::LLVMRustDIBuilderCreateTemplateTypeParameter(\n                                     DIB(cx),\n                                     None,\n                                     name.as_ptr().cast(),\n                                     name.len(),\n                                     actual_type_metadata,\n                                 ))\n-                            })\n-                        } else {\n-                            None\n-                        }\n+                            }\n+                        })\n                     })\n                     .collect()\n             } else {"}, {"sha": "81b49afb88391395061de37d308348f2ec0833d2", "filename": "compiler/rustc_codegen_ssa/src/meth.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f15521396f684eaef2a8293a19fd6d109d79f7a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f15521396f684eaef2a8293a19fd6d109d79f7a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs?ref=3f15521396f684eaef2a8293a19fd6d109d79f7a", "patch": "@@ -67,10 +67,10 @@ impl<'a, 'tcx> VirtualIndex {\n /// ref of the type.\n fn expect_dyn_trait_in_self(ty: Ty<'_>) -> ty::PolyExistentialTraitRef<'_> {\n     for arg in ty.peel_refs().walk() {\n-        if let GenericArgKind::Type(ty) = arg.unpack() {\n-            if let ty::Dynamic(data, _, _) = ty.kind() {\n-                return data.principal().expect(\"expected principal trait object\");\n-            }\n+        if let GenericArgKind::Type(ty) = arg.unpack()\n+            && let ty::Dynamic(data, _, _) = ty.kind()\n+        {\n+            return data.principal().expect(\"expected principal trait object\");\n         }\n     }\n "}, {"sha": "547bd884f3fb827ce0d8bf677e2b234da80cc662", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/mod.rs", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3f15521396f684eaef2a8293a19fd6d109d79f7a/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f15521396f684eaef2a8293a19fd6d109d79f7a/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs?ref=3f15521396f684eaef2a8293a19fd6d109d79f7a", "patch": "@@ -17,7 +17,6 @@ use rustc_infer::infer;\n use rustc_infer::infer::error_reporting::TypeErrCtxt;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n-use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, Const, Ty, TyCtxt, TypeVisitableExt};\n use rustc_session::Session;\n use rustc_span::symbol::Ident;\n@@ -250,16 +249,12 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n     }\n \n     fn ty_infer(&self, param: Option<&ty::GenericParamDef>, span: Span) -> Ty<'tcx> {\n-        if let Some(param) = param {\n-            if let GenericArgKind::Type(ty) = self.var_for_def(span, param).unpack() {\n-                return ty;\n-            }\n-            unreachable!()\n-        } else {\n-            self.next_ty_var(TypeVariableOrigin {\n+        match param {\n+            Some(param) => self.var_for_def(span, param).unpack().as_type().unwrap(),\n+            None => self.next_ty_var(TypeVariableOrigin {\n                 kind: TypeVariableOriginKind::TypeInference,\n                 span,\n-            })\n+            }),\n         }\n     }\n \n@@ -269,16 +264,12 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n         param: Option<&ty::GenericParamDef>,\n         span: Span,\n     ) -> Const<'tcx> {\n-        if let Some(param) = param {\n-            if let GenericArgKind::Const(ct) = self.var_for_def(span, param).unpack() {\n-                return ct;\n-            }\n-            unreachable!()\n-        } else {\n-            self.next_const_var(\n+        match param {\n+            Some(param) => self.var_for_def(span, param).unpack().as_const().unwrap(),\n+            None => self.next_const_var(\n                 ty,\n                 ConstVariableOrigin { kind: ConstVariableOriginKind::ConstInference, span },\n-            )\n+            ),\n         }\n     }\n "}, {"sha": "aeb791901bd23e7bf246cbe4228a2c99fb06b5be", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f15521396f684eaef2a8293a19fd6d109d79f7a/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f15521396f684eaef2a8293a19fd6d109d79f7a/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=3f15521396f684eaef2a8293a19fd6d109d79f7a", "patch": "@@ -166,10 +166,8 @@ declare_lint_pass!(BoxPointers => [BOX_POINTERS]);\n impl BoxPointers {\n     fn check_heap_type(&self, cx: &LateContext<'_>, span: Span, ty: Ty<'_>) {\n         for leaf in ty.walk() {\n-            if let GenericArgKind::Type(leaf_ty) = leaf.unpack() {\n-                if leaf_ty.is_box() {\n-                    cx.emit_spanned_lint(BOX_POINTERS, span, BuiltinBoxPointers { ty });\n-                }\n+            if let GenericArgKind::Type(leaf_ty) = leaf.unpack() && leaf_ty.is_box() {\n+                cx.emit_spanned_lint(BOX_POINTERS, span, BuiltinBoxPointers { ty });\n             }\n         }\n     }"}, {"sha": "9e2d01dc7fbcdd7f30e708d6127e9d8b712163d2", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 39, "deletions": 23, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/3f15521396f684eaef2a8293a19fd6d109d79f7a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f15521396f684eaef2a8293a19fd6d109d79f7a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=3f15521396f684eaef2a8293a19fd6d109d79f7a", "patch": "@@ -103,6 +103,30 @@ impl<'tcx> GenericArgKind<'tcx> {\n \n         GenericArg { ptr: unsafe { NonZeroUsize::new_unchecked(ptr | tag) }, marker: PhantomData }\n     }\n+\n+    #[inline]\n+    pub fn as_type(self) -> Option<Ty<'tcx>> {\n+        match self {\n+            GenericArgKind::Type(ty) => Some(ty),\n+            _ => None,\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn as_region(self) -> Option<ty::Region<'tcx>> {\n+        match self {\n+            GenericArgKind::Lifetime(re) => Some(re),\n+            _ => None,\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn as_const(self) -> Option<ty::Const<'tcx>> {\n+        match self {\n+            GenericArgKind::Const(ct) => Some(ct),\n+            _ => None,\n+        }\n+    }\n }\n \n impl<'tcx> fmt::Debug for GenericArg<'tcx> {\n@@ -379,22 +403,17 @@ impl<'tcx> InternalSubsts<'tcx> {\n \n     #[inline]\n     pub fn types(&'tcx self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'tcx {\n-        self.iter()\n-            .filter_map(|k| if let GenericArgKind::Type(ty) = k.unpack() { Some(ty) } else { None })\n+        self.iter().filter_map(|k| k.unpack().as_type())\n     }\n \n     #[inline]\n     pub fn regions(&'tcx self) -> impl DoubleEndedIterator<Item = ty::Region<'tcx>> + 'tcx {\n-        self.iter().filter_map(|k| {\n-            if let GenericArgKind::Lifetime(lt) = k.unpack() { Some(lt) } else { None }\n-        })\n+        self.iter().filter_map(|k| k.unpack().as_region())\n     }\n \n     #[inline]\n     pub fn consts(&'tcx self) -> impl DoubleEndedIterator<Item = ty::Const<'tcx>> + 'tcx {\n-        self.iter().filter_map(|k| {\n-            if let GenericArgKind::Const(ct) = k.unpack() { Some(ct) } else { None }\n-        })\n+        self.iter().filter_map(|k| k.unpack().as_const())\n     }\n \n     #[inline]\n@@ -410,31 +429,28 @@ impl<'tcx> InternalSubsts<'tcx> {\n     #[inline]\n     #[track_caller]\n     pub fn type_at(&self, i: usize) -> Ty<'tcx> {\n-        if let GenericArgKind::Type(ty) = self[i].unpack() {\n-            ty\n-        } else {\n-            bug!(\"expected type for param #{} in {:?}\", i, self);\n-        }\n+        self[i]\n+            .unpack()\n+            .as_type()\n+            .unwrap_or_else(|| bug!(\"expected type for param #{} in {:?}\", i, self))\n     }\n \n     #[inline]\n     #[track_caller]\n     pub fn region_at(&self, i: usize) -> ty::Region<'tcx> {\n-        if let GenericArgKind::Lifetime(lt) = self[i].unpack() {\n-            lt\n-        } else {\n-            bug!(\"expected region for param #{} in {:?}\", i, self);\n-        }\n+        self[i]\n+            .unpack()\n+            .as_region()\n+            .unwrap_or_else(|| bug!(\"expected region for param #{} in {:?}\", i, self))\n     }\n \n     #[inline]\n     #[track_caller]\n     pub fn const_at(&self, i: usize) -> ty::Const<'tcx> {\n-        if let GenericArgKind::Const(ct) = self[i].unpack() {\n-            ct\n-        } else {\n-            bug!(\"expected const for param #{} in {:?}\", i, self);\n-        }\n+        self[i]\n+            .unpack()\n+            .as_const()\n+            .unwrap_or_else(|| bug!(\"expected const for param #{} in {:?}\", i, self))\n     }\n \n     #[inline]"}, {"sha": "b18a682dbc64e74ccb29b0f3dfd1ec085a0865ba", "filename": "compiler/rustc_mir_transform/src/function_item_references.rs", "status": "modified", "additions": 22, "deletions": 26, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/3f15521396f684eaef2a8293a19fd6d109d79f7a/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f15521396f684eaef2a8293a19fd6d109d79f7a/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs?ref=3f15521396f684eaef2a8293a19fd6d109d79f7a", "patch": "@@ -3,7 +3,7 @@ use rustc_errors::Applicability;\n use rustc_hir::def_id::DefId;\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::mir::*;\n-use rustc_middle::ty::{self, EarlyBinder, GenericArgKind, PredicateKind, SubstsRef, Ty, TyCtxt};\n+use rustc_middle::ty::{self, EarlyBinder, PredicateKind, SubstsRef, Ty, TyCtxt};\n use rustc_session::lint::builtin::FUNCTION_ITEM_REFERENCES;\n use rustc_span::{symbol::sym, Span};\n use rustc_target::spec::abi::Abi;\n@@ -45,14 +45,12 @@ impl<'tcx> Visitor<'tcx> for FunctionItemRefChecker<'_, 'tcx> {\n                 // Handle calls to `transmute`\n                 if self.tcx.is_diagnostic_item(sym::transmute, def_id) {\n                     let arg_ty = args[0].ty(self.body, self.tcx);\n-                    for generic_inner_ty in arg_ty.walk() {\n-                        if let GenericArgKind::Type(inner_ty) = generic_inner_ty.unpack() {\n-                            if let Some((fn_id, fn_substs)) =\n-                                FunctionItemRefChecker::is_fn_ref(inner_ty)\n-                            {\n-                                let span = self.nth_arg_span(&args, 0);\n-                                self.emit_lint(fn_id, fn_substs, source_info, span);\n-                            }\n+                    for inner_ty in arg_ty.walk().filter_map(|arg| arg.unpack().as_type()) {\n+                        if let Some((fn_id, fn_substs)) =\n+                            FunctionItemRefChecker::is_fn_ref(inner_ty)\n+                        {\n+                            let span = self.nth_arg_span(&args, 0);\n+                            self.emit_lint(fn_id, fn_substs, source_info, span);\n                         }\n                     }\n                 } else {\n@@ -82,24 +80,22 @@ impl<'tcx> FunctionItemRefChecker<'_, 'tcx> {\n                 let arg_defs = self.tcx.fn_sig(def_id).subst_identity().skip_binder().inputs();\n                 for (arg_num, arg_def) in arg_defs.iter().enumerate() {\n                     // For all types reachable from the argument type in the fn sig\n-                    for generic_inner_ty in arg_def.walk() {\n-                        if let GenericArgKind::Type(inner_ty) = generic_inner_ty.unpack() {\n-                            // If the inner type matches the type bound by `Pointer`\n-                            if inner_ty == bound_ty {\n-                                // Do a substitution using the parameters from the callsite\n-                                let subst_ty = EarlyBinder(inner_ty).subst(self.tcx, substs_ref);\n-                                if let Some((fn_id, fn_substs)) =\n-                                    FunctionItemRefChecker::is_fn_ref(subst_ty)\n-                                {\n-                                    let mut span = self.nth_arg_span(args, arg_num);\n-                                    if span.from_expansion() {\n-                                        // The operand's ctxt wouldn't display the lint since it's inside a macro so\n-                                        // we have to use the callsite's ctxt.\n-                                        let callsite_ctxt = span.source_callsite().ctxt();\n-                                        span = span.with_ctxt(callsite_ctxt);\n-                                    }\n-                                    self.emit_lint(fn_id, fn_substs, source_info, span);\n+                    for inner_ty in arg_def.walk().filter_map(|arg| arg.unpack().as_type()) {\n+                        // If the inner type matches the type bound by `Pointer`\n+                        if inner_ty == bound_ty {\n+                            // Do a substitution using the parameters from the callsite\n+                            let subst_ty = EarlyBinder(inner_ty).subst(self.tcx, substs_ref);\n+                            if let Some((fn_id, fn_substs)) =\n+                                FunctionItemRefChecker::is_fn_ref(subst_ty)\n+                            {\n+                                let mut span = self.nth_arg_span(args, arg_num);\n+                                if span.from_expansion() {\n+                                    // The operand's ctxt wouldn't display the lint since it's inside a macro so\n+                                    // we have to use the callsite's ctxt.\n+                                    let callsite_ctxt = span.source_callsite().ctxt();\n+                                    span = span.with_ctxt(callsite_ctxt);\n                                 }\n+                                self.emit_lint(fn_id, fn_substs, source_info, span);\n                             }\n                         }\n                     }"}, {"sha": "a9152b8113f678f0e6c4d2d76ccd08d46d384738", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3f15521396f684eaef2a8293a19fd6d109d79f7a/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f15521396f684eaef2a8293a19fd6d109d79f7a/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=3f15521396f684eaef2a8293a19fd6d109d79f7a", "patch": "@@ -814,16 +814,10 @@ fn transform_substs<'tcx>(\n     substs: SubstsRef<'tcx>,\n     options: TransformTyOptions,\n ) -> SubstsRef<'tcx> {\n-    let substs = substs.iter().map(|subst| {\n-        if let GenericArgKind::Type(ty) = subst.unpack() {\n-            if is_c_void_ty(tcx, ty) {\n-                tcx.mk_unit().into()\n-            } else {\n-                transform_ty(tcx, ty, options).into()\n-            }\n-        } else {\n-            subst\n-        }\n+    let substs = substs.iter().map(|subst| match subst.unpack() {\n+        GenericArgKind::Type(ty) if is_c_void_ty(tcx, ty) => tcx.mk_unit().into(),\n+        GenericArgKind::Type(ty) => transform_ty(tcx, ty, options).into(),\n+        _ => subst,\n     });\n     tcx.mk_substs_from_iter(substs)\n }"}]}