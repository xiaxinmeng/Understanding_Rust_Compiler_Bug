{"sha": "195414783402d6973f4e673e84be9b7bc19cbfa6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NTQxNDc4MzQwMmQ2OTczZjRlNjczZTg0YmU5YjdiYzE5Y2JmYTY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-14T15:33:27Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-03-14T15:33:27Z"}, "message": "More renaming", "tree": {"sha": "79dcaa50fe38214d03c4e60b3738ca578e09d659", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79dcaa50fe38214d03c4e60b3738ca578e09d659"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/195414783402d6973f4e673e84be9b7bc19cbfa6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/195414783402d6973f4e673e84be9b7bc19cbfa6", "html_url": "https://github.com/rust-lang/rust/commit/195414783402d6973f4e673e84be9b7bc19cbfa6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/195414783402d6973f4e673e84be9b7bc19cbfa6/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eea777c7148ac6c52434e8ea4913cdb50a466a3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/eea777c7148ac6c52434e8ea4913cdb50a466a3e", "html_url": "https://github.com/rust-lang/rust/commit/eea777c7148ac6c52434e8ea4913cdb50a466a3e"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "eb1cd66fb15c505076bdeed44927acc0374ec490", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195414783402d6973f4e673e84be9b7bc19cbfa6/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195414783402d6973f4e673e84be9b7bc19cbfa6/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=195414783402d6973f4e673e84be9b7bc19cbfa6", "patch": "@@ -1979,7 +1979,7 @@ impl Type {\n                         walk_bounds(db, &type_.derived(ty.clone()), &bounds, cb);\n                     }\n \n-                    walk_substs(db, type_, &opaque_ty.parameters, cb);\n+                    walk_substs(db, type_, &opaque_ty.substitution, cb);\n                 }\n                 TyKind::Placeholder(_) => {\n                     if let Some(bounds) = ty.impl_trait_bounds(db) {"}, {"sha": "378c951c5e500b7edc082214226dc610ab50f490", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/195414783402d6973f4e673e84be9b7bc19cbfa6/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195414783402d6973f4e673e84be9b7bc19cbfa6/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=195414783402d6973f4e673e84be9b7bc19cbfa6", "patch": "@@ -319,7 +319,10 @@ impl HirDisplay for Ty {\n                     TyKind::Dyn(predicates) if predicates.len() > 1 => {\n                         Cow::Borrowed(predicates.as_ref())\n                     }\n-                    &TyKind::Alias(AliasTy::Opaque(OpaqueTy { opaque_ty_id, ref parameters })) => {\n+                    &TyKind::Alias(AliasTy::Opaque(OpaqueTy {\n+                        opaque_ty_id,\n+                        substitution: ref parameters,\n+                    })) => {\n                         let impl_trait_id = f.db.lookup_intern_impl_trait_id(opaque_ty_id.into());\n                         if let ImplTraitId::ReturnTypeImplTrait(func, idx) = impl_trait_id {\n                             datas =\n@@ -579,7 +582,7 @@ impl HirDisplay for Ty {\n                         let data = (*datas)\n                             .as_ref()\n                             .map(|rpit| rpit.impl_traits[idx as usize].bounds.clone());\n-                        let bounds = data.subst(&opaque_ty.parameters);\n+                        let bounds = data.subst(&opaque_ty.substitution);\n                         write_bounds_like_dyn_trait_with_prefix(\"impl\", &bounds.value, f)?;\n                     }\n                     ImplTraitId::AsyncBlockTypeImplTrait(..) => {"}, {"sha": "484652073c56788ff83656746e0ace7646992582", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/195414783402d6973f4e673e84be9b7bc19cbfa6/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195414783402d6973f4e673e84be9b7bc19cbfa6/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=195414783402d6973f4e673e84be9b7bc19cbfa6", "patch": "@@ -66,7 +66,7 @@ pub enum Lifetime {\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub struct OpaqueTy {\n     pub opaque_ty_id: OpaqueTyId,\n-    pub parameters: Substs,\n+    pub substitution: Substs,\n }\n \n /// A \"projection\" type corresponds to an (unnormalized)\n@@ -903,7 +903,7 @@ impl Ty {\n                             let data = (*it)\n                                 .as_ref()\n                                 .map(|rpit| rpit.impl_traits[idx as usize].bounds.clone());\n-                            data.subst(&opaque_ty.parameters)\n+                            data.subst(&opaque_ty.substitution)\n                         })\n                     }\n                     // It always has an parameter for Future::Output type.\n@@ -1059,7 +1059,7 @@ impl TypeWalk for Ty {\n                 }\n             }\n             TyKind::Alias(AliasTy::Opaque(o_ty)) => {\n-                for t in o_ty.parameters.iter() {\n+                for t in o_ty.substitution.iter() {\n                     t.walk(f);\n                 }\n             }\n@@ -1094,7 +1094,7 @@ impl TypeWalk for Ty {\n                 }\n             }\n             TyKind::Alias(AliasTy::Opaque(o_ty)) => {\n-                o_ty.parameters.walk_mut_binders(f, binders);\n+                o_ty.substitution.walk_mut_binders(f, binders);\n             }\n             _ => {\n                 if let Some(substs) = self.substs_mut() {"}, {"sha": "d026310f4d6b0a039ac62cd6294b9d2baf4cccc4", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/195414783402d6973f4e673e84be9b7bc19cbfa6/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195414783402d6973f4e673e84be9b7bc19cbfa6/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=195414783402d6973f4e673e84be9b7bc19cbfa6", "patch": "@@ -230,8 +230,11 @@ impl<'a> TyLoweringContext<'a> {\n                         let opaque_ty_id = self.db.intern_impl_trait_id(impl_trait_id).into();\n                         let generics = generics(self.db.upcast(), func.into());\n                         let parameters = Substs::bound_vars(&generics, self.in_binders);\n-                        TyKind::Alias(AliasTy::Opaque(OpaqueTy { opaque_ty_id, parameters }))\n-                            .intern(&Interner)\n+                        TyKind::Alias(AliasTy::Opaque(OpaqueTy {\n+                            opaque_ty_id,\n+                            substitution: parameters,\n+                        }))\n+                        .intern(&Interner)\n                     }\n                     ImplTraitLoweringMode::Param => {\n                         let idx = self.impl_trait_counter.get();"}, {"sha": "05a4bf0df6ff6f45070cd061554a18fd7fb4e4f4", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/195414783402d6973f4e673e84be9b7bc19cbfa6/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195414783402d6973f4e673e84be9b7bc19cbfa6/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=195414783402d6973f4e673e84be9b7bc19cbfa6", "patch": "@@ -87,6 +87,13 @@ impl ToChalk for Ty {\n                 .cast(&Interner)\n                 .intern(&Interner)\n             }\n+            TyKind::Alias(AliasTy::Opaque(opaque_ty)) => {\n+                let opaque_ty_id = opaque_ty.opaque_ty_id;\n+                let substitution = opaque_ty.substitution.to_chalk(db);\n+                chalk_ir::AliasTy::Opaque(chalk_ir::OpaqueTy { opaque_ty_id, substitution })\n+                    .cast(&Interner)\n+                    .intern(&Interner)\n+            }\n             TyKind::Placeholder(idx) => idx.to_ty::<Interner>(&Interner),\n             TyKind::BoundVar(idx) => chalk_ir::TyKind::BoundVar(idx).intern(&Interner),\n             TyKind::InferenceVar(..) => panic!(\"uncanonicalized infer ty\"),\n@@ -101,15 +108,6 @@ impl ToChalk for Ty {\n                 };\n                 chalk_ir::TyKind::Dyn(bounded_ty).intern(&Interner)\n             }\n-            TyKind::Alias(AliasTy::Opaque(opaque_ty)) => {\n-                let opaque_ty_id = opaque_ty.opaque_ty_id;\n-                let substitution = opaque_ty.parameters.to_chalk(db);\n-                chalk_ir::TyKind::Alias(chalk_ir::AliasTy::Opaque(chalk_ir::OpaqueTy {\n-                    opaque_ty_id,\n-                    substitution,\n-                }))\n-                .intern(&Interner)\n-            }\n             TyKind::Unknown => chalk_ir::TyKind::Error.intern(&Interner),\n         }\n     }\n@@ -129,7 +127,7 @@ impl ToChalk for Ty {\n             chalk_ir::TyKind::Alias(chalk_ir::AliasTy::Opaque(opaque_ty)) => {\n                 let opaque_ty_id = opaque_ty.opaque_ty_id;\n                 let parameters = from_chalk(db, opaque_ty.substitution);\n-                TyKind::Alias(AliasTy::Opaque(OpaqueTy { opaque_ty_id, parameters }))\n+                TyKind::Alias(AliasTy::Opaque(OpaqueTy { opaque_ty_id, substitution: parameters }))\n             }\n             chalk_ir::TyKind::Function(chalk_ir::FnPointer {\n                 num_binders,"}]}