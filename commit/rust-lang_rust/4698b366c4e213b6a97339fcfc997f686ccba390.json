{"sha": "4698b366c4e213b6a97339fcfc997f686ccba390", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2OThiMzY2YzRlMjEzYjZhOTczMzlmY2ZjOTk3ZjY4NmNjYmEzOTA=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-02-13T19:52:25Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-05-12T23:03:06Z"}, "message": "Show macro name in 'this error originates in macro' message\n\nWhen there are multiple macros in use, it can be difficult to tell\nwhich one was responsible for producing an error.", "tree": {"sha": "cda805caba8b59c819a614f480aa8da4e18ac3b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cda805caba8b59c819a614f480aa8da4e18ac3b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4698b366c4e213b6a97339fcfc997f686ccba390", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4698b366c4e213b6a97339fcfc997f686ccba390", "html_url": "https://github.com/rust-lang/rust/commit/4698b366c4e213b6a97339fcfc997f686ccba390", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4698b366c4e213b6a97339fcfc997f686ccba390/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f019d28c72800eb893077789fc4ab3958ad70fd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f019d28c72800eb893077789fc4ab3958ad70fd9", "html_url": "https://github.com/rust-lang/rust/commit/f019d28c72800eb893077789fc4ab3958ad70fd9"}], "stats": {"total": 180, "additions": 90, "deletions": 90}, "files": [{"sha": "4735573a47d3fa2b93b8c9093d6d47f6624e0567", "filename": "tests/ui-internal/default_lint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui-internal%2Fdefault_lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui-internal%2Fdefault_lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fdefault_lint.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -15,7 +15,7 @@ note: the lint level is defined here\n LL | #![deny(clippy::internal)]\n    |         ^^^^^^^^^^^^^^^^\n    = note: `#[deny(clippy::default_lint)]` implied by `#[deny(clippy::internal)]`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::declare_tool_lint` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "d0f100f00692f354b225bf5dc035034982a47538", "filename": "tests/ui-internal/if_chain_style.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui-internal%2Fif_chain_style.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui-internal%2Fif_chain_style.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fif_chain_style.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -56,7 +56,7 @@ LL | |         }\n LL | |     }\n    | |_____^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `__if_chain` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `let` expression should be above the `if_chain!`\n   --> $DIR/if_chain_style.rs:40:9"}, {"sha": "e308e13da138304f34e1a2a340683f247eb8529a", "filename": "tests/ui-internal/lint_without_lint_pass.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui-internal%2Flint_without_lint_pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui-internal%2Flint_without_lint_pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Flint_without_lint_pass.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -15,7 +15,7 @@ note: the lint level is defined here\n LL | #![deny(clippy::internal)]\n    |         ^^^^^^^^^^^^^^^^\n    = note: `#[deny(clippy::lint_without_lint_pass)]` implied by `#[deny(clippy::internal)]`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `declare_tool_lint` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "1eb87d89fad027a9dbb4cd1ff2aa43d5914904d4", "filename": "tests/ui/assertions_on_constants.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fassertions_on_constants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fassertions_on_constants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassertions_on_constants.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -6,7 +6,7 @@ LL |     assert!(true);\n    |\n    = note: `-D clippy::assertions-on-constants` implied by `-D warnings`\n    = help: remove it\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(false)` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:12:5\n@@ -15,7 +15,7 @@ LL |     assert!(false);\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: use `panic!()` or `unreachable!()`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(true)` will be optimized out by the compiler\n   --> $DIR/assertions_on_constants.rs:13:5\n@@ -24,7 +24,7 @@ LL |     assert!(true, \"true message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove it\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(false, \"false message\")` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:14:5\n@@ -33,7 +33,7 @@ LL |     assert!(false, \"false message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use `panic!(\"false message\")` or `unreachable!(\"false message\")`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(false, msg.to_uppercase())` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:17:5\n@@ -42,7 +42,7 @@ LL |     assert!(false, msg.to_uppercase());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use `panic!(msg.to_uppercase())` or `unreachable!(msg.to_uppercase())`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(true)` will be optimized out by the compiler\n   --> $DIR/assertions_on_constants.rs:20:5\n@@ -51,7 +51,7 @@ LL |     assert!(B);\n    |     ^^^^^^^^^^^\n    |\n    = help: remove it\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(false)` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:23:5\n@@ -60,7 +60,7 @@ LL |     assert!(C);\n    |     ^^^^^^^^^^^\n    |\n    = help: use `panic!()` or `unreachable!()`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(false, \"C message\")` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:24:5\n@@ -69,7 +69,7 @@ LL |     assert!(C, \"C message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use `panic!(\"C message\")` or `unreachable!(\"C message\")`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `debug_assert!(true)` will be optimized out by the compiler\n   --> $DIR/assertions_on_constants.rs:26:5\n@@ -78,7 +78,7 @@ LL |     debug_assert!(true);\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove it\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 9 previous errors\n "}, {"sha": "a4bc058fe2020b2263e5323c55160e56de9750ae", "filename": "tests/ui/checked_unwrap/simple_conditionals.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -55,7 +55,7 @@ LL |             $a.unwrap(); // unnecessary\n LL |     m!(x);\n    |     ------ in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you checked before that `unwrap()` cannot fail, instead of checking and unwrapping, it's better to use `if let` or `match`\n   --> $DIR/simple_conditionals.rs:54:9"}, {"sha": "8975b2efbaeeb8900e1f22e3af2be375675d6785", "filename": "tests/ui/collapsible_match2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fcollapsible_match2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fcollapsible_match2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_match2.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -55,7 +55,7 @@ LL |         mac!(res_opt => Ok(val), val => Some(n), foo(n));\n    |                            ^^^          ^^^^^^^ with this pattern\n    |                            |\n    |                            replace this binding\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unnecessary nested match\n   --> $DIR/collapsible_match2.rs:51:20"}, {"sha": "5dbf9d440dd7594e2d69a048f1985849b0d7ed27", "filename": "tests/ui/crashes/ice-6255.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fcrashes%2Fice-6255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fcrashes%2Fice-6255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6255.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -7,7 +7,7 @@ LL |         extern crate std as core;\n LL | define_other_core!();\n    | --------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `define_other_core` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "7c9d705fa9895d80c380f7943b31de9f5363b9ad", "filename": "tests/ui/declare_interior_mutable_const/others.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fdeclare_interior_mutable_const%2Fothers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fdeclare_interior_mutable_const%2Fothers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeclare_interior_mutable_const%2Fothers.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -33,7 +33,7 @@ LL |         const $name: $ty = $e;\n LL | declare_const!(_ONCE: Once = Once::new()); //~ ERROR interior mutable\n    | ------------------------------------------ in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `declare_const` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "bed385b5273a96bd2ee7b6bcb224fc86ff054b85", "filename": "tests/ui/declare_interior_mutable_const/traits.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fdeclare_interior_mutable_const%2Ftraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fdeclare_interior_mutable_const%2Ftraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeclare_interior_mutable_const%2Ftraits.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -15,7 +15,7 @@ LL |         const $name: $ty = $e;\n LL |     declare_const!(ANOTHER_ATOMIC: AtomicUsize = Self::ATOMIC); //~ ERROR interior mutable\n    |     ----------------------------------------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `declare_const` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: a `const` item should never be interior mutable\n   --> $DIR/traits.rs:43:5"}, {"sha": "1a14f31af8d77c0a8df40c2cc5e72e5ce9a3be49", "filename": "tests/ui/deref_addrof.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fderef_addrof.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fderef_addrof.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_addrof.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -57,7 +57,7 @@ LL |         *& $visitor\n LL |         m!(self)\n    |         -------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: immediately dereferencing a reference\n   --> $DIR/deref_addrof.rs:51:9\n@@ -68,7 +68,7 @@ LL |         *& mut $visitor\n LL |         m_mut!(self)\n    |         ------------ in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m_mut` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 10 previous errors\n "}, {"sha": "b383072ca4db75afa7f1c9da49a73ece05f2fce5", "filename": "tests/ui/derive_hash_xor_eq.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fderive_hash_xor_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fderive_hash_xor_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive_hash_xor_eq.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -14,7 +14,7 @@ LL | |         true\n LL | |     }\n LL | | }\n    | |_^\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are deriving `Hash` but have implemented `PartialEq` explicitly\n   --> $DIR/derive_hash_xor_eq.rs:19:10\n@@ -31,7 +31,7 @@ LL | |         true\n LL | |     }\n LL | | }\n    | |_^\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are implementing `Hash` explicitly but have derived `PartialEq`\n   --> $DIR/derive_hash_xor_eq.rs:31:1\n@@ -46,7 +46,7 @@ note: `PartialEq` implemented here\n    |\n LL | #[derive(PartialEq)]\n    |          ^^^^^^^^^\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are implementing `Hash` explicitly but have derived `PartialEq`\n   --> $DIR/derive_hash_xor_eq.rs:49:5\n@@ -61,7 +61,7 @@ note: `PartialEq` implemented here\n    |\n LL |     #[derive(PartialEq)]\n    |              ^^^^^^^^^\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "32896c99dad0ac687923836ea865b7302d937a8c", "filename": "tests/ui/derive_ord_xor_partial_ord.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fderive_ord_xor_partial_ord.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fderive_ord_xor_partial_ord.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive_ord_xor_partial_ord.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -14,7 +14,7 @@ LL | |         Some(other.cmp(self))\n LL | |     }\n LL | | }\n    | |_^\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are deriving `Ord` but have implemented `PartialOrd` explicitly\n   --> $DIR/derive_ord_xor_partial_ord.rs:30:10\n@@ -31,7 +31,7 @@ LL | |         Some(other.cmp(self))\n LL | |     }\n LL | | }\n    | |_^\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are implementing `Ord` explicitly but have derived `PartialOrd`\n   --> $DIR/derive_ord_xor_partial_ord.rs:42:1\n@@ -48,7 +48,7 @@ note: `PartialOrd` implemented here\n    |\n LL | #[derive(PartialOrd, PartialEq, Eq)]\n    |          ^^^^^^^^^^\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are implementing `Ord` explicitly but have derived `PartialOrd`\n   --> $DIR/derive_ord_xor_partial_ord.rs:62:5\n@@ -65,7 +65,7 @@ note: `PartialOrd` implemented here\n    |\n LL |     #[derive(PartialOrd, PartialEq, Eq)]\n    |              ^^^^^^^^^^\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "73b53f3431e7aa8737be2a2e998aa4ad665d6c73", "filename": "tests/ui/doc_unsafe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fdoc_unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fdoc_unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_unsafe.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -41,7 +41,7 @@ LL | |         }\n LL |   very_unsafe!();\n    |   --------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `very_unsafe` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors\n "}, {"sha": "a28961e7568edda36c40234222b3a7d481bcfb94", "filename": "tests/ui/eq_op_macros.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Feq_op_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Feq_op_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feq_op_macros.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -8,7 +8,7 @@ LL |     assert_in_macro_def!();\n    |     ----------------------- in this macro invocation\n    |\n    = note: `-D clippy::eq-op` implied by `-D warnings`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert_in_macro_def` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: identical args used in this `assert_ne!` macro call\n   --> $DIR/eq_op_macros.rs:8:20\n@@ -19,7 +19,7 @@ LL |         assert_ne!(a, a);\n LL |     assert_in_macro_def!();\n    |     ----------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert_in_macro_def` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: identical args used in this `assert_eq!` macro call\n   --> $DIR/eq_op_macros.rs:22:16\n@@ -54,7 +54,7 @@ LL |         debug_assert_eq!(a, a);\n LL |     assert_in_macro_def!();\n    |     ----------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert_in_macro_def` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: identical args used in this `debug_assert_ne!` macro call\n   --> $DIR/eq_op_macros.rs:10:26\n@@ -65,7 +65,7 @@ LL |         debug_assert_ne!(a, a);\n LL |     assert_in_macro_def!();\n    |     ----------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert_in_macro_def` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: identical args used in this `debug_assert_eq!` macro call\n   --> $DIR/eq_op_macros.rs:38:22"}, {"sha": "64c8ea857277e2af5b4a81e4390d55c2c7be23a3", "filename": "tests/ui/fallible_impl_from.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Ffallible_impl_from.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Ffallible_impl_from.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffallible_impl_from.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -38,7 +38,7 @@ note: potential failure(s)\n    |\n LL |             panic!();\n    |             ^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: consider implementing `TryFrom` instead\n   --> $DIR/fallible_impl_from.rs:35:1\n@@ -65,7 +65,7 @@ LL |         } else if s.parse::<u32>().unwrap() != 42 {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |             panic!(\"{:?}\", s);\n    |             ^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: consider implementing `TryFrom` instead\n   --> $DIR/fallible_impl_from.rs:53:1\n@@ -87,7 +87,7 @@ LL |         if s.parse::<u32>().ok().unwrap() != 42 {\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |             panic!(\"{:?}\", s);\n    |             ^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "41ca6485c4c97fcdef8b980cb2e9bb4786c917e4", "filename": "tests/ui/implicit_hasher.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fimplicit_hasher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fimplicit_hasher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -109,7 +109,7 @@ LL |         impl<K: Hash + Eq, V> Foo<u8> for HashMap<K, V> {\n LL | gen!(impl);\n    | ----------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider adding a type parameter\n    |\n LL |         impl<K: Hash + Eq, V, S: ::std::hash::BuildHasher + Default> Foo<u8> for HashMap<K, V, S> {\n@@ -128,7 +128,7 @@ LL |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>)\n LL | gen!(fn bar);\n    | ------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider adding a type parameter\n    |\n LL |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32, S>, _set: &mut HashSet<i32>) {}\n@@ -143,7 +143,7 @@ LL |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>)\n LL | gen!(fn bar);\n    | ------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider adding a type parameter\n    |\n LL |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32, S>) {}"}, {"sha": "bcb163d4bc1243e2604ecd40ed818448c0dbc3a8", "filename": "tests/ui/item_after_statement.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fitem_after_statement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fitem_after_statement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fitem_after_statement.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -27,7 +27,7 @@ LL | |             }\n LL |       b!();\n    |       ----- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `b` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "430021a0f7f5acddf88545d543bef5f20d90b077", "filename": "tests/ui/match_same_arms2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fmatch_same_arms2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fmatch_same_arms2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms2.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -121,7 +121,7 @@ help: consider refactoring into `(Ok(x), Some(_)) | (Ok(_), Some(x))`\n    |\n LL |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n   --> $DIR/match_same_arms2.rs:117:18\n@@ -139,7 +139,7 @@ help: consider refactoring into `Ok(3) | Ok(_)`\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |         ^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n   --> $DIR/match_same_arms2.rs:144:14"}, {"sha": "36a225b759484da68bd6f98fa1f1f4c8cfdf216f", "filename": "tests/ui/mem_discriminant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fmem_discriminant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fmem_discriminant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_discriminant.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -72,7 +72,7 @@ LL |     mem_discriminant_but_in_a_macro!(&rro);\n    |     |                                help: try dereferencing: `*rro`\n    |     in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `mem_discriminant_but_in_a_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: calling `mem::discriminant` on non-enum type `&&&&&std::option::Option<i32>`\n   --> $DIR/mem_discriminant.rs:34:5"}, {"sha": "b4963acc4553c79808b546bda11d1515e6bfdef9", "filename": "tests/ui/mem_replace_macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fmem_replace_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fmem_replace_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace_macro.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -8,7 +8,7 @@ LL |     take!(s);\n    |     --------- in this macro invocation\n    |\n    = note: `-D clippy::mem-replace-with-default` implied by `-D warnings`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `take` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "8d882cc6e0d07cdc266a8a9fa1b4045c6f8a9628", "filename": "tests/ui/missing_panics_doc.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fmissing_panics_doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fmissing_panics_doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_panics_doc.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -27,7 +27,7 @@ note: first possible panic found here\n    |\n LL |     panic!(\"This function panics\")\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: docs for function which may panic missing `# Panics` section\n   --> $DIR/missing_panics_doc.rs:18:1\n@@ -42,7 +42,7 @@ note: first possible panic found here\n    |\n LL |     todo!()\n    |     ^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: docs for function which may panic missing `# Panics` section\n   --> $DIR/missing_panics_doc.rs:23:1\n@@ -61,7 +61,7 @@ note: first possible panic found here\n    |\n LL |             panic!()\n    |             ^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: docs for function which may panic missing `# Panics` section\n   --> $DIR/missing_panics_doc.rs:32:1\n@@ -76,7 +76,7 @@ note: first possible panic found here\n    |\n LL |     if true { unreachable!() } else { panic!() }\n    |                                       ^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: docs for function which may panic missing `# Panics` section\n   --> $DIR/missing_panics_doc.rs:37:1\n@@ -92,7 +92,7 @@ note: first possible panic found here\n    |\n LL |     assert_eq!(x, 0);\n    |     ^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: docs for function which may panic missing `# Panics` section\n   --> $DIR/missing_panics_doc.rs:43:1\n@@ -108,7 +108,7 @@ note: first possible panic found here\n    |\n LL |     assert_ne!(x, 0);\n    |     ^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert_ne` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 7 previous errors\n "}, {"sha": "0fed6953cb85c295fc022a50e9d13a97c2772ded", "filename": "tests/ui/mut_mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fmut_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fmut_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_mut.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -21,7 +21,7 @@ LL |         &mut $p\n LL |     let mut z = mut_ptr!(&mut 3u32);\n    |                 ------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `mut_ptr` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this expression mutably borrows a mutable reference. Consider reborrowing\n   --> $DIR/mut_mut.rs:22:21"}, {"sha": "f1f05d1af3ae8fa744b3bfbf0c46c3d932f93f77", "filename": "tests/ui/needless_question_mark.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fneedless_question_mark.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fneedless_question_mark.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_question_mark.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -75,7 +75,7 @@ LL |         || -> Option<_> { Some(Some($expr)?) }()\n LL |     let _x = some_and_qmark_in_macro!(x?);\n    |              ---------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `some_and_qmark_in_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 12 previous errors\n "}, {"sha": "e6a58b0b2b752f3cca87b1a42816c2900a37953b", "filename": "tests/ui/option_env_unwrap.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Foption_env_unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Foption_env_unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_env_unwrap.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -25,7 +25,7 @@ LL |     let _ = option_env_unwrap!(\"PATH\");\n    |             -------------------------- in this macro invocation\n    |\n    = help: consider using the `env!` macro instead\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `option_env_unwrap` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this will panic at run-time if the environment variable doesn't exist at compile-time\n   --> $DIR/option_env_unwrap.rs:12:9\n@@ -37,7 +37,7 @@ LL |     let _ = option_env_unwrap!(\"PATH\", \"environment variable PATH isn't set\n    |             ----------------------------------------------------------------- in this macro invocation\n    |\n    = help: consider using the `env!` macro instead\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `option_env_unwrap` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this will panic at run-time if the environment variable doesn't exist at compile-time\n   --> $DIR/option_env_unwrap.rs:21:13\n@@ -46,7 +46,7 @@ LL |     let _ = option_env_unwrap_external!(\"PATH\");\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using the `env!` macro instead\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `option_env_unwrap_external` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this will panic at run-time if the environment variable doesn't exist at compile-time\n   --> $DIR/option_env_unwrap.rs:22:13\n@@ -55,7 +55,7 @@ LL |     let _ = option_env_unwrap_external!(\"PATH\", \"environment variable PATH\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using the `env!` macro instead\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `option_env_unwrap_external` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "8d6e40c30a10909280d80fbb24ad155d3ce45bf0", "filename": "tests/ui/panic_in_result_fn.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fpanic_in_result_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fpanic_in_result_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -14,7 +14,7 @@ note: return Err() instead of panicking\n    |\n LL |         panic!(\"error\");\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n   --> $DIR/panic_in_result_fn.rs:12:5\n@@ -31,7 +31,7 @@ note: return Err() instead of panicking\n    |\n LL |         unimplemented!();\n    |         ^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `unimplemented` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n   --> $DIR/panic_in_result_fn.rs:17:5\n@@ -48,7 +48,7 @@ note: return Err() instead of panicking\n    |\n LL |         unreachable!();\n    |         ^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n   --> $DIR/panic_in_result_fn.rs:22:5\n@@ -65,7 +65,7 @@ note: return Err() instead of panicking\n    |\n LL |         todo!(\"Finish this\");\n    |         ^^^^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `todo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n   --> $DIR/panic_in_result_fn.rs:53:1\n@@ -82,7 +82,7 @@ note: return Err() instead of panicking\n    |\n LL |     panic!(\"error\");\n    |     ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n   --> $DIR/panic_in_result_fn.rs:68:1\n@@ -99,7 +99,7 @@ note: return Err() instead of panicking\n    |\n LL |     todo!(\"finish main method\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `todo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "4c39b37d8798fcf1839ff629f7842153ae15daf1", "filename": "tests/ui/panic_in_result_fn_assertions.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fpanic_in_result_fn_assertions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fpanic_in_result_fn_assertions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn_assertions.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -15,7 +15,7 @@ note: return Err() instead of panicking\n    |\n LL |         assert!(x == 5, \"wrong argument\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n   --> $DIR/panic_in_result_fn_assertions.rs:13:5\n@@ -33,7 +33,7 @@ note: return Err() instead of panicking\n    |\n LL |         assert_eq!(x, 5);\n    |         ^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n   --> $DIR/panic_in_result_fn_assertions.rs:19:5\n@@ -51,7 +51,7 @@ note: return Err() instead of panicking\n    |\n LL |         assert_ne!(x, 1);\n    |         ^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert_ne` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "2e83c305a67e055c7b7f8dc3bd06021cbb1b79eb", "filename": "tests/ui/panicking_macros.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fpanicking_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fpanicking_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanicking_macros.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -25,23 +25,23 @@ LL |     todo!();\n    |     ^^^^^^^^\n    |\n    = note: `-D clippy::todo` implied by `-D warnings`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `todo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `todo` should not be present in production code\n   --> $DIR/panicking_macros.rs:17:5\n    |\n LL |     todo!(\"message\");\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `todo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `todo` should not be present in production code\n   --> $DIR/panicking_macros.rs:18:5\n    |\n LL |     todo!(\"{} {}\", \"panic with\", \"multiple arguments\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `todo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `unimplemented` should not be present in production code\n   --> $DIR/panicking_macros.rs:24:5\n@@ -50,23 +50,23 @@ LL |     unimplemented!();\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::unimplemented` implied by `-D warnings`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `unimplemented` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `unimplemented` should not be present in production code\n   --> $DIR/panicking_macros.rs:25:5\n    |\n LL |     unimplemented!(\"message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `unimplemented` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `unimplemented` should not be present in production code\n   --> $DIR/panicking_macros.rs:26:5\n    |\n LL |     unimplemented!(\"{} {}\", \"panic with\", \"multiple arguments\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `unimplemented` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: usage of the `unreachable!` macro\n   --> $DIR/panicking_macros.rs:32:5\n@@ -75,23 +75,23 @@ LL |     unreachable!();\n    |     ^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::unreachable` implied by `-D warnings`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: usage of the `unreachable!` macro\n   --> $DIR/panicking_macros.rs:33:5\n    |\n LL |     unreachable!(\"message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: usage of the `unreachable!` macro\n   --> $DIR/panicking_macros.rs:34:5\n    |\n LL |     unreachable!(\"{} {}\", \"panic with\", \"multiple arguments\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `panic` should not be present in production code\n   --> $DIR/panicking_macros.rs:40:5\n@@ -105,23 +105,23 @@ error: `todo` should not be present in production code\n LL |     todo!();\n    |     ^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `todo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `unimplemented` should not be present in production code\n   --> $DIR/panicking_macros.rs:42:5\n    |\n LL |     unimplemented!();\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `unimplemented` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: usage of the `unreachable!` macro\n   --> $DIR/panicking_macros.rs:43:5\n    |\n LL |     unreachable!();\n    |     ^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 16 previous errors\n "}, {"sha": "f309b2739829f90b921b139646abf2dbcce5ae51", "filename": "tests/ui/pattern_type_mismatch/syntax.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fpattern_type_mismatch%2Fsyntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Fpattern_type_mismatch%2Fsyntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern_type_mismatch%2Fsyntax.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -73,7 +73,7 @@ LL |     matching_macro!(value);\n    |     ----------------------- in this macro invocation\n    |\n    = help: use `*` to dereference the match expression or explicitly match against a `&_` pattern and adjust the enclosed variable bindings\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `matching_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 9 previous errors\n "}, {"sha": "48e7d9ddd5aee5086731acb05f99456c6d97c1f4", "filename": "tests/ui/toplevel_ref_arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Ftoplevel_ref_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Ftoplevel_ref_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -39,7 +39,7 @@ LL |         let ref _y = 42;\n LL |         gen_binding!();\n    |         --------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_binding` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "31f8c103ede573ad1153c653bf64759cccbe3def", "filename": "tests/ui/toplevel_ref_arg_non_rustfix.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -15,7 +15,7 @@ LL |         fn fun_example(ref _x: usize) {}\n LL |         gen_function!();\n    |         ---------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_function` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "09efc16c154ef70ef9e676f411af7594903b1349", "filename": "tests/ui/try_err.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Ftry_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Ftry_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -37,7 +37,7 @@ LL |             Err(_) => Err(1)?,\n LL |     try_validation!(Ok::<_, i32>(5));\n    |     --------------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `try_validation` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: returning an `Err(_)` with the `?` operator\n   --> $DIR/try_err.rs:102:23\n@@ -48,7 +48,7 @@ LL |             Err(_) => Err(ret_one!())?,\n LL |     try_validation_in_macro!(Ok::<_, i32>(5));\n    |     ------------------------------------------ in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `try_validation_in_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: returning an `Err(_)` with the `?` operator\n   --> $DIR/try_err.rs:141:9"}, {"sha": "75017cab05776f2a98a9f0931f4803542b02d2dd", "filename": "tests/ui/unit_cmp.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Funit_cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Funit_cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_cmp.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -34,7 +34,7 @@ LL | |         }\n LL | |     );\n    | |______^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `debug_assert_eq` of unit values detected. This will always succeed\n   --> $DIR/unit_cmp.rs:32:5\n@@ -48,7 +48,7 @@ LL | |         }\n LL | |     );\n    | |______^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert_ne` of unit values detected. This will always fail\n   --> $DIR/unit_cmp.rs:41:5\n@@ -62,7 +62,7 @@ LL | |         }\n LL | |     );\n    | |______^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert_ne` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `debug_assert_ne` of unit values detected. This will always fail\n   --> $DIR/unit_cmp.rs:49:5\n@@ -76,7 +76,7 @@ LL | |         }\n LL | |     );\n    | |______^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::assert_ne` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "18c4276c6ddfd7c62578a9e535b01b70b8c8a37a", "filename": "tests/ui/unsafe_derive_deserialize.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Funsafe_derive_deserialize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Funsafe_derive_deserialize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe_derive_deserialize.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -6,7 +6,7 @@ LL | #[derive(Deserialize)]\n    |\n    = note: `-D clippy::unsafe-derive-deserialize` implied by `-D warnings`\n    = help: consider implementing `serde::Deserialize` manually. See https://serde.rs/impl-deserialize.html\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are deriving `serde::Deserialize` on a type that has methods using `unsafe`\n   --> $DIR/unsafe_derive_deserialize.rs:16:10\n@@ -15,7 +15,7 @@ LL | #[derive(Deserialize)]\n    |          ^^^^^^^^^^^\n    |\n    = help: consider implementing `serde::Deserialize` manually. See https://serde.rs/impl-deserialize.html\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are deriving `serde::Deserialize` on a type that has methods using `unsafe`\n   --> $DIR/unsafe_derive_deserialize.rs:22:10\n@@ -24,7 +24,7 @@ LL | #[derive(Deserialize)]\n    |          ^^^^^^^^^^^\n    |\n    = help: consider implementing `serde::Deserialize` manually. See https://serde.rs/impl-deserialize.html\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are deriving `serde::Deserialize` on a type that has methods using `unsafe`\n   --> $DIR/unsafe_derive_deserialize.rs:30:10\n@@ -33,7 +33,7 @@ LL | #[derive(Deserialize)]\n    |          ^^^^^^^^^^^\n    |\n    = help: consider implementing `serde::Deserialize` manually. See https://serde.rs/impl-deserialize.html\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "a0c0be7a9d154277f849edca0b5563f8b0aa116d", "filename": "tests/ui/unseparated_prefix_literals.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Funseparated_prefix_literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4698b366c4e213b6a97339fcfc997f686ccba390/tests%2Fui%2Funseparated_prefix_literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funseparated_prefix_literals.stderr?ref=4698b366c4e213b6a97339fcfc997f686ccba390", "patch": "@@ -51,7 +51,7 @@ LL |         42usize\n LL |     let _ = lit_from_macro!();\n    |             ----------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `lit_from_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: integer type suffix should be separated by an underscore\n   --> $DIR/unseparated_prefix_literals.rs:40:16"}]}