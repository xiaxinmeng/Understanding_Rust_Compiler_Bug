{"sha": "12397ab48ba9e14fbcc1f65954682f764f36e31b", "node_id": "C_kwDOAAsO6NoAKDEyMzk3YWI0OGJhOWUxNGZiY2MxZjY1OTU0NjgyZjc2NGYzNmUzMWI", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-01-28T10:57:29Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-02-12T08:24:43Z"}, "message": "Report the selection error when possible", "tree": {"sha": "75fccab7cd99caba23a49d66760d50765d0ce79d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75fccab7cd99caba23a49d66760d50765d0ce79d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12397ab48ba9e14fbcc1f65954682f764f36e31b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3RQPHNISvvEnSKtjbQF6ltjmwvkFAmIHbssACgkQbQF6ltjm\nwvnJ8w/+JzO23zwUzZ9UQEZluTA1fTN3IAws4XGV5ocSiQmE7G0CGUWV2shDlwQL\nisTH5DmRKWVKCayAM22eZMVo3Gnin4kVLUnRVUptpfUQ3xUKrO+uKlAZRQtvp4fI\nx/Yxk9tfCZdPb/wC4VwPPQP4liP+2pSO23zHgcgY9MPrTIJsNwIBekzi8ubNzcYS\n8l2zHMlm4MqRs7+0hk3PO79OioGpvhi/m1JQ3d8BlmVd4qpbDdO0GebUXryCgZ5H\ndbyA6b3UxsgbYbmXJfxsNod+bHrIQjz+8dDzAUjB9nX2WjCsyyzSxbzZ+usL/qSq\nIBS5NBkT1FqamKVUsZX324h2NDWxoXXofd5jUOpew36prUtUVivgfroK5whiWCmI\n88rbfFqQXJvMIN9xoS9NR0rmFkfH71A4bVfYoKD+AOGDIyayH9KtcM4tFGS3bSbC\nOhsXCe1fx8RTN/76IX152eJKUXP/ooh7AMB4QrjDwEQMa1PQ8brp7vExFUmHM8Je\nR+qOSMxSav6NR4IdHNcBxZsbNabUspTOPpc2GEX2y4V+xFnWpM3sJm74HSlqdkeY\nr1YcbdLfKUQVXLqdyexMl2dSp8ek6sE7YtgVWqakaiCwUpsxRQiJMQzxNy/BAEQP\nsiUDX0GMIGKti0G7J0FwPGRdI56rM/wjlZSQ3b4IjYCzXUF1+SA=\n=MT5j\n-----END PGP SIGNATURE-----", "payload": "tree 75fccab7cd99caba23a49d66760d50765d0ce79d\nparent cccf4b2fc3199f9647f8a4602964e0021d90eeea\nauthor Deadbeef <ent3rm4n@gmail.com> 1643367449 +1100\ncommitter Deadbeef <ent3rm4n@gmail.com> 1644654283 +1100\n\nReport the selection error when possible\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12397ab48ba9e14fbcc1f65954682f764f36e31b", "html_url": "https://github.com/rust-lang/rust/commit/12397ab48ba9e14fbcc1f65954682f764f36e31b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12397ab48ba9e14fbcc1f65954682f764f36e31b/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cccf4b2fc3199f9647f8a4602964e0021d90eeea", "url": "https://api.github.com/repos/rust-lang/rust/commits/cccf4b2fc3199f9647f8a4602964e0021d90eeea", "html_url": "https://github.com/rust-lang/rust/commit/cccf4b2fc3199f9647f8a4602964e0021d90eeea"}], "stats": {"total": 144, "additions": 107, "deletions": 37}, "files": [{"sha": "095c8f84f41adb28eb8e1c3e97f7651fb1d19f1f", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 36, "deletions": 15, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/12397ab48ba9e14fbcc1f65954682f764f36e31b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12397ab48ba9e14fbcc1f65954682f764f36e31b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=12397ab48ba9e14fbcc1f65954682f764f36e31b", "patch": "@@ -14,6 +14,7 @@ use rustc_middle::ty::{self, adjustment::PointerCast, Instance, InstanceDef, Ty,\n use rustc_middle::ty::{Binder, TraitPredicate, TraitRef};\n use rustc_mir_dataflow::{self, Analysis};\n use rustc_span::{sym, Span, Symbol};\n+use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n use rustc_trait_selection::traits::SelectionContext;\n \n use std::mem;\n@@ -808,15 +809,13 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                     }\n \n                     let trait_ref = TraitRef::from_method(tcx, trait_id, substs);\n-                    let obligation = Obligation::new(\n-                        ObligationCause::dummy(),\n-                        param_env,\n-                        Binder::dummy(TraitPredicate {\n-                            trait_ref,\n-                            constness: ty::BoundConstness::NotConst,\n-                            polarity: ty::ImplPolarity::Positive,\n-                        }),\n-                    );\n+                    let poly_trait_pred = Binder::dummy(TraitPredicate {\n+                        trait_ref,\n+                        constness: ty::BoundConstness::ConstIfConst,\n+                        polarity: ty::ImplPolarity::Positive,\n+                    });\n+                    let obligation =\n+                        Obligation::new(ObligationCause::dummy(), param_env, poly_trait_pred);\n \n                     let implsrc = tcx.infer_ctxt().enter(|infcx| {\n                         let mut selcx = SelectionContext::new(&infcx);\n@@ -860,15 +859,37 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                             // #[default_method_body_is_const], and the callee is in the same\n                             // trait.\n                             let callee_trait = tcx.trait_of_item(callee);\n-                            if callee_trait.is_some() {\n-                                if tcx.has_attr(caller, sym::default_method_body_is_const) {\n-                                    if tcx.trait_of_item(caller) == callee_trait {\n-                                        nonconst_call_permission = true;\n-                                    }\n-                                }\n+                            if callee_trait.is_some()\n+                                && tcx.has_attr(caller, sym::default_method_body_is_const)\n+                                && callee_trait == tcx.trait_of_item(caller)\n+                                // Can only call methods when it's `<Self as TheTrait>::f`.\n+                                && tcx.types.self_param == substs.type_at(0)\n+                            {\n+                                nonconst_call_permission = true;\n                             }\n \n                             if !nonconst_call_permission {\n+                                let obligation = Obligation::new(\n+                                    ObligationCause::dummy_with_span(*fn_span),\n+                                    param_env,\n+                                    tcx.mk_predicate(\n+                                        poly_trait_pred.map_bound(ty::PredicateKind::Trait),\n+                                    ),\n+                                );\n+\n+                                // improve diagnostics by showing what failed. Our requirements are stricter this time\n+                                // as we are going to error again anyways.\n+                                tcx.infer_ctxt().enter(|infcx| {\n+                                    if let Err(e) = implsrc {\n+                                        infcx.report_selection_error(\n+                                            obligation.clone(),\n+                                            &obligation,\n+                                            &e,\n+                                            false,\n+                                        );\n+                                    }\n+                                });\n+\n                                 self.check_op(ops::FnCallNonConst {\n                                     caller,\n                                     callee,"}, {"sha": "24b9235bb9a76fe28359c1bbaa9604b367e53a44", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-const-trait-method-fail.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12397ab48ba9e14fbcc1f65954682f764f36e31b/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12397ab48ba9e14fbcc1f65954682f764f36e31b/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-fail.rs?ref=12397ab48ba9e14fbcc1f65954682f764f36e31b", "patch": "@@ -22,7 +22,8 @@ pub const fn add_i32(a: i32, b: i32) -> i32 {\n \n pub const fn add_u32(a: u32, b: u32) -> u32 {\n     a.plus(b)\n-    //~^ ERROR cannot call non-const fn\n+    //~^ ERROR the trait bound\n+    //~| ERROR cannot call non-const fn\n }\n \n fn main() {}"}, {"sha": "ee30d7a88405ad5ec9da8d55c45f65e19145037c", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-const-trait-method-fail.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12397ab48ba9e14fbcc1f65954682f764f36e31b/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12397ab48ba9e14fbcc1f65954682f764f36e31b/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-fail.stderr?ref=12397ab48ba9e14fbcc1f65954682f764f36e31b", "patch": "@@ -1,3 +1,9 @@\n+error[E0277]: the trait bound `u32: ~const Plus` is not satisfied\n+  --> $DIR/call-const-trait-method-fail.rs:24:7\n+   |\n+LL |     a.plus(b)\n+   |       ^^^^^^^ the trait `~const Plus` is not implemented for `u32`\n+\n error[E0015]: cannot call non-const fn `<u32 as Plus>::plus` in constant functions\n   --> $DIR/call-const-trait-method-fail.rs:24:7\n    |\n@@ -6,6 +12,7 @@ LL |     a.plus(b)\n    |\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0015`.\n+Some errors have detailed explanations: E0015, E0277.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "e81e0d1e571c32283e6ad127683f2c8fb97d363c", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-fail.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12397ab48ba9e14fbcc1f65954682f764f36e31b/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12397ab48ba9e14fbcc1f65954682f764f36e31b/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.rs?ref=12397ab48ba9e14fbcc1f65954682f764f36e31b", "patch": "@@ -3,7 +3,8 @@\n \n pub const fn equals_self<T: PartialEq>(t: &T) -> bool {\n     *t == *t\n-    //~^ ERROR cannot call non-const operator\n+    //~^ ERROR can't compare\n+    //~| ERROR cannot call non-const\n }\n \n fn main() {}"}, {"sha": "2c9ee48ef6de248475f8ee3e4fdfc939dad6c851", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-fail.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12397ab48ba9e14fbcc1f65954682f764f36e31b/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12397ab48ba9e14fbcc1f65954682f764f36e31b/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr?ref=12397ab48ba9e14fbcc1f65954682f764f36e31b", "patch": "@@ -1,3 +1,9 @@\n+error[E0277]: can't compare `T` with `T` in const contexts\n+  --> $DIR/call-generic-method-fail.rs:5:5\n+   |\n+LL |     *t == *t\n+   |     ^^^^^^^^ no implementation for `T == T`\n+\n error[E0015]: cannot call non-const operator in constant functions\n   --> $DIR/call-generic-method-fail.rs:5:5\n    |\n@@ -10,6 +16,7 @@ help: consider further restricting this bound\n LL | pub const fn equals_self<T: PartialEq + ~const std::cmp::PartialEq>(t: &T) -> bool {\n    |                                       ++++++++++++++++++++++++++++\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0015`.\n+Some errors have detailed explanations: E0015, E0277.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "3e87787a09195aedbdbc0fe420f33aad50a95663", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-default-method-bodies.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12397ab48ba9e14fbcc1f65954682f764f36e31b/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12397ab48ba9e14fbcc1f65954682f764f36e31b/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.rs?ref=12397ab48ba9e14fbcc1f65954682f764f36e31b", "patch": "@@ -23,7 +23,8 @@ impl const ConstDefaultFn for ConstImpl {\n \n const fn test() {\n     NonConstImpl.a();\n-    //~^ ERROR cannot call non-const fn\n+    //~^ ERROR the trait bound\n+    //~| ERROR cannot call non-const fn\n     ConstImpl.a();\n }\n "}, {"sha": "060d1ea53e3fc02957f7a8789e9e0a0439364932", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-default-method-bodies.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12397ab48ba9e14fbcc1f65954682f764f36e31b/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12397ab48ba9e14fbcc1f65954682f764f36e31b/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-default-method-bodies.stderr?ref=12397ab48ba9e14fbcc1f65954682f764f36e31b", "patch": "@@ -1,3 +1,9 @@\n+error[E0277]: the trait bound `NonConstImpl: ~const ConstDefaultFn` is not satisfied\n+  --> $DIR/const-default-method-bodies.rs:25:18\n+   |\n+LL |     NonConstImpl.a();\n+   |                  ^^^ the trait `~const ConstDefaultFn` is not implemented for `NonConstImpl`\n+\n error[E0015]: cannot call non-const fn `<NonConstImpl as ConstDefaultFn>::a` in constant functions\n   --> $DIR/const-default-method-bodies.rs:25:18\n    |\n@@ -6,6 +12,7 @@ LL |     NonConstImpl.a();\n    |\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0015`.\n+Some errors have detailed explanations: E0015, E0277.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "b145cd3db676f7c8092539447160484879aa3673", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate.gated.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12397ab48ba9e14fbcc1f65954682f764f36e31b/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12397ab48ba9e14fbcc1f65954682f764f36e31b/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.gated.stderr?ref=12397ab48ba9e14fbcc1f65954682f764f36e31b", "patch": "@@ -1,3 +1,9 @@\n+error[E0277]: the trait bound `cross_crate::NonConst: ~const cross_crate::MyTrait` is not satisfied\n+  --> $DIR/cross-crate.rs:15:14\n+   |\n+LL |     NonConst.func();\n+   |              ^^^^^^ the trait `~const cross_crate::MyTrait` is not implemented for `cross_crate::NonConst`\n+\n error[E0015]: cannot call non-const fn `<cross_crate::NonConst as cross_crate::MyTrait>::func` in constant functions\n   --> $DIR/cross-crate.rs:15:14\n    |\n@@ -6,6 +12,7 @@ LL |     NonConst.func();\n    |\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0015`.\n+Some errors have detailed explanations: E0015, E0277.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "fa049ab86ff49c0b1016760e0e3618e7cf4b5463", "filename": "src/test/ui/rfc-2632-const-trait-impl/cross-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12397ab48ba9e14fbcc1f65954682f764f36e31b/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12397ab48ba9e14fbcc1f65954682f764f36e31b/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcross-crate.rs?ref=12397ab48ba9e14fbcc1f65954682f764f36e31b", "patch": "@@ -12,8 +12,8 @@ fn non_const_context() {\n }\n \n const fn const_context() {\n-    NonConst.func();\n-    //~^ ERROR: cannot call non-const fn\n+    NonConst.func(); //~ ERROR: cannot call non-const fn\n+    //[gated]~^ ERROR: the trait bound\n     Const.func();\n     //[stock]~^ ERROR: cannot call non-const fn\n }"}, {"sha": "4d087b5180be4c29cf259a646ecf83181eae0eaf", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-same-trait-ck.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12397ab48ba9e14fbcc1f65954682f764f36e31b/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12397ab48ba9e14fbcc1f65954682f764f36e31b/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.rs?ref=12397ab48ba9e14fbcc1f65954682f764f36e31b", "patch": "@@ -8,7 +8,8 @@ pub trait Tr {\n     #[default_method_body_is_const]\n     fn b(&self) {\n         ().a()\n-        //~^ ERROR calls in constant functions are limited\n+        //~^ ERROR the trait bound\n+        //~| ERROR cannot call\n     }\n }\n "}, {"sha": "338563287a289928a109ba64202076022c9e4548", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-same-trait-ck.stderr", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/12397ab48ba9e14fbcc1f65954682f764f36e31b/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12397ab48ba9e14fbcc1f65954682f764f36e31b/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr?ref=12397ab48ba9e14fbcc1f65954682f764f36e31b", "patch": "@@ -1,9 +1,18 @@\n-error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/default-method-body-is-const-same-trait-ck.rs:10:9\n+error[E0277]: the trait bound `(): ~const Tr` is not satisfied\n+  --> $DIR/default-method-body-is-const-same-trait-ck.rs:10:12\n    |\n LL |         ().a()\n-   |         ^^^^^^\n+   |            ^^^ the trait `~const Tr` is not implemented for `()`\n \n-error: aborting due to previous error\n+error[E0015]: cannot call non-const fn `<() as Tr>::a` in constant functions\n+  --> $DIR/default-method-body-is-const-same-trait-ck.rs:10:12\n+   |\n+LL |         ().a()\n+   |            ^^^\n+   |\n+   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0015`.\n+Some errors have detailed explanations: E0015, E0277.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "cbe3fe0ce5f3f461be5606e7687de5ef0ce92459", "filename": "src/test/ui/rfc-2632-const-trait-impl/issue-88155.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12397ab48ba9e14fbcc1f65954682f764f36e31b/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-88155.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12397ab48ba9e14fbcc1f65954682f764f36e31b/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-88155.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-88155.rs?ref=12397ab48ba9e14fbcc1f65954682f764f36e31b", "patch": "@@ -7,7 +7,8 @@ pub trait A {\n \n pub const fn foo<T: A>() -> bool {\n     T::assoc()\n-    //~^ ERROR cannot call non-const fn\n+    //~^ ERROR the trait bound\n+    //~| ERROR cannot call non-const fn\n }\n \n fn main() {}"}, {"sha": "eed15ab98beabc521c7b09c1dd4b1a5f9e10f613", "filename": "src/test/ui/rfc-2632-const-trait-impl/issue-88155.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12397ab48ba9e14fbcc1f65954682f764f36e31b/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-88155.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12397ab48ba9e14fbcc1f65954682f764f36e31b/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-88155.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-88155.stderr?ref=12397ab48ba9e14fbcc1f65954682f764f36e31b", "patch": "@@ -1,3 +1,9 @@\n+error[E0277]: the trait bound `T: ~const A` is not satisfied\n+  --> $DIR/issue-88155.rs:9:5\n+   |\n+LL |     T::assoc()\n+   |     ^^^^^^^^^^ the trait `~const A` is not implemented for `T`\n+\n error[E0015]: cannot call non-const fn `<T as A>::assoc` in constant functions\n   --> $DIR/issue-88155.rs:9:5\n    |\n@@ -6,6 +12,7 @@ LL |     T::assoc()\n    |\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0015`.\n+Some errors have detailed explanations: E0015, E0277.\n+For more information about an error, try `rustc --explain E0015`."}]}