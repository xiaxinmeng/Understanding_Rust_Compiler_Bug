{"sha": "0eefa5f9d37253e00bd373b7c45857fd9c4e2836", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlZWZhNWY5ZDM3MjUzZTAwYmQzNzNiN2M0NTg1N2ZkOWM0ZTI4MzY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-14T22:39:23Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-15T16:46:37Z"}, "message": "rustc: Parse module attributes\n\nIssue #487", "tree": {"sha": "377b3ec5ddb2d06064fe091af5a66536ec3b3a0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/377b3ec5ddb2d06064fe091af5a66536ec3b3a0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0eefa5f9d37253e00bd373b7c45857fd9c4e2836", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0eefa5f9d37253e00bd373b7c45857fd9c4e2836", "html_url": "https://github.com/rust-lang/rust/commit/0eefa5f9d37253e00bd373b7c45857fd9c4e2836", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0eefa5f9d37253e00bd373b7c45857fd9c4e2836/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31116dcdd52b38d5e695155188035a11bc0c4a26", "url": "https://api.github.com/repos/rust-lang/rust/commits/31116dcdd52b38d5e695155188035a11bc0c4a26", "html_url": "https://github.com/rust-lang/rust/commit/31116dcdd52b38d5e695155188035a11bc0c4a26"}], "stats": {"total": 35, "additions": 29, "deletions": 6}, "files": [{"sha": "4d6b29db56158ae915940a132be081a013098384", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0eefa5f9d37253e00bd373b7c45857fd9c4e2836/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eefa5f9d37253e00bd373b7c45857fd9c4e2836/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=0eefa5f9d37253e00bd373b7c45857fd9c4e2836", "patch": "@@ -1595,7 +1595,7 @@ fn parse_source_stmt(&parser p) -> @ast::stmt {\n         auto hi = p.get_span();\n         ret @spanned(lo, decl.span.hi, ast::stmt_decl(decl, p.get_ann()));\n     } else {\n-        alt (parse_item(p)) {\n+        alt (parse_item(p, [])) {\n             case (got_item(?i)) {\n                 auto hi = i.span.hi;\n                 auto decl = @spanned(lo, hi, ast::decl_item(i));\n@@ -1886,7 +1886,8 @@ fn parse_mod_items(&parser p, token::token term) -> ast::_mod {\n     auto view_items = parse_view(p);\n     let vec[@ast::item] items = [];\n     while (p.peek() != term) {\n-        alt (parse_item(p)) {\n+        auto attrs = parse_attributes(p);\n+        alt (parse_item(p, attrs)) {\n             case (got_item(?i)) {\n                 vec::push(items, i);\n             }\n@@ -1911,14 +1912,14 @@ fn parse_item_const(&parser p) -> @ast::item {\n     ret @spanned(lo, hi, item);\n }\n \n-fn parse_item_mod(&parser p) -> @ast::item {\n+fn parse_item_mod(&parser p, vec[ast::meta_item] attrs) -> @ast::item {\n     auto lo = p.get_last_lo_pos();\n     auto id = parse_ident(p);\n     expect(p, token::LBRACE);\n     auto m = parse_mod_items(p, token::RBRACE);\n     auto hi = p.get_hi_pos();\n     expect(p, token::RBRACE);\n-    auto item = ast::item_mod(id, m, [], p.next_def_id());\n+    auto item = ast::item_mod(id, m, attrs, p.next_def_id());\n     ret @spanned(lo, hi, item);\n }\n \n@@ -2124,7 +2125,8 @@ tag parsed_item {\n     fn_no_item;\n }\n \n-fn parse_item(&parser p) -> parsed_item {\n+fn parse_item(&parser p, vec[ast::meta_item] attrs) -> parsed_item {\n+\n     if (eat_word(p, \"const\")) {\n         ret got_item(parse_item_const(p));\n     } else if (eat_word(p, \"fn\")) {\n@@ -2137,7 +2139,7 @@ fn parse_item(&parser p) -> parsed_item {\n         ret got_item(parse_item_fn_or_iter(p, ast::impure_fn,\n                                            ast::proto_iter));\n     } else if (eat_word(p, \"mod\")) {\n-        ret got_item(parse_item_mod(p));\n+        ret got_item(parse_item_mod(p, attrs));\n     } else if (eat_word(p, \"native\")) {\n         ret got_item(parse_item_native_mod(p));\n     }\n@@ -2154,6 +2156,19 @@ fn parse_item(&parser p) -> parsed_item {\n     }\n }\n \n+fn parse_attributes(&parser p) -> vec[ast::meta_item] {\n+    let vec[ast::meta_item] attrs = [];\n+\n+    while (p.peek() == token::POUND) {\n+        p.bump();\n+        expect(p, token::LBRACKET);\n+        attrs += [*parse_meta_item(p)];\n+        expect(p, token::RBRACKET);\n+    }\n+\n+    ret attrs;\n+}\n+\n fn parse_meta_item(&parser p) -> @ast::meta_item {\n     auto lo = p.get_lo_pos();\n     auto ident = parse_ident(p);"}, {"sha": "9e9086290bafb34c7088c725169e7bde0bb2455e", "filename": "src/test/run-pass/item-attributes.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0eefa5f9d37253e00bd373b7c45857fd9c4e2836/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eefa5f9d37253e00bd373b7c45857fd9c4e2836/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=0eefa5f9d37253e00bd373b7c45857fd9c4e2836", "patch": "@@ -0,0 +1,8 @@\n+// xfail-stage0\n+\n+#[attr = \"val\"]\n+mod mod1 {\n+}\n+\n+fn main() {\n+}\n\\ No newline at end of file"}]}