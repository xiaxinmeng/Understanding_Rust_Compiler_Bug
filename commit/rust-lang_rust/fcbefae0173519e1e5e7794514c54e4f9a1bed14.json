{"sha": "fcbefae0173519e1e5e7794514c54e4f9a1bed14", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjYmVmYWUwMTczNTE5ZTFlNWU3Nzk0NTE0YzU0ZTRmOWExYmVkMTQ=", "commit": {"author": {"name": "Tshepang Lekhonkhobe", "email": "tshepang@gmail.com", "date": "2020-04-18T16:39:40Z"}, "committer": {"name": "Tshepang Lekhonkhobe", "email": "tshepang@gmail.com", "date": "2020-04-18T20:32:23Z"}, "message": "remove build warnings\n\nCode blocks that are not annotated are assumed to be Rust", "tree": {"sha": "7a114252b66fc8146caec7f834b9516d0fe604b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a114252b66fc8146caec7f834b9516d0fe604b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcbefae0173519e1e5e7794514c54e4f9a1bed14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcbefae0173519e1e5e7794514c54e4f9a1bed14", "html_url": "https://github.com/rust-lang/rust/commit/fcbefae0173519e1e5e7794514c54e4f9a1bed14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcbefae0173519e1e5e7794514c54e4f9a1bed14/comments", "author": {"login": "tshepang", "id": 588486, "node_id": "MDQ6VXNlcjU4ODQ4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/588486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tshepang", "html_url": "https://github.com/tshepang", "followers_url": "https://api.github.com/users/tshepang/followers", "following_url": "https://api.github.com/users/tshepang/following{/other_user}", "gists_url": "https://api.github.com/users/tshepang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tshepang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tshepang/subscriptions", "organizations_url": "https://api.github.com/users/tshepang/orgs", "repos_url": "https://api.github.com/users/tshepang/repos", "events_url": "https://api.github.com/users/tshepang/events{/privacy}", "received_events_url": "https://api.github.com/users/tshepang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tshepang", "id": 588486, "node_id": "MDQ6VXNlcjU4ODQ4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/588486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tshepang", "html_url": "https://github.com/tshepang", "followers_url": "https://api.github.com/users/tshepang/followers", "following_url": "https://api.github.com/users/tshepang/following{/other_user}", "gists_url": "https://api.github.com/users/tshepang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tshepang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tshepang/subscriptions", "organizations_url": "https://api.github.com/users/tshepang/orgs", "repos_url": "https://api.github.com/users/tshepang/repos", "events_url": "https://api.github.com/users/tshepang/events{/privacy}", "received_events_url": "https://api.github.com/users/tshepang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52fa23add6fb0776b32cc591ac928618391bdf41", "url": "https://api.github.com/repos/rust-lang/rust/commits/52fa23add6fb0776b32cc591ac928618391bdf41", "html_url": "https://github.com/rust-lang/rust/commit/52fa23add6fb0776b32cc591ac928618391bdf41"}], "stats": {"total": 32, "additions": 17, "deletions": 15}, "files": [{"sha": "e4ca54ffd5e49644d6bd780d082fcddd4aa1dd7e", "filename": "src/librustc_mir/borrow_check/diagnostics/region_name.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fcbefae0173519e1e5e7794514c54e4f9a1bed14/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbefae0173519e1e5e7794514c54e4f9a1bed14/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs?ref=fcbefae0173519e1e5e7794514c54e4f9a1bed14", "patch": "@@ -148,7 +148,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     ///\n     /// This function would create a label like this:\n     ///\n-    /// ```\n+    /// ```text\n     ///  | fn foo(x: &u32) { .. }\n     ///           ------- fully elaborated type of `x` is `&'1 u32`\n     /// ```\n@@ -300,7 +300,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     /// elaborated type, returning something like `'1`. Result looks\n     /// like:\n     ///\n-    /// ```\n+    /// ```text\n     ///  | fn foo(x: &u32) { .. }\n     ///           ------- fully elaborated type of `x` is `&'1 u32`\n     /// ```\n@@ -347,7 +347,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     /// that has no type annotation.\n     /// For example, we might produce an annotation like this:\n     ///\n-    /// ```\n+    /// ```text\n     ///  |     foo(|a, b| b)\n     ///  |          -  -\n     ///  |          |  |\n@@ -396,7 +396,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     /// that contains the anonymous reference we want to give a name\n     /// to. For example, we might produce an annotation like this:\n     ///\n-    /// ```\n+    /// ```text\n     ///  | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item = &T>> {\n     ///  |                - let's call the lifetime of this reference `'1`\n     /// ```\n@@ -600,7 +600,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n     /// fully elaborated type, returning something like `'1`. Result\n     /// looks like:\n     ///\n-    /// ```\n+    /// ```text\n     ///  | let x = Some(&22);\n     ///        - fully elaborated type of `x` is `Option<&'1 u32>`\n     /// ```"}, {"sha": "da6d863f2399aecf0af023f057c2d41ed6fd948e", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcbefae0173519e1e5e7794514c54e4f9a1bed14/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbefae0173519e1e5e7794514c54e4f9a1bed14/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=fcbefae0173519e1e5e7794514c54e4f9a1bed14", "patch": "@@ -579,11 +579,13 @@ impl<'a> Parser<'a> {\n     /// Keep in mind that given that `outer_op.is_comparison()` holds and comparison ops are left\n     /// associative we can infer that we have:\n     ///\n+    /// ```text\n     ///           outer_op\n     ///           /   \\\n     ///     inner_op   r2\n     ///        /  \\\n     ///      l1    r1\n+    /// ```\n     pub(super) fn check_no_chained_comparison(\n         &mut self,\n         inner_op: &Expr,"}, {"sha": "f4729e306f806a21e986451cd22301fa3395b607", "filename": "src/librustc_parse/parser/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcbefae0173519e1e5e7794514c54e4f9a1bed14/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbefae0173519e1e5e7794514c54e4f9a1bed14/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs?ref=fcbefae0173519e1e5e7794514c54e4f9a1bed14", "patch": "@@ -8,7 +8,7 @@ use rustc_span::symbol::{kw, sym};\n impl<'a> Parser<'a> {\n     /// Parses bounds of a lifetime parameter `BOUND + BOUND + BOUND`, possibly with trailing `+`.\n     ///\n-    /// ```\n+    /// ```text\n     /// BOUND = LT_BOUND (e.g., `'a`)\n     /// ```\n     fn parse_lt_param_bounds(&mut self) -> GenericBounds {"}, {"sha": "ae8a20f209b9929493ca4b0b44a1500acda66f5d", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcbefae0173519e1e5e7794514c54e4f9a1bed14/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbefae0173519e1e5e7794514c54e4f9a1bed14/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=fcbefae0173519e1e5e7794514c54e4f9a1bed14", "patch": "@@ -743,7 +743,7 @@ impl<'a> Parser<'a> {\n \n     /// Parses a `UseTree`.\n     ///\n-    /// ```\n+    /// ```text\n     /// USE_TREE = [`::`] `*` |\n     ///            [`::`] `{` USE_TREE_LIST `}` |\n     ///            PATH `::` `*` |\n@@ -792,7 +792,7 @@ impl<'a> Parser<'a> {\n \n     /// Parses a `UseTreeKind::Nested(list)`.\n     ///\n-    /// ```\n+    /// ```text\n     /// USE_TREE_LIST = \u00d8 | (USE_TREE `,`)* USE_TREE [`,`]\n     /// ```\n     fn parse_use_tree_list(&mut self) -> PResult<'a, Vec<(UseTree, ast::NodeId)>> {"}, {"sha": "88ec4585b0059d1f03bb77d4a594c5979becf94c", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fcbefae0173519e1e5e7794514c54e4f9a1bed14/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbefae0173519e1e5e7794514c54e4f9a1bed14/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=fcbefae0173519e1e5e7794514c54e4f9a1bed14", "patch": "@@ -1031,7 +1031,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n \n     /// Suggest a missing `self::` if that resolves to an correct module.\n     ///\n-    /// ```\n+    /// ```text\n     ///    |\n     /// LL | use foo::Bar;\n     ///    |     ^^^ did you mean `self::foo`?\n@@ -1083,7 +1083,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n \n     /// Suggests a missing `super::` if that resolves to an correct module.\n     ///\n-    /// ```\n+    /// ```text\n     ///    |\n     /// LL | use foo::Bar;\n     ///    |     ^^^ did you mean `super::foo`?\n@@ -1103,7 +1103,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n \n     /// Suggests a missing external crate name if that resolves to an correct module.\n     ///\n-    /// ```\n+    /// ```text\n     ///    |\n     /// LL | use foobar::Baz;\n     ///    |     ^^^^^^ did you mean `baz::foobar`?"}, {"sha": "ed69061d618512e342d95ba45d58b12a3c574e04", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcbefae0173519e1e5e7794514c54e4f9a1bed14/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbefae0173519e1e5e7794514c54e4f9a1bed14/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=fcbefae0173519e1e5e7794514c54e4f9a1bed14", "patch": "@@ -1045,7 +1045,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     /// Adds an async-await specific note to the diagnostic when the future does not implement\n     /// an auto trait because of a captured type.\n     ///\n-    /// ```ignore (diagnostic)\n+    /// ```text\n     /// note: future does not implement `Qux` as this value is used across an await\n     ///   --> $DIR/issue-64130-3-other.rs:17:5\n     ///    |\n@@ -1060,7 +1060,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     /// When the diagnostic does not implement `Send` or `Sync` specifically, then the diagnostic\n     /// is \"replaced\" with a different message and a more specific error.\n     ///\n-    /// ```ignore (diagnostic)\n+    /// ```text\n     /// error: future cannot be sent between threads safely\n     ///   --> $DIR/issue-64130-2-send.rs:21:5\n     ///    |"}, {"sha": "895042f3ab1151dbaa65461e880fe6566a71572e", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcbefae0173519e1e5e7794514c54e4f9a1bed14/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcbefae0173519e1e5e7794514c54e4f9a1bed14/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=fcbefae0173519e1e5e7794514c54e4f9a1bed14", "patch": "@@ -1250,7 +1250,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     /// This helper takes a *converted* parameter type (`param_ty`)\n     /// and an *unconverted* list of bounds:\n     ///\n-    /// ```\n+    /// ```text\n     /// fn foo<T: Debug>\n     ///        ^  ^^^^^ `ast_bounds` parameter, in HIR form\n     ///        |\n@@ -2992,7 +2992,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n /// representations). These lists of bounds occur in many places in\n /// Rust's syntax:\n ///\n-/// ```\n+/// ```text\n /// trait Foo: Bar + Baz { }\n ///            ^^^^^^^^^ supertrait list bounding the `Self` type parameter\n ///"}]}