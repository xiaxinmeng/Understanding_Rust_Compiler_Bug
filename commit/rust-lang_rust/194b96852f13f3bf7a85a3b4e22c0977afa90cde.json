{"sha": "194b96852f13f3bf7a85a3b4e22c0977afa90cde", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NGI5Njg1MmYxM2YzYmY3YTg1YTNiNGUyMmMwOTc3YWZhOTBjZGU=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-11-11T19:58:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-11T19:58:56Z"}, "message": "Rollup merge of #78354 - 12101111:rustbuild_profiler, r=Mark-Simulacrum\n\nSupport enable/disable sanitizers/profiler per target\n\nThis PR add options under `[target.*]` of `config.toml` which can enable or disable sanitizers/profiler runtime for corresponding target.\nIf these options are empty, the global options under `[build]` will take effect.\n\nFix #78329", "tree": {"sha": "aac73db9a0a2ec71c83ad7dd4ff41e340c72ae63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aac73db9a0a2ec71c83ad7dd4ff41e340c72ae63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/194b96852f13f3bf7a85a3b4e22c0977afa90cde", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfrEKCCRBK7hj4Ov3rIwAAdHIIABJDtLvXzDGKJWfvdroPd6xO\nXJchW8Igxtjx2d4T/9LSI1OMf+prrqIMNIl6habfGroQ8TEW3bxBEc389M248hb7\nSIj699z3nAakdvtEqh5USUsQdfTBg+kJ/SfQKshM5K6mLSFC6f2Id8hP5MvPiYsi\nLgMjh5LX2rrroq3anmSssMeU2SL+xD/RrjX19Rqe8y6y7eEzEaME0KyeiJiOILv3\nU13RDudEb1dEo4y4BomsucLjnhvIaqAnkUJLkgfEVJo4VE7Zx485gFXeyJrDWAEE\nE1k35CHQMrbsfFXFNflMeFaQAtGCv4OC9f9+w0jIDcKdYcSA6j8Po3ATqnMLNJ4=\n=JbPb\n-----END PGP SIGNATURE-----\n", "payload": "tree aac73db9a0a2ec71c83ad7dd4ff41e340c72ae63\nparent 62f0a78056a8b994f6bbe57c8349f1a0704713c3\nparent b989d46b48471c70a6d5fb1c1aff4feadaeef922\nauthor Jonas Schievink <jonasschievink@gmail.com> 1605124736 +0100\ncommitter GitHub <noreply@github.com> 1605124736 +0100\n\nRollup merge of #78354 - 12101111:rustbuild_profiler, r=Mark-Simulacrum\n\nSupport enable/disable sanitizers/profiler per target\n\nThis PR add options under `[target.*]` of `config.toml` which can enable or disable sanitizers/profiler runtime for corresponding target.\nIf these options are empty, the global options under `[build]` will take effect.\n\nFix #78329\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/194b96852f13f3bf7a85a3b4e22c0977afa90cde", "html_url": "https://github.com/rust-lang/rust/commit/194b96852f13f3bf7a85a3b4e22c0977afa90cde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/194b96852f13f3bf7a85a3b4e22c0977afa90cde/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62f0a78056a8b994f6bbe57c8349f1a0704713c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/62f0a78056a8b994f6bbe57c8349f1a0704713c3", "html_url": "https://github.com/rust-lang/rust/commit/62f0a78056a8b994f6bbe57c8349f1a0704713c3"}, {"sha": "b989d46b48471c70a6d5fb1c1aff4feadaeef922", "url": "https://api.github.com/repos/rust-lang/rust/commits/b989d46b48471c70a6d5fb1c1aff4feadaeef922", "html_url": "https://github.com/rust-lang/rust/commit/b989d46b48471c70a6d5fb1c1aff4feadaeef922"}], "stats": {"total": 72, "additions": 55, "deletions": 17}, "files": [{"sha": "c9e183887504c20605b749917fd0c50c27bb68b1", "filename": "config.toml.example", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/194b96852f13f3bf7a85a3b4e22c0977afa90cde/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/194b96852f13f3bf7a85a3b4e22c0977afa90cde/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=194b96852f13f3bf7a85a3b4e22c0977afa90cde", "patch": "@@ -586,6 +586,15 @@ changelog-seen = 2\n # build native code.\n #android-ndk = \"/path/to/ndk\"\n \n+# Build the sanitizer runtimes for this target.\n+# This option will override the same option under [build] section.\n+#sanitizers = false\n+\n+# Build the profiler runtime for this target(required when compiling with options that depend\n+# on this runtime, such as `-C profile-generate` or `-Z instrument-coverage`).\n+# This option will override the same option under [build] section.\n+#profiler = false\n+\n # Force static or dynamic linkage of the standard library for this target. If\n # this target is a host for rustc, this will also affect the linkage of the\n # compiler itself. This is useful for building rustc on targets that normally"}, {"sha": "3d724c148422724c2af9d8b39a2e68e79893326c", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/194b96852f13f3bf7a85a3b4e22c0977afa90cde/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194b96852f13f3bf7a85a3b4e22c0977afa90cde/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=194b96852f13f3bf7a85a3b4e22c0977afa90cde", "patch": "@@ -264,7 +264,7 @@ impl<'a> ShouldRun<'a> {\n     /// `all_krates` should probably be removed at some point.\n     pub fn all_krates(mut self, name: &str) -> Self {\n         let mut set = BTreeSet::new();\n-        for krate in self.builder.in_tree_crates(name) {\n+        for krate in self.builder.in_tree_crates(name, None) {\n             let path = krate.local_path(self.builder);\n             set.insert(path);\n         }\n@@ -277,7 +277,7 @@ impl<'a> ShouldRun<'a> {\n     ///\n     /// `make_run` will be called separately for each matching command-line path.\n     pub fn krate(mut self, name: &str) -> Self {\n-        for krate in self.builder.in_tree_crates(name) {\n+        for krate in self.builder.in_tree_crates(name, None) {\n             let path = krate.local_path(self.builder);\n             self.paths.insert(PathSet::one(path));\n         }"}, {"sha": "ecca12108b65961f0340292b7e6415822fe45fb1", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/194b96852f13f3bf7a85a3b4e22c0977afa90cde/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194b96852f13f3bf7a85a3b4e22c0977afa90cde/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=194b96852f13f3bf7a85a3b4e22c0977afa90cde", "patch": "@@ -108,7 +108,7 @@ impl Step for Std {\n             // Explicitly pass -p for all dependencies krates -- this will force cargo\n             // to also check the tests/benches/examples for these crates, rather\n             // than just the leaf crate.\n-            for krate in builder.in_tree_crates(\"test\") {\n+            for krate in builder.in_tree_crates(\"test\", Some(target)) {\n                 cargo.arg(\"-p\").arg(krate.name);\n             }\n \n@@ -172,7 +172,7 @@ impl Step for Rustc {\n         // Explicitly pass -p for all compiler krates -- this will force cargo\n         // to also check the tests/benches/examples for these crates, rather\n         // than just the leaf crate.\n-        for krate in builder.in_tree_crates(\"rustc-main\") {\n+        for krate in builder.in_tree_crates(\"rustc-main\", Some(target)) {\n             cargo.arg(\"-p\").arg(krate.name);\n         }\n "}, {"sha": "cdad1cb4d499dc53446be4b92d7323f972a072a8", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/194b96852f13f3bf7a85a3b4e22c0977afa90cde/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194b96852f13f3bf7a85a3b4e22c0977afa90cde/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=194b96852f13f3bf7a85a3b4e22c0977afa90cde", "patch": "@@ -143,7 +143,7 @@ fn copy_third_party_objects(\n         }\n     }\n \n-    if builder.config.sanitizers && compiler.stage != 0 {\n+    if builder.config.sanitizers_enabled(target) && compiler.stage != 0 {\n         // The sanitizers are only copied in stage1 or above,\n         // to avoid creating dependency on LLVM.\n         target_deps.extend(\n@@ -251,7 +251,7 @@ pub fn std_cargo(builder: &Builder<'_>, target: TargetSelection, stage: u32, car\n             .arg(\"--features\")\n             .arg(features);\n     } else {\n-        let mut features = builder.std_features();\n+        let mut features = builder.std_features(target);\n         features.push_str(compiler_builtins_c_feature);\n \n         cargo"}, {"sha": "c0753d88504aef655b3abc9bc0140507db8800b7", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/194b96852f13f3bf7a85a3b4e22c0977afa90cde/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194b96852f13f3bf7a85a3b4e22c0977afa90cde/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=194b96852f13f3bf7a85a3b4e22c0977afa90cde", "patch": "@@ -279,6 +279,8 @@ pub struct Target {\n     pub ranlib: Option<PathBuf>,\n     pub linker: Option<PathBuf>,\n     pub ndk: Option<PathBuf>,\n+    pub sanitizers: bool,\n+    pub profiler: bool,\n     pub crt_static: Option<bool>,\n     pub musl_root: Option<PathBuf>,\n     pub musl_libdir: Option<PathBuf>,\n@@ -503,6 +505,8 @@ struct TomlTarget {\n     llvm_config: Option<String>,\n     llvm_filecheck: Option<String>,\n     android_ndk: Option<String>,\n+    sanitizers: Option<bool>,\n+    profiler: Option<bool>,\n     crt_static: Option<bool>,\n     musl_root: Option<String>,\n     musl_libdir: Option<String>,\n@@ -890,6 +894,8 @@ impl Config {\n                 target.musl_libdir = cfg.musl_libdir.map(PathBuf::from);\n                 target.wasi_root = cfg.wasi_root.map(PathBuf::from);\n                 target.qemu_rootfs = cfg.qemu_rootfs.map(PathBuf::from);\n+                target.sanitizers = cfg.sanitizers.unwrap_or(build.sanitizers.unwrap_or_default());\n+                target.profiler = cfg.profiler.unwrap_or(build.profiler.unwrap_or_default());\n \n                 config.target_config.insert(TargetSelection::from_user(&triple), target);\n             }\n@@ -999,6 +1005,22 @@ impl Config {\n         self.verbose > 1\n     }\n \n+    pub fn sanitizers_enabled(&self, target: TargetSelection) -> bool {\n+        self.target_config.get(&target).map(|t| t.sanitizers).unwrap_or(self.sanitizers)\n+    }\n+\n+    pub fn any_sanitizers_enabled(&self) -> bool {\n+        self.target_config.values().any(|t| t.sanitizers) || self.sanitizers\n+    }\n+\n+    pub fn profiler_enabled(&self, target: TargetSelection) -> bool {\n+        self.target_config.get(&target).map(|t| t.profiler).unwrap_or(self.profiler)\n+    }\n+\n+    pub fn any_profiler_enabled(&self) -> bool {\n+        self.target_config.values().any(|t| t.profiler) || self.profiler\n+    }\n+\n     pub fn llvm_enabled(&self) -> bool {\n         self.rust_codegen_backends.contains(&INTERNER.intern_str(\"llvm\"))\n     }"}, {"sha": "af7f7eff89418be4ad24d2c265712c0edea1fd32", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/194b96852f13f3bf7a85a3b4e22c0977afa90cde/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194b96852f13f3bf7a85a3b4e22c0977afa90cde/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=194b96852f13f3bf7a85a3b4e22c0977afa90cde", "patch": "@@ -535,8 +535,12 @@ impl Step for Rustc {\n         // Find dependencies for top level crates.\n         let mut compiler_crates = HashSet::new();\n         for root_crate in &[\"rustc_driver\", \"rustc_codegen_llvm\", \"rustc_codegen_ssa\"] {\n-            compiler_crates\n-                .extend(builder.in_tree_crates(root_crate).into_iter().map(|krate| krate.name));\n+            compiler_crates.extend(\n+                builder\n+                    .in_tree_crates(root_crate, Some(target))\n+                    .into_iter()\n+                    .map(|krate| krate.name),\n+            );\n         }\n \n         for krate in &compiler_crates {"}, {"sha": "cd0f484aeaf9e974adb532f01a6bee47aa7567f0", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/194b96852f13f3bf7a85a3b4e22c0977afa90cde/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194b96852f13f3bf7a85a3b4e22c0977afa90cde/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=194b96852f13f3bf7a85a3b4e22c0977afa90cde", "patch": "@@ -541,7 +541,7 @@ impl Build {\n \n     /// Gets the space-separated set of activated features for the standard\n     /// library.\n-    fn std_features(&self) -> String {\n+    fn std_features(&self, target: TargetSelection) -> String {\n         let mut features = \"panic-unwind\".to_string();\n \n         match self.config.llvm_libunwind.unwrap_or_default() {\n@@ -552,7 +552,7 @@ impl Build {\n         if self.config.backtrace {\n             features.push_str(\" backtrace\");\n         }\n-        if self.config.profiler {\n+        if self.config.profiler_enabled(target) {\n             features.push_str(\" profiler\");\n         }\n         features\n@@ -1115,7 +1115,7 @@ impl Build {\n     /// Returns a Vec of all the dependencies of the given root crate,\n     /// including transitive dependencies and the root itself. Only includes\n     /// \"local\" crates (those in the local source tree, not from a registry).\n-    fn in_tree_crates(&self, root: &str) -> Vec<&Crate> {\n+    fn in_tree_crates(&self, root: &str, target: Option<TargetSelection>) -> Vec<&Crate> {\n         let mut ret = Vec::new();\n         let mut list = vec![INTERNER.intern_str(root)];\n         let mut visited = HashSet::new();\n@@ -1136,7 +1136,10 @@ impl Build {\n                 // metadata::build.\n                 if visited.insert(dep)\n                     && dep != \"build_helper\"\n-                    && (dep != \"profiler_builtins\" || self.config.profiler)\n+                    && (dep != \"profiler_builtins\"\n+                        || target\n+                            .map(|t| self.config.profiler_enabled(t))\n+                            .unwrap_or(self.config.any_profiler_enabled()))\n                     && (dep != \"rustc_codegen_llvm\" || self.config.llvm_enabled())\n                 {\n                     list.push(*dep);"}, {"sha": "4cfcf6ca407b5b17a856f695ac64772738074933", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/194b96852f13f3bf7a85a3b4e22c0977afa90cde/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194b96852f13f3bf7a85a3b4e22c0977afa90cde/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=194b96852f13f3bf7a85a3b4e22c0977afa90cde", "patch": "@@ -91,7 +91,7 @@ pub fn check(build: &mut Build) {\n                 .unwrap_or(true)\n         })\n         .any(|build_llvm_ourselves| build_llvm_ourselves);\n-    if building_llvm || build.config.sanitizers {\n+    if building_llvm || build.config.any_sanitizers_enabled() {\n         cmd_finder.must_have(\"cmake\");\n     }\n "}, {"sha": "60808dcba6144ac950d9188fc260a1bf6d058574", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/194b96852f13f3bf7a85a3b4e22c0977afa90cde/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/194b96852f13f3bf7a85a3b4e22c0977afa90cde/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=194b96852f13f3bf7a85a3b4e22c0977afa90cde", "patch": "@@ -1271,11 +1271,11 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n         cmd.env(\"RUSTC_BOOTSTRAP\", \"1\");\n         builder.add_rust_test_threads(&mut cmd);\n \n-        if builder.config.sanitizers {\n+        if builder.config.sanitizers_enabled(target) {\n             cmd.env(\"RUSTC_SANITIZER_SUPPORT\", \"1\");\n         }\n \n-        if builder.config.profiler {\n+        if builder.config.profiler_enabled(target) {\n             cmd.env(\"RUSTC_PROFILER_SUPPORT\", \"1\");\n         }\n \n@@ -1591,7 +1591,7 @@ impl Step for CrateLibrustc {\n         let builder = run.builder;\n         let compiler = builder.compiler(builder.top_stage, run.build_triple());\n \n-        for krate in builder.in_tree_crates(\"rustc-main\") {\n+        for krate in builder.in_tree_crates(\"rustc-main\", Some(run.target)) {\n             if krate.path.ends_with(&run.path) {\n                 let test_kind = builder.kind.into();\n \n@@ -1698,7 +1698,7 @@ impl Step for Crate {\n             });\n         };\n \n-        for krate in builder.in_tree_crates(\"test\") {\n+        for krate in builder.in_tree_crates(\"test\", Some(run.target)) {\n             if krate.path.ends_with(&run.path) {\n                 make(Mode::Std, krate);\n             }"}]}