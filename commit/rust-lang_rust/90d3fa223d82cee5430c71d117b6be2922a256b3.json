{"sha": "90d3fa223d82cee5430c71d117b6be2922a256b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZDNmYTIyM2Q4MmNlZTU0MzBjNzFkMTE3YjZiZTI5MjJhMjU2YjM=", "commit": {"author": {"name": "Alexey Shmalko", "email": "rasen.dubi@gmail.com", "date": "2019-05-01T19:15:00Z"}, "committer": {"name": "Alexey Shmalko", "email": "rasen.dubi@gmail.com", "date": "2019-05-02T13:38:29Z"}, "message": "Make tidy::version::Version a [u32; 3]", "tree": {"sha": "4d6fe37a5146ca94032406ae205c8ada07ca8b33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d6fe37a5146ca94032406ae205c8ada07ca8b33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90d3fa223d82cee5430c71d117b6be2922a256b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90d3fa223d82cee5430c71d117b6be2922a256b3", "html_url": "https://github.com/rust-lang/rust/commit/90d3fa223d82cee5430c71d117b6be2922a256b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90d3fa223d82cee5430c71d117b6be2922a256b3/comments", "author": {"login": "rasendubi", "id": 1366419, "node_id": "MDQ6VXNlcjEzNjY0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1366419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasendubi", "html_url": "https://github.com/rasendubi", "followers_url": "https://api.github.com/users/rasendubi/followers", "following_url": "https://api.github.com/users/rasendubi/following{/other_user}", "gists_url": "https://api.github.com/users/rasendubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasendubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasendubi/subscriptions", "organizations_url": "https://api.github.com/users/rasendubi/orgs", "repos_url": "https://api.github.com/users/rasendubi/repos", "events_url": "https://api.github.com/users/rasendubi/events{/privacy}", "received_events_url": "https://api.github.com/users/rasendubi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rasendubi", "id": 1366419, "node_id": "MDQ6VXNlcjEzNjY0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1366419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasendubi", "html_url": "https://github.com/rasendubi", "followers_url": "https://api.github.com/users/rasendubi/followers", "following_url": "https://api.github.com/users/rasendubi/following{/other_user}", "gists_url": "https://api.github.com/users/rasendubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasendubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasendubi/subscriptions", "organizations_url": "https://api.github.com/users/rasendubi/orgs", "repos_url": "https://api.github.com/users/rasendubi/repos", "events_url": "https://api.github.com/users/rasendubi/events{/privacy}", "received_events_url": "https://api.github.com/users/rasendubi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d54477e97415c8c4931533f98ebf2704cd60e9b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d54477e97415c8c4931533f98ebf2704cd60e9b4", "html_url": "https://github.com/rust-lang/rust/commit/d54477e97415c8c4931533f98ebf2704cd60e9b4"}], "stats": {"total": 122, "additions": 69, "deletions": 53}, "files": [{"sha": "b3ef5f3064c167f1d658a0ebfe994d9f13241720", "filename": "src/libstd/sys/redox/ext/net.rs", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/90d3fa223d82cee5430c71d117b6be2922a256b3/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3fa223d82cee5430c71d117b6be2922a256b3/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fnet.rs?ref=90d3fa223d82cee5430c71d117b6be2922a256b3", "patch": "@@ -1,4 +1,4 @@\n-#![stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+#![stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n \n //! Unix-specific networking functionality\n \n@@ -27,7 +27,7 @@ use crate::sys::{cvt, fd::FileDesc, syscall};\n /// let addr = socket.local_addr().expect(\"Couldn't get local address\");\n /// ```\n #[derive(Clone)]\n-#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n pub struct SocketAddr(());\n \n impl SocketAddr {\n@@ -55,7 +55,7 @@ impl SocketAddr {\n     /// let addr = socket.local_addr().expect(\"Couldn't get local address\");\n     /// assert_eq!(addr.as_pathname(), None);\n     /// ```\n-    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n     pub fn as_pathname(&self) -> Option<&Path> {\n         None\n     }\n@@ -83,12 +83,12 @@ impl SocketAddr {\n     /// let addr = socket.local_addr().expect(\"Couldn't get local address\");\n     /// assert_eq!(addr.is_unnamed(), true);\n     /// ```\n-    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n     pub fn is_unnamed(&self) -> bool {\n         false\n     }\n }\n-#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n impl fmt::Debug for SocketAddr {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(fmt, \"SocketAddr\")\n@@ -109,10 +109,10 @@ impl fmt::Debug for SocketAddr {\n /// stream.read_to_string(&mut response).unwrap();\n /// println!(\"{}\", response);\n /// ```\n-#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n pub struct UnixStream(FileDesc);\n \n-#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n impl fmt::Debug for UnixStream {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let mut builder = fmt.debug_struct(\"UnixStream\");\n@@ -143,7 +143,7 @@ impl UnixStream {\n     ///     }\n     /// };\n     /// ```\n-    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n     pub fn connect<P: AsRef<Path>>(path: P) -> io::Result<UnixStream> {\n         if let Some(s) = path.as_ref().to_str() {\n             cvt(syscall::open(format!(\"chan:{}\", s), syscall::O_CLOEXEC))\n@@ -174,7 +174,7 @@ impl UnixStream {\n     ///     }\n     /// };\n     /// ```\n-    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n     pub fn pair() -> io::Result<(UnixStream, UnixStream)> {\n         let server = cvt(syscall::open(\"chan:\", syscall::O_CREAT | syscall::O_CLOEXEC))\n             .map(FileDesc::new)?;\n@@ -198,7 +198,7 @@ impl UnixStream {\n     /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n     /// let sock_copy = socket.try_clone().expect(\"Couldn't clone socket\");\n     /// ```\n-    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n     pub fn try_clone(&self) -> io::Result<UnixStream> {\n         self.0.duplicate().map(UnixStream)\n     }\n@@ -213,7 +213,7 @@ impl UnixStream {\n     /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n     /// let addr = socket.local_addr().expect(\"Couldn't get local address\");\n     /// ```\n-    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n     pub fn local_addr(&self) -> io::Result<SocketAddr> {\n         Err(Error::new(ErrorKind::Other, \"UnixStream::local_addr unimplemented on redox\"))\n     }\n@@ -228,7 +228,7 @@ impl UnixStream {\n     /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n     /// let addr = socket.peer_addr().expect(\"Couldn't get peer address\");\n     /// ```\n-    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n         Err(Error::new(ErrorKind::Other, \"UnixStream::peer_addr unimplemented on redox\"))\n     }\n@@ -267,7 +267,7 @@ impl UnixStream {\n     /// let err = result.unwrap_err();\n     /// assert_eq!(err.kind(), io::ErrorKind::InvalidInput)\n     /// ```\n-    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n     pub fn set_read_timeout(&self, _timeout: Option<Duration>) -> io::Result<()> {\n         Err(Error::new(ErrorKind::Other, \"UnixStream::set_read_timeout unimplemented on redox\"))\n     }\n@@ -306,7 +306,7 @@ impl UnixStream {\n     /// let err = result.unwrap_err();\n     /// assert_eq!(err.kind(), io::ErrorKind::InvalidInput)\n     /// ```\n-    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n     pub fn set_write_timeout(&self, _timeout: Option<Duration>) -> io::Result<()> {\n         Err(Error::new(ErrorKind::Other, \"UnixStream::set_write_timeout unimplemented on redox\"))\n     }\n@@ -323,7 +323,7 @@ impl UnixStream {\n     /// socket.set_read_timeout(Some(Duration::new(1, 0))).expect(\"Couldn't set read timeout\");\n     /// assert_eq!(socket.read_timeout().unwrap(), Some(Duration::new(1, 0)));\n     /// ```\n-    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n         Err(Error::new(ErrorKind::Other, \"UnixStream::read_timeout unimplemented on redox\"))\n     }\n@@ -340,7 +340,7 @@ impl UnixStream {\n     /// socket.set_write_timeout(Some(Duration::new(1, 0))).expect(\"Couldn't set write timeout\");\n     /// assert_eq!(socket.write_timeout().unwrap(), Some(Duration::new(1, 0)));\n     /// ```\n-    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n         Err(Error::new(ErrorKind::Other, \"UnixStream::write_timeout unimplemented on redox\"))\n     }\n@@ -355,7 +355,7 @@ impl UnixStream {\n     /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n     /// socket.set_nonblocking(true).expect(\"Couldn't set nonblocking\");\n     /// ```\n-    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         self.0.set_nonblocking(nonblocking)\n     }\n@@ -375,7 +375,7 @@ impl UnixStream {\n     ///\n     /// # Platform specific\n     /// On Redox this always returns `None`.\n-    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n         Ok(None)\n     }\n@@ -397,13 +397,13 @@ impl UnixStream {\n     /// let socket = UnixStream::connect(\"/tmp/sock\").unwrap();\n     /// socket.shutdown(Shutdown::Both).expect(\"shutdown function failed\");\n     /// ```\n-    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n     pub fn shutdown(&self, _how: Shutdown) -> io::Result<()> {\n         Err(Error::new(ErrorKind::Other, \"UnixStream::shutdown unimplemented on redox\"))\n     }\n }\n \n-#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n impl io::Read for UnixStream {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         io::Read::read(&mut &*self, buf)\n@@ -415,7 +415,7 @@ impl io::Read for UnixStream {\n     }\n }\n \n-#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n impl<'a> io::Read for &'a UnixStream {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         self.0.read(buf)\n@@ -427,7 +427,7 @@ impl<'a> io::Read for &'a UnixStream {\n     }\n }\n \n-#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n impl io::Write for UnixStream {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         io::Write::write(&mut &*self, buf)\n@@ -438,7 +438,7 @@ impl io::Write for UnixStream {\n     }\n }\n \n-#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n impl<'a> io::Write for &'a UnixStream {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n@@ -449,21 +449,21 @@ impl<'a> io::Write for &'a UnixStream {\n     }\n }\n \n-#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n impl AsRawFd for UnixStream {\n     fn as_raw_fd(&self) -> RawFd {\n         self.0.raw()\n     }\n }\n \n-#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n impl FromRawFd for UnixStream {\n     unsafe fn from_raw_fd(fd: RawFd) -> UnixStream {\n         UnixStream(FileDesc::new(fd))\n     }\n }\n \n-#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n impl IntoRawFd for UnixStream {\n     fn into_raw_fd(self) -> RawFd {\n         self.0.into_raw()\n@@ -498,10 +498,10 @@ impl IntoRawFd for UnixStream {\n ///     }\n /// }\n /// ```\n-#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n pub struct UnixListener(FileDesc);\n \n-#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n impl fmt::Debug for UnixListener {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let mut builder = fmt.debug_struct(\"UnixListener\");\n@@ -529,7 +529,7 @@ impl UnixListener {\n     ///     }\n     /// };\n     /// ```\n-    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n     pub fn bind<P: AsRef<Path>>(path: P) -> io::Result<UnixListener> {\n         if let Some(s) = path.as_ref().to_str() {\n             cvt(syscall::open(format!(\"chan:{}\", s), syscall::O_CREAT | syscall::O_CLOEXEC))\n@@ -563,7 +563,7 @@ impl UnixListener {\n     ///     Err(e) => println!(\"accept function failed: {:?}\", e),\n     /// }\n     /// ```\n-    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n     pub fn accept(&self) -> io::Result<(UnixStream, SocketAddr)> {\n         self.0.duplicate_path(b\"listen\").map(|fd| (UnixStream(fd), SocketAddr(())))\n     }\n@@ -583,7 +583,7 @@ impl UnixListener {\n     ///\n     /// let listener_copy = listener.try_clone().expect(\"try_clone failed\");\n     /// ```\n-    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n     pub fn try_clone(&self) -> io::Result<UnixListener> {\n         self.0.duplicate().map(UnixListener)\n     }\n@@ -599,7 +599,7 @@ impl UnixListener {\n     ///\n     /// let addr = listener.local_addr().expect(\"Couldn't get local address\");\n     /// ```\n-    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n     pub fn local_addr(&self) -> io::Result<SocketAddr> {\n         Err(Error::new(ErrorKind::Other, \"UnixListener::local_addr unimplemented on redox\"))\n     }\n@@ -615,7 +615,7 @@ impl UnixListener {\n     ///\n     /// listener.set_nonblocking(true).expect(\"Couldn't set non blocking\");\n     /// ```\n-    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         self.0.set_nonblocking(nonblocking)\n     }\n@@ -636,7 +636,7 @@ impl UnixListener {\n     ///\n     /// # Platform specific\n     /// On Redox this always returns `None`.\n-    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n         Ok(None)\n     }\n@@ -672,34 +672,34 @@ impl UnixListener {\n     ///     }\n     /// }\n     /// ```\n-    #[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+    #[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n     pub fn incoming<'a>(&'a self) -> Incoming<'a> {\n         Incoming { listener: self }\n     }\n }\n \n-#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n impl AsRawFd for UnixListener {\n     fn as_raw_fd(&self) -> RawFd {\n         self.0.raw()\n     }\n }\n \n-#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n impl FromRawFd for UnixListener {\n     unsafe fn from_raw_fd(fd: RawFd) -> UnixListener {\n         UnixListener(FileDesc::new(fd))\n     }\n }\n \n-#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n impl IntoRawFd for UnixListener {\n     fn into_raw_fd(self) -> RawFd {\n         self.0.into_raw()\n     }\n }\n \n-#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n impl<'a> IntoIterator for &'a UnixListener {\n     type Item = io::Result<UnixStream>;\n     type IntoIter = Incoming<'a>;\n@@ -740,12 +740,12 @@ impl<'a> IntoIterator for &'a UnixListener {\n /// }\n /// ```\n #[derive(Debug)]\n-#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n pub struct Incoming<'a> {\n     listener: &'a UnixListener,\n }\n \n-#[stable(feature = \"unix_socket_redox\", since = \"1.29\")]\n+#[stable(feature = \"unix_socket_redox\", since = \"1.29.0\")]\n impl<'a> Iterator for Incoming<'a> {\n     type Item = io::Result<UnixStream>;\n "}, {"sha": "afadedd8b6bbb619727914d99ee28d00307ee9e6", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90d3fa223d82cee5430c71d117b6be2922a256b3/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3fa223d82cee5430c71d117b6be2922a256b3/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=90d3fa223d82cee5430c71d117b6be2922a256b3", "patch": "@@ -249,7 +249,7 @@ pub fn collect_lang_features(base_src_path: &Path, bad: &mut bool) -> Features {\n                 Err(err) => {\n                     tidy_error!(\n                         bad,\n-                        \"libsyntax/feature_gate.rs:{}: failed to parse since: {} ({})\",\n+                        \"libsyntax/feature_gate.rs:{}: failed to parse since: {} ({:?})\",\n                         line_number,\n                         since_str,\n                         err,"}, {"sha": "7ea788a85180bcfcf23fa3335e5b2c365ec6d6a5", "filename": "src/tools/tidy/src/features/version.rs", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/90d3fa223d82cee5430c71d117b6be2922a256b3/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures%2Fversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90d3fa223d82cee5430c71d117b6be2922a256b3/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures%2Fversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures%2Fversion.rs?ref=90d3fa223d82cee5430c71d117b6be2922a256b3", "patch": "@@ -1,10 +1,11 @@\n use std::str::FromStr;\n use std::num::ParseIntError;\n use std::fmt;\n+use std::convert::TryInto;\n \n #[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord)]\n pub struct Version {\n-    parts: Vec<u32>,\n+    parts: [u32; 3],\n }\n \n impl fmt::Display for Version {\n@@ -14,12 +15,27 @@ impl fmt::Display for Version {\n     }\n }\n \n+#[derive(Debug, PartialEq, Eq)]\n+pub enum ParseVersionError {\n+    ParseIntError(ParseIntError),\n+    // core::array::TryFromSlice is not exported from std, so we invent our own variant\n+    WrongNumberOfParts\n+}\n+\n+impl From<ParseIntError> for ParseVersionError {\n+    fn from(err: ParseIntError) -> Self {\n+        ParseVersionError::ParseIntError(err)\n+    }\n+}\n+\n impl FromStr for Version {\n-    type Err = ParseIntError;\n+    type Err = ParseVersionError;\n \n     fn from_str(s: &str) -> Result<Self, Self::Err> {\n-        let parts = s.split('.').map(|part| part.parse()).collect::<Result<_, _>>()?;\n-        Ok(Version { parts })\n+        let parts: Vec<_> = s.split('.').map(|part| part.parse()).collect::<Result<_, _>>()?;\n+        Ok(Self {\n+            parts: parts.as_slice().try_into() .or(Err(ParseVersionError::WrongNumberOfParts))?,\n+        })\n     }\n }\n \n@@ -33,32 +49,32 @@ mod test {\n         assert!(\"hello\".parse::<Version>().is_err());\n         assert!(\"1.32.hi\".parse::<Version>().is_err());\n         assert!(\"1.32..1\".parse::<Version>().is_err());\n+        assert!(\"1.32\".parse::<Version>().is_err());\n+        assert!(\"1.32.0.1\".parse::<Version>().is_err());\n     }\n \n     #[test]\n     fn test_try_from_single() {\n-        assert_eq!(\"1.32.0\".parse(), Ok(Version { parts: vec![1, 32, 0] }));\n-        assert_eq!(\"1.0.0\".parse(), Ok(Version { parts: vec![1, 0, 0] }));\n+        assert_eq!(\"1.32.0\".parse(), Ok(Version { parts: [1, 32, 0] }));\n+        assert_eq!(\"1.0.0\".parse(), Ok(Version { parts: [1, 0, 0] }));\n     }\n \n     #[test]\n     fn test_compare() {\n         let v_1_0_0 = \"1.0.0\".parse::<Version>().unwrap();\n-        let v_1_32 = \"1.32\".parse::<Version>().unwrap();\n+        let v_1_32_0 = \"1.32.0\".parse::<Version>().unwrap();\n         let v_1_32_1 = \"1.32.1\".parse::<Version>().unwrap();\n         assert!(v_1_0_0 < v_1_32_1);\n-        assert!(v_1_0_0 < v_1_32);\n-        assert!(v_1_32 < v_1_32_1);\n+        assert!(v_1_0_0 < v_1_32_0);\n+        assert!(v_1_32_0 < v_1_32_1);\n     }\n \n     #[test]\n     fn test_to_string() {\n         let v_1_0_0 = \"1.0.0\".parse::<Version>().unwrap();\n-        let v_1_32 = \"1.32\".parse::<Version>().unwrap();\n         let v_1_32_1 = \"1.32.1\".parse::<Version>().unwrap();\n \n         assert_eq!(v_1_0_0.to_string(), \"1.0.0\");\n-        assert_eq!(v_1_32.to_string(), \"1.32\");\n         assert_eq!(v_1_32_1.to_string(), \"1.32.1\");\n         assert_eq!(format!(\"{:<8}\", v_1_32_1), \"1.32.1  \");\n         assert_eq!(format!(\"{:>8}\", v_1_32_1), \"  1.32.1\");"}]}