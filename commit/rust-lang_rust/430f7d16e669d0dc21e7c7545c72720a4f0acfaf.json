{"sha": "430f7d16e669d0dc21e7c7545c72720a4f0acfaf", "node_id": "C_kwDOAAsO6NoAKDQzMGY3ZDE2ZTY2OWQwZGMyMWU3Yzc1NDVjNzI3MjBhNGYwYWNmYWY", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2022-11-24T08:20:51Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-11-25T09:28:44Z"}, "message": "add FIXME's", "tree": {"sha": "6326c530a16a60233be558498698813ad1f35aaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6326c530a16a60233be558498698813ad1f35aaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/430f7d16e669d0dc21e7c7545c72720a4f0acfaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/430f7d16e669d0dc21e7c7545c72720a4f0acfaf", "html_url": "https://github.com/rust-lang/rust/commit/430f7d16e669d0dc21e7c7545c72720a4f0acfaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/430f7d16e669d0dc21e7c7545c72720a4f0acfaf/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95e1a39c048b922754b3bc0fc5d305259a56289f", "url": "https://api.github.com/repos/rust-lang/rust/commits/95e1a39c048b922754b3bc0fc5d305259a56289f", "html_url": "https://github.com/rust-lang/rust/commit/95e1a39c048b922754b3bc0fc5d305259a56289f"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "221e359d24ab8d517a1d98ed60de780bdea9c468", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/430f7d16e669d0dc21e7c7545c72720a4f0acfaf/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430f7d16e669d0dc21e7c7545c72720a4f0acfaf/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=430f7d16e669d0dc21e7c7545c72720a4f0acfaf", "patch": "@@ -561,6 +561,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             ty::ConstKind::Param(_) | ty::ConstKind::Placeholder(..) => {\n                 throw_inval!(TooGeneric)\n             }\n+            // FIXME(generic_const_exprs): `ConstKind::Expr` should be able to be evaluated\n             ty::ConstKind::Expr(_) => throw_inval!(TooGeneric),\n             ty::ConstKind::Error(reported) => {\n                 throw_inval!(AlreadyReported(reported))"}, {"sha": "8b460bfe044f28f3017dbc0a317b8a35926c10c1", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/430f7d16e669d0dc21e7c7545c72720a4f0acfaf/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430f7d16e669d0dc21e7c7545c72720a4f0acfaf/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=430f7d16e669d0dc21e7c7545c72720a4f0acfaf", "patch": "@@ -650,6 +650,9 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n         (ty::ConstKind::Unevaluated(_), ty::ConstKind::Unevaluated(_))\n             if tcx.features().generic_const_exprs =>\n         {\n+            // FIXME(generic_const_exprs): this spurriously fails when relating two assoc consts\n+            // i.e. `<T as Trait>::ASSOC eq <T as Trait>::ASSOC` would return `false`. Wheras if\n+            // both were behind an anon const that gets normalized away here it would succeed.\n             if let (Ok(Some(a)), Ok(Some(b))) = (\n                 tcx.expand_abstract_consts(a),\n                 tcx.expand_abstract_consts(b),"}, {"sha": "b72bc42fa65e026a4ed0db34567623a124eaabef", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/430f7d16e669d0dc21e7c7545c72720a4f0acfaf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430f7d16e669d0dc21e7c7545c72720a4f0acfaf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=430f7d16e669d0dc21e7c7545c72720a4f0acfaf", "patch": "@@ -149,6 +149,13 @@ fn satisfied_from_param_env<'tcx>(\n             } else if let ty::ConstKind::Expr(e) = c.kind() {\n                 e.visit_with(self)\n             } else {\n+                // FIXME(generic_const_exprs): This doesn't recurse into `<T as Trait<U>>::ASSOC`'s substs.\n+                // This is currently unobservable as `<T as Trait<{ U + 1 }>>::ASSOC` creates an anon const\n+                // with its own `ConstEvaluatable` bound in the param env which we will visit separately.\n+                //\n+                // If we start allowing directly writing `ConstKind::Expr` without an intermediate anon const\n+                // this will be incorrect. It might be worth investigating making `predicates_of` elaborate\n+                // all of the `ConstEvaluatable` bounds rather than having a visitor here.\n                 ControlFlow::CONTINUE\n             }\n         }"}]}