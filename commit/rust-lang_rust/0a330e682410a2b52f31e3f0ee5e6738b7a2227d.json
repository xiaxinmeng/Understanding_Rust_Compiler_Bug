{"sha": "0a330e682410a2b52f31e3f0ee5e6738b7a2227d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMzMwZTY4MjQxMGEyYjUyZjMxZTNmMGVlNWU2NzM4YjdhMjIyN2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-26T21:39:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-26T21:39:40Z"}, "message": "Auto merge of #7136 - mgacek8:issue6965_manual_unwrap_or_invalid_sugg_macro_expansion, r=llogiq\n\nmanual_unwrap_or: fix invalid code suggestion, due to macro expansion\n\nfixes #6965\n\nchangelog: fix invalid code suggestion in `manual_unwrap_or` lint, due to macro expansion", "tree": {"sha": "00cb3951e0117d5470e2839f095c139689485155", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00cb3951e0117d5470e2839f095c139689485155"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a330e682410a2b52f31e3f0ee5e6738b7a2227d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a330e682410a2b52f31e3f0ee5e6738b7a2227d", "html_url": "https://github.com/rust-lang/rust/commit/0a330e682410a2b52f31e3f0ee5e6738b7a2227d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a330e682410a2b52f31e3f0ee5e6738b7a2227d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f33d86df4efda60f48b8fa3c1cc2d88e35000601", "url": "https://api.github.com/repos/rust-lang/rust/commits/f33d86df4efda60f48b8fa3c1cc2d88e35000601", "html_url": "https://github.com/rust-lang/rust/commit/f33d86df4efda60f48b8fa3c1cc2d88e35000601"}, {"sha": "84003aa7a18f2673b20340dd20344dda8265ba7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/84003aa7a18f2673b20340dd20344dda8265ba7a", "html_url": "https://github.com/rust-lang/rust/commit/84003aa7a18f2673b20340dd20344dda8265ba7a"}], "stats": {"total": 50, "additions": 48, "deletions": 2}, "files": [{"sha": "520162559e50f74690bcaa67c2f93135dea73f7f", "filename": "clippy_lints/src/manual_unwrap_or.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0a330e682410a2b52f31e3f0ee5e6738b7a2227d/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a330e682410a2b52f31e3f0ee5e6738b7a2227d/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs?ref=0a330e682410a2b52f31e3f0ee5e6738b7a2227d", "patch": "@@ -112,14 +112,23 @@ fn lint_manual_unwrap_or<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n         then {\n             let reindented_or_body =\n                 reindent_multiline(or_body_snippet.into(), true, Some(indent));\n+\n+            let suggestion = if scrutinee.span.from_expansion() {\n+                    // we don't want parenthesis around macro, e.g. `(some_macro!()).unwrap_or(0)`\n+                    sugg::Sugg::hir_with_macro_callsite(cx, scrutinee, \"..\")\n+                }\n+                else {\n+                    sugg::Sugg::hir(cx, scrutinee, \"..\").maybe_par()\n+                };\n+\n             span_lint_and_sugg(\n                 cx,\n                 MANUAL_UNWRAP_OR, expr.span,\n                 &format!(\"this pattern reimplements `{}`\", case.unwrap_fn_path()),\n                 \"replace with\",\n                 format!(\n                     \"{}.unwrap_or({})\",\n-                    sugg::Sugg::hir(cx, scrutinee, \"..\").maybe_par(),\n+                    suggestion,\n                     reindented_or_body,\n                 ),\n                 Applicability::MachineApplicable,"}, {"sha": "e7a29596b73ac50f8fdb1723c089e9425dbdf3bb", "filename": "tests/ui/manual_unwrap_or.fixed", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a330e682410a2b52f31e3f0ee5e6738b7a2227d/tests%2Fui%2Fmanual_unwrap_or.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0a330e682410a2b52f31e3f0ee5e6738b7a2227d/tests%2Fui%2Fmanual_unwrap_or.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_unwrap_or.fixed?ref=0a330e682410a2b52f31e3f0ee5e6738b7a2227d", "patch": "@@ -151,4 +151,16 @@ const fn const_fn_result_unwrap_or() {\n     };\n }\n \n+mod issue6965 {\n+    macro_rules! some_macro {\n+        () => {\n+            if 1 > 2 { Some(1) } else { None }\n+        };\n+    }\n+\n+    fn test() {\n+        let _ = some_macro!().unwrap_or(0);\n+    }\n+}\n+\n fn main() {}"}, {"sha": "66006b6c616f08f9e1858e53ef451b57b26c130f", "filename": "tests/ui/manual_unwrap_or.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0a330e682410a2b52f31e3f0ee5e6738b7a2227d/tests%2Fui%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a330e682410a2b52f31e3f0ee5e6738b7a2227d/tests%2Fui%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_unwrap_or.rs?ref=0a330e682410a2b52f31e3f0ee5e6738b7a2227d", "patch": "@@ -190,4 +190,19 @@ const fn const_fn_result_unwrap_or() {\n     };\n }\n \n+mod issue6965 {\n+    macro_rules! some_macro {\n+        () => {\n+            if 1 > 2 { Some(1) } else { None }\n+        };\n+    }\n+\n+    fn test() {\n+        let _ = match some_macro!() {\n+            Some(val) => val,\n+            None => 0,\n+        };\n+    }\n+}\n+\n fn main() {}"}, {"sha": "99625b789b6a4d7d0728ca89eb19dd98e8d73125", "filename": "tests/ui/manual_unwrap_or.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a330e682410a2b52f31e3f0ee5e6738b7a2227d/tests%2Fui%2Fmanual_unwrap_or.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a330e682410a2b52f31e3f0ee5e6738b7a2227d/tests%2Fui%2Fmanual_unwrap_or.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_unwrap_or.stderr?ref=0a330e682410a2b52f31e3f0ee5e6738b7a2227d", "patch": "@@ -141,5 +141,15 @@ LL | |         Err(_) => \"Alice\",\n LL | |     };\n    | |_____^ help: replace with: `Ok::<&str, &str>(\"Bob\").unwrap_or(\"Alice\")`\n \n-error: aborting due to 13 previous errors\n+error: this pattern reimplements `Option::unwrap_or`\n+  --> $DIR/manual_unwrap_or.rs:201:17\n+   |\n+LL |           let _ = match some_macro!() {\n+   |  _________________^\n+LL | |             Some(val) => val,\n+LL | |             None => 0,\n+LL | |         };\n+   | |_________^ help: replace with: `some_macro!().unwrap_or(0)`\n+\n+error: aborting due to 14 previous errors\n "}]}