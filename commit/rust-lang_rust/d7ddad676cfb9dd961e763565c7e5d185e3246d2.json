{"sha": "d7ddad676cfb9dd961e763565c7e5d185e3246d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ZGRhZDY3NmNmYjlkZDk2MWU3NjM1NjVjN2U1ZDE4NWUzMjQ2ZDI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-07-16T07:53:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-16T07:53:59Z"}, "message": "Merge pull request #407 from RalfJung/readme\n\nupdate rustc build instructions to mention keep-stage", "tree": {"sha": "827b9216506c41921cbb88d8b6d5245410185b6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/827b9216506c41921cbb88d8b6d5245410185b6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7ddad676cfb9dd961e763565c7e5d185e3246d2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbTE8XCRBK7hj4Ov3rIwAAdHIIADrMxTmuK4XzPzJXeuxu54PO\n4h70S5wQXky0plJoGskmpAoZ+iQPXgRigO5KzugnIK7lBTFuRl1DbhLMhLkZJNb2\nAUCP6HpZqCjcthwVxKVSJqRf0g9SZ6S9YVBiohXox1ooJfvCLQMZM8W9/xxmUjMi\n86bfwM3jeGuXYT40GREk8kI2d0NLmPSnL3iX84zGaaFTe/QNBa3I0Ia8gFrXGWKV\npECL/GgC+TBz6SnyP9N4nJuilnNa3V94e8FU/h9lHgq9gnUx56qYazL9iiBMqjiM\nHwlyT83tw8BZSTaKf//qO1lWGa0UkjqMUK8p5f8QR6zPZQpBHXzVdREkIeDStV4=\n=FHEm\n-----END PGP SIGNATURE-----\n", "payload": "tree 827b9216506c41921cbb88d8b6d5245410185b6d\nparent 40ac1507125bcb9f80633d26471722c8b20db6a3\nparent 8264732366fea5057a6d079970466f21bb862705\nauthor Ralf Jung <post@ralfj.de> 1531727639 +0200\ncommitter GitHub <noreply@github.com> 1531727639 +0200\n\nMerge pull request #407 from RalfJung/readme\n\nupdate rustc build instructions to mention keep-stage"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7ddad676cfb9dd961e763565c7e5d185e3246d2", "html_url": "https://github.com/rust-lang/rust/commit/d7ddad676cfb9dd961e763565c7e5d185e3246d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7ddad676cfb9dd961e763565c7e5d185e3246d2/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40ac1507125bcb9f80633d26471722c8b20db6a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/40ac1507125bcb9f80633d26471722c8b20db6a3", "html_url": "https://github.com/rust-lang/rust/commit/40ac1507125bcb9f80633d26471722c8b20db6a3"}, {"sha": "8264732366fea5057a6d079970466f21bb862705", "url": "https://api.github.com/repos/rust-lang/rust/commits/8264732366fea5057a6d079970466f21bb862705", "html_url": "https://github.com/rust-lang/rust/commit/8264732366fea5057a6d079970466f21bb862705"}], "stats": {"total": 54, "additions": 33, "deletions": 21}, "files": [{"sha": "d515aad8bea519b250f995ec247dd7a0782408e0", "filename": "README.md", "status": "modified", "additions": 33, "deletions": 21, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d7ddad676cfb9dd961e763565c7e5d185e3246d2/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/d7ddad676cfb9dd961e763565c7e5d185e3246d2/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=d7ddad676cfb9dd961e763565c7e5d185e3246d2", "patch": "@@ -40,25 +40,6 @@ how to fix it, you could send a PR. :smile:\n cargo run --bin miri tests/run-pass-fullmir/vecs.rs # Or whatever test you like.\n ```\n \n-## Debugging\n-\n-Since the heart of miri (the main interpreter engine) lives in rustc, tracing\n-the interpreter requires a version of rustc compiled with tracing.  To this\n-end, you will have to compile your own rustc:\n-```\n-git clone https://github.com/rust-lang/rust/ rustc\n-cd rustc\n-cp config.toml.example config.toml\n-# Now edit `config.toml` and set `debug-assertions = true`\n-./x.py build src/rustc\n-rustup toolchain link custom build/x86_64-unknown-linux-gnu/stage2\n-```\n-The `build` step can take 30 to 60 minutes.\n-\n-Now, in the miri directory, you can `rustup override set custom` and re-build\n-everything.  Finally, if you now set `RUST_LOG=rustc_mir::interpret=trace` as\n-environment variable, you will get detailed step-by-step tracing information.\n-\n ## Running miri on your own project('s test suite)\n \n Install miri as a cargo subcommand with `cargo install --debug`.\n@@ -68,8 +49,8 @@ through miri.\n \n ## Running miri with full libstd\n \n-Per default libstd does not contain the MIR of non-polymorphic functions.  When\n-miri hits a call to such a function, execution terminates.  To fix this, it is\n+Per default libstd does not contain the MIR of non-polymorphic functions. When\n+miri hits a call to such a function, execution terminates. To fix this, it is\n possible to compile libstd with full MIR:\n \n ```sh\n@@ -91,6 +72,37 @@ your toolchain changes (e.g., when you update the nightly).\n You can also set `-Zmiri-start-fn` to make miri start evaluation with the\n `start_fn` lang item, instead of starting at the `main` function.\n \n+## Development and Debugging\n+\n+Since the heart of miri (the main interpreter engine) lives in rustc, working on\n+miri will often require using a locally built rustc. This includes getting a\n+trace of the execution, as distributed rustc has `trace!` disabled.\n+\n+The first-time setup for a local rustc looks as follows:\n+```\n+git clone https://github.com/rust-lang/rust/ rustc\n+cd rustc\n+cp config.toml.example config.toml\n+# Now edit `config.toml` and set `debug-assertions = true`\n+./x.py build src/rustc\n+# You may have to change the architecture in the next command\n+rustup toolchain link custom build/x86_64-unknown-linux-gnu/stage2\n+# Now cd to your miri directory\n+rustup override set custom\n+```\n+The `build` step can take 30 minutes and more.\n+\n+Now you can `cargo build` miri, and you can `cargo test --tests`.  (`--tests`\n+is needed to skip doctests because we have not built rustdoc for your custom\n+toolchain.) You can also set `RUST_LOG=rustc_mir::interpret=trace` as\n+environment variable to get a step-by-step trace.\n+\n+If you changed something in rustc and want to re-build, run\n+```\n+./x.py build src/rustc --keep-stage 0\n+```\n+This avoids rebuilding the entire stage 0, which can save a lot of time.\n+\n ## Contributing and getting help\n \n Check out the issues on this GitHub repository for some ideas. There's lots that"}]}