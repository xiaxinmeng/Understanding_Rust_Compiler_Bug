{"sha": "f492e9421fdec42b448aeeb54fa9aff0177ba442", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0OTJlOTQyMWZkZWM0MmI0NDhhZWViNTRmYTlhZmYwMTc3YmE0NDI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-11-13T23:20:59Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-11-18T10:57:37Z"}, "message": "resolve: Support resolving macros without leaving traces", "tree": {"sha": "c38b1f8e498fa2144f58efb65b6d56436565d147", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c38b1f8e498fa2144f58efb65b6d56436565d147"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f492e9421fdec42b448aeeb54fa9aff0177ba442", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f492e9421fdec42b448aeeb54fa9aff0177ba442", "html_url": "https://github.com/rust-lang/rust/commit/f492e9421fdec42b448aeeb54fa9aff0177ba442", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f492e9421fdec42b448aeeb54fa9aff0177ba442/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e8a97f8e7cf1da19c708d33f56027e1d9d9f067", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e8a97f8e7cf1da19c708d33f56027e1d9d9f067", "html_url": "https://github.com/rust-lang/rust/commit/0e8a97f8e7cf1da19c708d33f56027e1d9d9f067"}], "stats": {"total": 37, "additions": 28, "deletions": 9}, "files": [{"sha": "98dcd2988d6356e266c3526f6d1b68faa1b209b7", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f492e9421fdec42b448aeeb54fa9aff0177ba442/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f492e9421fdec42b448aeeb54fa9aff0177ba442/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=f492e9421fdec42b448aeeb54fa9aff0177ba442", "patch": "@@ -327,7 +327,7 @@ impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n         };\n \n         let parent_scope = self.invoc_parent_scope(invoc_id, derives_in_scope);\n-        let (def, ext) = self.resolve_macro_to_def(path, kind, &parent_scope, force)?;\n+        let (def, ext) = self.resolve_macro_to_def(path, kind, &parent_scope, true, force)?;\n \n         if let Def::Macro(def_id, _) = def {\n             if after_derive {\n@@ -350,7 +350,7 @@ impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n                           derives_in_scope: Vec<ast::Path>, force: bool)\n                           -> Result<Lrc<SyntaxExtension>, Determinacy> {\n         let parent_scope = self.invoc_parent_scope(invoc_id, derives_in_scope);\n-        Ok(self.resolve_macro_to_def(path, kind, &parent_scope, force)?.1)\n+        Ok(self.resolve_macro_to_def(path, kind, &parent_scope, false, force)?.1)\n     }\n \n     fn check_unused_macros(&self) {\n@@ -391,9 +391,10 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n         path: &ast::Path,\n         kind: MacroKind,\n         parent_scope: &ParentScope<'a>,\n+        trace: bool,\n         force: bool,\n     ) -> Result<(Def, Lrc<SyntaxExtension>), Determinacy> {\n-        let def = self.resolve_macro_to_def_inner(path, kind, parent_scope, force);\n+        let def = self.resolve_macro_to_def_inner(path, kind, parent_scope, trace, force);\n \n         // Report errors and enforce feature gates for the resolved macro.\n         if def != Err(Determinacy::Undetermined) {\n@@ -465,6 +466,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n         path: &ast::Path,\n         kind: MacroKind,\n         parent_scope: &ParentScope<'a>,\n+        trace: bool,\n         force: bool,\n     ) -> Result<Def, Determinacy> {\n         let path_span = path.span;\n@@ -492,8 +494,10 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                 PathResult::Module(..) => unreachable!(),\n             };\n \n-            parent_scope.module.multi_segment_macro_resolutions.borrow_mut()\n-                .push((path, path_span, kind, parent_scope.clone(), def.ok()));\n+            if trace {\n+                parent_scope.module.multi_segment_macro_resolutions.borrow_mut()\n+                    .push((path, path_span, kind, parent_scope.clone(), def.ok()));\n+            }\n \n             def\n         } else {\n@@ -506,8 +510,10 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                 Err(Determinacy::Undetermined) => return Err(Determinacy::Undetermined),\n             }\n \n-            parent_scope.module.single_segment_macro_resolutions.borrow_mut()\n-                .push((path[0].ident, kind, parent_scope.clone(), binding.ok()));\n+            if trace {\n+                parent_scope.module.single_segment_macro_resolutions.borrow_mut()\n+                    .push((path[0].ident, kind, parent_scope.clone(), binding.ok()));\n+            }\n \n             binding.map(|binding| binding.def_ignoring_ambiguity())\n         }\n@@ -634,7 +640,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                     for derive in &parent_scope.derives {\n                         let parent_scope = ParentScope { derives: Vec::new(), ..*parent_scope };\n                         match self.resolve_macro_to_def(derive, MacroKind::Derive,\n-                                                        &parent_scope, force) {\n+                                                        &parent_scope, true, force) {\n                             Ok((_, ext)) => {\n                                 if let SyntaxExtension::ProcMacroDerive(_, helpers, _) = &*ext {\n                                     if helpers.contains(&ident.name) {"}, {"sha": "85c9b6ee7285eabde8c48ffb5d9965638c8c08eb", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f492e9421fdec42b448aeeb54fa9aff0177ba442/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f492e9421fdec42b448aeeb54fa9aff0177ba442/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=f492e9421fdec42b448aeeb54fa9aff0177ba442", "patch": "@@ -477,7 +477,7 @@ fn macro_resolve(cx: &DocContext, path_str: &str) -> Option<Def> {\n     let mut resolver = cx.resolver.borrow_mut();\n     let parent_scope = resolver.dummy_parent_scope();\n     if let Ok(def) = resolver.resolve_macro_to_def_inner(&path, MacroKind::Bang,\n-                                                         &parent_scope, false) {\n+                                                         &parent_scope, false, false) {\n         if let SyntaxExtension::DeclMacro { .. } = *resolver.get_macro(def) {\n             return Some(def);\n         }"}, {"sha": "8478ff1a6ae6c7616833547b4f4323bd5a1a6a18", "filename": "src/test/ui-fulldeps/custom-derive/derive-in-mod.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f492e9421fdec42b448aeeb54fa9aff0177ba442/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fderive-in-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f492e9421fdec42b448aeeb54fa9aff0177ba442/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fderive-in-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fcustom-derive%2Fderive-in-mod.rs?ref=f492e9421fdec42b448aeeb54fa9aff0177ba442", "patch": "@@ -0,0 +1,13 @@\n+// compile-pass\n+// aux-build:plugin.rs\n+\n+extern crate plugin;\n+\n+mod inner {\n+    use plugin::WithHelper;\n+\n+    #[derive(WithHelper)]\n+    struct S;\n+}\n+\n+fn main() {}"}]}