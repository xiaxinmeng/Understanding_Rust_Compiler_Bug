{"sha": "ad03e4de185f0f19ae75a8a9c4095ee1b0d82a47", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMDNlNGRlMTg1ZjBmMTlhZTc1YThhOWM0MDk1ZWUxYjBkODJhNDc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-18T07:44:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-18T07:44:44Z"}, "message": "Merge #4493\n\n4493: Provide builtin impls of Fn traits for fn-pointers r=flodiebold a=hban\n\nMeant to be, but isn't actually a fix for #2880.\r\n\r\nConsider this snippet:\r\n\r\n```rust\r\nuse std::marker::PhantomData;\r\nuse std::ops::Deref;\r\n\r\nstruct Lazy<T, F/* = fn() -> T*/>(F, PhantomData<T>);\r\n\r\nimpl<T, F> Lazy<T, F> {\r\n    pub fn new(f: F) -> Lazy<T, F> {\r\n        Lazy(f, PhantomData)\r\n    }\r\n}\r\n\r\nimpl<T, F: FnOnce() -> T> Deref for Lazy<T, F> {\r\n    type Target = T;\r\n\r\n    fn deref(&self) -> &T { todo!() }\r\n}\r\n\r\nfn test() {\r\n    let lazy1: Lazy<u32, _> = Lazy::new(|| 0u32);\r\n    let r1 = lazy1.to_string();\r\n\r\n    fn make_u32_fn() -> u32 { todo!() }\r\n    let make_u32_fn_ptr: fn() -> u32 = make_u32_fn;\r\n    let lazy2: Lazy<u32, _> = Lazy::new(make_u32_fn_ptr);\r\n    let r2 = lazy2.to_string();\r\n}\r\n```\r\n\r\n* On current master:\r\n  * When type default is commented-out, `r1` is correctly inferred, `r2` in _{unknown}_.\r\n  * When type default is not commented-out, both `r1`  and `r2` are _{unknown}_.\r\n* With this PR:\r\n  * When type default is commented-out, both `r1` and `r2` are correctly inferred.\r\n  * When type default is not commented-out, both `r1`  and `r2` are _{unknown}_.\r\n\r\nWell, it's a improvement at least. I guess this thing with type defaults is a different problem.\r\n\r\nI also tried add Fn impls for fn items, but wasn't successful. So this PR only adds those impls for fn pointers.\n\nCo-authored-by: Hrvoje Ban <hban@users.noreply.github.com>", "tree": {"sha": "86f1b44509075a54f0887d56fe84e8ae42df5766", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86f1b44509075a54f0887d56fe84e8ae42df5766"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad03e4de185f0f19ae75a8a9c4095ee1b0d82a47", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJewjzsCRBK7hj4Ov3rIwAAdHIIAAsWPaOq/ZcqqY/zP54LVXM8\nnwxSIH/c7a47DWx58vnbXIcElI7JWkR5YEF3/Q+RTmBXHH9SkubJCNTGdQooMYAv\nl3MSXF9Wj8ysxdj8Ft6WrtxTK7OBRihOeolrEyg8mmQY1YPILY7jUzPNb5UGX6ql\nKnYVPWNdk7bCu5hfqhRk+2CMIlJ+TeLI7q5lk+6GRWrp6GUxoFXe+SK8mZwlyJNX\nCoJCIWoKnhdl72vt9gOcEp0T/c00iCcOXdHR4ZrpZQn5l5OWT7ZpROtolTxXJgBA\n2A8btp083UQAxrXmkhM3QMHA5B6sxgQ3QwKixspTXKRAyia4oJp1rxKGxF901A4=\n=HqCY\n-----END PGP SIGNATURE-----\n", "payload": "tree 86f1b44509075a54f0887d56fe84e8ae42df5766\nparent c6ed08967193cadc927dfaf422601bcd160a6fc9\nparent 68db49c8534fa99768c7f600455ea76176f61994\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1589787884 +0000\ncommitter GitHub <noreply@github.com> 1589787884 +0000\n\nMerge #4493\n\n4493: Provide builtin impls of Fn traits for fn-pointers r=flodiebold a=hban\n\nMeant to be, but isn't actually a fix for #2880.\r\n\r\nConsider this snippet:\r\n\r\n```rust\r\nuse std::marker::PhantomData;\r\nuse std::ops::Deref;\r\n\r\nstruct Lazy<T, F/* = fn() -> T*/>(F, PhantomData<T>);\r\n\r\nimpl<T, F> Lazy<T, F> {\r\n    pub fn new(f: F) -> Lazy<T, F> {\r\n        Lazy(f, PhantomData)\r\n    }\r\n}\r\n\r\nimpl<T, F: FnOnce() -> T> Deref for Lazy<T, F> {\r\n    type Target = T;\r\n\r\n    fn deref(&self) -> &T { todo!() }\r\n}\r\n\r\nfn test() {\r\n    let lazy1: Lazy<u32, _> = Lazy::new(|| 0u32);\r\n    let r1 = lazy1.to_string();\r\n\r\n    fn make_u32_fn() -> u32 { todo!() }\r\n    let make_u32_fn_ptr: fn() -> u32 = make_u32_fn;\r\n    let lazy2: Lazy<u32, _> = Lazy::new(make_u32_fn_ptr);\r\n    let r2 = lazy2.to_string();\r\n}\r\n```\r\n\r\n* On current master:\r\n  * When type default is commented-out, `r1` is correctly inferred, `r2` in _{unknown}_.\r\n  * When type default is not commented-out, both `r1`  and `r2` are _{unknown}_.\r\n* With this PR:\r\n  * When type default is commented-out, both `r1` and `r2` are correctly inferred.\r\n  * When type default is not commented-out, both `r1`  and `r2` are _{unknown}_.\r\n\r\nWell, it's a improvement at least. I guess this thing with type defaults is a different problem.\r\n\r\nI also tried add Fn impls for fn items, but wasn't successful. So this PR only adds those impls for fn pointers.\n\nCo-authored-by: Hrvoje Ban <hban@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad03e4de185f0f19ae75a8a9c4095ee1b0d82a47", "html_url": "https://github.com/rust-lang/rust/commit/ad03e4de185f0f19ae75a8a9c4095ee1b0d82a47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad03e4de185f0f19ae75a8a9c4095ee1b0d82a47/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6ed08967193cadc927dfaf422601bcd160a6fc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6ed08967193cadc927dfaf422601bcd160a6fc9", "html_url": "https://github.com/rust-lang/rust/commit/c6ed08967193cadc927dfaf422601bcd160a6fc9"}, {"sha": "68db49c8534fa99768c7f600455ea76176f61994", "url": "https://api.github.com/repos/rust-lang/rust/commits/68db49c8534fa99768c7f600455ea76176f61994", "html_url": "https://github.com/rust-lang/rust/commit/68db49c8534fa99768c7f600455ea76176f61994"}], "stats": {"total": 132, "additions": 132, "deletions": 0}, "files": [{"sha": "c49aacf98d444a65f96a563dcbe64d4889d64c80", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/ad03e4de185f0f19ae75a8a9c4095ee1b0d82a47/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad03e4de185f0f19ae75a8a9c4095ee1b0d82a47/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=ad03e4de185f0f19ae75a8a9c4095ee1b0d82a47", "patch": "@@ -1616,6 +1616,138 @@ fn test<F: FnOnce(u32, u64) -> u128>(f: F) {\n     );\n }\n \n+#[test]\n+fn fn_ptr_and_item() {\n+    assert_snapshot!(\n+        infer(r#\"\n+#[lang=\"fn_once\"]\n+trait FnOnce<Args> {\n+    type Output;\n+\n+    fn call_once(self, args: Args) -> Self::Output;\n+}\n+\n+trait Foo<T> {\n+    fn foo(&self) -> T;\n+}\n+\n+struct Bar<T>(T);\n+\n+impl<A1, R, F: FnOnce(A1) -> R> Foo<(A1, R)> for Bar<F> {\n+    fn foo(&self) -> (A1, R) {}\n+}\n+\n+enum Opt<T> { None, Some(T) }\n+impl<T> Opt<T> {\n+    fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Opt<U> {}\n+}\n+\n+fn test() {\n+    let bar: Bar<fn(u8) -> u32>;\n+    bar.foo();\n+\n+    let opt: Opt<u8>;\n+    let f: fn(u8) -> u32;\n+    opt.map(f);\n+}\n+\"#),\n+        @r###\"\n+75..79 'self': Self\n+81..85 'args': Args\n+140..144 'self': &Self\n+244..248 'self': &Bar<F>\n+261..263 '{}': ()\n+347..351 'self': Opt<T>\n+353..354 'f': F\n+369..371 '{}': ()\n+385..501 '{     ...(f); }': ()\n+395..398 'bar': Bar<fn(u8) -> u32>\n+424..427 'bar': Bar<fn(u8) -> u32>\n+424..433 'bar.foo()': {unknown}\n+444..447 'opt': Opt<u8>\n+466..467 'f': fn(u8) -> u32\n+488..491 'opt': Opt<u8>\n+488..498 'opt.map(f)': Opt<FnOnce::Output<fn(u8) -> u32, (u8,)>>\n+496..497 'f': fn(u8) -> u32\n+\"###\n+    );\n+}\n+\n+#[test]\n+fn fn_trait_deref_with_ty_default() {\n+    assert_snapshot!(\n+        infer(r#\"\n+#[lang = \"deref\"]\n+trait Deref {\n+    type Target;\n+\n+    fn deref(&self) -> &Self::Target;\n+}\n+\n+#[lang=\"fn_once\"]\n+trait FnOnce<Args> {\n+    type Output;\n+\n+    fn call_once(self, args: Args) -> Self::Output;\n+}\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn foo(&self) -> usize {}\n+}\n+\n+struct Lazy<T, F = fn() -> T>(F);\n+\n+impl<T, F> Lazy<T, F> {\n+    pub fn new(f: F) -> Lazy<T, F> {}\n+}\n+\n+impl<T, F: FnOnce() -> T> Deref for Lazy<T, F> {\n+    type Target = T;\n+}\n+\n+fn test() {\n+    let lazy1: Lazy<Foo, _> = Lazy::new(|| Foo);\n+    let r1 = lazy1.foo();\n+\n+    fn make_foo_fn() -> Foo {}\n+    let make_foo_fn_ptr: fn() -> Foo = make_foo_fn;\n+    let lazy2: Lazy<Foo, _> = Lazy::new(make_foo_fn_ptr);\n+    let r2 = lazy2.foo();\n+}\n+\"#),\n+        @r###\"\n+65..69 'self': &Self\n+166..170 'self': Self\n+172..176 'args': Args\n+240..244 'self': &Foo\n+255..257 '{}': ()\n+335..336 'f': F\n+355..357 '{}': ()\n+444..690 '{     ...o(); }': ()\n+454..459 'lazy1': Lazy<Foo, fn() -> T>\n+476..485 'Lazy::new': fn new<Foo, fn() -> T>(fn() -> T) -> Lazy<Foo, fn() -> T>\n+476..493 'Lazy::...| Foo)': Lazy<Foo, fn() -> T>\n+486..492 '|| Foo': || -> T\n+489..492 'Foo': Foo\n+503..505 'r1': {unknown}\n+508..513 'lazy1': Lazy<Foo, fn() -> T>\n+508..519 'lazy1.foo()': {unknown}\n+561..576 'make_foo_fn_ptr': fn() -> Foo\n+592..603 'make_foo_fn': fn make_foo_fn() -> Foo\n+613..618 'lazy2': Lazy<Foo, fn() -> T>\n+635..644 'Lazy::new': fn new<Foo, fn() -> T>(fn() -> T) -> Lazy<Foo, fn() -> T>\n+635..661 'Lazy::...n_ptr)': Lazy<Foo, fn() -> T>\n+645..660 'make_foo_fn_ptr': fn() -> Foo\n+671..673 'r2': {unknown}\n+676..681 'lazy2': Lazy<Foo, fn() -> T>\n+676..687 'lazy2.foo()': {unknown}\n+550..552 '{}': ()\n+\"###\n+    );\n+}\n+\n #[test]\n fn closure_1() {\n     assert_snapshot!("}]}