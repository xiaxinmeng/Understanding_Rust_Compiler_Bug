{"sha": "30f1bab7e6282a8e5ab644be15d12d5a5ca26e37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwZjFiYWI3ZTYyODJhOGU1YWI2NDRiZTE1ZDEyZDVhNWNhMjZlMzc=", "commit": {"author": {"name": "ecstatic-morse", "email": "ecstaticmorse@gmail.com", "date": "2020-09-22T03:40:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-22T03:40:47Z"}, "message": "Rollup merge of #76581 - lcnr:bound-too-generic, r=eddyb\n\ndo not ICE on bound variables, return `TooGeneric` instead\n\nfixes #73260, fixes #74634, fixes #76595\n\nr? @nikomatsakis", "tree": {"sha": "8d5cf84d047f236520e8db8a395ab6cd71e14da9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d5cf84d047f236520e8db8a395ab6cd71e14da9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30f1bab7e6282a8e5ab644be15d12d5a5ca26e37", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfaXJACRBK7hj4Ov3rIwAAdHIIAJ29M182fGm7n6GmOuYgUZ41\n/WyAaKRiahtdArZRoVCOktwfSIiubtfq5HIjlWjNazQTa5B/eN68aNN2VR01LGa9\n+FtGrf7KttdR7kByufX7I/i/q/yZftggZ/oOxnNuXLgDK8xongbHO6jpNfJ3jIEY\nkeTJmZDHKRidtKk8GqEc0CuqHYpg1fxRi94BstHCDBNM4ulA5yZPhnycsictIhAm\nrmpc740SSmyF3eO8ugIgq9w0qpUzKYR+TCTlpstRgOuASMzTmSNqmAjP3Pbe85Pv\nZQBSBSdH7r3rjtC1BeNG9+mLV8U200I8DF/nqMz6dyNahum5AqBL+Zr6Yd8eqpU=\n=D4yC\n-----END PGP SIGNATURE-----\n", "payload": "tree 8d5cf84d047f236520e8db8a395ab6cd71e14da9\nparent ef6c3a7bca4a629a06d230272f32b3cfab32eec6\nparent 65b3419ca04fdf921309e7fc03010d9d2cc9b8f0\nauthor ecstatic-morse <ecstaticmorse@gmail.com> 1600746047 -0700\ncommitter GitHub <noreply@github.com> 1600746047 -0700\n\nRollup merge of #76581 - lcnr:bound-too-generic, r=eddyb\n\ndo not ICE on bound variables, return `TooGeneric` instead\n\nfixes #73260, fixes #74634, fixes #76595\n\nr? @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30f1bab7e6282a8e5ab644be15d12d5a5ca26e37", "html_url": "https://github.com/rust-lang/rust/commit/30f1bab7e6282a8e5ab644be15d12d5a5ca26e37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30f1bab7e6282a8e5ab644be15d12d5a5ca26e37/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef6c3a7bca4a629a06d230272f32b3cfab32eec6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef6c3a7bca4a629a06d230272f32b3cfab32eec6", "html_url": "https://github.com/rust-lang/rust/commit/ef6c3a7bca4a629a06d230272f32b3cfab32eec6"}, {"sha": "65b3419ca04fdf921309e7fc03010d9d2cc9b8f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/65b3419ca04fdf921309e7fc03010d9d2cc9b8f0", "html_url": "https://github.com/rust-lang/rust/commit/65b3419ca04fdf921309e7fc03010d9d2cc9b8f0"}], "stats": {"total": 134, "additions": 128, "deletions": 6}, "files": [{"sha": "cb79b089d94a0156fd230f5234a59de330e764f0", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30f1bab7e6282a8e5ab644be15d12d5a5ca26e37/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30f1bab7e6282a8e5ab644be15d12d5a5ca26e37/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=30f1bab7e6282a8e5ab644be15d12d5a5ca26e37", "patch": "@@ -1259,11 +1259,11 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                 tcx.layout_raw(param_env.and(normalized))?\n             }\n \n-            ty::Bound(..) | ty::Placeholder(..) | ty::GeneratorWitness(..) | ty::Infer(_) => {\n+            ty::Placeholder(..) | ty::GeneratorWitness(..) | ty::Infer(_) => {\n                 bug!(\"Layout::compute: unexpected type `{}`\", ty)\n             }\n \n-            ty::Param(_) | ty::Error(_) => {\n+            ty::Bound(..) | ty::Param(_) | ty::Error(_) => {\n                 return Err(LayoutError::Unknown(ty));\n             }\n         })"}, {"sha": "735f890a33bdc495eadff14f607780900b216877", "filename": "compiler/rustc_mir/src/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30f1bab7e6282a8e5ab644be15d12d5a5ca26e37/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30f1bab7e6282a8e5ab644be15d12d5a5ca26e37/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs?ref=30f1bab7e6282a8e5ab644be15d12d5a5ca26e37", "patch": "@@ -549,15 +549,13 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         };\n         // Early-return cases.\n         let val_val = match val.val {\n-            ty::ConstKind::Param(_) => throw_inval!(TooGeneric),\n+            ty::ConstKind::Param(_) | ty::ConstKind::Bound(..) => throw_inval!(TooGeneric),\n             ty::ConstKind::Error(_) => throw_inval!(TypeckError(ErrorReported)),\n             ty::ConstKind::Unevaluated(def, substs, promoted) => {\n                 let instance = self.resolve(def, substs)?;\n                 return Ok(self.eval_to_allocation(GlobalId { instance, promoted })?.into());\n             }\n-            ty::ConstKind::Infer(..)\n-            | ty::ConstKind::Bound(..)\n-            | ty::ConstKind::Placeholder(..) => {\n+            ty::ConstKind::Infer(..) | ty::ConstKind::Placeholder(..) => {\n                 span_bug!(self.cur_span(), \"const_to_op: Unexpected ConstKind {:?}\", val)\n             }\n             ty::ConstKind::Value(val_val) => val_val,"}, {"sha": "351d6849af5db26a3214e8fc605a6721b53d9537", "filename": "src/test/ui/const-generics/issues/issue-73260.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/30f1bab7e6282a8e5ab644be15d12d5a5ca26e37/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73260.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30f1bab7e6282a8e5ab644be15d12d5a5ca26e37/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73260.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73260.rs?ref=30f1bab7e6282a8e5ab644be15d12d5a5ca26e37", "patch": "@@ -0,0 +1,20 @@\n+// compile-flags: -Zsave-analysis\n+\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+struct Arr<const N: usize>\n+where Assert::<{N < usize::max_value() / 2}>: IsTrue, //~ ERROR constant expression\n+{\n+}\n+\n+enum Assert<const CHECK: bool> {}\n+\n+trait IsTrue {}\n+\n+impl IsTrue for Assert<true> {}\n+\n+fn main() {\n+    let x: Arr<{usize::max_value()}> = Arr {};\n+    //~^ ERROR mismatched types\n+    //~| ERROR mismatched types\n+}"}, {"sha": "e22612ed5ea63ee9be0a6e2e029d9d03a0a65efa", "filename": "src/test/ui/const-generics/issues/issue-73260.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/30f1bab7e6282a8e5ab644be15d12d5a5ca26e37/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73260.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30f1bab7e6282a8e5ab644be15d12d5a5ca26e37/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73260.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73260.stderr?ref=30f1bab7e6282a8e5ab644be15d12d5a5ca26e37", "patch": "@@ -0,0 +1,29 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-73260.rs:6:47\n+   |\n+LL | where Assert::<{N < usize::max_value() / 2}>: IsTrue,\n+   |                                               ^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-73260.rs:17:12\n+   |\n+LL |     let x: Arr<{usize::max_value()}> = Arr {};\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `false`, found `true`\n+   |\n+   = note: expected type `false`\n+              found type `true`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-73260.rs:17:40\n+   |\n+LL |     let x: Arr<{usize::max_value()}> = Arr {};\n+   |                                        ^^^ expected `false`, found `true`\n+   |\n+   = note: expected type `false`\n+              found type `true`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "0f23fa92c367967655b73ee5567d8b8d1044df50", "filename": "src/test/ui/const-generics/issues/issue-74634.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/30f1bab7e6282a8e5ab644be15d12d5a5ca26e37/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74634.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30f1bab7e6282a8e5ab644be15d12d5a5ca26e37/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74634.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74634.rs?ref=30f1bab7e6282a8e5ab644be15d12d5a5ca26e37", "patch": "@@ -0,0 +1,27 @@\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+trait If<const COND: bool> {}\n+impl If<true> for () {}\n+\n+trait IsZero<const N: u8> {\n+    type Answer;\n+}\n+\n+struct True;\n+struct False;\n+\n+impl<const N: u8> IsZero<N> for ()\n+where (): If<{N == 0}> { //~ERROR constant expression\n+    type Answer = True;\n+}\n+\n+trait Foobar<const N: u8> {}\n+\n+impl<const N: u8> Foobar<N> for ()\n+where (): IsZero<N, Answer = True> {}\n+\n+impl<const N: u8> Foobar<N> for ()\n+where (): IsZero<N, Answer = False> {}\n+\n+fn main() {}"}, {"sha": "091a1ac7b9981bd804bfa6b221ffd5c8e497c937", "filename": "src/test/ui/const-generics/issues/issue-74634.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30f1bab7e6282a8e5ab644be15d12d5a5ca26e37/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74634.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30f1bab7e6282a8e5ab644be15d12d5a5ca26e37/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74634.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74634.stderr?ref=30f1bab7e6282a8e5ab644be15d12d5a5ca26e37", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-74634.rs:15:11\n+   |\n+LL | where (): If<{N == 0}> {\n+   |           ^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "0a16ca181f557ea3f90f988c620e8f500aed1d67", "filename": "src/test/ui/const-generics/issues/issue-76595.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/30f1bab7e6282a8e5ab644be15d12d5a5ca26e37/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76595.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30f1bab7e6282a8e5ab644be15d12d5a5ca26e37/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76595.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76595.rs?ref=30f1bab7e6282a8e5ab644be15d12d5a5ca26e37", "patch": "@@ -0,0 +1,18 @@\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+struct Bool<const B: bool>;\n+\n+trait True {}\n+\n+impl True for Bool<true> {}\n+\n+fn test<T, const P: usize>() where Bool<{core::mem::size_of::<T>() > 4}>: True {\n+    todo!()\n+}\n+\n+fn main() {\n+    test::<2>();\n+    //~^ ERROR wrong number of type\n+    //~| ERROR constant expression depends\n+}"}, {"sha": "2e457595393ca6e65d79cc5520836ce4ffe093ea", "filename": "src/test/ui/const-generics/issues/issue-76595.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/30f1bab7e6282a8e5ab644be15d12d5a5ca26e37/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76595.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/30f1bab7e6282a8e5ab644be15d12d5a5ca26e37/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76595.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76595.stderr?ref=30f1bab7e6282a8e5ab644be15d12d5a5ca26e37", "patch": "@@ -0,0 +1,20 @@\n+error[E0107]: wrong number of type arguments: expected 1, found 0\n+  --> $DIR/issue-76595.rs:15:5\n+   |\n+LL |     test::<2>();\n+   |     ^^^^^^^^^ expected 1 type argument\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-76595.rs:15:5\n+   |\n+LL | fn test<T, const P: usize>() where Bool<{core::mem::size_of::<T>() > 4}>: True {\n+   |                                                                           ---- required by this bound in `test`\n+...\n+LL |     test::<2>();\n+   |     ^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0107`."}]}