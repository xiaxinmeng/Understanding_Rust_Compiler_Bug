{"sha": "95182bb2ccff3ba7cd4fe1e09488ab1fd6411244", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MTgyYmIyY2NmZjNiYTdjZDRmZTFlMDk0ODhhYjFmZDY0MTEyNDQ=", "commit": {"author": {"name": "katelyn a. martin", "email": "me+rustlang@katelyn.world", "date": "2020-08-27T15:49:18Z"}, "committer": {"name": "katelyn a. martin", "email": "me+rustlang@katelyn.world", "date": "2021-03-09T19:38:29Z"}, "message": "rustc_target: add \"unwind\" payloads to `Abi`\n\n ### Overview\n\n    This commit begins the implementation work for RFC 2945. For more\n    information, see the rendered RFC [1] and tracking issue [2].\n\n    A boolean `unwind` payload is added to the `C`, `System`, `Stdcall`,\n    and `Thiscall` variants, marking whether unwinding across FFI\n    boundaries is acceptable. The cases where each of these variants'\n    `unwind` member is true correspond with the `C-unwind`,\n    `system-unwind`, `stdcall-unwind`, and `thiscall-unwind` ABI strings\n    introduced in RFC 2945 [3].\n\n ### Feature Gate and Unstable Book\n\n    This commit adds a `c_unwind` feature gate for the new ABI strings.\n    Tests for this feature gate are included in `src/test/ui/c-unwind/`,\n    which ensure that this feature gate works correctly for each of the\n    new ABIs.\n\n    A new language features entry in the unstable book is added as well.\n\n ### Further Work To Be Done\n\n    This commit does not proceed to implement the new unwinding ABIs,\n    and is intentionally scoped specifically to *defining* the ABIs and\n    their feature flag.\n\n ### One Note on Test Churn\n\n    This will lead to some test churn, in re-blessing hash tests, as the\n    deleted comment in `src/librustc_target/spec/abi.rs` mentioned,\n    because we can no longer guarantee the ordering of the `Abi`\n    variants.\n\n    While this is a downside, this decision was made bearing in mind\n    that RFC 2945 states the following, in the \"Other `unwind` Strings\"\n    section [3]:\n\n    >  More unwind variants of existing ABI strings may be introduced,\n    >  with the same semantics, without an additional RFC.\n\n    Adding a new variant for each of these cases, rather than specifying\n    a payload for a given ABI, would quickly become untenable, and make\n    working with the `Abi` enum prone to mistakes.\n\n    This approach encodes the unwinding information *into* a given ABI,\n    to account for the future possibility of other `-unwind` ABI\n    strings.\n\n ### Ignore Directives\n\n    `ignore-*` directives are used in two of our `*-unwind` ABI test\n    cases.\n\n    Specifically, the `stdcall-unwind` and `thiscall-unwind` test cases\n    ignore architectures that do not support `stdcall` and\n    `thiscall`, respectively.\n\n    These directives are cribbed from\n    `src/test/ui/c-variadic/variadic-ffi-1.rs` for `stdcall`, and\n    `src/test/ui/extern/extern-thiscall.rs` for `thiscall`.\n\n    This would otherwise fail on some targets, see:\n    https://github.com/rust-lang-ci/rust/commit/fcf697f90206e9c87b39d494f94ab35d976bfc60\n\n ### Footnotes\n\n[1]: https://github.com/rust-lang/rfcs/blob/master/text/2945-c-unwind-abi.md\n[2]: https://github.com/rust-lang/rust/issues/74990\n[3]: https://github.com/rust-lang/rfcs/blob/master/text/2945-c-unwind-abi.md#other-unwind-abi-strings", "tree": {"sha": "ae39028b228ed40f2f5fb9dbbf69c102e253fbd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae39028b228ed40f2f5fb9dbbf69c102e253fbd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95182bb2ccff3ba7cd4fe1e09488ab1fd6411244", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95182bb2ccff3ba7cd4fe1e09488ab1fd6411244", "html_url": "https://github.com/rust-lang/rust/commit/95182bb2ccff3ba7cd4fe1e09488ab1fd6411244", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95182bb2ccff3ba7cd4fe1e09488ab1fd6411244/comments", "author": null, "committer": null, "parents": [{"sha": "7f020206e8f57dbf31b4ef3f7066d49e1bd19fbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f020206e8f57dbf31b4ef3f7066d49e1bd19fbb", "html_url": "https://github.com/rust-lang/rust/commit/7f020206e8f57dbf31b4ef3f7066d49e1bd19fbb"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "b158d73f3a1a89cbcc566dbfd2f2d75f7569792b", "filename": "src/abi/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/95182bb2ccff3ba7cd4fe1e09488ab1fd6411244/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95182bb2ccff3ba7cd4fe1e09488ab1fd6411244/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=95182bb2ccff3ba7cd4fe1e09488ab1fd6411244", "patch": "@@ -476,8 +476,11 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n \n     // FIXME find a cleaner way to support varargs\n     if fn_sig.c_variadic {\n-        if fn_sig.abi != Abi::C {\n-            fx.tcx.sess.span_fatal(span, &format!(\"Variadic call for non-C abi {:?}\", fn_sig.abi));\n+        if !matches!(fn_sig.abi, Abi::C { .. }) {\n+            fx.tcx.sess.span_fatal(\n+                span,\n+                &format!(\"Variadic call for non-C abi {:?}\", fn_sig.abi),\n+            );\n         }\n         let sig_ref = fx.bcx.func.dfg.call_signature(call_inst).unwrap();\n         let abi_params = call_args"}]}