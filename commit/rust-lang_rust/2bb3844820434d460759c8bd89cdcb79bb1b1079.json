{"sha": "2bb3844820434d460759c8bd89cdcb79bb1b1079", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYjM4NDQ4MjA0MzRkNDYwNzU5YzhiZDg5Y2RjYjc5YmIxYjEwNzk=", "commit": {"author": {"name": "Simon Vandel Sillesen", "email": "simon.vandel@gmail.com", "date": "2020-09-13T20:38:36Z"}, "committer": {"name": "Simon Vandel Sillesen", "email": "simon.vandel@gmail.com", "date": "2020-09-21T20:08:27Z"}, "message": "Add optimization to avoid load of address", "tree": {"sha": "9b44509cf35761e07831b03fdc6df793d105cc26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b44509cf35761e07831b03fdc6df793d105cc26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bb3844820434d460759c8bd89cdcb79bb1b1079", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bb3844820434d460759c8bd89cdcb79bb1b1079", "html_url": "https://github.com/rust-lang/rust/commit/2bb3844820434d460759c8bd89cdcb79bb1b1079", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bb3844820434d460759c8bd89cdcb79bb1b1079/comments", "author": {"login": "simonvandel", "id": 2770647, "node_id": "MDQ6VXNlcjI3NzA2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2770647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simonvandel", "html_url": "https://github.com/simonvandel", "followers_url": "https://api.github.com/users/simonvandel/followers", "following_url": "https://api.github.com/users/simonvandel/following{/other_user}", "gists_url": "https://api.github.com/users/simonvandel/gists{/gist_id}", "starred_url": "https://api.github.com/users/simonvandel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simonvandel/subscriptions", "organizations_url": "https://api.github.com/users/simonvandel/orgs", "repos_url": "https://api.github.com/users/simonvandel/repos", "events_url": "https://api.github.com/users/simonvandel/events{/privacy}", "received_events_url": "https://api.github.com/users/simonvandel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "simonvandel", "id": 2770647, "node_id": "MDQ6VXNlcjI3NzA2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2770647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simonvandel", "html_url": "https://github.com/simonvandel", "followers_url": "https://api.github.com/users/simonvandel/followers", "following_url": "https://api.github.com/users/simonvandel/following{/other_user}", "gists_url": "https://api.github.com/users/simonvandel/gists{/gist_id}", "starred_url": "https://api.github.com/users/simonvandel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simonvandel/subscriptions", "organizations_url": "https://api.github.com/users/simonvandel/orgs", "repos_url": "https://api.github.com/users/simonvandel/repos", "events_url": "https://api.github.com/users/simonvandel/events{/privacy}", "received_events_url": "https://api.github.com/users/simonvandel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b01326ab033e41986d4a5c8b96ce4f40f3b38e30", "url": "https://api.github.com/repos/rust-lang/rust/commits/b01326ab033e41986d4a5c8b96ce4f40f3b38e30", "html_url": "https://github.com/rust-lang/rust/commit/b01326ab033e41986d4a5c8b96ce4f40f3b38e30"}], "stats": {"total": 517, "additions": 505, "deletions": 12}, "files": [{"sha": "3ed0aea1404d48cf24e2cce73d95f241b1e7a4e6", "filename": "compiler/rustc_mir/src/transform/instcombine.rs", "status": "modified", "additions": 115, "deletions": 2, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/2bb3844820434d460759c8bd89cdcb79bb1b1079/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb3844820434d460759c8bd89cdcb79bb1b1079/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstcombine.rs?ref=2bb3844820434d460759c8bd89cdcb79bb1b1079", "patch": "@@ -4,9 +4,14 @@ use crate::transform::{MirPass, MirSource};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::Mutability;\n use rustc_index::vec::Idx;\n-use rustc_middle::mir::visit::{MutVisitor, Visitor};\n use rustc_middle::mir::{\n-    BinOp, Body, Constant, Local, Location, Operand, Place, PlaceRef, ProjectionElem, Rvalue,\n+    visit::PlaceContext,\n+    visit::{MutVisitor, Visitor},\n+    Statement,\n+};\n+use rustc_middle::mir::{\n+    BinOp, Body, BorrowKind, Constant, Local, Location, Operand, Place, PlaceRef, ProjectionElem,\n+    Rvalue,\n };\n use rustc_middle::ty::{self, TyCtxt};\n use std::mem;\n@@ -71,10 +76,36 @@ impl<'tcx> MutVisitor<'tcx> for InstCombineVisitor<'tcx> {\n             *rvalue = Rvalue::Use(operand);\n         }\n \n+        if let Some(place) = self.optimizations.unneeded_deref.remove(&location) {\n+            debug!(\"unneeded_deref: replacing {:?} with {:?}\", rvalue, place);\n+            *rvalue = Rvalue::Use(Operand::Copy(place));\n+        }\n+\n         self.super_rvalue(rvalue, location)\n     }\n }\n \n+struct MutatingUseVisitor {\n+    has_mutating_use: bool,\n+    local_to_look_for: Local,\n+}\n+\n+impl MutatingUseVisitor {\n+    fn has_mutating_use_in_stmt(local: Local, stmt: &Statement<'tcx>, location: Location) -> bool {\n+        let mut _self = Self { has_mutating_use: false, local_to_look_for: local };\n+        _self.visit_statement(stmt, location);\n+        _self.has_mutating_use\n+    }\n+}\n+\n+impl<'tcx> Visitor<'tcx> for MutatingUseVisitor {\n+    fn visit_local(&mut self, local: &Local, context: PlaceContext, _: Location) {\n+        if *local == self.local_to_look_for {\n+            self.has_mutating_use |= context.is_mutating_use();\n+        }\n+    }\n+}\n+\n /// Finds optimization opportunities on the MIR.\n struct OptimizationFinder<'b, 'tcx> {\n     body: &'b Body<'tcx>,\n@@ -87,6 +118,85 @@ impl OptimizationFinder<'b, 'tcx> {\n         OptimizationFinder { body, tcx, optimizations: OptimizationList::default() }\n     }\n \n+    fn find_deref_of_address(&mut self, rvalue: &Rvalue<'tcx>, location: Location) -> Option<()> {\n+        // Look for the sequence\n+        //\n+        // _2 = &_1;\n+        // ...\n+        // _5 = (*_2);\n+        //\n+        // which we can replace the last statement with `_5 = _1;` to avoid the load of `_2`.\n+        if let Rvalue::Use(op) = rvalue {\n+            let local_being_derefed = match op.place()?.as_ref() {\n+                PlaceRef { local, projection: [ProjectionElem::Deref] } => Some(local),\n+                _ => None,\n+            }?;\n+\n+            let stmt_index = location.statement_index;\n+            // Look behind for statement that assigns the local from a address of operator.\n+            // 6 is chosen as a heuristic determined by seeing the number of times\n+            // the optimization kicked in compiling rust std.\n+            let lower_index = stmt_index.saturating_sub(6);\n+            let statements_to_look_in = self.body.basic_blocks()[location.block].statements\n+                [lower_index..stmt_index]\n+                .iter()\n+                .rev();\n+            for stmt in statements_to_look_in {\n+                match &stmt.kind {\n+                    // Exhaustive match on statements to detect conditions that warrant we bail out of the optimization.\n+                    rustc_middle::mir::StatementKind::Assign(box (l, r))\n+                        if l.local == local_being_derefed =>\n+                    {\n+                        match r {\n+                            // Looking for immutable reference e.g _local_being_deref = &_1;\n+                            Rvalue::Ref(\n+                                _,\n+                                // Only apply the optimization if it is an immutable borrow.\n+                                BorrowKind::Shared,\n+                                place_taken_address_of,\n+                            ) => {\n+                                self.optimizations\n+                                    .unneeded_deref\n+                                    .insert(location, *place_taken_address_of);\n+                                return Some(());\n+                            }\n+\n+                            // We found an assignment of `local_being_deref` that is not an immutable ref, e.g the following sequence\n+                            // _2 = &_1;\n+                            // _3 = &5\n+                            // _2 = _3;  <-- this means it is no longer valid to replace the last statement with `_5 = _1;`\n+                            // _5 = (*_2);\n+                            _ => return None,\n+                        }\n+                    }\n+\n+                    // Inline asm can do anything, so bail out of the optimization.\n+                    rustc_middle::mir::StatementKind::LlvmInlineAsm(_) => return None,\n+\n+                    // Check that `local_being_deref` is not being used in a mutating way which can cause misoptimization.\n+                    rustc_middle::mir::StatementKind::Assign(box (_, _))\n+                    | rustc_middle::mir::StatementKind::Coverage(_)\n+                    | rustc_middle::mir::StatementKind::Nop\n+                    | rustc_middle::mir::StatementKind::FakeRead(_, _)\n+                    | rustc_middle::mir::StatementKind::StorageLive(_)\n+                    | rustc_middle::mir::StatementKind::StorageDead(_)\n+                    | rustc_middle::mir::StatementKind::Retag(_, _)\n+                    | rustc_middle::mir::StatementKind::AscribeUserType(_, _)\n+                    | rustc_middle::mir::StatementKind::SetDiscriminant { .. } => {\n+                        if MutatingUseVisitor::has_mutating_use_in_stmt(\n+                            local_being_derefed,\n+                            stmt,\n+                            location,\n+                        ) {\n+                            return None;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        Some(())\n+    }\n+\n     fn find_unneeded_equality_comparison(&mut self, rvalue: &Rvalue<'tcx>, location: Location) {\n         // find Ne(_place, false) or Ne(false, _place)\n         // or   Eq(_place, true) or Eq(true, _place)\n@@ -153,6 +263,8 @@ impl Visitor<'tcx> for OptimizationFinder<'b, 'tcx> {\n             }\n         }\n \n+        let _ = self.find_deref_of_address(rvalue, location);\n+\n         self.find_unneeded_equality_comparison(rvalue, location);\n \n         self.super_rvalue(rvalue, location)\n@@ -164,4 +276,5 @@ struct OptimizationList<'tcx> {\n     and_stars: FxHashSet<Location>,\n     arrays_lengths: FxHashMap<Location, Constant<'tcx>>,\n     unneeded_equality_comparison: FxHashMap<Location, Operand<'tcx>>,\n+    unneeded_deref: FxHashMap<Location, Place<'tcx>>,\n }"}, {"sha": "e8168c98f0bcd2192976a79bc6026f33bd48b828", "filename": "src/test/mir-opt/const_prop/ref_deref.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bb3844820434d460759c8bd89cdcb79bb1b1079/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2bb3844820434d460759c8bd89cdcb79bb1b1079/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff?ref=2bb3844820434d460759c8bd89cdcb79bb1b1079", "patch": "@@ -19,7 +19,7 @@\n                                            // + span: $DIR/ref_deref.rs:5:6: 5:10\n                                            // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n           _2 = _4;                         // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n--         _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n+-         _1 = (*_4);                      // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n +         _1 = const 4_i32;                // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n           StorageDead(_2);                 // scope 0 at $DIR/ref_deref.rs:5:10: 5:11\n           StorageDead(_1);                 // scope 0 at $DIR/ref_deref.rs:5:10: 5:11"}, {"sha": "fd6388b95e477fc9d8f971dc23a3e44137cf60ca", "filename": "src/test/mir-opt/const_prop/ref_deref_project.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bb3844820434d460759c8bd89cdcb79bb1b1079/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2bb3844820434d460759c8bd89cdcb79bb1b1079/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff?ref=2bb3844820434d460759c8bd89cdcb79bb1b1079", "patch": "@@ -19,7 +19,7 @@\n                                            // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n                                            // + literal: Const { ty: &(i32, i32), val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n           _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n-          _1 = (*_2);                      // scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n+          _1 = ((*_4).1: i32);             // scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n           StorageDead(_2);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n           StorageDead(_1);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18\n           _0 = const ();                   // scope 0 at $DIR/ref_deref_project.rs:4:11: 6:2"}, {"sha": "c49e0218327dedc9659206375ae7afaa6867062d", "filename": "src/test/mir-opt/inline/inline_closure_borrows_arg.foo.Inline.after.mir", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2bb3844820434d460759c8bd89cdcb79bb1b1079/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2bb3844820434d460759c8bd89cdcb79bb1b1079/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir?ref=2bb3844820434d460759c8bd89cdcb79bb1b1079", "patch": "@@ -9,13 +9,14 @@ fn foo(_1: T, _2: &i32) -> i32 {\n     let mut _5: (&i32, &i32);            // in scope 0 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n     let mut _6: &i32;                    // in scope 0 at $DIR/inline-closure-borrows-arg.rs:16:7: 16:8\n     let mut _7: &i32;                    // in scope 0 at $DIR/inline-closure-borrows-arg.rs:16:10: 16:11\n-    let mut _8: &i32;                    // in scope 0 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n     let mut _9: &i32;                    // in scope 0 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+    let mut _10: &i32;                   // in scope 0 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n     scope 1 {\n         debug x => _3;                   // in scope 1 at $DIR/inline-closure-borrows-arg.rs:12:9: 12:10\n         scope 2 {\n-            debug r => _8;               // in scope 2 at $DIR/inline-closure-borrows-arg.rs:12:14: 12:15\n-            debug _s => _9;              // in scope 2 at $DIR/inline-closure-borrows-arg.rs:12:23: 12:25\n+            debug r => _9;               // in scope 2 at $DIR/inline-closure-borrows-arg.rs:12:14: 12:15\n+            debug _s => _10;             // in scope 2 at $DIR/inline-closure-borrows-arg.rs:12:23: 12:25\n+            let _8: &i32;                // in scope 2 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         }\n     }\n     scope 3 {\n@@ -33,13 +34,16 @@ fn foo(_1: T, _2: &i32) -> i32 {\n         _7 = &(*_2);                     // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:10: 16:11\n         (_5.0: &i32) = move _6;          // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         (_5.1: &i32) = move _7;          // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-        StorageLive(_8);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-        _8 = move (_5.0: &i32);          // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         StorageLive(_9);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-        _9 = move (_5.1: &i32);          // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-        _0 = (*_8);                      // scope 3 at $DIR/inline-closure-borrows-arg.rs:14:9: 14:18\n+        _9 = move (_5.0: &i32);          // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+        StorageLive(_10);                // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+        _10 = move (_5.1: &i32);         // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+        StorageLive(_8);                 // scope 2 at $DIR/inline-closure-borrows-arg.rs:13:13: 13:21\n+        _8 = _9;                         // scope 2 at $DIR/inline-closure-borrows-arg.rs:13:24: 13:27\n+        _0 = (*_9);                      // scope 3 at $DIR/inline-closure-borrows-arg.rs:14:9: 14:18\n+        StorageDead(_8);                 // scope 2 at $DIR/inline-closure-borrows-arg.rs:15:5: 15:6\n+        StorageDead(_10);                // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         StorageDead(_9);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n-        StorageDead(_8);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         StorageDead(_7);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:11: 16:12\n         StorageDead(_6);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:11: 16:12\n         StorageDead(_5);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:11: 16:12"}, {"sha": "dad98044756bd9d60db3a1b9ec9d05074cf42be0", "filename": "src/test/mir-opt/inst_combine_deref.deep_opt.InstCombine.diff", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/2bb3844820434d460759c8bd89cdcb79bb1b1079/src%2Ftest%2Fmir-opt%2Finst_combine_deref.deep_opt.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2bb3844820434d460759c8bd89cdcb79bb1b1079/src%2Ftest%2Fmir-opt%2Finst_combine_deref.deep_opt.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finst_combine_deref.deep_opt.InstCombine.diff?ref=2bb3844820434d460759c8bd89cdcb79bb1b1079", "patch": "@@ -0,0 +1,92 @@\n+- // MIR for `deep_opt` before InstCombine\n++ // MIR for `deep_opt` after InstCombine\n+  \n+  fn deep_opt() -> (u64, u64, u64) {\n+      let mut _0: (u64, u64, u64);         // return place in scope 0 at $DIR/inst_combine_deref.rs:10:18: 10:33\n+      let _1: u64;                         // in scope 0 at $DIR/inst_combine_deref.rs:11:9: 11:11\n+      let mut _10: u64;                    // in scope 0 at $DIR/inst_combine_deref.rs:20:6: 20:8\n+      let mut _11: u64;                    // in scope 0 at $DIR/inst_combine_deref.rs:20:10: 20:12\n+      let mut _12: u64;                    // in scope 0 at $DIR/inst_combine_deref.rs:20:14: 20:16\n+      scope 1 {\n+          debug x1 => _1;                  // in scope 1 at $DIR/inst_combine_deref.rs:11:9: 11:11\n+          let _2: u64;                     // in scope 1 at $DIR/inst_combine_deref.rs:12:9: 12:11\n+          scope 2 {\n+              debug x2 => _2;              // in scope 2 at $DIR/inst_combine_deref.rs:12:9: 12:11\n+              let _3: u64;                 // in scope 2 at $DIR/inst_combine_deref.rs:13:9: 13:11\n+              scope 3 {\n+                  debug x3 => _3;          // in scope 3 at $DIR/inst_combine_deref.rs:13:9: 13:11\n+                  let _4: &u64;            // in scope 3 at $DIR/inst_combine_deref.rs:14:9: 14:11\n+                  scope 4 {\n+                      debug y1 => _4;      // in scope 4 at $DIR/inst_combine_deref.rs:14:9: 14:11\n+                      let _5: &u64;        // in scope 4 at $DIR/inst_combine_deref.rs:15:9: 15:11\n+                      scope 5 {\n+                          debug y2 => _5;  // in scope 5 at $DIR/inst_combine_deref.rs:15:9: 15:11\n+                          let _6: &u64;    // in scope 5 at $DIR/inst_combine_deref.rs:16:9: 16:11\n+                          scope 6 {\n+                              debug y3 => _6; // in scope 6 at $DIR/inst_combine_deref.rs:16:9: 16:11\n+                              let _7: u64; // in scope 6 at $DIR/inst_combine_deref.rs:17:9: 17:11\n+                              scope 7 {\n+                                  debug z1 => _7; // in scope 7 at $DIR/inst_combine_deref.rs:17:9: 17:11\n+                                  let _8: u64; // in scope 7 at $DIR/inst_combine_deref.rs:18:9: 18:11\n+                                  scope 8 {\n+                                      debug z2 => _8; // in scope 8 at $DIR/inst_combine_deref.rs:18:9: 18:11\n+                                      let _9: u64; // in scope 8 at $DIR/inst_combine_deref.rs:19:9: 19:11\n+                                      scope 9 {\n+                                          debug z3 => _9; // in scope 9 at $DIR/inst_combine_deref.rs:19:9: 19:11\n+                                      }\n+                                  }\n+                              }\n+                          }\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/inst_combine_deref.rs:11:9: 11:11\n+          _1 = const 1_u64;                // scope 0 at $DIR/inst_combine_deref.rs:11:14: 11:15\n+          StorageLive(_2);                 // scope 1 at $DIR/inst_combine_deref.rs:12:9: 12:11\n+          _2 = const 2_u64;                // scope 1 at $DIR/inst_combine_deref.rs:12:14: 12:15\n+          StorageLive(_3);                 // scope 2 at $DIR/inst_combine_deref.rs:13:9: 13:11\n+          _3 = const 3_u64;                // scope 2 at $DIR/inst_combine_deref.rs:13:14: 13:15\n+          StorageLive(_4);                 // scope 3 at $DIR/inst_combine_deref.rs:14:9: 14:11\n+          _4 = &_1;                        // scope 3 at $DIR/inst_combine_deref.rs:14:14: 14:17\n+          StorageLive(_5);                 // scope 4 at $DIR/inst_combine_deref.rs:15:9: 15:11\n+          _5 = &_2;                        // scope 4 at $DIR/inst_combine_deref.rs:15:14: 15:17\n+          StorageLive(_6);                 // scope 5 at $DIR/inst_combine_deref.rs:16:9: 16:11\n+          _6 = &_3;                        // scope 5 at $DIR/inst_combine_deref.rs:16:14: 16:17\n+          StorageLive(_7);                 // scope 6 at $DIR/inst_combine_deref.rs:17:9: 17:11\n+-         _7 = (*_4);                      // scope 6 at $DIR/inst_combine_deref.rs:17:14: 17:17\n++         _7 = _1;                         // scope 6 at $DIR/inst_combine_deref.rs:17:14: 17:17\n+          StorageLive(_8);                 // scope 7 at $DIR/inst_combine_deref.rs:18:9: 18:11\n+-         _8 = (*_5);                      // scope 7 at $DIR/inst_combine_deref.rs:18:14: 18:17\n++         _8 = _2;                         // scope 7 at $DIR/inst_combine_deref.rs:18:14: 18:17\n+          StorageLive(_9);                 // scope 8 at $DIR/inst_combine_deref.rs:19:9: 19:11\n+-         _9 = (*_6);                      // scope 8 at $DIR/inst_combine_deref.rs:19:14: 19:17\n++         _9 = _3;                         // scope 8 at $DIR/inst_combine_deref.rs:19:14: 19:17\n+          StorageLive(_10);                // scope 9 at $DIR/inst_combine_deref.rs:20:6: 20:8\n+          _10 = _7;                        // scope 9 at $DIR/inst_combine_deref.rs:20:6: 20:8\n+          StorageLive(_11);                // scope 9 at $DIR/inst_combine_deref.rs:20:10: 20:12\n+          _11 = _8;                        // scope 9 at $DIR/inst_combine_deref.rs:20:10: 20:12\n+          StorageLive(_12);                // scope 9 at $DIR/inst_combine_deref.rs:20:14: 20:16\n+          _12 = _9;                        // scope 9 at $DIR/inst_combine_deref.rs:20:14: 20:16\n+          (_0.0: u64) = move _10;          // scope 9 at $DIR/inst_combine_deref.rs:20:5: 20:17\n+          (_0.1: u64) = move _11;          // scope 9 at $DIR/inst_combine_deref.rs:20:5: 20:17\n+          (_0.2: u64) = move _12;          // scope 9 at $DIR/inst_combine_deref.rs:20:5: 20:17\n+          StorageDead(_12);                // scope 9 at $DIR/inst_combine_deref.rs:20:16: 20:17\n+          StorageDead(_11);                // scope 9 at $DIR/inst_combine_deref.rs:20:16: 20:17\n+          StorageDead(_10);                // scope 9 at $DIR/inst_combine_deref.rs:20:16: 20:17\n+          StorageDead(_9);                 // scope 8 at $DIR/inst_combine_deref.rs:21:1: 21:2\n+          StorageDead(_8);                 // scope 7 at $DIR/inst_combine_deref.rs:21:1: 21:2\n+          StorageDead(_7);                 // scope 6 at $DIR/inst_combine_deref.rs:21:1: 21:2\n+          StorageDead(_6);                 // scope 5 at $DIR/inst_combine_deref.rs:21:1: 21:2\n+          StorageDead(_5);                 // scope 4 at $DIR/inst_combine_deref.rs:21:1: 21:2\n+          StorageDead(_4);                 // scope 3 at $DIR/inst_combine_deref.rs:21:1: 21:2\n+          StorageDead(_3);                 // scope 2 at $DIR/inst_combine_deref.rs:21:1: 21:2\n+          StorageDead(_2);                 // scope 1 at $DIR/inst_combine_deref.rs:21:1: 21:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inst_combine_deref.rs:21:1: 21:2\n+          return;                          // scope 0 at $DIR/inst_combine_deref.rs:21:2: 21:2\n+      }\n+  }\n+  "}, {"sha": "c32bf256da408d3c339f8e242d8153cef4eff562", "filename": "src/test/mir-opt/inst_combine_deref.do_not_miscompile.InstCombine.diff", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/2bb3844820434d460759c8bd89cdcb79bb1b1079/src%2Ftest%2Fmir-opt%2Finst_combine_deref.do_not_miscompile.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2bb3844820434d460759c8bd89cdcb79bb1b1079/src%2Ftest%2Fmir-opt%2Finst_combine_deref.do_not_miscompile.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finst_combine_deref.do_not_miscompile.InstCombine.diff?ref=2bb3844820434d460759c8bd89cdcb79bb1b1079", "patch": "@@ -0,0 +1,85 @@\n+- // MIR for `do_not_miscompile` before InstCombine\n++ // MIR for `do_not_miscompile` after InstCombine\n+  \n+  fn do_not_miscompile() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inst_combine_deref.rs:53:24: 53:24\n+      let _1: i32;                         // in scope 0 at $DIR/inst_combine_deref.rs:54:9: 54:10\n+      let mut _5: &i32;                    // in scope 0 at $DIR/inst_combine_deref.rs:58:10: 58:12\n+      let _6: &i32;                        // in scope 0 at $DIR/inst_combine_deref.rs:58:10: 58:12\n+      let _7: ();                          // in scope 0 at $DIR/inst_combine_deref.rs:59:5: 59:23\n+      let mut _8: bool;                    // in scope 0 at $DIR/inst_combine_deref.rs:59:5: 59:23\n+      let mut _9: bool;                    // in scope 0 at $DIR/inst_combine_deref.rs:59:13: 59:21\n+      let mut _10: i32;                    // in scope 0 at $DIR/inst_combine_deref.rs:59:13: 59:15\n+      let mut _11: !;                      // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/inst_combine_deref.rs:54:9: 54:10\n+          let _2: i32;                     // in scope 1 at $DIR/inst_combine_deref.rs:55:9: 55:10\n+          scope 2 {\n+              debug a => _2;               // in scope 2 at $DIR/inst_combine_deref.rs:55:9: 55:10\n+              let mut _3: &i32;            // in scope 2 at $DIR/inst_combine_deref.rs:56:9: 56:14\n+              scope 3 {\n+                  debug y => _3;           // in scope 3 at $DIR/inst_combine_deref.rs:56:9: 56:14\n+                  let _4: &mut &i32;       // in scope 3 at $DIR/inst_combine_deref.rs:57:9: 57:10\n+                  scope 4 {\n+                      debug z => _4;       // in scope 4 at $DIR/inst_combine_deref.rs:57:9: 57:10\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/inst_combine_deref.rs:54:9: 54:10\n+          _1 = const 42_i32;               // scope 0 at $DIR/inst_combine_deref.rs:54:13: 54:15\n+          StorageLive(_2);                 // scope 1 at $DIR/inst_combine_deref.rs:55:9: 55:10\n+          _2 = const 99_i32;               // scope 1 at $DIR/inst_combine_deref.rs:55:13: 55:15\n+          StorageLive(_3);                 // scope 2 at $DIR/inst_combine_deref.rs:56:9: 56:14\n+          _3 = &_1;                        // scope 2 at $DIR/inst_combine_deref.rs:56:17: 56:19\n+          StorageLive(_4);                 // scope 3 at $DIR/inst_combine_deref.rs:57:9: 57:10\n+          _4 = &mut _3;                    // scope 3 at $DIR/inst_combine_deref.rs:57:13: 57:19\n+          StorageLive(_5);                 // scope 4 at $DIR/inst_combine_deref.rs:58:10: 58:12\n+          StorageLive(_6);                 // scope 4 at $DIR/inst_combine_deref.rs:58:10: 58:12\n+          _6 = &_2;                        // scope 4 at $DIR/inst_combine_deref.rs:58:10: 58:12\n+-         _5 = &(*_6);                     // scope 4 at $DIR/inst_combine_deref.rs:58:10: 58:12\n++         _5 = _6;                         // scope 4 at $DIR/inst_combine_deref.rs:58:10: 58:12\n+          (*_4) = move _5;                 // scope 4 at $DIR/inst_combine_deref.rs:58:5: 58:12\n+          StorageDead(_5);                 // scope 4 at $DIR/inst_combine_deref.rs:58:11: 58:12\n+          StorageDead(_6);                 // scope 4 at $DIR/inst_combine_deref.rs:58:12: 58:13\n+          StorageLive(_7);                 // scope 4 at $DIR/inst_combine_deref.rs:59:5: 59:23\n+          StorageLive(_8);                 // scope 4 at $DIR/inst_combine_deref.rs:59:5: 59:23\n+          StorageLive(_9);                 // scope 4 at $DIR/inst_combine_deref.rs:59:13: 59:21\n+          StorageLive(_10);                // scope 4 at $DIR/inst_combine_deref.rs:59:13: 59:15\n+          _10 = (*_3);                     // scope 4 at $DIR/inst_combine_deref.rs:59:13: 59:15\n+          _9 = Eq(move _10, const 99_i32); // scope 4 at $DIR/inst_combine_deref.rs:59:13: 59:21\n+          StorageDead(_10);                // scope 4 at $DIR/inst_combine_deref.rs:59:20: 59:21\n+          _8 = Not(move _9);               // scope 4 at $DIR/inst_combine_deref.rs:59:5: 59:23\n+          StorageDead(_9);                 // scope 4 at $DIR/inst_combine_deref.rs:59:22: 59:23\n+          switchInt(_8) -> [false: bb1, otherwise: bb2]; // scope 4 at $DIR/inst_combine_deref.rs:59:5: 59:23\n+      }\n+  \n+      bb1: {\n+          _7 = const ();                   // scope 4 at $DIR/inst_combine_deref.rs:59:5: 59:23\n+          StorageDead(_8);                 // scope 4 at $DIR/inst_combine_deref.rs:59:22: 59:23\n+          StorageDead(_7);                 // scope 4 at $DIR/inst_combine_deref.rs:59:22: 59:23\n+          _0 = const ();                   // scope 0 at $DIR/inst_combine_deref.rs:53:24: 60:2\n+          StorageDead(_4);                 // scope 3 at $DIR/inst_combine_deref.rs:60:1: 60:2\n+          StorageDead(_3);                 // scope 2 at $DIR/inst_combine_deref.rs:60:1: 60:2\n+          StorageDead(_2);                 // scope 1 at $DIR/inst_combine_deref.rs:60:1: 60:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inst_combine_deref.rs:60:1: 60:2\n+          return;                          // scope 0 at $DIR/inst_combine_deref.rs:60:2: 60:2\n+      }\n+  \n+      bb2: {\n+          StorageLive(_11);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          begin_panic::<&str>(const \"assertion failed: *y == 99\"); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n+                                           // + literal: Const { ty: fn(&str) -> ! {std::rt::begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }\n+                                           // ty::Const\n+                                           // + ty: &str\n+                                           // + val: Value(Slice { data: Allocation { bytes: [97, 115, 115, 101, 114, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 42, 121, 32, 61, 61, 32, 57, 57], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [67108863], len: Size { raw: 26 } }, size: Size { raw: 26 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 26 })\n+                                           // mir::Constant\n+                                           // + span: $DIR/inst_combine_deref.rs:1:1: 1:1\n+                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [97, 115, 115, 101, 114, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 42, 121, 32, 61, 61, 32, 57, 57], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [67108863], len: Size { raw: 26 } }, size: Size { raw: 26 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 26 }) }\n+      }\n+  }\n+  "}, {"sha": "668766714f93d4228d0a41f811f570138b73c2ea", "filename": "src/test/mir-opt/inst_combine_deref.dont_opt.InstCombine.diff", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/2bb3844820434d460759c8bd89cdcb79bb1b1079/src%2Ftest%2Fmir-opt%2Finst_combine_deref.dont_opt.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2bb3844820434d460759c8bd89cdcb79bb1b1079/src%2Ftest%2Fmir-opt%2Finst_combine_deref.dont_opt.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finst_combine_deref.dont_opt.InstCombine.diff?ref=2bb3844820434d460759c8bd89cdcb79bb1b1079", "patch": "@@ -0,0 +1,53 @@\n+- // MIR for `dont_opt` before InstCombine\n++ // MIR for `dont_opt` after InstCombine\n+  \n+  fn dont_opt() -> u64 {\n+      let mut _0: u64;                     // return place in scope 0 at $DIR/inst_combine_deref.rs:42:18: 42:21\n+      let _1: i32;                         // in scope 0 at $DIR/inst_combine_deref.rs:43:9: 43:10\n+      let mut _5: &i32;                    // in scope 0 at $DIR/inst_combine_deref.rs:47:10: 47:14\n+      scope 1 {\n+          debug y => _1;                   // in scope 1 at $DIR/inst_combine_deref.rs:43:9: 43:10\n+          let _2: &i32;                    // in scope 1 at $DIR/inst_combine_deref.rs:44:9: 44:13\n+          scope 2 {\n+              debug _ref => _2;            // in scope 2 at $DIR/inst_combine_deref.rs:44:9: 44:13\n+              let _3: i32;                 // in scope 2 at $DIR/inst_combine_deref.rs:45:9: 45:10\n+              scope 3 {\n+                  debug x => _3;           // in scope 3 at $DIR/inst_combine_deref.rs:45:9: 45:10\n+                  let mut _4: &i32;        // in scope 3 at $DIR/inst_combine_deref.rs:46:9: 46:15\n+                  scope 4 {\n+                      debug _1 => _4;      // in scope 4 at $DIR/inst_combine_deref.rs:46:9: 46:15\n+                      let _6: i32;         // in scope 4 at $DIR/inst_combine_deref.rs:48:9: 48:11\n+                      scope 5 {\n+                          debug _4 => _6;  // in scope 5 at $DIR/inst_combine_deref.rs:48:9: 48:11\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/inst_combine_deref.rs:43:9: 43:10\n+          _1 = const 5_i32;                // scope 0 at $DIR/inst_combine_deref.rs:43:13: 43:14\n+          StorageLive(_2);                 // scope 1 at $DIR/inst_combine_deref.rs:44:9: 44:13\n+          _2 = &_1;                        // scope 1 at $DIR/inst_combine_deref.rs:44:16: 44:18\n+          StorageLive(_3);                 // scope 2 at $DIR/inst_combine_deref.rs:45:9: 45:10\n+          _3 = const 5_i32;                // scope 2 at $DIR/inst_combine_deref.rs:45:13: 45:14\n+          StorageLive(_4);                 // scope 3 at $DIR/inst_combine_deref.rs:46:9: 46:15\n+          _4 = &_3;                        // scope 3 at $DIR/inst_combine_deref.rs:46:18: 46:20\n+          StorageLive(_5);                 // scope 4 at $DIR/inst_combine_deref.rs:47:10: 47:14\n+-         _5 = &(*_2);                     // scope 4 at $DIR/inst_combine_deref.rs:47:10: 47:14\n++         _5 = _2;                         // scope 4 at $DIR/inst_combine_deref.rs:47:10: 47:14\n+          _4 = move _5;                    // scope 4 at $DIR/inst_combine_deref.rs:47:5: 47:14\n+          StorageDead(_5);                 // scope 4 at $DIR/inst_combine_deref.rs:47:13: 47:14\n+          StorageLive(_6);                 // scope 4 at $DIR/inst_combine_deref.rs:48:9: 48:11\n+          _6 = (*_4);                      // scope 4 at $DIR/inst_combine_deref.rs:48:14: 48:17\n+          _0 = const 0_u64;                // scope 5 at $DIR/inst_combine_deref.rs:49:5: 49:6\n+          StorageDead(_6);                 // scope 4 at $DIR/inst_combine_deref.rs:50:1: 50:2\n+          StorageDead(_4);                 // scope 3 at $DIR/inst_combine_deref.rs:50:1: 50:2\n+          StorageDead(_3);                 // scope 2 at $DIR/inst_combine_deref.rs:50:1: 50:2\n+          StorageDead(_2);                 // scope 1 at $DIR/inst_combine_deref.rs:50:1: 50:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inst_combine_deref.rs:50:1: 50:2\n+          return;                          // scope 0 at $DIR/inst_combine_deref.rs:50:2: 50:2\n+      }\n+  }\n+  "}, {"sha": "e7d8c2e020256ca4af01daade1c82cb0f8c2e48f", "filename": "src/test/mir-opt/inst_combine_deref.opt_struct.InstCombine.diff", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2bb3844820434d460759c8bd89cdcb79bb1b1079/src%2Ftest%2Fmir-opt%2Finst_combine_deref.opt_struct.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2bb3844820434d460759c8bd89cdcb79bb1b1079/src%2Ftest%2Fmir-opt%2Finst_combine_deref.opt_struct.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finst_combine_deref.opt_struct.InstCombine.diff?ref=2bb3844820434d460759c8bd89cdcb79bb1b1079", "patch": "@@ -0,0 +1,44 @@\n+- // MIR for `opt_struct` before InstCombine\n++ // MIR for `opt_struct` after InstCombine\n+  \n+  fn opt_struct(_1: S) -> u64 {\n+      debug s => _1;                       // in scope 0 at $DIR/inst_combine_deref.rs:29:15: 29:16\n+      let mut _0: u64;                     // return place in scope 0 at $DIR/inst_combine_deref.rs:29:24: 29:27\n+      let _2: &u64;                        // in scope 0 at $DIR/inst_combine_deref.rs:30:9: 30:10\n+      let mut _5: u64;                     // in scope 0 at $DIR/inst_combine_deref.rs:33:5: 33:7\n+      let mut _6: u64;                     // in scope 0 at $DIR/inst_combine_deref.rs:33:10: 33:11\n+      scope 1 {\n+          debug a => _2;                   // in scope 1 at $DIR/inst_combine_deref.rs:30:9: 30:10\n+          let _3: &u64;                    // in scope 1 at $DIR/inst_combine_deref.rs:31:9: 31:10\n+          scope 2 {\n+              debug b => _3;               // in scope 2 at $DIR/inst_combine_deref.rs:31:9: 31:10\n+              let _4: u64;                 // in scope 2 at $DIR/inst_combine_deref.rs:32:9: 32:10\n+              scope 3 {\n+                  debug x => _4;           // in scope 3 at $DIR/inst_combine_deref.rs:32:9: 32:10\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/inst_combine_deref.rs:30:9: 30:10\n+          _2 = &(_1.0: u64);               // scope 0 at $DIR/inst_combine_deref.rs:30:13: 30:17\n+          StorageLive(_3);                 // scope 1 at $DIR/inst_combine_deref.rs:31:9: 31:10\n+          _3 = &(_1.1: u64);               // scope 1 at $DIR/inst_combine_deref.rs:31:13: 31:17\n+          StorageLive(_4);                 // scope 2 at $DIR/inst_combine_deref.rs:32:9: 32:10\n+-         _4 = (*_2);                      // scope 2 at $DIR/inst_combine_deref.rs:32:13: 32:15\n++         _4 = (_1.0: u64);                // scope 2 at $DIR/inst_combine_deref.rs:32:13: 32:15\n+          StorageLive(_5);                 // scope 3 at $DIR/inst_combine_deref.rs:33:5: 33:7\n+-         _5 = (*_3);                      // scope 3 at $DIR/inst_combine_deref.rs:33:5: 33:7\n++         _5 = (_1.1: u64);                // scope 3 at $DIR/inst_combine_deref.rs:33:5: 33:7\n+          StorageLive(_6);                 // scope 3 at $DIR/inst_combine_deref.rs:33:10: 33:11\n+          _6 = _4;                         // scope 3 at $DIR/inst_combine_deref.rs:33:10: 33:11\n+          _0 = Add(move _5, move _6);      // scope 3 at $DIR/inst_combine_deref.rs:33:5: 33:11\n+          StorageDead(_6);                 // scope 3 at $DIR/inst_combine_deref.rs:33:10: 33:11\n+          StorageDead(_5);                 // scope 3 at $DIR/inst_combine_deref.rs:33:10: 33:11\n+          StorageDead(_4);                 // scope 2 at $DIR/inst_combine_deref.rs:34:1: 34:2\n+          StorageDead(_3);                 // scope 1 at $DIR/inst_combine_deref.rs:34:1: 34:2\n+          StorageDead(_2);                 // scope 0 at $DIR/inst_combine_deref.rs:34:1: 34:2\n+          return;                          // scope 0 at $DIR/inst_combine_deref.rs:34:2: 34:2\n+      }\n+  }\n+  "}, {"sha": "896ae676c4f47d724e5c47eb37d18505e79d0619", "filename": "src/test/mir-opt/inst_combine_deref.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/2bb3844820434d460759c8bd89cdcb79bb1b1079/src%2Ftest%2Fmir-opt%2Finst_combine_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb3844820434d460759c8bd89cdcb79bb1b1079/src%2Ftest%2Fmir-opt%2Finst_combine_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finst_combine_deref.rs?ref=2bb3844820434d460759c8bd89cdcb79bb1b1079", "patch": "@@ -0,0 +1,68 @@\n+// EMIT_MIR inst_combine_deref.simple_opt.InstCombine.diff\n+fn simple_opt() -> u64 {\n+    let x = 5;\n+    let y = &x;\n+    let z = *y;\n+    z\n+}\n+\n+// EMIT_MIR inst_combine_deref.deep_opt.InstCombine.diff\n+fn deep_opt() -> (u64, u64, u64) {\n+    let x1 = 1;\n+    let x2 = 2;\n+    let x3 = 3;\n+    let y1 = &x1;\n+    let y2 = &x2;\n+    let y3 = &x3;\n+    let z1 = *y1;\n+    let z2 = *y2;\n+    let z3 = *y3;\n+    (z1, z2, z3)\n+}\n+\n+struct S {\n+    a: u64,\n+    b: u64,\n+}\n+\n+// EMIT_MIR inst_combine_deref.opt_struct.InstCombine.diff\n+fn opt_struct(s: S) -> u64 {\n+    let a = &s.a;\n+    let b = &s.b;\n+    let x = *a;\n+    *b + x\n+}\n+\n+// EMIT_MIR inst_combine_deref.dont_opt.InstCombine.diff\n+// do not optimize a sequence looking like this:\n+// _1 = &_2;\n+// _1 = _3;\n+// _4 = *_1;\n+// as the _1 = _3 assignment makes it not legal to replace the last statement with _4 = _2\n+fn dont_opt() -> u64 {\n+    let y = 5;\n+    let _ref = &y;\n+    let x = 5;\n+    let mut _1 = &x;\n+    _1 = _ref;\n+    let _4 = *_1;\n+    0\n+}\n+\n+// EMIT_MIR inst_combine_deref.do_not_miscompile.InstCombine.diff\n+fn do_not_miscompile() {\n+    let x = 42;\n+    let a = 99;\n+    let mut y = &x;\n+    let z = &mut y;\n+    *z = &a;\n+    assert!(*y == 99);\n+}\n+\n+fn main() {\n+    simple_opt();\n+    deep_opt();\n+    opt_struct(S { a: 0, b: 1 });\n+    dont_opt();\n+    do_not_miscompile();\n+}"}, {"sha": "ea14aefda4bfb6dca31cd6b2f8f941af69e66c15", "filename": "src/test/mir-opt/inst_combine_deref.simple_opt.InstCombine.diff", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2bb3844820434d460759c8bd89cdcb79bb1b1079/src%2Ftest%2Fmir-opt%2Finst_combine_deref.simple_opt.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2bb3844820434d460759c8bd89cdcb79bb1b1079/src%2Ftest%2Fmir-opt%2Finst_combine_deref.simple_opt.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finst_combine_deref.simple_opt.InstCombine.diff?ref=2bb3844820434d460759c8bd89cdcb79bb1b1079", "patch": "@@ -0,0 +1,34 @@\n+- // MIR for `simple_opt` before InstCombine\n++ // MIR for `simple_opt` after InstCombine\n+  \n+  fn simple_opt() -> u64 {\n+      let mut _0: u64;                     // return place in scope 0 at $DIR/inst_combine_deref.rs:2:20: 2:23\n+      let _1: u64;                         // in scope 0 at $DIR/inst_combine_deref.rs:3:9: 3:10\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/inst_combine_deref.rs:3:9: 3:10\n+          let _2: &u64;                    // in scope 1 at $DIR/inst_combine_deref.rs:4:9: 4:10\n+          scope 2 {\n+              debug y => _2;               // in scope 2 at $DIR/inst_combine_deref.rs:4:9: 4:10\n+              let _3: u64;                 // in scope 2 at $DIR/inst_combine_deref.rs:5:9: 5:10\n+              scope 3 {\n+                  debug z => _3;           // in scope 3 at $DIR/inst_combine_deref.rs:5:9: 5:10\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/inst_combine_deref.rs:3:9: 3:10\n+          _1 = const 5_u64;                // scope 0 at $DIR/inst_combine_deref.rs:3:13: 3:14\n+          StorageLive(_2);                 // scope 1 at $DIR/inst_combine_deref.rs:4:9: 4:10\n+          _2 = &_1;                        // scope 1 at $DIR/inst_combine_deref.rs:4:13: 4:15\n+          StorageLive(_3);                 // scope 2 at $DIR/inst_combine_deref.rs:5:9: 5:10\n+-         _3 = (*_2);                      // scope 2 at $DIR/inst_combine_deref.rs:5:13: 5:15\n++         _3 = _1;                         // scope 2 at $DIR/inst_combine_deref.rs:5:13: 5:15\n+          _0 = _3;                         // scope 3 at $DIR/inst_combine_deref.rs:6:5: 6:6\n+          StorageDead(_3);                 // scope 2 at $DIR/inst_combine_deref.rs:7:1: 7:2\n+          StorageDead(_2);                 // scope 1 at $DIR/inst_combine_deref.rs:7:1: 7:2\n+          StorageDead(_1);                 // scope 0 at $DIR/inst_combine_deref.rs:7:1: 7:2\n+          return;                          // scope 0 at $DIR/inst_combine_deref.rs:7:2: 7:2\n+      }\n+  }\n+  "}]}