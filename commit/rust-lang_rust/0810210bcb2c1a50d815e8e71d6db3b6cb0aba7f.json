{"sha": "0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4MTAyMTBiY2IyYzFhNTBkODE1ZThlNzFkNmRiM2I2Y2IwYWJhN2Y=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2020-01-10T14:13:05Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2020-01-12T15:36:40Z"}, "message": "Diagnostics should start lowercase", "tree": {"sha": "1b28903f8de2fc9309ca2a62dd3e8b8cf90651c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b28903f8de2fc9309ca2a62dd3e8b8cf90651c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "html_url": "https://github.com/rust-lang/rust/commit/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59c1db0339327f8b98c42ef0627a464915966d9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/59c1db0339327f8b98c42ef0627a464915966d9b", "html_url": "https://github.com/rust-lang/rust/commit/59c1db0339327f8b98c42ef0627a464915966d9b"}], "stats": {"total": 320, "additions": 160, "deletions": 160}, "files": [{"sha": "5440cb7bdf4e533d61d886baa6be9731c37e3d77", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -1156,7 +1156,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 err.span_help(impl_span, \"trait impl with same name found\");\n                 let trait_crate = self.tcx.crate_name(trait_with_same_path.krate);\n                 let crate_msg = format!(\n-                    \"Perhaps two different versions of crate `{}` are being used?\",\n+                    \"perhaps two different versions of crate `{}` are being used?\",\n                     trait_crate\n                 );\n                 err.note(&crate_msg);"}, {"sha": "1e4b1ae07776212a8261dc882d999c45b7f71baf", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -413,7 +413,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 self.check_extern(bare_fn_ty.ext);\n             }\n             ast::TyKind::Never => {\n-                gate_feature_post!(&self, never_type, ty.span, \"The `!` type is experimental\");\n+                gate_feature_post!(&self, never_type, ty.span, \"the `!` type is experimental\");\n             }\n             _ => {}\n         }"}, {"sha": "07715cdbcb5e92e2dede68640c07d8209184cdfc", "filename": "src/librustc_builtin_macros/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Flibrustc_builtin_macros%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Flibrustc_builtin_macros%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Ftest.rs?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -325,7 +325,7 @@ fn should_panic(cx: &ExtCtxt<'_>, i: &ast::Item) -> ShouldPanic {\n                              `expected = \\\"error message\\\"`\",\n                         )\n                         .note(\n-                            \"Errors in this attribute were erroneously \\\n+                            \"errors in this attribute were erroneously \\\n                                 allowed and will become a hard error in a \\\n                                 future release.\",\n                         )"}, {"sha": "7f55bcd4017efc7dd7a19ed376327bbeaadd855e", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -657,7 +657,7 @@ impl EarlyLintPass for AnonymousParameters {\n                                 )\n                                 .span_suggestion(\n                                     arg.pat.span,\n-                                    \"Try naming the parameter or explicitly \\\n+                                    \"try naming the parameter or explicitly \\\n                                     ignoring it\",\n                                     format!(\"_: {}\", ty_snip),\n                                     appl,\n@@ -1934,21 +1934,21 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidValue {\n             use rustc::ty::TyKind::*;\n             match ty.kind {\n                 // Primitive types that don't like 0 as a value.\n-                Ref(..) => Some((format!(\"References must be non-null\"), None)),\n+                Ref(..) => Some((format!(\"references must be non-null\"), None)),\n                 Adt(..) if ty.is_box() => Some((format!(\"`Box` must be non-null\"), None)),\n-                FnPtr(..) => Some((format!(\"Function pointers must be non-null\"), None)),\n-                Never => Some((format!(\"The never type (`!`) has no valid value\"), None)),\n+                FnPtr(..) => Some((format!(\"function pointers must be non-null\"), None)),\n+                Never => Some((format!(\"the `!` type has no valid value\"), None)),\n                 RawPtr(tm) if matches!(tm.ty.kind, Dynamic(..)) =>\n                 // raw ptr to dyn Trait\n                 {\n-                    Some((format!(\"The vtable of a wide raw pointer must be non-null\"), None))\n+                    Some((format!(\"the vtable of a wide raw pointer must be non-null\"), None))\n                 }\n                 // Primitive types with other constraints.\n                 Bool if init == InitKind::Uninit => {\n-                    Some((format!(\"Booleans must be `true` or `false`\"), None))\n+                    Some((format!(\"booleans must be either `true` or `false`\"), None))\n                 }\n                 Char if init == InitKind::Uninit => {\n-                    Some((format!(\"Characters must be a valid unicode codepoint\"), None))\n+                    Some((format!(\"characters must be a valid Unicode codepoint\"), None))\n                 }\n                 // Recurse and checks for some compound types.\n                 Adt(adt_def, substs) if !adt_def.is_union() => {"}, {"sha": "73718d58346f10a6a85f7faf6db59a298bbead85", "filename": "src/librustc_mir/borrow_check/nll.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -360,7 +360,7 @@ pub(super) fn dump_annotation<'a, 'tcx>(\n     // better.\n \n     if let Some(closure_region_requirements) = closure_region_requirements {\n-        let mut err = tcx.sess.diagnostic().span_note_diag(body.span, \"External requirements\");\n+        let mut err = tcx.sess.diagnostic().span_note_diag(body.span, \"external requirements\");\n \n         regioncx.annotate(tcx, &mut err);\n \n@@ -379,7 +379,7 @@ pub(super) fn dump_annotation<'a, 'tcx>(\n \n         err.buffer(errors_buffer);\n     } else {\n-        let mut err = tcx.sess.diagnostic().span_note_diag(body.span, \"No external requirements\");\n+        let mut err = tcx.sess.diagnostic().span_note_diag(body.span, \"no external requirements\");\n         regioncx.annotate(tcx, &mut err);\n \n         err.buffer(errors_buffer);"}, {"sha": "cbbfe2d6278957a13d6ce25c1d76a4adeaa3835b", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -381,7 +381,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                     if unknown_cast_to { \"to\" } else { \"from\" }\n                 );\n                 err.note(\n-                    \"The type information given here is insufficient to check whether \\\n+                    \"the type information given here is insufficient to check whether \\\n                           the pointer cast is valid\",\n                 );\n                 if unknown_cast_to {"}, {"sha": "8e4fa70d342f2e0ff91db8c82ca39c0898f42ebb", "filename": "src/test/ui/anon-params-deprecated.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fanon-params-deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fanon-params-deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params-deprecated.stderr?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -2,7 +2,7 @@ warning: anonymous parameters are deprecated and will be removed in the next edi\n   --> $DIR/anon-params-deprecated.rs:9:12\n    |\n LL |     fn foo(i32);\n-   |            ^^^ help: Try naming the parameter or explicitly ignoring it: `_: i32`\n+   |            ^^^ help: try naming the parameter or explicitly ignoring it: `_: i32`\n    |\n note: lint level defined here\n   --> $DIR/anon-params-deprecated.rs:1:9\n@@ -16,7 +16,7 @@ warning: anonymous parameters are deprecated and will be removed in the next edi\n   --> $DIR/anon-params-deprecated.rs:12:30\n    |\n LL |     fn bar_with_default_impl(String, String) {}\n-   |                              ^^^^^^ help: Try naming the parameter or explicitly ignoring it: `_: String`\n+   |                              ^^^^^^ help: try naming the parameter or explicitly ignoring it: `_: String`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n@@ -25,7 +25,7 @@ warning: anonymous parameters are deprecated and will be removed in the next edi\n   --> $DIR/anon-params-deprecated.rs:12:38\n    |\n LL |     fn bar_with_default_impl(String, String) {}\n-   |                                      ^^^^^^ help: Try naming the parameter or explicitly ignoring it: `_: String`\n+   |                                      ^^^^^^ help: try naming the parameter or explicitly ignoring it: `_: String`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>"}, {"sha": "040c568beb32486aafc79ce16223ee51493defa3", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.stderr?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -34,7 +34,7 @@ LL |     unsafe { std::mem::transmute(()) }\n    |              help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `#[warn(invalid_value)]` on by default\n-   = note: The never type (`!`) has no valid value\n+   = note: the `!` type has no valid value\n \n warning: the type `Empty` does not permit zero-initialization\n   --> $DIR/validate_uninhabited_zsts.rs:17:35"}, {"sha": "216615731e56f06322382b2a4bf84ef2bee05f36", "filename": "src/test/ui/feature-gates/feature-gate-never_type.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-never_type.stderr?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: The `!` type is experimental\n+error[E0658]: the `!` type is experimental\n   --> $DIR/feature-gate-never_type.rs:7:17\n    |\n LL | type Ma = (u32, !, i32);\n@@ -7,7 +7,7 @@ LL | type Ma = (u32, !, i32);\n    = note: for more information, see https://github.com/rust-lang/rust/issues/35121\n    = help: add `#![feature(never_type)]` to the crate attributes to enable\n \n-error[E0658]: The `!` type is experimental\n+error[E0658]: the `!` type is experimental\n   --> $DIR/feature-gate-never_type.rs:8:20\n    |\n LL | type Meeshka = Vec<!>;\n@@ -16,7 +16,7 @@ LL | type Meeshka = Vec<!>;\n    = note: for more information, see https://github.com/rust-lang/rust/issues/35121\n    = help: add `#![feature(never_type)]` to the crate attributes to enable\n \n-error[E0658]: The `!` type is experimental\n+error[E0658]: the `!` type is experimental\n   --> $DIR/feature-gate-never_type.rs:9:24\n    |\n LL | type Mow = &'static fn(!) -> !;\n@@ -25,7 +25,7 @@ LL | type Mow = &'static fn(!) -> !;\n    = note: for more information, see https://github.com/rust-lang/rust/issues/35121\n    = help: add `#![feature(never_type)]` to the crate attributes to enable\n \n-error[E0658]: The `!` type is experimental\n+error[E0658]: the `!` type is experimental\n   --> $DIR/feature-gate-never_type.rs:10:27\n    |\n LL | type Skwoz = &'static mut !;\n@@ -34,7 +34,7 @@ LL | type Skwoz = &'static mut !;\n    = note: for more information, see https://github.com/rust-lang/rust/issues/35121\n    = help: add `#![feature(never_type)]` to the crate attributes to enable\n \n-error[E0658]: The `!` type is experimental\n+error[E0658]: the `!` type is experimental\n   --> $DIR/feature-gate-never_type.rs:13:16\n    |\n LL |     type Wub = !;"}, {"sha": "1d958e5bfeb4030e1d0d18311e3d58dde7fe8c06", "filename": "src/test/ui/future-incompatible-lint-group.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -2,7 +2,7 @@ error: anonymous parameters are deprecated and will be removed in the next editi\n   --> $DIR/future-incompatible-lint-group.rs:4:10\n    |\n LL |     fn f(u8) {}\n-   |          ^^ help: Try naming the parameter or explicitly ignoring it: `_: u8`\n+   |          ^^ help: try naming the parameter or explicitly ignoring it: `_: u8`\n    |\n note: lint level defined here\n   --> $DIR/future-incompatible-lint-group.rs:1:9"}, {"sha": "d4ddba52df14a9f9f812dc3621361a6bf39733a7", "filename": "src/test/ui/issues/issue-45730.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fissues%2Fissue-45730.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fissues%2Fissue-45730.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45730.stderr?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -6,7 +6,7 @@ LL |     let x: *const _ = 0 as _;\n    |                            |\n    |                            help: consider giving more type information\n    |\n-   = note: The type information given here is insufficient to check whether the pointer cast is valid\n+   = note: the type information given here is insufficient to check whether the pointer cast is valid\n \n error[E0641]: cannot cast to a pointer of an unknown kind\n   --> $DIR/issue-45730.rs:5:23\n@@ -16,7 +16,7 @@ LL |     let x: *const _ = 0 as *const _;\n    |                            |\n    |                            help: consider giving more type information\n    |\n-   = note: The type information given here is insufficient to check whether the pointer cast is valid\n+   = note: the type information given here is insufficient to check whether the pointer cast is valid\n \n error[E0641]: cannot cast to a pointer of an unknown kind\n   --> $DIR/issue-45730.rs:8:13\n@@ -26,7 +26,7 @@ LL |     let x = 0 as *const i32 as *const _ as *mut _;\n    |                                            |\n    |                                            help: consider giving more type information\n    |\n-   = note: The type information given here is insufficient to check whether the pointer cast is valid\n+   = note: the type information given here is insufficient to check whether the pointer cast is valid\n \n error: aborting due to 3 previous errors\n "}, {"sha": "d451b827598f479c395b3464e40eccd0f6d774eb", "filename": "src/test/ui/lint/uninitialized-zeroed.stderr", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -12,7 +12,7 @@ note: lint level defined here\n    |\n LL | #![deny(invalid_value)]\n    |         ^^^^^^^^^^^^^\n-   = note: References must be non-null\n+   = note: references must be non-null\n \n error: the type `&'static T` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:30:32\n@@ -23,7 +23,7 @@ LL |         let _val: &'static T = mem::uninitialized();\n    |                                this code causes undefined behavior when executed\n    |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: References must be non-null\n+   = note: references must be non-null\n \n error: the type `Wrap<&'static T>` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:32:38\n@@ -34,7 +34,7 @@ LL |         let _val: Wrap<&'static T> = mem::zeroed();\n    |                                      this code causes undefined behavior when executed\n    |                                      help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-note: References must be non-null (in this struct field)\n+note: references must be non-null (in this struct field)\n   --> $DIR/uninitialized-zeroed.rs:18:18\n    |\n LL | struct Wrap<T> { wrapped: T }\n@@ -49,7 +49,7 @@ LL |         let _val: Wrap<&'static T> = mem::uninitialized();\n    |                                      this code causes undefined behavior when executed\n    |                                      help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-note: References must be non-null (in this struct field)\n+note: references must be non-null (in this struct field)\n   --> $DIR/uninitialized-zeroed.rs:18:18\n    |\n LL | struct Wrap<T> { wrapped: T }\n@@ -64,7 +64,7 @@ LL |         let _val: ! = mem::zeroed();\n    |                       this code causes undefined behavior when executed\n    |                       help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: The never type (`!`) has no valid value\n+   = note: the `!` type has no valid value\n \n error: the type `!` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:41:23\n@@ -75,7 +75,7 @@ LL |         let _val: ! = mem::uninitialized();\n    |                       this code causes undefined behavior when executed\n    |                       help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: The never type (`!`) has no valid value\n+   = note: the `!` type has no valid value\n \n error: the type `(i32, !)` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:43:30\n@@ -86,7 +86,7 @@ LL |         let _val: (i32, !) = mem::zeroed();\n    |                              this code causes undefined behavior when executed\n    |                              help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: The never type (`!`) has no valid value\n+   = note: the `!` type has no valid value\n \n error: the type `(i32, !)` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:44:30\n@@ -97,7 +97,7 @@ LL |         let _val: (i32, !) = mem::uninitialized();\n    |                              this code causes undefined behavior when executed\n    |                              help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: The never type (`!`) has no valid value\n+   = note: the `!` type has no valid value\n \n error: the type `Void` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:46:26\n@@ -130,7 +130,7 @@ LL |         let _val: &'static i32 = mem::zeroed();\n    |                                  this code causes undefined behavior when executed\n    |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: References must be non-null\n+   = note: references must be non-null\n \n error: the type `&'static i32` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:50:34\n@@ -141,7 +141,7 @@ LL |         let _val: &'static i32 = mem::uninitialized();\n    |                                  this code causes undefined behavior when executed\n    |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: References must be non-null\n+   = note: references must be non-null\n \n error: the type `Ref` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:52:25\n@@ -152,7 +152,7 @@ LL |         let _val: Ref = mem::zeroed();\n    |                         this code causes undefined behavior when executed\n    |                         help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-note: References must be non-null (in this struct field)\n+note: references must be non-null (in this struct field)\n   --> $DIR/uninitialized-zeroed.rs:15:12\n    |\n LL | struct Ref(&'static i32);\n@@ -167,7 +167,7 @@ LL |         let _val: Ref = mem::uninitialized();\n    |                         this code causes undefined behavior when executed\n    |                         help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-note: References must be non-null (in this struct field)\n+note: references must be non-null (in this struct field)\n   --> $DIR/uninitialized-zeroed.rs:15:12\n    |\n LL | struct Ref(&'static i32);\n@@ -182,7 +182,7 @@ LL |         let _val: fn() = mem::zeroed();\n    |                          this code causes undefined behavior when executed\n    |                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: Function pointers must be non-null\n+   = note: function pointers must be non-null\n \n error: the type `fn()` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:56:26\n@@ -193,7 +193,7 @@ LL |         let _val: fn() = mem::uninitialized();\n    |                          this code causes undefined behavior when executed\n    |                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: Function pointers must be non-null\n+   = note: function pointers must be non-null\n \n error: the type `Wrap<fn()>` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:58:32\n@@ -204,7 +204,7 @@ LL |         let _val: Wrap<fn()> = mem::zeroed();\n    |                                this code causes undefined behavior when executed\n    |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-note: Function pointers must be non-null (in this struct field)\n+note: function pointers must be non-null (in this struct field)\n   --> $DIR/uninitialized-zeroed.rs:18:18\n    |\n LL | struct Wrap<T> { wrapped: T }\n@@ -219,7 +219,7 @@ LL |         let _val: Wrap<fn()> = mem::uninitialized();\n    |                                this code causes undefined behavior when executed\n    |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-note: Function pointers must be non-null (in this struct field)\n+note: function pointers must be non-null (in this struct field)\n   --> $DIR/uninitialized-zeroed.rs:18:18\n    |\n LL | struct Wrap<T> { wrapped: T }\n@@ -234,7 +234,7 @@ LL |         let _val: WrapEnum<fn()> = mem::zeroed();\n    |                                    this code causes undefined behavior when executed\n    |                                    help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-note: Function pointers must be non-null (in this enum field)\n+note: function pointers must be non-null (in this enum field)\n   --> $DIR/uninitialized-zeroed.rs:19:28\n    |\n LL | enum WrapEnum<T> { Wrapped(T) }\n@@ -249,7 +249,7 @@ LL |         let _val: WrapEnum<fn()> = mem::uninitialized();\n    |                                    this code causes undefined behavior when executed\n    |                                    help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-note: Function pointers must be non-null (in this enum field)\n+note: function pointers must be non-null (in this enum field)\n   --> $DIR/uninitialized-zeroed.rs:19:28\n    |\n LL | enum WrapEnum<T> { Wrapped(T) }\n@@ -264,7 +264,7 @@ LL |         let _val: Wrap<(RefPair, i32)> = mem::zeroed();\n    |                                          this code causes undefined behavior when executed\n    |                                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-note: References must be non-null (in this struct field)\n+note: references must be non-null (in this struct field)\n   --> $DIR/uninitialized-zeroed.rs:16:16\n    |\n LL | struct RefPair((&'static i32, i32));\n@@ -279,7 +279,7 @@ LL |         let _val: Wrap<(RefPair, i32)> = mem::uninitialized();\n    |                                          this code causes undefined behavior when executed\n    |                                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-note: References must be non-null (in this struct field)\n+note: references must be non-null (in this struct field)\n   --> $DIR/uninitialized-zeroed.rs:16:16\n    |\n LL | struct RefPair((&'static i32, i32));\n@@ -316,7 +316,7 @@ LL |         let _val: *const dyn Send = mem::zeroed();\n    |                                     this code causes undefined behavior when executed\n    |                                     help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: The vtable of a wide raw pointer must be non-null\n+   = note: the vtable of a wide raw pointer must be non-null\n \n error: the type `*const dyn std::marker::Send` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:71:37\n@@ -327,7 +327,7 @@ LL |         let _val: *const dyn Send = mem::uninitialized();\n    |                                     this code causes undefined behavior when executed\n    |                                     help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: The vtable of a wide raw pointer must be non-null\n+   = note: the vtable of a wide raw pointer must be non-null\n \n error: the type `bool` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:75:26\n@@ -338,7 +338,7 @@ LL |         let _val: bool = mem::uninitialized();\n    |                          this code causes undefined behavior when executed\n    |                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: Booleans must be `true` or `false`\n+   = note: booleans must be either `true` or `false`\n \n error: the type `Wrap<char>` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:78:32\n@@ -349,7 +349,7 @@ LL |         let _val: Wrap<char> = mem::uninitialized();\n    |                                this code causes undefined behavior when executed\n    |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-note: Characters must be a valid unicode codepoint (in this struct field)\n+note: characters must be a valid Unicode codepoint (in this struct field)\n   --> $DIR/uninitialized-zeroed.rs:18:18\n    |\n LL | struct Wrap<T> { wrapped: T }\n@@ -375,7 +375,7 @@ LL |         let _val: &'static i32 = mem::transmute(0usize);\n    |                                  this code causes undefined behavior when executed\n    |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: References must be non-null\n+   = note: references must be non-null\n \n error: the type `&'static [i32]` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:85:36\n@@ -386,7 +386,7 @@ LL |         let _val: &'static [i32] = mem::transmute((0usize, 0usize));\n    |                                    this code causes undefined behavior when executed\n    |                                    help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: References must be non-null\n+   = note: references must be non-null\n \n error: the type `std::num::NonZeroU32` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:86:32\n@@ -430,7 +430,7 @@ LL |         let _val: bool = MaybeUninit::uninit().assume_init();\n    |                          this code causes undefined behavior when executed\n    |                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: Booleans must be `true` or `false`\n+   = note: booleans must be either `true` or `false`\n \n error: aborting due to 35 previous errors\n "}, {"sha": "b4e18c229fdfd99d584df5ed0c5c805359edbe68", "filename": "src/test/ui/nll/closure-requirements/escape-argument-callee.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -1,4 +1,4 @@\n-note: No external requirements\n+note: no external requirements\n   --> $DIR/escape-argument-callee.rs:26:38\n    |\n LL |         let mut closure = expect_sig(|p, y| *p = y);\n@@ -18,7 +18,7 @@ LL |         let mut closure = expect_sig(|p, y| *p = y);\n    |                                       |  has type `&'1 i32`\n    |                                       has type `&'_#2r mut &'2 i32`\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/escape-argument-callee.rs:20:1\n    |\n LL | / fn test() {"}, {"sha": "533a17bdd128bef0eddbf98d887c5fc121bd98de", "filename": "src/test/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -1,4 +1,4 @@\n-note: No external requirements\n+note: no external requirements\n   --> $DIR/escape-argument.rs:26:38\n    |\n LL |         let mut closure = expect_sig(|p, y| *p = y);\n@@ -9,7 +9,7 @@ LL |         let mut closure = expect_sig(|p, y| *p = y);\n                for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) mut &ReLateBound(DebruijnIndex(0), BrNamed('s)) i32, &ReLateBound(DebruijnIndex(0), BrNamed('s)) i32)),\n            ]\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/escape-argument.rs:20:1\n    |\n LL | / fn test() {"}, {"sha": "60d02066e26766e247a051746a7f0b67cad9ac00", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-nested.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -1,4 +1,4 @@\n-note: External requirements\n+note: external requirements\n   --> $DIR/escape-upvar-nested.rs:21:32\n    |\n LL |             let mut closure1 = || p = &y;\n@@ -13,7 +13,7 @@ LL |             let mut closure1 = || p = &y;\n    = note: number of external vids: 4\n    = note: where '_#1r: '_#3r\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/escape-upvar-nested.rs:20:27\n    |\n LL |           let mut closure = || {\n@@ -32,7 +32,7 @@ LL | |         };\n    = note: number of external vids: 4\n    = note: where '_#1r: '_#3r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/escape-upvar-nested.rs:13:1\n    |\n LL | / fn test() {"}, {"sha": "f64ccf14ac4822239f2c0cf8d2b92cd64585197a", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -1,4 +1,4 @@\n-note: External requirements\n+note: external requirements\n   --> $DIR/escape-upvar-ref.rs:23:27\n    |\n LL |         let mut closure = || p = &y;\n@@ -13,7 +13,7 @@ LL |         let mut closure = || p = &y;\n    = note: number of external vids: 4\n    = note: where '_#1r: '_#3r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/escape-upvar-ref.rs:17:1\n    |\n LL | / fn test() {"}, {"sha": "e1e0cdc153a6c5de082c276be6f444090c302d60", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -1,4 +1,4 @@\n-note: No external requirements\n+note: no external requirements\n   --> $DIR/propagate-approximated-fail-no-postdom.rs:43:9\n    |\n LL | /         |_outlives1, _outlives2, _outlives3, x, y| {\n@@ -27,7 +27,7 @@ LL |         |_outlives1, _outlives2, _outlives3, x, y| {\n LL |             demand_y(x, y, p)\n    |             ^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/propagate-approximated-fail-no-postdom.rs:38:1\n    |\n LL | / fn supply<'a, 'b, 'c>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>, cell_c: Cell<&'c u32>) {"}, {"sha": "b6535024a4a7653e50fa53025572b418d7e2fb2e", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -1,4 +1,4 @@\n-note: External requirements\n+note: external requirements\n   --> $DIR/propagate-approximated-ref.rs:43:47\n    |\n LL |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n@@ -18,7 +18,7 @@ LL | |     });\n    = note: number of external vids: 5\n    = note: where '_#1r: '_#2r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/propagate-approximated-ref.rs:42:1\n    |\n LL | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {"}, {"sha": "708e50de570dbc86f283446cda5c4eb4032976bd", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -1,4 +1,4 @@\n-note: No external requirements\n+note: no external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:21:15\n    |\n LL |       foo(cell, |cell_a, cell_x| {\n@@ -23,7 +23,7 @@ LL |     foo(cell, |cell_a, cell_x| {\n LL |         cell_a.set(cell_x.get()); // forces 'x: 'a, error in closure\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ `cell_x` escapes the closure body here\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:18:1\n    |\n LL | / fn case1() {\n@@ -37,7 +37,7 @@ LL | | }\n    |\n    = note: defining type: case1\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:35:15\n    |\n LL |       foo(cell, |cell_a, cell_x| {\n@@ -53,7 +53,7 @@ LL | |     })\n    = note: number of external vids: 2\n    = note: where '_#1r: '_#0r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:28:1\n    |\n LL | / fn case2() {"}, {"sha": "17d33e82ba7e36efc40e61132261b74af083383c", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -1,4 +1,4 @@\n-note: External requirements\n+note: external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:32:47\n    |\n LL |       establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n@@ -19,7 +19,7 @@ LL | |     });\n    = note: number of external vids: 4\n    = note: where '_#1r: '_#0r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:31:1\n    |\n LL | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {"}, {"sha": "5dce8d087d6cdd5ac94c970b634a318106c33ba9", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -1,4 +1,4 @@\n-note: External requirements\n+note: external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:35:47\n    |\n LL |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n@@ -19,7 +19,7 @@ LL | |     });\n    = note: number of external vids: 5\n    = note: where '_#1r: '_#0r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:34:1\n    |\n LL | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {"}, {"sha": "5c5d510805bdf2bf71440cd7a239cae8a95f485b", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -1,4 +1,4 @@\n-note: External requirements\n+note: external requirements\n   --> $DIR/propagate-approximated-val.rs:36:45\n    |\n LL |       establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n@@ -18,7 +18,7 @@ LL | |     });\n    = note: number of external vids: 5\n    = note: where '_#1r: '_#2r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/propagate-approximated-val.rs:35:1\n    |\n LL | / fn test<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {"}, {"sha": "c111e651832baf24ae7d7c443aaa0813115593e9", "filename": "src/test/ui/nll/closure-requirements/propagate-despite-same-free-region.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -1,4 +1,4 @@\n-note: External requirements\n+note: external requirements\n   --> $DIR/propagate-despite-same-free-region.rs:42:9\n    |\n LL | /         |_outlives1, _outlives2, x, y| {\n@@ -16,7 +16,7 @@ LL | |         },\n    = note: number of external vids: 4\n    = note: where '_#1r: '_#2r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/propagate-despite-same-free-region.rs:39:1\n    |\n LL | / fn supply<'a>(cell_a: Cell<&'a u32>) {"}, {"sha": "52df46ed3453ff151a3d3c4a735e124f53027f0b", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -1,4 +1,4 @@\n-note: No external requirements\n+note: no external requirements\n   --> $DIR/propagate-fail-to-approximate-longer-no-bounds.rs:35:47\n    |\n LL |       establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n@@ -27,7 +27,7 @@ LL |         // Only works if 'x: 'y:\n LL |         demand_y(x, y, x.get())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/propagate-fail-to-approximate-longer-no-bounds.rs:34:1\n    |\n LL | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {"}, {"sha": "0270cc40de6fc600c29e635b30784b53b7bd2194", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -1,4 +1,4 @@\n-note: No external requirements\n+note: no external requirements\n   --> $DIR/propagate-fail-to-approximate-longer-wrong-bounds.rs:39:47\n    |\n LL |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n@@ -27,7 +27,7 @@ LL |         // Only works if 'x: 'y:\n LL |         demand_y(x, y, x.get())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/propagate-fail-to-approximate-longer-wrong-bounds.rs:38:1\n    |\n LL | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {"}, {"sha": "5317bb6a1b13ecc3c50820dddc152fd96de02fd0", "filename": "src/test/ui/nll/closure-requirements/propagate-from-trait-match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -1,4 +1,4 @@\n-note: External requirements\n+note: external requirements\n   --> $DIR/propagate-from-trait-match.rs:32:36\n    |\n LL |       establish_relationships(value, |value| {\n@@ -18,7 +18,7 @@ LL | |     });\n    = note: number of external vids: 2\n    = note: where T: '_#1r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/propagate-from-trait-match.rs:28:1\n    |\n LL | / fn supply<'a, T>(value: T)"}, {"sha": "79ed1501524bd5da4e25e2af6e751d892feab35b", "filename": "src/test/ui/nll/closure-requirements/return-wrong-bound-region.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -1,4 +1,4 @@\n-note: No external requirements\n+note: no external requirements\n   --> $DIR/return-wrong-bound-region.rs:11:16\n    |\n LL |     expect_sig(|a, b| b); // ought to return `a`\n@@ -18,7 +18,7 @@ LL |     expect_sig(|a, b| b); // ought to return `a`\n    |                 |  has type `&'1 i32`\n    |                 has type `&'2 i32`\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/return-wrong-bound-region.rs:10:1\n    |\n LL | / fn test() {"}, {"sha": "bff8c662d0defc0bcb19ee97a3de9237e0f6c430", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -1,4 +1,4 @@\n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-no-regions-closure.rs:25:23\n    |\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n@@ -11,7 +11,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    = note: number of external vids: 3\n    = note: where <T as std::iter::Iterator>::Item: '_#2r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-no-regions-closure.rs:21:1\n    |\n LL | / fn no_region<'a, T>(x: Box<T>) -> Box<dyn Anything + 'a>\n@@ -33,7 +33,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |\n    = help: consider adding an explicit lifetime bound `<T as std::iter::Iterator>::Item: ReEarlyBound(0, 'a)`...\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-no-regions-closure.rs:34:23\n    |\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n@@ -46,7 +46,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    = note: number of external vids: 3\n    = note: where <T as std::iter::Iterator>::Item: '_#2r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-no-regions-closure.rs:30:1\n    |\n LL | / fn correct_region<'a, T>(x: Box<T>) -> Box<dyn Anything + 'a>\n@@ -59,7 +59,7 @@ LL | | }\n    |\n    = note: defining type: correct_region::<'_#1r, T>\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-no-regions-closure.rs:42:23\n    |\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n@@ -72,7 +72,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    = note: number of external vids: 4\n    = note: where <T as std::iter::Iterator>::Item: '_#3r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-no-regions-closure.rs:38:1\n    |\n LL | / fn wrong_region<'a, 'b, T>(x: Box<T>) -> Box<dyn Anything + 'a>\n@@ -94,7 +94,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |\n    = help: consider adding an explicit lifetime bound `<T as std::iter::Iterator>::Item: ReEarlyBound(0, 'a)`...\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-no-regions-closure.rs:52:23\n    |\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n@@ -107,7 +107,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    = note: number of external vids: 4\n    = note: where <T as std::iter::Iterator>::Item: '_#3r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-no-regions-closure.rs:47:1\n    |\n LL | / fn outlives_region<'a, 'b, T>(x: Box<T>) -> Box<dyn Anything + 'a>"}, {"sha": "6d1fbcb8f5bfda386cde17790c8f0d04a7fb6779", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -1,4 +1,4 @@\n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-one-region-closure.rs:45:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -13,7 +13,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where T: '_#2r\n    = note: where '_#1r: '_#2r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-closure.rs:41:1\n    |\n LL | / fn no_relationships_late<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n@@ -48,7 +48,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |\n    = help: consider adding the following bound: `'b: 'a`\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-one-region-closure.rs:56:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -62,7 +62,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where T: '_#3r\n    = note: where '_#2r: '_#3r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-closure.rs:51:1\n    |\n LL | / fn no_relationships_early<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n@@ -97,7 +97,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |\n    = help: consider adding the following bound: `'b: 'a`\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-one-region-closure.rs:70:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -110,7 +110,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 4\n    = note: where <T as Anything<ReClosureBound('_#2r)>>::AssocType: '_#3r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-closure.rs:62:1\n    |\n LL | / fn projection_outlives<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n@@ -124,7 +124,7 @@ LL | | }\n    |\n    = note: defining type: projection_outlives::<'_#1r, '_#2r, T>\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-one-region-closure.rs:80:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -138,7 +138,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where T: '_#3r\n    = note: where '_#2r: '_#3r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-closure.rs:74:1\n    |\n LL | / fn elements_outlive<'a, 'b, T>(cell: Cell<&'a ()>, t: T)"}, {"sha": "59d8aa484bdac8a36850f5da7e4ec76f6d68a09d", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -1,4 +1,4 @@\n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:37:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -12,7 +12,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 4\n    = note: where '_#1r: '_#2r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:33:1\n    |\n LL | / fn no_relationships_late<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n@@ -39,7 +39,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |\n    = help: consider adding the following bound: `'b: 'a`\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:47:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -52,7 +52,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 4\n    = note: where '_#2r: '_#3r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:42:1\n    |\n LL | / fn no_relationships_early<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n@@ -79,7 +79,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |\n    = help: consider adding the following bound: `'b: 'a`\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:60:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -92,7 +92,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 4\n    = note: where <T as Anything<ReClosureBound('_#2r)>>::AssocType: '_#3r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:52:1\n    |\n LL | / fn projection_outlives<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n@@ -106,7 +106,7 @@ LL | | }\n    |\n    = note: defining type: projection_outlives::<'_#1r, '_#2r, T>\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:69:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -119,7 +119,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 4\n    = note: where '_#2r: '_#3r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:64:1\n    |\n LL | / fn elements_outlive<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n@@ -133,7 +133,7 @@ LL | | }\n    |\n    = note: defining type: elements_outlive::<'_#1r, '_#2r, T>\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:81:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -146,7 +146,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 3\n    = note: where '_#1r: '_#2r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:73:1\n    |\n LL | / fn one_region<'a, T>(cell: Cell<&'a ()>, t: T)"}, {"sha": "c3b924577ab47cc7d9ccb30218304c9e5c4a887a", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-static-closure.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -1,4 +1,4 @@\n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:36:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -10,7 +10,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n            ]\n    = note: late-bound region is '_#3r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:32:1\n    |\n LL | / fn no_relationships_late<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n@@ -23,7 +23,7 @@ LL | | }\n    |\n    = note: defining type: no_relationships_late::<'_#1r, T>\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:45:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -34,7 +34,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:40:1\n    |\n LL | / fn no_relationships_early<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n@@ -48,7 +48,7 @@ LL | | }\n    |\n    = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:64:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -59,7 +59,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:49:1\n    |\n LL | / fn projection_outlives<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n@@ -73,7 +73,7 @@ LL | | }\n    |\n    = note: defining type: projection_outlives::<'_#1r, '_#2r, T>\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:73:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -84,7 +84,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n            ]\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:68:1\n    |\n LL | / fn elements_outlive<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n@@ -98,7 +98,7 @@ LL | | }\n    |\n    = note: defining type: elements_outlive::<'_#1r, '_#2r, T>\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:85:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -109,7 +109,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n            ]\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:77:1\n    |\n LL | / fn one_region<'a, T>(cell: Cell<&'a ()>, t: T)"}, {"sha": "1bd97c1caa4aed0b0c2a24314c208d4534b5e5d8", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -1,4 +1,4 @@\n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:38:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -12,7 +12,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 5\n    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#2r)>>::AssocType: '_#3r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:34:1\n    |\n LL | / fn no_relationships_late<'a, 'b, 'c, T>(cell: Cell<&'a ()>, t: T)\n@@ -34,7 +34,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |\n    = help: consider adding an explicit lifetime bound `<T as Anything<'_#5r, '_#6r>>::AssocType: ReFree(DefId(0:17 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]), BrNamed(DefId(0:18 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]::'a[0]), 'a))`...\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:48:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -47,7 +47,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 5\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:43:1\n    |\n LL | / fn no_relationships_early<'a, 'b, 'c, T>(cell: Cell<&'a ()>, t: T)\n@@ -69,7 +69,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |\n    = help: consider adding an explicit lifetime bound `<T as Anything<'_#6r, '_#7r>>::AssocType: ReEarlyBound(0, 'a)`...\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:61:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -82,7 +82,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 5\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:53:1\n    |\n LL | / fn projection_outlives<'a, 'b, 'c, T>(cell: Cell<&'a ()>, t: T)\n@@ -96,7 +96,7 @@ LL | | }\n    |\n    = note: defining type: projection_outlives::<'_#1r, '_#2r, '_#3r, T>\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:70:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -109,7 +109,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 5\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:65:1\n    |\n LL | / fn elements_outlive1<'a, 'b, 'c, T>(cell: Cell<&'a ()>, t: T)\n@@ -123,7 +123,7 @@ LL | | }\n    |\n    = note: defining type: elements_outlive1::<'_#1r, '_#2r, '_#3r, T>\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:79:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -136,7 +136,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 5\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:74:1\n    |\n LL | / fn elements_outlive2<'a, 'b, 'c, T>(cell: Cell<&'a ()>, t: T)\n@@ -150,7 +150,7 @@ LL | | }\n    |\n    = note: defining type: elements_outlive2::<'_#1r, '_#2r, '_#3r, T>\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:87:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -164,7 +164,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 4\n    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#1r)>>::AssocType: '_#2r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:83:1\n    |\n LL | / fn two_regions<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n@@ -191,7 +191,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |\n    = help: consider adding the following bound: `'b: 'a`\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:97:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -204,7 +204,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 4\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#2r)>>::AssocType: '_#3r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:92:1\n    |\n LL | / fn two_regions_outlive<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n@@ -218,7 +218,7 @@ LL | | }\n    |\n    = note: defining type: two_regions_outlive::<'_#1r, '_#2r, T>\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:109:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n@@ -231,7 +231,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: number of external vids: 3\n    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#1r)>>::AssocType: '_#2r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:101:1\n    |\n LL | / fn one_region<'a, T>(cell: Cell<&'a ()>, t: T)"}, {"sha": "a213f423e3c8de6e25244eef2229f0b9f7ac59fa", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -1,4 +1,4 @@\n-note: External requirements\n+note: external requirements\n   --> $DIR/ty-param-closure-approximate-lower-bound.rs:24:24\n    |\n LL |     twice(cell, value, |a, b| invoke(a, b));\n@@ -11,7 +11,7 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n    = note: number of external vids: 2\n    = note: where T: '_#1r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/ty-param-closure-approximate-lower-bound.rs:22:1\n    |\n LL | / fn generic<T>(value: T) {\n@@ -22,7 +22,7 @@ LL | | }\n    |\n    = note: defining type: generic::<T>\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/ty-param-closure-approximate-lower-bound.rs:29:24\n    |\n LL |     twice(cell, value, |a, b| invoke(a, b));\n@@ -36,7 +36,7 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n    = note: number of external vids: 3\n    = note: where T: '_#1r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/ty-param-closure-approximate-lower-bound.rs:28:1\n    |\n LL | / fn generic_fail<'a, T>(cell: Cell<&'a ()>, value: T) {"}, {"sha": "a488637bbc5c2131d18e0820dfb8a0b93f1f16e0", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -1,4 +1,4 @@\n-note: External requirements\n+note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-return-type.rs:26:23\n    |\n LL |     with_signature(x, |y| y)\n@@ -11,7 +11,7 @@ LL |     with_signature(x, |y| y)\n    = note: number of external vids: 3\n    = note: where T: '_#2r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/ty-param-closure-outlives-from-return-type.rs:15:1\n    |\n LL | / fn no_region<'a, T>(x: Box<T>) -> Box<dyn Debug + 'a>"}, {"sha": "62dfe94e384932a602bc3418b411210fbfcf9ba1", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -1,4 +1,4 @@\n-note: External requirements\n+note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:27:26\n    |\n LL |       with_signature(a, b, |x, y| {\n@@ -19,7 +19,7 @@ LL | |     })\n    = note: number of external vids: 3\n    = note: where T: '_#1r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:26:1\n    |\n LL | / fn no_region<'a, T>(a: Cell<&'a ()>, b: T) {\n@@ -48,7 +48,7 @@ LL | |     })\n    |\n    = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:11 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]), BrNamed(DefId(0:12 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]::'a[0]), 'a))`...\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:43:26\n    |\n LL |       with_signature(a, b, |x, y| {\n@@ -68,7 +68,7 @@ LL | |     })\n    = note: number of external vids: 3\n    = note: where T: '_#2r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:39:1\n    |\n LL | / fn correct_region<'a, T>(a: Cell<&'a ()>, b: T)\n@@ -82,7 +82,7 @@ LL | | }\n    |\n    = note: defining type: correct_region::<'_#1r, T>\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:64:26\n    |\n LL |       with_signature(a, b, |x, y| {\n@@ -101,7 +101,7 @@ LL | |     })\n    = note: number of external vids: 4\n    = note: where T: '_#2r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:60:1\n    |\n LL | / fn wrong_region<'a, 'b, T>(a: Cell<&'a ()>, b: T)\n@@ -128,7 +128,7 @@ LL | |     })\n    |\n    = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0:19 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]), BrNamed(DefId(0:20 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]::'a[0]), 'a))`...\n \n-note: External requirements\n+note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:77:26\n    |\n LL |       with_signature(a, b, |x, y| {\n@@ -145,7 +145,7 @@ LL | |     })\n    = note: number of external vids: 4\n    = note: where T: '_#3r\n \n-note: No external requirements\n+note: no external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:72:1\n    |\n LL | / fn outlives_region<'a, 'b, T>(a: Cell<&'a ()>, b: T)"}, {"sha": "ad50b415869dd6f322e2b567dcf5dc5012541fc8", "filename": "src/test/ui/order-dependent-cast-inference.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Forder-dependent-cast-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Forder-dependent-cast-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Forder-dependent-cast-inference.stderr?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -6,7 +6,7 @@ LL |     let mut y = 0 as *const _;\n    |                      |\n    |                      help: consider giving more type information\n    |\n-   = note: The type information given here is insufficient to check whether the pointer cast is valid\n+   = note: the type information given here is insufficient to check whether the pointer cast is valid\n \n error: aborting due to previous error\n "}, {"sha": "d7d0d84432ce6f8231661d837e5348288fba3da0", "filename": "src/test/ui/test-attrs/test-should-panic-attr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-should-panic-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-should-panic-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-should-panic-attr.stderr?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -4,29 +4,29 @@ warning: argument must be of the form: `expected = \"error message\"`\n LL | #[should_panic(expected)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: Errors in this attribute were erroneously allowed and will become a hard error in a future release.\n+   = note: errors in this attribute were erroneously allowed and will become a hard error in a future release.\n \n warning: argument must be of the form: `expected = \"error message\"`\n   --> $DIR/test-should-panic-attr.rs:18:1\n    |\n LL | #[should_panic(expect)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: Errors in this attribute were erroneously allowed and will become a hard error in a future release.\n+   = note: errors in this attribute were erroneously allowed and will become a hard error in a future release.\n \n warning: argument must be of the form: `expected = \"error message\"`\n   --> $DIR/test-should-panic-attr.rs:25:1\n    |\n LL | #[should_panic(expected(foo, bar))]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: Errors in this attribute were erroneously allowed and will become a hard error in a future release.\n+   = note: errors in this attribute were erroneously allowed and will become a hard error in a future release.\n \n warning: argument must be of the form: `expected = \"error message\"`\n   --> $DIR/test-should-panic-attr.rs:32:1\n    |\n LL | #[should_panic(expected = \"foo\", bar)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: Errors in this attribute were erroneously allowed and will become a hard error in a future release.\n+   = note: errors in this attribute were erroneously allowed and will become a hard error in a future release.\n "}, {"sha": "1012edb109336db1e8c2a910d683541659308804", "filename": "src/test/ui/traits/trait-bounds-same-crate-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-same-crate-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-same-crate-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-same-crate-name.rs?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -31,7 +31,7 @@ fn main() {\n         a::try_foo(foo);\n         //~^ ERROR E0277\n         //~| trait impl with same name found\n-        //~| Perhaps two different versions of crate `crate_a2`\n+        //~| perhaps two different versions of crate `crate_a2`\n \n         // We don't want to see the \"version mismatch\" help message here\n         // because `implements_no_traits` has no impl for `Foo`"}, {"sha": "8a6e059604d2ba468ac09f02f02c9bd90ebb6674", "filename": "src/test/ui/traits/trait-bounds-same-crate-name.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-same-crate-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-same-crate-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-same-crate-name.stderr?ref=0810210bcb2c1a50d815e8e71d6db3b6cb0aba7f", "patch": "@@ -14,7 +14,7 @@ help: trait impl with same name found\n    |\n LL | impl Bar for Foo {}\n    | ^^^^^^^^^^^^^^^^^^^\n-   = note: Perhaps two different versions of crate `crate_a2` are being used?\n+   = note: perhaps two different versions of crate `crate_a2` are being used?\n \n error[E0277]: the trait bound `main::a::DoesNotImplementTrait: main::a::Bar` is not satisfied\n   --> $DIR/trait-bounds-same-crate-name.rs:38:20\n@@ -43,7 +43,7 @@ help: trait impl with same name found\n    |\n LL | impl Bar for ImplementsWrongTraitConditionally<isize> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: Perhaps two different versions of crate `crate_a2` are being used?\n+   = note: perhaps two different versions of crate `crate_a2` are being used?\n \n error[E0277]: the trait bound `main::a::ImplementsTraitForUsize<isize>: main::a::Bar` is not satisfied\n   --> $DIR/trait-bounds-same-crate-name.rs:51:20"}]}