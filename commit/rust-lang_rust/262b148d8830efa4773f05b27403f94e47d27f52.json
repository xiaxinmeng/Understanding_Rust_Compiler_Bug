{"sha": "262b148d8830efa4773f05b27403f94e47d27f52", "node_id": "C_kwDOAAsO6NoAKDI2MmIxNDhkODgzMGVmYTQ3NzNmMDViMjc0MDNmOTRlNDdkMjdmNTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-01T13:16:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-01T13:16:49Z"}, "message": "return_self_not_must_use document `#[must_use]` on the type\n\nInspired by a discussion in rust-lang/rust-clippy#8197\n\n---\n\nr? `@llogiq`\n\nchangelog: none\n\nThe lint is this on nightly, therefore no changelog entry for you xD", "tree": {"sha": "7a9f67aa00f732b8304cced8df90abedf2343e21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a9f67aa00f732b8304cced8df90abedf2343e21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/262b148d8830efa4773f05b27403f94e47d27f52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/262b148d8830efa4773f05b27403f94e47d27f52", "html_url": "https://github.com/rust-lang/rust/commit/262b148d8830efa4773f05b27403f94e47d27f52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/262b148d8830efa4773f05b27403f94e47d27f52/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c736a63123ba7aa2c1d2352a874d8e79a101224f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c736a63123ba7aa2c1d2352a874d8e79a101224f", "html_url": "https://github.com/rust-lang/rust/commit/c736a63123ba7aa2c1d2352a874d8e79a101224f"}], "stats": {"total": 41, "additions": 35, "deletions": 6}, "files": [{"sha": "935bbc37d75d0bb77f8000a5951fbdf30d3d7319", "filename": "clippy_lints/src/return_self_not_must_use.rs", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/262b148d8830efa4773f05b27403f94e47d27f52/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/262b148d8830efa4773f05b27403f94e47d27f52/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs?ref=262b148d8830efa4773f05b27403f94e47d27f52", "patch": "@@ -1,5 +1,6 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::ty::is_must_use_ty;\n-use clippy_utils::{diagnostics::span_lint, nth_arg, return_ty};\n+use clippy_utils::{nth_arg, return_ty};\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, FnDecl, HirId, TraitItem, TraitItemKind};\n@@ -13,25 +14,46 @@ declare_clippy_lint! {\n     /// This lint warns when a method returning `Self` doesn't have the `#[must_use]` attribute.\n     ///\n     /// ### Why is this bad?\n-    /// It prevents to \"forget\" to use the newly created value.\n+    /// Methods returning `Self` often create new values, having the `#[must_use]` attribute\n+    /// prevents users from \"forgetting\" to use the newly created value.\n+    ///\n+    /// The `#[must_use]` attribute can be added to the type itself to ensure that instances\n+    /// are never forgotten. Functions returning a type marked with `#[must_use]` will not be\n+    /// linted, as the usage is already enforced by the type attribute.\n     ///\n     /// ### Limitations\n     /// This lint is only applied on methods taking a `self` argument. It would be mostly noise\n     /// if it was added on constructors for example.\n     ///\n     /// ### Example\n+    /// Missing attribute\n     /// ```rust\n     /// pub struct Bar;\n-    ///\n     /// impl Bar {\n     ///     // Bad\n     ///     pub fn bar(&self) -> Self {\n     ///         Self\n     ///     }\n+    /// }\n+    /// ```\n     ///\n-    ///     // Good\n+    /// It's better to have the `#[must_use]` attribute on the method like this:\n+    /// ```rust\n+    /// pub struct Bar;\n+    /// impl Bar {\n     ///     #[must_use]\n-    ///     pub fn foo(&self) -> Self {\n+    ///     pub fn bar(&self) -> Self {\n+    ///         Self\n+    ///     }\n+    /// }\n+    /// ```\n+    ///\n+    /// Or on the type definition like this:\n+    /// ```rust\n+    /// #[must_use]\n+    /// pub struct Bar;\n+    /// impl Bar {\n+    ///     pub fn bar(&self) -> Self {\n     ///         Self\n     ///     }\n     /// }\n@@ -65,11 +87,13 @@ fn check_method(cx: &LateContext<'tcx>, decl: &'tcx FnDecl<'tcx>, fn_def: LocalD\n         if !is_must_use_ty(cx, ret_ty);\n \n         then {\n-            span_lint(\n+            span_lint_and_help(\n                 cx,\n                 RETURN_SELF_NOT_MUST_USE,\n                 span,\n                 \"missing `#[must_use]` attribute on a method returning `Self`\",\n+                None,\n+                \"consider adding the `#[must_use]` attribute to the method or directly to the `Self` type\"\n             );\n         }\n     }"}, {"sha": "8af10cb65c40670202da1fd459fea989382ccafc", "filename": "tests/ui/return_self_not_must_use.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/262b148d8830efa4773f05b27403f94e47d27f52/tests%2Fui%2Freturn_self_not_must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/262b148d8830efa4773f05b27403f94e47d27f52/tests%2Fui%2Freturn_self_not_must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freturn_self_not_must_use.stderr?ref=262b148d8830efa4773f05b27403f94e47d27f52", "patch": "@@ -5,6 +5,7 @@ LL |     fn what(&self) -> Self;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::return-self-not-must-use` implied by `-D warnings`\n+   = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type\n \n error: missing `#[must_use]` attribute on a method returning `Self`\n   --> $DIR/return_self_not_must_use.rs:17:5\n@@ -13,6 +14,8 @@ LL | /     pub fn foo(&self) -> Self {\n LL | |         Self\n LL | |     }\n    | |_____^\n+   |\n+   = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type\n \n error: missing `#[must_use]` attribute on a method returning `Self`\n   --> $DIR/return_self_not_must_use.rs:20:5\n@@ -21,6 +24,8 @@ LL | /     pub fn bar(self) -> Self {\n LL | |         self\n LL | |     }\n    | |_____^\n+   |\n+   = help: consider adding the `#[must_use]` attribute to the method or directly to the `Self` type\n \n error: aborting due to 3 previous errors\n "}]}