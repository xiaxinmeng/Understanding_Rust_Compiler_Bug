{"sha": "fcc356373bba8c20a18d26bc81242c77c4153089", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjYzM1NjM3M2JiYThjMjBhMThkMjZiYzgxMjQyYzc3YzQxNTMwODk=", "commit": {"author": {"name": "Michael F. Lamb", "email": "mike@datagrok.org", "date": "2016-01-07T19:44:03Z"}, "committer": {"name": "Michael F. Lamb", "email": "mike@datagrok.org", "date": "2016-01-07T19:44:03Z"}, "message": "Remove extraneous [], replace accidental removed link to heap section", "tree": {"sha": "178c0f2645d5c319e26907c8a1e245963797f6fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/178c0f2645d5c319e26907c8a1e245963797f6fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcc356373bba8c20a18d26bc81242c77c4153089", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcc356373bba8c20a18d26bc81242c77c4153089", "html_url": "https://github.com/rust-lang/rust/commit/fcc356373bba8c20a18d26bc81242c77c4153089", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcc356373bba8c20a18d26bc81242c77c4153089/comments", "author": {"login": "datagrok", "id": 569728, "node_id": "MDQ6VXNlcjU2OTcyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/569728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/datagrok", "html_url": "https://github.com/datagrok", "followers_url": "https://api.github.com/users/datagrok/followers", "following_url": "https://api.github.com/users/datagrok/following{/other_user}", "gists_url": "https://api.github.com/users/datagrok/gists{/gist_id}", "starred_url": "https://api.github.com/users/datagrok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/datagrok/subscriptions", "organizations_url": "https://api.github.com/users/datagrok/orgs", "repos_url": "https://api.github.com/users/datagrok/repos", "events_url": "https://api.github.com/users/datagrok/events{/privacy}", "received_events_url": "https://api.github.com/users/datagrok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "datagrok", "id": 569728, "node_id": "MDQ6VXNlcjU2OTcyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/569728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/datagrok", "html_url": "https://github.com/datagrok", "followers_url": "https://api.github.com/users/datagrok/followers", "following_url": "https://api.github.com/users/datagrok/following{/other_user}", "gists_url": "https://api.github.com/users/datagrok/gists{/gist_id}", "starred_url": "https://api.github.com/users/datagrok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/datagrok/subscriptions", "organizations_url": "https://api.github.com/users/datagrok/orgs", "repos_url": "https://api.github.com/users/datagrok/repos", "events_url": "https://api.github.com/users/datagrok/events{/privacy}", "received_events_url": "https://api.github.com/users/datagrok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a6dbb30a21be8d237055479af613e30415b0c56", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a6dbb30a21be8d237055479af613e30415b0c56", "html_url": "https://github.com/rust-lang/rust/commit/3a6dbb30a21be8d237055479af613e30415b0c56"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "a62d31d362b14f217c367efbfe76779167dd1ded", "filename": "src/doc/book/ownership.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fcc356373bba8c20a18d26bc81242c77c4153089/src%2Fdoc%2Fbook%2Fownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/fcc356373bba8c20a18d26bc81242c77c4153089/src%2Fdoc%2Fbook%2Fownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fownership.md?ref=fcc356373bba8c20a18d26bc81242c77c4153089", "patch": "@@ -51,21 +51,21 @@ fn foo() {\n }\n ```\n \n-When `v` comes into scope, a new [vector][] is created, and it allocates space\n-on the heap for each of its elements. When `v` goes out of scope at the end of\n-`foo()`, Rust will clean up everything related to the vector, even the\n+When `v` comes into scope, a new [vector] is created, and it allocates space on\n+[the heap][heap] for each of its elements. When `v` goes out of scope at the\n+end of `foo()`, Rust will clean up everything related to the vector, even the\n heap-allocated memory. This happens deterministically, at the end of the scope.\n \n-We'll cover [vectors][vector] in detail later in this chapter; we only use them\n+We'll cover [vectors] in detail later in this chapter; we only use them\n here as an example of a type that allocates space on the heap at runtime. They\n-behave like [arrays][], except their size may change by `push()`ing more\n+behave like [arrays], except their size may change by `push()`ing more\n elements onto them.\n \n Vectors have a [generic type][generics] `Vec<T>`, so in this example `v` will have type\n `Vec<i32>`. We'll cover generics in detail later in this chapter.\n \n [arrays]: primitive-types.html#arrays\n-[vector]: vectors.html\n+[vectors]: vectors.html\n [heap]: the-stack-and-the-heap.html\n [bindings]: variable-bindings.html\n [generics]: generics.html"}, {"sha": "d6188fa7cdcf8b0b464d2bd9df7c4a6e509d0ca3", "filename": "src/doc/book/primitive-types.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcc356373bba8c20a18d26bc81242c77c4153089/src%2Fdoc%2Fbook%2Fprimitive-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/fcc356373bba8c20a18d26bc81242c77c4153089/src%2Fdoc%2Fbook%2Fprimitive-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fprimitive-types.md?ref=fcc356373bba8c20a18d26bc81242c77c4153089", "patch": "@@ -167,7 +167,7 @@ variable binding. Slices have a defined length, can be mutable or immutable.\n ## Slicing syntax\n \n You can use a combo of `&` and `[]` to create a slice from various things. The\n-`&` indicates that slices are similar to [references][], which we will cover in\n+`&` indicates that slices are similar to [references], which we will cover in\n detail later in this section. The `[]`s, with a range, let you define the\n length of the slice:\n \n@@ -194,7 +194,7 @@ documentation][slice].\n Rust\u2019s `str` type is the most primitive string type. As an [unsized type][dst],\n it\u2019s not very useful by itself, but becomes useful when placed behind a\n reference, like `&str`. We'll elaborate further when we cover\n-[Strings][strings] and [references][].\n+[Strings][strings] and [references].\n \n [dst]: unsized-types.html\n [strings]: strings.html"}]}