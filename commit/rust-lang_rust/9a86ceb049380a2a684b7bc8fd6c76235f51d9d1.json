{"sha": "9a86ceb049380a2a684b7bc8fd6c76235f51d9d1", "node_id": "C_kwDOAAsO6NoAKDlhODZjZWIwNDkzODBhMmE2ODRiN2JjOGZkNmM3NjIzNWY1MWQ5ZDE", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-05-25T14:17:56Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-05-26T10:40:55Z"}, "message": "Improve startup time for bootstrap.py", "tree": {"sha": "33eb8dc2aa4c69d6310dc4275084335bcadd47b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33eb8dc2aa4c69d6310dc4275084335bcadd47b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a86ceb049380a2a684b7bc8fd6c76235f51d9d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a86ceb049380a2a684b7bc8fd6c76235f51d9d1", "html_url": "https://github.com/rust-lang/rust/commit/9a86ceb049380a2a684b7bc8fd6c76235f51d9d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a86ceb049380a2a684b7bc8fd6c76235f51d9d1/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "url": "https://api.github.com/repos/rust-lang/rust/commits/69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "html_url": "https://github.com/rust-lang/rust/commit/69fef92ab2f287f072b66fb7b4f62c8bb4acba43"}], "stats": {"total": 93, "additions": 44, "deletions": 49}, "files": [{"sha": "057560922bd48db13f7d37e83fed8c5d108b10dc", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 44, "deletions": 49, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/9a86ceb049380a2a684b7bc8fd6c76235f51d9d1/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/9a86ceb049380a2a684b7bc8fd6c76235f51d9d1/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=9a86ceb049380a2a684b7bc8fd6c76235f51d9d1", "patch": "@@ -226,16 +226,13 @@ def format_build_time(duration):\n \n def default_build_triple(verbose):\n     \"\"\"Build triple as in LLVM\"\"\"\n-    # If the user already has a host build triple with an existing `rustc`\n-    # install, use their preference. This fixes most issues with Windows builds\n-    # being detected as GNU instead of MSVC.\n+    # If we're on Windows and have an existing `rustc` toolchain, use `rustc --version --verbose`\n+    # to find our host target triple. This fixes an issue with Windows builds being detected\n+    # as GNU instead of MSVC.\n+    # Otherwise, detect it via `uname`\n     default_encoding = sys.getdefaultencoding()\n \n-    if sys.platform == 'darwin':\n-        if verbose:\n-            print(\"not using rustc detection as it is unreliable on macOS\", file=sys.stderr)\n-            print(\"falling back to auto-detect\", file=sys.stderr)\n-    else:\n+    if platform_is_win32():\n         try:\n             version = subprocess.check_output([\"rustc\", \"--version\", \"--verbose\"],\n                     stderr=subprocess.DEVNULL)\n@@ -253,19 +250,17 @@ def default_build_triple(verbose):\n                 print(\"falling back to auto-detect\", file=sys.stderr)\n \n     required = not platform_is_win32()\n-    ostype = require([\"uname\", \"-s\"], exit=required)\n-    cputype = require(['uname', '-m'], exit=required)\n+    uname = require([\"uname\", \"-smp\"], exit=required)\n \n     # If we do not have `uname`, assume Windows.\n-    if ostype is None or cputype is None:\n+    if uname is None:\n         return 'x86_64-pc-windows-msvc'\n \n-    ostype = ostype.decode(default_encoding)\n-    cputype = cputype.decode(default_encoding)\n+    kernel, cputype, processor = uname.decode(default_encoding).split()\n \n     # The goal here is to come up with the same triple as LLVM would,\n     # at least for the subset of platforms we're willing to target.\n-    ostype_mapper = {\n+    kerneltype_mapper = {\n         'Darwin': 'apple-darwin',\n         'DragonFly': 'unknown-dragonfly',\n         'FreeBSD': 'unknown-freebsd',\n@@ -275,17 +270,18 @@ def default_build_triple(verbose):\n     }\n \n     # Consider the direct transformation first and then the special cases\n-    if ostype in ostype_mapper:\n-        ostype = ostype_mapper[ostype]\n-    elif ostype == 'Linux':\n-        os_from_sp = subprocess.check_output(\n-            ['uname', '-o']).strip().decode(default_encoding)\n-        if os_from_sp == 'Android':\n-            ostype = 'linux-android'\n+    if kernel in kerneltype_mapper:\n+        kernel = kerneltype_mapper[kernel]\n+    elif kernel == 'Linux':\n+        # Apple doesn't support `-o` so this can't be used in the combined\n+        # uname invocation above\n+        ostype = require([\"uname\", \"-o\"], exit=required).decode(default_encoding)\n+        if ostype == 'Android':\n+            kernel = 'linux-android'\n         else:\n-            ostype = 'unknown-linux-gnu'\n-    elif ostype == 'SunOS':\n-        ostype = 'pc-solaris'\n+            kernel = 'unknown-linux-gnu'\n+    elif kernel == 'SunOS':\n+        kernel = 'pc-solaris'\n         # On Solaris, uname -m will return a machine classification instead\n         # of a cpu type, so uname -p is recommended instead.  However, the\n         # output from that option is too generic for our purposes (it will\n@@ -294,34 +290,34 @@ def default_build_triple(verbose):\n         cputype = require(['isainfo', '-k']).decode(default_encoding)\n         # sparc cpus have sun as a target vendor\n         if 'sparc' in cputype:\n-            ostype = 'sun-solaris'\n-    elif ostype.startswith('MINGW'):\n+            kernel = 'sun-solaris'\n+    elif kernel.startswith('MINGW'):\n         # msys' `uname` does not print gcc configuration, but prints msys\n         # configuration. so we cannot believe `uname -m`:\n         # msys1 is always i686 and msys2 is always x86_64.\n         # instead, msys defines $MSYSTEM which is MINGW32 on i686 and\n         # MINGW64 on x86_64.\n-        ostype = 'pc-windows-gnu'\n+        kernel = 'pc-windows-gnu'\n         cputype = 'i686'\n         if os.environ.get('MSYSTEM') == 'MINGW64':\n             cputype = 'x86_64'\n-    elif ostype.startswith('MSYS'):\n-        ostype = 'pc-windows-gnu'\n-    elif ostype.startswith('CYGWIN_NT'):\n+    elif kernel.startswith('MSYS'):\n+        kernel = 'pc-windows-gnu'\n+    elif kernel.startswith('CYGWIN_NT'):\n         cputype = 'i686'\n-        if ostype.endswith('WOW64'):\n+        if kernel.endswith('WOW64'):\n             cputype = 'x86_64'\n-        ostype = 'pc-windows-gnu'\n-    elif sys.platform == 'win32':\n+        kernel = 'pc-windows-gnu'\n+    elif platform_is_win32():\n         # Some Windows platforms might have a `uname` command that returns a\n         # non-standard string (e.g. gnuwin32 tools returns `windows32`). In\n         # these cases, fall back to using sys.platform.\n         return 'x86_64-pc-windows-msvc'\n     else:\n-        err = \"unknown OS type: {}\".format(ostype)\n+        err = \"unknown OS type: {}\".format(kernel)\n         sys.exit(err)\n \n-    if cputype in ['powerpc', 'riscv'] and ostype == 'unknown-freebsd':\n+    if cputype in ['powerpc', 'riscv'] and kernel == 'unknown-freebsd':\n         cputype = subprocess.check_output(\n               ['uname', '-p']).strip().decode(default_encoding)\n     cputype_mapper = {\n@@ -354,24 +350,23 @@ def default_build_triple(verbose):\n         cputype = cputype_mapper[cputype]\n     elif cputype in {'xscale', 'arm'}:\n         cputype = 'arm'\n-        if ostype == 'linux-android':\n-            ostype = 'linux-androideabi'\n-        elif ostype == 'unknown-freebsd':\n-            cputype = subprocess.check_output(\n-                ['uname', '-p']).strip().decode(default_encoding)\n-            ostype = 'unknown-freebsd'\n+        if kernel == 'linux-android':\n+            kernel = 'linux-androideabi'\n+        elif kernel == 'unknown-freebsd':\n+            cputype = processor\n+            kernel = 'unknown-freebsd'\n     elif cputype == 'armv6l':\n         cputype = 'arm'\n-        if ostype == 'linux-android':\n-            ostype = 'linux-androideabi'\n+        if kernel == 'linux-android':\n+            kernel = 'linux-androideabi'\n         else:\n-            ostype += 'eabihf'\n+            kernel += 'eabihf'\n     elif cputype in {'armv7l', 'armv8l'}:\n         cputype = 'armv7'\n-        if ostype == 'linux-android':\n-            ostype = 'linux-androideabi'\n+        if kernel == 'linux-android':\n+            kernel = 'linux-androideabi'\n         else:\n-            ostype += 'eabihf'\n+            kernel += 'eabihf'\n     elif cputype == 'mips':\n         if sys.byteorder == 'big':\n             cputype = 'mips'\n@@ -387,14 +382,14 @@ def default_build_triple(verbose):\n         else:\n             raise ValueError('unknown byteorder: {}'.format(sys.byteorder))\n         # only the n64 ABI is supported, indicate it\n-        ostype += 'abi64'\n+        kernel += 'abi64'\n     elif cputype == 'sparc' or cputype == 'sparcv9' or cputype == 'sparc64':\n         pass\n     else:\n         err = \"unknown cpu type: {}\".format(cputype)\n         sys.exit(err)\n \n-    return \"{}-{}\".format(cputype, ostype)\n+    return \"{}-{}\".format(cputype, kernel)\n \n \n @contextlib.contextmanager"}]}