{"sha": "6bb1f792db5536bcb4adbc7bcefa10cb5a827aed", "node_id": "C_kwDOAAsO6NoAKDZiYjFmNzkyZGI1NTM2YmNiNGFkYmM3YmNlZmExMGNiNWE4MjdhZWQ", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-05-03T13:47:36Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-05-03T13:47:36Z"}, "message": "cleanup nll generalizer", "tree": {"sha": "08b1abee63226e9767deb16379a7abc9c1ea8598", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08b1abee63226e9767deb16379a7abc9c1ea8598"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bb1f792db5536bcb4adbc7bcefa10cb5a827aed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bb1f792db5536bcb4adbc7bcefa10cb5a827aed", "html_url": "https://github.com/rust-lang/rust/commit/6bb1f792db5536bcb4adbc7bcefa10cb5a827aed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bb1f792db5536bcb4adbc7bcefa10cb5a827aed/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71af5c4074cf1993551c10d8e4a1d6da9c27ce33", "url": "https://api.github.com/repos/rust-lang/rust/commits/71af5c4074cf1993551c10d8e4a1d6da9c27ce33", "html_url": "https://github.com/rust-lang/rust/commit/71af5c4074cf1993551c10d8e4a1d6da9c27ce33"}], "stats": {"total": 75, "additions": 7, "deletions": 68}, "files": [{"sha": "88a0a81e276d27e4de74e32a48f864af3afdeddc", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 7, "deletions": 68, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/6bb1f792db5536bcb4adbc7bcefa10cb5a827aed/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bb1f792db5536bcb4adbc7bcefa10cb5a827aed/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=6bb1f792db5536bcb4adbc7bcefa10cb5a827aed", "patch": "@@ -30,11 +30,10 @@ use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::fold::FnMutDelegate;\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n-use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitableExt, TypeVisitor};\n+use rustc_middle::ty::visit::TypeVisitableExt;\n use rustc_middle::ty::{self, InferConst, Ty, TyCtxt};\n use rustc_span::{Span, Symbol};\n use std::fmt::Debug;\n-use std::ops::ControlFlow;\n \n use super::combine::ObligationEmittingRelation;\n \n@@ -115,11 +114,6 @@ pub trait TypeRelatingDelegate<'tcx> {\n     fn forbid_inference_vars() -> bool;\n }\n \n-#[derive(Clone, Debug, Default)]\n-struct BoundRegionScope<'tcx> {\n-    map: FxHashMap<ty::BoundRegion, ty::Region<'tcx>>,\n-}\n-\n #[derive(Copy, Clone)]\n struct UniversallyQuantified(bool);\n \n@@ -230,10 +224,13 @@ where\n     ) -> RelateResult<'tcx, T> {\n         let universe = self.infcx.probe_ty_var(for_vid).unwrap_err();\n \n+        if value.has_escaping_bound_vars() {\n+            bug!(\"trying to instantiate {for_vid:?} with escaping bound vars: {value:?}\");\n+        }\n+\n         let mut generalizer = TypeGeneralizer {\n             infcx: self.infcx,\n             delegate: &mut self.delegate,\n-            first_free_index: ty::INNERMOST,\n             ambient_variance: self.ambient_variance,\n             for_vid_sub_root: self.infcx.inner.borrow_mut().type_variables().sub_root_var(for_vid),\n             universe,\n@@ -488,13 +485,7 @@ where\n         }\n \n         if a == b {\n-            // Subtle: if a or b has a bound variable that we are lazily\n-            // substituting, then even if a == b, it could be that the values we\n-            // will substitute for those bound variables are *not* the same, and\n-            // hence returning `Ok(a)` is incorrect.\n-            if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {\n-                return Ok(a);\n-            }\n+            return Ok(a);\n         }\n \n         match (a.kind(), b.kind()) {\n@@ -726,47 +717,6 @@ where\n     }\n }\n \n-/// When we encounter a binder like `for<..> fn(..)`, we actually have\n-/// to walk the `fn` value to find all the values bound by the `for`\n-/// (these are not explicitly present in the ty representation right\n-/// now). This visitor handles that: it descends the type, tracking\n-/// binder depth, and finds late-bound regions targeting the\n-/// `for<..`>. For each of those, it creates an entry in\n-/// `bound_region_scope`.\n-struct ScopeInstantiator<'me, 'tcx> {\n-    next_region: &'me mut dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx>,\n-    // The debruijn index of the scope we are instantiating.\n-    target_index: ty::DebruijnIndex,\n-    bound_region_scope: &'me mut BoundRegionScope<'tcx>,\n-}\n-\n-impl<'me, 'tcx> TypeVisitor<TyCtxt<'tcx>> for ScopeInstantiator<'me, 'tcx> {\n-    fn visit_binder<T: TypeVisitable<TyCtxt<'tcx>>>(\n-        &mut self,\n-        t: &ty::Binder<'tcx, T>,\n-    ) -> ControlFlow<Self::BreakTy> {\n-        self.target_index.shift_in(1);\n-        t.super_visit_with(self);\n-        self.target_index.shift_out(1);\n-\n-        ControlFlow::Continue(())\n-    }\n-\n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        let ScopeInstantiator { bound_region_scope, next_region, .. } = self;\n-\n-        match *r {\n-            ty::ReLateBound(debruijn, br) if debruijn == self.target_index => {\n-                bound_region_scope.map.entry(br).or_insert_with(|| next_region(br));\n-            }\n-\n-            _ => {}\n-        }\n-\n-        ControlFlow::Continue(())\n-    }\n-}\n-\n /// The \"type generalizer\" is used when handling inference variables.\n ///\n /// The basic strategy for handling a constraint like `?A <: B` is to\n@@ -780,11 +730,6 @@ impl<'me, 'tcx> TypeVisitor<TyCtxt<'tcx>> for ScopeInstantiator<'me, 'tcx> {\n /// value of `A`. Finally, we relate `&'0 u32 <: &'x u32`, which\n /// establishes `'0: 'x` as a constraint.\n ///\n-/// As a side-effect of this generalization procedure, we also replace\n-/// all the bound regions that we have traversed with concrete values,\n-/// so that the resulting generalized type is independent from the\n-/// scopes.\n-///\n /// [blog post]: https://is.gd/0hKvIr\n struct TypeGeneralizer<'me, 'tcx, D>\n where\n@@ -798,8 +743,6 @@ where\n     /// some other type. What will be the variance at this point?\n     ambient_variance: ty::Variance,\n \n-    first_free_index: ty::DebruijnIndex,\n-\n     /// The vid of the type variable that is in the process of being\n     /// instantiated. If we find this within the value we are folding,\n     /// that means we would have created a cyclic value.\n@@ -939,7 +882,7 @@ where\n     ) -> RelateResult<'tcx, ty::Region<'tcx>> {\n         debug!(\"TypeGeneralizer::regions(a={:?})\", a);\n \n-        if let ty::ReLateBound(debruijn, _) = *a && debruijn < self.first_free_index {\n+        if let ty::ReLateBound(..) = *a {\n             return Ok(a);\n         }\n \n@@ -958,7 +901,6 @@ where\n         // FIXME(#54105) -- if the ambient variance is bivariant,\n         // though, we may however need to check well-formedness or\n         // risk a problem like #41677 again.\n-\n         let replacement_region_vid = self.delegate.generalize_existential(self.universe);\n \n         Ok(replacement_region_vid)\n@@ -1002,10 +944,7 @@ where\n         T: Relate<'tcx>,\n     {\n         debug!(\"TypeGeneralizer::binders(a={:?})\", a);\n-\n-        self.first_free_index.shift_in(1);\n         let result = self.relate(a.skip_binder(), a.skip_binder())?;\n-        self.first_free_index.shift_out(1);\n         Ok(a.rebind(result))\n     }\n }"}]}