{"sha": "4cd28a73878a00bd1c8242919236f491a47cc1f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZDI4YTczODc4YTAwYmQxYzgyNDI5MTkyMzZmNDkxYTQ3Y2MxZjA=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertaylorj@gmail.com", "date": "2017-03-20T09:37:52Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertaylorj@gmail.com", "date": "2017-03-20T09:37:52Z"}, "message": "On-demandify associated item retrieval", "tree": {"sha": "5f1884f4842d62d8be3ee8503d85a9cd2b42c6c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f1884f4842d62d8be3ee8503d85a9cd2b42c6c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cd28a73878a00bd1c8242919236f491a47cc1f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cd28a73878a00bd1c8242919236f491a47cc1f0", "html_url": "https://github.com/rust-lang/rust/commit/4cd28a73878a00bd1c8242919236f491a47cc1f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cd28a73878a00bd1c8242919236f491a47cc1f0/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6eb9960d3603aadab62b8f0877e87c63f67001d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eb9960d3603aadab62b8f0877e87c63f67001d6", "html_url": "https://github.com/rust-lang/rust/commit/6eb9960d3603aadab62b8f0877e87c63f67001d6"}], "stats": {"total": 95, "additions": 46, "deletions": 49}, "files": [{"sha": "610a6d6d8eeaf0ff8a9bace67df340a02a98a9f2", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 45, "deletions": 49, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/4cd28a73878a00bd1c8242919236f491a47cc1f0/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd28a73878a00bd1c8242919236f491a47cc1f0/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=4cd28a73878a00bd1c8242919236f491a47cc1f0", "patch": "@@ -2049,55 +2049,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn associated_item(self, def_id: DefId) -> AssociatedItem {\n-        if !def_id.is_local() {\n-            return queries::associated_item::get(self, DUMMY_SP, def_id);\n-        }\n-\n-        self.maps.associated_item.memoize(def_id, || {\n-            // When the user asks for a given associated item, we\n-            // always go ahead and convert all the associated items in\n-            // the container. Note that we are also careful only to\n-            // ever register a read on the *container* of the assoc\n-            // item, not the assoc item itself. This prevents changes\n-            // in the details of an item (for example, the type to\n-            // which an associated type is bound) from contaminating\n-            // those tasks that just need to scan the names of items\n-            // and so forth.\n-\n-            let id = self.hir.as_local_node_id(def_id).unwrap();\n-            let parent_id = self.hir.get_parent(id);\n-            let parent_def_id = self.hir.local_def_id(parent_id);\n-            let parent_item = self.hir.expect_item(parent_id);\n-            match parent_item.node {\n-                hir::ItemImpl(.., ref impl_trait_ref, _, ref impl_item_refs) => {\n-                    for impl_item_ref in impl_item_refs {\n-                        let assoc_item =\n-                            self.associated_item_from_impl_item_ref(parent_def_id,\n-                                                                    impl_trait_ref.is_some(),\n-                                                                    impl_item_ref);\n-                        self.maps.associated_item.borrow_mut()\n-                            .insert(assoc_item.def_id, assoc_item);\n-                    }\n-                }\n-\n-                hir::ItemTrait(.., ref trait_item_refs) => {\n-                    for trait_item_ref in trait_item_refs {\n-                        let assoc_item =\n-                            self.associated_item_from_trait_item_ref(parent_def_id, trait_item_ref);\n-                        self.maps.associated_item.borrow_mut()\n-                            .insert(assoc_item.def_id, assoc_item);\n-                    }\n-                }\n-\n-                ref r => {\n-                    panic!(\"unexpected container of associated items: {:?}\", r)\n-                }\n-            }\n-\n-            // memoize wants us to return something, so return\n-            // the one we generated for this def-id\n-            *self.maps.associated_item.borrow().get(&def_id).unwrap()\n-        })\n+        queries::associated_item::get(self, DUMMY_SP, def_id)\n     }\n \n     fn associated_item_from_trait_item_ref(self,\n@@ -2623,3 +2575,47 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n }\n+\n+fn associated_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n+    -> AssociatedItem\n+{\n+    let id = tcx.hir.as_local_node_id(def_id).unwrap();\n+    let parent_id = tcx.hir.get_parent(id);\n+    let parent_def_id = tcx.hir.local_def_id(parent_id);\n+    let parent_item = tcx.hir.expect_item(parent_id);\n+    match parent_item.node {\n+        hir::ItemImpl(.., ref impl_trait_ref, _, ref impl_item_refs) => {\n+            for impl_item_ref in impl_item_refs {\n+                let assoc_item =\n+                    tcx.associated_item_from_impl_item_ref(parent_def_id,\n+                                                            impl_trait_ref.is_some(),\n+                                                            impl_item_ref);\n+                if assoc_item.def_id == def_id {\n+                    return assoc_item;\n+                }\n+            }\n+        }\n+\n+        hir::ItemTrait(.., ref trait_item_refs) => {\n+            for trait_item_ref in trait_item_refs {\n+                let assoc_item =\n+                    tcx.associated_item_from_trait_item_ref(parent_def_id, trait_item_ref);\n+                if assoc_item.def_id == def_id {\n+                    return assoc_item;\n+                }\n+            }\n+        }\n+\n+        ref r => {\n+            panic!(\"unexpected container of associated items: {:?}\", r)\n+        }\n+    }\n+    panic!(\"associated item not found for def_id: {:?}\", def_id);\n+}\n+\n+pub fn provide(providers: &mut ty::maps::Providers) {\n+    *providers = ty::maps::Providers {\n+        associated_item,\n+        ..*providers\n+    };\n+}"}, {"sha": "10980670b3148068a76ffa1996df1e6b8225d2e9", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4cd28a73878a00bd1c8242919236f491a47cc1f0/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd28a73878a00bd1c8242919236f491a47cc1f0/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=4cd28a73878a00bd1c8242919236f491a47cc1f0", "patch": "@@ -882,6 +882,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     let mut local_providers = ty::maps::Providers::default();\n     mir::provide(&mut local_providers);\n     typeck::provide(&mut local_providers);\n+    ty::provide(&mut local_providers);\n \n     let mut extern_providers = ty::maps::Providers::default();\n     cstore::provide(&mut extern_providers);"}]}