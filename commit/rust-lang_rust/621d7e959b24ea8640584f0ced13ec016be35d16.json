{"sha": "621d7e959b24ea8640584f0ced13ec016be35d16", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMWQ3ZTk1OWIyNGVhODY0MDU4NGYwY2VkMTNlYzAxNmJlMzVkMTY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-24T22:10:55Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-25T19:12:56Z"}, "message": "Fix rebase and sort assoc type list for deterministic output", "tree": {"sha": "7d3cf301a7e0e5aa9c624625f5a56a8762267df7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d3cf301a7e0e5aa9c624625f5a56a8762267df7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/621d7e959b24ea8640584f0ced13ec016be35d16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/621d7e959b24ea8640584f0ced13ec016be35d16", "html_url": "https://github.com/rust-lang/rust/commit/621d7e959b24ea8640584f0ced13ec016be35d16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/621d7e959b24ea8640584f0ced13ec016be35d16/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93fb219579b3c012dbef7594b676f62070cd666e", "url": "https://api.github.com/repos/rust-lang/rust/commits/93fb219579b3c012dbef7594b676f62070cd666e", "html_url": "https://github.com/rust-lang/rust/commit/93fb219579b3c012dbef7594b676f62070cd666e"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "d28af783c0b25335724c8efc4e1bcd9f9393bb60", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/621d7e959b24ea8640584f0ced13ec016be35d16/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/621d7e959b24ea8640584f0ced13ec016be35d16/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=621d7e959b24ea8640584f0ced13ec016be35d16", "patch": "@@ -1686,6 +1686,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             },\n             _ => {}\n         }\n+        names.sort();\n+        trait_bound_spans.sort();\n         let mut err = struct_span_err!(\n             tcx.sess,\n             trait_bound_spans,"}, {"sha": "483c205f42d6daa3a109942b1cd7e715cbcc5d3e", "filename": "src/test/compile-fail/issue-23595-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/621d7e959b24ea8640584f0ced13ec016be35d16/src%2Ftest%2Fcompile-fail%2Fissue-23595-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/621d7e959b24ea8640584f0ced13ec016be35d16/src%2Ftest%2Fcompile-fail%2Fissue-23595-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23595-1.rs?ref=621d7e959b24ea8640584f0ced13ec016be35d16", "patch": "@@ -6,7 +6,7 @@ trait Hierarchy {\n     type Value;\n     type ChildKey;\n     type Children = dyn Index<Self::ChildKey, Output=dyn Hierarchy>;\n-    //~^ ERROR: the value of the associated types `Value` (from trait `Hierarchy`), `ChildKey`\n+    //~^ ERROR: the value of the associated types\n \n     fn data(&self) -> Option<(Self::Value, Self::Children)>;\n }"}, {"sha": "df19332b6458ac49096ac9dabffafaa7ae88773c", "filename": "src/test/ui/associated-type/associated-type-projection-from-multiple-supertraits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/621d7e959b24ea8640584f0ced13ec016be35d16/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/621d7e959b24ea8640584f0ced13ec016be35d16/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.rs?ref=621d7e959b24ea8640584f0ced13ec016be35d16", "patch": "@@ -22,16 +22,16 @@ fn dent<C:BoxCar>(c: C, color: C::Color) {\n \n fn dent_object<COLOR>(c: dyn BoxCar<Color=COLOR>) {\n     //~^ ERROR ambiguous associated type\n-    //~| ERROR the value of the associated types `Color` (from trait `Vehicle`), `Color` (from\n+    //~| ERROR the value of the associated types\n }\n \n fn paint<C:BoxCar>(c: C, d: C::Color) {\n     //~^ ERROR ambiguous associated type `Color` in bounds of `C`\n }\n \n fn dent_object_2<COLOR>(c: dyn BoxCar) where <dyn BoxCar as Vehicle>::Color = COLOR {\n-    //~^ ERROR the value of the associated types `Color` (from trait `Vehicle`), `Color` (from\n-    //~| ERROR equality constraints are not yet supported in where clauses\n+    //~^ ERROR the value of the associated types\n+    //~| ERROR equality constraints are not yet supported in `where` clauses\n }\n \n fn dent_object_3<X, COLOR>(c: X)"}, {"sha": "c60d5f8f2c8b8bcc96e87b502091a66f73d788e6", "filename": "src/test/ui/associated-type/associated-type-projection-from-multiple-supertraits.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/621d7e959b24ea8640584f0ced13ec016be35d16/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/621d7e959b24ea8640584f0ced13ec016be35d16/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-multiple-supertraits.stderr?ref=621d7e959b24ea8640584f0ced13ec016be35d16", "patch": "@@ -1,10 +1,10 @@\n-error: equality constraints are not yet supported in where clauses\n+error: equality constraints are not yet supported in `where` clauses\n   --> $DIR/associated-type-projection-from-multiple-supertraits.rs:32:46\n    |\n LL | fn dent_object_2<COLOR>(c: dyn BoxCar) where <dyn BoxCar as Vehicle>::Color = COLOR {\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not supported\n    |\n-   = note: for more information, see #20041\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/20041\n \n error[E0221]: ambiguous associated type `Color` in bounds of `C`\n   --> $DIR/associated-type-projection-from-multiple-supertraits.rs:19:32\n@@ -45,7 +45,7 @@ LL | fn dent_object<COLOR>(c: dyn BoxCar<Color=COLOR>) {\n                    T: Box::Color = COLOR,\n                    T: Vehicle::Color = COLOR\n \n-error[E0191]: the value of the associated types `Color` (from trait `Vehicle`), `Color` (from trait `Box`) must be specified\n+error[E0191]: the value of the associated types `Color` (from trait `Box`), `Color` (from trait `Vehicle`) must be specified\n   --> $DIR/associated-type-projection-from-multiple-supertraits.rs:23:30\n    |\n LL |     type Color;\n@@ -80,7 +80,7 @@ help: use fully qualified syntax to disambiguate\n LL | fn paint<C:BoxCar>(c: C, d: <C as Vehicle>::Color) {\n    |                             ^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0191]: the value of the associated types `Color` (from trait `Vehicle`), `Color` (from trait `Box`) must be specified\n+error[E0191]: the value of the associated types `Color` (from trait `Box`), `Color` (from trait `Vehicle`) must be specified\n   --> $DIR/associated-type-projection-from-multiple-supertraits.rs:32:32\n    |\n LL |     type Color;"}, {"sha": "f9951170acd665f2c88c90e20f1c93ed98805c72", "filename": "src/test/ui/associated-types/missing-associated-types.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/621d7e959b24ea8640584f0ced13ec016be35d16/src%2Ftest%2Fui%2Fassociated-types%2Fmissing-associated-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/621d7e959b24ea8640584f0ced13ec016be35d16/src%2Ftest%2Fui%2Fassociated-types%2Fmissing-associated-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fmissing-associated-types.stderr?ref=621d7e959b24ea8640584f0ced13ec016be35d16", "patch": "@@ -9,8 +9,8 @@ LL | type Foo<Rhs> = dyn Add<Rhs> + Sub<Rhs> + X<Rhs> + Y<Rhs>;\n    |                     first non-auto trait\n    |                     trait alias used in trait object type (first use)\n \n-error[E0191]: the value of the associated types `A` (from trait `Y`), `Output` (from trait `std::ops::Mul`), `Output` (from trait `std::ops::Add`), `Output` (from trait `std::ops::Sub`) must be specified\n-  --> $DIR/missing-associated-types.rs:12:52\n+error[E0191]: the value of the associated types `A` (from trait `Y`), `Output` (from trait `std::ops::Add`), `Output` (from trait `std::ops::Mul`), `Output` (from trait `std::ops::Sub`) must be specified\n+  --> $DIR/missing-associated-types.rs:12:21\n    |\n LL |     type A;\n    |     ------- `A` defined here\n@@ -38,8 +38,8 @@ LL | type Bar<Rhs> = dyn Add<Rhs> + Sub<Rhs> + X<Rhs> + Z<Rhs>;\n    |                     first non-auto trait\n    |                     trait alias used in trait object type (first use)\n \n-error[E0191]: the value of the associated types `Output` (from trait `std::ops::Mul`), `Output` (from trait `std::ops::Div`), `Output` (from trait `std::ops::Sub`), `A` (from trait `Z`), `B` (from trait `Z`), `Output` (from trait `std::ops::Div`), `Output` (from trait `std::ops::Add`) must be specified\n-  --> $DIR/missing-associated-types.rs:15:43\n+error[E0191]: the value of the associated types `A` (from trait `Z`), `B` (from trait `Z`), `Output` (from trait `std::ops::Add`), `Output` (from trait `std::ops::Div`), `Output` (from trait `std::ops::Div`), `Output` (from trait `std::ops::Mul`), `Output` (from trait `std::ops::Sub`) must be specified\n+  --> $DIR/missing-associated-types.rs:15:21\n    |\n LL |     type A;\n    |     ------- `A` defined here\n@@ -74,8 +74,8 @@ LL | type Baz<Rhs> = dyn Add<Rhs> + Sub<Rhs> + Y<Rhs>;\n    |                     first non-auto trait\n    |                     trait alias used in trait object type (first use)\n \n-error[E0191]: the value of the associated types `Output` (from trait `std::ops::Sub`), `A` (from trait `Y`), `Output` (from trait `std::ops::Add`) must be specified\n-  --> $DIR/missing-associated-types.rs:18:32\n+error[E0191]: the value of the associated types `A` (from trait `Y`), `Output` (from trait `std::ops::Add`), `Output` (from trait `std::ops::Sub`) must be specified\n+  --> $DIR/missing-associated-types.rs:18:21\n    |\n LL |     type A;\n    |     ------- `A` defined here\n@@ -102,8 +102,8 @@ LL | type Bat<Rhs> = dyn Add<Rhs> + Sub<Rhs> + Fine<Rhs>;\n    |                     first non-auto trait\n    |                     trait alias used in trait object type (first use)\n \n-error[E0191]: the value of the associated types `Output` (from trait `std::ops::Sub`), `Output` (from trait `std::ops::Add`) must be specified\n-  --> $DIR/missing-associated-types.rs:21:32\n+error[E0191]: the value of the associated types `Output` (from trait `std::ops::Add`), `Output` (from trait `std::ops::Sub`) must be specified\n+  --> $DIR/missing-associated-types.rs:21:21\n    |\n LL | type Bat<Rhs> = dyn Add<Rhs> + Sub<Rhs> + Fine<Rhs>;\n    |                     ^^^^^^^^   ^^^^^^^^ associated type `Output` must be specified\n@@ -115,7 +115,7 @@ help: specify the associated types\n LL | type Bat<Rhs> = dyn Add<Rhs, Output = Type> + Sub<Rhs, Output = Type> + Fine<Rhs>;\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0191]: the value of the associated types `Output` (from trait `std::ops::Mul`), `Output` (from trait `std::ops::Div`) must be specified\n+error[E0191]: the value of the associated types `Output` (from trait `std::ops::Div`), `Output` (from trait `std::ops::Mul`) must be specified\n   --> $DIR/missing-associated-types.rs:24:21\n    |\n LL | type Bal<Rhs> = dyn X<Rhs>;"}, {"sha": "e5e50ddd1554ce459b8c1970ebbe31229b474be7", "filename": "src/test/ui/issues/issue-22560.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/621d7e959b24ea8640584f0ced13ec016be35d16/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/621d7e959b24ea8640584f0ced13ec016be35d16/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr?ref=621d7e959b24ea8640584f0ced13ec016be35d16", "patch": "@@ -35,8 +35,8 @@ LL | type Test = dyn Add + Sub;\n    |                 first non-auto trait\n    |                 trait alias used in trait object type (first use)\n \n-error[E0191]: the value of the associated types `Output` (from trait `Sub`), `Output` (from trait `Add`) must be specified\n-  --> $DIR/issue-22560.rs:9:23\n+error[E0191]: the value of the associated types `Output` (from trait `Add`), `Output` (from trait `Sub`) must be specified\n+  --> $DIR/issue-22560.rs:9:17\n    |\n LL |     type Output;\n    |     ------------ `Output` defined here"}]}