{"sha": "3cd2b2473b034f290d65e3dc839c0530e55de75b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjZDJiMjQ3M2IwMzRmMjkwZDY1ZTNkYzgzOWMwNTMwZTU1ZGU3NWI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-28T11:26:24Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-28T11:26:24Z"}, "message": "Drop curly_block\n\ncloses #13", "tree": {"sha": "ccd93c44154bd5bace13e40f68e40f0d15e1a450", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccd93c44154bd5bace13e40f68e40f0d15e1a450"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cd2b2473b034f290d65e3dc839c0530e55de75b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cd2b2473b034f290d65e3dc839c0530e55de75b", "html_url": "https://github.com/rust-lang/rust/commit/3cd2b2473b034f290d65e3dc839c0530e55de75b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cd2b2473b034f290d65e3dc839c0530e55de75b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a6fa6504c5458dcc32e24327ba0ec597222fc63", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a6fa6504c5458dcc32e24327ba0ec597222fc63", "html_url": "https://github.com/rust-lang/rust/commit/7a6fa6504c5458dcc32e24327ba0ec597222fc63"}], "stats": {"total": 63, "additions": 21, "deletions": 42}, "files": [{"sha": "812e407d146f8aa067c01d65891d05978771fe68", "filename": "src/parser/event_parser/grammar/items.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3cd2b2473b034f290d65e3dc839c0530e55de75b/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cd2b2473b034f290d65e3dc839c0530e55de75b/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems.rs?ref=3cd2b2473b034f290d65e3dc839c0530e55de75b", "patch": "@@ -235,5 +235,21 @@ fn fn_item(p: &mut Parser) {\n     assert!(p.at(FN_KW));\n     p.bump();\n \n-    p.expect(IDENT) && p.expect(L_PAREN) && p.expect(R_PAREN) && p.curly_block(|_| ());\n+    p.expect(IDENT);\n+    if p.at(L_PAREN) {\n+        fn_value_parameters(p);\n+    } else {\n+        p.error().message(\"expected function arguments\").emit();\n+    }\n+\n+    if p.at(L_CURLY) {\n+        p.expect(L_CURLY);\n+        p.expect(R_CURLY);\n+    }\n+\n+    fn fn_value_parameters(p: &mut Parser) {\n+        assert!(p.at(L_PAREN));\n+        p.bump();\n+        p.expect(R_PAREN);\n+    }\n }"}, {"sha": "d19663865091ac47a54ebc89b83768cba605641b", "filename": "src/parser/event_parser/parser.rs", "status": "modified", "additions": 4, "deletions": 41, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/3cd2b2473b034f290d65e3dc839c0530e55de75b/src%2Fparser%2Fevent_parser%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cd2b2473b034f290d65e3dc839c0530e55de75b/src%2Fparser%2Fevent_parser%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fparser.rs?ref=3cd2b2473b034f290d65e3dc839c0530e55de75b", "patch": "@@ -1,7 +1,7 @@\n use {SyntaxKind, TextUnit, Token};\n use super::Event;\n use super::super::is_insignificant;\n-use SyntaxKind::{EOF, ERROR, L_CURLY, R_CURLY, TOMBSTONE};\n+use SyntaxKind::{EOF, TOMBSTONE};\n \n pub(crate) struct Marker {\n     pos: u32,\n@@ -106,9 +106,6 @@ pub(crate) struct Parser<'t> {\n \n     pos: usize,\n     events: Vec<Event>,\n-\n-    curly_level: i32,\n-    curly_limit: Option<i32>,\n }\n \n impl<'t> Parser<'t> {\n@@ -131,13 +128,10 @@ impl<'t> Parser<'t> {\n \n             pos: 0,\n             events: Vec::new(),\n-            curly_level: 0,\n-            curly_limit: None,\n         }\n     }\n \n     pub(crate) fn into_events(self) -> Vec<Event> {\n-        assert!(self.curly_limit.is_none());\n         assert_eq!(self.current(), EOF);\n         self.events\n     }\n@@ -146,13 +140,7 @@ impl<'t> Parser<'t> {\n         if self.pos == self.tokens.len() {\n             return EOF;\n         }\n-        let token = self.tokens[self.pos];\n-        if let Some(limit) = self.curly_limit {\n-            if limit == self.curly_level && token.kind == R_CURLY {\n-                return EOF;\n-            }\n-        }\n-        token.kind\n+        self.tokens[self.pos].kind\n     }\n \n     pub(crate) fn start(&mut self) -> Marker {\n@@ -172,11 +160,8 @@ impl<'t> Parser<'t> {\n \n     pub(crate) fn bump(&mut self) -> SyntaxKind {\n         let kind = self.current();\n-        match kind {\n-            L_CURLY => self.curly_level += 1,\n-            R_CURLY => self.curly_level -= 1,\n-            EOF => return EOF,\n-            _ => (),\n+        if kind == EOF {\n+            return EOF;\n         }\n         self.pos += 1;\n         self.event(Event::Token {\n@@ -190,28 +175,6 @@ impl<'t> Parser<'t> {\n         self.tokens.get(self.pos + n).map(|t| t.kind).unwrap_or(EOF)\n     }\n \n-    pub(crate) fn curly_block<F: FnOnce(&mut Parser)>(&mut self, f: F) -> bool {\n-        let old_level = self.curly_level;\n-        let old_limit = self.curly_limit;\n-        if !self.expect(L_CURLY) {\n-            return false;\n-        }\n-        self.curly_limit = Some(self.curly_level);\n-        f(self);\n-        assert!(self.curly_level > old_level);\n-        self.curly_limit = old_limit;\n-        if !self.expect(R_CURLY) {\n-            let err = self.start();\n-            while self.curly_level > old_level {\n-                if self.bump() == EOF {\n-                    break;\n-                }\n-            }\n-            err.complete(self, ERROR);\n-        }\n-        true\n-    }\n-\n     fn event(&mut self, event: Event) {\n         self.events.push(event)\n     }"}]}