{"sha": "77de5f0754bbd7d6e973eb7544cfacb11901bdbc", "node_id": "C_kwDOAAsO6NoAKDc3ZGU1ZjA3NTRiYmQ3ZDZlOTczZWI3NTQ0Y2ZhY2IxMTkwMWJkYmM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-21T04:44:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-21T04:44:31Z"}, "message": "Rollup merge of #110618 - compiler-errors:eval-ctxt-tainted, r=BoxyUwU\n\nTrack if EvalCtxt has been tainted, make sure it can't be used to make query responses after\n\nJust some additional protection against missing probes or strange candidate assembly behavior in the new solver.\n\nFor background, we don't ever want to call `evaluate_added_goals_and_make_canonical_response` if a previous call to `try_evaluate_added_goals` has bailed with `NoSolution`, since our nested goals are left in an undefined state at that point. This most commonly suggests a missing `EvalCtxt::probe`, but could also signify some other shenanigans like dropping a `QueryResult` on the floor without properly `?`'ing it.\n\nr? `@lcnr`", "tree": {"sha": "b8f75a017e965a41999311818d4bb58914270e08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8f75a017e965a41999311818d4bb58914270e08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77de5f0754bbd7d6e973eb7544cfacb11901bdbc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkQhSvCRBK7hj4Ov3rIwAAI88IAFXixS5Alg5Fev+3CCkxUbtE\nQ9po+AzwWFfboZy1rwMh8NcEIDjpJ8PjTkpWoYiyvLVJeWCAOVN7oRaS79awLMrG\nOkR7ymSpLYffXhzsZGrrR0BbiMkYAWDJBYJcZj+2DGOM9ybMmFGOvra4m1ixYKaa\ngwOWb5xYfphEV6WPwccWk7I0ZrEDYwnuHJtIZes2B5cTIEMjoRFJH1NLVW+aXPoX\nsA+nIEYuQqK+YHTVF3+uptDhEU74ME5CY2/4cD57dj2ULG6+5SIyBwrHL60FccK3\nd6pga1no51OBVKtJWeLOjG1W4nz0KT0vpMBkQbJbY6vdXDBm6llVcGnfRrsOcTs=\n=gBu2\n-----END PGP SIGNATURE-----\n", "payload": "tree b8f75a017e965a41999311818d4bb58914270e08\nparent ea01135f67671ea3fbd36c72014e026f24292e29\nparent 3206100ed9273c1adcc661d30db460c2402d568c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1682052271 +0200\ncommitter GitHub <noreply@github.com> 1682052271 +0200\n\nRollup merge of #110618 - compiler-errors:eval-ctxt-tainted, r=BoxyUwU\n\nTrack if EvalCtxt has been tainted, make sure it can't be used to make query responses after\n\nJust some additional protection against missing probes or strange candidate assembly behavior in the new solver.\n\nFor background, we don't ever want to call `evaluate_added_goals_and_make_canonical_response` if a previous call to `try_evaluate_added_goals` has bailed with `NoSolution`, since our nested goals are left in an undefined state at that point. This most commonly suggests a missing `EvalCtxt::probe`, but could also signify some other shenanigans like dropping a `QueryResult` on the floor without properly `?`'ing it.\n\nr? `@lcnr`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77de5f0754bbd7d6e973eb7544cfacb11901bdbc", "html_url": "https://github.com/rust-lang/rust/commit/77de5f0754bbd7d6e973eb7544cfacb11901bdbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77de5f0754bbd7d6e973eb7544cfacb11901bdbc/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea01135f67671ea3fbd36c72014e026f24292e29", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea01135f67671ea3fbd36c72014e026f24292e29", "html_url": "https://github.com/rust-lang/rust/commit/ea01135f67671ea3fbd36c72014e026f24292e29"}, {"sha": "3206100ed9273c1adcc661d30db460c2402d568c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3206100ed9273c1adcc661d30db460c2402d568c", "html_url": "https://github.com/rust-lang/rust/commit/3206100ed9273c1adcc661d30db460c2402d568c"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "bd52957d162f202dd50de0e80863e6286173fe0c", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/77de5f0754bbd7d6e973eb7544cfacb11901bdbc/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77de5f0754bbd7d6e973eb7544cfacb11901bdbc/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs?ref=77de5f0754bbd7d6e973eb7544cfacb11901bdbc", "patch": "@@ -57,6 +57,14 @@ pub struct EvalCtxt<'a, 'tcx> {\n     pub(super) search_graph: &'a mut SearchGraph<'tcx>,\n \n     pub(super) nested_goals: NestedGoals<'tcx>,\n+\n+    // Has this `EvalCtxt` errored out with `NoSolution` in `try_evaluate_added_goals`?\n+    //\n+    // If so, then it can no longer be used to make a canonical query response,\n+    // since subsequent calls to `try_evaluate_added_goals` have possibly dropped\n+    // ambiguous goals. Instead, a probe needs to be introduced somewhere in the\n+    // evaluation code.\n+    tainted: Result<(), NoSolution>,\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq)]\n@@ -121,6 +129,7 @@ impl<'tcx> InferCtxtEvalExt<'tcx> for InferCtxt<'tcx> {\n             max_input_universe: ty::UniverseIndex::ROOT,\n             var_values: CanonicalVarValues::dummy(),\n             nested_goals: NestedGoals::new(),\n+            tainted: Ok(()),\n         };\n         let result = ecx.evaluate_goal(IsNormalizesToHack::No, goal);\n \n@@ -172,6 +181,7 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n                 max_input_universe: canonical_goal.max_universe,\n                 search_graph,\n                 nested_goals: NestedGoals::new(),\n+                tainted: Ok(()),\n             };\n             ecx.compute_goal(goal)\n         })\n@@ -391,6 +401,10 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n             },\n         );\n \n+        if response.is_err() {\n+            self.tainted = Err(NoSolution);\n+        }\n+\n         self.nested_goals = goals;\n         response\n     }\n@@ -404,6 +418,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             max_input_universe: self.max_input_universe,\n             search_graph: self.search_graph,\n             nested_goals: self.nested_goals.clone(),\n+            tainted: self.tainted,\n         };\n         self.infcx.probe(|_| f(&mut ecx))\n     }"}, {"sha": "2dea36811d80bc2ee8f48a3d24344ab60d627870", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt/canonical.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/77de5f0754bbd7d6e973eb7544cfacb11901bdbc/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77de5f0754bbd7d6e973eb7544cfacb11901bdbc/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs?ref=77de5f0754bbd7d6e973eb7544cfacb11901bdbc", "patch": "@@ -51,6 +51,13 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         certainty: Certainty,\n     ) -> QueryResult<'tcx> {\n         let goals_certainty = self.try_evaluate_added_goals()?;\n+        assert_eq!(\n+            self.tainted,\n+            Ok(()),\n+            \"EvalCtxt is tainted -- nested goals may have been dropped in a \\\n+            previous call to `try_evaluate_added_goals!`\"\n+        );\n+\n         let certainty = certainty.unify_with(goals_certainty);\n \n         let external_constraints = self.compute_external_query_constraints()?;"}]}