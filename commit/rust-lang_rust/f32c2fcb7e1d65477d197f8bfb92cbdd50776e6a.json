{"sha": "f32c2fcb7e1d65477d197f8bfb92cbdd50776e6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzMmMyZmNiN2UxZDY1NDc3ZDE5N2Y4YmZiOTJjYmRkNTA3NzZlNmE=", "commit": {"author": {"name": "Harrison McCullough", "email": "mccullough.harrison@gmail.com", "date": "2019-05-21T00:01:21Z"}, "committer": {"name": "Harrison McCullough", "email": "mccullough.harrison@gmail.com", "date": "2019-05-21T00:01:21Z"}, "message": "Implement get_last_with_len lint", "tree": {"sha": "96329fa3f0f40e892b0210e4fa0652d86eb8a9f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96329fa3f0f40e892b0210e4fa0652d86eb8a9f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f32c2fcb7e1d65477d197f8bfb92cbdd50776e6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f32c2fcb7e1d65477d197f8bfb92cbdd50776e6a", "html_url": "https://github.com/rust-lang/rust/commit/f32c2fcb7e1d65477d197f8bfb92cbdd50776e6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f32c2fcb7e1d65477d197f8bfb92cbdd50776e6a/comments", "author": {"login": "HarrisonMc555", "id": 22666187, "node_id": "MDQ6VXNlcjIyNjY2MTg3", "avatar_url": "https://avatars.githubusercontent.com/u/22666187?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HarrisonMc555", "html_url": "https://github.com/HarrisonMc555", "followers_url": "https://api.github.com/users/HarrisonMc555/followers", "following_url": "https://api.github.com/users/HarrisonMc555/following{/other_user}", "gists_url": "https://api.github.com/users/HarrisonMc555/gists{/gist_id}", "starred_url": "https://api.github.com/users/HarrisonMc555/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HarrisonMc555/subscriptions", "organizations_url": "https://api.github.com/users/HarrisonMc555/orgs", "repos_url": "https://api.github.com/users/HarrisonMc555/repos", "events_url": "https://api.github.com/users/HarrisonMc555/events{/privacy}", "received_events_url": "https://api.github.com/users/HarrisonMc555/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HarrisonMc555", "id": 22666187, "node_id": "MDQ6VXNlcjIyNjY2MTg3", "avatar_url": "https://avatars.githubusercontent.com/u/22666187?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HarrisonMc555", "html_url": "https://github.com/HarrisonMc555", "followers_url": "https://api.github.com/users/HarrisonMc555/followers", "following_url": "https://api.github.com/users/HarrisonMc555/following{/other_user}", "gists_url": "https://api.github.com/users/HarrisonMc555/gists{/gist_id}", "starred_url": "https://api.github.com/users/HarrisonMc555/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HarrisonMc555/subscriptions", "organizations_url": "https://api.github.com/users/HarrisonMc555/orgs", "repos_url": "https://api.github.com/users/HarrisonMc555/repos", "events_url": "https://api.github.com/users/HarrisonMc555/events{/privacy}", "received_events_url": "https://api.github.com/users/HarrisonMc555/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cc23a5b18de3726de81202802fc459559342215", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cc23a5b18de3726de81202802fc459559342215", "html_url": "https://github.com/rust-lang/rust/commit/2cc23a5b18de3726de81202802fc459559342215"}], "stats": {"total": 177, "additions": 176, "deletions": 1}, "files": [{"sha": "b63111cab7226bebc51896c3ec2eabc032041361", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f32c2fcb7e1d65477d197f8bfb92cbdd50776e6a/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/f32c2fcb7e1d65477d197f8bfb92cbdd50776e6a/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=f32c2fcb7e1d65477d197f8bfb92cbdd50776e6a", "patch": "@@ -936,6 +936,7 @@ All notable changes to this project will be documented in this file.\n [`for_loop_over_result`]: https://rust-lang.github.io/rust-clippy/master/index.html#for_loop_over_result\n [`forget_copy`]: https://rust-lang.github.io/rust-clippy/master/index.html#forget_copy\n [`forget_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#forget_ref\n+[`get_last_with_len`]: https://rust-lang.github.io/rust-clippy/master/index.html#get_last_with_len\n [`get_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#get_unwrap\n [`identity_conversion`]: https://rust-lang.github.io/rust-clippy/master/index.html#identity_conversion\n [`identity_op`]: https://rust-lang.github.io/rust-clippy/master/index.html#identity_op"}, {"sha": "c25c83d87520febd93f30dbc356b731dab662e5f", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f32c2fcb7e1d65477d197f8bfb92cbdd50776e6a/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/f32c2fcb7e1d65477d197f8bfb92cbdd50776e6a/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=f32c2fcb7e1d65477d197f8bfb92cbdd50776e6a", "patch": "@@ -7,7 +7,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 303 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 304 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "4a26c788fb9dea38bce4a878d4da68f3f1c4e458", "filename": "clippy_lints/src/get_last_with_len.rs", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/f32c2fcb7e1d65477d197f8bfb92cbdd50776e6a/clippy_lints%2Fsrc%2Fget_last_with_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32c2fcb7e1d65477d197f8bfb92cbdd50776e6a/clippy_lints%2Fsrc%2Fget_last_with_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fget_last_with_len.rs?ref=f32c2fcb7e1d65477d197f8bfb92cbdd50776e6a", "patch": "@@ -0,0 +1,98 @@\n+//! lint on using `x.get(x.len() - 1)` instead of `x.last()`\n+\n+use crate::utils::{match_type, paths, snippet_with_applicability, span_lint_and_sugg, SpanlessEq};\n+use if_chain::if_chain;\n+use rustc::hir::{BinOpKind, Expr, ExprKind};\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::{declare_lint_pass, declare_tool_lint};\n+use rustc_errors::Applicability;\n+use syntax::ast::LitKind;\n+use syntax::source_map::Spanned;\n+use syntax::symbol::Symbol;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for using `x.get(x.len() - 1)` instead of\n+    /// `x.last()`.\n+    ///\n+    /// **Why is this bad?** Using `x.last()` is easier to read and has the same\n+    /// result.\n+    ///\n+    /// Note that using `x[x.len() - 1]` is semantically different from\n+    /// `x.last()`.  Indexing into the array will panic on out-of-bounds\n+    /// accesses, while `x.get()` and `x.last()` will return `None`.\n+    ///\n+    /// There is another lint (get_unwrap) that covers the case of using\n+    /// `x.get(index).unwrap()` instead of `x[index]`.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// // Bad\n+    /// let x = vec![2, 3, 5];\n+    /// let last_element = x.get(x.len() - 1);\n+    ///\n+    /// // Good\n+    /// let x = vec![2, 3, 5];\n+    /// let last_element = x.last();\n+    /// ```\n+    pub GET_LAST_WITH_LEN,\n+    complexity,\n+    \"Using `x.get(x.len() - 1)` when `x.last()` is correct and simpler\"\n+}\n+\n+declare_lint_pass!(GetLastWithLen => [GET_LAST_WITH_LEN]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for GetLastWithLen {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        if_chain! {\n+            // Is a method call\n+            if let ExprKind::MethodCall(ref path, _, ref args) = expr.node;\n+\n+            // Method name is \"get\"\n+            if path.ident.name == Symbol::intern(\"get\");\n+\n+            // Argument 0 (the struct we're calling the method on) is a vector\n+            if let Some(struct_calling_on) = args.get(0);\n+            let struct_ty = cx.tables.expr_ty(struct_calling_on);\n+            if match_type(cx, struct_ty, &paths::VEC);\n+\n+            // Argument to \"get\" is a subtraction\n+            if let Some(get_index_arg) = args.get(1);\n+            if let ExprKind::Binary(Spanned{node: BinOpKind::Sub, ..},\n+                                    lhs, rhs) = &get_index_arg.node;\n+\n+            // LHS of subtraction is \"x.len()\"\n+            if let ExprKind::MethodCall(arg_lhs_path, _, lhs_args) = &lhs.node;\n+            if arg_lhs_path.ident.name == Symbol::intern(\"len\");\n+            if let Some(arg_lhs_struct) = lhs_args.get(0);\n+\n+            // The two vectors referenced (x in x.get(...) and in x.len())\n+            if SpanlessEq::new(cx).eq_expr(struct_calling_on, arg_lhs_struct);\n+\n+            // RHS of subtraction is 1\n+            if let ExprKind::Lit(rhs_lit) = &rhs.node;\n+            if let LitKind::Int(rhs_value, ..) = rhs_lit.node;\n+            if rhs_value == 1;\n+\n+            then {\n+                let mut applicability = Applicability::MachineApplicable;\n+                let vec_name = snippet_with_applicability(\n+                    cx,\n+                    struct_calling_on.span, \"vec\",\n+                    &mut applicability,\n+                );\n+\n+                span_lint_and_sugg(\n+                    cx,\n+                    GET_LAST_WITH_LEN,\n+                    expr.span,\n+                    &format!(\"accessing last element with `{0}.get({0}.len() - 1)`\", vec_name),\n+                    \"try\",\n+                    format!(\"{}.last()\", vec_name),\n+                    applicability);\n+            }\n+        }\n+    }\n+}"}, {"sha": "53143800f76317a96783a0f848cb3be78e6ca1e2", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f32c2fcb7e1d65477d197f8bfb92cbdd50776e6a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32c2fcb7e1d65477d197f8bfb92cbdd50776e6a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f32c2fcb7e1d65477d197f8bfb92cbdd50776e6a", "patch": "@@ -186,6 +186,7 @@ pub mod fallible_impl_from;\n pub mod format;\n pub mod formatting;\n pub mod functions;\n+pub mod get_last_with_len;\n pub mod identity_conversion;\n pub mod identity_op;\n pub mod if_not_else;\n@@ -492,6 +493,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box types::CharLitAsU8);\n     reg.register_late_lint_pass(box vec::UselessVec);\n     reg.register_late_lint_pass(box drop_bounds::DropBounds);\n+    reg.register_late_lint_pass(box get_last_with_len::GetLastWithLen);\n     reg.register_late_lint_pass(box drop_forget_ref::DropForgetRef);\n     reg.register_late_lint_pass(box empty_enum::EmptyEnum);\n     reg.register_late_lint_pass(box types::AbsurdExtremeComparisons);\n@@ -710,6 +712,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         formatting::SUSPICIOUS_ELSE_FORMATTING,\n         functions::NOT_UNSAFE_PTR_ARG_DEREF,\n         functions::TOO_MANY_ARGUMENTS,\n+        get_last_with_len::GET_LAST_WITH_LEN,\n         identity_conversion::IDENTITY_CONVERSION,\n         identity_op::IDENTITY_OP,\n         indexing_slicing::OUT_OF_BOUNDS_INDEXING,\n@@ -981,6 +984,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         explicit_write::EXPLICIT_WRITE,\n         format::USELESS_FORMAT,\n         functions::TOO_MANY_ARGUMENTS,\n+        get_last_with_len::GET_LAST_WITH_LEN,\n         identity_conversion::IDENTITY_CONVERSION,\n         identity_op::IDENTITY_OP,\n         int_plus_one::INT_PLUS_ONE,"}, {"sha": "c8b363f9c38e682eccc2f99ebd4a94ff98bf32e0", "filename": "tests/ui/get_last_with_len.fixed", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f32c2fcb7e1d65477d197f8bfb92cbdd50776e6a/tests%2Fui%2Fget_last_with_len.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f32c2fcb7e1d65477d197f8bfb92cbdd50776e6a/tests%2Fui%2Fget_last_with_len.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_last_with_len.fixed?ref=f32c2fcb7e1d65477d197f8bfb92cbdd50776e6a", "patch": "@@ -0,0 +1,31 @@\n+// run-rustfix\n+\n+#![warn(clippy::get_last_with_len)]\n+\n+fn dont_use_last() {\n+    let x = vec![2, 3, 5];\n+    let _ = x.last(); // ~ERROR Use x.last()\n+}\n+\n+fn indexing_two_from_end() {\n+    let x = vec![2, 3, 5];\n+    let _ = x.get(x.len() - 2);\n+}\n+\n+fn index_into_last() {\n+    let x = vec![2, 3, 5];\n+    let _ = x[x.len() - 1];\n+}\n+\n+fn use_last_with_different_vec_length() {\n+    let x = vec![2, 3, 5];\n+    let y = vec!['a', 'b', 'c'];\n+    let _ = x.get(y.len() - 1);\n+}\n+\n+fn main() {\n+    dont_use_last();\n+    indexing_two_from_end();\n+    index_into_last();\n+    use_last_with_different_vec_length();\n+}"}, {"sha": "bf9cb2d7e0ccd6e72d8f4c91402ab603d1faf8f1", "filename": "tests/ui/get_last_with_len.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f32c2fcb7e1d65477d197f8bfb92cbdd50776e6a/tests%2Fui%2Fget_last_with_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f32c2fcb7e1d65477d197f8bfb92cbdd50776e6a/tests%2Fui%2Fget_last_with_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_last_with_len.rs?ref=f32c2fcb7e1d65477d197f8bfb92cbdd50776e6a", "patch": "@@ -0,0 +1,31 @@\n+// run-rustfix\n+\n+#![warn(clippy::get_last_with_len)]\n+\n+fn dont_use_last() {\n+    let x = vec![2, 3, 5];\n+    let _ = x.get(x.len() - 1); // ~ERROR Use x.last()\n+}\n+\n+fn indexing_two_from_end() {\n+    let x = vec![2, 3, 5];\n+    let _ = x.get(x.len() - 2);\n+}\n+\n+fn index_into_last() {\n+    let x = vec![2, 3, 5];\n+    let _ = x[x.len() - 1];\n+}\n+\n+fn use_last_with_different_vec_length() {\n+    let x = vec![2, 3, 5];\n+    let y = vec!['a', 'b', 'c'];\n+    let _ = x.get(y.len() - 1);\n+}\n+\n+fn main() {\n+    dont_use_last();\n+    indexing_two_from_end();\n+    index_into_last();\n+    use_last_with_different_vec_length();\n+}"}, {"sha": "55baf87384a2499d8ddd5050564c7a03bfc8b534", "filename": "tests/ui/get_last_with_len.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f32c2fcb7e1d65477d197f8bfb92cbdd50776e6a/tests%2Fui%2Fget_last_with_len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f32c2fcb7e1d65477d197f8bfb92cbdd50776e6a/tests%2Fui%2Fget_last_with_len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_last_with_len.stderr?ref=f32c2fcb7e1d65477d197f8bfb92cbdd50776e6a", "patch": "@@ -0,0 +1,10 @@\n+error: accessing last element with `x.get(x.len() - 1)`\n+  --> $DIR/get_last_with_len.rs:7:13\n+   |\n+LL |     let _ = x.get(x.len() - 1); // ~ERROR Use x.last()\n+   |             ^^^^^^^^^^^^^^^^^^ help: try: `x.last()`\n+   |\n+   = note: `-D clippy::get-last-with-len` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}]}