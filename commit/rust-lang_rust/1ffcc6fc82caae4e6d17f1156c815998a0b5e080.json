{"sha": "1ffcc6fc82caae4e6d17f1156c815998a0b5e080", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmZmNjNmZjODJjYWFlNGU2ZDE3ZjExNTZjODE1OTk4YTBiNWUwODA=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-06-14T00:57:23Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-06-23T21:54:21Z"}, "message": "Allow ~fn:Copy() to be copied.", "tree": {"sha": "c92ed8c2b11bf3091e07321a77a2b475c4943cf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c92ed8c2b11bf3091e07321a77a2b475c4943cf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ffcc6fc82caae4e6d17f1156c815998a0b5e080", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ffcc6fc82caae4e6d17f1156c815998a0b5e080", "html_url": "https://github.com/rust-lang/rust/commit/1ffcc6fc82caae4e6d17f1156c815998a0b5e080", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ffcc6fc82caae4e6d17f1156c815998a0b5e080/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c454e95fac0c7e68b3298ea87bd402ef954394bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c454e95fac0c7e68b3298ea87bd402ef954394bf", "html_url": "https://github.com/rust-lang/rust/commit/c454e95fac0c7e68b3298ea87bd402ef954394bf"}], "stats": {"total": 80, "additions": 73, "deletions": 7}, "files": [{"sha": "90cd8a8665ea7cb7fb6b5c068ee842d8c99a92a6", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1ffcc6fc82caae4e6d17f1156c815998a0b5e080/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffcc6fc82caae4e6d17f1156c815998a0b5e080/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=1ffcc6fc82caae4e6d17f1156c815998a0b5e080", "patch": "@@ -1856,7 +1856,7 @@ impl TypeContents {\n     }\n \n     pub fn noncopyable(_cx: ctxt) -> TypeContents {\n-        TC_DTOR + TC_BORROWED_MUT + TC_ONCE_CLOSURE + TC_OWNED_CLOSURE +\n+        TC_DTOR + TC_BORROWED_MUT + TC_ONCE_CLOSURE + TC_NONCOPY_TRAIT +\n             TC_EMPTY_ENUM\n     }\n \n@@ -1905,13 +1905,19 @@ impl TypeContents {\n     }\n \n     pub fn needs_drop(&self, cx: ctxt) -> bool {\n+        if self.intersects(TC_NONCOPY_TRAIT) {\n+            // Currently all noncopyable existentials are 2nd-class types\n+            // behind owned pointers. With dynamically-sized types, remove\n+            // this assertion.\n+            assert!(self.intersects(TC_OWNED_POINTER));\n+        }\n         let tc = TC_MANAGED + TC_DTOR + TypeContents::owned(cx);\n         self.intersects(tc)\n     }\n \n     pub fn owned(_cx: ctxt) -> TypeContents {\n         //! Any kind of owned contents.\n-        TC_OWNED_CLOSURE + TC_OWNED_POINTER + TC_OWNED_VEC\n+        TC_OWNED_POINTER + TC_OWNED_VEC\n     }\n }\n \n@@ -1945,8 +1951,8 @@ static TC_OWNED_POINTER: TypeContents =    TypeContents{bits: 0b0000_0000_0010};\n /// Contains an owned vector ~[] or owned string ~str\n static TC_OWNED_VEC: TypeContents =        TypeContents{bits: 0b0000_0000_0100};\n \n-/// Contains a ~fn() or a ~Trait, which is non-copyable.\n-static TC_OWNED_CLOSURE: TypeContents =    TypeContents{bits: 0b0000_0000_1000};\n+/// Contains a non-copyable ~fn() or a ~Trait (NOT a ~fn:Copy() or ~Trait:Copy).\n+static TC_NONCOPY_TRAIT: TypeContents =    TypeContents{bits: 0b0000_0000_1000};\n \n /// Type with a destructor\n static TC_DTOR: TypeContents =             TypeContents{bits: 0b0000_0001_0000};\n@@ -2061,7 +2067,8 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n             }\n \n             ty_trait(_, _, UniqTraitStore, _, _bounds) => {\n-                TC_OWNED_CLOSURE\n+                // FIXME(#3569): Make this conditional on the trait's bounds.\n+                TC_NONCOPY_TRAIT + TC_OWNED_POINTER\n             }\n \n             ty_trait(_, _, BoxTraitStore, mutbl, _bounds) => {\n@@ -2184,7 +2191,9 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n                 match sigil {\n                     ast::BorrowedSigil => TC_BORROWED_POINTER,\n                     ast::ManagedSigil => TC_MANAGED,\n-                    ast::OwnedSigil => TC_OWNED_CLOSURE\n+                    // FIXME(#3569): Looks like noncopyability should depend\n+                    // on the bounds, but I don't think this case ever comes up.\n+                    ast::OwnedSigil => TC_NONCOPY_TRAIT + TC_OWNED_POINTER,\n                 }\n             }\n \n@@ -2258,7 +2267,11 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n         let st = match cty.sigil {\n             ast::BorrowedSigil => TC_BORROWED_POINTER,\n             ast::ManagedSigil => TC_MANAGED,\n-            ast::OwnedSigil => TC_OWNED_CLOSURE\n+            ast::OwnedSigil => if cty.bounds.contains_elem(BoundCopy) {\n+                TC_OWNED_POINTER\n+            } else {\n+                TC_OWNED_POINTER + TC_NONCOPY_TRAIT\n+            }\n         };\n         let rt = borrowed_contents(cty.region, m_imm);\n         let ot = match cty.onceness {"}, {"sha": "f39c914916ff7b812084f8d81fb2254b7a0162cf", "filename": "src/test/run-pass/closure-bounds-copyable-squiggle-closure.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1ffcc6fc82caae4e6d17f1156c815998a0b5e080/src%2Ftest%2Frun-pass%2Fclosure-bounds-copyable-squiggle-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffcc6fc82caae4e6d17f1156c815998a0b5e080/src%2Ftest%2Frun-pass%2Fclosure-bounds-copyable-squiggle-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-bounds-copyable-squiggle-closure.rs?ref=1ffcc6fc82caae4e6d17f1156c815998a0b5e080", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-pretty\n+\n+// Tests correct copying of heap closures' environments.\n+\n+fn foo(x: ~fn:Copy()) -> (~fn(), ~fn()) {\n+    (copy x, x)\n+}\n+fn main() {\n+    let v = ~[~[1,2,3],~[4,5,6]]; // shouldn't get double-freed\n+    let (f1,f2) = do foo {\n+        assert!(v.len() == 2);\n+    };\n+    f1();\n+    f2();\n+}"}, {"sha": "2fdce4e5c7cdfbb89e5c89ee309fd9cad8341bed", "filename": "src/test/run-pass/closure-bounds-squiggle-closure-as-copyable-typaram.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1ffcc6fc82caae4e6d17f1156c815998a0b5e080/src%2Ftest%2Frun-pass%2Fclosure-bounds-squiggle-closure-as-copyable-typaram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffcc6fc82caae4e6d17f1156c815998a0b5e080/src%2Ftest%2Frun-pass%2Fclosure-bounds-squiggle-closure-as-copyable-typaram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-bounds-squiggle-closure-as-copyable-typaram.rs?ref=1ffcc6fc82caae4e6d17f1156c815998a0b5e080", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-pretty\n+\n+// Tests correct copying of heap closures' environments.\n+\n+fn bar<T: Copy>(x: T) -> (T, T) {\n+    (copy x, x)\n+}\n+fn foo(x: ~fn:Copy()) -> (~fn(), ~fn()) {\n+    bar(x)\n+}\n+fn main() {\n+    let v = ~[~[1,2,3],~[4,5,6]]; // shouldn't get double-freed\n+    let (f1,f2) = do foo {\n+        assert!(v.len() == 2);\n+    };\n+    f1();\n+    f2();\n+}"}]}