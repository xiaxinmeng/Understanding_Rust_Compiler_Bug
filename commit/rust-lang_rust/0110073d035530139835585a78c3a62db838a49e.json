{"sha": "0110073d035530139835585a78c3a62db838a49e", "node_id": "C_kwDOAAsO6NoAKDAxMTAwNzNkMDM1NTMwMTM5ODM1NTg1YTc4YzNhNjJkYjgzOGE0OWU", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-03-26T10:51:16Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-04-06T06:25:54Z"}, "message": "Fully erase query values", "tree": {"sha": "290708d500d9c5448817b82a6cb97421d16e9155", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/290708d500d9c5448817b82a6cb97421d16e9155"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0110073d035530139835585a78c3a62db838a49e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0110073d035530139835585a78c3a62db838a49e", "html_url": "https://github.com/rust-lang/rust/commit/0110073d035530139835585a78c3a62db838a49e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0110073d035530139835585a78c3a62db838a49e/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d99dd91895f9dafbaa08d1ada7782d884089503", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d99dd91895f9dafbaa08d1ada7782d884089503", "html_url": "https://github.com/rust-lang/rust/commit/6d99dd91895f9dafbaa08d1ada7782d884089503"}], "stats": {"total": 150, "additions": 135, "deletions": 15}, "files": [{"sha": "5462ced16d6b221305c07ca26754a9f28949ec67", "filename": "compiler/rustc_middle/src/query/erase.rs", "status": "modified", "additions": 135, "deletions": 15, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/0110073d035530139835585a78c3a62db838a49e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0110073d035530139835585a78c3a62db838a49e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs?ref=0110073d035530139835585a78c3a62db838a49e", "patch": "@@ -1,4 +1,6 @@\n-use crate::ty;\n+use crate::mir;\n+use crate::traits;\n+use crate::ty::{self, Ty};\n use std::mem::{size_of, transmute_copy, MaybeUninit};\n \n #[derive(Copy, Clone)]\n@@ -53,32 +55,128 @@ impl<T> EraseType for &'_ ty::List<T> {\n     type Result = [u8; size_of::<*const ()>()];\n }\n \n-impl<T: Copy, E: Copy> EraseType for Result<T, E> {\n-    type Result = Self;\n+impl<T> EraseType for Result<&'_ T, traits::query::NoSolution> {\n+    type Result = [u8; size_of::<Result<&'static (), traits::query::NoSolution>>()];\n }\n \n-impl<T: Copy> EraseType for Option<T> {\n-    type Result = Self;\n+impl<T> EraseType for Result<&'_ T, rustc_errors::ErrorGuaranteed> {\n+    type Result = [u8; size_of::<Result<&'static (), rustc_errors::ErrorGuaranteed>>()];\n }\n \n-impl<T: Copy> EraseType for rustc_hir::MaybeOwner<T> {\n-    type Result = Self;\n+impl<T> EraseType for Result<&'_ T, traits::CodegenObligationError> {\n+    type Result = [u8; size_of::<Result<&'static (), traits::CodegenObligationError>>()];\n }\n \n-impl<T: Copy> EraseType for ty::Visibility<T> {\n-    type Result = Self;\n+impl<T> EraseType for Result<&'_ T, ty::layout::FnAbiError<'_>> {\n+    type Result = [u8; size_of::<Result<&'static (), ty::layout::FnAbiError<'static>>>()];\n }\n \n-impl<T: Copy> EraseType for ty::Binder<'_, T> {\n-    type Result = Self;\n+impl<T> EraseType for Result<(&'_ T, rustc_middle::thir::ExprId), rustc_errors::ErrorGuaranteed> {\n+    type Result = [u8; size_of::<\n+        Result<(&'static (), rustc_middle::thir::ExprId), rustc_errors::ErrorGuaranteed>,\n+    >()];\n }\n \n-impl<T: Copy> EraseType for ty::EarlyBinder<T> {\n-    type Result = Self;\n+impl EraseType for Result<Option<ty::Instance<'_>>, rustc_errors::ErrorGuaranteed> {\n+    type Result =\n+        [u8; size_of::<Result<Option<ty::Instance<'static>>, rustc_errors::ErrorGuaranteed>>()];\n }\n \n-impl<T0: Copy, T1: Copy> EraseType for (T0, T1) {\n-    type Result = Self;\n+impl EraseType for Result<Option<ty::Const<'_>>, rustc_errors::ErrorGuaranteed> {\n+    type Result =\n+        [u8; size_of::<Result<Option<ty::Const<'static>>, rustc_errors::ErrorGuaranteed>>()];\n+}\n+\n+impl EraseType for Result<ty::GenericArg<'_>, traits::query::NoSolution> {\n+    type Result = [u8; size_of::<Result<ty::GenericArg<'static>, traits::query::NoSolution>>()];\n+}\n+\n+impl EraseType for Result<bool, ty::layout::LayoutError<'_>> {\n+    type Result = [u8; size_of::<Result<bool, ty::layout::LayoutError<'static>>>()];\n+}\n+\n+impl EraseType for Result<rustc_target::abi::TyAndLayout<'_, Ty<'_>>, ty::layout::LayoutError<'_>> {\n+    type Result = [u8; size_of::<\n+        Result<\n+            rustc_target::abi::TyAndLayout<'static, Ty<'static>>,\n+            ty::layout::LayoutError<'static>,\n+        >,\n+    >()];\n+}\n+\n+impl EraseType for Result<ty::Const<'_>, mir::interpret::LitToConstError> {\n+    type Result = [u8; size_of::<Result<ty::Const<'static>, mir::interpret::LitToConstError>>()];\n+}\n+\n+impl EraseType for Result<mir::ConstantKind<'_>, mir::interpret::LitToConstError> {\n+    type Result =\n+        [u8; size_of::<Result<mir::ConstantKind<'static>, mir::interpret::LitToConstError>>()];\n+}\n+\n+impl EraseType for Result<mir::interpret::ConstAlloc<'_>, mir::interpret::ErrorHandled> {\n+    type Result = [u8; size_of::<\n+        Result<mir::interpret::ConstAlloc<'static>, mir::interpret::ErrorHandled>,\n+    >()];\n+}\n+\n+impl EraseType for Result<mir::interpret::ConstValue<'_>, mir::interpret::ErrorHandled> {\n+    type Result = [u8; size_of::<\n+        Result<mir::interpret::ConstValue<'static>, mir::interpret::ErrorHandled>,\n+    >()];\n+}\n+\n+impl EraseType for Result<Option<ty::ValTree<'_>>, mir::interpret::ErrorHandled> {\n+    type Result =\n+        [u8; size_of::<Result<Option<ty::ValTree<'static>>, mir::interpret::ErrorHandled>>()];\n+}\n+\n+impl EraseType for Result<&'_ ty::List<Ty<'_>>, ty::util::AlwaysRequiresDrop> {\n+    type Result =\n+        [u8; size_of::<Result<&'static ty::List<Ty<'static>>, ty::util::AlwaysRequiresDrop>>()];\n+}\n+\n+impl<T> EraseType for Option<&'_ T> {\n+    type Result = [u8; size_of::<Option<&'static ()>>()];\n+}\n+\n+impl<T> EraseType for Option<&'_ [T]> {\n+    type Result = [u8; size_of::<Option<&'static [()]>>()];\n+}\n+\n+impl EraseType for Option<rustc_middle::hir::Owner<'_>> {\n+    type Result = [u8; size_of::<Option<rustc_middle::hir::Owner<'static>>>()];\n+}\n+\n+impl EraseType for Option<mir::DestructuredConstant<'_>> {\n+    type Result = [u8; size_of::<Option<mir::DestructuredConstant<'static>>>()];\n+}\n+\n+impl EraseType for Option<ty::EarlyBinder<ty::TraitRef<'_>>> {\n+    type Result = [u8; size_of::<Option<ty::EarlyBinder<ty::TraitRef<'static>>>>()];\n+}\n+\n+impl EraseType for Option<ty::EarlyBinder<Ty<'_>>> {\n+    type Result = [u8; size_of::<Option<ty::EarlyBinder<Ty<'static>>>>()];\n+}\n+\n+impl<T> EraseType for rustc_hir::MaybeOwner<&'_ T> {\n+    type Result = [u8; size_of::<rustc_hir::MaybeOwner<&'static ()>>()];\n+}\n+\n+impl<T: EraseType> EraseType for ty::EarlyBinder<T> {\n+    type Result = T::Result;\n+}\n+\n+impl EraseType for ty::Binder<'_, ty::FnSig<'_>> {\n+    type Result = [u8; size_of::<ty::Binder<'static, ty::FnSig<'static>>>()];\n+}\n+\n+impl<T0, T1> EraseType for (&'_ T0, &'_ T1) {\n+    type Result = [u8; size_of::<(&'static (), &'static ())>()];\n+}\n+\n+impl<T0, T1> EraseType for (&'_ T0, &'_ [T1]) {\n+    type Result = [u8; size_of::<(&'static (), &'static [()])>()];\n }\n \n macro_rules! trivial {\n@@ -94,6 +192,27 @@ macro_rules! trivial {\n trivial! {\n     (),\n     bool,\n+    Option<(rustc_span::def_id::DefId, rustc_session::config::EntryFnType)>,\n+    Option<rustc_ast::expand::allocator::AllocatorKind>,\n+    Option<rustc_attr::ConstStability>,\n+    Option<rustc_attr::DefaultBodyStability>,\n+    Option<rustc_attr::Stability>,\n+    Option<rustc_data_structures::svh::Svh>,\n+    Option<rustc_hir::def::DefKind>,\n+    Option<rustc_hir::GeneratorKind>,\n+    Option<rustc_hir::HirId>,\n+    Option<rustc_middle::middle::stability::DeprecationEntry>,\n+    Option<rustc_middle::ty::Destructor>,\n+    Option<rustc_middle::ty::ImplTraitInTraitData>,\n+    Option<rustc_span::def_id::CrateNum>,\n+    Option<rustc_span::def_id::DefId>,\n+    Option<rustc_span::def_id::LocalDefId>,\n+    Option<rustc_span::Span>,\n+    Option<rustc_target::spec::PanicStrategy>,\n+    Option<usize>,\n+    Result<(), rustc_errors::ErrorGuaranteed>,\n+    Result<(), rustc_middle::traits::query::NoSolution>,\n+    Result<rustc_middle::traits::EvaluationResult, rustc_middle::traits::OverflowError>,\n     rustc_ast::expand::allocator::AllocatorKind,\n     rustc_attr::ConstStability,\n     rustc_attr::DefaultBodyStability,\n@@ -144,6 +263,7 @@ trivial! {\n     rustc_middle::ty::ReprOptions,\n     rustc_middle::ty::UnusedGenericParams,\n     rustc_middle::ty::util::AlwaysRequiresDrop,\n+    rustc_middle::ty::Visibility<rustc_span::def_id::DefId>,\n     rustc_session::config::CrateType,\n     rustc_session::config::EntryFnType,\n     rustc_session::config::OptLevel,"}]}