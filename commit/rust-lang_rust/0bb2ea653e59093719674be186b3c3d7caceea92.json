{"sha": "0bb2ea653e59093719674be186b3c3d7caceea92", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYjJlYTY1M2U1OTA5MzcxOTY3NGJlMTg2YjNjM2Q3Y2FjZWVhOTI=", "commit": {"author": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-08-07T18:10:57Z"}, "committer": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-08-12T09:11:44Z"}, "message": "Adjust `#[no_mangle]`-related checks and lints for `impl` items", "tree": {"sha": "91a0bb80b597593117100e28b04d15b3077192c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91a0bb80b597593117100e28b04d15b3077192c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bb2ea653e59093719674be186b3c3d7caceea92", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIsEABYIADMWIQRJ2jPMDdiQ+U4U42Z0+n/VuNoUuAUCYRTl0BUceWQtaHVhbmdA\nb3V0bG9vay5jb20ACgkQdPp/1bjaFLi6kgEAs+NL6LVaaVml6iFlw3WDAB/F/IF+\nKkpDD1HzExBEf9oA/2/W2s/4JHqFFL6te2tmZ+QxEjr/+OCK3I4vSbMO0RgK\n=OlPn\n-----END PGP SIGNATURE-----", "payload": "tree 91a0bb80b597593117100e28b04d15b3077192c8\nparent c84beefd83df7bb39a02a341f5615019e1ffaa63\nauthor hyd-dev <yd-huang@outlook.com> 1628359857 +0800\ncommitter hyd-dev <yd-huang@outlook.com> 1628759504 +0800\n\nAdjust `#[no_mangle]`-related checks and lints for `impl` items\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bb2ea653e59093719674be186b3c3d7caceea92", "html_url": "https://github.com/rust-lang/rust/commit/0bb2ea653e59093719674be186b3c3d7caceea92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bb2ea653e59093719674be186b3c3d7caceea92/comments", "author": null, "committer": null, "parents": [{"sha": "c84beefd83df7bb39a02a341f5615019e1ffaa63", "url": "https://api.github.com/repos/rust-lang/rust/commits/c84beefd83df7bb39a02a341f5615019e1ffaa63", "html_url": "https://github.com/rust-lang/rust/commit/c84beefd83df7bb39a02a341f5615019e1ffaa63"}], "stats": {"total": 601, "additions": 559, "deletions": 42}, "files": [{"sha": "0bdc4258bfbc365703d5af9b97be6e53b50c8f70", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0bb2ea653e59093719674be186b3c3d7caceea92/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb2ea653e59093719674be186b3c3d7caceea92/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=0bb2ea653e59093719674be186b3c3d7caceea92", "patch": "@@ -1499,6 +1499,10 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n \n     fn visit_assoc_item(&mut self, item: &'a AssocItem, ctxt: AssocCtxt) {\n+        if self.session.contains_name(&item.attrs, sym::no_mangle) {\n+            self.check_nomangle_item_asciionly(item.ident, item.span);\n+        }\n+\n         if ctxt == AssocCtxt::Trait || !self.in_trait_impl {\n             self.check_defaultness(item.span, item.kind.defaultness());\n         }"}, {"sha": "5bd48a54383cf0cde767c20d3a1c726dec47f690", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 64, "deletions": 22, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/0bb2ea653e59093719674be186b3c3d7caceea92/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb2ea653e59093719674be186b3c3d7caceea92/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=0bb2ea653e59093719674be186b3c3d7caceea92", "patch": "@@ -417,6 +417,25 @@ impl EarlyLintPass for UnsafeCode {\n         }\n     }\n \n+    fn check_impl_item(&mut self, cx: &EarlyContext<'_>, it: &ast::AssocItem) {\n+        if let ast::AssocItemKind::Fn(..) = it.kind {\n+            if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::no_mangle) {\n+                self.report_overriden_symbol_name(\n+                    cx,\n+                    attr.span,\n+                    \"declaration of a `no_mangle` method\",\n+                );\n+            }\n+            if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::export_name) {\n+                self.report_overriden_symbol_name(\n+                    cx,\n+                    attr.span,\n+                    \"declaration of a method with `export_name`\",\n+                );\n+            }\n+        }\n+    }\n+\n     fn check_fn(&mut self, cx: &EarlyContext<'_>, fk: FnKind<'_>, span: Span, _: ast::NodeId) {\n         if let FnKind::Fn(\n             ctxt,\n@@ -1115,31 +1134,37 @@ declare_lint_pass!(InvalidNoMangleItems => [NO_MANGLE_CONST_ITEMS, NO_MANGLE_GEN\n impl<'tcx> LateLintPass<'tcx> for InvalidNoMangleItems {\n     fn check_item(&mut self, cx: &LateContext<'_>, it: &hir::Item<'_>) {\n         let attrs = cx.tcx.hir().attrs(it.hir_id());\n+        let check_no_mangle_on_generic_fn = |no_mangle_attr: &ast::Attribute,\n+                                             impl_generics: Option<&hir::Generics<'_>>,\n+                                             generics: &hir::Generics<'_>,\n+                                             span| {\n+            for param in\n+                generics.params.iter().chain(impl_generics.map(|g| g.params).into_iter().flatten())\n+            {\n+                match param.kind {\n+                    GenericParamKind::Lifetime { .. } => {}\n+                    GenericParamKind::Type { .. } | GenericParamKind::Const { .. } => {\n+                        cx.struct_span_lint(NO_MANGLE_GENERIC_ITEMS, span, |lint| {\n+                            lint.build(\"functions generic over types or consts must be mangled\")\n+                                .span_suggestion_short(\n+                                    no_mangle_attr.span,\n+                                    \"remove this attribute\",\n+                                    String::new(),\n+                                    // Use of `#[no_mangle]` suggests FFI intent; correct\n+                                    // fix may be to monomorphize source by hand\n+                                    Applicability::MaybeIncorrect,\n+                                )\n+                                .emit();\n+                        });\n+                        break;\n+                    }\n+                }\n+            }\n+        };\n         match it.kind {\n             hir::ItemKind::Fn(.., ref generics, _) => {\n                 if let Some(no_mangle_attr) = cx.sess().find_by_name(attrs, sym::no_mangle) {\n-                    for param in generics.params {\n-                        match param.kind {\n-                            GenericParamKind::Lifetime { .. } => {}\n-                            GenericParamKind::Type { .. } | GenericParamKind::Const { .. } => {\n-                                cx.struct_span_lint(NO_MANGLE_GENERIC_ITEMS, it.span, |lint| {\n-                                    lint.build(\n-                                        \"functions generic over types or consts must be mangled\",\n-                                    )\n-                                    .span_suggestion_short(\n-                                        no_mangle_attr.span,\n-                                        \"remove this attribute\",\n-                                        String::new(),\n-                                        // Use of `#[no_mangle]` suggests FFI intent; correct\n-                                        // fix may be to monomorphize source by hand\n-                                        Applicability::MaybeIncorrect,\n-                                    )\n-                                    .emit();\n-                                });\n-                                break;\n-                            }\n-                        }\n-                    }\n+                    check_no_mangle_on_generic_fn(no_mangle_attr, None, generics, it.span);\n                 }\n             }\n             hir::ItemKind::Const(..) => {\n@@ -1170,6 +1195,23 @@ impl<'tcx> LateLintPass<'tcx> for InvalidNoMangleItems {\n                     });\n                 }\n             }\n+            hir::ItemKind::Impl(hir::Impl { ref generics, items, .. }) => {\n+                for it in items {\n+                    if let hir::AssocItemKind::Fn { .. } = it.kind {\n+                        if let Some(no_mangle_attr) = cx\n+                            .sess()\n+                            .find_by_name(cx.tcx.hir().attrs(it.id.hir_id()), sym::no_mangle)\n+                        {\n+                            check_no_mangle_on_generic_fn(\n+                                no_mangle_attr,\n+                                Some(generics),\n+                                cx.tcx.hir().get_generics(it.id.def_id.to_def_id()).unwrap(),\n+                                it.span,\n+                            );\n+                        }\n+                    }\n+                }\n+            }\n             _ => {}\n         }\n     }"}, {"sha": "7f71923c91a7fc00849e63defc040b9cc06ff923", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0bb2ea653e59093719674be186b3c3d7caceea92/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb2ea653e59093719674be186b3c3d7caceea92/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=0bb2ea653e59093719674be186b3c3d7caceea92", "patch": "@@ -391,9 +391,14 @@ impl<'tcx> LateLintPass<'tcx> for NonSnakeCase {\n         _: Span,\n         id: hir::HirId,\n     ) {\n+        let attrs = cx.tcx.hir().attrs(id);\n         match &fk {\n-            FnKind::Method(ident, ..) => match method_context(cx, id) {\n+            FnKind::Method(ident, sig, ..) => match method_context(cx, id) {\n                 MethodLateContext::PlainImpl => {\n+                    if sig.header.abi != Abi::Rust && cx.sess().contains_name(attrs, sym::no_mangle)\n+                    {\n+                        return;\n+                    }\n                     self.check_snake_case(cx, \"method\", ident);\n                 }\n                 MethodLateContext::TraitAutoImpl => {\n@@ -402,7 +407,6 @@ impl<'tcx> LateLintPass<'tcx> for NonSnakeCase {\n                 _ => (),\n             },\n             FnKind::ItemFn(ident, _, header, _) => {\n-                let attrs = cx.tcx.hir().attrs(id);\n                 // Skip foreign-ABI #[no_mangle] functions (Issue #31924)\n                 if header.abi != Abi::Rust && cx.sess().contains_name(attrs, sym::no_mangle) {\n                     return;"}, {"sha": "7fc73c76cc92a7448f9685fb00476460382de1ab", "filename": "src/test/ui/auxiliary/no-mangle-associated-fn.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0bb2ea653e59093719674be186b3c3d7caceea92/src%2Ftest%2Fui%2Fauxiliary%2Fno-mangle-associated-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb2ea653e59093719674be186b3c3d7caceea92/src%2Ftest%2Fui%2Fauxiliary%2Fno-mangle-associated-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fno-mangle-associated-fn.rs?ref=0bb2ea653e59093719674be186b3c3d7caceea92", "patch": "@@ -8,3 +8,14 @@ impl Bar {\n         2\n     }\n }\n+\n+trait Foo {\n+    fn baz() -> u8;\n+}\n+\n+impl Foo for Bar {\n+    #[no_mangle]\n+    fn baz() -> u8 {\n+        3\n+    }\n+}"}, {"sha": "4523cac2c2810b60211b2f77fcb97200924028b4", "filename": "src/test/ui/generics/generic-no-mangle.fixed", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/0bb2ea653e59093719674be186b3c3d7caceea92/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0bb2ea653e59093719674be186b3c3d7caceea92/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.fixed?ref=0bb2ea653e59093719674be186b3c3d7caceea92", "patch": "@@ -14,4 +14,119 @@ pub fn baz(x: &i32) -> &i32 { x }\n #[no_mangle]\n pub fn qux<'a>(x: &'a i32) -> &i32 { x }\n \n+pub struct Foo;\n+\n+impl Foo {\n+    \n+    pub fn foo<T>() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    \n+    pub extern \"C\" fn bar<T>() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    #[no_mangle]\n+    pub fn baz(x: &i32) -> &i32 { x }\n+\n+    #[no_mangle]\n+    pub fn qux<'a>(x: &'a i32) -> &i32 { x }\n+}\n+\n+trait Trait1 {\n+    fn foo<T>();\n+    extern \"C\" fn bar<T>();\n+    fn baz(x: &i32) -> &i32;\n+    fn qux<'a>(x: &'a i32) -> &i32;\n+}\n+\n+impl Trait1 for Foo {\n+    \n+    fn foo<T>() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    \n+    extern \"C\" fn bar<T>() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    #[no_mangle]\n+    fn baz(x: &i32) -> &i32 { x }\n+\n+    #[no_mangle]\n+    fn qux<'a>(x: &'a i32) -> &i32 { x }\n+}\n+\n+trait Trait2<T> {\n+    fn foo();\n+    fn foo2<U>();\n+    extern \"C\" fn bar();\n+    fn baz(x: &i32) -> &i32;\n+    fn qux<'a>(x: &'a i32) -> &i32;\n+}\n+\n+impl<T> Trait2<T> for Foo {\n+    \n+    fn foo() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    \n+    fn foo2<U>() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    \n+    extern \"C\" fn bar() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    \n+    fn baz(x: &i32) -> &i32 { x } //~ ERROR functions generic over types or consts must be mangled\n+\n+    \n+    fn qux<'a>(x: &'a i32) -> &i32 { x } //~ ERROR functions generic over types or consts must be mangled\n+}\n+\n+pub struct Bar<T>(T);\n+\n+impl<T> Bar<T> {\n+    \n+    pub fn foo() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    \n+    pub extern \"C\" fn bar() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    \n+    pub fn baz<U>() {} //~ ERROR functions generic over types or consts must be mangled\n+}\n+\n+trait Trait3 {\n+    fn foo();\n+    extern \"C\" fn bar();\n+    fn baz<U>();\n+}\n+\n+impl<T> Trait3 for Bar<T> {\n+    \n+    fn foo() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    \n+    extern \"C\" fn bar() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    \n+    fn baz<U>() {} //~ ERROR functions generic over types or consts must be mangled\n+}\n+\n+pub struct Baz<'a>(&'a i32);\n+\n+impl<'a> Baz<'a> {\n+    #[no_mangle]\n+    pub fn foo() {}\n+\n+    #[no_mangle]\n+    pub fn bar<'b>(x: &'b i32) -> &i32 { x }\n+}\n+\n+trait Trait4 {\n+    fn foo();\n+    fn bar<'a>(x: &'a i32) -> &i32;\n+}\n+\n+impl<'a> Trait4 for Baz<'a> {\n+    #[no_mangle]\n+    fn foo() {}\n+\n+    #[no_mangle]\n+    fn bar<'b>(x: &'b i32) -> &i32 { x }\n+}\n+\n fn main() {}"}, {"sha": "83fd4564e91d3ec1800e0d8dbb00c886c57705b4", "filename": "src/test/ui/generics/generic-no-mangle.rs", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/0bb2ea653e59093719674be186b3c3d7caceea92/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb2ea653e59093719674be186b3c3d7caceea92/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.rs?ref=0bb2ea653e59093719674be186b3c3d7caceea92", "patch": "@@ -14,4 +14,119 @@ pub fn baz(x: &i32) -> &i32 { x }\n #[no_mangle]\n pub fn qux<'a>(x: &'a i32) -> &i32 { x }\n \n+pub struct Foo;\n+\n+impl Foo {\n+    #[no_mangle]\n+    pub fn foo<T>() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    #[no_mangle]\n+    pub extern \"C\" fn bar<T>() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    #[no_mangle]\n+    pub fn baz(x: &i32) -> &i32 { x }\n+\n+    #[no_mangle]\n+    pub fn qux<'a>(x: &'a i32) -> &i32 { x }\n+}\n+\n+trait Trait1 {\n+    fn foo<T>();\n+    extern \"C\" fn bar<T>();\n+    fn baz(x: &i32) -> &i32;\n+    fn qux<'a>(x: &'a i32) -> &i32;\n+}\n+\n+impl Trait1 for Foo {\n+    #[no_mangle]\n+    fn foo<T>() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    #[no_mangle]\n+    extern \"C\" fn bar<T>() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    #[no_mangle]\n+    fn baz(x: &i32) -> &i32 { x }\n+\n+    #[no_mangle]\n+    fn qux<'a>(x: &'a i32) -> &i32 { x }\n+}\n+\n+trait Trait2<T> {\n+    fn foo();\n+    fn foo2<U>();\n+    extern \"C\" fn bar();\n+    fn baz(x: &i32) -> &i32;\n+    fn qux<'a>(x: &'a i32) -> &i32;\n+}\n+\n+impl<T> Trait2<T> for Foo {\n+    #[no_mangle]\n+    fn foo() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    #[no_mangle]\n+    fn foo2<U>() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    #[no_mangle]\n+    extern \"C\" fn bar() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    #[no_mangle]\n+    fn baz(x: &i32) -> &i32 { x } //~ ERROR functions generic over types or consts must be mangled\n+\n+    #[no_mangle]\n+    fn qux<'a>(x: &'a i32) -> &i32 { x } //~ ERROR functions generic over types or consts must be mangled\n+}\n+\n+pub struct Bar<T>(T);\n+\n+impl<T> Bar<T> {\n+    #[no_mangle]\n+    pub fn foo() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    #[no_mangle]\n+    pub extern \"C\" fn bar() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    #[no_mangle]\n+    pub fn baz<U>() {} //~ ERROR functions generic over types or consts must be mangled\n+}\n+\n+trait Trait3 {\n+    fn foo();\n+    extern \"C\" fn bar();\n+    fn baz<U>();\n+}\n+\n+impl<T> Trait3 for Bar<T> {\n+    #[no_mangle]\n+    fn foo() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    #[no_mangle]\n+    extern \"C\" fn bar() {} //~ ERROR functions generic over types or consts must be mangled\n+\n+    #[no_mangle]\n+    fn baz<U>() {} //~ ERROR functions generic over types or consts must be mangled\n+}\n+\n+pub struct Baz<'a>(&'a i32);\n+\n+impl<'a> Baz<'a> {\n+    #[no_mangle]\n+    pub fn foo() {}\n+\n+    #[no_mangle]\n+    pub fn bar<'b>(x: &'b i32) -> &i32 { x }\n+}\n+\n+trait Trait4 {\n+    fn foo();\n+    fn bar<'a>(x: &'a i32) -> &i32;\n+}\n+\n+impl<'a> Trait4 for Baz<'a> {\n+    #[no_mangle]\n+    fn foo() {}\n+\n+    #[no_mangle]\n+    fn bar<'b>(x: &'b i32) -> &i32 { x }\n+}\n+\n fn main() {}"}, {"sha": "0786081f732f893ee261450b05493c9aebbf7bcb", "filename": "src/test/ui/generics/generic-no-mangle.stderr", "status": "modified", "additions": 121, "deletions": 1, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/0bb2ea653e59093719674be186b3c3d7caceea92/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0bb2ea653e59093719674be186b3c3d7caceea92/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.stderr?ref=0bb2ea653e59093719674be186b3c3d7caceea92", "patch": "@@ -20,5 +20,125 @@ LL | #[no_mangle]\n LL | pub extern \"C\" fn bar<T>() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: functions generic over types or consts must be mangled\n+  --> $DIR/generic-no-mangle.rs:21:5\n+   |\n+LL |     #[no_mangle]\n+   |     ------------ help: remove this attribute\n+LL |     pub fn foo<T>() {}\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: functions generic over types or consts must be mangled\n+  --> $DIR/generic-no-mangle.rs:24:5\n+   |\n+LL |     #[no_mangle]\n+   |     ------------ help: remove this attribute\n+LL |     pub extern \"C\" fn bar<T>() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: functions generic over types or consts must be mangled\n+  --> $DIR/generic-no-mangle.rs:42:5\n+   |\n+LL |     #[no_mangle]\n+   |     ------------ help: remove this attribute\n+LL |     fn foo<T>() {}\n+   |     ^^^^^^^^^^^^^^\n+\n+error: functions generic over types or consts must be mangled\n+  --> $DIR/generic-no-mangle.rs:45:5\n+   |\n+LL |     #[no_mangle]\n+   |     ------------ help: remove this attribute\n+LL |     extern \"C\" fn bar<T>() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: functions generic over types or consts must be mangled\n+  --> $DIR/generic-no-mangle.rs:64:5\n+   |\n+LL |     #[no_mangle]\n+   |     ------------ help: remove this attribute\n+LL |     fn foo() {}\n+   |     ^^^^^^^^^^^\n+\n+error: functions generic over types or consts must be mangled\n+  --> $DIR/generic-no-mangle.rs:67:5\n+   |\n+LL |     #[no_mangle]\n+   |     ------------ help: remove this attribute\n+LL |     fn foo2<U>() {}\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: functions generic over types or consts must be mangled\n+  --> $DIR/generic-no-mangle.rs:70:5\n+   |\n+LL |     #[no_mangle]\n+   |     ------------ help: remove this attribute\n+LL |     extern \"C\" fn bar() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: functions generic over types or consts must be mangled\n+  --> $DIR/generic-no-mangle.rs:73:5\n+   |\n+LL |     #[no_mangle]\n+   |     ------------ help: remove this attribute\n+LL |     fn baz(x: &i32) -> &i32 { x }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: functions generic over types or consts must be mangled\n+  --> $DIR/generic-no-mangle.rs:76:5\n+   |\n+LL |     #[no_mangle]\n+   |     ------------ help: remove this attribute\n+LL |     fn qux<'a>(x: &'a i32) -> &i32 { x }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: functions generic over types or consts must be mangled\n+  --> $DIR/generic-no-mangle.rs:83:5\n+   |\n+LL |     #[no_mangle]\n+   |     ------------ help: remove this attribute\n+LL |     pub fn foo() {}\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: functions generic over types or consts must be mangled\n+  --> $DIR/generic-no-mangle.rs:86:5\n+   |\n+LL |     #[no_mangle]\n+   |     ------------ help: remove this attribute\n+LL |     pub extern \"C\" fn bar() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: functions generic over types or consts must be mangled\n+  --> $DIR/generic-no-mangle.rs:89:5\n+   |\n+LL |     #[no_mangle]\n+   |     ------------ help: remove this attribute\n+LL |     pub fn baz<U>() {}\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: functions generic over types or consts must be mangled\n+  --> $DIR/generic-no-mangle.rs:100:5\n+   |\n+LL |     #[no_mangle]\n+   |     ------------ help: remove this attribute\n+LL |     fn foo() {}\n+   |     ^^^^^^^^^^^\n+\n+error: functions generic over types or consts must be mangled\n+  --> $DIR/generic-no-mangle.rs:103:5\n+   |\n+LL |     #[no_mangle]\n+   |     ------------ help: remove this attribute\n+LL |     extern \"C\" fn bar() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: functions generic over types or consts must be mangled\n+  --> $DIR/generic-no-mangle.rs:106:5\n+   |\n+LL |     #[no_mangle]\n+   |     ------------ help: remove this attribute\n+LL |     fn baz<U>() {}\n+   |     ^^^^^^^^^^^^^^\n+\n+error: aborting due to 17 previous errors\n "}, {"sha": "5b9faca4911e891c9287120ba060413b7a412519", "filename": "src/test/ui/lint/issue-31924-non-snake-ffi.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0bb2ea653e59093719674be186b3c3d7caceea92/src%2Ftest%2Fui%2Flint%2Fissue-31924-non-snake-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb2ea653e59093719674be186b3c3d7caceea92/src%2Ftest%2Fui%2Flint%2Fissue-31924-non-snake-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-31924-non-snake-ffi.rs?ref=0bb2ea653e59093719674be186b3c3d7caceea92", "patch": "@@ -5,4 +5,11 @@\n #[no_mangle]\n pub extern \"C\" fn SparklingGenerationForeignFunctionInterface() {} // OK\n \n+pub struct Foo;\n+\n+impl Foo {\n+    #[no_mangle]\n+    pub extern \"C\" fn SparklingGenerationForeignFunctionInterface() {} // OK\n+}\n+\n fn main() {}"}, {"sha": "c30f21bbf8fb17725e66c44bbede04bd849aa449", "filename": "src/test/ui/lint/lint-unsafe-code.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0bb2ea653e59093719674be186b3c3d7caceea92/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb2ea653e59093719674be186b3c3d7caceea92/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.rs?ref=0bb2ea653e59093719674be186b3c3d7caceea92", "patch": "@@ -31,9 +31,33 @@ macro_rules! unsafe_in_macro {\n #[no_mangle] fn foo() {} //~ ERROR: declaration of a `no_mangle` function\n #[no_mangle] static FOO: u32 = 5; //~ ERROR: declaration of a `no_mangle` static\n \n+trait AssocFnTrait {\n+    fn foo();\n+}\n+\n+struct AssocFnFoo;\n+\n+impl AssocFnFoo {\n+    #[no_mangle] fn foo() {} //~ ERROR: declaration of a `no_mangle` method\n+}\n+\n+impl AssocFnTrait for AssocFnFoo {\n+    #[no_mangle] fn foo() {} //~ ERROR: declaration of a `no_mangle` method\n+}\n+\n #[export_name = \"bar\"] fn bar() {} //~ ERROR: declaration of a function with `export_name`\n #[export_name = \"BAR\"] static BAR: u32 = 5; //~ ERROR: declaration of a static with `export_name`\n \n+struct AssocFnBar;\n+\n+impl AssocFnBar {\n+    #[export_name = \"bar\"] fn bar() {} //~ ERROR: declaration of a method with `export_name`\n+}\n+\n+impl AssocFnTrait for AssocFnBar {\n+    #[export_name = \"bar\"] fn foo() {} //~ ERROR: declaration of a method with `export_name`\n+}\n+\n unsafe fn baz() {} //~ ERROR: declaration of an `unsafe` function\n unsafe trait Foo {} //~ ERROR: declaration of an `unsafe` trait\n unsafe impl Foo for Bar {} //~ ERROR: implementation of an `unsafe` trait"}, {"sha": "b6895ac8da87f2a2f6935cf5128a8d21b3c2b582", "filename": "src/test/ui/lint/lint-unsafe-code.stderr", "status": "modified", "additions": 48, "deletions": 16, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/0bb2ea653e59093719674be186b3c3d7caceea92/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0bb2ea653e59093719674be186b3c3d7caceea92/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.stderr?ref=0bb2ea653e59093719674be186b3c3d7caceea92", "patch": "@@ -19,96 +19,128 @@ LL | #[no_mangle] static FOO: u32 = 5;\n    |\n    = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n \n+error: declaration of a `no_mangle` method\n+  --> $DIR/lint-unsafe-code.rs:41:5\n+   |\n+LL |     #[no_mangle] fn foo() {}\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n+\n+error: declaration of a `no_mangle` method\n+  --> $DIR/lint-unsafe-code.rs:45:5\n+   |\n+LL |     #[no_mangle] fn foo() {}\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n+\n error: declaration of a function with `export_name`\n-  --> $DIR/lint-unsafe-code.rs:34:1\n+  --> $DIR/lint-unsafe-code.rs:48:1\n    |\n LL | #[export_name = \"bar\"] fn bar() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n \n error: declaration of a static with `export_name`\n-  --> $DIR/lint-unsafe-code.rs:35:1\n+  --> $DIR/lint-unsafe-code.rs:49:1\n    |\n LL | #[export_name = \"BAR\"] static BAR: u32 = 5;\n    | ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n \n+error: declaration of a method with `export_name`\n+  --> $DIR/lint-unsafe-code.rs:54:5\n+   |\n+LL |     #[export_name = \"bar\"] fn bar() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n+\n+error: declaration of a method with `export_name`\n+  --> $DIR/lint-unsafe-code.rs:58:5\n+   |\n+LL |     #[export_name = \"bar\"] fn foo() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n+\n error: declaration of an `unsafe` function\n-  --> $DIR/lint-unsafe-code.rs:37:1\n+  --> $DIR/lint-unsafe-code.rs:61:1\n    |\n LL | unsafe fn baz() {}\n    | ^^^^^^^^^^^^^^^^^^\n \n error: declaration of an `unsafe` trait\n-  --> $DIR/lint-unsafe-code.rs:38:1\n+  --> $DIR/lint-unsafe-code.rs:62:1\n    |\n LL | unsafe trait Foo {}\n    | ^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` trait\n-  --> $DIR/lint-unsafe-code.rs:39:1\n+  --> $DIR/lint-unsafe-code.rs:63:1\n    |\n LL | unsafe impl Foo for Bar {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: declaration of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:42:5\n+  --> $DIR/lint-unsafe-code.rs:66:5\n    |\n LL |     unsafe fn baz(&self);\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:43:5\n+  --> $DIR/lint-unsafe-code.rs:67:5\n    |\n LL |     unsafe fn provided(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:44:5\n+  --> $DIR/lint-unsafe-code.rs:68:5\n    |\n LL |     unsafe fn provided_override(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:48:5\n+  --> $DIR/lint-unsafe-code.rs:72:5\n    |\n LL |     unsafe fn baz(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:49:5\n+  --> $DIR/lint-unsafe-code.rs:73:5\n    |\n LL |     unsafe fn provided_override(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:68:5\n+  --> $DIR/lint-unsafe-code.rs:92:5\n    |\n LL |     unsafe fn provided_override(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:79:5\n+  --> $DIR/lint-unsafe-code.rs:103:5\n    |\n LL |     unsafe fn provided(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:85:5\n+  --> $DIR/lint-unsafe-code.rs:109:5\n    |\n LL |     unsafe fn provided(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of an `unsafe` method\n-  --> $DIR/lint-unsafe-code.rs:89:5\n+  --> $DIR/lint-unsafe-code.rs:113:5\n    |\n LL |     unsafe fn baz(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: usage of an `unsafe` block\n-  --> $DIR/lint-unsafe-code.rs:100:5\n+  --> $DIR/lint-unsafe-code.rs:124:5\n    |\n LL |     unsafe {}\n    |     ^^^^^^^^^\n@@ -172,5 +204,5 @@ LL |     unsafe_in_macro!()\n    |\n    = note: this error originates in the macro `unsafe_in_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 22 previous errors\n+error: aborting due to 26 previous errors\n "}, {"sha": "ecd44abbf264c23e5a5e4673ad80889fd4ca849d", "filename": "src/test/ui/no-mangle-associated-fn.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0bb2ea653e59093719674be186b3c3d7caceea92/src%2Ftest%2Fui%2Fno-mangle-associated-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb2ea653e59093719674be186b3c3d7caceea92/src%2Ftest%2Fui%2Fno-mangle-associated-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-mangle-associated-fn.rs?ref=0bb2ea653e59093719674be186b3c3d7caceea92", "patch": "@@ -12,11 +12,26 @@ impl Foo {\n     }\n }\n \n+trait Bar {\n+    fn qux() -> u8;\n+}\n+\n+impl Bar for Foo {\n+    #[no_mangle]\n+    fn qux() -> u8 {\n+        4\n+    }\n+}\n+\n fn main() {\n     extern \"Rust\" {\n         fn foo() -> u8;\n         fn bar() -> u8;\n+        fn baz() -> u8;\n+        fn qux() -> u8;\n     }\n     assert_eq!(unsafe { foo() }, 1);\n     assert_eq!(unsafe { bar() }, 2);\n+    assert_eq!(unsafe { baz() }, 3);\n+    assert_eq!(unsafe { qux() }, 4);\n }"}, {"sha": "f4c126a6e025b3179e69869ae59f7d217c08b236", "filename": "src/test/ui/rfc-2457/no_mangle_nonascii_forbidden.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0bb2ea653e59093719674be186b3c3d7caceea92/src%2Ftest%2Fui%2Frfc-2457%2Fno_mangle_nonascii_forbidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb2ea653e59093719674be186b3c3d7caceea92/src%2Ftest%2Fui%2Frfc-2457%2Fno_mangle_nonascii_forbidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2457%2Fno_mangle_nonascii_forbidden.rs?ref=0bb2ea653e59093719674be186b3c3d7caceea92", "patch": "@@ -1,4 +1,20 @@\n #[no_mangle]\n pub fn \u0159\u0173\u015b\u0165() {}  //~ `#[no_mangle]` requires ASCII identifier\n \n+pub struct Foo;\n+\n+impl Foo {\n+    #[no_mangle]\n+    pub fn \u0159\u0173\u015b\u0165() {}  //~ `#[no_mangle]` requires ASCII identifier\n+}\n+\n+trait Bar {\n+    fn \u0159\u0173\u015b\u0165();\n+}\n+\n+impl Bar for Foo {\n+    #[no_mangle]\n+    fn \u0159\u0173\u015b\u0165() {}  //~ `#[no_mangle]` requires ASCII identifier\n+}\n+\n fn main() {}"}, {"sha": "459d5d6b57c81982699d7660b2ede368dd8e9c25", "filename": "src/test/ui/rfc-2457/no_mangle_nonascii_forbidden.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0bb2ea653e59093719674be186b3c3d7caceea92/src%2Ftest%2Fui%2Frfc-2457%2Fno_mangle_nonascii_forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0bb2ea653e59093719674be186b3c3d7caceea92/src%2Ftest%2Fui%2Frfc-2457%2Fno_mangle_nonascii_forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2457%2Fno_mangle_nonascii_forbidden.stderr?ref=0bb2ea653e59093719674be186b3c3d7caceea92", "patch": "@@ -4,6 +4,18 @@ error[E0754]: `#[no_mangle]` requires ASCII identifier\n LL | pub fn \u0159\u0173\u015b\u0165() {}\n    | ^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0754]: `#[no_mangle]` requires ASCII identifier\n+  --> $DIR/no_mangle_nonascii_forbidden.rs:8:5\n+   |\n+LL |     pub fn \u0159\u0173\u015b\u0165() {}\n+   |     ^^^^^^^^^^^^^\n+\n+error[E0754]: `#[no_mangle]` requires ASCII identifier\n+  --> $DIR/no_mangle_nonascii_forbidden.rs:17:5\n+   |\n+LL |     fn \u0159\u0173\u015b\u0165() {}\n+   |     ^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0754`."}]}