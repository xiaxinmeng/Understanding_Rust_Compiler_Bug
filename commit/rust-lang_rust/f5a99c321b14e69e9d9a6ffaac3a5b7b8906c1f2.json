{"sha": "f5a99c321b14e69e9d9a6ffaac3a5b7b8906c1f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1YTk5YzMyMWIxNGU2OWU5ZDlhNmZmYWFjM2E1YjdiODkwNmMxZjI=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2018-12-10T22:55:53Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2018-12-13T14:25:14Z"}, "message": "Add checked_sub for Instant and SystemTime", "tree": {"sha": "609e631c35b2ba6db599e74111d9adc02eb57e7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/609e631c35b2ba6db599e74111d9adc02eb57e7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5a99c321b14e69e9d9a6ffaac3a5b7b8906c1f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5a99c321b14e69e9d9a6ffaac3a5b7b8906c1f2", "html_url": "https://github.com/rust-lang/rust/commit/f5a99c321b14e69e9d9a6ffaac3a5b7b8906c1f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5a99c321b14e69e9d9a6ffaac3a5b7b8906c1f2/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13f0463a195832f10f0f22105ad14e6d6b2eff59", "url": "https://api.github.com/repos/rust-lang/rust/commits/13f0463a195832f10f0f22105ad14e6d6b2eff59", "html_url": "https://github.com/rust-lang/rust/commit/13f0463a195832f10f0f22105ad14e6d6b2eff59"}], "stats": {"total": 170, "additions": 83, "deletions": 87}, "files": [{"sha": "6f023230a278e55d1c44c2784ea316834f647a6e", "filename": "src/libstd/sys/cloudabi/time.rs", "status": "modified", "additions": 14, "deletions": 23, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f5a99c321b14e69e9d9a6ffaac3a5b7b8906c1f2/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a99c321b14e69e9d9a6ffaac3a5b7b8906c1f2/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs?ref=f5a99c321b14e69e9d9a6ffaac3a5b7b8906c1f2", "patch": "@@ -25,11 +25,6 @@ fn checked_dur2intervals(dur: &Duration) -> Option<abi::timestamp> {\n         .checked_add(dur.subsec_nanos() as abi::timestamp)\n }\n \n-pub fn dur2intervals(dur: &Duration) -> abi::timestamp {\n-    checked_dur2intervals(dur)\n-        .expect(\"overflow converting duration to nanoseconds\")\n-}\n-\n impl Instant {\n     pub fn now() -> Instant {\n         unsafe {\n@@ -48,17 +43,15 @@ impl Instant {\n     }\n \n     pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {\n-        checked_dur2intervals(other)?\n-            .checked_add(self.t)\n-            .map(|t| Instant {t})\n+        Some(Instant {\n+            t: self.t.checked_add(checked_dur2intervals(other)?)?,\n+        })\n     }\n \n-    pub fn sub_duration(&self, other: &Duration) -> Instant {\n-        Instant {\n-            t: self.t\n-                .checked_sub(dur2intervals(other))\n-                .expect(\"overflow when subtracting duration from instant\"),\n-        }\n+    pub fn checked_sub_duration(&self, other: &Duration) -> Option<Instant> {\n+        Some(Instant {\n+            t: self.t.checked_sub(checked_dur2intervals(other)?)?,\n+        })\n     }\n }\n \n@@ -94,17 +87,15 @@ impl SystemTime {\n     }\n \n     pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {\n-        checked_dur2intervals(other)\n-            .and_then(|d| self.t.checked_add(d))\n-            .map(|t| SystemTime {t})\n+        Some(SystemTime {\n+            t: self.t.checked_add(checked_dur2intervals(other)?)?,\n+        })\n     }\n \n-    pub fn sub_duration(&self, other: &Duration) -> SystemTime {\n-        SystemTime {\n-            t: self.t\n-                .checked_sub(dur2intervals(other))\n-                .expect(\"overflow when subtracting duration from instant\"),\n-        }\n+    pub fn checked_sub_duration(&self, other: &Duration) -> Option<SystemTime> {\n+        Some(SystemTime {\n+            t: self.t.checked_sub(checked_dur2intervals(other)?)?,\n+        })\n     }\n }\n "}, {"sha": "cb2eab52211811cd839217d3d2419ee922be2a6a", "filename": "src/libstd/sys/redox/time.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f5a99c321b14e69e9d9a6ffaac3a5b7b8906c1f2/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a99c321b14e69e9d9a6ffaac3a5b7b8906c1f2/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs?ref=f5a99c321b14e69e9d9a6ffaac3a5b7b8906c1f2", "patch": "@@ -63,27 +63,25 @@ impl Timespec {\n         })\n     }\n \n-    fn sub_duration(&self, other: &Duration) -> Timespec {\n+    fn checked_sub_duration(&self, other: &Duration) -> Option<Timespec> {\n         let mut secs = other\n             .as_secs()\n             .try_into() // <- target type would be `i64`\n             .ok()\n-            .and_then(|secs| self.t.tv_sec.checked_sub(secs))\n-            .expect(\"overflow when subtracting duration from time\");\n+            .and_then(|secs| self.t.tv_sec.checked_sub(secs))?;\n \n         // Similar to above, nanos can't overflow.\n         let mut nsec = self.t.tv_nsec as i32 - other.subsec_nanos() as i32;\n         if nsec < 0 {\n             nsec += NSEC_PER_SEC as i32;\n-            secs = secs.checked_sub(1).expect(\"overflow when subtracting \\\n-                                               duration from time\");\n+            secs = secs.checked_sub(1)?;\n         }\n-        Timespec {\n+        Some(Timespec {\n             t: syscall::TimeSpec {\n                 tv_sec: secs,\n                 tv_nsec: nsec as i32,\n             },\n-        }\n+        })\n     }\n }\n \n@@ -147,11 +145,11 @@ impl Instant {\n     }\n \n     pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {\n-        self.t.checked_add_duration(other).map(|t| Instant { t })\n+        Some(Instant { t: self.t.checked_add_duration(other)? })\n     }\n \n-    pub fn sub_duration(&self, other: &Duration) -> Instant {\n-        Instant { t: self.t.sub_duration(other) }\n+    pub fn checked_sub_duration(&self, other: &Duration) -> Option<Instant> {\n+        Some(Instant { t: self.t.checked_sub_duration(other)? })\n     }\n }\n \n@@ -175,11 +173,11 @@ impl SystemTime {\n     }\n \n     pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {\n-        self.t.checked_add_duration(other).map(|t| SystemTime { t })\n+        Some(SystemTime { t: self.t.checked_add_duration(other)? })\n     }\n \n-    pub fn sub_duration(&self, other: &Duration) -> SystemTime {\n-        SystemTime { t: self.t.sub_duration(other) }\n+    pub fn checked_sub_duration(&self, other: &Duration) -> Option<SystemTime> {\n+        Some(SystemTime { t: self.t.checked_sub_duration(other)? })\n     }\n }\n "}, {"sha": "8f8aaa88b22653979f957dc134f25f660fd788a2", "filename": "src/libstd/sys/unix/time.rs", "status": "modified", "additions": 21, "deletions": 27, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f5a99c321b14e69e9d9a6ffaac3a5b7b8906c1f2/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a99c321b14e69e9d9a6ffaac3a5b7b8906c1f2/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftime.rs?ref=f5a99c321b14e69e9d9a6ffaac3a5b7b8906c1f2", "patch": "@@ -64,27 +64,25 @@ impl Timespec {\n         })\n     }\n \n-    fn sub_duration(&self, other: &Duration) -> Timespec {\n+    fn checked_sub_duration(&self, other: &Duration) -> Option<Timespec> {\n         let mut secs = other\n             .as_secs()\n             .try_into() // <- target type would be `libc::time_t`\n             .ok()\n-            .and_then(|secs| self.t.tv_sec.checked_sub(secs))\n-            .expect(\"overflow when subtracting duration from time\");\n+            .and_then(|secs| self.t.tv_sec.checked_sub(secs))?;\n \n         // Similar to above, nanos can't overflow.\n         let mut nsec = self.t.tv_nsec as i32 - other.subsec_nanos() as i32;\n         if nsec < 0 {\n             nsec += NSEC_PER_SEC as i32;\n-            secs = secs.checked_sub(1).expect(\"overflow when subtracting \\\n-                                               duration from time\");\n+            secs = secs.checked_sub(1)?;\n         }\n-        Timespec {\n+        Some(Timespec {\n             t: libc::timespec {\n                 tv_sec: secs,\n                 tv_nsec: nsec as _,\n             },\n-        }\n+        })\n     }\n }\n \n@@ -162,14 +160,15 @@ mod inner {\n         }\n \n         pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {\n-            checked_dur2intervals(other)?.checked_add(self.t).map(|t| Instant {t})\n+            Some(Instant {\n+                t: self.t.checked_add(checked_dur2intervals(other)?)?,\n+            })\n         }\n \n-        pub fn sub_duration(&self, other: &Duration) -> Instant {\n-            Instant {\n-                t: self.t.checked_sub(dur2intervals(other))\n-                       .expect(\"overflow when subtracting duration from instant\"),\n-            }\n+        pub fn checked_sub_duration(&self, other: &Duration) -> Option<Instant> {\n+            Some(Instant {\n+                t: self.t.checked_sub(checked_dur2intervals(other)?)?,\n+            })\n         }\n     }\n \n@@ -193,11 +192,11 @@ mod inner {\n         }\n \n         pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {\n-            self.t.checked_add_duration(other).map(|t| SystemTime { t })\n+            Some(SystemTime { t: self.t.checked_add_duration(other)? })\n         }\n \n-        pub fn sub_duration(&self, other: &Duration) -> SystemTime {\n-            SystemTime { t: self.t.sub_duration(other) }\n+        pub fn checked_sub_duration(&self, other: &Duration) -> Option<SystemTime> {\n+            Some(SystemTime { t: self.t.checked_sub_duration(other)? })\n         }\n     }\n \n@@ -225,11 +224,6 @@ mod inner {\n         }\n     }\n \n-    fn dur2intervals(dur: &Duration) -> u64 {\n-        checked_dur2intervals(dur)\n-            .expect(\"overflow converting duration to nanoseconds\")\n-    }\n-\n     fn checked_dur2intervals(dur: &Duration) -> Option<u64> {\n         let nanos = dur.as_secs()\n             .checked_mul(NSEC_PER_SEC)?\n@@ -294,11 +288,11 @@ mod inner {\n         }\n \n         pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {\n-            self.t.checked_add_duration(other).map(|t| Instant { t })\n+            Some(Instant { t: self.t.checked_add_duration(other)? })\n         }\n \n-        pub fn sub_duration(&self, other: &Duration) -> Instant {\n-            Instant { t: self.t.sub_duration(other) }\n+        pub fn checked_sub_duration(&self, other: &Duration) -> Option<Instant> {\n+            Some(Instant { t: self.t.checked_sub_duration(other)? })\n         }\n     }\n \n@@ -322,11 +316,11 @@ mod inner {\n         }\n \n         pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {\n-            self.t.checked_add_duration(other).map(|t| SystemTime { t })\n+            Some(SystemTime { t: self.t.checked_add_duration(other)? })\n         }\n \n-        pub fn sub_duration(&self, other: &Duration) -> SystemTime {\n-            SystemTime { t: self.t.sub_duration(other) }\n+        pub fn checked_sub_duration(&self, other: &Duration) -> Option<SystemTime> {\n+            Some(SystemTime { t: self.t.checked_sub_duration(other)? })\n         }\n     }\n "}, {"sha": "cc56773e0ea8efc9d76b8ce36f708004ea7885cd", "filename": "src/libstd/sys/wasm/time.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f5a99c321b14e69e9d9a6ffaac3a5b7b8906c1f2/src%2Flibstd%2Fsys%2Fwasm%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a99c321b14e69e9d9a6ffaac3a5b7b8906c1f2/src%2Flibstd%2Fsys%2Fwasm%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Ftime.rs?ref=f5a99c321b14e69e9d9a6ffaac3a5b7b8906c1f2", "patch": "@@ -29,11 +29,11 @@ impl Instant {\n     }\n \n     pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {\n-        self.0.checked_add(*other).map(|d| Instant(d))\n+        Some(Instant(self.0.checked_add(*other)?))\n     }\n \n-    pub fn sub_duration(&self, other: &Duration) -> Instant {\n-        Instant(self.0 - *other)\n+    pub fn checked_sub_duration(&self, other: &Duration) -> Option<Instant> {\n+        Some(Instant(self.0.checked_sub(*other)?))\n     }\n }\n \n@@ -48,10 +48,10 @@ impl SystemTime {\n     }\n \n     pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {\n-        self.0.checked_add(*other).map(|d| SystemTime(d))\n+        Some(SystemTime(self.0.checked_add(*other)?))\n     }\n \n-    pub fn sub_duration(&self, other: &Duration) -> SystemTime {\n-        SystemTime(self.0 - *other)\n+    pub fn checked_sub_duration(&self, other: &Duration) -> Option<SystemTime> {\n+        Some(SystemTime(self.0.checked_sub(*other)?))\n     }\n }"}, {"sha": "bb2c97ea149d2a6ccbc05d7dbaed8c6e2d2e55ea", "filename": "src/libstd/sys/windows/time.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f5a99c321b14e69e9d9a6ffaac3a5b7b8906c1f2/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a99c321b14e69e9d9a6ffaac3a5b7b8906c1f2/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs?ref=f5a99c321b14e69e9d9a6ffaac3a5b7b8906c1f2", "patch": "@@ -79,16 +79,16 @@ impl Instant {\n         })\n     }\n \n-    pub fn sub_duration(&self, other: &Duration) -> Instant {\n+    pub fn checked_sub_duration(&self, other: &Duration) -> Option<Instant> {\n         let freq = frequency() as u64;\n         let t = other.as_secs().checked_mul(freq).and_then(|i| {\n             (self.t as u64).checked_sub(i)\n         }).and_then(|i| {\n             i.checked_sub(mul_div_u64(other.subsec_nanos() as u64, freq, NANOS_PER_SEC))\n-        }).expect(\"overflow when subtracting duration from time\");\n-        Instant {\n+        })?;\n+        Some(Instant {\n             t: t as c::LARGE_INTEGER,\n-        }\n+        })\n     }\n }\n \n@@ -125,15 +125,13 @@ impl SystemTime {\n     }\n \n     pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {\n-        checked_dur2intervals(other)\n-            .and_then(|d| self.intervals().checked_add(d))\n-            .map(|i| SystemTime::from_intervals(i))\n+        let intervals = self.intervals().checked_add(checked_dur2intervals(other)?)?;\n+        Some(SystemTime::from_intervals(intervals))\n     }\n \n-    pub fn sub_duration(&self, other: &Duration) -> SystemTime {\n-        let intervals = self.intervals().checked_sub(dur2intervals(other))\n-                            .expect(\"overflow when subtracting from time\");\n-        SystemTime::from_intervals(intervals)\n+    pub fn checked_sub_duration(&self, other: &Duration) -> Option<SystemTime> {\n+        let intervals = self.intervals().checked_sub(checked_dur2intervals(other)?)?;\n+        Some(SystemTime::from_intervals(intervals))\n     }\n }\n \n@@ -185,11 +183,6 @@ fn checked_dur2intervals(dur: &Duration) -> Option<i64> {\n         .ok()\n }\n \n-fn dur2intervals(d: &Duration) -> i64 {\n-    checked_dur2intervals(d)\n-        .expect(\"overflow when converting duration to intervals\")\n-}\n-\n fn intervals2dur(intervals: u64) -> Duration {\n     Duration::new(intervals / INTERVALS_PER_SEC,\n                   ((intervals % INTERVALS_PER_SEC) * 100) as u32)"}, {"sha": "63cede79e4843503573cd6b96f3a15cddacd8a9b", "filename": "src/libstd/time.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f5a99c321b14e69e9d9a6ffaac3a5b7b8906c1f2/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a99c321b14e69e9d9a6ffaac3a5b7b8906c1f2/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=f5a99c321b14e69e9d9a6ffaac3a5b7b8906c1f2", "patch": "@@ -216,6 +216,14 @@ impl Instant {\n     pub fn checked_add(&self, duration: Duration) -> Option<Instant> {\n         self.0.checked_add_duration(&duration).map(|t| Instant(t))\n     }\n+\n+    /// Returns `Some(t)` where `t` is the time `self - duration` if `t` can be represented as\n+    /// `Instant` (which means it's inside the bounds of the underlying data structure), `None`\n+    /// otherwise.\n+    #[unstable(feature = \"time_checked_add\", issue = \"55940\")]\n+    pub fn checked_sub(&self, duration: Duration) -> Option<Instant> {\n+        self.0.checked_sub_duration(&duration).map(|t| Instant(t))\n+    }\n }\n \n #[stable(feature = \"time2\", since = \"1.8.0\")]\n@@ -240,7 +248,8 @@ impl Sub<Duration> for Instant {\n     type Output = Instant;\n \n     fn sub(self, other: Duration) -> Instant {\n-        Instant(self.0.sub_duration(&other))\n+        self.checked_sub(other)\n+            .expect(\"overflow when subtracting duration from instant\")\n     }\n }\n \n@@ -374,6 +383,14 @@ impl SystemTime {\n     pub fn checked_add(&self, duration: Duration) -> Option<SystemTime> {\n         self.0.checked_add_duration(&duration).map(|t| SystemTime(t))\n     }\n+\n+    /// Returns `Some(t)` where `t` is the time `self - duration` if `t` can be represented as\n+    /// `SystemTime` (which means it's inside the bounds of the underlying data structure), `None`\n+    /// otherwise.\n+    #[unstable(feature = \"time_checked_add\", issue = \"55940\")]\n+    pub fn checked_sub(&self, duration: Duration) -> Option<SystemTime> {\n+        self.0.checked_sub_duration(&duration).map(|t| SystemTime(t))\n+    }\n }\n \n #[stable(feature = \"time2\", since = \"1.8.0\")]\n@@ -398,7 +415,8 @@ impl Sub<Duration> for SystemTime {\n     type Output = SystemTime;\n \n     fn sub(self, dur: Duration) -> SystemTime {\n-        SystemTime(self.0.sub_duration(&dur))\n+        self.checked_sub(dur)\n+            .expect(\"overflow when subtracting duration from instant\")\n     }\n }\n \n@@ -531,6 +549,7 @@ mod tests {\n \n         let second = Duration::new(1, 0);\n         assert_almost_eq!(a - second + second, a);\n+        assert_almost_eq!(a.checked_sub(second).unwrap().checked_add(second).unwrap(), a);\n \n         // checked_add_duration will not panic on overflow\n         let mut maybe_t = Some(Instant::now());\n@@ -580,6 +599,7 @@ mod tests {\n                            .duration(), second);\n \n         assert_almost_eq!(a - second + second, a);\n+        assert_almost_eq!(a.checked_sub(second).unwrap().checked_add(second).unwrap(), a);\n \n         // A difference of 80 and 800 years cannot fit inside a 32-bit time_t\n         if !(cfg!(unix) && ::mem::size_of::<::libc::time_t>() <= 4) {"}]}