{"sha": "60fe8b3a65be709fe2163b8ab438ef14209055cc", "node_id": "C_kwDOAAsO6NoAKDYwZmU4YjNhNjViZTcwOWZlMjE2M2I4YWI0MzhlZjE0MjA5MDU1Y2M", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-25T04:35:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-25T04:35:59Z"}, "message": "Auto merge of #87220 - petrochenkov:derivecfglimit2, r=Aaron1011\n\nMake `#[derive(A, B, ...)]` cfg-eval its input only for `A, B, ...` and stabilize `feature(macro_attributes_in_derive_output)`\n\nStabilization report: https://github.com/rust-lang/rust/pull/87220#issuecomment-881923657\n\nCloses #81119\nr? `@Aaron1011`", "tree": {"sha": "4cf7b2057682cf6cc96d621b272c9c0decd21ddd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cf7b2057682cf6cc96d621b272c9c0decd21ddd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60fe8b3a65be709fe2163b8ab438ef14209055cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60fe8b3a65be709fe2163b8ab438ef14209055cc", "html_url": "https://github.com/rust-lang/rust/commit/60fe8b3a65be709fe2163b8ab438ef14209055cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60fe8b3a65be709fe2163b8ab438ef14209055cc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6867dd2c014a3ebd20948c64671a569c2b7dffc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6867dd2c014a3ebd20948c64671a569c2b7dffc1", "html_url": "https://github.com/rust-lang/rust/commit/6867dd2c014a3ebd20948c64671a569c2b7dffc1"}, {"sha": "85f02901a3cb97a81eb41b69ab0be03c66dde914", "url": "https://api.github.com/repos/rust-lang/rust/commits/85f02901a3cb97a81eb41b69ab0be03c66dde914", "html_url": "https://github.com/rust-lang/rust/commit/85f02901a3cb97a81eb41b69ab0be03c66dde914"}], "stats": {"total": 281, "additions": 124, "deletions": 157}, "files": [{"sha": "307730f7f5f14a9f88f4f627fe2a3b03f84fc3e8", "filename": "compiler/rustc_builtin_macros/src/cfg_eval.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/60fe8b3a65be709fe2163b8ab438ef14209055cc/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60fe8b3a65be709fe2163b8ab438ef14209055cc/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs?ref=60fe8b3a65be709fe2163b8ab438ef14209055cc", "patch": "@@ -2,17 +2,18 @@ use crate::util::check_builtin_macro_attribute;\n \n use rustc_ast as ast;\n use rustc_ast::mut_visit::MutVisitor;\n+use rustc_ast::ptr::P;\n use rustc_ast::tokenstream::CanSynthesizeMissingTokens;\n use rustc_ast::visit::Visitor;\n use rustc_ast::{mut_visit, visit};\n use rustc_ast::{AstLike, Attribute};\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_expand::config::StripUnconfigured;\n use rustc_expand::configure;\n+use rustc_feature::Features;\n use rustc_parse::parser::ForceCollect;\n use rustc_session::utils::FlattenNonterminals;\n-\n-use rustc_ast::ptr::P;\n+use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use smallvec::SmallVec;\n@@ -24,21 +25,19 @@ crate fn expand(\n     annotatable: Annotatable,\n ) -> Vec<Annotatable> {\n     check_builtin_macro_attribute(ecx, meta_item, sym::cfg_eval);\n-    vec![cfg_eval(ecx, annotatable)]\n+    vec![cfg_eval(ecx.sess, ecx.ecfg.features, annotatable)]\n }\n \n-crate fn cfg_eval(ecx: &ExtCtxt<'_>, annotatable: Annotatable) -> Annotatable {\n-    CfgEval {\n-        cfg: &mut StripUnconfigured {\n-            sess: ecx.sess,\n-            features: ecx.ecfg.features,\n-            config_tokens: true,\n-        },\n-    }\n-    .configure_annotatable(annotatable)\n-    // Since the item itself has already been configured by the `InvocationCollector`,\n-    // we know that fold result vector will contain exactly one element.\n-    .unwrap()\n+crate fn cfg_eval(\n+    sess: &Session,\n+    features: Option<&Features>,\n+    annotatable: Annotatable,\n+) -> Annotatable {\n+    CfgEval { cfg: &mut StripUnconfigured { sess, features, config_tokens: true } }\n+        .configure_annotatable(annotatable)\n+        // Since the item itself has already been configured by the `InvocationCollector`,\n+        // we know that fold result vector will contain exactly one element.\n+        .unwrap()\n }\n \n struct CfgEval<'a, 'b> {"}, {"sha": "241c90c157125e5c90daae48737a863c763dead1", "filename": "compiler/rustc_builtin_macros/src/derive.rs", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/60fe8b3a65be709fe2163b8ab438ef14209055cc/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60fe8b3a65be709fe2163b8ab438ef14209055cc/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs?ref=60fe8b3a65be709fe2163b8ab438ef14209055cc", "patch": "@@ -1,12 +1,13 @@\n use crate::cfg_eval::cfg_eval;\n \n-use rustc_ast::{self as ast, attr, token, ItemKind, MetaItemKind, NestedMetaItem, StmtKind};\n+use rustc_ast as ast;\n+use rustc_ast::{attr, token, GenericParamKind, ItemKind, MetaItemKind, NestedMetaItem, StmtKind};\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_expand::base::{Annotatable, ExpandResult, ExtCtxt, Indeterminate, MultiItemModifier};\n use rustc_feature::AttributeTemplate;\n use rustc_parse::validate_attr;\n use rustc_session::Session;\n-use rustc_span::symbol::sym;\n+use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n \n crate struct Expander;\n@@ -26,8 +27,7 @@ impl MultiItemModifier for Expander {\n             return ExpandResult::Ready(vec![item]);\n         }\n \n-        let item = cfg_eval(ecx, item);\n-\n+        let (sess, features) = (ecx.sess, ecx.ecfg.features);\n         let result =\n             ecx.resolver.resolve_derives(ecx.current_expansion.id, ecx.force_mode, &|| {\n                 let template =\n@@ -40,7 +40,8 @@ impl MultiItemModifier for Expander {\n                     template,\n                 );\n \n-                attr.meta_item_list()\n+                let mut resolutions: Vec<_> = attr\n+                    .meta_item_list()\n                     .unwrap_or_default()\n                     .into_iter()\n                     .filter_map(|nested_meta| match nested_meta {\n@@ -56,8 +57,21 @@ impl MultiItemModifier for Expander {\n                         report_path_args(sess, &meta);\n                         meta.path\n                     })\n-                    .map(|path| (path, item.clone(), None))\n-                    .collect()\n+                    .map(|path| (path, dummy_annotatable(), None))\n+                    .collect();\n+\n+                // Do not configure or clone items unless necessary.\n+                match &mut resolutions[..] {\n+                    [] => {}\n+                    [(_, first_item, _), others @ ..] => {\n+                        *first_item = cfg_eval(sess, features, item.clone());\n+                        for (_, item, _) in others {\n+                            *item = first_item.clone();\n+                        }\n+                    }\n+                }\n+\n+                resolutions\n             });\n \n         match result {\n@@ -67,6 +81,18 @@ impl MultiItemModifier for Expander {\n     }\n }\n \n+// The cheapest `Annotatable` to construct.\n+fn dummy_annotatable() -> Annotatable {\n+    Annotatable::GenericParam(ast::GenericParam {\n+        id: ast::DUMMY_NODE_ID,\n+        ident: Ident::invalid(),\n+        attrs: Default::default(),\n+        bounds: Default::default(),\n+        is_placeholder: false,\n+        kind: GenericParamKind::Lifetime,\n+    })\n+}\n+\n fn report_bad_target(sess: &Session, item: &Annotatable, span: Span) -> bool {\n     let item_kind = match item {\n         Annotatable::Item(item) => Some(&item.kind),"}, {"sha": "69e0e3a0136677b59de5970e43d7849cca86d8cd", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60fe8b3a65be709fe2163b8ab438ef14209055cc/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60fe8b3a65be709fe2163b8ab438ef14209055cc/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=60fe8b3a65be709fe2163b8ab438ef14209055cc", "patch": "@@ -295,6 +295,8 @@ declare_features! (\n     (accepted, const_fn_union, \"1.56.0\", Some(51909), None),\n     /// Allows explicit discriminants on non-unit enum variants.\n     (accepted, arbitrary_enum_discriminant, \"1.56.0\", Some(60553), None),\n+    /// Allows macro attributes to observe output of `#[derive]`.\n+    (accepted, macro_attributes_in_derive_output, \"1.57.0\", Some(81119), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "f8b865e615c2ede9512c906de92add62df4dde73", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/60fe8b3a65be709fe2163b8ab438ef14209055cc/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60fe8b3a65be709fe2163b8ab438ef14209055cc/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=60fe8b3a65be709fe2163b8ab438ef14209055cc", "patch": "@@ -592,9 +592,6 @@ declare_features! (\n     /// Lessens the requirements for structs to implement `Unsize`.\n     (active, relaxed_struct_unsize, \"1.51.0\", Some(81793), None),\n \n-    /// Allows macro attributes to observe output of `#[derive]`.\n-    (active, macro_attributes_in_derive_output, \"1.51.0\", Some(81119), None),\n-\n     /// Allows associated types in inherent impls.\n     (incomplete, inherent_associated_types, \"1.52.0\", Some(8995), None),\n "}, {"sha": "f15cf4bbc3a57cb138a2f4d7ceee244270cf4bf3", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/60fe8b3a65be709fe2163b8ab438ef14209055cc/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60fe8b3a65be709fe2163b8ab438ef14209055cc/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=60fe8b3a65be709fe2163b8ab438ef14209055cc", "patch": "@@ -311,38 +311,6 @@ impl<'a> ResolverExpand for Resolver<'a> {\n             self.create_stable_hashing_context(),\n         );\n \n-        if let Res::Def(_, _) = res {\n-            // Gate macro attributes in `#[derive]` output.\n-            if !self.session.features_untracked().macro_attributes_in_derive_output\n-                && kind == MacroKind::Attr\n-                && ext.builtin_name != Some(sym::derive)\n-            {\n-                let mut expn_id = parent_scope.expansion;\n-                loop {\n-                    // Helper attr table is a quick way to determine whether the attr is `derive`.\n-                    if self.helper_attrs.contains_key(&expn_id) {\n-                        feature_err(\n-                            &self.session.parse_sess,\n-                            sym::macro_attributes_in_derive_output,\n-                            path.span,\n-                            \"macro attributes in `#[derive]` output are unstable\",\n-                        )\n-                        .emit();\n-                        break;\n-                    } else {\n-                        let expn_data = expn_id.expn_data();\n-                        match expn_data.kind {\n-                            ExpnKind::Root\n-                            | ExpnKind::Macro(MacroKind::Bang | MacroKind::Derive, _) => {\n-                                break;\n-                            }\n-                            _ => expn_id = expn_data.parent.expect_local(),\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-\n         Ok(ext)\n     }\n "}, {"sha": "f0fec6782423ef73901040aaef98f12622e3b4d2", "filename": "src/test/ui/proc-macro/attribute-after-derive-feature-gate.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-after-derive-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-after-derive-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-after-derive-feature-gate.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -1,37 +0,0 @@\n-// gate-test-macro_attributes_in_derive_output\n-// aux-build: test-macros.rs\n-\n-#![feature(proc_macro_hygiene)]\n-#![feature(stmt_expr_attributes)]\n-\n-#[macro_use]\n-extern crate test_macros;\n-\n-#[derive(Empty)]\n-#[empty_attr] //~ ERROR macro attributes in `#[derive]` output are unstable\n-struct S1 {\n-    field: [u8; 10],\n-}\n-\n-#[derive(Empty)]\n-#[empty_helper]\n-#[empty_attr] //~ ERROR macro attributes in `#[derive]` output are unstable\n-struct S2 {\n-    field: [u8; 10],\n-}\n-\n-#[derive(Empty)]\n-struct S3 {\n-    field: [u8; #[identity_attr] 10], //~ ERROR macro attributes in `#[derive]` output are unstable\n-}\n-\n-#[derive(Empty)]\n-struct S4 {\n-    field: [u8; {\n-        #[derive(Empty)] // OK, not gated\n-        struct Inner;\n-        10\n-    }]\n-}\n-\n-fn main() {}"}, {"sha": "74cace628b94c94bfd76b84a6003bdbdab72d423", "filename": "src/test/ui/proc-macro/attribute-after-derive-feature-gate.stderr", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-after-derive-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-after-derive-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-after-derive-feature-gate.stderr?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -1,30 +0,0 @@\n-error[E0658]: macro attributes in `#[derive]` output are unstable\n-  --> $DIR/attribute-after-derive-feature-gate.rs:11:3\n-   |\n-LL | #[empty_attr]\n-   |   ^^^^^^^^^^\n-   |\n-   = note: see issue #81119 <https://github.com/rust-lang/rust/issues/81119> for more information\n-   = help: add `#![feature(macro_attributes_in_derive_output)]` to the crate attributes to enable\n-\n-error[E0658]: macro attributes in `#[derive]` output are unstable\n-  --> $DIR/attribute-after-derive-feature-gate.rs:18:3\n-   |\n-LL | #[empty_attr]\n-   |   ^^^^^^^^^^\n-   |\n-   = note: see issue #81119 <https://github.com/rust-lang/rust/issues/81119> for more information\n-   = help: add `#![feature(macro_attributes_in_derive_output)]` to the crate attributes to enable\n-\n-error[E0658]: macro attributes in `#[derive]` output are unstable\n-  --> $DIR/attribute-after-derive-feature-gate.rs:25:19\n-   |\n-LL |     field: [u8; #[identity_attr] 10],\n-   |                   ^^^^^^^^^^^^^\n-   |\n-   = note: see issue #81119 <https://github.com/rust-lang/rust/issues/81119> for more information\n-   = help: add `#![feature(macro_attributes_in_derive_output)]` to the crate attributes to enable\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "0f0f27bff97be8b89ac4e7841950a6837c709e75", "filename": "src/test/ui/proc-macro/attribute-after-derive.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60fe8b3a65be709fe2163b8ab438ef14209055cc/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-after-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60fe8b3a65be709fe2163b8ab438ef14209055cc/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-after-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-after-derive.rs?ref=60fe8b3a65be709fe2163b8ab438ef14209055cc", "patch": "@@ -5,8 +5,6 @@\n // compile-flags: -Z span-debug\n // aux-build: test-macros.rs\n \n-#![feature(macro_attributes_in_derive_output)]\n-\n #![no_std] // Don't load unnecessary hygiene information from std\n extern crate std;\n "}, {"sha": "c5b84b0367c8fbdf1c5c501a2811a574e1a54988", "filename": "src/test/ui/proc-macro/attribute-after-derive.stdout", "status": "modified", "additions": 75, "deletions": 31, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/60fe8b3a65be709fe2163b8ab438ef14209055cc/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-after-derive.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/60fe8b3a65be709fe2163b8ab438ef14209055cc/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-after-derive.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-after-derive.stdout?ref=60fe8b3a65be709fe2163b8ab438ef14209055cc", "patch": "@@ -3,146 +3,190 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',\n         spacing: Alone,\n-        span: $DIR/attribute-after-derive.rs:17:1: 17:2 (#0),\n+        span: $DIR/attribute-after-derive.rs:15:1: 15:2 (#0),\n     },\n     Group {\n         delimiter: Bracket,\n         stream: TokenStream [\n             Ident {\n                 ident: \"derive\",\n-                span: $DIR/attribute-after-derive.rs:17:3: 17:9 (#0),\n+                span: $DIR/attribute-after-derive.rs:15:3: 15:9 (#0),\n             },\n             Group {\n                 delimiter: Parenthesis,\n                 stream: TokenStream [\n                     Ident {\n                         ident: \"Print\",\n-                        span: $DIR/attribute-after-derive.rs:17:10: 17:15 (#0),\n+                        span: $DIR/attribute-after-derive.rs:15:10: 15:15 (#0),\n                     },\n                 ],\n-                span: $DIR/attribute-after-derive.rs:17:9: 17:16 (#0),\n+                span: $DIR/attribute-after-derive.rs:15:9: 15:16 (#0),\n             },\n         ],\n-        span: $DIR/attribute-after-derive.rs:17:2: 17:17 (#0),\n+        span: $DIR/attribute-after-derive.rs:15:2: 15:17 (#0),\n     },\n     Ident {\n         ident: \"struct\",\n-        span: $DIR/attribute-after-derive.rs:18:1: 18:7 (#0),\n+        span: $DIR/attribute-after-derive.rs:16:1: 16:7 (#0),\n     },\n     Ident {\n         ident: \"AttributeDerive\",\n-        span: $DIR/attribute-after-derive.rs:18:8: 18:23 (#0),\n+        span: $DIR/attribute-after-derive.rs:16:8: 16:23 (#0),\n     },\n     Group {\n         delimiter: Brace,\n         stream: TokenStream [\n             Punct {\n                 ch: '#',\n                 spacing: Alone,\n-                span: $DIR/attribute-after-derive.rs:19:5: 19:6 (#0),\n+                span: $DIR/attribute-after-derive.rs:17:5: 17:6 (#0),\n             },\n             Group {\n                 delimiter: Bracket,\n                 stream: TokenStream [\n                     Ident {\n                         ident: \"cfg\",\n-                        span: $DIR/attribute-after-derive.rs:19:7: 19:10 (#0),\n+                        span: $DIR/attribute-after-derive.rs:17:7: 17:10 (#0),\n                     },\n                     Group {\n                         delimiter: Parenthesis,\n                         stream: TokenStream [\n                             Ident {\n                                 ident: \"FALSE\",\n-                                span: $DIR/attribute-after-derive.rs:19:11: 19:16 (#0),\n+                                span: $DIR/attribute-after-derive.rs:17:11: 17:16 (#0),\n                             },\n                         ],\n-                        span: $DIR/attribute-after-derive.rs:19:10: 19:17 (#0),\n+                        span: $DIR/attribute-after-derive.rs:17:10: 17:17 (#0),\n                     },\n                 ],\n-                span: $DIR/attribute-after-derive.rs:19:6: 19:18 (#0),\n+                span: $DIR/attribute-after-derive.rs:17:6: 17:18 (#0),\n             },\n             Ident {\n                 ident: \"field\",\n-                span: $DIR/attribute-after-derive.rs:20:5: 20:10 (#0),\n+                span: $DIR/attribute-after-derive.rs:18:5: 18:10 (#0),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: $DIR/attribute-after-derive.rs:20:10: 20:11 (#0),\n+                span: $DIR/attribute-after-derive.rs:18:10: 18:11 (#0),\n             },\n             Ident {\n                 ident: \"u8\",\n-                span: $DIR/attribute-after-derive.rs:20:12: 20:14 (#0),\n+                span: $DIR/attribute-after-derive.rs:18:12: 18:14 (#0),\n             },\n             Punct {\n                 ch: ',',\n                 spacing: Alone,\n-                span: $DIR/attribute-after-derive.rs:20:14: 20:15 (#0),\n+                span: $DIR/attribute-after-derive.rs:18:14: 18:15 (#0),\n             },\n         ],\n-        span: $DIR/attribute-after-derive.rs:18:24: 21:2 (#0),\n+        span: $DIR/attribute-after-derive.rs:16:24: 19:2 (#0),\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): struct AttributeDerive { }\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: $DIR/attribute-after-derive.rs:18:1: 18:7 (#0),\n+        span: $DIR/attribute-after-derive.rs:16:1: 16:7 (#0),\n     },\n     Ident {\n         ident: \"AttributeDerive\",\n-        span: $DIR/attribute-after-derive.rs:18:8: 18:23 (#0),\n+        span: $DIR/attribute-after-derive.rs:16:8: 16:23 (#0),\n     },\n     Group {\n         delimiter: Brace,\n         stream: TokenStream [],\n-        span: $DIR/attribute-after-derive.rs:18:24: 21:2 (#0),\n+        span: $DIR/attribute-after-derive.rs:16:24: 19:2 (#0),\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): #[print_attr] struct DeriveAttribute { }\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',\n         spacing: Alone,\n-        span: $DIR/attribute-after-derive.rs:24:1: 24:2 (#0),\n+        span: $DIR/attribute-after-derive.rs:22:1: 22:2 (#0),\n     },\n     Group {\n         delimiter: Bracket,\n         stream: TokenStream [\n             Ident {\n                 ident: \"print_attr\",\n-                span: $DIR/attribute-after-derive.rs:24:3: 24:13 (#0),\n+                span: $DIR/attribute-after-derive.rs:22:3: 22:13 (#0),\n             },\n         ],\n-        span: $DIR/attribute-after-derive.rs:24:2: 24:14 (#0),\n+        span: $DIR/attribute-after-derive.rs:22:2: 22:14 (#0),\n     },\n     Ident {\n         ident: \"struct\",\n-        span: $DIR/attribute-after-derive.rs:25:1: 25:7 (#0),\n+        span: $DIR/attribute-after-derive.rs:23:1: 23:7 (#0),\n     },\n     Ident {\n         ident: \"DeriveAttribute\",\n-        span: $DIR/attribute-after-derive.rs:25:8: 25:23 (#0),\n+        span: $DIR/attribute-after-derive.rs:23:8: 23:23 (#0),\n     },\n     Group {\n         delimiter: Brace,\n         stream: TokenStream [],\n-        span: $DIR/attribute-after-derive.rs:25:24: 28:2 (#0),\n+        span: $DIR/attribute-after-derive.rs:23:24: 26:2 (#0),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): struct DeriveAttribute { }\n+PRINT-ATTR INPUT (DISPLAY): struct DeriveAttribute { #[cfg(FALSE)] field : u8, }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: $DIR/attribute-after-derive.rs:25:1: 25:7 (#0),\n+        span: $DIR/attribute-after-derive.rs:23:1: 23:7 (#0),\n     },\n     Ident {\n         ident: \"DeriveAttribute\",\n-        span: $DIR/attribute-after-derive.rs:25:8: 25:23 (#0),\n+        span: $DIR/attribute-after-derive.rs:23:8: 23:23 (#0),\n     },\n     Group {\n         delimiter: Brace,\n-        stream: TokenStream [],\n-        span: $DIR/attribute-after-derive.rs:25:24: 28:2 (#0),\n+        stream: TokenStream [\n+            Punct {\n+                ch: '#',\n+                spacing: Alone,\n+                span: $DIR/attribute-after-derive.rs:24:5: 24:6 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"cfg\",\n+                        span: $DIR/attribute-after-derive.rs:24:7: 24:10 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"FALSE\",\n+                                span: $DIR/attribute-after-derive.rs:24:11: 24:16 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/attribute-after-derive.rs:24:10: 24:17 (#0),\n+                    },\n+                ],\n+                span: $DIR/attribute-after-derive.rs:24:6: 24:18 (#0),\n+            },\n+            Ident {\n+                ident: \"field\",\n+                span: $DIR/attribute-after-derive.rs:25:5: 25:10 (#0),\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Alone,\n+                span: $DIR/attribute-after-derive.rs:25:10: 25:11 (#0),\n+            },\n+            Ident {\n+                ident: \"u8\",\n+                span: $DIR/attribute-after-derive.rs:25:12: 25:14 (#0),\n+            },\n+            Punct {\n+                ch: ',',\n+                spacing: Alone,\n+                span: $DIR/attribute-after-derive.rs:25:14: 25:15 (#0),\n+            },\n+        ],\n+        span: $DIR/attribute-after-derive.rs:23:24: 26:2 (#0),\n     },\n ]"}]}