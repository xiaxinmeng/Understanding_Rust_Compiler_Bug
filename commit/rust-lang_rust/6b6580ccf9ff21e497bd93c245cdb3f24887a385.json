{"sha": "6b6580ccf9ff21e497bd93c245cdb3f24887a385", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNjU4MGNjZjlmZjIxZTQ5N2JkOTNjMjQ1Y2RiM2YyNDg4N2EzODU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-14T06:12:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-14T06:12:52Z"}, "message": "Auto merge of #4540 - jolson88:fix-place-projection, r=phansch\n\nFix rustc breaking change: convert to Place's new boxed slice projection\n\nAddressed breaking changes from rust-lang PR https://github.com/rust-lang/rust/pull/63420/\n\nI'm not entirely sure the semantics are preserved as I don't have much knowledge about MIR yet. So this code was largely reverse-engineered from the PR above. I wouldn't be surprised if I did something wrong :).\n\nI followed the instructions to pull latest rustc from master and verified the build break I was seeing in my PR for cast-lossless in Travis CI. With these changes, it compiles again and all tests pass.\n\nFixes https://github.com/rust-lang/rust/issues/64440\n\nchangelog: none", "tree": {"sha": "30ae5c3bb06e4babaf0be68b1a706a7a6101453e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30ae5c3bb06e4babaf0be68b1a706a7a6101453e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b6580ccf9ff21e497bd93c245cdb3f24887a385", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b6580ccf9ff21e497bd93c245cdb3f24887a385", "html_url": "https://github.com/rust-lang/rust/commit/6b6580ccf9ff21e497bd93c245cdb3f24887a385", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b6580ccf9ff21e497bd93c245cdb3f24887a385/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff4a3fb52fba52cc07c72840fadb7bfda650e165", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff4a3fb52fba52cc07c72840fadb7bfda650e165", "html_url": "https://github.com/rust-lang/rust/commit/ff4a3fb52fba52cc07c72840fadb7bfda650e165"}, {"sha": "80822b430dcba0ff1fbb02c16f20c2abcd67802e", "url": "https://api.github.com/repos/rust-lang/rust/commits/80822b430dcba0ff1fbb02c16f20c2abcd67802e", "html_url": "https://github.com/rust-lang/rust/commit/80822b430dcba0ff1fbb02c16f20c2abcd67802e"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "d029267e034dc7de4339d45bd4304cdad1d56def", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6b6580ccf9ff21e497bd93c245cdb3f24887a385/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b6580ccf9ff21e497bd93c245cdb3f24887a385/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=6b6580ccf9ff21e497bd93c245cdb3f24887a385", "patch": "@@ -252,13 +252,13 @@ fn find_stmt_assigns_to<'a, 'tcx: 'a>(\n     stmts\n         .rev()\n         .find_map(|stmt| {\n-            if let mir::StatementKind::Assign(\n+            if let mir::StatementKind::Assign(box (\n                 mir::Place {\n                     base: mir::PlaceBase::Local(local),\n                     ..\n                 },\n                 v,\n-            ) = &stmt.kind\n+            )) = &stmt.kind\n             {\n                 if *local == to {\n                     return Some(v);\n@@ -269,10 +269,10 @@ fn find_stmt_assigns_to<'a, 'tcx: 'a>(\n         })\n         .and_then(|v| {\n             if by_ref {\n-                if let mir::Rvalue::Ref(_, _, ref place) = **v {\n+                if let mir::Rvalue::Ref(_, _, ref place) = v {\n                     return base_local_and_movability(cx, mir, place);\n                 }\n-            } else if let mir::Rvalue::Use(mir::Operand::Copy(ref place)) = **v {\n+            } else if let mir::Rvalue::Use(mir::Operand::Copy(ref place)) = v {\n                 return base_local_and_movability(cx, mir, place);\n             }\n             None\n@@ -291,7 +291,6 @@ fn base_local_and_movability<'tcx>(\n     use rustc::mir::Place;\n     use rustc::mir::PlaceBase;\n     use rustc::mir::PlaceRef;\n-    use rustc::mir::Projection;\n \n     // Dereference. You cannot move things out from a borrowed value.\n     let mut deref = false;\n@@ -303,7 +302,7 @@ fn base_local_and_movability<'tcx>(\n         mut projection,\n     } = place.as_ref();\n     if let PlaceBase::Local(local) = place_base {\n-        while let Some(box Projection { base, elem }) = projection {\n+        while let [base @ .., elem] = projection {\n             projection = base;\n             deref = matches!(elem, mir::ProjectionElem::Deref);\n             field = !field"}]}