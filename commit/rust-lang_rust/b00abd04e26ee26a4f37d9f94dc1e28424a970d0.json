{"sha": "b00abd04e26ee26a4f37d9f94dc1e28424a970d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMGFiZDA0ZTI2ZWUyNmE0ZjM3ZDlmOTRkYzFlMjg0MjRhOTcwZDA=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-18T01:52:18Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-18T01:52:25Z"}, "message": "Record type annotations for methods.", "tree": {"sha": "a9eb6ccafe3235b8c65b4e08a4983c925d5a5624", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9eb6ccafe3235b8c65b4e08a4983c925d5a5624"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b00abd04e26ee26a4f37d9f94dc1e28424a970d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b00abd04e26ee26a4f37d9f94dc1e28424a970d0", "html_url": "https://github.com/rust-lang/rust/commit/b00abd04e26ee26a4f37d9f94dc1e28424a970d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b00abd04e26ee26a4f37d9f94dc1e28424a970d0/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c44c7c5ab3fdd4e48fbb8f9a5e80d70a33a98f03", "url": "https://api.github.com/repos/rust-lang/rust/commits/c44c7c5ab3fdd4e48fbb8f9a5e80d70a33a98f03", "html_url": "https://github.com/rust-lang/rust/commit/c44c7c5ab3fdd4e48fbb8f9a5e80d70a33a98f03"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "1ce7862c78e21c0222c313d74aee32d34a217b83", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b00abd04e26ee26a4f37d9f94dc1e28424a970d0/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b00abd04e26ee26a4f37d9f94dc1e28424a970d0/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=b00abd04e26ee26a4f37d9f94dc1e28424a970d0", "patch": "@@ -621,13 +621,51 @@ fn collect_item_types(@ast.crate crate) -> tup(@ast.crate, @ty_table) {\n         ret @fold.respan[ast.item_](sp, item);\n     }\n \n+    fn get_ctor_obj_methods(@ty t) -> vec[method] {\n+        alt (t.struct) {\n+            case (ty_fn(_,?tobj)) {\n+                alt (tobj.struct) {\n+                    case (ty_obj(?tm)) {\n+                        ret tm;\n+                    }\n+                    case (_) {\n+                        let vec[method] tm = vec();\n+                        ret tm;\n+                    }\n+                }\n+            }\n+            case (_) {\n+                let vec[method] tm = vec();\n+                ret tm;\n+            }\n+        }\n+    }\n+\n+\n     fn fold_item_obj(&@env e, &span sp, ast.ident i,\n                     &ast._obj ob, vec[ast.ty_param] ty_params,\n                     ast.def_id id, ast.ann a) -> @ast.item {\n         check (e.item_to_ty.contains_key(id));\n         auto ty = e.item_to_ty.get(id);\n-        auto item = ast.item_obj(i, ob, ty_params, id,\n-                                ast.ann_type(ty));\n+        let vec[method] meth_tys = get_ctor_obj_methods(ty);\n+        let vec[@ast.method] methods = vec();\n+\n+        let uint n = 0u;\n+        for (method meth_ty in meth_tys) {\n+            let @ast.method meth = ob.methods.(n);\n+            let ast.method_ m_;\n+            let @ast.method m;\n+            auto meth_tfn = plain_ty(ty_fn(meth_ty.inputs,\n+                                           meth_ty.output));\n+            m_ = rec(ann=ast.ann_type(meth_tfn) with meth.node);\n+            m = @rec(node=m_ with *meth);\n+            append[@ast.method](methods, m);\n+            n += 1u;\n+        }\n+\n+        auto ob_ = rec(methods = methods with ob);\n+        auto item = ast.item_obj(i, ob_, ty_params, id,\n+                                 ast.ann_type(ty));\n         ret @fold.respan[ast.item_](sp, item);\n     }\n "}]}