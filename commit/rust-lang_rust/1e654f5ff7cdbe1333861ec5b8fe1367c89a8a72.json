{"sha": "1e654f5ff7cdbe1333861ec5b8fe1367c89a8a72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNjU0ZjVmZjdjZGJlMTMzMzg2MWVjNWI4ZmUxMzY3Yzg5YThhNzI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-19T02:24:34Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:25Z"}, "message": "librustc: De-`@mut` `CrateContext::externs`", "tree": {"sha": "6339189976e569738406a59b8ce203d0d6234e73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6339189976e569738406a59b8ce203d0d6234e73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e654f5ff7cdbe1333861ec5b8fe1367c89a8a72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e654f5ff7cdbe1333861ec5b8fe1367c89a8a72", "html_url": "https://github.com/rust-lang/rust/commit/1e654f5ff7cdbe1333861ec5b8fe1367c89a8a72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e654f5ff7cdbe1333861ec5b8fe1367c89a8a72/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "519db347229376dd4f7e08df38dd85ae3a43c9ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/519db347229376dd4f7e08df38dd85ae3a43c9ed", "html_url": "https://github.com/rust-lang/rust/commit/519db347229376dd4f7e08df38dd85ae3a43c9ed"}], "stats": {"total": 50, "additions": 35, "deletions": 15}, "files": [{"sha": "afb0ded3c4b4d62a38de897f50b0c20ab4f18b77", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1e654f5ff7cdbe1333861ec5b8fe1367c89a8a72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e654f5ff7cdbe1333861ec5b8fe1367c89a8a72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=1e654f5ff7cdbe1333861ec5b8fe1367c89a8a72", "patch": "@@ -205,15 +205,21 @@ pub fn get_extern_fn(externs: &mut ExternMap, llmod: ModuleRef, name: &str,\n \n fn get_extern_rust_fn(ccx: &mut CrateContext, inputs: &[ty::t], output: ty::t,\n                       name: &str, did: ast::DefId) -> ValueRef {\n-    match ccx.externs.find_equiv(&name) {\n-        Some(n) => return *n,\n-        None => ()\n+    {\n+        let externs = ccx.externs.borrow();\n+        match externs.get().find_equiv(&name) {\n+            Some(n) => return *n,\n+            None => ()\n+        }\n     }\n+\n     let f = decl_rust_fn(ccx, inputs, output, name);\n     csearch::get_item_attrs(ccx.tcx.cstore, did, |meta_items| {\n         set_llvm_fn_attrs(meta_items.iter().map(|&x| attr::mk_attr(x)).to_owned_vec(), f)\n     });\n-    ccx.externs.insert(name.to_owned(), f);\n+\n+    let mut externs = ccx.externs.borrow_mut();\n+    externs.get().insert(name.to_owned(), f);\n     f\n }\n \n@@ -559,11 +565,15 @@ pub fn get_res_dtor(ccx: @mut CrateContext,\n                                      None,\n                                      ty::lookup_item_type(tcx, parent_id).ty);\n         let llty = type_of_dtor(ccx, class_ty);\n-        get_extern_fn(&mut ccx.externs,\n-                      ccx.llmod,\n-                      name,\n-                      lib::llvm::CCallConv,\n-                      llty)\n+\n+        {\n+            let mut externs = ccx.externs.borrow_mut();\n+            get_extern_fn(externs.get(),\n+                          ccx.llmod,\n+                          name,\n+                          lib::llvm::CCallConv,\n+                          llty)\n+        }\n     }\n }\n \n@@ -865,7 +875,8 @@ pub fn trans_external_path(ccx: &mut CrateContext, did: ast::DefId, t: ty::t) ->\n                     let c = foreign::llvm_calling_convention(ccx, fn_ty.abis);\n                     let cconv = c.unwrap_or(lib::llvm::CCallConv);\n                     let llty = type_of_fn_from_ty(ccx, t);\n-                    get_extern_fn(&mut ccx.externs, ccx.llmod, name, cconv, llty)\n+                    let mut externs = ccx.externs.borrow_mut();\n+                    get_extern_fn(externs.get(), ccx.llmod, name, cconv, llty)\n                 }\n             }\n         }\n@@ -874,7 +885,8 @@ pub fn trans_external_path(ccx: &mut CrateContext, did: ast::DefId, t: ty::t) ->\n         }\n         _ => {\n             let llty = type_of(ccx, t);\n-            get_extern_const(&mut ccx.externs, ccx.llmod, name, llty)\n+            let mut externs = ccx.externs.borrow_mut();\n+            get_extern_const(externs.get(), ccx.llmod, name, llty)\n         }\n     }\n }"}, {"sha": "e4accddfbd035b35714c6790344e01292b061bd7", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e654f5ff7cdbe1333861ec5b8fe1367c89a8a72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e654f5ff7cdbe1333861ec5b8fe1367c89a8a72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=1e654f5ff7cdbe1333861ec5b8fe1367c89a8a72", "patch": "@@ -45,7 +45,7 @@ pub struct CrateContext {\n      metadata_llmod: ModuleRef,\n      td: TargetData,\n      tn: TypeNames,\n-     externs: ExternMap,\n+     externs: RefCell<ExternMap>,\n      intrinsics: HashMap<&'static str, ValueRef>,\n      item_vals: RefCell<HashMap<ast::NodeId, ValueRef>>,\n      exp_map2: resolve::ExportMap2,\n@@ -181,7 +181,7 @@ impl CrateContext {\n                   metadata_llmod: metadata_llmod,\n                   td: td,\n                   tn: tn,\n-                  externs: HashMap::new(),\n+                  externs: RefCell::new(HashMap::new()),\n                   intrinsics: intrinsics,\n                   item_vals: RefCell::new(HashMap::new()),\n                   exp_map2: emap2,"}, {"sha": "f8d3180841b65fda27ffc7c30311ed7c583f501f", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1e654f5ff7cdbe1333861ec5b8fe1367c89a8a72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e654f5ff7cdbe1333861ec5b8fe1367c89a8a72/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=1e654f5ff7cdbe1333861ec5b8fe1367c89a8a72", "patch": "@@ -146,8 +146,16 @@ pub fn register_foreign_item_fn(ccx: @mut CrateContext,\n \n     // Create the LLVM value for the C extern fn\n     let llfn_ty = lltype_for_fn_from_foreign_types(&tys);\n-    let llfn = base::get_extern_fn(&mut ccx.externs, ccx.llmod,\n-                                   lname, cc, llfn_ty);\n+\n+    let llfn;\n+    {\n+        let mut externs = ccx.externs.borrow_mut();\n+        llfn = base::get_extern_fn(externs.get(),\n+                                   ccx.llmod,\n+                                   lname,\n+                                   cc,\n+                                   llfn_ty);\n+    };\n     add_argument_attributes(&tys, llfn);\n \n     return llfn;"}]}