{"sha": "658c27b011b88dff18fd0137559123991a05f380", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1OGMyN2IwMTFiODhkZmYxOGZkMDEzNzU1OTEyMzk5MWEwNWYzODA=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-25T23:30:02Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-01-15T09:48:22Z"}, "message": "Elaborate on comments", "tree": {"sha": "af48a68b51274d8f44eeed14c34ac70efb3f3794", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af48a68b51274d8f44eeed14c34ac70efb3f3794"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/658c27b011b88dff18fd0137559123991a05f380", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/658c27b011b88dff18fd0137559123991a05f380", "html_url": "https://github.com/rust-lang/rust/commit/658c27b011b88dff18fd0137559123991a05f380", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/658c27b011b88dff18fd0137559123991a05f380/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10f439a0116df86f737d83cc620289b14c88660f", "url": "https://api.github.com/repos/rust-lang/rust/commits/10f439a0116df86f737d83cc620289b14c88660f", "html_url": "https://github.com/rust-lang/rust/commit/10f439a0116df86f737d83cc620289b14c88660f"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "4c7dab338ab25391e9a03a11866620841df2fcd6", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/658c27b011b88dff18fd0137559123991a05f380/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/658c27b011b88dff18fd0137559123991a05f380/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=658c27b011b88dff18fd0137559123991a05f380", "patch": "@@ -351,6 +351,9 @@ pub fn intern_const_alloc_recursive<M: CompileTimeMachine<'mir, 'tcx>>(\n                 InternKind::Static(hir::Mutability::Mut) => {}\n                 // Once we get heap allocations we need to revisit whether immutable statics can\n                 // refer to mutable (e.g. via interior mutability) allocations.\n+                // Note: this is never the base value of the static, we can only get here for\n+                // pointers encountered inside the base allocation, and then only for ones not at\n+                // reference type, as that is checked by the type based main interner.\n                 InternKind::Static(hir::Mutability::Not) => {\n                     alloc.mutability = Mutability::Not;\n                 }\n@@ -385,6 +388,17 @@ pub fn intern_const_alloc_recursive<M: CompileTimeMachine<'mir, 'tcx>>(\n             // dangling pointer\n             throw_unsup!(ValidationFailure(\"encountered dangling pointer in final constant\".into()))\n         } else if let Some(_) = ecx.tcx.alloc_map.lock().get(alloc_id) {\n+            // If we encounter an `AllocId` that points to a mutable `Allocation`,\n+            // (directly or via relocations in its `Allocation`), we should panic,\n+            // the static rules should prevent this.\n+            // We may hit an `AllocId` that belongs to an already interned static,\n+            // and are thus not interning any further.\n+            // But since we are also checking things during interning,\n+            // we should probably continue doing those checks no matter what we encounter.\n+\n+            // E.g. this should be unreachable for `InternKind::Promoted` except for allocations\n+            // created for string and byte string literals.\n+\n             // FIXME: check if the allocation is ok as per the interning rules as if we interned\n             // it right here.\n         } else {"}]}