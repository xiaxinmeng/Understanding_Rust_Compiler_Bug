{"sha": "0d34a8772251b3f9d4dd05c81d9531d455a14fc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMzRhODc3MjI1MWIzZjlkNGRkMDVjODFkOTUzMWQ0NTVhMTRmYzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-03T06:38:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-03T06:38:34Z"}, "message": "Auto merge of #68772 - matthewjasper:relate-opt, r=davidtwco\n\nAvoid exponential behaviour when relating types\n\nWhen equating bound types we check subtyping in both directions. Since closures are invariant in their substs, we end up comparing the two types an exponential number of times. If there are no bound variables this isn't needed.\n\nCloses #68061", "tree": {"sha": "a9ecdc8fb7df5fe588c6c78c2bb62d00d723018d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9ecdc8fb7df5fe588c6c78c2bb62d00d723018d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d34a8772251b3f9d4dd05c81d9531d455a14fc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d34a8772251b3f9d4dd05c81d9531d455a14fc2", "html_url": "https://github.com/rust-lang/rust/commit/0d34a8772251b3f9d4dd05c81d9531d455a14fc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d34a8772251b3f9d4dd05c81d9531d455a14fc2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2e80300cd83849dd4fa17af131e603623631bf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2e80300cd83849dd4fa17af131e603623631bf6", "html_url": "https://github.com/rust-lang/rust/commit/a2e80300cd83849dd4fa17af131e603623631bf6"}, {"sha": "a606ffdb174dd6a7d226d632994e6a885bf8a1ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/a606ffdb174dd6a7d226d632994e6a885bf8a1ac", "html_url": "https://github.com/rust-lang/rust/commit/a606ffdb174dd6a7d226d632994e6a885bf8a1ac"}], "stats": {"total": 44, "additions": 42, "deletions": 2}, "files": [{"sha": "f192295c1aa0705b198456efe0a7f40b06047a50", "filename": "src/librustc/infer/equate.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0d34a8772251b3f9d4dd05c81d9531d455a14fc2/src%2Flibrustc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d34a8772251b3f9d4dd05c81d9531d455a14fc2/src%2Flibrustc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fequate.rs?ref=0d34a8772251b3f9d4dd05c81d9531d455a14fc2", "patch": "@@ -125,7 +125,13 @@ impl TypeRelation<'tcx> for Equate<'combine, 'infcx, 'tcx> {\n     where\n         T: Relate<'tcx>,\n     {\n-        self.fields.higher_ranked_sub(a, b, self.a_is_expected)?;\n-        self.fields.higher_ranked_sub(b, a, self.a_is_expected)\n+        if a.skip_binder().has_escaping_bound_vars() || b.skip_binder().has_escaping_bound_vars() {\n+            self.fields.higher_ranked_sub(a, b, self.a_is_expected)?;\n+            self.fields.higher_ranked_sub(b, a, self.a_is_expected)\n+        } else {\n+            // Fast path for the common case.\n+            self.relate(a.skip_binder(), b.skip_binder())?;\n+            return Ok(a.clone());\n+        }\n     }\n }"}, {"sha": "6af004f7776a16a53953448efc01008767afcd2a", "filename": "src/librustc/infer/nll_relate/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0d34a8772251b3f9d4dd05c81d9531d455a14fc2/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d34a8772251b3f9d4dd05c81d9531d455a14fc2/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs?ref=0d34a8772251b3f9d4dd05c81d9531d455a14fc2", "patch": "@@ -529,6 +529,10 @@ where\n             b = self.infcx.shallow_resolve(b);\n         }\n \n+        if a == b {\n+            return Ok(a);\n+        }\n+\n         match (&a.kind, &b.kind) {\n             (_, &ty::Infer(ty::TyVar(vid))) => {\n                 if D::forbid_inference_vars() {\n@@ -638,6 +642,13 @@ where\n \n         debug!(\"binders({:?}: {:?}, ambient_variance={:?})\", a, b, self.ambient_variance);\n \n+        if !a.skip_binder().has_escaping_bound_vars() && !b.skip_binder().has_escaping_bound_vars()\n+        {\n+            // Fast path for the common case.\n+            self.relate(a.skip_binder(), b.skip_binder())?;\n+            return Ok(a.clone());\n+        }\n+\n         if self.ambient_covariance() {\n             // Covariance, so we want `for<..> A <: for<..> B` --\n             // therefore we compare any instantiation of A (i.e., A"}, {"sha": "a02684ee1de1ee0bb75b121cf2b93567918ab4b2", "filename": "src/test/ui/closures/deeply-nested_closures.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0d34a8772251b3f9d4dd05c81d9531d455a14fc2/src%2Ftest%2Fui%2Fclosures%2Fdeeply-nested_closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d34a8772251b3f9d4dd05c81d9531d455a14fc2/src%2Ftest%2Fui%2Fclosures%2Fdeeply-nested_closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fdeeply-nested_closures.rs?ref=0d34a8772251b3f9d4dd05c81d9531d455a14fc2", "patch": "@@ -0,0 +1,23 @@\n+// Check that this can be compiled in a reasonable time.\n+\n+// build-pass\n+\n+fn main() {\n+    // 96 nested closures\n+    let x = ();\n+    || || || || || || || ||\n+    || || || || || || || ||\n+    || || || || || || || ||\n+    || || || || || || || ||\n+\n+    || || || || || || || ||\n+    || || || || || || || ||\n+    || || || || || || || ||\n+    || || || || || || || ||\n+\n+    || || || || || || || ||\n+    || || || || || || || ||\n+    || || || || || || || ||\n+    || || || || || || || ||\n+    [&(), &x];\n+}"}]}