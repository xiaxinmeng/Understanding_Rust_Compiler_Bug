{"sha": "7ba5fd168a20cbead2afb800e638159e11bb79da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiYTVmZDE2OGEyMGNiZWFkMmFmYjgwMGU2MzgxNTllMTFiYjc5ZGE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-02-24T23:01:39Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-02-26T17:24:42Z"}, "message": "Update UI tests", "tree": {"sha": "285649d5d4c3e8366d319df727c7b858db69db50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/285649d5d4c3e8366d319df727c7b858db69db50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ba5fd168a20cbead2afb800e638159e11bb79da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ba5fd168a20cbead2afb800e638159e11bb79da", "html_url": "https://github.com/rust-lang/rust/commit/7ba5fd168a20cbead2afb800e638159e11bb79da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ba5fd168a20cbead2afb800e638159e11bb79da/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99b1054d9f4442fd5cc535d5ad90f3542791a547", "url": "https://api.github.com/repos/rust-lang/rust/commits/99b1054d9f4442fd5cc535d5ad90f3542791a547", "html_url": "https://github.com/rust-lang/rust/commit/99b1054d9f4442fd5cc535d5ad90f3542791a547"}], "stats": {"total": 730, "additions": 365, "deletions": 365}, "files": [{"sha": "e04dc2f72a3076a4dd9a4ef8e9b15272582ba584", "filename": "src/test/ui/augmented-assignments.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Faugmented-assignments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Faugmented-assignments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faugmented-assignments.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow immutable local variable `y` as mutable\n    |\n LL |     let y = Int(2);\n    |         - consider changing this to `mut y`\n-29 |     //~^ consider changing this to `mut y`\n+LL |     //~^ consider changing this to `mut y`\n LL |     y   //~ error: cannot borrow immutable local variable `y` as mutable\n    |     ^ cannot borrow mutably\n "}, {"sha": "f02dd6b3e98fa481c0a33415fc5fe02824db8113", "filename": "src/test/ui/blind-item-item-shadow.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fblind-item-item-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fblind-item-item-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblind-item-item-shadow.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,14 +3,14 @@ error[E0255]: the name `foo` is defined multiple times\n    |\n LL | mod foo { pub mod foo {  } }\n    | ------- previous definition of the module `foo` here\n-12 | \n+LL | \n LL | use foo::foo;\n    |     ^^^^^^^^ `foo` reimported here\n    |\n    = note: `foo` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-13 | use foo::foo as other_foo;\n+LL | use foo::foo as other_foo;\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "7f39f53d6f9979cf69d8c00d8b77e16562380ea3", "filename": "src/test/ui/block-result/issue-13428.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -6,7 +6,7 @@ LL |   fn foo() -> String {  //~ ERROR mismatched types\n LL | |     format!(\"Hello {}\",\n LL | |             \"world\")\n LL | |     // Put the trailing semicolon on its own line to test that the\n-17 | |     // note message gets the offending semicolon exactly\n+LL | |     // note message gets the offending semicolon exactly\n LL | |     ;\n    | |     - help: consider removing this semicolon\n LL | | }"}, {"sha": "03d9d03371ee876a4289ae66efe9860921b33755", "filename": "src/test/ui/block-result/issue-22645.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n    |\n LL | fn main() {\n    |           - expected `()` because of default return type\n-24 |   let b = Bob + 3.5;\n+LL |   let b = Bob + 3.5;\n LL |   b + 3 //~ ERROR E0277\n    |   ^^^^^ expected (), found struct `Bob`\n    |"}, {"sha": "10a8814a7e54f2cd6226d98e4d7422b26173b52b", "filename": "src/test/ui/block-result/unexpected-return-on-unit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -8,11 +8,11 @@ LL |     foo() //~ ERROR mismatched types\n               found type `usize`\n help: try adding a semicolon\n    |\n-19 |     foo(); //~ ERROR mismatched types\n+LL |     foo(); //~ ERROR mismatched types\n    |          ^\n help: try adding a return type\n    |\n-18 | fn bar() -> usize {\n+LL | fn bar() -> usize {\n    |          ^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "7bea41b2209e49be77449ba727b07cdbd5fc40c2", "filename": "src/test/ui/borrowck/borrowck-box-insensitivity.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0382]: use of moved value: `a`\n    |\n LL |     let _x = a.x;\n    |         -- value moved here\n-36 |     //~^ value moved here\n+LL |     //~^ value moved here\n LL |     let _y = a.y; //~ ERROR use of moved\n    |         ^^ value used here after move\n    |\n@@ -14,7 +14,7 @@ error[E0382]: use of moved value: `a`\n    |\n LL |     let _x = a.x;\n    |         -- value moved here\n-45 |     //~^ value moved here\n+LL |     //~^ value moved here\n LL |     let _y = a.y; //~ ERROR use of moved\n    |         ^^ value used here after move\n    |\n@@ -25,7 +25,7 @@ error[E0382]: use of moved value: `a`\n    |\n LL |     let _x = a.x;\n    |         -- value moved here\n-54 |     //~^ value moved here\n+LL |     //~^ value moved here\n LL |     let _y = &a.y; //~ ERROR use of moved\n    |               ^^^ value used here after move\n    |\n@@ -62,7 +62,7 @@ LL |     let _x = &mut a.x;\n    |                   --- mutable borrow occurs here (via `a.x`)\n LL |     let _y = &a.y; //~ ERROR cannot borrow\n    |               ^^^ immutable borrow occurs here (via `a.y`)\n-86 |     //~^ immutable borrow occurs here (via `a.y`)\n+LL |     //~^ immutable borrow occurs here (via `a.y`)\n LL | }\n    | - mutable borrow ends here\n \n@@ -73,7 +73,7 @@ LL |     let _x = &a.x;\n    |               --- immutable borrow occurs here (via `a.x`)\n LL |     let _y = &mut a.y; //~ ERROR cannot borrow\n    |                   ^^^ mutable borrow occurs here (via `a.y`)\n-93 |     //~^ mutable borrow occurs here (via `a.y`)\n+LL |     //~^ mutable borrow occurs here (via `a.y`)\n LL | }\n    | - immutable borrow ends here\n \n@@ -82,7 +82,7 @@ error[E0382]: use of collaterally moved value: `a.y`\n    |\n LL |     let _x = a.x.x;\n    |         -- value moved here\n-99 |     //~^ value moved here\n+LL |     //~^ value moved here\n LL |     let _y = a.y; //~ ERROR use of collaterally moved\n    |         ^^ value used here after move\n    |\n@@ -93,7 +93,7 @@ error[E0382]: use of collaterally moved value: `a.y`\n    |\n LL |     let _x = a.x.x;\n    |         -- value moved here\n-107|     //~^ value moved here\n+LL |     //~^ value moved here\n LL |     let _y = a.y; //~ ERROR use of collaterally moved\n    |         ^^ value used here after move\n    |\n@@ -104,7 +104,7 @@ error[E0382]: use of collaterally moved value: `a.y`\n    |\n LL |     let _x = a.x.x;\n    |         -- value moved here\n-115|     //~^ value moved here\n+LL |     //~^ value moved here\n LL |     let _y = &a.y; //~ ERROR use of collaterally moved\n    |               ^^^ value used here after move\n    |\n@@ -115,7 +115,7 @@ error[E0505]: cannot move out of `a.y` because it is borrowed\n    |\n LL |     let _x = &a.x.x;\n    |               ----- borrow of `a.x.x` occurs here\n-123|     //~^ borrow of `a.x.x` occurs here\n+LL |     //~^ borrow of `a.x.x` occurs here\n LL |     let _y = a.y;\n    |         ^^ move out of `a.y` occurs here\n \n@@ -140,10 +140,10 @@ error[E0502]: cannot borrow `a.y` as immutable because `a.x.x` is also borrowed\n    |\n LL |     let _x = &mut a.x.x;\n    |                   ----- mutable borrow occurs here\n-146|     //~^ mutable borrow occurs here\n+LL |     //~^ mutable borrow occurs here\n LL |     let _y = &a.y; //~ ERROR cannot borrow\n    |               ^^^ immutable borrow occurs here\n-148|     //~^ immutable borrow occurs here\n+LL |     //~^ immutable borrow occurs here\n LL | }\n    | - mutable borrow ends here\n \n@@ -152,10 +152,10 @@ error[E0502]: cannot borrow `a.y` as mutable because `a.x.x` is also borrowed as\n    |\n LL |     let _x = &a.x.x;\n    |               ----- immutable borrow occurs here\n-154|     //~^ immutable borrow occurs here\n+LL |     //~^ immutable borrow occurs here\n LL |     let _y = &mut a.y; //~ ERROR cannot borrow\n    |                   ^^^ mutable borrow occurs here\n-156|     //~^ mutable borrow occurs here\n+LL |     //~^ mutable borrow occurs here\n LL | }\n    | - immutable borrow ends here\n "}, {"sha": "7205b48399a293dd82d8f317e75eb56ba766ca3a", "filename": "src/test/ui/borrowck/borrowck-closures-two-mut.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -9,7 +9,7 @@ LL |     let c2 = to_fn_mut(|| x = 5); //~ ERROR cannot borrow `x` as mutable mo\n    |                        ^^ - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-25 |     //~| ERROR cannot borrow `x` as mutable more than once\n+LL |     //~| ERROR cannot borrow `x` as mutable more than once\n LL | }\n    | - first borrow ends here\n \n@@ -24,7 +24,7 @@ LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as muta\n    |                        ^^          - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-36 |     //~| ERROR cannot borrow `x` as mutable more than once\n+LL |     //~| ERROR cannot borrow `x` as mutable more than once\n LL | }\n    | - first borrow ends here\n \n@@ -39,7 +39,7 @@ LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as muta\n    |                        ^^          - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-43 |     //~| ERROR cannot borrow `x` as mutable more than once\n+LL |     //~| ERROR cannot borrow `x` as mutable more than once\n LL | }\n    | - first borrow ends here\n \n@@ -84,7 +84,7 @@ LL |     let c2 = to_fn_mut(|| x = 5); //~ ERROR cannot borrow `x` as mutable mo\n    |                        ^^ - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-25 |     //~| ERROR cannot borrow `x` as mutable more than once\n+LL |     //~| ERROR cannot borrow `x` as mutable more than once\n LL | }\n    | - first borrow ends here\n \n@@ -99,7 +99,7 @@ LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as muta\n    |                        ^^          - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-36 |     //~| ERROR cannot borrow `x` as mutable more than once\n+LL |     //~| ERROR cannot borrow `x` as mutable more than once\n LL | }\n    | - first borrow ends here\n \n@@ -114,7 +114,7 @@ LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as muta\n    |                        ^^          - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-43 |     //~| ERROR cannot borrow `x` as mutable more than once\n+LL |     //~| ERROR cannot borrow `x` as mutable more than once\n LL | }\n    | - first borrow ends here\n "}, {"sha": "98176cce508a3d0de06af9cf694353507b531042", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-1.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -7,7 +7,7 @@ LL |     spawn(|| books.push(4));\n    |           may outlive borrowed value `books`\n help: to force the closure to take ownership of `books` (and any other referenced variables), use the `move` keyword\n    |\n-23 |     spawn(move || books.push(4));\n+LL |     spawn(move || books.push(4));\n    |           ^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "5de31c3ac3578596bf74457c10bce5e9392be7bb", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -7,7 +7,7 @@ LL |     Box::new(|| books.push(4))\n    |              may outlive borrowed value `books`\n help: to force the closure to take ownership of `books` (and any other referenced variables), use the `move` keyword\n    |\n-21 |     Box::new(move || books.push(4))\n+LL |     Box::new(move || books.push(4))\n    |              ^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "acc78f4ab32953e5e25440b848abc884186bc5e2", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0507]: cannot move out of borrowed content\n    |\n LL |     match *f {             //~ ERROR cannot move out of\n    |           ^^ cannot move out of borrowed content\n-22 |                            //~| cannot move out\n+LL |                            //~| cannot move out\n LL |         Foo::Foo1(num1,\n    |                   ---- hint: to prevent move, use `ref num1` or `ref mut num1`\n LL |                   num2) => (),\n@@ -28,7 +28,7 @@ error[E0507]: cannot move out of borrowed content\n    |\n LL |     match a.a {           //~ ERROR cannot move out of\n    |           ^ cannot move out of borrowed content\n-58 |                           //~| cannot move out\n+LL |                           //~| cannot move out\n LL |         n => {\n    |         - hint: to prevent move, use `ref n` or `ref mut n`\n "}, {"sha": "01899446f48f723ce503691ec0466a7ecc83e533", "filename": "src/test/ui/borrowck/borrowck-report-with-custom-diagnostic.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,10 +3,10 @@ error[E0502]: cannot borrow `x` as immutable because it is also borrowed as muta\n    |\n LL |     let y = &mut x;\n    |                  - mutable borrow occurs here\n-16 |     //~^ mutable borrow occurs here\n+LL |     //~^ mutable borrow occurs here\n LL |     let z = &x; //~ ERROR cannot borrow\n    |              ^ immutable borrow occurs here\n-18 |     //~^ immutable borrow occurs here\n+LL |     //~^ immutable borrow occurs here\n LL | }\n    | - mutable borrow ends here\n \n@@ -15,10 +15,10 @@ error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immuta\n    |\n LL |             let y = &x;\n    |                      - immutable borrow occurs here\n-27 |             //~^ immutable borrow occurs here\n+LL |             //~^ immutable borrow occurs here\n LL |             let z = &mut x; //~ ERROR cannot borrow\n    |                          ^ mutable borrow occurs here\n-29 |             //~^ mutable borrow occurs here\n+LL |             //~^ mutable borrow occurs here\n LL |         }\n    |         - immutable borrow ends here\n \n@@ -27,10 +27,10 @@ error[E0499]: cannot borrow `x` as mutable more than once at a time\n    |\n LL |         let y = &mut x;\n    |                      - first mutable borrow occurs here\n-40 |         //~^ first mutable borrow occurs here\n+LL |         //~^ first mutable borrow occurs here\n LL |         let z = &mut x; //~ ERROR cannot borrow\n    |                      ^ second mutable borrow occurs here\n-42 |         //~^ second mutable borrow occurs here\n+LL |         //~^ second mutable borrow occurs here\n LL |     };\n    |     - first borrow ends here\n "}, {"sha": "3d9fbc800385f3a957c7ff1a7863ccfaccc2fa28", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0506]: cannot assign to `vec[..]` because it is borrowed\n    |\n LL |         [box ref _a, _, _] => {\n    |              ------ borrow of `vec[..]` occurs here\n-20 |         //~^ borrow of `vec[..]` occurs here\n+LL |         //~^ borrow of `vec[..]` occurs here\n LL |             vec[0] = box 4; //~ ERROR cannot assign\n    |             ^^^^^^^^^^^^^^ assignment to borrowed `vec[..]` occurs here\n \n@@ -12,7 +12,7 @@ error[E0506]: cannot assign to `vec[..]` because it is borrowed\n    |\n LL |         &mut [ref _b..] => {\n    |               ------ borrow of `vec[..]` occurs here\n-32 |         //~^ borrow of `vec[..]` occurs here\n+LL |         //~^ borrow of `vec[..]` occurs here\n LL |             vec[0] = box 4; //~ ERROR cannot assign\n    |             ^^^^^^^^^^^^^^ assignment to borrowed `vec[..]` occurs here\n "}, {"sha": "f0ee6b31f7369e7a7be4acaf6ee16326302c8652", "filename": "src/test/ui/borrowck/issue-41962.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -26,7 +26,7 @@ LL |           if let Some(thing) = maybe {\n LL | |         //~^ ERROR use of partially moved value: `maybe` (Ast) [E0382]\n LL | |         //~| ERROR use of moved value: `(maybe as std::prelude::v1::Some).0` (Ast) [E0382]\n LL | |         //~| ERROR use of moved value: `maybe` (Mir) [E0382]\n-21 | |         //~| ERROR use of moved value: `maybe` (Mir) [E0382]\n+LL | |         //~| ERROR use of moved value: `maybe` (Mir) [E0382]\n LL | |         //~| ERROR use of moved value: `maybe.0` (Mir) [E0382]\n LL | |         }\n    | |_________^ value used here after move"}, {"sha": "41a804adfe36916b71f92e90e0dca88ea6da7a7e", "filename": "src/test/ui/borrowck/issue-7573.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error: borrowed data cannot be stored outside of its closure\n    |\n LL |     let mut lines_to_use: Vec<&CrateId> = Vec::new();\n    |                               - cannot infer an appropriate lifetime...\n-28 |         //~^ NOTE cannot infer an appropriate lifetime\n+LL |         //~^ NOTE cannot infer an appropriate lifetime\n LL |     let push_id = |installed_id: &CrateId| {\n    |         -------   ------------------------ borrowed data cannot outlive this closure\n    |         |"}, {"sha": "9b777246861fab500856332b6c95064bb28f7f2f", "filename": "src/test/ui/borrowck/mut-borrow-in-loop.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n    |\n LL |             (self.func)(arg) //~ ERROR cannot borrow\n    |                         ^^^ mutable borrow starts here in previous iteration of loop\n-21 |         }\n+LL |         }\n LL |     }\n    |     - mutable borrow ends here\n \n@@ -12,7 +12,7 @@ error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n    |\n LL |             (self.func)(arg) //~ ERROR cannot borrow\n    |                         ^^^ mutable borrow starts here in previous iteration of loop\n-27 |         }\n+LL |         }\n LL |     }\n    |     - mutable borrow ends here\n \n@@ -21,7 +21,7 @@ error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n    |\n LL |             (self.func)(arg) //~ ERROR cannot borrow\n    |                         ^^^ mutable borrow starts here in previous iteration of loop\n-34 |         }\n+LL |         }\n LL |     }\n    |     - mutable borrow ends here\n "}, {"sha": "d07bdab087cbce489111a5ae1ab49a52285f261d", "filename": "src/test/ui/borrowck/unboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0507]: cannot move out of captured outer variable in an `Fn` closure\n    |\n LL |     let y = vec![format!(\"World\")];\n    |         - captured outer variable\n-20 |     call(|| {\n+LL |     call(|| {\n LL |         y.into_iter();\n    |         ^ cannot move out of captured outer variable in an `Fn` closure\n "}, {"sha": "c2826359e08045b945f276ec594380751e6ca1bf", "filename": "src/test/ui/codemap_tests/tab_3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0382]: use of moved value: `some_vec`\n    |\n LL |     some_vec.into_iter();\n    |     -------- value moved here\n-16 |     {\n+LL |     {\n LL |         println!(\"{:?}\", some_vec); //~ ERROR use of moved\n    |                          ^^^^^^^^ value used here after move\n    |"}, {"sha": "ec315d897ac1507870d762b59f85b2a72b261a92", "filename": "src/test/ui/coherence-overlap-downstream-inherent.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fcoherence-overlap-downstream-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fcoherence-overlap-downstream-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-downstream-inherent.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0592]: duplicate definitions with name `dummy`\n    |\n LL | impl<T:Sugar> Sweet<T> { fn dummy(&self) { } }\n    |                          ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n-18 | //~^ ERROR E0592\n+LL | //~^ ERROR E0592\n LL | impl<T:Fruit> Sweet<T> { fn dummy(&self) { } }\n    |                          ------------------- other definition for `dummy`\n \n@@ -12,7 +12,7 @@ error[E0592]: duplicate definitions with name `f`\n    |\n LL | impl<X, T> A<T, X> where T: Bar<X> { fn f(&self) {} }\n    |                                      ^^^^^^^^^^^^^^ duplicate definitions for `f`\n-24 | //~^ ERROR E0592\n+LL | //~^ ERROR E0592\n LL | impl<X> A<i32, X> { fn f(&self) {} }\n    |                     -------------- other definition for `f`\n    |"}, {"sha": "6bb73e6d383382a43c657ad4462ffe866abaa26b", "filename": "src/test/ui/coherence-overlap-issue-23516-inherent.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516-inherent.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0592]: duplicate definitions with name `dummy`\n    |\n LL | impl<T:Sugar> Cake<T> { fn dummy(&self) { } }\n    |                         ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n-20 | //~^ ERROR E0592\n+LL | //~^ ERROR E0592\n LL | impl<U:Sugar> Cake<Box<U>> { fn dummy(&self) { } }\n    |                              ------------------- other definition for `dummy`\n    |"}, {"sha": "a7a6003b06c861acd5fe033ab2b3392e1b38fd0a", "filename": "src/test/ui/coherence-overlap-upstream-inherent.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fcoherence-overlap-upstream-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fcoherence-overlap-upstream-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-upstream-inherent.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0592]: duplicate definitions with name `dummy`\n    |\n LL | impl<T> A<T> where T: Remote { fn dummy(&self) { } }\n    |                                ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `dummy`\n-22 | //~^ ERROR E0592\n+LL | //~^ ERROR E0592\n LL | impl A<i16> { fn dummy(&self) { } }\n    |               ------------------- other definition for `dummy`\n    |"}, {"sha": "a05b70b2eb869c5f919a0ca8a4452864e19de830", "filename": "src/test/ui/did_you_mean/issue-39544.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -27,7 +27,7 @@ error[E0596]: cannot borrow field `other.x` of immutable binding as mutable\n    |\n LL |     fn foo1(&self, other: &Z) {\n    |                           -- use `&mut Z` here to make mutable\n-30 |         let _ = &mut self.x; //~ ERROR cannot borrow\n+LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n LL |         let _ = &mut other.x; //~ ERROR cannot borrow\n    |                      ^^^^^^^ cannot mutably borrow field of immutable binding\n \n@@ -44,7 +44,7 @@ error[E0596]: cannot borrow field `other.x` of immutable binding as mutable\n    |\n LL |     fn foo2<'a>(&'a self, other: &Z) {\n    |                                  -- use `&mut Z` here to make mutable\n-35 |         let _ = &mut self.x; //~ ERROR cannot borrow\n+LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n LL |         let _ = &mut other.x; //~ ERROR cannot borrow\n    |                      ^^^^^^^ cannot mutably borrow field of immutable binding\n \n@@ -61,7 +61,7 @@ error[E0596]: cannot borrow field `other.x` of immutable binding as mutable\n    |\n LL |     fn foo3<'a>(self: &'a Self, other: &Z) {\n    |                                        -- use `&mut Z` here to make mutable\n-40 |         let _ = &mut self.x; //~ ERROR cannot borrow\n+LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n LL |         let _ = &mut other.x; //~ ERROR cannot borrow\n    |                      ^^^^^^^ cannot mutably borrow field of immutable binding\n \n@@ -86,7 +86,7 @@ error[E0596]: cannot borrow field `w.x` of immutable binding as mutable\n    |\n LL | pub fn with_arg(z: Z, w: &Z) {\n    |                          -- use `&mut Z` here to make mutable\n-51 |     let _ = &mut z.x; //~ ERROR cannot borrow\n+LL |     let _ = &mut z.x; //~ ERROR cannot borrow\n LL |     let _ = &mut w.x; //~ ERROR cannot borrow\n    |                  ^^^ cannot mutably borrow field of immutable binding\n "}, {"sha": "390b214e62e0b7bd0ed13719f3657100efcaf679", "filename": "src/test/ui/did_you_mean/issue-42764.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -8,9 +8,9 @@ LL |     this_function_expects_a_double_option(n);\n               found type `usize`\n help: try using a variant of the expected type\n    |\n-21 |     this_function_expects_a_double_option(DoubleOption::FirstSome(n));\n+LL |     this_function_expects_a_double_option(DoubleOption::FirstSome(n));\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-21 |     this_function_expects_a_double_option(DoubleOption::AlternativeSome(n));\n+LL |     this_function_expects_a_double_option(DoubleOption::AlternativeSome(n));\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "ceddff4047b19cf2cebe23ec0f383682818f7c21", "filename": "src/test/ui/double-import.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fdouble-import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fdouble-import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdouble-import.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -9,7 +9,7 @@ LL | use sub2::foo; //~ ERROR the name `foo` is defined multiple times\n    = note: `foo` must be defined only once in the value namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-23 | use sub2::foo as other_foo; //~ ERROR the name `foo` is defined multiple times\n+LL | use sub2::foo as other_foo; //~ ERROR the name `foo` is defined multiple times\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "d5b4e85ce5e4b66c1a8dfe6f90993a97f99dc5b9", "filename": "src/test/ui/dropck/dropck-eyepatch-implies-unsafe-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-implies-unsafe-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-implies-unsafe-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-implies-unsafe-impl.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ LL | / impl<#[may_dangle] A, B: fmt::Debug> Drop for Pt<A, B> {\n LL | |     //~^ ERROR requires an `unsafe impl` declaration due to `#[may_dangle]` attribute\n LL | |\n LL | |     // (unsafe to access self.1  due to #[may_dangle] on A)\n-36 | |     fn drop(&mut self) { println!(\"drop {} {:?}\", self.0, self.2); }\n+LL | |     fn drop(&mut self) { println!(\"drop {} {:?}\", self.0, self.2); }\n LL | | }\n    | |_^\n \n@@ -16,7 +16,7 @@ LL | / impl<#[may_dangle] 'a, 'b, B: fmt::Debug> Drop for Pr<'a, 'b, B> {\n LL | |     //~^ ERROR requires an `unsafe impl` declaration due to `#[may_dangle]` attribute\n LL | |\n LL | |     // (unsafe to access self.1 due to #[may_dangle] on 'a)\n-42 | |     fn drop(&mut self) { println!(\"drop {} {:?}\", self.0, self.2); }\n+LL | |     fn drop(&mut self) { println!(\"drop {} {:?}\", self.0, self.2); }\n LL | | }\n    | |_^\n "}, {"sha": "e64f383f91b9de18640d7e443e48617c014a8f73", "filename": "src/test/ui/empty-struct-unit-expr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fempty-struct-unit-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fempty-struct-unit-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty-struct-unit-expr.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -17,7 +17,7 @@ LL |     let e4 = E::Empty4();\n    |              ^^^^^^^^^^^ not a function\n help: `E::Empty4` is a unit variant, you need to write it without the parenthesis\n    |\n-26 |     let e4 = E::Empty4;\n+LL |     let e4 = E::Empty4;\n    |              ^^^^^^^^^\n \n error[E0618]: expected function, found `empty_struct::XEmpty2`\n@@ -33,7 +33,7 @@ LL |     let xe4 = XE::XEmpty4();\n    |               ^^^^^^^^^^^^^ not a function\n help: `XE::XEmpty4` is a unit variant, you need to write it without the parenthesis\n    |\n-29 |     let xe4 = XE::XEmpty4;\n+LL |     let xe4 = XE::XEmpty4;\n    |               ^^^^^^^^^^^\n \n error: aborting due to 4 previous errors"}, {"sha": "9447b90355e99e6466c4c575804ad7a5c4e6f0ef", "filename": "src/test/ui/error-codes/E0194.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ferror-codes%2FE0194.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ferror-codes%2FE0194.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0194.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0194]: type parameter `T` shadows another type parameter of the same name\n    |\n LL | trait Foo<T> {\n    |           - first `T` declared here\n-12 |     fn do_something(&self) -> T;\n+LL |     fn do_something(&self) -> T;\n LL |     fn do_something_else<T: Clone>(&self, bar: T);\n    |                          ^ shadows another type parameter\n "}, {"sha": "07ce53e3b58c4317a527d7ee150680ffdbe29bb8", "filename": "src/test/ui/error-codes/E0221.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ferror-codes%2FE0221.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ferror-codes%2FE0221.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0221.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -6,7 +6,7 @@ LL |     type A: T1;\n ...\n LL |     type A: T2;\n    |     ----------- ambiguous `A` from `Bar`\n-20 |     fn do_something() {\n+LL |     fn do_something() {\n LL |         let _: Self::A;\n    |                ^^^^^^^ ambiguous associated type `A`\n \n@@ -15,7 +15,7 @@ error[E0221]: ambiguous associated type `Err` in bounds of `Self`\n    |\n LL |     type Err: T3;\n    |     ------------- ambiguous `Err` from `My`\n-30 |     fn test() {\n+LL |     fn test() {\n LL |         let _: Self::Err;\n    |                ^^^^^^^^^ ambiguous associated type `Err`\n    |"}, {"sha": "8186c4590f08ad01798ed6ed014b8520f2f3b39f", "filename": "src/test/ui/error-codes/E0252.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ferror-codes%2FE0252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ferror-codes%2FE0252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0252.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -9,7 +9,7 @@ LL | use bar::baz; //~ ERROR E0252\n    = note: `baz` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-12 | use bar::baz as other_baz; //~ ERROR E0252\n+LL | use bar::baz as other_baz; //~ ERROR E0252\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "f1e1b56a790d8d14e7424b7e4d426b8311d6652f", "filename": "src/test/ui/error-codes/E0254.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ferror-codes%2FE0254.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ferror-codes%2FE0254.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0254.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -10,7 +10,7 @@ LL | use foo::alloc;\n    = note: `alloc` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-22 | use foo::alloc as other_alloc;\n+LL | use foo::alloc as other_alloc;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "4d4053b1fb69b67baf18221790cf1997c906df38", "filename": "src/test/ui/error-codes/E0255.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ferror-codes%2FE0255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ferror-codes%2FE0255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0255.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,14 +3,14 @@ error[E0255]: the name `foo` is defined multiple times\n    |\n LL | use bar::foo;\n    |     -------- previous import of the value `foo` here\n-12 | \n+LL | \n LL | fn foo() {} //~ ERROR E0255\n    | ^^^^^^^^ `foo` redefined here\n    |\n    = note: `foo` must be defined only once in the value namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-11 | use bar::foo as other_foo;\n+LL | use bar::foo as other_foo;\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "2cdd9aa66835d48cf3153062a09bff15384c4e20", "filename": "src/test/ui/error-codes/E0259.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ferror-codes%2FE0259.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ferror-codes%2FE0259.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0259.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0259]: the name `alloc` is defined multiple times\n    |\n LL | extern crate alloc;\n    | ------------------- previous import of the extern crate `alloc` here\n-15 | \n+LL | \n LL | extern crate libc as alloc;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    | |"}, {"sha": "a249c80ea2c60474ce89a1bb2a372dc0cb805ed2", "filename": "src/test/ui/error-codes/E0260.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ferror-codes%2FE0260.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ferror-codes%2FE0260.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0260.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,14 +3,14 @@ error[E0260]: the name `alloc` is defined multiple times\n    |\n LL | extern crate alloc;\n    | ------------------- previous import of the extern crate `alloc` here\n-15 | \n+LL | \n LL | mod alloc {\n    | ^^^^^^^^^ `alloc` redefined here\n    |\n    = note: `alloc` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-14 | extern crate alloc as other_alloc;\n+LL | extern crate alloc as other_alloc;\n    |\n \n error: aborting due to previous error"}, {"sha": "b6448ec18c3db1135a6c220bdd15db381e353d0e", "filename": "src/test/ui/error-codes/E0430.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ferror-codes%2FE0430.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ferror-codes%2FE0430.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0430.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -17,7 +17,7 @@ LL | use std::fmt::{self, self}; //~ ERROR E0430\n    = note: `fmt` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-11 | use std::fmt::{self, self as other_fmt}; //~ ERROR E0430\n+LL | use std::fmt::{self, self as other_fmt}; //~ ERROR E0430\n    |                      ^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "646b98b847381c5f947e3dc15906748c9e49a8e9", "filename": "src/test/ui/error-codes/E0453.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ferror-codes%2FE0453.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ferror-codes%2FE0453.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0453.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0453]: allow(non_snake_case) overruled by outer forbid(non_snake_case)\n    |\n LL | #![forbid(non_snake_case)]\n    |           -------------- `forbid` level set here\n-12 | \n+LL | \n LL | #[allow(non_snake_case)]\n    |         ^^^^^^^^^^^^^^ overruled by previous forbid\n "}, {"sha": "41035493bfca770d769d67f9b9f88bd461da18b5", "filename": "src/test/ui/error-codes/E0597.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ferror-codes%2FE0597.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ferror-codes%2FE0597.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0597.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0597]: `y` does not live long enough\n    |\n LL |     x.x = Some(&y);\n    |                 ^ borrowed value does not live long enough\n-19 |     //~^ `y` does not live long enough [E0597]\n+LL |     //~^ `y` does not live long enough [E0597]\n LL | }\n    | - `y` dropped here while still borrowed\n    |"}, {"sha": "11b1bf32ee013c99a67475992db45241e9303dc9", "filename": "src/test/ui/error-codes/E0617.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ferror-codes%2FE0617.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ferror-codes%2FE0617.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0617.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -35,7 +35,7 @@ LL |         printf(::std::ptr::null(), printf);\n    |                                    ^^^^^^\n help: cast the value to `unsafe extern \"C\" fn(*const i8, ...)`\n    |\n-34 |         printf(::std::ptr::null(), printf as unsafe extern \"C\" fn(*const i8, ...));\n+LL |         printf(::std::ptr::null(), printf as unsafe extern \"C\" fn(*const i8, ...));\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 6 previous errors"}, {"sha": "41ef37dca543ac0937b9a16877b03b421c1a3a97", "filename": "src/test/ui/error-codes/E0618.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -8,7 +8,7 @@ LL |     X::Entry();\n    |     ^^^^^^^^^^ not a function\n help: `X::Entry` is a unit variant, you need to write it without the parenthesis\n    |\n-16 |     X::Entry;\n+LL |     X::Entry;\n    |     ^^^^^^^^\n \n error[E0618]: expected function, found `i32`"}, {"sha": "40a81171a898aea772f78043fa6b6eab08d60c16", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-inline.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ error[E0518]: attribute should be applied to function\n    |\n LL |   #[inline = \"2100\"]\n    |   ^^^^^^^^^^^^^^^^^^\n-22 |   //~^ ERROR attribute should be applied to function\n+LL |   //~^ ERROR attribute should be applied to function\n LL | / mod inline {\n LL | |     mod inner { #![inline=\"2100\"] }\n LL | |     //~^ ERROR attribute should be applied to function"}, {"sha": "a27d950c04594e41f46b94055f16f4096e72423b", "filename": "src/test/ui/generator/borrowing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ LL |         (|| yield &a).resume()\n    |          --        ^ borrowed value does not live long enough\n    |          |\n    |          capture occurs here\n-19 |         //~^ ERROR: `a` does not live long enough\n+LL |         //~^ ERROR: `a` does not live long enough\n LL |     };\n    |     - borrowed value only lives until here\n ..."}, {"sha": "c4ae9051138bc3bf66056c8c17565a2954b12620", "filename": "src/test/ui/generator/dropck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fgenerator%2Fdropck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fgenerator%2Fdropck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdropck.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0597]: `ref_` does not live long enough\n    |\n LL |     gen = || {\n    |           -- capture occurs here\n-22 |         // but the generator can use it to drop a `Ref<'a, i32>`.\n+LL |         // but the generator can use it to drop a `Ref<'a, i32>`.\n LL |         let _d = ref_.take(); //~ ERROR `ref_` does not live long enough\n    |                  ^^^^ borrowed value does not live long enough\n ..."}, {"sha": "49542dd0ac35b49fda229dda31733ab610c9ba67", "filename": "src/test/ui/generator/generator-with-nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -12,7 +12,7 @@ error[E0626]: borrow may still be in use when generator yields (Ast)\n    |\n LL |         let b = &mut true; //~ ERROR borrow may still be in use when generator yields (Ast)\n    |                      ^^^^\n-21 |         //~^ borrow may still be in use when generator yields (Mir)\n+LL |         //~^ borrow may still be in use when generator yields (Mir)\n LL |         yield ();\n    |         -------- possible yield occurs here\n \n@@ -21,7 +21,7 @@ error[E0626]: borrow may still be in use when generator yields (Mir)\n    |\n LL |         let b = &mut true; //~ ERROR borrow may still be in use when generator yields (Ast)\n    |                 ^^^^^^^^^\n-21 |         //~^ borrow may still be in use when generator yields (Mir)\n+LL |         //~^ borrow may still be in use when generator yields (Mir)\n LL |         yield ();\n    |         -------- possible yield occurs here\n "}, {"sha": "7cd07adf0b1c6d9aa2de9c59a2d14c26ad016326", "filename": "src/test/ui/generator/ref-escapes-but-not-over-yield.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0597]: `b` does not live long enough\n    |\n LL |         a = &b;\n    |              ^ borrowed value does not live long enough\n-25 |         //~^ ERROR `b` does not live long enough\n+LL |         //~^ ERROR `b` does not live long enough\n LL |     };\n    |     - `b` dropped here while still borrowed\n LL | }"}, {"sha": "c1a047f6c2a1f63c309cfe6555ef54eeef0746ac", "filename": "src/test/ui/generator/yield-while-iterating.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-iterating.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -16,7 +16,7 @@ LL |         for p in &mut x {\n ...\n LL |     println!(\"{}\", x[0]); //~ ERROR\n    |                    ^ immutable borrow occurs here\n-68 |     b.resume();\n+LL |     b.resume();\n LL | }\n    | - mutable borrow ends here\n "}, {"sha": "57d688e78f69bf53437c16d8f8842dc83f655cf7", "filename": "src/test/ui/generator/yield-while-ref-reborrowed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -8,7 +8,7 @@ LL |         let a = &mut *x;\n ...\n LL |     println!(\"{}\", x); //~ ERROR\n    |                    ^ borrow occurs here\n-46 |     b.resume();\n+LL |     b.resume();\n LL | }\n    | - borrow from closure ends here\n "}, {"sha": "d5250b42cc211db9f7451431ad758e64bd887f04", "filename": "src/test/ui/impl-trait/no-method-suggested-traits.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -7,13 +7,13 @@ LL |     1u32.method();\n    = help: items from traits can only be used if the trait is in scope\n help: the following traits are implemented but not in scope, perhaps add a `use` for one of them:\n    |\n-14 | use foo::Bar;\n+LL | use foo::Bar;\n    |\n-14 | use no_method_suggested_traits::foo::PubPub;\n+LL | use no_method_suggested_traits::foo::PubPub;\n    |\n-14 | use no_method_suggested_traits::qux::PrivPub;\n+LL | use no_method_suggested_traits::qux::PrivPub;\n    |\n-14 | use no_method_suggested_traits::Reexported;\n+LL | use no_method_suggested_traits::Reexported;\n    |\n \n error[E0599]: no method named `method` found for type `std::rc::Rc<&mut std::boxed::Box<&u32>>` in the current scope\n@@ -25,13 +25,13 @@ LL |     std::rc::Rc::new(&mut Box::new(&1u32)).method();\n    = help: items from traits can only be used if the trait is in scope\n help: the following traits are implemented but not in scope, perhaps add a `use` for one of them:\n    |\n-14 | use foo::Bar;\n+LL | use foo::Bar;\n    |\n-14 | use no_method_suggested_traits::foo::PubPub;\n+LL | use no_method_suggested_traits::foo::PubPub;\n    |\n-14 | use no_method_suggested_traits::qux::PrivPub;\n+LL | use no_method_suggested_traits::qux::PrivPub;\n    |\n-14 | use no_method_suggested_traits::Reexported;\n+LL | use no_method_suggested_traits::Reexported;\n    |\n \n error[E0599]: no method named `method` found for type `char` in the current scope\n@@ -43,7 +43,7 @@ LL |     'a'.method();\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n    |\n-14 | use foo::Bar;\n+LL | use foo::Bar;\n    |\n \n error[E0599]: no method named `method` found for type `std::rc::Rc<&mut std::boxed::Box<&char>>` in the current scope\n@@ -55,7 +55,7 @@ LL |     std::rc::Rc::new(&mut Box::new(&'a')).method();\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n    |\n-14 | use foo::Bar;\n+LL | use foo::Bar;\n    |\n \n error[E0599]: no method named `method` found for type `i32` in the current scope\n@@ -67,7 +67,7 @@ LL |     1i32.method();\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n    |\n-14 | use no_method_suggested_traits::foo::PubPub;\n+LL | use no_method_suggested_traits::foo::PubPub;\n    |\n \n error[E0599]: no method named `method` found for type `std::rc::Rc<&mut std::boxed::Box<&i32>>` in the current scope\n@@ -79,7 +79,7 @@ LL |     std::rc::Rc::new(&mut Box::new(&1i32)).method();\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n    |\n-14 | use no_method_suggested_traits::foo::PubPub;\n+LL | use no_method_suggested_traits::foo::PubPub;\n    |\n \n error[E0599]: no method named `method` found for type `Foo` in the current scope"}, {"sha": "6cf0baa5fcce9ae56aab65a54e3ddcf97361c97a", "filename": "src/test/ui/impl-trait/universal_wrong_bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal_wrong_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal_wrong_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal_wrong_bounds.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -11,7 +11,7 @@ LL | fn wants_debug(g: impl Debug) { } //~ ERROR cannot find\n    |                        ^^^^^ not found in this scope\n help: possible candidate is found in another module, you can import it into scope\n    |\n-13 | use std::fmt::Debug;\n+LL | use std::fmt::Debug;\n    |\n \n error[E0405]: cannot find trait `Debug` in this scope\n@@ -21,7 +21,7 @@ LL | fn wants_display(g: impl Debug) { } //~ ERROR cannot find\n    |                          ^^^^^ not found in this scope\n help: possible candidate is found in another module, you can import it into scope\n    |\n-13 | use std::fmt::Debug;\n+LL | use std::fmt::Debug;\n    |\n \n error: cannot continue compilation due to previous error"}, {"sha": "0715674077a71bfd38e7bd5c06079c5874e0f43f", "filename": "src/test/ui/imports/duplicate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fimports%2Fduplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fimports%2Fduplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fduplicate.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -9,7 +9,7 @@ LL |     use a::foo; //~ ERROR the name `foo` is defined multiple times\n    = note: `foo` must be defined only once in the value namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-25 |     use a::foo as other_foo; //~ ERROR the name `foo` is defined multiple times\n+LL |     use a::foo as other_foo; //~ ERROR the name `foo` is defined multiple times\n    |         ^^^^^^^^^^^^^^^^^^^\n \n error[E0659]: `foo` is ambiguous"}, {"sha": "8c72d27d6aae30e27699d0be5ca040a4a5de93d8", "filename": "src/test/ui/imports/shadow_builtin_macros.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error: `panic` is already in scope\n    |\n LL |         macro_rules! panic { () => {} } //~ ERROR `panic` is already in scope\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-43 |     } }\n+LL |     } }\n LL |     m!();\n    |     ----- in this macro invocation\n    |"}, {"sha": "b22b18aa929421abc973edf746fde1adfce46544", "filename": "src/test/ui/in-band-lifetimes/shadow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fshadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fshadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fshadow.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -11,7 +11,7 @@ error[E0496]: lifetime name `'s` shadows a lifetime name that is already in scop\n    |\n LL | impl Foo<&'s u8> {\n    |           -- first declared here\n-17 |     fn bar<'s>(&self, x: &'s u8) {} //~ ERROR shadows a lifetime name\n+LL |     fn bar<'s>(&self, x: &'s u8) {} //~ ERROR shadows a lifetime name\n LL |     fn baz(x: for<'s> fn(&'s u32)) {} //~ ERROR shadows a lifetime name\n    |                   ^^ lifetime 's already in scope\n "}, {"sha": "30936d4c90d85c6d5caabca7d06ea0b9d7ac0b7a", "filename": "src/test/ui/issue-13058.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-13058.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-13058.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-13058.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0621]: explicit lifetime required in the type of `cont`\n    |\n LL | fn check<'r, I: Iterator<Item=usize>, T: Itble<'r, usize, I>>(cont: &T) -> bool\n    |                                                               ---- consider changing the type of `cont` to `&'r T`\n-23 | {\n+LL | {\n LL |     let cont_iter = cont.iter();\n    |                          ^^^^ lifetime `'r` required\n "}, {"sha": "e321a9f456261deb766ac3701054f329dcb17d9e", "filename": "src/test/ui/issue-17263.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-17263.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-17263.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17263.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -16,7 +16,7 @@ LL |     let (c, d) = (&mut foo.a, &foo.b);\n    |                        -----   ^^^^^ immutable borrow occurs here (via `foo.b`)\n    |                        |\n    |                        mutable borrow occurs here (via `foo.a`)\n-22 |     //~^ ERROR cannot borrow `foo` (via `foo.b`) as immutable\n+LL |     //~^ ERROR cannot borrow `foo` (via `foo.b`) as immutable\n LL | }\n    | - mutable borrow ends here\n "}, {"sha": "b2793dff2bf8276c050324f228f38440ec397496", "filename": "src/test/ui/issue-19498.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-19498.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-19498.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-19498.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,14 +3,14 @@ error[E0255]: the name `A` is defined multiple times\n    |\n LL | use self::A;\n    |     ------- previous import of the module `A` here\n-12 | use self::B;\n+LL | use self::B;\n LL | mod A {} //~ ERROR the name `A` is defined multiple times\n    | ^^^^^ `A` redefined here\n    |\n    = note: `A` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-11 | use self::A as OtherA;\n+LL | use self::A as OtherA;\n    |     ^^^^^^^^^^^^^^^^^\n \n error[E0255]: the name `B` is defined multiple times\n@@ -25,7 +25,7 @@ LL | pub mod B {} //~ ERROR the name `B` is defined multiple times\n    = note: `B` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-12 | use self::B as OtherB;\n+LL | use self::B as OtherB;\n    |     ^^^^^^^^^^^^^^^^^\n \n error[E0255]: the name `D` is defined multiple times\n@@ -39,7 +39,7 @@ LL |     mod D {} //~ ERROR the name `D` is defined multiple times\n    = note: `D` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-18 |     use C::D as OtherD;\n+LL |     use C::D as OtherD;\n    |         ^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors"}, {"sha": "d5e87f894178afd021587a033957b043c9c5e2a9", "filename": "src/test/ui/issue-22644.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-22644.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-22644.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-22644.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -52,9 +52,9 @@ LL |                    4);\n    |                    - interpreted as generic arguments\n help: try comparing the casted value\n    |\n-25 |     println!(\"{}\", (a\n-26 |                    as\n-27 |                    usize)\n+LL |     println!(\"{}\", (a\n+LL |                    as\n+LL |                    usize)\n    |\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n@@ -66,12 +66,12 @@ LL |                    5);\n    |                    - interpreted as generic arguments\n help: try comparing the casted value\n    |\n-30 |     println!(\"{}\", (a\n-31 | \n-32 | \n-33 |                    as\n-34 | \n-35 | \n+LL |     println!(\"{}\", (a\n+LL | \n+LL | \n+LL |                    as\n+LL | \n+LL | \n  ...\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a shift"}, {"sha": "739c8d66e713af71fef78ea266e679a02419b8ad", "filename": "src/test/ui/issue-23716.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-23716.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-23716.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23716.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0530]: function parameters cannot shadow statics\n    |\n LL | static foo: i32 = 0;\n    | -------------------- a static `foo` is defined here\n-12 | \n+LL | \n LL | fn bar(foo: i32) {}\n    |        ^^^ cannot be named the same as a static\n \n@@ -12,7 +12,7 @@ error[E0530]: function parameters cannot shadow statics\n    |\n LL | use self::submod::answer;\n    |     -------------------- a static `answer` is imported here\n-22 | \n+LL | \n LL | fn question(answer: i32) {}\n    |             ^^^^^^ cannot be named the same as a static\n "}, {"sha": "bbf64d8305de21c0357a4e3cc20432cfa0de0e24", "filename": "src/test/ui/issue-24036.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-24036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-24036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-24036.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -18,7 +18,7 @@ LL | |     //~^ ERROR match arms have incompatible types\n LL | |         1 => |c| c + 1,\n LL | |         2 => |c| c - 1,\n    | |              --------- match arm with an incompatible type\n-22 | |         _ => |c| c - 1\n+LL | |         _ => |c| c - 1\n LL | |     };\n    | |_____^ expected closure, found a different closure\n    |"}, {"sha": "257e32f91980bc4e99a2104d89d21cae7a088158", "filename": "src/test/ui/issue-24081.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-24081.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-24081.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-24081.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -10,7 +10,7 @@ LL | type Add = bool; //~ ERROR the name `Add` is defined multiple times\n    = note: `Add` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-11 | use std::ops::Add as OtherAdd;\n+LL | use std::ops::Add as OtherAdd;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0255]: the name `Sub` is defined multiple times\n@@ -25,7 +25,7 @@ LL | struct Sub { x: f32 } //~ ERROR the name `Sub` is defined multiple times\n    = note: `Sub` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-12 | use std::ops::Sub as OtherSub;\n+LL | use std::ops::Sub as OtherSub;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0255]: the name `Mul` is defined multiple times\n@@ -40,7 +40,7 @@ LL | enum Mul { A, B } //~ ERROR the name `Mul` is defined multiple times\n    = note: `Mul` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-13 | use std::ops::Mul as OtherMul;\n+LL | use std::ops::Mul as OtherMul;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0255]: the name `Div` is defined multiple times\n@@ -55,7 +55,7 @@ LL | mod Div { } //~ ERROR the name `Div` is defined multiple times\n    = note: `Div` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-14 | use std::ops::Div as OtherDiv;\n+LL | use std::ops::Div as OtherDiv;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0255]: the name `Rem` is defined multiple times\n@@ -70,7 +70,7 @@ LL | trait Rem {  } //~ ERROR the name `Rem` is defined multiple times\n    = note: `Rem` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-15 | use std::ops::Rem as OtherRem;\n+LL | use std::ops::Rem as OtherRem;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors"}, {"sha": "dc812d1bae3ba07fefcf43e92f693337a4a7de95", "filename": "src/test/ui/issue-26886.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-26886.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-26886.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-26886.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -9,7 +9,7 @@ LL | use std::sync::Arc; //~ ERROR the name `Arc` is defined multiple times\n    = note: `Arc` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-12 | use std::sync::Arc as OtherArc; //~ ERROR the name `Arc` is defined multiple times\n+LL | use std::sync::Arc as OtherArc; //~ ERROR the name `Arc` is defined multiple times\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0252]: the name `sync` is defined multiple times\n@@ -24,7 +24,7 @@ LL | use std::sync; //~ ERROR the name `sync` is defined multiple times\n    = note: `sync` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-14 | use std::sync as other_sync; //~ ERROR the name `sync` is defined multiple times\n+LL | use std::sync as other_sync; //~ ERROR the name `sync` is defined multiple times\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "6528058428a43b89537ed64da390b58dc9a05a71", "filename": "src/test/ui/issue-30302.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-30302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-30302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-30302.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -11,7 +11,7 @@ error: unreachable pattern\n    |\n LL |         Nil => true,\n    |         --- matches any value\n-24 | //~^ WARN pattern binding `Nil` is named the same as one of the variants of the type `Stack`\n+LL | //~^ WARN pattern binding `Nil` is named the same as one of the variants of the type `Stack`\n LL |         _ => false\n    |         ^ unreachable pattern\n    |"}, {"sha": "84054b532de836dc613f6327da710c0614b83539", "filename": "src/test/ui/issue-35675.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-35675.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-35675.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-35675.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -14,7 +14,7 @@ LL |     Apple(5)\n    |     ^^^^^ not found in this scope\n help: possible candidate is found in another module, you can import it into scope\n    |\n-12 | use Fruit::Apple;\n+LL | use Fruit::Apple;\n    |\n \n error[E0573]: expected type, found variant `Fruit::Apple`\n@@ -33,7 +33,7 @@ LL |     Apple(5)\n    |     ^^^^^ not found in this scope\n help: possible candidate is found in another module, you can import it into scope\n    |\n-12 | use Fruit::Apple;\n+LL | use Fruit::Apple;\n    |\n \n error[E0573]: expected type, found variant `Ok`"}, {"sha": "f97ba33dfd32bdc8bc886586ea26112c587dc409", "filename": "src/test/ui/issue-35976.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-35976.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-35976.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-35976.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ LL |     arg.wait();\n    |         ^^^^\n help: another candidate was found in the following trait, perhaps add a `use` for it:\n    |\n-11 | use private::Future;\n+LL | use private::Future;\n    |\n \n error: aborting due to previous error"}, {"sha": "6dcbabbe39a586d93b8fcbd45a773f9e6cdb8078", "filename": "src/test/ui/issue-3779.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-3779.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-3779.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-3779.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0072]: recursive type `S` has infinite size\n    |\n LL | struct S {\n    | ^^^^^^^^ recursive type has infinite size\n-12 |     //~^ ERROR E0072\n+LL |     //~^ ERROR E0072\n LL |     element: Option<S>\n    |     ------------------ recursive without indirection\n    |"}, {"sha": "d1f6cb7d9226697a33cab730fa705aa68fd60218", "filename": "src/test/ui/issue-37884.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-37884.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-37884.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-37884.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ LL | /     fn next(&'a mut self) -> Option<Self::Item>\n LL | |     //~^ ERROR method not compatible with trait\n LL | |     //~| lifetime mismatch\n LL | |     {\n-20 | |         Some(&mut self.0)\n+LL | |         Some(&mut self.0)\n LL | |     }\n    | |_____^ lifetime mismatch\n    |\n@@ -18,7 +18,7 @@ LL | /     fn next(&'a mut self) -> Option<Self::Item>\n LL | |     //~^ ERROR method not compatible with trait\n LL | |     //~| lifetime mismatch\n LL | |     {\n-20 | |         Some(&mut self.0)\n+LL | |         Some(&mut self.0)\n LL | |     }\n    | |_____^\n note: ...does not necessarily outlive the lifetime 'a as defined on the impl at 13:1"}, {"sha": "df7b8a6525f854850fcc559c231828945558af4f", "filename": "src/test/ui/issue-41652/issue_41652.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-41652%2Fissue_41652.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-41652%2Fissue_41652.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-41652%2Fissue_41652.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ LL |         3.f()\n    |           ^\n help: you must specify a concrete type for this numeric value, like `i32`\n    |\n-19 |         3_i32.f()\n+LL |         3_i32.f()\n    |         ^^^^^\n \n error: aborting due to previous error"}, {"sha": "90b94a597a5d8f157bff4dea8e02f6f487616273", "filename": "src/test/ui/issue-4335.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-4335.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-4335.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-4335.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -7,7 +7,7 @@ LL |     id(Box::new(|| *v))\n    |                 may outlive borrowed value `v`\n help: to force the closure to take ownership of `v` (and any other referenced variables), use the `move` keyword\n    |\n-16 |     id(Box::new(move || *v))\n+LL |     id(Box::new(move || *v))\n    |                 ^^^^^^^\n \n error[E0507]: cannot move out of borrowed content"}, {"sha": "eaf7569100ad34109ca946e845c2f5d17dc51a0f", "filename": "src/test/ui/issue-45107-unnecessary-unsafe-in-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-45107-unnecessary-unsafe-in-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-45107-unnecessary-unsafe-in-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45107-unnecessary-unsafe-in-closure.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error: unnecessary `unsafe` block\n    |\n LL |     unsafe {\n    |     ------ because it's nested under this `unsafe` block\n-16 |         let f = |v: &mut Vec<_>| {\n+LL |         let f = |v: &mut Vec<_>| {\n LL |             unsafe { //~ ERROR unnecessary `unsafe`\n    |             ^^^^^^ unnecessary `unsafe` block\n    |"}, {"sha": "2de117489c39855b601b1bd9bacf404ec1cdbb3b", "filename": "src/test/ui/issue-47377.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-47377.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-47377.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-47377.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ LL |      let _a = b + \", World!\";\n    |               ^^^^^^^^^^^^^^ `+` can't be used to concatenate two `&str` strings\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n-13 |      let _a = b.to_owned() + \", World!\";\n+LL |      let _a = b.to_owned() + \", World!\";\n    |               ^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "968dc614ad68bd4565896ef8192b68038757d1b3", "filename": "src/test/ui/issue-47380.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-47380.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-47380.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-47380.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ LL |     println!(\"\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\"); let _a = b + \", World!\";\n    |                                      ^^^^^^^^^^^^^^ `+` can't be used to concatenate two `&str` strings\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n-12 |     println!(\"\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\"); let _a = b.to_owned() + \", World!\";\n+LL |     println!(\"\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\"); let _a = b.to_owned() + \", World!\";\n    |                                      ^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "fb5a2261c1f69fd828a999dd587fccf16d0992e0", "filename": "src/test/ui/issue-4935.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-4935.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fissue-4935.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-4935.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0061]: this function takes 1 parameter but 2 parameters were supplied\n    |\n LL | fn foo(a: usize) {}\n    | ---------------- defined here\n-14 | //~^ defined here\n+LL | //~^ defined here\n LL | fn main() { foo(5, 6) }\n    |             ^^^^^^^^^ expected 1 parameter\n "}, {"sha": "9efdb33f7e58938e9748a1d1c3dc0da33b773790", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0621]: explicit lifetime required in the type of `x`\n    |\n LL |   fn foo<'a>(&'a self, x: &i32) -> &i32 {\n    |                        - consider changing the type of `x` to `&'a i32`\n-17 | \n+LL | \n LL |     if true { &self.field } else { x } //~ ERROR explicit lifetime\n    |                                    ^ lifetime `'a` required\n "}, {"sha": "f27d869a4d4a75957196e8477f010e50a131d932", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ LL |     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n    |                   ----                 -------\n    |                   |\n    |                   this parameter and the return type are declared with different lifetimes...\n-20 | \n+LL | \n LL |         if x > y { x } else { y } //~ ERROR lifetime mismatch\n    |                    ^ ...but data from `x` is returned here\n "}, {"sha": "c72d25fe2a9fe2612c6d4dfc22413fae85eb7405", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-return-type-is-anon.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ LL |   fn foo<'a>(&self, x: &'a i32) -> &i32 {\n    |                        -------     ----\n    |                        |\n    |                        this parameter and the return type are declared with different lifetimes...\n-17 | \n+LL | \n LL |     x //~ ERROR lifetime mismatch\n    |     ^ ...but data from `x` is returned here\n "}, {"sha": "4d9e26c06326840976286162b02f7e49e8c1944d", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-self-is-anon.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ LL |     fn foo<'a>(&self, x: &'a Foo) -> &'a Foo {\n    |                -----                 -------\n    |                |\n    |                this parameter and the return type are declared with different lifetimes...\n-17 | \n+LL | \n LL |         if true { x } else { self } //~ ERROR lifetime mismatch\n    |                              ^^^^ ...but data from `self` is returned here\n "}, {"sha": "bba52f408b0c39843181bad125e4b5e02b5c7448", "filename": "src/test/ui/lifetime-errors/ex2c-push-inference-variable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Flifetime-errors%2Fex2c-push-inference-variable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Flifetime-errors%2Fex2c-push-inference-variable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2c-push-inference-variable.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0623]: lifetime mismatch\n    |\n LL | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n    |                                   ------------      ------------ these two types are declared with different lifetimes...\n-16 |     let z = Ref { data: y.data };\n+LL |     let z = Ref { data: y.data };\n LL |     x.push(z); //~ ERROR lifetime mismatch\n    |            ^ ...but data from `y` flows into `x` here\n "}, {"sha": "76b500e7d23bfe5058ff5a8590694296a54657f2", "filename": "src/test/ui/lint-ctypes.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Flint-ctypes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Flint-ctypes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint-ctypes.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -1,167 +1,167 @@\n error: `extern` block uses type `Foo` which is not FFI-safe: this struct has unspecified layout\n   --> $DIR/lint-ctypes.rs:54:28\n    |\n-54 |     pub fn ptr_type1(size: *const Foo); //~ ERROR: uses type `Foo`\n+LL |     pub fn ptr_type1(size: *const Foo); //~ ERROR: uses type `Foo`\n    |                            ^^^^^^^^^^\n    |\n note: lint level defined here\n   --> $DIR/lint-ctypes.rs:11:9\n    |\n-11 | #![deny(improper_ctypes)]\n+LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^\n    = help: consider adding a #[repr(C)] or #[repr(transparent)] attribute to this struct\n note: type defined here\n   --> $DIR/lint-ctypes.rs:32:1\n    |\n-32 | pub struct Foo;\n+LL | pub struct Foo;\n    | ^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `Foo` which is not FFI-safe: this struct has unspecified layout\n   --> $DIR/lint-ctypes.rs:55:28\n    |\n-55 |     pub fn ptr_type2(size: *const Foo); //~ ERROR: uses type `Foo`\n+LL |     pub fn ptr_type2(size: *const Foo); //~ ERROR: uses type `Foo`\n    |                            ^^^^^^^^^^\n    |\n    = help: consider adding a #[repr(C)] or #[repr(transparent)] attribute to this struct\n note: type defined here\n   --> $DIR/lint-ctypes.rs:32:1\n    |\n-32 | pub struct Foo;\n+LL | pub struct Foo;\n    | ^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `[u32]` which is not FFI-safe: slices have no C equivalent\n   --> $DIR/lint-ctypes.rs:56:26\n    |\n-56 |     pub fn slice_type(p: &[u32]); //~ ERROR: uses type `[u32]`\n+LL |     pub fn slice_type(p: &[u32]); //~ ERROR: uses type `[u32]`\n    |                          ^^^^^^\n    |\n    = help: consider using a raw pointer instead\n \n error: `extern` block uses type `str` which is not FFI-safe: string slices have no C equivalent\n   --> $DIR/lint-ctypes.rs:57:24\n    |\n-57 |     pub fn str_type(p: &str); //~ ERROR: uses type `str`\n+LL |     pub fn str_type(p: &str); //~ ERROR: uses type `str`\n    |                        ^^^^\n    |\n    = help: consider using `*const u8` and a length instead\n \n error: `extern` block uses type `std::boxed::Box<u32>` which is not FFI-safe: this struct has unspecified layout\n   --> $DIR/lint-ctypes.rs:58:24\n    |\n-58 |     pub fn box_type(p: Box<u32>); //~ ERROR uses type `std::boxed::Box<u32>`\n+LL |     pub fn box_type(p: Box<u32>); //~ ERROR uses type `std::boxed::Box<u32>`\n    |                        ^^^^^^^^\n    |\n    = help: consider adding a #[repr(C)] or #[repr(transparent)] attribute to this struct\n \n error: `extern` block uses type `char` which is not FFI-safe: the `char` type has no C equivalent\n   --> $DIR/lint-ctypes.rs:59:25\n    |\n-59 |     pub fn char_type(p: char); //~ ERROR uses type `char`\n+LL |     pub fn char_type(p: char); //~ ERROR uses type `char`\n    |                         ^^^^\n    |\n    = help: consider using `u32` or `libc::wchar_t` instead\n \n error: `extern` block uses type `i128` which is not FFI-safe: 128-bit integers don't currently have a known stable ABI\n   --> $DIR/lint-ctypes.rs:60:25\n    |\n-60 |     pub fn i128_type(p: i128); //~ ERROR uses type `i128`\n+LL |     pub fn i128_type(p: i128); //~ ERROR uses type `i128`\n    |                         ^^^^\n \n error: `extern` block uses type `u128` which is not FFI-safe: 128-bit integers don't currently have a known stable ABI\n   --> $DIR/lint-ctypes.rs:61:25\n    |\n-61 |     pub fn u128_type(p: u128); //~ ERROR uses type `u128`\n+LL |     pub fn u128_type(p: u128); //~ ERROR uses type `u128`\n    |                         ^^^^\n \n error: `extern` block uses type `std::clone::Clone` which is not FFI-safe: trait objects have no C equivalent\n   --> $DIR/lint-ctypes.rs:62:26\n    |\n-62 |     pub fn trait_type(p: &Clone); //~ ERROR uses type `std::clone::Clone`\n+LL |     pub fn trait_type(p: &Clone); //~ ERROR uses type `std::clone::Clone`\n    |                          ^^^^^^\n \n error: `extern` block uses type `(i32, i32)` which is not FFI-safe: tuples have unspecified layout\n   --> $DIR/lint-ctypes.rs:63:26\n    |\n-63 |     pub fn tuple_type(p: (i32, i32)); //~ ERROR uses type `(i32, i32)`\n+LL |     pub fn tuple_type(p: (i32, i32)); //~ ERROR uses type `(i32, i32)`\n    |                          ^^^^^^^^^^\n    |\n    = help: consider using a struct instead\n \n error: `extern` block uses type `(i32, i32)` which is not FFI-safe: tuples have unspecified layout\n   --> $DIR/lint-ctypes.rs:64:27\n    |\n-64 |     pub fn tuple_type2(p: I32Pair); //~ ERROR uses type `(i32, i32)`\n+LL |     pub fn tuple_type2(p: I32Pair); //~ ERROR uses type `(i32, i32)`\n    |                           ^^^^^^^\n    |\n    = help: consider using a struct instead\n \n error: `extern` block uses type `ZeroSize` which is not FFI-safe: this struct has no fields\n   --> $DIR/lint-ctypes.rs:65:25\n    |\n-65 |     pub fn zero_size(p: ZeroSize); //~ ERROR struct has no fields\n+LL |     pub fn zero_size(p: ZeroSize); //~ ERROR struct has no fields\n    |                         ^^^^^^^^\n    |\n    = help: consider adding a member to this struct\n note: type defined here\n   --> $DIR/lint-ctypes.rs:28:1\n    |\n-28 | pub struct ZeroSize;\n+LL | pub struct ZeroSize;\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `ZeroSizeWithPhantomData` which is not FFI-safe: composed only of PhantomData\n   --> $DIR/lint-ctypes.rs:66:33\n    |\n-66 |     pub fn zero_size_phantom(p: ZeroSizeWithPhantomData); //~ ERROR composed only of PhantomData\n+LL |     pub fn zero_size_phantom(p: ZeroSizeWithPhantomData); //~ ERROR composed only of PhantomData\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `std::marker::PhantomData<bool>` which is not FFI-safe: composed only of PhantomData\n   --> $DIR/lint-ctypes.rs:68:12\n    |\n-68 |         -> ::std::marker::PhantomData<bool>; //~ ERROR: composed only of PhantomData\n+LL |         -> ::std::marker::PhantomData<bool>; //~ ERROR: composed only of PhantomData\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `fn()` which is not FFI-safe: this function pointer has Rust-specific calling convention\n   --> $DIR/lint-ctypes.rs:69:23\n    |\n-69 |     pub fn fn_type(p: RustFn); //~ ERROR function pointer has Rust-specific\n+LL |     pub fn fn_type(p: RustFn); //~ ERROR function pointer has Rust-specific\n    |                       ^^^^^^\n    |\n    = help: consider using an `fn \"extern\"(...) -> ...` function pointer instead\n \n error: `extern` block uses type `fn()` which is not FFI-safe: this function pointer has Rust-specific calling convention\n   --> $DIR/lint-ctypes.rs:70:24\n    |\n-70 |     pub fn fn_type2(p: fn()); //~ ERROR function pointer has Rust-specific\n+LL |     pub fn fn_type2(p: fn()); //~ ERROR function pointer has Rust-specific\n    |                        ^^^^\n    |\n    = help: consider using an `fn \"extern\"(...) -> ...` function pointer instead\n \n error: `extern` block uses type `std::boxed::Box<u32>` which is not FFI-safe: this struct has unspecified layout\n   --> $DIR/lint-ctypes.rs:71:28\n    |\n-71 |     pub fn fn_contained(p: RustBadRet); //~ ERROR: uses type `std::boxed::Box<u32>`\n+LL |     pub fn fn_contained(p: RustBadRet); //~ ERROR: uses type `std::boxed::Box<u32>`\n    |                            ^^^^^^^^^^\n    |\n    = help: consider adding a #[repr(C)] or #[repr(transparent)] attribute to this struct\n \n error: `extern` block uses type `i128` which is not FFI-safe: 128-bit integers don't currently have a known stable ABI\n   --> $DIR/lint-ctypes.rs:72:32\n    |\n-72 |     pub fn transparent_i128(p: TransparentI128); //~ ERROR: uses type `i128`\n+LL |     pub fn transparent_i128(p: TransparentI128); //~ ERROR: uses type `i128`\n    |                                ^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `str` which is not FFI-safe: string slices have no C equivalent\n   --> $DIR/lint-ctypes.rs:73:31\n    |\n-73 |     pub fn transparent_str(p: TransparentStr); //~ ERROR: uses type `str`\n+LL |     pub fn transparent_str(p: TransparentStr); //~ ERROR: uses type `str`\n    |                               ^^^^^^^^^^^^^^\n    |\n    = help: consider using `*const u8` and a length instead\n \n error: `extern` block uses type `std::boxed::Box<u32>` which is not FFI-safe: this struct has unspecified layout\n   --> $DIR/lint-ctypes.rs:74:30\n    |\n-74 |     pub fn transparent_fn(p: TransparentBadFn); //~ ERROR: uses type `std::boxed::Box<u32>`\n+LL |     pub fn transparent_fn(p: TransparentBadFn); //~ ERROR: uses type `std::boxed::Box<u32>`\n    |                              ^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding a #[repr(C)] or #[repr(transparent)] attribute to this struct"}, {"sha": "73a40a46c110bb72acc41c19a5b3b9b9506e38e6", "filename": "src/test/ui/lint-forbid-attr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Flint-forbid-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Flint-forbid-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint-forbid-attr.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0453]: allow(deprecated) overruled by outer forbid(deprecated)\n    |\n LL | #![forbid(deprecated)]\n    |           ---------- `forbid` level set here\n-12 | \n+LL | \n LL | #[allow(deprecated)]\n    |         ^^^^^^^^^^ overruled by previous forbid\n "}, {"sha": "933c191551dacfee78821a2847c3a05c19fe4071", "filename": "src/test/ui/lint-unconditional-recursion.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Flint-unconditional-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Flint-unconditional-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint-unconditional-recursion.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -18,10 +18,10 @@ error: function cannot return without recurring\n    |\n LL | fn baz() { //~ ERROR function cannot return without recurring\n    | ^^^^^^^^ cannot return without recurring\n-25 |     if true {\n+LL |     if true {\n LL |         baz()\n    |         ----- recursive call site\n-27 |     } else {\n+LL |     } else {\n LL |         baz()\n    |         ----- recursive call site\n    |\n@@ -32,7 +32,7 @@ error: function cannot return without recurring\n    |\n LL | fn quz() -> bool { //~ ERROR function cannot return without recurring\n    | ^^^^^^^^^^^^^^^^ cannot return without recurring\n-37 |     if true {\n+LL |     if true {\n LL |         while quz() {}\n    |               ----- recursive call site\n ...\n@@ -56,7 +56,7 @@ error: function cannot return without recurring\n    |\n LL |     fn bar(&self) { //~ ERROR function cannot return without recurring\n    |     ^^^^^^^^^^^^^ cannot return without recurring\n-54 |         loop {\n+LL |         loop {\n LL |             self.bar()\n    |             ---------- recursive call site\n    |\n@@ -87,7 +87,7 @@ error: function cannot return without recurring\n    |\n LL |     fn bar(&self) { //~ ERROR function cannot return without recurring\n    |     ^^^^^^^^^^^^^ cannot return without recurring\n-82 |         loop {\n+LL |         loop {\n LL |             Foo2::bar(self)\n    |             --------------- recursive call site\n    |"}, {"sha": "62bec0fe7b33e5e386624b06bbce061b1804b188", "filename": "src/test/ui/lint/outer-forbid.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Flint%2Fouter-forbid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Flint%2Fouter-forbid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fouter-forbid.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0453]: allow(unused_variables) overruled by outer forbid(unused)\n    |\n LL | #![forbid(unused, non_snake_case)]\n    |           ------ `forbid` level set here\n-18 | \n+LL | \n LL | #[allow(unused_variables)] //~ ERROR overruled\n    |         ^^^^^^^^^^^^^^^^ overruled by previous forbid\n "}, {"sha": "d1711be456bcc1667babc691e12d6ea7e376a4ed", "filename": "src/test/ui/lint/unreachable_pub-pub_crate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -116,7 +116,7 @@ LL |         ($visibility: vis, $name: ident) => { $visibility struct $name {} }\n    |                                               -----------^^^^^^^^^^^^^\n    |                                               |\n    |                                               help: consider restricting its visibility: `pub(crate)`\n-50 |     }\n+LL |     }\n LL |     define_empty_struct_with_visibility!(pub, Fluorine);\n    |     ---------------------------------------------------- in this macro invocation\n    |"}, {"sha": "1d693161108db03fe6d319e84de76c90d3c94d6e", "filename": "src/test/ui/lint/unreachable_pub.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -116,7 +116,7 @@ LL |         ($visibility: vis, $name: ident) => { $visibility struct $name {} }\n    |                                               -----------^^^^^^^^^^^^^\n    |                                               |\n    |                                               help: consider restricting its visibility: `crate`\n-45 |     }\n+LL |     }\n LL |     define_empty_struct_with_visibility!(pub, Fluorine);\n    |     ---------------------------------------------------- in this macro invocation\n    |"}, {"sha": "00624f7e5ca47217f3bb96c3d85971db5ba59f8a", "filename": "src/test/ui/lint/use_suggestion_json.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -374,13 +374,13 @@ LL |     let x: Iter;\n    |            ^^^^ not found in this scope\n help: possible candidates are found in other modules, you can import them into scope\n    |\n-20 | use std::collections::binary_heap::Iter;\n+LL | use std::collections::binary_heap::Iter;\n    |\n-20 | use std::collections::btree_map::Iter;\n+LL | use std::collections::btree_map::Iter;\n    |\n-20 | use std::collections::btree_set::Iter;\n+LL | use std::collections::btree_set::Iter;\n    |\n-20 | use std::collections::hash_map::Iter;\n+LL | use std::collections::hash_map::Iter;\n    |\n and 8 other candidates\n "}, {"sha": "0f04847df4cd4088c2af216e5eda626cfc71592e", "filename": "src/test/ui/loop-break-value-no-repeat.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Floop-break-value-no-repeat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Floop-break-value-no-repeat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floop-break-value-no-repeat.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ LL |         break 22 //~ ERROR `break` with value from a `for` loop\n    |         ^^^^^^^^ can only break with a value inside `loop`\n help: instead, use `break` on its own without a value inside this `for` loop\n    |\n-22 |         break //~ ERROR `break` with value from a `for` loop\n+LL |         break //~ ERROR `break` with value from a `for` loop\n    |         ^^^^^\n \n error: aborting due to previous error"}, {"sha": "d1b874ea99729e840aebce2870a5bb445157a43c", "filename": "src/test/ui/loops-reject-duplicate-labels.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Floops-reject-duplicate-labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Floops-reject-duplicate-labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops-reject-duplicate-labels.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -69,7 +69,7 @@ LL | / pub fn main() { //~ ERROR compilation successful\n LL | |     let s = S;\n LL | |     s.m1();\n LL | |     s.m2();\n-53 | |     foo();\n+LL | |     foo();\n LL | | }\n    | |_^\n "}, {"sha": "0cdd58fdbd75d077b97b8f48bc5fdab14cf92ca8", "filename": "src/test/ui/loops-reject-labels-shadowing-lifetimes.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Floops-reject-labels-shadowing-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Floops-reject-labels-shadowing-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops-reject-labels-shadowing-lifetimes.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -11,7 +11,7 @@ warning: label name `'bad` shadows a lifetime name that is already in scope\n    |\n LL |     impl<'bad, 'c> Struct<'bad, 'c> {\n    |          ---- first declared here\n-44 |         fn meth_bad(&self) {\n+LL |         fn meth_bad(&self) {\n LL |             'bad: loop { break 'bad; }\n    |             ^^^^ lifetime 'bad already in scope\n \n@@ -20,7 +20,7 @@ warning: label name `'bad` shadows a lifetime name that is already in scope\n    |\n LL |     impl<'b, 'bad> Struct<'b, 'bad> {\n    |              ---- first declared here\n-51 |         fn meth_bad2(&self) {\n+LL |         fn meth_bad2(&self) {\n LL |             'bad: loop { break 'bad; }\n    |             ^^^^ lifetime 'bad already in scope\n \n@@ -45,7 +45,7 @@ warning: label name `'bad` shadows a lifetime name that is already in scope\n    |\n LL |     impl <'bad, 'e> Enum<'bad, 'e> {\n    |           ---- first declared here\n-70 |         fn meth_bad(&self) {\n+LL |         fn meth_bad(&self) {\n LL |             'bad: loop { break 'bad; }\n    |             ^^^^ lifetime 'bad already in scope\n \n@@ -54,7 +54,7 @@ warning: label name `'bad` shadows a lifetime name that is already in scope\n    |\n LL |     impl <'d, 'bad> Enum<'d, 'bad> {\n    |               ---- first declared here\n-76 |         fn meth_bad2(&self) {\n+LL |         fn meth_bad2(&self) {\n LL |             'bad: loop { break 'bad; }\n    |             ^^^^ lifetime 'bad already in scope\n \n@@ -88,7 +88,7 @@ warning: label name `'bad` shadows a lifetime name that is already in scope\n    |\n LL |     trait HasDefaultMethod2<'a,'bad> {\n    |                                ---- first declared here\n-103|         fn meth_bad(&self) {\n+LL |         fn meth_bad(&self) {\n LL |             'bad: loop { break 'bad; }\n    |             ^^^^ lifetime 'bad already in scope\n "}, {"sha": "58fc3c3a65b01acc853e1283a8fa27579d85b4d8", "filename": "src/test/ui/macros/macro-backtrace-invalid-internals.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -35,7 +35,7 @@ LL |     real_method_stmt!();\n    |     -------------------- in this macro invocation\n help: you must specify a concrete type for this numeric value, like `f32`\n    |\n-51 |           2.0_f32.powi(2) //~ ERROR can't call method `powi` on ambiguous numeric type `{float}`\n+LL |           2.0_f32.powi(2) //~ ERROR can't call method `powi` on ambiguous numeric type `{float}`\n    |           ^^^^^^^\n \n error[E0599]: no method named `fake` found for type `{integer}` in the current scope\n@@ -75,7 +75,7 @@ LL |     let _ = real_method_expr!();\n    |             ------------------- in this macro invocation\n help: you must specify a concrete type for this numeric value, like `f32`\n    |\n-57 |           2.0_f32.powi(2) //~ ERROR can't call method `powi` on ambiguous numeric type `{float}`\n+LL |           2.0_f32.powi(2) //~ ERROR can't call method `powi` on ambiguous numeric type `{float}`\n    |           ^^^^^^^\n \n error: aborting due to 8 previous errors"}, {"sha": "46cb027c907218117022db2c5503022ea65e3b1a", "filename": "src/test/ui/mismatched_types/closure-arg-count-expected-type-issue-47244.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count-expected-type-issue-47244.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count-expected-type-issue-47244.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count-expected-type-issue-47244.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -1,13 +1,13 @@\n error[E0593]: closure is expected to take a single 2-tuple as argument, but it takes 2 distinct arguments\n   --> $DIR/closure-arg-count-expected-type-issue-47244.rs:24:14\n    |\n-24 |     m.iter().map( |_, b| {\n+LL |     m.iter().map( |_, b| {\n    |              ^^^  ------ takes 2 distinct arguments\n    |              |\n    |              expected closure that takes a single 2-tuple as argument\n help: change the closure to accept a tuple instead of individual arguments\n    |\n-24 |     m.iter().map( |(_, b)| {\n+LL |     m.iter().map( |(_, b)| {\n    |                   ^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "0370c2596cc41aa16c186d751d43b1f6cdaa4ca2", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -23,7 +23,7 @@ LL |     [1, 2, 3].sort_by(|(tuple, tuple2)| panic!());\n    |               expected closure that takes 2 distinct arguments\n help: change the closure to take multiple arguments instead of a single tuple\n    |\n-19 |     [1, 2, 3].sort_by(|tuple, tuple2| panic!());\n+LL |     [1, 2, 3].sort_by(|tuple, tuple2| panic!());\n    |                       ^^^^^^^^^^^^^^^\n \n error[E0593]: closure is expected to take 2 distinct arguments, but it takes a single 2-tuple as argument\n@@ -35,7 +35,7 @@ LL |     [1, 2, 3].sort_by(|(tuple, tuple2): (usize, _)| panic!());\n    |               expected closure that takes 2 distinct arguments\n help: change the closure to take multiple arguments instead of a single tuple\n    |\n-21 |     [1, 2, 3].sort_by(|tuple, tuple2| panic!());\n+LL |     [1, 2, 3].sort_by(|tuple, tuple2| panic!());\n    |                       ^^^^^^^^^^^^^^^\n \n error[E0593]: closure is expected to take 1 argument, but it takes 0 arguments\n@@ -61,7 +61,7 @@ LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|i, x| i);\n    |                                                     expected closure that takes a single 2-tuple as argument\n help: change the closure to accept a tuple instead of individual arguments\n    |\n-26 |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|(i, x)| i);\n+LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|(i, x)| i);\n    |                                                         ^^^^^^^^\n \n error[E0593]: closure is expected to take a single 2-tuple as argument, but it takes 2 distinct arguments\n@@ -73,7 +73,7 @@ LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|i: usize, x| i);\n    |                                                     expected closure that takes a single 2-tuple as argument\n help: change the closure to accept a tuple instead of individual arguments\n    |\n-28 |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|(i, x)| i);\n+LL |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|(i, x)| i);\n    |                                                         ^^^^^^^^\n \n error[E0593]: closure is expected to take a single 2-tuple as argument, but it takes 3 distinct arguments"}, {"sha": "75fb7b28a6ea2e62105e1da149f1965026499122", "filename": "src/test/ui/mismatched_types/recovered-block.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fmismatched_types%2Frecovered-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fmismatched_types%2Frecovered-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Frecovered-block.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ LL |     pub Foo { text }\n    |        ^\n help: add `struct` here to parse `Foo` as a public struct\n    |\n-23 |     pub struct Foo { text }\n+LL |     pub struct Foo { text }\n    |         ^^^^^^\n \n error: expected one of `(` or `<`, found `{`"}, {"sha": "cac85e7fbac1ceeada29995be613f7183f720339", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0631]: type mismatch in closure arguments\n    |\n LL |     let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n    |                       ----------------------------- found signature of `fn(usize, isize) -> _`\n-24 |     //~^ NOTE found signature of `fn(usize, isize) -> _`\n+LL |     //~^ NOTE found signature of `fn(usize, isize) -> _`\n LL |     let z = call_it(3, f);\n    |             ^^^^^^^ expected signature of `fn(isize, isize) -> _`\n    |"}, {"sha": "144eba8cb76955c5303e21a86c615762d0238ee1", "filename": "src/test/ui/nll/borrowed-match-issue-45045.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0503]: cannot use `e` because it was mutably borrowed\n    |\n LL |       let f = &mut e;\n    |               ------ borrow of `e` occurs here\n-23 |       let g = f;\n+LL |       let g = f;\n LL | /     match e { //~ cannot use `e` because it was mutably borrowed [E0503]\n LL | |         Xyz::A => println!(\"a\"),\n LL | |         //~^ cannot use `e` because it was mutably borrowed [E0503]"}, {"sha": "91f81783297515b998a548ef91e46f2334cd58bb", "filename": "src/test/ui/nll/borrowed-referent-issue-38899.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `*block.current` as immutable because it is also bor\n    |\n LL |     let x = &mut block;\n    |             ---------- mutable borrow occurs here\n-23 |     println!(\"{}\", x.current);\n+LL |     println!(\"{}\", x.current);\n LL |     let p: &'a u8 = &*block.current;\n    |                     ^^^^^^^^^^^^^^^ immutable borrow occurs here\n "}, {"sha": "316a918e4ee973d9114938d68dbc53f4d2406046", "filename": "src/test/ui/nll/capture-ref-in-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -6,7 +6,7 @@ LL |             y: &y,\n ...\n LL |     }\n    |     - borrowed value only lives until here\n-39 | \n+LL | \n LL |     deref(p);\n    |           - borrow later used here\n    |"}, {"sha": "93a7bab3386dd0f81c538621d02570cc23545522", "filename": "src/test/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -28,10 +28,10 @@ error[E0597]: `y` does not live long enough\n    |\n LL |         closure(&mut p, &y);\n    |                         ^^ borrowed value does not live long enough\n-38 |         //~^ ERROR `y` does not live long enough [E0597]\n+LL |         //~^ ERROR `y` does not live long enough [E0597]\n LL |     }\n    |     - borrowed value only lives until here\n-40 | \n+LL | \n LL |     deref(p);\n    |           - borrow later used here\n    |"}, {"sha": "b6c1d808ff5bcb0b1edb2650997771065f7f9690", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-nested.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -58,7 +58,7 @@ LL | |         };\n ...\n LL |       }\n    |       - borrowed value only lives until here\n-37 | \n+LL | \n LL |       deref(p);\n    |             - borrow later used here\n    |"}, {"sha": "3cb6524f3b485f2338d94ef334d8fd8e152ab6b7", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -35,7 +35,7 @@ LL |         let mut closure = || p = &y;\n ...\n LL |     }\n    |     - borrowed value only lives until here\n-37 | \n+LL | \n LL |     deref(p);\n    |           - borrow later used here\n    |"}, {"sha": "0c058e40a5086927d99222a31a43566385c060c0", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -17,7 +17,7 @@ LL | /         |_outlives1, _outlives2, _outlives3, x, y| {\n LL | |             // Only works if 'x: 'y:\n LL | |             let p = x.get();\n LL | |             //~^ WARN not reporting region error due to -Znll\n-57 | |             //~| ERROR does not outlive free region\n+LL | |             //~| ERROR does not outlive free region\n LL | |             demand_y(x, y, p)\n LL | |         },\n    | |_________^"}, {"sha": "798f222c136eff9f8debfcc215d59107c47c6a07", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -12,7 +12,7 @@ LL |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x,\n LL | |         //~^ ERROR lifetime mismatch\n LL | |\n LL | |         // Only works if 'x: 'y:\n-57 | |         demand_y(x, y, x.get()) //~ WARNING not reporting region error due to -Znll\n+LL | |         demand_y(x, y, x.get()) //~ WARNING not reporting region error due to -Znll\n LL | |     });\n    | |_____^\n    |"}, {"sha": "3131142ec73bfcda7e0ff840d3ff691c66117d50", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -12,7 +12,7 @@ LL |       establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n LL | |         //~^ ERROR does not outlive free region\n LL | |\n LL | |         // Only works if 'x: 'y:\n-49 | |         demand_y(x, y, x.get()) //~ WARNING not reporting region error due to -Znll\n+LL | |         demand_y(x, y, x.get()) //~ WARNING not reporting region error due to -Znll\n LL | |     });\n    | |_____^\n    |\n@@ -31,7 +31,7 @@ LL |       establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n LL | |         //~^ ERROR does not outlive free region\n LL | |\n LL | |         // Only works if 'x: 'y:\n-49 | |         demand_y(x, y, x.get()) //~ WARNING not reporting region error due to -Znll\n+LL | |         demand_y(x, y, x.get()) //~ WARNING not reporting region error due to -Znll\n LL | |     });\n    | |_____^\n "}, {"sha": "5b038653b606837d4cabf8afeb8be70ebd11bd42", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -12,7 +12,7 @@ LL |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x,\n LL | |         //~^ ERROR does not outlive free region\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n-52 | |         //~^ WARNING not reporting region error due to -Znll\n+LL | |         //~^ WARNING not reporting region error due to -Znll\n LL | |     });\n    | |_____^\n    |\n@@ -31,7 +31,7 @@ LL |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x,\n LL | |         //~^ ERROR does not outlive free region\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n-52 | |         //~^ WARNING not reporting region error due to -Znll\n+LL | |         //~^ WARNING not reporting region error due to -Znll\n LL | |     });\n    | |_____^\n "}, {"sha": "6eb0926b1c8357b0dc07a5417748727776876f3f", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -12,7 +12,7 @@ LL |       establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y|\n LL | |         //~^ ERROR lifetime mismatch\n LL | |\n LL | |         // Only works if 'x: 'y:\n-50 | |         demand_y(outlives1, outlives2, x.get()) //~ WARNING not reporting region error due to -Znll\n+LL | |         demand_y(outlives1, outlives2, x.get()) //~ WARNING not reporting region error due to -Znll\n LL | |     });\n    | |_____^\n    |"}, {"sha": "ce808f56b42974ee4bf4b8827ead3fe005adea46", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -18,7 +18,7 @@ LL |       establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n LL | |         //~^ WARN not reporting region error due to -Znll\n-49 | |         //~| ERROR does not outlive free region\n+LL | |         //~| ERROR does not outlive free region\n LL | |     });\n    | |_____^\n    |"}, {"sha": "547ff75bac62c5d363add30ef27f30262c2da0f0", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -18,7 +18,7 @@ LL |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x,\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n LL | |         //~^ WARN not reporting region error due to -Znll\n-53 | |         //~| ERROR does not outlive free region\n+LL | |         //~| ERROR does not outlive free region\n LL | |     });\n    | |_____^\n    |"}, {"sha": "37c9a10cf927384ebeedeafd85a3db45bcf63f39", "filename": "src/test/ui/nll/get_default.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fget_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fget_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fget_default.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -15,7 +15,7 @@ error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as imm\n    |\n LL |         match map.get() {\n    |               --- immutable borrow occurs here\n-43 |             Some(v) => {\n+LL |             Some(v) => {\n LL |                 map.set(String::new()); // Both AST and MIR error here\n    |                 ^^^ mutable borrow occurs here\n ...\n@@ -39,7 +39,7 @@ error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as imm\n    |\n LL |         match map.get() {\n    |               --- immutable borrow occurs here\n-43 |             Some(v) => {\n+LL |             Some(v) => {\n LL |                 map.set(String::new()); // Both AST and MIR error here\n    |                 ^^^ mutable borrow occurs here\n ..."}, {"sha": "4bcbb596e5c4b4e3451c014770b663ac1dddd042", "filename": "src/test/ui/nll/guarantor-issue-46974.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0506]: cannot assign to `*s` because it is borrowed\n    |\n LL |     let t = &mut *s; // this borrow should last for the entire function\n    |             ------- borrow of `*s` occurs here\n-18 |     let x = &t.0;\n+LL |     let x = &t.0;\n LL |     *s = (2,); //~ ERROR cannot assign to `*s`\n    |     ^^^^^^^^^ assignment to borrowed `*s` occurs here\n \n@@ -12,7 +12,7 @@ error[E0621]: explicit lifetime required in the type of `s`\n    |\n LL | fn bar(s: &Box<(i32,)>) -> &'static i32 {\n    |        - consider changing the type of `s` to `&'static std::boxed::Box<(i32,)>`\n-24 |     // FIXME(#46983): error message should be better\n+LL |     // FIXME(#46983): error message should be better\n LL |     &s.0 //~ ERROR explicit lifetime required in the type of `s` [E0621]\n    |     ^^^^ lifetime `'static` required\n "}, {"sha": "d34b8184e6d8dbb9c7951520a9304e0221c3c971", "filename": "src/test/ui/nll/maybe-initialized-drop-implicit-fragment-drop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-implicit-fragment-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-implicit-fragment-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-implicit-fragment-drop.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -6,7 +6,7 @@ LL |     let wrap = Wrap { p: &mut x };\n ...\n LL |     x = 1; //~ ERROR cannot assign to `x` because it is borrowed [E0506]\n    |     ^^^^^ assignment to borrowed `x` occurs here\n-33 |     // FIXME ^ Should not error in the future with implicit dtors, only manually implemented ones\n+LL |     // FIXME ^ Should not error in the future with implicit dtors, only manually implemented ones\n LL | }\n    | - borrow later used here, when `foo` is dropped\n "}, {"sha": "96eb2afd5b160af3321cd128cc6f3759eef4af6c", "filename": "src/test/ui/nll/maybe-initialized-drop-with-uninitialized-fragments.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-uninitialized-fragments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-uninitialized-fragments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-uninitialized-fragments.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -6,7 +6,7 @@ LL |     let wrap = Wrap { p: &mut x };\n ...\n LL |     x = 1; //~ ERROR cannot assign to `x` because it is borrowed [E0506]\n    |     ^^^^^ assignment to borrowed `x` occurs here\n-33 |     // FIXME ^ This currently errors and it should not.\n+LL |     // FIXME ^ This currently errors and it should not.\n LL | }\n    | - borrow later used here, when `foo` is dropped\n "}, {"sha": "f7e85e4277bafbd22456766dd3da644b0c257aed", "filename": "src/test/ui/nll/return-ref-mut-issue-46557.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0597]: borrowed value does not live long enough\n    |\n LL |     let ref mut x = 1234543; //~ ERROR borrowed value does not live long enough [E0597]\n    |                     ^^^^^^^ temporary value does not live long enough\n-18 |     x\n+LL |     x\n LL | }\n    | - temporary value only lives until here\n    |"}, {"sha": "e97392e597948dee33d9792ea359acd64dc393af", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -72,7 +72,7 @@ LL | / fn correct_region<'a, T>(x: Box<T>) -> Box<dyn Anything + 'a>\n LL | | where\n LL | |     T: 'a + Iterator,\n LL | | {\n-46 | |     with_signature(x, |mut y| Box::new(y.next()))\n+LL | |     with_signature(x, |mut y| Box::new(y.next()))\n LL | | }\n    | |_^\n    |\n@@ -146,7 +146,7 @@ LL | / fn outlives_region<'a, 'b, T>(x: Box<T>) -> Box<dyn Anything + 'a>\n LL | | where\n LL | |     T: 'b + Iterator,\n LL | |     'b: 'a,\n-64 | | {\n+LL | | {\n LL | |     with_signature(x, |mut y| Box::new(y.next()))\n LL | | }\n    | |_^"}, {"sha": "eb15d3b85d24f5d22e492f7338c8e1a2e558def0", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -157,7 +157,7 @@ LL | / fn elements_outlive<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b>,\n LL | |     'b: 'a,\n-90 | | {\n+LL | | {\n LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^"}, {"sha": "b124ac80004bfaaccc49a481305210c326d02a12", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-static-closure.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -48,7 +48,7 @@ LL | / fn no_relationships_early<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b>,\n LL | |     'a: 'a,\n-55 | | {\n+LL | | {\n LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n@@ -112,7 +112,7 @@ LL | / fn elements_outlive<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b>,\n LL | |     'b: 'a,\n-83 | | {\n+LL | | {\n LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^"}, {"sha": "6fb92d297480bc3db9136316f40986915a39e134", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -176,7 +176,7 @@ LL | / fn elements_outlive1<'a, 'b, 'c, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b, 'c>,\n LL | |     'b: 'a,\n-91 | | {\n+LL | | {\n LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n@@ -212,7 +212,7 @@ LL | / fn elements_outlive2<'a, 'b, 'c, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b, 'c>,\n LL | |     'c: 'a,\n-100| | {\n+LL | | {\n LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^\n@@ -285,7 +285,7 @@ LL | / fn two_regions_outlive<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b, 'b>,\n LL | |     'b: 'a,\n-119| | {\n+LL | | {\n LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n LL | | }\n    | |_^"}, {"sha": "443439298a362576fb55a9a41869ed05ef55ee49", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -37,7 +37,7 @@ LL | / fn generic<T>(value: T) {\n LL | |     let cell = Cell::new(&());\n LL | |     twice(cell, value, |a, b| invoke(a, b));\n LL | |     //~^ WARNING not reporting region error\n-37 | |     //\n+LL | |     //\n LL | |     // This error from the old region solver looks bogus.\n LL | | }\n    | |_^\n@@ -75,7 +75,7 @@ LL | / fn generic_fail<'a, T>(cell: Cell<&'a ()>, value: T) {\n LL | |     twice(cell, value, |a, b| invoke(a, b));\n LL | |     //~^ WARNING not reporting region error\n LL | |     //~| WARNING not reporting region error\n-46 | |     //~| ERROR the parameter type `T` may not live long enough\n+LL | |     //~| ERROR the parameter type `T` may not live long enough\n LL | | }\n    | |_^\n    |"}, {"sha": "6aa37311019b570ddbe274acc612287133d73260", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -130,7 +130,7 @@ LL |       with_signature(a, b, |x, y| {\n LL | |         //~^ ERROR the parameter type `T` may not live long enough\n LL | |         // See `correct_region`\n LL | |         require(&x, &y)\n-80 | |         //~^ WARNING not reporting region error due to -Znll\n+LL | |         //~^ WARNING not reporting region error due to -Znll\n LL | |     })\n    | |_____^\n    |"}, {"sha": "a342f51e2570f1832848255ae1ea668ca723d51d", "filename": "src/test/ui/region-borrow-params-issue-29793-small.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fregion-borrow-params-issue-29793-small.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fregion-borrow-params-issue-29793-small.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregion-borrow-params-issue-29793-small.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -59,7 +59,7 @@ LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x\n    |                 may outlive borrowed value `x`\n help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n-65 |         let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+LL |         let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n    |                 ^^^^^^^^^^^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `y`, which is owned by the current function\n@@ -71,7 +71,7 @@ LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x\n    |                 may outlive borrowed value `y`\n help: to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword\n    |\n-65 |         let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+LL |         let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n    |                 ^^^^^^^^^^^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n@@ -83,7 +83,7 @@ LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x\n    |                 may outlive borrowed value `x`\n help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n-76 |         let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+LL |         let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n    |                 ^^^^^^^^^^^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `y`, which is owned by the current function\n@@ -95,7 +95,7 @@ LL |         let f = |t: bool| if t { x } else { y }; // (separate errors for `x\n    |                 may outlive borrowed value `y`\n help: to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword\n    |\n-76 |         let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+LL |         let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n    |                 ^^^^^^^^^^^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n@@ -107,7 +107,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     may outlive borrowed value `x`\n help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n-100|             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n    |                     ^^^^^^^^^^^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `y`, which is owned by the current function\n@@ -119,7 +119,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     may outlive borrowed value `y`\n help: to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword\n    |\n-100|             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n    |                     ^^^^^^^^^^^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n@@ -131,7 +131,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     may outlive borrowed value `x`\n help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n-114|             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n    |                     ^^^^^^^^^^^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `y`, which is owned by the current function\n@@ -143,7 +143,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     may outlive borrowed value `y`\n help: to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword\n    |\n-114|             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n    |                     ^^^^^^^^^^^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n@@ -155,7 +155,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     may outlive borrowed value `x`\n help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n-142|             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n    |                     ^^^^^^^^^^^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `y`, which is owned by the current function\n@@ -167,7 +167,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     may outlive borrowed value `y`\n help: to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword\n    |\n-142|             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n    |                     ^^^^^^^^^^^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n@@ -179,7 +179,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     may outlive borrowed value `x`\n help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n-157|             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n    |                     ^^^^^^^^^^^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `y`, which is owned by the current function\n@@ -191,7 +191,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     may outlive borrowed value `y`\n help: to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword\n    |\n-157|             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n    |                     ^^^^^^^^^^^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n@@ -203,7 +203,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     may outlive borrowed value `x`\n help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n-185|             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n    |                     ^^^^^^^^^^^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `y`, which is owned by the current function\n@@ -215,7 +215,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     may outlive borrowed value `y`\n help: to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword\n    |\n-185|             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n    |                     ^^^^^^^^^^^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n@@ -227,7 +227,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     may outlive borrowed value `x`\n help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n    |\n-199|             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n    |                     ^^^^^^^^^^^^^^\n \n error[E0373]: closure may outlive the current function, but it borrows `y`, which is owned by the current function\n@@ -239,7 +239,7 @@ LL |             let f = |t: bool| if t { x } else { y }; // (separate errors fo\n    |                     may outlive borrowed value `y`\n help: to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword\n    |\n-199|             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n+LL |             let f = move |t: bool| if t { x } else { y }; // (separate errors for `x` vs `y`)\n    |                     ^^^^^^^^^^^^^^\n \n error: aborting due to 20 previous errors"}, {"sha": "16bec5ee218a2e8d88ddc7b4d2d95afd6765769b", "filename": "src/test/ui/regions-nested-fns-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fregions-nested-fns-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fregions-nested-fns-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions-nested-fns-2.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,12 +3,12 @@ error[E0373]: closure may outlive the current function, but it borrows `y`, whic\n    |\n LL |         |z| {\n    |         ^^^ may outlive borrowed value `y`\n-17 |             //~^ ERROR E0373\n+LL |             //~^ ERROR E0373\n LL |             if false { &y } else { z }\n    |                         - `y` is borrowed here\n help: to force the closure to take ownership of `y` (and any other referenced variables), use the `move` keyword\n    |\n-16 |         move |z| {\n+LL |         move |z| {\n    |         ^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "73e3e96113758b40b0d2abf1fe73666977339c81", "filename": "src/test/ui/resolve-conflict-item-vs-import.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fresolve-conflict-item-vs-import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fresolve-conflict-item-vs-import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve-conflict-item-vs-import.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,14 +3,14 @@ error[E0255]: the name `transmute` is defined multiple times\n    |\n LL | use std::mem::transmute;\n    |     ------------------- previous import of the value `transmute` here\n-12 | \n+LL | \n LL | fn transmute() {}\n    | ^^^^^^^^^^^^^^ `transmute` redefined here\n    |\n    = note: `transmute` must be defined only once in the value namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-11 | use std::mem::transmute as other_transmute;\n+LL | use std::mem::transmute as other_transmute;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "df65f5dddeddf92877f4276293e2269902d85c3d", "filename": "src/test/ui/resolve/enums-are-namespaced-xc.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ LL |     let _ = namespaced_enums::A;\n    |                               ^ not found in `namespaced_enums`\n help: possible candidate is found in another module, you can import it into scope\n    |\n-14 | use namespaced_enums::Foo::A;\n+LL | use namespaced_enums::Foo::A;\n    |\n \n error[E0425]: cannot find function `B` in module `namespaced_enums`\n@@ -15,7 +15,7 @@ LL |     let _ = namespaced_enums::B(10);\n    |                               ^ not found in `namespaced_enums`\n help: possible candidate is found in another module, you can import it into scope\n    |\n-14 | use namespaced_enums::Foo::B;\n+LL | use namespaced_enums::Foo::B;\n    |\n \n error[E0422]: cannot find struct, variant or union type `C` in module `namespaced_enums`\n@@ -25,7 +25,7 @@ LL |     let _ = namespaced_enums::C { a: 10 };\n    |                               ^ not found in `namespaced_enums`\n help: possible candidate is found in another module, you can import it into scope\n    |\n-14 | use namespaced_enums::Foo::C;\n+LL | use namespaced_enums::Foo::C;\n    |\n \n error: aborting due to 3 previous errors"}, {"sha": "36c62408de783c9cc3fb316f4ce1d083163595f5", "filename": "src/test/ui/resolve/issue-16058.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fresolve%2Fissue-16058.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fresolve%2Fissue-16058.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-16058.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,11 +5,11 @@ LL |         Result {\n    |         ^^^^^^ not a struct, variant or union type\n help: possible better candidates are found in other modules, you can import them into scope\n    |\n-12 | use std::fmt::Result;\n+LL | use std::fmt::Result;\n    |\n-12 | use std::io::Result;\n+LL | use std::io::Result;\n    |\n-12 | use std::thread::Result;\n+LL | use std::thread::Result;\n    |\n \n error: aborting due to previous error"}, {"sha": "c5d8f457ec749b521e0525fe63100f68681a297b", "filename": "src/test/ui/resolve/issue-17518.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fresolve%2Fissue-17518.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fresolve%2Fissue-17518.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-17518.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ LL |     E { name: \"foobar\" }; //~ ERROR cannot find struct, variant or union ty\n    |     ^ not found in this scope\n help: possible candidate is found in another module, you can import it into scope\n    |\n-11 | use SomeEnum::E;\n+LL | use SomeEnum::E;\n    |\n \n error: aborting due to previous error"}, {"sha": "8056a47b464c2ab32ff88089077155fd0e6f20da", "filename": "src/test/ui/resolve/issue-21221-1.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,11 +5,11 @@ LL | impl Mul for Foo {\n    |      ^^^ not found in this scope\n help: possible candidates are found in other modules, you can import them into scope\n    |\n-11 | use mul1::Mul;\n+LL | use mul1::Mul;\n    |\n-11 | use mul2::Mul;\n+LL | use mul2::Mul;\n    |\n-11 | use std::ops::Mul;\n+LL | use std::ops::Mul;\n    |\n \n error[E0412]: cannot find type `Mul` in this scope\n@@ -19,13 +19,13 @@ LL | fn getMul() -> Mul {\n    |                ^^^ not found in this scope\n help: possible candidates are found in other modules, you can import them into scope\n    |\n-11 | use mul1::Mul;\n+LL | use mul1::Mul;\n    |\n-11 | use mul2::Mul;\n+LL | use mul2::Mul;\n    |\n-11 | use mul3::Mul;\n+LL | use mul3::Mul;\n    |\n-11 | use mul4::Mul;\n+LL | use mul4::Mul;\n    |\n and 2 other candidates\n \n@@ -42,7 +42,7 @@ LL | impl Div for Foo {\n    |      ^^^ not found in this scope\n help: possible candidate is found in another module, you can import it into scope\n    |\n-11 | use std::ops::Div;\n+LL | use std::ops::Div;\n    |\n \n error: cannot continue compilation due to previous error"}, {"sha": "398c85920fd2a49c2933f6ab7e6a5a8d38c2f444", "filename": "src/test/ui/resolve/issue-21221-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ LL | impl T for Foo { }\n    |      ^ not found in this scope\n help: possible candidate is found in another module, you can import it into scope\n    |\n-11 | use foo::bar::T;\n+LL | use foo::bar::T;\n    |\n \n error[E0601]: main function not found"}, {"sha": "75601e932dfadb1d0c858a463f5e2d8b1b20f77f", "filename": "src/test/ui/resolve/issue-21221-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-3.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ LL | impl OuterTrait for Foo {}\n    |      ^^^^^^^^^^ not found in this scope\n help: possible candidate is found in another module, you can import it into scope\n    |\n-18 | use issue_21221_3::outer::OuterTrait;\n+LL | use issue_21221_3::outer::OuterTrait;\n    |\n \n error: cannot continue compilation due to previous error"}, {"sha": "10dcf0aa3b9ee42935ff25983abc911e3577ec5b", "filename": "src/test/ui/resolve/issue-21221-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-4.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ LL | impl T for Foo {}\n    |      ^ not found in this scope\n help: possible candidate is found in another module, you can import it into scope\n    |\n-18 | use issue_21221_4::T;\n+LL | use issue_21221_4::T;\n    |\n \n error: cannot continue compilation due to previous error"}, {"sha": "80ee2e028ebb99eba1c56051404b8ba4fce6cb5d", "filename": "src/test/ui/resolve/issue-3907.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fresolve%2Fissue-3907.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fresolve%2Fissue-3907.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-3907.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ LL | impl Foo for S { //~ ERROR expected trait, found type alias `Foo`\n    |      ^^^ type aliases cannot be used for traits\n help: possible better candidate is found in another module, you can import it into scope\n    |\n-14 | use issue_3907::Foo;\n+LL | use issue_3907::Foo;\n    |\n \n error: cannot continue compilation due to previous error"}, {"sha": "7af2f5931dc82b91c6cdc2a76a5f78a11e69c5a6", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -40,9 +40,9 @@ LL |     let _: E = m::E;\n            - `E::Unit`\n help: possible better candidates are found in other modules, you can import them into scope\n    |\n-48 | use std::f32::consts::E;\n+LL | use std::f32::consts::E;\n    |\n-48 | use std::f64::consts::E;\n+LL | use std::f64::consts::E;\n    |\n \n error[E0423]: expected value, found struct variant `m::E::Struct`\n@@ -63,9 +63,9 @@ LL |     let _: E = E;\n            - `E::Unit`\n help: possible better candidates are found in other modules, you can import them into scope\n    |\n-48 | use std::f32::consts::E;\n+LL | use std::f32::consts::E;\n    |\n-48 | use std::f64::consts::E;\n+LL | use std::f64::consts::E;\n    |\n \n error[E0423]: expected value, found struct variant `E::Struct`\n@@ -81,7 +81,7 @@ LL |     let _: Z = m::n::Z;\n    |            ^ did you mean `E`?\n help: possible candidate is found in another module, you can import it into scope\n    |\n-48 | use m::n::Z;\n+LL | use m::n::Z;\n    |\n \n error[E0423]: expected value, found enum `m::n::Z`\n@@ -102,7 +102,7 @@ LL |     let _: Z = m::n::Z::Fn;\n    |            ^ did you mean `E`?\n help: possible candidate is found in another module, you can import it into scope\n    |\n-48 | use m::n::Z;\n+LL | use m::n::Z;\n    |\n \n error[E0412]: cannot find type `Z` in this scope\n@@ -112,7 +112,7 @@ LL |     let _: Z = m::n::Z::Struct;\n    |            ^ did you mean `E`?\n help: possible candidate is found in another module, you can import it into scope\n    |\n-48 | use m::n::Z;\n+LL | use m::n::Z;\n    |\n \n error[E0423]: expected value, found struct variant `m::n::Z::Struct`\n@@ -128,7 +128,7 @@ LL |     let _: Z = m::n::Z::Unit {};\n    |            ^ did you mean `E`?\n help: possible candidate is found in another module, you can import it into scope\n    |\n-48 | use m::n::Z;\n+LL | use m::n::Z;\n    |\n \n error[E0603]: enum `Z` is private\n@@ -174,7 +174,7 @@ LL |         let _ = Z::Unit();\n    |                 ^^^^^^^^^ not a function\n help: `Z::Unit` is a unit variant, you need to write it without the parenthesis\n    |\n-41 |         let _ = Z::Unit;\n+LL |         let _ = Z::Unit;\n    |                 ^^^^^^^\n \n error[E0308]: mismatched types\n@@ -196,7 +196,7 @@ LL |     let _: E = m::E::Unit();\n    |                ^^^^^^^^^^^^ not a function\n help: `m::E::Unit` is a unit variant, you need to write it without the parenthesis\n    |\n-57 |     let _: E = m::E::Unit;\n+LL |     let _: E = m::E::Unit;\n    |                ^^^^^^^^^^\n \n error[E0308]: mismatched types\n@@ -218,7 +218,7 @@ LL |     let _: E = E::Unit();\n    |                ^^^^^^^^^ not a function\n help: `E::Unit` is a unit variant, you need to write it without the parenthesis\n    |\n-65 |     let _: E = E::Unit;\n+LL |     let _: E = E::Unit;\n    |                ^^^^^^^\n \n error: aborting due to 23 previous errors"}, {"sha": "ddd8f238e87220bbfa57eb04918362be558eeca7", "filename": "src/test/ui/resolve/privacy-struct-ctor.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -8,7 +8,7 @@ LL |         Z;\n    |         constructor is not visible here due to private fields\n help: possible better candidate is found in another module, you can import it into scope\n    |\n-25 |     use m::n::Z;\n+LL |     use m::n::Z;\n    |\n \n error[E0423]: expected value, found struct `S`\n@@ -18,7 +18,7 @@ LL |     S;\n    |     ^ constructor is not visible here due to private fields\n help: possible better candidate is found in another module, you can import it into scope\n    |\n-35 | use m::S;\n+LL | use m::S;\n    |\n \n error[E0423]: expected value, found struct `S2`\n@@ -34,7 +34,7 @@ LL |     xcrate::S;\n    |     ^^^^^^^^^ constructor is not visible here due to private fields\n help: possible better candidate is found in another module, you can import it into scope\n    |\n-35 | use m::S;\n+LL | use m::S;\n    |\n \n error[E0603]: tuple struct `Z` is private"}, {"sha": "da2ea67ad08f6cf573977df43f955d83cd22bd03", "filename": "src/test/ui/resolve/use_suggestion_placement.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ LL |     type Bar = Path; //~ ERROR cannot find\n    |                ^^^^ not found in this scope\n help: possible candidate is found in another module, you can import it into scope\n    |\n-23 |     use std::path::Path;\n+LL |     use std::path::Path;\n    |\n \n error[E0425]: cannot find value `A` in this scope\n@@ -15,7 +15,7 @@ LL |     let _ = A; //~ ERROR cannot find\n    |             ^ not found in this scope\n help: possible candidate is found in another module, you can import it into scope\n    |\n-13 | use m::A;\n+LL | use m::A;\n    |\n \n error[E0412]: cannot find type `HashMap` in this scope\n@@ -25,9 +25,9 @@ LL |     type Dict<K, V> = HashMap<K, V>; //~ ERROR cannot find\n    |                       ^^^^^^^ not found in this scope\n help: possible candidates are found in other modules, you can import them into scope\n    |\n-13 | use std::collections::HashMap;\n+LL | use std::collections::HashMap;\n    |\n-13 | use std::collections::hash_map::HashMap;\n+LL | use std::collections::hash_map::HashMap;\n    |\n \n error: aborting due to 3 previous errors"}, {"sha": "1c03cfe0e9e0dbef2ef7ce1ed8af1dae9470b8a7", "filename": "src/test/ui/span/E0072.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2FE0072.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2FE0072.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0072.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0072]: recursive type `ListNode` has infinite size\n    |\n LL | struct ListNode { //~ ERROR has infinite size\n    | ^^^^^^^^^^^^^^^ recursive type has infinite size\n-12 |     head: u8,\n+LL |     head: u8,\n LL |     tail: Option<ListNode>,\n    |     ---------------------- recursive without indirection\n    |"}, {"sha": "aa21c6762e7b3bcc2fce54ebdbbf722d556775c8", "filename": "src/test/ui/span/E0204.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2FE0204.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2FE0204.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0204.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -12,7 +12,7 @@ error[E0204]: the trait `Copy` may not be implemented for this type\n    |\n LL | #[derive(Copy)] //~ ERROR may not be implemented for this type\n    |          ^^^^\n-18 | struct Foo2<'a> {\n+LL | struct Foo2<'a> {\n LL |     ty: &'a mut bool,\n    |     ---------------- this field does not implement `Copy`\n \n@@ -30,7 +30,7 @@ error[E0204]: the trait `Copy` may not be implemented for this type\n    |\n LL | #[derive(Copy)] //~ ERROR may not be implemented for this type\n    |          ^^^^\n-30 | enum EFoo2<'a> {\n+LL | enum EFoo2<'a> {\n LL |     Bar(&'a mut bool),\n    |         ------------- this field does not implement `Copy`\n "}, {"sha": "a06b7097ee3776535088590b8823eedd9d9e8c6d", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ LL |     f(Box::new(|| {\n    |     -          ^^ second mutable borrow occurs here\n    |     |\n    |     first mutable borrow occurs here\n-23 |     //~^ ERROR: cannot borrow `f` as mutable more than once\n+LL |     //~^ ERROR: cannot borrow `f` as mutable more than once\n LL |         f((Box::new(|| {})))\n    |         - borrow occurs due to use of `f` in closure\n LL |     }));\n@@ -40,7 +40,7 @@ error[E0507]: cannot move out of captured outer variable in an `FnMut` closure\n    |\n LL |     let mut f = |g: Box<FnMut(isize)>, b: isize| {};\n    |         ----- captured outer variable\n-62 |     f(Box::new(|a| {\n+LL |     f(Box::new(|a| {\n LL |         foo(f);\n    |             ^ cannot move out of captured outer variable in an `FnMut` closure\n "}, {"sha": "8111f80690aa0123e9c0d1fd2e29621c90ecebd2", "filename": "src/test/ui/span/borrowck-call-method-from-mut-aliasable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow immutable borrowed content `*x` as mutable\n    |\n LL | fn b(x: &Foo) {\n    |         ---- use `&mut Foo` here to make mutable\n-26 |     x.f();\n+LL |     x.f();\n LL |     x.h(); //~ ERROR cannot borrow\n    |     ^ cannot borrow as mutable\n "}, {"sha": "2f1a6c631412b27f84c3fec29d1b905d62f2b76f", "filename": "src/test/ui/span/borrowck-object-mutability.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow immutable borrowed content `*x` as mutable\n    |\n LL | fn borrowed_receiver(x: &Foo) {\n    |                         ---- use `&mut Foo` here to make mutable\n-18 |     x.borrowed();\n+LL |     x.borrowed();\n LL |     x.borrowed_mut(); //~ ERROR cannot borrow\n    |     ^ cannot borrow as mutable\n \n@@ -12,7 +12,7 @@ error[E0596]: cannot borrow immutable `Box` content `*x` as mutable\n    |\n LL | fn owned_receiver(x: Box<Foo>) {\n    |                   - consider changing this to `mut x`\n-28 |     x.borrowed();\n+LL |     x.borrowed();\n LL |     x.borrowed_mut(); //~ ERROR cannot borrow\n    |     ^ cannot borrow as mutable\n "}, {"sha": "cf423c278e127d7c9ccde8ee5be72628d1b24d8f", "filename": "src/test/ui/span/borrowck-ref-into-rvalue.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -6,7 +6,7 @@ LL |         Some(ref m) => {\n ...\n LL |     }\n    |     - borrowed value dropped here while still borrowed\n-20 |     println!(\"{}\", *msg);\n+LL |     println!(\"{}\", *msg);\n LL | }\n    | - borrowed value needs to live until here\n    |"}, {"sha": "5e6512c06bf41a961ff31870e80f2b139671a0eb", "filename": "src/test/ui/span/dropck_arr_cycle_checked.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_arr_cycle_checked.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -58,7 +58,7 @@ error[E0597]: `b2` does not live long enough\n    |\n LL |     b3.a[1].v.set(Some(&b2));\n    |                         ^^ borrowed value does not live long enough\n-114|     //~^ ERROR `b2` does not live long enough\n+LL |     //~^ ERROR `b2` does not live long enough\n LL | }\n    | - `b2` dropped here while still borrowed\n    |"}, {"sha": "cf507df4e81977e77ee8e226159695a464ebedc5", "filename": "src/test/ui/span/dropck_direct_cycle_with_drop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_direct_cycle_with_drop.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -14,7 +14,7 @@ error[E0597]: `d1` does not live long enough\n    |\n LL |     d2.p.set(Some(&d1));\n    |                    ^^ borrowed value does not live long enough\n-49 |     //~^ ERROR `d1` does not live long enough\n+LL |     //~^ ERROR `d1` does not live long enough\n LL | }\n    | - `d1` dropped here while still borrowed\n    |"}, {"sha": "f4ab3293543cce303c3943b98842b559c9ecd95a", "filename": "src/test/ui/span/dropck_vec_cycle_checked.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdropck_vec_cycle_checked.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -58,7 +58,7 @@ error[E0597]: `c2` does not live long enough\n    |\n LL |     c3.v[1].v.set(Some(&c2));\n    |                         ^^ borrowed value does not live long enough\n-121|     //~^ ERROR `c2` does not live long enough\n+LL |     //~^ ERROR `c2` does not live long enough\n LL | }\n    | - `c2` dropped here while still borrowed\n    |"}, {"sha": "6a4ec73b27a66df0ef71e0da98076e36a856d6c2", "filename": "src/test/ui/span/issue-24690.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -32,7 +32,7 @@ LL | / fn main() { //~ ERROR compilation successful\n LL | |     let theTwo = 2; //~ WARN should have a snake case name\n LL | |     let theOtherTwo = 2; //~ WARN should have a snake case name\n LL | |     //~^ WARN unused variable\n-25 | |     println!(\"{}\", theTwo);\n+LL | |     println!(\"{}\", theTwo);\n LL | | }\n    | |_^\n "}, {"sha": "fe2df9ce711309c3b7d37af38f3a29b88aa9117d", "filename": "src/test/ui/span/issue-25199.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fissue-25199.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fissue-25199.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-25199.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -14,7 +14,7 @@ error[E0597]: `container` does not live long enough\n    |\n LL |     container.store(test);\n    |     ^^^^^^^^^ borrowed value does not live long enough\n-84 |     //~^ ERROR `container` does not live long enough\n+LL |     //~^ ERROR `container` does not live long enough\n LL | }\n    | - `container` dropped here while still borrowed\n    |"}, {"sha": "596f2d76da6bfe3377dc0f00973a875b52733b0c", "filename": "src/test/ui/span/issue-35987.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ LL | impl<T: Clone, Add> Add for Foo<T> {\n    |                     ^^^ not a trait\n help: possible better candidate is found in another module, you can import it into scope\n    |\n-13 | use std::ops::Add;\n+LL | use std::ops::Add;\n    |\n \n error[E0601]: main function not found"}, {"sha": "058e83ba4fdfa2412db57adec70afdbb1a945796", "filename": "src/test/ui/span/issue-36537.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fissue-36537.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fissue-36537.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-36537.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0597]: `a` does not live long enough\n    |\n LL |     p = &a;\n    |          ^ borrowed value does not live long enough\n-15 |     //~^ ERROR `a` does not live long enough\n+LL |     //~^ ERROR `a` does not live long enough\n LL | }\n    | - `a` dropped here while still borrowed\n    |"}, {"sha": "9811d115c801b82a1640ea431f52bd476dc69e5a", "filename": "src/test/ui/span/issue-39018.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ LL |     let x = \"Hello \" + \"World!\";\n    |             ^^^^^^^^^^^^^^^^^^^ `+` can't be used to concatenate two `&str` strings\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n-12 |     let x = \"Hello \".to_owned() + \"World!\";\n+LL |     let x = \"Hello \".to_owned() + \"World!\";\n    |             ^^^^^^^^^^^^^^^^^^^\n \n error[E0369]: binary operation `+` cannot be applied to type `World`"}, {"sha": "adbbd676615429b7698c5535c0d0b4945f309b5f", "filename": "src/test/ui/span/issue28498-reject-ex1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue28498-reject-ex1.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -14,7 +14,7 @@ error[E0597]: `foo.data` does not live long enough\n    |\n LL |     foo.data[1].1.set(Some(&foo.data[0]));\n    |                             ^^^^^^^^ borrowed value does not live long enough\n-47 |     //~^ ERROR `foo.data` does not live long enough\n+LL |     //~^ ERROR `foo.data` does not live long enough\n LL | }\n    | - `foo.data` dropped here while still borrowed\n    |"}, {"sha": "f85ca4ef00f8dda9729eb3b57bd712d7e469a0c6", "filename": "src/test/ui/span/lint-unused-unsafe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -59,7 +59,7 @@ error: unnecessary `unsafe` block\n    |\n LL | unsafe fn bad7() {\n    | ---------------- because it's nested under this `unsafe` fn\n-39 |     unsafe {                             //~ ERROR: unnecessary `unsafe` block\n+LL |     unsafe {                             //~ ERROR: unnecessary `unsafe` block\n LL |         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n    |         ^^^^^^ unnecessary `unsafe` block\n "}, {"sha": "a7417b006ad4cb09bc92270bc58a23501834d347", "filename": "src/test/ui/span/missing-unit-argument.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ LL |     let _: Result<(), String> = Ok(); //~ ERROR this function takes\n    |                                 ^^^^\n help: expected the unit value `()`; create it with empty parentheses\n    |\n-21 |     let _: Result<(), String> = Ok(()); //~ ERROR this function takes\n+LL |     let _: Result<(), String> = Ok(()); //~ ERROR this function takes\n    |                                    ^^\n \n error[E0061]: this function takes 2 parameters but 0 parameters were supplied\n@@ -36,7 +36,7 @@ LL |     bar(); //~ ERROR this function takes\n    |     ^^^^^\n help: expected the unit value `()`; create it with empty parentheses\n    |\n-24 |     bar(()); //~ ERROR this function takes\n+LL |     bar(()); //~ ERROR this function takes\n    |         ^^\n \n error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n@@ -49,7 +49,7 @@ LL |     S.baz(); //~ ERROR this function takes\n    |       ^^^\n help: expected the unit value `()`; create it with empty parentheses\n    |\n-25 |     S.baz(()); //~ ERROR this function takes\n+LL |     S.baz(()); //~ ERROR this function takes\n    |           ^^\n \n error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n@@ -62,7 +62,7 @@ LL |     S.generic::<()>(); //~ ERROR this function takes\n    |       ^^^^^^^\n help: expected the unit value `()`; create it with empty parentheses\n    |\n-26 |     S.generic::<()>(()); //~ ERROR this function takes\n+LL |     S.generic::<()>(()); //~ ERROR this function takes\n    |                     ^^\n \n error: aborting due to 6 previous errors"}, {"sha": "15694106fe8dca1efe9279b4703336e57bc5bfd2", "filename": "src/test/ui/span/mut-ptr-cant-outlive-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ LL |         p = &*b;\n    |               ^ borrowed value does not live long enough\n LL |     }\n    |     - `b` dropped here while still borrowed\n-20 |     //~^^ ERROR `b` does not live long enough\n+LL |     //~^^ ERROR `b` does not live long enough\n LL | }\n    | - borrowed value needs to live until here\n "}, {"sha": "40819e2e8baa69534816647acfa5b76b33c525f0", "filename": "src/test/ui/span/pub-struct-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fpub-struct-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fpub-struct-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fpub-struct-field.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -11,7 +11,7 @@ error[E0124]: field `bar` is already declared\n    |\n LL |     bar: u8,\n    |     ------- `bar` first declared here\n-16 |     pub bar: u8, //~ ERROR is already declared\n+LL |     pub bar: u8, //~ ERROR is already declared\n LL |     pub(crate) bar: u8, //~ ERROR is already declared\n    |     ^^^^^^^^^^^^^^^^^^ field already declared\n "}, {"sha": "9e8c4000d064bf49a510d84f5fcd57a2e0d4b90e", "filename": "src/test/ui/span/regions-close-over-type-parameter-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-type-parameter-2.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0597]: `tmp0` does not live long enough\n    |\n LL |         let tmp1 = &tmp0;\n    |                     ^^^^ borrowed value does not live long enough\n-34 |         repeater3(tmp1)\n+LL |         repeater3(tmp1)\n LL |     };\n    |     -- borrowed value needs to live until here\n    |     |"}, {"sha": "1bc8e996d0137bcf58b9d0b1dbd54aad9e814f6c", "filename": "src/test/ui/span/regions-escape-loop-via-variable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-variable.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ LL |         p = &x;\n    |              ^ borrowed value does not live long enough\n LL |     }\n    |     - `x` dropped here while still borrowed\n-23 |     //~^^ ERROR `x` does not live long enough\n+LL |     //~^^ ERROR `x` does not live long enough\n LL | }\n    | - borrowed value needs to live until here\n "}, {"sha": "2cb8df235b4bf4da5d06fb96435a2d21b3b800a5", "filename": "src/test/ui/span/regions-escape-loop-via-vec.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -22,7 +22,7 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n    |\n LL |     let mut _y = vec![&mut x];\n    |                            - borrow of `x` occurs here\n-15 |     while x < 10 { //~ ERROR cannot use `x` because it was mutably borrowed\n+LL |     while x < 10 { //~ ERROR cannot use `x` because it was mutably borrowed\n LL |         let mut z = x; //~ ERROR cannot use `x` because it was mutably borrowed\n    |             ^^^^^ use of borrowed `x`\n "}, {"sha": "42240509a9ea813510367d9e6a441a5892e4d580", "filename": "src/test/ui/span/regions-infer-borrow-scope-within-loop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fregions-infer-borrow-scope-within-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fregions-infer-borrow-scope-within-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-infer-borrow-scope-within-loop.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -6,7 +6,7 @@ LL |         y = borrow(&*x);\n ...\n LL |     }\n    |     - `*x` dropped here while still borrowed\n-30 |     assert!(*y != 0);\n+LL |     assert!(*y != 0);\n LL | }\n    | - borrowed value needs to live until here\n "}, {"sha": "ed6363a2e3307445a85d0a95dddcca8be4da73bc", "filename": "src/test/ui/span/send-is-not-static-std-sync-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync-2.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -25,7 +25,7 @@ error[E0597]: `x` does not live long enough\n    |\n LL |         let _ = tx.send(&x);\n    |                          ^ borrowed value does not live long enough\n-42 |         (tx, rx)\n+LL |         (tx, rx)\n LL |     };\n    |     - `x` dropped here while still borrowed\n ..."}, {"sha": "ffaccf010a9dfcb5ecda818c4bff69479ee58e76", "filename": "src/test/ui/span/send-is-not-static-std-sync.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ LL |         *lock.lock().unwrap() = &z;\n    |                                  ^ borrowed value does not live long enough\n LL |     }\n    |     - `z` dropped here while still borrowed\n-28 |     //~^^ ERROR `z` does not live long enough\n+LL |     //~^^ ERROR `z` does not live long enough\n LL | }\n    | - borrowed value needs to live until here\n \n@@ -24,7 +24,7 @@ LL |         *lock.write().unwrap() = &z;\n    |                                   ^ borrowed value does not live long enough\n LL |     }\n    |     - `z` dropped here while still borrowed\n-41 |     //~^^ ERROR `z` does not live long enough\n+LL |     //~^^ ERROR `z` does not live long enough\n LL | }\n    | - borrowed value needs to live until here\n \n@@ -43,7 +43,7 @@ LL |         tx.send(&z).unwrap();\n    |                  ^ borrowed value does not live long enough\n LL |     }\n    |     - `z` dropped here while still borrowed\n-56 |     //~^^ ERROR `z` does not live long enough\n+LL |     //~^^ ERROR `z` does not live long enough\n LL | }\n    | - borrowed value needs to live until here\n "}, {"sha": "3cc791a05800d1c8ddfab535f18f2608f397d91b", "filename": "src/test/ui/span/slice-borrow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0597]: borrowed value does not live long enough\n    |\n LL |         let x: &[isize] = &vec![1, 2, 3, 4, 5];\n    |                            ^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n-17 |         y = &x[1..];\n+LL |         y = &x[1..];\n LL |     }\n    |     - temporary value dropped here while still borrowed\n LL | }"}, {"sha": "de234344d8409f910324d27fc75f7b7e569681c1", "filename": "src/test/ui/span/unused-warning-point-at-signature.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Funused-warning-point-at-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Funused-warning-point-at-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Funused-warning-point-at-signature.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -30,7 +30,7 @@ LL | / fn //~ WARN function is never used\n LL | | func_complete_span()\n LL | | -> usize\n LL | | {\n-37 | |     3\n+LL | |     3\n LL | | }\n    | |_^\n "}, {"sha": "f9a942906038c1cf2199409d153c9ea2745a76bd", "filename": "src/test/ui/span/vec-must-not-hide-type-from-dropck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvec-must-not-hide-type-from-dropck.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -14,7 +14,7 @@ error[E0597]: `c1` does not live long enough\n    |\n LL |     c2.v[0].v.set(Some(&c1));\n    |                         ^^ borrowed value does not live long enough\n-130|     //~^ ERROR `c1` does not live long enough\n+LL |     //~^ ERROR `c1` does not live long enough\n LL | }\n    | - `c1` dropped here while still borrowed\n    |"}, {"sha": "c9babb6a6d9112967695ff28973e5ac5c45678ae", "filename": "src/test/ui/suggestions/issue-32354-suggest-import-rename.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fsuggestions%2Fissue-32354-suggest-import-rename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fsuggestions%2Fissue-32354-suggest-import-rename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-32354-suggest-import-rename.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -9,7 +9,7 @@ LL | use extension2::ConstructorExtension; //~ ERROR is defined multiple times\n    = note: `ConstructorExtension` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-20 | use extension2::ConstructorExtension as OtherConstructorExtension; //~ ERROR is defined multiple times\n+LL | use extension2::ConstructorExtension as OtherConstructorExtension; //~ ERROR is defined multiple times\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "22c82be100c9be11306aeff3cc680e858e5f7e99", "filename": "src/test/ui/suggestions/issue-45799-bad-extern-crate-rename-suggestion-formatting.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fsuggestions%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fsuggestions%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -7,7 +7,7 @@ LL | extern crate std;\n    = note: `std` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-11 | extern crate std as other_std;\n+LL | extern crate std as other_std;\n    |\n \n error: aborting due to previous error"}, {"sha": "ddd38ca5c3c4c52940821c00a4d0bc86bf73e717", "filename": "src/test/ui/suggestions/method-on-ambiguous-numeric-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-on-ambiguous-numeric-type.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ LL |     let x = 2.0.powi(2);\n    |                 ^^^^\n help: you must specify a concrete type for this numeric value, like `f32`\n    |\n-12 |     let x = 2.0_f32.powi(2);\n+LL |     let x = 2.0_f32.powi(2);\n    |             ^^^^^^^\n \n error[E0689]: can't call method `powi` on ambiguous numeric type `{float}`\n@@ -15,7 +15,7 @@ LL |     let x = y.powi(2);\n    |               ^^^^\n help: you must specify a type for this binding, like `f32`\n    |\n-14 |     let y: f32 = 2.0;\n+LL |     let y: f32 = 2.0;\n    |         ^^^^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "a19ca7de4b06922555f25063e2e1fe4dcb330eed", "filename": "src/test/ui/suggestions/numeric-cast.stderr", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fsuggestions%2Fnumeric-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fsuggestions%2Fnumeric-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fnumeric-cast.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -143,7 +143,7 @@ LL |     foo::<u64>(x_u32);\n    |                ^^^^^ expected u64, found u32\n help: you can cast an `u32` to `u64`, which will zero-extend the source value\n    |\n-79 |     foo::<u64>(x_u32.into());\n+LL |     foo::<u64>(x_u32.into());\n    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n@@ -153,7 +153,7 @@ LL |     foo::<u64>(x_u16);\n    |                ^^^^^ expected u64, found u16\n help: you can cast an `u16` to `u64`, which will zero-extend the source value\n    |\n-81 |     foo::<u64>(x_u16.into());\n+LL |     foo::<u64>(x_u16.into());\n    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n@@ -163,7 +163,7 @@ LL |     foo::<u64>(x_u8);\n    |                ^^^^ expected u64, found u8\n help: you can cast an `u8` to `u64`, which will zero-extend the source value\n    |\n-83 |     foo::<u64>(x_u8.into());\n+LL |     foo::<u64>(x_u8.into());\n    |                ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n@@ -251,7 +251,7 @@ LL |     foo::<i64>(x_i32);\n    |                ^^^^^ expected i64, found i32\n help: you can cast an `i32` to `i64`, which will sign-extend the source value\n    |\n-113|     foo::<i64>(x_i32.into());\n+LL |     foo::<i64>(x_i32.into());\n    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n@@ -261,7 +261,7 @@ LL |     foo::<i64>(x_i16);\n    |                ^^^^^ expected i64, found i16\n help: you can cast an `i16` to `i64`, which will sign-extend the source value\n    |\n-115|     foo::<i64>(x_i16.into());\n+LL |     foo::<i64>(x_i16.into());\n    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n@@ -271,7 +271,7 @@ LL |     foo::<i64>(x_i8);\n    |                ^^^^ expected i64, found i8\n help: you can cast an `i8` to `i64`, which will sign-extend the source value\n    |\n-117|     foo::<i64>(x_i8.into());\n+LL |     foo::<i64>(x_i8.into());\n    |                ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n@@ -305,7 +305,7 @@ LL |     foo::<u32>(x_u16);\n    |                ^^^^^ expected u32, found u16\n help: you can cast an `u16` to `u32`, which will zero-extend the source value\n    |\n-129|     foo::<u32>(x_u16.into());\n+LL |     foo::<u32>(x_u16.into());\n    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n@@ -315,7 +315,7 @@ LL |     foo::<u32>(x_u8);\n    |                ^^^^ expected u32, found u8\n help: you can cast an `u8` to `u32`, which will zero-extend the source value\n    |\n-131|     foo::<u32>(x_u8.into());\n+LL |     foo::<u32>(x_u8.into());\n    |                ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n@@ -409,7 +409,7 @@ LL |     foo::<i32>(x_i16);\n    |                ^^^^^ expected i32, found i16\n help: you can cast an `i16` to `i32`, which will sign-extend the source value\n    |\n-163|     foo::<i32>(x_i16.into());\n+LL |     foo::<i32>(x_i16.into());\n    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n@@ -419,7 +419,7 @@ LL |     foo::<i32>(x_i8);\n    |                ^^^^ expected i32, found i8\n help: you can cast an `i8` to `i32`, which will sign-extend the source value\n    |\n-165|     foo::<i32>(x_i8.into());\n+LL |     foo::<i32>(x_i8.into());\n    |                ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n@@ -459,7 +459,7 @@ LL |     foo::<u16>(x_u8);\n    |                ^^^^ expected u16, found u8\n help: you can cast an `u8` to `u16`, which will zero-extend the source value\n    |\n-179|     foo::<u16>(x_u8.into());\n+LL |     foo::<u16>(x_u8.into());\n    |                ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n@@ -559,7 +559,7 @@ LL |     foo::<i16>(x_i8);\n    |                ^^^^ expected i16, found i8\n help: you can cast an `i8` to `i16`, which will sign-extend the source value\n    |\n-213|     foo::<i16>(x_i8.into());\n+LL |     foo::<i16>(x_i8.into());\n    |                ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n@@ -725,7 +725,7 @@ LL |     foo::<f64>(x_u32);\n    |                ^^^^^ expected f64, found u32\n help: you can cast an `u32` to `f64`, producing the floating point representation of the integer\n    |\n-272|     foo::<f64>(x_u32.into());\n+LL |     foo::<f64>(x_u32.into());\n    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n@@ -735,7 +735,7 @@ LL |     foo::<f64>(x_u16);\n    |                ^^^^^ expected f64, found u16\n help: you can cast an `u16` to `f64`, producing the floating point representation of the integer\n    |\n-274|     foo::<f64>(x_u16.into());\n+LL |     foo::<f64>(x_u16.into());\n    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n@@ -745,7 +745,7 @@ LL |     foo::<f64>(x_u8);\n    |                ^^^^ expected f64, found u8\n help: you can cast an `u8` to `f64`, producing the floating point representation of the integer\n    |\n-276|     foo::<f64>(x_u8.into());\n+LL |     foo::<f64>(x_u8.into());\n    |                ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n@@ -767,7 +767,7 @@ LL |     foo::<f64>(x_i32);\n    |                ^^^^^ expected f64, found i32\n help: you can cast an `i32` to `f64`, producing the floating point representation of the integer\n    |\n-282|     foo::<f64>(x_i32.into());\n+LL |     foo::<f64>(x_i32.into());\n    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n@@ -777,7 +777,7 @@ LL |     foo::<f64>(x_i16);\n    |                ^^^^^ expected f64, found i16\n help: you can cast an `i16` to `f64`, producing the floating point representation of the integer\n    |\n-284|     foo::<f64>(x_i16.into());\n+LL |     foo::<f64>(x_i16.into());\n    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n@@ -787,7 +787,7 @@ LL |     foo::<f64>(x_i8);\n    |                ^^^^ expected f64, found i8\n help: you can cast an `i8` to `f64`, producing the floating point representation of the integer\n    |\n-286|     foo::<f64>(x_i8.into());\n+LL |     foo::<f64>(x_i8.into());\n    |                ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n@@ -797,7 +797,7 @@ LL |     foo::<f64>(x_f32);\n    |                ^^^^^ expected f64, found f32\n help: you can cast an `f32` to `f64` in a lossless way\n    |\n-289|     foo::<f64>(x_f32.into());\n+LL |     foo::<f64>(x_f32.into());\n    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n@@ -825,7 +825,7 @@ LL |     foo::<f32>(x_u16);\n    |                ^^^^^ expected f32, found u16\n help: you can cast an `u16` to `f32`, producing the floating point representation of the integer\n    |\n-298|     foo::<f32>(x_u16.into());\n+LL |     foo::<f32>(x_u16.into());\n    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n@@ -835,7 +835,7 @@ LL |     foo::<f32>(x_u8);\n    |                ^^^^ expected f32, found u8\n help: you can cast an `u8` to `f32`, producing the floating point representation of the integer\n    |\n-300|     foo::<f32>(x_u8.into());\n+LL |     foo::<f32>(x_u8.into());\n    |                ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n@@ -863,7 +863,7 @@ LL |     foo::<f32>(x_i16);\n    |                ^^^^^ expected f32, found i16\n help: you can cast an `i16` to `f32`, producing the floating point representation of the integer\n    |\n-308|     foo::<f32>(x_i16.into());\n+LL |     foo::<f32>(x_i16.into());\n    |                ^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n@@ -873,7 +873,7 @@ LL |     foo::<f32>(x_i8);\n    |                ^^^^ expected f32, found i8\n help: you can cast an `i8` to `f32`, producing the floating point representation of the integer\n    |\n-310|     foo::<f32>(x_i8.into());\n+LL |     foo::<f32>(x_i8.into());\n    |                ^^^^^^^^^^^\n \n error[E0308]: mismatched types\n@@ -889,7 +889,7 @@ LL |     foo::<u32>(x_u8 as u16);\n    |                ^^^^^^^^^^^ expected u32, found u16\n help: you can cast an `u16` to `u32`, which will zero-extend the source value\n    |\n-316|     foo::<u32>((x_u8 as u16).into());\n+LL |     foo::<u32>((x_u8 as u16).into());\n    |                ^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n@@ -899,7 +899,7 @@ LL |     foo::<i32>(-x_i8);\n    |                ^^^^^ expected i32, found i8\n help: you can cast an `i8` to `i32`, which will sign-extend the source value\n    |\n-318|     foo::<i32>((-x_i8).into());\n+LL |     foo::<i32>((-x_i8).into());\n    |                ^^^^^^^^^^^^^^\n \n error: aborting due to 134 previous errors"}, {"sha": "bbbb3df876986b22dcf698a112731be2d141bf63", "filename": "src/test/ui/suggestions/pub-ident-fn-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-2.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ LL | pub foo(s: usize) { bar() }\n    |    ^\n help: add `fn` here to parse `foo` as a public method\n    |\n-11 | pub fn foo(s: usize) { bar() }\n+LL | pub fn foo(s: usize) { bar() }\n    |     ^^\n \n error: aborting due to previous error"}, {"sha": "de7ee71d1b40ffd88c1296d01341d6bc19953822", "filename": "src/test/ui/suggestions/pub-ident-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ LL | pub   foo(s: usize) -> bool { true }\n    |    ^^^\n help: add `fn` here to parse `foo` as a public method\n    |\n-11 | pub fn foo(s: usize) -> bool { true }\n+LL | pub fn foo(s: usize) -> bool { true }\n    |     ^^\n \n error: aborting due to previous error"}, {"sha": "cd53cea7212975350186bfbff0324c0035fd4864", "filename": "src/test/ui/suggestions/pub-ident-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-struct.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ LL | pub S {\n    |    ^\n help: add `struct` here to parse `S` as a public struct\n    |\n-11 | pub struct S {\n+LL | pub struct S {\n    |     ^^^^^^\n \n error: aborting due to previous error"}, {"sha": "b09615a2fa69f328873db85b4aa45a7fb77cbc2c", "filename": "src/test/ui/suggestions/return-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fsuggestions%2Freturn-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fsuggestions%2Freturn-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Freturn-type.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -8,11 +8,11 @@ LL |     foo(4 as usize)\n               found type `S<usize>`\n help: try adding a semicolon\n    |\n-20 |     foo(4 as usize);\n+LL |     foo(4 as usize);\n    |                    ^\n help: try adding a return type\n    |\n-19 | fn bar() -> S<usize> {\n+LL | fn bar() -> S<usize> {\n    |          ^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "d881becf00c9ef881d46325f104cf0aaa2adec04", "filename": "src/test/ui/suggestions/str-as-char.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fsuggestions%2Fstr-as-char.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fsuggestions%2Fstr-as-char.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fstr-as-char.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ LL |     println!('\u25cf\u25cf');\n    |              ^^^^\n help: if you meant to write a `str` literal, use double quotes\n    |\n-12 |     println!(\"\u25cf\u25cf\");\n+LL |     println!(\"\u25cf\u25cf\");\n    |              ^^^^\n \n error: aborting due to previous error"}, {"sha": "4078797474e5c8dc2e6201537e96b94c7b0c363a", "filename": "src/test/ui/token/issue-15980.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ftoken%2Fissue-15980.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ftoken%2Fissue-15980.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftoken%2Fissue-15980.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error: expected identifier, found keyword `return`\n    |\n LL |         Err(ref e) if e.kind == io::EndOfFile {\n    |                                 ------------- while parsing this struct\n-19 |             //~^ NOTE while parsing this struct\n+LL |             //~^ NOTE while parsing this struct\n LL |             return\n    |             ^^^^^^ expected identifier, found keyword\n \n@@ -12,7 +12,7 @@ error: expected one of `.`, `=>`, `?`, or an operator, found `_`\n    |\n LL |         }\n    |          - expected one of `.`, `=>`, `?`, or an operator here\n-24 |         //~^ NOTE expected one of `.`, `=>`, `?`, or an operator here\n+LL |         //~^ NOTE expected one of `.`, `=>`, `?`, or an operator here\n LL |         _ => {}\n    |         ^ unexpected token\n "}, {"sha": "f89da4d4bf2017f18aed49e4c1c3a1b2f1675a94", "filename": "src/test/ui/trait-method-private.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ftrait-method-private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ftrait-method-private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-method-private.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -7,7 +7,7 @@ LL |     foo.method(); //~ ERROR is private\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n    |\n-11 | use inner::Bar;\n+LL | use inner::Bar;\n    |\n \n error: aborting due to previous error"}, {"sha": "1eb1f8effbb32118dbd00688b3987cbd56fd2645", "filename": "src/test/ui/type-check/issue-40294.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ftype-check%2Fissue-40294.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ftype-check%2Fissue-40294.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check%2Fissue-40294.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -5,7 +5,7 @@ LL | / fn foo<'a,'b,T>(x: &'a T, y: &'b T) //~ ERROR type annotations required\n LL | |     where &'a T : Foo,\n LL | |           &'b T : Foo\n LL | | {\n-19 | |     x.foo();\n+LL | |     x.foo();\n LL | |     y.foo();\n LL | | }\n    | |_^"}, {"sha": "ea90feee324655ec02306bf2c8522c7d5e53f9b1", "filename": "src/test/ui/type-recursive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ftype-recursive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Ftype-recursive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-recursive.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -3,7 +3,7 @@ error[E0072]: recursive type `t1` has infinite size\n    |\n LL | struct t1 { //~ ERROR E0072\n    | ^^^^^^^^^ recursive type has infinite size\n-12 |     foo: isize,\n+LL |     foo: isize,\n LL |     foolish: t1\n    |     ----------- recursive without indirection\n    |"}, {"sha": "0a63f370d97d08c1ccb71fadbfc202f253234a73", "filename": "src/test/ui/use-mod.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fuse-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5fd168a20cbead2afb800e638159e11bb79da/src%2Ftest%2Fui%2Fuse-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse-mod.stderr?ref=7ba5fd168a20cbead2afb800e638159e11bb79da", "patch": "@@ -25,7 +25,7 @@ LL |     self\n    = note: `bar` must be defined only once in the type namespace of this module\n help: You can use `as` to change the binding name of the import\n    |\n-15 |     self as other_bar\n+LL |     self as other_bar\n    |\n \n error: aborting due to 3 previous errors"}]}