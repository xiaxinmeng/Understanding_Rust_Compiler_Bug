{"sha": "a64acaa1a209d9710081cf4902e579828d26be80", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NGFjYWExYTIwOWQ5NzEwMDgxY2Y0OTAyZTU3OTgyOGQyNmJlODA=", "commit": {"author": {"name": "Thayne McCombs", "email": "astrothayne@gmail.com", "date": "2018-04-03T01:36:13Z"}, "committer": {"name": "Thayne McCombs", "email": "astrothayne@gmail.com", "date": "2018-04-03T01:36:13Z"}, "message": "Merge remote-tracking branch 'upstream/master' into string-splice-stabilize", "tree": {"sha": "a08992b94f7cac3e748829af71c2e90ef90a55b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a08992b94f7cac3e748829af71c2e90ef90a55b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a64acaa1a209d9710081cf4902e579828d26be80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a64acaa1a209d9710081cf4902e579828d26be80", "html_url": "https://github.com/rust-lang/rust/commit/a64acaa1a209d9710081cf4902e579828d26be80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a64acaa1a209d9710081cf4902e579828d26be80/comments", "author": {"login": "tmccombs", "id": 2541726, "node_id": "MDQ6VXNlcjI1NDE3MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2541726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmccombs", "html_url": "https://github.com/tmccombs", "followers_url": "https://api.github.com/users/tmccombs/followers", "following_url": "https://api.github.com/users/tmccombs/following{/other_user}", "gists_url": "https://api.github.com/users/tmccombs/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmccombs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmccombs/subscriptions", "organizations_url": "https://api.github.com/users/tmccombs/orgs", "repos_url": "https://api.github.com/users/tmccombs/repos", "events_url": "https://api.github.com/users/tmccombs/events{/privacy}", "received_events_url": "https://api.github.com/users/tmccombs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmccombs", "id": 2541726, "node_id": "MDQ6VXNlcjI1NDE3MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2541726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmccombs", "html_url": "https://github.com/tmccombs", "followers_url": "https://api.github.com/users/tmccombs/followers", "following_url": "https://api.github.com/users/tmccombs/following{/other_user}", "gists_url": "https://api.github.com/users/tmccombs/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmccombs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmccombs/subscriptions", "organizations_url": "https://api.github.com/users/tmccombs/orgs", "repos_url": "https://api.github.com/users/tmccombs/repos", "events_url": "https://api.github.com/users/tmccombs/events{/privacy}", "received_events_url": "https://api.github.com/users/tmccombs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "196b1426bec62b590df790c5f715d46075e01840", "url": "https://api.github.com/repos/rust-lang/rust/commits/196b1426bec62b590df790c5f715d46075e01840", "html_url": "https://github.com/rust-lang/rust/commit/196b1426bec62b590df790c5f715d46075e01840"}, {"sha": "5ee891cfeabc0872624104611cc0a359f46447cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ee891cfeabc0872624104611cc0a359f46447cc", "html_url": "https://github.com/rust-lang/rust/commit/5ee891cfeabc0872624104611cc0a359f46447cc"}], "stats": {"total": 809, "additions": 577, "deletions": 232}, "files": [{"sha": "e4c16b92ceba546d3ce17f9e64c8660b588cf1fd", "filename": "src/Cargo.lock", "status": "modified", "additions": 185, "deletions": 164, "changes": 349, "blob_url": "https://github.com/rust-lang/rust/blob/a64acaa1a209d9710081cf4902e579828d26be80/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a64acaa1a209d9710081cf4902e579828d26be80/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=a64acaa1a209d9710081cf4902e579828d26be80", "patch": "@@ -120,12 +120,12 @@ dependencies = [\n  \"cc 1.0.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cmake 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"getopts 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getopts 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"time 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -144,8 +144,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"build-manifest\"\n version = \"0.1.0\"\n dependencies = [\n- \"serde 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -155,7 +155,7 @@ version = \"0.1.0\"\n \n [[package]]\n name = \"byteorder\"\n-version = \"1.2.1\"\n+version = \"1.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -192,11 +192,11 @@ dependencies = [\n  \"num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"same-file 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_ignored 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"shell-escape 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"shell-escape 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tar 0.4.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempfile 3.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termcolor 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -210,20 +210,20 @@ name = \"cargo_metadata\"\n version = \"0.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"cargo_metadata\"\n-version = \"0.5.3\"\n+version = \"0.5.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -243,10 +243,11 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"chrono\"\n-version = \"0.4.0\"\n+version = \"0.4.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"num 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-integer 0.1.36 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"num-traits 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"time 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -269,16 +270,16 @@ dependencies = [\n name = \"clippy\"\n version = \"0.0.191\"\n dependencies = [\n- \"cargo_metadata 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cargo_metadata 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clippy-mini-macro-test 0.2.0\",\n  \"clippy_lints 0.0.191\",\n- \"compiletest_rs 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"derive-new 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiletest_rs 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"derive-new 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -291,15 +292,15 @@ version = \"0.0.189\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"if_chain 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"itertools 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itertools 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"matches 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quine-mc_cluskey 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex-syntax 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-normalization 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -310,15 +311,15 @@ name = \"clippy_lints\"\n version = \"0.0.191\"\n dependencies = [\n  \"if_chain 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"itertools 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itertools 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"matches 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quine-mc_cluskey 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex-syntax 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-normalization 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -363,32 +364,32 @@ dependencies = [\n  \"diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.5.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"getopts 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getopts 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"miow 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"compiletest_rs\"\n-version = \"0.3.8\"\n+version = \"0.3.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"getopts 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getopts 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"miow 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tempdir 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tempfile 3.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -426,8 +427,8 @@ version = \"0.16.0\"\n dependencies = [\n  \"curl 0.4.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -442,19 +443,19 @@ name = \"crossbeam-deque\"\n version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"crossbeam-epoch 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"crossbeam-epoch 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"crossbeam-utils 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"crossbeam-epoch\"\n-version = \"0.3.0\"\n+version = \"0.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"arrayvec 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"crossbeam-utils 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"memoffset 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"nodrop 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -514,12 +515,12 @@ version = \"0.1.0\"\n \n [[package]]\n name = \"derive-new\"\n-version = \"0.5.1\"\n+version = \"0.5.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro2 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.12.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.12.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -542,7 +543,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"either\"\n-version = \"1.4.0\"\n+version = \"1.5.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -690,12 +691,12 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"futures\"\n-version = \"0.1.17\"\n+version = \"0.1.20\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"getopts\"\n-version = \"0.2.15\"\n+version = \"0.2.17\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -746,15 +747,16 @@ version = \"0.0.0\"\n \n [[package]]\n name = \"handlebars\"\n-version = \"0.29.1\"\n+version = \"0.32.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pest 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pest 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pest_derive 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quick-error 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -833,7 +835,7 @@ dependencies = [\n  \"error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rayon 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rayon 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tar 0.4.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"walkdir 2.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -847,10 +849,10 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"itertools\"\n-version = \"0.7.6\"\n+version = \"0.7.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"either 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"either 1.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -870,18 +872,18 @@ dependencies = [\n \n [[package]]\n name = \"json\"\n-version = \"0.11.12\"\n+version = \"0.11.13\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"jsonrpc-core\"\n version = \"8.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"futures 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"futures 0.1.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -900,8 +902,8 @@ version = \"0.31.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"enum_primitive 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url_serde 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1018,23 +1020,23 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"mdbook\"\n-version = \"0.1.2\"\n+version = \"0.1.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"chrono 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"chrono 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clap 2.31.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.5.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"handlebars 0.29.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"itertools 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"handlebars 0.32.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itertools 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"memchr 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"open 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"shlex 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempdir 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1077,9 +1079,9 @@ dependencies = [\n name = \"miri\"\n version = \"0.1.0\"\n dependencies = [\n- \"byteorder 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"byteorder 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cargo_metadata 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiletest_rs 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiletest_rs 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -1090,24 +1092,14 @@ version = \"0.1.0\"\n \n [[package]]\n name = \"nibble_vec\"\n-version = \"0.0.3\"\n+version = \"0.0.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"nodrop\"\n version = \"0.1.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"num\"\n-version = \"0.1.42\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"num-integer 0.1.36 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-iter 0.1.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-traits 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"num-integer\"\n version = \"0.1.36\"\n@@ -1116,15 +1108,6 @@ dependencies = [\n  \"num-traits 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"num-iter\"\n-version = \"0.1.35\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"num-integer 0.1.36 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-traits 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"num-traits\"\n version = \"0.1.43\"\n@@ -1207,7 +1190,7 @@ dependencies = [\n \n [[package]]\n name = \"parking_lot\"\n-version = \"0.5.3\"\n+version = \"0.5.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1232,9 +1215,19 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"pest\"\n-version = \"0.3.3\"\n+version = \"1.0.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"pest_derive\"\n+version = \"1.0.7\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"pest 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"pkg-config\"\n version = \"0.3.9\"\n@@ -1248,6 +1241,14 @@ dependencies = [\n  \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"proc-macro2\"\n+version = \"0.3.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"proc_macro\"\n version = \"0.0.0\"\n@@ -1272,7 +1273,7 @@ version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"getopts 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getopts 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1298,6 +1299,14 @@ dependencies = [\n  \"proc-macro2 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"quote\"\n+version = \"0.5.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"proc-macro2 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"racer\"\n version = \"2.0.13\"\n@@ -1314,11 +1323,11 @@ dependencies = [\n \n [[package]]\n name = \"radix_trie\"\n-version = \"0.1.2\"\n+version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"endian-type 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"nibble_vec 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"nibble_vec 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1333,10 +1342,10 @@ dependencies = [\n \n [[package]]\n name = \"rayon\"\n-version = \"1.0.0\"\n+version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"either 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"either 1.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rayon-core 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1414,27 +1423,27 @@ name = \"rls\"\n version = \"0.126.0\"\n dependencies = [\n  \"cargo 0.27.0\",\n- \"cargo_metadata 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cargo_metadata 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clippy_lints 0.0.189 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.5.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"json 0.11.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"json 0.11.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"jsonrpc-core 8.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"languageserver-types 0.31.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"racer 2.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rayon 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rayon 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-analysis 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rls-blacklist 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-blacklist 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-data 0.15.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-rustc 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-vfs 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustfmt-nightly 0.4.1\",\n- \"serde 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -1444,17 +1453,17 @@ name = \"rls-analysis\"\n version = \"0.11.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"derive-new 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"derive-new 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"radix_trie 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"radix_trie 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-data 0.15.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rls-blacklist\"\n-version = \"0.1.0\"\n+version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -1464,8 +1473,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1479,8 +1488,8 @@ version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1497,7 +1506,7 @@ name = \"rustbook\"\n version = \"0.1.0\"\n dependencies = [\n  \"clap 2.31.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mdbook 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"mdbook 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1507,7 +1516,7 @@ dependencies = [\n  \"arena 0.0.0\",\n  \"backtrace 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"byteorder 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"byteorder 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fmt_macros 0.0.0\",\n  \"graphviz 0.0.0\",\n@@ -1543,7 +1552,7 @@ dependencies = [\n  \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ena 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"parking_lot 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"parking_lot 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot_core 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-ap-serialize 73.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"stable_deref_trait 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1691,7 +1700,7 @@ dependencies = [\n  \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ena 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"parking_lot 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"parking_lot 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot_core 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serialize 0.0.0\",\n  \"stable_deref_trait 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1812,7 +1821,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n  \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"byteorder 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"byteorder 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"graphviz 0.0.0\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log_settings 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2016,19 +2025,19 @@ dependencies = [\n name = \"rustfmt-nightly\"\n version = \"0.4.1\"\n dependencies = [\n- \"cargo_metadata 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"derive-new 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cargo_metadata 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"derive-new 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.5.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"getopts 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"itertools 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getopts 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itertools 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-ap-syntax 73.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2069,7 +2078,7 @@ version = \"0.9.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2079,35 +2088,35 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.35\"\n+version = \"1.0.37\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.35\"\n+version = \"1.0.37\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"proc-macro2 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive_internals 0.22.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.12.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive_internals 0.23.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.13.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"serde_derive_internals\"\n-version = \"0.22.1\"\n+version = \"0.23.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"proc-macro2 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.12.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.13.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"serde_ignored\"\n version = \"0.0.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2118,7 +2127,7 @@ dependencies = [\n  \"dtoa 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num-traits 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2127,7 +2136,7 @@ version = \"0.0.0\"\n \n [[package]]\n name = \"shell-escape\"\n-version = \"0.1.3\"\n+version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -2202,14 +2211,24 @@ dependencies = [\n \n [[package]]\n name = \"syn\"\n-version = \"0.12.14\"\n+version = \"0.12.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro2 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"syn\"\n+version = \"0.13.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"proc-macro2 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"synom\"\n version = \"0.11.3\"\n@@ -2349,7 +2368,7 @@ name = \"term\"\n version = \"0.5.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"byteorder 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"byteorder 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -2375,7 +2394,7 @@ dependencies = [\n name = \"test\"\n version = \"0.0.0\"\n dependencies = [\n- \"getopts 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getopts 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.0.0\",\n ]\n \n@@ -2400,8 +2419,8 @@ dependencies = [\n name = \"tidy\"\n version = \"0.1.0\"\n dependencies = [\n- \"serde 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -2428,7 +2447,7 @@ name = \"toml\"\n version = \"0.4.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2525,7 +2544,7 @@ name = \"url_serde\"\n version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -2641,31 +2660,31 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum bitflags 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4efd02e230a02e18f92fc2735f44597385ed02ad8f831e7c1c1156ee5e1ab3a5\"\n \"checksum bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3c30d3802dfb7281680d6285f2ccdaa8c2d8fee41f93805dba5c4cf50dc23cf\"\n \"checksum bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f2f382711e76b9de6c744cc00d0497baba02fb00a787f088c879f01d09468e32\"\n-\"checksum byteorder 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"652805b7e73fada9d85e9a6682a4abd490cb52d96aeecc12e33a0de34dfd0d23\"\n+\"checksum byteorder 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"73b5bdfe7ee3ad0b99c9801d58807a9dbc9e09196365b0203853b99889ab3c87\"\n \"checksum cargo_metadata 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"be1057b8462184f634c3a208ee35b0f935cfd94b694b26deadccd98732088d7b\"\n-\"checksum cargo_metadata 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b5caae26de3704081ef638f87f05a6891b04f2b7d5ce9429a3de21095528ae22\"\n+\"checksum cargo_metadata 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6ebd6272a2ca4fd39dbabbd6611eb03df45c2259b3b80b39a9ff8fbdcf42a4b3\"\n \"checksum cc 1.0.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2b4911e4bdcb4100c7680e7e854ff38e23f1b34d4d9e079efae3da2801341ffc\"\n \"checksum cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4c819a1287eb618df47cc647173c5c4c66ba19d888a6e50d605672aed3140de\"\n-\"checksum chrono 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7c20ebe0b2b08b0aeddba49c609fe7957ba2e33449882cb186a180bc60682fa9\"\n+\"checksum chrono 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ba5f60682a4c264e7f8d77b82e7788938a76befdf949d4a98026d19099c9d873\"\n \"checksum clap 2.31.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f0f16b89cbb9ee36d87483dc939fe9f1e13c05898d56d7b230a0d4dff033a536\"\n \"checksum clippy_lints 0.0.189 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fef652630bbf8c5e89601220abd000f5057e8fa9db608484b5ebaad98e9bce53\"\n \"checksum cmake 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)\" = \"56d741ea7a69e577f6d06b36b7dff4738f680593dc27a701ffa8506b73ce28bb\"\n \"checksum commoncrypto 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d056a8586ba25a1e4d61cb090900e495952c7886786fc55f909ab2f819b69007\"\n \"checksum commoncrypto-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1fed34f46747aa73dfaa578069fd8279d2818ade2b55f38f22a9401c7f4083e2\"\n-\"checksum compiletest_rs 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d47ca9a69772587159e1c7e20ee1e43dfe5f184d59591eac70e7d3603bdfe57a\"\n+\"checksum compiletest_rs 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"608d9d3ccc45b63bf337d2ff5e65def5a5a52c187122232509f6b72707f61b1b\"\n \"checksum core-foundation 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"286e0b41c3a20da26536c6000a280585d519fd07b3956b43aed8a79e9edce980\"\n \"checksum core-foundation-sys 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"716c271e8613ace48344f723b60b900a93150271e5be206212d052bbc0883efa\"\n \"checksum crossbeam 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"24ce9782d4d5c53674646a6a4c1863a21a8fc0cb649b3c94dfc16e45071dea19\"\n \"checksum crossbeam-deque 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f739f8c5363aca78cfb059edf753d8f0d36908c348f3d8d1503f03d8b75d9cf3\"\n-\"checksum crossbeam-epoch 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"59796cc6cbbdc6bb319161349db0c3250ec73ec7fcb763a51065ec4e2e158552\"\n+\"checksum crossbeam-epoch 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"927121f5407de9956180ff5e936fe3cf4324279280001cd56b669d28ee7e9150\"\n \"checksum crossbeam-utils 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2760899e32a1d58d5abb31129f8fae5de75220bc2176e77ff7c627ae45c918d9\"\n \"checksum crypto-hash 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"09de9ee0fc255ace04c7fa0763c9395a945c37c8292bb554f8d48361d1dcf1b4\"\n \"checksum curl 0.4.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b70fd6394677d3c0e239ff4be6f2b3176e171ffd1c23ffdc541e78dea2b8bb5e\"\n \"checksum curl-sys 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f46e49c7125131f5afaded06944d6888b55cbdf8eba05dae73c954019b907961\"\n-\"checksum derive-new 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92f8b8e1d6c8a5f5ea0849a0e4c55941576115c62d3fc425e96918bbbeb3d3c2\"\n+\"checksum derive-new 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6fcb923bab47a948f1b01cec2f758fdebba95c9ebc255458654b2b88efe59d71\"\n \"checksum diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3c2b69f912779fbb121ceb775d74d51e915af17aaebc38d28a592843a2dd0a3a\"\n \"checksum dtoa 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"09c3753c3db574d215cba4ea76018483895d7bff25a31b49ba45db21c48e50ab\"\n-\"checksum either 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"740178ddf48b1a9e878e6d6509a1442a2d42fd2928aae8e7a6f8a36fb01981b3\"\n+\"checksum either 1.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3be565ca5c557d7f59e7cfcf1844f9e3033650c929c6566f511e8005f205c1d0\"\n \"checksum ena 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f8b449f3b18c89d2dbe40548d2ee4fa58ea0a08b761992da6ecb9788e4688834\"\n \"checksum endian-type 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c34f04666d835ff5d62e058c3995147c06f42fe86ff053337632bca83e42702d\"\n \"checksum enum_primitive 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"be4551092f4d519593039259a9ed8daedf0da12e5109c5280338073eaeb81180\"\n@@ -2681,24 +2700,24 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum fs2 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9564fc758e15025b46aa6643b1b77d047d1a56a1aea6e01002ac0c7026876213\"\n \"checksum fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2e9763c69ebaae630ba35f74888db465e49e259ba1bc0eda7d06f4a067615d82\"\n \"checksum fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7\"\n-\"checksum futures 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"118b49cac82e04121117cbd3121ede3147e885627d82c4546b87c702debb90c1\"\n-\"checksum getopts 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"65922871abd2f101a2eb0eaebadc66668e54a87ad9c3dd82520b5f86ede5eff9\"\n+\"checksum futures 0.1.20 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0c5a3176836efa0b37f0e321b86672dfada1564aeb516fbed67b7c24050a0263\"\n+\"checksum getopts 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b900c08c1939860ce8b54dc6a89e26e00c04c380fd0e09796799bd7f12861e05\"\n \"checksum git2 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0f41c0035c37ec11ed3f1e1946a76070b0c740393687e9a9c7612f6a709036b3\"\n \"checksum git2-curl 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b502f6b1b467957403d168f0039e0c46fa6a1220efa2adaef25d5b267b5fe024\"\n \"checksum glob 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8be18de09a56b60ed0edf84bc9df007e30040691af7acd1c41874faac5895bfb\"\n \"checksum globset 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1e96ab92362c06811385ae9a34d2698e8a1160745e0c78fbb434a44c8de3fabc\"\n-\"checksum handlebars 0.29.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fb04af2006ea09d985fef82b81e0eb25337e51b691c76403332378a53d521edc\"\n+\"checksum handlebars 0.32.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"07af2ff31f66f39a5c8b8b8a5dc02734a453110146763e3a2323f4931a915a76\"\n \"checksum hex 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"459d3cf58137bb02ad4adeef5036377ff59f066dbb82517b7192e3a5462a2abc\"\n \"checksum home 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8f94f6fbdc000a6eba0c8cf08632b2091bb59141d36ac321a2a96d6365e5e4dc\"\n \"checksum humantime 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0484fda3e7007f2a4a0d9c3a703ca38c71c54c55602ce4660c419fd32e188c9e\"\n \"checksum idna 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"014b298351066f1512874135335d62a789ffe78a9974f94b43ed5621951eaf7d\"\n \"checksum if_chain 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"61bb90bdd39e3af69b0172dfc6130f6cd6332bf040fbb9bdd4401d37adbd48b8\"\n \"checksum ignore 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"245bea0ba52531a3739cb8ba99f8689eda13d7faf8c36b6a73ce4421aab42588\"\n \"checksum is-match 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e5b386aef33a1c677be65237cb9d32c3f3ef56bd035949710c4bb13083eb053\"\n-\"checksum itertools 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b07332223953b5051bceb67e8c4700aa65291535568e1f12408c43c4a42c0394\"\n+\"checksum itertools 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f58856976b776fedd95533137617a02fb25719f40e7d9b01c7043cd65474f450\"\n \"checksum itoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c069bbec61e1ca5a596166e55dfe4773ff745c3d16b700013bcaff9a6df2c682\"\n \"checksum jobserver 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"60af5f849e1981434e4a31d3d782c4774ae9b434ce55b101a96ecfd09147e8be\"\n-\"checksum json 0.11.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"39ebf0fac977ee3a4a3242b6446004ff64514889e3e2730bbd4f764a67a2e483\"\n+\"checksum json 0.11.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9ad0485404155f45cce53a40d4b2d6ac356418300daed05273d9e26f91c390be\"\n \"checksum jsonrpc-core 8.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddf83704f4e79979a424d1082dd2c1e52683058056c9280efa19ac5f6bc9033c\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n \"checksum languageserver-types 0.31.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5d25086d59f44b80253d5ff96c66a692fb69de8485cf7a25b28677e89126de0d\"\n@@ -2714,16 +2733,14 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum log_settings 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3d382732ea0fbc09790c4899db3255bdea0fc78b54bf234bd18a63bb603915b6\"\n \"checksum lzma-sys 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c1b93b78f89e8737dac81837fc8f5521ac162abcba902e1a3db949d55346d1da\"\n \"checksum matches 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"100aabe6b8ff4e4a7e32c1c13523379802df0772b82466207ac25b013f193376\"\n-\"checksum mdbook 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fef236caad7ba3b5b3944df946f19ab3e190bca53c111dd00fe05fa8d879f2fd\"\n+\"checksum mdbook 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"326d0861da5681a13c19a00952a56c254dd04f00eb944e506fdb36e93ae6f1ca\"\n \"checksum memchr 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"796fba70e76612589ed2ce7f45282f5af869e0fdd7cc6199fa1aa1f1d591ba9d\"\n \"checksum memoffset 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0f9dc261e2b62d7a622bf416ea3c5245cdd5d9a7fcc428c0d06804dfce1775b3\"\n \"checksum miniz-sys 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"609ce024854aeb19a0ef7567d348aaa5a746b32fb72e336df7fcc16869d7e2b4\"\n \"checksum miow 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9224c91f82b3c47cf53dcf78dfaa20d6888fbcc5d272d5f2fcdf8a697f3c987d\"\n-\"checksum nibble_vec 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"62e678237a4c70c5f2b917cefd7d080dfbf800421f06e8a59d4e28ef5130fd9e\"\n+\"checksum nibble_vec 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c8d77f3db4bce033f4d04db08079b2ef1c3d02b44e86f25d08886fafa7756ffa\"\n \"checksum nodrop 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9a2228dca57108069a5262f2ed8bd2e82496d2e074a06d1ccc7ce1687b6ae0a2\"\n-\"checksum num 0.1.42 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4703ad64153382334aa8db57c637364c322d3372e097840c72000dabdcf6156e\"\n \"checksum num-integer 0.1.36 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f8d26da319fb45674985c78f1d1caf99aa4941f785d384a2ae36d0740bc3e2fe\"\n-\"checksum num-iter 0.1.35 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4b226df12c5a59b63569dd57fafb926d91b385dfce33d8074a412411b689d593\"\n \"checksum num-traits 0.1.43 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92e5113e9fd4cc14ded8e499429f396a20f98c772a47cc8622a736e1ec843c31\"\n \"checksum num-traits 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dee092fcdf725aee04dd7da1d21debff559237d49ef1cb3e69bcb8ece44c7364\"\n \"checksum num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c51a3322e4bca9d212ad9a158a02abc6934d005490c054a2778df73a70aa0a30\"\n@@ -2732,29 +2749,32 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum openssl-probe 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"77af24da69f9d9341038eba93a073b1fdaaa1b788221b00a69bce9e762cb32de\"\n \"checksum openssl-sys 0.9.27 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d6fdc5c4a02e69ce65046f1763a0181107038e02176233acb0b3351d7cc588f9\"\n \"checksum owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cdf84f41639e037b484f93433aa3897863b561ed65c6e59c7073d7c561710f37\"\n-\"checksum parking_lot 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3e7f7c9857874e54afeb950eebeae662b1e51a2493666d2ea4c0a5d91dcf0412\"\n+\"checksum parking_lot 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9fd9d732f2de194336fb02fe11f9eed13d9e76f13f4315b4d88a14ca411750cd\"\n \"checksum parking_lot_core 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"538ef00b7317875071d5e00f603f24d16f0b474c1a5fc0ccb8b454ca72eafa79\"\n \"checksum percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"31010dd2e1ac33d5b46a5b413495239882813e0369f8ed8a5e266f173602f831\"\n-\"checksum pest 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a6dda33d67c26f0aac90d324ab2eb7239c819fc7b2552fe9faa4fe88441edc8\"\n+\"checksum pest 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0fce5d8b5cc33983fc74f78ad552b5522ab41442c4ca91606e4236eb4b5ceefc\"\n+\"checksum pest_derive 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab94faafeb93f4c5e3ce81ca0e5a779529a602ad5d09ae6d21996bfb8b6a52bf\"\n \"checksum pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a8b4c6b8165cd1a1cd4b9b120978131389f64bdaf456435caa41e630edba903\"\n \"checksum proc-macro2 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cd07deb3c6d1d9ff827999c7f9b04cdfd66b1b17ae508e14fe47b620f2282ae0\"\n+\"checksum proc-macro2 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"388d7ea47318c5ccdeb9ba6312cee7d3f65dd2804be8580a170fce410d50b786\"\n \"checksum pulldown-cmark 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d6fdf85cda6cadfae5428a54661d431330b312bc767ddbc57adbedc24da66e32\"\n \"checksum quick-error 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eda5fe9b71976e62bc81b781206aaa076401769b2143379d3eb2118388babac4\"\n \"checksum quine-mc_cluskey 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"07589615d719a60c8dd8a4622e7946465dfef20d1a428f969e3443e7386d5f45\"\n \"checksum quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e920b65c65f10b2ae65c831a81a073a89edd28c7cce89475bff467ab4167a\"\n \"checksum quote 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1eca14c727ad12702eb4b6bfb5a232287dcf8385cb8ca83a3eeaf6519c44c408\"\n+\"checksum quote 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7b0ff51282f28dc1b53fd154298feaa2e77c5ea0dba68e1fd8b03b72fbe13d2a\"\n \"checksum racer 2.0.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"40d44bc30fc8d403b665286b2c9a83466ddbf69297668fb02b785c3e58eb8e0d\"\n-\"checksum radix_trie 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"211c49b6a9995cac0fd1dd9ca60b42cf3a51e151a12eb954b3a9e75513426ee8\"\n+\"checksum radix_trie 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"03d0d770481e8af620ca61d3d304bf014f965d7f78e923dc58545e6a545070a9\"\n \"checksum rand 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eba5f8cb59cc50ed56be8880a5c7b496bfd9bd26394e176bc67884094145c2c5\"\n-\"checksum rayon 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"485541959c8ecc49865526fe6c4de9653dd6e60d829d6edf0be228167b60372d\"\n+\"checksum rayon 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"80e811e76f1dbf68abf87a759083d34600017fc4e10b6bd5ad84a700f9dba4b1\"\n \"checksum rayon-core 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9d24ad214285a7729b174ed6d3bcfcb80177807f959d95fafd5bfc5c4f201ac8\"\n \"checksum redox_syscall 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0d92eecebad22b767915e4d529f89f28ee96dbbf5a4810d2b844373f136417fd\"\n \"checksum redox_termios 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e891cfe48e9100a70a3b6eb652fef28920c117d366339687bd5576160db0f76\"\n \"checksum regex 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aec3f58d903a7d2a9dc2bf0e41a746f4530e0cab6b615494e058f67a3ef947fb\"\n \"checksum regex-syntax 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b2550876c31dc914696a6c2e01cbce8afba79a93c8ae979d2fe051c0230b3756\"\n \"checksum remove_dir_all 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dfc5b3ce5d5ea144bb04ebd093a9e14e9765bcfec866aecda9b6dec43b3d1e24\"\n \"checksum rls-analysis 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fd4b9a3a3f2345854e39768e6425d1c893855da217183d1c0b3ff6f1664b6b6d\"\n-\"checksum rls-blacklist 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"56fb7b8e4850b988fbcf277fbdb1eff36879070d02fc1ca243b559273866973d\"\n+\"checksum rls-blacklist 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"156cee9c1750b2e97d404dd0506c4780b7a2d615164f49874013807fb3cbfe5e\"\n \"checksum rls-data 0.15.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bea04462e94b5512a78499837eecb7db182ff082144cd1b4bc32ef5d43de6510\"\n \"checksum rls-rustc 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"885f66b92757420572cbb02e033d4a9558c7413ca9b7ac206f28fd58ffdb44ea\"\n \"checksum rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5d7c7046dc6a92f2ae02ed302746db4382e75131b9ce20ce967259f6b5867a6a\"\n@@ -2773,19 +2793,20 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"94258f53601af11e6a49f722422f6e3425c52b06245a5cf9bc09908b174f5e27\"\n \"checksum semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403\"\n \"checksum semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n-\"checksum serde 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\" = \"800fdb0a894572994f3970035a8a5f65d8ec2cd40e6cdf7d8cd9001d7b30648e\"\n-\"checksum serde_derive 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90f1f8f7784452461db5b73dc5097c18f21011fbcc6d1178f1897bfa8e1cb4bd\"\n-\"checksum serde_derive_internals 0.22.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9f9525ada08124ee1a9b8b1e6f3bf035ffff6fc0c96d56ddda98d4506d3533e4\"\n+\"checksum serde 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3bcee660dcde8f52c3765dd9ca5ee36b4bf35470a738eb0bd5a8752b0389645\"\n+\"checksum serde_derive 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f1711ab8b208541fa8de00425f6a577d90f27bb60724d2bb5fd911314af9668f\"\n+\"checksum serde_derive_internals 0.23.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"89b340a48245bc03ddba31d0ff1709c118df90edc6adabaca4aac77aea181cce\"\n \"checksum serde_ignored 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"190e9765dcedb56be63b6e0993a006c7e3b071a016a304736e4a315dc01fb142\"\n \"checksum serde_json 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5c508584d9913df116b91505eec55610a2f5b16e9ed793c46e4d0152872b3e74\"\n-\"checksum shell-escape 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dd5cc96481d54583947bfe88bf30c23d53f883c6cd0145368b69989d97b84ef8\"\n+\"checksum shell-escape 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"170a13e64f2a51b77a45702ba77287f5c6829375b04a69cf2222acd17d0cfab9\"\n \"checksum shlex 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7fdf1b9db47230893d76faad238fd6097fd6d6a9245cd7a4d90dbd639536bbd2\"\n \"checksum smallvec 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"44db0ecb22921ef790d17ae13a3f6d15784183ff5f2a01aa32098c7498d2b4b9\"\n \"checksum socket2 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"71ebbe82fcdd697244ba7fe6e05e63b5c45910c3927e28469a04947494ff48d8\"\n \"checksum stable_deref_trait 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15132e0e364248108c5e2c02e3ab539be8d6f5d52a01ca9bbf27ed657316f02b\"\n \"checksum strsim 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb4f380125926a99e52bc279241539c018323fab05ad6368b56f93d9369ff550\"\n \"checksum syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3b891b9015c88c576343b9b3e41c2c11a51c219ef067b264bd9c8aa9b441dad\"\n-\"checksum syn 0.12.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c5bc2d6ff27891209efa5f63e9de78648d7801f085e4653701a692ce938d6fd\"\n+\"checksum syn 0.12.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c97c05b8ebc34ddd6b967994d5c6e9852fa92f8b82b3858c39451f97346dcce5\"\n+\"checksum syn 0.13.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"91b52877572087400e83d24b9178488541e3d535259e04ff17a63df1e5ceff59\"\n \"checksum synom 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a393066ed9010ebaed60b9eafa373d4b1baac186dd7e008555b0f702b51945b6\"\n \"checksum synstructure 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a761d12e6d8dcb4dcf952a7a89b475e3a9d69e4a69307e01a470977642914bd\"\n \"checksum syntex_errors 0.52.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9e52bffe6202cfb67587784cf23e0ec5bf26d331eef4922a16d5c42e12aa1e9b\""}, {"sha": "3453933a9652c0881188919706c5db4799ab43e2", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a64acaa1a209d9710081cf4902e579828d26be80/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64acaa1a209d9710081cf4902e579828d26be80/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=a64acaa1a209d9710081cf4902e579828d26be80", "patch": "@@ -24,7 +24,7 @@ use Build;\n use config::Config;\n \n // The version number\n-pub const CFG_RELEASE_NUM: &str = \"1.26.0\";\n+pub const CFG_RELEASE_NUM: &str = \"1.27.0\";\n \n pub struct GitInfo {\n     inner: Option<Info>,"}, {"sha": "ccf2e2768d1a971d5362e49cd08aa4e67e1e2164", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a64acaa1a209d9710081cf4902e579828d26be80/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64acaa1a209d9710081cf4902e579828d26be80/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=a64acaa1a209d9710081cf4902e579828d26be80", "patch": "@@ -21,6 +21,7 @@ use core::sync::atomic::Ordering::{Acquire, Relaxed, Release, SeqCst};\n use core::borrow;\n use core::fmt;\n use core::cmp::Ordering;\n+use core::heap::{Alloc, Layout};\n use core::intrinsics::abort;\n use core::mem::{self, align_of_val, size_of_val, uninitialized};\n use core::ops::Deref;\n@@ -31,7 +32,7 @@ use core::hash::{Hash, Hasher};\n use core::{isize, usize};\n use core::convert::From;\n \n-use heap::{Heap, Alloc, Layout, box_free};\n+use heap::{Heap, box_free};\n use boxed::Box;\n use string::String;\n use vec::Vec;"}, {"sha": "e59a6e9fdea60d86295efe5735ad35cf2bf70982", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a64acaa1a209d9710081cf4902e579828d26be80/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64acaa1a209d9710081cf4902e579828d26be80/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=a64acaa1a209d9710081cf4902e579828d26be80", "patch": "@@ -55,14 +55,15 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use heap::{Heap, Layout, Alloc};\n+use heap::Heap;\n use raw_vec::RawVec;\n \n use core::any::Any;\n use core::borrow;\n use core::cmp::Ordering;\n use core::fmt;\n use core::hash::{Hash, Hasher};\n+use core::heap::{Alloc, Layout};\n use core::iter::FusedIterator;\n use core::marker::{self, Unpin, Unsize};\n use core::mem::{self, Pin};"}, {"sha": "49109d522e9651bb8e47ee2ff546b7ee9af28479", "filename": "src/liballoc/btree/node.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a64acaa1a209d9710081cf4902e579828d26be80/src%2Fliballoc%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64acaa1a209d9710081cf4902e579828d26be80/src%2Fliballoc%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fnode.rs?ref=a64acaa1a209d9710081cf4902e579828d26be80", "patch": "@@ -41,13 +41,14 @@\n // - A node of length `n` has `n` keys, `n` values, and (in an internal node) `n + 1` edges.\n //   This implies that even an empty internal node has at least one edge.\n \n+use core::heap::{Alloc, Layout};\n use core::marker::PhantomData;\n use core::mem;\n use core::ptr::{self, Unique, NonNull};\n use core::slice;\n \n use boxed::Box;\n-use heap::{Heap, Alloc, Layout};\n+use heap::Heap;\n \n const B: usize = 6;\n pub const MIN_LEN: usize = B - 1;"}, {"sha": "3edce8aebdf39fe5f1da4dc334cc029dd0ac5327", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a64acaa1a209d9710081cf4902e579828d26be80/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64acaa1a209d9710081cf4902e579828d26be80/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=a64acaa1a209d9710081cf4902e579828d26be80", "patch": "@@ -9,11 +9,12 @@\n // except according to those terms.\n \n use core::cmp;\n+use core::heap::{Alloc, Layout};\n use core::mem;\n use core::ops::Drop;\n use core::ptr::{self, Unique};\n use core::slice;\n-use heap::{Alloc, Layout, Heap};\n+use heap::Heap;\n use super::boxed::Box;\n use super::allocator::CollectionAllocErr;\n use super::allocator::CollectionAllocErr::*;"}, {"sha": "8bdc57f96a6d5c7dda2f334ebe75987f74ec7771", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a64acaa1a209d9710081cf4902e579828d26be80/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64acaa1a209d9710081cf4902e579828d26be80/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=a64acaa1a209d9710081cf4902e579828d26be80", "patch": "@@ -250,6 +250,7 @@ use core::cell::Cell;\n use core::cmp::Ordering;\n use core::fmt;\n use core::hash::{Hash, Hasher};\n+use core::heap::{Alloc, Layout};\n use core::intrinsics::abort;\n use core::marker;\n use core::marker::{Unsize, PhantomData};\n@@ -259,7 +260,7 @@ use core::ops::CoerceUnsized;\n use core::ptr::{self, NonNull};\n use core::convert::From;\n \n-use heap::{Heap, Alloc, Layout, box_free};\n+use heap::{Heap, box_free};\n use string::String;\n use vec::Vec;\n "}, {"sha": "7a8d01e4ef8b88f7dddea1adc63f0e1b852baa73", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a64acaa1a209d9710081cf4902e579828d26be80/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64acaa1a209d9710081cf4902e579828d26be80/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=a64acaa1a209d9710081cf4902e579828d26be80", "patch": "@@ -15,7 +15,6 @@\n                       form or name\",\n             issue = \"27783\")]\n #![deny(warnings)]\n-#![feature(alloc)]\n #![feature(alloc_system)]\n #![feature(libc)]\n #![feature(linkage)]\n@@ -25,7 +24,6 @@\n #![cfg_attr(not(dummy_jemalloc), feature(allocator_api))]\n #![rustc_alloc_kind = \"exe\"]\n \n-extern crate alloc;\n extern crate alloc_system;\n extern crate libc;\n \n@@ -35,7 +33,7 @@ pub use contents::*;\n mod contents {\n     use core::ptr;\n \n-    use alloc::heap::{Alloc, AllocErr, Layout};\n+    use core::heap::{Alloc, AllocErr, Layout};\n     use alloc_system::System;\n     use libc::{c_int, c_void, size_t};\n "}, {"sha": "6c1e9cb0b9cfdae3930e31ccc79a78305542fdd6", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a64acaa1a209d9710081cf4902e579828d26be80/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64acaa1a209d9710081cf4902e579828d26be80/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=a64acaa1a209d9710081cf4902e579828d26be80", "patch": "@@ -17,7 +17,6 @@\n             issue = \"32838\")]\n #![feature(global_allocator)]\n #![feature(allocator_api)]\n-#![feature(alloc)]\n #![feature(core_intrinsics)]\n #![feature(staged_api)]\n #![feature(rustc_attrs)]\n@@ -43,9 +42,7 @@ const MIN_ALIGN: usize = 8;\n #[allow(dead_code)]\n const MIN_ALIGN: usize = 16;\n \n-extern crate alloc;\n-\n-use self::alloc::heap::{Alloc, AllocErr, Layout, Excess, CannotReallocInPlace};\n+use core::heap::{Alloc, AllocErr, Layout, Excess, CannotReallocInPlace};\n \n #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n pub struct System;\n@@ -125,7 +122,7 @@ mod platform {\n \n     use MIN_ALIGN;\n     use System;\n-    use alloc::heap::{Alloc, AllocErr, Layout};\n+    use core::heap::{Alloc, AllocErr, Layout};\n \n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     unsafe impl<'a> Alloc for &'a System {\n@@ -279,7 +276,7 @@ mod platform {\n \n     use MIN_ALIGN;\n     use System;\n-    use alloc::heap::{Alloc, AllocErr, Layout, CannotReallocInPlace};\n+    use core::heap::{Alloc, AllocErr, Layout, CannotReallocInPlace};\n \n     type LPVOID = *mut u8;\n     type HANDLE = LPVOID;\n@@ -491,7 +488,7 @@ mod platform {\n mod platform {\n     extern crate dlmalloc;\n \n-    use alloc::heap::{Alloc, AllocErr, Layout, Excess, CannotReallocInPlace};\n+    use core::heap::{Alloc, AllocErr, Layout, Excess, CannotReallocInPlace};\n     use System;\n     use self::dlmalloc::GlobalDlmalloc;\n "}, {"sha": "474f7e34c3470673e0def41a06f19a83fe568ab2", "filename": "src/libcore/ops/drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a64acaa1a209d9710081cf4902e579828d26be80/src%2Flibcore%2Fops%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64acaa1a209d9710081cf4902e579828d26be80/src%2Flibcore%2Fops%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fdrop.rs?ref=a64acaa1a209d9710081cf4902e579828d26be80", "patch": "@@ -95,7 +95,7 @@\n pub trait Drop {\n     /// Executes the destructor for this type.\n     ///\n-    /// This method is called implilcitly when the value goes out of scope,\n+    /// This method is called implicitly when the value goes out of scope,\n     /// and cannot be called explicitly (this is compiler error [E0040]).\n     /// However, the [`std::mem::drop`] function in the prelude can be\n     /// used to call the argument's `Drop` implementation."}, {"sha": "452fa4e471c693511efb8beefe092a3041791529", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a64acaa1a209d9710081cf4902e579828d26be80/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64acaa1a209d9710081cf4902e579828d26be80/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=a64acaa1a209d9710081cf4902e579828d26be80", "patch": "@@ -11,9 +11,10 @@\n use self::Entry::*;\n use self::VacantEntryState::*;\n \n-use alloc::heap::{Heap, Alloc};\n+use alloc::heap::Heap;\n use alloc::allocator::CollectionAllocErr;\n use cell::Cell;\n+use core::heap::Alloc;\n use borrow::Borrow;\n use cmp::max;\n use fmt::{self, Debug};"}, {"sha": "c6861c82a23aa0419bf692b35a8e4af7a36695fd", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a64acaa1a209d9710081cf4902e579828d26be80/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64acaa1a209d9710081cf4902e579828d26be80/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=a64acaa1a209d9710081cf4902e579828d26be80", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use alloc::heap::{Heap, Alloc, Layout};\n+use alloc::heap::Heap;\n+use core::heap::{Alloc, Layout};\n \n use cmp;\n use hash::{BuildHasher, Hash, Hasher};"}, {"sha": "b463a6d88fe8e76a9cad34c0e3d09733ae7c8faa", "filename": "src/libstd/process.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a64acaa1a209d9710081cf4902e579828d26be80/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64acaa1a209d9710081cf4902e579828d26be80/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=a64acaa1a209d9710081cf4902e579828d26be80", "patch": "@@ -1420,14 +1420,13 @@ pub fn abort() -> ! {\n /// Basic usage:\n ///\n /// ```no_run\n-/// #![feature(getpid)]\n /// use std::process;\n ///\n /// println!(\"My pid is {}\", process::id());\n /// ```\n ///\n ///\n-#[unstable(feature = \"getpid\", issue = \"44971\", reason = \"recently added\")]\n+#[stable(feature = \"getpid\", since = \"1.27.0\")]\n pub fn id() -> u32 {\n     ::sys::os::getpid()\n }"}, {"sha": "c90b0aecfc04459b53eb666b78eb36570eefb24f", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a64acaa1a209d9710081cf4902e579828d26be80/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64acaa1a209d9710081cf4902e579828d26be80/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=a64acaa1a209d9710081cf4902e579828d26be80", "patch": "@@ -837,6 +837,13 @@ impl Stmt {\n             _ => false,\n         }\n     }\n+\n+    pub fn is_expr(&self) -> bool {\n+        match self.node {\n+            StmtKind::Expr(_) => true,\n+            _ => false,\n+        }\n+    }\n }\n \n impl fmt::Debug for Stmt {"}, {"sha": "c0855d470c8bf99f260066b7a151433b352ac577", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a64acaa1a209d9710081cf4902e579828d26be80/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64acaa1a209d9710081cf4902e579828d26be80/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=a64acaa1a209d9710081cf4902e579828d26be80", "patch": "@@ -149,17 +149,24 @@ impl<'a> StripUnconfigured<'a> {\n     fn visit_expr_attrs(&mut self, attrs: &[ast::Attribute]) {\n         // flag the offending attributes\n         for attr in attrs.iter() {\n-            if !self.features.map(|features| features.stmt_expr_attributes).unwrap_or(true) {\n-                let mut err = feature_err(self.sess,\n-                                          \"stmt_expr_attributes\",\n-                                          attr.span,\n-                                          GateIssue::Language,\n-                                          EXPLAIN_STMT_ATTR_SYNTAX);\n-                if attr.is_sugared_doc {\n-                    err.help(\"`///` is for documentation comments. For a plain comment, use `//`.\");\n-                }\n-                err.emit();\n+            self.maybe_emit_expr_attr_err(attr);\n+        }\n+    }\n+\n+    /// If attributes are not allowed on expressions, emit an error for `attr`\n+    pub fn maybe_emit_expr_attr_err(&self, attr: &ast::Attribute) {\n+        if !self.features.map(|features| features.stmt_expr_attributes).unwrap_or(true) {\n+            let mut err = feature_err(self.sess,\n+                                      \"stmt_expr_attributes\",\n+                                      attr.span,\n+                                      GateIssue::Language,\n+                                      EXPLAIN_STMT_ATTR_SYNTAX);\n+\n+            if attr.is_sugared_doc {\n+                err.help(\"`///` is for documentation comments. For a plain comment, use `//`.\");\n             }\n+\n+            err.emit();\n         }\n     }\n "}, {"sha": "e579fc74b42661753386440869b2bc0ac16c213d", "filename": "src/libsyntax/edition.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a64acaa1a209d9710081cf4902e579828d26be80/src%2Flibsyntax%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64acaa1a209d9710081cf4902e579828d26be80/src%2Flibsyntax%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fedition.rs?ref=a64acaa1a209d9710081cf4902e579828d26be80", "patch": "@@ -55,6 +55,13 @@ impl Edition {\n             Edition::Edition2018 => \"edition_2018\",\n         }\n     }\n+\n+    pub fn feature_name(&self) -> &'static str {\n+        match *self {\n+            Edition::Edition2015 => \"rust_2015_preview\",\n+            Edition::Edition2018 => \"rust_2018_preview\",\n+        }\n+    }\n }\n \n impl FromStr for Edition {"}, {"sha": "d3157af984e80534d15424ba4fe7a9251dfad015", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a64acaa1a209d9710081cf4902e579828d26be80/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64acaa1a209d9710081cf4902e579828d26be80/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=a64acaa1a209d9710081cf4902e579828d26be80", "patch": "@@ -38,6 +38,8 @@ pub enum Annotatable {\n     Item(P<ast::Item>),\n     TraitItem(P<ast::TraitItem>),\n     ImplItem(P<ast::ImplItem>),\n+    Stmt(P<ast::Stmt>),\n+    Expr(P<ast::Expr>),\n }\n \n impl HasAttrs for Annotatable {\n@@ -46,6 +48,8 @@ impl HasAttrs for Annotatable {\n             Annotatable::Item(ref item) => &item.attrs,\n             Annotatable::TraitItem(ref trait_item) => &trait_item.attrs,\n             Annotatable::ImplItem(ref impl_item) => &impl_item.attrs,\n+            Annotatable::Stmt(ref stmt) => stmt.attrs(),\n+            Annotatable::Expr(ref expr) => &expr.attrs,\n         }\n     }\n \n@@ -54,6 +58,8 @@ impl HasAttrs for Annotatable {\n             Annotatable::Item(item) => Annotatable::Item(item.map_attrs(f)),\n             Annotatable::TraitItem(trait_item) => Annotatable::TraitItem(trait_item.map_attrs(f)),\n             Annotatable::ImplItem(impl_item) => Annotatable::ImplItem(impl_item.map_attrs(f)),\n+            Annotatable::Stmt(stmt) => Annotatable::Stmt(stmt.map_attrs(f)),\n+            Annotatable::Expr(expr) => Annotatable::Expr(expr.map_attrs(f)),\n         }\n     }\n }\n@@ -64,6 +70,8 @@ impl Annotatable {\n             Annotatable::Item(ref item) => item.span,\n             Annotatable::TraitItem(ref trait_item) => trait_item.span,\n             Annotatable::ImplItem(ref impl_item) => impl_item.span,\n+            Annotatable::Stmt(ref stmt) => stmt.span,\n+            Annotatable::Expr(ref expr) => expr.span,\n         }\n     }\n "}, {"sha": "864969c40750b5623e8cf51513bbbc98fdb861fe", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 70, "deletions": 19, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/a64acaa1a209d9710081cf4902e579828d26be80/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64acaa1a209d9710081cf4902e579828d26be80/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=a64acaa1a209d9710081cf4902e579828d26be80", "patch": "@@ -435,6 +435,12 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             Annotatable::ImplItem(item) => {\n                 Annotatable::ImplItem(item.map(|item| cfg.fold_impl_item(item).pop().unwrap()))\n             }\n+            Annotatable::Stmt(stmt) => {\n+                Annotatable::Stmt(stmt.map(|stmt| cfg.fold_stmt(stmt).pop().unwrap()))\n+            }\n+            Annotatable::Expr(expr) => {\n+                Annotatable::Expr(cfg.fold_expr(expr))\n+            }\n         }\n     }\n \n@@ -503,6 +509,8 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     Annotatable::Item(item) => token::NtItem(item),\n                     Annotatable::TraitItem(item) => token::NtTraitItem(item.into_inner()),\n                     Annotatable::ImplItem(item) => token::NtImplItem(item.into_inner()),\n+                    Annotatable::Stmt(stmt) => token::NtStmt(stmt.into_inner()),\n+                    Annotatable::Expr(expr) => token::NtExpr(expr),\n                 })).into();\n                 let tok_result = mac.expand(self.cx, attr.span, attr.tokens, item_tok);\n                 self.parse_expansion(tok_result, kind, &attr.path, attr.span)\n@@ -751,6 +759,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 Some(expansion)\n             }\n             Err(mut err) => {\n+                err.set_span(span);\n                 err.emit();\n                 self.cx.trace_macros_diag();\n                 kind.dummy(span)\n@@ -796,7 +805,13 @@ impl<'a> Parser<'a> {\n                 Expansion::Stmts(stmts)\n             }\n             ExpansionKind::Expr => Expansion::Expr(self.parse_expr()?),\n-            ExpansionKind::OptExpr => Expansion::OptExpr(Some(self.parse_expr()?)),\n+            ExpansionKind::OptExpr => {\n+                if self.token != token::Eof {\n+                    Expansion::OptExpr(Some(self.parse_expr()?))\n+                } else {\n+                    Expansion::OptExpr(None)\n+                }\n+            },\n             ExpansionKind::Ty => Expansion::Ty(self.parse_ty()?),\n             ExpansionKind::Pat => Expansion::Pat(self.parse_pat()?),\n         })\n@@ -904,6 +919,18 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n         let mut expr = self.cfg.configure_expr(expr).into_inner();\n         expr.node = self.cfg.configure_expr_kind(expr.node);\n \n+        let (attr, derives, expr) = self.classify_item(expr);\n+\n+        if attr.is_some() || !derives.is_empty() {\n+            // collect the invoc regardless of whether or not attributes are permitted here\n+            // expansion will eat the attribute so it won't error later\n+            attr.as_ref().map(|a| self.cfg.maybe_emit_expr_attr_err(a));\n+\n+            // ExpansionKind::Expr requires the macro to emit an expression\n+            return self.collect_attr(attr, derives, Annotatable::Expr(P(expr)), ExpansionKind::Expr)\n+                .make_expr();\n+        }\n+\n         if let ast::ExprKind::Mac(mac) = expr.node {\n             self.check_attributes(&expr.attrs);\n             self.collect_bang(mac, expr.span, ExpansionKind::Expr).make_expr()\n@@ -916,6 +943,16 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n         let mut expr = configure!(self, expr).into_inner();\n         expr.node = self.cfg.configure_expr_kind(expr.node);\n \n+        let (attr, derives, expr) = self.classify_item(expr);\n+\n+        if attr.is_some() || !derives.is_empty() {\n+            attr.as_ref().map(|a| self.cfg.maybe_emit_expr_attr_err(a));\n+\n+            return self.collect_attr(attr, derives, Annotatable::Expr(P(expr)),\n+                                     ExpansionKind::OptExpr)\n+                .make_opt_expr();\n+        }\n+\n         if let ast::ExprKind::Mac(mac) = expr.node {\n             self.check_attributes(&expr.attrs);\n             self.collect_bang(mac, expr.span, ExpansionKind::OptExpr).make_opt_expr()\n@@ -938,33 +975,47 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n     }\n \n     fn fold_stmt(&mut self, stmt: ast::Stmt) -> SmallVector<ast::Stmt> {\n-        let stmt = match self.cfg.configure_stmt(stmt) {\n+        let mut stmt = match self.cfg.configure_stmt(stmt) {\n             Some(stmt) => stmt,\n             None => return SmallVector::new(),\n         };\n \n-        let (mac, style, attrs) = if let StmtKind::Mac(mac) = stmt.node {\n-            mac.into_inner()\n-        } else {\n-            // The placeholder expander gives ids to statements, so we avoid folding the id here.\n-            let ast::Stmt { id, node, span } = stmt;\n-            return noop_fold_stmt_kind(node, self).into_iter().map(|node| {\n-                ast::Stmt { id: id, node: node, span: span }\n-            }).collect()\n-        };\n+        // we'll expand attributes on expressions separately\n+        if !stmt.is_expr() {\n+            let (attr, derives, stmt_) = self.classify_item(stmt);\n+\n+            if attr.is_some() || !derives.is_empty() {\n+                return self.collect_attr(attr, derives,\n+                                         Annotatable::Stmt(P(stmt_)), ExpansionKind::Stmts)\n+                    .make_stmts();\n+            }\n \n-        self.check_attributes(&attrs);\n-        let mut placeholder = self.collect_bang(mac, stmt.span, ExpansionKind::Stmts).make_stmts();\n+            stmt = stmt_;\n+        }\n \n-        // If this is a macro invocation with a semicolon, then apply that\n-        // semicolon to the final statement produced by expansion.\n-        if style == MacStmtStyle::Semicolon {\n-            if let Some(stmt) = placeholder.pop() {\n-                placeholder.push(stmt.add_trailing_semicolon());\n+        if let StmtKind::Mac(mac) = stmt.node {\n+            let (mac, style, attrs) = mac.into_inner();\n+            self.check_attributes(&attrs);\n+            let mut placeholder = self.collect_bang(mac, stmt.span, ExpansionKind::Stmts)\n+                                        .make_stmts();\n+\n+            // If this is a macro invocation with a semicolon, then apply that\n+            // semicolon to the final statement produced by expansion.\n+            if style == MacStmtStyle::Semicolon {\n+                if let Some(stmt) = placeholder.pop() {\n+                    placeholder.push(stmt.add_trailing_semicolon());\n+                }\n             }\n+\n+            return placeholder;\n         }\n \n-        placeholder\n+        // The placeholder expander gives ids to statements, so we avoid folding the id here.\n+        let ast::Stmt { id, node, span } = stmt;\n+        noop_fold_stmt_kind(node, self).into_iter().map(|node| {\n+            ast::Stmt { id, node, span }\n+        }).collect()\n+\n     }\n \n     fn fold_block(&mut self, block: P<Block>) -> P<Block> {"}, {"sha": "463e76e14618a11aef9c3d768a9d9d970256b00e", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a64acaa1a209d9710081cf4902e579828d26be80/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64acaa1a209d9710081cf4902e579828d26be80/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=a64acaa1a209d9710081cf4902e579828d26be80", "patch": "@@ -28,7 +28,7 @@ use self::AttributeGate::*;\n use abi::Abi;\n use ast::{self, NodeId, PatKind, RangeEnd};\n use attr;\n-use edition::Edition;\n+use edition::{ALL_EDITIONS, Edition};\n use codemap::Spanned;\n use syntax_pos::{Span, DUMMY_SP};\n use errors::{DiagnosticBuilder, Handler, FatalError};\n@@ -1250,7 +1250,7 @@ const EXPLAIN_BOX_SYNTAX: &'static str =\n     \"box expression syntax is experimental; you can call `Box::new` instead.\";\n \n pub const EXPLAIN_STMT_ATTR_SYNTAX: &'static str =\n-    \"attributes on non-item statements and expressions are experimental.\";\n+    \"attributes on expressions are experimental.\";\n \n pub const EXPLAIN_ASM: &'static str =\n     \"inline assembly is not stable enough for use and is subject to change\";\n@@ -1800,21 +1800,15 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n }\n \n pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n-                    edition: Edition) -> Features {\n+                    crate_edition: Edition) -> Features {\n+    fn feature_removed(span_handler: &Handler, span: Span) {\n+        span_err!(span_handler, span, E0557, \"feature has been removed\");\n+    }\n+\n     let mut features = Features::new();\n \n     let mut feature_checker = FeatureChecker::default();\n \n-    for &(.., f_edition, set) in ACTIVE_FEATURES.iter() {\n-        if let Some(f_edition) = f_edition {\n-            if edition >= f_edition {\n-                // FIXME(Manishearth) there is currently no way to set\n-                // lang features by edition\n-                set(&mut features, DUMMY_SP);\n-            }\n-        }\n-    }\n-\n     for attr in krate_attrs {\n         if !attr.check_name(\"feature\") {\n             continue\n@@ -1827,6 +1821,7 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n             }\n             Some(list) => {\n                 for mi in list {\n+\n                     let name = if let Some(word) = mi.word() {\n                         word.name()\n                     } else {\n@@ -1844,11 +1839,26 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n                             .find(|& &(n, _, _)| name == n)\n                         .or_else(|| STABLE_REMOVED_FEATURES.iter()\n                             .find(|& &(n, _, _)| name == n)) {\n-                        span_err!(span_handler, mi.span, E0557, \"feature has been removed\");\n+                        feature_removed(span_handler, mi.span);\n                     }\n                     else if let Some(&(_, _, _)) = ACCEPTED_FEATURES.iter()\n                         .find(|& &(n, _, _)| name == n) {\n                         features.declared_stable_lang_features.push((name, mi.span));\n+                    } else if let Some(&edition) = ALL_EDITIONS.iter()\n+                                                              .find(|e| name == e.feature_name()) {\n+                        if edition <= crate_edition {\n+                            feature_removed(span_handler, mi.span);\n+                        } else {\n+                            for &(.., f_edition, set) in ACTIVE_FEATURES.iter() {\n+                                if let Some(f_edition) = f_edition {\n+                                    if edition >= f_edition {\n+                                        // FIXME(Manishearth) there is currently no way to set\n+                                        // lib features by edition\n+                                        set(&mut features, DUMMY_SP);\n+                                    }\n+                                }\n+                            }\n+                        }\n                     } else {\n                         features.declared_lib_features.push((name, mi.span));\n                     }"}, {"sha": "f7cdd4ba2b449ca4433ecf60691aee28834d654c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a64acaa1a209d9710081cf4902e579828d26be80/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64acaa1a209d9710081cf4902e579828d26be80/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a64acaa1a209d9710081cf4902e579828d26be80", "patch": "@@ -4601,6 +4601,9 @@ impl<'a> Parser<'a> {\n \n     /// Parse a statement, including the trailing semicolon.\n     pub fn parse_full_stmt(&mut self, macro_legacy_warnings: bool) -> PResult<'a, Option<Stmt>> {\n+        // skip looking for a trailing semicolon when we have an interpolated statement\n+        maybe_whole!(self, NtStmt, |x| Some(x));\n+\n         let mut stmt = match self.parse_stmt_without_recovery(macro_legacy_warnings)? {\n             Some(stmt) => stmt,\n             None => return Ok(None),"}, {"sha": "80557078d5463da4f9c1c87f8edf59c2f359a031", "filename": "src/libsyntax_ext/deriving/custom.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a64acaa1a209d9710081cf4902e579828d26be80/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64acaa1a209d9710081cf4902e579828d26be80/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs?ref=a64acaa1a209d9710081cf4902e579828d26be80", "patch": "@@ -54,7 +54,9 @@ impl MultiItemModifier for ProcMacroDerive {\n         let item = match item {\n             Annotatable::Item(item) => item,\n             Annotatable::ImplItem(_) |\n-            Annotatable::TraitItem(_) => {\n+            Annotatable::TraitItem(_) |\n+            Annotatable::Stmt(_) |\n+            Annotatable::Expr(_) => {\n                 ecx.span_err(span, \"proc-macro derives may only be \\\n                                     applied to struct/enum items\");\n                 return Vec::new()"}, {"sha": "77ea3019419387df239a147e4c13757e844058db", "filename": "src/test/compile-fail-fulldeps/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a64acaa1a209d9710081cf4902e579828d26be80/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64acaa1a209d9710081cf4902e579828d26be80/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs?ref=a64acaa1a209d9710081cf4902e579828d26be80", "patch": "@@ -93,6 +93,8 @@ fn expand_into_foo_multi(cx: &mut ExtCtxt,\n                 }\n             })\n         }\n+        // these are covered in proc_macro/attr-stmt-expr.rs\n+        Annotatable::Stmt(_) | Annotatable::Expr(_) => panic!(\"expected item\")\n     }\n }\n \n@@ -145,6 +147,8 @@ fn expand_duplicate(cx: &mut ExtCtxt,\n             new_it.ident = copy_name;\n             push(Annotatable::TraitItem(P(new_it)));\n         }\n+        // covered in proc_macro/attr-stmt-expr.rs\n+        Annotatable::Stmt(_) | Annotatable::Expr(_) => panic!(\"expected item\")\n     }\n }\n "}, {"sha": "2f65bd16bb54a1953a0422d57e1ee2c5add15a7b", "filename": "src/test/compile-fail-fulldeps/proc-macro/attr-invalid-exprs.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a64acaa1a209d9710081cf4902e579828d26be80/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattr-invalid-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64acaa1a209d9710081cf4902e579828d26be80/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattr-invalid-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattr-invalid-exprs.rs?ref=a64acaa1a209d9710081cf4902e579828d26be80", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:attr-stmt-expr.rs\n+// ignore-stage1\n+\n+//! Attributes producing expressions in invalid locations\n+\n+#![feature(proc_macro, stmt_expr_attributes)]\n+\n+extern crate attr_stmt_expr;\n+use attr_stmt_expr::{duplicate, no_output};\n+\n+fn main() {\n+    let _ = #[no_output] \"Hello, world!\";\n+    //~^ ERROR expected expression, found `<eof>`\n+\n+    let _ = #[duplicate] \"Hello, world!\";\n+    //~^ ERROR macro expansion ignores token `,` and any following\n+\n+    let _ = {\n+        #[no_output]\n+        \"Hello, world!\"\n+    };\n+\n+    let _ = {\n+        #[duplicate]\n+        //~^ ERROR macro expansion ignores token `,` and any following\n+        \"Hello, world!\"\n+    };\n+}"}, {"sha": "d29bc00c663c8e2788a4884b47a69e5c761b693a", "filename": "src/test/compile-fail-fulldeps/proc-macro/attr-stmt-expr.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a64acaa1a209d9710081cf4902e579828d26be80/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64acaa1a209d9710081cf4902e579828d26be80/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs?ref=a64acaa1a209d9710081cf4902e579828d26be80", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:attr-stmt-expr.rs\n+// ignore-stage1\n+\n+#![feature(proc_macro)]\n+\n+extern crate attr_stmt_expr;\n+use attr_stmt_expr::{expect_let, expect_print_stmt, expect_expr, expect_print_expr};\n+\n+fn print_str(string: &'static str) {\n+    // macros are handled a bit differently\n+    #[expect_print_expr]\n+    //~^ ERROR attributes on expressions are experimental\n+    //~| HELP add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n+    println!(\"{}\", string)\n+}\n+\n+fn main() {\n+    #[expect_let]\n+    let string = \"Hello, world!\";\n+\n+    #[expect_print_stmt]\n+    println!(\"{}\", string);\n+\n+    #[expect_expr]\n+    //~^ ERROR attributes on expressions are experimental\n+    //~| HELP add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n+    print_str(\"string\")\n+}"}, {"sha": "8bae1697dcbeceb0c1afb1126a512638977d93d1", "filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/attr-stmt-expr.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a64acaa1a209d9710081cf4902e579828d26be80/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64acaa1a209d9710081cf4902e579828d26be80/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs?ref=a64acaa1a209d9710081cf4902e579828d26be80", "patch": "@@ -0,0 +1,59 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![feature(proc_macro)]\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_attribute]\n+pub fn expect_let(attr: TokenStream, item: TokenStream) -> TokenStream {\n+    assert!(attr.to_string().is_empty());\n+    assert_eq!(item.to_string(), \"let string = \\\"Hello, world!\\\";\");\n+    item\n+}\n+\n+#[proc_macro_attribute]\n+pub fn expect_print_stmt(attr: TokenStream, item: TokenStream) -> TokenStream {\n+    assert!(attr.to_string().is_empty());\n+    assert_eq!(item.to_string(), \"println!(\\\"{}\\\" , string);\");\n+    item\n+}\n+\n+#[proc_macro_attribute]\n+pub fn expect_expr(attr: TokenStream, item: TokenStream) -> TokenStream {\n+    assert!(attr.to_string().is_empty());\n+    assert_eq!(item.to_string(), \"print_str(\\\"string\\\")\");\n+    item\n+}\n+\n+#[proc_macro_attribute]\n+pub fn expect_print_expr(attr: TokenStream, item: TokenStream) -> TokenStream {\n+    assert!(attr.to_string().is_empty());\n+    assert_eq!(item.to_string(), \"println!(\\\"{}\\\" , string)\");\n+    item\n+}\n+\n+#[proc_macro_attribute]\n+pub fn duplicate(attr: TokenStream, item: TokenStream) -> TokenStream {\n+    assert!(attr.to_string().is_empty());\n+    format!(\"{}, {}\", item, item).parse().unwrap()\n+}\n+\n+#[proc_macro_attribute]\n+pub fn no_output(attr: TokenStream, item: TokenStream) -> TokenStream {\n+    assert!(attr.to_string().is_empty());\n+    assert!(!item.to_string().is_empty());\n+    \"\".parse().unwrap()\n+}"}, {"sha": "5ebd32921329de2bf5efb4a25491e103b34e971b", "filename": "src/test/run-pass-fulldeps/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a64acaa1a209d9710081cf4902e579828d26be80/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64acaa1a209d9710081cf4902e579828d26be80/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs?ref=a64acaa1a209d9710081cf4902e579828d26be80", "patch": "@@ -96,6 +96,8 @@ fn expand_into_foo_multi(cx: &mut ExtCtxt,\n                 }\n             })\n         ],\n+        // these are covered in proc_macro/attr-stmt-expr.rs\n+        Annotatable::Stmt(_) | Annotatable::Expr(_) => panic!(\"expected item\"),\n     }\n }\n \n@@ -140,6 +142,8 @@ fn expand_duplicate(cx: &mut ExtCtxt,\n             new_it.ident = copy_name;\n             push(Annotatable::TraitItem(P(new_it)));\n         }\n+        // these are covered in proc_macro/attr-stmt-expr.rs\n+        Annotatable::Stmt(_) | Annotatable::Expr(_) => panic!(\"expected item\")\n     }\n }\n "}, {"sha": "082dd63992968ae9fa4ca55dfd4c38f4c49e9201", "filename": "src/test/run-pass-fulldeps/proc-macro/attr-stmt-expr.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a64acaa1a209d9710081cf4902e579828d26be80/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64acaa1a209d9710081cf4902e579828d26be80/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs?ref=a64acaa1a209d9710081cf4902e579828d26be80", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:attr-stmt-expr.rs\n+// ignore-stage1\n+\n+#![feature(proc_macro, stmt_expr_attributes)]\n+\n+extern crate attr_stmt_expr;\n+use attr_stmt_expr::{expect_let, expect_print_stmt, expect_expr, expect_print_expr};\n+\n+fn print_str(string: &'static str) {\n+    // macros are handled a bit differently\n+    #[expect_print_expr]\n+    println!(\"{}\", string)\n+}\n+\n+fn main() {\n+    #[expect_let]\n+    let string = \"Hello, world!\";\n+\n+    #[expect_print_stmt]\n+    println!(\"{}\", string);\n+\n+    #[expect_expr]\n+    print_str(\"string\")\n+}"}, {"sha": "189e6bbd00dba4e7718df7e07c336033730ca062", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/attr-stmt-expr.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a64acaa1a209d9710081cf4902e579828d26be80/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64acaa1a209d9710081cf4902e579828d26be80/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs?ref=a64acaa1a209d9710081cf4902e579828d26be80", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![feature(proc_macro)]\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_attribute]\n+pub fn expect_let(attr: TokenStream, item: TokenStream) -> TokenStream {\n+    assert!(attr.to_string().is_empty());\n+    assert_eq!(item.to_string(), \"let string = \\\"Hello, world!\\\";\");\n+    item\n+}\n+\n+#[proc_macro_attribute]\n+pub fn expect_print_stmt(attr: TokenStream, item: TokenStream) -> TokenStream {\n+    assert!(attr.to_string().is_empty());\n+    assert_eq!(item.to_string(), \"println!(\\\"{}\\\" , string);\");\n+    item\n+}\n+\n+#[proc_macro_attribute]\n+pub fn expect_expr(attr: TokenStream, item: TokenStream) -> TokenStream {\n+    assert!(attr.to_string().is_empty());\n+    assert_eq!(item.to_string(), \"print_str(\\\"string\\\")\");\n+    item\n+}\n+\n+#[proc_macro_attribute]\n+pub fn expect_print_expr(attr: TokenStream, item: TokenStream) -> TokenStream {\n+    assert!(attr.to_string().is_empty());\n+    assert_eq!(item.to_string(), \"println!(\\\"{}\\\" , string)\");\n+    item\n+}"}, {"sha": "e3cd1edd20987786dfa1cf891d42203885d77387", "filename": "src/test/run-pass/epoch-gate-feature.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a64acaa1a209d9710081cf4902e579828d26be80/src%2Ftest%2Frun-pass%2Fepoch-gate-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64acaa1a209d9710081cf4902e579828d26be80/src%2Ftest%2Frun-pass%2Fepoch-gate-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fepoch-gate-feature.rs?ref=a64acaa1a209d9710081cf4902e579828d26be80", "patch": "@@ -11,7 +11,7 @@\n // Checks if the correct registers are being used to pass arguments\n // when the sysv64 ABI is specified.\n \n-// compile-flags: -Zedition=2018\n+#![feature(rust_2018_preview)]\n \n pub trait Foo {}\n "}, {"sha": "55706938ae8f28c6f8fd44b1e87191b45e61d812", "filename": "src/test/ui/feature-gate-stmt_expr_attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a64acaa1a209d9710081cf4902e579828d26be80/src%2Ftest%2Fui%2Ffeature-gate-stmt_expr_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64acaa1a209d9710081cf4902e579828d26be80/src%2Ftest%2Fui%2Ffeature-gate-stmt_expr_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-stmt_expr_attributes.rs?ref=a64acaa1a209d9710081cf4902e579828d26be80", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n const X: i32 = #[allow(dead_code)] 8;\n-//~^ ERROR attributes on non-item statements and expressions are experimental. (see issue #15701)\n+//~^ ERROR attributes on expressions are experimental. (see issue #15701)\n \n fn main() {}"}, {"sha": "ad5c263403df34e881a6a5e2738eae658f741fd7", "filename": "src/test/ui/feature-gate-stmt_expr_attributes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a64acaa1a209d9710081cf4902e579828d26be80/src%2Ftest%2Fui%2Ffeature-gate-stmt_expr_attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a64acaa1a209d9710081cf4902e579828d26be80/src%2Ftest%2Fui%2Ffeature-gate-stmt_expr_attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-stmt_expr_attributes.stderr?ref=a64acaa1a209d9710081cf4902e579828d26be80", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: attributes on non-item statements and expressions are experimental. (see issue #15701)\n+error[E0658]: attributes on expressions are experimental. (see issue #15701)\n   --> $DIR/feature-gate-stmt_expr_attributes.rs:11:16\n    |\n LL | const X: i32 = #[allow(dead_code)] 8;"}, {"sha": "41ad4e7180e60607325e8defde310eeb08b00300", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a64acaa1a209d9710081cf4902e579828d26be80/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64acaa1a209d9710081cf4902e579828d26be80/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=a64acaa1a209d9710081cf4902e579828d26be80", "patch": "@@ -257,6 +257,11 @@ fn check(cache: &mut Cache,\n                     return;\n                 }\n \n+                // These appear to be broken in mdbook right now?\n+                if fragment.starts_with(\"-\") {\n+                    return;\n+                }\n+\n                 let entry = &mut cache.get_mut(&pretty_path).unwrap();\n                 entry.parse_ids(&pretty_path, &contents, errors);\n "}]}