{"sha": "cae1918b2939824e4dbbba003099c0ccf21715e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhZTE5MThiMjkzOTgyNGU0ZGJiYmEwMDMwOTljMGNjZjIxNzE1ZTI=", "commit": {"author": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2021-06-12T11:13:38Z"}, "committer": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2021-06-13T11:11:07Z"}, "message": "Turn incorrect vtable size/alignment errors into hard const-UB errors\n\nThey were \"freeform const UB\" error message, but could reach validation\nand trigger ICEs there. We now catch them during validation to avoid\nthat.", "tree": {"sha": "4053505049e02146c482a06fb20a96b29a79270e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4053505049e02146c482a06fb20a96b29a79270e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cae1918b2939824e4dbbba003099c0ccf21715e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cae1918b2939824e4dbbba003099c0ccf21715e2", "html_url": "https://github.com/rust-lang/rust/commit/cae1918b2939824e4dbbba003099c0ccf21715e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cae1918b2939824e4dbbba003099c0ccf21715e2/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f6ba39fd89cff295067d974c49fc64b0b52ad18", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f6ba39fd89cff295067d974c49fc64b0b52ad18", "html_url": "https://github.com/rust-lang/rust/commit/0f6ba39fd89cff295067d974c49fc64b0b52ad18"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "aca39d438c10371075a33db3c266935228adea2f", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cae1918b2939824e4dbbba003099c0ccf21715e2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae1918b2939824e4dbbba003099c0ccf21715e2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=cae1918b2939824e4dbbba003099c0ccf21715e2", "patch": "@@ -227,7 +227,11 @@ pub enum UndefinedBehaviorInfo<'tcx> {\n     /// Invalid metadata in a wide pointer (using `str` to avoid allocations).\n     InvalidMeta(&'static str),\n     /// Invalid drop function in vtable.\n-    InvalidDropFn(FnSig<'tcx>),\n+    InvalidVtableDropFn(FnSig<'tcx>),\n+    /// Invalid size in a vtable: too large.\n+    InvalidVtableSize,\n+    /// Invalid alignment in a vtable: too large, or not a power of 2.\n+    InvalidVtableAlignment(String),\n     /// Reading a C string that does not end within its allocation.\n     UnterminatedCString(Pointer),\n     /// Dereferencing a dangling pointer after it got freed.\n@@ -287,11 +291,15 @@ impl fmt::Display for UndefinedBehaviorInfo<'_> {\n             RemainderByZero => write!(f, \"calculating the remainder with a divisor of zero\"),\n             PointerArithOverflow => write!(f, \"overflowing in-bounds pointer arithmetic\"),\n             InvalidMeta(msg) => write!(f, \"invalid metadata in wide pointer: {}\", msg),\n-            InvalidDropFn(sig) => write!(\n+            InvalidVtableDropFn(sig) => write!(\n                 f,\n                 \"invalid drop function signature: got {}, expected exactly one argument which must be a pointer type\",\n                 sig\n             ),\n+            InvalidVtableSize => {\n+                write!(f, \"invalid vtable: size is bigger than largest supported object\")\n+            }\n+            InvalidVtableAlignment(msg) => write!(f, \"invalid vtable: alignment {}\", msg),\n             UnterminatedCString(p) => write!(\n                 f,\n                 \"reading a null-terminated string starting at {} with no null found before end of allocation\","}, {"sha": "9a59161f08f507f11abf9ff1b1134305f0a929d8", "filename": "compiler/rustc_mir/src/interpret/traits.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cae1918b2939824e4dbbba003099c0ccf21715e2/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae1918b2939824e4dbbba003099c0ccf21715e2/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs?ref=cae1918b2939824e4dbbba003099c0ccf21715e2", "patch": "@@ -137,9 +137,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // The drop function takes `*mut T` where `T` is the type being dropped, so get that.\n         let args = fn_sig.inputs();\n         if args.len() != 1 {\n-            throw_ub!(InvalidDropFn(fn_sig));\n+            throw_ub!(InvalidVtableDropFn(fn_sig));\n         }\n-        let ty = args[0].builtin_deref(true).ok_or_else(|| err_ub!(InvalidDropFn(fn_sig)))?.ty;\n+        let ty =\n+            args[0].builtin_deref(true).ok_or_else(|| err_ub!(InvalidVtableDropFn(fn_sig)))?.ty;\n         Ok((drop_instance, ty))\n     }\n \n@@ -158,14 +159,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let size = u64::try_from(self.force_bits(size, pointer_size)?).unwrap();\n         let align = vtable.read_ptr_sized(pointer_size * 2)?.check_init()?;\n         let align = u64::try_from(self.force_bits(align, pointer_size)?).unwrap();\n-        let align = Align::from_bytes(align)\n-            .map_err(|e| err_ub_format!(\"invalid vtable: alignment {}\", e))?;\n+        let align = Align::from_bytes(align).map_err(|e| err_ub!(InvalidVtableAlignment(e)))?;\n \n         if size >= self.tcx.data_layout.obj_size_bound() {\n-            throw_ub_format!(\n-                \"invalid vtable: \\\n-                size is bigger than largest supported object\"\n-            );\n+            throw_ub!(InvalidVtableSize);\n         }\n         Ok((Size::from_bytes(size), align))\n     }"}, {"sha": "c9ebffe8d1cf46099e714d80ccee5869cb2b3829", "filename": "compiler/rustc_mir/src/interpret/validity.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cae1918b2939824e4dbbba003099c0ccf21715e2/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cae1918b2939824e4dbbba003099c0ccf21715e2/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs?ref=cae1918b2939824e4dbbba003099c0ccf21715e2", "patch": "@@ -349,12 +349,16 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                     err_ub!(InvalidFunctionPointer(..)) |\n                     err_unsup!(ReadBytesAsPointer) =>\n                         { \"invalid drop function pointer in vtable (not pointing to a function)\" },\n-                    err_ub!(InvalidDropFn(..)) =>\n+                    err_ub!(InvalidVtableDropFn(..)) =>\n                         { \"invalid drop function pointer in vtable (function has incompatible signature)\" },\n                 );\n                 try_validation!(\n                     self.ecx.read_size_and_align_from_vtable(vtable),\n                     self.path,\n+                    err_ub!(InvalidVtableSize) =>\n+                        { \"invalid vtable: size is bigger than largest supported object\" },\n+                    err_ub!(InvalidVtableAlignment(msg)) =>\n+                        { \"invalid vtable: alignment {}\", msg },\n                     err_unsup!(ReadPointerAsBytes) => { \"invalid size or align in vtable\" },\n                 );\n                 // FIXME: More checks for the vtable."}]}