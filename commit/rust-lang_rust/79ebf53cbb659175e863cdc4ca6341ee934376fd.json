{"sha": "79ebf53cbb659175e863cdc4ca6341ee934376fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ZWJmNTNjYmI2NTkxNzVlODYzY2RjNGNhNjM0MWVlOTM0Mzc2ZmQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-12T13:21:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-12T13:21:05Z"}, "message": "Rollup merge of #67585 - ranma42:fix/char-is-ascii-codegen, r=Amanieu\n\nImprove `char::is_ascii_*` codegen\n\nThis PR is an attempt to fix https://github.com/rust-lang/rust/issues/65127\n\nA couple of warnings:\n 1. the generated code might be further improved (in LLVM and/or MIR) by emitting better comparison sequences; in particular, this would improve the performance of \"complex\" checks such as those in `is_ascii_punctuation`\n 2. the second commit is currently marked \"DO NOT MERGE\", because it regresses SIMD on `u8` slices; this could likely be fixed by improving the computation/usage of demanded bits in LLVM\n\nAn alternative approach to remove the code duplication might be the use of macros, but currently most of the duplication is actually in the doc comments, so maybe just keeping the redundancy could be ok", "tree": {"sha": "e7323c3be168e687fe658ed3c8c6b0f6353588b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7323c3be168e687fe658ed3c8c6b0f6353588b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79ebf53cbb659175e863cdc4ca6341ee934376fd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeQ/vBCRBK7hj4Ov3rIwAAdHIIAAwoa6Y+QYB1ms09mzvKthgF\nq6W0eWOzozmdY0nrdPZlRKMa0MwaZVnbpiPWtWQtL+eSQUt9976ihe6T1AiJzKt9\nUF7QlMG07b76+IL9hp4FxFE7XR263wEB10SkLHH4yl9X6S4+umXnIBylL0oM1BI4\nf/sLhfgfXLFf/E73jXDYQCRldbskAgxbYYOS6u7b+8uAUusmpV/E8p6HCFQGQvwp\nPCCDd3HHCwLwY/ovkRxHtq05/LMNiUCVYkQrq8gs//0kkckxhjRv44iHMXZ+Inxh\nxIzx31r4ViEVi4DMcPS7qQg8Y2Xz7fsVLsrdHm0VJN7QH/zLVNS32s6uhp8c00k=\n=tsr/\n-----END PGP SIGNATURE-----\n", "payload": "tree e7323c3be168e687fe658ed3c8c6b0f6353588b3\nparent cd5441faf4e56d136d7c05d5eb55b4a41396edaf\nparent 4e7aeaf1b52ee66ede1adb104fcd08b0463eb0f9\nauthor Dylan DPC <dylan.dpc@gmail.com> 1581513665 +0100\ncommitter GitHub <noreply@github.com> 1581513665 +0100\n\nRollup merge of #67585 - ranma42:fix/char-is-ascii-codegen, r=Amanieu\n\nImprove `char::is_ascii_*` codegen\n\nThis PR is an attempt to fix https://github.com/rust-lang/rust/issues/65127\n\nA couple of warnings:\n 1. the generated code might be further improved (in LLVM and/or MIR) by emitting better comparison sequences; in particular, this would improve the performance of \"complex\" checks such as those in `is_ascii_punctuation`\n 2. the second commit is currently marked \"DO NOT MERGE\", because it regresses SIMD on `u8` slices; this could likely be fixed by improving the computation/usage of demanded bits in LLVM\n\nAn alternative approach to remove the code duplication might be the use of macros, but currently most of the duplication is actually in the doc comments, so maybe just keeping the redundancy could be ok\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79ebf53cbb659175e863cdc4ca6341ee934376fd", "html_url": "https://github.com/rust-lang/rust/commit/79ebf53cbb659175e863cdc4ca6341ee934376fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79ebf53cbb659175e863cdc4ca6341ee934376fd/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd5441faf4e56d136d7c05d5eb55b4a41396edaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd5441faf4e56d136d7c05d5eb55b4a41396edaf", "html_url": "https://github.com/rust-lang/rust/commit/cd5441faf4e56d136d7c05d5eb55b4a41396edaf"}, {"sha": "4e7aeaf1b52ee66ede1adb104fcd08b0463eb0f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e7aeaf1b52ee66ede1adb104fcd08b0463eb0f9", "html_url": "https://github.com/rust-lang/rust/commit/4e7aeaf1b52ee66ede1adb104fcd08b0463eb0f9"}], "stats": {"total": 50, "additions": 40, "deletions": 10}, "files": [{"sha": "302400744e25df541fbda73dcfbdb17dc240997f", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 40, "deletions": 10, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/79ebf53cbb659175e863cdc4ca6341ee934376fd/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79ebf53cbb659175e863cdc4ca6341ee934376fd/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=79ebf53cbb659175e863cdc4ca6341ee934376fd", "patch": "@@ -1075,7 +1075,10 @@ impl char {\n     #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n     pub const fn is_ascii_alphabetic(&self) -> bool {\n-        self.is_ascii() && (*self as u8).is_ascii_alphabetic()\n+        match *self {\n+            'A'..='Z' | 'a'..='z' => true,\n+            _ => false,\n+        }\n     }\n \n     /// Checks if the value is an ASCII uppercase character:\n@@ -1108,7 +1111,10 @@ impl char {\n     #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n     pub const fn is_ascii_uppercase(&self) -> bool {\n-        self.is_ascii() && (*self as u8).is_ascii_uppercase()\n+        match *self {\n+            'A'..='Z' => true,\n+            _ => false,\n+        }\n     }\n \n     /// Checks if the value is an ASCII lowercase character:\n@@ -1141,7 +1147,10 @@ impl char {\n     #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n     pub const fn is_ascii_lowercase(&self) -> bool {\n-        self.is_ascii() && (*self as u8).is_ascii_lowercase()\n+        match *self {\n+            'a'..='z' => true,\n+            _ => false,\n+        }\n     }\n \n     /// Checks if the value is an ASCII alphanumeric character:\n@@ -1177,7 +1186,10 @@ impl char {\n     #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n     pub const fn is_ascii_alphanumeric(&self) -> bool {\n-        self.is_ascii() && (*self as u8).is_ascii_alphanumeric()\n+        match *self {\n+            '0'..='9' | 'A'..='Z' | 'a'..='z' => true,\n+            _ => false,\n+        }\n     }\n \n     /// Checks if the value is an ASCII decimal digit:\n@@ -1210,7 +1222,10 @@ impl char {\n     #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n     pub const fn is_ascii_digit(&self) -> bool {\n-        self.is_ascii() && (*self as u8).is_ascii_digit()\n+        match *self {\n+            '0'..='9' => true,\n+            _ => false,\n+        }\n     }\n \n     /// Checks if the value is an ASCII hexadecimal digit:\n@@ -1246,7 +1261,10 @@ impl char {\n     #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n     pub const fn is_ascii_hexdigit(&self) -> bool {\n-        self.is_ascii() && (*self as u8).is_ascii_hexdigit()\n+        match *self {\n+            '0'..='9' | 'A'..='F' | 'a'..='f' => true,\n+            _ => false,\n+        }\n     }\n \n     /// Checks if the value is an ASCII punctuation character:\n@@ -1283,7 +1301,10 @@ impl char {\n     #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n     pub const fn is_ascii_punctuation(&self) -> bool {\n-        self.is_ascii() && (*self as u8).is_ascii_punctuation()\n+        match *self {\n+            '!'..='/' | ':'..='@' | '['..='`' | '{'..='~' => true,\n+            _ => false,\n+        }\n     }\n \n     /// Checks if the value is an ASCII graphic character:\n@@ -1316,7 +1337,10 @@ impl char {\n     #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n     pub const fn is_ascii_graphic(&self) -> bool {\n-        self.is_ascii() && (*self as u8).is_ascii_graphic()\n+        match *self {\n+            '!'..='~' => true,\n+            _ => false,\n+        }\n     }\n \n     /// Checks if the value is an ASCII whitespace character:\n@@ -1366,7 +1390,10 @@ impl char {\n     #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n     pub const fn is_ascii_whitespace(&self) -> bool {\n-        self.is_ascii() && (*self as u8).is_ascii_whitespace()\n+        match *self {\n+            '\\t' | '\\n' | '\\x0C' | '\\r' | ' ' => true,\n+            _ => false,\n+        }\n     }\n \n     /// Checks if the value is an ASCII control character:\n@@ -1401,6 +1428,9 @@ impl char {\n     #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n     #[inline]\n     pub const fn is_ascii_control(&self) -> bool {\n-        self.is_ascii() && (*self as u8).is_ascii_control()\n+        match *self {\n+            '\\0'..='\\x1F' | '\\x7F' => true,\n+            _ => false,\n+        }\n     }\n }"}]}