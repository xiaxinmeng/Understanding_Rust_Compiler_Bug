{"sha": "f77f4d55bdf9d8955d3292f709bd9830c2fdeca5", "node_id": "C_kwDOAAsO6NoAKGY3N2Y0ZDU1YmRmOWQ4OTU1ZDMyOTJmNzA5YmQ5ODMwYzJmZGVjYTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-18T23:43:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-18T23:43:42Z"}, "message": "Auto merge of #107542 - compiler-errors:param-envs-with-inference-vars-are-cursed, r=jackh726\n\nDon't call `with_reveal_all_normalized` in const-eval when `param_env` has inference vars in it\n\n**what:** This slightly shifts the order of operations from an existing hack:\n\nhttps://github.com/rust-lang/rust/blob/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/compiler/rustc_middle/src/ty/consts/kind.rs#L225-L230\n\nin order to avoid calling a tcx query (`TyCtxt::reveal_opaque_types_in_bounds`, via `ParamEnv::with_reveal_all_normalized`) when a param-env has inference variables in it.\n\n**why:** This allows us to enable fingerprinting of query keys/values outside of incr-comp in deubg mode, to make sure we catch other places where we're passing infer vars and other bad things into query keys. Currently that (bbf33836b9adfe4328aefa108c421e670a3923b7) crashes because we introduce inference vars into a param-env in the blanket-impl finder in rustdoc :sweat:\n\nhttps://github.com/rust-lang/rust/blob/5b6ed253c42a69b93e7447fb0874a89ab6bc1cfb/src/librustdoc/clean/blanket_impl.rs#L43\n\nSee the CI failure here: https://github.com/rust-lang/rust/actions/runs/4058194838/jobs/6984834619", "tree": {"sha": "8ef819b2d4aee538acea007ab9991b6ecba36176", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ef819b2d4aee538acea007ab9991b6ecba36176"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f77f4d55bdf9d8955d3292f709bd9830c2fdeca5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f77f4d55bdf9d8955d3292f709bd9830c2fdeca5", "html_url": "https://github.com/rust-lang/rust/commit/f77f4d55bdf9d8955d3292f709bd9830c2fdeca5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f77f4d55bdf9d8955d3292f709bd9830c2fdeca5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4507fdaaa27ea2fb59a41df2ce7d1f290da53dae", "url": "https://api.github.com/repos/rust-lang/rust/commits/4507fdaaa27ea2fb59a41df2ce7d1f290da53dae", "html_url": "https://github.com/rust-lang/rust/commit/4507fdaaa27ea2fb59a41df2ce7d1f290da53dae"}, {"sha": "789e8283dd7305c95b65672bb21712a69b31e677", "url": "https://api.github.com/repos/rust-lang/rust/commits/789e8283dd7305c95b65672bb21712a69b31e677", "html_url": "https://github.com/rust-lang/rust/commit/789e8283dd7305c95b65672bb21712a69b31e677"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "52f4414e37bde93c1d68864fcaf0a78a01cf8369", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f77f4d55bdf9d8955d3292f709bd9830c2fdeca5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77f4d55bdf9d8955d3292f709bd9830c2fdeca5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=f77f4d55bdf9d8955d3292f709bd9830c2fdeca5", "patch": "@@ -217,23 +217,21 @@ impl<'tcx> ConstKind<'tcx> {\n             // Note that we erase regions *before* calling `with_reveal_all_normalized`,\n             // so that we don't try to invoke this query with\n             // any region variables.\n-            let param_env_and = tcx\n-                .erase_regions(param_env)\n-                .with_reveal_all_normalized(tcx)\n-                .and(tcx.erase_regions(unevaluated));\n \n             // HACK(eddyb) when the query key would contain inference variables,\n             // attempt using identity substs and `ParamEnv` instead, that will succeed\n             // when the expression doesn't depend on any parameters.\n             // FIXME(eddyb, skinny121) pass `InferCtxt` into here when it's available, so that\n             // we can call `infcx.const_eval_resolve` which handles inference variables.\n-            let param_env_and = if param_env_and.needs_infer() {\n+            let param_env_and = if (param_env, unevaluated).has_non_region_infer() {\n                 tcx.param_env(unevaluated.def.did).and(ty::UnevaluatedConst {\n                     def: unevaluated.def,\n                     substs: InternalSubsts::identity_for_item(tcx, unevaluated.def.did),\n                 })\n             } else {\n-                param_env_and\n+                tcx.erase_regions(param_env)\n+                    .with_reveal_all_normalized(tcx)\n+                    .and(tcx.erase_regions(unevaluated))\n             };\n \n             // FIXME(eddyb) maybe the `const_eval_*` methods should take"}, {"sha": "623be668464e8f141ea29f9dfd8a6fb3b937facc", "filename": "compiler/rustc_query_system/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f77f4d55bdf9d8955d3292f709bd9830c2fdeca5/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77f4d55bdf9d8955d3292f709bd9830c2fdeca5/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Flib.rs?ref=f77f4d55bdf9d8955d3292f709bd9830c2fdeca5", "patch": "@@ -3,6 +3,7 @@\n #![feature(hash_raw_entry)]\n #![feature(min_specialization)]\n #![feature(extern_types)]\n+#![feature(let_chains)]\n #![allow(rustc::potential_query_instability)]\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]"}, {"sha": "21a0c73d7208363aee28b272e2652f1a24bf4b4f", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f77f4d55bdf9d8955d3292f709bd9830c2fdeca5/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f77f4d55bdf9d8955d3292f709bd9830c2fdeca5/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=f77f4d55bdf9d8955d3292f709bd9830c2fdeca5", "patch": "@@ -2,7 +2,7 @@\n //! generate the actual methods on tcx which find and execute the provider,\n //! manage the caches, and so forth.\n \n-use crate::dep_graph::{DepContext, DepKind, DepNode, DepNodeIndex};\n+use crate::dep_graph::{DepContext, DepKind, DepNode, DepNodeIndex, DepNodeParams};\n use crate::ich::StableHashingContext;\n use crate::query::caches::QueryCache;\n use crate::query::job::{report_cycle, QueryInfo, QueryJob, QueryJobId, QueryJobInfo};\n@@ -408,10 +408,27 @@ where\n \n     // Fast path for when incr. comp. is off.\n     if !dep_graph.is_fully_enabled() {\n+        // Fingerprint the key, just to assert that it doesn't\n+        // have anything we don't consider hashable\n+        if cfg!(debug_assertions) {\n+            let _ = key.to_fingerprint(*qcx.dep_context());\n+        }\n+\n         let prof_timer = qcx.dep_context().profiler().query_provider();\n         let result = qcx.start_query(job_id, Q::DEPTH_LIMIT, None, || Q::compute(qcx, key));\n         let dep_node_index = dep_graph.next_virtual_depnode_index();\n         prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n+\n+        // Similarly, fingerprint the result to assert that\n+        // it doesn't have anything not considered hashable.\n+        if cfg!(debug_assertions)\n+            && let Some(hash_result) = Q::HASH_RESULT\n+        {\n+            qcx.dep_context().with_stable_hashing_context(|mut hcx| {\n+                hash_result(&mut hcx, &result);\n+            });\n+        }\n+\n         return (result, dep_node_index);\n     }\n "}]}