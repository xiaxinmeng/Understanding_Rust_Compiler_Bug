{"sha": "bed69c613471cf0717f1664003ccf714168eec95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlZDY5YzYxMzQ3MWNmMDcxN2YxNjY0MDAzY2NmNzE0MTY4ZWVjOTU=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2021-01-22T03:38:58Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2021-02-05T02:29:50Z"}, "message": "Revert \"Use `record_operands_moved` more aggresively\"\n\nThis reverts commit 7f3e8551dde7f14641618cdb8fda2f99ff1d74b6.", "tree": {"sha": "a8c532123f3a5f6f0ff8ad5f48daab878d3addf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8c532123f3a5f6f0ff8ad5f48daab878d3addf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bed69c613471cf0717f1664003ccf714168eec95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bed69c613471cf0717f1664003ccf714168eec95", "html_url": "https://github.com/rust-lang/rust/commit/bed69c613471cf0717f1664003ccf714168eec95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bed69c613471cf0717f1664003ccf714168eec95/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a71a81948074f7a3e2b5ce0dee3ad98fa22f793b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a71a81948074f7a3e2b5ce0dee3ad98fa22f793b", "html_url": "https://github.com/rust-lang/rust/commit/a71a81948074f7a3e2b5ce0dee3ad98fa22f793b"}], "stats": {"total": 304, "additions": 190, "deletions": 114}, "files": [{"sha": "e602f4dd71d2570ad2fcb3d3e4ac0cf16c0f883d", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bed69c613471cf0717f1664003ccf714168eec95/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bed69c613471cf0717f1664003ccf714168eec95/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=bed69c613471cf0717f1664003ccf714168eec95", "patch": "@@ -12,8 +12,6 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::{self, Ty, UpvarSubsts};\n use rustc_span::Span;\n \n-use std::slice;\n-\n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Returns an rvalue suitable for use until the end of the current\n     /// scope expression.\n@@ -120,9 +118,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     block =\n                         this.into(this.hir.tcx().mk_place_deref(Place::from(result)), block, value)\n                 );\n-                let result_operand = Operand::Move(Place::from(result));\n-                this.record_operands_moved(slice::from_ref(&result_operand));\n-                block.and(Rvalue::Use(result_operand))\n+                block.and(Rvalue::Use(Operand::Move(Place::from(result))))\n             }\n             ExprKind::Cast { source } => {\n                 let source = unpack!(block = this.as_operand(block, scope, source));\n@@ -166,7 +162,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     .map(|f| unpack!(block = this.as_operand(block, scope, f)))\n                     .collect();\n \n-                this.record_operands_moved(&fields);\n                 block.and(Rvalue::Aggregate(box AggregateKind::Array(el_ty), fields))\n             }\n             ExprKind::Tuple { fields } => {\n@@ -177,7 +172,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     .map(|f| unpack!(block = this.as_operand(block, scope, f)))\n                     .collect();\n \n-                this.record_operands_moved(&fields);\n                 block.and(Rvalue::Aggregate(box AggregateKind::Tuple, fields))\n             }\n             ExprKind::Closure { closure_id, substs, upvars, movability } => {\n@@ -229,7 +223,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     }\n                     UpvarSubsts::Closure(substs) => box AggregateKind::Closure(closure_id, substs),\n                 };\n-                this.record_operands_moved(&operands);\n                 block.and(Rvalue::Aggregate(result, operands))\n             }\n             ExprKind::Assign { .. } | ExprKind::AssignOp { .. } => {"}, {"sha": "3298d1c61aa85aadefdbecb12d09e27fefb519ab", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bed69c613471cf0717f1664003ccf714168eec95/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bed69c613471cf0717f1664003ccf714168eec95/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=bed69c613471cf0717f1664003ccf714168eec95", "patch": "@@ -10,8 +10,6 @@ use rustc_hir as hir;\n use rustc_middle::mir::*;\n use rustc_middle::ty::CanonicalUserTypeAnnotation;\n \n-use std::slice;\n-\n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Compile `expr`, storing the result into `destination`, which\n     /// is assumed to be uninitialized.\n@@ -277,6 +275,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let fields: Vec<_> = if let Some(FruInfo { base, field_types }) = base {\n                     let place_builder = unpack!(block = this.as_place_builder(block, base));\n \n+\n                     // MIR does not natively support FRU, so for each\n                     // base-supplied field, generate an operand that\n                     // reads it from the base.\n@@ -314,7 +313,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     user_ty,\n                     active_field_index,\n                 );\n-                this.record_operands_moved(&fields);\n                 this.cfg.push_assign(\n                     block,\n                     source_info,\n@@ -441,7 +439,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let scope = this.local_scope();\n                 let value = unpack!(block = this.as_operand(block, Some(scope), value));\n                 let resume = this.cfg.start_new_block();\n-                this.record_operands_moved(slice::from_ref(&value));\n                 this.cfg.terminate(\n                     block,\n                     source_info,"}, {"sha": "f117689d940fd7a210183b1d0a526c8032912d46", "filename": "compiler/rustc_mir_build/src/build/expr/stmt.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bed69c613471cf0717f1664003ccf714168eec95/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bed69c613471cf0717f1664003ccf714168eec95/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs?ref=bed69c613471cf0717f1664003ccf714168eec95", "patch": "@@ -3,7 +3,6 @@ use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n use crate::thir::*;\n use rustc_middle::middle::region;\n use rustc_middle::mir::*;\n-use std::slice;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Builds a block of MIR statements to evaluate the THIR `expr`.\n@@ -47,7 +46,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 if this.hir.needs_drop(lhs.ty) {\n                     let rhs = unpack!(block = this.as_local_operand(block, rhs));\n                     let lhs = unpack!(block = this.as_place(block, lhs));\n-                    this.record_operands_moved(slice::from_ref(&rhs));\n                     unpack!(block = this.build_drop_and_replace(block, lhs_span, lhs, rhs));\n                 } else {\n                     let rhs = unpack!(block = this.as_local_rvalue(block, rhs));"}, {"sha": "538ad36a6fd27fc6dedb428fc3f91831c44a074f", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bed69c613471cf0717f1664003ccf714168eec95/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bed69c613471cf0717f1664003ccf714168eec95/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=bed69c613471cf0717f1664003ccf714168eec95", "patch": "@@ -1352,7 +1352,7 @@ impl<'tcx> DropTreeBuilder<'tcx> for Unwind {\n             | TerminatorKind::Yield { .. }\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::FalseEdge { .. }\n-            | TerminatorKind::InlineAsm { .. } => {\n+            | TerminatorKind::InlineAsm {.. } => {\n                 span_bug!(term.source_info.span, \"cannot unwind from {:?}\", term.kind)\n             }\n         }"}, {"sha": "7e0ca3dea4b71aafe350344b65ab54fe88890b60", "filename": "src/test/mir-opt/basic_assignment.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bed69c613471cf0717f1664003ccf714168eec95/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/bed69c613471cf0717f1664003ccf714168eec95/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir?ref=bed69c613471cf0717f1664003ccf714168eec95", "patch": "@@ -41,36 +41,44 @@ fn main() -> () {\n         StorageLive(_5);                 // scope 3 at $DIR/basic_assignment.rs:19:9: 19:15\n         StorageLive(_6);                 // scope 4 at $DIR/basic_assignment.rs:23:14: 23:20\n         _6 = move _4;                    // scope 4 at $DIR/basic_assignment.rs:23:14: 23:20\n-        replace(_5 <- move _6) -> [return: bb1, unwind: bb4]; // scope 4 at $DIR/basic_assignment.rs:23:5: 23:11\n+        replace(_5 <- move _6) -> [return: bb1, unwind: bb5]; // scope 4 at $DIR/basic_assignment.rs:23:5: 23:11\n     }\n \n     bb1: {\n+        drop(_6) -> [return: bb2, unwind: bb6]; // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n+    }\n+\n+    bb2: {\n         StorageDead(_6);                 // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n         _0 = const ();                   // scope 0 at $DIR/basic_assignment.rs:10:11: 24:2\n-        drop(_5) -> [return: bb2, unwind: bb5]; // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n+        drop(_5) -> [return: bb3, unwind: bb7]; // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n     }\n \n-    bb2: {\n+    bb3: {\n         StorageDead(_5);                 // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n-        drop(_4) -> [return: bb3, unwind: bb6]; // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n+        drop(_4) -> [return: bb4, unwind: bb8]; // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n     }\n \n-    bb3: {\n+    bb4: {\n         StorageDead(_4);                 // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n         StorageDead(_2);                 // scope 1 at $DIR/basic_assignment.rs:24:1: 24:2\n         StorageDead(_1);                 // scope 0 at $DIR/basic_assignment.rs:24:1: 24:2\n         return;                          // scope 0 at $DIR/basic_assignment.rs:24:2: 24:2\n     }\n \n-    bb4 (cleanup): {\n-        drop(_5) -> bb5;                 // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n-    }\n-\n     bb5 (cleanup): {\n-        drop(_4) -> bb6;                 // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n+        drop(_6) -> bb6;                 // scope 4 at $DIR/basic_assignment.rs:23:19: 23:20\n     }\n \n     bb6 (cleanup): {\n+        drop(_5) -> bb7;                 // scope 3 at $DIR/basic_assignment.rs:24:1: 24:2\n+    }\n+\n+    bb7 (cleanup): {\n+        drop(_4) -> bb8;                 // scope 2 at $DIR/basic_assignment.rs:24:1: 24:2\n+    }\n+\n+    bb8 (cleanup): {\n         resume;                          // scope 0 at $DIR/basic_assignment.rs:10:1: 24:2\n     }\n }"}, {"sha": "ce5cb39595269360a0c3cb3664161ca6439ac2c5", "filename": "src/test/mir-opt/box_expr.main.ElaborateDrops.before.mir", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bed69c613471cf0717f1664003ccf714168eec95/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/bed69c613471cf0717f1664003ccf714168eec95/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir?ref=bed69c613471cf0717f1664003ccf714168eec95", "patch": "@@ -14,45 +14,49 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/box_expr.rs:7:9: 7:10\n         StorageLive(_2);                 // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n         _2 = Box(S);                     // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n-        (*_2) = S::new() -> [return: bb1, unwind: bb5]; // scope 0 at $DIR/box_expr.rs:7:17: 7:25\n+        (*_2) = S::new() -> [return: bb1, unwind: bb6]; // scope 0 at $DIR/box_expr.rs:7:17: 7:25\n                                          // mir::Constant\n                                          // + span: $DIR/box_expr.rs:7:17: 7:23\n                                          // + literal: Const { ty: fn() -> S {S::new}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n         _1 = move _2;                    // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n+        drop(_2) -> bb2;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n+    }\n+\n+    bb2: {\n         StorageDead(_2);                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n         StorageLive(_3);                 // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n         StorageLive(_4);                 // scope 1 at $DIR/box_expr.rs:8:10: 8:11\n         _4 = move _1;                    // scope 1 at $DIR/box_expr.rs:8:10: 8:11\n-        _3 = std::mem::drop::<Box<S>>(move _4) -> [return: bb2, unwind: bb4]; // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n+        _3 = std::mem::drop::<Box<S>>(move _4) -> [return: bb3, unwind: bb5]; // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n                                          // mir::Constant\n                                          // + span: $DIR/box_expr.rs:8:5: 8:9\n                                          // + literal: Const { ty: fn(std::boxed::Box<S>) {std::mem::drop::<std::boxed::Box<S>>}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb2: {\n+    bb3: {\n         StorageDead(_4);                 // scope 1 at $DIR/box_expr.rs:8:11: 8:12\n         StorageDead(_3);                 // scope 1 at $DIR/box_expr.rs:8:12: 8:13\n         _0 = const ();                   // scope 0 at $DIR/box_expr.rs:6:11: 9:2\n-        drop(_1) -> bb3;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n+        drop(_1) -> bb4;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n     }\n \n-    bb3: {\n+    bb4: {\n         StorageDead(_1);                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n         return;                          // scope 0 at $DIR/box_expr.rs:9:2: 9:2\n     }\n \n-    bb4 (cleanup): {\n-        drop(_1) -> bb6;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n-    }\n-\n     bb5 (cleanup): {\n-        drop(_2) -> bb6;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n+        drop(_1) -> bb7;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n     }\n \n     bb6 (cleanup): {\n+        drop(_2) -> bb7;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n+    }\n+\n+    bb7 (cleanup): {\n         resume;                          // scope 0 at $DIR/box_expr.rs:6:1: 9:2\n     }\n }"}, {"sha": "be730402be981b1daba6059a5c06e33efca3ad43", "filename": "src/test/mir-opt/issue_41110.test.ElaborateDrops.after.mir", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/bed69c613471cf0717f1664003ccf714168eec95/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/bed69c613471cf0717f1664003ccf714168eec95/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.after.mir?ref=bed69c613471cf0717f1664003ccf714168eec95", "patch": "@@ -25,7 +25,7 @@ fn test() -> () {\n         StorageLive(_3);                 // scope 2 at $DIR/issue-41110.rs:17:5: 17:12\n         StorageLive(_4);                 // scope 2 at $DIR/issue-41110.rs:17:10: 17:11\n         _4 = move _2;                    // scope 2 at $DIR/issue-41110.rs:17:10: 17:11\n-        _3 = std::mem::drop::<S>(move _4) -> [return: bb1, unwind: bb5]; // scope 2 at $DIR/issue-41110.rs:17:5: 17:12\n+        _3 = std::mem::drop::<S>(move _4) -> [return: bb1, unwind: bb7]; // scope 2 at $DIR/issue-41110.rs:17:5: 17:12\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41110.rs:17:5: 17:9\n                                          // + literal: Const { ty: fn(S) {std::mem::drop::<S>}, val: Value(Scalar(<ZST>)) }\n@@ -37,53 +37,61 @@ fn test() -> () {\n         StorageLive(_5);                 // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n         _6 = const false;                // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n         _5 = move _1;                    // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n-        goto -> bb9;                     // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n+        goto -> bb11;                    // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n     }\n \n     bb2: {\n+        goto -> bb3;                     // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n+    }\n+\n+    bb3: {\n         StorageDead(_5);                 // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n         _0 = const ();                   // scope 0 at $DIR/issue-41110.rs:14:15: 19:2\n-        drop(_2) -> [return: bb3, unwind: bb6]; // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n+        drop(_2) -> [return: bb4, unwind: bb8]; // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n \n-    bb3: {\n+    bb4: {\n         StorageDead(_2);                 // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n-        goto -> bb4;                     // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+        goto -> bb5;                     // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n \n-    bb4: {\n+    bb5: {\n         _6 = const false;                // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n         StorageDead(_1);                 // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n         return;                          // scope 0 at $DIR/issue-41110.rs:19:2: 19:2\n     }\n \n-    bb5 (cleanup): {\n-        goto -> bb6;                     // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n-    }\n-\n     bb6 (cleanup): {\n-        goto -> bb11;                    // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+        goto -> bb7;                     // scope 2 at $DIR/issue-41110.rs:18:9: 18:10\n     }\n \n     bb7 (cleanup): {\n-        resume;                          // scope 0 at $DIR/issue-41110.rs:14:1: 19:2\n+        goto -> bb8;                     // scope 1 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n \n     bb8 (cleanup): {\n+        goto -> bb13;                    // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+    }\n+\n+    bb9 (cleanup): {\n+        resume;                          // scope 0 at $DIR/issue-41110.rs:14:1: 19:2\n+    }\n+\n+    bb10 (cleanup): {\n         _2 = move _5;                    // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n-        goto -> bb5;                     // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n+        goto -> bb6;                     // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n     }\n \n-    bb9: {\n+    bb11: {\n         _2 = move _5;                    // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n         goto -> bb2;                     // scope 2 at $DIR/issue-41110.rs:18:5: 18:6\n     }\n \n-    bb10 (cleanup): {\n-        drop(_1) -> bb7;                 // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+    bb12 (cleanup): {\n+        drop(_1) -> bb9;                 // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n \n-    bb11 (cleanup): {\n-        switchInt(_6) -> [false: bb7, otherwise: bb10]; // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n+    bb13 (cleanup): {\n+        switchInt(_6) -> [false: bb9, otherwise: bb12]; // scope 0 at $DIR/issue-41110.rs:19:1: 19:2\n     }\n }"}, {"sha": "488fcb5dd70e8df89f34734b59f910a12311e1ea", "filename": "src/test/mir-opt/issue_41888.main.ElaborateDrops.after.mir", "status": "modified", "additions": 41, "deletions": 33, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/bed69c613471cf0717f1664003ccf714168eec95/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/bed69c613471cf0717f1664003ccf714168eec95/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.after.mir?ref=bed69c613471cf0717f1664003ccf714168eec95", "patch": "@@ -26,7 +26,7 @@ fn main() -> () {\n         _8 = const false;                // scope 0 at $DIR/issue-41888.rs:7:9: 7:10\n         StorageLive(_1);                 // scope 0 at $DIR/issue-41888.rs:7:9: 7:10\n         StorageLive(_2);                 // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n-        _2 = cond() -> [return: bb1, unwind: bb9]; // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n+        _2 = cond() -> [return: bb1, unwind: bb11]; // scope 1 at $DIR/issue-41888.rs:8:8: 8:14\n                                          // mir::Constant\n                                          // + span: $DIR/issue-41888.rs:8:8: 8:12\n                                          // + literal: Const { ty: fn() -> bool {cond}, val: Value(Scalar(<ZST>)) }\n@@ -42,103 +42,111 @@ fn main() -> () {\n         _4 = K;                          // scope 1 at $DIR/issue-41888.rs:9:18: 9:19\n         _3 = E::F(move _4);              // scope 1 at $DIR/issue-41888.rs:9:13: 9:20\n         StorageDead(_4);                 // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n-        goto -> bb12;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n+        goto -> bb14;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n     }\n \n     bb3: {\n         _0 = const ();                   // scope 1 at $DIR/issue-41888.rs:14:6: 14:6\n-        goto -> bb7;                     // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n+        goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:8:5: 14:6\n     }\n \n     bb4: {\n+        goto -> bb5;                     // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n+    }\n+\n+    bb5: {\n         StorageDead(_3);                 // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n         _5 = discriminant(_1);           // scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n-        switchInt(move _5) -> [0_isize: bb6, otherwise: bb5]; // scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n+        switchInt(move _5) -> [0_isize: bb7, otherwise: bb6]; // scope 1 at $DIR/issue-41888.rs:10:16: 10:24\n     }\n \n-    bb5: {\n+    bb6: {\n         _0 = const ();                   // scope 1 at $DIR/issue-41888.rs:13:10: 13:10\n-        goto -> bb7;                     // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n+        goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n     }\n \n-    bb6: {\n+    bb7: {\n         StorageLive(_6);                 // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n         _9 = const false;                // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n         _6 = move ((_1 as F).0: K);      // scope 1 at $DIR/issue-41888.rs:10:21: 10:23\n         _0 = const ();                   // scope 2 at $DIR/issue-41888.rs:10:29: 13:10\n         StorageDead(_6);                 // scope 1 at $DIR/issue-41888.rs:13:9: 13:10\n-        goto -> bb7;                     // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n+        goto -> bb8;                     // scope 1 at $DIR/issue-41888.rs:10:9: 13:10\n     }\n \n-    bb7: {\n+    bb8: {\n         StorageDead(_2);                 // scope 1 at $DIR/issue-41888.rs:14:5: 14:6\n-        goto -> bb18;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        goto -> bb20;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb8: {\n+    bb9: {\n         _7 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n         _8 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n         _9 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n         StorageDead(_1);                 // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n         return;                          // scope 0 at $DIR/issue-41888.rs:15:2: 15:2\n     }\n \n-    bb9 (cleanup): {\n-        goto -> bb10;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb10 (cleanup): {\n+        goto -> bb11;                    // scope 1 at $DIR/issue-41888.rs:9:19: 9:20\n+    }\n+\n+    bb11 (cleanup): {\n+        goto -> bb12;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb10 (cleanup): {\n+    bb12 (cleanup): {\n         resume;                          // scope 0 at $DIR/issue-41888.rs:6:1: 15:2\n     }\n \n-    bb11 (cleanup): {\n+    bb13 (cleanup): {\n         _7 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         _8 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         _9 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         _1 = move _3;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n-        goto -> bb9;                     // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n+        goto -> bb10;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n     }\n \n-    bb12: {\n+    bb14: {\n         _7 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         _8 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         _9 = const true;                 // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         _1 = move _3;                    // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n         goto -> bb4;                     // scope 1 at $DIR/issue-41888.rs:9:9: 9:10\n     }\n \n-    bb13: {\n+    bb15: {\n         _7 = const false;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-        goto -> bb8;                     // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        goto -> bb9;                     // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb14 (cleanup): {\n-        goto -> bb10;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb16 (cleanup): {\n+        goto -> bb12;                    // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb15: {\n-        drop(_1) -> [return: bb13, unwind: bb10]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb17: {\n+        drop(_1) -> [return: bb15, unwind: bb12]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb16 (cleanup): {\n-        drop(_1) -> bb10;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb18 (cleanup): {\n+        drop(_1) -> bb12;                // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb17: {\n+    bb19: {\n         _10 = discriminant(_1);          // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-        switchInt(move _10) -> [0_isize: bb13, otherwise: bb15]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        switchInt(move _10) -> [0_isize: bb15, otherwise: bb17]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb18: {\n-        switchInt(_7) -> [false: bb13, otherwise: bb17]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb20: {\n+        switchInt(_7) -> [false: bb15, otherwise: bb19]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb19 (cleanup): {\n+    bb21 (cleanup): {\n         _11 = discriminant(_1);          // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n-        switchInt(move _11) -> [0_isize: bb14, otherwise: bb16]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+        switchInt(move _11) -> [0_isize: bb16, otherwise: bb18]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n \n-    bb20 (cleanup): {\n-        switchInt(_7) -> [false: bb10, otherwise: bb19]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n+    bb22 (cleanup): {\n+        switchInt(_7) -> [false: bb12, otherwise: bb21]; // scope 0 at $DIR/issue-41888.rs:15:1: 15:2\n     }\n }"}, {"sha": "c1421f20a0ba23da67f9e3203b958aa58bc4cd3c", "filename": "src/test/mir-opt/issue_62289.test.ElaborateDrops.before.mir", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bed69c613471cf0717f1664003ccf714168eec95/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/bed69c613471cf0717f1664003ccf714168eec95/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir?ref=bed69c613471cf0717f1664003ccf714168eec95", "patch": "@@ -30,7 +30,7 @@ fn test() -> Option<Box<u32>> {\n         StorageLive(_3);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n         StorageLive(_4);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n         _4 = Option::<u32>::None;        // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n-        _3 = <Option<u32> as Try>::into_result(move _4) -> [return: bb1, unwind: bb9]; // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        _3 = <Option<u32> as Try>::into_result(move _4) -> [return: bb1, unwind: bb12]; // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n                                          // mir::Constant\n                                          // + span: $DIR/issue-62289.rs:9:15: 9:20\n                                          // + literal: Const { ty: fn(std::option::Option<u32>) -> std::result::Result<<std::option::Option<u32> as std::ops::Try>::Ok, <std::option::Option<u32> as std::ops::Try>::Error> {<std::option::Option<u32> as std::ops::Try>::into_result}, val: Value(Scalar(<ZST>)) }\n@@ -48,11 +48,7 @@ fn test() -> Option<Box<u32>> {\n         (*_2) = _10;                     // scope 4 at $DIR/issue-62289.rs:9:15: 9:20\n         StorageDead(_10);                // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n         _1 = move _2;                    // scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n-        _0 = Option::<Box<u32>>::Some(move _1); // scope 0 at $DIR/issue-62289.rs:9:5: 9:22\n-        StorageDead(_1);                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n-        StorageDead(_3);                 // scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n-        goto -> bb8;                     // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n+        drop(_2) -> [return: bb7, unwind: bb11]; // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n     }\n \n     bb3: {\n@@ -65,15 +61,15 @@ fn test() -> Option<Box<u32>> {\n         StorageLive(_8);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n         StorageLive(_9);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n         _9 = _6;                         // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        _8 = <NoneError as From<NoneError>>::from(move _9) -> [return: bb5, unwind: bb9]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+        _8 = <NoneError as From<NoneError>>::from(move _9) -> [return: bb5, unwind: bb12]; // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n                                          // mir::Constant\n                                          // + span: $DIR/issue-62289.rs:9:19: 9:20\n                                          // + literal: Const { ty: fn(std::option::NoneError) -> std::option::NoneError {<std::option::NoneError as std::convert::From<std::option::NoneError>>::from}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb5: {\n         StorageDead(_9);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        _0 = <Option<Box<u32>> as Try>::from_error(move _8) -> [return: bb6, unwind: bb9]; // scope 2 at $DIR/issue-62289.rs:9:15: 9:20\n+        _0 = <Option<Box<u32>> as Try>::from_error(move _8) -> [return: bb6, unwind: bb12]; // scope 2 at $DIR/issue-62289.rs:9:15: 9:20\n                                          // mir::Constant\n                                          // + span: $DIR/issue-62289.rs:9:15: 9:20\n                                          // + literal: Const { ty: fn(<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::Error) -> std::option::Option<std::boxed::Box<u32>> {<std::option::Option<std::boxed::Box<u32>> as std::ops::Try>::from_error}, val: Value(Scalar(<ZST>)) }\n@@ -82,25 +78,41 @@ fn test() -> Option<Box<u32>> {\n     bb6: {\n         StorageDead(_8);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n         StorageDead(_6);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        drop(_2) -> bb7;                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        drop(_2) -> bb9;                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n     }\n \n     bb7: {\n+        StorageDead(_2);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        _0 = Option::<Box<u32>>::Some(move _1); // scope 0 at $DIR/issue-62289.rs:9:5: 9:22\n+        drop(_1) -> bb8;                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+    }\n+\n+    bb8: {\n+        StorageDead(_1);                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+        StorageDead(_3);                 // scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n+        goto -> bb10;                    // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n+    }\n+\n+    bb9: {\n         StorageDead(_2);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n         StorageDead(_1);                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n         StorageDead(_3);                 // scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n-        goto -> bb8;                     // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n+        goto -> bb10;                    // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n     }\n \n-    bb8: {\n+    bb10: {\n         return;                          // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n     }\n \n-    bb9 (cleanup): {\n-        drop(_2) -> bb10;                // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+    bb11 (cleanup): {\n+        drop(_1) -> bb13;                // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+    }\n+\n+    bb12 (cleanup): {\n+        drop(_2) -> bb13;                // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n     }\n \n-    bb10 (cleanup): {\n+    bb13 (cleanup): {\n         resume;                          // scope 0 at $DIR/issue-62289.rs:8:1: 10:2\n     }\n }"}, {"sha": "d18f6308ded84e93308851faf27a822ff1b8e3c3", "filename": "src/test/mir-opt/uniform_array_move_out.move_out_by_subslice.mir_map.0.mir", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bed69c613471cf0717f1664003ccf714168eec95/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/bed69c613471cf0717f1664003ccf714168eec95/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir?ref=bed69c613471cf0717f1664003ccf714168eec95", "patch": "@@ -22,38 +22,62 @@ fn move_out_by_subslice() -> () {\n         _3 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n         (*_3) = const 1_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n         _2 = move _3;                    // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n+        drop(_3) -> [return: bb1, unwind: bb9]; // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n+    }\n+\n+    bb1: {\n         StorageDead(_3);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n         StorageLive(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n         StorageLive(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n         _5 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n         (*_5) = const 2_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n         _4 = move _5;                    // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+        drop(_5) -> [return: bb2, unwind: bb8]; // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n+    }\n+\n+    bb2: {\n         StorageDead(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n         _1 = [move _2, move _4];         // scope 0 at $DIR/uniform_array_move_out.rs:11:13: 11:27\n+        drop(_4) -> [return: bb3, unwind: bb9]; // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+    }\n+\n+    bb3: {\n         StorageDead(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+        drop(_2) -> [return: bb4, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+    }\n+\n+    bb4: {\n         StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n         FakeRead(ForLet, _1);            // scope 0 at $DIR/uniform_array_move_out.rs:11:9: 11:10\n         StorageLive(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n         _6 = move _1[0..2];              // scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n         _0 = const ();                   // scope 0 at $DIR/uniform_array_move_out.rs:10:27: 13:2\n-        drop(_6) -> [return: bb1, unwind: bb3]; // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+        drop(_6) -> [return: bb5, unwind: bb7]; // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n     }\n \n-    bb1: {\n+    bb5: {\n         StorageDead(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n-        drop(_1) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+        drop(_1) -> [return: bb6, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n     }\n \n-    bb2: {\n+    bb6: {\n         StorageDead(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n         return;                          // scope 0 at $DIR/uniform_array_move_out.rs:13:2: 13:2\n     }\n \n-    bb3 (cleanup): {\n-        drop(_1) -> bb4;                 // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+    bb7 (cleanup): {\n+        drop(_1) -> bb10;                // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+    }\n+\n+    bb8 (cleanup): {\n+        drop(_4) -> bb9;                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+    }\n+\n+    bb9 (cleanup): {\n+        drop(_2) -> bb10;                // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n     }\n \n-    bb4 (cleanup): {\n+    bb10 (cleanup): {\n         resume;                          // scope 0 at $DIR/uniform_array_move_out.rs:10:1: 13:2\n     }\n }"}, {"sha": "eda8e5fd3afe7939f056584cb5d88b753a4afc51", "filename": "src/test/mir-opt/uniform_array_move_out.move_out_from_end.mir_map.0.mir", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bed69c613471cf0717f1664003ccf714168eec95/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/bed69c613471cf0717f1664003ccf714168eec95/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir?ref=bed69c613471cf0717f1664003ccf714168eec95", "patch": "@@ -22,38 +22,62 @@ fn move_out_from_end() -> () {\n         _3 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n         (*_3) = const 1_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n         _2 = move _3;                    // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n+        drop(_3) -> [return: bb1, unwind: bb9]; // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n+    }\n+\n+    bb1: {\n         StorageDead(_3);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n         StorageLive(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n         StorageLive(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n         _5 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n         (*_5) = const 2_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n         _4 = move _5;                    // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+        drop(_5) -> [return: bb2, unwind: bb8]; // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n+    }\n+\n+    bb2: {\n         StorageDead(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n         _1 = [move _2, move _4];         // scope 0 at $DIR/uniform_array_move_out.rs:5:13: 5:27\n+        drop(_4) -> [return: bb3, unwind: bb9]; // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+    }\n+\n+    bb3: {\n         StorageDead(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+        drop(_2) -> [return: bb4, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+    }\n+\n+    bb4: {\n         StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n         FakeRead(ForLet, _1);            // scope 0 at $DIR/uniform_array_move_out.rs:5:9: 5:10\n         StorageLive(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n         _6 = move _1[1 of 2];            // scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n         _0 = const ();                   // scope 0 at $DIR/uniform_array_move_out.rs:4:24: 7:2\n-        drop(_6) -> [return: bb1, unwind: bb3]; // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+        drop(_6) -> [return: bb5, unwind: bb7]; // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n     }\n \n-    bb1: {\n+    bb5: {\n         StorageDead(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n-        drop(_1) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+        drop(_1) -> [return: bb6, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n     }\n \n-    bb2: {\n+    bb6: {\n         StorageDead(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n         return;                          // scope 0 at $DIR/uniform_array_move_out.rs:7:2: 7:2\n     }\n \n-    bb3 (cleanup): {\n-        drop(_1) -> bb4;                 // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+    bb7 (cleanup): {\n+        drop(_1) -> bb10;                // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+    }\n+\n+    bb8 (cleanup): {\n+        drop(_4) -> bb9;                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+    }\n+\n+    bb9 (cleanup): {\n+        drop(_2) -> bb10;                // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n     }\n \n-    bb4 (cleanup): {\n+    bb10 (cleanup): {\n         resume;                          // scope 0 at $DIR/uniform_array_move_out.rs:4:1: 7:2\n     }\n }"}]}