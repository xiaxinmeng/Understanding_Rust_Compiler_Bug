{"sha": "51f25b3cfcb8137e7a95e35a89e5b3a7f33858b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxZjI1YjNjZmNiODEzN2U3YTk1ZTM1YTg5ZTViM2E3ZjMzODU4YjI=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-12-12T08:17:47Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-12-19T20:57:02Z"}, "message": "resolve: clean up diagnostics for name conflicts.", "tree": {"sha": "643836123611b01f15168293565fff39135faa10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/643836123611b01f15168293565fff39135faa10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51f25b3cfcb8137e7a95e35a89e5b3a7f33858b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51f25b3cfcb8137e7a95e35a89e5b3a7f33858b2", "html_url": "https://github.com/rust-lang/rust/commit/51f25b3cfcb8137e7a95e35a89e5b3a7f33858b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51f25b3cfcb8137e7a95e35a89e5b3a7f33858b2/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e61ff25d85dcdc81c55f51ba2a777e13e561a25", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e61ff25d85dcdc81c55f51ba2a777e13e561a25", "html_url": "https://github.com/rust-lang/rust/commit/8e61ff25d85dcdc81c55f51ba2a777e13e561a25"}], "stats": {"total": 59, "additions": 19, "deletions": 40}, "files": [{"sha": "3535aab9a1bd93bb5154cf45d43a774ee5816169", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 8, "deletions": 29, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/51f25b3cfcb8137e7a95e35a89e5b3a7f33858b2/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51f25b3cfcb8137e7a95e35a89e5b3a7f33858b2/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=51f25b3cfcb8137e7a95e35a89e5b3a7f33858b2", "patch": "@@ -3156,40 +3156,19 @@ impl<'a> Resolver<'a> {\n         };\n \n         let mut err = match (old_binding.is_extern_crate(), binding.is_extern_crate()) {\n-            (true, true) => {\n-                let mut e = struct_span_err!(self.session, span, E0259, \"{}\", msg);\n-                e.span_label(span, &format!(\"`{}` was already imported\", name));\n-                e\n-            },\n-            (true, _) | (_, true) if binding.is_import() && old_binding.is_import() => {\n-                let mut e = struct_span_err!(self.session, span, E0254, \"{}\", msg);\n-                e.span_label(span, &\"already imported\");\n-                e\n-            },\n-            (true, _) | (_, true) => {\n-                let mut e = struct_span_err!(self.session, span, E0260, \"{}\", msg);\n-                e.span_label(span, &format!(\"`{}` already imported\", name));\n-                e\n+            (true, true) => struct_span_err!(self.session, span, E0259, \"{}\", msg),\n+            (true, _) | (_, true) => match binding.is_import() && old_binding.is_import() {\n+                true => struct_span_err!(self.session, span, E0254, \"{}\", msg),\n+                false => struct_span_err!(self.session, span, E0260, \"{}\", msg),\n             },\n             _ => match (old_binding.is_import(), binding.is_import()) {\n-                (false, false) => {\n-                    let mut e = struct_span_err!(self.session, span, E0428, \"{}\", msg);\n-                    e.span_label(span, &format!(\"already defined\"));\n-                    e\n-                },\n-                (true, true) => {\n-                    let mut e = struct_span_err!(self.session, span, E0252, \"{}\", msg);\n-                    e.span_label(span, &format!(\"already imported\"));\n-                    e\n-                },\n-                _ => {\n-                    let mut e = struct_span_err!(self.session, span, E0255, \"{}\", msg);\n-                    e.span_label(span, &format!(\"`{}` was already imported\", name));\n-                    e\n-                }\n+                (false, false) => struct_span_err!(self.session, span, E0428, \"{}\", msg),\n+                (true, true) => struct_span_err!(self.session, span, E0252, \"{}\", msg),\n+                _ => struct_span_err!(self.session, span, E0255, \"{}\", msg),\n             },\n         };\n \n+        err.span_label(span, &format!(\"`{}` already {}\", name, participle));\n         if old_binding.span != syntax_pos::DUMMY_SP {\n             err.span_label(old_binding.span, &format!(\"previous {} of `{}` here\", noun, name));\n         }"}, {"sha": "b2129902ef9c3bac73fa7389e3cee6d64784610b", "filename": "src/test/compile-fail/E0259.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51f25b3cfcb8137e7a95e35a89e5b3a7f33858b2/src%2Ftest%2Fcompile-fail%2FE0259.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51f25b3cfcb8137e7a95e35a89e5b3a7f33858b2/src%2Ftest%2Fcompile-fail%2FE0259.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0259.rs?ref=51f25b3cfcb8137e7a95e35a89e5b3a7f33858b2", "patch": "@@ -15,6 +15,6 @@ extern crate collections;\n \n extern crate libc as collections;\n //~^ ERROR E0259\n-//~| NOTE `collections` was already imported\n+//~| NOTE `collections` already imported\n \n fn main() {}"}, {"sha": "e9df8868a1ed9d56a371b34802f629fda27d9c2c", "filename": "src/test/compile-fail/blind-item-item-shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51f25b3cfcb8137e7a95e35a89e5b3a7f33858b2/src%2Ftest%2Fcompile-fail%2Fblind-item-item-shadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51f25b3cfcb8137e7a95e35a89e5b3a7f33858b2/src%2Ftest%2Fcompile-fail%2Fblind-item-item-shadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblind-item-item-shadow.rs?ref=51f25b3cfcb8137e7a95e35a89e5b3a7f33858b2", "patch": "@@ -12,6 +12,6 @@ mod foo { pub mod foo {  } } //~ NOTE previous definition of `foo` here\n \n use foo::foo;\n //~^ ERROR a module named `foo` has already been defined in this module\n-//~| was already imported\n+//~| `foo` already defined\n \n fn main() {}"}, {"sha": "88e804fb8aa0870df57fc4f6e25a2bb07effb47f", "filename": "src/test/compile-fail/issue-19498.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/51f25b3cfcb8137e7a95e35a89e5b3a7f33858b2/src%2Ftest%2Fcompile-fail%2Fissue-19498.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51f25b3cfcb8137e7a95e35a89e5b3a7f33858b2/src%2Ftest%2Fcompile-fail%2Fissue-19498.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19498.rs?ref=51f25b3cfcb8137e7a95e35a89e5b3a7f33858b2", "patch": "@@ -11,13 +11,13 @@\n use self::A; //~ NOTE previous import of `A` here\n use self::B; //~ NOTE previous import of `B` here\n mod A {} //~ ERROR a module named `A` has already been imported in this module\n-//~| `A` was already imported\n+//~| `A` already imported\n pub mod B {} //~ ERROR a module named `B` has already been imported in this module\n-//~| `B` was already imported\n+//~| `B` already imported\n mod C {\n     use C::D; //~ NOTE previous import of `D` here\n     mod D {} //~ ERROR a module named `D` has already been imported in this module\n-    //~| `D` was already imported\n+    //~| `D` already imported\n }\n \n fn main() {}"}, {"sha": "26bb72b862f2ce888560f9a8cf28e013beeab465", "filename": "src/test/compile-fail/issue-24081.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/51f25b3cfcb8137e7a95e35a89e5b3a7f33858b2/src%2Ftest%2Fcompile-fail%2Fissue-24081.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51f25b3cfcb8137e7a95e35a89e5b3a7f33858b2/src%2Ftest%2Fcompile-fail%2Fissue-24081.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24081.rs?ref=51f25b3cfcb8137e7a95e35a89e5b3a7f33858b2", "patch": "@@ -15,14 +15,14 @@ use std::ops::Div; //~ NOTE previous import\n use std::ops::Rem; //~ NOTE previous import\n \n type Add = bool; //~ ERROR a trait named `Add` has already been imported in this module\n-//~| was already imported\n+//~| `Add` already imported\n struct Sub { x: f32 } //~ ERROR a trait named `Sub` has already been imported in this module\n-//~| was already imported\n+//~| `Sub` already imported\n enum Mul { A, B } //~ ERROR a trait named `Mul` has already been imported in this module\n-//~| was already imported\n+//~| `Mul` already imported\n mod Div { } //~ ERROR a trait named `Div` has already been imported in this module\n-//~| was already imported\n+//~| `Div` already imported\n trait Rem {  } //~ ERROR a trait named `Rem` has already been imported in this module\n-//~| was already imported\n+//~| `Rem` already imported\n \n fn main() {}"}, {"sha": "2083d98e09d310a2da3c446d143f63272edf6d48", "filename": "src/test/compile-fail/resolve-conflict-item-vs-import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51f25b3cfcb8137e7a95e35a89e5b3a7f33858b2/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-item-vs-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51f25b3cfcb8137e7a95e35a89e5b3a7f33858b2/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-item-vs-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-conflict-item-vs-import.rs?ref=51f25b3cfcb8137e7a95e35a89e5b3a7f33858b2", "patch": "@@ -13,6 +13,6 @@ use std::mem::transmute;\n \n fn transmute() {}\n //~^ ERROR a value named `transmute` has already been imported in this module\n-//~| was already imported\n+//~| `transmute` already imported\n fn main() {\n }"}]}