{"sha": "61f642f6f89bfb364171587426be954207539b35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxZjY0MmY2Zjg5YmZiMzY0MTcxNTg3NDI2YmU5NTQyMDc1MzliMzU=", "commit": {"author": {"name": "Sinh Pham", "email": "phamansinh@gmail.com", "date": "2015-09-04T03:38:12Z"}, "committer": {"name": "Sinh Pham", "email": "phamansinh@gmail.com", "date": "2015-09-04T03:41:25Z"}, "message": "Support unicode in string literals.", "tree": {"sha": "535dda83434a0a6bcf33a58103e2ccc23b1d04d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/535dda83434a0a6bcf33a58103e2ccc23b1d04d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61f642f6f89bfb364171587426be954207539b35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61f642f6f89bfb364171587426be954207539b35", "html_url": "https://github.com/rust-lang/rust/commit/61f642f6f89bfb364171587426be954207539b35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61f642f6f89bfb364171587426be954207539b35/comments", "author": {"login": "sinhpham", "id": 633331, "node_id": "MDQ6VXNlcjYzMzMzMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/633331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinhpham", "html_url": "https://github.com/sinhpham", "followers_url": "https://api.github.com/users/sinhpham/followers", "following_url": "https://api.github.com/users/sinhpham/following{/other_user}", "gists_url": "https://api.github.com/users/sinhpham/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinhpham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinhpham/subscriptions", "organizations_url": "https://api.github.com/users/sinhpham/orgs", "repos_url": "https://api.github.com/users/sinhpham/repos", "events_url": "https://api.github.com/users/sinhpham/events{/privacy}", "received_events_url": "https://api.github.com/users/sinhpham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinhpham", "id": 633331, "node_id": "MDQ6VXNlcjYzMzMzMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/633331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinhpham", "html_url": "https://github.com/sinhpham", "followers_url": "https://api.github.com/users/sinhpham/followers", "following_url": "https://api.github.com/users/sinhpham/following{/other_user}", "gists_url": "https://api.github.com/users/sinhpham/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinhpham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinhpham/subscriptions", "organizations_url": "https://api.github.com/users/sinhpham/orgs", "repos_url": "https://api.github.com/users/sinhpham/repos", "events_url": "https://api.github.com/users/sinhpham/events{/privacy}", "received_events_url": "https://api.github.com/users/sinhpham/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0baa3d06e7aa22a7f4465911f385a18000a72f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0baa3d06e7aa22a7f4465911f385a18000a72f3", "html_url": "https://github.com/rust-lang/rust/commit/b0baa3d06e7aa22a7f4465911f385a18000a72f3"}], "stats": {"total": 103, "additions": 52, "deletions": 51}, "files": [{"sha": "63854ccae46e9495b2c1e4c38fc2ff97543975ba", "filename": "Cargo.lock", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61f642f6f89bfb364171587426be954207539b35/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/61f642f6f89bfb364171587426be954207539b35/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=61f642f6f89bfb364171587426be954207539b35", "patch": "@@ -8,6 +8,7 @@ dependencies = [\n  \"strings 0.0.1 (git+https://github.com/nrc/strings.rs.git)\",\n  \"term 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-segmentation 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -87,6 +88,11 @@ dependencies = [\n  \"rustc-serialize 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"unicode-segmentation\"\n+version = \"0.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"winapi\"\n version = \"0.2.2\""}, {"sha": "377c88a955b9885a7c3eec1c3530c1ef601289fa", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61f642f6f89bfb364171587426be954207539b35/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/61f642f6f89bfb364171587426be954207539b35/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=61f642f6f89bfb364171587426be954207539b35", "patch": "@@ -15,6 +15,8 @@ git = \"https://github.com/nrc/strings.rs.git\"\n [dependencies]\n toml = \"0.1.20\"\n rustc-serialize = \"0.3.14\"\n+unicode-segmentation = \"0.1.2\"\n+regex = \"0.1.41\"\n \n [dev-dependencies]\n diff = \"0.1.0\""}, {"sha": "d82e34d6d809f59948828dfac87156dae390a0c5", "filename": "src/expr.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/61f642f6f89bfb364171587426be954207539b35/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f642f6f89bfb364171587426be954207539b35/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=61f642f6f89bfb364171587426be954207539b35", "patch": "@@ -28,8 +28,8 @@ impl Rewrite for ast::Expr {\n         match self.node {\n             ast::Expr_::ExprLit(ref l) => {\n                 match l.node {\n-                    ast::Lit_::LitStr(ref is, ast::StrStyle::CookedStr) => {\n-                        rewrite_string_lit(context, &is, l.span, width, offset)\n+                    ast::Lit_::LitStr(_, ast::StrStyle::CookedStr) => {\n+                        rewrite_string_lit(context, l.span, width, offset)\n                     }\n                     _ => Some(context.snippet(self.span)),\n                 }\n@@ -823,7 +823,6 @@ fn rewrite_pat_expr(context: &RewriteContext,\n }\n \n fn rewrite_string_lit(context: &RewriteContext,\n-                      s: &str,\n                       span: Span,\n                       width: usize,\n                       offset: usize)\n@@ -842,7 +841,10 @@ fn rewrite_string_lit(context: &RewriteContext,\n         trim_end: false,\n     };\n \n-    Some(rewrite_string(&s.escape_default(), &fmt))\n+    let string_lit = context.snippet(span);\n+    let str_lit = &string_lit[1..string_lit.len() - 1]; // Remove the quote characters.\n+\n+    Some(rewrite_string(str_lit, &fmt))\n }\n \n fn rewrite_call(context: &RewriteContext,"}, {"sha": "3257d4c6018a4a08179e1348a1b434aa950645e1", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/61f642f6f89bfb364171587426be954207539b35/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f642f6f89bfb364171587426be954207539b35/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=61f642f6f89bfb364171587426be954207539b35", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n #![feature(rustc_private)]\n-#![feature(str_escape)]\n-#![feature(str_char)]\n #![feature(custom_attribute)]\n #![allow(unused_attributes)]\n \n@@ -30,6 +28,9 @@ extern crate rustc_serialize;\n \n extern crate strings;\n \n+extern crate unicode_segmentation;\n+extern crate regex;\n+\n use rustc::session::Session;\n use rustc::session::config as rustc_config;\n use rustc::session::config::Input;"}, {"sha": "ba93b2db81d4e87027915ebbad6319ef53c8e532", "filename": "src/string.rs", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/61f642f6f89bfb364171587426be954207539b35/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f642f6f89bfb364171587426be954207539b35/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=61f642f6f89bfb364171587426be954207539b35", "patch": "@@ -10,7 +10,12 @@\n \n // Format string literals.\n \n-use utils::{make_indent, next_char, prev_char, round_up_to_power_of_two};\n+\n+\n+use unicode_segmentation::UnicodeSegmentation;\n+use regex::Regex;\n+\n+use utils::{make_indent, round_up_to_power_of_two};\n \n use MIN_STRING;\n \n@@ -26,8 +31,12 @@ pub struct StringFormat<'a> {\n \n // TODO: simplify this!\n pub fn rewrite_string<'a>(s: &str, fmt: &StringFormat<'a>) -> String {\n-    // FIXME I bet this stomps unicode escapes in the source string\n     // TODO if lo.col > IDEAL - 10, start a new line (need cur indent for that)\n+    // Strip line breaks.\n+    let re = Regex::new(r\"(\\\\[:space:]+)\").unwrap();\n+    let stripped_str = re.replace_all(s, \"\");\n+\n+    let graphemes = UnicodeSegmentation::graphemes(&*stripped_str, false).collect::<Vec<&str>>();\n \n     let indent = make_indent(fmt.offset);\n     let indent = &indent;\n@@ -39,41 +48,36 @@ pub fn rewrite_string<'a>(s: &str, fmt: &StringFormat<'a>) -> String {\n     let ender_length = fmt.line_end.len();\n     let max_chars = fmt.width.checked_sub(fmt.opener.len()).unwrap_or(0)\n                              .checked_sub(ender_length).unwrap_or(1);\n-\n     loop {\n         let mut cur_end = cur_start + max_chars;\n \n-        if cur_end >= s.len() {\n-            result.push_str(&s[cur_start..]);\n+        if cur_end >= graphemes.len() {\n+            let line = &graphemes[cur_start..].join(\"\");\n+            result.push_str(line);\n             break;\n         }\n-\n-        // Make sure we're on a char boundary.\n-        cur_end = next_char(&s, cur_end);\n-\n         // Push cur_end left until we reach whitespace.\n-        while !s.char_at(cur_end - 1).is_whitespace() {\n-            cur_end = prev_char(&s, cur_end);\n-\n+        while !(graphemes[cur_end - 1].trim().len() == 0) {\n+            cur_end -= 1;\n             if cur_end - cur_start < MIN_STRING {\n                 // We can't break at whitespace, fall back to splitting\n                 // anywhere that doesn't break an escape sequence.\n-                cur_end = next_char(&s, cur_start + max_chars);\n-                while s.char_at(prev_char(&s, cur_end)) == '\\\\' {\n-                    cur_end = prev_char(&s, cur_end);\n+                cur_end = cur_start + max_chars;\n+                while graphemes[cur_end - 1] == \"\\\\\" {\n+                    cur_end -= 1;\n                 }\n                 break;\n             }\n         }\n         // Make sure there is no whitespace to the right of the break.\n-        while cur_end < s.len() && s.char_at(cur_end).is_whitespace() {\n-            cur_end = next_char(&s, cur_end + 1);\n+        while cur_end < s.len() && graphemes[cur_end].trim().len() == 0 {\n+            cur_end += 1;\n         }\n-\n+        let raw_line = graphemes[cur_start..cur_end].join(\"\");\n         let line: &str = if fmt.trim_end {\n-            &s[cur_start..cur_end].trim_right_matches(char::is_whitespace)\n+            &(raw_line.trim())\n         } else {\n-            &s[cur_start..cur_end]\n+            &raw_line\n         };\n \n         result.push_str(line);"}, {"sha": "936a712ca181dc638b066135ed5211d8044974ec", "filename": "src/utils.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/61f642f6f89bfb364171587426be954207539b35/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f642f6f89bfb364171587426be954207539b35/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=61f642f6f89bfb364171587426be954207539b35", "patch": "@@ -32,31 +32,6 @@ pub fn span_after(original: Span, needle: &str, codemap: &CodeMap) -> BytePos {\n     original.lo + BytePos(snippet.find_uncommented(needle).unwrap() as u32 + 1)\n }\n \n-#[inline]\n-pub fn prev_char(s: &str, mut i: usize) -> usize {\n-    if i == 0 {\n-        return 0;\n-    }\n-\n-    i -= 1;\n-    while !s.is_char_boundary(i) {\n-        i -= 1;\n-    }\n-    i\n-}\n-\n-#[inline]\n-pub fn next_char(s: &str, mut i: usize) -> usize {\n-    if i >= s.len() {\n-        return s.len();\n-    }\n-\n-    while !s.is_char_boundary(i) {\n-        i += 1;\n-    }\n-    i\n-}\n-\n #[inline]\n pub fn make_indent(width: usize) -> String {\n     let mut indent = String::with_capacity(width);"}, {"sha": "e95aaae75e0b266e475a76f5b9e4a690b9ea7791", "filename": "tests/source/string-lit.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/61f642f6f89bfb364171587426be954207539b35/tests%2Fsource%2Fstring-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f642f6f89bfb364171587426be954207539b35/tests%2Fsource%2Fstring-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstring-lit.rs?ref=61f642f6f89bfb364171587426be954207539b35", "patch": "@@ -24,6 +24,11 @@ formatting\"#;\n \n     let xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx =\n         funktion(\"yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\");\n+        \n+    let unicode = \"a\u0310e\u0301o\u0308\u0332\\r\\n\";\n+    let unicode2 = \"L\u00f6we \u8001\u864e L\u00e9opard\";\n+    let unicode3 = \"\u4e2d\u534eVi\u1ec7t Nam\";\n+    let unicode4 = \"\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\";\n \n     \"stuff\"\n }"}, {"sha": "21cdc199d6ec7690f759bdb21ad6e2c876059204", "filename": "tests/target/string-lit.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61f642f6f89bfb364171587426be954207539b35/tests%2Ftarget%2Fstring-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f642f6f89bfb364171587426be954207539b35/tests%2Ftarget%2Fstring-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstring-lit.rs?ref=61f642f6f89bfb364171587426be954207539b35", "patch": "@@ -30,5 +30,11 @@ formatting\"#;\n                                                                             yyyyyyyyyyyyyyyyyyyyy\\\n                                                                             yyyyyyyyyy\");\n \n+    let unicode = \"a\u0310e\u0301o\u0308\u0332\\r\\n\";\n+    let unicode2 = \"L\u00f6we \u8001\u864e L\u00e9opard\";\n+    let unicode3 = \"\u4e2d\u534eVi\u1ec7t Nam\";\n+    let unicode4 = \"\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\\\n+                    \u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\u2603\";\n+\n     \"stuff\"\n }"}]}