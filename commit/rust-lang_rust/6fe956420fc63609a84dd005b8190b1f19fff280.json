{"sha": "6fe956420fc63609a84dd005b8190b1f19fff280", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmZTk1NjQyMGZjNjM2MDlhODRkZDAwNWI4MTkwYjFmMTlmZmYyODA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-21T22:39:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-21T22:39:06Z"}, "message": "Merge #3673\n\n3673: Add recursive limit for macro expansion when expanding expression r=flodiebold a=edwin0cheng\n\ncc @flodiebold \n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "92898915b3acc1740fc55f8c78d1d20a3362b331", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92898915b3acc1740fc55f8c78d1d20a3362b331"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fe956420fc63609a84dd005b8190b1f19fff280", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJedpeKCRBK7hj4Ov3rIwAAdHIIADhLIsnd/LoRf+iXyYBP4u1p\nIyzELIthvPZjfjIrstPllckzaR4yYjwvYqdNe3/7epzWYWMqO+EYz2J8U4++yREV\nwZHEN7HwSiB2m0X141ngmleYrxsYbqLCatQIbFQErnGwarhuI9ae9/zfX07arbjs\nX6kNtJISW0Uf5nmvC8/jTh3bXS8/TEpAoYNM1MgXBcex8UWn+Pvoej8yzS5taUOA\nTNkdMFlgIsXbL9/NCv99vbPcotWqk14ZWQWd6euICjnrh3/sdYtVHf063NOk2PKj\nizxehOQHM9jnBI35Vbh0yyQckTJtUNS2c+TEN2/Yzx1qZayi+JwVv6O6zs3H7ls=\n=8Ndk\n-----END PGP SIGNATURE-----\n", "payload": "tree 92898915b3acc1740fc55f8c78d1d20a3362b331\nparent fdb12f3e0ecf827d10f81ba4dd0824a3bdce1c97\nparent 92cc6c9816d8dd3793cd810d83f47cbff927494e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1584830346 +0000\ncommitter GitHub <noreply@github.com> 1584830346 +0000\n\nMerge #3673\n\n3673: Add recursive limit for macro expansion when expanding expression r=flodiebold a=edwin0cheng\n\ncc @flodiebold \n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fe956420fc63609a84dd005b8190b1f19fff280", "html_url": "https://github.com/rust-lang/rust/commit/6fe956420fc63609a84dd005b8190b1f19fff280", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fe956420fc63609a84dd005b8190b1f19fff280/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdb12f3e0ecf827d10f81ba4dd0824a3bdce1c97", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdb12f3e0ecf827d10f81ba4dd0824a3bdce1c97", "html_url": "https://github.com/rust-lang/rust/commit/fdb12f3e0ecf827d10f81ba4dd0824a3bdce1c97"}, {"sha": "92cc6c9816d8dd3793cd810d83f47cbff927494e", "url": "https://api.github.com/repos/rust-lang/rust/commits/92cc6c9816d8dd3793cd810d83f47cbff927494e", "html_url": "https://github.com/rust-lang/rust/commit/92cc6c9816d8dd3793cd810d83f47cbff927494e"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "5f9d53ecb2605933fce5fbd6ec49e7096f1104a0", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6fe956420fc63609a84dd005b8190b1f19fff280/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe956420fc63609a84dd005b8190b1f19fff280/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=6fe956420fc63609a84dd005b8190b1f19fff280", "patch": "@@ -30,6 +30,7 @@ pub(crate) struct Expander {\n     hygiene: Hygiene,\n     ast_id_map: Arc<AstIdMap>,\n     module: ModuleId,\n+    recursive_limit: usize,\n }\n \n impl Expander {\n@@ -41,7 +42,7 @@ impl Expander {\n         let crate_def_map = db.crate_def_map(module.krate);\n         let hygiene = Hygiene::new(db.upcast(), current_file_id);\n         let ast_id_map = db.ast_id_map(current_file_id);\n-        Expander { crate_def_map, current_file_id, hygiene, ast_id_map, module }\n+        Expander { crate_def_map, current_file_id, hygiene, ast_id_map, module, recursive_limit: 0 }\n     }\n \n     pub(crate) fn enter_expand<T: ast::AstNode>(\n@@ -50,6 +51,10 @@ impl Expander {\n         local_scope: Option<&ItemScope>,\n         macro_call: ast::MacroCall,\n     ) -> Option<(Mark, T)> {\n+        if self.recursive_limit > 1024 {\n+            return None;\n+        }\n+\n         let macro_call = InFile::new(self.current_file_id, &macro_call);\n \n         if let Some(call_id) = macro_call.as_call_id(db, |path| {\n@@ -73,6 +78,7 @@ impl Expander {\n                     self.hygiene = Hygiene::new(db.upcast(), file_id);\n                     self.current_file_id = file_id;\n                     self.ast_id_map = db.ast_id_map(file_id);\n+                    self.recursive_limit += 1;\n \n                     return Some((mark, expr));\n                 }\n@@ -88,6 +94,7 @@ impl Expander {\n         self.hygiene = Hygiene::new(db.upcast(), mark.file_id);\n         self.current_file_id = mark.file_id;\n         self.ast_id_map = mem::take(&mut mark.ast_id_map);\n+        self.recursive_limit -= 1;\n         mark.bomb.defuse();\n     }\n "}]}