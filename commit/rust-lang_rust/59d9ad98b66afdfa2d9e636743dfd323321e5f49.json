{"sha": "59d9ad98b66afdfa2d9e636743dfd323321e5f49", "node_id": "C_kwDOAAsO6NoAKDU5ZDlhZDk4YjY2YWZkZmEyZDllNjM2NzQzZGZkMzIzMzIxZTVmNDk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-23T00:09:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-23T00:09:40Z"}, "message": "Rollup merge of #90666 - bdbai:arc_new_cyclic, r=m-ou-se\n\nStabilize arc_new_cyclic\n\nThis stabilizes feature `arc_new_cyclic` as the implementation has been merged for one year and there is no unresolved questions. The FCP is not started yet.\n\nCloses #75861 .\n\n``@rustbot`` label +T-libs-api", "tree": {"sha": "efc4952cc9c026198e5dd37d38c181637c78e182", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efc4952cc9c026198e5dd37d38c181637c78e182"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59d9ad98b66afdfa2d9e636743dfd323321e5f49", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh7JzFCRBK7hj4Ov3rIwAADKoIAFHNWQOhY/2C46T38BJJ6ZNd\n7+8Sqv68n2rRlF4IA3u/WHsM8UYrZ1ZNEUDItXi45C6g30KaNoG3vh0h9eQ0gkAy\nLGtFWM9BHSW51zvp4+oIv3o8V1b6Tf01i6C4jP4IajXFBmoM5+tp7CAJHBnjuhdH\nbfCnZR+lqxrryCi2aR6TI5eYzqTEtTtQdgW68a7ftkw1kf4KrWGixh25J2woCV2x\nkPR2ZhxixfNzMVJimIDgZbl3R9OZ7Hj0GfMlWATlntuxUl70iTGq5SqilHr0X9UM\njZSUac36AI2wu59eIFw27cDrElDFbHbBqQ3EVh2uj1GcS6EvJHc9/HlR9hoJvas=\n=yONA\n-----END PGP SIGNATURE-----\n", "payload": "tree efc4952cc9c026198e5dd37d38c181637c78e182\nparent bfe15646761a75f0259e204cab071565eed2b1e5\nparent 00e191c72d16135e74014bc621629524570bbf77\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642896580 +0100\ncommitter GitHub <noreply@github.com> 1642896580 +0100\n\nRollup merge of #90666 - bdbai:arc_new_cyclic, r=m-ou-se\n\nStabilize arc_new_cyclic\n\nThis stabilizes feature `arc_new_cyclic` as the implementation has been merged for one year and there is no unresolved questions. The FCP is not started yet.\n\nCloses #75861 .\n\n``@rustbot`` label +T-libs-api\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59d9ad98b66afdfa2d9e636743dfd323321e5f49", "html_url": "https://github.com/rust-lang/rust/commit/59d9ad98b66afdfa2d9e636743dfd323321e5f49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59d9ad98b66afdfa2d9e636743dfd323321e5f49/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfe15646761a75f0259e204cab071565eed2b1e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfe15646761a75f0259e204cab071565eed2b1e5", "html_url": "https://github.com/rust-lang/rust/commit/bfe15646761a75f0259e204cab071565eed2b1e5"}, {"sha": "00e191c72d16135e74014bc621629524570bbf77", "url": "https://api.github.com/repos/rust-lang/rust/commits/00e191c72d16135e74014bc621629524570bbf77", "html_url": "https://github.com/rust-lang/rust/commit/00e191c72d16135e74014bc621629524570bbf77"}], "stats": {"total": 93, "additions": 66, "deletions": 27}, "files": [{"sha": "78bf28c843c7d385d4a720316c8543351600164b", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/59d9ad98b66afdfa2d9e636743dfd323321e5f49/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d9ad98b66afdfa2d9e636743dfd323321e5f49/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=59d9ad98b66afdfa2d9e636743dfd323321e5f49", "patch": "@@ -374,33 +374,51 @@ impl<T> Rc<T> {\n         }\n     }\n \n-    /// Constructs a new `Rc<T>` using a weak reference to itself. Attempting\n-    /// to upgrade the weak reference before this function returns will result\n-    /// in a `None` value. However, the weak reference may be cloned freely and\n-    /// stored for use at a later time.\n+    /// Constructs a new `Rc<T>` using a closure `data_fn` that has access to a\n+    /// weak reference to the constructing `Rc<T>`.\n+    ///\n+    /// Generally, a structure circularly referencing itself, either directly or\n+    /// indirectly, should not hold a strong reference to prevent a memory leak.\n+    /// In `data_fn`, initialization of `T` can make use of the weak reference\n+    /// by cloning and storing it inside `T` for use at a later time.\n+    ///\n+    /// Since the new `Rc<T>` is not fully-constructed until `Rc<T>::new_cyclic`\n+    /// returns, calling [`upgrade`] on the weak reference inside `data_fn` will\n+    /// fail and result in a `None` value.\n+    ///\n+    /// # Panics\n+    /// If `data_fn` panics, the panic is propagated to the caller, and the\n+    /// temporary [`Weak<T>`] is dropped normally.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(arc_new_cyclic)]\n     /// #![allow(dead_code)]\n     /// use std::rc::{Rc, Weak};\n     ///\n     /// struct Gadget {\n-    ///     self_weak: Weak<Self>,\n-    ///     // ... more fields\n+    ///     me: Weak<Gadget>,\n     /// }\n+    ///\n     /// impl Gadget {\n-    ///     pub fn new() -> Rc<Self> {\n-    ///         Rc::new_cyclic(|self_weak| {\n-    ///             Gadget { self_weak: self_weak.clone(), /* ... */ }\n-    ///         })\n+    ///     /// Construct a reference counted Gadget.\n+    ///     fn new() -> Rc<Self> {\n+    ///         Rc::new_cyclic(|me| Gadget { me: me.clone() })\n+    ///     }\n+    ///\n+    ///     /// Return a reference counted pointer to Self.\n+    ///     fn me(&self) -> Rc<Self> {\n+    ///         self.me.upgrade().unwrap()\n     ///     }\n     /// }\n     /// ```\n+    /// [`upgrade`]: Weak::upgrade\n     #[cfg(not(no_global_oom_handling))]\n-    #[unstable(feature = \"arc_new_cyclic\", issue = \"75861\")]\n-    pub fn new_cyclic(data_fn: impl FnOnce(&Weak<T>) -> T) -> Rc<T> {\n+    #[stable(feature = \"arc_new_cyclic\", since = \"1.60.0\")]\n+    pub fn new_cyclic<F>(data_fn: F) -> Rc<T>\n+    where\n+        F: FnOnce(&Weak<T>) -> T,\n+    {\n         // Construct the inner in the \"uninitialized\" state with a single\n         // weak reference.\n         let uninit_ptr: NonNull<_> = Box::leak(box RcBox {"}, {"sha": "64f21d087da39d5d083d2c00efc5669160957b3e", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/59d9ad98b66afdfa2d9e636743dfd323321e5f49/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d9ad98b66afdfa2d9e636743dfd323321e5f49/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=59d9ad98b66afdfa2d9e636743dfd323321e5f49", "patch": "@@ -351,30 +351,51 @@ impl<T> Arc<T> {\n         unsafe { Self::from_inner(Box::leak(x).into()) }\n     }\n \n-    /// Constructs a new `Arc<T>` using a weak reference to itself. Attempting\n-    /// to upgrade the weak reference before this function returns will result\n-    /// in a `None` value. However, the weak reference may be cloned freely and\n-    /// stored for use at a later time.\n+    /// Constructs a new `Arc<T>` using a closure `data_fn` that has access to\n+    /// a weak reference to the constructing `Arc<T>`.\n     ///\n-    /// # Examples\n+    /// Generally, a structure circularly referencing itself, either directly or\n+    /// indirectly, should not hold a strong reference to prevent a memory leak.\n+    /// In `data_fn`, initialization of `T` can make use of the weak reference\n+    /// by cloning and storing it inside `T` for use at a later time.\n+    ///\n+    /// Since the new `Arc<T>` is not fully-constructed until\n+    /// `Arc<T>::new_cyclic` returns, calling [`upgrade`] on the weak\n+    /// reference inside `data_fn` will fail and result in a `None` value.\n+    ///\n+    /// # Panics\n+    /// If `data_fn` panics, the panic is propagated to the caller, and the\n+    /// temporary [`Weak<T>`] is dropped normally.\n+    ///\n+    /// # Example\n     /// ```\n-    /// #![feature(arc_new_cyclic)]\n     /// #![allow(dead_code)]\n-    ///\n     /// use std::sync::{Arc, Weak};\n     ///\n-    /// struct Foo {\n-    ///     me: Weak<Foo>,\n+    /// struct Gadget {\n+    ///     me: Weak<Gadget>,\n     /// }\n     ///\n-    /// let foo = Arc::new_cyclic(|me| Foo {\n-    ///     me: me.clone(),\n-    /// });\n+    /// impl Gadget {\n+    ///     /// Construct a reference counted Gadget.\n+    ///     fn new() -> Arc<Self> {\n+    ///         Arc::new_cyclic(|me| Gadget { me: me.clone() })\n+    ///     }\n+    ///\n+    ///     /// Return a reference counted pointer to Self.\n+    ///     fn me(&self) -> Arc<Self> {\n+    ///         self.me.upgrade().unwrap()\n+    ///     }\n+    /// }\n     /// ```\n+    /// [`upgrade`]: Weak::upgrade\n     #[cfg(not(no_global_oom_handling))]\n     #[inline]\n-    #[unstable(feature = \"arc_new_cyclic\", issue = \"75861\")]\n-    pub fn new_cyclic(data_fn: impl FnOnce(&Weak<T>) -> T) -> Arc<T> {\n+    #[stable(feature = \"arc_new_cyclic\", since = \"1.60.0\")]\n+    pub fn new_cyclic<F>(data_fn: F) -> Arc<T>\n+    where\n+        F: FnOnce(&Weak<T>) -> T,\n+    {\n         // Construct the inner in the \"uninitialized\" state with a single\n         // weak reference.\n         let uninit_ptr: NonNull<_> = Box::leak(box ArcInner {"}]}