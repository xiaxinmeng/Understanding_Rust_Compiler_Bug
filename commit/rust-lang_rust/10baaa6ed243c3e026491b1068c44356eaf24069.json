{"sha": "10baaa6ed243c3e026491b1068c44356eaf24069", "node_id": "C_kwDOAAsO6NoAKDEwYmFhYTZlZDI0M2MzZTAyNjQ5MWIxMDY4YzQ0MzU2ZWFmMjQwNjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-21T21:20:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-21T21:20:14Z"}, "message": "Auto merge of #96293 - Dylan-DPC:rollup-saipx8c, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #95434 (Only output DepKind in dump-dep-graph.)\n - #96248 (Stop using a string literal as a format argument)\n - #96251 (Update books)\n - #96269 (errors: minor translation-related changes)\n - #96289 (Remove redundant `format!`s)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "2e91fa5cf82292d8d52ca1658222b14549aee583", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e91fa5cf82292d8d52ca1658222b14549aee583"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10baaa6ed243c3e026491b1068c44356eaf24069", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10baaa6ed243c3e026491b1068c44356eaf24069", "html_url": "https://github.com/rust-lang/rust/commit/10baaa6ed243c3e026491b1068c44356eaf24069", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10baaa6ed243c3e026491b1068c44356eaf24069/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de1bc0008be096cf7ed67b93402250d3b3e480d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/de1bc0008be096cf7ed67b93402250d3b3e480d0", "html_url": "https://github.com/rust-lang/rust/commit/de1bc0008be096cf7ed67b93402250d3b3e480d0"}, {"sha": "5ebb8b06d622c96783dbf6e35108f203de2b4151", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ebb8b06d622c96783dbf6e35108f203de2b4151", "html_url": "https://github.com/rust-lang/rust/commit/5ebb8b06d622c96783dbf6e35108f203de2b4151"}], "stats": {"total": 101, "additions": 57, "deletions": 44}, "files": [{"sha": "5de6adcfc79eb82ca5396d9e5637f74be3d19eaf", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10baaa6ed243c3e026491b1068c44356eaf24069/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10baaa6ed243c3e026491b1068c44356eaf24069/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=10baaa6ed243c3e026491b1068c44356eaf24069", "patch": "@@ -1484,7 +1484,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         err.span_suggestion_hidden(\n                             return_span,\n                             \"use `.collect()` to allocate the iterator\",\n-                            format!(\"{}{}\", snippet, \".collect::<Vec<_>>()\"),\n+                            format!(\"{snippet}.collect::<Vec<_>>()\"),\n                             Applicability::MaybeIncorrect,\n                         );\n                     }"}, {"sha": "2d06c9d8ec92c60d8f6cb3d56820d56d7c0d29d7", "filename": "compiler/rustc_incremental/src/assert_dep_graph.rs", "status": "modified", "additions": 28, "deletions": 25, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/10baaa6ed243c3e026491b1068c44356eaf24069/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10baaa6ed243c3e026491b1068c44356eaf24069/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs?ref=10baaa6ed243c3e026491b1068c44356eaf24069", "patch": "@@ -241,7 +241,7 @@ fn dump_graph(query: &DepGraphQuery) {\n             let targets = node_set(&query, &edge_filter.target);\n             filter_nodes(&query, &sources, &targets)\n         }\n-        Err(_) => query.nodes().into_iter().collect(),\n+        Err(_) => query.nodes().into_iter().map(|n| n.kind).collect(),\n     };\n     let edges = filter_edges(&query, &nodes);\n \n@@ -264,41 +264,41 @@ fn dump_graph(query: &DepGraphQuery) {\n }\n \n #[allow(missing_docs)]\n-pub struct GraphvizDepGraph<'q>(FxHashSet<&'q DepNode>, Vec<(&'q DepNode, &'q DepNode)>);\n+pub struct GraphvizDepGraph(FxHashSet<DepKind>, Vec<(DepKind, DepKind)>);\n \n-impl<'a, 'q> dot::GraphWalk<'a> for GraphvizDepGraph<'q> {\n-    type Node = &'q DepNode;\n-    type Edge = (&'q DepNode, &'q DepNode);\n-    fn nodes(&self) -> dot::Nodes<'_, &'q DepNode> {\n+impl<'a> dot::GraphWalk<'a> for GraphvizDepGraph {\n+    type Node = DepKind;\n+    type Edge = (DepKind, DepKind);\n+    fn nodes(&self) -> dot::Nodes<'_, DepKind> {\n         let nodes: Vec<_> = self.0.iter().cloned().collect();\n         nodes.into()\n     }\n-    fn edges(&self) -> dot::Edges<'_, (&'q DepNode, &'q DepNode)> {\n+    fn edges(&self) -> dot::Edges<'_, (DepKind, DepKind)> {\n         self.1[..].into()\n     }\n-    fn source(&self, edge: &(&'q DepNode, &'q DepNode)) -> &'q DepNode {\n+    fn source(&self, edge: &(DepKind, DepKind)) -> DepKind {\n         edge.0\n     }\n-    fn target(&self, edge: &(&'q DepNode, &'q DepNode)) -> &'q DepNode {\n+    fn target(&self, edge: &(DepKind, DepKind)) -> DepKind {\n         edge.1\n     }\n }\n \n-impl<'a, 'q> dot::Labeller<'a> for GraphvizDepGraph<'q> {\n-    type Node = &'q DepNode;\n-    type Edge = (&'q DepNode, &'q DepNode);\n+impl<'a> dot::Labeller<'a> for GraphvizDepGraph {\n+    type Node = DepKind;\n+    type Edge = (DepKind, DepKind);\n     fn graph_id(&self) -> dot::Id<'_> {\n         dot::Id::new(\"DependencyGraph\").unwrap()\n     }\n-    fn node_id(&self, n: &&'q DepNode) -> dot::Id<'_> {\n+    fn node_id(&self, n: &DepKind) -> dot::Id<'_> {\n         let s: String = format!(\"{:?}\", n)\n             .chars()\n             .map(|c| if c == '_' || c.is_alphanumeric() { c } else { '_' })\n             .collect();\n         debug!(\"n={:?} s={:?}\", n, s);\n         dot::Id::new(s).unwrap()\n     }\n-    fn node_label(&self, n: &&'q DepNode) -> dot::LabelText<'_> {\n+    fn node_label(&self, n: &DepKind) -> dot::LabelText<'_> {\n         dot::LabelText::label(format!(\"{:?}\", n))\n     }\n }\n@@ -323,7 +323,7 @@ fn filter_nodes<'q>(\n     query: &'q DepGraphQuery,\n     sources: &Option<FxHashSet<&'q DepNode>>,\n     targets: &Option<FxHashSet<&'q DepNode>>,\n-) -> FxHashSet<&'q DepNode> {\n+) -> FxHashSet<DepKind> {\n     if let Some(sources) = sources {\n         if let Some(targets) = targets {\n             walk_between(query, sources, targets)\n@@ -333,25 +333,25 @@ fn filter_nodes<'q>(\n     } else if let Some(targets) = targets {\n         walk_nodes(query, targets, INCOMING)\n     } else {\n-        query.nodes().into_iter().collect()\n+        query.nodes().into_iter().map(|n| n.kind).collect()\n     }\n }\n \n fn walk_nodes<'q>(\n     query: &'q DepGraphQuery,\n     starts: &FxHashSet<&'q DepNode>,\n     direction: Direction,\n-) -> FxHashSet<&'q DepNode> {\n+) -> FxHashSet<DepKind> {\n     let mut set = FxHashSet::default();\n     for &start in starts {\n         debug!(\"walk_nodes: start={:?} outgoing?={:?}\", start, direction == OUTGOING);\n-        if set.insert(start) {\n+        if set.insert(start.kind) {\n             let mut stack = vec![query.indices[start]];\n             while let Some(index) = stack.pop() {\n                 for (_, edge) in query.graph.adjacent_edges(index, direction) {\n                     let neighbor_index = edge.source_or_target(direction);\n                     let neighbor = query.graph.node_data(neighbor_index);\n-                    if set.insert(neighbor) {\n+                    if set.insert(neighbor.kind) {\n                         stack.push(neighbor_index);\n                     }\n                 }\n@@ -365,7 +365,7 @@ fn walk_between<'q>(\n     query: &'q DepGraphQuery,\n     sources: &FxHashSet<&'q DepNode>,\n     targets: &FxHashSet<&'q DepNode>,\n-) -> FxHashSet<&'q DepNode> {\n+) -> FxHashSet<DepKind> {\n     // This is a bit tricky. We want to include a node only if it is:\n     // (a) reachable from a source and (b) will reach a target. And we\n     // have to be careful about cycles etc.  Luckily efficiency is not\n@@ -396,6 +396,7 @@ fn walk_between<'q>(\n             let index = query.indices[n];\n             node_states[index.0] == State::Included\n         })\n+        .map(|n| n.kind)\n         .collect();\n \n     fn recurse(query: &DepGraphQuery, node_states: &mut [State], node: NodeIndex) -> bool {\n@@ -433,11 +434,13 @@ fn walk_between<'q>(\n \n fn filter_edges<'q>(\n     query: &'q DepGraphQuery,\n-    nodes: &FxHashSet<&'q DepNode>,\n-) -> Vec<(&'q DepNode, &'q DepNode)> {\n-    query\n+    nodes: &FxHashSet<DepKind>,\n+) -> Vec<(DepKind, DepKind)> {\n+    let uniq: FxHashSet<_> = query\n         .edges()\n         .into_iter()\n-        .filter(|&(source, target)| nodes.contains(source) && nodes.contains(target))\n-        .collect()\n+        .map(|(s, t)| (s.kind, t.kind))\n+        .filter(|(source, target)| nodes.contains(source) && nodes.contains(target))\n+        .collect();\n+    uniq.into_iter().collect()\n }"}, {"sha": "ff7506979fc3445c9ed78c834ebad5b35246aa34", "filename": "compiler/rustc_macros/src/session_diagnostic.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/10baaa6ed243c3e026491b1068c44356eaf24069/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10baaa6ed243c3e026491b1068c44356eaf24069/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs?ref=10baaa6ed243c3e026491b1068c44356eaf24069", "patch": "@@ -16,31 +16,41 @@ use std::collections::{BTreeSet, HashMap};\n /// # extern crate rust_middle;\n /// # use rustc_middle::ty::Ty;\n /// #[derive(SessionDiagnostic)]\n-/// #[error(code = \"E0505\", slug = \"move-out-of-borrow-error\")]\n+/// #[error(code = \"E0505\", slug = \"borrowck-move-out-of-borrow\")]\n /// pub struct MoveOutOfBorrowError<'tcx> {\n ///     pub name: Ident,\n ///     pub ty: Ty<'tcx>,\n ///     #[primary_span]\n-///     #[label = \"cannot move out of borrow\"]\n+///     #[label]\n ///     pub span: Span,\n-///     #[label = \"`{ty}` first borrowed here\"]\n-///     pub other_span: Span,\n-///     #[suggestion(message = \"consider cloning here\", code = \"{name}.clone()\")]\n-///     pub opt_sugg: Option<(Span, Applicability)>\n+///     #[label = \"first-borrow-label\"]\n+///     pub first_borrow_span: Span,\n+///     #[suggestion(code = \"{name}.clone()\")]\n+///     pub clone_sugg: Option<(Span, Applicability)>\n /// }\n /// ```\n ///\n+/// ```fluent\n+/// move-out-of-borrow = cannot move out of {$name} because it is borrowed\n+///     .label = cannot move out of borrow\n+///     .first-borrow-label = `{$ty}` first borrowed here\n+///     .suggestion = consider cloning here\n+/// ```\n+///\n /// Then, later, to emit the error:\n ///\n /// ```ignore (pseudo-rust)\n /// sess.emit_err(MoveOutOfBorrowError {\n ///     expected,\n ///     actual,\n ///     span,\n-///     other_span,\n-///     opt_sugg: Some(suggestion, Applicability::MachineApplicable),\n+///     first_borrow_span,\n+///     clone_sugg: Some(suggestion, Applicability::MachineApplicable),\n /// });\n /// ```\n+///\n+/// See rustc dev guide for more examples on using the `#[derive(SessionDiagnostic)]`:\n+/// <https://rustc-dev-guide.rust-lang.org/diagnostics/sessiondiagnostic.html>\n pub fn session_diagnostic_derive(s: synstructure::Structure<'_>) -> proc_macro2::TokenStream {\n     // Names for the diagnostic we build and the session we build it from.\n     let diag = format_ident!(\"diag\");"}, {"sha": "9bbecf104e55e897964cc1838e9e31bb3a39154a", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10baaa6ed243c3e026491b1068c44356eaf24069/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10baaa6ed243c3e026491b1068c44356eaf24069/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=10baaa6ed243c3e026491b1068c44356eaf24069", "patch": "@@ -1014,7 +1014,7 @@ impl<'a> Resolver<'a> {\n             }\n             ResolutionError::InvalidAsmSym => {\n                 let mut err = self.session.struct_span_err(span, \"invalid `sym` operand\");\n-                err.span_label(span, &format!(\"is a local variable\"));\n+                err.span_label(span, \"is a local variable\");\n                 err.help(\"`sym` operands must refer to either a function or a static\");\n                 err\n             }"}, {"sha": "7635ad9bd87bf145a752cf87c004b0e74f723115", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10baaa6ed243c3e026491b1068c44356eaf24069/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10baaa6ed243c3e026491b1068c44356eaf24069/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=10baaa6ed243c3e026491b1068c44356eaf24069", "patch": "@@ -1696,7 +1696,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     \"invalid lifetime parameter name: `{}`\",\n                     param.ident,\n                 )\n-                .span_label(param.ident.span, format!(\"'static is a reserved lifetime name\"))\n+                .span_label(param.ident.span, \"'static is a reserved lifetime name\")\n                 .emit();\n                 continue;\n             }"}, {"sha": "616aa11f00a6b638870cfa61e6f9bf4c7463ee9f", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10baaa6ed243c3e026491b1068c44356eaf24069/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10baaa6ed243c3e026491b1068c44356eaf24069/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=10baaa6ed243c3e026491b1068c44356eaf24069", "patch": "@@ -968,9 +968,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 SuggestionText::Remove(plural) => {\n                     Some(format!(\"remove the extra argument{}\", if plural { \"s\" } else { \"\" }))\n                 }\n-                SuggestionText::Swap => Some(format!(\"swap these arguments\")),\n-                SuggestionText::Reorder => Some(format!(\"reorder these arguments\")),\n-                SuggestionText::DidYouMean => Some(format!(\"did you mean\")),\n+                SuggestionText::Swap => Some(\"swap these arguments\".to_string()),\n+                SuggestionText::Reorder => Some(\"reorder these arguments\".to_string()),\n+                SuggestionText::DidYouMean => Some(\"did you mean\".to_string()),\n             };\n             if let Some(suggestion_text) = suggestion_text {\n                 let source_map = self.sess().source_map();"}, {"sha": "fc08171d2f4c290c00f831bca2b3de293c5c8e80", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10baaa6ed243c3e026491b1068c44356eaf24069/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10baaa6ed243c3e026491b1068c44356eaf24069/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=10baaa6ed243c3e026491b1068c44356eaf24069", "patch": "@@ -134,7 +134,7 @@ pub struct TypeofReservedKeywordUsed<'tcx> {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n-    #[suggestion_verbose(message = \"suggestion\", code = \"{ty}\")]\n+    #[suggestion_verbose(code = \"{ty}\")]\n     pub opt_sugg: Option<(Span, Applicability)>,\n }\n "}, {"sha": "de0dbffc5812fd885700874e8d258dd334733ac4", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=10baaa6ed243c3e026491b1068c44356eaf24069", "patch": "@@ -1 +1 @@\n-Subproject commit 765318b844569a642ceef7bf1adab9639cbf6af3\n+Subproject commit de0dbffc5812fd885700874e8d258dd334733ac4"}, {"sha": "f7cefbb995eec8c6148f213235e9e2e03268e775", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=10baaa6ed243c3e026491b1068c44356eaf24069", "patch": "@@ -1 +1 @@\n-Subproject commit a6de8b6e3ea5d4f0de8b7b9a7e5c1405dc2c2ddb\n+Subproject commit f7cefbb995eec8c6148f213235e9e2e03268e775"}, {"sha": "44a80e8d8bfc5881c9bd69a2cb3a570776ee4181", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=10baaa6ed243c3e026491b1068c44356eaf24069", "patch": "@@ -1 +1 @@\n-Subproject commit c2a98d9fc5d29c481d42052fbeccfde15ed03116\n+Subproject commit 44a80e8d8bfc5881c9bd69a2cb3a570776ee4181"}, {"sha": "043e60f4f191651e9f8bf52fa32df14defbb23d9", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=10baaa6ed243c3e026491b1068c44356eaf24069", "patch": "@@ -1 +1 @@\n-Subproject commit eeb5a83c15b6ae60df3e4f19207376b22c6fbc4c\n+Subproject commit 043e60f4f191651e9f8bf52fa32df14defbb23d9"}]}