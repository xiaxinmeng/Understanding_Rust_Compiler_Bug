{"sha": "babfdafb10cb77f980b11eb7e2ccf0ccdb72b8a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhYmZkYWZiMTBjYjc3Zjk4MGIxMWViN2UyY2NmMGNjZGI3MmI4YTE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-12T07:13:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-12T07:13:24Z"}, "message": "Rollup merge of #80600 - CoffeeBlend:maybe_uninit_array_assume_init, r=dtolnay\n\nAdd `MaybeUninit` method `array_assume_init`\n\nWhen initialising an array element-by-element, the conversion to the initialised array is done through `mem::transmute`, which is both ugly and does not work with const generics (see #61956). This PR proposes the associated method `array_assume_init`, matching the style of `slice_assume_init_*`:\n\n```rust\nunsafe fn array_assume_init<T, const N: usize>(array: [MaybeUninit<T>; N]) -> [T; N];\n```\n\nExample:\n```rust\nlet mut array: [MaybeUninit<i32>; 3] = MaybeUninit::uninit_array();\narray[0].write(0);\narray[1].write(1);\narray[2].write(2);\n\n// SAFETY: Now safe as we initialised all elements\nlet array: [i32; 3] = unsafe {\n     MaybeUninit::array_assume_init(array)\n};\n```\n\nThings I'm unsure about:\n* Should this be a method of array instead?\n* Should the function be const?", "tree": {"sha": "4f0a9446173ddd9fe94683fc4d1ed2edcd516701", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f0a9446173ddd9fe94683fc4d1ed2edcd516701"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/babfdafb10cb77f980b11eb7e2ccf0ccdb72b8a1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf/UwUCRBK7hj4Ov3rIwAAdHIIAHFYQkxR+Wq66ryXcEjuTpUE\nWC7ogUkIuu8AZsmouxQ1ntE7/R167z+6/OU4VWquT0+HigDDocg9SPb8K/mxPjEt\nwWjGv8s+eUF7IieVEDFMxtCs646Myccy2Lt3bpRIdUrzrUnd2UNcMQUQ6CFQzhMp\nnLtHawUK6iBh16qWWrDNJQV8/2wTHfpkmfV8sKvh4sg027IRf+Sblm8JhKDduBa/\nAI+gxr1WaDDop1XfkgxxdhshyeJK5juJpRRACznBPs6oQvGF8R5mGbteZPQoSsOh\nvpANxMO9llgL6ndGrbxbI2A5RJXCTXS1vKlIoSHLH8eA+mJKqrxiKRU+/kvz7GA=\n=hvOL\n-----END PGP SIGNATURE-----\n", "payload": "tree 4f0a9446173ddd9fe94683fc4d1ed2edcd516701\nparent 86b900a3eaaf84b48f080dab14b7994385bd19b8\nparent 985071b08f5c03e4f18d43c15f3ea82395588a5e\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1610435604 +0900\ncommitter GitHub <noreply@github.com> 1610435604 +0900\n\nRollup merge of #80600 - CoffeeBlend:maybe_uninit_array_assume_init, r=dtolnay\n\nAdd `MaybeUninit` method `array_assume_init`\n\nWhen initialising an array element-by-element, the conversion to the initialised array is done through `mem::transmute`, which is both ugly and does not work with const generics (see #61956). This PR proposes the associated method `array_assume_init`, matching the style of `slice_assume_init_*`:\n\n```rust\nunsafe fn array_assume_init<T, const N: usize>(array: [MaybeUninit<T>; N]) -> [T; N];\n```\n\nExample:\n```rust\nlet mut array: [MaybeUninit<i32>; 3] = MaybeUninit::uninit_array();\narray[0].write(0);\narray[1].write(1);\narray[2].write(2);\n\n// SAFETY: Now safe as we initialised all elements\nlet array: [i32; 3] = unsafe {\n     MaybeUninit::array_assume_init(array)\n};\n```\n\nThings I'm unsure about:\n* Should this be a method of array instead?\n* Should the function be const?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/babfdafb10cb77f980b11eb7e2ccf0ccdb72b8a1", "html_url": "https://github.com/rust-lang/rust/commit/babfdafb10cb77f980b11eb7e2ccf0ccdb72b8a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/babfdafb10cb77f980b11eb7e2ccf0ccdb72b8a1/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86b900a3eaaf84b48f080dab14b7994385bd19b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/86b900a3eaaf84b48f080dab14b7994385bd19b8", "html_url": "https://github.com/rust-lang/rust/commit/86b900a3eaaf84b48f080dab14b7994385bd19b8"}, {"sha": "985071b08f5c03e4f18d43c15f3ea82395588a5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/985071b08f5c03e4f18d43c15f3ea82395588a5e", "html_url": "https://github.com/rust-lang/rust/commit/985071b08f5c03e4f18d43c15f3ea82395588a5e"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "fda0553f94c5fd5c51efc1779c6ea27fcd1ffe21", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/babfdafb10cb77f980b11eb7e2ccf0ccdb72b8a1/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/babfdafb10cb77f980b11eb7e2ccf0ccdb72b8a1/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=babfdafb10cb77f980b11eb7e2ccf0ccdb72b8a1", "patch": "@@ -804,6 +804,46 @@ impl<T> MaybeUninit<T> {\n         }\n     }\n \n+    /// Extracts the values from an array of `MaybeUninit` containers.\n+    ///\n+    /// # Safety\n+    ///\n+    /// It is up to the caller to guarantee that all elements of the array are\n+    /// in an initialized state.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(maybe_uninit_uninit_array)]\n+    /// #![feature(maybe_uninit_array_assume_init)]\n+    /// use std::mem::MaybeUninit;\n+    ///\n+    /// let mut array: [MaybeUninit<i32>; 3] = MaybeUninit::uninit_array();\n+    /// array[0] = MaybeUninit::new(0);\n+    /// array[1] = MaybeUninit::new(1);\n+    /// array[2] = MaybeUninit::new(2);\n+    ///\n+    /// // SAFETY: Now safe as we initialised all elements\n+    /// let array = unsafe {\n+    ///     MaybeUninit::array_assume_init(array)\n+    /// };\n+    ///\n+    /// assert_eq!(array, [0, 1, 2]);\n+    /// ```\n+    #[unstable(feature = \"maybe_uninit_array_assume_init\", issue = \"80908\")]\n+    #[inline(always)]\n+    pub unsafe fn array_assume_init<const N: usize>(array: [Self; N]) -> [T; N] {\n+        // SAFETY:\n+        // * The caller guarantees that all elements of the array are initialized\n+        // * `MaybeUninit<T>` and T are guaranteed to have the same layout\n+        // * MaybeUnint does not drop, so there are no double-frees\n+        // And thus the conversion is safe\n+        unsafe {\n+            intrinsics::assert_inhabited::<T>();\n+            (&array as *const _ as *const [T; N]).read()\n+        }\n+    }\n+\n     /// Assuming all the elements are initialized, get a slice to them.\n     ///\n     /// # Safety"}, {"sha": "bc737cd1927cf6d8b0da9739459c8891aa21d5d8", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/babfdafb10cb77f980b11eb7e2ccf0ccdb72b8a1/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/babfdafb10cb77f980b11eb7e2ccf0ccdb72b8a1/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=babfdafb10cb77f980b11eb7e2ccf0ccdb72b8a1", "patch": "@@ -36,6 +36,8 @@\n #![feature(raw)]\n #![feature(sort_internals)]\n #![feature(slice_partition_at_index)]\n+#![feature(maybe_uninit_uninit_array)]\n+#![feature(maybe_uninit_array_assume_init)]\n #![feature(maybe_uninit_extra)]\n #![feature(maybe_uninit_write_slice)]\n #![feature(min_specialization)]"}, {"sha": "2279a16429f9875c7d4032516c2ff9d755e38078", "filename": "library/core/tests/mem.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/babfdafb10cb77f980b11eb7e2ccf0ccdb72b8a1/library%2Fcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/babfdafb10cb77f980b11eb7e2ccf0ccdb72b8a1/library%2Fcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fmem.rs?ref=babfdafb10cb77f980b11eb7e2ccf0ccdb72b8a1", "patch": "@@ -140,6 +140,20 @@ fn assume_init_good() {\n     assert!(TRUE);\n }\n \n+#[test]\n+fn uninit_array_assume_init() {\n+    let mut array: [MaybeUninit<i16>; 5] = MaybeUninit::uninit_array();\n+    array[0].write(3);\n+    array[1].write(1);\n+    array[2].write(4);\n+    array[3].write(1);\n+    array[4].write(5);\n+\n+    let array = unsafe { MaybeUninit::array_assume_init(array) };\n+\n+    assert_eq!(array, [3, 1, 4, 1, 5]);\n+}\n+\n #[test]\n fn uninit_write_slice() {\n     let mut dst = [MaybeUninit::new(255); 64];"}]}