{"sha": "28943e96cb0f0dfb05b3b5ce604c5a0fb8e24095", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4OTQzZTk2Y2IwZjBkZmIwNWIzYjVjZTYwNGM1YTBmYjhlMjQwOTU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-19T01:03:55Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:23Z"}, "message": "librustc: De-`@mut` `RefCell::const_globals`.", "tree": {"sha": "8a206366e1b9f81f2562f15ed91c85703f89e08b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a206366e1b9f81f2562f15ed91c85703f89e08b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28943e96cb0f0dfb05b3b5ce604c5a0fb8e24095", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28943e96cb0f0dfb05b3b5ce604c5a0fb8e24095", "html_url": "https://github.com/rust-lang/rust/commit/28943e96cb0f0dfb05b3b5ce604c5a0fb8e24095", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28943e96cb0f0dfb05b3b5ce604c5a0fb8e24095/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e2041c54b3065cc285ae19744e8acbff7533890", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e2041c54b3065cc285ae19744e8acbff7533890", "html_url": "https://github.com/rust-lang/rust/commit/0e2041c54b3065cc285ae19744e8acbff7533890"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "e0f9b0a9e8749c351cd27c6485e7538e4d9b11cc", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/28943e96cb0f0dfb05b3b5ce604c5a0fb8e24095/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28943e96cb0f0dfb05b3b5ce604c5a0fb8e24095/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=28943e96cb0f0dfb05b3b5ce604c5a0fb8e24095", "patch": "@@ -79,7 +79,8 @@ pub fn const_lit(cx: &mut CrateContext, e: &ast::Expr, lit: ast::lit)\n pub fn const_ptrcast(cx: &mut CrateContext, a: ValueRef, t: Type) -> ValueRef {\n     unsafe {\n         let b = llvm::LLVMConstPointerCast(a, t.ptr_to().to_ref());\n-        assert!(cx.const_globals.insert(b as int, a));\n+        let mut const_globals = cx.const_globals.borrow_mut();\n+        assert!(const_globals.get().insert(b as int, a));\n         b\n     }\n }\n@@ -111,7 +112,8 @@ fn const_addr_of(cx: &mut CrateContext, cv: ValueRef) -> ValueRef {\n }\n \n fn const_deref_ptr(cx: &mut CrateContext, v: ValueRef) -> ValueRef {\n-    let v = match cx.const_globals.find(&(v as int)) {\n+    let const_globals = cx.const_globals.borrow();\n+    let v = match const_globals.get().find(&(v as int)) {\n         Some(&v) => v,\n         None => v\n     };"}, {"sha": "74d90038e00682698a2f4a7be8bcb8a1d0d9dda8", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28943e96cb0f0dfb05b3b5ce604c5a0fb8e24095/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28943e96cb0f0dfb05b3b5ce604c5a0fb8e24095/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=28943e96cb0f0dfb05b3b5ce604c5a0fb8e24095", "patch": "@@ -81,7 +81,7 @@ pub struct CrateContext {\n      // when we ptrcast, and we have to ptrcast during translation\n      // of a [T] const because we form a slice, a [*T,int] pair, not\n      // a pointer to an LLVM array type.\n-     const_globals: HashMap<int, ValueRef>,\n+     const_globals: RefCell<HashMap<int, ValueRef>>,\n \n      // Cache of emitted const values\n      const_values: HashMap<ast::NodeId, ValueRef>,\n@@ -198,7 +198,7 @@ impl CrateContext {\n                   monomorphizing: RefCell::new(HashMap::new()),\n                   vtables: RefCell::new(HashMap::new()),\n                   const_cstr_cache: RefCell::new(HashMap::new()),\n-                  const_globals: HashMap::new(),\n+                  const_globals: RefCell::new(HashMap::new()),\n                   const_values: HashMap::new(),\n                   extern_const_values: HashMap::new(),\n                   impl_method_cache: HashMap::new(),"}]}