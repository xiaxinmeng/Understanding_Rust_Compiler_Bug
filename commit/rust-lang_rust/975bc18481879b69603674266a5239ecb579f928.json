{"sha": "975bc18481879b69603674266a5239ecb579f928", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NWJjMTg0ODE4NzliNjk2MDM2NzQyNjZhNTIzOWVjYjU3OWY5Mjg=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-08-05T16:58:52Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-08-16T16:28:16Z"}, "message": "Make Arguments constructors unsafe", "tree": {"sha": "2fb581618de49f38d7bbcf75f49657fd580a347e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fb581618de49f38d7bbcf75f49657fd580a347e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/975bc18481879b69603674266a5239ecb579f928", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/975bc18481879b69603674266a5239ecb579f928", "html_url": "https://github.com/rust-lang/rust/commit/975bc18481879b69603674266a5239ecb579f928", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/975bc18481879b69603674266a5239ecb579f928/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73d96b090bb68065cd3a469b27cbd568e39bf0e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/73d96b090bb68065cd3a469b27cbd568e39bf0e7", "html_url": "https://github.com/rust-lang/rust/commit/73d96b090bb68065cd3a469b27cbd568e39bf0e7"}], "stats": {"total": 155, "additions": 114, "deletions": 41}, "files": [{"sha": "1dbf7728421637343a84b9a9513ccf0cca2b4485", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/975bc18481879b69603674266a5239ecb579f928/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/975bc18481879b69603674266a5239ecb579f928/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=975bc18481879b69603674266a5239ecb579f928", "patch": "@@ -3,8 +3,8 @@ use Position::*;\n \n use rustc_ast as ast;\n use rustc_ast::ptr::P;\n-use rustc_ast::token;\n use rustc_ast::tokenstream::TokenStream;\n+use rustc_ast::{token, BlockCheckMode, UnsafeSource};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, Applicability, DiagnosticBuilder};\n use rustc_expand::base::{self, *};\n@@ -838,12 +838,15 @@ impl<'a, 'b> Context<'a, 'b> {\n         //\n         // But the nested match expression is proved to perform not as well\n         // as series of let's; the first approach does.\n-        let pat = self.ecx.pat_tuple(self.macsp, pats);\n-        let arm = self.ecx.arm(self.macsp, pat, args_array);\n-        let head = self.ecx.expr(self.macsp, ast::ExprKind::Tup(heads));\n-        let result = self.ecx.expr_match(self.macsp, head, vec![arm]);\n+        let args_match = {\n+            let pat = self.ecx.pat_tuple(self.macsp, pats);\n+            let arm = self.ecx.arm(self.macsp, pat, args_array);\n+            let head = self.ecx.expr(self.macsp, ast::ExprKind::Tup(heads));\n+            self.ecx.expr_match(self.macsp, head, vec![arm])\n+        };\n \n-        let args_slice = self.ecx.expr_addr_of(self.macsp, result);\n+        let ident = Ident::from_str_and_span(\"args\", self.macsp);\n+        let args_slice = self.ecx.expr_ident(self.macsp, ident);\n \n         // Now create the fmt::Arguments struct with all our locals we created.\n         let (fn_name, fn_args) = if self.all_pieces_simple {\n@@ -857,7 +860,20 @@ impl<'a, 'b> Context<'a, 'b> {\n         };\n \n         let path = self.ecx.std_path(&[sym::fmt, sym::Arguments, Symbol::intern(fn_name)]);\n-        self.ecx.expr_call_global(self.macsp, path, fn_args)\n+        let arguments = self.ecx.expr_call_global(self.macsp, path, fn_args);\n+        let body = self.ecx.expr_block(P(ast::Block {\n+            stmts: vec![self.ecx.stmt_expr(arguments)],\n+            id: ast::DUMMY_NODE_ID,\n+            rules: BlockCheckMode::Unsafe(UnsafeSource::CompilerGenerated),\n+            span: self.macsp,\n+            tokens: None,\n+        }));\n+\n+        let ident = Ident::from_str_and_span(\"args\", self.macsp);\n+        let binding_mode = ast::BindingMode::ByRef(ast::Mutability::Not);\n+        let pat = self.ecx.pat_ident_binding_mode(self.macsp, ident, binding_mode);\n+        let arm = self.ecx.arm(self.macsp, pat, body);\n+        self.ecx.expr_match(self.macsp, args_match, vec![arm])\n     }\n \n     fn format_arg("}, {"sha": "b32b1f8633697fff9f464208e539cf2aec0e101b", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/975bc18481879b69603674266a5239ecb579f928/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/975bc18481879b69603674266a5239ecb579f928/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=975bc18481879b69603674266a5239ecb579f928", "patch": "@@ -334,11 +334,29 @@ enum FlagV1 {\n impl<'a> Arguments<'a> {\n     /// When using the format_args!() macro, this function is used to generate the\n     /// Arguments structure.\n+    #[cfg(not(bootstrap))]\n+    #[doc(hidden)]\n+    #[inline]\n+    #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_fmt_arguments_new\", issue = \"none\")]\n+    pub const unsafe fn new_v1(\n+        pieces: &'a [&'static str],\n+        args: &'a [ArgumentV1<'a>],\n+    ) -> Arguments<'a> {\n+        if pieces.len() < args.len() || pieces.len() > args.len() + 1 {\n+            panic!(\"invalid args\");\n+        }\n+        Arguments { pieces, fmt: None, args }\n+    }\n+    #[cfg(bootstrap)]\n     #[doc(hidden)]\n     #[inline]\n     #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n     #[rustc_const_unstable(feature = \"const_fmt_arguments_new\", issue = \"none\")]\n     pub const fn new_v1(pieces: &'a [&'static str], args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {\n+        if pieces.len() < args.len() || pieces.len() > args.len() + 1 {\n+            panic!(\"invalid args\");\n+        }\n         Arguments { pieces, fmt: None, args }\n     }\n \n@@ -348,6 +366,19 @@ impl<'a> Arguments<'a> {\n     /// `CountIsParam` or `CountIsNextParam` has to point to an argument\n     /// created with `argumentusize`. However, failing to do so doesn't cause\n     /// unsafety, but will ignore invalid .\n+    #[cfg(not(bootstrap))]\n+    #[doc(hidden)]\n+    #[inline]\n+    #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_fmt_arguments_new\", issue = \"none\")]\n+    pub const unsafe fn new_v1_formatted(\n+        pieces: &'a [&'static str],\n+        args: &'a [ArgumentV1<'a>],\n+        fmt: &'a [rt::v1::Argument],\n+    ) -> Arguments<'a> {\n+        Arguments { pieces, fmt: Some(fmt), args }\n+    }\n+    #[cfg(bootstrap)]\n     #[doc(hidden)]\n     #[inline]\n     #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]"}, {"sha": "229b05ee505740b5abb1fdd6c073176b1f5bd5b6", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/975bc18481879b69603674266a5239ecb579f928/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/975bc18481879b69603674266a5239ecb579f928/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=975bc18481879b69603674266a5239ecb579f928", "patch": "@@ -110,6 +110,7 @@\n //\n // Language features:\n #![feature(abi_unadjusted)]\n+#![feature(allow_internal_unsafe)]\n #![feature(allow_internal_unstable)]\n #![feature(asm)]\n #![feature(associated_type_bounds)]"}, {"sha": "a3a074ac131af8d1ca95ce8f290bfa25743b9332", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/975bc18481879b69603674266a5239ecb579f928/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/975bc18481879b69603674266a5239ecb579f928/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=975bc18481879b69603674266a5239ecb579f928", "patch": "@@ -828,6 +828,7 @@ pub(crate) mod builtin {\n     /// assert_eq!(s, format!(\"hello {}\", \"world\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[allow_internal_unsafe]\n     #[allow_internal_unstable(fmt_internals)]\n     #[rustc_builtin_macro]\n     #[macro_export]"}, {"sha": "85728551f53ac4054823e54b6f9d7491b5771627", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/975bc18481879b69603674266a5239ecb579f928/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/975bc18481879b69603674266a5239ecb579f928/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=975bc18481879b69603674266a5239ecb579f928", "patch": "@@ -47,7 +47,15 @@ pub fn panic(expr: &'static str) -> ! {\n     // truncation and padding (even though none is used here). Using\n     // Arguments::new_v1 may allow the compiler to omit Formatter::pad from the\n     // output binary, saving up to a few kilobytes.\n-    panic_fmt(fmt::Arguments::new_v1(&[expr], &[]));\n+    panic_fmt(\n+        #[cfg(bootstrap)]\n+        fmt::Arguments::new_v1(&[expr], &[]),\n+        #[cfg(not(bootstrap))]\n+        // SAFETY: Arguments::new_v1 is safe with exactly one str and zero args\n+        unsafe {\n+            fmt::Arguments::new_v1(&[expr], &[])\n+        },\n+    );\n }\n \n #[inline]"}, {"sha": "4eccba06b134ffbaf011ac1d52ff8b89cf3fc946", "filename": "src/test/pretty/dollar-crate.pp", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/975bc18481879b69603674266a5239ecb579f928/src%2Ftest%2Fpretty%2Fdollar-crate.pp", "raw_url": "https://github.com/rust-lang/rust/raw/975bc18481879b69603674266a5239ecb579f928/src%2Ftest%2Fpretty%2Fdollar-crate.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fdollar-crate.pp?ref=975bc18481879b69603674266a5239ecb579f928", "patch": "@@ -10,9 +10,11 @@\n \n fn main() {\n     {\n-        ::std::io::_print(::core::fmt::Arguments::new_v1(&[\"rust\\n\"],\n-                                                         &match () {\n-                                                              () => [],\n-                                                          }));\n+        ::std::io::_print(match match () { () => [], } {\n+                              ref args => unsafe {\n+                                  ::core::fmt::Arguments::new_v1(&[\"rust\\n\"],\n+                                                                 args)\n+                              }\n+                          });\n     };\n }"}, {"sha": "a21ea520121e38f6c2c845328086e5840bfe79be", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 33, "deletions": 23, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/975bc18481879b69603674266a5239ecb579f928/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/975bc18481879b69603674266a5239ecb579f928/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=975bc18481879b69603674266a5239ecb579f928", "patch": "@@ -32,29 +32,39 @@\n                   ({\n                        let res =\n                            ((::alloc::fmt::format as\n-                                for<'r> fn(Arguments<'r>) -> String {format})(((::core::fmt::Arguments::new_v1\n-                                                                                   as\n-                                                                                   fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1})((&([(\"test\"\n-                                                                                                                                                                as\n-                                                                                                                                                                &str)]\n-                                                                                                                                                              as\n-                                                                                                                                                              [&str; 1])\n-                                                                                                                                                            as\n-                                                                                                                                                            &[&str; 1]),\n-                                                                                                                                                        (&(match (()\n-                                                                                                                                                                     as\n-                                                                                                                                                                     ())\n-                                                                                                                                                               {\n-                                                                                                                                                               ()\n-                                                                                                                                                               =>\n-                                                                                                                                                               ([]\n-                                                                                                                                                                   as\n-                                                                                                                                                                   [ArgumentV1; 0]),\n-                                                                                                                                                           }\n-                                                                                                                                                              as\n-                                                                                                                                                              [ArgumentV1; 0])\n-                                                                                                                                                            as\n-                                                                                                                                                            &[ArgumentV1; 0]))\n+                                for<'r> fn(Arguments<'r>) -> String {format})((match (match (()\n+                                                                                                as\n+                                                                                                ())\n+                                                                                          {\n+                                                                                          ()\n+                                                                                          =>\n+                                                                                          ([]\n+                                                                                              as\n+                                                                                              [ArgumentV1; 0]),\n+                                                                                      }\n+                                                                                         as\n+                                                                                         [ArgumentV1; 0])\n+                                                                                   {\n+                                                                                   ref args\n+                                                                                   =>\n+                                                                                   unsafe\n+                                                                                   {\n+                                                                                       ((::core::fmt::Arguments::new_v1\n+                                                                                            as\n+                                                                                            unsafe fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1})((&([(\"test\"\n+                                                                                                                                                                                as\n+                                                                                                                                                                                &str)]\n+                                                                                                                                                                              as\n+                                                                                                                                                                              [&str; 1])\n+                                                                                                                                                                            as\n+                                                                                                                                                                            &[&str; 1]),\n+                                                                                                                                                                        (args\n+                                                                                                                                                                            as\n+                                                                                                                                                                            &[ArgumentV1; 0]))\n+                                                                                           as\n+                                                                                           Arguments)\n+                                                                                   }\n+                                                                               }\n                                                                                   as\n                                                                                   Arguments))\n                                as String);"}, {"sha": "03ca515265cb0915684b0a4d40c7048046e37e38", "filename": "src/test/ui/attributes/key-value-expansion.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/975bc18481879b69603674266a5239ecb579f928/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/975bc18481879b69603674266a5239ecb579f928/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr?ref=975bc18481879b69603674266a5239ecb579f928", "patch": "@@ -17,12 +17,16 @@ LL | bug!();\n \n error: unexpected token: `{\n     let res =\n-        ::alloc::fmt::format(::core::fmt::Arguments::new_v1(&[\"\"],\n-                                                            &match (&\"u8\",) {\n-                                                                 (arg0,) =>\n-                                                                 [::core::fmt::ArgumentV1::new(arg0,\n-                                                                                               ::core::fmt::Display::fmt)],\n-                                                             }));\n+        ::alloc::fmt::format(match match (&\"u8\",) {\n+                                       (arg0,) =>\n+                                       [::core::fmt::ArgumentV1::new(arg0,\n+                                                                     ::core::fmt::Display::fmt)],\n+                                   } {\n+                                 ref args => unsafe {\n+                                     ::core::fmt::Arguments::new_v1(&[\"\"],\n+                                                                    args)\n+                                 }\n+                             });\n     res\n }.as_str()`\n   --> $DIR/key-value-expansion.rs:48:23"}]}