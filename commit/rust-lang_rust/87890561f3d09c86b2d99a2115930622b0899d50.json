{"sha": "87890561f3d09c86b2d99a2115930622b0899d50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ODkwNTYxZjNkMDljODZiMmQ5OWEyMTE1OTMwNjIyYjA4OTlkNTA=", "commit": {"author": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-05-13T15:52:50Z"}, "committer": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-05-13T16:02:34Z"}, "message": "Improve eager type resolution error message\n\nThis PR improves the span of eager resolution type errors referring to indexing and field access to use the base span rather than the whole expression.\n\nAlso a note \"Type must be known at this point.\" is added to where we at some point in the past emitted the \"type must be known at this context\" error, so that early failures can be differentiated and will hopefully be less surprising.\n\nFixes #50692 (or at least does the best we can for the moment)\n\nr? @estebank", "tree": {"sha": "d66b7f7962342d790fcef8c6cd102a5c22c0372d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d66b7f7962342d790fcef8c6cd102a5c22c0372d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87890561f3d09c86b2d99a2115930622b0899d50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87890561f3d09c86b2d99a2115930622b0899d50", "html_url": "https://github.com/rust-lang/rust/commit/87890561f3d09c86b2d99a2115930622b0899d50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87890561f3d09c86b2d99a2115930622b0899d50/comments", "author": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6db79f2ca07e4e533f4e940462a42f1093e52f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6db79f2ca07e4e533f4e940462a42f1093e52f3", "html_url": "https://github.com/rust-lang/rust/commit/e6db79f2ca07e4e533f4e940462a42f1093e52f3"}], "stats": {"total": 81, "additions": 70, "deletions": 11}, "files": [{"sha": "7352c14490d1aaeaaf3f35551447827a80c9e97a", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/87890561f3d09c86b2d99a2115930622b0899d50/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87890561f3d09c86b2d99a2115930622b0899d50/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=87890561f3d09c86b2d99a2115930622b0899d50", "patch": "@@ -14,6 +14,7 @@ use infer::InferCtxt;\n use infer::type_variable::TypeVariableOrigin;\n use ty::{self, Ty, TyInfer, TyVar};\n use syntax_pos::Span;\n+use errors::DiagnosticBuilder;\n \n struct FindLocalByTypeVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n@@ -86,7 +87,11 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn need_type_info(&self, body_id: Option<hir::BodyId>, span: Span, ty: Ty<'tcx>) {\n+    pub fn need_type_info_err(&self,\n+                            body_id: Option<hir::BodyId>,\n+                            span: Span,\n+                            ty: Ty<'tcx>)\n+                            -> DiagnosticBuilder<'gcx> {\n         let ty = self.resolve_type_vars_if_possible(&ty);\n         let name = self.extract_type_name(&ty);\n \n@@ -142,6 +147,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             err.span_label(target_span, label_message);\n         }\n \n-        err.emit();\n+        err\n     }\n }"}, {"sha": "f6ec01546c18d31ca457c75028db21b1540c994e", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87890561f3d09c86b2d99a2115930622b0899d50/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87890561f3d09c86b2d99a2115930622b0899d50/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=87890561f3d09c86b2d99a2115930622b0899d50", "patch": "@@ -1234,7 +1234,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         self.tcx.lang_items().sized_trait()\n                         .map_or(false, |sized_id| sized_id == trait_ref.def_id())\n                     {\n-                        self.need_type_info(body_id, span, self_ty);\n+                        self.need_type_info_err(body_id, span, self_ty).emit();\n                     } else {\n                         let mut err = struct_span_err!(self.tcx.sess,\n                                                         span, E0283,\n@@ -1251,7 +1251,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 // Same hacky approach as above to avoid deluging user\n                 // with error messages.\n                 if !ty.references_error() && !self.tcx.sess.has_errors() {\n-                    self.need_type_info(body_id, span, ty);\n+                    self.need_type_info_err(body_id, span, ty).emit();\n                 }\n             }\n \n@@ -1262,9 +1262,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     let &SubtypePredicate { a_is_expected: _, a, b } = data.skip_binder();\n                     // both must be type variables, or the other would've been instantiated\n                     assert!(a.is_ty_var() && b.is_ty_var());\n-                    self.need_type_info(body_id,\n-                                        obligation.cause.span,\n-                                        a);\n+                    self.need_type_info_err(body_id,\n+                                            obligation.cause.span,\n+                                            a).emit();\n                 }\n             }\n "}, {"sha": "9ac55fda3c1f9a4b62dccfebd15892de6583cc1e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87890561f3d09c86b2d99a2115930622b0899d50/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87890561f3d09c86b2d99a2115930622b0899d50/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=87890561f3d09c86b2d99a2115930622b0899d50", "patch": "@@ -3067,7 +3067,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                    base: &'gcx hir::Expr,\n                    field: &Spanned<ast::Name>) -> Ty<'tcx> {\n         let expr_t = self.check_expr_with_needs(base, needs);\n-        let expr_t = self.structurally_resolved_type(expr.span,\n+        let expr_t = self.structurally_resolved_type(base.span,\n                                                      expr_t);\n         let mut private_candidate = None;\n         let mut autoderef = self.autoderef(expr.span, expr_t);\n@@ -4080,7 +4080,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n               } else if idx_t.references_error() {\n                   idx_t\n               } else {\n-                  let base_t = self.structurally_resolved_type(expr.span, base_t);\n+                  let base_t = self.structurally_resolved_type(base.span, base_t);\n                   match self.lookup_indexing(expr, base, base_t, idx_t, needs) {\n                       Some((index_ty, element_ty)) => {\n                           // two-phase not needed because index_ty is never mutable\n@@ -5053,7 +5053,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             ty\n         } else {\n             if !self.is_tainted_by_errors() {\n-                self.need_type_info((**self).body_id, sp, ty);\n+                self.need_type_info_err((**self).body_id, sp, ty)\n+                    .note(\"type must be known at this point\")\n+                    .emit();\n             }\n             self.demand_suptype(sp, self.tcx.types.err, ty);\n             self.tcx.types.err"}, {"sha": "b0ee1154e863b37999a2f8626341a9454c6fc515", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87890561f3d09c86b2d99a2115930622b0899d50/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87890561f3d09c86b2d99a2115930622b0899d50/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=87890561f3d09c86b2d99a2115930622b0899d50", "patch": "@@ -593,7 +593,7 @@ impl<'cx, 'gcx, 'tcx> Resolver<'cx, 'gcx, 'tcx> {\n     fn report_error(&self, t: Ty<'tcx>) {\n         if !self.tcx.sess.has_errors() {\n             self.infcx\n-                .need_type_info(Some(self.body.id()), self.span.to_span(&self.tcx), t);\n+                .need_type_info_err(Some(self.body.id()), self.span.to_span(&self.tcx), t).emit();\n         }\n     }\n }"}, {"sha": "e1e13e9256dcdb909adf83a5ac72f142e6d901c2", "filename": "src/test/ui/span/issue-42234-unknown-receiver-type.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87890561f3d09c86b2d99a2115930622b0899d50/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87890561f3d09c86b2d99a2115930622b0899d50/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr?ref=87890561f3d09c86b2d99a2115930622b0899d50", "patch": "@@ -5,13 +5,17 @@ LL |     let x: Option<_> = None;\n    |         - consider giving `x` a type\n LL |     x.unwrap().method_that_could_exist_on_some_type();\n    |     ^^^^^^^^^^ cannot infer type for `T`\n+   |\n+   = note: type must be known at this point\n \n error[E0282]: type annotations needed\n   --> $DIR/issue-42234-unknown-receiver-type.rs:22:5\n    |\n LL | /     data.iter() //~ ERROR 22:5: 23:20: type annotations needed\n LL | |         .sum::<_>()\n    | |___________________^ cannot infer type for `_`\n+   |\n+   = note: type must be known at this point\n \n error: aborting due to 2 previous errors\n "}, {"sha": "29011abb46016624f8753feb240650666f766f62", "filename": "src/test/ui/span/method-and-field-eager-resolution.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/87890561f3d09c86b2d99a2115930622b0899d50/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87890561f3d09c86b2d99a2115930622b0899d50/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.rs?ref=87890561f3d09c86b2d99a2115930622b0899d50", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that spans get only base in eager type resolution (structurally_resolve_type).\n+\n+fn main() {\n+    let mut x = Default::default();\n+    x.0;\n+    //~^ ERROR type annotations needed\n+    x = 1;\n+}\n+\n+fn foo() {\n+    let mut x = Default::default();\n+    x[0];\n+    //~^ ERROR type annotations needed\n+    x = 1;\n+}"}, {"sha": "21e19828a99cf4ad9855b046e1bb2a7525caaec9", "filename": "src/test/ui/span/method-and-field-eager-resolution.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/87890561f3d09c86b2d99a2115930622b0899d50/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87890561f3d09c86b2d99a2115930622b0899d50/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.stderr?ref=87890561f3d09c86b2d99a2115930622b0899d50", "patch": "@@ -0,0 +1,23 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/method-and-field-eager-resolution.rs:15:5\n+   |\n+LL |     let mut x = Default::default();\n+   |         ----- consider giving `x` a type\n+LL |     x.0;\n+   |     ^ cannot infer type for `_`\n+   |\n+   = note: type must be known at this point\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/method-and-field-eager-resolution.rs:22:5\n+   |\n+LL |     let mut x = Default::default();\n+   |         ----- consider giving `x` a type\n+LL |     x[0];\n+   |     ^ cannot infer type for `_`\n+   |\n+   = note: type must be known at this point\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0282`."}]}