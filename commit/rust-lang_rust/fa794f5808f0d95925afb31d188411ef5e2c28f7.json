{"sha": "fa794f5808f0d95925afb31d188411ef5e2c28f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNzk0ZjU4MDhmMGQ5NTkyNWFmYjMxZDE4ODQxMWVmNWUyYzI4Zjc=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-11-19T22:51:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-19T22:51:20Z"}, "message": "Merge pull request #2165 from topecongiro/issue-2164\n\nHandle large types on struct fields", "tree": {"sha": "0d2a80e12f1115dca9d757339a7bd3b96cfd9fb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d2a80e12f1115dca9d757339a7bd3b96cfd9fb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa794f5808f0d95925afb31d188411ef5e2c28f7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaEgroCRBK7hj4Ov3rIwAAdHIIAHuUVu+yrSP7aVO3mUfDY/GX\nPORo33MrKhUWsg2iOLtRu1ymlC97h0bOHPneO94wounanZmpCJ1Vkg/aFl6qeyMN\nE+JJlQMIA/eXeci5Aq2l12P+My6vKFwWSO1jXO5q1cJrlRFC60UCoB6W57Lt8CI+\nTY0HhnfHJr1bj8g1uvucGWu8LncihCvLp2gtHYByvBu1HhTWV0Zg+PxPSOnSBwbI\n2nGKb7C0EH7ZQ5eDr3013w9CPS2OhodXWqdO0P6b6Zalp4mYqr0zeQ4ZYcc0qGFc\nhSrOeP0knjgfatbM0wPSlY/ILmNYz3QN8fT43OivK/uW6x73bU7OosohCl4yfW0=\n=jlyE\n-----END PGP SIGNATURE-----\n", "payload": "tree 0d2a80e12f1115dca9d757339a7bd3b96cfd9fb3\nparent dc0e17acebacce944a07c742d95175102d23a674\nparent bbf061511b690b5c203d10d0e758c8bead55b5f3\nauthor Nick Cameron <nrc@ncameron.org> 1511131880 +1300\ncommitter GitHub <noreply@github.com> 1511131880 +1300\n\nMerge pull request #2165 from topecongiro/issue-2164\n\nHandle large types on struct fields"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa794f5808f0d95925afb31d188411ef5e2c28f7", "html_url": "https://github.com/rust-lang/rust/commit/fa794f5808f0d95925afb31d188411ef5e2c28f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa794f5808f0d95925afb31d188411ef5e2c28f7/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc0e17acebacce944a07c742d95175102d23a674", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc0e17acebacce944a07c742d95175102d23a674", "html_url": "https://github.com/rust-lang/rust/commit/dc0e17acebacce944a07c742d95175102d23a674"}, {"sha": "bbf061511b690b5c203d10d0e758c8bead55b5f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbf061511b690b5c203d10d0e758c8bead55b5f3", "html_url": "https://github.com/rust-lang/rust/commit/bbf061511b690b5c203d10d0e758c8bead55b5f3"}], "stats": {"total": 191, "additions": 158, "deletions": 33}, "files": [{"sha": "3418a7181c96d01dc3dcacb1011dd71b6529e974", "filename": "src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa794f5808f0d95925afb31d188411ef5e2c28f7/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa794f5808f0d95925afb31d188411ef5e2c28f7/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=fa794f5808f0d95925afb31d188411ef5e2c28f7", "patch": "@@ -2596,7 +2596,7 @@ pub fn rewrite_assign_rhs<S: Into<String>, R: Rewrite>(\n     Some(lhs + &rhs)\n }\n \n-fn choose_rhs<R: Rewrite>(\n+pub fn choose_rhs<R: Rewrite>(\n     context: &RewriteContext,\n     expr: &R,\n     shape: Shape,"}, {"sha": "36401472514c99669324fd4a6342a807172a4e59", "filename": "src/items.rs", "status": "modified", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fa794f5808f0d95925afb31d188411ef5e2c28f7/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa794f5808f0d95925afb31d188411ef5e2c28f7/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=fa794f5808f0d95925afb31d188411ef5e2c28f7", "patch": "@@ -23,7 +23,7 @@ use codemap::{LineRangeUtils, SpanUtils};\n use comment::{combine_strs_with_missing_comments, contains_comment, recover_comment_removed,\n               recover_missing_comment_in_span, rewrite_missing_comment, FindUncommented};\n use config::{BraceStyle, Config, Density, IndentStyle, ReturnIndent};\n-use expr::{format_expr, is_empty_block, is_simple_block_stmt, rewrite_assign_rhs,\n+use expr::{choose_rhs, format_expr, is_empty_block, is_simple_block_stmt, rewrite_assign_rhs,\n            rewrite_call_inner, ExprType};\n use lists::{definitive_tactic, itemize_list, write_list, DefinitiveListTactic, ListFormatting,\n             ListItem, ListTactic, Separator, SeparatorPlace, SeparatorTactic};\n@@ -1200,7 +1200,7 @@ pub fn format_struct_struct(\n     let items_str = rewrite_with_alignment(\n         fields,\n         context,\n-        Shape::indented(offset, context.config),\n+        Shape::indented(offset, context.config).sub_width(1)?,\n         mk_sp(body_lo, span.hi()),\n         one_line_budget,\n     )?;\n@@ -1480,34 +1480,23 @@ pub fn rewrite_struct_field(\n         spacing.push(' ');\n     }\n     let ty_shape = shape.offset_left(overhead + spacing.len())?;\n-    if let Some(ref ty) = field.ty.rewrite(context, ty_shape) {\n+    let mut orig_ty = field.ty.rewrite(context, ty_shape);\n+    if let Some(ref ty) = orig_ty {\n         if !ty.contains('\\n') {\n             return Some(attr_prefix + &spacing + ty);\n         }\n     }\n \n-    // We must use multiline.\n-    let new_shape = shape.with_max_width(context.config);\n-    let ty_rewritten = field.ty.rewrite(context, new_shape)?;\n-\n+    // We must use multiline. We are going to put attributes and a field on different lines.\n+    // 1 = \" \"\n+    let rhs_shape = shape.offset_left(last_line_width(&prefix) + 1)?;\n+    orig_ty = field.ty.rewrite(context, rhs_shape);\n     let field_str = if prefix.is_empty() {\n-        ty_rewritten\n-    } else if prefix.len() + first_line_width(&ty_rewritten) + 1 <= shape.width {\n-        prefix + \" \" + &ty_rewritten\n+        orig_ty?\n     } else {\n-        let type_offset = shape.indent.block_indent(context.config);\n-        let nested_shape = Shape::indented(type_offset, context.config);\n-        let nested_ty = field.ty.rewrite(context, nested_shape)?;\n-        prefix + \"\\n\" + &type_offset.to_string(context.config) + &nested_ty\n+        prefix + &choose_rhs(context, &*field.ty, rhs_shape, orig_ty)?\n     };\n-    combine_strs_with_missing_comments(\n-        context,\n-        &attrs_str,\n-        &field_str,\n-        missing_span,\n-        shape,\n-        attrs_extendable,\n-    )\n+    combine_strs_with_missing_comments(context, &attrs_str, &field_str, missing_span, shape, false)\n }\n \n pub struct StaticParts<'a> {"}, {"sha": "2ac57557817425ac9ffaee47d47ca96668d55f82", "filename": "src/types.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fa794f5808f0d95925afb31d188411ef5e2c28f7/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa794f5808f0d95925afb31d188411ef5e2c28f7/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=fa794f5808f0d95925afb31d188411ef5e2c28f7", "patch": "@@ -25,7 +25,8 @@ use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListTac\n             SeparatorPlace, SeparatorTactic};\n use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n-use utils::{colon_spaces, extra_offset, format_abi, format_mutability, last_line_width, mk_sp};\n+use utils::{colon_spaces, extra_offset, first_line_width, format_abi, format_mutability,\n+            last_line_width, mk_sp};\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub enum PathContext {\n@@ -365,7 +366,8 @@ where\n     let list_str = write_list(&item_vec, &fmt)?;\n \n     let ty_shape = match context.config.indent_style() {\n-        IndentStyle::Block => shape.block().block_indent(context.config.tab_spaces()),\n+        // 4 = \" -> \"\n+        IndentStyle::Block => shape.offset_left(4)?,\n         IndentStyle::Visual => shape.block_left(4)?,\n     };\n     let output = match *output {\n@@ -376,24 +378,23 @@ where\n         FunctionRetTy::Default(..) => String::new(),\n     };\n \n-    let shape = shape.sub_width(output.len())?;\n-    let extendable = !list_str.contains('\\n') || list_str.is_empty();\n+    let extendable = (!list_str.contains('\\n') || list_str.is_empty()) && !output.contains(\"\\n\");\n     let args = wrap_args_with_parens(\n         context,\n         &list_str,\n         extendable,\n-        shape,\n+        shape.sub_width(first_line_width(&output))?,\n         Shape::indented(offset, context.config),\n     );\n-    if last_line_width(&args) + output.len() > shape.width {\n+    if last_line_width(&args) + first_line_width(&output) <= shape.width {\n+        Some(format!(\"{}{}\", args, output))\n+    } else {\n         Some(format!(\n             \"{}\\n{}{}\",\n             args,\n             offset.to_string(context.config),\n             output.trim_left()\n         ))\n-    } else {\n-        Some(format!(\"{}{}\", args, output))\n     }\n }\n "}, {"sha": "6c288e1bd62aa6e34334eea21510d74b900289e8", "filename": "tests/source/issue-2164.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa794f5808f0d95925afb31d188411ef5e2c28f7/tests%2Fsource%2Fissue-2164.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa794f5808f0d95925afb31d188411ef5e2c28f7/tests%2Fsource%2Fissue-2164.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-2164.rs?ref=fa794f5808f0d95925afb31d188411ef5e2c28f7", "patch": "@@ -0,0 +1,4 @@\n+// A stress test against code generated by bindgen.\n+#[repr(C)]\n+#[derive(Debug, Copy, Clone)]\n+pub struct emacs_env_25 { pub size : isize , pub private_members : * mut emacs_env_private , pub make_global_ref : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , any_reference : emacs_value ) -> emacs_value > , pub free_global_ref : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , global_reference : emacs_value ) > , pub non_local_exit_check : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env ) -> emacs_funcall_exit > , pub non_local_exit_clear : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env ) > , pub non_local_exit_get : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , non_local_exit_symbol_out : * mut emacs_value , non_local_exit_data_out : * mut emacs_value ) -> emacs_funcall_exit > , pub non_local_exit_signal : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , non_local_exit_symbol : emacs_value , non_local_exit_data : emacs_value ) > , pub non_local_exit_throw : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , tag : emacs_value , value : emacs_value ) > , pub make_function : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , min_arity : isize , max_arity : isize , function : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , nargs : isize , args : * mut emacs_value , arg1 : * mut ::libc :: c_void ) -> emacs_value > , documentation : * const ::libc :: c_char , data : * mut ::libc :: c_void ) -> emacs_value > , pub funcall : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , function : emacs_value , nargs : isize , args : * mut emacs_value ) -> emacs_value > , pub intern : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , symbol_name : * const ::libc :: c_char ) -> emacs_value > , pub type_of : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , value : emacs_value ) -> emacs_value > , pub is_not_nil : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , value : emacs_value ) -> bool > , pub eq : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , a : emacs_value , b : emacs_value ) -> bool > , pub extract_integer : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , value : emacs_value ) -> intmax_t > , pub make_integer : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , value : intmax_t ) -> emacs_value > , pub extract_float : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , value : emacs_value ) -> f64 > , pub make_float : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , value : f64 ) -> emacs_value > , pub copy_string_contents : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , value : emacs_value , buffer : * mut ::libc :: c_char , size_inout : * mut isize ) -> bool > , pub make_string : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , contents : * const ::libc :: c_char , length : isize ) -> emacs_value > , pub make_user_ptr : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , fin : :: std :: option :: Option < unsafe extern \"C\" fn ( arg1 : * mut ::libc :: c_void ) > , ptr : * mut ::libc :: c_void ) -> emacs_value > , pub get_user_ptr : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , uptr : emacs_value ) -> * mut ::libc :: c_void > , pub set_user_ptr : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , uptr : emacs_value , ptr : * mut ::libc :: c_void ) > , pub get_user_finalizer : :: std :: option :: Option < unsafe extern \"C\" fn ( arg1 : * mut ::libc :: c_void , env : * mut emacs_env , uptr : emacs_value ) -> :: std :: option :: Option < unsafe extern \"C\" fn ( arg1 : * mut ::libc :: c_void , env : * mut emacs_env , uptr : emacs_value ) > > , pub set_user_finalizer : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , uptr : emacs_value , fin : :: std :: option :: Option < unsafe extern \"C\" fn ( arg1 : * mut ::libc :: c_void ) > ) > , pub vec_get : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , vec : emacs_value , i : isize ) -> emacs_value > , pub vec_set : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , vec : emacs_value , i : isize , val : emacs_value ) > , pub vec_size : :: std :: option :: Option < unsafe extern \"C\" fn ( env : * mut emacs_env , vec : emacs_value ) -> isize > , }"}, {"sha": "de2af2d1807090b5753abf37422c3d45b3d038f8", "filename": "tests/target/big-impl-rfc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fa794f5808f0d95925afb31d188411ef5e2c28f7/tests%2Ftarget%2Fbig-impl-rfc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa794f5808f0d95925afb31d188411ef5e2c28f7/tests%2Ftarget%2Fbig-impl-rfc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fbig-impl-rfc.rs?ref=fa794f5808f0d95925afb31d188411ef5e2c28f7", "patch": "@@ -78,8 +78,7 @@ impl<M, S, F, X> SubSelectDirect<M, S, F, X>\n where\n     M: select::Selector,\n     S: event::Stream,\n-    F: for<'t> FnMut(transform::Api<'t, Stream<ContentStream<S>>>)\n-        -> transform::Api<'t, X>,\n+    F: for<'t> FnMut(transform::Api<'t, Stream<ContentStream<S>>>) -> transform::Api<'t, X>,\n     X: event::Stream,\n {\n }"}, {"sha": "ab1d7dfd37a8246723e11702bf0ef9e75ad34525", "filename": "tests/target/issue-2164.rs", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/fa794f5808f0d95925afb31d188411ef5e2c28f7/tests%2Ftarget%2Fissue-2164.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa794f5808f0d95925afb31d188411ef5e2c28f7/tests%2Ftarget%2Fissue-2164.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2164.rs?ref=fa794f5808f0d95925afb31d188411ef5e2c28f7", "patch": "@@ -0,0 +1,132 @@\n+// A stress test against code generated by bindgen.\n+#[repr(C)]\n+#[derive(Debug, Copy, Clone)]\n+pub struct emacs_env_25 {\n+    pub size: isize,\n+    pub private_members: *mut emacs_env_private,\n+    pub make_global_ref: ::std::option::Option<\n+        unsafe extern \"C\" fn(env: *mut emacs_env, any_reference: emacs_value) -> emacs_value,\n+    >,\n+    pub free_global_ref: ::std::option::Option<\n+        unsafe extern \"C\" fn(env: *mut emacs_env, global_reference: emacs_value),\n+    >,\n+    pub non_local_exit_check:\n+        ::std::option::Option<unsafe extern \"C\" fn(env: *mut emacs_env) -> emacs_funcall_exit>,\n+    pub non_local_exit_clear: ::std::option::Option<unsafe extern \"C\" fn(env: *mut emacs_env)>,\n+    pub non_local_exit_get: ::std::option::Option<\n+        unsafe extern \"C\" fn(\n+            env: *mut emacs_env,\n+            non_local_exit_symbol_out: *mut emacs_value,\n+            non_local_exit_data_out: *mut emacs_value,\n+        ) -> emacs_funcall_exit,\n+    >,\n+    pub non_local_exit_signal: ::std::option::Option<\n+        unsafe extern \"C\" fn(\n+            env: *mut emacs_env,\n+            non_local_exit_symbol: emacs_value,\n+            non_local_exit_data: emacs_value,\n+        ),\n+    >,\n+    pub non_local_exit_throw: ::std::option::Option<\n+        unsafe extern \"C\" fn(env: *mut emacs_env, tag: emacs_value, value: emacs_value),\n+    >,\n+    pub make_function: ::std::option::Option<\n+        unsafe extern \"C\" fn(\n+            env: *mut emacs_env,\n+            min_arity: isize,\n+            max_arity: isize,\n+            function: ::std::option::Option<\n+                unsafe extern \"C\" fn(\n+                    env: *mut emacs_env,\n+                    nargs: isize,\n+                    args: *mut emacs_value,\n+                    arg1: *mut ::libc::c_void,\n+                ) -> emacs_value,\n+            >,\n+            documentation: *const ::libc::c_char,\n+            data: *mut ::libc::c_void,\n+        ) -> emacs_value,\n+    >,\n+    pub funcall: ::std::option::Option<\n+        unsafe extern \"C\" fn(\n+            env: *mut emacs_env,\n+            function: emacs_value,\n+            nargs: isize,\n+            args: *mut emacs_value,\n+        ) -> emacs_value,\n+    >,\n+    pub intern: ::std::option::Option<\n+        unsafe extern \"C\" fn(env: *mut emacs_env, symbol_name: *const ::libc::c_char)\n+            -> emacs_value,\n+    >,\n+    pub type_of: ::std::option::Option<\n+        unsafe extern \"C\" fn(env: *mut emacs_env, value: emacs_value) -> emacs_value,\n+    >,\n+    pub is_not_nil: ::std::option::Option<\n+        unsafe extern \"C\" fn(env: *mut emacs_env, value: emacs_value) -> bool,\n+    >,\n+    pub eq: ::std::option::Option<\n+        unsafe extern \"C\" fn(env: *mut emacs_env, a: emacs_value, b: emacs_value) -> bool,\n+    >,\n+    pub extract_integer: ::std::option::Option<\n+        unsafe extern \"C\" fn(env: *mut emacs_env, value: emacs_value) -> intmax_t,\n+    >,\n+    pub make_integer: ::std::option::Option<\n+        unsafe extern \"C\" fn(env: *mut emacs_env, value: intmax_t) -> emacs_value,\n+    >,\n+    pub extract_float:\n+        ::std::option::Option<unsafe extern \"C\" fn(env: *mut emacs_env, value: emacs_value) -> f64>,\n+    pub make_float:\n+        ::std::option::Option<unsafe extern \"C\" fn(env: *mut emacs_env, value: f64) -> emacs_value>,\n+    pub copy_string_contents: ::std::option::Option<\n+        unsafe extern \"C\" fn(\n+            env: *mut emacs_env,\n+            value: emacs_value,\n+            buffer: *mut ::libc::c_char,\n+            size_inout: *mut isize,\n+        ) -> bool,\n+    >,\n+    pub make_string: ::std::option::Option<\n+        unsafe extern \"C\" fn(env: *mut emacs_env, contents: *const ::libc::c_char, length: isize)\n+            -> emacs_value,\n+    >,\n+    pub make_user_ptr: ::std::option::Option<\n+        unsafe extern \"C\" fn(\n+            env: *mut emacs_env,\n+            fin: ::std::option::Option<\n+                unsafe extern \"C\" fn(arg1: *mut ::libc::c_void),\n+            >,\n+            ptr: *mut ::libc::c_void,\n+        ) -> emacs_value,\n+    >,\n+    pub get_user_ptr: ::std::option::Option<\n+        unsafe extern \"C\" fn(env: *mut emacs_env, uptr: emacs_value) -> *mut ::libc::c_void,\n+    >,\n+    pub set_user_ptr: ::std::option::Option<\n+        unsafe extern \"C\" fn(env: *mut emacs_env, uptr: emacs_value, ptr: *mut ::libc::c_void),\n+    >,\n+    pub get_user_finalizer: ::std::option::Option<\n+        unsafe extern \"C\" fn(\n+            arg1: *mut ::libc::c_void, env: *mut emacs_env, uptr: emacs_value\n+        ) -> ::std::option::Option<\n+            unsafe extern \"C\" fn(arg1: *mut ::libc::c_void, env: *mut emacs_env, uptr: emacs_value),\n+        >,\n+    >,\n+    pub set_user_finalizer: ::std::option::Option<\n+        unsafe extern \"C\" fn(\n+            env: *mut emacs_env,\n+            uptr: emacs_value,\n+            fin: ::std::option::Option<\n+                unsafe extern \"C\" fn(arg1: *mut ::libc::c_void),\n+            >,\n+        ),\n+    >,\n+    pub vec_get: ::std::option::Option<\n+        unsafe extern \"C\" fn(env: *mut emacs_env, vec: emacs_value, i: isize) -> emacs_value,\n+    >,\n+    pub vec_set: ::std::option::Option<\n+        unsafe extern \"C\" fn(env: *mut emacs_env, vec: emacs_value, i: isize, val: emacs_value),\n+    >,\n+    pub vec_size:\n+        ::std::option::Option<unsafe extern \"C\" fn(env: *mut emacs_env, vec: emacs_value) -> isize>,\n+}"}]}