{"sha": "2b3619412fab979f2599227ef387c91d7c1ee28a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMzYxOTQxMmZhYjk3OWYyNTk5MjI3ZWYzODdjOTFkN2MxZWUyOGE=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-09-06T02:50:05Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-09-08T18:30:55Z"}, "message": "quote: Explicitly borrow the ExtCtxt\n\nFixes #16992.", "tree": {"sha": "d2a763ee6194a701a4f345a69137ab386b3a7543", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2a763ee6194a701a4f345a69137ab386b3a7543"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b3619412fab979f2599227ef387c91d7c1ee28a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b3619412fab979f2599227ef387c91d7c1ee28a", "html_url": "https://github.com/rust-lang/rust/commit/2b3619412fab979f2599227ef387c91d7c1ee28a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b3619412fab979f2599227ef387c91d7c1ee28a/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f34760e4173dda94162502153fe4c5a2a96fc9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f34760e4173dda94162502153fe4c5a2a96fc9d", "html_url": "https://github.com/rust-lang/rust/commit/6f34760e4173dda94162502153fe4c5a2a96fc9d"}], "stats": {"total": 46, "additions": 36, "deletions": 10}, "files": [{"sha": "63e93d266c7703a9f9f96464725d1cffba339e7d", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2b3619412fab979f2599227ef387c91d7c1ee28a/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b3619412fab979f2599227ef387c91d7c1ee28a/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=2b3619412fab979f2599227ef387c91d7c1ee28a", "patch": "@@ -96,7 +96,7 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n \n         // Add a special __test module to the crate that will contain code\n         // generated for the test harness\n-        let (mod_, reexport) = mk_test_module(&self.cx, &self.cx.reexport_test_harness_main);\n+        let (mod_, reexport) = mk_test_module(&mut self.cx);\n         folded.module.items.push(mod_);\n         match reexport {\n             Some(re) => folded.module.view_items.push(re),\n@@ -378,8 +378,7 @@ fn mk_std(cx: &TestCtxt) -> ast::ViewItem {\n     }\n }\n \n-fn mk_test_module(cx: &TestCtxt, reexport_test_harness_main: &Option<InternedString>)\n-                  -> (Gc<ast::Item>, Option<ast::ViewItem>) {\n+fn mk_test_module(cx: &mut TestCtxt) -> (Gc<ast::Item>, Option<ast::ViewItem>) {\n     // Link to test crate\n     let view_items = vec!(mk_std(cx));\n \n@@ -388,7 +387,7 @@ fn mk_test_module(cx: &TestCtxt, reexport_test_harness_main: &Option<InternedStr\n \n     // The synthesized main function which will call the console test runner\n     // with our list of tests\n-    let mainfn = (quote_item!(&cx.ext_cx,\n+    let mainfn = (quote_item!(&mut cx.ext_cx,\n         pub fn main() {\n             #![main]\n             use std::slice::Slice;\n@@ -412,7 +411,7 @@ fn mk_test_module(cx: &TestCtxt, reexport_test_harness_main: &Option<InternedStr\n         vis: ast::Public,\n         span: DUMMY_SP,\n     };\n-    let reexport = reexport_test_harness_main.as_ref().map(|s| {\n+    let reexport = cx.reexport_test_harness_main.as_ref().map(|s| {\n         // building `use <ident> = __test::main`\n         let reexport_ident = token::str_to_ident(s.get());\n "}, {"sha": "e60d8bfdb9d49e695d24c29b530a0f057c25d633", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2b3619412fab979f2599227ef387c91d7c1ee28a/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b3619412fab979f2599227ef387c91d7c1ee28a/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=2b3619412fab979f2599227ef387c91d7c1ee28a", "patch": "@@ -1951,15 +1951,15 @@ fn roundtrip(in_item: Option<Gc<ast::Item>>) {\n #[test]\n fn test_basic() {\n     let cx = mk_ctxt();\n-    roundtrip(quote_item!(cx,\n+    roundtrip(quote_item!(&cx,\n         fn foo() {}\n     ));\n }\n /* NOTE: When there's a snapshot, update this (yay quasiquoter!)\n #[test]\n fn test_smalltalk() {\n     let cx = mk_ctxt();\n-    roundtrip(quote_item!(cx,\n+    roundtrip(quote_item!(&cx,\n         fn foo() -> int { 3 + 4 } // first smalltalk program ever executed.\n     ));\n }\n@@ -1968,7 +1968,7 @@ fn test_smalltalk() {\n #[test]\n fn test_more() {\n     let cx = mk_ctxt();\n-    roundtrip(quote_item!(cx,\n+    roundtrip(quote_item!(&cx,\n         fn foo(x: uint, y: uint) -> uint {\n             let z = x + y;\n             return z;\n@@ -1987,7 +1987,7 @@ fn test_simplification() {\n     ).unwrap();\n     let item_in = e::IIItemRef(&*item);\n     let item_out = simplify_ast(item_in);\n-    let item_exp = ast::IIItem(quote_item!(cx,\n+    let item_exp = ast::IIItem(quote_item!(&cx,\n         fn new_int_alist<B>() -> alist<int, B> {\n             return alist {eq_fn: eq_int, data: Vec::new()};\n         }"}, {"sha": "808e671f868d3a7d573a9fe8adf2fcc4d8c6ad4f", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b3619412fab979f2599227ef387c91d7c1ee28a/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b3619412fab979f2599227ef387c91d7c1ee28a/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=2b3619412fab979f2599227ef387c91d7c1ee28a", "patch": "@@ -766,7 +766,9 @@ fn expand_wrapper(cx: &ExtCtxt,\n         cx.view_use_glob(sp, ast::Inherited, ids_ext(path))\n     }).collect();\n \n-    let stmt_let_ext_cx = cx.stmt_let(sp, false, id_ext(\"ext_cx\"), cx_expr);\n+    // Explicitly borrow to avoid moving from the invoker (#16992)\n+    let cx_expr_borrow = cx.expr_addr_of(sp, cx.expr_deref(sp, cx_expr));\n+    let stmt_let_ext_cx = cx.stmt_let(sp, false, id_ext(\"ext_cx\"), cx_expr_borrow);\n \n     cx.expr_block(cx.block_all(sp, uses, vec!(stmt_let_ext_cx), Some(expr)))\n }"}, {"sha": "71fab67b81910ec3a9759b5899bfefc8cd2cb574", "filename": "src/test/run-pass-fulldeps/issue-16992.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2b3619412fab979f2599227ef387c91d7c1ee28a/src%2Ftest%2Frun-pass-fulldeps%2Fissue-16992.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b3619412fab979f2599227ef387c91d7c1ee28a/src%2Ftest%2Frun-pass-fulldeps%2Fissue-16992.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fissue-16992.rs?ref=2b3619412fab979f2599227ef387c91d7c1ee28a", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-pretty\n+\n+#![feature(quote)]\n+\n+extern crate syntax;\n+\n+use syntax::ext::base::ExtCtxt;\n+\n+#[allow(dead_code)]\n+fn foobar(cx: &mut ExtCtxt) {\n+    quote_expr!(cx, 1i);\n+    quote_expr!(cx, 2i);\n+}\n+\n+fn main() { }"}]}