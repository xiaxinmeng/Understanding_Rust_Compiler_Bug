{"sha": "8a9ebe62a114ef83d46771b28e483f6b8ea5478e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhOWViZTYyYTExNGVmODNkNDY3NzFiMjhlNDgzZjZiOGVhNTQ3OGU=", "commit": {"author": {"name": "ivan770", "email": "leshenko.ivan770@gmail.com", "date": "2021-03-14T10:25:37Z"}, "committer": {"name": "ivan770", "email": "leshenko.ivan770@gmail.com", "date": "2021-03-14T10:25:37Z"}, "message": "Skip ref_match on same types, remove sorting in tests", "tree": {"sha": "ee76bb61d7f094d1808eab73fe1d704a8dcb651f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee76bb61d7f094d1808eab73fe1d704a8dcb651f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a9ebe62a114ef83d46771b28e483f6b8ea5478e", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEcPkYW+t8+2SKgl5T2MS9WuTZzE0FAmBN5KEACgkQ2MS9WuTZ\nzE0W/Af+NdBH93RvSq6twWFeNP8D4+xQ/rVGj3Vf5k6YP4WD/Jc+ZomjhqgiCc6R\nfv4jfpVEJjs+y7HMpi9bLShIVmRBxzUZqwEBZjzciIraVAz8HzvK1G+OGgLqpccG\nTnS5V3AysmjOcPGExowPof/Vl4dH1MvNJBb3z8AWSCMXBZbjyEyI55mSgVis9Tw2\nj3ea79F5CtUXWceYsqmxXkOR/JrbtwR2+2hYAnunHWEU0DYw0sqxpuKcCGjxdd1u\nRdcdaenbIaaeIN/YqbxNwLx/KezylJpXP0R8Rilcn+CqsWuzYoEVm3sWVSAhZh7w\nYNFFxFSOVeiXZS8G4CvLQxIwIX5duQ==\n=12R8\n-----END PGP SIGNATURE-----", "payload": "tree ee76bb61d7f094d1808eab73fe1d704a8dcb651f\nparent 661cc7f0c865bad772fda41647219e47ad113d3c\nauthor ivan770 <leshenko.ivan770@gmail.com> 1615717537 +0200\ncommitter ivan770 <leshenko.ivan770@gmail.com> 1615717537 +0200\n\nSkip ref_match on same types, remove sorting in tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a9ebe62a114ef83d46771b28e483f6b8ea5478e", "html_url": "https://github.com/rust-lang/rust/commit/8a9ebe62a114ef83d46771b28e483f6b8ea5478e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a9ebe62a114ef83d46771b28e483f6b8ea5478e/comments", "author": {"login": "ivan770", "id": 14003886, "node_id": "MDQ6VXNlcjE0MDAzODg2", "avatar_url": "https://avatars.githubusercontent.com/u/14003886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivan770", "html_url": "https://github.com/ivan770", "followers_url": "https://api.github.com/users/ivan770/followers", "following_url": "https://api.github.com/users/ivan770/following{/other_user}", "gists_url": "https://api.github.com/users/ivan770/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivan770/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivan770/subscriptions", "organizations_url": "https://api.github.com/users/ivan770/orgs", "repos_url": "https://api.github.com/users/ivan770/repos", "events_url": "https://api.github.com/users/ivan770/events{/privacy}", "received_events_url": "https://api.github.com/users/ivan770/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ivan770", "id": 14003886, "node_id": "MDQ6VXNlcjE0MDAzODg2", "avatar_url": "https://avatars.githubusercontent.com/u/14003886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivan770", "html_url": "https://github.com/ivan770", "followers_url": "https://api.github.com/users/ivan770/followers", "following_url": "https://api.github.com/users/ivan770/following{/other_user}", "gists_url": "https://api.github.com/users/ivan770/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivan770/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivan770/subscriptions", "organizations_url": "https://api.github.com/users/ivan770/orgs", "repos_url": "https://api.github.com/users/ivan770/repos", "events_url": "https://api.github.com/users/ivan770/events{/privacy}", "received_events_url": "https://api.github.com/users/ivan770/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "661cc7f0c865bad772fda41647219e47ad113d3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/661cc7f0c865bad772fda41647219e47ad113d3c", "html_url": "https://github.com/rust-lang/rust/commit/661cc7f0c865bad772fda41647219e47ad113d3c"}], "stats": {"total": 63, "additions": 25, "deletions": 38}, "files": [{"sha": "fcb8115fba06f113682b77945000eab07382c18e", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 25, "deletions": 38, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/8a9ebe62a114ef83d46771b28e483f6b8ea5478e/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9ebe62a114ef83d46771b28e483f6b8ea5478e/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=8a9ebe62a114ef83d46771b28e483f6b8ea5478e", "patch": "@@ -259,15 +259,17 @@ impl<'a> Render<'a> {\n             }\n \n             if let Some((_expected_name, expected_type)) = self.ctx.expected_name_and_type() {\n-                if let Some(ty_without_ref) = expected_type.remove_ref() {\n-                    if relevance_type_match(self.ctx.db().upcast(), &ty, &ty_without_ref) {\n-                        cov_mark::hit!(suggest_ref);\n-                        let mutability = if expected_type.is_mutable_reference() {\n-                            Mutability::Mut\n-                        } else {\n-                            Mutability::Shared\n-                        };\n-                        item.ref_match(mutability);\n+                if ty != expected_type {\n+                    if let Some(ty_without_ref) = expected_type.remove_ref() {\n+                        if relevance_type_match(self.ctx.db().upcast(), &ty, &ty_without_ref) {\n+                            cov_mark::hit!(suggest_ref);\n+                            let mutability = if expected_type.is_mutable_reference() {\n+                                Mutability::Mut\n+                            } else {\n+                                Mutability::Shared\n+                            };\n+                            item.ref_match(mutability);\n+                        }\n                     }\n                 }\n             }\n@@ -340,8 +342,6 @@ fn relevance_type_match(db: &dyn HirDatabase, ty: &Type, expected_type: &Type) -\n \n #[cfg(test)]\n mod tests {\n-    use std::cmp::Reverse;\n-\n     use expect_test::{expect, Expect};\n \n     use crate::{\n@@ -366,19 +366,7 @@ mod tests {\n             }\n         }\n \n-        let mut completions = get_all_items(TEST_CONFIG, ra_fixture);\n-        completions.sort_by_key(|it| {\n-            // (Reverse(it.ref_match().map(|m| m.1).unwrap_or(it.relevance())), it.label().to_string())\n-            if let Some((mutability, relevance)) = it.ref_match() {\n-                let label = format!(\"&{}{}\", mutability.as_keyword_for_ref(), it.label());\n-\n-                Reverse((relevance, label))\n-            } else {\n-                Reverse((it.relevance(), it.label().to_string()))\n-            }\n-        });\n-\n-        let actual = completions\n+        let actual = get_all_items(TEST_CONFIG, ra_fixture)\n             .into_iter()\n             .filter(|it| it.completion_kind == CompletionKind::Reference)\n             .flat_map(|it| {\n@@ -868,9 +856,9 @@ fn test(bar: u32) { }\n fn foo(s: S) { test(s.$0) }\n \"#,\n             expect![[r#\"\n+                fd foo []\n                 fd bar [type+name]\n                 fd baz [type]\n-                fd foo []\n             \"#]],\n         );\n     }\n@@ -885,9 +873,9 @@ struct B { x: (), y: f32, bar: u32 }\n fn foo(a: A) { B { bar: a.$0 }; }\n \"#,\n             expect![[r#\"\n+                fd foo []\n                 fd bar [type+name]\n                 fd baz [type]\n-                fd foo []\n             \"#]],\n         )\n     }\n@@ -903,8 +891,8 @@ fn foo(a: A) { B { bar: f(a.$0) }; }\n \"#,\n             expect![[r#\"\n                 fd foo [type+name]\n-                fd baz []\n                 fd bar []\n+                fd baz []\n             \"#]],\n         );\n         check_relevance(\n@@ -915,9 +903,9 @@ fn f(foo: i64) {  }\n fn foo(a: A) { f(B { bar: a.$0 }); }\n \"#,\n             expect![[r#\"\n+                fd foo []\n                 fd bar [type+name]\n                 fd baz [type]\n-                fd foo []\n             \"#]],\n         );\n     }\n@@ -931,9 +919,8 @@ fn go(world: &WorldSnapshot) { go(w$0) }\n \"#,\n             expect![[r#\"\n                 lc world [type+name]\n-                lc &world [type+name]\n-                fn go(\u2026) []\n                 st WorldSnapshot []\n+                fn go(\u2026) []\n             \"#]],\n         );\n     }\n@@ -947,8 +934,8 @@ fn f(foo: &Foo) { f(foo, w$0) }\n \"#,\n             expect![[r#\"\n                 lc foo []\n-                fn f(\u2026) []\n                 st Foo []\n+                fn f(\u2026) []\n             \"#]],\n         );\n     }\n@@ -1050,14 +1037,14 @@ fn main() {\n }\n             \"#,\n             expect![[r#\"\n+                lc m []\n                 lc t []\n                 lc &t [type]\n-                fn main() []\n-                lc m []\n-                fn foo(\u2026) []\n                 st T []\n                 st S []\n+                fn main() []\n                 tt Deref []\n+                fn foo(\u2026) []\n             \"#]],\n         )\n     }\n@@ -1104,15 +1091,15 @@ fn main() {\n }\n             \"#,\n             expect![[r#\"\n+                lc m []\n                 lc t []\n                 lc &mut t [type]\n-                fn main() []\n-                lc m []\n+                tt DerefMut []\n+                tt Deref []\n                 fn foo(\u2026) []\n                 st T []\n                 st S []\n-                tt DerefMut []\n-                tt Deref []\n+                fn main() []\n             \"#]],\n         )\n     }"}]}