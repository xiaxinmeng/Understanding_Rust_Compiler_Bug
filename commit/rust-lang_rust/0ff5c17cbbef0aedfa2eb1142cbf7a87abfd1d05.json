{"sha": "0ff5c17cbbef0aedfa2eb1142cbf7a87abfd1d05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmZjVjMTdjYmJlZjBhZWRmYTJlYjExNDJjYmY3YTg3YWJmZDFkMDU=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-06T03:42:45Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-06T05:26:05Z"}, "message": "deque: Implement Deque::with_capacity. Lower initial capacity to 8.\n\nWe need a reasonably small initial capacity to make Deques faster\nfor the common case.", "tree": {"sha": "f02f83d13c4308e1f4a1f0468eb07751dfe33a4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f02f83d13c4308e1f4a1f0468eb07751dfe33a4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ff5c17cbbef0aedfa2eb1142cbf7a87abfd1d05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ff5c17cbbef0aedfa2eb1142cbf7a87abfd1d05", "html_url": "https://github.com/rust-lang/rust/commit/0ff5c17cbbef0aedfa2eb1142cbf7a87abfd1d05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ff5c17cbbef0aedfa2eb1142cbf7a87abfd1d05/comments", "author": null, "committer": null, "parents": [{"sha": "8a3267672c43e7cc116e588dd21998d14fc21ba4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a3267672c43e7cc116e588dd21998d14fc21ba4", "html_url": "https://github.com/rust-lang/rust/commit/8a3267672c43e7cc116e588dd21998d14fc21ba4"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "c537167946c7faf599df6dfb08bdf04c7fafa192", "filename": "src/libextra/deque.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0ff5c17cbbef0aedfa2eb1142cbf7a87abfd1d05/src%2Flibextra%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff5c17cbbef0aedfa2eb1142cbf7a87abfd1d05/src%2Flibextra%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdeque.rs?ref=0ff5c17cbbef0aedfa2eb1142cbf7a87abfd1d05", "patch": "@@ -14,7 +14,8 @@ use std::uint;\n use std::vec;\n use std::iterator::FromIterator;\n \n-static INITIAL_CAPACITY: uint = 32u; // 2^5\n+static INITIAL_CAPACITY: uint = 8u; // 2^3\n+static MINIMUM_CAPACITY: uint = 2u;\n \n #[allow(missing_doc)]\n pub struct Deque<T> {\n@@ -43,8 +44,13 @@ impl<T> Mutable for Deque<T> {\n impl<T> Deque<T> {\n     /// Create an empty Deque\n     pub fn new() -> Deque<T> {\n+        Deque::with_capacity(INITIAL_CAPACITY)\n+    }\n+\n+    /// Create an empty Deque with space for at least `n` elements.\n+    pub fn with_capacity(n: uint) -> Deque<T> {\n         Deque{nelts: 0, lo: 0,\n-              elts: vec::from_fn(INITIAL_CAPACITY, |_| None)}\n+              elts: vec::from_fn(uint::max(MINIMUM_CAPACITY, n), |_| None)}\n     }\n \n     /// Return a reference to the first element in the deque\n@@ -527,6 +533,16 @@ mod tests {\n \n     }\n \n+    #[test]\n+    fn test_with_capacity() {\n+        let mut d = Deque::with_capacity(0);\n+        d.add_back(1);\n+        assert_eq!(d.len(), 1);\n+        let mut d = Deque::with_capacity(50);\n+        d.add_back(1);\n+        assert_eq!(d.len(), 1);\n+    }\n+\n     #[test]\n     fn test_reserve() {\n         let mut d = Deque::new();"}]}