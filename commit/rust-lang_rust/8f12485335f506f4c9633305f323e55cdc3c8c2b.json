{"sha": "8f12485335f506f4c9633305f323e55cdc3c8c2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMTI0ODUzMzVmNTA2ZjRjOTYzMzMwNWYzMjNlNTVjZGMzYzhjMmI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-15T19:11:28Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-15T19:11:28Z"}, "message": "review comments", "tree": {"sha": "8fbdf80ce8b3bf18c2e3dba32a323f1e19eff2be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fbdf80ce8b3bf18c2e3dba32a323f1e19eff2be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f12485335f506f4c9633305f323e55cdc3c8c2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f12485335f506f4c9633305f323e55cdc3c8c2b", "html_url": "https://github.com/rust-lang/rust/commit/8f12485335f506f4c9633305f323e55cdc3c8c2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f12485335f506f4c9633305f323e55cdc3c8c2b/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96f5584b808cd08c3c8208db4fee04d2c2b71d79", "url": "https://api.github.com/repos/rust-lang/rust/commits/96f5584b808cd08c3c8208db4fee04d2c2b71d79", "html_url": "https://github.com/rust-lang/rust/commit/96f5584b808cd08c3c8208db4fee04d2c2b71d79"}], "stats": {"total": 72, "additions": 32, "deletions": 40}, "files": [{"sha": "1fff8fff9c03a2009e7340419a797d3e626e3edf", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8f12485335f506f4c9633305f323e55cdc3c8c2b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f12485335f506f4c9633305f323e55cdc3c8c2b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8f12485335f506f4c9633305f323e55cdc3c8c2b", "patch": "@@ -1741,8 +1741,7 @@ fn get_owner_return_paths(\n /// If all the return expressions evaluate to `!`, then we explain that the error will go away\n /// after changing it. This can happen when a user uses `panic!()` or similar as a placeholder.\n fn opaque_type_cycle_error(tcx: TyCtxt<'tcx>, def_id: LocalDefId, span: Span) {\n-    let mut err =\n-        struct_span_err!(tcx.sess, span, E0720, \"cannot resolve opaque type to a concrete type\");\n+    let mut err = struct_span_err!(tcx.sess, span, E0720, \"cannot resolve opaque type\");\n \n     let mut label = false;\n     if let Some((hir_id, visitor)) = get_owner_return_paths(tcx, def_id) {\n@@ -1751,7 +1750,6 @@ fn opaque_type_cycle_error(tcx: TyCtxt<'tcx>, def_id: LocalDefId, span: Span) {\n             .returns\n             .iter()\n             .filter_map(|expr| tables.node_type_opt(expr.hir_id))\n-            .map(|ty| tcx.infer_ctxt().enter(|infcx| infcx.resolve_vars_if_possible(&ty)))\n             .all(|ty| matches!(ty.kind, ty::Never))\n         {\n             let spans = visitor\n@@ -1782,9 +1780,6 @@ fn opaque_type_cycle_error(tcx: TyCtxt<'tcx>, def_id: LocalDefId, span: Span) {\n                 .iter()\n                 .filter_map(|e| tables.node_type_opt(e.hir_id).map(|t| (e.span, t)))\n                 .filter(|(_, ty)| !matches!(ty.kind, ty::Never))\n-                .map(|(sp, ty)| {\n-                    (sp, tcx.infer_ctxt().enter(|infcx| infcx.resolve_vars_if_possible(&ty)))\n-                })\n             {\n                 struct VisitTypes(Vec<DefId>);\n                 impl<'tcx> ty::fold::TypeVisitor<'tcx> for VisitTypes {\n@@ -1812,7 +1807,7 @@ fn opaque_type_cycle_error(tcx: TyCtxt<'tcx>, def_id: LocalDefId, span: Span) {\n         }\n     }\n     if !label {\n-        err.span_label(span, \"cannot resolve to a concrete type\");\n+        err.span_label(span, \"cannot resolve opaque type\");\n     }\n     err.emit();\n }\n@@ -1824,9 +1819,9 @@ fn binding_opaque_type_cycle_error(\n     span: Span,\n     partially_expanded_type: Ty<'tcx>,\n ) {\n-    let mut err =\n-        struct_span_err!(tcx.sess, span, E0720, \"cannot resolve opaque type to a concrete type\");\n-    err.span_label(span, \"cannot resolve to a concrete type\");\n+    let mut err = struct_span_err!(tcx.sess, span, E0720, \"cannot resolve opaque type\");\n+    err.span_label(span, \"cannot resolve opaque type\");\n+    // Find the the owner that declared this `impl Trait` type.\n     let hir_id = tcx.hir().as_local_hir_id(def_id);\n     let mut prev_hir_id = hir_id;\n     let mut hir_id = tcx.hir().get_parent_node(hir_id);\n@@ -1855,15 +1850,12 @@ fn binding_opaque_type_cycle_error(\n                 let hir_id = tcx.hir().as_local_hir_id(def_id);\n                 let tables =\n                     tcx.typeck_tables_of(tcx.hir().local_def_id(tcx.hir().get_parent_item(hir_id)));\n-                let ty = tables.node_type_opt(expr.hir_id);\n-                if let Some(ty) =\n-                    tcx.infer_ctxt().enter(|infcx| infcx.resolve_vars_if_possible(&ty))\n-                {\n+                if let Some(ty) = tables.node_type_opt(expr.hir_id) {\n                     err.span_label(\n                         expr.span,\n                         &format!(\n                             \"this is of type `{}`, which doesn't constrain \\\n-                                `{}` enough to arrive to a concrete type\",\n+                             `{}` enough to arrive to a concrete type\",\n                             ty, partially_expanded_type\n                         ),\n                     );"}, {"sha": "0d2faeaf85d10be60785746009a2de1eed8ac1ce", "filename": "src/test/ui/impl-trait/binding-without-value.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f12485335f506f4c9633305f323e55cdc3c8c2b/src%2Ftest%2Fui%2Fimpl-trait%2Fbinding-without-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f12485335f506f4c9633305f323e55cdc3c8c2b/src%2Ftest%2Fui%2Fimpl-trait%2Fbinding-without-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbinding-without-value.stderr?ref=8f12485335f506f4c9633305f323e55cdc3c8c2b", "patch": "@@ -1,8 +1,8 @@\n-error[E0720]: cannot resolve opaque type to a concrete type\n+error[E0720]: cannot resolve opaque type\n   --> $DIR/binding-without-value.rs:5:13\n    |\n LL |     let _ : impl Copy;\n-   |         -   ^^^^^^^^^ cannot resolve to a concrete type\n+   |         -   ^^^^^^^^^ cannot resolve opaque type\n    |         |\n    |         this binding might not have a concrete type\n    |"}, {"sha": "c538b77098a2d23a133667a96d30897926a1c4f5", "filename": "src/test/ui/impl-trait/issues/infinite-impl-trait-issue-38064.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f12485335f506f4c9633305f323e55cdc3c8c2b/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Finfinite-impl-trait-issue-38064.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f12485335f506f4c9633305f323e55cdc3c8c2b/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Finfinite-impl-trait-issue-38064.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Finfinite-impl-trait-issue-38064.stderr?ref=8f12485335f506f4c9633305f323e55cdc3c8c2b", "patch": "@@ -1,4 +1,4 @@\n-error[E0720]: cannot resolve opaque type to a concrete type\n+error[E0720]: cannot resolve opaque type\n   --> $DIR/infinite-impl-trait-issue-38064.rs:8:13\n    |\n LL | fn foo() -> impl Quux {\n@@ -10,7 +10,7 @@ LL |     Foo(bar())\n LL | fn bar() -> impl Quux {\n    |             --------- returning this opaque type `foo::Foo<impl Quux>`\n \n-error[E0720]: cannot resolve opaque type to a concrete type\n+error[E0720]: cannot resolve opaque type\n   --> $DIR/infinite-impl-trait-issue-38064.rs:14:13\n    |\n LL | fn foo() -> impl Quux {"}, {"sha": "5a3027ec751a91126268ddd7bc3eb8691c248246", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type-direct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f12485335f506f4c9633305f323e55cdc3c8c2b/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-direct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f12485335f506f4c9633305f323e55cdc3c8c2b/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-direct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-direct.stderr?ref=8f12485335f506f4c9633305f323e55cdc3c8c2b", "patch": "@@ -1,4 +1,4 @@\n-error[E0720]: cannot resolve opaque type to a concrete type\n+error[E0720]: cannot resolve opaque type\n   --> $DIR/recursive-impl-trait-type-direct.rs:5:14\n    |\n LL | fn test() -> impl Sized {"}, {"sha": "75ff9e078cc2ca7fe96b51e61d66bb1c25d8ad22", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type-indirect.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8f12485335f506f4c9633305f323e55cdc3c8c2b/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f12485335f506f4c9633305f323e55cdc3c8c2b/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.stderr?ref=8f12485335f506f4c9633305f323e55cdc3c8c2b", "patch": "@@ -1,4 +1,4 @@\n-error[E0720]: cannot resolve opaque type to a concrete type\n+error[E0720]: cannot resolve opaque type\n   --> $DIR/recursive-impl-trait-type-indirect.rs:7:22\n    |\n LL | fn option(i: i32) -> impl Sized {\n@@ -9,7 +9,7 @@ LL |     if i < 0 { None } else { Some((option(i - 1), i)) }\n    |                |\n    |                returning here with type `std::option::Option<(impl Sized, i32)>`\n \n-error[E0720]: cannot resolve opaque type to a concrete type\n+error[E0720]: cannot resolve opaque type\n   --> $DIR/recursive-impl-trait-type-indirect.rs:12:15\n    |\n LL | fn tuple() -> impl Sized {\n@@ -18,7 +18,7 @@ LL |\n LL |     (tuple(),)\n    |     ---------- returning here with type `(impl Sized,)`\n \n-error[E0720]: cannot resolve opaque type to a concrete type\n+error[E0720]: cannot resolve opaque type\n   --> $DIR/recursive-impl-trait-type-indirect.rs:17:15\n    |\n LL | fn array() -> impl Sized {\n@@ -27,7 +27,7 @@ LL |\n LL |     [array()]\n    |     --------- returning here with type `[impl Sized; 1]`\n \n-error[E0720]: cannot resolve opaque type to a concrete type\n+error[E0720]: cannot resolve opaque type\n   --> $DIR/recursive-impl-trait-type-indirect.rs:22:13\n    |\n LL | fn ptr() -> impl Sized {\n@@ -36,7 +36,7 @@ LL |\n LL |     &ptr() as *const _\n    |     ------------------ returning here with type `*const impl Sized`\n \n-error[E0720]: cannot resolve opaque type to a concrete type\n+error[E0720]: cannot resolve opaque type\n   --> $DIR/recursive-impl-trait-type-indirect.rs:27:16\n    |\n LL | fn fn_ptr() -> impl Sized {\n@@ -45,7 +45,7 @@ LL |\n LL |     fn_ptr as fn() -> _\n    |     ------------------- returning here with type `fn() -> impl Sized`\n \n-error[E0720]: cannot resolve opaque type to a concrete type\n+error[E0720]: cannot resolve opaque type\n   --> $DIR/recursive-impl-trait-type-indirect.rs:32:25\n    |\n LL |   fn closure_capture() -> impl Sized {\n@@ -56,7 +56,7 @@ LL | |         x;\n LL | |     }\n    | |_____- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:35:5: 37:6 x:impl Sized]`\n \n-error[E0720]: cannot resolve opaque type to a concrete type\n+error[E0720]: cannot resolve opaque type\n   --> $DIR/recursive-impl-trait-type-indirect.rs:40:29\n    |\n LL |   fn closure_ref_capture() -> impl Sized {\n@@ -67,7 +67,7 @@ LL | |         &x;\n LL | |     }\n    | |_____- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:43:5: 45:6 x:impl Sized]`\n \n-error[E0720]: cannot resolve opaque type to a concrete type\n+error[E0720]: cannot resolve opaque type\n   --> $DIR/recursive-impl-trait-type-indirect.rs:48:21\n    |\n LL | fn closure_sig() -> impl Sized {\n@@ -76,7 +76,7 @@ LL |\n LL |     || closure_sig()\n    |     ---------------- returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:50:5: 50:21]`\n \n-error[E0720]: cannot resolve opaque type to a concrete type\n+error[E0720]: cannot resolve opaque type\n   --> $DIR/recursive-impl-trait-type-indirect.rs:53:23\n    |\n LL | fn generator_sig() -> impl Sized {\n@@ -85,7 +85,7 @@ LL |\n LL |     || generator_sig()\n    |     ------------------ returning here with type `[closure@$DIR/recursive-impl-trait-type-indirect.rs:55:5: 55:23]`\n \n-error[E0720]: cannot resolve opaque type to a concrete type\n+error[E0720]: cannot resolve opaque type\n   --> $DIR/recursive-impl-trait-type-indirect.rs:58:27\n    |\n LL |   fn generator_capture() -> impl Sized {\n@@ -97,7 +97,7 @@ LL | |         x;\n LL | |     }\n    | |_____- returning here with type `[generator@$DIR/recursive-impl-trait-type-indirect.rs:61:5: 64:6 x:impl Sized {()}]`\n \n-error[E0720]: cannot resolve opaque type to a concrete type\n+error[E0720]: cannot resolve opaque type\n   --> $DIR/recursive-impl-trait-type-indirect.rs:67:35\n    |\n LL | fn substs_change<T: 'static>() -> impl Sized {\n@@ -106,7 +106,7 @@ LL |\n LL |     (substs_change::<&T>(),)\n    |     ------------------------ returning here with type `(impl Sized,)`\n \n-error[E0720]: cannot resolve opaque type to a concrete type\n+error[E0720]: cannot resolve opaque type\n   --> $DIR/recursive-impl-trait-type-indirect.rs:72:24\n    |\n LL |   fn generator_hold() -> impl Sized {\n@@ -119,7 +119,7 @@ LL | |         x;\n LL | |     }\n    | |_____- returning here with type `[generator@$DIR/recursive-impl-trait-type-indirect.rs:74:5: 78:6 {impl Sized, ()}]`\n \n-error[E0720]: cannot resolve opaque type to a concrete type\n+error[E0720]: cannot resolve opaque type\n   --> $DIR/recursive-impl-trait-type-indirect.rs:86:26\n    |\n LL | fn mutual_recursion() -> impl Sync {\n@@ -131,7 +131,7 @@ LL |     mutual_recursion_b()\n LL | fn mutual_recursion_b() -> impl Sized {\n    |                            ---------- returning this opaque type `impl Sized`\n \n-error[E0720]: cannot resolve opaque type to a concrete type\n+error[E0720]: cannot resolve opaque type\n   --> $DIR/recursive-impl-trait-type-indirect.rs:91:28\n    |\n LL | fn mutual_recursion() -> impl Sync {"}, {"sha": "fbc58837a8e946dc45cd62490a2dc6442c83f4ae", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type-through-non-recursive.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f12485335f506f4c9633305f323e55cdc3c8c2b/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-through-non-recursive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f12485335f506f4c9633305f323e55cdc3c8c2b/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-through-non-recursive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-through-non-recursive.stderr?ref=8f12485335f506f4c9633305f323e55cdc3c8c2b", "patch": "@@ -1,4 +1,4 @@\n-error[E0720]: cannot resolve opaque type to a concrete type\n+error[E0720]: cannot resolve opaque type\n   --> $DIR/recursive-impl-trait-type-through-non-recursive.rs:7:22\n    |\n LL | fn id<T>(t: T) -> impl Sized { t }\n@@ -9,7 +9,7 @@ LL | fn recursive_id() -> impl Sized {\n LL |     id(recursive_id2())\n    |     ------------------- returning here with type `impl Sized`\n \n-error[E0720]: cannot resolve opaque type to a concrete type\n+error[E0720]: cannot resolve opaque type\n   --> $DIR/recursive-impl-trait-type-through-non-recursive.rs:11:23\n    |\n LL | fn id<T>(t: T) -> impl Sized { t }\n@@ -20,7 +20,7 @@ LL | fn recursive_id2() -> impl Sized {\n LL |     id(recursive_id())\n    |     ------------------ returning here with type `impl Sized`\n \n-error[E0720]: cannot resolve opaque type to a concrete type\n+error[E0720]: cannot resolve opaque type\n   --> $DIR/recursive-impl-trait-type-through-non-recursive.rs:17:24\n    |\n LL | fn wrap<T>(t: T) -> impl Sized { (t,) }\n@@ -31,7 +31,7 @@ LL | fn recursive_wrap() -> impl Sized {\n LL |     wrap(recursive_wrap2())\n    |     ----------------------- returning here with type `impl Sized`\n \n-error[E0720]: cannot resolve opaque type to a concrete type\n+error[E0720]: cannot resolve opaque type\n   --> $DIR/recursive-impl-trait-type-through-non-recursive.rs:21:25\n    |\n LL | fn wrap<T>(t: T) -> impl Sized { (t,) }"}, {"sha": "b8e06725cbcdd6493683dc2ca34fd4d775d5cc27", "filename": "src/test/ui/impl-trait/where-allowed-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f12485335f506f4c9633305f323e55cdc3c8c2b/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f12485335f506f4c9633305f323e55cdc3c8c2b/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed-2.stderr?ref=8f12485335f506f4c9633305f323e55cdc3c8c2b", "patch": "@@ -1,10 +1,10 @@\n-error[E0720]: cannot resolve opaque type to a concrete type\n+error[E0720]: cannot resolve opaque type\n   --> $DIR/where-allowed-2.rs:6:30\n    |\n LL | fn in_adt_in_return() -> Vec<impl Debug> { panic!() }\n    |                              ^^^^^^^^^^    -------- this returned value is of `!` type\n    |                              |\n-   |                              cannot resolve to a concrete type\n+   |                              cannot resolve opaque type\n    |\n    = help: this error will resolve once the item's body returns a concrete type\n "}]}