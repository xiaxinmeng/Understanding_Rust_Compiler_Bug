{"sha": "842027f35bd0c957fff862ef864f4fc57988ed7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0MjAyN2YzNWJkMGM5NTdmZmY4NjJlZjg2NGY0ZmM1Nzk4OGVkN2U=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-23T05:53:59Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-23T23:59:38Z"}, "message": "parse: `NtItem` -> `parse_item_common`.", "tree": {"sha": "1650471dca50d27868910854763e4abeeb506553", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1650471dca50d27868910854763e4abeeb506553"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/842027f35bd0c957fff862ef864f4fc57988ed7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/842027f35bd0c957fff862ef864f4fc57988ed7e", "html_url": "https://github.com/rust-lang/rust/commit/842027f35bd0c957fff862ef864f4fc57988ed7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/842027f35bd0c957fff862ef864f4fc57988ed7e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b01c1e2092b0d3c4e86aedf1e0875898fbde21e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b01c1e2092b0d3c4e86aedf1e0875898fbde21e3", "html_url": "https://github.com/rust-lang/rust/commit/b01c1e2092b0d3c4e86aedf1e0875898fbde21e3"}], "stats": {"total": 51, "additions": 43, "deletions": 8}, "files": [{"sha": "6fa9e615b459fd91ac71551cd783308bf3cfda82", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/842027f35bd0c957fff862ef864f4fc57988ed7e/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/842027f35bd0c957fff862ef864f4fc57988ed7e/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=842027f35bd0c957fff862ef864f4fc57988ed7e", "patch": "@@ -31,16 +31,10 @@ impl<'a> Parser<'a> {\n \n     pub(super) fn parse_item_(\n         &mut self,\n-        mut attrs: Vec<Attribute>,\n+        attrs: Vec<Attribute>,\n         macros_allowed: bool,\n         attributes_allowed: bool,\n     ) -> PResult<'a, Option<P<Item>>> {\n-        maybe_whole!(self, NtItem, |item| {\n-            let mut item = item;\n-            mem::swap(&mut item.attrs, &mut attrs);\n-            item.attrs.extend(attrs);\n-            Some(item)\n-        });\n         let item = self.parse_item_common(attrs, macros_allowed, attributes_allowed, |_| true)?;\n         if let Some(ref item) = item {\n             self.error_on_illegal_default(item.defaultness);\n@@ -50,11 +44,18 @@ impl<'a> Parser<'a> {\n \n     fn parse_item_common(\n         &mut self,\n-        attrs: Vec<Attribute>,\n+        mut attrs: Vec<Attribute>,\n         mac_allowed: bool,\n         attrs_allowed: bool,\n         req_name: ReqName,\n     ) -> PResult<'a, Option<Item>> {\n+        maybe_whole!(self, NtItem, |item| {\n+            let mut item = item;\n+            mem::swap(&mut item.attrs, &mut attrs);\n+            item.attrs.extend(attrs);\n+            Some(item.into_inner())\n+        });\n+\n         let mut unclosed_delims = vec![];\n         let (mut item, tokens) = self.collect_tokens(|this| {\n             let item = this.parse_item_common_(attrs, mac_allowed, attrs_allowed, req_name);"}, {"sha": "8592f8a728715d5836d9d65e186d8802dfcb306c", "filename": "src/test/ui/parser/issue-48137-macros-cannot-interpolate-impl-items.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/842027f35bd0c957fff862ef864f4fc57988ed7e/src%2Ftest%2Fui%2Fparser%2Fissue-48137-macros-cannot-interpolate-impl-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/842027f35bd0c957fff862ef864f4fc57988ed7e/src%2Ftest%2Fui%2Fparser%2Fissue-48137-macros-cannot-interpolate-impl-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-48137-macros-cannot-interpolate-impl-items.rs?ref=842027f35bd0c957fff862ef864f4fc57988ed7e", "patch": "@@ -0,0 +1,34 @@\n+// check-pass\n+\n+fn main() {}\n+\n+macro_rules! mac_impl {\n+    ($i:item) => {\n+        struct S;\n+        impl S { $i }\n+    }\n+}\n+\n+mac_impl! {\n+    fn foo() {}\n+}\n+\n+macro_rules! mac_trait {\n+    ($i:item) => {\n+        trait T { $i }\n+    }\n+}\n+\n+mac_trait! {\n+    fn foo() {}\n+}\n+\n+macro_rules! mac_extern {\n+    ($i:item) => {\n+        extern \"C\" { $i }\n+    }\n+}\n+\n+mac_extern! {\n+    fn foo();\n+}"}]}