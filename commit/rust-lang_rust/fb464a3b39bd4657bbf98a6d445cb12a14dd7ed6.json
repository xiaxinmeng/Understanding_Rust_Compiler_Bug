{"sha": "fb464a3b39bd4657bbf98a6d445cb12a14dd7ed6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiNDY0YTNiMzliZDQ2NTdiYmY5OGE2ZDQ0NWNiMTJhMTRkZDdlZDY=", "commit": {"author": {"name": "Godmar Back", "email": "godmar@gmail.com", "date": "2021-07-06T19:50:42Z"}, "committer": {"name": "Godmar Back", "email": "godmar@gmail.com", "date": "2021-07-06T19:50:42Z"}, "message": "rewrote documentation for thread::yield_now()\n\nThe old documentation suggested the use of yield_now for repeated\npolling instead of discouraging it; it also made the false claim that\nchannels are implementing using yield_now. (They are not, except for\na corner case).", "tree": {"sha": "e0f2b8b95a8b79c12e5040be757ec7cd2f7281e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0f2b8b95a8b79c12e5040be757ec7cd2f7281e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb464a3b39bd4657bbf98a6d445cb12a14dd7ed6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb464a3b39bd4657bbf98a6d445cb12a14dd7ed6", "html_url": "https://github.com/rust-lang/rust/commit/fb464a3b39bd4657bbf98a6d445cb12a14dd7ed6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb464a3b39bd4657bbf98a6d445cb12a14dd7ed6/comments", "author": {"login": "godmar", "id": 486389, "node_id": "MDQ6VXNlcjQ4NjM4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/486389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/godmar", "html_url": "https://github.com/godmar", "followers_url": "https://api.github.com/users/godmar/followers", "following_url": "https://api.github.com/users/godmar/following{/other_user}", "gists_url": "https://api.github.com/users/godmar/gists{/gist_id}", "starred_url": "https://api.github.com/users/godmar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/godmar/subscriptions", "organizations_url": "https://api.github.com/users/godmar/orgs", "repos_url": "https://api.github.com/users/godmar/repos", "events_url": "https://api.github.com/users/godmar/events{/privacy}", "received_events_url": "https://api.github.com/users/godmar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "godmar", "id": 486389, "node_id": "MDQ6VXNlcjQ4NjM4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/486389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/godmar", "html_url": "https://github.com/godmar", "followers_url": "https://api.github.com/users/godmar/followers", "following_url": "https://api.github.com/users/godmar/following{/other_user}", "gists_url": "https://api.github.com/users/godmar/gists{/gist_id}", "starred_url": "https://api.github.com/users/godmar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/godmar/subscriptions", "organizations_url": "https://api.github.com/users/godmar/orgs", "repos_url": "https://api.github.com/users/godmar/repos", "events_url": "https://api.github.com/users/godmar/events{/privacy}", "received_events_url": "https://api.github.com/users/godmar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d04ec4735810553224eb5eaf948ec78f84eac06c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d04ec4735810553224eb5eaf948ec78f84eac06c", "html_url": "https://github.com/rust-lang/rust/commit/d04ec4735810553224eb5eaf948ec78f84eac06c"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "da2d11604934fa118b0dfd38a158972098f51c5f", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fb464a3b39bd4657bbf98a6d445cb12a14dd7ed6/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb464a3b39bd4657bbf98a6d445cb12a14dd7ed6/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=fb464a3b39bd4657bbf98a6d445cb12a14dd7ed6", "patch": "@@ -651,22 +651,23 @@ pub fn current() -> Thread {\n \n /// Cooperatively gives up a timeslice to the OS scheduler.\n ///\n-/// This is used when the programmer knows that the thread will have nothing\n-/// to do for some time, and thus avoid wasting computing time.\n-///\n-/// For example when polling on a resource, it is common to check that it is\n-/// available, and if not to yield in order to avoid busy waiting.\n-///\n-/// Thus the pattern of `yield`ing after a failed poll is rather common when\n-/// implementing low-level shared resources or synchronization primitives.\n-///\n-/// However programmers will usually prefer to use [`channel`]s, [`Condvar`]s,\n-/// [`Mutex`]es or [`join`] for their synchronization routines, as they avoid\n-/// thinking about thread scheduling.\n-///\n-/// Note that [`channel`]s for example are implemented using this primitive.\n-/// Indeed when you call `send` or `recv`, which are blocking, they will yield\n-/// if the channel is not available.\n+/// This calls the underlying OS scheduler's yield primitive, signaling\n+/// that the calling thread is willing to give up its remaining timeslice\n+/// so that the OS may schedule other threads on the CPU.\n+///\n+/// A drawback of yielding in a loop is that if the OS does not have any\n+/// other ready threads to run on the current CPU, the thread will effectively\n+/// busy-wait, which wastes CPU time and energy.\n+///\n+/// Therefore, when waiting for events of interest, a programmer's first\n+/// choice should be to use synchronization devices such as [`channel`]s,\n+/// [`Condvar`]s, [`Mutex`]es or [`join`] since these primitives are\n+/// implemented in a blocking manner, giving up the CPU until the event\n+/// of interest has occurred which avoids repeated yielding.\n+///\n+/// `yield_now` should thus be used only rarely, mostly in situations where\n+/// repeated polling is required because there is no other suitable way to\n+/// learn when an event of interest has occurred.\n ///\n /// # Examples\n ///"}]}