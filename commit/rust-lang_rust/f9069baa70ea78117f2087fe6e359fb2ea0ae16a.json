{"sha": "f9069baa70ea78117f2087fe6e359fb2ea0ae16a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MDY5YmFhNzBlYTc4MTE3ZjIwODdmZTZlMzU5ZmIyZWEwYWUxNmE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-21T23:28:17Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-21T23:28:19Z"}, "message": "core::rt: Add LocalServices for thread-local language services\n\nThings like the GC heap and unwinding are desirable everywhere the language\nmight be used, not just in tasks. All Rust code should have access to\nLocalServices.", "tree": {"sha": "10aa6c6aae411de29cac226b91827a0f0d005348", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10aa6c6aae411de29cac226b91827a0f0d005348"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9069baa70ea78117f2087fe6e359fb2ea0ae16a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9069baa70ea78117f2087fe6e359fb2ea0ae16a", "html_url": "https://github.com/rust-lang/rust/commit/f9069baa70ea78117f2087fe6e359fb2ea0ae16a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9069baa70ea78117f2087fe6e359fb2ea0ae16a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4eff3130c589b5fb256c537e90272646fd8406ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eff3130c589b5fb256c537e90272646fd8406ab", "html_url": "https://github.com/rust-lang/rust/commit/4eff3130c589b5fb256c537e90272646fd8406ab"}], "stats": {"total": 72, "additions": 70, "deletions": 2}, "files": [{"sha": "8e386f80b77d78ca0b34ad03863512e49ff3394f", "filename": "src/libcore/rt/local_services.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/f9069baa70ea78117f2087fe6e359fb2ea0ae16a/src%2Flibcore%2Frt%2Flocal_services.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9069baa70ea78117f2087fe6e359fb2ea0ae16a/src%2Flibcore%2Frt%2Flocal_services.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Flocal_services.rs?ref=f9069baa70ea78117f2087fe6e359fb2ea0ae16a", "patch": "@@ -0,0 +1,63 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Language-level runtime services that should reasonably expected\n+//! to be available 'everywhere'. Local heaps, GC, unwinding,\n+//! local storage, and logging. Even a 'freestanding' Rust would likely want\n+//! to implement this.\n+\n+//! Local services may exist in at least three different contexts:\n+//! when running as a task, when running in the scheduler's context,\n+//! or when running outside of a scheduler but with local services\n+//! (freestanding rust with local services?).\n+\n+use prelude::*;\n+use super::sched::{Task, local_sched};\n+\n+pub struct LocalServices {\n+    heap: LocalHeap,\n+    gc: GarbageCollector,\n+    storage: LocalStorage,\n+    logger: Logger,\n+    unwinder: Unwinder\n+}\n+\n+pub struct LocalHeap;\n+pub struct GarbageCollector;\n+pub struct LocalStorage;\n+pub struct Logger;\n+pub struct Unwinder;\n+\n+impl LocalServices {\n+    pub fn new() -> LocalServices {\n+        LocalServices {\n+            heap: LocalHeap,\n+            gc: GarbageCollector,\n+            storage: LocalStorage,\n+            logger: Logger,\n+            unwinder: Unwinder\n+        }\n+    }\n+}\n+\n+/// Borrow a pointer to the installed local services.\n+/// Fails (likely aborting the process) if local services are not available.\n+pub fn borrow_local_services(f: &fn(&mut LocalServices)) {\n+    do local_sched::borrow |sched| {\n+        match sched.current_task {\n+            Some(~ref mut task) => {\n+                f(&mut task.local_services)\n+            }\n+            None => {\n+                fail!(~\"no local services for schedulers yet\")\n+            }\n+        }\n+    }\n+}"}, {"sha": "e0190418b132b4dee92677545fbcbdd4295e4c6d", "filename": "src/libcore/rt/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f9069baa70ea78117f2087fe6e359fb2ea0ae16a/src%2Flibcore%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9069baa70ea78117f2087fe6e359fb2ea0ae16a/src%2Flibcore%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fmod.rs?ref=f9069baa70ea78117f2087fe6e359fb2ea0ae16a", "patch": "@@ -48,6 +48,7 @@ mod stack;\n mod context;\n mod thread;\n pub mod env;\n+pub mod local_services;\n \n /// Tools for testing the runtime\n #[cfg(test)]\n@@ -97,7 +98,7 @@ pub fn start(main: *u8, _argc: int, _argv: **c_char, _crate_map: *u8) -> int {\n /// Different runtime services are available depending on context.\n #[deriving(Eq)]\n pub enum RuntimeContext {\n-    // Only default services, e.g. exchange heap\n+    // Only the exchange heap is available\n     GlobalContext,\n     // The scheduler may be accessed\n     SchedulerContext,"}, {"sha": "30136e443ee39df96ad0e310f8790a5e895d926d", "filename": "src/libcore/rt/sched/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9069baa70ea78117f2087fe6e359fb2ea0ae16a/src%2Flibcore%2Frt%2Fsched%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9069baa70ea78117f2087fe6e359fb2ea0ae16a/src%2Flibcore%2Frt%2Fsched%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fsched%2Fmod.rs?ref=f9069baa70ea78117f2087fe6e359fb2ea0ae16a", "patch": "@@ -16,6 +16,7 @@ use super::work_queue::WorkQueue;\n use super::stack::{StackPool, StackSegment};\n use super::rtio::{EventLoop, EventLoopObject};\n use super::context::Context;\n+use super::local_services::LocalServices;\n use cell::Cell;\n \n #[cfg(test)] use super::uvio::UvEventLoop;\n@@ -38,7 +39,7 @@ pub struct Scheduler {\n     /// Always valid when a task is executing, otherwise not\n     priv saved_context: Context,\n     /// The currently executing task\n-    priv current_task: Option<~Task>,\n+    current_task: Option<~Task>,\n     /// An action performed after a context switch on behalf of the\n     /// code running before the context switch\n     priv cleanup_job: Option<CleanupJob>\n@@ -326,6 +327,8 @@ pub struct Task {\n     /// These are always valid when the task is not running, unless\n     /// the task is dead\n     priv saved_context: Context,\n+    /// The heap, GC, unwinding, local storage, logging\n+    local_services: LocalServices\n }\n \n pub impl Task {\n@@ -337,6 +340,7 @@ pub impl Task {\n         return Task {\n             current_stack_segment: stack,\n             saved_context: initial_context,\n+            local_services: LocalServices::new()\n         };\n     }\n "}]}