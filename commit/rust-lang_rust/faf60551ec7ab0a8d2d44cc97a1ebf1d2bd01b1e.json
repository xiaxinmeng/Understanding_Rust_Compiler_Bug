{"sha": "faf60551ec7ab0a8d2d44cc97a1ebf1d2bd01b1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZjYwNTUxZWM3YWIwYThkMmQ0NGNjOTdhMWViZjFkMmJkMDFiMWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-05T16:06:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-05T16:06:37Z"}, "message": "auto merge of #12045 : thestinger/rust/glue, r=pcwalton\n\nA solid step towards fixing #11998. Eventually, the size may always be\r\npassed to `exchange_free` but this will not be required to fix the bug.", "tree": {"sha": "07a3482c0c83d53341162ef3cdd6e8f104207f33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07a3482c0c83d53341162ef3cdd6e8f104207f33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faf60551ec7ab0a8d2d44cc97a1ebf1d2bd01b1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faf60551ec7ab0a8d2d44cc97a1ebf1d2bd01b1e", "html_url": "https://github.com/rust-lang/rust/commit/faf60551ec7ab0a8d2d44cc97a1ebf1d2bd01b1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faf60551ec7ab0a8d2d44cc97a1ebf1d2bd01b1e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed885e35fe91c12892bbf1254b4bc6259cc96eee", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed885e35fe91c12892bbf1254b4bc6259cc96eee", "html_url": "https://github.com/rust-lang/rust/commit/ed885e35fe91c12892bbf1254b4bc6259cc96eee"}, {"sha": "1778b6361627c5894bf75ffecf427573af02d390", "url": "https://api.github.com/repos/rust-lang/rust/commits/1778b6361627c5894bf75ffecf427573af02d390", "html_url": "https://github.com/rust-lang/rust/commit/1778b6361627c5894bf75ffecf427573af02d390"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "99eccb8f40b99250e4e414184b2f3e5d601bdb9f", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/faf60551ec7ab0a8d2d44cc97a1ebf1d2bd01b1e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf60551ec7ab0a8d2d44cc97a1ebf1d2bd01b1e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=faf60551ec7ab0a8d2d44cc97a1ebf1d2bd01b1e", "patch": "@@ -30,7 +30,7 @@ use middle::trans::machine::*;\n use middle::trans::reflect;\n use middle::trans::tvec;\n use middle::trans::type_::Type;\n-use middle::trans::type_of::type_of;\n+use middle::trans::type_of::{type_of, sizing_type_of};\n use middle::ty;\n use util::ppaux::ty_to_short_str;\n use util::ppaux;\n@@ -100,23 +100,29 @@ pub fn lazily_emit_all_tydesc_glue(ccx: @CrateContext,\n     lazily_emit_tydesc_glue(ccx, abi::tydesc_field_visit_glue, static_ti);\n }\n \n-fn simplified_glue_type(tcx: ty::ctxt, field: uint, t: ty::t) -> ty::t {\n+fn get_glue_type(ccx: &CrateContext, field: uint, t: ty::t) -> ty::t {\n+    let tcx = ccx.tcx;\n     if field == abi::tydesc_field_drop_glue {\n         if !ty::type_needs_drop(tcx, t) {\n-            return ty::mk_nil();\n+            return ty::mk_i8();\n         }\n         match ty::get(t).sty {\n-            ty::ty_box(typ)\n-                if !ty::type_needs_drop(tcx, typ) =>\n-            return ty::mk_box(tcx, ty::mk_nil()),\n-\n-            ty::ty_uniq(typ)\n-                if !ty::type_needs_drop(tcx, typ) =>\n-            return ty::mk_uniq(tcx, ty::mk_nil()),\n+            ty::ty_box(typ) if !ty::type_needs_drop(tcx, typ) =>\n+                return ty::mk_box(tcx, ty::mk_i8()),\n+\n+            ty::ty_uniq(typ) if !ty::type_needs_drop(tcx, typ) => {\n+                let llty = sizing_type_of(ccx, typ);\n+                // Unique boxes do not allocate for zero-size types. The standard library may assume\n+                // that `free` is never called on the pointer returned for `~ZeroSizeType`.\n+                if llsize_of_alloc(ccx, llty) == 0 {\n+                    return ty::mk_i8();\n+                } else {\n+                    return ty::mk_uniq(tcx, ty::mk_i8());\n+                }\n+            }\n \n-            ty::ty_vec(mt, ty::vstore_uniq)\n-                if !ty::type_needs_drop(tcx, mt.ty) =>\n-            return ty::mk_uniq(tcx, ty::mk_nil()),\n+            ty::ty_vec(mt, ty::vstore_uniq) if !ty::type_needs_drop(tcx, mt.ty) =>\n+                return ty::mk_uniq(tcx, ty::mk_i8()),\n \n             _ => {}\n         }\n@@ -128,7 +134,7 @@ fn simplified_glue_type(tcx: ty::ctxt, field: uint, t: ty::t) -> ty::t {\n pub fn lazily_emit_tydesc_glue(ccx: @CrateContext, field: uint, ti: @tydesc_info) {\n     let _icx = push_ctxt(\"lazily_emit_tydesc_glue\");\n \n-    let simpl = simplified_glue_type(ccx.tcx, field, ti.ty);\n+    let simpl = get_glue_type(ccx, field, ti.ty);\n     if simpl != ti.ty {\n         let _icx = push_ctxt(\"lazily_emit_simplified_tydesc_glue\");\n         let simpl_ti = get_tydesc(ccx, simpl);\n@@ -204,7 +210,7 @@ pub fn call_tydesc_glue_full(bcx: &Block, v: ValueRef, tydesc: ValueRef,\n         PointerCast(bcx, v, Type::i8p())\n     } else {\n         let ty = static_ti.unwrap().ty;\n-        let simpl = simplified_glue_type(ccx.tcx, field, ty);\n+        let simpl = get_glue_type(ccx, field, ty);\n         if simpl != ty {\n             PointerCast(bcx, v, type_of(ccx, simpl).ptr_to())\n         } else {"}]}