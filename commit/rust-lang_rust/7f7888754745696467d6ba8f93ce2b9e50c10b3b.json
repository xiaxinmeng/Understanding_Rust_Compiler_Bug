{"sha": "7f7888754745696467d6ba8f93ce2b9e50c10b3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNzg4ODc1NDc0NTY5NjQ2N2Q2YmE4ZjkzY2UyYjllNTBjMTBiM2I=", "commit": {"author": {"name": "Sean Patrick Santos", "email": "SeanPatrickSantos@gmail.com", "date": "2015-03-22T10:38:42Z"}, "committer": {"name": "Sean Patrick Santos", "email": "SeanPatrickSantos@gmail.com", "date": "2015-04-24T03:02:27Z"}, "message": "Add previously omitted associated const tests.", "tree": {"sha": "73df461594fc64e9ae3e3e31a977d4ac202dbcbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73df461594fc64e9ae3e3e31a977d4ac202dbcbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f7888754745696467d6ba8f93ce2b9e50c10b3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f7888754745696467d6ba8f93ce2b9e50c10b3b", "html_url": "https://github.com/rust-lang/rust/commit/7f7888754745696467d6ba8f93ce2b9e50c10b3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f7888754745696467d6ba8f93ce2b9e50c10b3b/comments", "author": {"login": "quantheory", "id": 1740206, "node_id": "MDQ6VXNlcjE3NDAyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1740206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quantheory", "html_url": "https://github.com/quantheory", "followers_url": "https://api.github.com/users/quantheory/followers", "following_url": "https://api.github.com/users/quantheory/following{/other_user}", "gists_url": "https://api.github.com/users/quantheory/gists{/gist_id}", "starred_url": "https://api.github.com/users/quantheory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quantheory/subscriptions", "organizations_url": "https://api.github.com/users/quantheory/orgs", "repos_url": "https://api.github.com/users/quantheory/repos", "events_url": "https://api.github.com/users/quantheory/events{/privacy}", "received_events_url": "https://api.github.com/users/quantheory/received_events", "type": "User", "site_admin": false}, "committer": {"login": "quantheory", "id": 1740206, "node_id": "MDQ6VXNlcjE3NDAyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1740206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quantheory", "html_url": "https://github.com/quantheory", "followers_url": "https://api.github.com/users/quantheory/followers", "following_url": "https://api.github.com/users/quantheory/following{/other_user}", "gists_url": "https://api.github.com/users/quantheory/gists{/gist_id}", "starred_url": "https://api.github.com/users/quantheory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quantheory/subscriptions", "organizations_url": "https://api.github.com/users/quantheory/orgs", "repos_url": "https://api.github.com/users/quantheory/repos", "events_url": "https://api.github.com/users/quantheory/events{/privacy}", "received_events_url": "https://api.github.com/users/quantheory/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d9b5d04242567648800c5594695f147c6bca05b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d9b5d04242567648800c5594695f147c6bca05b", "html_url": "https://github.com/rust-lang/rust/commit/3d9b5d04242567648800c5594695f147c6bca05b"}], "stats": {"total": 174, "additions": 167, "deletions": 7}, "files": [{"sha": "a7b2abc99e5f9615fa4f58abf6cef927610b75a4", "filename": "src/test/compile-fail/associated-const-impl-wrong-type.rs", "status": "renamed", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7f7888754745696467d6ba8f93ce2b9e50c10b3b/src%2Ftest%2Fcompile-fail%2Fassociated-const-impl-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f7888754745696467d6ba8f93ce2b9e50c10b3b/src%2Ftest%2Fcompile-fail%2Fassociated-const-impl-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-const-impl-wrong-type.rs?ref=7f7888754745696467d6ba8f93ce2b9e50c10b3b", "patch": "@@ -8,14 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Foo {\n-    fn bar(&self);\n+use std::marker::MarkerTrait;\n+\n+trait Foo: MarkerTrait {\n+    const BAR: u32;\n }\n \n-impl Foo for u32 {\n-    //~^ ERROR not all trait items implemented, missing: `bar`\n-    type bar = u64;\n-    //~^ ERROR item `bar` is an associated type, which doesn't match its trait `Foo`\n+struct SignedBar;\n+\n+impl Foo for SignedBar {\n+    const BAR: i32 = -1;\n+    //~^ ERROR E0326\n }\n \n-fn main () {}\n+fn main() {}", "previous_filename": "src/test/compile-fail/impl-type-where-trait-has-method.rs"}, {"sha": "497ff426b2fae5f8d8939895032c6ec2ec155d17", "filename": "src/test/compile-fail/associated-const-upper-case-lint.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7f7888754745696467d6ba8f93ce2b9e50c10b3b/src%2Ftest%2Fcompile-fail%2Fassociated-const-upper-case-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f7888754745696467d6ba8f93ce2b9e50c10b3b/src%2Ftest%2Fcompile-fail%2Fassociated-const-upper-case-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-const-upper-case-lint.rs?ref=7f7888754745696467d6ba8f93ce2b9e50c10b3b", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(non_upper_case_globals)]\n+#![allow(dead_code)]\n+\n+struct Foo;\n+\n+impl Foo {\n+    const not_upper: bool = true;\n+}\n+//~^^ ERROR associated constant `not_upper` should have an upper case name such as `NOT_UPPER`\n+\n+fn main() {}"}, {"sha": "3757005b91fdda46fcf5121954c53a81caee1438", "filename": "src/test/compile-fail/impl-wrong-item-for-trait.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7f7888754745696467d6ba8f93ce2b9e50c10b3b/src%2Ftest%2Fcompile-fail%2Fimpl-wrong-item-for-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f7888754745696467d6ba8f93ce2b9e50c10b3b/src%2Ftest%2Fcompile-fail%2Fimpl-wrong-item-for-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-wrong-item-for-trait.rs?ref=7f7888754745696467d6ba8f93ce2b9e50c10b3b", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {\n+    fn bar(&self);\n+    const MY_CONST: u32;\n+}\n+\n+pub struct FooConstForMethod;\n+\n+impl Foo for FooConstForMethod {\n+    //~^ ERROR E0046\n+    const bar: u64 = 1;\n+    //~^ ERROR E0323\n+    const MY_CONST: u32 = 1;\n+}\n+\n+pub struct FooMethodForConst;\n+\n+impl Foo for FooMethodForConst {\n+    //~^ ERROR E0046\n+    fn bar(&self) {}\n+    fn MY_CONST() {}\n+    //~^ ERROR E0324\n+}\n+\n+pub struct FooTypeForMethod;\n+\n+impl Foo for FooTypeForMethod {\n+    //~^ ERROR E0046\n+    type bar = u64;\n+    //~^ ERROR E0325\n+    const MY_CONST: u32 = 1;\n+}\n+\n+fn main () {}"}, {"sha": "ba47649df64dd62bb62aed8253af57e743363265", "filename": "src/test/run-pass/associated-const-marks-live-code.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7f7888754745696467d6ba8f93ce2b9e50c10b3b/src%2Ftest%2Frun-pass%2Fassociated-const-marks-live-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f7888754745696467d6ba8f93ce2b9e50c10b3b/src%2Ftest%2Frun-pass%2Fassociated-const-marks-live-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-marks-live-code.rs?ref=7f7888754745696467d6ba8f93ce2b9e50c10b3b", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(dead_code)]\n+\n+const GLOBAL_BAR: u32 = 1;\n+\n+struct Foo;\n+\n+impl Foo {\n+    const BAR: u32 = GLOBAL_BAR;\n+}\n+\n+fn main() {\n+    let _: u32 = Foo::BAR;\n+}"}, {"sha": "e42dd25022b6146078a000c6717482597d4a9774", "filename": "src/test/run-pass/associated-const-resolution-order.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7f7888754745696467d6ba8f93ce2b9e50c10b3b/src%2Ftest%2Frun-pass%2Fassociated-const-resolution-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f7888754745696467d6ba8f93ce2b9e50c10b3b/src%2Ftest%2Frun-pass%2Fassociated-const-resolution-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-resolution-order.rs?ref=7f7888754745696467d6ba8f93ce2b9e50c10b3b", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::marker::MarkerTrait;\n+\n+struct MyType;\n+\n+impl MyType {\n+    const IMPL_IS_INHERENT: bool = true;\n+}\n+\n+trait MyTrait: MarkerTrait {\n+    const IMPL_IS_INHERENT: bool;\n+    const IMPL_IS_ON_TRAIT: bool;\n+}\n+\n+impl MyTrait for MyType {\n+    const IMPL_IS_INHERENT: bool = false;\n+    const IMPL_IS_ON_TRAIT: bool = true;\n+}\n+\n+fn main() {\n+    // Check that the inherent impl is used before the trait, but that the trait\n+    // can still be accessed.\n+    assert!(<MyType>::IMPL_IS_INHERENT);\n+    assert!(!<MyType as MyTrait>::IMPL_IS_INHERENT);\n+    assert!(<MyType>::IMPL_IS_ON_TRAIT);\n+}"}, {"sha": "2f95d4275c561b1ad67c1e97b8a9d85a851f33b9", "filename": "src/test/run-pass/associated-const-use-impl-of-same-trait.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7f7888754745696467d6ba8f93ce2b9e50c10b3b/src%2Ftest%2Frun-pass%2Fassociated-const-use-impl-of-same-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f7888754745696467d6ba8f93ce2b9e50c10b3b/src%2Ftest%2Frun-pass%2Fassociated-const-use-impl-of-same-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-use-impl-of-same-trait.rs?ref=7f7888754745696467d6ba8f93ce2b9e50c10b3b", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::marker::MarkerTrait;\n+\n+// The main purpose of this test is to ensure that different impls of the same\n+// trait can refer to each other without setting off the static recursion check\n+// (as long as there's no actual recursion).\n+\n+trait Foo: MarkerTrait {\n+    const BAR: u32;\n+}\n+\n+struct IsFoo1;\n+\n+impl Foo for IsFoo1 {\n+    const BAR: u32 = 1;\n+}\n+\n+struct IsFoo2;\n+\n+impl Foo for IsFoo2 {\n+    const BAR: u32 = <IsFoo1 as Foo>::BAR;\n+}\n+\n+fn main() {\n+    assert_eq!(<IsFoo1>::BAR, <IsFoo2 as Foo>::BAR);\n+}"}]}