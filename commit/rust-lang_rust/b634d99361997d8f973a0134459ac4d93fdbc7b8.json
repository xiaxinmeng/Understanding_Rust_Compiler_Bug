{"sha": "b634d99361997d8f973a0134459ac4d93fdbc7b8", "node_id": "C_kwDOAAsO6NoAKGI2MzRkOTkzNjE5OTdkOGY5NzNhMDEzNDQ1OWFjNGQ5M2ZkYmM3Yjg", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-18T17:55:03Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-18T17:55:03Z"}, "message": "Give the lifetimes better names", "tree": {"sha": "ff0398212f3981b074648be09a53328a5cd7a6c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff0398212f3981b074648be09a53328a5cd7a6c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b634d99361997d8f973a0134459ac4d93fdbc7b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b634d99361997d8f973a0134459ac4d93fdbc7b8", "html_url": "https://github.com/rust-lang/rust/commit/b634d99361997d8f973a0134459ac4d93fdbc7b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b634d99361997d8f973a0134459ac4d93fdbc7b8/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "673e2b1d8f01e2059c5204b42b12c04b198e30b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/673e2b1d8f01e2059c5204b42b12c04b198e30b5", "html_url": "https://github.com/rust-lang/rust/commit/673e2b1d8f01e2059c5204b42b12c04b198e30b5"}], "stats": {"total": 45, "additions": 26, "deletions": 19}, "files": [{"sha": "e5918b4d96e434d76908d84a5bb21d0c34b83818", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b634d99361997d8f973a0134459ac4d93fdbc7b8/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b634d99361997d8f973a0134459ac4d93fdbc7b8/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=b634d99361997d8f973a0134459ac4d93fdbc7b8", "patch": "@@ -17,6 +17,7 @@ pub struct InlayHintsConfig {\n     pub parameter_hints: bool,\n     pub chaining_hints: bool,\n     pub closure_return_type_hints: bool,\n+    // FIXME: ternary option here, on off non-noisy\n     pub lifetime_elision_hints: bool,\n     pub hide_named_constructor_hints: bool,\n     pub max_length: Option<usize>,\n@@ -135,15 +136,12 @@ fn lifetime_hints(\n     let ret_type = func.ret_type();\n     let self_param = param_list.self_param();\n \n+    // FIXME: don't use already used lifetimenames\n+\n     let mut allocated_lifetimes = vec![];\n     let mut gen_name = {\n-        let mut iter = 'a'..;\n-        let allocated_lifetimes = &mut allocated_lifetimes;\n-        move || {\n-            if let Some(it) = iter.next() {\n-                allocated_lifetimes.push(SmolStr::from_iter(['\\'', it]))\n-            }\n-        }\n+        let mut gen = ('a'..).map(|it| SmolStr::from_iter(['\\'', it]));\n+        move || gen.next().unwrap_or_else(SmolStr::default)\n     };\n \n     let potential_lt_refs: Vec<_> = param_list\n@@ -152,7 +150,13 @@ fn lifetime_hints(\n             let ty = it.ty()?;\n             // FIXME: look into the nested types here and check path types\n             match ty {\n-                ast::Type::RefType(r) => Some(r),\n+                ast::Type::RefType(r) => Some((\n+                    it.pat().and_then(|it| match it {\n+                        ast::Pat::IdentPat(p) => p.name(),\n+                        _ => None,\n+                    }),\n+                    r,\n+                )),\n                 _ => None,\n             }\n         })\n@@ -180,13 +184,16 @@ fn lifetime_hints(\n     // allocate names\n     if let Some(self_param) = &self_param {\n         if is_elided(self_param.lifetime()) {\n-            gen_name();\n+            allocated_lifetimes.push(SmolStr::new_inline(\"'self\"));\n         }\n     }\n-    potential_lt_refs.iter().for_each(|it| {\n+    potential_lt_refs.iter().for_each(|(name, it)| {\n         // FIXME: look into the nested types here and check path types\n         if is_elided(it.lifetime()) {\n-            gen_name();\n+            allocated_lifetimes.push(\n+                name.as_ref()\n+                    .map_or_else(|| gen_name(), |it| SmolStr::from_iter([\"'\", it.text().as_str()])),\n+            );\n         }\n     });\n \n@@ -200,7 +207,7 @@ fn lifetime_hints(\n         }\n     } else {\n         match potential_lt_refs.as_slice() {\n-            [r] => match fetch_lt_text(r.lifetime()) {\n+            [(_, r)] => match fetch_lt_text(r.lifetime()) {\n                 LifetimeKind::Elided => allocated_lifetimes.get(0).cloned(),\n                 LifetimeKind::Named(name) => Some(name),\n                 LifetimeKind::Static => None,\n@@ -246,7 +253,7 @@ fn lifetime_hints(\n         0\n     };\n \n-    for p in potential_lt_refs.iter() {\n+    for (_, p) in potential_lt_refs.iter() {\n         if is_elided(p.lifetime()) {\n             let t = p.amp_token()?;\n             let lt = allocated_lifetimes[idx].clone();\n@@ -2015,8 +2022,8 @@ fn empty_gpl<>(a: &()) {}\n       //    ^'a   ^'a\n fn partial<'b>(a: &(), b: &'b ()) {}\n //        ^'a, $  ^'a\n-fn partial<'b>(a: &'b (), b: &()) {}\n-//        ^'a, $             ^'a\n+fn partial<'a>(a: &'a (), b: &()) {}\n+//        ^'b, $             ^'b\n \n fn single_ret(a: &()) -> &() {}\n // ^^^^^^^^^^<'a>\n@@ -2030,11 +2037,11 @@ fn foo<'c>(a: &'c ()) -> &() {}\n \n impl () {\n     fn foo(&self) -> &() {}\n-    // ^^^<'a>\n-        // ^'a       ^'a\n+    // ^^^<'self>\n+        // ^'self    ^'self\n     fn foo(&self, a: &()) -> &() {}\n-    // ^^^<'a, 'b>\n-        // ^'a       ^'b     ^'a$\n+    // ^^^<'self, 'a>\n+        // ^'self    ^'a     ^'self$\n }\n \"#,\n         );"}]}