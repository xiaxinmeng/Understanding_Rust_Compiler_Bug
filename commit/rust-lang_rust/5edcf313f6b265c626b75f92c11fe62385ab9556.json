{"sha": "5edcf313f6b265c626b75f92c11fe62385ab9556", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlZGNmMzEzZjZiMjY1YzYyNmI3NWY5MmMxMWZlNjIzODVhYjk1NTY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-08T12:38:29Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-08T12:38:29Z"}, "message": "move query impls to adt", "tree": {"sha": "e8d4cfdd00f43b885a638449f9d06108bb26cba7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8d4cfdd00f43b885a638449f9d06108bb26cba7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5edcf313f6b265c626b75f92c11fe62385ab9556", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5edcf313f6b265c626b75f92c11fe62385ab9556", "html_url": "https://github.com/rust-lang/rust/commit/5edcf313f6b265c626b75f92c11fe62385ab9556", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5edcf313f6b265c626b75f92c11fe62385ab9556/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64f202bdd7f74b081e08f2b5faee4bd91c9b44a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/64f202bdd7f74b081e08f2b5faee4bd91c9b44a8", "html_url": "https://github.com/rust-lang/rust/commit/64f202bdd7f74b081e08f2b5faee4bd91c9b44a8"}], "stats": {"total": 56, "additions": 31, "deletions": 25}, "files": [{"sha": "8639bbd5c5abf2f15523dc6ab8a6057ba81dfe79", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5edcf313f6b265c626b75f92c11fe62385ab9556/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5edcf313f6b265c626b75f92c11fe62385ab9556/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=5edcf313f6b265c626b75f92c11fe62385ab9556", "patch": "@@ -1,9 +1,10 @@\n use std::sync::Arc;\n \n-use ra_syntax::ast::{self, NameOwner, StructFlavor};\n+use ra_db::Cancelable;\n+use ra_syntax::ast::{self, NameOwner, StructFlavor, AstNode};\n \n use crate::{\n-    DefId, Name, AsName, Struct, Enum, VariantData, StructField,\n+    DefId, Name, AsName, Struct, Enum, VariantData, StructField, HirDatabase, DefKind,\n     type_ref::TypeRef,\n };\n \n@@ -20,12 +21,24 @@ pub struct StructData {\n }\n \n impl StructData {\n-    pub(crate) fn new(struct_def: &ast::StructDef) -> StructData {\n+    fn new(struct_def: &ast::StructDef) -> StructData {\n         let name = struct_def.name().map(|n| n.as_name());\n         let variant_data = VariantData::new(struct_def.flavor());\n         let variant_data = Arc::new(variant_data);\n         StructData { name, variant_data }\n     }\n+\n+    pub(crate) fn struct_data_query(\n+        db: &impl HirDatabase,\n+        def_id: DefId,\n+    ) -> Cancelable<Arc<StructData>> {\n+        let def_loc = def_id.loc(db);\n+        assert!(def_loc.kind == DefKind::Struct);\n+        let syntax = db.file_item(def_loc.source_item_id);\n+        let struct_def =\n+            ast::StructDef::cast(&syntax).expect(\"struct def should point to StructDef node\");\n+        Ok(Arc::new(StructData::new(struct_def)))\n+    }\n }\n \n impl Enum {\n@@ -41,7 +54,7 @@ pub struct EnumData {\n }\n \n impl EnumData {\n-    pub(crate) fn new(enum_def: &ast::EnumDef) -> Self {\n+    fn new(enum_def: &ast::EnumDef) -> Self {\n         let name = enum_def.name().map(|n| n.as_name());\n         let variants = if let Some(evl) = enum_def.variant_list() {\n             evl.variants()\n@@ -57,6 +70,17 @@ impl EnumData {\n         };\n         EnumData { name, variants }\n     }\n+\n+    pub(crate) fn enum_data_query(\n+        db: &impl HirDatabase,\n+        def_id: DefId,\n+    ) -> Cancelable<Arc<EnumData>> {\n+        let def_loc = def_id.loc(db);\n+        assert!(def_loc.kind == DefKind::Enum);\n+        let syntax = db.file_item(def_loc.source_item_id);\n+        let enum_def = ast::EnumDef::cast(&syntax).expect(\"enum def should point to EnumDef node\");\n+        Ok(Arc::new(EnumData::new(enum_def)))\n+    }\n }\n \n impl VariantData {"}, {"sha": "bb4fb3d6637bfa59401522236fe17bc55b6ffa62", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5edcf313f6b265c626b75f92c11fe62385ab9556/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5edcf313f6b265c626b75f92c11fe62385ab9556/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=5edcf313f6b265c626b75f92c11fe62385ab9556", "patch": "@@ -38,12 +38,12 @@ pub trait HirDatabase: SyntaxDatabase\n \n     fn struct_data(def_id: DefId) -> Cancelable<Arc<StructData>> {\n         type StructDataQuery;\n-        use fn query_definitions::struct_data;\n+        use fn crate::adt::StructData::struct_data_query;\n     }\n \n     fn enum_data(def_id: DefId) -> Cancelable<Arc<EnumData>> {\n         type EnumDataQuery;\n-        use fn query_definitions::enum_data;\n+        use fn crate::adt::EnumData::enum_data_query;\n     }\n \n     fn infer(def_id: DefId) -> Cancelable<Arc<InferenceResult>> {"}, {"sha": "ab4e6e629f118f07765a8f0f33b3b8786076bfc8", "filename": "crates/ra_hir/src/query_definitions.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5edcf313f6b265c626b75f92c11fe62385ab9556/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5edcf313f6b265c626b75f92c11fe62385ab9556/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs?ref=5edcf313f6b265c626b75f92c11fe62385ab9556", "patch": "@@ -11,13 +11,12 @@ use ra_syntax::{\n use ra_db::{SourceRootId, Cancelable,};\n \n use crate::{\n-    SourceFileItems, SourceItemId, DefKind, DefId, HirFileId, ModuleSource,\n+    SourceFileItems, SourceItemId, DefId, HirFileId, ModuleSource,\n     MacroCallLoc,\n     db::HirDatabase,\n     function::FnScopes,\n     module_tree::ModuleId,\n     nameres::{InputModuleItems, ItemMap, Resolver},\n-    adt::{StructData, EnumData},\n };\n \n pub(super) fn fn_scopes(db: &impl HirDatabase, def_id: DefId) -> Cancelable<Arc<FnScopes>> {\n@@ -26,23 +25,6 @@ pub(super) fn fn_scopes(db: &impl HirDatabase, def_id: DefId) -> Cancelable<Arc<\n     Ok(Arc::new(res))\n }\n \n-pub(super) fn struct_data(db: &impl HirDatabase, def_id: DefId) -> Cancelable<Arc<StructData>> {\n-    let def_loc = def_id.loc(db);\n-    assert!(def_loc.kind == DefKind::Struct);\n-    let syntax = db.file_item(def_loc.source_item_id);\n-    let struct_def =\n-        ast::StructDef::cast(&syntax).expect(\"struct def should point to StructDef node\");\n-    Ok(Arc::new(StructData::new(struct_def)))\n-}\n-\n-pub(super) fn enum_data(db: &impl HirDatabase, def_id: DefId) -> Cancelable<Arc<EnumData>> {\n-    let def_loc = def_id.loc(db);\n-    assert!(def_loc.kind == DefKind::Enum);\n-    let syntax = db.file_item(def_loc.source_item_id);\n-    let enum_def = ast::EnumDef::cast(&syntax).expect(\"enum def should point to EnumDef node\");\n-    Ok(Arc::new(EnumData::new(enum_def)))\n-}\n-\n pub(super) fn file_items(db: &impl HirDatabase, file_id: HirFileId) -> Arc<SourceFileItems> {\n     let source_file = db.hir_source_file(file_id);\n     let res = SourceFileItems::new(file_id, &source_file);"}]}