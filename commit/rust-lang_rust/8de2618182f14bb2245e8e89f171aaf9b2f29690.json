{"sha": "8de2618182f14bb2245e8e89f171aaf9b2f29690", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkZTI2MTgxODJmMTRiYjIyNDVlOGU4OWYxNzFhYWY5YjJmMjk2OTA=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2014-06-17T22:06:26Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2014-06-17T22:15:24Z"}, "message": "Fix some violations of stronger guarantees for mutable borrows.\n\nSee 159e27aebb940926ccf1bad0b2b12087d36ad903", "tree": {"sha": "52c91850c5f9117d5defe552fd1b246443d55077", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52c91850c5f9117d5defe552fd1b246443d55077"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8de2618182f14bb2245e8e89f171aaf9b2f29690", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8de2618182f14bb2245e8e89f171aaf9b2f29690", "html_url": "https://github.com/rust-lang/rust/commit/8de2618182f14bb2245e8e89f171aaf9b2f29690", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8de2618182f14bb2245e8e89f171aaf9b2f29690/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "612bbaf7a07fe247e5e2d057cc4f10742918ead0", "url": "https://api.github.com/repos/rust-lang/rust/commits/612bbaf7a07fe247e5e2d057cc4f10742918ead0", "html_url": "https://github.com/rust-lang/rust/commit/612bbaf7a07fe247e5e2d057cc4f10742918ead0"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "9039f346edb522cf4180b850534cc8bb211f495e", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8de2618182f14bb2245e8e89f171aaf9b2f29690/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8de2618182f14bb2245e8e89f171aaf9b2f29690/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=8de2618182f14bb2245e8e89f171aaf9b2f29690", "patch": "@@ -906,8 +906,9 @@ impl<'a> StringReader<'a> {\n                     // Byte offsetting here is okay because the\n                     // character before position `start` are an\n                     // ascii single quote and ascii 'b'.\n+                    let last_pos = self_.last_pos;\n                     self_.fatal_span_verbose(\n-                        start - BytePos(2), self_.last_pos,\n+                        start - BytePos(2), last_pos,\n                         \"unterminated byte constant\".to_string());\n                 }\n                 self_.bump(); // advance curr past token\n@@ -920,7 +921,8 @@ impl<'a> StringReader<'a> {\n                 let mut value = Vec::new();\n                 while !self_.curr_is('\"') {\n                     if self_.is_eof() {\n-                        self_.fatal_span(start, self_.last_pos,\n+                        let last_pos = self_.last_pos;\n+                        self_.fatal_span(start, last_pos,\n                                          \"unterminated double quote byte string\");\n                     }\n \n@@ -944,20 +946,25 @@ impl<'a> StringReader<'a> {\n                 }\n \n                 if self_.is_eof() {\n-                    self_.fatal_span(start_bpos, self_.last_pos, \"unterminated raw string\");\n+                    let last_pos = self_.last_pos;\n+                    self_.fatal_span(start_bpos, last_pos, \"unterminated raw string\");\n                 } else if !self_.curr_is('\"') {\n-                    self_.fatal_span_char(start_bpos, self_.last_pos,\n+                    let last_pos = self_.last_pos;\n+                    let ch = self_.curr.unwrap();\n+                    self_.fatal_span_char(start_bpos, last_pos,\n                                     \"only `#` is allowed in raw string delimitation; \\\n                                      found illegal character\",\n-                                    self_.curr.unwrap());\n+                                    ch);\n                 }\n                 self_.bump();\n                 let content_start_bpos = self_.last_pos;\n                 let mut content_end_bpos;\n                 'outer: loop {\n                     match self_.curr {\n-                        None => self_.fatal_span(start_bpos, self_.last_pos,\n-                                                 \"unterminated raw string\"),\n+                        None => {\n+                            let last_pos = self_.last_pos;\n+                            self_.fatal_span(start_bpos, last_pos, \"unterminated raw string\")\n+                        },\n                         Some('\"') => {\n                             content_end_bpos = self_.last_pos;\n                             for _ in range(0, hash_count) {\n@@ -969,8 +976,9 @@ impl<'a> StringReader<'a> {\n                             break;\n                         },\n                         Some(c) => if c > '\\x7F' {\n-                            self_.err_span_char(self_.last_pos, self_.last_pos,\n-                                                \"raw byte string must be ASCII\", c);\n+                            let last_pos = self_.last_pos;\n+                            self_.err_span_char(\n+                                last_pos, last_pos, \"raw byte string must be ASCII\", c);\n                         }\n                     }\n                     self_.bump();"}]}