{"sha": "74edcb8bd1e457cbfbbd8e101652301824a67255", "node_id": "C_kwDOAAsO6NoAKDc0ZWRjYjhiZDFlNDU3Y2JmYmJkOGUxMDE2NTIzMDE4MjRhNjcyNTU", "commit": {"author": {"name": "Yuri Astrakhan", "email": "YuriAstrakhan@gmail.com", "date": "2022-03-30T05:39:38Z"}, "committer": {"name": "Yuri Astrakhan", "email": "YuriAstrakhan@gmail.com", "date": "2022-03-30T05:39:38Z"}, "message": "Spellchecking some comments\n\nThis PR attempts to clean up some minor spelling mistakes in comments", "tree": {"sha": "bf8d767c0b13ccbcd38361865cd10a7830e8ff25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf8d767c0b13ccbcd38361865cd10a7830e8ff25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74edcb8bd1e457cbfbbd8e101652301824a67255", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74edcb8bd1e457cbfbbd8e101652301824a67255", "html_url": "https://github.com/rust-lang/rust/commit/74edcb8bd1e457cbfbbd8e101652301824a67255", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74edcb8bd1e457cbfbbd8e101652301824a67255/comments", "author": {"login": "nyurik", "id": 1641515, "node_id": "MDQ6VXNlcjE2NDE1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1641515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyurik", "html_url": "https://github.com/nyurik", "followers_url": "https://api.github.com/users/nyurik/followers", "following_url": "https://api.github.com/users/nyurik/following{/other_user}", "gists_url": "https://api.github.com/users/nyurik/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyurik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyurik/subscriptions", "organizations_url": "https://api.github.com/users/nyurik/orgs", "repos_url": "https://api.github.com/users/nyurik/repos", "events_url": "https://api.github.com/users/nyurik/events{/privacy}", "received_events_url": "https://api.github.com/users/nyurik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nyurik", "id": 1641515, "node_id": "MDQ6VXNlcjE2NDE1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1641515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyurik", "html_url": "https://github.com/nyurik", "followers_url": "https://api.github.com/users/nyurik/followers", "following_url": "https://api.github.com/users/nyurik/following{/other_user}", "gists_url": "https://api.github.com/users/nyurik/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyurik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyurik/subscriptions", "organizations_url": "https://api.github.com/users/nyurik/orgs", "repos_url": "https://api.github.com/users/nyurik/repos", "events_url": "https://api.github.com/users/nyurik/events{/privacy}", "received_events_url": "https://api.github.com/users/nyurik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3888aafe3a4a030341fc21f9ac731e1a3bb108f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3888aafe3a4a030341fc21f9ac731e1a3bb108f0", "html_url": "https://github.com/rust-lang/rust/commit/3888aafe3a4a030341fc21f9ac731e1a3bb108f0"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "fe23a26769663f3a2f61b1ccdf8a3d65ab975d70", "filename": "Readme.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74edcb8bd1e457cbfbbd8e101652301824a67255/Readme.md", "raw_url": "https://github.com/rust-lang/rust/raw/74edcb8bd1e457cbfbbd8e101652301824a67255/Readme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Readme.md?ref=74edcb8bd1e457cbfbbd8e101652301824a67255", "patch": "@@ -12,7 +12,7 @@ A secondary goal is to check if using the gcc backend will provide any run-time\n ## Building\n \n **This requires a patched libgccjit in order to work.\n-The patches in [this repostory](https://github.com/antoyo/libgccjit-patches) need to be applied.\n+The patches in [this repository](https://github.com/antoyo/libgccjit-patches) need to be applied.\n (Those patches should work when applied on master, but in case it doesn't work, they are known to work when applied on 079c23cfe079f203d5df83fea8e92a60c7d7e878.)\n You can also use my [fork of gcc](https://github.com/antoyo/gcc) which already includes these patches.**\n "}, {"sha": "3af0ba09e0bace078927a61793a067ab20f0674c", "filename": "example/arbitrary_self_types_pointers_and_wrappers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74edcb8bd1e457cbfbbd8e101652301824a67255/example%2Farbitrary_self_types_pointers_and_wrappers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74edcb8bd1e457cbfbbd8e101652301824a67255/example%2Farbitrary_self_types_pointers_and_wrappers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Farbitrary_self_types_pointers_and_wrappers.rs?ref=74edcb8bd1e457cbfbbd8e101652301824a67255", "patch": "@@ -37,7 +37,7 @@ impl<T: DispatchFromDyn<U>, U> DispatchFromDyn<Wrapper<U>> for Wrapper<T> {}\n \n trait Trait {\n     // This method isn't object-safe yet. Unsized by-value `self` is object-safe (but not callable\n-    // without unsized_locals), but wrappers arond `Self` currently are not.\n+    // without unsized_locals), but wrappers around `Self` currently are not.\n     // FIXME (mikeyhew) uncomment this when unsized rvalues object-safety is implemented\n     // fn wrapper(self: Wrapper<Self>) -> i32;\n     fn ptr_wrapper(self: Ptr<Wrapper<Self>>) -> i32;"}, {"sha": "21c7d420b204d93f3d32a912d108318a53bd0002", "filename": "src/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74edcb8bd1e457cbfbbd8e101652301824a67255/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74edcb8bd1e457cbfbbd8e101652301824a67255/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=74edcb8bd1e457cbfbbd8e101652301824a67255", "patch": "@@ -508,7 +508,7 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n     }\n \n     fn exactsdiv(&mut self, a: RValue<'gcc>, b: RValue<'gcc>) -> RValue<'gcc> {\n-        // TODO(antoyo): posion if not exact.\n+        // TODO(antoyo): poison if not exact.\n         // FIXME(antoyo): rustc_codegen_ssa::mir::intrinsic uses different types for a and b but they\n         // should be the same.\n         let typ = a.get_type().to_signed(self);\n@@ -1252,7 +1252,7 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n     }\n \n     fn do_not_inline(&mut self, _llret: RValue<'gcc>) {\n-        // FIMXE(bjorn3): implement\n+        // FIXME(bjorn3): implement\n     }\n \n     fn set_span(&mut self, _span: Span) {}"}, {"sha": "edbe7122bddbbc9e46699a028c0174398486bf0e", "filename": "src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74edcb8bd1e457cbfbbd8e101652301824a67255/src%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74edcb8bd1e457cbfbbd8e101652301824a67255/src%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcontext.rs?ref=74edcb8bd1e457cbfbbd8e101652301824a67255", "patch": "@@ -110,7 +110,7 @@ pub struct CodegenCx<'gcc, 'tcx> {\n     /// NOTE: a hack is used because the rustc API is not suitable to libgccjit and as such,\n     /// `const_undef()` returns struct as pointer so that they can later be assigned a value.\n     /// As such, this set remembers which of these pointers were returned by this function so that\n-    /// they can be deferenced later.\n+    /// they can be dereferenced later.\n     /// FIXME(antoyo): fix the rustc API to avoid having this hack.\n     pub structs_as_pointer: RefCell<FxHashSet<RValue<'gcc>>>,\n }"}, {"sha": "68a05d95ef7346bb69d208bf6ac03b712292fc19", "filename": "src/intrinsic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74edcb8bd1e457cbfbbd8e101652301824a67255/src%2Fintrinsic%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74edcb8bd1e457cbfbbd8e101652301824a67255/src%2Fintrinsic%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fmod.rs?ref=74edcb8bd1e457cbfbbd8e101652301824a67255", "patch": "@@ -340,7 +340,7 @@ impl<'a, 'gcc, 'tcx> IntrinsicCallMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n     }\n \n     fn assume(&mut self, value: Self::Value) {\n-        // TODO(antoyo): switch to asumme when it exists.\n+        // TODO(antoyo): switch to assume when it exists.\n         // Or use something like this:\n         // #define __assume(cond) do { if (!(cond)) __builtin_unreachable(); } while (0)\n         self.expect(value, true);"}]}