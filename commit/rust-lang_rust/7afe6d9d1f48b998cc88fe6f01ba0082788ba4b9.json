{"sha": "7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZmU2ZDlkMWY0OGI5OThjYzg4ZmU2ZjAxYmEwMDgyNzg4YmE0Yjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-03T18:42:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-03T18:42:43Z"}, "message": "Auto merge of #66997 - Centril:rollup-uraqpgu, r=Centril\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #66750 (Update the `wasi` crate for `wasm32-wasi`)\n - #66878 (Move Sessions into (new) librustc_session)\n - #66903 (parse_enum_item -> parse_enum_variant)\n - #66951 (miri: add throw_machine_stop macro)\n - #66957 (Change Linker for x86_64-fortanix-unknown-sgx target to rust-lld)\n - #66960 ([const-prop] Fix ICE calculating enum discriminant)\n - #66973 (Update the minimum external LLVM to 7)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "3aee9f9527060f3c317417af80db7c0473cea5c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3aee9f9527060f3c317417af80db7c0473cea5c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "html_url": "https://github.com/rust-lang/rust/commit/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f577b0ef6e637ab7a6095cdfe0b51fa3faf97050", "url": "https://api.github.com/repos/rust-lang/rust/commits/f577b0ef6e637ab7a6095cdfe0b51fa3faf97050", "html_url": "https://github.com/rust-lang/rust/commit/f577b0ef6e637ab7a6095cdfe0b51fa3faf97050"}, {"sha": "8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d", "html_url": "https://github.com/rust-lang/rust/commit/8dcb5326dd3f5a67d6cd9b0e1b1cb12424a69f2d"}], "stats": {"total": 1950, "additions": 966, "deletions": 984}, "files": [{"sha": "5e83513af5b377171d1e9cb282c03720b4478cf6", "filename": "Cargo.lock", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -1294,7 +1294,7 @@ checksum = \"473a1265acc8ff1e808cd0a1af8cee3c2ee5200916058a2ca113c29f2d903571\"\n dependencies = [\n  \"cfg-if\",\n  \"libc\",\n- \"wasi\",\n+ \"wasi 0.7.0\",\n ]\n \n [[package]]\n@@ -3205,6 +3205,7 @@ dependencies = [\n  \"rustc_fs_util\",\n  \"rustc_index\",\n  \"rustc_macros\",\n+ \"rustc_session\",\n  \"rustc_target\",\n  \"scoped-tls\",\n  \"serialize\",\n@@ -3518,6 +3519,7 @@ dependencies = [\n  \"rustc_fs_util\",\n  \"rustc_incremental\",\n  \"rustc_index\",\n+ \"rustc_session\",\n  \"rustc_target\",\n  \"serialize\",\n  \"syntax\",\n@@ -3634,6 +3636,7 @@ dependencies = [\n  \"rustc\",\n  \"rustc_data_structures\",\n  \"rustc_fs_util\",\n+ \"rustc_session\",\n  \"serialize\",\n  \"syntax\",\n  \"syntax_pos\",\n@@ -3697,6 +3700,7 @@ dependencies = [\n  \"rustc_error_codes\",\n  \"rustc_feature\",\n  \"rustc_index\",\n+ \"rustc_session\",\n  \"rustc_target\",\n  \"syntax\",\n  \"syntax_pos\",\n@@ -3884,6 +3888,22 @@ dependencies = [\n  \"syntax_pos\",\n ]\n \n+[[package]]\n+name = \"rustc_session\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"log\",\n+ \"num_cpus\",\n+ \"rustc_data_structures\",\n+ \"rustc_errors\",\n+ \"rustc_feature\",\n+ \"rustc_fs_util\",\n+ \"rustc_index\",\n+ \"rustc_target\",\n+ \"serialize\",\n+ \"syntax_pos\",\n+]\n+\n [[package]]\n name = \"rustc_target\"\n version = \"0.0.0\"\n@@ -4301,7 +4321,7 @@ dependencies = [\n  \"rustc_msan\",\n  \"rustc_tsan\",\n  \"unwind\",\n- \"wasi\",\n+ \"wasi 0.9.0+wasi-snapshot-preview1\",\n ]\n \n [[package]]\n@@ -4463,6 +4483,7 @@ dependencies = [\n  \"rustc_index\",\n  \"rustc_lexer\",\n  \"rustc_macros\",\n+ \"rustc_session\",\n  \"scoped-tls\",\n  \"serialize\",\n  \"smallvec 1.0.0\",\n@@ -5172,6 +5193,12 @@ name = \"wasi\"\n version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"b89c3ce4ce14bdc6fb6beaf9ec7928ca331de5df7e5ea278375642a2f478570d\"\n+\n+[[package]]\n+name = \"wasi\"\n+version = \"0.9.0+wasi-snapshot-preview1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519\"\n dependencies = [\n  \"compiler_builtins\",\n  \"rustc-std-workspace-alloc\","}, {"sha": "be13b9aa2eb49cde97ca8cc50c24bf5be67f9415", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -294,11 +294,11 @@ fn check_llvm_version(builder: &Builder<'_>, llvm_config: &Path) {\n     let mut parts = version.split('.').take(2)\n         .filter_map(|s| s.parse::<u32>().ok());\n     if let (Some(major), Some(_minor)) = (parts.next(), parts.next()) {\n-        if major >= 6 {\n+        if major >= 7 {\n             return\n         }\n     }\n-    panic!(\"\\n\\nbad LLVM version: {}, need >=6.0\\n\\n\", version)\n+    panic!(\"\\n\\nbad LLVM version: {}, need >=7.0\\n\\n\", version)\n }\n \n fn configure_cmake(builder: &Builder<'_>,"}, {"sha": "70d6bad297dce4c890ee98a1c7b611a4dd831d32", "filename": "src/ci/azure-pipelines/auto.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Fci%2Fazure-pipelines%2Fauto.yml", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Fci%2Fazure-pipelines%2Fauto.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fauto.yml?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -18,7 +18,7 @@ jobs:\n   - template: steps/run.yml\n   strategy:\n     matrix:\n-      x86_64-gnu-llvm-6.0:\n+      x86_64-gnu-llvm-7:\n         RUST_BACKTRACE: 1\n       dist-x86_64-linux: {}\n       dist-x86_64-linux-alt:"}, {"sha": "1f0be53677de22b37b3230de04daed686be09fec", "filename": "src/ci/azure-pipelines/pr.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Fci%2Fazure-pipelines%2Fpr.yml", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Fci%2Fazure-pipelines%2Fpr.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fpr.yml?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -18,7 +18,7 @@ jobs:\n     - template: steps/run.yml\n   strategy:\n     matrix:\n-      x86_64-gnu-llvm-6.0: {}\n+      x86_64-gnu-llvm-7: {}\n       mingw-check: {}\n       x86_64-gnu-tools:\n         CI_ONLY_WHEN_SUBMODULES_CHANGED: 1"}, {"sha": "a1c9c13fc471a463879385bcc03ab5686ab9c740", "filename": "src/ci/docker/x86_64-gnu-llvm-7/Dockerfile", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-7%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-7%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-7%2FDockerfile?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -1,4 +1,4 @@\n-FROM ubuntu:16.04\n+FROM ubuntu:18.04\n \n RUN apt-get update && apt-get install -y --no-install-recommends \\\n   g++ \\\n@@ -11,7 +11,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   cmake \\\n   sudo \\\n   gdb \\\n-  llvm-6.0-tools \\\n+  llvm-7-tools \\\n   libedit-dev \\\n   libssl-dev \\\n   pkg-config \\\n@@ -24,7 +24,7 @@ RUN sh /scripts/sccache.sh\n # using llvm-link-shared due to libffi issues -- see #34486\n ENV RUST_CONFIGURE_ARGS \\\n       --build=x86_64-unknown-linux-gnu \\\n-      --llvm-root=/usr/lib/llvm-6.0 \\\n+      --llvm-root=/usr/lib/llvm-7 \\\n       --enable-llvm-link-shared\n ENV SCRIPT python2.7 ../x.py test src/tools/tidy && python2.7 ../x.py test\n ", "previous_filename": "src/ci/docker/x86_64-gnu-llvm-6.0/Dockerfile"}, {"sha": "f8ad6f8f30edb00eb26bf2b94b64e1e37925c636", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -39,3 +39,4 @@ rustc_fs_util = { path = \"../librustc_fs_util\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n measureme = \"0.4\"\n rustc_error_codes = { path = \"../librustc_error_codes\" }\n+rustc_session = { path = \"../librustc_session\" }"}, {"sha": "a1321d50f28bb99bab97983b352781e41b0a916a", "filename": "src/librustc/dep_graph/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fmod.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -5,7 +5,6 @@ mod prev;\n mod query;\n mod safe;\n mod serialized;\n-pub mod cgu_reuse_tracker;\n \n pub use self::dep_node::{DepNode, DepKind, DepConstructor, WorkProductId, RecoverKey, label_strs};\n pub use self::graph::{DepGraph, WorkProduct, DepNodeIndex, DepNodeColor, TaskDeps, hash_result};"}, {"sha": "e708c5ab6e77d0da21e6e75270a1c4dda3d19bec", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -64,7 +64,6 @@\n #![recursion_limit=\"512\"]\n \n #[macro_use] extern crate bitflags;\n-extern crate getopts;\n #[macro_use] extern crate scoped_tls;\n #[cfg(windows)]\n extern crate libc;\n@@ -74,10 +73,6 @@ extern crate libc;\n #[macro_use] extern crate syntax;\n #[macro_use] extern crate smallvec;\n \n-// Use the test crate here so we depend on getopts through it. This allow tools to link to both\n-// librustc_driver and libtest.\n-extern crate test as _;\n-\n #[cfg(test)]\n mod tests;\n \n@@ -113,7 +108,7 @@ pub mod middle {\n }\n \n pub mod mir;\n-pub mod session;\n+pub use rustc_session as session;\n pub mod traits;\n pub mod ty;\n "}, {"sha": "1aba73ec73d00fb7873b07294ba3ab46d6e15106", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 27, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -12,6 +12,8 @@ use syntax::ast;\n use syntax::edition::Edition;\n use syntax::source_map::Span;\n use syntax::symbol::Symbol;\n+use syntax::early_buffered_lints::{ILL_FORMED_ATTRIBUTE_INPUT, META_VARIABLE_MISUSE};\n+use rustc_session::declare_lint;\n \n declare_lint! {\n     pub EXCEEDING_BITSHIFTS,\n@@ -404,31 +406,6 @@ declare_lint! {\n     };\n }\n \n-/// Some lints that are buffered from `libsyntax`. See `syntax::early_buffered_lints`.\n-pub mod parser {\n-    declare_lint! {\n-        pub ILL_FORMED_ATTRIBUTE_INPUT,\n-        Deny,\n-        \"ill-formed attribute inputs that were previously accepted and used in practice\",\n-        @future_incompatible = super::FutureIncompatibleInfo {\n-            reference: \"issue #57571 <https://github.com/rust-lang/rust/issues/57571>\",\n-            edition: None,\n-        };\n-    }\n-\n-    declare_lint! {\n-        pub META_VARIABLE_MISUSE,\n-        Allow,\n-        \"possible meta-variable misuse at macro definition\"\n-    }\n-\n-    declare_lint! {\n-        pub INCOMPLETE_INCLUDE,\n-        Deny,\n-        \"trailing content in included file\"\n-    }\n-}\n-\n declare_lint! {\n     pub DEPRECATED_IN_FUTURE,\n     Allow,\n@@ -520,8 +497,8 @@ declare_lint_pass! {\n         PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,\n         MACRO_USE_EXTERN_CRATE,\n         MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS,\n-        parser::ILL_FORMED_ATTRIBUTE_INPUT,\n-        parser::META_VARIABLE_MISUSE,\n+        ILL_FORMED_ATTRIBUTE_INPUT,\n+        META_VARIABLE_MISUSE,\n         DEPRECATED_IN_FUTURE,\n         AMBIGUOUS_ASSOCIATED_ITEMS,\n         MUTABLE_BORROW_RESERVATION_CONFLICT,"}, {"sha": "10c0c63995ca276c7f3e9f2ae15ec185e3d24d65", "filename": "src/librustc/lint/internal.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc%2Flint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc%2Flint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Finternal.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -9,6 +9,7 @@ use errors::Applicability;\n use rustc_data_structures::fx::FxHashMap;\n use syntax::ast::{Ident, Item, ItemKind};\n use syntax::symbol::{sym, Symbol};\n+use rustc_session::declare_tool_lint;\n \n declare_tool_lint! {\n     pub rustc::DEFAULT_HASH_TYPES,"}, {"sha": "f29d1a3789aea493275d1e91a7ecde847b705fb7", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -8,7 +8,7 @@ use crate::lint::{self, Lint, LintId, Level, LintSource};\n use crate::session::Session;\n use crate::util::nodemap::FxHashMap;\n use errors::{Applicability, DiagnosticBuilder};\n-use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey, StableHasher};\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use syntax::ast;\n use syntax::attr;\n use syntax::feature_gate;\n@@ -93,7 +93,7 @@ impl LintLevelSets {\n \n         // If `level` is none then we actually assume the default level for this\n         // lint.\n-        let mut level = level.unwrap_or_else(|| lint.default_level(sess));\n+        let mut level = level.unwrap_or_else(|| lint.default_level(sess.edition()));\n \n         // If we're about to issue a warning, check at the last minute for any\n         // directives against the warnings \"lint\". If, for example, there's an\n@@ -566,19 +566,3 @@ impl<'a> HashStable<StableHashingContext<'a>> for LintLevelMap {\n         })\n     }\n }\n-\n-impl<HCX> HashStable<HCX> for LintId {\n-    #[inline]\n-    fn hash_stable(&self, hcx: &mut HCX, hasher: &mut StableHasher) {\n-        self.lint_name_raw().hash_stable(hcx, hasher);\n-    }\n-}\n-\n-impl<HCX> ToStableHashKey<HCX> for LintId {\n-    type KeyType = &'static str;\n-\n-    #[inline]\n-    fn to_stable_hash_key(&self, _: &HCX) -> &'static str {\n-        self.lint_name_raw()\n-    }\n-}"}, {"sha": "a8d886866795eef22f1760bc105d0d53fdaa0eb5", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 2, "deletions": 230, "changes": 232, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -27,170 +27,22 @@ use crate::hir::def_id::{CrateNum, LOCAL_CRATE};\n use crate::hir::intravisit;\n use crate::hir;\n use crate::lint::builtin::BuiltinLintDiagnostics;\n-use crate::lint::builtin::parser::{ILL_FORMED_ATTRIBUTE_INPUT, META_VARIABLE_MISUSE};\n-use crate::lint::builtin::parser::INCOMPLETE_INCLUDE;\n use crate::session::{Session, DiagnosticMessageId};\n use crate::ty::TyCtxt;\n use crate::ty::query::Providers;\n use crate::util::nodemap::NodeMap;\n use errors::{DiagnosticBuilder, DiagnosticId};\n-use std::{hash, ptr};\n use syntax::ast;\n use syntax::source_map::{MultiSpan, ExpnKind, DesugaringKind};\n-use syntax::early_buffered_lints::BufferedEarlyLintId;\n-use syntax::edition::Edition;\n-use syntax::symbol::{Symbol, sym};\n+use syntax::symbol::Symbol;\n use syntax_pos::hygiene::MacroKind;\n use syntax_pos::Span;\n \n pub use crate::lint::context::{LateContext, EarlyContext, LintContext, LintStore,\n                         check_crate, check_ast_crate, late_lint_mod, CheckLintNameResult,\n                         BufferedEarlyLint,};\n \n-/// Specification of a single lint.\n-#[derive(Copy, Clone, Debug)]\n-pub struct Lint {\n-    /// A string identifier for the lint.\n-    ///\n-    /// This identifies the lint in attributes and in command-line arguments.\n-    /// In those contexts it is always lowercase, but this field is compared\n-    /// in a way which is case-insensitive for ASCII characters. This allows\n-    /// `declare_lint!()` invocations to follow the convention of upper-case\n-    /// statics without repeating the name.\n-    ///\n-    /// The name is written with underscores, e.g., \"unused_imports\".\n-    /// On the command line, underscores become dashes.\n-    pub name: &'static str,\n-\n-    /// Default level for the lint.\n-    pub default_level: Level,\n-\n-    /// Description of the lint or the issue it detects.\n-    ///\n-    /// e.g., \"imports that are never used\"\n-    pub desc: &'static str,\n-\n-    /// Starting at the given edition, default to the given lint level. If this is `None`, then use\n-    /// `default_level`.\n-    pub edition_lint_opts: Option<(Edition, Level)>,\n-\n-    /// `true` if this lint is reported even inside expansions of external macros.\n-    pub report_in_external_macro: bool,\n-\n-    pub future_incompatible: Option<FutureIncompatibleInfo>,\n-\n-    pub is_plugin: bool,\n-}\n-\n-/// Extra information for a future incompatibility lint.\n-#[derive(Copy, Clone, Debug)]\n-pub struct FutureIncompatibleInfo {\n-    /// e.g., a URL for an issue/PR/RFC or error code\n-    pub reference: &'static str,\n-    /// If this is an edition fixing lint, the edition in which\n-    /// this lint becomes obsolete\n-    pub edition: Option<Edition>,\n-}\n-\n-impl Lint {\n-    pub const fn default_fields_for_macro() -> Self {\n-        Lint {\n-            name: \"\",\n-            default_level: Level::Forbid,\n-            desc: \"\",\n-            edition_lint_opts: None,\n-            is_plugin: false,\n-            report_in_external_macro: false,\n-            future_incompatible: None,\n-        }\n-    }\n-\n-    /// Returns the `rust::lint::Lint` for a `syntax::early_buffered_lints::BufferedEarlyLintId`.\n-    pub fn from_parser_lint_id(lint_id: BufferedEarlyLintId) -> &'static Self {\n-        match lint_id {\n-            BufferedEarlyLintId::IllFormedAttributeInput => ILL_FORMED_ATTRIBUTE_INPUT,\n-            BufferedEarlyLintId::MetaVariableMisuse => META_VARIABLE_MISUSE,\n-            BufferedEarlyLintId::IncompleteInclude => INCOMPLETE_INCLUDE,\n-        }\n-    }\n-\n-    /// Gets the lint's name, with ASCII letters converted to lowercase.\n-    pub fn name_lower(&self) -> String {\n-        self.name.to_ascii_lowercase()\n-    }\n-\n-    pub fn default_level(&self, session: &Session) -> Level {\n-        self.edition_lint_opts\n-            .filter(|(e, _)| *e <= session.edition())\n-            .map(|(_, l)| l)\n-            .unwrap_or(self.default_level)\n-    }\n-}\n-\n-/// Declares a static item of type `&'static Lint`.\n-#[macro_export]\n-macro_rules! declare_lint {\n-    ($vis: vis $NAME: ident, $Level: ident, $desc: expr) => (\n-        declare_lint!(\n-            $vis $NAME, $Level, $desc,\n-        );\n-    );\n-    ($vis: vis $NAME: ident, $Level: ident, $desc: expr,\n-     $(@future_incompatible = $fi:expr;)? $($v:ident),*) => (\n-        $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n-            name: stringify!($NAME),\n-            default_level: $crate::lint::$Level,\n-            desc: $desc,\n-            edition_lint_opts: None,\n-            is_plugin: false,\n-            $($v: true,)*\n-            $(future_incompatible: Some($fi),)*\n-            ..$crate::lint::Lint::default_fields_for_macro()\n-        };\n-    );\n-    ($vis: vis $NAME: ident, $Level: ident, $desc: expr,\n-     $lint_edition: expr => $edition_level: ident\n-    ) => (\n-        $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n-            name: stringify!($NAME),\n-            default_level: $crate::lint::$Level,\n-            desc: $desc,\n-            edition_lint_opts: Some(($lint_edition, $crate::lint::Level::$edition_level)),\n-            report_in_external_macro: false,\n-            is_plugin: false,\n-        };\n-    );\n-}\n-\n-#[macro_export]\n-macro_rules! declare_tool_lint {\n-    (\n-        $(#[$attr:meta])* $vis:vis $tool:ident ::$NAME:ident, $Level: ident, $desc: expr\n-    ) => (\n-        declare_tool_lint!{$(#[$attr])* $vis $tool::$NAME, $Level, $desc, false}\n-    );\n-    (\n-        $(#[$attr:meta])* $vis:vis $tool:ident ::$NAME:ident, $Level:ident, $desc:expr,\n-        report_in_external_macro: $rep:expr\n-    ) => (\n-         declare_tool_lint!{$(#[$attr])* $vis $tool::$NAME, $Level, $desc, $rep}\n-    );\n-    (\n-        $(#[$attr:meta])* $vis:vis $tool:ident ::$NAME:ident, $Level:ident, $desc:expr,\n-        $external:expr\n-    ) => (\n-        $(#[$attr])*\n-        $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n-            name: &concat!(stringify!($tool), \"::\", stringify!($NAME)),\n-            default_level: $crate::lint::$Level,\n-            desc: $desc,\n-            edition_lint_opts: None,\n-            report_in_external_macro: $external,\n-            future_incompatible: None,\n-            is_plugin: true,\n-        };\n-    );\n-}\n+pub use rustc_session::lint::{Lint, LintId, Level, FutureIncompatibleInfo};\n \n /// Declares a static `LintArray` and return it as an expression.\n #[macro_export]\n@@ -502,86 +354,6 @@ pub type EarlyLintPassObject = Box<dyn EarlyLintPass + sync::Send + sync::Sync +\n pub type LateLintPassObject = Box<dyn for<'a, 'tcx> LateLintPass<'a, 'tcx> + sync::Send\n                                                                            + sync::Sync + 'static>;\n \n-/// Identifies a lint known to the compiler.\n-#[derive(Clone, Copy, Debug)]\n-pub struct LintId {\n-    // Identity is based on pointer equality of this field.\n-    lint: &'static Lint,\n-}\n-\n-impl PartialEq for LintId {\n-    fn eq(&self, other: &LintId) -> bool {\n-        ptr::eq(self.lint, other.lint)\n-    }\n-}\n-\n-impl Eq for LintId { }\n-\n-impl hash::Hash for LintId {\n-    fn hash<H: hash::Hasher>(&self, state: &mut H) {\n-        let ptr = self.lint as *const Lint;\n-        ptr.hash(state);\n-    }\n-}\n-\n-impl LintId {\n-    /// Gets the `LintId` for a `Lint`.\n-    pub fn of(lint: &'static Lint) -> LintId {\n-        LintId {\n-            lint,\n-        }\n-    }\n-\n-    pub fn lint_name_raw(&self) -> &'static str {\n-        self.lint.name\n-    }\n-\n-    /// Gets the name of the lint.\n-    pub fn to_string(&self) -> String {\n-        self.lint.name_lower()\n-    }\n-}\n-\n-/// Setting for how to handle a lint.\n-#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash, HashStable)]\n-pub enum Level {\n-    Allow, Warn, Deny, Forbid,\n-}\n-\n-impl Level {\n-    /// Converts a level to a lower-case string.\n-    pub fn as_str(self) -> &'static str {\n-        match self {\n-            Allow => \"allow\",\n-            Warn => \"warn\",\n-            Deny => \"deny\",\n-            Forbid => \"forbid\",\n-        }\n-    }\n-\n-    /// Converts a lower-case string to a level.\n-    pub fn from_str(x: &str) -> Option<Level> {\n-        match x {\n-            \"allow\" => Some(Allow),\n-            \"warn\" => Some(Warn),\n-            \"deny\" => Some(Deny),\n-            \"forbid\" => Some(Forbid),\n-            _ => None,\n-        }\n-    }\n-\n-    /// Converts a symbol to a level.\n-    pub fn from_symbol(x: Symbol) -> Option<Level> {\n-        match x {\n-            sym::allow => Some(Allow),\n-            sym::warn => Some(Warn),\n-            sym::deny => Some(Deny),\n-            sym::forbid => Some(Forbid),\n-            _ => None,\n-        }\n-    }\n-}\n-\n /// How a lint level was set.\n #[derive(Clone, Copy, PartialEq, Eq, HashStable)]\n pub enum LintSource {"}, {"sha": "324b01316fa4a63216b153ef005240e9e332cc24", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -20,6 +20,7 @@ use rustc_target::spec::Target;\n use rustc_data_structures::sync::{self, MetadataRef};\n use rustc_macros::HashStable;\n \n+pub use rustc_session::utils::NativeLibraryKind;\n pub use self::NativeLibraryKind::*;\n \n // lonely orphan structs and enums looking for a better home\n@@ -94,21 +95,6 @@ pub enum LinkagePreference {\n     RequireStatic,\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash,\n-         RustcEncodable, RustcDecodable, HashStable)]\n-pub enum NativeLibraryKind {\n-    /// native static library (.a archive)\n-    NativeStatic,\n-    /// native static library, which doesn't get bundled into .rlibs\n-    NativeStaticNobundle,\n-    /// macOS-specific\n-    NativeFramework,\n-    /// Windows dynamic library without import library.\n-    NativeRawDylib,\n-    /// default way to specify a dynamic library\n-    NativeUnknown,\n-}\n-\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub struct NativeLibrary {\n     pub kind: NativeLibraryKind,"}, {"sha": "fff876752db55ab971a45126f726f5a81742f092", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -90,6 +90,13 @@ macro_rules! throw_exhaust {\n     ($($tt:tt)*) => { return Err(err_exhaust!($($tt)*).into()) };\n }\n \n+#[macro_export]\n+macro_rules! throw_machine_stop {\n+    ($($tt:tt)*) => {\n+        return Err($crate::mir::interpret::InterpError::MachineStop(Box::new($($tt)*)).into())\n+    };\n+}\n+\n mod error;\n mod value;\n mod allocation;"}, {"sha": "7515d30e469945fa9005812ef86fadddefd6fa71", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -88,15 +88,7 @@ pub fn print_time_passes_entry(do_it: bool, what: &str, dur: Duration) {\n              what);\n }\n \n-// Hack up our own formatting for the duration to make it easier for scripts\n-// to parse (always use the same number of decimal places and the same unit).\n-pub fn duration_to_secs_str(dur: Duration) -> String {\n-    const NANOS_PER_SEC: f64 = 1_000_000_000.0;\n-    let secs = dur.as_secs() as f64 +\n-               dur.subsec_nanos() as f64 / NANOS_PER_SEC;\n-\n-    format!(\"{:.3}\", secs)\n-}\n+pub use rustc_session::utils::duration_to_secs_str;\n \n pub fn to_readable_str(mut val: usize) -> String {\n     let mut groups = vec![];"}, {"sha": "858dd59b26148f57159d59e90ca865b623872122", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -10,7 +10,7 @@ use rustc_codegen_ssa::back::lto::{SerializedModule, LtoModuleCodegen, ThinShare\n use rustc_codegen_ssa::traits::*;\n use errors::{FatalError, Handler};\n use rustc::dep_graph::WorkProduct;\n-use rustc::dep_graph::cgu_reuse_tracker::CguReuse;\n+use rustc_session::cgu_reuse_tracker::CguReuse;\n use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::middle::exported_symbols::SymbolExportLevel;\n use rustc::session::config::{self, Lto};"}, {"sha": "48bbc1307238706250e340cb9095627a2e6d8080", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -167,7 +167,7 @@ pub fn target_machine_factory(sess: &Session, optlvl: config::OptLevel, find_fea\n     let emit_stack_size_section = sess.opts.debugging_opts.emit_stack_sizes;\n \n     let asm_comments = sess.asm_comments();\n-\n+    let relax_elf_relocations = sess.target.target.options.relax_elf_relocations;\n     Arc::new(move || {\n         let tm = unsafe {\n             llvm::LLVMRustCreateTargetMachine(\n@@ -183,6 +183,7 @@ pub fn target_machine_factory(sess: &Session, optlvl: config::OptLevel, find_fea\n                 singlethread,\n                 asm_comments,\n                 emit_stack_size_section,\n+                relax_elf_relocations,\n             )\n         };\n "}, {"sha": "c34bee802f7aa76fa18ba47bfbcaf352fdf834b5", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 26, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -442,32 +442,11 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                                 let is_left = name == \"rotate_left\";\n                                 let val = args[0].immediate();\n                                 let raw_shift = args[1].immediate();\n-                                if llvm_util::get_major_version() >= 7 {\n-                                    // rotate = funnel shift with first two args the same\n-                                    let llvm_name = &format!(\"llvm.fsh{}.i{}\",\n-                                                            if is_left { 'l' } else { 'r' }, width);\n-                                    let llfn = self.get_intrinsic(llvm_name);\n-                                    self.call(llfn, &[val, val, raw_shift], None)\n-                                } else {\n-                                    // rotate_left: (X << (S % BW)) | (X >> ((BW - S) % BW))\n-                                    // rotate_right: (X << ((BW - S) % BW)) | (X >> (S % BW))\n-                                    let width = self.const_uint(\n-                                        self.type_ix(width),\n-                                        width,\n-                                    );\n-                                    let shift = self.urem(raw_shift, width);\n-                                    let width_minus_raw_shift = self.sub(width, raw_shift);\n-                                    let inv_shift = self.urem(width_minus_raw_shift, width);\n-                                    let shift1 = self.shl(\n-                                        val,\n-                                        if is_left { shift } else { inv_shift },\n-                                    );\n-                                    let shift2 = self.lshr(\n-                                        val,\n-                                        if !is_left { shift } else { inv_shift },\n-                                    );\n-                                    self.or(shift1, shift2)\n-                                }\n+                                // rotate = funnel shift with first two args the same\n+                                let llvm_name = &format!(\"llvm.fsh{}.i{}\",\n+                                                        if is_left { 'l' } else { 'r' }, width);\n+                                let llfn = self.get_intrinsic(llvm_name);\n+                                self.call(llfn, &[val, val, raw_shift], None)\n                             },\n                             \"saturating_add\" | \"saturating_sub\" => {\n                                 let is_add = name == \"saturating_add\";"}, {"sha": "2ff5872370fd10ccbe467b1859b38a672abc89b7", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -43,6 +43,7 @@ extern crate smallvec;\n extern crate syntax;\n extern crate syntax_pos;\n extern crate rustc_errors as errors;\n+extern crate rustc_session;\n \n use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::back::write::{CodegenContext, ModuleConfig, FatLTOInput};"}, {"sha": "fd31e65c9d320fbe72f27cc7405c86b45f5ca5ae", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -1702,7 +1702,8 @@ extern \"C\" {\n                                        TrapUnreachable: bool,\n                                        Singlethread: bool,\n                                        AsmComments: bool,\n-                                       EmitStackSizeSection: bool)\n+                                       EmitStackSizeSection: bool,\n+                                       RelaxELFRelocations: bool)\n                                        -> Option<&'static mut TargetMachine>;\n     pub fn LLVMRustDisposeTargetMachine(T: &'static mut TargetMachine);\n     pub fn LLVMRustAddBuilderLibraryInfo(PMB: &'a PassManagerBuilder,"}, {"sha": "53d3c51b5f8c096c17e943c98a429176ff349582", "filename": "src/librustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2FCargo.toml?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -32,3 +32,4 @@ rustc_incremental = { path = \"../librustc_incremental\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }\n+rustc_session = { path = \"../librustc_session\" }"}, {"sha": "4278852123bea86f786d40a1fb10de5e4f2d38a8", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -398,7 +398,8 @@ impl<'a> Linker for GccLinker<'a> {\n \n     fn export_symbols(&mut self, tmpdir: &Path, crate_type: CrateType) {\n         // Symbol visibility in object files typically takes care of this.\n-        if crate_type == CrateType::Executable {\n+        if crate_type == CrateType::Executable &&\n+            self.sess.target.target.options.override_export_symbols.is_none() {\n             return;\n         }\n "}, {"sha": "283295cadfcc54bd6edc1fe0d0b95af48590d12b", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -10,7 +10,7 @@ use crate::traits::*;\n use rustc_incremental::{copy_cgu_workproducts_to_incr_comp_cache_dir,\n                         in_incr_comp_dir, in_incr_comp_dir_sess};\n use rustc::dep_graph::{WorkProduct, WorkProductId, WorkProductFileKind};\n-use rustc::dep_graph::cgu_reuse_tracker::CguReuseTracker;\n+use rustc_session::cgu_reuse_tracker::CguReuseTracker;\n use rustc::middle::cstore::EncodedMetadata;\n use rustc::session::config::{self, OutputFilenames, OutputType, Passes, Lto,\n                              Sanitizer, SwitchWithOptPath};\n@@ -1752,7 +1752,7 @@ impl<B: ExtraBackendMethods> OngoingCodegen<B> {\n             }\n         };\n \n-        sess.cgu_reuse_tracker.check_expected_reuse(sess);\n+        sess.cgu_reuse_tracker.check_expected_reuse(sess.diagnostic());\n \n         sess.abort_if_errors();\n "}, {"sha": "04e9159ff9116760e2c8623d081b4ae57b21b869", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -25,8 +25,8 @@ use crate::mir::operand::OperandValue;\n use crate::mir::place::PlaceRef;\n use crate::traits::*;\n \n-use rustc::dep_graph::cgu_reuse_tracker::CguReuse;\n use rustc::hir;\n+use rustc_session::cgu_reuse_tracker::CguReuse;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::middle::cstore::EncodedMetadata;\n use rustc::middle::lang_items::StartFnLangItem;"}, {"sha": "a811c88839d704e5eac6bbbcc2d4f1ed42f867c6", "filename": "src/librustc_data_structures/jobserver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_data_structures%2Fjobserver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_data_structures%2Fjobserver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fjobserver.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -1,4 +1,4 @@\n-use jobserver_crate::Client;\n+pub use jobserver_crate::Client;\n use lazy_static::lazy_static;\n \n lazy_static! {"}, {"sha": "05945504db237eb81fce0b3e8e0da55a337b7aad", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -828,7 +828,7 @@ Available lint options:\n \n     fn sort_lints(sess: &Session, mut lints: Vec<&'static Lint>) -> Vec<&'static Lint> {\n         // The sort doesn't case-fold but it's doubtful we care.\n-        lints.sort_by_cached_key(|x: &&Lint| (x.default_level(sess), x.name));\n+        lints.sort_by_cached_key(|x: &&Lint| (x.default_level(sess.edition()), x.name));\n         lints\n     }\n "}, {"sha": "8dac7263f4d2c1c2a8f7cb7d690d5773886915b5", "filename": "src/librustc_incremental/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_incremental%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_incremental%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2FCargo.toml?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -19,3 +19,4 @@ rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_fs_util = { path = \"../librustc_fs_util\" }\n+rustc_session = { path = \"../librustc_session\" }"}, {"sha": "c2e3fa8f28d2f6449aa4e2b9acebe35ec3356b1b", "filename": "src/librustc_incremental/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_module_sources.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -22,7 +22,7 @@\n //! was re-used.\n \n use rustc::hir::def_id::LOCAL_CRATE;\n-use rustc::dep_graph::cgu_reuse_tracker::*;\n+use rustc_session::cgu_reuse_tracker::*;\n use rustc::mir::mono::CodegenUnitNameBuilder;\n use rustc::ty::TyCtxt;\n use std::collections::BTreeSet;"}, {"sha": "235184382c5cc18873e5c09f72e86b5cff6bdcc2", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -439,8 +439,7 @@ fn configure_and_expand_inner<'a>(\n     sess.parse_sess.buffered_lints.with_lock(|buffered_lints| {\n         info!(\"{} parse sess buffered_lints\", buffered_lints.len());\n         for BufferedEarlyLint{id, span, msg, lint_id} in buffered_lints.drain(..) {\n-            let lint = lint::Lint::from_parser_lint_id(lint_id);\n-            resolver.lint_buffer().buffer_lint(lint, id, span, &msg);\n+            resolver.lint_buffer().buffer_lint(lint_id, id, span, &msg);\n         }\n     });\n "}, {"sha": "e834b87896ddf8fcb010634d2198e48e1a94a2cb", "filename": "src/librustc_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2FCargo.toml?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -18,3 +18,4 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_feature = { path = \"../librustc_feature\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_error_codes = { path = \"../librustc_error_codes\" }\n+rustc_session = { path = \"../librustc_session\" }"}, {"sha": "e60c025c3ef8b2f5671865f3672c53001e95b415", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -21,6 +21,8 @@\n \n #[macro_use]\n extern crate rustc;\n+#[macro_use]\n+extern crate rustc_session;\n \n mod array_into_iter;\n mod nonstandard_style;"}, {"sha": "902472d18beae6e0a16acfdb9a65a7273d7aeafb", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -1065,23 +1065,26 @@ where\n         variant_index: VariantIdx,\n         dest: PlaceTy<'tcx, M::PointerTag>,\n     ) -> InterpResult<'tcx> {\n-        let variant_scalar = Scalar::from_u32(variant_index.as_u32()).into();\n+\n+        // Layout computation excludes uninhabited variants from consideration\n+        // therefore there's no way to represent those variants in the given layout.\n+        if dest.layout.for_variant(self, variant_index).abi.is_uninhabited() {\n+            throw_ub!(Unreachable);\n+        }\n \n         match dest.layout.variants {\n             layout::Variants::Single { index } => {\n-                if index != variant_index {\n-                    throw_ub!(InvalidDiscriminant(variant_scalar));\n-                }\n+                assert_eq!(index, variant_index);\n             }\n             layout::Variants::Multiple {\n                 discr_kind: layout::DiscriminantKind::Tag,\n                 discr: ref discr_layout,\n                 discr_index,\n                 ..\n             } => {\n-                if !dest.layout.ty.variant_range(*self.tcx).unwrap().contains(&variant_index) {\n-                    throw_ub!(InvalidDiscriminant(variant_scalar));\n-                }\n+                // No need to validate that the discriminant here because the\n+                // `TyLayout::for_variant()` call earlier already checks the variant is valid.\n+\n                 let discr_val =\n                     dest.layout.ty.discriminant_for_variant(*self.tcx, variant_index).unwrap().val;\n \n@@ -1104,9 +1107,9 @@ where\n                 discr_index,\n                 ..\n             } => {\n-                if !variant_index.as_usize() < dest.layout.ty.ty_adt_def().unwrap().variants.len() {\n-                    throw_ub!(InvalidDiscriminant(variant_scalar));\n-                }\n+                // No need to validate that the discriminant here because the\n+                // `TyLayout::for_variant()` call earlier already checks the variant is valid.\n+\n                 if variant_index != dataful_variant {\n                     let variants_start = niche_variants.start().as_u32();\n                     let variant_index_relative = variant_index.as_u32()"}, {"sha": "66a135274213eb78e8e03c0c8d6de0f18ba80a3e", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -1325,7 +1325,7 @@ impl<'a> Parser<'a> {\n \n         let (variants, _) = self.parse_delim_comma_seq(\n             token::Brace,\n-            |p| p.parse_enum_item(),\n+            |p| p.parse_enum_variant(),\n         ).map_err(|e| {\n             self.recover_stmt();\n             e\n@@ -1337,7 +1337,7 @@ impl<'a> Parser<'a> {\n         Ok((id, ItemKind::Enum(enum_definition, generics), None))\n     }\n \n-    fn parse_enum_item(&mut self) -> PResult<'a, Option<Variant>> {\n+    fn parse_enum_variant(&mut self) -> PResult<'a, Option<Variant>> {\n         let variant_attrs = self.parse_outer_attributes()?;\n         let vlo = self.token.span;\n "}, {"sha": "8601add3f6f9654d68b4591a640ff54794b7e963", "filename": "src/librustc_parse/validate_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_parse%2Fvalidate_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_parse%2Fvalidate_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fvalidate_attr.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -4,7 +4,7 @@ use errors::{PResult, Applicability};\n use rustc_feature::{AttributeTemplate, BUILTIN_ATTRIBUTE_MAP};\n use syntax::ast::{self, Attribute, AttrKind, Ident, MacArgs, MetaItem, MetaItemKind};\n use syntax::attr::mk_name_value_item_str;\n-use syntax::early_buffered_lints::BufferedEarlyLintId;\n+use syntax::early_buffered_lints::ILL_FORMED_ATTRIBUTE_INPUT;\n use syntax::sess::ParseSess;\n use syntax_pos::{Symbol, sym};\n \n@@ -93,7 +93,7 @@ pub fn check_builtin_attribute(\n             }\n             if should_warn(name) {\n                 sess.buffer_lint(\n-                    BufferedEarlyLintId::IllFormedAttributeInput,\n+                    &ILL_FORMED_ATTRIBUTE_INPUT,\n                     meta.span,\n                     ast::CRATE_NODE_ID,\n                     &msg,"}, {"sha": "dbbb4b92dea3559d6a020b447afef450790365bf", "filename": "src/librustc_session/Cargo.toml", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_session%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_session%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2FCargo.toml?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -0,0 +1,21 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+name = \"rustc_session\"\n+version = \"0.0.0\"\n+edition = \"2018\"\n+\n+[lib]\n+name = \"rustc_session\"\n+path = \"lib.rs\"\n+\n+[dependencies]\n+log = \"0.4\"\n+rustc_errors = { path = \"../librustc_errors\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n+rustc_target = { path = \"../librustc_target\" }\n+rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n+rustc_data_structures = { path = \"../librustc_data_structures\" }\n+syntax_pos = { path = \"../libsyntax_pos\" }\n+rustc_index = { path = \"../librustc_index\" }\n+rustc_fs_util = { path = \"../librustc_fs_util\" }\n+num_cpus = \"1.0\""}, {"sha": "193cf01dc74a9e9b36d52f65c5638916cebc5cae", "filename": "src/librustc_session/cgu_reuse_tracker.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_session%2Fcgu_reuse_tracker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_session%2Fcgu_reuse_tracker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fcgu_reuse_tracker.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -2,10 +2,10 @@\n //! compilation. This is used for incremental compilation tests and debug\n //! output.\n \n-use crate::session::Session;\n use rustc_data_structures::fx::FxHashMap;\n use std::sync::{Arc, Mutex};\n use syntax_pos::Span;\n+use log::debug;\n \n #[derive(Copy, Clone, Debug, PartialEq, PartialOrd)]\n pub enum CguReuse {\n@@ -94,7 +94,7 @@ impl CguReuseTracker {\n         }\n     }\n \n-    pub fn check_expected_reuse(&self, sess: &Session) {\n+    pub fn check_expected_reuse(&self, diag: &rustc_errors::Handler) {\n         if let Some(ref data) = self.data {\n             let data = data.lock().unwrap();\n \n@@ -120,14 +120,14 @@ impl CguReuseTracker {\n                                           actual_reuse,\n                                           at_least,\n                                           expected_reuse);\n-                        sess.span_err(error_span.0, &msg);\n+                        diag.span_err(error_span.0, &msg);\n                     }\n                 } else {\n                     let msg = format!(\"CGU-reuse for `{}` (mangled: `{}`) was \\\n                                        not recorded\",\n                                        cgu_user_name,\n                                        cgu_name);\n-                    sess.span_fatal(error_span.0, &msg);\n+                    diag.span_fatal(error_span.0, &msg).raise();\n                 }\n             }\n         }", "previous_filename": "src/librustc/dep_graph/cgu_reuse_tracker.rs"}, {"sha": "5baf0c5948f28a5481a25ee1111f52494d9c7349", "filename": "src/librustc_session/code_stats.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_session%2Fcode_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_session%2Fcode_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fcode_stats.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "previous_filename": "src/librustc/session/code_stats.rs"}, {"sha": "58113bb8cd6cb430a202d7d9c0a3559b4fa8ad1e", "filename": "src/librustc_session/config.rs", "status": "renamed", "additions": 36, "deletions": 31, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -2,24 +2,24 @@\n //! command-line options.\n \n use crate::lint;\n-use crate::middle::cstore;\n-use crate::session::{early_error, early_warn, Session};\n-use crate::session::search_paths::SearchPath;\n+use crate::utils::NativeLibraryKind;\n+use crate::{early_error, early_warn, Session};\n+use crate::search_paths::SearchPath;\n \n use rustc_data_structures::fx::FxHashSet;\n-use rustc_feature::UnstableFeatures;\n+use rustc_data_structures::impl_stable_hash_via_hash;\n \n use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelroLevel};\n use rustc_target::spec::{Target, TargetTriple};\n \n-use syntax;\n-use syntax::ast;\n-use syntax::source_map::{FileName, FilePathMapping};\n-use syntax::edition::{Edition, EDITION_NAME_LIST, DEFAULT_EDITION};\n-use syntax::symbol::{sym, Symbol};\n+use syntax_pos::source_map::{FileName, FilePathMapping};\n+use syntax_pos::edition::{Edition, EDITION_NAME_LIST, DEFAULT_EDITION};\n+use syntax_pos::symbol::{sym, Symbol};\n+use rustc_feature::UnstableFeatures;\n+use crate::parse::CrateConfig;\n \n-use errors::emitter::HumanReadableErrorType;\n-use errors::{ColorConfig, FatalError, Handler};\n+use rustc_errors::emitter::HumanReadableErrorType;\n+use rustc_errors::{ColorConfig, FatalError, Handler};\n \n use getopts;\n \n@@ -348,7 +348,7 @@ macro_rules! hash_option {\n     ($opt_name:ident, $opt_expr:expr, $sub_hashes:expr, [TRACKED]) => ({\n         if $sub_hashes.insert(stringify!($opt_name),\n                               $opt_expr as &dyn dep_tracking::DepTrackingHash).is_some() {\n-            bug!(\"duplicate key in CLI DepTrackingHash: {}\", stringify!($opt_name))\n+            panic!(\"duplicate key in CLI DepTrackingHash: {}\", stringify!($opt_name))\n         }\n     });\n }\n@@ -415,7 +415,7 @@ top_level_options!(\n         describe_lints: bool [UNTRACKED],\n         output_types: OutputTypes [TRACKED],\n         search_paths: Vec<SearchPath> [UNTRACKED],\n-        libs: Vec<(String, Option<String>, Option<cstore::NativeLibraryKind>)> [TRACKED],\n+        libs: Vec<(String, Option<String>, Option<NativeLibraryKind>)> [TRACKED],\n         maybe_sysroot: Option<PathBuf> [UNTRACKED],\n \n         target_triple: TargetTriple [TRACKED],\n@@ -701,7 +701,7 @@ pub enum EntryFnType {\n \n impl_stable_hash_via_hash!(EntryFnType);\n \n-#[derive(Copy, PartialEq, PartialOrd, Clone, Ord, Eq, Hash, Debug, HashStable)]\n+#[derive(Copy, PartialEq, PartialOrd, Clone, Ord, Eq, Hash, Debug)]\n pub enum CrateType {\n     Executable,\n     Dylib,\n@@ -711,6 +711,8 @@ pub enum CrateType {\n     ProcMacro,\n }\n \n+impl_stable_hash_via_hash!(CrateType);\n+\n #[derive(Clone, Hash)]\n pub enum Passes {\n     Some(Vec<String>),\n@@ -781,7 +783,7 @@ macro_rules! options {\n                                                                value, $outputname,\n                                                                key, type_desc))\n                         }\n-                        (None, None) => bug!()\n+                        (None, None) => panic!()\n                     }\n                 }\n                 found = true;\n@@ -1535,7 +1537,7 @@ pub const fn default_lib_output() -> CrateType {\n     CrateType::Rlib\n }\n \n-pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n+pub fn default_configuration(sess: &Session) -> CrateConfig {\n     let end = &sess.target.target.target_endian;\n     let arch = &sess.target.target.arch;\n     let wordsz = &sess.target.target.target_pointer_width;\n@@ -1607,13 +1609,13 @@ pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n /// Converts the crate `cfg!` configuration from `String` to `Symbol`.\n /// `rustc_interface::interface::Config` accepts this in the compiler configuration,\n /// but the symbol interner is not yet set up then, so we must convert it later.\n-pub fn to_crate_config(cfg: FxHashSet<(String, Option<String>)>) -> ast::CrateConfig {\n+pub fn to_crate_config(cfg: FxHashSet<(String, Option<String>)>) -> CrateConfig {\n     cfg.into_iter()\n        .map(|(a, b)| (Symbol::intern(&a), b.map(|b| Symbol::intern(&b))))\n        .collect()\n }\n \n-pub fn build_configuration(sess: &Session, mut user_cfg: ast::CrateConfig) -> ast::CrateConfig {\n+pub fn build_configuration(sess: &Session, mut user_cfg: CrateConfig) -> CrateConfig {\n     // Combine the configuration requested by the session (command line) with\n     // some default and generated configuration items.\n     let default_cfg = default_configuration(sess);\n@@ -2379,7 +2381,7 @@ fn select_debuginfo(\n fn parse_libs(\n     matches: &getopts::Matches,\n     error_format: ErrorOutputType,\n-) -> Vec<(String, Option<String>, Option<cstore::NativeLibraryKind>)> {\n+) -> Vec<(String, Option<String>, Option<NativeLibraryKind>)> {\n     matches\n         .opt_strs(\"l\")\n         .into_iter()\n@@ -2390,10 +2392,12 @@ fn parse_libs(\n             let kind = parts.next().unwrap();\n             let (name, kind) = match (parts.next(), kind) {\n                 (None, name) => (name, None),\n-                (Some(name), \"dylib\") => (name, Some(cstore::NativeUnknown)),\n-                (Some(name), \"framework\") => (name, Some(cstore::NativeFramework)),\n-                (Some(name), \"static\") => (name, Some(cstore::NativeStatic)),\n-                (Some(name), \"static-nobundle\") => (name, Some(cstore::NativeStaticNobundle)),\n+                (Some(name), \"dylib\") => (name, Some(NativeLibraryKind::NativeUnknown)),\n+                (Some(name), \"framework\") => (name, Some(NativeLibraryKind::NativeFramework)),\n+                (Some(name), \"static\") => (name, Some(NativeLibraryKind::NativeStatic)),\n+                (Some(name), \"static-nobundle\") => {\n+                    (name, Some(NativeLibraryKind::NativeStaticNobundle))\n+                }\n                 (_, s) => {\n                     early_error(\n                         error_format,\n@@ -2405,7 +2409,8 @@ fn parse_libs(\n                     );\n                 }\n             };\n-            if kind == Some(cstore::NativeStaticNobundle) && !nightly_options::is_nightly_build() {\n+            if kind == Some(NativeLibraryKind::NativeStaticNobundle) &&\n+                !nightly_options::is_nightly_build() {\n                 early_error(\n                     error_format,\n                     &format!(\n@@ -2716,7 +2721,7 @@ pub mod nightly_options {\n     use getopts;\n     use rustc_feature::UnstableFeatures;\n     use super::{ErrorOutputType, OptionStability, RustcOptGroup};\n-    use crate::session::early_error;\n+    use crate::early_error;\n \n     pub fn is_unstable_enabled(matches: &getopts::Matches) -> bool {\n         is_nightly_build()\n@@ -2855,17 +2860,17 @@ impl PpMode {\n /// how the hash should be calculated when adding a new command-line argument.\n mod dep_tracking {\n     use crate::lint;\n-    use crate::middle::cstore;\n+    use crate::utils::NativeLibraryKind;\n     use std::collections::BTreeMap;\n     use std::hash::Hash;\n     use std::path::PathBuf;\n     use std::collections::hash_map::DefaultHasher;\n     use super::{CrateType, DebugInfo, ErrorOutputType, OptLevel, OutputTypes,\n                 Passes, Sanitizer, LtoCli, LinkerPluginLto, SwitchWithOptPath,\n                 SymbolManglingVersion};\n-    use rustc_feature::UnstableFeatures;\n     use rustc_target::spec::{MergeFunctions, PanicStrategy, RelroLevel, TargetTriple};\n-    use syntax::edition::Edition;\n+    use syntax_pos::edition::Edition;\n+    use rustc_feature::UnstableFeatures;\n \n     pub trait DepTrackingHash {\n         fn hash(&self, hasher: &mut DefaultHasher, error_format: ErrorOutputType);\n@@ -2913,7 +2918,7 @@ mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(Option<RelroLevel>);\n     impl_dep_tracking_hash_via_hash!(Option<lint::Level>);\n     impl_dep_tracking_hash_via_hash!(Option<PathBuf>);\n-    impl_dep_tracking_hash_via_hash!(Option<cstore::NativeLibraryKind>);\n+    impl_dep_tracking_hash_via_hash!(Option<NativeLibraryKind>);\n     impl_dep_tracking_hash_via_hash!(CrateType);\n     impl_dep_tracking_hash_via_hash!(MergeFunctions);\n     impl_dep_tracking_hash_via_hash!(PanicStrategy);\n@@ -2924,7 +2929,7 @@ mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(DebugInfo);\n     impl_dep_tracking_hash_via_hash!(UnstableFeatures);\n     impl_dep_tracking_hash_via_hash!(OutputTypes);\n-    impl_dep_tracking_hash_via_hash!(cstore::NativeLibraryKind);\n+    impl_dep_tracking_hash_via_hash!(NativeLibraryKind);\n     impl_dep_tracking_hash_via_hash!(Sanitizer);\n     impl_dep_tracking_hash_via_hash!(Option<Sanitizer>);\n     impl_dep_tracking_hash_via_hash!(TargetTriple);\n@@ -2940,7 +2945,7 @@ mod dep_tracking {\n     impl_dep_tracking_hash_for_sortable_vec_of!((\n         String,\n         Option<String>,\n-        Option<cstore::NativeLibraryKind>\n+        Option<NativeLibraryKind>\n     ));\n     impl_dep_tracking_hash_for_sortable_vec_of!((String, u64));\n     impl_dep_tracking_hash_for_sortable_vec_of!(Sanitizer);", "previous_filename": "src/librustc/session/config.rs"}, {"sha": "a0bdc6a3254a151b07aaa27e48b7bd182497fd2c", "filename": "src/librustc_session/filesearch.rs", "status": "renamed", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_session%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_session%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Ffilesearch.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -7,8 +7,9 @@ use std::env;\n use std::fs;\n use std::path::{Path, PathBuf};\n \n-use crate::session::search_paths::{SearchPath, PathKind};\n+use crate::search_paths::{SearchPath, PathKind};\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n+use log::debug;\n \n #[derive(Copy, Clone)]\n pub enum FileMatch {\n@@ -124,7 +125,7 @@ pub fn get_or_default_sysroot() -> PathBuf {\n                 // gcc chokes on verbatim paths which fs::canonicalize generates\n                 // so we try to avoid those kinds of paths.\n                 Ok(canon) => Some(fix_windows_verbatim_for_gcc(&canon)),\n-                Err(e) => bug!(\"failed to get realpath: {}\", e),\n+                Err(e) => panic!(\"failed to get realpath: {}\", e),\n             }\n         })\n     }\n@@ -133,7 +134,7 @@ pub fn get_or_default_sysroot() -> PathBuf {\n         Ok(exe) => {\n             match canonicalize(Some(exe)) {\n                 Some(mut p) => { p.pop(); p.pop(); p },\n-                None => bug!(\"can't determine value for sysroot\")\n+                None => panic!(\"can't determine value for sysroot\")\n             }\n         }\n         Err(ref e) => panic!(format!(\"failed to get current_exe: {}\", e))", "previous_filename": "src/librustc/session/filesearch.rs"}, {"sha": "9d7c23100a0fe518fe579172af24276cdee6ae69", "filename": "src/librustc_session/lib.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_session%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_session%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flib.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -0,0 +1,21 @@\n+#![feature(test)]\n+\n+// Use the test crate here so we depend on getopts through it. This allow tools to link to both\n+// librustc_session and libtest.\n+extern crate test as _;\n+extern crate getopts;\n+\n+pub mod cgu_reuse_tracker;\n+pub mod utils;\n+#[macro_use]\n+pub mod lint;\n+pub mod node_id;\n+pub mod parse;\n+\n+mod code_stats;\n+pub mod config;\n+pub mod filesearch;\n+pub mod search_paths;\n+\n+mod session;\n+pub use session::*;"}, {"sha": "faa6a7a4644e06e26cd60332ef2f749cc99c4cc1", "filename": "src/librustc_session/lint.rs", "status": "added", "additions": 254, "deletions": 0, "changes": 254, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_session%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_session%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -0,0 +1,254 @@\n+use syntax_pos::{MultiSpan, Symbol, sym};\n+use syntax_pos::edition::Edition;\n+use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey, StableHasher};\n+pub use self::Level::*;\n+use crate::node_id::NodeId;\n+\n+/// Setting for how to handle a lint.\n+#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n+pub enum Level {\n+    Allow, Warn, Deny, Forbid,\n+}\n+\n+rustc_data_structures::impl_stable_hash_via_hash!(Level);\n+\n+impl Level {\n+    /// Converts a level to a lower-case string.\n+    pub fn as_str(self) -> &'static str {\n+        match self {\n+            Level::Allow => \"allow\",\n+            Level::Warn => \"warn\",\n+            Level::Deny => \"deny\",\n+            Level::Forbid => \"forbid\",\n+        }\n+    }\n+\n+    /// Converts a lower-case string to a level.\n+    pub fn from_str(x: &str) -> Option<Level> {\n+        match x {\n+            \"allow\" => Some(Level::Allow),\n+            \"warn\" => Some(Level::Warn),\n+            \"deny\" => Some(Level::Deny),\n+            \"forbid\" => Some(Level::Forbid),\n+            _ => None,\n+        }\n+    }\n+\n+    /// Converts a symbol to a level.\n+    pub fn from_symbol(x: Symbol) -> Option<Level> {\n+        match x {\n+            sym::allow => Some(Level::Allow),\n+            sym::warn => Some(Level::Warn),\n+            sym::deny => Some(Level::Deny),\n+            sym::forbid => Some(Level::Forbid),\n+            _ => None,\n+        }\n+    }\n+}\n+\n+/// Specification of a single lint.\n+#[derive(Copy, Clone, Debug)]\n+pub struct Lint {\n+    /// A string identifier for the lint.\n+    ///\n+    /// This identifies the lint in attributes and in command-line arguments.\n+    /// In those contexts it is always lowercase, but this field is compared\n+    /// in a way which is case-insensitive for ASCII characters. This allows\n+    /// `declare_lint!()` invocations to follow the convention of upper-case\n+    /// statics without repeating the name.\n+    ///\n+    /// The name is written with underscores, e.g., \"unused_imports\".\n+    /// On the command line, underscores become dashes.\n+    pub name: &'static str,\n+\n+    /// Default level for the lint.\n+    pub default_level: Level,\n+\n+    /// Description of the lint or the issue it detects.\n+    ///\n+    /// e.g., \"imports that are never used\"\n+    pub desc: &'static str,\n+\n+    /// Starting at the given edition, default to the given lint level. If this is `None`, then use\n+    /// `default_level`.\n+    pub edition_lint_opts: Option<(Edition, Level)>,\n+\n+    /// `true` if this lint is reported even inside expansions of external macros.\n+    pub report_in_external_macro: bool,\n+\n+    pub future_incompatible: Option<FutureIncompatibleInfo>,\n+\n+    pub is_plugin: bool,\n+}\n+\n+/// Extra information for a future incompatibility lint.\n+#[derive(Copy, Clone, Debug)]\n+pub struct FutureIncompatibleInfo {\n+    /// e.g., a URL for an issue/PR/RFC or error code\n+    pub reference: &'static str,\n+    /// If this is an edition fixing lint, the edition in which\n+    /// this lint becomes obsolete\n+    pub edition: Option<Edition>,\n+}\n+\n+impl Lint {\n+    pub const fn default_fields_for_macro() -> Self {\n+        Lint {\n+            name: \"\",\n+            default_level: Level::Forbid,\n+            desc: \"\",\n+            edition_lint_opts: None,\n+            is_plugin: false,\n+            report_in_external_macro: false,\n+            future_incompatible: None,\n+        }\n+    }\n+\n+    /// Gets the lint's name, with ASCII letters converted to lowercase.\n+    pub fn name_lower(&self) -> String {\n+        self.name.to_ascii_lowercase()\n+    }\n+\n+    pub fn default_level(&self, edition: Edition) -> Level {\n+        self.edition_lint_opts\n+            .filter(|(e, _)| *e <= edition)\n+            .map(|(_, l)| l)\n+            .unwrap_or(self.default_level)\n+    }\n+}\n+\n+/// Identifies a lint known to the compiler.\n+#[derive(Clone, Copy, Debug)]\n+pub struct LintId {\n+    // Identity is based on pointer equality of this field.\n+    pub lint: &'static Lint,\n+}\n+\n+impl PartialEq for LintId {\n+    fn eq(&self, other: &LintId) -> bool {\n+        std::ptr::eq(self.lint, other.lint)\n+    }\n+}\n+\n+impl Eq for LintId { }\n+\n+impl std::hash::Hash for LintId {\n+    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {\n+        let ptr = self.lint as *const Lint;\n+        ptr.hash(state);\n+    }\n+}\n+\n+impl LintId {\n+    /// Gets the `LintId` for a `Lint`.\n+    pub fn of(lint: &'static Lint) -> LintId {\n+        LintId {\n+            lint,\n+        }\n+    }\n+\n+    pub fn lint_name_raw(&self) -> &'static str {\n+        self.lint.name\n+    }\n+\n+    /// Gets the name of the lint.\n+    pub fn to_string(&self) -> String {\n+        self.lint.name_lower()\n+    }\n+}\n+\n+impl<HCX> HashStable<HCX> for LintId {\n+    #[inline]\n+    fn hash_stable(&self, hcx: &mut HCX, hasher: &mut StableHasher) {\n+        self.lint_name_raw().hash_stable(hcx, hasher);\n+    }\n+}\n+\n+impl<HCX> ToStableHashKey<HCX> for LintId {\n+    type KeyType = &'static str;\n+\n+    #[inline]\n+    fn to_stable_hash_key(&self, _: &HCX) -> &'static str {\n+        self.lint_name_raw()\n+    }\n+}\n+\n+/// Stores buffered lint info which can later be passed to `librustc`.\n+pub struct BufferedEarlyLint {\n+    /// The span of code that we are linting on.\n+   pub span: MultiSpan,\n+\n+   /// The lint message.\n+   pub msg: String,\n+\n+   /// The `NodeId` of the AST node that generated the lint.\n+   pub id: NodeId,\n+\n+   /// A lint Id that can be passed to `rustc::lint::Lint::from_parser_lint_id`.\n+   pub lint_id: &'static Lint,\n+}\n+\n+/// Declares a static item of type `&'static Lint`.\n+#[macro_export]\n+macro_rules! declare_lint {\n+    ($vis: vis $NAME: ident, $Level: ident, $desc: expr) => (\n+        $crate::declare_lint!(\n+            $vis $NAME, $Level, $desc,\n+        );\n+    );\n+    ($vis: vis $NAME: ident, $Level: ident, $desc: expr,\n+     $(@future_incompatible = $fi:expr;)? $($v:ident),*) => (\n+        $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n+            name: stringify!($NAME),\n+            default_level: $crate::lint::$Level,\n+            desc: $desc,\n+            edition_lint_opts: None,\n+            is_plugin: false,\n+            $($v: true,)*\n+            $(future_incompatible: Some($fi),)*\n+            ..$crate::lint::Lint::default_fields_for_macro()\n+        };\n+    );\n+    ($vis: vis $NAME: ident, $Level: ident, $desc: expr,\n+     $lint_edition: expr => $edition_level: ident\n+    ) => (\n+        $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n+            name: stringify!($NAME),\n+            default_level: $crate::lint::$Level,\n+            desc: $desc,\n+            edition_lint_opts: Some(($lint_edition, $crate::lint::Level::$edition_level)),\n+            report_in_external_macro: false,\n+            is_plugin: false,\n+        };\n+    );\n+}\n+\n+#[macro_export]\n+macro_rules! declare_tool_lint {\n+    (\n+        $(#[$attr:meta])* $vis:vis $tool:ident ::$NAME:ident, $Level: ident, $desc: expr\n+    ) => (\n+        $crate::declare_tool_lint!{$(#[$attr])* $vis $tool::$NAME, $Level, $desc, false}\n+    );\n+    (\n+        $(#[$attr:meta])* $vis:vis $tool:ident ::$NAME:ident, $Level:ident, $desc:expr,\n+        report_in_external_macro: $rep:expr\n+    ) => (\n+         $crate::declare_tool_lint!{$(#[$attr])* $vis $tool::$NAME, $Level, $desc, $rep}\n+    );\n+    (\n+        $(#[$attr:meta])* $vis:vis $tool:ident ::$NAME:ident, $Level:ident, $desc:expr,\n+        $external:expr\n+    ) => (\n+        $(#[$attr])*\n+        $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n+            name: &concat!(stringify!($tool), \"::\", stringify!($NAME)),\n+            default_level: $crate::lint::$Level,\n+            desc: $desc,\n+            edition_lint_opts: None,\n+            report_in_external_macro: $external,\n+            future_incompatible: None,\n+            is_plugin: true,\n+        };\n+    );\n+}"}, {"sha": "7b14db20b95b1b9059686561cb561d3a41063032", "filename": "src/librustc_session/node_id.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_session%2Fnode_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_session%2Fnode_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fnode_id.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -0,0 +1,39 @@\n+use std::fmt;\n+use rustc_index::vec::Idx;\n+use rustc_serialize::{Encoder, Decoder};\n+use syntax_pos::ExpnId;\n+\n+rustc_index::newtype_index! {\n+    pub struct NodeId {\n+        ENCODABLE = custom\n+        DEBUG_FORMAT = \"NodeId({})\"\n+    }\n+}\n+\n+impl NodeId {\n+    pub fn placeholder_from_expn_id(expn_id: ExpnId) -> Self {\n+        NodeId::from_u32(expn_id.as_u32())\n+    }\n+\n+    pub fn placeholder_to_expn_id(self) -> ExpnId {\n+        ExpnId::from_u32(self.as_u32())\n+    }\n+}\n+\n+impl fmt::Display for NodeId {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::Display::fmt(&self.as_u32(), f)\n+    }\n+}\n+\n+impl rustc_serialize::UseSpecializedEncodable for NodeId {\n+    fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        s.emit_u32(self.as_u32())\n+    }\n+}\n+\n+impl rustc_serialize::UseSpecializedDecodable for NodeId {\n+    fn default_decode<D: Decoder>(d: &mut D) -> Result<NodeId, D::Error> {\n+        d.read_u32().map(NodeId::from_u32)\n+    }\n+}"}, {"sha": "09442f29b7a8a704c9d33cda0d1f055096728486", "filename": "src/librustc_session/parse.rs", "status": "renamed", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_session%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_session%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fparse.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -1,10 +1,10 @@\n //! Contains `ParseSess` which holds state living beyond what one `Parser` might.\n //! It also serves as an input to the parser itself.\n \n-use crate::ast::{CrateConfig, NodeId};\n-use crate::early_buffered_lints::{BufferedEarlyLint, BufferedEarlyLintId};\n+use crate::node_id::NodeId;\n+use crate::lint::BufferedEarlyLint;\n \n-use errors::{Applicability, emitter::SilentEmitter, Handler, ColorConfig, DiagnosticBuilder};\n+use rustc_errors::{Applicability, emitter::SilentEmitter, Handler, ColorConfig, DiagnosticBuilder};\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use rustc_data_structures::sync::{Lrc, Lock, Once};\n use rustc_feature::UnstableFeatures;\n@@ -16,6 +16,10 @@ use syntax_pos::source_map::{SourceMap, FilePathMapping};\n use std::path::PathBuf;\n use std::str;\n \n+/// The set of keys (and, optionally, values) that define the compilation\n+/// environment of the crate, used to drive conditional compilation.\n+pub type CrateConfig = FxHashSet<(Symbol, Option<Symbol>)>;\n+\n /// Collected spans during parsing for places where a certain feature was\n /// used and should be feature gated accordingly in `check_crate`.\n #[derive(Default)]\n@@ -137,7 +141,7 @@ impl ParseSess {\n \n     pub fn buffer_lint(\n         &self,\n-        lint_id: BufferedEarlyLintId,\n+        lint_id: &'static crate::lint::Lint,\n         span: impl Into<MultiSpan>,\n         id: NodeId,\n         msg: &str,", "previous_filename": "src/libsyntax/sess.rs"}, {"sha": "b9f2ae7618b91d93a0987e965d824def732a57e3", "filename": "src/librustc_session/search_paths.rs", "status": "renamed", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_session%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_session%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsearch_paths.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -1,6 +1,6 @@\n use std::path::{Path, PathBuf};\n-use crate::session::{early_error, config};\n-use crate::session::filesearch::make_target_lib_path;\n+use crate::{early_error, config};\n+use crate::filesearch::make_target_lib_path;\n \n #[derive(Clone, Debug)]\n pub struct SearchPath {\n@@ -9,7 +9,7 @@ pub struct SearchPath {\n     pub files: Vec<PathBuf>,\n }\n \n-#[derive(PartialEq, Clone, Copy, Debug, HashStable)]\n+#[derive(PartialEq, Clone, Copy, Debug, Hash, Eq)]\n pub enum PathKind {\n     Native,\n     Crate,\n@@ -19,6 +19,8 @@ pub enum PathKind {\n     All,\n }\n \n+rustc_data_structures::impl_stable_hash_via_hash!(PathKind);\n+\n impl PathKind {\n     pub fn matches(&self, kind: PathKind) -> bool {\n         match (self, kind) {", "previous_filename": "src/librustc/session/search_paths.rs"}, {"sha": "9369c1771a35ed10c6c90caa5e5db0e3c7043ed8", "filename": "src/librustc_session/session.rs", "status": "renamed", "additions": 34, "deletions": 37, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -1,36 +1,38 @@\n-pub use self::code_stats::{DataTypeKind, SizeKind, FieldInfo, VariantInfo};\n-use self::code_stats::CodeStats;\n+pub use crate::code_stats::{DataTypeKind, SizeKind, FieldInfo, VariantInfo};\n+use crate::code_stats::CodeStats;\n \n-use crate::dep_graph::cgu_reuse_tracker::CguReuseTracker;\n+use crate::cgu_reuse_tracker::CguReuseTracker;\n use rustc_data_structures::fingerprint::Fingerprint;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n \n use crate::lint;\n-use crate::session::config::{OutputType, PrintRequest, Sanitizer, SwitchWithOptPath};\n-use crate::session::search_paths::{PathKind, SearchPath};\n-use crate::util::nodemap::{FxHashMap, FxHashSet};\n-use crate::util::common::{duration_to_secs_str, ErrorReported};\n+use crate::filesearch;\n+use crate::config::{self, OutputType, PrintRequest, Sanitizer, SwitchWithOptPath};\n+use crate::search_paths::{PathKind, SearchPath};\n+use crate::utils::duration_to_secs_str;\n+use rustc_errors::ErrorReported;\n \n use rustc_data_structures::base_n;\n use rustc_data_structures::sync::{\n     self, Lrc, Lock, OneThread, Once, AtomicU64, AtomicUsize, Ordering,\n     Ordering::SeqCst,\n };\n-\n-use errors::{DiagnosticBuilder, DiagnosticId, Applicability};\n-use errors::emitter::{Emitter, EmitterWriter};\n-use errors::emitter::HumanReadableErrorType;\n-use errors::annotate_snippet_emitter_writer::{AnnotateSnippetEmitterWriter};\n-use syntax::edition::Edition;\n-use errors::json::JsonEmitter;\n-use syntax::source_map;\n-use syntax::sess::ParseSess;\n+use rustc_data_structures::impl_stable_hash_via_hash;\n+\n+use rustc_errors::{DiagnosticBuilder, DiagnosticId, Applicability};\n+use rustc_errors::emitter::{Emitter, EmitterWriter};\n+use rustc_errors::emitter::HumanReadableErrorType;\n+use rustc_errors::annotate_snippet_emitter_writer::{AnnotateSnippetEmitterWriter};\n+use syntax_pos::edition::Edition;\n+use rustc_errors::json::JsonEmitter;\n+use syntax_pos::source_map;\n+use crate::parse::ParseSess;\n use syntax_pos::{MultiSpan, Span};\n \n use rustc_target::spec::{PanicStrategy, RelroLevel, Target, TargetTriple};\n use rustc_data_structures::flock;\n-use rustc_data_structures::jobserver;\n+use rustc_data_structures::jobserver::{self, Client};\n use rustc_data_structures::profiling::{SelfProfiler, SelfProfilerRef};\n-use ::jobserver::Client;\n \n use std;\n use std::cell::{self, RefCell};\n@@ -42,11 +44,6 @@ use std::path::PathBuf;\n use std::time::Duration;\n use std::sync::Arc;\n \n-mod code_stats;\n-pub mod config;\n-pub mod filesearch;\n-pub mod search_paths;\n-\n pub struct OptimizationFuel {\n     /// If `-zfuel=crate=n` is specified, initially set to `n`, otherwise `0`.\n     remaining: u64,\n@@ -335,7 +332,7 @@ impl Session {\n         self.diagnostic().span_note_without_error(sp, msg)\n     }\n \n-    pub fn diagnostic(&self) -> &errors::Handler {\n+    pub fn diagnostic(&self) -> &rustc_errors::Handler {\n         &self.parse_sess.span_diagnostic\n     }\n \n@@ -680,7 +677,7 @@ impl Session {\n \n         if let IncrCompSession::NotInitialized = *incr_comp_session {\n         } else {\n-            bug!(\n+            panic!(\n                 \"Trying to initialize IncrCompSession `{:?}`\",\n                 *incr_comp_session\n             )\n@@ -698,7 +695,7 @@ impl Session {\n \n         if let IncrCompSession::Active { .. } = *incr_comp_session {\n         } else {\n-            bug!(\n+            panic!(\n                 \"trying to finalize `IncrCompSession` `{:?}`\",\n                 *incr_comp_session\n             );\n@@ -719,7 +716,7 @@ impl Session {\n                 ..\n             } => session_directory.clone(),\n             IncrCompSession::InvalidBecauseOfErrors { .. } => return,\n-            _ => bug!(\n+            _ => panic!(\n                 \"trying to invalidate `IncrCompSession` `{:?}`\",\n                 *incr_comp_session\n             ),\n@@ -736,7 +733,7 @@ impl Session {\n         cell::Ref::map(\n             incr_comp_session,\n             |incr_comp_session| match *incr_comp_session {\n-                IncrCompSession::NotInitialized => bug!(\n+                IncrCompSession::NotInitialized => panic!(\n                     \"trying to get session directory from `IncrCompSession`: {:?}\",\n                     *incr_comp_session,\n                 ),\n@@ -916,7 +913,7 @@ impl Session {\n pub fn build_session(\n     sopts: config::Options,\n     local_crate_source_file: Option<PathBuf>,\n-    registry: errors::registry::Registry,\n+    registry: rustc_errors::registry::Registry,\n ) -> Session {\n     let file_path_mapping = sopts.file_path_mapping();\n \n@@ -932,7 +929,7 @@ pub fn build_session(\n \n fn default_emitter(\n     sopts: &config::Options,\n-    registry: errors::registry::Registry,\n+    registry: rustc_errors::registry::Registry,\n     source_map: &Lrc<source_map::SourceMap>,\n     emitter_dest: Option<Box<dyn Write + Send>>,\n ) -> Box<dyn Emitter + sync::Send> {\n@@ -1001,7 +998,7 @@ pub enum DiagnosticOutput {\n pub fn build_session_with_source_map(\n     sopts: config::Options,\n     local_crate_source_file: Option<PathBuf>,\n-    registry: errors::registry::Registry,\n+    registry: rustc_errors::registry::Registry,\n     source_map: Lrc<source_map::SourceMap>,\n     diagnostics_output: DiagnosticOutput,\n     lint_caps: FxHashMap<lint::LintId, lint::Level>,\n@@ -1032,9 +1029,9 @@ pub fn build_session_with_source_map(\n     };\n     let emitter = default_emitter(&sopts, registry, &source_map, write_dest);\n \n-    let diagnostic_handler = errors::Handler::with_emitter_and_flags(\n+    let diagnostic_handler = rustc_errors::Handler::with_emitter_and_flags(\n         emitter,\n-        errors::HandlerFlags {\n+        rustc_errors::HandlerFlags {\n             can_emit_warnings,\n             treat_err_as_bug,\n             report_delayed_bugs,\n@@ -1056,7 +1053,7 @@ pub fn build_session_with_source_map(\n fn build_session_(\n     sopts: config::Options,\n     local_crate_source_file: Option<PathBuf>,\n-    span_diagnostic: errors::Handler,\n+    span_diagnostic: rustc_errors::Handler,\n     source_map: Lrc<source_map::SourceMap>,\n     driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n ) -> Session {\n@@ -1281,9 +1278,9 @@ pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n         config::ErrorOutputType::Json { pretty, json_rendered } =>\n             Box::new(JsonEmitter::basic(pretty, json_rendered, false)),\n     };\n-    let handler = errors::Handler::with_emitter(true, None, emitter);\n+    let handler = rustc_errors::Handler::with_emitter(true, None, emitter);\n     handler.struct_fatal(msg).emit();\n-    errors::FatalError.raise();\n+    rustc_errors::FatalError.raise();\n }\n \n pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n@@ -1295,7 +1292,7 @@ pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n         config::ErrorOutputType::Json { pretty, json_rendered } =>\n             Box::new(JsonEmitter::basic(pretty, json_rendered, false)),\n     };\n-    let handler = errors::Handler::with_emitter(true, None, emitter);\n+    let handler = rustc_errors::Handler::with_emitter(true, None, emitter);\n     handler.struct_warn(msg).emit();\n }\n ", "previous_filename": "src/librustc/session/mod.rs"}, {"sha": "ad593398a52bae2638f4b6f7566256edc95e3f74", "filename": "src/librustc_session/utils.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_session%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_session%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Futils.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -0,0 +1,25 @@\n+// Hack up our own formatting for the duration to make it easier for scripts\n+// to parse (always use the same number of decimal places and the same unit).\n+pub fn duration_to_secs_str(dur: std::time::Duration) -> String {\n+    const NANOS_PER_SEC: f64 = 1_000_000_000.0;\n+    let secs = dur.as_secs() as f64 +\n+               dur.subsec_nanos() as f64 / NANOS_PER_SEC;\n+\n+    format!(\"{:.3}\", secs)\n+}\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n+pub enum NativeLibraryKind {\n+    /// native static library (.a archive)\n+    NativeStatic,\n+    /// native static library, which doesn't get bundled into .rlibs\n+    NativeStaticNobundle,\n+    /// macOS-specific\n+    NativeFramework,\n+    /// Windows dynamic library without import library.\n+    NativeRawDylib,\n+    /// default way to specify a dynamic library\n+    NativeUnknown,\n+}\n+\n+rustc_data_structures::impl_stable_hash_via_hash!(NativeLibraryKind);"}, {"sha": "693cf75e8fd646446f26db5a56abdaf36651925b", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -803,6 +803,9 @@ pub struct TargetOptions {\n \n     /// LLVM ABI name, corresponds to the '-mabi' parameter available in multilib C compilers\n     pub llvm_abiname: String,\n+\n+    /// Whether or not RelaxElfRelocation flag will be passed to the linker\n+    pub relax_elf_relocations: bool,\n }\n \n impl Default for TargetOptions {\n@@ -890,6 +893,7 @@ impl Default for TargetOptions {\n             merge_functions: MergeFunctions::Aliases,\n             target_mcount: \"mcount\".to_string(),\n             llvm_abiname: \"\".to_string(),\n+            relax_elf_relocations: false,\n         }\n     }\n }\n@@ -1207,6 +1211,7 @@ impl Target {\n         key!(merge_functions, MergeFunctions)?;\n         key!(target_mcount);\n         key!(llvm_abiname);\n+        key!(relax_elf_relocations, bool);\n \n         if let Some(array) = obj.find(\"abi-blacklist\").and_then(Json::as_array) {\n             for name in array.iter().filter_map(|abi| abi.as_string()) {\n@@ -1426,6 +1431,7 @@ impl ToJson for Target {\n         target_option_val!(merge_functions);\n         target_option_val!(target_mcount);\n         target_option_val!(llvm_abiname);\n+        target_option_val!(relax_elf_relocations);\n \n         if default.abi_blacklist != self.options.abi_blacklist {\n             d.insert(\"abi-blacklist\".to_string(), self.options.abi_blacklist.iter()"}, {"sha": "dbcd77bc753e86495aabab5ce403ab9cfe2c4c95", "filename": "src/librustc_target/spec/x86_64_fortanix_unknown_sgx.rs", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -1,35 +1,31 @@\n use std::iter;\n \n-use super::{LinkerFlavor, PanicStrategy, Target, TargetOptions};\n+use super::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions};\n \n pub fn target() -> Result<Target, String> {\n     const PRE_LINK_ARGS: &[&str] = &[\n-        \"-Wl,--as-needed\",\n-        \"-Wl,-z,noexecstack\",\n-        \"-m64\",\n-        \"-fuse-ld=gold\",\n-        \"-nostdlib\",\n-        \"-shared\",\n-        \"-Wl,-e,sgx_entry\",\n-        \"-Wl,-Bstatic\",\n-        \"-Wl,--gc-sections\",\n-        \"-Wl,-z,text\",\n-        \"-Wl,-z,norelro\",\n-        \"-Wl,--rosegment\",\n-        \"-Wl,--no-undefined\",\n-        \"-Wl,--error-unresolved-symbols\",\n-        \"-Wl,--no-undefined-version\",\n-        \"-Wl,-Bsymbolic\",\n-        \"-Wl,--export-dynamic\",\n+        \"--as-needed\",\n+        \"--eh-frame-hdr\",\n+        \"-z\" , \"noexecstack\",\n+        \"-e\",\"sgx_entry\",\n+        \"-Bstatic\",\n+        \"--gc-sections\",\n+        \"-z\",\"text\",\n+        \"-z\",\"norelro\",\n+        \"--no-undefined\",\n+        \"--error-unresolved-symbols\",\n+        \"--no-undefined-version\",\n+        \"-Bsymbolic\",\n+        \"--export-dynamic\",\n         // The following symbols are needed by libunwind, which is linked after\n         // libstd. Make sure they're included in the link.\n-        \"-Wl,-u,__rust_abort\",\n-        \"-Wl,-u,__rust_c_alloc\",\n-        \"-Wl,-u,__rust_c_dealloc\",\n-        \"-Wl,-u,__rust_print_err\",\n-        \"-Wl,-u,__rust_rwlock_rdlock\",\n-        \"-Wl,-u,__rust_rwlock_unlock\",\n-        \"-Wl,-u,__rust_rwlock_wrlock\",\n+        \"-u\",\"__rust_abort\",\n+        \"-u\",\"__rust_c_alloc\",\n+        \"-u\",\"__rust_c_dealloc\",\n+        \"-u\",\"__rust_print_err\",\n+        \"-u\",\"__rust_rwlock_rdlock\",\n+        \"-u\",\"__rust_rwlock_unlock\",\n+        \"-u\",\"__rust_rwlock_wrlock\"\n     ];\n \n     const EXPORT_SYMBOLS: &[&str] = &[\n@@ -50,18 +46,20 @@ pub fn target() -> Result<Target, String> {\n         dynamic_linking: false,\n         executables: true,\n         linker_is_gnu: true,\n+        linker: Some(\"rust-lld\".to_owned()),\n         max_atomic_width: Some(64),\n         panic_strategy: PanicStrategy::Unwind,\n         cpu: \"x86-64\".into(),\n         features: \"+rdrnd,+rdseed\".into(),\n         position_independent_executables: true,\n         pre_link_args: iter::once((\n-            LinkerFlavor::Gcc,\n+            LinkerFlavor::Lld(LldFlavor::Ld),\n             PRE_LINK_ARGS.iter().cloned().map(String::from).collect(),\n         ))\n         .collect(),\n         post_link_objects: vec![\"libunwind.a\".into()],\n         override_export_symbols: Some(EXPORT_SYMBOLS.iter().cloned().map(String::from).collect()),\n+        relax_elf_relocations: true,\n         ..Default::default()\n     };\n     Ok(Target {\n@@ -74,7 +72,7 @@ pub fn target() -> Result<Target, String> {\n         target_vendor: \"fortanix\".into(),\n         data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".into(),\n         arch: \"x86_64\".into(),\n-        linker_flavor: LinkerFlavor::Gcc,\n+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         options: opts,\n     })\n }"}, {"sha": "a22e162bbff4804b1332c867483c8748b65d58d0", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -54,7 +54,7 @@ fortanix-sgx-abi = { version = \"0.3.2\", features = ['rustc-dep-of-std'] }\n hermit-abi = { version = \"0.1\", features = ['rustc-dep-of-std'] }\n \n [target.wasm32-wasi.dependencies]\n-wasi = { version = \"0.7.0\", features = ['rustc-dep-of-std', 'alloc'] }\n+wasi = { version = \"0.9.0\", features = ['rustc-dep-of-std'], default-features = false }\n \n [features]\n default = [\"std_detect_file_io\", \"std_detect_dlsym_getauxval\"]"}, {"sha": "3db36f5e1325169b9a09409c9240b1124b51e64c", "filename": "src/libstd/sys/wasi/args.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibstd%2Fsys%2Fwasi%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibstd%2Fsys%2Fwasi%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fargs.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -1,15 +1,11 @@\n-use crate::ffi::OsString;\n+use crate::ffi::{CStr, OsStr, OsString};\n use crate::marker::PhantomData;\n-use crate::os::wasi::ffi::OsStringExt;\n+use crate::os::wasi::ffi::OsStrExt;\n use crate::vec;\n \n-use ::wasi::wasi_unstable as wasi;\n+pub unsafe fn init(_argc: isize, _argv: *const *const u8) {}\n \n-pub unsafe fn init(_argc: isize, _argv: *const *const u8) {\n-}\n-\n-pub unsafe fn cleanup() {\n-}\n+pub unsafe fn cleanup() {}\n \n pub struct Args {\n     iter: vec::IntoIter<OsString>,\n@@ -18,17 +14,24 @@ pub struct Args {\n \n /// Returns the command line arguments\n pub fn args() -> Args {\n-    let buf = wasi::args_sizes_get().and_then(|args_sizes| {\n-        let mut buf = Vec::with_capacity(args_sizes.get_count());\n-        wasi::args_get(args_sizes, |arg| {\n-            let arg = OsString::from_vec(arg.to_vec());\n-            buf.push(arg);\n-        })?;\n-        Ok(buf)\n-    }).unwrap_or(vec![]);\n     Args {\n-        iter: buf.into_iter(),\n-        _dont_send_or_sync_me: PhantomData\n+        iter: maybe_args().unwrap_or(Vec::new()).into_iter(),\n+        _dont_send_or_sync_me: PhantomData,\n+    }\n+}\n+\n+fn maybe_args() -> Option<Vec<OsString>> {\n+    unsafe {\n+        let (argc, buf_size) = wasi::args_sizes_get().ok()?;\n+        let mut argv = Vec::with_capacity(argc);\n+        let mut buf = Vec::with_capacity(buf_size);\n+        wasi::args_get(argv.as_mut_ptr(), buf.as_mut_ptr()).ok()?;\n+        let mut ret = Vec::with_capacity(argc);\n+        for ptr in argv {\n+            let s = CStr::from_ptr(ptr.cast());\n+            ret.push(OsStr::from_bytes(s.to_bytes()).to_owned());\n+        }\n+        Some(ret)\n     }\n }\n "}, {"sha": "92d0e60c07e83b8f5f1abb227880a9430c159b8f", "filename": "src/libstd/sys/wasi/ext/fs.rs", "status": "modified", "additions": 54, "deletions": 63, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Ffs.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -4,12 +4,10 @@\n \n use crate::fs::{self, File, Metadata, OpenOptions};\n use crate::io::{self, IoSlice, IoSliceMut};\n-use crate::os::wasi::ffi::OsStrExt;\n use crate::path::{Path, PathBuf};\n+use crate::sys::fs::osstr2str;\n use crate::sys_common::{AsInner, AsInnerMut, FromInner};\n \n-use ::wasi::wasi_unstable as wasi;\n-\n /// WASI-specific extensions to [`File`].\n ///\n /// [`File`]: ../../../../std/fs/struct.File.html\n@@ -49,62 +47,62 @@ pub trait FileExt {\n \n     /// Returns the current position within the file.\n     ///\n-    /// This corresponds to the `__wasi_fd_tell` syscall and is similar to\n+    /// This corresponds to the `fd_tell` syscall and is similar to\n     /// `seek` where you offset 0 bytes from the current position.\n     fn tell(&self) -> io::Result<u64>;\n \n     /// Adjust the flags associated with this file.\n     ///\n-    /// This corresponds to the `__wasi_fd_fdstat_set_flags` syscall.\n+    /// This corresponds to the `fd_fdstat_set_flags` syscall.\n     fn fdstat_set_flags(&self, flags: u16) -> io::Result<()>;\n \n     /// Adjust the rights associated with this file.\n     ///\n-    /// This corresponds to the `__wasi_fd_fdstat_set_rights` syscall.\n+    /// This corresponds to the `fd_fdstat_set_rights` syscall.\n     fn fdstat_set_rights(&self, rights: u64, inheriting: u64) -> io::Result<()>;\n \n     /// Provide file advisory information on a file descriptor.\n     ///\n-    /// This corresponds to the `__wasi_fd_advise` syscall.\n+    /// This corresponds to the `fd_advise` syscall.\n     fn advise(&self, offset: u64, len: u64, advice: u8) -> io::Result<()>;\n \n     /// Force the allocation of space in a file.\n     ///\n-    /// This corresponds to the `__wasi_fd_allocate` syscall.\n+    /// This corresponds to the `fd_allocate` syscall.\n     fn allocate(&self, offset: u64, len: u64) -> io::Result<()>;\n \n     /// Create a directory.\n     ///\n-    /// This corresponds to the `__wasi_path_create_directory` syscall.\n+    /// This corresponds to the `path_create_directory` syscall.\n     fn create_directory<P: AsRef<Path>>(&self, dir: P) -> io::Result<()>;\n \n     /// Read the contents of a symbolic link.\n     ///\n-    /// This corresponds to the `__wasi_path_readlink` syscall.\n+    /// This corresponds to the `path_readlink` syscall.\n     fn read_link<P: AsRef<Path>>(&self, path: P) -> io::Result<PathBuf>;\n \n     /// Return the attributes of a file or directory.\n     ///\n-    /// This corresponds to the `__wasi_path_filestat_get` syscall.\n+    /// This corresponds to the `path_filestat_get` syscall.\n     fn metadata_at<P: AsRef<Path>>(&self, lookup_flags: u32, path: P) -> io::Result<Metadata>;\n \n     /// Unlink a file.\n     ///\n-    /// This corresponds to the `__wasi_path_unlink_file` syscall.\n+    /// This corresponds to the `path_unlink_file` syscall.\n     fn remove_file<P: AsRef<Path>>(&self, path: P) -> io::Result<()>;\n \n     /// Remove a directory.\n     ///\n-    /// This corresponds to the `__wasi_path_remove_directory` syscall.\n+    /// This corresponds to the `path_remove_directory` syscall.\n     fn remove_directory<P: AsRef<Path>>(&self, path: P) -> io::Result<()>;\n }\n \n-// FIXME: bind __wasi_fd_fdstat_get - need to define a custom return type\n-// FIXME: bind __wasi_fd_readdir - can't return `ReadDir` since we only have entry name\n-// FIXME: bind __wasi_fd_filestat_set_times maybe? - on crates.io for unix\n-// FIXME: bind __wasi_path_filestat_set_times maybe? - on crates.io for unix\n-// FIXME: bind __wasi_poll_oneoff maybe? - probably should wait for I/O to settle\n-// FIXME: bind __wasi_random_get maybe? - on crates.io for unix\n+// FIXME: bind fd_fdstat_get - need to define a custom return type\n+// FIXME: bind fd_readdir - can't return `ReadDir` since we only have entry name\n+// FIXME: bind fd_filestat_set_times maybe? - on crates.io for unix\n+// FIXME: bind path_filestat_set_times maybe? - on crates.io for unix\n+// FIXME: bind poll_oneoff maybe? - probably should wait for I/O to settle\n+// FIXME: bind random_get maybe? - on crates.io for unix\n \n impl FileExt for fs::File {\n     fn read_at(&self, bufs: &mut [IoSliceMut<'_>], offset: u64) -> io::Result<usize> {\n@@ -136,9 +134,7 @@ impl FileExt for fs::File {\n     }\n \n     fn create_directory<P: AsRef<Path>>(&self, dir: P) -> io::Result<()> {\n-        self.as_inner()\n-            .fd()\n-            .create_directory(dir.as_ref().as_os_str().as_bytes())\n+        self.as_inner().fd().create_directory(osstr2str(dir.as_ref().as_ref())?)\n     }\n \n     fn read_link<P: AsRef<Path>>(&self, path: P) -> io::Result<PathBuf> {\n@@ -151,26 +147,22 @@ impl FileExt for fs::File {\n     }\n \n     fn remove_file<P: AsRef<Path>>(&self, path: P) -> io::Result<()> {\n-        self.as_inner()\n-            .fd()\n-            .unlink_file(path.as_ref().as_os_str().as_bytes())\n+        self.as_inner().fd().unlink_file(osstr2str(path.as_ref().as_ref())?)\n     }\n \n     fn remove_directory<P: AsRef<Path>>(&self, path: P) -> io::Result<()> {\n-        self.as_inner()\n-            .fd()\n-            .remove_directory(path.as_ref().as_os_str().as_bytes())\n+        self.as_inner().fd().remove_directory(osstr2str(path.as_ref().as_ref())?)\n     }\n }\n \n /// WASI-specific extensions to [`fs::OpenOptions`].\n ///\n /// [`fs::OpenOptions`]: ../../../../std/fs/struct.OpenOptions.html\n pub trait OpenOptionsExt {\n-    /// Pass custom `dirflags` argument to `__wasi_path_open`.\n+    /// Pass custom `dirflags` argument to `path_open`.\n     ///\n     /// This option configures the `dirflags` argument to the\n-    /// `__wasi_path_open` syscall which `OpenOptions` will eventually call. The\n+    /// `path_open` syscall which `OpenOptions` will eventually call. The\n     /// `dirflags` argument configures how the file is looked up, currently\n     /// primarily affecting whether symlinks are followed or not.\n     ///\n@@ -188,39 +180,39 @@ pub trait OpenOptionsExt {\n     fn directory(&mut self, dir: bool) -> &mut Self;\n \n     /// Indicates whether `__WASI_FDFLAG_DSYNC` is passed in the `fs_flags`\n-    /// field of `__wasi_path_open`.\n+    /// field of `path_open`.\n     ///\n     /// This option is by default `false`\n     fn dsync(&mut self, dsync: bool) -> &mut Self;\n \n     /// Indicates whether `__WASI_FDFLAG_NONBLOCK` is passed in the `fs_flags`\n-    /// field of `__wasi_path_open`.\n+    /// field of `path_open`.\n     ///\n     /// This option is by default `false`\n     fn nonblock(&mut self, nonblock: bool) -> &mut Self;\n \n     /// Indicates whether `__WASI_FDFLAG_RSYNC` is passed in the `fs_flags`\n-    /// field of `__wasi_path_open`.\n+    /// field of `path_open`.\n     ///\n     /// This option is by default `false`\n     fn rsync(&mut self, rsync: bool) -> &mut Self;\n \n     /// Indicates whether `__WASI_FDFLAG_SYNC` is passed in the `fs_flags`\n-    /// field of `__wasi_path_open`.\n+    /// field of `path_open`.\n     ///\n     /// This option is by default `false`\n     fn sync(&mut self, sync: bool) -> &mut Self;\n \n     /// Indicates the value that should be passed in for the `fs_rights_base`\n-    /// parameter of `__wasi_path_open`.\n+    /// parameter of `path_open`.\n     ///\n     /// This option defaults based on the `read` and `write` configuration of\n     /// this `OpenOptions` builder. If this method is called, however, the\n     /// exact mask passed in will be used instead.\n     fn fs_rights_base(&mut self, rights: u64) -> &mut Self;\n \n     /// Indicates the value that should be passed in for the\n-    /// `fs_rights_inheriting` parameter of `__wasi_path_open`.\n+    /// `fs_rights_inheriting` parameter of `path_open`.\n     ///\n     /// The default for this option is the same value as what will be passed\n     /// for the `fs_rights_base` parameter but if this method is called then\n@@ -229,7 +221,7 @@ pub trait OpenOptionsExt {\n \n     /// Open a file or directory.\n     ///\n-    /// This corresponds to the `__wasi_path_open` syscall.\n+    /// This corresponds to the `path_open` syscall.\n     fn open_at<P: AsRef<Path>>(&self, file: &File, path: P) -> io::Result<File>;\n }\n \n@@ -284,38 +276,38 @@ impl OpenOptionsExt for OpenOptions {\n ///\n /// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n pub trait MetadataExt {\n-    /// Returns the `st_dev` field of the internal `__wasi_filestat_t`\n+    /// Returns the `st_dev` field of the internal `filestat_t`\n     fn dev(&self) -> u64;\n-    /// Returns the `st_ino` field of the internal `__wasi_filestat_t`\n+    /// Returns the `st_ino` field of the internal `filestat_t`\n     fn ino(&self) -> u64;\n-    /// Returns the `st_nlink` field of the internal `__wasi_filestat_t`\n-    fn nlink(&self) -> u32;\n-    /// Returns the `st_atim` field of the internal `__wasi_filestat_t`\n+    /// Returns the `st_nlink` field of the internal `filestat_t`\n+    fn nlink(&self) -> u64;\n+    /// Returns the `st_atim` field of the internal `filestat_t`\n     fn atim(&self) -> u64;\n-    /// Returns the `st_mtim` field of the internal `__wasi_filestat_t`\n+    /// Returns the `st_mtim` field of the internal `filestat_t`\n     fn mtim(&self) -> u64;\n-    /// Returns the `st_ctim` field of the internal `__wasi_filestat_t`\n+    /// Returns the `st_ctim` field of the internal `filestat_t`\n     fn ctim(&self) -> u64;\n }\n \n impl MetadataExt for fs::Metadata {\n     fn dev(&self) -> u64 {\n-        self.as_inner().as_wasi().st_dev\n+        self.as_inner().as_wasi().dev\n     }\n     fn ino(&self) -> u64 {\n-        self.as_inner().as_wasi().st_ino\n+        self.as_inner().as_wasi().ino\n     }\n-    fn nlink(&self) -> u32 {\n-        self.as_inner().as_wasi().st_nlink\n+    fn nlink(&self) -> u64 {\n+        self.as_inner().as_wasi().nlink\n     }\n     fn atim(&self) -> u64 {\n-        self.as_inner().as_wasi().st_atim\n+        self.as_inner().as_wasi().atim\n     }\n     fn mtim(&self) -> u64 {\n-        self.as_inner().as_wasi().st_mtim\n+        self.as_inner().as_wasi().mtim\n     }\n     fn ctim(&self) -> u64 {\n-        self.as_inner().as_wasi().st_ctim\n+        self.as_inner().as_wasi().ctim\n     }\n }\n \n@@ -355,7 +347,7 @@ impl FileTypeExt for fs::FileType {\n ///\n /// [`fs::DirEntry`]: ../../../../std/fs/struct.DirEntry.html\n pub trait DirEntryExt {\n-    /// Returns the underlying `d_ino` field of the `__wasi_dirent_t`\n+    /// Returns the underlying `d_ino` field of the `dirent_t`\n     fn ino(&self) -> u64;\n }\n \n@@ -367,7 +359,7 @@ impl DirEntryExt for fs::DirEntry {\n \n /// Create a hard link.\n ///\n-/// This corresponds to the `__wasi_path_link` syscall.\n+/// This corresponds to the `path_link` syscall.\n pub fn link<P: AsRef<Path>, U: AsRef<Path>>(\n     old_fd: &File,\n     old_flags: u32,\n@@ -377,38 +369,37 @@ pub fn link<P: AsRef<Path>, U: AsRef<Path>>(\n ) -> io::Result<()> {\n     old_fd.as_inner().fd().link(\n         old_flags,\n-        old_path.as_ref().as_os_str().as_bytes(),\n+        osstr2str(old_path.as_ref().as_ref())?,\n         new_fd.as_inner().fd(),\n-        new_path.as_ref().as_os_str().as_bytes(),\n+        osstr2str(new_path.as_ref().as_ref())?,\n     )\n }\n \n /// Rename a file or directory.\n ///\n-/// This corresponds to the `__wasi_path_rename` syscall.\n+/// This corresponds to the `path_rename` syscall.\n pub fn rename<P: AsRef<Path>, U: AsRef<Path>>(\n     old_fd: &File,\n     old_path: P,\n     new_fd: &File,\n     new_path: U,\n ) -> io::Result<()> {\n     old_fd.as_inner().fd().rename(\n-        old_path.as_ref().as_os_str().as_bytes(),\n+        osstr2str(old_path.as_ref().as_ref())?,\n         new_fd.as_inner().fd(),\n-        new_path.as_ref().as_os_str().as_bytes(),\n+        osstr2str(new_path.as_ref().as_ref())?,\n     )\n }\n \n /// Create a symbolic link.\n ///\n-/// This corresponds to the `__wasi_path_symlink` syscall.\n+/// This corresponds to the `path_symlink` syscall.\n pub fn symlink<P: AsRef<Path>, U: AsRef<Path>>(\n     old_path: P,\n     fd: &File,\n     new_path: U,\n ) -> io::Result<()> {\n-    fd.as_inner().fd().symlink(\n-        old_path.as_ref().as_os_str().as_bytes(),\n-        new_path.as_ref().as_os_str().as_bytes(),\n-    )\n+    fd.as_inner()\n+        .fd()\n+        .symlink(osstr2str(old_path.as_ref().as_ref())?, osstr2str(new_path.as_ref().as_ref())?)\n }"}, {"sha": "f678b71a2b9f08202ce2acc758e3c0ea73eac226", "filename": "src/libstd/sys/wasi/ext/io.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Fio.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -8,8 +8,6 @@ use crate::sys;\n use crate::net;\n use crate::sys_common::{AsInner, FromInner, IntoInner};\n \n-use ::wasi::wasi_unstable as wasi;\n-\n /// Raw file descriptors.\n pub type RawFd = u32;\n \n@@ -127,18 +125,18 @@ impl IntoRawFd for fs::File {\n \n impl AsRawFd for io::Stdin {\n     fn as_raw_fd(&self) -> RawFd {\n-        wasi::STDIN_FD\n+        sys::stdio::Stdin.as_raw_fd()\n     }\n }\n \n impl AsRawFd for io::Stdout {\n     fn as_raw_fd(&self) -> RawFd {\n-        wasi::STDOUT_FD\n+        sys::stdio::Stdout.as_raw_fd()\n     }\n }\n \n impl AsRawFd for io::Stderr {\n     fn as_raw_fd(&self) -> RawFd {\n-        wasi::STDERR_FD\n+        sys::stdio::Stderr.as_raw_fd()\n     }\n }"}, {"sha": "00327c1743c3db391497c47e61895ac44032b45e", "filename": "src/libstd/sys/wasi/fd.rs", "status": "modified", "additions": 52, "deletions": 70, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibstd%2Fsys%2Fwasi%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibstd%2Fsys%2Fwasi%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Ffd.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -1,40 +1,31 @@\n #![allow(dead_code)]\n \n+use super::err2io;\n use crate::io::{self, IoSlice, IoSliceMut, SeekFrom};\n use crate::mem;\n use crate::net::Shutdown;\n-use super::err2io;\n-use ::wasi::wasi_unstable as wasi;\n \n #[derive(Debug)]\n pub struct WasiFd {\n     fd: wasi::Fd,\n }\n \n-fn iovec<'a>(a: &'a mut [IoSliceMut<'_>]) -> &'a [wasi::IoVec] {\n-    assert_eq!(\n-        mem::size_of::<IoSliceMut<'_>>(),\n-        mem::size_of::<wasi::IoVec>()\n-    );\n-    assert_eq!(\n-        mem::align_of::<IoSliceMut<'_>>(),\n-        mem::align_of::<wasi::IoVec>()\n-    );\n+fn iovec<'a>(a: &'a mut [IoSliceMut<'_>]) -> &'a [wasi::Iovec] {\n+    assert_eq!(mem::size_of::<IoSliceMut<'_>>(), mem::size_of::<wasi::Iovec>());\n+    assert_eq!(mem::align_of::<IoSliceMut<'_>>(), mem::align_of::<wasi::Iovec>());\n     /// SAFETY: `IoSliceMut` and `IoVec` have exactly the same memory layout\n-    unsafe { mem::transmute(a) }\n+    unsafe {\n+        mem::transmute(a)\n+    }\n }\n \n-fn ciovec<'a>(a: &'a [IoSlice<'_>]) -> &'a [wasi::CIoVec] {\n-    assert_eq!(\n-        mem::size_of::<IoSlice<'_>>(),\n-        mem::size_of::<wasi::CIoVec>()\n-    );\n-    assert_eq!(\n-        mem::align_of::<IoSlice<'_>>(),\n-        mem::align_of::<wasi::CIoVec>()\n-    );\n+fn ciovec<'a>(a: &'a [IoSlice<'_>]) -> &'a [wasi::Ciovec] {\n+    assert_eq!(mem::size_of::<IoSlice<'_>>(), mem::size_of::<wasi::Ciovec>());\n+    assert_eq!(mem::align_of::<IoSlice<'_>>(), mem::align_of::<wasi::Ciovec>());\n     /// SAFETY: `IoSlice` and `CIoVec` have exactly the same memory layout\n-    unsafe { mem::transmute(a) }\n+    unsafe {\n+        mem::transmute(a)\n+    }\n }\n \n impl WasiFd {\n@@ -87,7 +78,7 @@ impl WasiFd {\n \n     // FIXME: __wasi_fd_fdstat_get\n \n-    pub fn set_flags(&self, flags: wasi::FdFlags) -> io::Result<()> {\n+    pub fn set_flags(&self, flags: wasi::Fdflags) -> io::Result<()> {\n         unsafe { wasi::fd_fdstat_set_flags(self.fd, flags).map_err(err2io) }\n     }\n \n@@ -107,31 +98,30 @@ impl WasiFd {\n         unsafe { wasi::fd_allocate(self.fd, offset, len).map_err(err2io) }\n     }\n \n-    pub fn create_directory(&self, path: &[u8]) -> io::Result<()> {\n+    pub fn create_directory(&self, path: &str) -> io::Result<()> {\n         unsafe { wasi::path_create_directory(self.fd, path).map_err(err2io) }\n     }\n \n     pub fn link(\n         &self,\n-        old_flags: wasi::LookupFlags,\n-        old_path: &[u8],\n+        old_flags: wasi::Lookupflags,\n+        old_path: &str,\n         new_fd: &WasiFd,\n-        new_path: &[u8],\n+        new_path: &str,\n     ) -> io::Result<()> {\n         unsafe {\n-            wasi::path_link(self.fd, old_flags, old_path, new_fd.fd, new_path)\n-                .map_err(err2io)\n+            wasi::path_link(self.fd, old_flags, old_path, new_fd.fd, new_path).map_err(err2io)\n         }\n     }\n \n     pub fn open(\n         &self,\n-        dirflags: wasi::LookupFlags,\n-        path: &[u8],\n-        oflags: wasi::OFlags,\n+        dirflags: wasi::Lookupflags,\n+        path: &str,\n+        oflags: wasi::Oflags,\n         fs_rights_base: wasi::Rights,\n         fs_rights_inheriting: wasi::Rights,\n-        fs_flags: wasi::FdFlags,\n+        fs_flags: wasi::Fdflags,\n     ) -> io::Result<WasiFd> {\n         unsafe {\n             wasi::path_open(\n@@ -142,37 +132,35 @@ impl WasiFd {\n                 fs_rights_base,\n                 fs_rights_inheriting,\n                 fs_flags,\n-            ).map(|fd| WasiFd::from_raw(fd)).map_err(err2io)\n+            )\n+            .map(|fd| WasiFd::from_raw(fd))\n+            .map_err(err2io)\n         }\n     }\n \n-    pub fn readdir(&self, buf: &mut [u8], cookie: wasi::DirCookie) -> io::Result<usize> {\n-        unsafe { wasi::fd_readdir(self.fd, buf, cookie).map_err(err2io) }\n+    pub fn readdir(&self, buf: &mut [u8], cookie: wasi::Dircookie) -> io::Result<usize> {\n+        unsafe { wasi::fd_readdir(self.fd, buf.as_mut_ptr(), buf.len(), cookie).map_err(err2io) }\n     }\n \n-    pub fn readlink(&self, path: &[u8], buf: &mut [u8]) -> io::Result<usize> {\n-        unsafe { wasi::path_readlink(self.fd, path, buf).map_err(err2io) }\n+    pub fn readlink(&self, path: &str, buf: &mut [u8]) -> io::Result<usize> {\n+        unsafe { wasi::path_readlink(self.fd, path, buf.as_mut_ptr(), buf.len()).map_err(err2io) }\n     }\n \n-    pub fn rename(&self, old_path: &[u8], new_fd: &WasiFd, new_path: &[u8]) -> io::Result<()> {\n-        unsafe {\n-            wasi::path_rename(self.fd, old_path, new_fd.fd, new_path).map_err(err2io)\n-        }\n+    pub fn rename(&self, old_path: &str, new_fd: &WasiFd, new_path: &str) -> io::Result<()> {\n+        unsafe { wasi::path_rename(self.fd, old_path, new_fd.fd, new_path).map_err(err2io) }\n     }\n \n-    pub fn filestat_get(&self) -> io::Result<wasi::FileStat> {\n+    pub fn filestat_get(&self) -> io::Result<wasi::Filestat> {\n         unsafe { wasi::fd_filestat_get(self.fd).map_err(err2io) }\n     }\n \n     pub fn filestat_set_times(\n         &self,\n         atim: wasi::Timestamp,\n         mtim: wasi::Timestamp,\n-        fstflags: wasi::FstFlags,\n+        fstflags: wasi::Fstflags,\n     ) -> io::Result<()> {\n-        unsafe {\n-            wasi::fd_filestat_set_times(self.fd, atim, mtim, fstflags).map_err(err2io)\n-        }\n+        unsafe { wasi::fd_filestat_set_times(self.fd, atim, mtim, fstflags).map_err(err2io) }\n     }\n \n     pub fn filestat_set_size(&self, size: u64) -> io::Result<()> {\n@@ -181,61 +169,55 @@ impl WasiFd {\n \n     pub fn path_filestat_get(\n         &self,\n-        flags: wasi::LookupFlags,\n-        path: &[u8],\n-    ) -> io::Result<wasi::FileStat> {\n+        flags: wasi::Lookupflags,\n+        path: &str,\n+    ) -> io::Result<wasi::Filestat> {\n         unsafe { wasi::path_filestat_get(self.fd, flags, path).map_err(err2io) }\n     }\n \n     pub fn path_filestat_set_times(\n         &self,\n-        flags: wasi::LookupFlags,\n-        path: &[u8],\n+        flags: wasi::Lookupflags,\n+        path: &str,\n         atim: wasi::Timestamp,\n         mtim: wasi::Timestamp,\n-        fstflags: wasi::FstFlags,\n+        fstflags: wasi::Fstflags,\n     ) -> io::Result<()> {\n         unsafe {\n-            wasi::path_filestat_set_times(\n-                self.fd,\n-                flags,\n-                path,\n-                atim,\n-                mtim,\n-                fstflags,\n-            ).map_err(err2io)\n+            wasi::path_filestat_set_times(self.fd, flags, path, atim, mtim, fstflags)\n+                .map_err(err2io)\n         }\n     }\n \n-    pub fn symlink(&self, old_path: &[u8], new_path: &[u8]) -> io::Result<()> {\n+    pub fn symlink(&self, old_path: &str, new_path: &str) -> io::Result<()> {\n         unsafe { wasi::path_symlink(old_path, self.fd, new_path).map_err(err2io) }\n     }\n \n-    pub fn unlink_file(&self, path: &[u8]) -> io::Result<()> {\n+    pub fn unlink_file(&self, path: &str) -> io::Result<()> {\n         unsafe { wasi::path_unlink_file(self.fd, path).map_err(err2io) }\n     }\n \n-    pub fn remove_directory(&self, path: &[u8]) -> io::Result<()> {\n+    pub fn remove_directory(&self, path: &str) -> io::Result<()> {\n         unsafe { wasi::path_remove_directory(self.fd, path).map_err(err2io) }\n     }\n \n     pub fn sock_recv(\n         &self,\n         ri_data: &mut [IoSliceMut<'_>],\n-        ri_flags: wasi::RiFlags,\n-    ) -> io::Result<(usize, wasi::RoFlags)> {\n+        ri_flags: wasi::Riflags,\n+    ) -> io::Result<(usize, wasi::Roflags)> {\n         unsafe { wasi::sock_recv(self.fd, iovec(ri_data), ri_flags).map_err(err2io) }\n     }\n \n-    pub fn sock_send(&self, si_data: &[IoSlice<'_>], si_flags: wasi::SiFlags) -> io::Result<usize> {\n+    pub fn sock_send(&self, si_data: &[IoSlice<'_>], si_flags: wasi::Siflags) -> io::Result<usize> {\n         unsafe { wasi::sock_send(self.fd, ciovec(si_data), si_flags).map_err(err2io) }\n     }\n \n     pub fn sock_shutdown(&self, how: Shutdown) -> io::Result<()> {\n         let how = match how {\n-            Shutdown::Read => wasi::SHUT_RD,\n-            Shutdown::Write => wasi::SHUT_WR,\n-            Shutdown::Both => wasi::SHUT_WR | wasi::SHUT_RD,\n+            Shutdown::Read => wasi::SDFLAGS_RD,\n+            Shutdown::Write => wasi::SDFLAGS_WR,\n+            Shutdown::Both => wasi::SDFLAGS_WR | wasi::SDFLAGS_RD,\n         };\n         unsafe { wasi::sock_shutdown(self.fd, how).map_err(err2io) }\n     }"}, {"sha": "fad092e35c3e6d751f71f300a0b6adbc5b3f90dd", "filename": "src/libstd/sys/wasi/fs.rs", "status": "modified", "additions": 90, "deletions": 121, "changes": 211, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -15,20 +15,18 @@ use crate::sys_common::FromInner;\n pub use crate::sys_common::fs::copy;\n pub use crate::sys_common::fs::remove_dir_all;\n \n-use ::wasi::wasi_unstable as wasi;\n-\n pub struct File {\n     fd: WasiFd,\n }\n \n #[derive(Clone)]\n pub struct FileAttr {\n-    meta: wasi::FileStat,\n+    meta: wasi::Filestat,\n }\n \n pub struct ReadDir {\n     inner: Arc<ReadDirInner>,\n-    cookie: Option<wasi::DirCookie>,\n+    cookie: Option<wasi::Dircookie>,\n     buf: Vec<u8>,\n     offset: usize,\n     cap: usize,\n@@ -49,9 +47,9 @@ pub struct DirEntry {\n pub struct OpenOptions {\n     read: bool,\n     write: bool,\n-    dirflags: wasi::LookupFlags,\n-    fdflags: wasi::FdFlags,\n-    oflags: wasi::OFlags,\n+    dirflags: wasi::Lookupflags,\n+    fdflags: wasi::Fdflags,\n+    oflags: wasi::Oflags,\n     rights_base: Option<wasi::Rights>,\n     rights_inheriting: Option<wasi::Rights>,\n }\n@@ -63,15 +61,15 @@ pub struct FilePermissions {\n \n #[derive(PartialEq, Eq, Hash, Debug, Copy, Clone)]\n pub struct FileType {\n-    bits: wasi::FileType,\n+    bits: wasi::Filetype,\n }\n \n #[derive(Debug)]\n pub struct DirBuilder {}\n \n impl FileAttr {\n     pub fn size(&self) -> u64 {\n-        self.meta.st_size\n+        self.meta.size\n     }\n \n     pub fn perm(&self) -> FilePermissions {\n@@ -80,24 +78,22 @@ impl FileAttr {\n     }\n \n     pub fn file_type(&self) -> FileType {\n-        FileType {\n-            bits: self.meta.st_filetype,\n-        }\n+        FileType { bits: self.meta.filetype }\n     }\n \n     pub fn modified(&self) -> io::Result<SystemTime> {\n-        Ok(SystemTime::from_wasi_timestamp(self.meta.st_mtim))\n+        Ok(SystemTime::from_wasi_timestamp(self.meta.mtim))\n     }\n \n     pub fn accessed(&self) -> io::Result<SystemTime> {\n-        Ok(SystemTime::from_wasi_timestamp(self.meta.st_atim))\n+        Ok(SystemTime::from_wasi_timestamp(self.meta.atim))\n     }\n \n     pub fn created(&self) -> io::Result<SystemTime> {\n-        Ok(SystemTime::from_wasi_timestamp(self.meta.st_ctim))\n+        Ok(SystemTime::from_wasi_timestamp(self.meta.ctim))\n     }\n \n-    pub fn as_wasi(&self) -> &wasi::FileStat {\n+    pub fn as_wasi(&self) -> &wasi::Filestat {\n         &self.meta\n     }\n }\n@@ -125,7 +121,7 @@ impl FileType {\n         self.bits == wasi::FILETYPE_SYMBOLIC_LINK\n     }\n \n-    pub fn bits(&self) -> wasi::FileType {\n+    pub fn bits(&self) -> wasi::Filetype {\n         self.bits\n     }\n }\n@@ -177,8 +173,7 @@ impl Iterator for ReadDir {\n                 continue;\n             }\n             let (dirent, data) = data.split_at(dirent_size);\n-            let dirent =\n-                unsafe { ptr::read_unaligned(dirent.as_ptr() as *const wasi::Dirent) };\n+            let dirent = unsafe { ptr::read_unaligned(dirent.as_ptr() as *const wasi::Dirent) };\n \n             // If the file name was truncated, then we need to reinvoke\n             // `readdir` so we truncate our buffer to start over and reread this\n@@ -224,17 +219,11 @@ impl DirEntry {\n     }\n \n     pub fn metadata(&self) -> io::Result<FileAttr> {\n-        metadata_at(\n-            &self.inner.dir.fd,\n-            0,\n-            OsStr::from_bytes(&self.name).as_ref(),\n-        )\n+        metadata_at(&self.inner.dir.fd, 0, OsStr::from_bytes(&self.name).as_ref())\n     }\n \n     pub fn file_type(&self) -> io::Result<FileType> {\n-        Ok(FileType {\n-            bits: self.meta.d_type,\n-        })\n+        Ok(FileType { bits: self.meta.d_type })\n     }\n \n     pub fn ino(&self) -> wasi::Inode {\n@@ -245,7 +234,7 @@ impl DirEntry {\n impl OpenOptions {\n     pub fn new() -> OpenOptions {\n         let mut base = OpenOptions::default();\n-        base.dirflags = wasi::LOOKUP_SYMLINK_FOLLOW;\n+        base.dirflags = wasi::LOOKUPFLAGS_SYMLINK_FOLLOW;\n         return base;\n     }\n \n@@ -258,23 +247,23 @@ impl OpenOptions {\n     }\n \n     pub fn truncate(&mut self, truncate: bool) {\n-        self.oflag(wasi::O_TRUNC, truncate);\n+        self.oflag(wasi::OFLAGS_TRUNC, truncate);\n     }\n \n     pub fn create(&mut self, create: bool) {\n-        self.oflag(wasi::O_CREAT, create);\n+        self.oflag(wasi::OFLAGS_CREAT, create);\n     }\n \n     pub fn create_new(&mut self, create_new: bool) {\n-        self.oflag(wasi::O_EXCL, create_new);\n-        self.oflag(wasi::O_CREAT, create_new);\n+        self.oflag(wasi::OFLAGS_EXCL, create_new);\n+        self.oflag(wasi::OFLAGS_CREAT, create_new);\n     }\n \n     pub fn directory(&mut self, directory: bool) {\n-        self.oflag(wasi::O_DIRECTORY, directory);\n+        self.oflag(wasi::OFLAGS_DIRECTORY, directory);\n     }\n \n-    fn oflag(&mut self, bit: wasi::OFlags, set: bool) {\n+    fn oflag(&mut self, bit: wasi::Oflags, set: bool) {\n         if set {\n             self.oflags |= bit;\n         } else {\n@@ -283,26 +272,26 @@ impl OpenOptions {\n     }\n \n     pub fn append(&mut self, set: bool) {\n-        self.fdflag(wasi::FDFLAG_APPEND, set);\n+        self.fdflag(wasi::FDFLAGS_APPEND, set);\n     }\n \n     pub fn dsync(&mut self, set: bool) {\n-        self.fdflag(wasi::FDFLAG_DSYNC, set);\n+        self.fdflag(wasi::FDFLAGS_DSYNC, set);\n     }\n \n     pub fn nonblock(&mut self, set: bool) {\n-        self.fdflag(wasi::FDFLAG_NONBLOCK, set);\n+        self.fdflag(wasi::FDFLAGS_NONBLOCK, set);\n     }\n \n     pub fn rsync(&mut self, set: bool) {\n-        self.fdflag(wasi::FDFLAG_RSYNC, set);\n+        self.fdflag(wasi::FDFLAGS_RSYNC, set);\n     }\n \n     pub fn sync(&mut self, set: bool) {\n-        self.fdflag(wasi::FDFLAG_SYNC, set);\n+        self.fdflag(wasi::FDFLAGS_SYNC, set);\n     }\n \n-    fn fdflag(&mut self, bit: wasi::FdFlags, set: bool) {\n+    fn fdflag(&mut self, bit: wasi::Fdflags, set: bool) {\n         if set {\n             self.fdflags |= bit;\n         } else {\n@@ -330,36 +319,36 @@ impl OpenOptions {\n         // based on that.\n         let mut base = 0;\n         if self.read {\n-            base |= wasi::RIGHT_FD_READ;\n-            base |= wasi::RIGHT_FD_READDIR;\n+            base |= wasi::RIGHTS_FD_READ;\n+            base |= wasi::RIGHTS_FD_READDIR;\n         }\n         if self.write {\n-            base |= wasi::RIGHT_FD_WRITE;\n-            base |= wasi::RIGHT_FD_DATASYNC;\n-            base |= wasi::RIGHT_FD_ALLOCATE;\n-            base |= wasi::RIGHT_FD_FILESTAT_SET_SIZE;\n+            base |= wasi::RIGHTS_FD_WRITE;\n+            base |= wasi::RIGHTS_FD_DATASYNC;\n+            base |= wasi::RIGHTS_FD_ALLOCATE;\n+            base |= wasi::RIGHTS_FD_FILESTAT_SET_SIZE;\n         }\n \n         // FIXME: some of these should probably be read-only or write-only...\n-        base |= wasi::RIGHT_FD_ADVISE;\n-        base |= wasi::RIGHT_FD_FDSTAT_SET_FLAGS;\n-        base |= wasi::RIGHT_FD_FILESTAT_SET_TIMES;\n-        base |= wasi::RIGHT_FD_SEEK;\n-        base |= wasi::RIGHT_FD_SYNC;\n-        base |= wasi::RIGHT_FD_TELL;\n-        base |= wasi::RIGHT_PATH_CREATE_DIRECTORY;\n-        base |= wasi::RIGHT_PATH_CREATE_FILE;\n-        base |= wasi::RIGHT_PATH_FILESTAT_GET;\n-        base |= wasi::RIGHT_PATH_LINK_SOURCE;\n-        base |= wasi::RIGHT_PATH_LINK_TARGET;\n-        base |= wasi::RIGHT_PATH_OPEN;\n-        base |= wasi::RIGHT_PATH_READLINK;\n-        base |= wasi::RIGHT_PATH_REMOVE_DIRECTORY;\n-        base |= wasi::RIGHT_PATH_RENAME_SOURCE;\n-        base |= wasi::RIGHT_PATH_RENAME_TARGET;\n-        base |= wasi::RIGHT_PATH_SYMLINK;\n-        base |= wasi::RIGHT_PATH_UNLINK_FILE;\n-        base |= wasi::RIGHT_POLL_FD_READWRITE;\n+        base |= wasi::RIGHTS_FD_ADVISE;\n+        base |= wasi::RIGHTS_FD_FDSTAT_SET_FLAGS;\n+        base |= wasi::RIGHTS_FD_FILESTAT_SET_TIMES;\n+        base |= wasi::RIGHTS_FD_SEEK;\n+        base |= wasi::RIGHTS_FD_SYNC;\n+        base |= wasi::RIGHTS_FD_TELL;\n+        base |= wasi::RIGHTS_PATH_CREATE_DIRECTORY;\n+        base |= wasi::RIGHTS_PATH_CREATE_FILE;\n+        base |= wasi::RIGHTS_PATH_FILESTAT_GET;\n+        base |= wasi::RIGHTS_PATH_LINK_SOURCE;\n+        base |= wasi::RIGHTS_PATH_LINK_TARGET;\n+        base |= wasi::RIGHTS_PATH_OPEN;\n+        base |= wasi::RIGHTS_PATH_READLINK;\n+        base |= wasi::RIGHTS_PATH_REMOVE_DIRECTORY;\n+        base |= wasi::RIGHTS_PATH_RENAME_SOURCE;\n+        base |= wasi::RIGHTS_PATH_RENAME_TARGET;\n+        base |= wasi::RIGHTS_PATH_SYMLINK;\n+        base |= wasi::RIGHTS_PATH_UNLINK_FILE;\n+        base |= wasi::RIGHTS_POLL_FD_READWRITE;\n \n         return base;\n     }\n@@ -368,14 +357,14 @@ impl OpenOptions {\n         self.rights_inheriting.unwrap_or_else(|| self.rights_base())\n     }\n \n-    pub fn lookup_flags(&mut self, flags: wasi::LookupFlags) {\n+    pub fn lookup_flags(&mut self, flags: wasi::Lookupflags) {\n         self.dirflags = flags;\n     }\n }\n \n impl File {\n     pub fn open(path: &Path, opts: &OpenOptions) -> io::Result<File> {\n-        let (dir, file) = open_parent(path, wasi::RIGHT_PATH_OPEN)?;\n+        let (dir, file) = open_parent(path, wasi::RIGHTS_PATH_OPEN)?;\n         open_at(&dir, &file, opts)\n     }\n \n@@ -387,11 +376,7 @@ impl File {\n         self.fd.filestat_get().map(|meta| FileAttr { meta })\n     }\n \n-    pub fn metadata_at(\n-        &self,\n-        flags: wasi::LookupFlags,\n-        path: &Path,\n-    ) -> io::Result<FileAttr> {\n+    pub fn metadata_at(&self, flags: wasi::Lookupflags, path: &Path) -> io::Result<FileAttr> {\n         metadata_at(&self.fd, flags, path)\n     }\n \n@@ -457,11 +442,7 @@ impl File {\n \n impl FromInner<u32> for File {\n     fn from_inner(fd: u32) -> File {\n-        unsafe {\n-            File {\n-                fd: WasiFd::from_raw(fd),\n-            }\n-        }\n+        unsafe { File { fd: WasiFd::from_raw(fd) } }\n     }\n }\n \n@@ -471,16 +452,14 @@ impl DirBuilder {\n     }\n \n     pub fn mkdir(&self, p: &Path) -> io::Result<()> {\n-        let (dir, file) = open_parent(p, wasi::RIGHT_PATH_CREATE_DIRECTORY)?;\n-        dir.create_directory(file.as_os_str().as_bytes())\n+        let (dir, file) = open_parent(p, wasi::RIGHTS_PATH_CREATE_DIRECTORY)?;\n+        dir.create_directory(osstr2str(file.as_ref())?)\n     }\n }\n \n impl fmt::Debug for File {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_struct(\"File\")\n-            .field(\"fd\", &self.fd.as_raw())\n-            .finish()\n+        f.debug_struct(\"File\").field(\"fd\", &self.fd.as_raw()).finish()\n     }\n }\n \n@@ -494,26 +473,19 @@ pub fn readdir(p: &Path) -> io::Result<ReadDir> {\n         buf: vec![0; 128],\n         offset: 0,\n         cap: 0,\n-        inner: Arc::new(ReadDirInner {\n-            dir,\n-            root: p.to_path_buf(),\n-        }),\n+        inner: Arc::new(ReadDirInner { dir, root: p.to_path_buf() }),\n     })\n }\n \n pub fn unlink(p: &Path) -> io::Result<()> {\n-    let (dir, file) = open_parent(p, wasi::RIGHT_PATH_UNLINK_FILE)?;\n-    dir.unlink_file(file.as_os_str().as_bytes())\n+    let (dir, file) = open_parent(p, wasi::RIGHTS_PATH_UNLINK_FILE)?;\n+    dir.unlink_file(osstr2str(file.as_ref())?)\n }\n \n pub fn rename(old: &Path, new: &Path) -> io::Result<()> {\n-    let (old, old_file) = open_parent(old, wasi::RIGHT_PATH_RENAME_SOURCE)?;\n-    let (new, new_file) = open_parent(new, wasi::RIGHT_PATH_RENAME_TARGET)?;\n-    old.rename(\n-        old_file.as_os_str().as_bytes(),\n-        &new,\n-        new_file.as_os_str().as_bytes(),\n-    )\n+    let (old, old_file) = open_parent(old, wasi::RIGHTS_PATH_RENAME_SOURCE)?;\n+    let (new, new_file) = open_parent(new, wasi::RIGHTS_PATH_RENAME_TARGET)?;\n+    old.rename(osstr2str(old_file.as_ref())?, &new, osstr2str(new_file.as_ref())?)\n }\n \n pub fn set_perm(_p: &Path, _perm: FilePermissions) -> io::Result<()> {\n@@ -523,12 +495,12 @@ pub fn set_perm(_p: &Path, _perm: FilePermissions) -> io::Result<()> {\n }\n \n pub fn rmdir(p: &Path) -> io::Result<()> {\n-    let (dir, file) = open_parent(p, wasi::RIGHT_PATH_REMOVE_DIRECTORY)?;\n-    dir.remove_directory(file.as_os_str().as_bytes())\n+    let (dir, file) = open_parent(p, wasi::RIGHTS_PATH_REMOVE_DIRECTORY)?;\n+    dir.remove_directory(osstr2str(file.as_ref())?)\n }\n \n pub fn readlink(p: &Path) -> io::Result<PathBuf> {\n-    let (dir, file) = open_parent(p, wasi::RIGHT_PATH_READLINK)?;\n+    let (dir, file) = open_parent(p, wasi::RIGHTS_PATH_READLINK)?;\n     read_link(&dir, &file)\n }\n \n@@ -549,7 +521,7 @@ fn read_link(fd: &WasiFd, file: &Path) -> io::Result<PathBuf> {\n     // Now that we have an initial guess of how big to make our buffer, call\n     // `readlink` in a loop until it fails or reports it filled fewer bytes than\n     // we asked for, indicating we got everything.\n-    let file = file.as_os_str().as_bytes();\n+    let file = osstr2str(file.as_ref())?;\n     let mut destination = vec![0u8; initial_size];\n     loop {\n         let len = fd.readlink(file, &mut destination)?;\n@@ -564,38 +536,34 @@ fn read_link(fd: &WasiFd, file: &Path) -> io::Result<PathBuf> {\n }\n \n pub fn symlink(src: &Path, dst: &Path) -> io::Result<()> {\n-    let (dst, dst_file) = open_parent(dst, wasi::RIGHT_PATH_SYMLINK)?;\n-    dst.symlink(src.as_os_str().as_bytes(), dst_file.as_os_str().as_bytes())\n+    let (dst, dst_file) = open_parent(dst, wasi::RIGHTS_PATH_SYMLINK)?;\n+    dst.symlink(osstr2str(src.as_ref())?, osstr2str(dst_file.as_ref())?)\n }\n \n pub fn link(src: &Path, dst: &Path) -> io::Result<()> {\n-    let (src, src_file) = open_parent(src, wasi::RIGHT_PATH_LINK_SOURCE)?;\n-    let (dst, dst_file) = open_parent(dst, wasi::RIGHT_PATH_LINK_TARGET)?;\n+    let (src, src_file) = open_parent(src, wasi::RIGHTS_PATH_LINK_SOURCE)?;\n+    let (dst, dst_file) = open_parent(dst, wasi::RIGHTS_PATH_LINK_TARGET)?;\n     src.link(\n-        wasi::LOOKUP_SYMLINK_FOLLOW,\n-        src_file.as_os_str().as_bytes(),\n+        wasi::LOOKUPFLAGS_SYMLINK_FOLLOW,\n+        osstr2str(src_file.as_ref())?,\n         &dst,\n-        dst_file.as_os_str().as_bytes(),\n+        osstr2str(dst_file.as_ref())?,\n     )\n }\n \n pub fn stat(p: &Path) -> io::Result<FileAttr> {\n-    let (dir, file) = open_parent(p, wasi::RIGHT_PATH_FILESTAT_GET)?;\n-    metadata_at(&dir, wasi::LOOKUP_SYMLINK_FOLLOW, &file)\n+    let (dir, file) = open_parent(p, wasi::RIGHTS_PATH_FILESTAT_GET)?;\n+    metadata_at(&dir, wasi::LOOKUPFLAGS_SYMLINK_FOLLOW, &file)\n }\n \n pub fn lstat(p: &Path) -> io::Result<FileAttr> {\n-    let (dir, file) = open_parent(p, wasi::RIGHT_PATH_FILESTAT_GET)?;\n+    let (dir, file) = open_parent(p, wasi::RIGHTS_PATH_FILESTAT_GET)?;\n     metadata_at(&dir, 0, &file)\n }\n \n-fn metadata_at(\n-    fd: &WasiFd,\n-    flags: wasi::LookupFlags,\n-    path: &Path,\n-) -> io::Result<FileAttr> {\n-    fd.path_filestat_get(flags, path.as_os_str().as_bytes())\n-        .map(|meta| FileAttr { meta })\n+fn metadata_at(fd: &WasiFd, flags: wasi::Lookupflags, path: &Path) -> io::Result<FileAttr> {\n+    let meta = fd.path_filestat_get(flags, osstr2str(path.as_ref())?)?;\n+    Ok(FileAttr { meta })\n }\n \n pub fn canonicalize(_p: &Path) -> io::Result<PathBuf> {\n@@ -607,7 +575,7 @@ pub fn canonicalize(_p: &Path) -> io::Result<PathBuf> {\n fn open_at(fd: &WasiFd, path: &Path, opts: &OpenOptions) -> io::Result<File> {\n     let fd = fd.open(\n         opts.dirflags,\n-        path.as_os_str().as_bytes(),\n+        osstr2str(path.as_ref())?,\n         opts.oflags,\n         opts.rights_base(),\n         opts.rights_inheriting(),\n@@ -643,10 +611,7 @@ fn open_at(fd: &WasiFd, path: &Path, opts: &OpenOptions) -> io::Result<File> {\n ///\n /// Note that this can fail if `p` doesn't look like it can be opened relative\n /// to any preopened file descriptor.\n-fn open_parent(\n-    p: &Path,\n-    rights: wasi::Rights,\n-) -> io::Result<(ManuallyDrop<WasiFd>, PathBuf)> {\n+fn open_parent(p: &Path, rights: wasi::Rights) -> io::Result<(ManuallyDrop<WasiFd>, PathBuf)> {\n     let p = CString::new(p.as_os_str().as_bytes())?;\n     unsafe {\n         let mut ret = ptr::null();\n@@ -671,3 +636,7 @@ fn open_parent(\n         return Ok((ManuallyDrop::new(WasiFd::from_raw(fd as u32)), path));\n     }\n }\n+\n+pub fn osstr2str(f: &OsStr) -> io::Result<&str> {\n+    f.to_str().ok_or_else(|| io::Error::new(io::ErrorKind::Other, \"input must be utf-8\"))\n+}"}, {"sha": "41a6e9783c0470285cc1ecbfde709e1055a18133", "filename": "src/libstd/sys/wasi/io.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibstd%2Fsys%2Fwasi%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibstd%2Fsys%2Fwasi%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fio.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -1,21 +1,18 @@\n use crate::marker::PhantomData;\n use crate::slice;\n \n-use ::wasi::wasi_unstable as wasi;\n-use core::ffi::c_void;\n-\n #[repr(transparent)]\n pub struct IoSlice<'a> {\n-    vec: wasi::CIoVec,\n+    vec: wasi::Ciovec,\n     _p: PhantomData<&'a [u8]>,\n }\n \n impl<'a> IoSlice<'a> {\n     #[inline]\n     pub fn new(buf: &'a [u8]) -> IoSlice<'a> {\n         IoSlice {\n-            vec: wasi::CIoVec {\n-                buf: buf.as_ptr() as *const c_void,\n+            vec: wasi::Ciovec {\n+                buf: buf.as_ptr(),\n                 buf_len: buf.len(),\n             },\n             _p: PhantomData,\n@@ -44,16 +41,16 @@ impl<'a> IoSlice<'a> {\n \n #[repr(transparent)]\n pub struct IoSliceMut<'a> {\n-    vec: wasi::IoVec,\n+    vec: wasi::Iovec,\n     _p: PhantomData<&'a mut [u8]>,\n }\n \n impl<'a> IoSliceMut<'a> {\n     #[inline]\n     pub fn new(buf: &'a mut [u8]) -> IoSliceMut<'a> {\n         IoSliceMut {\n-            vec: wasi::IoVec {\n-                buf: buf.as_mut_ptr() as *mut c_void,\n+            vec: wasi::Iovec {\n+                buf: buf.as_mut_ptr(),\n                 buf_len: buf.len()\n             },\n             _p: PhantomData,"}, {"sha": "83f98a19f4706f28fff6e334fc791840e57158e2", "filename": "src/libstd/sys/wasi/mod.rs", "status": "modified", "additions": 18, "deletions": 26, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibstd%2Fsys%2Fwasi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibstd%2Fsys%2Fwasi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fmod.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -17,7 +17,6 @@\n use crate::io as std_io;\n use crate::mem;\n use crate::os::raw::c_char;\n-use ::wasi::wasi_unstable as wasi;\n \n pub mod alloc;\n pub mod args;\n@@ -72,25 +71,21 @@ pub fn decode_error_kind(errno: i32) -> std_io::ErrorKind {\n     if errno > u16::max_value() as i32 || errno < 0 {\n         return Other;\n     }\n-    let code = match wasi::Error::new(errno as u16) {\n-        Some(code) => code,\n-        None => return Other,\n-    };\n-    match code {\n-        wasi::ECONNREFUSED => ConnectionRefused,\n-        wasi::ECONNRESET => ConnectionReset,\n-        wasi::EPERM | wasi::EACCES => PermissionDenied,\n-        wasi::EPIPE => BrokenPipe,\n-        wasi::ENOTCONN => NotConnected,\n-        wasi::ECONNABORTED => ConnectionAborted,\n-        wasi::EADDRNOTAVAIL => AddrNotAvailable,\n-        wasi::EADDRINUSE => AddrInUse,\n-        wasi::ENOENT => NotFound,\n-        wasi::EINTR => Interrupted,\n-        wasi::EINVAL => InvalidInput,\n-        wasi::ETIMEDOUT => TimedOut,\n-        wasi::EEXIST => AlreadyExists,\n-        wasi::EAGAIN => WouldBlock,\n+    match errno as u16 {\n+        wasi::ERRNO_CONNREFUSED => ConnectionRefused,\n+        wasi::ERRNO_CONNRESET => ConnectionReset,\n+        wasi::ERRNO_PERM | wasi::ERRNO_ACCES => PermissionDenied,\n+        wasi::ERRNO_PIPE => BrokenPipe,\n+        wasi::ERRNO_NOTCONN => NotConnected,\n+        wasi::ERRNO_CONNABORTED => ConnectionAborted,\n+        wasi::ERRNO_ADDRNOTAVAIL => AddrNotAvailable,\n+        wasi::ERRNO_ADDRINUSE => AddrInUse,\n+        wasi::ERRNO_NOENT => NotFound,\n+        wasi::ERRNO_INTR => Interrupted,\n+        wasi::ERRNO_INVAL => InvalidInput,\n+        wasi::ERRNO_TIMEDOUT => TimedOut,\n+        wasi::ERRNO_EXIST => AlreadyExists,\n+        wasi::ERRNO_AGAIN => WouldBlock,\n         _ => Other,\n     }\n }\n@@ -116,16 +111,13 @@ pub unsafe fn abort_internal() -> ! {\n pub fn hashmap_random_keys() -> (u64, u64) {\n     let mut ret = (0u64, 0u64);\n     unsafe {\n-        let base = &mut ret as *mut (u64, u64) as *mut core::ffi::c_void;\n+        let base = &mut ret as *mut (u64, u64) as *mut u8;\n         let len = mem::size_of_val(&ret);\n-        let ret = wasi::raw::__wasi_random_get(base, len);\n-        if ret != 0 {\n-            panic!(\"__wasi_random_get failure\")\n-        }\n+        wasi::random_get(base, len).expect(\"random_get failure\");\n     }\n     return ret\n }\n \n fn err2io(err: wasi::Error) -> std_io::Error {\n-    std_io::Error::from_raw_os_error(err.get() as i32)\n+    std_io::Error::from_raw_os_error(err.raw_error().into())\n }"}, {"sha": "1d53884f2d6b40a6779718ea4c0387777c90b6b5", "filename": "src/libstd/sys/wasi/stdio.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -2,8 +2,6 @@ use crate::io::{self, IoSlice, IoSliceMut};\n use crate::mem::ManuallyDrop;\n use crate::sys::fd::WasiFd;\n \n-use ::wasi::wasi_unstable as wasi;\n-\n pub struct Stdin;\n pub struct Stdout;\n pub struct Stderr;\n@@ -18,8 +16,11 @@ impl Stdin {\n     }\n \n     pub fn read_vectored(&self, data: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n-        ManuallyDrop::new(unsafe { WasiFd::from_raw(wasi::STDIN_FD) })\n-            .read(data)\n+        ManuallyDrop::new(unsafe { WasiFd::from_raw(self.as_raw_fd()) }).read(data)\n+    }\n+\n+    pub fn as_raw_fd(&self) -> u32 {\n+        0\n     }\n }\n \n@@ -33,13 +34,16 @@ impl Stdout {\n     }\n \n     pub fn write_vectored(&self, data: &[IoSlice<'_>]) -> io::Result<usize> {\n-        ManuallyDrop::new(unsafe { WasiFd::from_raw(wasi::STDOUT_FD) })\n-            .write(data)\n+        ManuallyDrop::new(unsafe { WasiFd::from_raw(self.as_raw_fd()) }).write(data)\n     }\n \n     pub fn flush(&self) -> io::Result<()> {\n         Ok(())\n     }\n+\n+    pub fn as_raw_fd(&self) -> u32 {\n+        1\n+    }\n }\n \n impl Stderr {\n@@ -52,13 +56,16 @@ impl Stderr {\n     }\n \n     pub fn write_vectored(&self, data: &[IoSlice<'_>]) -> io::Result<usize> {\n-        ManuallyDrop::new(unsafe { WasiFd::from_raw(wasi::STDERR_FD) })\n-            .write(data)\n+        ManuallyDrop::new(unsafe { WasiFd::from_raw(self.as_raw_fd()) }).write(data)\n     }\n \n     pub fn flush(&self) -> io::Result<()> {\n         Ok(())\n     }\n+\n+    pub fn as_raw_fd(&self) -> u32 {\n+        2\n+    }\n }\n \n impl io::Write for Stderr {\n@@ -74,7 +81,7 @@ impl io::Write for Stderr {\n pub const STDIN_BUF_SIZE: usize = crate::sys_common::io::DEFAULT_BUF_SIZE;\n \n pub fn is_ebadf(err: &io::Error) -> bool {\n-    err.raw_os_error() == Some(wasi::EBADF.get() as i32)\n+    err.raw_os_error() == Some(wasi::ERRNO_BADF.into())\n }\n \n pub fn panic_output() -> Option<impl io::Write> {"}, {"sha": "0986759b89b7cd13efeb8ca1f217a37d7bf05866", "filename": "src/libstd/sys/wasi/thread.rs", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibstd%2Fsys%2Fwasi%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibstd%2Fsys%2Fwasi%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fthread.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -4,22 +4,18 @@ use crate::mem;\n use crate::sys::{unsupported, Void};\n use crate::time::Duration;\n \n-use ::wasi::wasi_unstable as wasi;\n-\n pub struct Thread(Void);\n \n pub const DEFAULT_MIN_STACK_SIZE: usize = 4096;\n \n impl Thread {\n     // unsafe: see thread::Builder::spawn_unchecked for safety requirements\n-    pub unsafe fn new(_stack: usize, _p: Box<dyn FnOnce()>)\n-        -> io::Result<Thread>\n-    {\n+    pub unsafe fn new(_stack: usize, _p: Box<dyn FnOnce()>) -> io::Result<Thread> {\n         unsupported()\n     }\n \n     pub fn yield_now() {\n-        let ret = wasi::sched_yield();\n+        let ret = unsafe { wasi::sched_yield() };\n         debug_assert_eq!(ret, Ok(()));\n     }\n \n@@ -33,32 +29,30 @@ impl Thread {\n \n         const USERDATA: wasi::Userdata = 0x0123_45678;\n \n-        let clock = wasi::raw::__wasi_subscription_u_clock_t {\n-            identifier: 0,\n-            clock_id: wasi::CLOCK_MONOTONIC,\n+        let clock = wasi::SubscriptionClock {\n+            id: wasi::CLOCKID_MONOTONIC,\n             timeout: nanos as u64,\n             precision: 0,\n             flags: 0,\n         };\n \n-        let in_ = [wasi::Subscription {\n+        let in_ = wasi::Subscription {\n             userdata: USERDATA,\n-            type_: wasi::EVENTTYPE_CLOCK,\n-            u: wasi::raw::__wasi_subscription_u { clock: clock },\n-        }];\n-        let (res, event) = unsafe {\n-            let mut out: [wasi::Event; 1] = mem::zeroed();\n-            let res = wasi::poll_oneoff(&in_, &mut out);\n-            (res, out[0])\n+            r#type: wasi::EVENTTYPE_CLOCK,\n+            u: wasi::SubscriptionU { clock },\n         };\n-        match (res, event) {\n-            (Ok(1), wasi::Event {\n-                userdata: USERDATA,\n-                error: 0,\n-                type_: wasi::EVENTTYPE_CLOCK,\n-                ..\n-            }) => {}\n-            _ => panic!(\"thread::sleep(): unexpected result of poll_oneoff\"),\n+        unsafe {\n+            let mut event: wasi::Event = mem::zeroed();\n+            let res = wasi::poll_oneoff(&in_, &mut event, 1);\n+            match (res, event) {\n+                (\n+                    Ok(1),\n+                    wasi::Event {\n+                        userdata: USERDATA, error: 0, r#type: wasi::EVENTTYPE_CLOCK, ..\n+                    },\n+                ) => {}\n+                _ => panic!(\"thread::sleep(): unexpected result of poll_oneoff\"),\n+            }\n         }\n     }\n \n@@ -69,6 +63,10 @@ impl Thread {\n \n pub mod guard {\n     pub type Guard = !;\n-    pub unsafe fn current() -> Option<Guard> { None }\n-    pub unsafe fn init() -> Option<Guard> { None }\n+    pub unsafe fn current() -> Option<Guard> {\n+        None\n+    }\n+    pub unsafe fn init() -> Option<Guard> {\n+        None\n+    }\n }"}, {"sha": "80ec317b5a2c60520fc03c634455b24b0cf3aed9", "filename": "src/libstd/sys/wasi/time.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibstd%2Fsys%2Fwasi%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibstd%2Fsys%2Fwasi%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Ftime.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -1,5 +1,4 @@\n use crate::time::Duration;\n-use ::wasi::wasi_unstable as wasi;\n \n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n pub struct Instant(Duration);\n@@ -10,19 +9,18 @@ pub struct SystemTime(Duration);\n pub const UNIX_EPOCH: SystemTime = SystemTime(Duration::from_secs(0));\n \n fn current_time(clock: u32) -> Duration {\n-    let ts = wasi::clock_time_get(\n-        clock,\n-        1, // precision... seems ignored though?\n-    ).unwrap();\n-    Duration::new(\n-        (ts / 1_000_000_000) as u64,\n-        (ts % 1_000_000_000) as u32,\n-    )\n+    let ts = unsafe {\n+        wasi::clock_time_get(\n+            clock, 1, // precision... seems ignored though?\n+        )\n+        .unwrap()\n+    };\n+    Duration::new((ts / 1_000_000_000) as u64, (ts % 1_000_000_000) as u32)\n }\n \n impl Instant {\n     pub fn now() -> Instant {\n-        Instant(current_time(wasi::CLOCK_MONOTONIC))\n+        Instant(current_time(wasi::CLOCKID_MONOTONIC))\n     }\n \n     pub const fn zero() -> Instant {\n@@ -48,15 +46,14 @@ impl Instant {\n \n impl SystemTime {\n     pub fn now() -> SystemTime {\n-        SystemTime(current_time(wasi::CLOCK_REALTIME))\n+        SystemTime(current_time(wasi::CLOCKID_REALTIME))\n     }\n \n     pub fn from_wasi_timestamp(ts: wasi::Timestamp) -> SystemTime {\n         SystemTime(Duration::from_nanos(ts))\n     }\n \n-    pub fn sub_time(&self, other: &SystemTime)\n-                    -> Result<Duration, Duration> {\n+    pub fn sub_time(&self, other: &SystemTime) -> Result<Duration, Duration> {\n         self.0.checked_sub(other.0).ok_or_else(|| other.0 - self.0)\n     }\n "}, {"sha": "8a00bcbfe17c78016278ae061a747d1a441fc85a", "filename": "src/libsyntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2FCargo.toml?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -24,3 +24,4 @@ rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_macros = { path = \"../librustc_macros\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc_error_codes = { path = \"../librustc_error_codes\" }\n+rustc_session = { path = \"../librustc_session\" }"}, {"sha": "75ddf10514d97e3a8700f314e2ae8456574372d4", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 45, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -30,9 +30,8 @@ use crate::token::{self, DelimToken};\n use crate::tokenstream::{TokenStream, TokenTree, DelimSpan};\n \n use syntax_pos::symbol::{kw, sym, Symbol};\n-use syntax_pos::{Span, DUMMY_SP, ExpnId};\n+use syntax_pos::{Span, DUMMY_SP};\n \n-use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::thin_vec::ThinVec;\n@@ -268,46 +267,7 @@ impl ParenthesizedArgs {\n     }\n }\n \n-// hack to ensure that we don't try to access the private parts of `NodeId` in this module\n-mod node_id_inner {\n-    use rustc_index::vec::Idx;\n-    rustc_index::newtype_index! {\n-        pub struct NodeId {\n-            ENCODABLE = custom\n-            DEBUG_FORMAT = \"NodeId({})\"\n-        }\n-    }\n-}\n-\n-pub use node_id_inner::NodeId;\n-\n-impl NodeId {\n-    pub fn placeholder_from_expn_id(expn_id: ExpnId) -> Self {\n-        NodeId::from_u32(expn_id.as_u32())\n-    }\n-\n-    pub fn placeholder_to_expn_id(self) -> ExpnId {\n-        ExpnId::from_u32(self.as_u32())\n-    }\n-}\n-\n-impl fmt::Display for NodeId {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        fmt::Display::fmt(&self.as_u32(), f)\n-    }\n-}\n-\n-impl rustc_serialize::UseSpecializedEncodable for NodeId {\n-    fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_u32(self.as_u32())\n-    }\n-}\n-\n-impl rustc_serialize::UseSpecializedDecodable for NodeId {\n-    fn default_decode<D: Decoder>(d: &mut D) -> Result<NodeId, D::Error> {\n-        d.read_u32().map(NodeId::from_u32)\n-    }\n-}\n+pub use rustc_session::node_id::NodeId;\n \n /// `NodeId` used to represent the root of the crate.\n pub const CRATE_NODE_ID: NodeId = NodeId::from_u32_const(0);\n@@ -470,9 +430,7 @@ pub struct WhereEqPredicate {\n     pub rhs_ty: P<Ty>,\n }\n \n-/// The set of `MetaItem`s that define the compilation environment of the crate,\n-/// used to drive conditional compilation.\n-pub type CrateConfig = FxHashSet<(Name, Option<Symbol>)>;\n+pub use rustc_session::parse::CrateConfig;\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Crate {"}, {"sha": "2c32894a23b06a16a4c6c1673de3198be7d36306", "filename": "src/libsyntax/early_buffered_lints.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibsyntax%2Fearly_buffered_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibsyntax%2Fearly_buffered_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fearly_buffered_lints.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -3,28 +3,28 @@\n //! Since we cannot have a dependency on `librustc`, we implement some types here that are somewhat\n //! redundant. Later, these types can be converted to types for use by the rest of the compiler.\n \n-use crate::ast::NodeId;\n-use syntax_pos::MultiSpan;\n+use rustc_session::lint::FutureIncompatibleInfo;\n+use rustc_session::declare_lint;\n+pub use rustc_session::lint::BufferedEarlyLint;\n \n-/// Since we cannot import `LintId`s from `rustc::lint`, we define some Ids here which can later be\n-/// passed to `rustc::lint::Lint::from_parser_lint_id` to get a `rustc::lint::Lint`.\n-pub enum BufferedEarlyLintId {\n-    IllFormedAttributeInput,\n-    MetaVariableMisuse,\n-    IncompleteInclude,\n+declare_lint! {\n+    pub ILL_FORMED_ATTRIBUTE_INPUT,\n+    Deny,\n+    \"ill-formed attribute inputs that were previously accepted and used in practice\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #57571 <https://github.com/rust-lang/rust/issues/57571>\",\n+        edition: None,\n+    };\n }\n \n-/// Stores buffered lint info which can later be passed to `librustc`.\n-pub struct BufferedEarlyLint {\n-    /// The span of code that we are linting on.\n-   pub span: MultiSpan,\n-\n-   /// The lint message.\n-   pub msg: String,\n-\n-   /// The `NodeId` of the AST node that generated the lint.\n-   pub id: NodeId,\n+declare_lint! {\n+    pub META_VARIABLE_MISUSE,\n+    Allow,\n+    \"possible meta-variable misuse at macro definition\"\n+}\n \n-   /// A lint Id that can be passed to `rustc::lint::Lint::from_parser_lint_id`.\n-   pub lint_id: BufferedEarlyLintId,\n+declare_lint! {\n+    pub INCOMPLETE_INCLUDE,\n+    Deny,\n+    \"trailing content in included file\"\n }"}, {"sha": "a94742634cf17919e7f3378f391284896ef0f17f", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -102,7 +102,7 @@ pub mod ptr;\n pub mod show_span;\n pub use syntax_pos::edition;\n pub use syntax_pos::symbol;\n-pub mod sess;\n+pub use rustc_session::parse as sess;\n pub mod token;\n pub mod tokenstream;\n pub mod visit;"}, {"sha": "a4449ca5b1d22dfab1052f83f612259d56601a62", "filename": "src/libsyntax_expand/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibsyntax_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibsyntax_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fbase.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -924,7 +924,6 @@ impl<'a> ExtCtxt<'a> {\n     }\n     pub fn source_map(&self) -> &'a SourceMap { self.parse_sess.source_map() }\n     pub fn parse_sess(&self) -> &'a ParseSess { self.parse_sess }\n-    pub fn cfg(&self) -> &ast::CrateConfig { &self.parse_sess.config }\n     pub fn call_site(&self) -> Span {\n         self.current_expansion.id.expn_data().call_site\n     }"}, {"sha": "dfc8d699dbe8d0c00c64aad0d4c7c3f6e5e92e03", "filename": "src/libsyntax_expand/mbe/macro_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibsyntax_expand%2Fmbe%2Fmacro_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibsyntax_expand%2Fmbe%2Fmacro_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Fmacro_check.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -107,7 +107,7 @@\n use crate::mbe::{KleeneToken, TokenTree};\n \n use syntax::ast::NodeId;\n-use syntax::early_buffered_lints::BufferedEarlyLintId;\n+use syntax::early_buffered_lints::META_VARIABLE_MISUSE;\n use syntax::token::{DelimToken, Token, TokenKind};\n use syntax::sess::ParseSess;\n use syntax::symbol::{kw, sym};\n@@ -623,5 +623,5 @@ fn ops_is_prefix(\n }\n \n fn buffer_lint(sess: &ParseSess, span: MultiSpan, node_id: NodeId, message: &str) {\n-    sess.buffer_lint(BufferedEarlyLintId::MetaVariableMisuse, span, node_id, message);\n+    sess.buffer_lint(&META_VARIABLE_MISUSE, span, node_id, message);\n }"}, {"sha": "4aab68d7c0e8d8c2115fc7663591adc973c5e93a", "filename": "src/libsyntax_ext/source_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibsyntax_ext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Flibsyntax_ext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fsource_util.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -5,7 +5,7 @@ use syntax::ptr::P;\n use syntax::symbol::Symbol;\n use syntax::token;\n use syntax::tokenstream::TokenStream;\n-use syntax::early_buffered_lints::BufferedEarlyLintId;\n+use syntax::early_buffered_lints::INCOMPLETE_INCLUDE;\n use syntax_expand::panictry;\n use syntax_expand::base::{self, *};\n \n@@ -101,7 +101,7 @@ pub fn expand_include<'cx>(cx: &'cx mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n             let r = panictry!(self.p.parse_expr());\n             if self.p.token != token::Eof {\n                 self.p.sess.buffer_lint(\n-                    BufferedEarlyLintId::IncompleteInclude,\n+                    &INCOMPLETE_INCLUDE,\n                     self.p.token.span,\n                     ast::CRATE_NODE_ID,\n                     \"include macro expected single expression in source\","}, {"sha": "1cb123e674c452c945f6f33a3685634334ddb6e0", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -101,11 +101,13 @@ extern \"C\" LLVMPassRef LLVMRustCreateModuleAddressSanitizerPass(bool Recover) {\n }\n \n extern \"C\" LLVMPassRef LLVMRustCreateMemorySanitizerPass(int TrackOrigins, bool Recover) {\n-#if LLVM_VERSION_GE(8, 0)\n+#if LLVM_VERSION_GE(9, 0)\n   const bool CompileKernel = false;\n \n   return wrap(createMemorySanitizerLegacyPassPass(\n       MemorySanitizerOptions{TrackOrigins, Recover, CompileKernel}));\n+#elif LLVM_VERSION_GE(8, 0)\n+  return wrap(createMemorySanitizerLegacyPassPass(TrackOrigins, Recover));\n #else\n   return wrap(createMemorySanitizerPass(TrackOrigins, Recover));\n #endif\n@@ -393,7 +395,8 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n     bool TrapUnreachable,\n     bool Singlethread,\n     bool AsmComments,\n-    bool EmitStackSizeSection) {\n+    bool EmitStackSizeSection,\n+    bool RelaxELFRelocations) {\n \n   auto OptLevel = fromRust(RustOptLevel);\n   auto RM = fromRust(RustReloc);\n@@ -418,6 +421,7 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n   Options.MCOptions.AsmVerbose = AsmComments;\n   Options.MCOptions.PreserveAsmComments = AsmComments;\n   Options.MCOptions.ABIName = ABIStr;\n+  Options.RelaxELFRelocations = RelaxELFRelocations;\n \n   if (TrapUnreachable) {\n     // Tell LLVM to codegen `unreachable` into an explicit trap instruction.\n@@ -449,9 +453,7 @@ extern \"C\" void LLVMRustConfigurePassManagerBuilder(\n     LLVMPassManagerBuilderRef PMBR, LLVMRustCodeGenOptLevel OptLevel,\n     bool MergeFunctions, bool SLPVectorize, bool LoopVectorize, bool PrepareForThinLTO,\n     const char* PGOGenPath, const char* PGOUsePath) {\n-#if LLVM_VERSION_GE(7, 0)\n   unwrap(PMBR)->MergeFunctions = MergeFunctions;\n-#endif\n   unwrap(PMBR)->SLPVectorize = SLPVectorize;\n   unwrap(PMBR)->OptLevel = fromRust(OptLevel);\n   unwrap(PMBR)->LoopVectorize = LoopVectorize;\n@@ -558,12 +560,8 @@ LLVMRustWriteOutputFile(LLVMTargetMachineRef Target, LLVMPassManagerRef PMR,\n     return LLVMRustResult::Failure;\n   }\n \n-#if LLVM_VERSION_GE(7, 0)\n   buffer_ostream BOS(OS);\n   unwrap(Target)->addPassesToEmitFile(*PM, BOS, nullptr, FileType, false);\n-#else\n-  unwrap(Target)->addPassesToEmitFile(*PM, OS, FileType, false);\n-#endif\n   PM->run(*unwrap(M));\n \n   // Apparently `addPassesToEmitFile` adds a pointer to our on-the-stack output\n@@ -847,9 +845,7 @@ struct LLVMRustThinLTOData {\n   StringMap<FunctionImporter::ExportSetTy> ExportLists;\n   StringMap<GVSummaryMapTy> ModuleToDefinedGVSummaries;\n \n-#if LLVM_VERSION_GE(7, 0)\n   LLVMRustThinLTOData() : Index(/* HaveGVs = */ false) {}\n-#endif\n };\n \n // Just an argument to the `LLVMRustCreateThinLTOData` function below.\n@@ -920,7 +916,6 @@ LLVMRustCreateThinLTOData(LLVMRustThinLTOModule *modules,\n   // combined index\n   //\n   // This is copied from `lib/LTO/ThinLTOCodeGenerator.cpp`\n-#if LLVM_VERSION_GE(7, 0)\n   auto deadIsPrevailing = [&](GlobalValue::GUID G) {\n     return PrevailingType::Unknown;\n   };\n@@ -932,9 +927,6 @@ LLVMRustCreateThinLTOData(LLVMRustThinLTOModule *modules,\n                                   deadIsPrevailing, /* ImportEnabled = */ false);\n #else\n   computeDeadSymbols(Ret->Index, Ret->GUIDPreservedSymbols, deadIsPrevailing);\n-#endif\n-#else\n-  computeDeadSymbols(Ret->Index, Ret->GUIDPreservedSymbols);\n #endif\n   ComputeCrossModuleImport(\n     Ret->Index,"}, {"sha": "a83ba9a8f1308fddcfd8ae7ce4cc180e50a82fe2", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -88,11 +88,7 @@ extern \"C\" char *LLVMRustGetLastError(void) {\n }\n \n extern \"C\" unsigned int LLVMRustGetInstructionCount(LLVMModuleRef M) {\n-#if LLVM_VERSION_GE(7, 0)\n   return unwrap(M)->getInstructionCount();\n-#else\n-  report_fatal_error(\"Module::getInstructionCount not available before LLVM 7\");\n-#endif\n }\n \n extern \"C\" void LLVMRustSetLastError(const char *Err) {\n@@ -761,14 +757,10 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateVariantPart(\n     LLVMMetadataRef File, unsigned LineNumber, uint64_t SizeInBits,\n     uint32_t AlignInBits, LLVMRustDIFlags Flags, LLVMMetadataRef Discriminator,\n     LLVMMetadataRef Elements, const char *UniqueId) {\n-#if LLVM_VERSION_GE(7, 0)\n   return wrap(Builder->createVariantPart(\n       unwrapDI<DIDescriptor>(Scope), Name, unwrapDI<DIFile>(File), LineNumber,\n       SizeInBits, AlignInBits, fromRust(Flags), unwrapDI<DIDerivedType>(Discriminator),\n       DINodeArray(unwrapDI<MDTuple>(Elements)), UniqueId));\n-#else\n-  abort();\n-#endif\n }\n \n extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateMemberType(\n@@ -787,7 +779,6 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateVariantMemberType(\n     const char *Name, LLVMMetadataRef File, unsigned LineNo, uint64_t SizeInBits,\n     uint32_t AlignInBits, uint64_t OffsetInBits, LLVMValueRef Discriminant,\n     LLVMRustDIFlags Flags, LLVMMetadataRef Ty) {\n-#if LLVM_VERSION_GE(7, 0)\n   llvm::ConstantInt* D = nullptr;\n   if (Discriminant) {\n     D = unwrap<llvm::ConstantInt>(Discriminant);\n@@ -796,12 +787,6 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateVariantMemberType(\n                                                unwrapDI<DIFile>(File), LineNo,\n                                                SizeInBits, AlignInBits, OffsetInBits, D,\n                                                fromRust(Flags), unwrapDI<DIType>(Ty)));\n-#else\n-  return wrap(Builder->createMemberType(unwrapDI<DIDescriptor>(Scope), Name,\n-                                        unwrapDI<DIFile>(File), LineNo,\n-                                        SizeInBits, AlignInBits, OffsetInBits,\n-                                        fromRust(Flags), unwrapDI<DIType>(Ty)));\n-#endif\n }\n \n extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateLexicalBlock(\n@@ -911,18 +896,10 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateEnumerationType(\n     LLVMMetadataRef File, unsigned LineNumber, uint64_t SizeInBits,\n     uint32_t AlignInBits, LLVMMetadataRef Elements,\n     LLVMMetadataRef ClassTy, bool IsScoped) {\n-#if LLVM_VERSION_GE(7, 0)\n   return wrap(Builder->createEnumerationType(\n       unwrapDI<DIDescriptor>(Scope), Name, unwrapDI<DIFile>(File), LineNumber,\n       SizeInBits, AlignInBits, DINodeArray(unwrapDI<MDTuple>(Elements)),\n       unwrapDI<DIType>(ClassTy), \"\", IsScoped));\n-#else\n-  // Ignore IsScoped on older LLVM.\n-  return wrap(Builder->createEnumerationType(\n-      unwrapDI<DIDescriptor>(Scope), Name, unwrapDI<DIFile>(File), LineNumber,\n-      SizeInBits, AlignInBits, DINodeArray(unwrapDI<MDTuple>(Elements)),\n-      unwrapDI<DIType>(ClassTy), \"\"));\n-#endif\n }\n \n extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateUnionType(\n@@ -1275,34 +1252,20 @@ extern \"C\" LLVMValueRef LLVMRustBuildMemCpy(LLVMBuilderRef B,\n                                             LLVMValueRef Dst, unsigned DstAlign,\n                                             LLVMValueRef Src, unsigned SrcAlign,\n                                             LLVMValueRef Size, bool IsVolatile) {\n-#if LLVM_VERSION_GE(7, 0)\n   return wrap(unwrap(B)->CreateMemCpy(\n       unwrap(Dst), DstAlign,\n       unwrap(Src), SrcAlign,\n       unwrap(Size), IsVolatile));\n-#else\n-  unsigned Align = std::min(DstAlign, SrcAlign);\n-  return wrap(unwrap(B)->CreateMemCpy(\n-      unwrap(Dst), unwrap(Src),\n-      unwrap(Size), Align, IsVolatile));\n-#endif\n }\n \n extern \"C\" LLVMValueRef LLVMRustBuildMemMove(LLVMBuilderRef B,\n                                              LLVMValueRef Dst, unsigned DstAlign,\n                                              LLVMValueRef Src, unsigned SrcAlign,\n                                              LLVMValueRef Size, bool IsVolatile) {\n-#if LLVM_VERSION_GE(7, 0)\n   return wrap(unwrap(B)->CreateMemMove(\n       unwrap(Dst), DstAlign,\n       unwrap(Src), SrcAlign,\n       unwrap(Size), IsVolatile));\n-#else\n-  unsigned Align = std::min(DstAlign, SrcAlign);\n-  return wrap(unwrap(B)->CreateMemMove(\n-      unwrap(Dst), unwrap(Src),\n-      unwrap(Size), Align, IsVolatile));\n-#endif\n }\n \n extern \"C\" LLVMValueRef"}, {"sha": "72447fbc079dd7a81db0a77d6ad2f1246e7d976b", "filename": "src/test/codegen/align-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fcodegen%2Falign-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fcodegen%2Falign-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Falign-enum.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -1,6 +1,5 @@\n // compile-flags: -C no-prepopulate-passes\n // ignore-tidy-linelength\n-// min-llvm-version 7.0\n \n #![crate_type = \"lib\"]\n "}, {"sha": "5e290323907d052708e55612d59aeda844c66848", "filename": "src/test/codegen/align-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fcodegen%2Falign-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fcodegen%2Falign-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Falign-struct.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -1,6 +1,5 @@\n // compile-flags: -C no-prepopulate-passes\n // ignore-tidy-linelength\n-// min-llvm-version 7.0\n \n #![crate_type = \"lib\"]\n "}, {"sha": "7d65ad1435e121d8502e03a99897e8e67df98b3f", "filename": "src/test/codegen/consts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fcodegen%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fcodegen%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fconsts.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -1,6 +1,5 @@\n // compile-flags: -C no-prepopulate-passes\n // ignore-tidy-linelength\n-// min-llvm-version 7.0\n \n #![crate_type = \"lib\"]\n "}, {"sha": "f3f5202206cedce800fde14a03ef8b279f053fa1", "filename": "src/test/codegen/packed.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fcodegen%2Fpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fcodegen%2Fpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpacked.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -1,6 +1,5 @@\n // ignore-tidy-linelength\n // compile-flags: -C no-prepopulate-passes\n-// min-llvm-version 7.0\n \n #![crate_type = \"lib\"]\n "}, {"sha": "99f3464c0768d9b9ad096488fcb706b8523dd712", "filename": "src/test/codegen/repeat-trusted-len.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -1,6 +1,5 @@\n // compile-flags: -O\n // ignore-tidy-linelength\n-// min-llvm-version 7.0\n \n #![crate_type = \"lib\"]\n "}, {"sha": "4e0abed78cd642032cfad4158424b756293eeefb", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-minmax.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-minmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-minmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-minmax.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -1,5 +1,3 @@\n-// min-llvm-version 7.0\n-\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "4ea003e99ad28b915564f928be5b2f00bf88345e", "filename": "src/test/codegen/stores.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fcodegen%2Fstores.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fcodegen%2Fstores.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstores.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -1,6 +1,5 @@\n // compile-flags: -C no-prepopulate-passes\n // ignore-tidy-linelength\n-// min-llvm-version 7.0\n \n #![crate_type = \"lib\"]\n "}, {"sha": "d2702894842840ab18e08865719f1ebbf33270df", "filename": "src/test/run-make-fulldeps/emit-stack-sizes/Makefile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Frun-make-fulldeps%2Femit-stack-sizes%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Frun-make-fulldeps%2Femit-stack-sizes%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Femit-stack-sizes%2FMakefile?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -2,7 +2,6 @@\n \n # ignore-windows\n # ignore-macos\n-# min-llvm-version 6.0\n #\n # This feature only works when the output object format is ELF so we ignore\n # macOS and Windows"}, {"sha": "e9ef58f29a8f57837539bacb0a13b54854dc8d0e", "filename": "src/test/ui-fulldeps/auxiliary/issue-40001-plugin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -1,8 +1,8 @@\n #![feature(box_syntax, plugin, plugin_registrar, rustc_private)]\n #![crate_type = \"dylib\"]\n \n-#[macro_use]\n-extern crate rustc;\n+#[macro_use] extern crate rustc;\n+#[macro_use] extern crate rustc_session;\n extern crate rustc_driver;\n extern crate syntax;\n "}, {"sha": "118ba1711191b3f086b9fe5dc73efb62c9d92ba4", "filename": "src/test/ui-fulldeps/auxiliary/lint-for-crate-rpass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate-rpass.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -2,8 +2,8 @@\n \n #![feature(plugin_registrar, rustc_private)]\n #![feature(box_syntax)]\n-\n #[macro_use] extern crate rustc;\n+#[macro_use] extern crate rustc_session;\n extern crate rustc_driver;\n extern crate syntax;\n "}, {"sha": "49ca43d471ba932b24a50b7673c190a9397c7aa9", "filename": "src/test/ui-fulldeps/auxiliary/lint-for-crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-for-crate.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -4,6 +4,7 @@\n #![feature(box_syntax)]\n \n #[macro_use] extern crate rustc;\n+#[macro_use] extern crate rustc_session;\n extern crate rustc_driver;\n extern crate syntax;\n "}, {"sha": "839c65a6107556af69d37f45bec30c96ba7da701", "filename": "src/test/ui-fulldeps/auxiliary/lint-group-plugin-test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-group-plugin-test.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -4,8 +4,8 @@\n #![feature(box_syntax, rustc_private)]\n \n // Load rustc as a plugin to get macros.\n-#[macro_use]\n-extern crate rustc;\n+#[macro_use] extern crate rustc;\n+#[macro_use] extern crate rustc_session;\n extern crate rustc_driver;\n \n use rustc::hir;"}, {"sha": "bb96dba21fc2ee6c92594c5601f5be1ec4da8515", "filename": "src/test/ui-fulldeps/auxiliary/lint-plugin-test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-plugin-test.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -6,8 +6,8 @@\n extern crate syntax;\n \n // Load rustc as a plugin to get macros\n-#[macro_use]\n-extern crate rustc;\n+#[macro_use] extern crate rustc;\n+#[macro_use] extern crate rustc_session;\n extern crate rustc_driver;\n \n use rustc::lint::{EarlyContext, LintContext, LintPass, EarlyLintPass, LintArray};"}, {"sha": "170490981379794306608a1f633e6b62db4a6511", "filename": "src/test/ui-fulldeps/auxiliary/lint-tool-test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint-tool-test.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -4,8 +4,8 @@\n extern crate syntax;\n \n // Load rustc as a plugin to get macros\n-#[macro_use]\n-extern crate rustc;\n+#[macro_use] extern crate rustc;\n+#[macro_use] extern crate rustc_session;\n extern crate rustc_driver;\n \n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass, LintId};"}, {"sha": "7ce2a1dd9a62dfe780d8d69d15c0b5733fe8459e", "filename": "src/test/ui-fulldeps/internal-lints/lint_pass_impl_without_macro.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -4,9 +4,11 @@\n #![deny(rustc::lint_pass_impl_without_macro)]\n \n extern crate rustc;\n+extern crate rustc_session;\n \n use rustc::lint::{LintArray, LintPass};\n-use rustc::{declare_lint, declare_lint_pass, impl_lint_pass};\n+use rustc::{declare_lint_pass, impl_lint_pass};\n+use rustc_session::declare_lint;\n \n declare_lint! {\n     pub TEST_LINT,"}, {"sha": "ad8670c6c83c8b92bbec2074738abbad9e608608", "filename": "src/test/ui-fulldeps/internal-lints/lint_pass_impl_without_macro.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -1,5 +1,5 @@\n error: implementing `LintPass` by hand\n-  --> $DIR/lint_pass_impl_without_macro.rs:19:6\n+  --> $DIR/lint_pass_impl_without_macro.rs:21:6\n    |\n LL | impl LintPass for Foo {\n    |      ^^^^^^^^\n@@ -12,7 +12,7 @@ LL | #![deny(rustc::lint_pass_impl_without_macro)]\n    = help: try using `declare_lint_pass!` or `impl_lint_pass!` instead\n \n error: implementing `LintPass` by hand\n-  --> $DIR/lint_pass_impl_without_macro.rs:29:14\n+  --> $DIR/lint_pass_impl_without_macro.rs:31:14\n    |\n LL |         impl LintPass for Custom {\n    |              ^^^^^^^^"}, {"sha": "612b795eb5cd0a0a5fab14a720e84cbb20cbfee4", "filename": "src/test/ui/consts/issue-66787.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fui%2Fconsts%2Fissue-66787.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fui%2Fconsts%2Fissue-66787.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66787.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -0,0 +1,39 @@\n+// build-pass\n+// compile-flags: --crate-type lib\n+\n+// Regression test for ICE which occurred when const propagating an enum with three variants\n+// one of which is uninhabited.\n+\n+pub enum ApiError {}\n+#[allow(dead_code)]\n+pub struct TokioError {\n+    b: bool,\n+}\n+pub enum Error {\n+    Api {\n+        source: ApiError,\n+    },\n+    Ethereum,\n+    Tokio {\n+        source: TokioError,\n+    },\n+}\n+struct Api;\n+impl IntoError<Error> for Api\n+{\n+    type Source = ApiError;\n+    fn into_error(self, error: Self::Source) -> Error {\n+        Error::Api {\n+            source: (|v| v)(error),\n+        }\n+    }\n+}\n+\n+pub trait IntoError<E>\n+{\n+    /// The underlying error\n+    type Source;\n+\n+    /// Combine the information to produce the error\n+    fn into_error(self, source: Self::Source) -> E;\n+}"}, {"sha": "5f0aa11af5fb8db540b5869bbd3796f9369c73c0", "filename": "src/test/ui/simd/simd-intrinsic-float-minmax.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-float-minmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-float-minmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-float-minmax.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // ignore-emscripten\n-// min-llvm-version 7.0\n \n // Test that the simd_f{min,max} intrinsics produce the correct results.\n "}, {"sha": "2d51cab675e00bb134a6f474b7e0f19adadaecbe", "filename": "src/test/ui/target-feature/gate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.rs?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -25,7 +25,6 @@\n // gate-test-movbe_target_feature\n // gate-test-rtm_target_feature\n // gate-test-f16c_target_feature\n-// min-llvm-version 6.0\n \n #[target_feature(enable = \"avx512bw\")]\n //~^ ERROR: currently unstable"}, {"sha": "423a893e88f5e179e78a8e2404f49a537ddffaf7", "filename": "src/test/ui/target-feature/gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.stderr?ref=7afe6d9d1f48b998cc88fe6f01ba0082788ba4b9", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: the target feature `avx512bw` is currently unstable\n-  --> $DIR/gate.rs:30:18\n+  --> $DIR/gate.rs:29:18\n    |\n LL | #[target_feature(enable = \"avx512bw\")]\n    |                  ^^^^^^^^^^^^^^^^^^^"}]}