{"sha": "113f17be6ee55c749ce1bba3d268099be4749e46", "node_id": "C_kwDOAAsO6NoAKDExM2YxN2JlNmVlNTVjNzQ5Y2UxYmJhM2QyNjgwOTliZTQ3NDllNDY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-21T20:38:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-21T20:38:57Z"}, "message": "Auto merge of #13818 - Veykril:layout, r=Veykril\n\nSimplify", "tree": {"sha": "04a8a85f784cde7cd42c4a36bf82b5109b8270c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04a8a85f784cde7cd42c4a36bf82b5109b8270c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/113f17be6ee55c749ce1bba3d268099be4749e46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/113f17be6ee55c749ce1bba3d268099be4749e46", "html_url": "https://github.com/rust-lang/rust/commit/113f17be6ee55c749ce1bba3d268099be4749e46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/113f17be6ee55c749ce1bba3d268099be4749e46/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2840c809ac129e1358ab93189405e682695dd65", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2840c809ac129e1358ab93189405e682695dd65", "html_url": "https://github.com/rust-lang/rust/commit/c2840c809ac129e1358ab93189405e682695dd65"}, {"sha": "8f8200eb14bb409d5e94240dea911c0734070211", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f8200eb14bb409d5e94240dea911c0734070211", "html_url": "https://github.com/rust-lang/rust/commit/8f8200eb14bb409d5e94240dea911c0734070211"}], "stats": {"total": 113, "additions": 9, "deletions": 104}, "files": [{"sha": "275b77ce4ae4cf5d2f9936a9380d3ba41e03a90e", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/113f17be6ee55c749ce1bba3d268099be4749e46/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/113f17be6ee55c749ce1bba3d268099be4749e46/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=113f17be6ee55c749ce1bba3d268099be4749e46", "patch": "@@ -586,9 +586,9 @@ dependencies = [\n \n [[package]]\n name = \"hkalbasi-rustc-ap-rustc_abi\"\n-version = \"0.0.20221125\"\n+version = \"0.0.20221221\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"29c8368a30e518c0102d670d8515f7d424d875ee615ec7a7b6d29217b57a0371\"\n+checksum = \"adabaadad9aa7576f97af02241cdf5554d62fb3d51a84cb05d77ba28edd3013f\"\n dependencies = [\n  \"bitflags\",\n  \"hkalbasi-rustc-ap-rustc_index\",\n@@ -597,9 +597,9 @@ dependencies = [\n \n [[package]]\n name = \"hkalbasi-rustc-ap-rustc_index\"\n-version = \"0.0.20221125\"\n+version = \"0.0.20221221\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c07bba80d7f6a8e1efb0f3e2115ef1eecbf97292dc8cad84e4982226b9aa12e2\"\n+checksum = \"f4d3c48474e09afb0f5efbd6f758e05411699301a113c47d454d28ec7059d00e\"\n dependencies = [\n  \"arrayvec\",\n  \"smallvec\","}, {"sha": "698be76656cced2914a26fccdbefd86bc8f4196e", "filename": "crates/hir-def/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/113f17be6ee55c749ce1bba3d268099be4749e46/crates%2Fhir-def%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/113f17be6ee55c749ce1bba3d268099be4749e46/crates%2Fhir-def%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2FCargo.toml?ref=113f17be6ee55c749ce1bba3d268099be4749e46", "patch": "@@ -33,8 +33,8 @@ base-db = { path = \"../base-db\", version = \"0.0.0\" }\n syntax = { path = \"../syntax\", version = \"0.0.0\" }\n profile = { path = \"../profile\", version = \"0.0.0\" }\n hir-expand = { path = \"../hir-expand\", version = \"0.0.0\" }\n-rustc_abi = { version = \"0.0.20221125\", package = \"hkalbasi-rustc-ap-rustc_abi\", default-features = false }\n-rustc_index = { version = \"0.0.20221125\", package = \"hkalbasi-rustc-ap-rustc_index\", default-features = false }\n+rustc_abi = { version = \"0.0.20221221\", package = \"hkalbasi-rustc-ap-rustc_abi\", default-features = false }\n+rustc_index = { version = \"0.0.20221221\", package = \"hkalbasi-rustc-ap-rustc_index\", default-features = false }\n mbe = { path = \"../mbe\", version = \"0.0.0\" }\n cfg = { path = \"../cfg\", version = \"0.0.0\" }\n tt = { path = \"../tt\", version = \"0.0.0\" }"}, {"sha": "c72199c37fe767ae0cb68aa19df258d0613e0696", "filename": "crates/hir-ty/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/113f17be6ee55c749ce1bba3d268099be4749e46/crates%2Fhir-ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/113f17be6ee55c749ce1bba3d268099be4749e46/crates%2Fhir-ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2FCargo.toml?ref=113f17be6ee55c749ce1bba3d268099be4749e46", "patch": "@@ -25,7 +25,7 @@ chalk-derive = \"0.88.0\"\n la-arena = { version = \"0.3.0\", path = \"../../lib/la-arena\" }\n once_cell = \"1.15.0\"\n typed-arena = \"2.0.1\"\n-rustc_index = { version = \"0.0.20221125\", package = \"hkalbasi-rustc-ap-rustc_index\", default-features = false }\n+rustc_index = { version = \"0.0.20221221\", package = \"hkalbasi-rustc-ap-rustc_index\", default-features = false }\n \n stdx = { path = \"../stdx\", version = \"0.0.0\" }\n hir-def = { path = \"../hir-def\", version = \"0.0.0\" }"}, {"sha": "37b831652f565a4a28a4989dc49a0c5307d245a0", "filename": "crates/hir-ty/src/layout/target.rs", "status": "modified", "additions": 2, "deletions": 97, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/113f17be6ee55c749ce1bba3d268099be4749e46/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftarget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113f17be6ee55c749ce1bba3d268099be4749e46/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftarget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftarget.rs?ref=113f17be6ee55c749ce1bba3d268099be4749e46", "patch": "@@ -3,20 +3,18 @@\n use std::sync::Arc;\n \n use base_db::CrateId;\n-use hir_def::layout::{TargetDataLayout, TargetDataLayoutErrors};\n+use hir_def::layout::{Endian, Size, TargetDataLayout};\n \n use crate::db::HirDatabase;\n \n-use hir_def::layout::{AbiAndPrefAlign, AddressSpace, Align, Endian, Size};\n-\n pub fn target_data_layout_query(db: &dyn HirDatabase, krate: CrateId) -> Arc<TargetDataLayout> {\n     let crate_graph = db.crate_graph();\n     let target_layout = &crate_graph[krate].target_layout;\n     let cfg_options = &crate_graph[krate].cfg_options;\n     Arc::new(\n         target_layout\n             .as_ref()\n-            .and_then(|it| parse_from_llvm_datalayout_string(it).ok())\n+            .and_then(|it| TargetDataLayout::parse_from_llvm_datalayout_string(it).ok())\n             .unwrap_or_else(|| {\n                 let endian = match cfg_options.get_cfg_values(\"target_endian\").next() {\n                     Some(x) if x.as_str() == \"big\" => Endian::Big,\n@@ -36,96 +34,3 @@ pub fn target_data_layout_query(db: &dyn HirDatabase, krate: CrateId) -> Arc<Tar\n             }),\n     )\n }\n-\n-/// copied from rustc as it is not exposed yet\n-fn parse_from_llvm_datalayout_string<'a>(\n-    input: &'a str,\n-) -> Result<TargetDataLayout, TargetDataLayoutErrors<'a>> {\n-    // Parse an address space index from a string.\n-    let parse_address_space = |s: &'a str, cause: &'a str| {\n-        s.parse::<u32>().map(AddressSpace).map_err(|err| {\n-            TargetDataLayoutErrors::InvalidAddressSpace { addr_space: s, cause, err }\n-        })\n-    };\n-\n-    // Parse a bit count from a string.\n-    let parse_bits = |s: &'a str, kind: &'a str, cause: &'a str| {\n-        s.parse::<u64>().map_err(|err| TargetDataLayoutErrors::InvalidBits {\n-            kind,\n-            bit: s,\n-            cause,\n-            err,\n-        })\n-    };\n-\n-    // Parse a size string.\n-    let size = |s: &'a str, cause: &'a str| parse_bits(s, \"size\", cause).map(Size::from_bits);\n-\n-    // Parse an alignment string.\n-    let align = |s: &[&'a str], cause: &'a str| {\n-        if s.is_empty() {\n-            return Err(TargetDataLayoutErrors::MissingAlignment { cause });\n-        }\n-        let align_from_bits = |bits| {\n-            Align::from_bits(bits)\n-                .map_err(|err| TargetDataLayoutErrors::InvalidAlignment { cause, err })\n-        };\n-        let abi = parse_bits(s[0], \"alignment\", cause)?;\n-        let pref = s.get(1).map_or(Ok(abi), |pref| parse_bits(pref, \"alignment\", cause))?;\n-        Ok(AbiAndPrefAlign { abi: align_from_bits(abi)?, pref: align_from_bits(pref)? })\n-    };\n-\n-    let mut dl = TargetDataLayout::default();\n-    let mut i128_align_src = 64;\n-    for spec in input.split('-') {\n-        let spec_parts = spec.split(':').collect::<Vec<_>>();\n-\n-        match &*spec_parts {\n-            [\"e\"] => dl.endian = Endian::Little,\n-            [\"E\"] => dl.endian = Endian::Big,\n-            [p] if p.starts_with('P') => {\n-                dl.instruction_address_space = parse_address_space(&p[1..], \"P\")?\n-            }\n-            [\"a\", ref a @ ..] => dl.aggregate_align = align(a, \"a\")?,\n-            [\"f32\", ref a @ ..] => dl.f32_align = align(a, \"f32\")?,\n-            [\"f64\", ref a @ ..] => dl.f64_align = align(a, \"f64\")?,\n-            [p @ \"p\", s, ref a @ ..] | [p @ \"p0\", s, ref a @ ..] => {\n-                dl.pointer_size = size(s, p)?;\n-                dl.pointer_align = align(a, p)?;\n-            }\n-            [s, ref a @ ..] if s.starts_with('i') => {\n-                let Ok(bits) = s[1..].parse::<u64>() else {\n-                    size(&s[1..], \"i\")?; // For the user error.\n-                    continue;\n-                };\n-                let a = align(a, s)?;\n-                match bits {\n-                    1 => dl.i1_align = a,\n-                    8 => dl.i8_align = a,\n-                    16 => dl.i16_align = a,\n-                    32 => dl.i32_align = a,\n-                    64 => dl.i64_align = a,\n-                    _ => {}\n-                }\n-                if bits >= i128_align_src && bits <= 128 {\n-                    // Default alignment for i128 is decided by taking the alignment of\n-                    // largest-sized i{64..=128}.\n-                    i128_align_src = bits;\n-                    dl.i128_align = a;\n-                }\n-            }\n-            [s, ref a @ ..] if s.starts_with('v') => {\n-                let v_size = size(&s[1..], \"v\")?;\n-                let a = align(a, s)?;\n-                if let Some(v) = dl.vector_align.iter_mut().find(|v| v.0 == v_size) {\n-                    v.1 = a;\n-                    continue;\n-                }\n-                // No existing entry, add a new one.\n-                dl.vector_align.push((v_size, a));\n-            }\n-            _ => {} // Ignore everything else.\n-        }\n-    }\n-    Ok(dl)\n-}"}]}