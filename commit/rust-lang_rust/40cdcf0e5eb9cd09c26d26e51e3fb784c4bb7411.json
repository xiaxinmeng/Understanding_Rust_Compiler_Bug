{"sha": "40cdcf0e5eb9cd09c26d26e51e3fb784c4bb7411", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwY2RjZjBlNWViOWNkMDljMjZkMjZlNTFlM2ZiNzg0YzRiYjc0MTE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-13T12:53:25Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-13T12:53:25Z"}, "message": "Remove one usage of force_stack", "tree": {"sha": "c4bce634aa5db585640da012fe365843a1710da3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4bce634aa5db585640da012fe365843a1710da3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40cdcf0e5eb9cd09c26d26e51e3fb784c4bb7411", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40cdcf0e5eb9cd09c26d26e51e3fb784c4bb7411", "html_url": "https://github.com/rust-lang/rust/commit/40cdcf0e5eb9cd09c26d26e51e3fb784c4bb7411", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40cdcf0e5eb9cd09c26d26e51e3fb784c4bb7411/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8daca65e47e9b93e75511e30cab53249d680990e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8daca65e47e9b93e75511e30cab53249d680990e", "html_url": "https://github.com/rust-lang/rust/commit/8daca65e47e9b93e75511e30cab53249d680990e"}], "stats": {"total": 89, "additions": 50, "deletions": 39}, "files": [{"sha": "12edbfdbe3fcb34622d7a524dc2b10c3806a6bab", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/40cdcf0e5eb9cd09c26d26e51e3fb784c4bb7411/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cdcf0e5eb9cd09c26d26e51e3fb784c4bb7411/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=40cdcf0e5eb9cd09c26d26e51e3fb784c4bb7411", "patch": "@@ -632,28 +632,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n         };\n \n         transmute, (c from) {\n-            assert_eq!(from.layout().size, ret.layout().size);\n-            if from.layout().ty.kind == ret.layout().ty.kind {\n-                ret.write_cvalue(fx, from);\n-            } else if let (Some(src_ty), Some(dst_ty)) = (fx.clif_type(from.layout().ty), fx.clif_type(ret.layout().ty)) {\n-                let from = from.load_scalar(fx);\n-                let val = match (src_ty, dst_ty) {\n-                    (_, _) if src_ty == dst_ty => from,\n-                    (types::I32, types::F32) | (types::F32, types::I32)\n-                    | (types::I64, types::F64) | (types::F64, types::I64) => {\n-                        fx.bcx.ins().bitcast(dst_ty, from)\n-                    }\n-                    (_, _) if src_ty.is_vector() && dst_ty.is_vector() => {\n-                        fx.bcx.ins().raw_bitcast(dst_ty, from)\n-                    }\n-                    _ => unreachable!(\"{:?} -> {:?}\", src_ty, dst_ty),\n-                };\n-                ret.write_cvalue(fx, CValue::by_val(val, ret.layout()));\n-            } else {\n-                let (addr, meta) = from.force_stack(fx);\n-                assert!(meta.is_none());\n-                ret.write_cvalue(fx, CValue::by_ref(addr, ret.layout()));\n-            }\n+            ret.write_cvalue_transmute(fx, from);\n         };\n         write_bytes, (c dst, v val, v count) {\n             let pointee_ty = dst.layout().ty.builtin_deref(true).unwrap().ty;"}, {"sha": "5a0e2ee268be969b2dc2730ec1497091169023ff", "filename": "src/value_and_place.rs", "status": "modified", "additions": 49, "deletions": 17, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/40cdcf0e5eb9cd09c26d26e51e3fb784c4bb7411/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40cdcf0e5eb9cd09c26d26e51e3fb784c4bb7411/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=40cdcf0e5eb9cd09c26d26e51e3fb784c4bb7411", "patch": "@@ -360,22 +360,6 @@ impl<'tcx> CPlace<'tcx> {\n     }\n \n     pub(crate) fn write_cvalue(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>, from: CValue<'tcx>) {\n-        #[cfg(debug_assertions)]\n-        {\n-            use cranelift_codegen::cursor::{Cursor, CursorPosition};\n-            let cur_block = match fx.bcx.cursor().position() {\n-                CursorPosition::After(block) => block,\n-                _ => unreachable!(),\n-            };\n-            fx.add_comment(\n-                fx.bcx.func.layout.last_inst(cur_block).unwrap(),\n-                format!(\"write_cvalue: {:?}: {:?} <- {:?}: {:?}\", self.inner(), self.layout().ty, from.0, from.layout().ty),\n-            );\n-        }\n-\n-        let from_ty = from.layout().ty;\n-        let to_ty = self.layout().ty;\n-\n         fn assert_assignable<'tcx>(\n             fx: &FunctionCx<'_, 'tcx, impl Backend>,\n             from_ty: Ty<'tcx>,\n@@ -436,12 +420,60 @@ impl<'tcx> CPlace<'tcx> {\n             }\n         }\n \n-        assert_assignable(fx, from_ty, to_ty);\n+        assert_assignable(fx, from.layout().ty, self.layout().ty);\n+\n+        self.write_cvalue_maybe_transmute(fx, from, \"write_cvalue\");\n+    }\n+\n+    pub(crate) fn write_cvalue_transmute(\n+        self,\n+        fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+        from: CValue<'tcx>,\n+    ) {\n+        self.write_cvalue_maybe_transmute(fx, from, \"write_cvalue_transmute\");\n+    }\n+\n+    fn write_cvalue_maybe_transmute(\n+        self,\n+        fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+        from: CValue<'tcx>,\n+        #[cfg_attr(not(debug_assertions), allow(unused_variables))]\n+        method: &'static str,\n+    ) {\n+        assert_eq!(self.layout().size, from.layout().size);\n+\n+        #[cfg(debug_assertions)]\n+        {\n+            use cranelift_codegen::cursor::{Cursor, CursorPosition};\n+            let cur_block = match fx.bcx.cursor().position() {\n+                CursorPosition::After(block) => block,\n+                _ => unreachable!(),\n+            };\n+            fx.add_comment(\n+                fx.bcx.func.layout.last_inst(cur_block).unwrap(),\n+                format!(\"{}: {:?}: {:?} <- {:?}: {:?}\", method, self.inner(), self.layout().ty, from.0, from.layout().ty),\n+            );\n+        }\n \n         let dst_layout = self.layout();\n         let to_ptr = match self.inner {\n             CPlaceInner::Var(var) => {\n                 let data = from.load_scalar(fx);\n+                let src_ty = fx.bcx.func.dfg.value_type(data);\n+                let dst_ty = fx.clif_type(self.layout().ty).unwrap();\n+                let data = match (src_ty, dst_ty) {\n+                    (_, _) if src_ty == dst_ty => data,\n+\n+                    // This is a `write_cvalue_transmute`.\n+                    (types::I32, types::F32) | (types::F32, types::I32)\n+                    | (types::I64, types::F64) | (types::F64, types::I64) => {\n+                        fx.bcx.ins().bitcast(dst_ty, data)\n+                    }\n+                    _ if src_ty.is_vector() && dst_ty.is_vector() => {\n+                        fx.bcx.ins().raw_bitcast(dst_ty, data)\n+                    }\n+                    _ => unreachable!(\"write_cvalue_transmute: {:?} -> {:?}\", src_ty, dst_ty),\n+                };\n                 fx.bcx.set_val_label(data, cranelift_codegen::ir::ValueLabel::from_u32(var.as_u32()));\n                 fx.bcx.def_var(mir_var(var), data);\n                 return;"}]}