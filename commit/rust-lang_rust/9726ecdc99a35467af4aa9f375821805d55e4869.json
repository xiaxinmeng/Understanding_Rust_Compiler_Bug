{"sha": "9726ecdc99a35467af4aa9f375821805d55e4869", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MjZlY2RjOTlhMzU0NjdhZjRhYTlmMzc1ODIxODA1ZDU1ZTQ4Njk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2017-12-22T13:56:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2017-12-22T13:56:22Z"}, "message": "Add an example", "tree": {"sha": "d2cbd6ce7b1640042acf79912be61da00fbf82cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2cbd6ce7b1640042acf79912be61da00fbf82cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9726ecdc99a35467af4aa9f375821805d55e4869", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9726ecdc99a35467af4aa9f375821805d55e4869", "html_url": "https://github.com/rust-lang/rust/commit/9726ecdc99a35467af4aa9f375821805d55e4869", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9726ecdc99a35467af4aa9f375821805d55e4869/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ff019c25f027be1bf2896ce82659dc8d99515f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ff019c25f027be1bf2896ce82659dc8d99515f8", "html_url": "https://github.com/rust-lang/rust/commit/6ff019c25f027be1bf2896ce82659dc8d99515f8"}], "stats": {"total": 81, "additions": 78, "deletions": 3}, "files": [{"sha": "009892ca91eaa8b41983be5515cf3dd360127b3e", "filename": "minirust.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9726ecdc99a35467af4aa9f375821805d55e4869/minirust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9726ecdc99a35467af4aa9f375821805d55e4869/minirust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/minirust.rs?ref=9726ecdc99a35467af4aa9f375821805d55e4869", "patch": "@@ -66,3 +66,20 @@ impl<'f> Iterator for Children<'f> {\n         next\n     }\n }\n+\n+\n+\n+pub const ERROR: NodeKind = NodeKind(0);\n+pub const WHITESPACE: NodeKind = NodeKind(1);\n+pub const STRUCT_KW: NodeKind = NodeKind(2);\n+pub const IDENT: NodeKind = NodeKind(3);\n+pub const L_CURLY: NodeKind = NodeKind(4);\n+pub const R_CURLY: NodeKind = NodeKind(5);\n+pub const COLON: NodeKind = NodeKind(6);\n+pub const COMMA: NodeKind = NodeKind(7);\n+pub const AMP: NodeKind = NodeKind(8);\n+pub const LINE_COMMENT: NodeKind = NodeKind(9);\n+pub const FILE: NodeKind = NodeKind(10);\n+pub const STRUCT_DEF: NodeKind = NodeKind(11);\n+pub const FIELD_DEF: NodeKind = NodeKind(12);\n+pub const TYPE: NodeKind = NodeKind(13);"}, {"sha": "dfba7cb2c1d0761120a99479172c0cfa2f4d0c6d", "filename": "rfc.md", "status": "modified", "additions": 61, "deletions": 3, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/9726ecdc99a35467af4aa9f375821805d55e4869/rfc.md", "raw_url": "https://github.com/rust-lang/rust/raw/9726ecdc99a35467af4aa9f375821805d55e4869/rfc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rfc.md?ref=9726ecdc99a35467af4aa9f375821805d55e4869", "patch": "@@ -83,7 +83,8 @@ source code because, for example, it's important to preserve comments\n during refactorings. Ideally, IDEs should be able to incrementally\n relex and reparse the file as the user types, because syntax tree is\n necessary to correctly handle certain code-editing actions like\n-autoindentation or joining lines.\n+autoindentation or joining lines. IDE also must be able to produce\n+partial parse trees when some input is missing or invalid.\n \n Currently rustc uses the AST approach, which preserves the source code\n information to some extent by storing spans in the AST.\n@@ -117,12 +118,69 @@ the actual data about identifier names, constant values etc.\n All nodes in the tree are of the same type and store a constant for\n the syntactic category of the element and a range in the source code.\n \n-Here is a minimal implementation of this data structure:\n+Here is a minimal implementation of this data structure with some Rust\n+syntactic categories\n \n \n-```Rust\n+```rust\n ```\n \n+Here is a rust snippet and the corresponding parse tree:\n+\n+```rust\n+struct Foo {\n+    field1: u32,\n+    &\n+    // non-doc comment\n+    field2:\n+}\n+```\n+\n+\n+```\n+FILE\n+  STRUCT_DEF\n+    STRUCT_KW\n+\tWHITESPACE\n+\tIDENT\n+\tWHITESPACE\n+\tL_CURLY\n+\tWHITESPACE\n+\tFIELD_DEF\n+\t  IDENT\n+\t  COLON\n+\t  WHITESPACE\n+\t  TYPE\n+\t    IDENT\n+\tCOMMA\n+\tWHITESPACE\n+\tERROR\n+\t  AMP\n+\tWHITESPACE\n+\tFIELD_DEF\n+\t  LINE_COMMENT\n+\t  WHITESPACE\n+\t  IDENT\n+\t  COLON\n+\t  ERROR\n+\tWHITESPACE\n+\tR_CURLY\n+```\n+\n+Note several features of the tree:\n+\n+* All whitespace and comments are explicitly accounted for.\n+\n+* The node for `STRUCT_DEF` contains the error element for `&`, but\n+  still represents the following field correctly.\n+  \n+* The second field of the struct is incomplete: `FIELD_DEF` node for\n+  it contains an `ERROR` element, but nevertheless has the correct\n+  `NodeKind`.\n+  \n+* The non-documenting comment is correctly attached to the following\n+  field.\n+\n \n \n # Drawbacks"}]}