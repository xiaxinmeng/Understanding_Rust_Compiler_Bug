{"sha": "e8cf5f366263533bd739c4dda9bc8a57ec55b8b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4Y2Y1ZjM2NjI2MzUzM2JkNzM5YzRkZGE5YmM4YTU3ZWM1NWI4Yjk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-04-23T22:36:35Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-04-23T22:54:49Z"}, "message": "Clean up closure type mismatch errors", "tree": {"sha": "5b4657166d9888979d51f7a29d3f7a86709c9a17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b4657166d9888979d51f7a29d3f7a86709c9a17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8cf5f366263533bd739c4dda9bc8a57ec55b8b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8cf5f366263533bd739c4dda9bc8a57ec55b8b9", "html_url": "https://github.com/rust-lang/rust/commit/e8cf5f366263533bd739c4dda9bc8a57ec55b8b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8cf5f366263533bd739c4dda9bc8a57ec55b8b9/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bd4b5c6db1468235f730bce403bf657123ecc57", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bd4b5c6db1468235f730bce403bf657123ecc57", "html_url": "https://github.com/rust-lang/rust/commit/2bd4b5c6db1468235f730bce403bf657123ecc57"}], "stats": {"total": 181, "additions": 173, "deletions": 8}, "files": [{"sha": "6f9d9817a447c4fd331c5220591a2c18bc2fc140", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8cf5f366263533bd739c4dda9bc8a57ec55b8b9/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cf5f366263533bd739c4dda9bc8a57ec55b8b9/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=e8cf5f366263533bd739c4dda9bc8a57ec55b8b9", "patch": "@@ -1850,4 +1850,6 @@ register_diagnostics! {\n     E0495, // cannot infer an appropriate lifetime due to conflicting requirements\n     E0566, // conflicting representation hints\n     E0587, // conflicting packed and align representation hints\n+    E0593, // closure argument count mismatch\n+    E0594  // closure mismatch\n }"}, {"sha": "dc7e18f8172a33b940883429c572acb4f1a168e0", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 58, "deletions": 8, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/e8cf5f366263533bd739c4dda9bc8a57ec55b8b9/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cf5f366263533bd739c4dda9bc8a57ec55b8b9/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=e8cf5f366263533bd739c4dda9bc8a57ec55b8b9", "patch": "@@ -35,7 +35,7 @@ use rustc::lint::builtin::EXTRA_REQUIREMENT_IN_IMPL;\n use std::fmt;\n use syntax::ast::{self, NodeId};\n use ty::{self, AdtKind, ToPredicate, ToPolyTraitRef, Ty, TyCtxt, TypeFoldable, TyInfer, TyVar};\n-use ty::error::ExpectedFound;\n+use ty::error::{ExpectedFound, TypeError};\n use ty::fast_reject;\n use ty::fold::TypeFolder;\n use ty::subst::Subst;\n@@ -663,13 +663,63 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 if actual_trait_ref.self_ty().references_error() {\n                     return;\n                 }\n-                struct_span_err!(self.tcx.sess, span, E0281,\n-                    \"type mismatch: the type `{}` implements the trait `{}`, \\\n-                     but the trait `{}` is required ({})\",\n-                    expected_trait_ref.self_ty(),\n-                    expected_trait_ref,\n-                    actual_trait_ref,\n-                    e)\n+                let expected_trait_ty = expected_trait_ref.self_ty();\n+                if expected_trait_ty.is_closure() {\n+                    if let &TypeError::TupleSize(ref expected_found) = e {\n+                        let mut err = struct_span_err!(self.tcx.sess, span, E0593,\n+                            \"closure takes {} parameter{} but {} parameter{} are required here\",\n+                            expected_found.found,\n+                            if expected_found.found == 1 { \"\" } else { \"s\" },\n+                            expected_found.expected,\n+                            if expected_found.expected == 1 { \"\" } else { \"s\" });\n+\n+                        err.span_label(span, &format!(\"expected closure that takes {} parameter{}\",\n+                                                      expected_found.expected,\n+                                                      if expected_found.expected == 1 {\n+                                                          \"\"\n+                                                      } else {\n+                                                          \"s\"\n+                                                      }));\n+                        let closure_span = expected_trait_ty.ty_to_def_id().and_then(|did| {\n+                            self.tcx.hir.span_if_local(did)\n+                        });\n+                        if let Some(span) = closure_span {\n+                            err.span_label(span, &format!(\"takes {} parameter{}\",\n+                                                          expected_found.found,\n+                                                          if expected_found.found == 1 {\n+                                                              \"\"\n+                                                          } else {\n+                                                              \"s\"\n+                                                          }));\n+                        }\n+                        err\n+                    } else {\n+                        let mut err = struct_span_err!(self.tcx.sess, span, E0594,\n+                            \"closure mismatch: `{}` implements the trait `{}`, \\\n+                             but the trait `{}` is required\",\n+                            expected_trait_ty,\n+                            expected_trait_ref,\n+                            actual_trait_ref);\n+\n+                        let closure_span = expected_trait_ty.ty_to_def_id().and_then(|did| {\n+                            self.tcx.hir.span_if_local(did)\n+                        });\n+                        if let Some(span) = closure_span {\n+                            err.span_label(span, &format!(\"{}\", e));\n+                        } else {\n+                            err.note(&format!(\"{}\", e));\n+                        }\n+                        err\n+                    }\n+                } else {\n+                    struct_span_err!(self.tcx.sess, span, E0281,\n+                        \"type mismatch: the type `{}` implements the trait `{}`, \\\n+                         but the trait `{}` is required ({})\",\n+                        expected_trait_ty,\n+                        expected_trait_ref,\n+                        actual_trait_ref,\n+                        e)\n+                }\n             }\n \n             TraitNotObjectSafe(did) => {"}, {"sha": "be56ac48d3eeac9b21929be62fe0b994b4ff0e26", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e8cf5f366263533bd739c4dda9bc8a57ec55b8b9/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cf5f366263533bd739c4dda9bc8a57ec55b8b9/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=e8cf5f366263533bd739c4dda9bc8a57ec55b8b9", "patch": "@@ -68,6 +68,15 @@ pub enum BoundRegion {\n     BrEnv,\n }\n \n+impl BoundRegion {\n+    pub fn is_named(&self) -> bool {\n+        match *self {\n+            BoundRegion::BrNamed(..) => true,\n+            _ => false,\n+        }\n+    }\n+}\n+\n /// When a region changed from late-bound to early-bound when #32330\n /// was fixed, its `RegionParameterDef` will have one of these\n /// structures that we can use to give nicer errors.\n@@ -1193,6 +1202,13 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n+    pub fn is_closure(&self) -> bool {\n+        match self.sty {\n+            TyClosure(..) => true,\n+            _ => false,\n+        }\n+    }\n+\n     pub fn is_integral(&self) -> bool {\n         match self.sty {\n             TyInfer(IntVar(_)) | TyInt(_) | TyUint(_) => true,"}, {"sha": "fbe36cd8fd26d171ab3ad7f3da2696a848ed6b02", "filename": "src/test/ui/mismatched_types/closure-arg-count.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e8cf5f366263533bd739c4dda9bc8a57ec55b8b9/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cf5f366263533bd739c4dda9bc8a57ec55b8b9/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs?ref=e8cf5f366263533bd739c4dda9bc8a57ec55b8b9", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    [1, 2, 3].sort_by(|tuple| panic!());\n+    [1, 2, 3].sort_by(|(tuple, tuple2)| panic!());\n+}"}, {"sha": "f45734d675b8d80accdb916dc26bd24a1fbe1e4b", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e8cf5f366263533bd739c4dda9bc8a57ec55b8b9/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8cf5f366263533bd739c4dda9bc8a57ec55b8b9/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=e8cf5f366263533bd739c4dda9bc8a57ec55b8b9", "patch": "@@ -0,0 +1,43 @@\n+error[E0593]: closure takes 1 parameter but 2 parameters are required here\n+  --> $DIR/closure-arg-count.rs:12:15\n+   |\n+12 |     [1, 2, 3].sort_by(|tuple| panic!());\n+   |               ^^^^^^^ ---------------- takes 1 parameter\n+   |               |\n+   |               expected closure that takes 2 parameters\n+\n+error[E0593]: closure takes 1 parameter but 2 parameters are required here\n+  --> $DIR/closure-arg-count.rs:12:15\n+   |\n+12 |     [1, 2, 3].sort_by(|tuple| panic!());\n+   |               ^^^^^^^ ---------------- takes 1 parameter\n+   |               |\n+   |               expected closure that takes 2 parameters\n+\n+error[E0308]: mismatched types\n+  --> $DIR/closure-arg-count.rs:13:24\n+   |\n+13 |     [1, 2, 3].sort_by(|(tuple, tuple2)| panic!());\n+   |                        ^^^^^^^^^^^^^^^ expected &{integer}, found tuple\n+   |\n+   = note: expected type `&{integer}`\n+              found type `(_, _)`\n+\n+error[E0593]: closure takes 1 parameter but 2 parameters are required here\n+  --> $DIR/closure-arg-count.rs:13:15\n+   |\n+13 |     [1, 2, 3].sort_by(|(tuple, tuple2)| panic!());\n+   |               ^^^^^^^ -------------------------- takes 1 parameter\n+   |               |\n+   |               expected closure that takes 2 parameters\n+\n+error[E0593]: closure takes 1 parameter but 2 parameters are required here\n+  --> $DIR/closure-arg-count.rs:13:15\n+   |\n+13 |     [1, 2, 3].sort_by(|(tuple, tuple2)| panic!());\n+   |               ^^^^^^^ -------------------------- takes 1 parameter\n+   |               |\n+   |               expected closure that takes 2 parameters\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "91298cb2bbd52a29f564f1c45f3313e9e1087599", "filename": "src/test/ui/mismatched_types/closure-mismatch.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e8cf5f366263533bd739c4dda9bc8a57ec55b8b9/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8cf5f366263533bd739c4dda9bc8a57ec55b8b9/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.rs?ref=e8cf5f366263533bd739c4dda9bc8a57ec55b8b9", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {}\n+\n+impl<T: Fn(&())> Foo for T {}\n+\n+fn baz<T: Foo>(_: T) {}\n+\n+fn main() {\n+    baz(|_| ());\n+}"}, {"sha": "09e31b263bc31f86fb789f10fb4214d7cdd5e1f2", "filename": "src/test/ui/mismatched_types/closure-mismatch.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e8cf5f366263533bd739c4dda9bc8a57ec55b8b9/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8cf5f366263533bd739c4dda9bc8a57ec55b8b9/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr?ref=e8cf5f366263533bd739c4dda9bc8a57ec55b8b9", "patch": "@@ -0,0 +1,21 @@\n+error[E0271]: type mismatch resolving `for<'r> <[closure@$DIR/closure-mismatch.rs:18:9: 18:15] as std::ops::FnOnce<(&'r (),)>>::Output == ()`\n+  --> $DIR/closure-mismatch.rs:18:5\n+   |\n+18 |     baz(|_| ());\n+   |     ^^^ expected bound lifetime parameter, found concrete lifetime\n+   |\n+   = note: concrete lifetime that was found is lifetime '_#0r\n+   = note: required because of the requirements on the impl of `Foo` for `[closure@$DIR/closure-mismatch.rs:18:9: 18:15]`\n+   = note: required by `baz`\n+\n+error[E0594]: closure mismatch: `[closure@$DIR/closure-mismatch.rs:18:9: 18:15]` implements the trait `std::ops::Fn<(_,)>`, but the trait `for<'r> std::ops::Fn<(&'r (),)>` is required\n+  --> $DIR/closure-mismatch.rs:18:5\n+   |\n+18 |     baz(|_| ());\n+   |     ^^^ ------ expected concrete lifetime, found bound lifetime parameter\n+   |\n+   = note: required because of the requirements on the impl of `Foo` for `[closure@$DIR/closure-mismatch.rs:18:9: 18:15]`\n+   = note: required by `baz`\n+\n+error: aborting due to 2 previous errors\n+"}]}