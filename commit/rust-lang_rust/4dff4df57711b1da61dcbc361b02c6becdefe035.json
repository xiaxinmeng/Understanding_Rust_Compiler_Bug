{"sha": "4dff4df57711b1da61dcbc361b02c6becdefe035", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZmY0ZGY1NzcxMWIxZGE2MWRjYmMzNjFiMDJjNmJlY2RlZmUwMzU=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-06-29T22:08:43Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-01T15:12:49Z"}, "message": "Move more functions to `utils::higher`", "tree": {"sha": "0b52c90725930b46d37f1d069fb6a9a76ec6d4ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b52c90725930b46d37f1d069fb6a9a76ec6d4ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dff4df57711b1da61dcbc361b02c6becdefe035", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXdohxAAoJEF5CfHlMukXo2VQQAMdY9G4F08AF5hl//4h2YOWB\n3SljjEfj7LqX+F6MbAtIh6nVft56xjrZF/Q/qBKFGwMQMCGW/bJ7+G3Lalr23zZC\nlqdBnpK13T3i7fwfJ15BBCip/kmBvHebgEITEg9xnr4zqK+/pH9mFk7yApJjcjFY\nBb83j0yumMkjLM2lvzuPuJlv3xr2KmTvZ+U6sJ15JDu4cIZB3Bv1rOrPxh9gJku9\nkf2CXYtKTIIlv8d/S00zgIAHIY9RUAmzCUI12TMqrqP9uaxVljtvDb2EZrvsz+Pz\njjQyBivmOIaxOhY6iat2q9tmnyGO1FI2s2SA9G4ovH3tZMDOcuMd+Txi885brlTl\ne5c5zlaMLGMsQ5TsV9aGzfd+4M+Uhh6i1exxl7D6L1Ys+/snDXyEAkde8GCNaQ2q\n/wXJgTHm4f/Itm0Pf2yKYJ4LzwNdDT5mgnRPkWJ4Ypo1yNtkuAC9QypERW4C1vZL\nuAopTWbMocWnHdUTvqkbvN06F409XHWtllsHuuiVLmVgnaZjU5h78Ujjnf4GJ9Gr\nMICdMZ4dQVFPPCHYRmIROsQ0P7m4Ik6yx3+rbukdeVyqgrXViIlOpi+N8sb6lq3L\nV1S+BtFkff6/RIf2KpnhBwUDrqaIKGtSS4hoEg6Yk8z0ubw5i4hpazAykjH9KzSo\n8VgNbt+satp5WS9DlCeo\n=yeli\n-----END PGP SIGNATURE-----", "payload": "tree 0b52c90725930b46d37f1d069fb6a9a76ec6d4ba\nparent 92b04129fe6b1931f14199b01a5bfc78edb66a72\nauthor mcarton <cartonmartin+git@gmail.com> 1467238123 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1467385969 +0200\n\nMove more functions to `utils::higher`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dff4df57711b1da61dcbc361b02c6becdefe035", "html_url": "https://github.com/rust-lang/rust/commit/4dff4df57711b1da61dcbc361b02c6becdefe035", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dff4df57711b1da61dcbc361b02c6becdefe035/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92b04129fe6b1931f14199b01a5bfc78edb66a72", "url": "https://api.github.com/repos/rust-lang/rust/commits/92b04129fe6b1931f14199b01a5bfc78edb66a72", "html_url": "https://github.com/rust-lang/rust/commit/92b04129fe6b1931f14199b01a5bfc78edb66a72"}], "stats": {"total": 93, "additions": 46, "deletions": 47}, "files": [{"sha": "cee18337ba10164bdf01386edf2b0dc36a198876", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dff4df57711b1da61dcbc361b02c6becdefe035/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dff4df57711b1da61dcbc361b02c6becdefe035/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=4dff4df57711b1da61dcbc361b02c6becdefe035", "patch": "@@ -156,7 +156,7 @@ fn check_consecutive_ifs(cx: &EarlyContext, first: &ast::Expr, second: &ast::Exp\n     }\n }\n \n-/// Match `if` or `else if` expressions and return the `then` and `else` block.\n+/// Match `if` or `if let` expressions and return the `then` and `else` block.\n fn unsugar_if(expr: &ast::Expr) -> Option<(&P<ast::Block>, &Option<P<ast::Expr>>)> {\n     match expr.node {\n         ast::ExprKind::If(_, ref then, ref else_) |"}, {"sha": "1a6ac75eb377ef36e0675c98b223f1542df3c1da", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4dff4df57711b1da61dcbc361b02c6becdefe035/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dff4df57711b1da61dcbc361b02c6becdefe035/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=4dff4df57711b1da61dcbc361b02c6becdefe035", "patch": "@@ -15,7 +15,7 @@ use syntax::ast;\n \n use utils::{snippet, span_lint, get_parent_expr, match_trait_method, match_type, in_external_macro,\n             span_help_and_lint, is_integer_literal, get_enclosing_block, span_lint_and_then, higher,\n-            walk_ptrs_ty, recover_for_loop};\n+            walk_ptrs_ty};\n use utils::paths;\n \n /// **What it does:** This lint checks for looping over the range of `0..len` of some collection just to get the values by index.\n@@ -223,7 +223,7 @@ impl LintPass for Pass {\n \n impl LateLintPass for Pass {\n     fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n-        if let Some((pat, arg, body)) = recover_for_loop(expr) {\n+        if let Some((pat, arg, body)) = higher::for_loop(expr) {\n             check_for_loop(cx, pat, arg, body, expr);\n         }\n         // check for `loop { if let {} else break }` that could be `while let`"}, {"sha": "d5d9fe1a0bc8ca3484ba4272ae36299f4816c6f4", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4dff4df57711b1da61dcbc361b02c6becdefe035/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dff4df57711b1da61dcbc361b02c6becdefe035/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=4dff4df57711b1da61dcbc361b02c6becdefe035", "patch": "@@ -2,7 +2,7 @@ use rustc::hir;\n use rustc::hir::intravisit;\n use rustc::lint::*;\n use rustc::ty::{TypeAndMut, TyRef};\n-use utils::{in_external_macro, recover_for_loop, span_lint};\n+use utils::{higher, in_external_macro, span_lint};\n \n /// **What it does:** This lint checks for instances of `mut mut` references.\n ///\n@@ -49,7 +49,7 @@ impl<'a, 'tcx, 'v> intravisit::Visitor<'v> for MutVisitor<'a, 'tcx> {\n             return;\n         }\n \n-        if let Some((_, arg, body)) = recover_for_loop(expr) {\n+        if let Some((_, arg, body)) = higher::for_loop(expr) {\n             // A `for` loop lowers to:\n             // ```rust\n             // match ::std::iter::Iterator::next(&mut iter) {"}, {"sha": "7bda94ed639792c68b9dbd6385922a2590cba960", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4dff4df57711b1da61dcbc361b02c6becdefe035/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dff4df57711b1da61dcbc361b02c6becdefe035/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=4dff4df57711b1da61dcbc361b02c6becdefe035", "patch": "@@ -5,7 +5,7 @@ use rustc::hir::*;\n use rustc::hir::intravisit::{Visitor, FnKind};\n use std::ops::Deref;\n use syntax::codemap::Span;\n-use utils::{is_from_for_desugar, in_external_macro, snippet, span_lint_and_then};\n+use utils::{higher, in_external_macro, snippet, span_lint_and_then};\n \n /// **What it does:** This lint checks for bindings that shadow other bindings already in scope, while just changing reference level or mutability.\n ///\n@@ -91,7 +91,7 @@ fn check_decl(cx: &LateContext, decl: &Decl, bindings: &mut Vec<(Name, Span)>) {\n     if in_external_macro(cx, decl.span) {\n         return;\n     }\n-    if is_from_for_desugar(decl) {\n+    if higher::is_from_for_desugar(decl) {\n         return;\n     }\n     if let DeclLocal(ref local) = decl.node {"}, {"sha": "629834a3c0f7a3b71c728db043fca7df81ae723e", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4dff4df57711b1da61dcbc361b02c6becdefe035/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dff4df57711b1da61dcbc361b02c6becdefe035/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=4dff4df57711b1da61dcbc361b02c6becdefe035", "patch": "@@ -6,7 +6,7 @@ use rustc::ty;\n use std::cmp::Ordering;\n use syntax::ast::{IntTy, UintTy, FloatTy};\n use syntax::codemap::Span;\n-use utils::{comparisons, in_external_macro, in_macro, is_from_for_desugar, match_def_path, snippet,\n+use utils::{comparisons, higher, in_external_macro, in_macro, match_def_path, snippet,\n             span_help_and_lint, span_lint};\n use utils::paths;\n \n@@ -106,7 +106,7 @@ fn check_let_unit(cx: &LateContext, decl: &Decl) {\n             if in_external_macro(cx, decl.span) || in_macro(cx, local.pat.span) {\n                 return;\n             }\n-            if is_from_for_desugar(decl) {\n+            if higher::is_from_for_desugar(decl) {\n                 return;\n             }\n             span_lint(cx,"}, {"sha": "16ab44881a55054fcaedcae7d42ec0ed66db91f0", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4dff4df57711b1da61dcbc361b02c6becdefe035/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dff4df57711b1da61dcbc361b02c6becdefe035/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=4dff4df57711b1da61dcbc361b02c6becdefe035", "patch": "@@ -115,3 +115,36 @@ pub fn range(expr: &hir::Expr) -> Option<Range> {\n     }\n }\n \n+/// Checks if a `let` decl is from a `for` loop desugaring.\n+pub fn is_from_for_desugar(decl: &hir::Decl) -> bool {\n+    if_let_chain! {[\n+        let hir::DeclLocal(ref loc) = decl.node,\n+        let Some(ref expr) = loc.init,\n+        let hir::ExprMatch(_, _, hir::MatchSource::ForLoopDesugar) = expr.node,\n+    ], {\n+        return true;\n+    }}\n+    false\n+}\n+\n+/// Recover the essential nodes of a desugared for loop:\n+/// `for pat in arg { body }` becomes `(pat, arg, body)`.\n+pub fn for_loop(expr: &hir::Expr) -> Option<(&hir::Pat, &hir::Expr, &hir::Expr)> {\n+    if_let_chain! {[\n+        let hir::ExprMatch(ref iterexpr, ref arms, _) = expr.node,\n+        let hir::ExprCall(_, ref iterargs) = iterexpr.node,\n+        iterargs.len() == 1 && arms.len() == 1 && arms[0].guard.is_none(),\n+        let hir::ExprLoop(ref block, _) = arms[0].body.node,\n+        block.stmts.is_empty(),\n+        let Some(ref loopexpr) = block.expr,\n+        let hir::ExprMatch(_, ref innerarms, hir::MatchSource::ForLoopDesugar) = loopexpr.node,\n+        innerarms.len() == 2 && innerarms[0].pats.len() == 1,\n+        let hir::PatKind::TupleStruct(_, ref somepats, _) = innerarms[0].pats[0].node,\n+        somepats.len() == 1\n+    ], {\n+        return Some((&somepats[0],\n+                     &iterargs[0],\n+                     &innerarms[0].body));\n+    }}\n+    None\n+}"}, {"sha": "df9d09ed0106ef024317218bfdeb683f38194d74", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 2, "deletions": 36, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4dff4df57711b1da61dcbc361b02c6becdefe035/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dff4df57711b1da61dcbc361b02c6becdefe035/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=4dff4df57711b1da61dcbc361b02c6becdefe035", "patch": "@@ -21,7 +21,6 @@ use syntax::ptr::P;\n pub mod cargo;\n pub mod comparisons;\n pub mod conf;\n-pub mod higher;\n mod hir;\n pub mod paths;\n pub mod sugg;\n@@ -82,6 +81,8 @@ macro_rules! if_let_chain {\n     };\n }\n \n+pub mod higher;\n+\n /// Returns true if the two spans come from differing expansions (i.e. one is from a macro and one\n /// isn't).\n pub fn differing_macro_contexts(lhs: Span, rhs: Span) -> bool {\n@@ -319,19 +320,6 @@ pub fn get_item_name(cx: &LateContext, expr: &Expr) -> Option<Name> {\n     }\n }\n \n-/// Checks if a `let` decl is from a `for` loop desugaring.\n-pub fn is_from_for_desugar(decl: &Decl) -> bool {\n-    if_let_chain! {[\n-        let DeclLocal(ref loc) = decl.node,\n-        let Some(ref expr) = loc.init,\n-        let ExprMatch(_, _, MatchSource::ForLoopDesugar) = expr.node\n-    ], {\n-        return true;\n-    }}\n-    false\n-}\n-\n-\n /// Convert a span to a code snippet if available, otherwise use default.\n ///\n /// # Example\n@@ -706,25 +694,3 @@ pub fn same_tys<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, a: ty::Ty<'tcx>, b: ty::Ty\n         infcx.can_equate(&new_a, &new_b).is_ok()\n     })\n }\n-\n-/// Recover the essential nodes of a desugared for loop:\n-/// `for pat in arg { body }` becomes `(pat, arg, body)`.\n-pub fn recover_for_loop(expr: &Expr) -> Option<(&Pat, &Expr, &Expr)> {\n-    if_let_chain! {[\n-        let ExprMatch(ref iterexpr, ref arms, _) = expr.node,\n-        let ExprCall(_, ref iterargs) = iterexpr.node,\n-        iterargs.len() == 1 && arms.len() == 1 && arms[0].guard.is_none(),\n-        let ExprLoop(ref block, _) = arms[0].body.node,\n-        block.stmts.is_empty(),\n-        let Some(ref loopexpr) = block.expr,\n-        let ExprMatch(_, ref innerarms, MatchSource::ForLoopDesugar) = loopexpr.node,\n-        innerarms.len() == 2 && innerarms[0].pats.len() == 1,\n-        let PatKind::TupleStruct(_, ref somepats, _) = innerarms[0].pats[0].node,\n-        somepats.len() == 1\n-    ], {\n-        return Some((&somepats[0],\n-                     &iterargs[0],\n-                     &innerarms[0].body));\n-    }}\n-    None\n-}"}, {"sha": "97a45da4536fd0bbfe82a1651209d19e1c6f6af6", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4dff4df57711b1da61dcbc361b02c6becdefe035/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dff4df57711b1da61dcbc361b02c6becdefe035/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=4dff4df57711b1da61dcbc361b02c6becdefe035", "patch": "@@ -3,7 +3,7 @@ use rustc::ty::TypeVariants;\n use rustc::hir::*;\n use syntax::codemap::Span;\n use syntax::ptr::P;\n-use utils::{is_expn_of, match_path, paths, recover_for_loop, snippet, span_lint_and_then};\n+use utils::{higher, is_expn_of, match_path, paths, snippet, span_lint_and_then};\n \n /// **What it does:** This lint warns about using `&vec![..]` when using `&[..]` would be possible.\n ///\n@@ -42,7 +42,7 @@ impl LateLintPass for Pass {\n         }}\n \n         // search for `for _ in vec![\u2026]`\n-        if let Some((_, arg, _)) = recover_for_loop(expr) {\n+        if let Some((_, arg, _)) = higher::for_loop(expr) {\n             // report the error around the `vec!` not inside `<std macros>:`\n             let span = cx.sess().codemap().source_callsite(arg.span);\n             check_vec_macro(cx, arg, span);"}]}