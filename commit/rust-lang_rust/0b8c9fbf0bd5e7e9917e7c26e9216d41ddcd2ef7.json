{"sha": "0b8c9fbf0bd5e7e9917e7c26e9216d41ddcd2ef7", "node_id": "C_kwDOAAsO6NoAKDBiOGM5ZmJmMGJkNWU3ZTk5MTdlN2MyNmU5MjE2ZDQxZGRjZDJlZjc", "commit": {"author": {"name": "yuhaixin.hx", "email": "yuhaixin.hx@bytedance.com", "date": "2022-01-28T11:07:00Z"}, "committer": {"name": "yuhaixin.hx", "email": "yuhaixin.hx@bytedance.com", "date": "2022-01-28T11:40:49Z"}, "message": "add allow_fail field in TestDesc to pass check", "tree": {"sha": "c55aefd232f4deaa744e815502952381b3702f1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c55aefd232f4deaa744e815502952381b3702f1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b8c9fbf0bd5e7e9917e7c26e9216d41ddcd2ef7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b8c9fbf0bd5e7e9917e7c26e9216d41ddcd2ef7", "html_url": "https://github.com/rust-lang/rust/commit/0b8c9fbf0bd5e7e9917e7c26e9216d41ddcd2ef7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b8c9fbf0bd5e7e9917e7c26e9216d41ddcd2ef7/comments", "author": {"login": "name1e5s", "id": 15176913, "node_id": "MDQ6VXNlcjE1MTc2OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/15176913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/name1e5s", "html_url": "https://github.com/name1e5s", "followers_url": "https://api.github.com/users/name1e5s/followers", "following_url": "https://api.github.com/users/name1e5s/following{/other_user}", "gists_url": "https://api.github.com/users/name1e5s/gists{/gist_id}", "starred_url": "https://api.github.com/users/name1e5s/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/name1e5s/subscriptions", "organizations_url": "https://api.github.com/users/name1e5s/orgs", "repos_url": "https://api.github.com/users/name1e5s/repos", "events_url": "https://api.github.com/users/name1e5s/events{/privacy}", "received_events_url": "https://api.github.com/users/name1e5s/received_events", "type": "User", "site_admin": false}, "committer": {"login": "name1e5s", "id": 15176913, "node_id": "MDQ6VXNlcjE1MTc2OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/15176913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/name1e5s", "html_url": "https://github.com/name1e5s", "followers_url": "https://api.github.com/users/name1e5s/followers", "following_url": "https://api.github.com/users/name1e5s/following{/other_user}", "gists_url": "https://api.github.com/users/name1e5s/gists{/gist_id}", "starred_url": "https://api.github.com/users/name1e5s/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/name1e5s/subscriptions", "organizations_url": "https://api.github.com/users/name1e5s/orgs", "repos_url": "https://api.github.com/users/name1e5s/repos", "events_url": "https://api.github.com/users/name1e5s/events{/privacy}", "received_events_url": "https://api.github.com/users/name1e5s/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6562069ebef1097109d315e50cf9929a30e86811", "url": "https://api.github.com/repos/rust-lang/rust/commits/6562069ebef1097109d315e50cf9929a30e86811", "html_url": "https://github.com/rust-lang/rust/commit/6562069ebef1097109d315e50cf9929a30e86811"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "9b9c5205686629cc1c6105117d4955de54208dd7", "filename": "library/test/src/tests.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0b8c9fbf0bd5e7e9917e7c26e9216d41ddcd2ef7/library%2Ftest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8c9fbf0bd5e7e9917e7c26e9216d41ddcd2ef7/library%2Ftest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftests.rs?ref=0b8c9fbf0bd5e7e9917e7c26e9216d41ddcd2ef7", "patch": "@@ -65,6 +65,8 @@ fn one_ignored_one_unignored_test() -> Vec<TestDescAndFn> {\n                 compile_fail: false,\n                 no_run: false,\n                 test_type: TestType::Unknown,\n+                #[cfg(bootstrap)]\n+                allow_fail: false,\n             },\n             testfn: DynTestFn(Box::new(move || {})),\n         },\n@@ -76,6 +78,8 @@ fn one_ignored_one_unignored_test() -> Vec<TestDescAndFn> {\n                 compile_fail: false,\n                 no_run: false,\n                 test_type: TestType::Unknown,\n+                #[cfg(bootstrap)]\n+                allow_fail: false,\n             },\n             testfn: DynTestFn(Box::new(move || {})),\n         },\n@@ -95,6 +99,8 @@ pub fn do_not_run_ignored_tests() {\n             compile_fail: false,\n             no_run: false,\n             test_type: TestType::Unknown,\n+            #[cfg(bootstrap)]\n+            allow_fail: false,\n         },\n         testfn: DynTestFn(Box::new(f)),\n     };\n@@ -115,6 +121,8 @@ pub fn ignored_tests_result_in_ignored() {\n             compile_fail: false,\n             no_run: false,\n             test_type: TestType::Unknown,\n+            #[cfg(bootstrap)]\n+            allow_fail: false,\n         },\n         testfn: DynTestFn(Box::new(f)),\n     };\n@@ -139,6 +147,8 @@ fn test_should_panic() {\n             compile_fail: false,\n             no_run: false,\n             test_type: TestType::Unknown,\n+            #[cfg(bootstrap)]\n+            allow_fail: false,\n         },\n         testfn: DynTestFn(Box::new(f)),\n     };\n@@ -163,6 +173,8 @@ fn test_should_panic_good_message() {\n             compile_fail: false,\n             no_run: false,\n             test_type: TestType::Unknown,\n+            #[cfg(bootstrap)]\n+            allow_fail: false,\n         },\n         testfn: DynTestFn(Box::new(f)),\n     };\n@@ -192,6 +204,8 @@ fn test_should_panic_bad_message() {\n             compile_fail: false,\n             no_run: false,\n             test_type: TestType::Unknown,\n+            #[cfg(bootstrap)]\n+            allow_fail: false,\n         },\n         testfn: DynTestFn(Box::new(f)),\n     };\n@@ -225,6 +239,8 @@ fn test_should_panic_non_string_message_type() {\n             compile_fail: false,\n             no_run: false,\n             test_type: TestType::Unknown,\n+            #[cfg(bootstrap)]\n+            allow_fail: false,\n         },\n         testfn: DynTestFn(Box::new(f)),\n     };\n@@ -250,6 +266,8 @@ fn test_should_panic_but_succeeds() {\n                 compile_fail: false,\n                 no_run: false,\n                 test_type: TestType::Unknown,\n+                #[cfg(bootstrap)]\n+                allow_fail: false,\n             },\n             testfn: DynTestFn(Box::new(f)),\n         };\n@@ -283,6 +301,8 @@ fn report_time_test_template(report_time: bool) -> Option<TestExecTime> {\n             compile_fail: false,\n             no_run: false,\n             test_type: TestType::Unknown,\n+            #[cfg(bootstrap)]\n+            allow_fail: false,\n         },\n         testfn: DynTestFn(Box::new(f)),\n     };\n@@ -317,6 +337,8 @@ fn time_test_failure_template(test_type: TestType) -> TestResult {\n             compile_fail: false,\n             no_run: false,\n             test_type,\n+            #[cfg(bootstrap)]\n+            allow_fail: false,\n         },\n         testfn: DynTestFn(Box::new(f)),\n     };\n@@ -355,6 +377,8 @@ fn typed_test_desc(test_type: TestType) -> TestDesc {\n         compile_fail: false,\n         no_run: false,\n         test_type,\n+        #[cfg(bootstrap)]\n+        allow_fail: false,\n     }\n }\n \n@@ -467,6 +491,8 @@ pub fn exclude_should_panic_option() {\n             compile_fail: false,\n             no_run: false,\n             test_type: TestType::Unknown,\n+            #[cfg(bootstrap)]\n+            allow_fail: false,\n         },\n         testfn: DynTestFn(Box::new(move || {})),\n     });\n@@ -490,6 +516,8 @@ pub fn exact_filter_match() {\n                     compile_fail: false,\n                     no_run: false,\n                     test_type: TestType::Unknown,\n+                    #[cfg(bootstrap)]\n+                    allow_fail: false,\n                 },\n                 testfn: DynTestFn(Box::new(move || {})),\n             })\n@@ -578,6 +606,8 @@ fn sample_tests() -> Vec<TestDescAndFn> {\n                 compile_fail: false,\n                 no_run: false,\n                 test_type: TestType::Unknown,\n+                #[cfg(bootstrap)]\n+                allow_fail: false,\n             },\n             testfn: DynTestFn(Box::new(testfn)),\n         };\n@@ -728,6 +758,8 @@ pub fn test_bench_no_iter() {\n         compile_fail: false,\n         no_run: false,\n         test_type: TestType::Unknown,\n+        #[cfg(bootstrap)]\n+        allow_fail: false,\n     };\n \n     crate::bench::benchmark(TestId(0), desc, tx, true, f);\n@@ -749,6 +781,8 @@ pub fn test_bench_iter() {\n         compile_fail: false,\n         no_run: false,\n         test_type: TestType::Unknown,\n+        #[cfg(bootstrap)]\n+        allow_fail: false,\n     };\n \n     crate::bench::benchmark(TestId(0), desc, tx, true, f);\n@@ -764,6 +798,8 @@ fn should_sort_failures_before_printing_them() {\n         compile_fail: false,\n         no_run: false,\n         test_type: TestType::Unknown,\n+        #[cfg(bootstrap)]\n+        allow_fail: false,\n     };\n \n     let test_b = TestDesc {\n@@ -773,6 +809,8 @@ fn should_sort_failures_before_printing_them() {\n         compile_fail: false,\n         no_run: false,\n         test_type: TestType::Unknown,\n+        #[cfg(bootstrap)]\n+        allow_fail: false,\n     };\n \n     let mut out = PrettyFormatter::new(OutputLocation::Raw(Vec::new()), false, 10, false, None);"}, {"sha": "43e5a10ebbe95a02f6184410fb9368e7556a1f1f", "filename": "library/test/src/types.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b8c9fbf0bd5e7e9917e7c26e9216d41ddcd2ef7/library%2Ftest%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8c9fbf0bd5e7e9917e7c26e9216d41ddcd2ef7/library%2Ftest%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftypes.rs?ref=0b8c9fbf0bd5e7e9917e7c26e9216d41ddcd2ef7", "patch": "@@ -121,6 +121,8 @@ pub struct TestDesc {\n     pub compile_fail: bool,\n     pub no_run: bool,\n     pub test_type: TestType,\n+    #[cfg(bootstrap)]\n+    pub allow_fail: bool,\n }\n \n impl TestDesc {"}, {"sha": "b9432b204eee95cb500519de6f53c61e625b67b1", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b8c9fbf0bd5e7e9917e7c26e9216d41ddcd2ef7/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8c9fbf0bd5e7e9917e7c26e9216d41ddcd2ef7/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=0b8c9fbf0bd5e7e9917e7c26e9216d41ddcd2ef7", "patch": "@@ -954,6 +954,8 @@ impl Tester for Collector {\n                 compile_fail: config.compile_fail,\n                 no_run,\n                 test_type: test::TestType::DocTest,\n+                #[cfg(bootstrap)]\n+                allow_fail: false,\n             },\n             testfn: test::DynTestFn(box move || {\n                 let report_unused_externs = |uext| {"}, {"sha": "da7a19139c65b3f28d019b33fbeef5ad883a7e0e", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b8c9fbf0bd5e7e9917e7c26e9216d41ddcd2ef7/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8c9fbf0bd5e7e9917e7c26e9216d41ddcd2ef7/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=0b8c9fbf0bd5e7e9917e7c26e9216d41ddcd2ef7", "patch": "@@ -925,6 +925,8 @@ pub fn make_test_description<R: Read>(\n         compile_fail: false,\n         no_run: false,\n         test_type: test::TestType::Unknown,\n+        #[cfg(bootstrap)]\n+        allow_fail: false,\n     }\n }\n "}]}