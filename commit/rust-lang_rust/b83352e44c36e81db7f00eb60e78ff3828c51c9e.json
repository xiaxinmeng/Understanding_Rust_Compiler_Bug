{"sha": "b83352e44c36e81db7f00eb60e78ff3828c51c9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MzM1MmU0NGMzNmU4MWRiN2YwMGViNjBlNzhmZjM4MjhjNTFjOWU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-03-29T01:56:29Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-04-02T16:45:57Z"}, "message": "Introduce `TyErr` independent from `TyInfer`\n\nAdd a `TyErr` type to represent unknown types in places where\nparse errors have happened, while still able to build the AST.\n\nInitially only used to represent incorrectly written fn arguments and\navoid \"expected X parameters, found Y\" errors when called with the\nappropriate amount of parameters. We cannot use `TyInfer` for this as\n`_` is not allowed as a valid argument type.\n\nExample output:\n\n```rust\nerror: expected one of `:` or `@`, found `,`\n  --> file.rs:12:9\n   |\n12 | fn bar(x, y: usize) {}\n   |         ^\n\nerror[E0061]: this function takes 2 parameters but 3 parameters were supplied\n  --> file.rs:19:9\n   |\n12 | fn bar(x, y) {}\n   | --------------- defined here\n...\n19 |     bar(1, 2, 3);\n   |         ^^^^^^^ expected 2 parameters\n```", "tree": {"sha": "339ddfe91475b309f1bb9631aab159bb829927ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/339ddfe91475b309f1bb9631aab159bb829927ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b83352e44c36e81db7f00eb60e78ff3828c51c9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b83352e44c36e81db7f00eb60e78ff3828c51c9e", "html_url": "https://github.com/rust-lang/rust/commit/b83352e44c36e81db7f00eb60e78ff3828c51c9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b83352e44c36e81db7f00eb60e78ff3828c51c9e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e122f59ba23494d460466cca53c71646d99c767", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e122f59ba23494d460466cca53c71646d99c767", "html_url": "https://github.com/rust-lang/rust/commit/5e122f59ba23494d460466cca53c71646d99c767"}], "stats": {"total": 122, "additions": 115, "deletions": 7}, "files": [{"sha": "2c8b145f126cd17ffb05ddd7c805dc4dc9c21132", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b83352e44c36e81db7f00eb60e78ff3828c51c9e/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83352e44c36e81db7f00eb60e78ff3828c51c9e/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=b83352e44c36e81db7f00eb60e78ff3828c51c9e", "patch": "@@ -578,7 +578,7 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n         TyTypeof(expression) => {\n             visitor.visit_nested_body(expression)\n         }\n-        TyInfer => {}\n+        TyInfer | TyErr => {}\n     }\n }\n "}, {"sha": "acc6d21ddc696044a064c051ac227e1982e25c67", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b83352e44c36e81db7f00eb60e78ff3828c51c9e/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83352e44c36e81db7f00eb60e78ff3828c51c9e/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=b83352e44c36e81db7f00eb60e78ff3828c51c9e", "patch": "@@ -555,6 +555,7 @@ impl<'a> LoweringContext<'a> {\n     fn lower_ty(&mut self, t: &Ty) -> P<hir::Ty> {\n         let kind = match t.node {\n             TyKind::Infer => hir::TyInfer,\n+            TyKind::Err => hir::TyErr,\n             TyKind::Slice(ref ty) => hir::TySlice(self.lower_ty(ty)),\n             TyKind::Ptr(ref mt) => hir::TyPtr(self.lower_mt(mt)),\n             TyKind::Rptr(ref region, ref mt) => {"}, {"sha": "0da405d1821d360d8d804ae6463a7f42af706e86", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b83352e44c36e81db7f00eb60e78ff3828c51c9e/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83352e44c36e81db7f00eb60e78ff3828c51c9e/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=b83352e44c36e81db7f00eb60e78ff3828c51c9e", "patch": "@@ -1351,6 +1351,8 @@ pub enum Ty_ {\n     /// TyInfer means the type should be inferred instead of it having been\n     /// specified. This can appear anywhere in a type.\n     TyInfer,\n+    /// Placeholder for a type that has failed to be defined.\n+    TyErr,\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]"}, {"sha": "4a5a35aa82ca0ef5799733d4021f2c4d86e49c50", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b83352e44c36e81db7f00eb60e78ff3828c51c9e/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83352e44c36e81db7f00eb60e78ff3828c51c9e/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=b83352e44c36e81db7f00eb60e78ff3828c51c9e", "patch": "@@ -450,6 +450,9 @@ impl<'a> State<'a> {\n             hir::TyInfer => {\n                 word(&mut self.s, \"_\")?;\n             }\n+            hir::TyErr => {\n+                word(&mut self.s, \"?\")?;\n+            }\n         }\n         self.end()\n     }"}, {"sha": "4700b77be07629738dfa00477c6ccb256fb086c5", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b83352e44c36e81db7f00eb60e78ff3828c51c9e/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83352e44c36e81db7f00eb60e78ff3828c51c9e/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=b83352e44c36e81db7f00eb60e78ff3828c51c9e", "patch": "@@ -432,7 +432,8 @@ enum SawTyComponent {\n     SawTyObjectSum,\n     SawTyImplTrait,\n     SawTyTypeof,\n-    SawTyInfer\n+    SawTyInfer,\n+    SawTyErr,\n }\n \n fn saw_ty(node: &Ty_) -> SawTyComponent {\n@@ -448,7 +449,8 @@ fn saw_ty(node: &Ty_) -> SawTyComponent {\n       TyTraitObject(..) => SawTyObjectSum,\n       TyImplTrait(..) => SawTyImplTrait,\n       TyTypeof(..) => SawTyTypeof,\n-      TyInfer => SawTyInfer\n+      TyInfer => SawTyInfer,\n+      TyErr => SawTyErr,\n     }\n }\n "}, {"sha": "66c4a81a5c0f2f582975ddc130721dfadf7cb614", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b83352e44c36e81db7f00eb60e78ff3828c51c9e/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83352e44c36e81db7f00eb60e78ff3828c51c9e/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=b83352e44c36e81db7f00eb60e78ff3828c51c9e", "patch": "@@ -1229,6 +1229,9 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 // handled specially and will not descend into this routine.\n                 self.ty_infer(ast_ty.span)\n             }\n+            hir::TyErr => {\n+                tcx.types.err\n+            }\n         };\n \n         cache.borrow_mut().insert(ast_ty.id, result_ty);"}, {"sha": "ac72d7d29a24c4813839cd5b7185544ee269b698", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b83352e44c36e81db7f00eb60e78ff3828c51c9e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83352e44c36e81db7f00eb60e78ff3828c51c9e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b83352e44c36e81db7f00eb60e78ff3828c51c9e", "patch": "@@ -1805,7 +1805,7 @@ impl Clean<Type> for hir::Ty {\n             }\n             TyBareFn(ref barefn) => BareFunction(box barefn.clean(cx)),\n             TyImplTrait(ref bounds) => ImplTrait(bounds.clean(cx)),\n-            TyInfer => Infer,\n+            TyInfer | TyErr => Infer,\n             TyTypeof(..) => panic!(\"Unimplemented type {:?}\", self.node),\n         }\n     }"}, {"sha": "c6a3e8a2dedc4653985b20276673a99c3fa658b9", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b83352e44c36e81db7f00eb60e78ff3828c51c9e/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83352e44c36e81db7f00eb60e78ff3828c51c9e/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b83352e44c36e81db7f00eb60e78ff3828c51c9e", "patch": "@@ -1361,6 +1361,8 @@ pub enum TyKind {\n     ImplicitSelf,\n     // A macro in the type position.\n     Mac(Mac),\n+    /// Placeholder for a kind that has failed to be defined.\n+    Err,\n }\n \n /// Inline assembly dialect."}, {"sha": "92e25b00e0ac108cfd41d90b06e1773f45b21d38", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b83352e44c36e81db7f00eb60e78ff3828c51c9e/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83352e44c36e81db7f00eb60e78ff3828c51c9e/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=b83352e44c36e81db7f00eb60e78ff3828c51c9e", "patch": "@@ -358,7 +358,7 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n     t.map(|Ty {id, node, span}| Ty {\n         id: fld.new_id(id),\n         node: match node {\n-            TyKind::Infer | TyKind::ImplicitSelf => node,\n+            TyKind::Infer | TyKind::ImplicitSelf | TyKind::Err => node,\n             TyKind::Slice(ty) => TyKind::Slice(fld.fold_ty(ty)),\n             TyKind::Ptr(mt) => TyKind::Ptr(fld.fold_mt(mt)),\n             TyKind::Rptr(region, mt) => {"}, {"sha": "23fc1351426c2ead6a7ee9f41897fb28f1f5b570", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b83352e44c36e81db7f00eb60e78ff3828c51c9e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83352e44c36e81db7f00eb60e78ff3828c51c9e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b83352e44c36e81db7f00eb60e78ff3828c51c9e", "patch": "@@ -407,6 +407,25 @@ impl From<P<Expr>> for LhsExpr {\n     }\n }\n \n+/// Create a placeholder argument.\n+fn dummy_arg(span: Span) -> Arg {\n+    let spanned = Spanned {\n+        span: span,\n+        node: keywords::Invalid.ident()\n+    };\n+    let pat = P(Pat {\n+        id: ast::DUMMY_NODE_ID,\n+        node: PatKind::Ident(BindingMode::ByValue(Mutability::Immutable), spanned, None),\n+        span: span\n+    });\n+    let ty = Ty {\n+        node: TyKind::Err,\n+        span: span,\n+        id: ast::DUMMY_NODE_ID\n+    };\n+    Arg { ty: P(ty), pat: pat, id: ast::DUMMY_NODE_ID }\n+}\n+\n impl<'a> Parser<'a> {\n     pub fn new(sess: &'a ParseSess,\n                tokens: TokenStream,\n@@ -4343,8 +4362,12 @@ impl<'a> Parser<'a> {\n                             Ok(arg) => Ok(Some(arg)),\n                             Err(mut e) => {\n                                 e.emit();\n+                                let lo = p.prev_span;\n+                                // Skip every token until next possible arg or end.\n                                 p.eat_to_tokens(&[&token::Comma, &token::CloseDelim(token::Paren)]);\n-                                Ok(None)\n+                                // Create a placeholder argument for proper arg count (#34264).\n+                                let span = lo.to(p.prev_span);\n+                                Ok(Some(dummy_arg(span)))\n                             }\n                         }\n                     }"}, {"sha": "e7feff2b79fceb9936a665f90923ee0f9fa490b1", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b83352e44c36e81db7f00eb60e78ff3828c51c9e/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83352e44c36e81db7f00eb60e78ff3828c51c9e/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=b83352e44c36e81db7f00eb60e78ff3828c51c9e", "patch": "@@ -1095,6 +1095,9 @@ impl<'a> State<'a> {\n             ast::TyKind::Infer => {\n                 word(&mut self.s, \"_\")?;\n             }\n+            ast::TyKind::Err => {\n+                word(&mut self.s, \"?\")?;\n+            }\n             ast::TyKind::ImplicitSelf => {\n                 word(&mut self.s, \"Self\")?;\n             }"}, {"sha": "b5e9a1892acc9927446c1cfffcd394cbbcd93094", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b83352e44c36e81db7f00eb60e78ff3828c51c9e/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83352e44c36e81db7f00eb60e78ff3828c51c9e/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=b83352e44c36e81db7f00eb60e78ff3828c51c9e", "patch": "@@ -350,7 +350,7 @@ pub fn walk_ty<'a, V: Visitor<'a>>(visitor: &mut V, typ: &'a Ty) {\n         TyKind::Typeof(ref expression) => {\n             visitor.visit_expr(expression)\n         }\n-        TyKind::Infer | TyKind::ImplicitSelf => {}\n+        TyKind::Infer | TyKind::ImplicitSelf | TyKind::Err => {}\n         TyKind::Mac(ref mac) => {\n             visitor.visit_mac(mac)\n         }"}, {"sha": "00482f50618db5b327fd47f60308c16cc997699f", "filename": "src/test/ui/span/issue-34264.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b83352e44c36e81db7f00eb60e78ff3828c51c9e/src%2Ftest%2Fui%2Fspan%2Fissue-34264.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83352e44c36e81db7f00eb60e78ff3828c51c9e/src%2Ftest%2Fui%2Fspan%2Fissue-34264.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-34264.rs?ref=b83352e44c36e81db7f00eb60e78ff3828c51c9e", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo(Option<i32>, String) {}\n+fn bar(x, y: usize) {}\n+\n+fn main() {\n+    foo(Some(42), 2);\n+    foo(Some(42), 2, \"\");\n+    bar(\"\", \"\");\n+    bar(1, 2);\n+    bar(1, 2, 3);\n+}"}, {"sha": "c79db54eaef04f7b06383ea40d0874d3c391bd56", "filename": "src/test/ui/span/issue-34264.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/b83352e44c36e81db7f00eb60e78ff3828c51c9e/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b83352e44c36e81db7f00eb60e78ff3828c51c9e/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr?ref=b83352e44c36e81db7f00eb60e78ff3828c51c9e", "patch": "@@ -0,0 +1,49 @@\n+error: expected one of `:` or `@`, found `<`\n+  --> $DIR/issue-34264.rs:11:14\n+   |\n+11 | fn foo(Option<i32>, String) {}\n+   |              ^\n+\n+error: expected one of `:` or `@`, found `)`\n+  --> $DIR/issue-34264.rs:11:27\n+   |\n+11 | fn foo(Option<i32>, String) {}\n+   |                           ^\n+\n+error: expected one of `:` or `@`, found `,`\n+  --> $DIR/issue-34264.rs:12:9\n+   |\n+12 | fn bar(x, y: usize) {}\n+   |         ^\n+\n+error[E0061]: this function takes 2 parameters but 3 parameters were supplied\n+  --> $DIR/issue-34264.rs:16:9\n+   |\n+11 | fn foo(Option<i32>, String) {}\n+   | ------------------------------ defined here\n+...\n+16 |     foo(Some(42), 2, \"\");\n+   |         ^^^^^^^^^^^^^^^ expected 2 parameters\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-34264.rs:17:13\n+   |\n+17 |     bar(\"\", \"\");\n+   |             ^^ expected usize, found reference\n+   |\n+   = note: expected type `usize`\n+              found type `&'static str`\n+   = help: here are some functions which might fulfill your needs:\n+           - .len()\n+\n+error[E0061]: this function takes 2 parameters but 3 parameters were supplied\n+  --> $DIR/issue-34264.rs:19:9\n+   |\n+12 | fn bar(x, y: usize) {}\n+   | ---------------------- defined here\n+...\n+19 |     bar(1, 2, 3);\n+   |         ^^^^^^^ expected 2 parameters\n+\n+error: aborting due to 3 previous errors\n+"}]}