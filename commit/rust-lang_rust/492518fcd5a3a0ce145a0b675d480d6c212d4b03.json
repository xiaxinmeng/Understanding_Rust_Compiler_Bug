{"sha": "492518fcd5a3a0ce145a0b675d480d6c212d4b03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5MjUxOGZjZDVhM2EwY2UxNDVhMGI2NzVkNDgwZDZjMjEyZDRiMDM=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-07-03T09:31:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-03T09:31:13Z"}, "message": "Rollup merge of #52006 - Mark-Simulacrum:keep-stage-fix, r=alexcrichton\n\n Change --keep-stage to apply more often\n\nPreviously, the --keep-stage argument would only function for compilers\nthat were depended on by future stages. For example, if trying to build\na stage 1 compiler you could --keep-stage 0 to avoid re-building the\nstage 0 compiler. However, this is often not what users want in\npractice.\n\nThe new implementation essentially skips builds all higher stages of the\ncompiler, so an argument of 1 to keep-stage will skip rebuilds of the\nlibraries, just linking them into the sysroot. This is unlikely to work\nwell in cases where metadata or similar changes have been made, but is\nlikely fine otherwise.\n\nThis change is somewhat untested, but since it shouldn't have any effect\nexcept with --keep-stage, I don't see that as a large problem.\n\nr? @alexcrichton\ncc @nikomatsakis - I believe you wanted this functionality", "tree": {"sha": "0c3486b8c020617213e6bba69fd6f901b404b516", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c3486b8c020617213e6bba69fd6f901b404b516"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/492518fcd5a3a0ce145a0b675d480d6c212d4b03", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbO0JiCRBK7hj4Ov3rIwAAdHIIABUZKPxrmRP7z2w1pNSwu1aN\n5rDhiyjmeBjibv5rSUB4voPNQ8r0odW10TG/ZCcpf7CcxOcz1p7DPToLvXEVfXCD\nTkgYLO4b91BiPIouXESwfvTAn8VWJWgZE6IqBBEXCHzJQsFbxez6pGaqOeVYMRYk\nw49OHg4XDE54p5hQGOwEklMXoAcU+1xACWCW814qZnjz4p7FLu/mMKy9t3PaqhYn\nB5+kIAtx2LXVvrAF+SgV4XBHYxXFH6Z8ZAIMs0CvYDkQKVA3OUoLDi7LgzzEPSn2\n+72+Hdkr06K6ktYF3j7JIYzeS6pVHvlzJVnDC/6M64tCFU+G63B0JAd73I1J+Os=\n=KzSQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 0c3486b8c020617213e6bba69fd6f901b404b516\nparent 6af4397e191d99367aa12b87dc87bf2e565d87a0\nparent 9eda4aabff138add785c6e672d9c67cc612f7503\nauthor Pietro Albini <pietro@pietroalbini.org> 1530610273 +0200\ncommitter GitHub <noreply@github.com> 1530610273 +0200\n\nRollup merge of #52006 - Mark-Simulacrum:keep-stage-fix, r=alexcrichton\n\n Change --keep-stage to apply more often\n\nPreviously, the --keep-stage argument would only function for compilers\nthat were depended on by future stages. For example, if trying to build\na stage 1 compiler you could --keep-stage 0 to avoid re-building the\nstage 0 compiler. However, this is often not what users want in\npractice.\n\nThe new implementation essentially skips builds all higher stages of the\ncompiler, so an argument of 1 to keep-stage will skip rebuilds of the\nlibraries, just linking them into the sysroot. This is unlikely to work\nwell in cases where metadata or similar changes have been made, but is\nlikely fine otherwise.\n\nThis change is somewhat untested, but since it shouldn't have any effect\nexcept with --keep-stage, I don't see that as a large problem.\n\nr? @alexcrichton\ncc @nikomatsakis - I believe you wanted this functionality\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/492518fcd5a3a0ce145a0b675d480d6c212d4b03", "html_url": "https://github.com/rust-lang/rust/commit/492518fcd5a3a0ce145a0b675d480d6c212d4b03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/492518fcd5a3a0ce145a0b675d480d6c212d4b03/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6af4397e191d99367aa12b87dc87bf2e565d87a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6af4397e191d99367aa12b87dc87bf2e565d87a0", "html_url": "https://github.com/rust-lang/rust/commit/6af4397e191d99367aa12b87dc87bf2e565d87a0"}, {"sha": "9eda4aabff138add785c6e672d9c67cc612f7503", "url": "https://api.github.com/repos/rust-lang/rust/commits/9eda4aabff138add785c6e672d9c67cc612f7503", "html_url": "https://github.com/rust-lang/rust/commit/9eda4aabff138add785c6e672d9c67cc612f7503"}], "stats": {"total": 65, "additions": 44, "deletions": 21}, "files": [{"sha": "aef2df3e2780f40e500c68c766b92851accfebdb", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 44, "deletions": 21, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/492518fcd5a3a0ce145a0b675d480d6c212d4b03/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/492518fcd5a3a0ce145a0b675d480d6c212d4b03/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=492518fcd5a3a0ce145a0b675d480d6c212d4b03", "patch": "@@ -24,7 +24,6 @@ use std::io::prelude::*;\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n use std::str;\n-use std::cmp::min;\n \n use build_helper::{output, mtime, up_to_date};\n use filetime::FileTime;\n@@ -68,6 +67,18 @@ impl Step for Std {\n         let target = self.target;\n         let compiler = self.compiler;\n \n+        if let Some(keep_stage) = builder.config.keep_stage {\n+            if keep_stage <= compiler.stage {\n+                println!(\"Warning: Using a potentially old libstd. This may not behave well.\");\n+                builder.ensure(StdLink {\n+                    compiler: compiler,\n+                    target_compiler: compiler,\n+                    target,\n+                });\n+                return;\n+            }\n+        }\n+\n         builder.ensure(StartupObjects { compiler, target });\n \n         if builder.force_use_stage1(compiler, target) {\n@@ -351,6 +362,18 @@ impl Step for Test {\n         let target = self.target;\n         let compiler = self.compiler;\n \n+        if let Some(keep_stage) = builder.config.keep_stage {\n+            if keep_stage <= compiler.stage {\n+                println!(\"Warning: Using a potentially old libtest. This may not behave well.\");\n+                builder.ensure(TestLink {\n+                    compiler: compiler,\n+                    target_compiler: compiler,\n+                    target,\n+                });\n+                return;\n+            }\n+        }\n+\n         builder.ensure(Std { compiler, target });\n \n         if builder.force_use_stage1(compiler, target) {\n@@ -467,6 +490,18 @@ impl Step for Rustc {\n         let compiler = self.compiler;\n         let target = self.target;\n \n+        if let Some(keep_stage) = builder.config.keep_stage {\n+            if keep_stage <= compiler.stage {\n+                println!(\"Warning: Using a potentially old librustc. This may not behave well.\");\n+                builder.ensure(RustcLink {\n+                    compiler: compiler,\n+                    target_compiler: compiler,\n+                    target,\n+                });\n+                return;\n+            }\n+        }\n+\n         builder.ensure(Test { compiler, target });\n \n         if builder.force_use_stage1(compiler, target) {\n@@ -873,7 +908,7 @@ impl Step for Assemble {\n     type Output = Compiler;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n-        run.all_krates(\"rustc-main\")\n+        run.never()\n     }\n \n     /// Prepare a new compiler from the artifacts in `stage`\n@@ -915,28 +950,16 @@ impl Step for Assemble {\n         // link to these. (FIXME: Is that correct? It seems to be correct most\n         // of the time but I think we do link to these for stage2/bin compilers\n         // when not performing a full bootstrap).\n-        if builder.config.keep_stage.map_or(false, |s| target_compiler.stage <= s) {\n-            builder.verbose(\"skipping compilation of compiler due to --keep-stage\");\n-            let compiler = build_compiler;\n-            for stage in 0..min(target_compiler.stage, builder.config.keep_stage.unwrap()) {\n-                let target_compiler = builder.compiler(stage, target_compiler.host);\n-                let target = target_compiler.host;\n-                builder.ensure(StdLink { compiler, target_compiler, target });\n-                builder.ensure(TestLink { compiler, target_compiler, target });\n-                builder.ensure(RustcLink { compiler, target_compiler, target });\n-            }\n-        } else {\n-            builder.ensure(Rustc {\n+        builder.ensure(Rustc {\n+            compiler: build_compiler,\n+            target: target_compiler.host,\n+        });\n+        for &backend in builder.config.rust_codegen_backends.iter() {\n+            builder.ensure(CodegenBackend {\n                 compiler: build_compiler,\n                 target: target_compiler.host,\n+                backend,\n             });\n-            for &backend in builder.config.rust_codegen_backends.iter() {\n-                builder.ensure(CodegenBackend {\n-                    compiler: build_compiler,\n-                    target: target_compiler.host,\n-                    backend,\n-                });\n-            }\n         }\n \n         let lld_install = if builder.config.lld_enabled {"}]}