{"sha": "b6f875d678de6c3e19bdb87d99f9cff189a96e54", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2Zjg3NWQ2NzhkZTZjM2UxOWJkYjg3ZDk5ZjljZmYxODlhOTZlNTQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-28T17:31:37Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-02-11T22:13:03Z"}, "message": "Move weak_lang_items checking to librustc_passes.", "tree": {"sha": "17743ea2aeeeae059f3000ae8aea5718cf15a928", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17743ea2aeeeae059f3000ae8aea5718cf15a928"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6f875d678de6c3e19bdb87d99f9cff189a96e54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6f875d678de6c3e19bdb87d99f9cff189a96e54", "html_url": "https://github.com/rust-lang/rust/commit/b6f875d678de6c3e19bdb87d99f9cff189a96e54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6f875d678de6c3e19bdb87d99f9cff189a96e54/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98b46f77969316e0f80f60c29c4121db8b3735c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/98b46f77969316e0f80f60c29c4121db8b3735c4", "html_url": "https://github.com/rust-lang/rust/commit/98b46f77969316e0f80f60c29c4121db8b3735c4"}], "stats": {"total": 73, "additions": 40, "deletions": 33}, "files": [{"sha": "c59c1953111d4feeba1dc7a6a52e34c2b2f0fa09", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b6f875d678de6c3e19bdb87d99f9cff189a96e54/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f875d678de6c3e19bdb87d99f9cff189a96e54/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=b6f875d678de6c3e19bdb87d99f9cff189a96e54", "patch": "@@ -0,0 +1,32 @@\n+//! Validity checking for weak lang items\n+\n+use crate::ty::TyCtxt;\n+use rustc_hir::def_id::DefId;\n+use rustc_lang_items::{lang_items, LangItem};\n+use rustc_target::spec::PanicStrategy;\n+\n+pub use rustc_lang_items::weak_lang_items::link_name;\n+\n+impl<'tcx> TyCtxt<'tcx> {\n+    pub fn is_weak_lang_item(&self, item_def_id: DefId) -> bool {\n+        self.lang_items().is_weak_lang_item(item_def_id)\n+    }\n+}\n+\n+/// Returns `true` if the specified `lang_item` doesn't actually need to be\n+/// present for this compilation.\n+///\n+/// Not all lang items are always required for each compilation, particularly in\n+/// the case of panic=abort. In these situations some lang items are injected by\n+/// crates and don't actually need to be defined in libstd.\n+pub fn whitelisted(tcx: TyCtxt<'_>, lang_item: LangItem) -> bool {\n+    // If we're not compiling with unwinding, we won't actually need these\n+    // symbols. Other panic runtimes ensure that the relevant symbols are\n+    // available to link things together, but they're never exercised.\n+    if tcx.sess.panic_strategy() != PanicStrategy::Unwind {\n+        return lang_item == lang_items::EhPersonalityLangItem\n+            || lang_item == lang_items::EhUnwindResumeLangItem;\n+    }\n+\n+    false\n+}"}, {"sha": "ea5ff000512edaf7045bb56cfd51f59c82608091", "filename": "src/librustc_passes/lang_items.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b6f875d678de6c3e19bdb87d99f9cff189a96e54/src%2Flibrustc_passes%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f875d678de6c3e19bdb87d99f9cff189a96e54/src%2Flibrustc_passes%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flang_items.rs?ref=b6f875d678de6c3e19bdb87d99f9cff189a96e54", "patch": "@@ -7,8 +7,9 @@\n //! * Traits that represent operators; e.g., `Add`, `Sub`, `Index`.\n //! * Functions called by the compiler itself.\n \n+use crate::weak_lang_items;\n+\n use rustc::middle::cstore::ExternCrate;\n-use rustc::middle::weak_lang_items;\n use rustc::ty::TyCtxt;\n \n use rustc_errors::struct_span_err;"}, {"sha": "afafbacb8fa88a6b4640600630c308242aa536d6", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6f875d678de6c3e19bdb87d99f9cff189a96e54/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f875d678de6c3e19bdb87d99f9cff189a96e54/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=b6f875d678de6c3e19bdb87d99f9cff189a96e54", "patch": "@@ -32,6 +32,7 @@ mod reachable;\n mod region;\n pub mod stability;\n mod upvars;\n+mod weak_lang_items;\n \n pub fn provide(providers: &mut Providers<'_>) {\n     check_attr::provide(providers);"}, {"sha": "a579b9354d7db711120661aff6e60d04af221871", "filename": "src/librustc_passes/weak_lang_items.rs", "status": "modified", "additions": 5, "deletions": 32, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b6f875d678de6c3e19bdb87d99f9cff189a96e54/src%2Flibrustc_passes%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f875d678de6c3e19bdb87d99f9cff189a96e54/src%2Flibrustc_passes%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fweak_lang_items.rs?ref=b6f875d678de6c3e19bdb87d99f9cff189a96e54", "patch": "@@ -1,21 +1,18 @@\n //! Validity checking for weak lang items\n \n-use crate::middle::lang_items;\n-use crate::session::config;\n+use rustc::middle::lang_items;\n+use rustc::middle::weak_lang_items::whitelisted;\n+use rustc::session::config;\n \n-use crate::hir::map::Map;\n-use crate::ty::TyCtxt;\n+use rustc::hir::map::Map;\n+use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_lang_items::weak_lang_items::WEAK_ITEMS_REFS;\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n-use rustc_target::spec::PanicStrategy;\n-\n-pub use rustc_lang_items::weak_lang_items::link_name;\n \n struct Context<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n@@ -42,24 +39,6 @@ pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx>, items: &mut lang_items::LanguageItem\n     verify(tcx, items);\n }\n \n-/// Returns `true` if the specified `lang_item` doesn't actually need to be\n-/// present for this compilation.\n-///\n-/// Not all lang items are always required for each compilation, particularly in\n-/// the case of panic=abort. In these situations some lang items are injected by\n-/// crates and don't actually need to be defined in libstd.\n-pub fn whitelisted(tcx: TyCtxt<'_>, lang_item: lang_items::LangItem) -> bool {\n-    // If we're not compiling with unwinding, we won't actually need these\n-    // symbols. Other panic runtimes ensure that the relevant symbols are\n-    // available to link things together, but they're never exercised.\n-    if tcx.sess.panic_strategy() != PanicStrategy::Unwind {\n-        return lang_item == lang_items::EhPersonalityLangItem\n-            || lang_item == lang_items::EhUnwindResumeLangItem;\n-    }\n-\n-    false\n-}\n-\n fn verify<'tcx>(tcx: TyCtxt<'tcx>, items: &lang_items::LanguageItems) {\n     // We only need to check for the presence of weak lang items if we're\n     // emitting something that's not an rlib.\n@@ -122,9 +101,3 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n         intravisit::walk_foreign_item(self, i)\n     }\n }\n-\n-impl<'tcx> TyCtxt<'tcx> {\n-    pub fn is_weak_lang_item(&self, item_def_id: DefId) -> bool {\n-        self.lang_items().is_weak_lang_item(item_def_id)\n-    }\n-}"}]}