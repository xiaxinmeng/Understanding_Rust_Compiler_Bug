{"sha": "7ed0e2320975a00c3a61cef72d56c5fae8f3c608", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlZDBlMjMyMDk3NWEwMGMzYTYxY2VmNzJkNTZjNWZhZThmM2M2MDg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-29T18:41:25Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-30T14:36:23Z"}, "message": "Resolve merge conflicts. This changes should really be integrated back to their respective\ncommits but oh dear what a pain.", "tree": {"sha": "df223d0a5ffe60225cfd23e2d54be1acf94b0a0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df223d0a5ffe60225cfd23e2d54be1acf94b0a0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ed0e2320975a00c3a61cef72d56c5fae8f3c608", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ed0e2320975a00c3a61cef72d56c5fae8f3c608", "html_url": "https://github.com/rust-lang/rust/commit/7ed0e2320975a00c3a61cef72d56c5fae8f3c608", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ed0e2320975a00c3a61cef72d56c5fae8f3c608/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05eb2eeb61985f481982285ae7714d5cc0d7bdb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/05eb2eeb61985f481982285ae7714d5cc0d7bdb7", "html_url": "https://github.com/rust-lang/rust/commit/05eb2eeb61985f481982285ae7714d5cc0d7bdb7"}], "stats": {"total": 78, "additions": 45, "deletions": 33}, "files": [{"sha": "d319e441415197f6deb597afbcd2d78d156796b7", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ed0e2320975a00c3a61cef72d56c5fae8f3c608/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ed0e2320975a00c3a61cef72d56c5fae8f3c608/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=7ed0e2320975a00c3a61cef72d56c5fae8f3c608", "patch": "@@ -222,9 +222,10 @@ fn assemble_candidates_from_object_type<'cx,'tcx>(\n         ty::ty_trait(ref data) => data,\n         _ => { return; }\n     };\n-    let env_predicates = data.projection_bounds_with_self_ty(self_ty).iter()\n-                                                                     .map(|p| p.as_predicate())\n-                                                                     .collect();\n+    let projection_bounds = data.projection_bounds_with_self_ty(selcx.tcx(), self_ty);\n+    let env_predicates = projection_bounds.iter()\n+                                          .map(|p| p.as_predicate())\n+                                          .collect();\n     assemble_candidates_from_predicates(selcx, obligation, candidate_set, env_predicates)\n }\n "}, {"sha": "91f1b50521d4fd4921195649d97f44bdf8071686", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ed0e2320975a00c3a61cef72d56c5fae8f3c608/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ed0e2320975a00c3a61cef72d56c5fae8f3c608/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=7ed0e2320975a00c3a61cef72d56c5fae8f3c608", "patch": "@@ -791,7 +791,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                projection_trait_ref.repr(self.tcx()));\n \n         let trait_def = ty::lookup_trait_def(self.tcx(), projection_trait_ref.def_id);\n-        let bounds = trait_def.generics.to_bounds(self.tcx(), &projection_trait_ref.substs);\n+        let bounds = trait_def.generics.to_bounds(self.tcx(), projection_trait_ref.substs);\n         debug!(\"match_projection_obligation_against_bounds_from_trait: \\\n                 bounds={}\",\n                bounds.repr(self.tcx()));"}, {"sha": "caec56800c63a14149dc63a0056e34ba49eaf752", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7ed0e2320975a00c3a61cef72d56c5fae8f3c608/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ed0e2320975a00c3a61cef72d56c5fae8f3c608/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=7ed0e2320975a00c3a61cef72d56c5fae8f3c608", "patch": "@@ -914,7 +914,7 @@ impl<'tcx> ctxt<'tcx> {\n         sty_debug_print!(\n             self,\n             ty_enum, ty_uniq, ty_vec, ty_ptr, ty_rptr, ty_bare_fn, ty_closure, ty_trait,\n-            ty_struct, ty_unboxed_closure, ty_tup, ty_param, ty_open, ty_infer);\n+            ty_struct, ty_unboxed_closure, ty_tup, ty_param, ty_open, ty_infer, ty_projection);\n \n         println!(\"Substs interner: #{}\", self.substs_interner.borrow().len());\n         println!(\"BareFnTy interner: #{}\", self.bare_fn_interner.borrow().len());\n@@ -1352,7 +1352,7 @@ pub enum sty<'tcx> {\n \n     ty_closure(Box<ClosureTy<'tcx>>),\n     ty_trait(Box<TyTrait<'tcx>>),\n-    ty_struct(DefId, Substs<'tcx>),\n+    ty_struct(DefId, &'tcx Substs<'tcx>),\n \n     ty_unboxed_closure(DefId, &'tcx Region, &'tcx Substs<'tcx>),\n \n@@ -1402,7 +1402,9 @@ impl<'tcx> TyTrait<'tcx> {\n         }))\n     }\n \n-    pub fn projection_bounds_with_self_ty(&self, self_ty: Ty<'tcx>)\n+    pub fn projection_bounds_with_self_ty(&self,\n+                                          tcx: &ctxt<'tcx>,\n+                                          self_ty: Ty<'tcx>)\n                                           -> Vec<ty::PolyProjectionPredicate<'tcx>>\n     {\n         // otherwise the escaping regions would be captured by the binders\n@@ -1411,10 +1413,10 @@ impl<'tcx> TyTrait<'tcx> {\n         self.bounds.projection_bounds.iter()\n             .map(|in_poly_projection_predicate| {\n                 let in_projection_ty = &in_poly_projection_predicate.0.projection_ty;\n+                let substs = tcx.mk_substs(in_projection_ty.trait_ref.substs.with_self_ty(self_ty));\n                 let trait_ref =\n-                    Rc::new(ty::TraitRef::new(\n-                        in_projection_ty.trait_ref.def_id,\n-                        in_projection_ty.trait_ref.substs.with_self_ty(self_ty)));\n+                    Rc::new(ty::TraitRef::new(in_projection_ty.trait_ref.def_id,\n+                                              substs));\n                 let projection_ty = ty::ProjectionTy {\n                     trait_ref: trait_ref,\n                     item_name: in_projection_ty.item_name\n@@ -2286,7 +2288,7 @@ pub fn mk_ctxt<'tcx>(s: Session,\n \n     ctxt {\n         arenas: arenas,\n-        interner: RefCell::new(FnvHashMap::new()),\n+        interner: RefCell::new(interner),\n         substs_interner: RefCell::new(FnvHashMap::new()),\n         bare_fn_interner: RefCell::new(FnvHashMap::new()),\n         region_interner: RefCell::new(FnvHashMap::new()),\n@@ -2386,7 +2388,7 @@ impl<'tcx> ctxt<'tcx> {\n // and returns the box as cast to an unsafe ptr (see comments for Ty above).\n pub fn mk_t<'tcx>(cx: &ctxt<'tcx>, st: sty<'tcx>) -> Ty<'tcx> {\n     let mut interner = cx.interner.borrow_mut();\n-    intern_ty(cx.type_arena, &mut *interner, st)\n+    intern_ty(&cx.arenas.type_, &mut *interner, st)\n }\n \n fn intern_ty<'tcx>(type_arena: &'tcx TypedArena<TyS<'tcx>>,\n@@ -2501,12 +2503,12 @@ impl FlagComputation {\n \n             &ty_projection(ref data) => {\n                 self.add_flags(HAS_PROJECTION);\n-                self.add_substs(&data.trait_ref.substs);\n+                self.add_substs(data.trait_ref.substs);\n             }\n \n             &ty_trait(box TyTrait { ref principal, ref bounds }) => {\n                 let mut computation = FlagComputation::new();\n-                computation.add_substs(&principal.0.substs);\n+                computation.add_substs(principal.0.substs);\n                 self.add_bound_computation(&computation);\n \n                 self.add_bounds(bounds);"}, {"sha": "b5b1c6ff86479a1b1544ca7e540239162a7fb0f5", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ed0e2320975a00c3a61cef72d56c5fae8f3c608/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ed0e2320975a00c3a61cef72d56c5fae8f3c608/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=7ed0e2320975a00c3a61cef72d56c5fae8f3c608", "patch": "@@ -428,7 +428,7 @@ impl<'tcx> TypeMap<'tcx> {\n                 from_def_id_and_substs(self,\n                                        cx,\n                                        trait_data.principal_def_id(),\n-                                       &trait_data.principal.0.substs,\n+                                       trait_data.principal.0.substs,\n                                        &mut unique_type_id);\n             },\n             ty::ty_bare_fn(_, &ty::BareFnTy{ unsafety, abi, ref sig } ) => {\n@@ -3819,7 +3819,7 @@ fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         },\n         ty::ty_trait(ref trait_data) => {\n             push_item_name(cx, trait_data.principal_def_id(), false, output);\n-            push_type_params(cx, &trait_data.principal.0.substs, output);\n+            push_type_params(cx, trait_data.principal.0.substs, output);\n         },\n         ty::ty_bare_fn(_, &ty::BareFnTy{ unsafety, abi, ref sig } ) => {\n             if unsafety == ast::Unsafety::Unsafe {"}, {"sha": "5a20a297fdb09ddfe569910aacb421738310bd9e", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ed0e2320975a00c3a61cef72d56c5fae8f3c608/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ed0e2320975a00c3a61cef72d56c5fae8f3c608/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=7ed0e2320975a00c3a61cef72d56c5fae8f3c608", "patch": "@@ -321,7 +321,7 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             &ty::UnsizeVtable(ty::TyTrait { ref principal, .. }, _) => {\n                 // Note that we preserve binding levels here:\n                 let substs = principal.0.substs.with_self_ty(unadjusted_ty).erase_regions();\n-                let substs = tcx.tcx().mk_substs(substs);\n+                let substs = bcx.tcx().mk_substs(substs);\n                 let trait_ref =\n                     ty::Binder(Rc::new(ty::TraitRef { def_id: principal.def_id(),\n                                                       substs: substs }));"}, {"sha": "3b7043e4f40f065fd8e112d70edeef141698b9ca", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ed0e2320975a00c3a61cef72d56c5fae8f3c608/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ed0e2320975a00c3a61cef72d56c5fae8f3c608/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=7ed0e2320975a00c3a61cef72d56c5fae8f3c608", "patch": "@@ -348,6 +348,7 @@ impl<'a,'tcx> TypeFolder<'tcx> for AssociatedTypeNormalizer<'a,'tcx> {\n \n                 let tcx = self.selcx.tcx();\n                 let substs = data.trait_ref.substs.clone().erase_regions();\n+                let substs = self.tcx().mk_substs(substs);\n                 assert!(substs.types.iter().all(|&t| (!ty::type_has_params(t) &&\n                                                       !ty::type_has_self(t))));\n                 let trait_ref = Rc::new(ty::TraitRef::new(data.trait_ref.def_id, substs));"}, {"sha": "85ead053d1d29d690d8a2f4dfc95a40ebacd5d60", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ed0e2320975a00c3a61cef72d56c5fae8f3c608/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ed0e2320975a00c3a61cef72d56c5fae8f3c608/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=7ed0e2320975a00c3a61cef72d56c5fae8f3c608", "patch": "@@ -172,7 +172,9 @@ fn deduce_unboxed_closure_expectations_from_expected_type<'a,'tcx>(\n {\n     match expected_ty.sty {\n         ty::ty_trait(ref object_type) => {\n-            let trait_ref = object_type.principal_trait_ref_with_self_ty(fcx.tcx().types.err);\n+            let trait_ref =\n+                object_type.principal_trait_ref_with_self_ty(fcx.tcx(),\n+                                                             fcx.tcx().types.err);\n             deduce_unboxed_closure_expectations_from_trait_ref(fcx, &trait_ref)\n         }\n         ty::ty_infer(ty::TyVar(vid)) => {"}, {"sha": "e483609407175a7101b7b07baba34a20e5415e0d", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ed0e2320975a00c3a61cef72d56c5fae8f3c608/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ed0e2320975a00c3a61cef72d56c5fae8f3c608/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=7ed0e2320975a00c3a61cef72d56c5fae8f3c608", "patch": "@@ -199,7 +199,7 @@ pub fn lookup_in_trait_adjusted<'a, 'tcx>(fcx: &'a FnCtxt<'a, 'tcx>,\n     let fn_sig = fcx.infcx().replace_late_bound_regions_with_fresh_var(span,\n                                                                        infer::FnCall,\n                                                                        &method_ty.fty.sig).0;\n-    let fn_sig = fcx.instantiate_type_scheme(span, &trait_ref.substs, &fn_sig);\n+    let fn_sig = fcx.instantiate_type_scheme(span, trait_ref.substs, &fn_sig);\n     let transformed_self_ty = fn_sig.inputs[0];\n     let fty = ty::mk_bare_fn(tcx, None, tcx.mk_bare_fn(ty::BareFnTy {\n         sig: ty::Binder(fn_sig),"}, {"sha": "a11f7b15e03a56d19c2adceff1ce554444de0fcb", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7ed0e2320975a00c3a61cef72d56c5fae8f3c608/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ed0e2320975a00c3a61cef72d56c5fae8f3c608/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7ed0e2320975a00c3a61cef72d56c5fae8f3c608", "patch": "@@ -1194,9 +1194,12 @@ fn compare_impl_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                                  impl_m_span,\n                                                  impl_m_body_id,\n                                                  &impl_sig);\n-        let impl_fty = ty::mk_bare_fn(tcx, None, ty::BareFnTy { unsafety: impl_m.fty.unsafety,\n-                                                                abi: impl_m.fty.abi,\n-                                                                sig: ty::Binder(impl_sig) });\n+        let impl_fty =\n+            ty::mk_bare_fn(tcx,\n+                           None,\n+                           tcx.mk_bare_fn(ty::BareFnTy { unsafety: impl_m.fty.unsafety,\n+                                                         abi: impl_m.fty.abi,\n+                                                         sig: ty::Binder(impl_sig) }));\n         debug!(\"compare_impl_method: impl_fty={}\",\n                impl_fty.repr(tcx));\n \n@@ -1210,9 +1213,12 @@ fn compare_impl_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                                  impl_m_span,\n                                                  impl_m_body_id,\n                                                  &trait_sig);\n-        let trait_fty = ty::mk_bare_fn(tcx, None, ty::BareFnTy { unsafety: trait_m.fty.unsafety,\n-                                                                 abi: trait_m.fty.abi,\n-                                                                 sig: ty::Binder(trait_sig) });\n+        let trait_fty =\n+            ty::mk_bare_fn(tcx,\n+                           None,\n+                           tcx.mk_bare_fn(ty::BareFnTy { unsafety: trait_m.fty.unsafety,\n+                                                         abi: trait_m.fty.abi,\n+                                                         sig: ty::Binder(trait_sig) }));\n \n         debug!(\"compare_impl_method: trait_fty={}\",\n                trait_fty.repr(tcx));"}, {"sha": "bb051ab15250ca9cdbc97ef764a5f17bcf9a97d9", "filename": "src/librustc_typeck/check/regionmanip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ed0e2320975a00c3a61cef72d56c5fae8f3c608/src%2Flibrustc_typeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ed0e2320975a00c3a61cef72d56c5fae8f3c608/src%2Flibrustc_typeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionmanip.rs?ref=7ed0e2320975a00c3a61cef72d56c5fae8f3c608", "patch": "@@ -131,7 +131,7 @@ impl<'a, 'tcx> Wf<'a, 'tcx> {\n                 // this seems like a minimal requirement:\n                 let trait_def = ty::lookup_trait_def(self.tcx, data.trait_ref.def_id);\n                 self.accumulate_from_adt(ty, data.trait_ref.def_id,\n-                                         &trait_def.generics, &data.trait_ref.substs)\n+                                         &trait_def.generics, data.trait_ref.substs)\n             }\n \n             ty::ty_tup(ref tuptys) => {"}, {"sha": "23a8643aadcf535da46ce16952766268bba05628", "filename": "src/librustc_typeck/check/vtable.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ed0e2320975a00c3a61cef72d56c5fae8f3c608/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ed0e2320975a00c3a61cef72d56c5fae8f3c608/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs?ref=7ed0e2320975a00c3a61cef72d56c5fae8f3c608", "patch": "@@ -389,7 +389,8 @@ pub fn register_object_cast_obligations<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     }\n \n     // Finally, create obligations for the projection predicates.\n-    let projection_bounds = object_trait.projection_bounds_with_self_ty(referent_ty);\n+    let projection_bounds =\n+        object_trait.projection_bounds_with_self_ty(fcx.tcx(), referent_ty);\n     for projection_bound in projection_bounds.iter() {\n         let projection_obligation =\n             Obligation::new(cause.clone(), projection_bound.as_predicate());"}, {"sha": "da591ca04b745cfc2e9e83466699b8bc12a33613", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ed0e2320975a00c3a61cef72d56c5fae8f3c608/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ed0e2320975a00c3a61cef72d56c5fae8f3c608/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=7ed0e2320975a00c3a61cef72d56c5fae8f3c608", "patch": "@@ -838,8 +838,6 @@ pub fn trait_def_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                             generics,\n                                             items);\n \n-    assert_eq!(mk_item_substs(ccx, &ty_generics), substs);\n-\n     let self_param_ty = ty::ParamTy::for_self();\n \n     let bounds = compute_bounds(ccx,\n@@ -1476,7 +1474,7 @@ pub fn ty_of_foreign_fn_decl<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             sig: ty::Binder(ty::FnSig {inputs: input_tys,\n                                        output: output,\n                                        variadic: decl.variadic}),\n-        });\n+        }));\n     let scheme = TypeScheme {\n         generics: ty_generics_for_fn_or_method,\n         ty: t_fn"}, {"sha": "c4c33f24f87e2d9b4a57198514ccaec34ac6608f", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ed0e2320975a00c3a61cef72d56c5fae8f3c608/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ed0e2320975a00c3a61cef72d56c5fae8f3c608/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=7ed0e2320975a00c3a61cef72d56c5fae8f3c608", "patch": "@@ -787,12 +787,13 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                     trait_ref.def_id,\n                     trait_def.generics.types.as_slice(),\n                     trait_def.generics.regions.as_slice(),\n-                    &trait_ref.substs,\n+                    trait_ref.substs,\n                     variance);\n             }\n \n             ty::ty_trait(ref data) => {\n-                let trait_ref = data.principal_trait_ref_with_self_ty(self.tcx().types.err);\n+                let trait_ref = data.principal_trait_ref_with_self_ty(self.tcx(),\n+                                                                      self.tcx().types.err);\n                 let trait_def = ty::lookup_trait_def(self.tcx(), trait_ref.def_id());\n \n                 // Traits never declare region parameters in the self\n@@ -815,7 +816,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n             }\n \n             ty::ty_param(ref data) => {\n-                let def_id = generics.types.get(data.space, data.idx).def_id;\n+                let def_id = generics.types.get(data.space, data.idx as uint).def_id;\n                 assert_eq!(def_id.krate, ast::LOCAL_CRATE);\n                 match self.terms_cx.inferred_map.get(&def_id.node) {\n                     Some(&index) => {"}]}