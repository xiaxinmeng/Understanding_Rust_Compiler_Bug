{"sha": "07c2e614362ad8645eafe771e672a65f92e3b9a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3YzJlNjE0MzYyYWQ4NjQ1ZWFmZTc3MWU2NzJhNjVmOTJlM2I5YTI=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-08-16T06:20:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-16T06:20:51Z"}, "message": "Merge pull request #3056 from mikerite/fix-2927\n\nFix #2927", "tree": {"sha": "4003fe87448bc551401c2c2558c81f952a13f31f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4003fe87448bc551401c2c2558c81f952a13f31f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07c2e614362ad8645eafe771e672a65f92e3b9a2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbdRfDCRBK7hj4Ov3rIwAAdHIIAAVV2Ro4iXGd3PuXolzHhAr1\niM9LKdPN5Q4SSglDlss9wnpfdYNSQvgbTR7fclhB510EN2BcBudHl/mrBbY4X6yh\nnMN3JwH3hLv1IKf7My5mS0X4hYJRy8i0cH5fl5aZQOwYj1H7esQVtRsjEwphDJyA\nzO7FGCd1rNZoluEvNaJJMn2NLslyzK8cX1NSYf2Rryn6me+UDEmSSuqB/1wUkXgU\n0yDQ0PqRFHHxLBaOzoqZs5f/RDgKDNHEtpv5/VUalRUzyNCHlysIw/wl709ZefXK\nN9gaCUCS8XEtRIUaq3vaXaLpbfAA7wJfe2HaDGqjM+NjSP/QzuHqCcxuhm8Qstk=\n=6Y3P\n-----END PGP SIGNATURE-----\n", "payload": "tree 4003fe87448bc551401c2c2558c81f952a13f31f\nparent bac76afb5a7885de19bfd9e6191fe8e2a29bd74d\nparent 1c681b6ab63fabae44f28c1cb6dfb31319d27d77\nauthor Oliver Schneider <github35764891676564198441@oli-obk.de> 1534400451 +0200\ncommitter GitHub <noreply@github.com> 1534400451 +0200\n\nMerge pull request #3056 from mikerite/fix-2927\n\nFix #2927"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07c2e614362ad8645eafe771e672a65f92e3b9a2", "html_url": "https://github.com/rust-lang/rust/commit/07c2e614362ad8645eafe771e672a65f92e3b9a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07c2e614362ad8645eafe771e672a65f92e3b9a2/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bac76afb5a7885de19bfd9e6191fe8e2a29bd74d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bac76afb5a7885de19bfd9e6191fe8e2a29bd74d", "html_url": "https://github.com/rust-lang/rust/commit/bac76afb5a7885de19bfd9e6191fe8e2a29bd74d"}, {"sha": "1c681b6ab63fabae44f28c1cb6dfb31319d27d77", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c681b6ab63fabae44f28c1cb6dfb31319d27d77", "html_url": "https://github.com/rust-lang/rust/commit/1c681b6ab63fabae44f28c1cb6dfb31319d27d77"}], "stats": {"total": 83, "additions": 37, "deletions": 46}, "files": [{"sha": "3de7c6de9797039d3f5aafd9dacc9b9925b0bd1e", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/07c2e614362ad8645eafe771e672a65f92e3b9a2/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c2e614362ad8645eafe771e672a65f92e3b9a2/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=07c2e614362ad8645eafe771e672a65f92e3b9a2", "patch": "@@ -173,18 +173,22 @@ pub mod write;\n pub mod zero_div_zero;\n // end lints modules, do not remove this comment, it\u2019s used in `update_lints`\n \n+use crate::utils::conf::Conf;\n+\n mod reexport {\n     crate use syntax::ast::{Name, NodeId};\n }\n \n-pub fn register_pre_expansion_lints(session: &rustc::session::Session, store: &mut rustc::lint::LintStore) {\n+pub fn register_pre_expansion_lints(session: &rustc::session::Session, store: &mut rustc::lint::LintStore, conf: &Conf) {\n     store.register_pre_expansion_pass(Some(session), box write::Pass);\n     store.register_pre_expansion_pass(Some(session), box redundant_field_names::RedundantFieldNames);\n+    store.register_pre_expansion_pass(Some(session), box non_expressive_names::NonExpressiveNames {\n+        single_char_binding_names_threshold: conf.single_char_binding_names_threshold,\n+    });\n }\n \n-#[rustfmt::skip]\n-pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>) {\n-    let conf = match utils::conf::file_from_args(reg.args()) {\n+pub fn read_conf(reg: &rustc_plugin::Registry<'_>) -> Conf {\n+    match utils::conf::file_from_args(reg.args()) {\n         Ok(file_name) => {\n             // if the user specified a file, it must exist, otherwise default to `clippy.toml` but\n             // do not require the file to exist\n@@ -226,8 +230,11 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>) {\n                     .emit();\n             toml::from_str(\"\").expect(\"we never error on empty config files\")\n         }\n-    };\n+    }\n+}\n \n+#[rustfmt::skip]\n+pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     let mut store = reg.sess.lint_store.borrow_mut();\n     store.register_removed(\n         \"should_assert_eq\",\n@@ -329,9 +336,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>) {\n     reg.register_late_lint_pass(box derive::Derive);\n     reg.register_late_lint_pass(box types::CharLitAsU8);\n     reg.register_late_lint_pass(box vec::Pass);\n-    reg.register_early_lint_pass(box non_expressive_names::NonExpressiveNames {\n-        single_char_binding_names_threshold: conf.single_char_binding_names_threshold,\n-    });\n     reg.register_late_lint_pass(box drop_forget_ref::Pass);\n     reg.register_late_lint_pass(box empty_enum::EmptyEnum);\n     reg.register_late_lint_pass(box types::AbsurdExtremeComparisons);\n@@ -347,9 +351,9 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>) {\n     reg.register_late_lint_pass(box overflow_check_conditional::OverflowCheckConditional);\n     reg.register_late_lint_pass(box unused_label::UnusedLabel);\n     reg.register_late_lint_pass(box new_without_default::NewWithoutDefault);\n-    reg.register_late_lint_pass(box blacklisted_name::BlackListedName::new(conf.blacklisted_names));\n+    reg.register_late_lint_pass(box blacklisted_name::BlackListedName::new(conf.blacklisted_names.clone()));\n     reg.register_late_lint_pass(box functions::Functions::new(conf.too_many_arguments_threshold));\n-    reg.register_early_lint_pass(box doc::Doc::new(conf.doc_valid_idents));\n+    reg.register_early_lint_pass(box doc::Doc::new(conf.doc_valid_idents.clone()));\n     reg.register_late_lint_pass(box neg_multiply::NegMultiply);\n     reg.register_early_lint_pass(box unsafe_removed_from_name::UnsafeNameRemoval);\n     reg.register_late_lint_pass(box mem_forget::MemForget);"}, {"sha": "3401fbca17113d8074985ddf247dae84ce29c245", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07c2e614362ad8645eafe771e672a65f92e3b9a2/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c2e614362ad8645eafe771e672a65f92e3b9a2/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=07c2e614362ad8645eafe771e672a65f92e3b9a2", "patch": "@@ -5,7 +5,7 @@ use syntax::symbol::LocalInternedString;\n use syntax::ast::*;\n use syntax::attr;\n use syntax::visit::{walk_block, walk_expr, walk_pat, Visitor};\n-use crate::utils::{in_macro, span_lint, span_lint_and_then};\n+use crate::utils::{span_lint, span_lint_and_then};\n \n /// **What it does:** Checks for names that are very similar and thus confusing.\n ///\n@@ -147,9 +147,6 @@ impl<'a, 'tcx, 'b> SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n         }\n     }\n     fn check_name(&mut self, span: Span, name: Name) {\n-        if in_macro(span) {\n-            return;\n-        }\n         let interned_name = name.as_str();\n         if interned_name.chars().any(char::is_uppercase) {\n             return;\n@@ -309,6 +306,9 @@ impl<'a, 'tcx> Visitor<'tcx> for SimilarNamesLocalVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, _: &Item) {\n         // do not recurse into inner items\n     }\n+    fn visit_mac(&mut self, _mac: &Mac) {\n+        // do not check macs\n+    }\n }\n \n impl EarlyLintPass for NonExpressiveNames {\n@@ -323,7 +323,6 @@ impl EarlyLintPass for NonExpressiveNames {\n             do_check(self, cx, &item.attrs, &sig.decl, blk);\n         }\n     }\n-\n }\n \n fn do_check(lint: &mut NonExpressiveNames, cx: &EarlyContext<'_>, attrs: &[Attribute], decl: &FnDecl, blk: &Block) {"}, {"sha": "659287daed5767c5b305ae6673d720e2bf9eea05", "filename": "src/driver.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07c2e614362ad8645eafe771e672a65f92e3b9a2/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c2e614362ad8645eafe771e672a65f92e3b9a2/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=07c2e614362ad8645eafe771e672a65f92e3b9a2", "patch": "@@ -96,7 +96,9 @@ pub fn main() {\n                     .span,\n             );\n             registry.args_hidden = Some(Vec::new());\n-            clippy_lints::register_plugins(&mut registry);\n+\n+            let conf = clippy_lints::read_conf(&registry);\n+            clippy_lints::register_plugins(&mut registry, &conf);\n \n             let rustc_plugin::registry::Registry {\n                 early_lint_passes,\n@@ -118,7 +120,7 @@ pub fn main() {\n             for (name, to) in lint_groups {\n                 ls.register_group(Some(sess), true, name, to);\n             }\n-            clippy_lints::register_pre_expansion_lints(sess, &mut ls);\n+            clippy_lints::register_pre_expansion_lints(sess, &mut ls, &conf);\n \n             sess.plugin_llvm_passes.borrow_mut().extend(llvm_passes);\n             sess.plugin_attributes.borrow_mut().extend(attributes);"}, {"sha": "c2363fef9072ccdb53360c21f83f042efe740d61", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/07c2e614362ad8645eafe771e672a65f92e3b9a2/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c2e614362ad8645eafe771e672a65f92e3b9a2/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=07c2e614362ad8645eafe771e672a65f92e3b9a2", "patch": "@@ -25,7 +25,8 @@ pub fn plugin_registrar(reg: &mut Registry<'_>) {\n         }\n     });\n \n-    clippy_lints::register_plugins(reg);\n+    let conf = clippy_lints::read_conf(reg);\n+    clippy_lints::register_plugins(reg, &conf);\n }\n \n // only exists to let the dogfood integration test works."}, {"sha": "7149bf8f3e7bf5fb6bfc73413cf2828d2f4a747d", "filename": "tests/ui/non_expressive_names.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/07c2e614362ad8645eafe771e672a65f92e3b9a2/tests%2Fui%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c2e614362ad8645eafe771e672a65f92e3b9a2/tests%2Fui%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_expressive_names.rs?ref=07c2e614362ad8645eafe771e672a65f92e3b9a2", "patch": "@@ -1,7 +1,7 @@\n \n \n #![warn(clippy,similar_names)]\n-#![allow(unused)]\n+#![allow(unused, println_empty_string)]\n \n \n struct Foo {\n@@ -142,6 +142,11 @@ fn underscores_and_numbers() {\n     let _1_ok= 1;\n }\n \n+fn issue2927() {\n+  let args = 1;\n+  format!(\"{:?}\", 2);\n+}\n+\n struct Bar;\n \n impl Bar {"}, {"sha": "b4927e69e67ca4b076c269f31ae501f2a8ce4a23", "filename": "tests/ui/non_expressive_names.stderr", "status": "modified", "additions": 7, "deletions": 27, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/07c2e614362ad8645eafe771e672a65f92e3b9a2/tests%2Fui%2Fnon_expressive_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07c2e614362ad8645eafe771e672a65f92e3b9a2/tests%2Fui%2Fnon_expressive_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_expressive_names.stderr?ref=07c2e614362ad8645eafe771e672a65f92e3b9a2", "patch": "@@ -1,23 +1,3 @@\n-error: using `println!(\"\")`\n-  --> $DIR/non_expressive_names.rs:60:14\n-   |\n-60 |         _ => println!(\"\"),\n-   |              ^^^^^^^^^^^^ help: replace it with: `println!()`\n-   |\n-   = note: `-D println-empty-string` implied by `-D warnings`\n-\n-error: using `println!(\"\")`\n-   --> $DIR/non_expressive_names.rs:128:18\n-    |\n-128 |             1 => println!(\"\"),\n-    |                  ^^^^^^^^^^^^ help: replace it with: `println!()`\n-\n-error: using `println!(\"\")`\n-   --> $DIR/non_expressive_names.rs:132:18\n-    |\n-132 |             1 => println!(\"\"),\n-    |                  ^^^^^^^^^^^^ help: replace it with: `println!()`\n-\n error: binding's name is too similar to existing binding\n   --> $DIR/non_expressive_names.rs:18:9\n    |\n@@ -170,22 +150,22 @@ error: consider choosing a more descriptive name\n     |         ^^^^^^^\n \n error: consider choosing a more descriptive name\n-   --> $DIR/non_expressive_names.rs:149:13\n+   --> $DIR/non_expressive_names.rs:154:13\n     |\n-149 |         let _1 = 1;\n+154 |         let _1 = 1;\n     |             ^^\n \n error: consider choosing a more descriptive name\n-   --> $DIR/non_expressive_names.rs:150:13\n+   --> $DIR/non_expressive_names.rs:155:13\n     |\n-150 |         let ____1 = 1;\n+155 |         let ____1 = 1;\n     |             ^^^^^\n \n error: consider choosing a more descriptive name\n-   --> $DIR/non_expressive_names.rs:151:13\n+   --> $DIR/non_expressive_names.rs:156:13\n     |\n-151 |         let __1___2 = 12;\n+156 |         let __1___2 = 12;\n     |             ^^^^^^^\n \n-error: aborting due to 20 previous errors\n+error: aborting due to 17 previous errors\n "}]}