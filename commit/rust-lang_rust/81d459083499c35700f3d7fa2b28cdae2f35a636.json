{"sha": "81d459083499c35700f3d7fa2b28cdae2f35a636", "node_id": "C_kwDOAAsO6NoAKDgxZDQ1OTA4MzQ5OWMzNTcwMGYzZDdmYTJiMjhjZGFlMmYzNWE2MzY", "commit": {"author": {"name": "Sosth\u00e8ne Gu\u00e9don", "email": "sosthene@guedon.gdn", "date": "2022-11-01T18:31:47Z"}, "committer": {"name": "Sosth\u00e8ne Gu\u00e9don", "email": "sosthene@guedon.gdn", "date": "2022-11-20T12:45:12Z"}, "message": "missnamed_getters: use all_fields iterator", "tree": {"sha": "3ef860f4404c58c1b83b730a37e1f9755b6f4ebe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ef860f4404c58c1b83b730a37e1f9755b6f4ebe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81d459083499c35700f3d7fa2b28cdae2f35a636", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81d459083499c35700f3d7fa2b28cdae2f35a636", "html_url": "https://github.com/rust-lang/rust/commit/81d459083499c35700f3d7fa2b28cdae2f35a636", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81d459083499c35700f3d7fa2b28cdae2f35a636/comments", "author": {"login": "sgued", "id": 51865119, "node_id": "MDQ6VXNlcjUxODY1MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/51865119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgued", "html_url": "https://github.com/sgued", "followers_url": "https://api.github.com/users/sgued/followers", "following_url": "https://api.github.com/users/sgued/following{/other_user}", "gists_url": "https://api.github.com/users/sgued/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgued/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgued/subscriptions", "organizations_url": "https://api.github.com/users/sgued/orgs", "repos_url": "https://api.github.com/users/sgued/repos", "events_url": "https://api.github.com/users/sgued/events{/privacy}", "received_events_url": "https://api.github.com/users/sgued/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sgued", "id": 51865119, "node_id": "MDQ6VXNlcjUxODY1MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/51865119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgued", "html_url": "https://github.com/sgued", "followers_url": "https://api.github.com/users/sgued/followers", "following_url": "https://api.github.com/users/sgued/following{/other_user}", "gists_url": "https://api.github.com/users/sgued/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgued/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgued/subscriptions", "organizations_url": "https://api.github.com/users/sgued/orgs", "repos_url": "https://api.github.com/users/sgued/repos", "events_url": "https://api.github.com/users/sgued/events{/privacy}", "received_events_url": "https://api.github.com/users/sgued/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddc49966dc4552b77582cf7e5aace8ac97d736fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddc49966dc4552b77582cf7e5aace8ac97d736fc", "html_url": "https://github.com/rust-lang/rust/commit/ddc49966dc4552b77582cf7e5aace8ac97d736fc"}], "stats": {"total": 17, "additions": 1, "deletions": 16}, "files": [{"sha": "306dccdbd48992fb9941667838312f1ee6dc63fd", "filename": "clippy_lints/src/functions/missnamed_getters.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/81d459083499c35700f3d7fa2b28cdae2f35a636/clippy_lints%2Fsrc%2Ffunctions%2Fmissnamed_getters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81d459083499c35700f3d7fa2b28cdae2f35a636/clippy_lints%2Fsrc%2Ffunctions%2Fmissnamed_getters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmissnamed_getters.rs?ref=81d459083499c35700f3d7fa2b28cdae2f35a636", "patch": "@@ -83,24 +83,9 @@ pub fn check_fn(\n         }\n     };\n \n-    let variants = def.variants();\n-\n-    // We're accessing a field, so it should be an union or a struct and have one and only one variant\n-    if variants.len() != 1 {\n-        if cfg!(debug_assertions) {\n-            panic!(\"Struct or union expected to have only one variant\");\n-        } else {\n-            // Don't ICE when possible\n-            return;\n-        }\n-    }\n-\n-    let first = variants.last().unwrap();\n-    let fields = &variants[first];\n-\n     let mut used_field = None;\n     let mut correct_field = None;\n-    for f in &fields.fields {\n+    for f in def.all_fields() {\n         if f.name.as_str() == name {\n             correct_field = Some(f);\n         }"}]}