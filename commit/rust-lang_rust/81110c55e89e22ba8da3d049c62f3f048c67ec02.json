{"sha": "81110c55e89e22ba8da3d049c62f3f048c67ec02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMTEwYzU1ZTg5ZTIyYmE4ZGEzZDA0OWM2MmYzZjA0OGM2N2VjMDI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-23T00:47:49Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-23T00:47:49Z"}, "message": "Revert \"Errors with the same span print the span once\"\n\nThis reverts commit 6030e3982a52c8d9ede225f992088bb75fba4ef1.", "tree": {"sha": "615e7006b28c1474436fe0df0130a1e8272bc524", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/615e7006b28c1474436fe0df0130a1e8272bc524"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81110c55e89e22ba8da3d049c62f3f048c67ec02", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81110c55e89e22ba8da3d049c62f3f048c67ec02", "html_url": "https://github.com/rust-lang/rust/commit/81110c55e89e22ba8da3d049c62f3f048c67ec02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81110c55e89e22ba8da3d049c62f3f048c67ec02/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05f9586d0682e87362a5783edc7e5238094b8ae2", "url": "https://api.github.com/repos/rust-lang/rust/commits/05f9586d0682e87362a5783edc7e5238094b8ae2", "html_url": "https://github.com/rust-lang/rust/commit/05f9586d0682e87362a5783edc7e5238094b8ae2"}], "stats": {"total": 160, "additions": 13, "deletions": 147}, "files": [{"sha": "35022b68ebbbee98ed4eedf54a84969b2cce8dd8", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 13, "deletions": 147, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/81110c55e89e22ba8da3d049c62f3f048c67ec02/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81110c55e89e22ba8da3d049c62f3f048c67ec02/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=81110c55e89e22ba8da3d049c62f3f048c67ec02", "patch": "@@ -33,7 +33,6 @@ pub trait handler {\n     fn bump_err_count(@mut self);\n     fn has_errors(@mut self) -> bool;\n     fn abort_if_errors(@mut self);\n-    fn abort_error_print(@mut self);\n     fn warn(@mut self, msg: &str);\n     fn note(@mut self, msg: &str);\n     // used to indicate a bug in the compiler:\n@@ -43,7 +42,6 @@ pub trait handler {\n             cmsp: Option<(@codemap::CodeMap, span)>,\n             msg: &str,\n             lvl: level);\n-    fn emit_print(@mut self, lvl: level);\n }\n \n // a span-handler is like a handler but also\n@@ -59,15 +57,8 @@ pub trait span_handler {\n     fn handler(@mut self) -> @handler;\n }\n \n-struct emitter_arg {\n-    cmsp: Option<(@codemap::CodeMap, span)>,\n-    msg: ~str,\n-    lvl: level,\n-}\n-\n struct HandlerT {\n     err_count: uint,\n-    emitters: ~[emitter_arg],\n     emit: Emitter,\n }\n \n@@ -78,19 +69,15 @@ struct CodemapT {\n \n impl span_handler for CodemapT {\n     fn span_fatal(@mut self, sp: span, msg: &str) -> ! {\n-        self.handler.bump_err_count();\n         self.handler.emit(Some((self.cm, sp)), msg, fatal);\n-        self.handler.emit_print(error);\n-        self.handler.emit_print(note);\n-        self.handler.abort_error_print();\n         fail!();\n     }\n     fn span_err(@mut self, sp: span, msg: &str) {\n         self.handler.emit(Some((self.cm, sp)), msg, error);\n         self.handler.bump_err_count();\n     }\n     fn span_warn(@mut self, sp: span, msg: &str) {\n-        emit_one(Some((self.cm, sp)), msg, warning);\n+        self.handler.emit(Some((self.cm, sp)), msg, warning);\n     }\n     fn span_note(@mut self, sp: span, msg: &str) {\n         self.handler.emit(Some((self.cm, sp)), msg, note);\n@@ -108,13 +95,11 @@ impl span_handler for CodemapT {\n \n impl handler for HandlerT {\n     fn fatal(@mut self, msg: &str) -> ! {\n-        self.emit_print(error);\n-        self.emit_print(note);\n-        emit_one(None, msg, fatal);\n+        (self.emit)(None, msg, fatal);\n         fail!();\n     }\n     fn err(@mut self, msg: &str) {\n-        emit_one(None, msg, error);\n+        (self.emit)(None, msg, error);\n         self.bump_err_count();\n     }\n     fn bump_err_count(@mut self) {\n@@ -133,26 +118,13 @@ impl handler for HandlerT {\n         }\n         self.fatal(s);\n     }\n-    fn abort_error_print(@mut self) {\n-        let s;\n-        match self.err_count {\n-          0u => return,\n-          1u => s = ~\"aborting due to previous error\",\n-          _  => {\n-            s = fmt!(\"aborting due to %u previous errors\",\n-                     self.err_count);\n-          }\n-        }\n-        emit_one(None, s, fatal);\n-    }\n     fn warn(@mut self, msg: &str) {\n-        emit_one(None, msg, warning);\n+        (self.emit)(None, msg, warning);\n     }\n     fn note(@mut self, msg: &str) {\n-        self.emit(None, msg, note);\n+        (self.emit)(None, msg, note);\n     }\n     fn bug(@mut self, msg: &str) -> ! {\n-        self.bump_err_count();\n         self.fatal(ice_msg(msg));\n     }\n     fn unimpl(@mut self, msg: &str) -> ! {\n@@ -163,50 +135,6 @@ impl handler for HandlerT {\n             msg: &str,\n             lvl: level) {\n         (self.emit)(cmsp, msg, lvl);\n-        let emitter = emitter_arg { cmsp: cmsp,\n-                                    msg: str::from_slice(msg),\n-                                    lvl: lvl };\n-        self.emitters.push(emitter);\n-    }\n-\n-    fn emit_print(@mut self, lvl: level) {\n-        let mut old_cmsp = None;\n-        let mut old_line = 0u;\n-\n-        let emitters = self.emitters;\n-        let length = emitters.len();\n-        for uint::range(0, length) |i| {\n-            let emitter = copy self.emitters[i];\n-            let cmsp = emitter.cmsp;\n-            let msg = emitter.msg;\n-            if diagnosticstr(lvl) == diagnosticstr(emitter.lvl) {\n-                match cmsp {\n-                    Some((cm, sp)) => {\n-                            let lo = cm.lookup_char_pos_adj(sp.lo);\n-                            let sp = cm.adjust_span(sp);\n-                            let ss = cm.span_to_str(sp);\n-                            if i == 0 || old_line == lo.line {\n-                                if old_line == lo.line {\n-                                    highlight_lines_cmp(cmsp, old_cmsp);\n-                                }\n-                                print_diagnostic(ss, lvl, msg);\n-                                highlight_lines_cmp(old_cmsp, cmsp);\n-                            } else {\n-                                highlight_lines(old_cmsp);\n-                                print_macro_backtrace(old_cmsp);\n-                                print_diagnostic(ss, lvl, msg);\n-                            }\n-                            old_line = lo.line;\n-                            old_cmsp = emitter.cmsp;\n-                    }\n-                    None => {\n-                        print_diagnostic(~\"\", lvl, msg);\n-                    }\n-                }\n-            }\n-        }\n-        highlight_lines(old_cmsp);\n-        print_macro_backtrace(old_cmsp);\n     }\n }\n \n@@ -228,9 +156,7 @@ pub fn mk_handler(emitter: Option<Emitter>) -> @handler {\n         }\n     };\n \n-    @mut HandlerT { err_count: 0,\n-                    emitters: ~[],\n-                    emit: emit } as @handler\n+    @mut HandlerT { err_count: 0, emit: emit } as @handler\n }\n \n #[deriving(Eq)]\n@@ -282,27 +208,23 @@ pub fn collect(messages: @mut ~[~str])\n     f\n }\n \n-pub fn emit(_cmsp: Option<(@codemap::CodeMap, span)>, _msg: &str, _lvl: level) {\n-    // Nothing to do\n-}\n-\n-pub fn emit_one(cmsp: Option<(@codemap::CodeMap, span)>,\n-        msg: &str, lvl: level) {\n+pub fn emit(cmsp: Option<(@codemap::CodeMap, span)>, msg: &str, lvl: level) {\n     match cmsp {\n       Some((cm, sp)) => {\n         let sp = cm.adjust_span(sp);\n         let ss = cm.span_to_str(sp);\n+        let lines = cm.span_to_lines(sp);\n         print_diagnostic(ss, lvl, msg);\n-        highlight_lines(cmsp);\n-        print_macro_backtrace(cmsp);\n+        highlight_lines(cm, sp, lines);\n+        print_macro_backtrace(cm, sp);\n       }\n       None => {\n         print_diagnostic(~\"\", lvl, msg);\n       }\n     }\n }\n \n-fn highlight_lines_internal(cm: @codemap::CodeMap,\n+fn highlight_lines(cm: @codemap::CodeMap,\n                    sp: span,\n                    lines: @codemap::FileLines) {\n     let fm = lines.file;\n@@ -369,70 +291,14 @@ fn highlight_lines_internal(cm: @codemap::CodeMap,\n     }\n }\n \n-fn highlight_lines(cmsp: Option<(@codemap::CodeMap, span)>) {\n-    match cmsp {\n-        Some((cm, sp)) => {\n-            let sp = cm.adjust_span(sp);\n-            let lines = cm.span_to_lines(sp);\n-            highlight_lines_internal(cm, sp, lines);\n-        }\n-        None => ()\n-    }\n-}\n-\n-fn highlight_lines_cmp(old_cmsp: Option<(@codemap::CodeMap, span)>,\n-                       cmsp: Option<(@codemap::CodeMap, span)> ){\n-    let mut old_line = ~[];\n-    let mut new_line = ~[];\n-    let mut old_lo = 0u;\n-    let mut new_lo = 0u;\n-    let mut flag = true;\n-    match old_cmsp {\n-        Some((cm, sp)) => {\n-            let lo = cm.lookup_char_pos(sp.lo);\n-            let sp = cm.adjust_span(sp);\n-            let lines = cm.span_to_lines(sp);\n-            old_line = lines.lines;\n-            old_lo = lo.col.to_uint();\n-        }\n-        None => { flag = false; }\n-    }\n-\n-    match cmsp {\n-        Some((cm, sp)) => {\n-            let lo = cm.lookup_char_pos(sp.lo);\n-            let sp = cm.adjust_span(sp);\n-            let lines = cm.span_to_lines(sp);\n-            new_line = lines.lines;\n-            new_lo = lo.col.to_uint();\n-        }\n-        None => { flag = false; }\n-    }\n-\n-    if flag {\n-        if old_line == new_line && old_lo > new_lo {\n-            highlight_lines(cmsp);\n-        }\n-    }\n-}\n-\n-fn print_macro_backtrace_internal(cm: @codemap::CodeMap, sp: span) {\n+fn print_macro_backtrace(cm: @codemap::CodeMap, sp: span) {\n     for sp.expn_info.each |ei| {\n         let ss = ei.callee.span.map_default(@~\"\", |span| @cm.span_to_str(*span));\n         print_diagnostic(*ss, note,\n                          fmt!(\"in expansion of %s!\", ei.callee.name));\n         let ss = cm.span_to_str(ei.call_site);\n         print_diagnostic(ss, note, ~\"expansion site\");\n-        print_macro_backtrace_internal(cm, ei.call_site);\n-    }\n-}\n-\n-fn print_macro_backtrace(cmsp: Option<(@codemap::CodeMap, span)>) {\n-    match cmsp {\n-        Some((cm, sp)) => {\n-            print_macro_backtrace_internal(cm, sp);\n-        }\n-        None => ()\n+        print_macro_backtrace(cm, ei.call_site);\n     }\n }\n "}]}