{"sha": "152c76ef0d62b2529b50356773ac6907a6db0f6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1MmM3NmVmMGQ2MmIyNTI5YjUwMzU2NzczYWM2OTA3YTZkYjBmNmU=", "commit": {"author": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2015-08-24T15:47:01Z"}, "committer": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2015-08-24T15:47:01Z"}, "message": "Minimize the implementation of `Rem` in libcore\n\nThe implementation of the remainder operation belongs to\nlibrustc_trans, but it is also stubbed out in libcore in order to\nexpose it as a trait on primitive types. Instead of exposing some\nimplementation details (like the upcast to `f64` in MSVC), use a\nminimal implementation just like that of the `Div` trait.", "tree": {"sha": "e638282030c52b5fa018174705e8ed0d2ea6de5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e638282030c52b5fa018174705e8ed0d2ea6de5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/152c76ef0d62b2529b50356773ac6907a6db0f6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/152c76ef0d62b2529b50356773ac6907a6db0f6e", "html_url": "https://github.com/rust-lang/rust/commit/152c76ef0d62b2529b50356773ac6907a6db0f6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/152c76ef0d62b2529b50356773ac6907a6db0f6e/comments", "author": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db67cbe43dfce043c664c53d709b91252d5afc9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/db67cbe43dfce043c664c53d709b91252d5afc9e", "html_url": "https://github.com/rust-lang/rust/commit/db67cbe43dfce043c664c53d709b91252d5afc9e"}], "stats": {"total": 45, "additions": 13, "deletions": 32}, "files": [{"sha": "ecf80d7e30ae2e00a200859a41236c06b2d289b4", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 13, "deletions": 32, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/152c76ef0d62b2529b50356773ac6907a6db0f6e/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/152c76ef0d62b2529b50356773ac6907a6db0f6e/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=152c76ef0d62b2529b50356773ac6907a6db0f6e", "patch": "@@ -423,7 +423,7 @@ pub trait Rem<RHS=Self> {\n     fn rem(self, rhs: RHS) -> Self::Output;\n }\n \n-macro_rules! rem_impl {\n+macro_rules! rem_impl_integer {\n     ($($t:ty)*) => ($(\n         /// This operation satisfies `n % d == n - (n / d) * d`.  The\n         /// result has the same sign as the left operand.\n@@ -439,42 +439,23 @@ macro_rules! rem_impl {\n     )*)\n }\n \n-rem_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n+rem_impl_integer! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Rem for f32 {\n-    type Output = f32;\n-\n-    // The builtin f32 rem operator is broken when targeting\n-    // MSVC; see comment in std::f32::floor.\n-    // FIXME: See also #27859.\n-    #[inline]\n-    #[cfg(target_env = \"msvc\")]\n-    fn rem(self, other: f32) -> f32 {\n-        (self as f64).rem(other as f64) as f32\n-    }\n-\n-    #[inline]\n-    #[cfg(not(target_env = \"msvc\"))]\n-    fn rem(self, other: f32) -> f32 {\n-        extern { fn fmodf(a: f32, b: f32) -> f32; }\n-        unsafe { fmodf(self, other) }\n-    }\n-}\n+macro_rules! rem_impl_float {\n+    ($($t:ty)*) => ($(\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        impl Rem for $t {\n+            type Output = $t;\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Rem for f64 {\n-    type Output = f64;\n+            #[inline]\n+            fn rem(self, other: $t) -> $t { self % other }\n+        }\n \n-    #[inline]\n-    fn rem(self, other: f64) -> f64 {\n-        extern { fn fmod(a: f64, b: f64) -> f64; }\n-        unsafe { fmod(self, other) }\n-    }\n+        forward_ref_binop! { impl Rem, rem for $t, $t }\n+    )*)\n }\n \n-forward_ref_binop! { impl Rem, rem for f64, f64 }\n-forward_ref_binop! { impl Rem, rem for f32, f32 }\n+rem_impl_float! { f32 f64 }\n \n /// The `Neg` trait is used to specify the functionality of unary `-`.\n ///"}]}