{"sha": "2bd17c1d43bba43412cc2f051323a279d6751e43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZDE3YzFkNDNiYmE0MzQxMmNjMmYwNTEzMjNhMjc5ZDY3NTFlNDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-15T21:22:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-15T21:22:02Z"}, "message": "Auto merge of #87590 - Amanieu:deprecate_llvm_asm, r=nagisa\n\nDeprecate llvm_asm!\n\nWe would like to remove `llvm_asm!` from the compiler once `asm!` is stabilized. This PR deprecates `llvm_asm!` to encourage any remaining users to migrate to `asm!` (or if `asm!` is not supported for their target, to add this support to rustc).\n\nThe only remaining user of `llvm_asm!` in the standard library was `black_box`, which has been rewritten to use volatile operations when `asm!` is not available on the current target.\n\ncc `@rust-lang/wg-inline-asm`\n\ncc `@RalfJung` for the changes to `black_box` which might affect Miri.\n\nr? `@nagisa`", "tree": {"sha": "78a3ebe8354eeeed46262c272e44af6029050aef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78a3ebe8354eeeed46262c272e44af6029050aef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bd17c1d43bba43412cc2f051323a279d6751e43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bd17c1d43bba43412cc2f051323a279d6751e43", "html_url": "https://github.com/rust-lang/rust/commit/2bd17c1d43bba43412cc2f051323a279d6751e43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bd17c1d43bba43412cc2f051323a279d6751e43/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d2bc94c8c3aa778e191f80261c726e4777439f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d2bc94c8c3aa778e191f80261c726e4777439f1", "html_url": "https://github.com/rust-lang/rust/commit/2d2bc94c8c3aa778e191f80261c726e4777439f1"}, {"sha": "632a400a3652beea592af91fff6b39140fe626d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/632a400a3652beea592af91fff6b39140fe626d9", "html_url": "https://github.com/rust-lang/rust/commit/632a400a3652beea592af91fff6b39140fe626d9"}], "stats": {"total": 314, "additions": 182, "deletions": 132}, "files": [{"sha": "ba878ff66a008e826d5eb32e8af97145058848fa", "filename": "library/core/src/hint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/library%2Fcore%2Fsrc%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/library%2Fcore%2Fsrc%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhint.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -155,6 +155,7 @@ pub fn spin_loop() {\n #[inline]\n #[unstable(feature = \"bench_black_box\", issue = \"64102\")]\n #[cfg_attr(not(bootstrap), allow(unused_mut))]\n+#[cfg_attr(bootstrap, allow(deprecated))]\n pub fn black_box<T>(mut dummy: T) -> T {\n     #[cfg(bootstrap)]\n     // SAFETY: the inline assembly is a no-op."}, {"sha": "476f37699ee736ec5a5184e102c95010071c769a", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1347,6 +1347,10 @@ pub(crate) mod builtin {\n         issue = \"70173\",\n         reason = \"prefer using the new asm! syntax instead\"\n     )]\n+    #[rustc_deprecated(\n+        since = \"1.56\",\n+        reason = \"will be removed from the compiler, use asm! instead\"\n+    )]\n     #[rustc_builtin_macro]\n     #[macro_export]\n     macro_rules! llvm_asm {"}, {"sha": "9eba9e0ca769cd63c7df5bc5b7339f8f80e02718", "filename": "src/test/ui/abi/abi-sysv64-register-usage.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -7,6 +7,7 @@\n // ignore-aarch64\n \n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n #[cfg(target_arch = \"x86_64\")]\n pub extern \"sysv64\" fn all_the_registers(rdi: i64, rsi: i64, rdx: i64,"}, {"sha": "72918a1411755874a8bd2d63a2f03dba9bb0227c", "filename": "src/test/ui/asm/naked-functions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -4,6 +4,7 @@\n #![feature(naked_functions)]\n #![feature(or_patterns)]\n #![crate_type = \"lib\"]\n+#![allow(deprecated)] // llvm_asm!\n \n #[repr(C)]\n pub struct P { x: u8, y: u16 }"}, {"sha": "3b54757cfe8184af3a154205532bba41b983b2a3", "filename": "src/test/ui/asm/naked-functions.stderr", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,43 +1,43 @@\n error: asm with the `pure` option must have at least one output\n-  --> $DIR/naked-functions.rs:126:14\n+  --> $DIR/naked-functions.rs:127:14\n    |\n LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^\n \n error: patterns not allowed in naked function parameters\n-  --> $DIR/naked-functions.rs:13:5\n+  --> $DIR/naked-functions.rs:14:5\n    |\n LL |     mut a: u32,\n    |     ^^^^^\n \n error: patterns not allowed in naked function parameters\n-  --> $DIR/naked-functions.rs:15:5\n+  --> $DIR/naked-functions.rs:16:5\n    |\n LL |     &b: &i32,\n    |     ^^\n \n error: patterns not allowed in naked function parameters\n-  --> $DIR/naked-functions.rs:17:6\n+  --> $DIR/naked-functions.rs:18:6\n    |\n LL |     (None | Some(_)): Option<std::ptr::NonNull<u8>>,\n    |      ^^^^^^^^^^^^^^\n \n error: patterns not allowed in naked function parameters\n-  --> $DIR/naked-functions.rs:19:5\n+  --> $DIR/naked-functions.rs:20:5\n    |\n LL |     P { x, y }: P,\n    |     ^^^^^^^^^^\n \n error: referencing function parameters is not allowed in naked functions\n-  --> $DIR/naked-functions.rs:29:5\n+  --> $DIR/naked-functions.rs:30:5\n    |\n LL |     a + 1\n    |     ^\n    |\n    = help: follow the calling convention in asm block to use parameters\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:26:1\n+  --> $DIR/naked-functions.rs:27:1\n    |\n LL | / pub unsafe extern \"C\" fn inc(a: u32) -> u32 {\n LL | |\n@@ -53,15 +53,15 @@ LL | | }\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n error: referencing function parameters is not allowed in naked functions\n-  --> $DIR/naked-functions.rs:35:31\n+  --> $DIR/naked-functions.rs:36:31\n    |\n LL |     asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n    |                               ^\n    |\n    = help: follow the calling convention in asm block to use parameters\n \n warning: only `const` and `sym` operands are supported in naked functions\n-  --> $DIR/naked-functions.rs:35:23\n+  --> $DIR/naked-functions.rs:36:23\n    |\n LL |     asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n    |                       ^^^^^^^^^\n@@ -70,7 +70,7 @@ LL |     asm!(\"/* {0} */\", in(reg) a, options(noreturn));\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:42:1\n+  --> $DIR/naked-functions.rs:43:1\n    |\n LL | / pub unsafe extern \"C\" fn inc_closure(a: u32) -> u32 {\n LL | |\n@@ -84,7 +84,7 @@ LL | | }\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: only `const` and `sym` operands are supported in naked functions\n-  --> $DIR/naked-functions.rs:62:10\n+  --> $DIR/naked-functions.rs:63:10\n    |\n LL |          in(reg) a,\n    |          ^^^^^^^^^\n@@ -102,7 +102,7 @@ LL |          out(reg) e,\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:59:5\n+  --> $DIR/naked-functions.rs:60:5\n    |\n LL | /     asm!(\"/* {0} {1} {2} {3} {4} {5} {6} */\",\n LL | |\n@@ -117,7 +117,7 @@ LL | |     );\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:49:1\n+  --> $DIR/naked-functions.rs:50:1\n    |\n LL | / pub unsafe extern \"C\" fn unsupported_operands() {\n LL | |\n@@ -141,7 +141,7 @@ LL | | }\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:75:1\n+  --> $DIR/naked-functions.rs:76:1\n    |\n LL | / pub extern \"C\" fn missing_assembly() {\n LL | |\n@@ -153,7 +153,7 @@ LL | | }\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:84:5\n+  --> $DIR/naked-functions.rs:85:5\n    |\n LL |     asm!(\"\");\n    |     ^^^^^^^^^\n@@ -162,7 +162,7 @@ LL |     asm!(\"\");\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:87:5\n+  --> $DIR/naked-functions.rs:88:5\n    |\n LL |     asm!(\"\");\n    |     ^^^^^^^^^\n@@ -171,7 +171,7 @@ LL |     asm!(\"\");\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:90:5\n+  --> $DIR/naked-functions.rs:91:5\n    |\n LL |     asm!(\"\");\n    |     ^^^^^^^^^\n@@ -180,7 +180,7 @@ LL |     asm!(\"\");\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:81:1\n+  --> $DIR/naked-functions.rs:82:1\n    |\n LL | / pub extern \"C\" fn too_many_asm_blocks() {\n LL | |\n@@ -202,15 +202,15 @@ LL | | }\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n error: referencing function parameters is not allowed in naked functions\n-  --> $DIR/naked-functions.rs:101:11\n+  --> $DIR/naked-functions.rs:102:11\n    |\n LL |         *&y\n    |           ^\n    |\n    = help: follow the calling convention in asm block to use parameters\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:98:5\n+  --> $DIR/naked-functions.rs:99:5\n    |\n LL | /     pub extern \"C\" fn inner(y: usize) -> usize {\n LL | |\n@@ -225,7 +225,7 @@ LL | |     }\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: the LLVM-style inline assembly is unsupported in naked functions\n-  --> $DIR/naked-functions.rs:111:5\n+  --> $DIR/naked-functions.rs:112:5\n    |\n LL |     llvm_asm!(\"\");\n    |     ^^^^^^^^^^^^^^\n@@ -236,7 +236,7 @@ LL |     llvm_asm!(\"\");\n    = note: this warning originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: naked functions must contain a single asm block\n-  --> $DIR/naked-functions.rs:108:1\n+  --> $DIR/naked-functions.rs:109:1\n    |\n LL | / unsafe extern \"C\" fn llvm() -> ! {\n LL | |\n@@ -252,7 +252,7 @@ LL | | }\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm options unsupported in naked functions: `nomem`, `preserves_flags`\n-  --> $DIR/naked-functions.rs:119:5\n+  --> $DIR/naked-functions.rs:120:5\n    |\n LL |     asm!(\"\", options(nomem, preserves_flags, noreturn));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -261,7 +261,7 @@ LL |     asm!(\"\", options(nomem, preserves_flags, noreturn));\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm options unsupported in naked functions: `nostack`, `pure`, `readonly`\n-  --> $DIR/naked-functions.rs:126:5\n+  --> $DIR/naked-functions.rs:127:5\n    |\n LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -270,7 +270,7 @@ LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: asm in naked functions must use `noreturn` option\n-  --> $DIR/naked-functions.rs:126:5\n+  --> $DIR/naked-functions.rs:127:5\n    |\n LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -279,21 +279,21 @@ LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: Rust ABI is unsupported in naked functions\n-  --> $DIR/naked-functions.rs:135:15\n+  --> $DIR/naked-functions.rs:136:15\n    |\n LL | pub unsafe fn default_abi() {\n    |               ^^^^^^^^^^^\n    |\n    = note: `#[warn(undefined_naked_function_abi)]` on by default\n \n warning: Rust ABI is unsupported in naked functions\n-  --> $DIR/naked-functions.rs:141:29\n+  --> $DIR/naked-functions.rs:142:29\n    |\n LL | pub unsafe extern \"Rust\" fn rust_abi() {\n    |                             ^^^^^^^^\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:175:1\n+  --> $DIR/naked-functions.rs:176:1\n    |\n LL | #[inline]\n    | ^^^^^^^^^\n@@ -302,7 +302,7 @@ LL | #[inline]\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:183:1\n+  --> $DIR/naked-functions.rs:184:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n@@ -311,7 +311,7 @@ LL | #[inline(always)]\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:191:1\n+  --> $DIR/naked-functions.rs:192:1\n    |\n LL | #[inline(never)]\n    | ^^^^^^^^^^^^^^^^\n@@ -320,7 +320,7 @@ LL | #[inline(never)]\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:199:1\n+  --> $DIR/naked-functions.rs:200:1\n    |\n LL | #[inline]\n    | ^^^^^^^^^\n@@ -329,7 +329,7 @@ LL | #[inline]\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:202:1\n+  --> $DIR/naked-functions.rs:203:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n@@ -338,7 +338,7 @@ LL | #[inline(always)]\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n \n warning: naked functions cannot be inlined\n-  --> $DIR/naked-functions.rs:205:1\n+  --> $DIR/naked-functions.rs:206:1\n    |\n LL | #[inline(never)]\n    | ^^^^^^^^^^^^^^^^"}, {"sha": "9251afd3f059f6c7c661d84a57ee118962c2dd05", "filename": "src/test/ui/asm/rustfix-asm.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.fixed?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -2,6 +2,7 @@\n // only-x86_64\n \n #![feature(asm, llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n fn main() {\n     unsafe {"}, {"sha": "1e3bfd077081cf242671ee163c2320cd29d59a63", "filename": "src/test/ui/asm/rustfix-asm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -2,6 +2,7 @@\n // only-x86_64\n \n #![feature(asm, llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n fn main() {\n     unsafe {"}, {"sha": "14927f3eb203e090b6ab8c195557a7a7988a0d02", "filename": "src/test/ui/asm/rustfix-asm.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.stderr?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,5 +1,5 @@\n error: the legacy LLVM-style asm! syntax is no longer supported\n-  --> $DIR/rustfix-asm.rs:10:9\n+  --> $DIR/rustfix-asm.rs:11:9\n    |\n LL |         asm!(\"\" :: \"r\" (x));\n    |         ----^^^^^^^^^^^^^^^^\n@@ -10,7 +10,7 @@ LL |         asm!(\"\" :: \"r\" (x));\n    = note: alternatively, switch to llvm_asm! to keep your code working as it is\n \n error: the legacy LLVM-style asm! syntax is no longer supported\n-  --> $DIR/rustfix-asm.rs:12:9\n+  --> $DIR/rustfix-asm.rs:13:9\n    |\n LL |         asm!(\"\" : \"=r\" (y));\n    |         ----^^^^^^^^^^^^^^^^"}, {"sha": "1a19883ae1550285f845fb929d0a08e78ef6f23f", "filename": "src/test/ui/ast-json/ast-json-ice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fast-json%2Fast-json-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fast-json%2Fast-json-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-ice.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -9,6 +9,7 @@\n // dont-check-compiler-stdout - don't check for any AST change.\n \n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n enum V {\n     A(i32),"}, {"sha": "0d202c1b452d5ca73fca2d12e160271d25efa91f", "filename": "src/test/ui/borrowck/borrowck-asm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -8,6 +8,7 @@\n // ignore-sparc64\n \n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n #[cfg(any(target_arch = \"x86\",\n             target_arch = \"x86_64\","}, {"sha": "ff5847d826e9954c23836346c285214f0ee60d2c", "filename": "src/test/ui/borrowck/borrowck-asm.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.stderr?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `x`\n-  --> $DIR/borrowck-asm.rs:25:17\n+  --> $DIR/borrowck-asm.rs:26:17\n    |\n LL |         let x = &mut 0isize;\n    |             - move occurs because `x` has type `&mut isize`, which does not implement the `Copy` trait\n@@ -11,7 +11,7 @@ LL |         let z = x;\n    |                 ^ value used here after move\n \n error[E0503]: cannot use `x` because it was mutably borrowed\n-  --> $DIR/borrowck-asm.rs:32:37\n+  --> $DIR/borrowck-asm.rs:33:37\n    |\n LL |         let y = &mut x;\n    |                 ------ borrow of `x` occurs here\n@@ -23,7 +23,7 @@ LL |         let z = y;\n    |                 - borrow later used here\n \n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-asm.rs:40:36\n+  --> $DIR/borrowck-asm.rs:41:36\n    |\n LL |         let x = 3;\n    |             -\n@@ -35,7 +35,7 @@ LL |             llvm_asm!(\"nop\" : \"=r\"(x));\n    |                                    ^ cannot assign twice to immutable variable\n \n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/borrowck-asm.rs:54:36\n+  --> $DIR/borrowck-asm.rs:55:36\n    |\n LL |         let x = 3;\n    |             -\n@@ -47,13 +47,13 @@ LL |             llvm_asm!(\"nop\" : \"+r\"(x));\n    |                                    ^ cannot assign twice to immutable variable\n \n error[E0381]: use of possibly-uninitialized variable: `x`\n-  --> $DIR/borrowck-asm.rs:61:37\n+  --> $DIR/borrowck-asm.rs:62:37\n    |\n LL |             llvm_asm!(\"nop\" : \"=*r\"(x));\n    |                                     ^ use of possibly-uninitialized `x`\n \n error[E0506]: cannot assign to `x` because it is borrowed\n-  --> $DIR/borrowck-asm.rs:69:36\n+  --> $DIR/borrowck-asm.rs:70:36\n    |\n LL |         let y = &*x;\n    |                 --- borrow of `x` occurs here\n@@ -65,7 +65,7 @@ LL |         let z = y;\n    |                 - borrow later used here\n \n error[E0382]: use of moved value: `x`\n-  --> $DIR/borrowck-asm.rs:77:45\n+  --> $DIR/borrowck-asm.rs:78:45\n    |\n LL |         let x = &mut 2;\n    |             - move occurs because `x` has type `&mut i32`, which does not implement the `Copy` trait"}, {"sha": "fa9542f93a36ce67cf62727a2385a64db846182b", "filename": "src/test/ui/consts/inline_asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fconsts%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fconsts%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finline_asm.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,6 +1,6 @@\n-#![feature(llvm_asm)]\n+#![feature(asm)]\n \n-const _: () = unsafe { llvm_asm!(\"nop\") };\n+const _: () = unsafe { asm!(\"nop\") };\n //~^ ERROR inline assembly\n \n fn main() {}"}, {"sha": "f38044a290b631da4b46675ee0b92676a415c30e", "filename": "src/test/ui/consts/inline_asm.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fconsts%2Finline_asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fconsts%2Finline_asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finline_asm.stderr?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,10 +1,8 @@\n error[E0015]: inline assembly is not allowed in constants\n   --> $DIR/inline_asm.rs:3:24\n    |\n-LL | const _: () = unsafe { llvm_asm!(\"nop\") };\n-   |                        ^^^^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n+LL | const _: () = unsafe { asm!(\"nop\") };\n+   |                        ^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "b9421330d050e72d7ea55cc64df755ad903cae8f", "filename": "src/test/ui/consts/miri_unleashed/inline_asm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -2,6 +2,7 @@\n // only-x86_64\n #![feature(asm,llvm_asm)]\n #![allow(const_err)]\n+#![allow(deprecated)] // llvm_asm!\n \n fn main() {}\n "}, {"sha": "d06afa8048325e249e82ee9380c4b12270656ac7", "filename": "src/test/ui/consts/miri_unleashed/inline_asm.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,26 +1,26 @@\n error[E0080]: could not evaluate static initializer\n-  --> $DIR/inline_asm.rs:10:14\n+  --> $DIR/inline_asm.rs:11:14\n    |\n LL |     unsafe { llvm_asm!(\"xor %eax, %eax\" ::: \"eax\"); }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ inline assembly is not supported\n    |\n    = note: this error originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/inline_asm.rs:19:14\n+  --> $DIR/inline_asm.rs:20:14\n    |\n LL |     unsafe { asm!(\"nop\"); }\n    |              ^^^^^^^^^^^^ inline assembly is not supported\n \n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/inline_asm.rs:10:14\n+  --> $DIR/inline_asm.rs:11:14\n    |\n LL |     unsafe { llvm_asm!(\"xor %eax, %eax\" ::: \"eax\"); }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/inline_asm.rs:19:14\n+  --> $DIR/inline_asm.rs:20:14\n    |\n LL |     unsafe { asm!(\"nop\"); }\n    |              ^^^^^^^^^^^^"}, {"sha": "43af2406f5ee4d7f3ece4557aab21cc8481356f6", "filename": "src/test/ui/error-codes/E0660.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Ferror-codes%2FE0660.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Ferror-codes%2FE0660.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0660.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,4 +1,5 @@\n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n fn main() {\n     let a;"}, {"sha": "f8d0cb27a37f3b0c93cc73eaa157b7561176a097", "filename": "src/test/ui/error-codes/E0660.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Ferror-codes%2FE0660.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Ferror-codes%2FE0660.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0660.stderr?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,11 +1,11 @@\n error[E0660]: malformed inline assembly\n-  --> $DIR/E0660.rs:5:5\n+  --> $DIR/E0660.rs:6:5\n    |\n LL |     llvm_asm!(\"nop\" \"nop\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0660]: malformed inline assembly\n-  --> $DIR/E0660.rs:7:5\n+  --> $DIR/E0660.rs:8:5\n    |\n LL |     llvm_asm!(\"nop\" \"nop\" : \"=r\"(a));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "854675c36391c770bbb5d65e250e8523985108d3", "filename": "src/test/ui/error-codes/E0661.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Ferror-codes%2FE0661.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Ferror-codes%2FE0661.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0661.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,6 +1,7 @@\n // ignore-emscripten\n \n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n fn main() {\n     let a; //~ ERROR type annotations needed"}, {"sha": "73745ef97758d398eca7b0ae02df88bb7731f863", "filename": "src/test/ui/error-codes/E0661.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Ferror-codes%2FE0661.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Ferror-codes%2FE0661.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0661.stderr?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,11 +1,11 @@\n error[E0661]: output operand constraint lacks '=' or '+'\n-  --> $DIR/E0661.rs:7:23\n+  --> $DIR/E0661.rs:8:23\n    |\n LL |     llvm_asm!(\"nop\" : \"r\"(a));\n    |                       ^^^\n \n error[E0282]: type annotations needed\n-  --> $DIR/E0661.rs:6:9\n+  --> $DIR/E0661.rs:7:9\n    |\n LL |     let a;\n    |         ^ consider giving `a` a type"}, {"sha": "679a88c3433c3f893e4934c085ecad7eb3d0abc5", "filename": "src/test/ui/error-codes/E0662.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Ferror-codes%2FE0662.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Ferror-codes%2FE0662.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0662.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,6 +1,7 @@\n // ignore-emscripten\n \n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n fn main() {\n     llvm_asm!(\"xor %eax, %eax\""}, {"sha": "f6695d700fbd4ad88198c235e5da4572868186a5", "filename": "src/test/ui/error-codes/E0662.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Ferror-codes%2FE0662.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Ferror-codes%2FE0662.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0662.stderr?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,5 +1,5 @@\n error[E0662]: input operand constraint contains '='\n-  --> $DIR/E0662.rs:8:17\n+  --> $DIR/E0662.rs:9:17\n    |\n LL |               : \"=test\"(\"a\")\n    |                 ^^^^^^^"}, {"sha": "b82f1adfb426d1afeaf40dd54fe0e2dd2f15f14f", "filename": "src/test/ui/error-codes/E0663.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Ferror-codes%2FE0663.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Ferror-codes%2FE0663.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0663.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,6 +1,7 @@\n // ignore-emscripten\n \n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n fn main() {\n     llvm_asm!(\"xor %eax, %eax\""}, {"sha": "5f8dede0242f3dd3d3255c9e78d8869de39d6bfa", "filename": "src/test/ui/error-codes/E0663.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Ferror-codes%2FE0663.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Ferror-codes%2FE0663.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0663.stderr?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,5 +1,5 @@\n error[E0663]: input operand constraint contains '+'\n-  --> $DIR/E0663.rs:8:17\n+  --> $DIR/E0663.rs:9:17\n    |\n LL |               : \"+test\"(\"a\")\n    |                 ^^^^^^^"}, {"sha": "d2730f04f4547ca2905b32dd4519e0c94ea8659d", "filename": "src/test/ui/error-codes/E0664.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Ferror-codes%2FE0664.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Ferror-codes%2FE0664.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0664.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,6 +1,7 @@\n // ignore-emscripten\n \n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n fn main() {\n     llvm_asm!(\"mov $$0x200, %eax\""}, {"sha": "5e6836f28e3de584e51ba4a64a7c7b6a4b1d2e81", "filename": "src/test/ui/error-codes/E0664.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Ferror-codes%2FE0664.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Ferror-codes%2FE0664.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0664.stderr?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,5 +1,5 @@\n error[E0664]: clobber should not be surrounded by braces\n-  --> $DIR/E0664.rs:9:17\n+  --> $DIR/E0664.rs:10:17\n    |\n LL |               : \"{eax}\"\n    |                 ^^^^^^^"}, {"sha": "b4dca7216b185df260efbad1d5cd8e2fe5782cf9", "filename": "src/test/ui/feature-gates/feature-gate-asm.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,5 +1,7 @@\n // only-x86_64\n \n+#![allow(deprecated)] // llvm_asm!\n+\n fn main() {\n     unsafe {\n         asm!(\"\");"}, {"sha": "144a42581842899b128136a9274c1eab31497e1c", "filename": "src/test/ui/feature-gates/feature-gate-asm.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: use of unstable library feature 'asm': inline assembly is not stable enough for use and is subject to change\n-  --> $DIR/feature-gate-asm.rs:5:9\n+  --> $DIR/feature-gate-asm.rs:7:9\n    |\n LL |         asm!(\"\");\n    |         ^^^\n@@ -8,7 +8,7 @@ LL |         asm!(\"\");\n    = help: add `#![feature(asm)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'llvm_asm': prefer using the new asm! syntax instead\n-  --> $DIR/feature-gate-asm.rs:7:9\n+  --> $DIR/feature-gate-asm.rs:9:9\n    |\n LL |         llvm_asm!(\"\");\n    |         ^^^^^^^^"}, {"sha": "9044f2cb6af741db71eea69d9748ec9987a84aad", "filename": "src/test/ui/feature-gates/feature-gate-asm2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,5 +1,7 @@\n // only-x86_64\n \n+#![allow(deprecated)] // llvm_asm!\n+\n fn main() {\n     unsafe {\n         println!(\"{:?}\", asm!(\"\"));"}, {"sha": "0b0c8a64d222c69b68a8e9d95960fc40f29d9c14", "filename": "src/test/ui/feature-gates/feature-gate-asm2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: use of unstable library feature 'asm': inline assembly is not stable enough for use and is subject to change\n-  --> $DIR/feature-gate-asm2.rs:5:26\n+  --> $DIR/feature-gate-asm2.rs:7:26\n    |\n LL |         println!(\"{:?}\", asm!(\"\"));\n    |                          ^^^\n@@ -8,7 +8,7 @@ LL |         println!(\"{:?}\", asm!(\"\"));\n    = help: add `#![feature(asm)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'llvm_asm': prefer using the new asm! syntax instead\n-  --> $DIR/feature-gate-asm2.rs:7:26\n+  --> $DIR/feature-gate-asm2.rs:9:26\n    |\n LL |         println!(\"{:?}\", llvm_asm!(\"\"));\n    |                          ^^^^^^^^"}, {"sha": "d640828c16dce793b414115b146bb0f4ca0e6a2f", "filename": "src/test/ui/issues/issue-23458.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fissues%2Fissue-23458.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fissues%2Fissue-23458.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23458.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,4 +1,5 @@\n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n // compile-flags: -Ccodegen-units=1\n // build-fail\n // only-x86_64"}, {"sha": "69e458f7ca0989004992625baec017b483fb175c", "filename": "src/test/ui/issues/issue-23458.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fissues%2Fissue-23458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fissues%2Fissue-23458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23458.stderr?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,11 +1,11 @@\n error: invalid operand in inline asm: 'int $3'\n-  --> $DIR/issue-23458.rs:8:9\n+  --> $DIR/issue-23458.rs:9:9\n    |\n LL |         llvm_asm!(\"int $3\");\n    |         ^\n \n error: too few operands for instruction\n-  --> $DIR/issue-23458.rs:8:9\n+  --> $DIR/issue-23458.rs:9:9\n    |\n LL |         llvm_asm!(\"int $3\");\n    |         ^"}, {"sha": "acc2f3e9f5fe1b5cb8341067430007f58adf060b", "filename": "src/test/ui/issues/issue-37366.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fissues%2Fissue-37366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fissues%2Fissue-37366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37366.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -2,6 +2,7 @@\n // ignore-emscripten\n \n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n macro_rules! interrupt_handler {\n     () => {"}, {"sha": "1c362e8aba058e621b081270e8ee209fe84dd20f", "filename": "src/test/ui/issues/issue-37433.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fissues%2Fissue-37433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fissues%2Fissue-37433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37433.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -2,6 +2,7 @@\n // ignore-emscripten no llvm_asm! support\n \n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n fn main() {\n     unsafe {"}, {"sha": "44a8eb32b7ccbf6f301eb03137ad20e62c43b97f", "filename": "src/test/ui/issues/issue-37433.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fissues%2Fissue-37433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fissues%2Fissue-37433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37433.stderr?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,5 +1,5 @@\n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/issue-37433.rs:8:29\n+  --> $DIR/issue-37433.rs:9:29\n    |\n LL |         llvm_asm!(\"\" :: \"r\"(\"\"));\n    |                             ^^"}, {"sha": "d9fe7cada278f23c3a281556e95c821e08df2c6d", "filename": "src/test/ui/issues/issue-53787-inline-assembler-macro.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fissues%2Fissue-53787-inline-assembler-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fissues%2Fissue-53787-inline-assembler-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53787-inline-assembler-macro.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -4,6 +4,7 @@\n // ignore-emscripten\n \n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n macro_rules! fake_jump {\n     ($id:expr) => {"}, {"sha": "fd755e30d586837e4f252efbcf29ac6e1b925062", "filename": "src/test/ui/issues/issue-53787-inline-assembler-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fissues%2Fissue-53787-inline-assembler-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fissues%2Fissue-53787-inline-assembler-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53787-inline-assembler-macro.stderr?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,5 +1,5 @@\n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/issue-53787-inline-assembler-macro.rs:24:16\n+  --> $DIR/issue-53787-inline-assembler-macro.rs:25:16\n    |\n LL |     fake_jump!(\"FirstFunc\");\n    |                ^^^^^^^^^^^"}, {"sha": "825fed5c722e0b57cdc3bcd48e685ce28f8dba82", "filename": "src/test/ui/issues/issue-9129.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fissues%2Fissue-9129.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fissues%2Fissue-9129.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-9129.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -2,6 +2,7 @@\n #![allow(dead_code)]\n #![allow(non_camel_case_types)]\n #![allow(non_snake_case)]\n+#![allow(deprecated)] // llvm_asm!\n // ignore-pretty unreported\n \n #![feature(box_syntax)]"}, {"sha": "d178c65dff4970e68f803b59f737e516b61e1e19", "filename": "src/test/ui/llvm-asm/asm-src-loc-codegen-units.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fasm-src-loc-codegen-units.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fasm-src-loc-codegen-units.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fasm-src-loc-codegen-units.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -4,6 +4,7 @@\n // ignore-emscripten\n \n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n fn main() {\n     unsafe {"}, {"sha": "4506c12a0e6b9075c3dee3c5fe10949ef181169b", "filename": "src/test/ui/llvm-asm/asm-src-loc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fasm-src-loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fasm-src-loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fasm-src-loc.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -3,6 +3,7 @@\n // ignore-emscripten\n \n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n fn main() {\n     unsafe {"}, {"sha": "6a2ce111cb313e7df2f82d07a12df4723039b85e", "filename": "src/test/ui/llvm-asm/inline-asm-bad-constraint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-constraint.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -4,6 +4,7 @@\n // ignore-emscripten\n \n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n extern \"C\" {\n     fn foo(a: usize);"}, {"sha": "5efc38522b73aa91ecb9230bdff44c45c7e8c90d", "filename": "src/test/ui/llvm-asm/inline-asm-bad-constraint.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-constraint.stderr?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,21 +1,21 @@\n error[E0668]: malformed inline assembly\n-  --> $DIR/inline-asm-bad-constraint.rs:22:9\n+  --> $DIR/inline-asm-bad-constraint.rs:23:9\n    |\n LL |         llvm_asm!(\"\" :\"={rax\"(rax))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0668]: malformed inline assembly\n-  --> $DIR/inline-asm-bad-constraint.rs:30:9\n+  --> $DIR/inline-asm-bad-constraint.rs:31:9\n    |\n LL |         llvm_asm!(\"callq $0\" : : \"0\"(foo))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0668]: malformed inline assembly\n-  --> $DIR/inline-asm-bad-constraint.rs:37:9\n+  --> $DIR/inline-asm-bad-constraint.rs:38:9\n    |\n LL |         llvm_asm!(\"addb $1, $0\" : \"={rax}\"((0i32, rax)));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "1746c487b1e32e7d1a61340ec18e9f0351d92828", "filename": "src/test/ui/llvm-asm/inline-asm-bad-operand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-operand.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -5,6 +5,7 @@\n // ignore-emscripten\n \n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n #[repr(C)]\n struct MyPtr(usize);"}, {"sha": "8bb8a7ae82ebd13ed7c74bbe800c6f010588d977", "filename": "src/test/ui/llvm-asm/inline-asm-bad-operand.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-operand.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-operand.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-operand.stderr?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,41 +1,41 @@\n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:22:29\n+  --> $DIR/inline-asm-bad-operand.rs:23:29\n    |\n LL |         llvm_asm!(\"\" :: \"r\"(\"\"));\n    |                             ^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:27:37\n+  --> $DIR/inline-asm-bad-operand.rs:28:37\n    |\n LL |         llvm_asm!(\"ret\" : : \"{rdi}\"(target));\n    |                                     ^^^^^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:34:34\n+  --> $DIR/inline-asm-bad-operand.rs:35:34\n    |\n LL |     unsafe { llvm_asm!(\"\" :: \"i\"(hello)) };\n    |                                  ^^^^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:42:43\n+  --> $DIR/inline-asm-bad-operand.rs:43:43\n    |\n LL |         llvm_asm!(\"movups $1, %xmm0\"::\"m\"(arr));\n    |                                           ^^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:49:37\n+  --> $DIR/inline-asm-bad-operand.rs:50:37\n    |\n LL |         llvm_asm!(\"mov sp, $0\"::\"r\"(addr));\n    |                                     ^^^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:56:37\n+  --> $DIR/inline-asm-bad-operand.rs:57:37\n    |\n LL |         llvm_asm!(\"mov sp, $0\"::\"r\"(addr),\n    |                                     ^^^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:57:37\n+  --> $DIR/inline-asm-bad-operand.rs:58:37\n    |\n LL | ...                   \"r\"(\"hello e0669\"));\n    |                           ^^^^^^^^^^^^^"}, {"sha": "46e5a2a80925faa6e4864ab4098330761d5f0aac", "filename": "src/test/ui/llvm-asm/issue-14936.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-14936.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-14936.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-14936.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,6 +1,7 @@\n // build-pass\n #![allow(unused_macros)]\n #![allow(dead_code)]\n+#![allow(deprecated)] // llvm_asm!\n #![feature(llvm_asm)]\n \n type History = Vec<&'static str>;"}, {"sha": "8ebf0cfe217f631ffd891c454c9032204de99550", "filename": "src/test/ui/llvm-asm/issue-33264.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-33264.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-33264.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-33264.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -3,6 +3,7 @@\n \n #![allow(dead_code, non_upper_case_globals)]\n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n #[repr(C)]\n pub struct D32x4(f32,f32,f32,f32);"}, {"sha": "706b714766150e24dbfaac110eeb33d5c7f20b0d", "filename": "src/test/ui/llvm-asm/issue-51431.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-51431.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-51431.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-51431.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -2,6 +2,7 @@\n // ignore-emscripten no llvm_asm! support\n \n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n fn main() {\n     unsafe {"}, {"sha": "35c8c1b66f6a7e7da0baddd3d15ec5263852b7b0", "filename": "src/test/ui/llvm-asm/issue-51431.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-51431.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-51431.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-51431.stderr?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,5 +1,5 @@\n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/issue-51431.rs:8:37\n+  --> $DIR/issue-51431.rs:9:37\n    |\n LL |         llvm_asm! {\"mov $0,$1\"::\"0\"(\"bx\"),\"1\"(0x00)}\n    |                                     ^^^^"}, {"sha": "6e931b9003a17595deee5a16707179981a345280", "filename": "src/test/ui/llvm-asm/issue-54067.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-54067.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-54067.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-54067.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -2,6 +2,7 @@\n // ignore-emscripten no llvm_asm! support\n \n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n pub fn boot(addr: Option<u32>) {\n     unsafe {"}, {"sha": "38b5f1a1862878a79c192d6100bd06f1dbf98553", "filename": "src/test/ui/llvm-asm/issue-62046.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-62046.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-62046.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-62046.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -2,6 +2,7 @@\n // ignore-emscripten no asm! support\n \n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n fn main() {\n     unsafe {"}, {"sha": "73842a4b9e13d6b0961f45a08940ad2a0e99d71b", "filename": "src/test/ui/llvm-asm/issue-62046.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-62046.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-62046.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-62046.stderr?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,5 +1,5 @@\n error[E0668]: malformed inline assembly\n-  --> $DIR/issue-62046.rs:8:9\n+  --> $DIR/issue-62046.rs:9:9\n    |\n LL |         llvm_asm!(\"nop\" : \"+r\"(\"r15\"));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "26fccec80f18224ef3e8622308985d1a3ae49624", "filename": "src/test/ui/llvm-asm/issue-69092.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -3,6 +3,7 @@\n // Regression test for #69092\n \n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n fn main() {\n     unsafe { llvm_asm!(\".ascii \\\"Xen\\0\\\"\"); }"}, {"sha": "15a35e43c2705d0a8de1005ba15867c1865c473e", "filename": "src/test/ui/llvm-asm/issue-69092.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-69092.stderr?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,5 +1,5 @@\n error: expected string in '.ascii' directive\n-  --> $DIR/issue-69092.rs:8:14\n+  --> $DIR/issue-69092.rs:9:14\n    |\n LL |     unsafe { llvm_asm!(\".ascii \\\"Xen\\0\\\"\"); }\n    |              ^"}, {"sha": "c15009f15e68c0b6b40a93d065271462ab5782dd", "filename": "src/test/ui/llvm-asm/llvm-asm-bad-clobber.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-bad-clobber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-bad-clobber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-bad-clobber.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -13,6 +13,7 @@\n // ignore-mips64\n \n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n #[cfg(any(target_arch = \"x86\",\n           target_arch = \"x86_64\"))]"}, {"sha": "bb72a142853161e1ac3cb83947c534cff08fdfa6", "filename": "src/test/ui/llvm-asm/llvm-asm-bad-clobber.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-bad-clobber.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-bad-clobber.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-bad-clobber.stderr?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,5 +1,5 @@\n error[E0664]: clobber should not be surrounded by braces\n-  --> $DIR/llvm-asm-bad-clobber.rs:23:42\n+  --> $DIR/llvm-asm-bad-clobber.rs:24:42\n    |\n LL |         llvm_asm!(\"xor %eax, %eax\" : : : \"{eax}\");\n    |                                          ^^^^^^^"}, {"sha": "722eb07a270022f2cc98f51a269bed8a53861752", "filename": "src/test/ui/llvm-asm/llvm-asm-concat-src.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-concat-src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-concat-src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-concat-src.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -3,6 +3,7 @@\n // ignore-emscripten no asm\n \n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n pub fn main() {\n     unsafe { llvm_asm!(concat!(\"\", \"\")) };"}, {"sha": "1bccb0b73a89dad8c8ca8d098d157034b982fa7d", "filename": "src/test/ui/llvm-asm/llvm-asm-in-bad-modifier.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-bad-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-bad-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-bad-modifier.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -10,6 +10,7 @@\n // ignore-mips64\n \n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n fn foo(x: isize) { println!(\"{}\", x); }\n "}, {"sha": "f6c618e4c1352e8fa4a7f85a0ccb8a2b23e6ef58", "filename": "src/test/ui/llvm-asm/llvm-asm-in-bad-modifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-bad-modifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-bad-modifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-bad-modifier.stderr?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,11 +1,11 @@\n error[E0662]: input operand constraint contains '='\n-  --> $DIR/llvm-asm-in-bad-modifier.rs:24:44\n+  --> $DIR/llvm-asm-in-bad-modifier.rs:25:44\n    |\n LL |         llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"=r\"(5));\n    |                                            ^^^^\n \n error[E0663]: input operand constraint contains '+'\n-  --> $DIR/llvm-asm-in-bad-modifier.rs:25:44\n+  --> $DIR/llvm-asm-in-bad-modifier.rs:26:44\n    |\n LL |         llvm_asm!(\"mov $1, $0\" : \"=r\"(y) : \"+r\"(5));\n    |                                            ^^^^"}, {"sha": "f7b0fe5566cb7665f66ffdd7014704391b6c1ea4", "filename": "src/test/ui/llvm-asm/llvm-asm-in-moved.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-moved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-moved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-moved.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n \n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n #![allow(dead_code)]\n \n use std::cell::Cell;"}, {"sha": "2429b512e86d902531bcc2561c62b143c7c86f4e", "filename": "src/test/ui/llvm-asm/llvm-asm-in-out-operand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-out-operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-out-operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-out-operand.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n \n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n unsafe fn next_power_of_2(n: u32) -> u32 {"}, {"sha": "441c62b04b5615694ada94c48e88bc4e51549ef2", "filename": "src/test/ui/llvm-asm/llvm-asm-indirect-memory.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-indirect-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-indirect-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-indirect-memory.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n \n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n fn read(ptr: &u32) -> u32 {"}, {"sha": "ecd0c2f9734f15b9bcd722bd1ef1737180d03d01", "filename": "src/test/ui/llvm-asm/llvm-asm-literal-escaping.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-literal-escaping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-literal-escaping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-literal-escaping.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -2,6 +2,7 @@\n // only-x86_64\n \n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n fn main() {\n     unsafe {"}, {"sha": "04f0972ed4b2873624f5039bebd2ba26dd885fc3", "filename": "src/test/ui/llvm-asm/llvm-asm-misplaced-option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-misplaced-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-misplaced-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-misplaced-option.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -14,6 +14,7 @@\n // ignore-mips64\n \n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n #[cfg(any(target_arch = \"x86\",\n           target_arch = \"x86_64\"))]"}, {"sha": "d1250d99b8f33b7e9dac78a1f217cdf4b8df62d1", "filename": "src/test/ui/llvm-asm/llvm-asm-misplaced-option.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-misplaced-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-misplaced-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-misplaced-option.stderr?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,11 +1,11 @@\n warning: unrecognized option\n-  --> $DIR/llvm-asm-misplaced-option.rs:25:69\n+  --> $DIR/llvm-asm-misplaced-option.rs:26:69\n    |\n LL |         llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5_usize), \"0\"(x) : : \"cc\");\n    |                                                                     ^^^^\n \n warning: expected a clobber, found an option\n-  --> $DIR/llvm-asm-misplaced-option.rs:32:85\n+  --> $DIR/llvm-asm-misplaced-option.rs:33:85\n    |\n LL |         llvm_asm!(\"add $2, $1; mov $1, $0\" : \"=r\"(x) : \"r\"(x), \"r\"(8_usize) : \"cc\", \"volatile\");\n    |                                                                                     ^^^^^^^^^^"}, {"sha": "7f51b50f2586f096574014cc9a9beece033d0622", "filename": "src/test/ui/llvm-asm/llvm-asm-out-assign-imm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -10,6 +10,7 @@\n // ignore-mips64\n \n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n fn foo(x: isize) { println!(\"{}\", x); }\n "}, {"sha": "390c032460127fa82227f7b084c318eb54a79fe0", "filename": "src/test/ui/llvm-asm/llvm-asm-out-assign-imm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign-imm.stderr?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,5 +1,5 @@\n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/llvm-asm-out-assign-imm.rs:25:39\n+  --> $DIR/llvm-asm-out-assign-imm.rs:26:39\n    |\n LL |     let x: isize;\n    |         - help: consider making this binding mutable: `mut x`"}, {"sha": "c5f4a9a198e51757d9afdf7a081ddaf6ee31bac3", "filename": "src/test/ui/llvm-asm/llvm-asm-out-assign.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n \n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!s\n \n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn main() {"}, {"sha": "c74d156cf3eaea43df7e43d4ce0e407f93aae17d", "filename": "src/test/ui/llvm-asm/llvm-asm-out-no-modifier.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-no-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-no-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-no-modifier.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -10,6 +10,7 @@\n // ignore-mips64\n \n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n fn foo(x: isize) { println!(\"{}\", x); }\n "}, {"sha": "f426170ad87385cf384fe3c65966348f6bf59147", "filename": "src/test/ui/llvm-asm/llvm-asm-out-no-modifier.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-no-modifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-no-modifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-no-modifier.stderr?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,5 +1,5 @@\n error[E0661]: output operand constraint lacks '=' or '+'\n-  --> $DIR/llvm-asm-out-no-modifier.rs:23:34\n+  --> $DIR/llvm-asm-out-no-modifier.rs:24:34\n    |\n LL |         llvm_asm!(\"mov $1, $0\" : \"r\"(x) : \"r\"(5));\n    |                                  ^^^"}, {"sha": "161add7e56a763deb9c127398b48968359f355c5", "filename": "src/test/ui/llvm-asm/llvm-asm-out-read-uninit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-read-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-read-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-read-uninit.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -10,6 +10,7 @@\n // ignore-mips64\n \n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n fn foo(x: isize) { println!(\"{}\", x); }\n "}, {"sha": "7e57dc45aad49a907d5644c668a4b86ae786c235", "filename": "src/test/ui/llvm-asm/llvm-asm-out-read-uninit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-read-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-read-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-read-uninit.stderr?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,5 +1,5 @@\n error[E0381]: use of possibly-uninitialized variable: `x`\n-  --> $DIR/llvm-asm-out-read-uninit.rs:23:48\n+  --> $DIR/llvm-asm-out-read-uninit.rs:24:48\n    |\n LL |         llvm_asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(x));\n    |                                                ^ use of possibly-uninitialized `x`"}, {"sha": "cdd0b943b71e6f271d88684adcaa4b440a97fd9b", "filename": "src/test/ui/llvm-asm/llvm-asm-parse-errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-parse-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-parse-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-parse-errors.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,4 +1,5 @@\n #![feature(llvm_asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n fn main() {\n     llvm_asm!(); //~ ERROR requires a string literal as an argument"}, {"sha": "10cb4fcfe42a348b893c59afcf1a6933bbf63106", "filename": "src/test/ui/llvm-asm/llvm-asm-parse-errors.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-parse-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-parse-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-parse-errors.stderr?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,65 +1,65 @@\n error: macro requires a string literal as an argument\n-  --> $DIR/llvm-asm-parse-errors.rs:4:5\n+  --> $DIR/llvm-asm-parse-errors.rs:5:5\n    |\n LL |     llvm_asm!();\n    |     ^^^^^^^^^^^^ string literal required\n \n error: expected string literal\n-  --> $DIR/llvm-asm-parse-errors.rs:5:23\n+  --> $DIR/llvm-asm-parse-errors.rs:6:23\n    |\n LL |     llvm_asm!(\"nop\" : struct);\n    |                       ^^^^^^ not a string literal\n \n error: expected string literal\n-  --> $DIR/llvm-asm-parse-errors.rs:6:35\n+  --> $DIR/llvm-asm-parse-errors.rs:7:35\n    |\n LL |     llvm_asm!(\"mov %eax, $$0x2\" : struct);\n    |                                   ^^^^^^ not a string literal\n \n error: expected `(`, found keyword `struct`\n-  --> $DIR/llvm-asm-parse-errors.rs:7:44\n+  --> $DIR/llvm-asm-parse-errors.rs:8:44\n    |\n LL |     llvm_asm!(\"mov %eax, $$0x2\" : \"={eax}\" struct);\n    |                                            ^^^^^^ expected `(`\n \n error: expected expression, found keyword `struct`\n-  --> $DIR/llvm-asm-parse-errors.rs:8:44\n+  --> $DIR/llvm-asm-parse-errors.rs:9:44\n    |\n LL |     llvm_asm!(\"mov %eax, $$0x2\" : \"={eax}\"(struct));\n    |                                            ^^^^^^ expected expression\n \n error: expected string literal\n-  --> $DIR/llvm-asm-parse-errors.rs:9:49\n+  --> $DIR/llvm-asm-parse-errors.rs:10:49\n    |\n LL |     llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : struct);\n    |                                                 ^^^^^^ not a string literal\n \n error: expected `(`, found keyword `struct`\n-  --> $DIR/llvm-asm-parse-errors.rs:10:56\n+  --> $DIR/llvm-asm-parse-errors.rs:11:56\n    |\n LL |     llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\" struct);\n    |                                                        ^^^^^^ expected `(`\n \n error: expected expression, found keyword `struct`\n-  --> $DIR/llvm-asm-parse-errors.rs:11:56\n+  --> $DIR/llvm-asm-parse-errors.rs:12:56\n    |\n LL |     llvm_asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\"(struct));\n    |                                                        ^^^^^^ expected expression\n \n error: expected string literal\n-  --> $DIR/llvm-asm-parse-errors.rs:12:41\n+  --> $DIR/llvm-asm-parse-errors.rs:13:41\n    |\n LL |     llvm_asm!(\"mov $$0x200, %eax\" : : : struct);\n    |                                         ^^^^^^ not a string literal\n \n error: expected string literal\n-  --> $DIR/llvm-asm-parse-errors.rs:13:50\n+  --> $DIR/llvm-asm-parse-errors.rs:14:50\n    |\n LL |     llvm_asm!(\"mov eax, 2\" : \"={eax}\"(foo) : : : struct);\n    |                                                  ^^^^^^ not a string literal\n \n error: inline assembly must be a string literal\n-  --> $DIR/llvm-asm-parse-errors.rs:14:15\n+  --> $DIR/llvm-asm-parse-errors.rs:15:15\n    |\n LL |     llvm_asm!(123);\n    |               ^^^"}, {"sha": "24adc0fb407ff227a022064c03d2cd7a487f902c", "filename": "src/test/ui/macros/macros-nonfatal-errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -7,6 +7,7 @@\n #![feature(trace_macros, concat_idents)]\n #![feature(stmt_expr_attributes, arbitrary_enum_discriminant)]\n #![feature(derive_default_enum)]\n+#![allow(deprecated)] // llvm_asm!\n \n #[derive(Default)]\n struct DefaultInnerAttrStruct {"}, {"sha": "00c23d501a1c5180f314f12147adae826acfb935", "filename": "src/test/ui/macros/macros-nonfatal-errors.stderr", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,41 +1,41 @@\n error: the `#[default]` attribute may only be used on unit enum variants\n-  --> $DIR/macros-nonfatal-errors.rs:13:5\n+  --> $DIR/macros-nonfatal-errors.rs:14:5\n    |\n LL |     #[default]\n    |     ^^^^^^^^^^\n \n error: the `#[default]` attribute may only be used on unit enum variants\n-  --> $DIR/macros-nonfatal-errors.rs:18:36\n+  --> $DIR/macros-nonfatal-errors.rs:19:36\n    |\n LL | struct DefaultInnerAttrTupleStruct(#[default] ());\n    |                                    ^^^^^^^^^^\n \n error: the `#[default]` attribute may only be used on unit enum variants\n-  --> $DIR/macros-nonfatal-errors.rs:22:1\n+  --> $DIR/macros-nonfatal-errors.rs:23:1\n    |\n LL | #[default]\n    | ^^^^^^^^^^\n \n error: the `#[default]` attribute may only be used on unit enum variants\n-  --> $DIR/macros-nonfatal-errors.rs:26:1\n+  --> $DIR/macros-nonfatal-errors.rs:27:1\n    |\n LL | #[default]\n    | ^^^^^^^^^^\n \n error: the `#[default]` attribute may only be used on unit enum variants\n-  --> $DIR/macros-nonfatal-errors.rs:36:11\n+  --> $DIR/macros-nonfatal-errors.rs:37:11\n    |\n LL |     Foo = #[default] 0,\n    |           ^^^^^^^^^^\n \n error: the `#[default]` attribute may only be used on unit enum variants\n-  --> $DIR/macros-nonfatal-errors.rs:37:14\n+  --> $DIR/macros-nonfatal-errors.rs:38:14\n    |\n LL |     Bar([u8; #[default] 1]),\n    |              ^^^^^^^^^^\n \n error: no default declared\n-  --> $DIR/macros-nonfatal-errors.rs:42:10\n+  --> $DIR/macros-nonfatal-errors.rs:43:10\n    |\n LL | #[derive(Default)]\n    |          ^^^^^^^\n@@ -44,7 +44,7 @@ LL | #[derive(Default)]\n    = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: multiple declared defaults\n-  --> $DIR/macros-nonfatal-errors.rs:48:10\n+  --> $DIR/macros-nonfatal-errors.rs:49:10\n    |\n LL | #[derive(Default)]\n    |          ^^^^^^^\n@@ -62,15 +62,15 @@ LL |     Baz,\n    = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `#[default]` attribute does not accept a value\n-  --> $DIR/macros-nonfatal-errors.rs:60:5\n+  --> $DIR/macros-nonfatal-errors.rs:61:5\n    |\n LL |     #[default = 1]\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: try using `#[default]`\n \n error: multiple `#[default]` attributes\n-  --> $DIR/macros-nonfatal-errors.rs:68:5\n+  --> $DIR/macros-nonfatal-errors.rs:69:5\n    |\n LL |     #[default]\n    |     ---------- `#[default]` used here\n@@ -81,13 +81,13 @@ LL |     Foo,\n    |\n    = note: only one `#[default]` attribute is needed\n help: try removing this\n-  --> $DIR/macros-nonfatal-errors.rs:67:5\n+  --> $DIR/macros-nonfatal-errors.rs:68:5\n    |\n LL |     #[default]\n    |     ^^^^^^^^^^\n \n error: multiple `#[default]` attributes\n-  --> $DIR/macros-nonfatal-errors.rs:78:5\n+  --> $DIR/macros-nonfatal-errors.rs:79:5\n    |\n LL |     #[default]\n    |     ---------- `#[default]` used here\n@@ -99,7 +99,7 @@ LL |     Foo,\n    |\n    = note: only one `#[default]` attribute is needed\n help: try removing these\n-  --> $DIR/macros-nonfatal-errors.rs:75:5\n+  --> $DIR/macros-nonfatal-errors.rs:76:5\n    |\n LL |     #[default]\n    |     ^^^^^^^^^^\n@@ -109,15 +109,15 @@ LL |     #[default]\n    |     ^^^^^^^^^^\n \n error: the `#[default]` attribute may only be used on unit enum variants\n-  --> $DIR/macros-nonfatal-errors.rs:85:5\n+  --> $DIR/macros-nonfatal-errors.rs:86:5\n    |\n LL |     Foo {},\n    |     ^^^\n    |\n    = help: consider a manual implementation of `Default`\n \n error: default variant must be exhaustive\n-  --> $DIR/macros-nonfatal-errors.rs:93:5\n+  --> $DIR/macros-nonfatal-errors.rs:94:5\n    |\n LL |     #[non_exhaustive]\n    |     ----------------- declared `#[non_exhaustive]` here\n@@ -127,51 +127,51 @@ LL |     Foo,\n    = help: consider a manual implementation of `Default`\n \n error: asm template must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:98:10\n+  --> $DIR/macros-nonfatal-errors.rs:99:10\n    |\n LL |     asm!(invalid);\n    |          ^^^^^^^\n \n error: inline assembly must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:99:15\n+  --> $DIR/macros-nonfatal-errors.rs:100:15\n    |\n LL |     llvm_asm!(invalid);\n    |               ^^^^^^^\n \n error: concat_idents! requires ident args.\n-  --> $DIR/macros-nonfatal-errors.rs:101:5\n+  --> $DIR/macros-nonfatal-errors.rs:102:5\n    |\n LL |     concat_idents!(\"not\", \"idents\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:103:17\n+  --> $DIR/macros-nonfatal-errors.rs:104:17\n    |\n LL |     option_env!(invalid);\n    |                 ^^^^^^^\n \n error: expected string literal\n-  --> $DIR/macros-nonfatal-errors.rs:104:10\n+  --> $DIR/macros-nonfatal-errors.rs:105:10\n    |\n LL |     env!(invalid);\n    |          ^^^^^^^\n \n error: expected string literal\n-  --> $DIR/macros-nonfatal-errors.rs:105:10\n+  --> $DIR/macros-nonfatal-errors.rs:106:10\n    |\n LL |     env!(foo, abr, baz);\n    |          ^^^\n \n error: environment variable `RUST_HOPEFULLY_THIS_DOESNT_EXIST` not defined\n-  --> $DIR/macros-nonfatal-errors.rs:106:5\n+  --> $DIR/macros-nonfatal-errors.rs:107:5\n    |\n LL |     env!(\"RUST_HOPEFULLY_THIS_DOESNT_EXIST\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `env` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: format argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:108:13\n+  --> $DIR/macros-nonfatal-errors.rs:109:13\n    |\n LL |     format!(invalid);\n    |             ^^^^^^^\n@@ -182,41 +182,41 @@ LL |     format!(\"{}\", invalid);\n    |             +++++\n \n error: argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:110:14\n+  --> $DIR/macros-nonfatal-errors.rs:111:14\n    |\n LL |     include!(invalid);\n    |              ^^^^^^^\n \n error: argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:112:18\n+  --> $DIR/macros-nonfatal-errors.rs:113:18\n    |\n LL |     include_str!(invalid);\n    |                  ^^^^^^^\n \n error: couldn't read $DIR/i'd be quite surprised if a file with this name existed: $FILE_NOT_FOUND_MSG (os error 2)\n-  --> $DIR/macros-nonfatal-errors.rs:113:5\n+  --> $DIR/macros-nonfatal-errors.rs:114:5\n    |\n LL |     include_str!(\"i'd be quite surprised if a file with this name existed\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `include_str` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:114:20\n+  --> $DIR/macros-nonfatal-errors.rs:115:20\n    |\n LL |     include_bytes!(invalid);\n    |                    ^^^^^^^\n \n error: couldn't read $DIR/i'd be quite surprised if a file with this name existed: $FILE_NOT_FOUND_MSG (os error 2)\n-  --> $DIR/macros-nonfatal-errors.rs:115:5\n+  --> $DIR/macros-nonfatal-errors.rs:116:5\n    |\n LL |     include_bytes!(\"i'd be quite surprised if a file with this name existed\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `include_bytes` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trace_macros! accepts only `true` or `false`\n-  --> $DIR/macros-nonfatal-errors.rs:117:5\n+  --> $DIR/macros-nonfatal-errors.rs:118:5\n    |\n LL |     trace_macros!(invalid);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "ce02553051d2438e563e9299d8c7949be0af1e69", "filename": "src/test/ui/out-of-stack.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fout-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Fout-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fout-of-stack.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -2,6 +2,7 @@\n \n #![allow(unused_must_use)]\n #![allow(unconditional_recursion)]\n+#![allow(deprecated)] // llvm_asm!\n // ignore-android: FIXME (#20004)\n // ignore-emscripten no processes\n // ignore-sgx no processes"}, {"sha": "7dc62a1ead13801175cf28098cf56bc5f4331624", "filename": "src/test/ui/unsafe/inline_asm.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Funsafe%2Finline_asm.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Funsafe%2Finline_asm.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Finline_asm.mir.stderr?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,13 +1,13 @@\n error[E0133]: use of inline assembly is unsafe and requires unsafe function or block\n-  --> $DIR/inline_asm.rs:8:5\n+  --> $DIR/inline_asm.rs:9:5\n    |\n LL |     asm!(\"nop\");\n    |     ^^^^^^^^^^^^ use of inline assembly\n    |\n    = note: inline assembly is entirely unchecked and can cause undefined behavior\n \n error[E0133]: use of inline assembly is unsafe and requires unsafe function or block\n-  --> $DIR/inline_asm.rs:9:5\n+  --> $DIR/inline_asm.rs:10:5\n    |\n LL |     llvm_asm!(\"nop\");\n    |     ^^^^^^^^^^^^^^^^^ use of inline assembly"}, {"sha": "995292a99030f25d47e2b9f63232c5d914cf343f", "filename": "src/test/ui/unsafe/inline_asm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Funsafe%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Funsafe%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Finline_asm.rs?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -3,6 +3,7 @@\n \n #![feature(llvm_asm)]\n #![feature(asm)]\n+#![allow(deprecated)] // llvm_asm!\n \n fn main() {\n     asm!(\"nop\"); //~ ERROR use of inline assembly is unsafe and requires unsafe function or block"}, {"sha": "7dc62a1ead13801175cf28098cf56bc5f4331624", "filename": "src/test/ui/unsafe/inline_asm.thir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Funsafe%2Finline_asm.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd17c1d43bba43412cc2f051323a279d6751e43/src%2Ftest%2Fui%2Funsafe%2Finline_asm.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Finline_asm.thir.stderr?ref=2bd17c1d43bba43412cc2f051323a279d6751e43", "patch": "@@ -1,13 +1,13 @@\n error[E0133]: use of inline assembly is unsafe and requires unsafe function or block\n-  --> $DIR/inline_asm.rs:8:5\n+  --> $DIR/inline_asm.rs:9:5\n    |\n LL |     asm!(\"nop\");\n    |     ^^^^^^^^^^^^ use of inline assembly\n    |\n    = note: inline assembly is entirely unchecked and can cause undefined behavior\n \n error[E0133]: use of inline assembly is unsafe and requires unsafe function or block\n-  --> $DIR/inline_asm.rs:9:5\n+  --> $DIR/inline_asm.rs:10:5\n    |\n LL |     llvm_asm!(\"nop\");\n    |     ^^^^^^^^^^^^^^^^^ use of inline assembly"}]}