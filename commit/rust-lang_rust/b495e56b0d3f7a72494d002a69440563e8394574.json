{"sha": "b495e56b0d3f7a72494d002a69440563e8394574", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0OTVlNTZiMGQzZjdhNzI0OTRkMDAyYTY5NDQwNTYzZTgzOTQ1NzQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-14T23:35:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-14T23:35:50Z"}, "message": "Merge #3971\n\n3971: add diagnostics subcommand to rust-analyzer CLI r=JoshMcguigan a=JoshMcguigan\n\nThis PR adds a `diagnostics` subcommand to the rust-analyzer CLI. The intent is to detect all diagnostics on a workspace. It returns a non-zero status code if any error diagnostics are detected. Ideally I'd like to run this in CI against the rust analyzer project as a guard against false positives.\r\n\r\n```\r\n$ cargo run --release --bin rust-analyzer -- diagnostics .\r\n```\r\n\r\nQuestions for reviewers:\r\n\r\n1. Is this the proper way to get all diagnostics for a workspace? It seems there are at least a few ways this can be done, and I'm not sure if this is the most appropriate mechanism to do this.\r\n2. It currently prints out the relative file path as it is collecting diagnostics, but it doesn't print the crate name. Since the file name is relative to the crate there can be repeated names, so it would be nice to print some identifier for the crate as well, but it wasn't clear to me how best to accomplish this. \n\nCo-authored-by: Josh Mcguigan <joshmcg88@gmail.com>", "tree": {"sha": "e3d061a29bfdff9ac145d5e94b7f6ffc27080398", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3d061a29bfdff9ac145d5e94b7f6ffc27080398"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b495e56b0d3f7a72494d002a69440563e8394574", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJelkjWCRBK7hj4Ov3rIwAAdHIIAEoHJOFLQeoxBj5fQQ4uMyaE\nTBMmbs2zoZREC41KugNlieFiu7e0jXqudOokzOQWzD3/8Y39h5sp24xl0W0BSRNh\niMftS3EB5rdeygJp9uRoh9MAQqPXD93EqtKSCke0mAMOHQU8cf/WmsVVsZF+izlf\nvLlJIImaNvR8jFjlfZFGjylLEV2JeKpf0kFl/4uuHSPRlcHLCe5W/Waqc7DrEW6X\nULPegbHWd2eV5eXhQI95JUuy5zP3rKFYKPE5kUl6UfuDyIz2KF2H3NmfIZwGJAKd\nQFMk1BA2fb3KzULqTBWCcGeORlWq55oyLwC2awxAuaY8VeHW93kLlKpwlY0kZr4=\n=zwCQ\n-----END PGP SIGNATURE-----\n", "payload": "tree e3d061a29bfdff9ac145d5e94b7f6ffc27080398\nparent c82e7696e6f86cc0843c5aab9f09b5d6dd0d4bac\nparent 6be972770e75db5ec9f9ae2504786a9d7e957e4a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1586907350 +0000\ncommitter GitHub <noreply@github.com> 1586907350 +0000\n\nMerge #3971\n\n3971: add diagnostics subcommand to rust-analyzer CLI r=JoshMcguigan a=JoshMcguigan\n\nThis PR adds a `diagnostics` subcommand to the rust-analyzer CLI. The intent is to detect all diagnostics on a workspace. It returns a non-zero status code if any error diagnostics are detected. Ideally I'd like to run this in CI against the rust analyzer project as a guard against false positives.\r\n\r\n```\r\n$ cargo run --release --bin rust-analyzer -- diagnostics .\r\n```\r\n\r\nQuestions for reviewers:\r\n\r\n1. Is this the proper way to get all diagnostics for a workspace? It seems there are at least a few ways this can be done, and I'm not sure if this is the most appropriate mechanism to do this.\r\n2. It currently prints out the relative file path as it is collecting diagnostics, but it doesn't print the crate name. Since the file name is relative to the crate there can be repeated names, so it would be nice to print some identifier for the crate as well, but it wasn't clear to me how best to accomplish this. \n\nCo-authored-by: Josh Mcguigan <joshmcg88@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b495e56b0d3f7a72494d002a69440563e8394574", "html_url": "https://github.com/rust-lang/rust/commit/b495e56b0d3f7a72494d002a69440563e8394574", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b495e56b0d3f7a72494d002a69440563e8394574/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c82e7696e6f86cc0843c5aab9f09b5d6dd0d4bac", "url": "https://api.github.com/repos/rust-lang/rust/commits/c82e7696e6f86cc0843c5aab9f09b5d6dd0d4bac", "html_url": "https://github.com/rust-lang/rust/commit/c82e7696e6f86cc0843c5aab9f09b5d6dd0d4bac"}, {"sha": "6be972770e75db5ec9f9ae2504786a9d7e957e4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6be972770e75db5ec9f9ae2504786a9d7e957e4a", "html_url": "https://github.com/rust-lang/rust/commit/6be972770e75db5ec9f9ae2504786a9d7e957e4a"}], "stats": {"total": 131, "additions": 127, "deletions": 4}, "files": [{"sha": "3801fce23aeb5222d071d3b7630617fc74acfa06", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b495e56b0d3f7a72494d002a69440563e8394574/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b495e56b0d3f7a72494d002a69440563e8394574/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=b495e56b0d3f7a72494d002a69440563e8394574", "patch": "@@ -25,7 +25,7 @@ use hir_ty::{\n     autoderef, display::HirFormatter, expr::ExprValidator, method_resolution, ApplicationTy,\n     Canonical, InEnvironment, Substs, TraitEnvironment, Ty, TyDefId, TypeCtor,\n };\n-use ra_db::{CrateId, Edition, FileId};\n+use ra_db::{CrateId, CrateName, Edition, FileId};\n use ra_prof::profile;\n use ra_syntax::{\n     ast::{self, AttrsOwner, NameOwner},\n@@ -91,6 +91,10 @@ impl Crate {\n         db.crate_graph()[self.id].edition\n     }\n \n+    pub fn display_name(self, db: &dyn HirDatabase) -> Option<CrateName> {\n+        db.crate_graph()[self.id].display_name.as_ref().cloned()\n+    }\n+\n     pub fn all(db: &dyn HirDatabase) -> Vec<Crate> {\n         db.crate_graph().iter().map(|id| Crate { id }).collect()\n     }"}, {"sha": "f5981588abc98538057bb2071fc2fca792d40e59", "filename": "crates/rust-analyzer/src/bin/args.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b495e56b0d3f7a72494d002a69440563e8394574/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b495e56b0d3f7a72494d002a69440563e8394574/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs?ref=b495e56b0d3f7a72494d002a69440563e8394574", "patch": "@@ -35,6 +35,13 @@ pub(crate) enum Command {\n         what: BenchWhat,\n         load_output_dirs: bool,\n     },\n+    Diagnostics {\n+        path: PathBuf,\n+        load_output_dirs: bool,\n+        /// Include files which are not modules. In rust-analyzer\n+        /// this would include the parser test files.\n+        all: bool,\n+    },\n     RunServer,\n     Version,\n }\n@@ -209,6 +216,38 @@ ARGS:\n                 let load_output_dirs = matches.contains(\"--load-output-dirs\");\n                 Command::Bench { path, what, load_output_dirs }\n             }\n+            \"diagnostics\" => {\n+                if matches.contains([\"-h\", \"--help\"]) {\n+                    eprintln!(\n+                        \"\\\n+ra-cli-diagnostics\n+\n+USAGE:\n+    rust-analyzer diagnostics [FLAGS] [PATH]\n+\n+FLAGS:\n+    -h, --help              Prints help information\n+        --load-output-dirs  Load OUT_DIR values by running `cargo check` before analysis\n+        --all               Include all files rather than only modules\n+\n+ARGS:\n+    <PATH>\"\n+                    );\n+                    return Ok(Err(HelpPrinted));\n+                }\n+\n+                let load_output_dirs = matches.contains(\"--load-output-dirs\");\n+                let all = matches.contains(\"--all\");\n+                let path = {\n+                    let mut trailing = matches.free()?;\n+                    if trailing.len() != 1 {\n+                        bail!(\"Invalid flags\");\n+                    }\n+                    trailing.pop().unwrap().into()\n+                };\n+\n+                Command::Diagnostics { path, load_output_dirs, all }\n+            }\n             _ => {\n                 eprintln!(\n                     \"\\"}, {"sha": "7cfc44f01fdceab470734abc982b02b106f5835a", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b495e56b0d3f7a72494d002a69440563e8394574/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b495e56b0d3f7a72494d002a69440563e8394574/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=b495e56b0d3f7a72494d002a69440563e8394574", "patch": "@@ -39,6 +39,10 @@ fn main() -> Result<()> {\n             cli::analysis_bench(args.verbosity, path.as_ref(), what, load_output_dirs)?\n         }\n \n+        args::Command::Diagnostics { path, load_output_dirs, all } => {\n+            cli::diagnostics(path.as_ref(), load_output_dirs, all)?\n+        }\n+\n         args::Command::RunServer => run_server()?,\n         args::Command::Version => println!(\"rust-analyzer {}\", env!(\"REV\")),\n     }"}, {"sha": "a865a7c7e23be3f98e222a368ac0075f32aeab85", "filename": "crates/rust-analyzer/src/cli.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b495e56b0d3f7a72494d002a69440563e8394574/crates%2Frust-analyzer%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b495e56b0d3f7a72494d002a69440563e8394574/crates%2Frust-analyzer%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli.rs?ref=b495e56b0d3f7a72494d002a69440563e8394574", "patch": "@@ -3,6 +3,7 @@\n mod load_cargo;\n mod analysis_stats;\n mod analysis_bench;\n+mod diagnostics;\n mod progress_report;\n \n use std::io::Read;\n@@ -12,6 +13,10 @@ use ra_ide::{file_structure, Analysis};\n use ra_prof::profile;\n use ra_syntax::{AstNode, SourceFile};\n \n+pub use analysis_bench::{analysis_bench, BenchWhat, Position};\n+pub use analysis_stats::analysis_stats;\n+pub use diagnostics::diagnostics;\n+\n #[derive(Clone, Copy)]\n pub enum Verbosity {\n     Spammy,\n@@ -60,9 +65,6 @@ pub fn highlight(rainbow: bool) -> Result<()> {\n     Ok(())\n }\n \n-pub use analysis_bench::{analysis_bench, BenchWhat, Position};\n-pub use analysis_stats::analysis_stats;\n-\n fn file() -> Result<SourceFile> {\n     let text = read_stdin()?;\n     Ok(SourceFile::parse(&text).tree())"}, {"sha": "92664b415b4de73c37959bfc969c58268f3dddf2", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/b495e56b0d3f7a72494d002a69440563e8394574/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b495e56b0d3f7a72494d002a69440563e8394574/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=b495e56b0d3f7a72494d002a69440563e8394574", "patch": "@@ -0,0 +1,74 @@\n+//! Analyze all modules in a project for diagnostics. Exits with a non-zero status\n+//! code if any errors are found.\n+\n+use anyhow::anyhow;\n+use ra_db::SourceDatabaseExt;\n+use ra_ide::Severity;\n+use std::{collections::HashSet, path::Path};\n+\n+use crate::cli::{load_cargo::load_cargo, Result};\n+use hir::Semantics;\n+\n+pub fn diagnostics(path: &Path, load_output_dirs: bool, all: bool) -> Result<()> {\n+    let (host, roots) = load_cargo(path, load_output_dirs)?;\n+    let db = host.raw_database();\n+    let analysis = host.analysis();\n+    let semantics = Semantics::new(db);\n+    let members = roots\n+        .into_iter()\n+        .filter_map(|(source_root_id, project_root)| {\n+            // filter out dependencies\n+            if project_root.is_member() {\n+                Some(source_root_id)\n+            } else {\n+                None\n+            }\n+        })\n+        .collect::<HashSet<_>>();\n+\n+    let mut found_error = false;\n+    let mut visited_files = HashSet::new();\n+    for source_root_id in members {\n+        for file_id in db.source_root(source_root_id).walk() {\n+            // Filter out files which are not actually modules (unless `--all` flag is\n+            // passed). In the rust-analyzer repository this filters out the parser test files.\n+            if semantics.to_module_def(file_id).is_some() || all {\n+                if !visited_files.contains(&file_id) {\n+                    let crate_name = if let Some(module) = semantics.to_module_def(file_id) {\n+                        if let Some(name) = module.krate().display_name(db) {\n+                            format!(\"{}\", name)\n+                        } else {\n+                            String::from(\"unknown\")\n+                        }\n+                    } else {\n+                        String::from(\"unknown\")\n+                    };\n+                    println!(\n+                        \"processing crate: {}, module: {}\",\n+                        crate_name,\n+                        db.file_relative_path(file_id)\n+                    );\n+                    for diagnostic in analysis.diagnostics(file_id).unwrap() {\n+                        if matches!(diagnostic.severity, Severity::Error) {\n+                            found_error = true;\n+                        }\n+\n+                        println!(\"{:?}\", diagnostic);\n+                    }\n+\n+                    visited_files.insert(file_id);\n+                }\n+            }\n+        }\n+    }\n+\n+    println!();\n+    println!(\"diagnostic scan complete\");\n+\n+    if found_error {\n+        println!();\n+        Err(anyhow!(\"diagnostic error detected\"))\n+    } else {\n+        Ok(())\n+    }\n+}"}]}