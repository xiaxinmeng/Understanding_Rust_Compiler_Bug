{"sha": "88702a758f031f33452e9acac621841552ec9f8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4NzAyYTc1OGYwMzFmMzM0NTJlOWFjYWM2MjE4NDE1NTJlYzlmOGE=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-04T15:42:29Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-04T15:42:29Z"}, "message": "Merge #738\n\n738: Implement lens for impls and support resolving lenses. r=matklad a=kjeremy\n\nCloses #620 \n\nCo-authored-by: Jeremy Kolb <kjeremy@gmail.com>\nCo-authored-by: kjeremy <kjeremy@gmail.com>", "tree": {"sha": "fc1450350a842925120a7d0485f96eb973f54b08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc1450350a842925120a7d0485f96eb973f54b08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88702a758f031f33452e9acac621841552ec9f8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88702a758f031f33452e9acac621841552ec9f8a", "html_url": "https://github.com/rust-lang/rust/commit/88702a758f031f33452e9acac621841552ec9f8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88702a758f031f33452e9acac621841552ec9f8a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "13a2bdb0a89260e978ba8e55abd7a51a003e62a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/13a2bdb0a89260e978ba8e55abd7a51a003e62a7", "html_url": "https://github.com/rust-lang/rust/commit/13a2bdb0a89260e978ba8e55abd7a51a003e62a7"}, {"sha": "0f7a714c6306e545157f3ef94fe8db5957007efa", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f7a714c6306e545157f3ef94fe8db5957007efa", "html_url": "https://github.com/rust-lang/rust/commit/0f7a714c6306e545157f3ef94fe8db5957007efa"}], "stats": {"total": 104, "additions": 101, "deletions": 3}, "files": [{"sha": "39992788de4405064c5a2f56825aeac1ce995935", "filename": "crates/ra_lsp_server/src/caps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88702a758f031f33452e9acac621841552ec9f8a/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88702a758f031f33452e9acac621841552ec9f8a/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs?ref=88702a758f031f33452e9acac621841552ec9f8a", "patch": "@@ -33,7 +33,7 @@ pub fn server_capabilities() -> ServerCapabilities {\n         workspace_symbol_provider: Some(true),\n         code_action_provider: Some(CodeActionProviderCapability::Simple(true)),\n         code_lens_provider: Some(CodeLensOptions {\n-            resolve_provider: None,\n+            resolve_provider: Some(true),\n         }),\n         document_formatting_provider: Some(true),\n         document_range_formatting_provider: None,"}, {"sha": "26b6fe54aa9215c24d6483afce1a4a356262a25d", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88702a758f031f33452e9acac621841552ec9f8a/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88702a758f031f33452e9acac621841552ec9f8a/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=88702a758f031f33452e9acac621841552ec9f8a", "patch": "@@ -312,6 +312,7 @@ fn on_request(\n         .on::<req::Completion>(handlers::handle_completion)?\n         .on::<req::CodeActionRequest>(handlers::handle_code_action)?\n         .on::<req::CodeLensRequest>(handlers::handle_code_lens)?\n+        .on::<req::CodeLensResolve>(handlers::handle_code_lens_resolve)?\n         .on::<req::FoldingRangeRequest>(handlers::handle_folding_range)?\n         .on::<req::SignatureHelpRequest>(handlers::handle_signature_help)?\n         .on::<req::HoverRequest>(handlers::handle_hover)?"}, {"sha": "9e2cc8ffcce8c5f09c1c7af18f7ccbcbec7266bd", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 87, "deletions": 2, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/88702a758f031f33452e9acac621841552ec9f8a/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88702a758f031f33452e9acac621841552ec9f8a/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=88702a758f031f33452e9acac621841552ec9f8a", "patch": "@@ -5,15 +5,17 @@ use lsp_types::{\n     FoldingRangeKind, FoldingRangeParams, Hover, HoverContents, Location, MarkupContent,\n     MarkupKind, ParameterInformation, ParameterLabel, Position, PrepareRenameResponse, Range,\n     RenameParams, SignatureInformation, SymbolInformation, TextDocumentIdentifier, TextEdit,\n-    WorkspaceEdit\n+    WorkspaceEdit,\n };\n use ra_ide_api::{\n     FileId, FilePosition, FileRange, FoldKind, Query, RangeInfo, RunnableKind, Severity, Cancelable,\n };\n-use ra_syntax::{AstNode, TextUnit};\n+use ra_syntax::{AstNode, SyntaxKind, TextUnit};\n use rustc_hash::FxHashMap;\n+use serde::{Serialize, Deserialize};\n use serde_json::to_value;\n use std::io::Write;\n+use url_serde::Ser;\n \n use crate::{\n     cargo_target_spec::{runnable_args, CargoTargetSpec},\n@@ -596,6 +598,10 @@ pub fn handle_code_action(\n     for source_edit in assists.chain(fixes) {\n         let title = source_edit.label.clone();\n         let edit = source_edit.try_conv_with(&world)?;\n+\n+        // We cannot use the 'editor.action.showReferences' command directly\n+        // because that command requires vscode types which we convert in the handler\n+        // on the client side.\n         let cmd = Command {\n             title,\n             command: \"rust-analyzer.applySourceChange\".to_string(),\n@@ -616,6 +622,7 @@ pub fn handle_code_lens(\n \n     let mut lenses: Vec<CodeLens> = Default::default();\n \n+    // Gather runnables\n     for runnable in world.analysis().runnables(file_id)? {\n         let title = match &runnable.kind {\n             RunnableKind::Test { name: _ } | RunnableKind::TestMod { path: _ } => {\n@@ -652,9 +659,87 @@ pub fn handle_code_lens(\n         }\n     }\n \n+    // Handle impls\n+    lenses.extend(\n+        world\n+            .analysis()\n+            .file_structure(file_id)\n+            .into_iter()\n+            .filter(|it| match it.kind {\n+                SyntaxKind::TRAIT_DEF | SyntaxKind::STRUCT_DEF | SyntaxKind::ENUM_DEF => true,\n+                _ => false,\n+            })\n+            .map(|it| {\n+                let range = it.node_range.conv_with(&line_index);\n+                let pos = range.start;\n+                let lens_params =\n+                    req::TextDocumentPositionParams::new(params.text_document.clone(), pos);\n+                CodeLens {\n+                    range,\n+                    command: None,\n+                    data: Some(to_value(CodeLensResolveData::Impls(lens_params)).unwrap()),\n+                }\n+            }),\n+    );\n+\n     return Ok(Some(lenses));\n }\n \n+#[derive(Debug, Serialize, Deserialize)]\n+#[serde(rename_all = \"camelCase\")]\n+enum CodeLensResolveData {\n+    Impls(req::TextDocumentPositionParams),\n+}\n+\n+pub fn handle_code_lens_resolve(world: ServerWorld, code_lens: CodeLens) -> Result<CodeLens> {\n+    let data = code_lens.data.unwrap();\n+    let resolve = serde_json::from_value(data)?;\n+    match resolve {\n+        Some(CodeLensResolveData::Impls(lens_params)) => {\n+            let locations: Vec<Location> =\n+                match handle_goto_implementation(world, lens_params.clone())? {\n+                    Some(req::GotoDefinitionResponse::Scalar(loc)) => vec![loc],\n+                    Some(req::GotoDefinitionResponse::Array(locs)) => locs,\n+                    Some(req::GotoDefinitionResponse::Link(links)) => links\n+                        .into_iter()\n+                        .map(|link| Location::new(link.target_uri, link.target_selection_range))\n+                        .collect(),\n+                    _ => vec![],\n+                };\n+\n+            let title = if locations.len() == 1 {\n+                \"1 implementation\".into()\n+            } else {\n+                format!(\"{} implementations\", locations.len())\n+            };\n+\n+            return Ok(CodeLens {\n+                range: code_lens.range,\n+                command: Some(Command {\n+                    title,\n+                    command: \"rust-analyzer.showReferences\".into(),\n+                    arguments: Some(vec![\n+                        to_value(&Ser::new(&lens_params.text_document.uri)).unwrap(),\n+                        to_value(code_lens.range.start).unwrap(),\n+                        to_value(locations).unwrap(),\n+                    ]),\n+                }),\n+                data: None,\n+            });\n+        }\n+        _ => {\n+            return Ok(CodeLens {\n+                range: code_lens.range,\n+                command: Some(Command {\n+                    title: \"Error\".into(),\n+                    ..Default::default()\n+                }),\n+                data: None,\n+            });\n+        }\n+    }\n+}\n+\n pub fn handle_document_highlight(\n     world: ServerWorld,\n     params: req::TextDocumentPositionParams,"}, {"sha": "a0be70202b2649b2e6044ae7d5bbb582c5784562", "filename": "editors/code/src/extension.ts", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/88702a758f031f33452e9acac621841552ec9f8a/editors%2Fcode%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/88702a758f031f33452e9acac621841552ec9f8a/editors%2Fcode%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fextension.ts?ref=88702a758f031f33452e9acac621841552ec9f8a", "patch": "@@ -70,6 +70,18 @@ export function activate(context: vscode.ExtensionContext) {\n         'rust-analyzer.applySourceChange',\n         commands.applySourceChange.handle\n     );\n+    registerCommand(\n+        'rust-analyzer.showReferences',\n+        (uri: string, position: lc.Position, locations: lc.Location[]) => {\n+            vscode.commands.executeCommand(\n+                'editor.action.showReferences',\n+                vscode.Uri.parse(uri),\n+                Server.client.protocol2CodeConverter.asPosition(position),\n+                locations.map(Server.client.protocol2CodeConverter.asLocation)\n+            );\n+        }\n+    );\n+\n     overrideCommand('type', commands.onEnter.handle);\n \n     // Notifications are events triggered by the language server"}]}