{"sha": "b3cc7c057d3e926c9a31467cb956a9c6f5320740", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzY2M3YzA1N2QzZTkyNmM5YTMxNDY3Y2I5NTZhOWM2ZjUzMjA3NDA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-24T11:18:10Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-24T11:18:10Z"}, "message": "dont show introduce variable everywhere", "tree": {"sha": "26dd668348c30a4a7f7b973c00e7c0359cf417e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26dd668348c30a4a7f7b973c00e7c0359cf417e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3cc7c057d3e926c9a31467cb956a9c6f5320740", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3cc7c057d3e926c9a31467cb956a9c6f5320740", "html_url": "https://github.com/rust-lang/rust/commit/b3cc7c057d3e926c9a31467cb956a9c6f5320740", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3cc7c057d3e926c9a31467cb956a9c6f5320740/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef442b8682909f2ab758f55507d4c2e81673cfa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef442b8682909f2ab758f55507d4c2e81673cfa1", "html_url": "https://github.com/rust-lang/rust/commit/ef442b8682909f2ab758f55507d4c2e81673cfa1"}], "stats": {"total": 88, "additions": 42, "deletions": 46}, "files": [{"sha": "3fab29e2987942c33319ae5169ee378eab95c452", "filename": "crates/ra_assists/src/introduce_variable.rs", "status": "modified", "additions": 27, "deletions": 41, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/b3cc7c057d3e926c9a31467cb956a9c6f5320740/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3cc7c057d3e926c9a31467cb956a9c6f5320740/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs?ref=b3cc7c057d3e926c9a31467cb956a9c6f5320740", "patch": "@@ -9,6 +9,9 @@ use ra_syntax::{\n use crate::{AssistCtx, Assist, AssistId};\n \n pub(crate) fn introduce_variable(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    if ctx.frange.range.is_empty() {\n+        return None;\n+    }\n     let node = ctx.covering_node();\n     if !valid_covering_node(node) {\n         return None;\n@@ -118,7 +121,7 @@ fn anchor_stmt(expr: &ast::Expr) -> Option<(&SyntaxNode, bool)> {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_range, check_assist_target, check_assist_range_target};\n+    use crate::helpers::{check_assist_range_not_applicable, check_assist_range, check_assist_range_target};\n \n     #[test]\n     fn test_introduce_var_simple() {\n@@ -309,11 +312,11 @@ fn main() {\n \n     #[test]\n     fn test_introduce_var_path_simple() {\n-        check_assist(\n+        check_assist_range(\n             introduce_variable,\n             \"\n fn main() {\n-    let o = S<|>ome(true);\n+    let o = <|>Some(true)<|>;\n }\n \",\n             \"\n@@ -327,11 +330,11 @@ fn main() {\n \n     #[test]\n     fn test_introduce_var_path_method() {\n-        check_assist(\n+        check_assist_range(\n             introduce_variable,\n             \"\n fn main() {\n-    let v = b<|>ar.foo();\n+    let v = <|>bar.foo()<|>;\n }\n \",\n             \"\n@@ -345,11 +348,11 @@ fn main() {\n \n     #[test]\n     fn test_introduce_var_return() {\n-        check_assist(\n+        check_assist_range(\n             introduce_variable,\n             \"\n fn foo() -> u32 {\n-    r<|>eturn 2 + 2;\n+    <|>return 2 + 2<|>;\n }\n \",\n             \"\n@@ -363,13 +366,13 @@ fn foo() -> u32 {\n \n     #[test]\n     fn test_introduce_var_does_not_add_extra_whitespace() {\n-        check_assist(\n+        check_assist_range(\n             introduce_variable,\n             \"\n fn foo() -> u32 {\n \n \n-    r<|>eturn 2 + 2;\n+    <|>return 2 + 2<|>;\n }\n \",\n             \"\n@@ -382,12 +385,12 @@ fn foo() -> u32 {\n \",\n         );\n \n-        check_assist(\n+        check_assist_range(\n             introduce_variable,\n             \"\n fn foo() -> u32 {\n \n-        r<|>eturn 2 + 2;\n+        <|>return 2 + 2<|>;\n }\n \",\n             \"\n@@ -399,7 +402,7 @@ fn foo() -> u32 {\n \",\n         );\n \n-        check_assist(\n+        check_assist_range(\n             introduce_variable,\n             \"\n fn foo() -> u32 {\n@@ -408,7 +411,7 @@ fn foo() -> u32 {\n     // bar\n \n \n-    r<|>eturn 2 + 2;\n+    <|>return 2 + 2<|>;\n }\n \",\n             \"\n@@ -427,12 +430,12 @@ fn foo() -> u32 {\n \n     #[test]\n     fn test_introduce_var_break() {\n-        check_assist(\n+        check_assist_range(\n             introduce_variable,\n             \"\n fn main() {\n     let result = loop {\n-        b<|>reak 2 + 2;\n+        <|>break 2 + 2<|>;\n     };\n }\n \",\n@@ -449,11 +452,11 @@ fn main() {\n \n     #[test]\n     fn test_introduce_var_for_cast() {\n-        check_assist(\n+        check_assist_range(\n             introduce_variable,\n             \"\n fn main() {\n-    let v = 0f32 a<|>s u32;\n+    let v = <|>0f32 as u32<|>;\n }\n \",\n             \"\n@@ -467,39 +470,26 @@ fn main() {\n \n     #[test]\n     fn test_introduce_var_for_return_not_applicable() {\n-        check_assist_not_applicable(\n-            introduce_variable,\n-            \"\n-fn foo() {\n-    r<|>eturn;\n-}\n-\",\n-        );\n+        check_assist_range_not_applicable(introduce_variable, \"fn foo() { <|>return<|>; } \");\n     }\n \n     #[test]\n     fn test_introduce_var_for_break_not_applicable() {\n-        check_assist_not_applicable(\n+        check_assist_range_not_applicable(\n             introduce_variable,\n-            \"\n-fn main() {\n-    loop {\n-        b<|>reak;\n-    };\n-}\n-\",\n+            \"fn main() { loop { <|>break<|>; }; }\",\n         );\n     }\n \n     #[test]\n     fn test_introduce_var_in_comment_not_applicable() {\n-        check_assist_not_applicable(\n+        check_assist_range_not_applicable(\n             introduce_variable,\n             \"\n fn main() {\n     let x = true;\n     let tuple = match x {\n-        // c<|>omment\n+        // <|>comment<|>\n         true => (2 + 2, true)\n         _ => (0, false)\n     };\n@@ -511,13 +501,9 @@ fn main() {\n     // FIXME: This is not quite correct, but good enough(tm) for the sorting heuristic\n     #[test]\n     fn introduce_var_target() {\n-        check_assist_target(\n+        check_assist_range_target(\n             introduce_variable,\n-            \"\n-fn foo() -> u32 {\n-    r<|>eturn 2 + 2;\n-}\n-\",\n+            \"fn foo() -> u32 { <|>return 2 + 2<|>; }\",\n             \"2 + 2\",\n         );\n "}, {"sha": "8e161dd37f1dfc7c3d242e5f0c94264f3d3b8018", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b3cc7c057d3e926c9a31467cb956a9c6f5320740/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3cc7c057d3e926c9a31467cb956a9c6f5320740/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=b3cc7c057d3e926c9a31467cb956a9c6f5320740", "patch": "@@ -259,14 +259,25 @@ mod helpers {\n         let assist = AssistCtx::with_ctx(&db, frange, true, assist);\n         assert!(assist.is_none());\n     }\n+\n+    pub(crate) fn check_assist_range_not_applicable(\n+        assist: fn(AssistCtx<MockDatabase>) -> Option<Assist>,\n+        before: &str,\n+    ) {\n+        let (range, before) = extract_range(before);\n+        let (db, _source_root, file_id) = MockDatabase::with_single_file(&before);\n+        let frange = FileRange { file_id, range };\n+        let assist = AssistCtx::with_ctx(&db, frange, true, assist);\n+        assert!(assist.is_none());\n+    }\n }\n \n #[cfg(test)]\n mod tests {\n     use hir::mock::MockDatabase;\n     use ra_syntax::TextRange;\n     use ra_db::FileRange;\n-    use test_utils::{extract_offset};\n+    use test_utils::{extract_offset, extract_range};\n \n     #[test]\n     fn assist_order_field_struct() {\n@@ -286,16 +297,15 @@ mod tests {\n     fn assist_order_if_expr() {\n         let before = \"\n         pub fn test_some_range(a: int) -> bool {\n-            if let 2..6 = 5<|> {\n+            if let 2..6 = <|>5<|> {\n                 true\n             } else {\n                 false\n             }\n         }\";\n-        let (before_cursor_pos, before) = extract_offset(before);\n+        let (range, before) = extract_range(before);\n         let (db, _source_root, file_id) = MockDatabase::with_single_file(&before);\n-        let frange =\n-            FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n+        let frange = FileRange { file_id, range };\n         let assists = super::assists(&db, frange);\n         let mut assists = assists.iter();\n "}]}