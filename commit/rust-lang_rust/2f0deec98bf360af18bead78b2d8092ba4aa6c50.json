{"sha": "2f0deec98bf360af18bead78b2d8092ba4aa6c50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMGRlZWM5OGJmMzYwYWYxOGJlYWQ3OGIyZDgwOTJiYTRhYTZjNTA=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-05-09T02:34:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-09T02:34:52Z"}, "message": "Rollup merge of #41838 - z1mvader:fix_fn_args_coerce_closure, r=nikomatsakis\n\nFixed argument inference for closures when coercing into 'fn'\n\nThis fixes https://github.com/rust-lang/rust/issues/41755. The tests  `compile-fail/closure-no-fn.rs` and `compile-fail/issue-40000.rs` were modified. A new test `run-pass/closure_to_fn_coercion-expected-types.rs` was added\n\nr? @nikomatsakis", "tree": {"sha": "e6a811679fe233fe1d9d51d533f60b2878294ff2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6a811679fe233fe1d9d51d533f60b2878294ff2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f0deec98bf360af18bead78b2d8092ba4aa6c50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f0deec98bf360af18bead78b2d8092ba4aa6c50", "html_url": "https://github.com/rust-lang/rust/commit/2f0deec98bf360af18bead78b2d8092ba4aa6c50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f0deec98bf360af18bead78b2d8092ba4aa6c50/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f3070315597917c65f511a055c2b56451283eb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f3070315597917c65f511a055c2b56451283eb1", "html_url": "https://github.com/rust-lang/rust/commit/7f3070315597917c65f511a055c2b56451283eb1"}, {"sha": "82e07363916146f0d6e01199ef30544e7fdd6248", "url": "https://api.github.com/repos/rust-lang/rust/commits/82e07363916146f0d6e01199ef30544e7fdd6248", "html_url": "https://github.com/rust-lang/rust/commit/82e07363916146f0d6e01199ef30544e7fdd6248"}], "stats": {"total": 63, "additions": 55, "deletions": 8}, "files": [{"sha": "fb3be849319929e8b38813e3d3fa60900ff654a1", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f0deec98bf360af18bead78b2d8092ba4aa6c50/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0deec98bf360af18bead78b2d8092ba4aa6c50/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=2f0deec98bf360af18bead78b2d8092ba4aa6c50", "patch": "@@ -126,6 +126,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 (sig, kind)\n             }\n             ty::TyInfer(ty::TyVar(vid)) => self.deduce_expectations_from_obligations(vid),\n+            ty::TyFnPtr(sig) => (Some(sig.skip_binder().clone()), Some(ty::ClosureKind::Fn)),\n             _ => (None, None),\n         }\n     }"}, {"sha": "10c99703a97ff8dac71a52a61c3d8853a80c2acc", "filename": "src/test/compile-fail/closure-no-fn-1.rs", "status": "renamed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f0deec98bf360af18bead78b2d8092ba4aa6c50/src%2Ftest%2Fcompile-fail%2Fclosure-no-fn-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0deec98bf360af18bead78b2d8092ba4aa6c50/src%2Ftest%2Fcompile-fail%2Fclosure-no-fn-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-no-fn-1.rs?ref=2f0deec98bf360af18bead78b2d8092ba4aa6c50", "patch": "@@ -15,10 +15,4 @@ fn main() {\n     let mut a = 0u8;\n     let foo: fn(u8) -> u8 = |v: u8| { a += v; a };\n     //~^ ERROR mismatched types\n-    let b = 0u8;\n-    let bar: fn() -> u8 = || { b };\n-    //~^ ERROR mismatched types\n-    let baz: fn() -> u8 = || { b } as fn() -> u8;\n-    //~^ ERROR mismatched types\n-    //~^^ ERROR non-scalar cast\n }", "previous_filename": "src/test/compile-fail/closure-no-fn.rs"}, {"sha": "a6438bb5f241847845d31fffc4a120f28a415858", "filename": "src/test/compile-fail/closure-no-fn-2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2f0deec98bf360af18bead78b2d8092ba4aa6c50/src%2Ftest%2Fcompile-fail%2Fclosure-no-fn-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0deec98bf360af18bead78b2d8092ba4aa6c50/src%2Ftest%2Fcompile-fail%2Fclosure-no-fn-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-no-fn-2.rs?ref=2f0deec98bf360af18bead78b2d8092ba4aa6c50", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Ensure that capturing closures are never coerced to fns\n+// Especially interesting as non-capturing closures can be.\n+\n+fn main() {\n+    let b = 0u8;\n+    let bar: fn() -> u8 = || { b };\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "85dbc899208f6f95e7b3c8096a4122d0982355f8", "filename": "src/test/compile-fail/closure-no-fn-3.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2f0deec98bf360af18bead78b2d8092ba4aa6c50/src%2Ftest%2Fcompile-fail%2Fclosure-no-fn-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0deec98bf360af18bead78b2d8092ba4aa6c50/src%2Ftest%2Fcompile-fail%2Fclosure-no-fn-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-no-fn-3.rs?ref=2f0deec98bf360af18bead78b2d8092ba4aa6c50", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Ensure that capturing closures are never coerced to fns\n+// Especially interesting as non-capturing closures can be.\n+\n+fn main() {\n+    let b = 0u8;\n+    let baz: fn() -> u8 = (|| { b }) as fn() -> u8;\n+    //~^ ERROR non-scalar cast\n+}"}, {"sha": "3ccee0f12becb63e1f84cf4bd89be3109253a3c5", "filename": "src/test/compile-fail/issue-40000.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f0deec98bf360af18bead78b2d8092ba4aa6c50/src%2Ftest%2Fcompile-fail%2Fissue-40000.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0deec98bf360af18bead78b2d8092ba4aa6c50/src%2Ftest%2Fcompile-fail%2Fissue-40000.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-40000.rs?ref=2f0deec98bf360af18bead78b2d8092ba4aa6c50", "patch": "@@ -11,8 +11,7 @@\n #![feature(closure_to_fn_coercion)]\n \n fn main() {\n-    let bar: fn(&mut u32) = |_| {}; //~ ERROR mismatched types\n-    //~| expected concrete lifetime, found bound lifetime parameter\n+    let bar: fn(&mut u32) = |_| {};\n \n     fn foo(x: Box<Fn(&i32)>) {}\n     let bar = Box::new(|x: &i32| {}) as Box<Fn(_)>;"}, {"sha": "7214ebfaf07033b67648876e7b82dddca2c6799f", "filename": "src/test/run-pass/closure_to_fn_coercion-expected-types.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2f0deec98bf360af18bead78b2d8092ba4aa6c50/src%2Ftest%2Frun-pass%2Fclosure_to_fn_coercion-expected-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0deec98bf360af18bead78b2d8092ba4aa6c50/src%2Ftest%2Frun-pass%2Fclosure_to_fn_coercion-expected-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure_to_fn_coercion-expected-types.rs?ref=2f0deec98bf360af18bead78b2d8092ba4aa6c50", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+// Ensure that we deduce expected argument types when a `fn()` type is expected (#41755)\n+\n+#![feature(closure_to_fn_coercion)]\n+fn foo(f: fn(Vec<u32>) -> usize) { }\n+\n+fn main() {\n+    foo(|x| x.len())\n+}"}]}