{"sha": "ab87f87ba03518da23ca510249aa3f5908a42368", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiODdmODdiYTAzNTE4ZGEyM2NhNTEwMjQ5YWEzZjU5MDhhNDIzNjg=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-05-15T16:20:07Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-05-15T16:27:11Z"}, "message": "Fix CHANGELOG.md and lint names plural", "tree": {"sha": "c637d66cc6ea46924d432d7f5e2493fcc51a4c6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c637d66cc6ea46924d432d7f5e2493fcc51a4c6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab87f87ba03518da23ca510249aa3f5908a42368", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab87f87ba03518da23ca510249aa3f5908a42368", "html_url": "https://github.com/rust-lang/rust/commit/ab87f87ba03518da23ca510249aa3f5908a42368", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab87f87ba03518da23ca510249aa3f5908a42368/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93386563f66823ac7d10641c007b0bbc23ab09e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/93386563f66823ac7d10641c007b0bbc23ab09e6", "html_url": "https://github.com/rust-lang/rust/commit/93386563f66823ac7d10641c007b0bbc23ab09e6"}], "stats": {"total": 114, "additions": 57, "deletions": 57}, "files": [{"sha": "d05819a973a5662a65329e7a4aee296c5d5053d5", "filename": "CHANGELOG.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ab87f87ba03518da23ca510249aa3f5908a42368/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/ab87f87ba03518da23ca510249aa3f5908a42368/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=ab87f87ba03518da23ca510249aa3f5908a42368", "patch": "@@ -198,7 +198,7 @@ Released 2020-03-12\n \n ### Suggestion Improvements\n \n-* [`option_map_unwrap_or`] [#4634](https://github.com/rust-lang/rust-clippy/pull/4634)\n+* `option_map_unwrap_or` [#4634](https://github.com/rust-lang/rust-clippy/pull/4634)\n * [`wildcard_enum_match_arm`] [#4934](https://github.com/rust-lang/rust-clippy/pull/4934)\n * [`cognitive_complexity`] [#4935](https://github.com/rust-lang/rust-clippy/pull/4935)\n * [`decimal_literal_representation`] [#4956](https://github.com/rust-lang/rust-clippy/pull/4956)\n@@ -282,8 +282,8 @@ Released 2019-12-19\n   * [`panic`] [#4657](https://github.com/rust-lang/rust-clippy/pull/4657)\n   * [`unreachable`] [#4657](https://github.com/rust-lang/rust-clippy/pull/4657)\n   * [`todo`] [#4657](https://github.com/rust-lang/rust-clippy/pull/4657)\n-  * [`option_expect_used`] [#4657](https://github.com/rust-lang/rust-clippy/pull/4657)\n-  * [`result_expect_used`] [#4657](https://github.com/rust-lang/rust-clippy/pull/4657)\n+  * `option_expect_used` [#4657](https://github.com/rust-lang/rust-clippy/pull/4657)\n+  * `result_expect_used` [#4657](https://github.com/rust-lang/rust-clippy/pull/4657)\n * Move `redundant_clone` to perf group [#4509](https://github.com/rust-lang/rust-clippy/pull/4509)\n * Move `manual_mul_add` to nursery group [#4736](https://github.com/rust-lang/rust-clippy/pull/4736)\n * Expand `unit_cmp` to also work with `assert_eq!`, `debug_assert_eq!`, `assert_ne!` and `debug_assert_ne!` [#4613](https://github.com/rust-lang/rust-clippy/pull/4613)\n@@ -395,7 +395,7 @@ Released 2019-08-15\n * Fix false positive in [`useless_attribute`] [#4107](https://github.com/rust-lang/rust-clippy/pull/4107)\n * Fix incorrect suggestion for [`float_cmp`] [#4214](https://github.com/rust-lang/rust-clippy/pull/4214)\n * Add suggestions for [`print_with_newline`] and [`write_with_newline`] [#4136](https://github.com/rust-lang/rust-clippy/pull/4136)\n-* Improve suggestions for [`option_map_unwrap_or_else`] and [`result_map_unwrap_or_else`] [#4164](https://github.com/rust-lang/rust-clippy/pull/4164)\n+* Improve suggestions for `option_map_unwrap_or_else` and `result_map_unwrap_or_else` [#4164](https://github.com/rust-lang/rust-clippy/pull/4164)\n * Improve suggestions for [`non_ascii_literal`] [#4119](https://github.com/rust-lang/rust-clippy/pull/4119)\n * Improve diagnostics for [`let_and_return`] [#4137](https://github.com/rust-lang/rust-clippy/pull/4137)\n * Improve diagnostics for [`trivially_copy_pass_by_ref`] [#4071](https://github.com/rust-lang/rust-clippy/pull/4071)\n@@ -448,7 +448,7 @@ Released 2019-05-20\n * Fix false positive in [`needless_range_loop`] pertaining to structs without a `.iter()`\n * Fix false positive in [`bool_comparison`] pertaining to non-bool types\n * Fix false positive in [`redundant_closure`] pertaining to differences in borrows\n-* Fix false positive in [`option_map_unwrap_or`] on non-copy types\n+* Fix false positive in `option_map_unwrap_or` on non-copy types\n * Fix false positives in [`missing_const_for_fn`] pertaining to macros and trait method impls\n * Fix false positive in [`needless_pass_by_value`] pertaining to procedural macros\n * Fix false positive in [`needless_continue`] pertaining to loop labels\n@@ -794,7 +794,7 @@ Released 2018-09-13\n \n ## 0.0.169\n * Rustup to *rustc 1.23.0-nightly (3b82e4c74 2017-11-05)*\n-* New lints: [`just_underscores_and_digits`], [`result_map_unwrap_or_else`], [`transmute_bytes_to_str`]\n+* New lints: [`just_underscores_and_digits`], `result_map_unwrap_or_else`, [`transmute_bytes_to_str`]\n \n ## 0.0.168\n * Rustup to *rustc 1.23.0-nightly (f0fe716db 2017-10-30)*\n@@ -1068,7 +1068,7 @@ Released 2018-09-13\n \n ## 0.0.93 \u2014 2016-10-03\n * Rustup to *rustc 1.14.0-nightly (144af3e97 2016-10-02)*\n-* [`option_map_unwrap_or`] and [`option_map_unwrap_or_else`] are now\n+* `option_map_unwrap_or` and `option_map_unwrap_or_else` are now\n   allowed by default.\n * New lint: [`explicit_into_iter_loop`]\n \n@@ -1087,8 +1087,8 @@ Released 2018-09-13\n ## 0.0.88 \u2014 2016-09-04\n * Rustup to *rustc 1.13.0-nightly (70598e04f 2016-09-03)*\n * The following lints are not new but were only usable through the `clippy`\n-  lint groups: [`filter_next`], [`for_loop_over_option`],\n-  [`for_loop_over_result`] and [`match_overlapping_arm`]. You should now be\n+  lint groups: [`filter_next`], `for_loop_over_option`,\n+  `for_loop_over_result` and [`match_overlapping_arm`]. You should now be\n   able to `#[allow/deny]` them individually and they are available directly\n   through `cargo clippy`.\n \n@@ -1274,7 +1274,7 @@ Released 2018-09-13\n [`await_holding_lock`]: https://rust-lang.github.io/rust-clippy/master/index.html#await_holding_lock\n [`bad_bit_mask`]: https://rust-lang.github.io/rust-clippy/master/index.html#bad_bit_mask\n [`blacklisted_name`]: https://rust-lang.github.io/rust-clippy/master/index.html#blacklisted_name\n-[`block_in_if_condition`]: https://rust-lang.github.io/rust-clippy/master/index.html#block_in_if_condition\n+[`blocks_in_if_conditions`]: https://rust-lang.github.io/rust-clippy/master/index.html#blocks_in_if_conditions\n [`bool_comparison`]: https://rust-lang.github.io/rust-clippy/master/index.html#bool_comparison\n [`borrow_interior_mutable_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrow_interior_mutable_const\n [`borrowed_box`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrowed_box\n@@ -1361,7 +1361,7 @@ Released 2018-09-13\n [`fn_to_numeric_cast`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast\n [`fn_to_numeric_cast_with_truncation`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast_with_truncation\n [`for_kv_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#for_kv_map\n-[`for_loop_over_fallible`]: https://rust-lang.github.io/rust-clippy/master/index.html#for_loop_over_fallible\n+[`for_loops_over_fallibles`]: https://rust-lang.github.io/rust-clippy/master/index.html#for_loops_over_fallibles\n [`forget_copy`]: https://rust-lang.github.io/rust-clippy/master/index.html#forget_copy\n [`forget_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#forget_ref\n [`future_not_send`]: https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send"}, {"sha": "8fa9b05ca32972224f8595da2fa34b92c309f55e", "filename": "clippy_lints/src/blocks_in_if_conditions.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ab87f87ba03518da23ca510249aa3f5908a42368/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab87f87ba03518da23ca510249aa3f5908a42368/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs?ref=ab87f87ba03518da23ca510249aa3f5908a42368", "patch": "@@ -36,12 +36,12 @@ declare_clippy_lint! {\n     /// let res = { let x = somefunc(); x };\n     /// if res { /* ... */ }\n     /// ```\n-    pub BLOCK_IN_IF_CONDITION,\n+    pub BLOCKS_IN_IF_CONDITIONS,\n     style,\n     \"useless or complex blocks that can be eliminated in conditions\"\n }\n \n-declare_lint_pass!(BlockInIfCondition => [BLOCK_IN_IF_CONDITION]);\n+declare_lint_pass!(BlocksInIfConditions => [BLOCKS_IN_IF_CONDITIONS]);\n \n struct ExVisitor<'a, 'tcx> {\n     found_block: Option<&'tcx Expr<'tcx>>,\n@@ -71,7 +71,7 @@ const BRACED_EXPR_MESSAGE: &str = \"omit braces around single expression conditio\n const COMPLEX_BLOCK_MESSAGE: &str = \"in an `if` condition, avoid complex blocks or closures with blocks; \\\n                                     instead, move the block or closure higher and bind it with a `let`\";\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlockInIfCondition {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlocksInIfConditions {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n         if in_external_macro(cx.sess(), expr.span) {\n             return;\n@@ -89,7 +89,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlockInIfCondition {\n                             let mut applicability = Applicability::MachineApplicable;\n                             span_lint_and_sugg(\n                                 cx,\n-                                BLOCK_IN_IF_CONDITION,\n+                                BLOCKS_IN_IF_CONDITIONS,\n                                 cond.span,\n                                 BRACED_EXPR_MESSAGE,\n                                 \"try\",\n@@ -115,7 +115,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlockInIfCondition {\n                         let mut applicability = Applicability::MachineApplicable;\n                         span_lint_and_sugg(\n                             cx,\n-                            BLOCK_IN_IF_CONDITION,\n+                            BLOCKS_IN_IF_CONDITIONS,\n                             expr.span.with_hi(cond.span.hi()),\n                             COMPLEX_BLOCK_MESSAGE,\n                             \"try\",\n@@ -137,7 +137,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlockInIfCondition {\n                 let mut visitor = ExVisitor { found_block: None, cx };\n                 walk_expr(&mut visitor, cond);\n                 if let Some(block) = visitor.found_block {\n-                    span_lint(cx, BLOCK_IN_IF_CONDITION, block.span, COMPLEX_BLOCK_MESSAGE);\n+                    span_lint(cx, BLOCKS_IN_IF_CONDITIONS, block.span, COMPLEX_BLOCK_MESSAGE);\n                 }\n             }\n         }", "previous_filename": "clippy_lints/src/block_in_if_condition.rs"}, {"sha": "eba4ab5056b8ad0fcede789f31d71820dfed6dff", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ab87f87ba03518da23ca510249aa3f5908a42368/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab87f87ba03518da23ca510249aa3f5908a42368/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=ab87f87ba03518da23ca510249aa3f5908a42368", "patch": "@@ -180,7 +180,7 @@ mod attrs;\n mod await_holding_lock;\n mod bit_mask;\n mod blacklisted_name;\n-mod block_in_if_condition;\n+mod blocks_in_if_conditions;\n mod booleans;\n mod bytecount;\n mod cargo_common_metadata;\n@@ -507,7 +507,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &bit_mask::INEFFECTIVE_BIT_MASK,\n         &bit_mask::VERBOSE_BIT_MASK,\n         &blacklisted_name::BLACKLISTED_NAME,\n-        &block_in_if_condition::BLOCK_IN_IF_CONDITION,\n+        &blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS,\n         &booleans::LOGIC_BUG,\n         &booleans::NONMINIMAL_BOOL,\n         &bytecount::NAIVE_BYTECOUNT,\n@@ -615,7 +615,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &loops::EXPLICIT_INTO_ITER_LOOP,\n         &loops::EXPLICIT_ITER_LOOP,\n         &loops::FOR_KV_MAP,\n-        &loops::FOR_LOOP_OVER_FALLIBLE,\n+        &loops::FOR_LOOPS_OVER_FALLIBLES,\n         &loops::ITER_NEXT_LOOP,\n         &loops::MANUAL_MEMCPY,\n         &loops::MUT_RANGE_BOUND,\n@@ -894,7 +894,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box mut_reference::UnnecessaryMutPassed);\n     store.register_late_pass(|| box len_zero::LenZero);\n     store.register_late_pass(|| box attrs::Attributes);\n-    store.register_late_pass(|| box block_in_if_condition::BlockInIfCondition);\n+    store.register_late_pass(|| box blocks_in_if_conditions::BlocksInIfConditions);\n     store.register_late_pass(|| box unicode::Unicode);\n     store.register_late_pass(|| box strings::StringAdd);\n     store.register_late_pass(|| box implicit_return::ImplicitReturn);\n@@ -1199,7 +1199,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&bit_mask::INEFFECTIVE_BIT_MASK),\n         LintId::of(&bit_mask::VERBOSE_BIT_MASK),\n         LintId::of(&blacklisted_name::BLACKLISTED_NAME),\n-        LintId::of(&block_in_if_condition::BLOCK_IN_IF_CONDITION),\n+        LintId::of(&blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS),\n         LintId::of(&booleans::LOGIC_BUG),\n         LintId::of(&booleans::NONMINIMAL_BOOL),\n         LintId::of(&bytecount::NAIVE_BYTECOUNT),\n@@ -1264,7 +1264,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&loops::EMPTY_LOOP),\n         LintId::of(&loops::EXPLICIT_COUNTER_LOOP),\n         LintId::of(&loops::FOR_KV_MAP),\n-        LintId::of(&loops::FOR_LOOP_OVER_FALLIBLE),\n+        LintId::of(&loops::FOR_LOOPS_OVER_FALLIBLES),\n         LintId::of(&loops::ITER_NEXT_LOOP),\n         LintId::of(&loops::MANUAL_MEMCPY),\n         LintId::of(&loops::MUT_RANGE_BOUND),\n@@ -1444,7 +1444,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&attrs::UNKNOWN_CLIPPY_LINTS),\n         LintId::of(&bit_mask::VERBOSE_BIT_MASK),\n         LintId::of(&blacklisted_name::BLACKLISTED_NAME),\n-        LintId::of(&block_in_if_condition::BLOCK_IN_IF_CONDITION),\n+        LintId::of(&blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS),\n         LintId::of(&collapsible_if::COLLAPSIBLE_IF),\n         LintId::of(&comparison_chain::COMPARISON_CHAIN),\n         LintId::of(&doc::MISSING_SAFETY_DOC),\n@@ -1639,7 +1639,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&inline_fn_without_body::INLINE_FN_WITHOUT_BODY),\n         LintId::of(&let_underscore::LET_UNDERSCORE_LOCK),\n         LintId::of(&literal_representation::MISTYPED_LITERAL_SUFFIXES),\n-        LintId::of(&loops::FOR_LOOP_OVER_FALLIBLE),\n+        LintId::of(&loops::FOR_LOOPS_OVER_FALLIBLES),\n         LintId::of(&loops::ITER_NEXT_LOOP),\n         LintId::of(&loops::NEVER_LOOP),\n         LintId::of(&loops::WHILE_IMMUTABLE_CONDITION),\n@@ -1785,17 +1785,17 @@ pub fn register_renamed(ls: &mut rustc_lint::LintStore) {\n     ls.register_renamed(\"clippy::new_without_default_derive\", \"clippy::new_without_default\");\n     ls.register_renamed(\"clippy::cyclomatic_complexity\", \"clippy::cognitive_complexity\");\n     ls.register_renamed(\"clippy::const_static_lifetime\", \"clippy::redundant_static_lifetimes\");\n-    ls.register_renamed(\"clippy::block_in_if_condition_expr\", \"clippy::block_in_if_condition\");\n-    ls.register_renamed(\"clippy::block_in_if_condition_stmt\", \"clippy::block_in_if_condition\");\n+    ls.register_renamed(\"clippy::block_in_if_condition_expr\", \"clippy::blocks_in_if_conditions\");\n+    ls.register_renamed(\"clippy::block_in_if_condition_stmt\", \"clippy::blocks_in_if_conditions\");\n     ls.register_renamed(\"clippy::option_map_unwrap_or\", \"clippy::map_unwrap_or\");\n     ls.register_renamed(\"clippy::option_map_unwrap_or_else\", \"clippy::map_unwrap_or\");\n     ls.register_renamed(\"clippy::result_map_unwrap_or_else\", \"clippy::map_unwrap_or\");\n     ls.register_renamed(\"clippy::option_unwrap_used\", \"clippy::unwrap_used\");\n     ls.register_renamed(\"clippy::result_unwrap_used\", \"clippy::unwrap_used\");\n     ls.register_renamed(\"clippy::option_expect_used\", \"clippy::expect_used\");\n     ls.register_renamed(\"clippy::result_expect_used\", \"clippy::expect_used\");\n-    ls.register_renamed(\"clippy::for_loop_over_option\", \"clippy::for_loop_over_fallible\");\n-    ls.register_renamed(\"clippy::for_loop_over_result\", \"clippy::for_loop_over_fallible\");\n+    ls.register_renamed(\"clippy::for_loop_over_option\", \"clippy::for_loops_over_fallibles\");\n+    ls.register_renamed(\"clippy::for_loop_over_result\", \"clippy::for_loops_over_fallibles\");\n }\n \n // only exists to let the dogfood integration test works."}, {"sha": "9c9d1a84003e9c2561742a40f8cfa323266a8446", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab87f87ba03518da23ca510249aa3f5908a42368/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab87f87ba03518da23ca510249aa3f5908a42368/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=ab87f87ba03518da23ca510249aa3f5908a42368", "patch": "@@ -205,7 +205,7 @@ declare_clippy_lint! {\n     ///     // ..\n     /// }\n     /// ```\n-    pub FOR_LOOP_OVER_FALLIBLE,\n+    pub FOR_LOOPS_OVER_FALLIBLES,\n     correctness,\n     \"for-looping over an `Option` or a `Result`, which is more clearly expressed as an `if let`\"\n }\n@@ -426,7 +426,7 @@ declare_lint_pass!(Loops => [\n     EXPLICIT_ITER_LOOP,\n     EXPLICIT_INTO_ITER_LOOP,\n     ITER_NEXT_LOOP,\n-    FOR_LOOP_OVER_FALLIBLE,\n+    FOR_LOOPS_OVER_FALLIBLES,\n     WHILE_LET_LOOP,\n     NEEDLESS_COLLECT,\n     EXPLICIT_COUNTER_LOOP,\n@@ -1290,7 +1290,7 @@ fn check_arg_type(cx: &LateContext<'_, '_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n     if is_type_diagnostic_item(cx, ty, sym!(option_type)) {\n         span_lint_and_help(\n             cx,\n-            FOR_LOOP_OVER_FALLIBLE,\n+            FOR_LOOPS_OVER_FALLIBLES,\n             arg.span,\n             &format!(\n                 \"for loop over `{0}`, which is an `Option`. This is more readably written as an \\\n@@ -1307,7 +1307,7 @@ fn check_arg_type(cx: &LateContext<'_, '_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n     } else if is_type_diagnostic_item(cx, ty, sym!(result_type)) {\n         span_lint_and_help(\n             cx,\n-            FOR_LOOP_OVER_FALLIBLE,\n+            FOR_LOOPS_OVER_FALLIBLES,\n             arg.span,\n             &format!(\n                 \"for loop over `{0}`, which is a `Result`. This is more readably written as an \\"}, {"sha": "feada261a4c70a77172b7a97bdfdf8880681327d", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab87f87ba03518da23ca510249aa3f5908a42368/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab87f87ba03518da23ca510249aa3f5908a42368/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=ab87f87ba03518da23ca510249aa3f5908a42368", "patch": "@@ -74,11 +74,11 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         module: \"blacklisted_name\",\n     },\n     Lint {\n-        name: \"block_in_if_condition\",\n+        name: \"blocks_in_if_conditions\",\n         group: \"style\",\n         desc: \"useless or complex blocks that can be eliminated in conditions\",\n         deprecation: None,\n-        module: \"block_in_if_condition\",\n+        module: \"blocks_in_if_conditions\",\n     },\n     Lint {\n         name: \"bool_comparison\",\n@@ -676,7 +676,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         module: \"loops\",\n     },\n     Lint {\n-        name: \"for_loop_over_fallible\",\n+        name: \"for_loops_over_fallibles\",\n         group: \"correctness\",\n         desc: \"for-looping over an `Option` or a `Result`, which is more clearly expressed as an `if let`\",\n         deprecation: None,"}, {"sha": "9040552cefc42ac07b9e1f7aaeb3684fc84247ce", "filename": "tests/ui/blocks_in_if_conditions.fixed", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab87f87ba03518da23ca510249aa3f5908a42368/tests%2Fui%2Fblocks_in_if_conditions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ab87f87ba03518da23ca510249aa3f5908a42368/tests%2Fui%2Fblocks_in_if_conditions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblocks_in_if_conditions.fixed?ref=ab87f87ba03518da23ca510249aa3f5908a42368", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![warn(clippy::block_in_if_condition)]\n+#![warn(clippy::blocks_in_if_conditions)]\n #![allow(unused, clippy::let_and_return)]\n #![warn(clippy::nonminimal_bool)]\n ", "previous_filename": "tests/ui/block_in_if_condition.fixed"}, {"sha": "2fe409b22d31fc6ce8b5a4e354e7f6cd8883e5d1", "filename": "tests/ui/blocks_in_if_conditions.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab87f87ba03518da23ca510249aa3f5908a42368/tests%2Fui%2Fblocks_in_if_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab87f87ba03518da23ca510249aa3f5908a42368/tests%2Fui%2Fblocks_in_if_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblocks_in_if_conditions.rs?ref=ab87f87ba03518da23ca510249aa3f5908a42368", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![warn(clippy::block_in_if_condition)]\n+#![warn(clippy::blocks_in_if_conditions)]\n #![allow(unused, clippy::let_and_return)]\n #![warn(clippy::nonminimal_bool)]\n ", "previous_filename": "tests/ui/block_in_if_condition.rs"}, {"sha": "9bdddc8e15248bb3a6a53c37875c37bb7d9a4321", "filename": "tests/ui/blocks_in_if_conditions.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab87f87ba03518da23ca510249aa3f5908a42368/tests%2Fui%2Fblocks_in_if_conditions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab87f87ba03518da23ca510249aa3f5908a42368/tests%2Fui%2Fblocks_in_if_conditions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblocks_in_if_conditions.stderr?ref=ab87f87ba03518da23ca510249aa3f5908a42368", "patch": "@@ -1,13 +1,13 @@\n error: in an `if` condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a `let`\n-  --> $DIR/block_in_if_condition.rs:26:5\n+  --> $DIR/blocks_in_if_conditions.rs:26:5\n    |\n LL | /     if {\n LL | |         let x = 3;\n LL | |         x == 3\n LL | |     } {\n    | |_____^\n    |\n-   = note: `-D clippy::block-in-if-condition` implied by `-D warnings`\n+   = note: `-D clippy::blocks-in-if-conditions` implied by `-D warnings`\n help: try\n    |\n LL |     let res = {\n@@ -17,13 +17,13 @@ LL |     }; if res {\n    |\n \n error: omit braces around single expression condition\n-  --> $DIR/block_in_if_condition.rs:37:8\n+  --> $DIR/blocks_in_if_conditions.rs:37:8\n    |\n LL |     if { true } {\n    |        ^^^^^^^^ help: try: `true`\n \n error: this boolean expression can be simplified\n-  --> $DIR/block_in_if_condition.rs:46:8\n+  --> $DIR/blocks_in_if_conditions.rs:46:8\n    |\n LL |     if true && x == 3 {\n    |        ^^^^^^^^^^^^^^ help: try: `x == 3`", "previous_filename": "tests/ui/block_in_if_condition.stderr"}, {"sha": "acbabfa20d737495708db8f9cc1380a24e9349c5", "filename": "tests/ui/blocks_in_if_conditions_closure.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab87f87ba03518da23ca510249aa3f5908a42368/tests%2Fui%2Fblocks_in_if_conditions_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab87f87ba03518da23ca510249aa3f5908a42368/tests%2Fui%2Fblocks_in_if_conditions_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblocks_in_if_conditions_closure.rs?ref=ab87f87ba03518da23ca510249aa3f5908a42368", "patch": "@@ -1,4 +1,4 @@\n-#![warn(clippy::block_in_if_condition)]\n+#![warn(clippy::blocks_in_if_conditions)]\n #![allow(unused, clippy::let_and_return)]\n \n fn predicate<F: FnOnce(T) -> bool, T>(pfn: F, val: T) -> bool {", "previous_filename": "tests/ui/block_in_if_condition_closure.rs"}, {"sha": "941d604dd5f9118fcf8ea93d2a2ad0e7f1bce0a5", "filename": "tests/ui/blocks_in_if_conditions_closure.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab87f87ba03518da23ca510249aa3f5908a42368/tests%2Fui%2Fblocks_in_if_conditions_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab87f87ba03518da23ca510249aa3f5908a42368/tests%2Fui%2Fblocks_in_if_conditions_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblocks_in_if_conditions_closure.stderr?ref=ab87f87ba03518da23ca510249aa3f5908a42368", "patch": "@@ -1,5 +1,5 @@\n error: in an `if` condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a `let`\n-  --> $DIR/block_in_if_condition_closure.rs:18:17\n+  --> $DIR/blocks_in_if_conditions_closure.rs:18:17\n    |\n LL |               |x| {\n    |  _________________^\n@@ -8,10 +8,10 @@ LL | |                 x == target\n LL | |             },\n    | |_____________^\n    |\n-   = note: `-D clippy::block-in-if-condition` implied by `-D warnings`\n+   = note: `-D clippy::blocks-in-if-conditions` implied by `-D warnings`\n \n error: in an `if` condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a `let`\n-  --> $DIR/block_in_if_condition_closure.rs:27:13\n+  --> $DIR/blocks_in_if_conditions_closure.rs:27:13\n    |\n LL |           |x| {\n    |  _____________^", "previous_filename": "tests/ui/block_in_if_condition_closure.stderr"}, {"sha": "1b9dde87cd5a2ab05460badc2374fc5d947449cf", "filename": "tests/ui/for_loops_over_fallibles.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab87f87ba03518da23ca510249aa3f5908a42368/tests%2Fui%2Ffor_loops_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab87f87ba03518da23ca510249aa3f5908a42368/tests%2Fui%2Ffor_loops_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loops_over_fallibles.rs?ref=ab87f87ba03518da23ca510249aa3f5908a42368", "patch": "@@ -1,6 +1,6 @@\n-#![warn(clippy::for_loop_over_fallible)]\n+#![warn(clippy::for_loops_over_fallibles)]\n \n-fn for_loop_over_fallible() {\n+fn for_loops_over_fallibles() {\n     let option = Some(1);\n     let result = option.ok_or(\"x not found\");\n     let v = vec![0, 1, 2];", "previous_filename": "tests/ui/for_loop_over_fallible.rs"}, {"sha": "bef228d4b93afbcaaff12e6cab7537ca068af694", "filename": "tests/ui/for_loops_over_fallibles.stderr", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ab87f87ba03518da23ca510249aa3f5908a42368/tests%2Fui%2Ffor_loops_over_fallibles.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab87f87ba03518da23ca510249aa3f5908a42368/tests%2Fui%2Ffor_loops_over_fallibles.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loops_over_fallibles.stderr?ref=ab87f87ba03518da23ca510249aa3f5908a42368", "patch": "@@ -1,54 +1,54 @@\n error: for loop over `option`, which is an `Option`. This is more readably written as an `if let` statement.\n-  --> $DIR/for_loop_over_fallible.rs:9:14\n+  --> $DIR/for_loops_over_fallibles.rs:9:14\n    |\n LL |     for x in option {\n    |              ^^^^^^\n    |\n-   = note: `-D clippy::for-loop-over-fallible` implied by `-D warnings`\n+   = note: `-D clippy::for-loops-over-fallibles` implied by `-D warnings`\n    = help: consider replacing `for x in option` with `if let Some(x) = option`\n \n error: for loop over `result`, which is a `Result`. This is more readably written as an `if let` statement.\n-  --> $DIR/for_loop_over_fallible.rs:14:14\n+  --> $DIR/for_loops_over_fallibles.rs:14:14\n    |\n LL |     for x in result {\n    |              ^^^^^^\n    |\n    = help: consider replacing `for x in result` with `if let Ok(x) = result`\n \n error: for loop over `option.ok_or(\"x not found\")`, which is a `Result`. This is more readably written as an `if let` statement.\n-  --> $DIR/for_loop_over_fallible.rs:18:14\n+  --> $DIR/for_loops_over_fallibles.rs:18:14\n    |\n LL |     for x in option.ok_or(\"x not found\") {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider replacing `for x in option.ok_or(\"x not found\")` with `if let Ok(x) = option.ok_or(\"x not found\")`\n \n error: you are iterating over `Iterator::next()` which is an Option; this will compile but is probably not what you want\n-  --> $DIR/for_loop_over_fallible.rs:24:14\n+  --> $DIR/for_loops_over_fallibles.rs:24:14\n    |\n LL |     for x in v.iter().next() {\n    |              ^^^^^^^^^^^^^^^\n    |\n    = note: `#[deny(clippy::iter_next_loop)]` on by default\n \n error: for loop over `v.iter().next().and(Some(0))`, which is an `Option`. This is more readably written as an `if let` statement.\n-  --> $DIR/for_loop_over_fallible.rs:29:14\n+  --> $DIR/for_loops_over_fallibles.rs:29:14\n    |\n LL |     for x in v.iter().next().and(Some(0)) {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider replacing `for x in v.iter().next().and(Some(0))` with `if let Some(x) = v.iter().next().and(Some(0))`\n \n error: for loop over `v.iter().next().ok_or(\"x not found\")`, which is a `Result`. This is more readably written as an `if let` statement.\n-  --> $DIR/for_loop_over_fallible.rs:33:14\n+  --> $DIR/for_loops_over_fallibles.rs:33:14\n    |\n LL |     for x in v.iter().next().ok_or(\"x not found\") {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider replacing `for x in v.iter().next().ok_or(\"x not found\")` with `if let Ok(x) = v.iter().next().ok_or(\"x not found\")`\n \n error: this loop never actually loops\n-  --> $DIR/for_loop_over_fallible.rs:45:5\n+  --> $DIR/for_loops_over_fallibles.rs:45:5\n    |\n LL | /     while let Some(x) = option {\n LL | |         println!(\"{}\", x);\n@@ -59,7 +59,7 @@ LL | |     }\n    = note: `#[deny(clippy::never_loop)]` on by default\n \n error: this loop never actually loops\n-  --> $DIR/for_loop_over_fallible.rs:51:5\n+  --> $DIR/for_loops_over_fallibles.rs:51:5\n    |\n LL | /     while let Ok(x) = result {\n LL | |         println!(\"{}\", x);", "previous_filename": "tests/ui/for_loop_over_fallible.stderr"}]}