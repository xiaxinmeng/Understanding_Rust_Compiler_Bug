{"sha": "793da65a8eb060268056861d1a82761747aa52a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5M2RhNjVhOGViMDYwMjY4MDU2ODYxZDFhODI3NjE3NDdhYTUyYTI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-11T01:53:19Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-11T01:53:19Z"}, "message": "rt: Move rust_chan::send to rust_port::send", "tree": {"sha": "f785c38fafbd3b05f9e7077eeacee65f7ecbf81e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f785c38fafbd3b05f9e7077eeacee65f7ecbf81e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/793da65a8eb060268056861d1a82761747aa52a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/793da65a8eb060268056861d1a82761747aa52a2", "html_url": "https://github.com/rust-lang/rust/commit/793da65a8eb060268056861d1a82761747aa52a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/793da65a8eb060268056861d1a82761747aa52a2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "371574f64b4f51d05c9af951d3f5525142841cc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/371574f64b4f51d05c9af951d3f5525142841cc7", "html_url": "https://github.com/rust-lang/rust/commit/371574f64b4f51d05c9af951d3f5525142841cc7"}], "stats": {"total": 69, "additions": 33, "deletions": 36}, "files": [{"sha": "3b2040476d0dd61c61d407cb68c3562576742039", "filename": "src/rt/rust_aio.cpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/793da65a8eb060268056861d1a82761747aa52a2/src%2Frt%2Frust_aio.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/793da65a8eb060268056861d1a82761747aa52a2/src%2Frt%2Frust_aio.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_aio.cpp?ref=793da65a8eb060268056861d1a82761747aa52a2", "patch": "@@ -41,7 +41,7 @@ struct socket_data : public task_owned<socket_data> {\n   }\n \n   void send_result(void *data) {\n-    chan->send(&data);\n+    chan->port->send(&data);\n     chan->deref();\n     chan = NULL;\n   }\n@@ -138,7 +138,7 @@ static void read_progress(uv_stream_t *socket, ssize_t nread, uv_buf_t buf) {\n       v->fill = nread;\n       break;\n   }\n-  data->reader->send(v);\n+  data->reader->port->send(v);\n }\n \n static void new_connection(uv_stream_t *socket, int status) {\n@@ -156,7 +156,7 @@ static void new_connection(uv_stream_t *socket, int status) {\n     server->task->fail();\n     return;\n   }\n-  server->chan->send(&client);\n+  server->chan->port->send(&client);\n }\n \n extern \"C\" CDECL socket_data *aio_serve(const char *ip, int port,\n@@ -201,7 +201,7 @@ static void free_socket(uv_handle_t *handle) {\n     bool closed = true;\n     I(data->task->sched, data->chan != NULL);\n     data->task->kill();\n-    data->chan->send(&closed);\n+    data->chan->port->send(&closed);\n   }\n   delete data;\n }\n@@ -221,7 +221,7 @@ extern \"C\" CDECL void aio_close_server(socket_data *server,\n   // XXX: hax until rust_task::kill\n   // send null and the receiver knows to call back into native code to check\n   void* null_client = NULL;\n-  server->chan->send(&null_client);\n+  server->chan->port->send(&null_client);\n   server->chan->deref();\n   server->chan = chan->clone(iotask);\n   aio_close_socket(server);"}, {"sha": "4086e3708fd2a19aa2be7137647a4d32c861d35e", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/793da65a8eb060268056861d1a82761747aa52a2/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/793da65a8eb060268056861d1a82761747aa52a2/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=793da65a8eb060268056861d1a82761747aa52a2", "patch": "@@ -498,7 +498,7 @@ chan_id_send(type_desc *t, rust_task_id target_task_id,\n     if(target_task) {\n         rust_port *port = target_task->get_port_by_id(target_port_id);\n         if(port) {\n-            port->remote_chan->send(sptr);\n+            port->send(sptr);\n         }\n         target_task->deref();\n     }"}, {"sha": "9a41dacc3231a51ace0f2a6b671b76fb9de3ce66", "filename": "src/rt/rust_chan.cpp", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/793da65a8eb060268056861d1a82761747aa52a2/src%2Frt%2Frust_chan.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/793da65a8eb060268056861d1a82761747aa52a2/src%2Frt%2Frust_chan.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_chan.cpp?ref=793da65a8eb060268056861d1a82761747aa52a2", "patch": "@@ -36,32 +36,6 @@ bool rust_chan::is_associated() {\n     return port != NULL;\n }\n \n-/**\n- * Attempt to send data to the associated port.\n- */\n-void rust_chan::send(void *sptr) {\n-    if (!is_associated()) {\n-        W(kernel, is_associated(),\n-          \"rust_chan::transmit with no associated port.\");\n-        return;\n-    }\n-\n-    I(kernel, port != NULL);\n-    scoped_lock with(port->lock);\n-\n-    buffer.enqueue(sptr);\n-\n-    A(kernel, !buffer.is_empty(),\n-      \"rust_chan::transmit with nothing to send.\");\n-\n-    if (port->task->blocked_on(port)) {\n-        KLOG(kernel, comm, \"dequeued in rendezvous_ptr\");\n-        buffer.dequeue(port->task->rendezvous_ptr);\n-        port->task->rendezvous_ptr = 0;\n-        port->task->wakeup(port);\n-    }\n-}\n-\n rust_chan *rust_chan::clone(rust_task *target) {\n     return new (target->kernel, \"cloned chan\")\n         rust_chan(kernel, port, buffer.unit_sz);"}, {"sha": "4fb78e062c7a733016a542ce47d3e80a45d924b1", "filename": "src/rt/rust_chan.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/793da65a8eb060268056861d1a82761747aa52a2/src%2Frt%2Frust_chan.h", "raw_url": "https://github.com/rust-lang/rust/raw/793da65a8eb060268056861d1a82761747aa52a2/src%2Frt%2Frust_chan.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_chan.h?ref=793da65a8eb060268056861d1a82761747aa52a2", "patch": "@@ -18,8 +18,6 @@ class rust_chan : public kernel_owned<rust_chan>,\n \n     bool is_associated();\n \n-    void send(void *sptr);\n-\n     rust_chan *clone(rust_task *target);\n };\n "}, {"sha": "a68b44171103348f9078a9dee9f1603dbb6dd6bb", "filename": "src/rt/rust_port.cpp", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/793da65a8eb060268056861d1a82761747aa52a2/src%2Frt%2Frust_port.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/793da65a8eb060268056861d1a82761747aa52a2/src%2Frt%2Frust_port.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port.cpp?ref=793da65a8eb060268056861d1a82761747aa52a2", "patch": "@@ -31,6 +31,28 @@ rust_port::~rust_port() {\n     task->release_port(id);\n }\n \n+void rust_port::send(void *sptr) {\n+    if (!remote_chan->is_associated()) {\n+        W(kernel, remote_chan->is_associated(),\n+          \"rust_chan::transmit with no associated port.\");\n+        return;\n+    }\n+\n+    scoped_lock with(lock);\n+\n+    remote_chan->buffer.enqueue(sptr);\n+\n+    A(kernel, !remote_chan->buffer.is_empty(),\n+      \"rust_chan::transmit with nothing to send.\");\n+\n+    if (task->blocked_on(this)) {\n+        KLOG(kernel, comm, \"dequeued in rendezvous_ptr\");\n+        remote_chan->buffer.dequeue(task->rendezvous_ptr);\n+        task->rendezvous_ptr = 0;\n+        task->wakeup(this);\n+    }\n+}\n+\n bool rust_port::receive(void *dptr) {\n     if (remote_chan->buffer.is_empty() == false) {\n         remote_chan->buffer.dequeue(dptr);"}, {"sha": "551ad2e89daa20bc58fbca4520e8c068cac30b9a", "filename": "src/rt/rust_port.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/793da65a8eb060268056861d1a82761747aa52a2/src%2Frt%2Frust_port.h", "raw_url": "https://github.com/rust-lang/rust/raw/793da65a8eb060268056861d1a82761747aa52a2/src%2Frt%2Frust_port.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port.h?ref=793da65a8eb060268056861d1a82761747aa52a2", "patch": "@@ -17,6 +17,7 @@ class rust_port : public kernel_owned<rust_port>, public rust_cond {\n     rust_port(rust_task *task, size_t unit_sz);\n     ~rust_port();\n     void log_state();\n+    void send(void *sptr);\n     bool receive(void *dptr);\n };\n "}, {"sha": "854c2c744623899783313a286b783bddae22e04d", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/793da65a8eb060268056861d1a82761747aa52a2/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/793da65a8eb060268056861d1a82761747aa52a2/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=793da65a8eb060268056861d1a82761747aa52a2", "patch": "@@ -133,8 +133,10 @@ rust_task::~rust_task()\n             msg.id = user.id;\n             msg.result = failed ? tr_failure : tr_success;\n \n-            target->send(&msg);\n-            target->deref();\n+            if (target->is_associated()) {\n+                target->port->send(&msg);\n+                target->deref();\n+            }\n         }\n     }\n "}]}