{"sha": "12f171b052c07d60760cabbc109d15188ce285ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZjE3MWIwNTJjMDdkNjA3NjBjYWJiYzEwOWQxNTE4OGNlMjg1ZWM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-12-25T11:24:30Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-12-25T11:24:30Z"}, "message": "Rollup merge of #30485 - sfackler:panic-handler, r=alexcrichton\n\nr? @alexcrichton", "tree": {"sha": "8afb6543bf472286e76868fdf6c3078fc990aa16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8afb6543bf472286e76868fdf6c3078fc990aa16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12f171b052c07d60760cabbc109d15188ce285ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12f171b052c07d60760cabbc109d15188ce285ec", "html_url": "https://github.com/rust-lang/rust/commit/12f171b052c07d60760cabbc109d15188ce285ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12f171b052c07d60760cabbc109d15188ce285ec/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "711f11e8d607b3ecf297366fa704b5200709d12d", "url": "https://api.github.com/repos/rust-lang/rust/commits/711f11e8d607b3ecf297366fa704b5200709d12d", "html_url": "https://github.com/rust-lang/rust/commit/711f11e8d607b3ecf297366fa704b5200709d12d"}, {"sha": "f1148a540a16ba4ba2635403a9b014da9683851b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1148a540a16ba4ba2635403a9b014da9683851b", "html_url": "https://github.com/rust-lang/rust/commit/f1148a540a16ba4ba2635403a9b014da9683851b"}], "stats": {"total": 339, "additions": 331, "deletions": 8}, "files": [{"sha": "1550d55d177a27051f0bf89892a8fa8e0df221f0", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12f171b052c07d60760cabbc109d15188ce285ec/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12f171b052c07d60760cabbc109d15188ce285ec/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=12f171b052c07d60760cabbc109d15188ce285ec", "patch": "@@ -21,6 +21,8 @@ use sync::{Arc, Mutex, RwLock};\n use sys_common::unwind;\n use thread::Result;\n \n+pub use panicking::{take_handler, set_handler, PanicInfo, Location};\n+\n /// A marker trait which represents \"panic safe\" types in Rust.\n ///\n /// This trait is implemented by default for many types and behaves similarly in"}, {"sha": "3f9a1c30ef4936c6d4767fcc27c1d767aa91af0d", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 148, "deletions": 8, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/12f171b052c07d60760cabbc109d15188ce285ec/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12f171b052c07d60760cabbc109d15188ce285ec/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=12f171b052c07d60760cabbc109d15188ce285ec", "patch": "@@ -15,10 +15,12 @@ use any::Any;\n use cell::Cell;\n use cell::RefCell;\n use intrinsics;\n+use sync::StaticRwLock;\n use sys::stdio::Stderr;\n use sys_common::backtrace;\n use sys_common::thread_info;\n use sys_common::util;\n+use thread;\n \n thread_local! { pub static PANIC_COUNT: Cell<usize> = Cell::new(0) }\n \n@@ -28,11 +30,138 @@ thread_local! {\n     }\n }\n \n-fn log_panic(obj: &(Any+Send), file: &'static str, line: u32,\n-             log_backtrace: bool) {\n-    let msg = match obj.downcast_ref::<&'static str>() {\n+#[derive(Copy, Clone)]\n+enum Handler {\n+    Default,\n+    Custom(*mut (Fn(&PanicInfo) + 'static + Sync + Send)),\n+}\n+\n+static HANDLER_LOCK: StaticRwLock = StaticRwLock::new();\n+static mut HANDLER: Handler = Handler::Default;\n+\n+/// Registers a custom panic handler, replacing any that was previously\n+/// registered.\n+///\n+/// The panic handler is invoked when a thread panics, but before it begins\n+/// unwinding the stack. The default handler prints a message to standard error\n+/// and generates a backtrace if requested, but this behavior can be customized\n+/// with the `set_handler` and `take_handler` functions.\n+///\n+/// The handler is provided with a `PanicInfo` struct which contains information\n+/// about the origin of the panic, including the payload passed to `panic!` and\n+/// the source code location from which the panic originated.\n+///\n+/// The panic handler is a global resource.\n+///\n+/// # Panics\n+///\n+/// Panics if called from a panicking thread.\n+#[unstable(feature = \"panic_handler\", reason = \"awaiting feedback\", issue = \"30449\")]\n+pub fn set_handler<F>(handler: F) where F: Fn(&PanicInfo) + 'static + Sync + Send {\n+    if thread::panicking() {\n+        panic!(\"cannot modify the panic handler from a panicking thread\");\n+    }\n+\n+    let handler = Box::new(handler);\n+    unsafe {\n+        let lock = HANDLER_LOCK.write();\n+        let old_handler = HANDLER;\n+        HANDLER = Handler::Custom(Box::into_raw(handler));\n+        drop(lock);\n+\n+        if let Handler::Custom(ptr) = old_handler {\n+            Box::from_raw(ptr);\n+        }\n+    }\n+}\n+\n+/// Unregisters the current panic handler, returning it.\n+///\n+/// If no custom handler is registered, the default handler will be returned.\n+///\n+/// # Panics\n+///\n+/// Panics if called from a panicking thread.\n+#[unstable(feature = \"panic_handler\", reason = \"awaiting feedback\", issue = \"30449\")]\n+pub fn take_handler() -> Box<Fn(&PanicInfo) + 'static + Sync + Send> {\n+    if thread::panicking() {\n+        panic!(\"cannot modify the panic handler from a panicking thread\");\n+    }\n+\n+    unsafe {\n+        let lock = HANDLER_LOCK.write();\n+        let handler = HANDLER;\n+        HANDLER = Handler::Default;\n+        drop(lock);\n+\n+        match handler {\n+            Handler::Default => Box::new(default_handler),\n+            Handler::Custom(ptr) => {Box::from_raw(ptr)} // FIXME #30530\n+        }\n+    }\n+}\n+\n+/// A struct providing information about a panic.\n+#[unstable(feature = \"panic_handler\", reason = \"awaiting feedback\", issue = \"30449\")]\n+pub struct PanicInfo<'a> {\n+    payload: &'a (Any + Send),\n+    location: Location<'a>,\n+}\n+\n+impl<'a> PanicInfo<'a> {\n+    /// Returns the payload associated with the panic.\n+    ///\n+    /// This will commonly, but not always, be a `&'static str` or `String`.\n+    #[unstable(feature = \"panic_handler\", reason = \"awaiting feedback\", issue = \"30449\")]\n+    pub fn payload(&self) -> &(Any + Send) {\n+        self.payload\n+    }\n+\n+    /// Returns information about the location from which the panic originated,\n+    /// if available.\n+    ///\n+    /// This method will currently always return `Some`, but this may change\n+    /// in future versions.\n+    #[unstable(feature = \"panic_handler\", reason = \"awaiting feedback\", issue = \"30449\")]\n+    pub fn location(&self) -> Option<&Location> {\n+        Some(&self.location)\n+    }\n+}\n+\n+/// A struct containing information about the location of a panic.\n+#[unstable(feature = \"panic_handler\", reason = \"awaiting feedback\", issue = \"30449\")]\n+pub struct Location<'a> {\n+    file: &'a str,\n+    line: u32,\n+}\n+\n+impl<'a> Location<'a> {\n+    /// Returns the name of the source file from which the panic originated.\n+    #[unstable(feature = \"panic_handler\", reason = \"awaiting feedback\", issue = \"30449\")]\n+    pub fn file(&self) -> &str {\n+        self.file\n+    }\n+\n+    /// Returns the line number from which the panic originated.\n+    #[unstable(feature = \"panic_handler\", reason = \"awaiting feedback\", issue = \"30449\")]\n+    pub fn line(&self) -> u32 {\n+        self.line\n+    }\n+}\n+\n+fn default_handler(info: &PanicInfo) {\n+    let panics = PANIC_COUNT.with(|s| s.get());\n+\n+    // If this is a double panic, make sure that we print a backtrace\n+    // for this panic. Otherwise only print it if logging is enabled.\n+    let log_backtrace = panics >= 2 || backtrace::log_enabled();\n+\n+    let file = info.location.file;\n+    let line = info.location.line;\n+\n+    let msg = match info.payload.downcast_ref::<&'static str>() {\n         Some(s) => *s,\n-        None => match obj.downcast_ref::<String>() {\n+        None => match info.payload.downcast_ref::<String>() {\n             Some(s) => &s[..],\n             None => \"Box<Any>\",\n         }\n@@ -81,10 +210,21 @@ pub fn on_panic(obj: &(Any+Send), file: &'static str, line: u32) {\n         unsafe { intrinsics::abort() }\n     }\n \n-    // If this is a double panic, make sure that we print a backtrace\n-    // for this panic. Otherwise only print it if logging is enabled.\n-    let log_backtrace = panics >= 2 || backtrace::log_enabled();\n-    log_panic(obj, file, line, log_backtrace);\n+    let info = PanicInfo {\n+        payload: obj,\n+        location: Location {\n+            file: file,\n+            line: line,\n+        },\n+    };\n+\n+    unsafe {\n+        let _lock = HANDLER_LOCK.read();\n+        match HANDLER {\n+            Handler::Default => default_handler(&info),\n+            Handler::Custom(ptr) => (*ptr)(&info),\n+        }\n+    }\n \n     if panics >= 2 {\n         // If a thread panics while it's already unwinding then we"}, {"sha": "bfeb407dd25a439dbfb51497fb1fe2883de0cc4e", "filename": "src/test/run-fail/panic-set-handler.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/12f171b052c07d60760cabbc109d15188ce285ec/src%2Ftest%2Frun-fail%2Fpanic-set-handler.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12f171b052c07d60760cabbc109d15188ce285ec/src%2Ftest%2Frun-fail%2Fpanic-set-handler.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-set-handler.rs?ref=12f171b052c07d60760cabbc109d15188ce285ec", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern:greetings from the panic handler\n+\n+#![feature(std_panic, panic_handler)]\n+use std::panic;\n+use std::io::{self, Write};\n+\n+fn main() {\n+    panic::set_handler(|i| {\n+        write!(io::stderr(), \"greetings from the panic handler\");\n+    });\n+    panic!(\"foobar\");\n+}"}, {"sha": "6999aa715e791b7d2346581afe5cb9c2bab60b15", "filename": "src/test/run-fail/panic-set-unset-handler.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/12f171b052c07d60760cabbc109d15188ce285ec/src%2Ftest%2Frun-fail%2Fpanic-set-unset-handler.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12f171b052c07d60760cabbc109d15188ce285ec/src%2Ftest%2Frun-fail%2Fpanic-set-unset-handler.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-set-unset-handler.rs?ref=12f171b052c07d60760cabbc109d15188ce285ec", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern:thread '<main>' panicked at 'foobar'\n+\n+#![feature(std_panic, panic_handler)]\n+use std::panic;\n+use std::io::{self, Write};\n+\n+fn main() {\n+    panic::set_handler(|i| {\n+        write!(io::stderr(), \"greetings from the panic handler\");\n+    });\n+    panic::take_handler();\n+    panic!(\"foobar\");\n+}"}, {"sha": "fec1db24adf09cc50446bff45b74ef0eb0a2f6b7", "filename": "src/test/run-fail/panic-take-handler-nop.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/12f171b052c07d60760cabbc109d15188ce285ec/src%2Ftest%2Frun-fail%2Fpanic-take-handler-nop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12f171b052c07d60760cabbc109d15188ce285ec/src%2Ftest%2Frun-fail%2Fpanic-take-handler-nop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpanic-take-handler-nop.rs?ref=12f171b052c07d60760cabbc109d15188ce285ec", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern:thread '<main>' panicked at 'foobar'\n+\n+#![feature(std_panic, panic_handler)]\n+use std::panic;\n+\n+fn main() {\n+    panic::take_handler();\n+    panic!(\"foobar\");\n+}"}, {"sha": "1ed592d3d6b92622a05ab013ace8c24c476a29bb", "filename": "src/test/run-pass/panic-handler-chain.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/12f171b052c07d60760cabbc109d15188ce285ec/src%2Ftest%2Frun-pass%2Fpanic-handler-chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12f171b052c07d60760cabbc109d15188ce285ec/src%2Ftest%2Frun-pass%2Fpanic-handler-chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanic-handler-chain.rs?ref=12f171b052c07d60760cabbc109d15188ce285ec", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![feature(panic_handler, const_fn, std_panic)]\n+\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+use std::panic;\n+use std::thread;\n+\n+static A: AtomicUsize = AtomicUsize::new(0);\n+static B: AtomicUsize = AtomicUsize::new(0);\n+\n+fn main() {\n+    panic::set_handler(|_| { A.fetch_add(1, Ordering::SeqCst); });\n+    let handler = panic::take_handler();\n+    panic::set_handler(move |info| {\n+        B.fetch_add(1, Ordering::SeqCst);\n+        handler(info);\n+    });\n+\n+    let _ = thread::spawn(|| {\n+        panic!();\n+    }).join();\n+\n+    assert_eq!(1, A.load(Ordering::SeqCst));\n+    assert_eq!(1, B.load(Ordering::SeqCst));\n+}"}, {"sha": "783a44beaf36a0b256a3d4b8a130fe8c300db549", "filename": "src/test/run-pass/panic-handler-flail-wildly.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/12f171b052c07d60760cabbc109d15188ce285ec/src%2Ftest%2Frun-pass%2Fpanic-handler-flail-wildly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12f171b052c07d60760cabbc109d15188ce285ec/src%2Ftest%2Frun-pass%2Fpanic-handler-flail-wildly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanic-handler-flail-wildly.rs?ref=12f171b052c07d60760cabbc109d15188ce285ec", "patch": "@@ -0,0 +1,57 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![feature(panic_handler, std_panic)]\n+\n+use std::panic;\n+use std::thread;\n+\n+fn a() {\n+    panic::set_handler(|_| println!(\"hello yes this is a\"));\n+    panic::take_handler();\n+    panic::set_handler(|_| println!(\"hello yes this is a part 2\"));\n+    panic::take_handler();\n+}\n+\n+fn b() {\n+    panic::take_handler();\n+    panic::take_handler();\n+    panic::take_handler();\n+    panic::take_handler();\n+    panic::take_handler();\n+    panic!();\n+}\n+\n+fn c() {\n+    panic::set_handler(|_| ());\n+    panic::set_handler(|_| ());\n+    panic::set_handler(|_| ());\n+    panic::set_handler(|_| ());\n+    panic::set_handler(|_| ());\n+    panic::set_handler(|_| ());\n+    panic!();\n+}\n+\n+fn main() {\n+    for _ in 0..10 {\n+        let mut handles = vec![];\n+        for _ in 0..10 {\n+            handles.push(thread::spawn(a));\n+        }\n+        for _ in 0..10 {\n+            handles.push(thread::spawn(b));\n+        }\n+        for _ in 0..10 {\n+            handles.push(thread::spawn(c));\n+        }\n+        for handle in handles {\n+            let _ = handle.join();\n+        }\n+    }\n+}"}, {"sha": "edf65e8e2aa699f373116e7d20bf5ef095df782e", "filename": "src/test/run-pass/panic-handler-set-twice.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/12f171b052c07d60760cabbc109d15188ce285ec/src%2Ftest%2Frun-pass%2Fpanic-handler-set-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12f171b052c07d60760cabbc109d15188ce285ec/src%2Ftest%2Frun-pass%2Fpanic-handler-set-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanic-handler-set-twice.rs?ref=12f171b052c07d60760cabbc109d15188ce285ec", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![feature(panic_handler, const_fn, std_panic)]\n+\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+use std::panic;\n+use std::thread;\n+\n+static A: AtomicUsize = AtomicUsize::new(0);\n+\n+fn main() {\n+    panic::set_handler(|_| ());\n+    panic::set_handler(|info| { A.fetch_add(1, Ordering::SeqCst); });\n+\n+    let _ = thread::spawn(|| {\n+        panic!();\n+    }).join();\n+\n+    assert_eq!(1, A.load(Ordering::SeqCst));\n+}"}]}