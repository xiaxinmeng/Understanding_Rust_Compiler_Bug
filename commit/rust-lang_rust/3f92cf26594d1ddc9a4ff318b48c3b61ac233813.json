{"sha": "3f92cf26594d1ddc9a4ff318b48c3b61ac233813", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmOTJjZjI2NTk0ZDFkZGM5YTRmZjMxOGI0OGMzYjYxYWMyMzM4MTM=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-09-03T05:18:08Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-04T18:33:23Z"}, "message": "Demode libstd/net_ip.rs", "tree": {"sha": "73696d81f0770f9ad74c14294235173a0ea0803c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73696d81f0770f9ad74c14294235173a0ea0803c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f92cf26594d1ddc9a4ff318b48c3b61ac233813", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f92cf26594d1ddc9a4ff318b48c3b61ac233813", "html_url": "https://github.com/rust-lang/rust/commit/3f92cf26594d1ddc9a4ff318b48c3b61ac233813", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f92cf26594d1ddc9a4ff318b48c3b61ac233813/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d072bc09a7e2bd0cd2b9207720bd94ad93f5a10b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d072bc09a7e2bd0cd2b9207720bd94ad93f5a10b", "html_url": "https://github.com/rust-lang/rust/commit/d072bc09a7e2bd0cd2b9207720bd94ad93f5a10b"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "77333130cf5a553959c7a78478a3c883be2d3b29", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3f92cf26594d1ddc9a4ff318b48c3b61ac233813/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f92cf26594d1ddc9a4ff318b48c3b61ac233813/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=3f92cf26594d1ddc9a4ff318b48c3b61ac233813", "patch": "@@ -1,4 +1,6 @@\n //! Types/fns concerning Internet Protocol (IP), versions 4 & 6\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n \n use iotask = uv::iotask::IoTask;\n use interact = uv::iotask::interact;\n@@ -44,8 +46,8 @@ type ParseAddrErr = {\n  *\n  * * ip - a `std::net::ip::ip_addr`\n  */\n-fn format_addr(ip: IpAddr) -> ~str {\n-    match ip {\n+fn format_addr(ip: &IpAddr) -> ~str {\n+    match *ip {\n       Ipv4(addr) =>  unsafe {\n         let result = uv_ip4_name(&addr);\n         if result == ~\"\" {\n@@ -82,7 +84,7 @@ enum IpGetAddrErr {\n  * a vector of `ip_addr` results, in the case of success, or an error\n  * object in the case of failure\n  */\n-fn get_addr(++node: ~str, iotask: iotask)\n+fn get_addr(node: &str, iotask: iotask)\n         -> result::Result<~[IpAddr], IpGetAddrErr> {\n     do core::comm::listen |output_ch| {\n         do str::as_buf(node) |node_ptr, len| unsafe {\n@@ -131,7 +133,7 @@ mod v4 {\n      *\n      * * an `ip_addr` of the `ipv4` variant\n      */\n-    fn parse_addr(ip: ~str) -> IpAddr {\n+    fn parse_addr(ip: &str) -> IpAddr {\n         match try_parse_addr(ip) {\n           result::Ok(addr) => copy(addr),\n           result::Err(err_data) => fail err_data.err_msg\n@@ -151,7 +153,7 @@ mod v4 {\n             *((ptr::addr_of(self)) as *u32)\n         }\n     }\n-    fn parse_to_ipv4_rep(ip: ~str) -> result::Result<Ipv4Rep, ~str> {\n+    fn parse_to_ipv4_rep(ip: &str) -> result::Result<Ipv4Rep, ~str> {\n         let parts = vec::map(str::split_char(ip, '.'), |s| {\n             match uint::from_str(s) {\n               Some(n) if n <= 255u => n,\n@@ -169,7 +171,7 @@ mod v4 {\n                         c: parts[2] as u8, d: parts[3] as u8})\n         }\n     }\n-    fn try_parse_addr(ip: ~str) -> result::Result<IpAddr,ParseAddrErr> {\n+    fn try_parse_addr(ip: &str) -> result::Result<IpAddr,ParseAddrErr> {\n         unsafe {\n             let INADDR_NONE = ll::get_INADDR_NONE();\n             let ip_rep_result = parse_to_ipv4_rep(ip);\n@@ -181,7 +183,7 @@ mod v4 {\n             let input_is_inaddr_none =\n                 result::get(ip_rep_result).as_u32() == INADDR_NONE;\n \n-            let new_addr = uv_ip4_addr(ip, 22);\n+            let new_addr = uv_ip4_addr(str::from_slice(ip), 22);\n             let reformatted_name = uv_ip4_name(&new_addr);\n             log(debug, fmt!(\"try_parse_addr: input ip: %s reparsed ip: %s\",\n                             ip, reformatted_name));\n@@ -217,22 +219,22 @@ mod v6 {\n      *\n      * * an `ip_addr` of the `ipv6` variant\n      */\n-    fn parse_addr(ip: ~str) -> IpAddr {\n+    fn parse_addr(ip: &str) -> IpAddr {\n         match try_parse_addr(ip) {\n           result::Ok(addr) => copy(addr),\n           result::Err(err_data) => fail err_data.err_msg\n         }\n     }\n-    fn try_parse_addr(ip: ~str) -> result::Result<IpAddr,ParseAddrErr> {\n+    fn try_parse_addr(ip: &str) -> result::Result<IpAddr,ParseAddrErr> {\n         unsafe {\n             // need to figure out how to establish a parse failure..\n-            let new_addr = uv_ip6_addr(ip, 22);\n+            let new_addr = uv_ip6_addr(str::from_slice(ip), 22);\n             let reparsed_name = uv_ip6_name(&new_addr);\n             log(debug, fmt!(\"v6::try_parse_addr ip: '%s' reparsed '%s'\",\n                             ip, reparsed_name));\n             // '::' appears to be uv_ip6_name() returns for bogus\n             // parses..\n-            if  ip != ~\"::\" && reparsed_name == ~\"::\" {\n+            if  ip != &\"::\" && reparsed_name == ~\"::\" {\n                 result::Err({err_msg:fmt!(\"failed to parse '%s'\",\n                                            ip)})\n             }\n@@ -311,13 +313,13 @@ mod test {\n     #[test]\n     fn test_ip_ipv4_parse_and_format_ip() {\n         let localhost_str = ~\"127.0.0.1\";\n-        assert (format_addr(v4::parse_addr(localhost_str))\n+        assert (format_addr(&v4::parse_addr(localhost_str))\n                 == localhost_str)\n     }\n     #[test]\n     fn test_ip_ipv6_parse_and_format_ip() {\n         let localhost_str = ~\"::1\";\n-        let format_result = format_addr(v6::parse_addr(localhost_str));\n+        let format_result = format_addr(&v6::parse_addr(localhost_str));\n         log(debug, fmt!(\"results: expected: '%s' actual: '%s'\",\n             localhost_str, format_result));\n         assert format_result == localhost_str;\n@@ -367,7 +369,7 @@ mod test {\n               Ipv6(_) => ~\"IPv6\"\n             };\n             log(debug, fmt!(\"test_get_addr: result %s: '%s'\",\n-                            ipv_prefix, format_addr(r)));\n+                            ipv_prefix, format_addr(&r)));\n         }\n         // at least one result.. this is going to vary from system\n         // to system, based on stuff like the contents of /etc/hosts"}, {"sha": "496dd575f01bffca8fda772c610697f8902033fc", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f92cf26594d1ddc9a4ff318b48c3b61ac233813/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f92cf26594d1ddc9a4ff318b48c3b61ac233813/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=3f92cf26594d1ddc9a4ff318b48c3b61ac233813", "patch": "@@ -155,7 +155,7 @@ fn connect(-input_ip: ip::IpAddr, port: uint,\n             log(debug, ~\"dealing w/ ipv4 connection..\");\n             let connect_req_ptr =\n                 ptr::addr_of((*socket_data_ptr).connect_req);\n-            let addr_str = ip::format_addr(input_ip);\n+            let addr_str = ip::format_addr(&input_ip);\n             let connect_result = match input_ip {\n               ip::Ipv4(addr) => {\n                 // have to \"recreate\" the sockaddr_in/6\n@@ -610,7 +610,7 @@ fn listen_common(-host_ip: ip::IpAddr, port: uint, backlog: uint,\n                 uv::ll::set_data_for_uv_handle(\n                     server_stream_ptr,\n                     server_data_ptr);\n-                let addr_str = ip::format_addr(loc_ip);\n+                let addr_str = ip::format_addr(&loc_ip);\n                 let bind_result = match loc_ip {\n                   ip::Ipv4(addr) => {\n                     log(debug, fmt!(\"addr: %?\", addr));"}]}