{"sha": "938fe00f0246afe007850a362aa2050151772baa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzOGZlMDBmMDI0NmFmZTAwNzg1MGEzNjJhYTIwNTAxNTE3NzJiYWE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-10T22:07:59Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-10T22:09:46Z"}, "message": "fix some comments, and run_compiler return type", "tree": {"sha": "fc3092efb11b9c8a2251d7809f7d21531c146d11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc3092efb11b9c8a2251d7809f7d21531c146d11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/938fe00f0246afe007850a362aa2050151772baa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/938fe00f0246afe007850a362aa2050151772baa", "html_url": "https://github.com/rust-lang/rust/commit/938fe00f0246afe007850a362aa2050151772baa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/938fe00f0246afe007850a362aa2050151772baa/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c784796103173c503e44fcdb12cb79ef0aba820", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c784796103173c503e44fcdb12cb79ef0aba820", "html_url": "https://github.com/rust-lang/rust/commit/4c784796103173c503e44fcdb12cb79ef0aba820"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "02fbd6cdfacfa4d5987fe10cad9ac7eaf6423f6c", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/938fe00f0246afe007850a362aa2050151772baa/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/938fe00f0246afe007850a362aa2050151772baa/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=938fe00f0246afe007850a362aa2050151772baa", "patch": "@@ -155,8 +155,8 @@ Try deleting `~/.cache/miri`.\n \n This means the sysroot you are using was not compiled with Miri in mind.  This\n should never happen when you use `cargo miri` because that takes care of setting\n-up the sysroot.  If you are using `miri` (the Miri driver) directly, see\n-[CONTRIBUTING.md](CONTRIBUTING.md) for how to use `./miri`.\n+up the sysroot.  If you are using `miri` (the Miri driver) directly, see the\n+[contributors' guide](CONTRIBUTING.md) for how to use `./miri` to best do that.\n \n \n ## Miri `-Z` flags and environment variables"}, {"sha": "b2e5238489f2f0d9587d636d43b055f0c5ba2d92", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/938fe00f0246afe007850a362aa2050151772baa/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/938fe00f0246afe007850a362aa2050151772baa/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=938fe00f0246afe007850a362aa2050151772baa", "patch": "@@ -479,10 +479,6 @@ fn inside_cargo_rustc() {\n     fn is_runnable_crate() -> bool {\n         let is_bin = get_arg_flag_value(\"--crate-type\").as_deref() == Some(\"bin\");\n         let is_test = has_arg_flag(\"--test\");\n-\n-        // The final runnable (under Miri) crate will either be a binary crate\n-        // or a test crate. We make sure to exclude build scripts here, since\n-        // they are also build with \"--crate-type bin\"\n         is_bin || is_test\n     }\n \n@@ -494,7 +490,8 @@ fn inside_cargo_rustc() {\n     cmd.args(std::env::args().skip(2)); // skip `cargo-miri rustc`\n \n     // We make sure to only specify our custom Xargo sysroot for target crates - that is,\n-    // crates which are ultimately going to get interpreted by Miri.\n+    // crates which are needed for interpretation by Miri. proc-macros and build scripts\n+    // should use the default sysroot.\n     if target_crate {\n         let sysroot =\n             env::var_os(\"MIRI_SYSROOT\").expect(\"The wrapper should have set MIRI_SYSROOT\");\n@@ -506,6 +503,7 @@ fn inside_cargo_rustc() {\n     // otherwise we want Miri to behave like rustc and build the crate as usual.\n     if target_crate && is_runnable_crate() {\n         // This is the binary or test crate that we want to interpret under Miri.\n+        // (Testing `target_crate` is needed to exclude build scripts.)\n         // We deserialize the arguments that are meant for Miri from the special environment\n         // variable \"MIRI_ARGS\", and feed them to the 'miri' binary.\n         //"}, {"sha": "96de81b62430748193c05d0e8fa772b68a39bfbb", "filename": "src/bin/miri.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/938fe00f0246afe007850a362aa2050151772baa/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/938fe00f0246afe007850a362aa2050151772baa/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=938fe00f0246afe007850a362aa2050151772baa", "patch": "@@ -68,7 +68,7 @@ fn init_early_loggers() {\n fn init_late_loggers(tcx: TyCtxt<'_>) {\n     // We initialize loggers right before we start evaluation. We overwrite the `RUSTC_LOG`\n     // env var if it is not set, control it based on `MIRI_LOG`.\n-    // (FIXE: use `var_os`, but then we need to manually concatenate instead of `format!`.)\n+    // (FIXME: use `var_os`, but then we need to manually concatenate instead of `format!`.)\n     if let Ok(var) = env::var(\"MIRI_LOG\") {\n         if env::var_os(\"RUSTC_LOG\").is_none() {\n             // We try to be a bit clever here: if `MIRI_LOG` is just a single level\n@@ -123,7 +123,7 @@ fn compile_time_sysroot() -> Option<String> {\n }\n \n /// Execute a compiler with the given CLI arguments and callbacks.\n-fn run_compiler(mut args: Vec<String>, callbacks: &mut (dyn rustc_driver::Callbacks + Send)) {\n+fn run_compiler(mut args: Vec<String>, callbacks: &mut (dyn rustc_driver::Callbacks + Send)) -> ! {\n     // Make sure we use the right default sysroot. The default sysroot is wrong,\n     // because `get_or_default_sysroot` in `librustc_session` bases that on `current_exe`.\n     //\n@@ -152,7 +152,7 @@ fn run_compiler(mut args: Vec<String>, callbacks: &mut (dyn rustc_driver::Callba\n         Ok(()) => rustc_driver::EXIT_SUCCESS,\n         Err(_) => rustc_driver::EXIT_FAILURE,\n     };\n-    std::process::exit(exit_code);\n+    std::process::exit(exit_code)\n }\n \n fn main() {\n@@ -163,7 +163,7 @@ fn main() {\n         rustc_driver::init_rustc_env_logger();\n         // We cannot use `rustc_driver::main` as we need to adjust the CLI arguments.\n         let mut callbacks = rustc_driver::TimePassesCallbacks::default();\n-        return run_compiler(env::args().collect(), &mut callbacks);\n+        run_compiler(env::args().collect(), &mut callbacks)\n     }\n \n     // Init loggers the Miri way.\n@@ -285,5 +285,5 @@ fn main() {\n         tracked_pointer_tag,\n         tracked_alloc_id,\n     };\n-    return run_compiler(rustc_args, &mut MiriCompilerCalls { miri_config });\n+    run_compiler(rustc_args, &mut MiriCompilerCalls { miri_config })\n }"}]}