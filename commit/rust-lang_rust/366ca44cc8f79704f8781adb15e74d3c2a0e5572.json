{"sha": "366ca44cc8f79704f8781adb15e74d3c2a0e5572", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2NmNhNDRjYzhmNzk3MDRmODc4MWFkYjE1ZTc0ZDNjMmEwZTU1NzI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-27T15:45:24Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-27T15:45:24Z"}, "message": "std: silence some test warnings.", "tree": {"sha": "d6a616077f56aa66c7b98142db0584f104c9ea08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6a616077f56aa66c7b98142db0584f104c9ea08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/366ca44cc8f79704f8781adb15e74d3c2a0e5572", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/366ca44cc8f79704f8781adb15e74d3c2a0e5572", "html_url": "https://github.com/rust-lang/rust/commit/366ca44cc8f79704f8781adb15e74d3c2a0e5572", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/366ca44cc8f79704f8781adb15e74d3c2a0e5572/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8087cae442ba3ca5070c7f3865e798f3786d28c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8087cae442ba3ca5070c7f3865e798f3786d28c", "html_url": "https://github.com/rust-lang/rust/commit/d8087cae442ba3ca5070c7f3865e798f3786d28c"}], "stats": {"total": 49, "additions": 22, "deletions": 27}, "files": [{"sha": "7de02a9f815bf87ffbc1d1114c2d81d971800d15", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/366ca44cc8f79704f8781adb15e74d3c2a0e5572/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366ca44cc8f79704f8781adb15e74d3c2a0e5572/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=366ca44cc8f79704f8781adb15e74d3c2a0e5572", "patch": "@@ -980,7 +980,6 @@ mod tests {\n     use super::*;\n     use prelude::*;\n \n-    use iter;\n     use uint;\n \n     #[test]"}, {"sha": "33b4e3f1963a99f1d6c71d00f5d7d475d72734f5", "filename": "src/libstd/local_data.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/366ca44cc8f79704f8781adb15e74d3c2a0e5572/src%2Flibstd%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366ca44cc8f79704f8781adb15e74d3c2a0e5572/src%2Flibstd%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flocal_data.rs?ref=366ca44cc8f79704f8781adb15e74d3c2a0e5572", "patch": "@@ -92,14 +92,12 @@ fn test_tls_multitask() {\n         fn my_key(_x: @~str) { }\n         local_data_set(my_key, @~\"parent data\");\n         do task::spawn {\n-            unsafe {\n-                // TLS shouldn't carry over.\n-                assert!(local_data_get(my_key).is_none());\n-                local_data_set(my_key, @~\"child data\");\n-                assert!(*(local_data_get(my_key).get()) ==\n+            // TLS shouldn't carry over.\n+            assert!(local_data_get(my_key).is_none());\n+            local_data_set(my_key, @~\"child data\");\n+            assert!(*(local_data_get(my_key).get()) ==\n                     ~\"child data\");\n-                // should be cleaned up for us\n-            }\n+            // should be cleaned up for us\n         }\n         // Must work multiple times\n         assert!(*(local_data_get(my_key).get()) == ~\"parent data\");\n@@ -206,12 +204,11 @@ fn test_tls_cleanup_on_failure() {\n         local_data_set(str_key, @~\"parent data\");\n         local_data_set(box_key, @@());\n         do task::spawn {\n-            unsafe { // spawn_linked\n-                local_data_set(str_key, @~\"string data\");\n-                local_data_set(box_key, @@());\n-                local_data_set(int_key, @42);\n-                fail!();\n-            }\n+            // spawn_linked\n+            local_data_set(str_key, @~\"string data\");\n+            local_data_set(box_key, @@());\n+            local_data_set(int_key, @42);\n+            fail!();\n         }\n         // Not quite nondeterministic.\n         local_data_set(int_key, @31337);"}, {"sha": "14465eb7dfd3afade41774d752c0c5e18ee99955", "filename": "src/libstd/rt/uv/timer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366ca44cc8f79704f8781adb15e74d3c2a0e5572/src%2Flibstd%2Frt%2Fuv%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366ca44cc8f79704f8781adb15e74d3c2a0e5572/src%2Flibstd%2Frt%2Fuv%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Ftimer.rs?ref=366ca44cc8f79704f8781adb15e74d3c2a0e5572", "patch": "@@ -160,14 +160,14 @@ mod test {\n                         let mut timer2 = TimerWatcher::new(&mut loop_);\n                         do timer2.start(10, 0) |timer2, _| {\n \n-                            unsafe { *count_ptr += 1; }\n+                            *count_ptr += 1;\n \n                             timer2.close(||());\n \n                             // Restart the original timer\n                             let mut timer = timer;\n                             do timer.start(1, 0) |timer, _| {\n-                                unsafe { *count_ptr += 1; }\n+                                *count_ptr += 1;\n                                 timer.close(||());\n                             }\n                         }"}, {"sha": "b4292a30541da497cf8a29f34800ac7d52b0f59e", "filename": "src/libstd/str.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/366ca44cc8f79704f8781adb15e74d3c2a0e5572/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366ca44cc8f79704f8781adb15e74d3c2a0e5572/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=366ca44cc8f79704f8781adb15e74d3c2a0e5572", "patch": "@@ -2249,7 +2249,7 @@ mod tests {\n         assert!(\"\" <= \"\");\n         assert!(\"\" <= \"foo\");\n         assert!(\"foo\" <= \"foo\");\n-        assert!(\"foo\" != ~\"bar\");\n+        assert!(\"foo\" != \"bar\");\n     }\n \n     #[test]\n@@ -3156,6 +3156,7 @@ mod tests {\n \n     #[test]\n     fn test_add() {\n+        #[allow(unnecessary_allocation)];\n         macro_rules! t (\n             ($s1:expr, $s2:expr, $e:expr) => {\n                 assert_eq!($s1 + $s2, $e);"}, {"sha": "b558b9d53a3ccb027c988842e62d4f1b2537fb6c", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/366ca44cc8f79704f8781adb15e74d3c2a0e5572/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366ca44cc8f79704f8781adb15e74d3c2a0e5572/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=366ca44cc8f79704f8781adb15e74d3c2a0e5572", "patch": "@@ -934,17 +934,15 @@ fn test_spawn_sched_blocking() {\n             let lock = testrt::rust_dbg_lock_create();\n \n             do spawn_sched(SingleThreaded) {\n-                unsafe {\n-                    testrt::rust_dbg_lock_lock(lock);\n+                testrt::rust_dbg_lock_lock(lock);\n \n-                    start_ch.send(());\n+                start_ch.send(());\n \n-                    // Block the scheduler thread\n-                    testrt::rust_dbg_lock_wait(lock);\n-                    testrt::rust_dbg_lock_unlock(lock);\n+                // Block the scheduler thread\n+                testrt::rust_dbg_lock_wait(lock);\n+                testrt::rust_dbg_lock_unlock(lock);\n \n-                    fin_ch.send(());\n-                }\n+                fin_ch.send(());\n             };\n \n             // Wait until the other task has its lock"}, {"sha": "8cbd9309cc6b1b351a9dd8dffcf66c03be05607d", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366ca44cc8f79704f8781adb15e74d3c2a0e5572/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366ca44cc8f79704f8781adb15e74d3c2a0e5572/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=366ca44cc8f79704f8781adb15e74d3c2a0e5572", "patch": "@@ -3861,11 +3861,11 @@ mod tests {\n     fn test_vec_zero() {\n         use num::Zero;\n         macro_rules! t (\n-            ($ty:ty) => {\n+            ($ty:ty) => {{\n                 let v: $ty = Zero::zero();\n                 assert!(v.is_empty());\n                 assert!(v.is_zero());\n-            }\n+            }}\n         );\n \n         t!(&[int]);"}]}