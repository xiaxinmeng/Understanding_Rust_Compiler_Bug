{"sha": "89b2e0c9d5a4cf87769d2bd51fe6753bbdf6448f", "node_id": "C_kwDOAAsO6NoAKDg5YjJlMGM5ZDVhNGNmODc3NjlkMmJkNTFmZTY3NTNiYmRmNjQ0OGY", "commit": {"author": {"name": "woppopo", "email": "woppopo@protonmail.com", "date": "2021-11-24T04:05:26Z"}, "committer": {"name": "woppopo", "email": "woppopo@protonmail.com", "date": "2021-11-24T04:05:26Z"}, "message": "Make `intrinsics::write_bytes` const", "tree": {"sha": "d2a2e99d98330c140a742dbd430526b6f4ef40bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2a2e99d98330c140a742dbd430526b6f4ef40bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89b2e0c9d5a4cf87769d2bd51fe6753bbdf6448f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89b2e0c9d5a4cf87769d2bd51fe6753bbdf6448f", "html_url": "https://github.com/rust-lang/rust/commit/89b2e0c9d5a4cf87769d2bd51fe6753bbdf6448f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89b2e0c9d5a4cf87769d2bd51fe6753bbdf6448f/comments", "author": {"login": "lilasta", "id": 77098789, "node_id": "MDQ6VXNlcjc3MDk4Nzg5", "avatar_url": "https://avatars.githubusercontent.com/u/77098789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilasta", "html_url": "https://github.com/lilasta", "followers_url": "https://api.github.com/users/lilasta/followers", "following_url": "https://api.github.com/users/lilasta/following{/other_user}", "gists_url": "https://api.github.com/users/lilasta/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilasta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilasta/subscriptions", "organizations_url": "https://api.github.com/users/lilasta/orgs", "repos_url": "https://api.github.com/users/lilasta/repos", "events_url": "https://api.github.com/users/lilasta/events{/privacy}", "received_events_url": "https://api.github.com/users/lilasta/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilasta", "id": 77098789, "node_id": "MDQ6VXNlcjc3MDk4Nzg5", "avatar_url": "https://avatars.githubusercontent.com/u/77098789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilasta", "html_url": "https://github.com/lilasta", "followers_url": "https://api.github.com/users/lilasta/followers", "following_url": "https://api.github.com/users/lilasta/following{/other_user}", "gists_url": "https://api.github.com/users/lilasta/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilasta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilasta/subscriptions", "organizations_url": "https://api.github.com/users/lilasta/orgs", "repos_url": "https://api.github.com/users/lilasta/repos", "events_url": "https://api.github.com/users/lilasta/events{/privacy}", "received_events_url": "https://api.github.com/users/lilasta/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d0c79d26995a973c6f33c32ffb0c827d78bb213", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d0c79d26995a973c6f33c32ffb0c827d78bb213", "html_url": "https://github.com/rust-lang/rust/commit/8d0c79d26995a973c6f33c32ffb0c827d78bb213"}], "stats": {"total": 74, "additions": 72, "deletions": 2}, "files": [{"sha": "27a75a470bbbb4426a343bfa04543c94555859d2", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/89b2e0c9d5a4cf87769d2bd51fe6753bbdf6448f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b2e0c9d5a4cf87769d2bd51fe6753bbdf6448f/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=89b2e0c9d5a4cf87769d2bd51fe6753bbdf6448f", "patch": "@@ -322,6 +322,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             sym::copy => {\n                 self.copy_intrinsic(&args[0], &args[1], &args[2], /*nonoverlapping*/ false)?;\n             }\n+            sym::write_bytes => {\n+                self.write_bytes_intrinsic(&args[0], &args[1], &args[2])?;\n+            }\n             sym::offset => {\n                 let ptr = self.read_pointer(&args[0])?;\n                 let offset_count = self.read_scalar(&args[1])?.to_machine_isize(self)?;\n@@ -543,6 +546,27 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         self.memory.copy(src, align, dst, align, size, nonoverlapping)\n     }\n \n+    pub(crate) fn write_bytes_intrinsic(\n+        &mut self,\n+        dst: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n+        byte: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n+        count: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n+    ) -> InterpResult<'tcx> {\n+        let layout = self.layout_of(dst.layout.ty.builtin_deref(true).unwrap().ty)?;\n+\n+        let dst = self.read_pointer(&dst)?;\n+        let byte = self.read_scalar(&byte)?.to_u8()?;\n+        let count = self.read_scalar(&count)?.to_machine_usize(self)?;\n+\n+        let len = layout\n+            .size\n+            .checked_mul(count, self)\n+            .ok_or_else(|| err_ub_format!(\"overflow computing total size of `write_bytes`\"))?;\n+\n+        let bytes = std::iter::repeat(byte).take(len.bytes_usize());\n+        self.memory.write_bytes(dst, bytes)\n+    }\n+\n     pub(crate) fn raw_eq_intrinsic(\n         &mut self,\n         lhs: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,"}, {"sha": "0b83cbc1849e4863be2bce776cb0a210e8449d6b", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/89b2e0c9d5a4cf87769d2bd51fe6753bbdf6448f/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b2e0c9d5a4cf87769d2bd51fe6753bbdf6448f/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=89b2e0c9d5a4cf87769d2bd51fe6753bbdf6448f", "patch": "@@ -2242,13 +2242,29 @@ pub const unsafe fn copy<T>(src: *const T, dst: *mut T, count: usize) {\n /// assert_eq!(*v, 42);\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"86302\")]\n #[inline]\n-pub unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {\n+pub const unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {\n     extern \"rust-intrinsic\" {\n+        #[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"86302\")]\n         fn write_bytes<T>(dst: *mut T, val: u8, count: usize);\n     }\n \n-    debug_assert!(is_aligned_and_not_null(dst), \"attempt to write to unaligned or null pointer\");\n+    #[cfg(debug_assertions)]\n+    fn runtime_check<T>(ptr: *mut T) {\n+        debug_assert!(\n+            is_aligned_and_not_null(ptr),\n+            \"attempt to write to unaligned or null pointer\"\n+        );\n+    }\n+    #[cfg(debug_assertions)]\n+    const fn compiletime_check<T>(_ptr: *mut T) {}\n+    #[cfg(debug_assertions)]\n+    // SAFETY: runtime debug-assertions are a best-effort basis; it's fine to\n+    // not do them during compile time\n+    unsafe {\n+        const_eval_select((dst,), compiletime_check, runtime_check);\n+    }\n \n     // SAFETY: the safety contract for `write_bytes` must be upheld by the caller.\n     unsafe { write_bytes(dst, val, count) }"}, {"sha": "84cef53b3584b091da23e53c58688c48fad3d201", "filename": "library/core/tests/intrinsics.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/89b2e0c9d5a4cf87769d2bd51fe6753bbdf6448f/library%2Fcore%2Ftests%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b2e0c9d5a4cf87769d2bd51fe6753bbdf6448f/library%2Fcore%2Ftests%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fintrinsics.rs?ref=89b2e0c9d5a4cf87769d2bd51fe6753bbdf6448f", "patch": "@@ -35,3 +35,33 @@ fn test_assume_can_be_in_const_contexts() {\n     let rs = unsafe { foo(42, 97) };\n     assert_eq!(rs, 0);\n }\n+\n+#[test]\n+#[cfg(not(bootstrap))]\n+const fn test_write_bytes_in_const_contexts() {\n+    use core::intrinsics::write_bytes;\n+\n+    const TEST: [u32; 3] = {\n+        let mut arr = [1u32, 2, 3];\n+        unsafe {\n+            write_bytes(arr.as_mut_ptr(), 0, 2);\n+        }\n+        arr\n+    };\n+\n+    assert!(TEST[0] == 0);\n+    assert!(TEST[1] == 0);\n+    assert!(TEST[2] == 3);\n+\n+    const TEST2: [u32; 3] = {\n+        let mut arr = [1u32, 2, 3];\n+        unsafe {\n+            write_bytes(arr.as_mut_ptr(), 1, 2);\n+        }\n+        arr\n+    };\n+\n+    assert!(TEST2[0] == 16843009);\n+    assert!(TEST2[1] == 16843009);\n+    assert!(TEST2[2] == 3);\n+}"}]}