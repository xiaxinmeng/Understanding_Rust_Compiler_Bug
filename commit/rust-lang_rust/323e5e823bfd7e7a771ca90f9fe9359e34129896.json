{"sha": "323e5e823bfd7e7a771ca90f9fe9359e34129896", "node_id": "C_kwDOAAsO6NoAKDMyM2U1ZTgyM2JmZDdlN2E3NzFjYTkwZjlmZTkzNTllMzQxMjk4OTY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-02-16T06:10:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-16T06:10:20Z"}, "message": "Rollup merge of #108084 - ink-feather-org:const_range, r=dtolnay\n\nConstify `RangeBounds`, `RangeX::contains` and `RangeX::is_empty` (where applicable).\n\ncc `@fee1-dead`\n\n`@rustbot` label +T-libs-api -T-libs\n\nTracking issue: #108082", "tree": {"sha": "64065c41d4673f18cb2e404e178792d9b44a0c3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64065c41d4673f18cb2e404e178792d9b44a0c3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/323e5e823bfd7e7a771ca90f9fe9359e34129896", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj7cjMCRBK7hj4Ov3rIwAA3PQIAISR2/Z9yVmTypV29G5oWGyp\nHbDOJERq/iR0cs+bo0SjuPIg8mnOVK0UIPm/3fs6QMx7BnqkQmX2EXdgu0EXD87H\n1UAWsYTWqOIfiERGXMNYemCtQTeCdMeD0XRokLXnEIhSPwL1i2z9QOOyg0nqO1xm\n7YvyNQ2DQLkHUHU7LWPCMBkuTBSAazoGulNZgEu0FBEZW2+fiTMUJSokIZtixX0i\ndeYOxgm2zRB3E2xAlrkQjqD0OtTEgkLbbimrGlp5cHKZmEZqzsRZ7XGjkyPP0auu\n+fCMe8TTnAuKhpLQKNJ4Qi5fxUcRS7YmzEowEwpb5XlXt8khBh1qzK7tWvi7W7g=\n=owq0\n-----END PGP SIGNATURE-----\n", "payload": "tree 64065c41d4673f18cb2e404e178792d9b44a0c3b\nparent 5fac20f87c2551addcb1e890e806257978f21503\nparent a14a4fc3d03482a2a42768bdee35201e37bab16c\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1676527820 +0530\ncommitter GitHub <noreply@github.com> 1676527820 +0530\n\nRollup merge of #108084 - ink-feather-org:const_range, r=dtolnay\n\nConstify `RangeBounds`, `RangeX::contains` and `RangeX::is_empty` (where applicable).\n\ncc `@fee1-dead`\n\n`@rustbot` label +T-libs-api -T-libs\n\nTracking issue: #108082\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/323e5e823bfd7e7a771ca90f9fe9359e34129896", "html_url": "https://github.com/rust-lang/rust/commit/323e5e823bfd7e7a771ca90f9fe9359e34129896", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/323e5e823bfd7e7a771ca90f9fe9359e34129896/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fac20f87c2551addcb1e890e806257978f21503", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fac20f87c2551addcb1e890e806257978f21503", "html_url": "https://github.com/rust-lang/rust/commit/5fac20f87c2551addcb1e890e806257978f21503"}, {"sha": "a14a4fc3d03482a2a42768bdee35201e37bab16c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a14a4fc3d03482a2a42768bdee35201e37bab16c", "html_url": "https://github.com/rust-lang/rust/commit/a14a4fc3d03482a2a42768bdee35201e37bab16c"}], "stats": {"total": 103, "additions": 63, "deletions": 40}, "files": [{"sha": "b4d58376aea5d363fa8b708b2ebbf470eeb785d0", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/323e5e823bfd7e7a771ca90f9fe9359e34129896/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/323e5e823bfd7e7a771ca90f9fe9359e34129896/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=323e5e823bfd7e7a771ca90f9fe9359e34129896", "patch": "@@ -1491,9 +1491,10 @@ mod impls {\n         }\n     }\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl<A: ?Sized, B: ?Sized> PartialOrd<&B> for &A\n+    #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n+    impl<A: ?Sized, B: ?Sized> const PartialOrd<&B> for &A\n     where\n-        A: PartialOrd<B>,\n+        A: ~const PartialOrd<B>,\n     {\n         #[inline]\n         fn partial_cmp(&self, other: &&B) -> Option<Ordering> {"}, {"sha": "b8ab2656473df7007ffc2b13993180c280218020", "filename": "library/core/src/ops/range.rs", "status": "modified", "additions": 60, "deletions": 38, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/323e5e823bfd7e7a771ca90f9fe9359e34129896/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/323e5e823bfd7e7a771ca90f9fe9359e34129896/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Frange.rs?ref=323e5e823bfd7e7a771ca90f9fe9359e34129896", "patch": "@@ -96,7 +96,7 @@ impl<Idx: fmt::Debug> fmt::Debug for Range<Idx> {\n     }\n }\n \n-impl<Idx: PartialOrd<Idx>> Range<Idx> {\n+impl<Idx: ~const PartialOrd<Idx>> Range<Idx> {\n     /// Returns `true` if `item` is contained in the range.\n     ///\n     /// # Examples\n@@ -116,10 +116,11 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n     /// assert!(!(f32::NAN..1.0).contains(&0.5));\n     /// ```\n     #[stable(feature = \"range_contains\", since = \"1.35.0\")]\n-    pub fn contains<U>(&self, item: &U) -> bool\n+    #[rustc_const_unstable(feature = \"const_range_bounds\", issue = \"108082\")]\n+    pub const fn contains<U>(&self, item: &U) -> bool\n     where\n-        Idx: PartialOrd<U>,\n-        U: ?Sized + PartialOrd<Idx>,\n+        Idx: ~const PartialOrd<U>,\n+        U: ?Sized + ~const PartialOrd<Idx>,\n     {\n         <Self as RangeBounds<Idx>>::contains(self, item)\n     }\n@@ -142,7 +143,8 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n     /// assert!( (f32::NAN..5.0).is_empty());\n     /// ```\n     #[stable(feature = \"range_is_empty\", since = \"1.47.0\")]\n-    pub fn is_empty(&self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_range_bounds\", issue = \"108082\")]\n+    pub const fn is_empty(&self) -> bool {\n         !(self.start < self.end)\n     }\n }\n@@ -199,7 +201,7 @@ impl<Idx: fmt::Debug> fmt::Debug for RangeFrom<Idx> {\n     }\n }\n \n-impl<Idx: PartialOrd<Idx>> RangeFrom<Idx> {\n+impl<Idx: ~const PartialOrd<Idx>> RangeFrom<Idx> {\n     /// Returns `true` if `item` is contained in the range.\n     ///\n     /// # Examples\n@@ -214,10 +216,11 @@ impl<Idx: PartialOrd<Idx>> RangeFrom<Idx> {\n     /// assert!(!(f32::NAN..).contains(&0.5));\n     /// ```\n     #[stable(feature = \"range_contains\", since = \"1.35.0\")]\n-    pub fn contains<U>(&self, item: &U) -> bool\n+    #[rustc_const_unstable(feature = \"const_range_bounds\", issue = \"108082\")]\n+    pub const fn contains<U>(&self, item: &U) -> bool\n     where\n-        Idx: PartialOrd<U>,\n-        U: ?Sized + PartialOrd<Idx>,\n+        Idx: ~const PartialOrd<U>,\n+        U: ?Sized + ~const PartialOrd<Idx>,\n     {\n         <Self as RangeBounds<Idx>>::contains(self, item)\n     }\n@@ -280,7 +283,7 @@ impl<Idx: fmt::Debug> fmt::Debug for RangeTo<Idx> {\n     }\n }\n \n-impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n+impl<Idx: ~const PartialOrd<Idx>> RangeTo<Idx> {\n     /// Returns `true` if `item` is contained in the range.\n     ///\n     /// # Examples\n@@ -295,10 +298,11 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n     /// assert!(!(..f32::NAN).contains(&0.5));\n     /// ```\n     #[stable(feature = \"range_contains\", since = \"1.35.0\")]\n-    pub fn contains<U>(&self, item: &U) -> bool\n+    #[rustc_const_unstable(feature = \"const_range_bounds\", issue = \"108082\")]\n+    pub const fn contains<U>(&self, item: &U) -> bool\n     where\n-        Idx: PartialOrd<U>,\n-        U: ?Sized + PartialOrd<Idx>,\n+        Idx: ~const PartialOrd<U>,\n+        U: ?Sized + ~const PartialOrd<Idx>,\n     {\n         <Self as RangeBounds<Idx>>::contains(self, item)\n     }\n@@ -437,7 +441,8 @@ impl<Idx> RangeInclusive<Idx> {\n     /// ```\n     #[stable(feature = \"inclusive_range_methods\", since = \"1.27.0\")]\n     #[inline]\n-    pub fn into_inner(self) -> (Idx, Idx) {\n+    #[rustc_const_unstable(feature = \"const_range_bounds\", issue = \"108082\")]\n+    pub const fn into_inner(self) -> (Idx, Idx) {\n         (self.start, self.end)\n     }\n }\n@@ -469,7 +474,7 @@ impl<Idx: fmt::Debug> fmt::Debug for RangeInclusive<Idx> {\n     }\n }\n \n-impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n+impl<Idx: ~const PartialOrd<Idx>> RangeInclusive<Idx> {\n     /// Returns `true` if `item` is contained in the range.\n     ///\n     /// # Examples\n@@ -500,10 +505,11 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     /// assert!(!r.contains(&3) && !r.contains(&5));\n     /// ```\n     #[stable(feature = \"range_contains\", since = \"1.35.0\")]\n-    pub fn contains<U>(&self, item: &U) -> bool\n+    #[rustc_const_unstable(feature = \"const_range_bounds\", issue = \"108082\")]\n+    pub const fn contains<U>(&self, item: &U) -> bool\n     where\n-        Idx: PartialOrd<U>,\n-        U: ?Sized + PartialOrd<Idx>,\n+        Idx: ~const PartialOrd<U>,\n+        U: ?Sized + ~const PartialOrd<Idx>,\n     {\n         <Self as RangeBounds<Idx>>::contains(self, item)\n     }\n@@ -535,8 +541,9 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     /// assert!(r.is_empty());\n     /// ```\n     #[stable(feature = \"range_is_empty\", since = \"1.47.0\")]\n+    #[rustc_const_unstable(feature = \"const_range_bounds\", issue = \"108082\")]\n     #[inline]\n-    pub fn is_empty(&self) -> bool {\n+    pub const fn is_empty(&self) -> bool {\n         self.exhausted || !(self.start <= self.end)\n     }\n }\n@@ -598,7 +605,7 @@ impl<Idx: fmt::Debug> fmt::Debug for RangeToInclusive<Idx> {\n     }\n }\n \n-impl<Idx: PartialOrd<Idx>> RangeToInclusive<Idx> {\n+impl<Idx: ~const PartialOrd<Idx>> RangeToInclusive<Idx> {\n     /// Returns `true` if `item` is contained in the range.\n     ///\n     /// # Examples\n@@ -613,10 +620,11 @@ impl<Idx: PartialOrd<Idx>> RangeToInclusive<Idx> {\n     /// assert!(!(..=f32::NAN).contains(&0.5));\n     /// ```\n     #[stable(feature = \"range_contains\", since = \"1.35.0\")]\n-    pub fn contains<U>(&self, item: &U) -> bool\n+    #[rustc_const_unstable(feature = \"const_range_bounds\", issue = \"108082\")]\n+    pub const fn contains<U>(&self, item: &U) -> bool\n     where\n-        Idx: PartialOrd<U>,\n-        U: ?Sized + PartialOrd<Idx>,\n+        Idx: ~const PartialOrd<U>,\n+        U: ?Sized + ~const PartialOrd<Idx>,\n     {\n         <Self as RangeBounds<Idx>>::contains(self, item)\n     }\n@@ -757,6 +765,7 @@ impl<T: Clone> Bound<&T> {\n /// `RangeBounds` is implemented by Rust's built-in range types, produced\n /// by range syntax like `..`, `a..`, `..b`, `..=c`, `d..e`, or `f..=g`.\n #[stable(feature = \"collections_range\", since = \"1.28.0\")]\n+#[const_trait]\n pub trait RangeBounds<T: ?Sized> {\n     /// Start index bound.\n     ///\n@@ -809,8 +818,8 @@ pub trait RangeBounds<T: ?Sized> {\n     #[stable(feature = \"range_contains\", since = \"1.35.0\")]\n     fn contains<U>(&self, item: &U) -> bool\n     where\n-        T: PartialOrd<U>,\n-        U: ?Sized + PartialOrd<T>,\n+        T: ~const PartialOrd<U>,\n+        U: ?Sized + ~const PartialOrd<T>,\n     {\n         (match self.start_bound() {\n             Included(start) => start <= item,\n@@ -827,7 +836,8 @@ pub trait RangeBounds<T: ?Sized> {\n use self::Bound::{Excluded, Included, Unbounded};\n \n #[stable(feature = \"collections_range\", since = \"1.28.0\")]\n-impl<T: ?Sized> RangeBounds<T> for RangeFull {\n+#[rustc_const_unstable(feature = \"const_range_bounds\", issue = \"108082\")]\n+impl<T: ?Sized> const RangeBounds<T> for RangeFull {\n     fn start_bound(&self) -> Bound<&T> {\n         Unbounded\n     }\n@@ -837,7 +847,8 @@ impl<T: ?Sized> RangeBounds<T> for RangeFull {\n }\n \n #[stable(feature = \"collections_range\", since = \"1.28.0\")]\n-impl<T> RangeBounds<T> for RangeFrom<T> {\n+#[rustc_const_unstable(feature = \"const_range_bounds\", issue = \"108082\")]\n+impl<T> const RangeBounds<T> for RangeFrom<T> {\n     fn start_bound(&self) -> Bound<&T> {\n         Included(&self.start)\n     }\n@@ -847,7 +858,8 @@ impl<T> RangeBounds<T> for RangeFrom<T> {\n }\n \n #[stable(feature = \"collections_range\", since = \"1.28.0\")]\n-impl<T> RangeBounds<T> for RangeTo<T> {\n+#[rustc_const_unstable(feature = \"const_range_bounds\", issue = \"108082\")]\n+impl<T> const RangeBounds<T> for RangeTo<T> {\n     fn start_bound(&self) -> Bound<&T> {\n         Unbounded\n     }\n@@ -857,7 +869,8 @@ impl<T> RangeBounds<T> for RangeTo<T> {\n }\n \n #[stable(feature = \"collections_range\", since = \"1.28.0\")]\n-impl<T> RangeBounds<T> for Range<T> {\n+#[rustc_const_unstable(feature = \"const_range_bounds\", issue = \"108082\")]\n+impl<T> const RangeBounds<T> for Range<T> {\n     fn start_bound(&self) -> Bound<&T> {\n         Included(&self.start)\n     }\n@@ -867,7 +880,8 @@ impl<T> RangeBounds<T> for Range<T> {\n }\n \n #[stable(feature = \"collections_range\", since = \"1.28.0\")]\n-impl<T> RangeBounds<T> for RangeInclusive<T> {\n+#[rustc_const_unstable(feature = \"const_range_bounds\", issue = \"108082\")]\n+impl<T> const RangeBounds<T> for RangeInclusive<T> {\n     fn start_bound(&self) -> Bound<&T> {\n         Included(&self.start)\n     }\n@@ -883,7 +897,8 @@ impl<T> RangeBounds<T> for RangeInclusive<T> {\n }\n \n #[stable(feature = \"collections_range\", since = \"1.28.0\")]\n-impl<T> RangeBounds<T> for RangeToInclusive<T> {\n+#[rustc_const_unstable(feature = \"const_range_bounds\", issue = \"108082\")]\n+impl<T> const RangeBounds<T> for RangeToInclusive<T> {\n     fn start_bound(&self) -> Bound<&T> {\n         Unbounded\n     }\n@@ -893,7 +908,8 @@ impl<T> RangeBounds<T> for RangeToInclusive<T> {\n }\n \n #[stable(feature = \"collections_range\", since = \"1.28.0\")]\n-impl<T> RangeBounds<T> for (Bound<T>, Bound<T>) {\n+#[rustc_const_unstable(feature = \"const_range_bounds\", issue = \"108082\")]\n+impl<T> const RangeBounds<T> for (Bound<T>, Bound<T>) {\n     fn start_bound(&self) -> Bound<&T> {\n         match *self {\n             (Included(ref start), _) => Included(start),\n@@ -912,7 +928,8 @@ impl<T> RangeBounds<T> for (Bound<T>, Bound<T>) {\n }\n \n #[stable(feature = \"collections_range\", since = \"1.28.0\")]\n-impl<'a, T: ?Sized + 'a> RangeBounds<T> for (Bound<&'a T>, Bound<&'a T>) {\n+#[rustc_const_unstable(feature = \"const_range_bounds\", issue = \"108082\")]\n+impl<'a, T: ?Sized + 'a> const RangeBounds<T> for (Bound<&'a T>, Bound<&'a T>) {\n     fn start_bound(&self) -> Bound<&T> {\n         self.0\n     }\n@@ -923,7 +940,8 @@ impl<'a, T: ?Sized + 'a> RangeBounds<T> for (Bound<&'a T>, Bound<&'a T>) {\n }\n \n #[stable(feature = \"collections_range\", since = \"1.28.0\")]\n-impl<T> RangeBounds<T> for RangeFrom<&T> {\n+#[rustc_const_unstable(feature = \"const_range_bounds\", issue = \"108082\")]\n+impl<T> const RangeBounds<T> for RangeFrom<&T> {\n     fn start_bound(&self) -> Bound<&T> {\n         Included(self.start)\n     }\n@@ -933,7 +951,8 @@ impl<T> RangeBounds<T> for RangeFrom<&T> {\n }\n \n #[stable(feature = \"collections_range\", since = \"1.28.0\")]\n-impl<T> RangeBounds<T> for RangeTo<&T> {\n+#[rustc_const_unstable(feature = \"const_range_bounds\", issue = \"108082\")]\n+impl<T> const RangeBounds<T> for RangeTo<&T> {\n     fn start_bound(&self) -> Bound<&T> {\n         Unbounded\n     }\n@@ -943,7 +962,8 @@ impl<T> RangeBounds<T> for RangeTo<&T> {\n }\n \n #[stable(feature = \"collections_range\", since = \"1.28.0\")]\n-impl<T> RangeBounds<T> for Range<&T> {\n+#[rustc_const_unstable(feature = \"const_range_bounds\", issue = \"108082\")]\n+impl<T> const RangeBounds<T> for Range<&T> {\n     fn start_bound(&self) -> Bound<&T> {\n         Included(self.start)\n     }\n@@ -953,7 +973,8 @@ impl<T> RangeBounds<T> for Range<&T> {\n }\n \n #[stable(feature = \"collections_range\", since = \"1.28.0\")]\n-impl<T> RangeBounds<T> for RangeInclusive<&T> {\n+#[rustc_const_unstable(feature = \"const_range_bounds\", issue = \"108082\")]\n+impl<T> const RangeBounds<T> for RangeInclusive<&T> {\n     fn start_bound(&self) -> Bound<&T> {\n         Included(self.start)\n     }\n@@ -963,7 +984,8 @@ impl<T> RangeBounds<T> for RangeInclusive<&T> {\n }\n \n #[stable(feature = \"collections_range\", since = \"1.28.0\")]\n-impl<T> RangeBounds<T> for RangeToInclusive<&T> {\n+#[rustc_const_unstable(feature = \"const_range_bounds\", issue = \"108082\")]\n+impl<T> const RangeBounds<T> for RangeToInclusive<&T> {\n     fn start_bound(&self) -> Bound<&T> {\n         Unbounded\n     }"}]}