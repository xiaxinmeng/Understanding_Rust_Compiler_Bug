{"sha": "38ba05508ced18d46bea88109807e7b6da66baad", "node_id": "C_kwDOAAsO6NoAKDM4YmEwNTUwOGNlZDE4ZDQ2YmVhODgxMDk4MDdlN2I2ZGE2NmJhYWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-14T04:44:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-14T04:44:33Z"}, "message": "Auto merge of #8676 - Alexendoo:local-used-across-loop, r=xFrednet\n\nCheck for loops/closures in `local_used_after_expr`\n\nFollow up to #8646, catches when a local is used multiple times because it's in a loop or a closure\n\nchangelog: none", "tree": {"sha": "93bba9915196a6b82e3877341f553a1946b725d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93bba9915196a6b82e3877341f553a1946b725d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38ba05508ced18d46bea88109807e7b6da66baad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38ba05508ced18d46bea88109807e7b6da66baad", "html_url": "https://github.com/rust-lang/rust/commit/38ba05508ced18d46bea88109807e7b6da66baad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38ba05508ced18d46bea88109807e7b6da66baad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6645d022e492a20da31123f8aff5b5af3eb31c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6645d022e492a20da31123f8aff5b5af3eb31c9", "html_url": "https://github.com/rust-lang/rust/commit/b6645d022e492a20da31123f8aff5b5af3eb31c9"}, {"sha": "5e335a52bc49991f6ffd40030b9948f3390f499d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e335a52bc49991f6ffd40030b9948f3390f499d", "html_url": "https://github.com/rust-lang/rust/commit/5e335a52bc49991f6ffd40030b9948f3390f499d"}], "stats": {"total": 84, "additions": 77, "deletions": 7}, "files": [{"sha": "c2e32f1d9a23e00d0ce9ac70e3e73d2ffc3cf2d7", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/38ba05508ced18d46bea88109807e7b6da66baad/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ba05508ced18d46bea88109807e7b6da66baad/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=38ba05508ced18d46bea88109807e7b6da66baad", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::higher::VecArgs;\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::usage::local_used_after_expr;\n-use clippy_utils::{get_enclosing_loop_or_closure, higher, path_to_local, path_to_local_id};\n+use clippy_utils::{higher, path_to_local, path_to_local_id};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::def_id::DefId;\n@@ -125,8 +125,7 @@ impl<'tcx> LateLintPass<'tcx> for EtaReduction {\n                         if_chain! {\n                             if let ty::Closure(_, substs) = callee_ty.peel_refs().kind();\n                             if substs.as_closure().kind() == ClosureKind::FnMut;\n-                            if get_enclosing_loop_or_closure(cx.tcx, expr).is_some()\n-                                || path_to_local(callee).map_or(false, |l| local_used_after_expr(cx, l, callee));\n+                            if path_to_local(callee).map_or(false, |l| local_used_after_expr(cx, l, expr));\n \n                             then {\n                                 // Mutable closure is used after current expr; we cannot consume it."}, {"sha": "4236e3aae2fbde4f811106b27547ba1f8276648b", "filename": "clippy_utils/src/usage.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/38ba05508ced18d46bea88109807e7b6da66baad/clippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ba05508ced18d46bea88109807e7b6da66baad/clippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fusage.rs?ref=38ba05508ced18d46bea88109807e7b6da66baad", "patch": "@@ -3,7 +3,7 @@ use crate::visitors::{expr_visitor, expr_visitor_no_bodies};\n use rustc_hir as hir;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::HirIdSet;\n-use rustc_hir::{Expr, ExprKind, HirId};\n+use rustc_hir::{Expr, ExprKind, HirId, Node};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n use rustc_middle::hir::nested_filter;\n@@ -169,6 +169,32 @@ pub fn contains_return_break_continue_macro(expression: &Expr<'_>) -> bool {\n \n pub fn local_used_after_expr(cx: &LateContext<'_>, local_id: HirId, after: &Expr<'_>) -> bool {\n     let Some(block) = utils::get_enclosing_block(cx, local_id) else { return false };\n+\n+    // for _ in 1..3 {\n+    //    local\n+    // }\n+    //\n+    // let closure = || local;\n+    // closure();\n+    // closure();\n+    let in_loop_or_closure = cx\n+        .tcx\n+        .hir()\n+        .parent_iter(after.hir_id)\n+        .take_while(|&(id, _)| id != block.hir_id)\n+        .any(|(_, node)| {\n+            matches!(\n+                node,\n+                Node::Expr(Expr {\n+                    kind: ExprKind::Loop(..) | ExprKind::Closure(..),\n+                    ..\n+                })\n+            )\n+        });\n+    if in_loop_or_closure {\n+        return true;\n+    }\n+\n     let mut used_after_expr = false;\n     let mut past_expr = false;\n     expr_visitor(cx, |expr| {\n@@ -178,7 +204,10 @@ pub fn local_used_after_expr(cx: &LateContext<'_>, local_id: HirId, after: &Expr\n \n         if expr.hir_id == after.hir_id {\n             past_expr = true;\n-        } else if past_expr && utils::path_to_local_id(expr, local_id) {\n+            return false;\n+        }\n+\n+        if past_expr && utils::path_to_local_id(expr, local_id) {\n             used_after_expr = true;\n         }\n         !used_after_expr"}, {"sha": "873ed689a5be79d935bcdc7605566764665a2884", "filename": "tests/ui/eta.fixed", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38ba05508ced18d46bea88109807e7b6da66baad/tests%2Fui%2Feta.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/38ba05508ced18d46bea88109807e7b6da66baad/tests%2Fui%2Feta.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.fixed?ref=38ba05508ced18d46bea88109807e7b6da66baad", "patch": "@@ -211,6 +211,10 @@ fn mutable_closure_in_loop() {\n     let mut closure = |n| value += n;\n     for _ in 0..5 {\n         Some(1).map(&mut closure);\n+\n+        let mut value = 0;\n+        let mut in_loop = |n| value += n;\n+        Some(1).map(in_loop);\n     }\n }\n "}, {"sha": "4cb58eec94cd7947f63f72a1791ce3caadc08a7f", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38ba05508ced18d46bea88109807e7b6da66baad/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ba05508ced18d46bea88109807e7b6da66baad/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=38ba05508ced18d46bea88109807e7b6da66baad", "patch": "@@ -211,6 +211,10 @@ fn mutable_closure_in_loop() {\n     let mut closure = |n| value += n;\n     for _ in 0..5 {\n         Some(1).map(|n| closure(n));\n+\n+        let mut value = 0;\n+        let mut in_loop = |n| value += n;\n+        Some(1).map(|n| in_loop(n));\n     }\n }\n "}, {"sha": "d1ae889d6f36072cb6229f02c618f044eea3387b", "filename": "tests/ui/eta.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/38ba05508ced18d46bea88109807e7b6da66baad/tests%2Fui%2Feta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38ba05508ced18d46bea88109807e7b6da66baad/tests%2Fui%2Feta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.stderr?ref=38ba05508ced18d46bea88109807e7b6da66baad", "patch": "@@ -117,10 +117,16 @@ LL |         Some(1).map(|n| closure(n));\n    |                     ^^^^^^^^^^^^^^ help: replace the closure with the function itself: `&mut closure`\n \n error: redundant closure\n-  --> $DIR/eta.rs:232:21\n+  --> $DIR/eta.rs:217:21\n+   |\n+LL |         Some(1).map(|n| in_loop(n));\n+   |                     ^^^^^^^^^^^^^^ help: replace the closure with the function itself: `in_loop`\n+\n+error: redundant closure\n+  --> $DIR/eta.rs:236:21\n    |\n LL |     map_str_to_path(|s| s.as_ref());\n    |                     ^^^^^^^^^^^^^^ help: replace the closure with the method itself: `std::convert::AsRef::as_ref`\n \n-error: aborting due to 20 previous errors\n+error: aborting due to 21 previous errors\n "}, {"sha": "acd22c6bb43372e6048a016d656f1bbd6aec2b4f", "filename": "tests/ui/needless_option_as_deref.fixed", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38ba05508ced18d46bea88109807e7b6da66baad/tests%2Fui%2Fneedless_option_as_deref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/38ba05508ced18d46bea88109807e7b6da66baad/tests%2Fui%2Fneedless_option_as_deref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_option_as_deref.fixed?ref=38ba05508ced18d46bea88109807e7b6da66baad", "patch": "@@ -16,6 +16,20 @@ fn main() {\n     let _ = Some(Box::new(1)).as_deref();\n     let _ = Some(Box::new(1)).as_deref_mut();\n \n+    let mut y = 0;\n+    let mut x = Some(&mut y);\n+    for _ in 0..3 {\n+        let _ = x.as_deref_mut();\n+    }\n+\n+    let mut y = 0;\n+    let mut x = Some(&mut y);\n+    let mut closure = || {\n+        let _ = x.as_deref_mut();\n+    };\n+    closure();\n+    closure();\n+\n     // #7846\n     let mut i = 0;\n     let mut opt_vec = vec![Some(&mut i)];"}, {"sha": "61eda5052a21efed8363013d28c364f042943736", "filename": "tests/ui/needless_option_as_deref.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38ba05508ced18d46bea88109807e7b6da66baad/tests%2Fui%2Fneedless_option_as_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38ba05508ced18d46bea88109807e7b6da66baad/tests%2Fui%2Fneedless_option_as_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_option_as_deref.rs?ref=38ba05508ced18d46bea88109807e7b6da66baad", "patch": "@@ -16,6 +16,20 @@ fn main() {\n     let _ = Some(Box::new(1)).as_deref();\n     let _ = Some(Box::new(1)).as_deref_mut();\n \n+    let mut y = 0;\n+    let mut x = Some(&mut y);\n+    for _ in 0..3 {\n+        let _ = x.as_deref_mut();\n+    }\n+\n+    let mut y = 0;\n+    let mut x = Some(&mut y);\n+    let mut closure = || {\n+        let _ = x.as_deref_mut();\n+    };\n+    closure();\n+    closure();\n+\n     // #7846\n     let mut i = 0;\n     let mut opt_vec = vec![Some(&mut i)];"}]}