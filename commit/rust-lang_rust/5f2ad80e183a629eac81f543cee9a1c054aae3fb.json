{"sha": "5f2ad80e183a629eac81f543cee9a1c054aae3fb", "node_id": "C_kwDOAAsO6NoAKDVmMmFkODBlMTgzYTYyOWVhYzgxZjU0M2NlZTlhMWMwNTRhYWUzZmI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-20T06:25:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-20T06:25:28Z"}, "message": "Rollup merge of #106891 - estebank:issue-45727, r=petrochenkov\n\nTweak \"borrow closure argument\" suggestion\n\nFix #45727.", "tree": {"sha": "905aea07204f944b7695cfeec0f59e55d509b366", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/905aea07204f944b7695cfeec0f59e55d509b366"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f2ad80e183a629eac81f543cee9a1c054aae3fb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjyjPYCRBK7hj4Ov3rIwAAaqcIAGMU7SErPYFXMm8ggeZ/S8Oi\nXboNtZuxgafOND07nefrAyKzC0ivnZAeWGQ9UP+/f9mOxOzco1HbfCQ/BPlb+F5e\nCU5BXBE8Tp8qKmjip32B1y5A5cJJ2R2Cc877+pARFdgM6I96FyzqJ03bqgNawIq7\nDzUS6+Ty+cKYUo6tahuc4/WrMxhDBqUfb6kmhzvdd07sTyYqys8PXe5u5s0j9eoq\nTehzi/Y0CXDQfSbr5MJpgQHqxHXpPXvgAHptdyueyoXaAJX8IlE5EqVCr+vrcPyO\noloomaDomuBZiIaDIZolJdaFOBYeCN9jMwrBqB1bdIt92NKep4/5oyMcIjYloQE=\n=YyVv\n-----END PGP SIGNATURE-----\n", "payload": "tree 905aea07204f944b7695cfeec0f59e55d509b366\nparent 720a9f1d9bd2d53beecb3eb847caf14f59bb219e\nparent 33e11a3b2e2f2ee68fb2cb72e20f84c50c4c15cb\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1674195928 +0100\ncommitter GitHub <noreply@github.com> 1674195928 +0100\n\nRollup merge of #106891 - estebank:issue-45727, r=petrochenkov\n\nTweak \"borrow closure argument\" suggestion\n\nFix #45727.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f2ad80e183a629eac81f543cee9a1c054aae3fb", "html_url": "https://github.com/rust-lang/rust/commit/5f2ad80e183a629eac81f543cee9a1c054aae3fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f2ad80e183a629eac81f543cee9a1c054aae3fb/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "720a9f1d9bd2d53beecb3eb847caf14f59bb219e", "url": "https://api.github.com/repos/rust-lang/rust/commits/720a9f1d9bd2d53beecb3eb847caf14f59bb219e", "html_url": "https://github.com/rust-lang/rust/commit/720a9f1d9bd2d53beecb3eb847caf14f59bb219e"}, {"sha": "33e11a3b2e2f2ee68fb2cb72e20f84c50c4c15cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/33e11a3b2e2f2ee68fb2cb72e20f84c50c4c15cb", "html_url": "https://github.com/rust-lang/rust/commit/33e11a3b2e2f2ee68fb2cb72e20f84c50c4c15cb"}], "stats": {"total": 174, "additions": 127, "deletions": 47}, "files": [{"sha": "52971486c553e361fe1d91cf55947ca15de59b45", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f2ad80e183a629eac81f543cee9a1c054aae3fb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f2ad80e183a629eac81f543cee9a1c054aae3fb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=5f2ad80e183a629eac81f543cee9a1c054aae3fb", "patch": "@@ -1350,6 +1350,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         expected_trait_ref,\n                         obligation.cause.code(),\n                         found_node,\n+                        obligation.param_env,\n                     )\n                 } else {\n                     let (closure_span, closure_arg_span, found) = found_did"}, {"sha": "39e50b2accf17af05b1f4acb4f0c8d2451267e81", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5f2ad80e183a629eac81f543cee9a1c054aae3fb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f2ad80e183a629eac81f543cee9a1c054aae3fb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=5f2ad80e183a629eac81f543cee9a1c054aae3fb", "patch": "@@ -283,6 +283,7 @@ pub trait TypeErrCtxtExt<'tcx> {\n         expected: ty::PolyTraitRef<'tcx>,\n         cause: &ObligationCauseCode<'tcx>,\n         found_node: Option<Node<'_>>,\n+        param_env: ty::ParamEnv<'tcx>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed>;\n \n     fn note_conflicting_closure_bounds(\n@@ -1978,6 +1979,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         expected: ty::PolyTraitRef<'tcx>,\n         cause: &ObligationCauseCode<'tcx>,\n         found_node: Option<Node<'_>>,\n+        param_env: ty::ParamEnv<'tcx>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         pub(crate) fn build_fn_sig_ty<'tcx>(\n             infcx: &InferCtxt<'tcx>,\n@@ -2040,7 +2042,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         self.note_conflicting_closure_bounds(cause, &mut err);\n \n         if let Some(found_node) = found_node {\n-            hint_missing_borrow(span, found, expected, found_node, &mut err);\n+            hint_missing_borrow(self, param_env, span, found, expected, found_node, &mut err);\n         }\n \n         err\n@@ -3747,6 +3749,8 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n /// Add a hint to add a missing borrow or remove an unnecessary one.\n fn hint_missing_borrow<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n     span: Span,\n     found: Ty<'tcx>,\n     expected: Ty<'tcx>,\n@@ -3769,7 +3773,7 @@ fn hint_missing_borrow<'tcx>(\n     // This could be a variant constructor, for example.\n     let Some(fn_decl) = found_node.fn_decl() else { return; };\n \n-    let arg_spans = fn_decl.inputs.iter().map(|ty| ty.span);\n+    let args = fn_decl.inputs.iter().map(|ty| ty);\n \n     fn get_deref_type_and_refs(mut ty: Ty<'_>) -> (Ty<'_>, usize) {\n         let mut refs = 0;\n@@ -3785,29 +3789,42 @@ fn hint_missing_borrow<'tcx>(\n     let mut to_borrow = Vec::new();\n     let mut remove_borrow = Vec::new();\n \n-    for ((found_arg, expected_arg), arg_span) in found_args.zip(expected_args).zip(arg_spans) {\n+    for ((found_arg, expected_arg), arg) in found_args.zip(expected_args).zip(args) {\n         let (found_ty, found_refs) = get_deref_type_and_refs(*found_arg);\n         let (expected_ty, expected_refs) = get_deref_type_and_refs(*expected_arg);\n \n-        if found_ty == expected_ty {\n+        if infcx.can_eq(param_env, found_ty, expected_ty).is_ok() {\n             if found_refs < expected_refs {\n-                to_borrow.push((arg_span, expected_arg.to_string()));\n+                to_borrow.push((arg.span.shrink_to_lo(), \"&\".repeat(expected_refs - found_refs)));\n             } else if found_refs > expected_refs {\n-                remove_borrow.push((arg_span, expected_arg.to_string()));\n+                let mut span = arg.span.shrink_to_lo();\n+                let mut left = found_refs - expected_refs;\n+                let mut ty = arg;\n+                while let hir::TyKind::Ref(_, mut_ty) = &ty.kind && left > 0 {\n+                    span = span.with_hi(mut_ty.ty.span.lo());\n+                    ty = mut_ty.ty;\n+                    left -= 1;\n+                }\n+                let sugg = if left == 0 {\n+                    (span, String::new())\n+                } else {\n+                    (arg.span, expected_arg.to_string())\n+                };\n+                remove_borrow.push(sugg);\n             }\n         }\n     }\n \n     if !to_borrow.is_empty() {\n-        err.multipart_suggestion(\n+        err.multipart_suggestion_verbose(\n             \"consider borrowing the argument\",\n             to_borrow,\n             Applicability::MaybeIncorrect,\n         );\n     }\n \n     if !remove_borrow.is_empty() {\n-        err.multipart_suggestion(\n+        err.multipart_suggestion_verbose(\n             \"do not borrow the argument\",\n             remove_borrow,\n             Applicability::MaybeIncorrect,"}, {"sha": "c023d1b1590565bd5fd61d7286780fa0a4f734db", "filename": "tests/ui/anonymous-higher-ranked-lifetime.stderr", "status": "modified", "additions": 35, "deletions": 27, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/5f2ad80e183a629eac81f543cee9a1c054aae3fb/tests%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f2ad80e183a629eac81f543cee9a1c054aae3fb/tests%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=5f2ad80e183a629eac81f543cee9a1c054aae3fb", "patch": "@@ -16,7 +16,7 @@ LL | fn f1<F>(_: F) where F: Fn(&(), &()) {}\n help: consider borrowing the argument\n    |\n LL |     f1(|_: &(), _: &()| {});\n-   |            ~~~     ~~~\n+   |            +       +\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:3:5\n@@ -35,8 +35,8 @@ LL | fn f2<F>(_: F) where F: for<'a> Fn(&'a (), &()) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `f2`\n help: consider borrowing the argument\n    |\n-LL |     f2(|_: &'a (), _: &()| {});\n-   |            ~~~~~~     ~~~\n+LL |     f2(|_: &(), _: &()| {});\n+   |            +       +\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:4:5\n@@ -56,7 +56,7 @@ LL | fn f3<'a, F>(_: F) where F: Fn(&'a (), &()) {}\n help: consider borrowing the argument\n    |\n LL |     f3(|_: &(), _: &()| {});\n-   |            ~~~     ~~~\n+   |            +       +\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:5:5\n@@ -75,8 +75,8 @@ LL | fn f4<F>(_: F) where F: for<'r> Fn(&(), &'r ()) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `f4`\n help: consider borrowing the argument\n    |\n-LL |     f4(|_: &(), _: &'r ()| {});\n-   |            ~~~     ~~~~~~\n+LL |     f4(|_: &(), _: &()| {});\n+   |            +       +\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:6:5\n@@ -95,17 +95,15 @@ LL | fn f5<F>(_: F) where F: for<'r> Fn(&'r (), &'r ()) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `f5`\n help: consider borrowing the argument\n    |\n-LL |     f5(|_: &'r (), _: &'r ()| {});\n-   |            ~~~~~~     ~~~~~~\n+LL |     f5(|_: &(), _: &()| {});\n+   |            +       +\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:7:5\n    |\n LL |     g1(|_: (), _: ()| {});\n-   |     ^^ --------------\n-   |     |  |   |\n-   |     |  |   help: consider borrowing the argument: `&()`\n-   |     |  found signature defined here\n+   |     ^^ -------------- found signature defined here\n+   |     |\n    |     expected due to this\n    |\n    = note: expected closure signature `for<'a> fn(&'a (), Box<(dyn for<'a> Fn(&'a ()) + 'static)>) -> _`\n@@ -115,15 +113,17 @@ note: required by a bound in `g1`\n    |\n LL | fn g1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `g1`\n+help: consider borrowing the argument\n+   |\n+LL |     g1(|_: &(), _: ()| {});\n+   |            +\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:8:5\n    |\n LL |     g2(|_: (), _: ()| {});\n-   |     ^^ --------------\n-   |     |  |   |\n-   |     |  |   help: consider borrowing the argument: `&()`\n-   |     |  found signature defined here\n+   |     ^^ -------------- found signature defined here\n+   |     |\n    |     expected due to this\n    |\n    = note: expected closure signature `for<'a> fn(&'a (), for<'a> fn(&'a ())) -> _`\n@@ -133,15 +133,17 @@ note: required by a bound in `g2`\n    |\n LL | fn g2<F>(_: F) where F: Fn(&(), fn(&())) {}\n    |                         ^^^^^^^^^^^^^^^^ required by this bound in `g2`\n+help: consider borrowing the argument\n+   |\n+LL |     g2(|_: &(), _: ()| {});\n+   |            +\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:9:5\n    |\n LL |     g3(|_: (), _: ()| {});\n-   |     ^^ --------------\n-   |     |  |   |\n-   |     |  |   help: consider borrowing the argument: `&'s ()`\n-   |     |  found signature defined here\n+   |     ^^ -------------- found signature defined here\n+   |     |\n    |     expected due to this\n    |\n    = note: expected closure signature `for<'s> fn(&'s (), Box<(dyn for<'a> Fn(&'a ()) + 'static)>) -> _`\n@@ -151,15 +153,17 @@ note: required by a bound in `g3`\n    |\n LL | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<dyn Fn(&())>) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `g3`\n+help: consider borrowing the argument\n+   |\n+LL |     g3(|_: &(), _: ()| {});\n+   |            +\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:10:5\n    |\n LL |     g4(|_: (), _: ()| {});\n-   |     ^^ --------------\n-   |     |  |   |\n-   |     |  |   help: consider borrowing the argument: `&()`\n-   |     |  found signature defined here\n+   |     ^^ -------------- found signature defined here\n+   |     |\n    |     expected due to this\n    |\n    = note: expected closure signature `for<'a> fn(&'a (), for<'r> fn(&'r ())) -> _`\n@@ -169,6 +173,10 @@ note: required by a bound in `g4`\n    |\n LL | fn g4<F>(_: F) where F: Fn(&(), for<'r> fn(&'r ())) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `g4`\n+help: consider borrowing the argument\n+   |\n+LL |     g4(|_: &(), _: ()| {});\n+   |            +\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:11:5\n@@ -188,7 +196,7 @@ LL | fn h1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>, &(), fn(&(), &())) {}\n help: consider borrowing the argument\n    |\n LL |     h1(|_: &(), _: (), _: &(), _: ()| {});\n-   |            ~~~            ~~~\n+   |            +              +\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:12:5\n@@ -207,8 +215,8 @@ LL | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<dyn Fn(&())>, &'t0 (), fn(&(),\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `h2`\n help: consider borrowing the argument\n    |\n-LL |     h2(|_: &(), _: (), _: &'t0 (), _: ()| {});\n-   |            ~~~            ~~~~~~~\n+LL |     h2(|_: &(), _: (), _: &(), _: ()| {});\n+   |            +              +\n \n error: aborting due to 11 previous errors\n "}, {"sha": "32a1edb0024c0da0e3bafa83f17d5f022d3432fc", "filename": "tests/ui/closures/multiple-fn-bounds.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5f2ad80e183a629eac81f543cee9a1c054aae3fb/tests%2Fui%2Fclosures%2Fmultiple-fn-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f2ad80e183a629eac81f543cee9a1c054aae3fb/tests%2Fui%2Fclosures%2Fmultiple-fn-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fmultiple-fn-bounds.stderr?ref=5f2ad80e183a629eac81f543cee9a1c054aae3fb", "patch": "@@ -2,10 +2,8 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/multiple-fn-bounds.rs:10:5\n    |\n LL |     foo(move |x| v);\n-   |     ^^^ --------\n-   |     |   |     |\n-   |     |   |     help: do not borrow the argument: `char`\n-   |     |   found signature defined here\n+   |     ^^^ -------- found signature defined here\n+   |     |\n    |     expected due to this\n    |\n    = note: expected closure signature `fn(char) -> _`\n@@ -20,6 +18,10 @@ note: required by a bound in `foo`\n    |\n LL | fn foo<F: Fn(&char) -> bool + Fn(char) -> bool>(f: F) {\n    |                               ^^^^^^^^^^^^^^^^ required by this bound in `foo`\n+help: do not borrow the argument\n+   |\n+LL |     foo(move |char| v);\n+   |               ~~~~\n \n error: aborting due to previous error\n "}, {"sha": "6315fcca2b8b0c52df796a182707c9191197b04f", "filename": "tests/ui/mismatched_types/closure-arg-type-mismatch-issue-45727.fixed", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f2ad80e183a629eac81f543cee9a1c054aae3fb/tests%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch-issue-45727.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5f2ad80e183a629eac81f543cee9a1c054aae3fb/tests%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch-issue-45727.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch-issue-45727.fixed?ref=5f2ad80e183a629eac81f543cee9a1c054aae3fb", "patch": "@@ -0,0 +1,5 @@\n+// run-rustfix\n+fn main() {\n+    let _ = (-10..=10).find(|x: &i32| x.signum() == 0); //~ ERROR type mismatch in closure arguments\n+    let _ = (-10..=10).find(|x: &i32| x.signum() == 0); //~ ERROR type mismatch in closure arguments\n+}"}, {"sha": "c12c5362efcfe66215f93243cf740c4f14741940", "filename": "tests/ui/mismatched_types/closure-arg-type-mismatch-issue-45727.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f2ad80e183a629eac81f543cee9a1c054aae3fb/tests%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch-issue-45727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f2ad80e183a629eac81f543cee9a1c054aae3fb/tests%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch-issue-45727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch-issue-45727.rs?ref=5f2ad80e183a629eac81f543cee9a1c054aae3fb", "patch": "@@ -0,0 +1,5 @@\n+// run-rustfix\n+fn main() {\n+    let _ = (-10..=10).find(|x: i32| x.signum() == 0); //~ ERROR type mismatch in closure arguments\n+    let _ = (-10..=10).find(|x: &&&i32| x.signum() == 0); //~ ERROR type mismatch in closure arguments\n+}"}, {"sha": "fb8af4bb7dd29e3e3a084b33e3bbe7e9ff33bd4d", "filename": "tests/ui/mismatched_types/closure-arg-type-mismatch-issue-45727.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5f2ad80e183a629eac81f543cee9a1c054aae3fb/tests%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch-issue-45727.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f2ad80e183a629eac81f543cee9a1c054aae3fb/tests%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch-issue-45727.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch-issue-45727.stderr?ref=5f2ad80e183a629eac81f543cee9a1c054aae3fb", "patch": "@@ -0,0 +1,38 @@\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/closure-arg-type-mismatch-issue-45727.rs:3:24\n+   |\n+LL |     let _ = (-10..=10).find(|x: i32| x.signum() == 0);\n+   |                        ^^^^ -------- found signature defined here\n+   |                        |\n+   |                        expected due to this\n+   |\n+   = note: expected closure signature `for<'a> fn(&'a {integer}) -> _`\n+              found closure signature `fn(i32) -> _`\n+note: required by a bound in `find`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+help: consider borrowing the argument\n+   |\n+LL |     let _ = (-10..=10).find(|x: &i32| x.signum() == 0);\n+   |                                 +\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/closure-arg-type-mismatch-issue-45727.rs:4:24\n+   |\n+LL |     let _ = (-10..=10).find(|x: &&&i32| x.signum() == 0);\n+   |                        ^^^^ ----------- found signature defined here\n+   |                        |\n+   |                        expected due to this\n+   |\n+   = note: expected closure signature `for<'a> fn(&'a {integer}) -> _`\n+              found closure signature `for<'a, 'b, 'c> fn(&'a &'b &'c i32) -> _`\n+note: required by a bound in `find`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+help: do not borrow the argument\n+   |\n+LL -     let _ = (-10..=10).find(|x: &&&i32| x.signum() == 0);\n+LL +     let _ = (-10..=10).find(|x: &i32| x.signum() == 0);\n+   |\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0631`."}, {"sha": "811ff0533f0124ff219f580a458a4d1d830af712", "filename": "tests/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5f2ad80e183a629eac81f543cee9a1c054aae3fb/tests%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f2ad80e183a629eac81f543cee9a1c054aae3fb/tests%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=5f2ad80e183a629eac81f543cee9a1c054aae3fb", "patch": "@@ -2,16 +2,18 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-arg-type-mismatch.rs:3:14\n    |\n LL |     a.iter().map(|_: (u32, u32)| 45);\n-   |              ^^^ ---------------\n-   |              |   |   |\n-   |              |   |   help: consider borrowing the argument: `&(u32, u32)`\n-   |              |   found signature defined here\n+   |              ^^^ --------------- found signature defined here\n+   |              |\n    |              expected due to this\n    |\n    = note: expected closure signature `fn(&(u32, u32)) -> _`\n               found closure signature `fn((u32, u32)) -> _`\n note: required by a bound in `map`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+help: consider borrowing the argument\n+   |\n+LL |     a.iter().map(|_: &(u32, u32)| 45);\n+   |                      +\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-arg-type-mismatch.rs:4:14"}, {"sha": "a6764a1dc6d31675bdc009c343bf93dabda2af0f", "filename": "tests/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5f2ad80e183a629eac81f543cee9a1c054aae3fb/tests%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f2ad80e183a629eac81f543cee9a1c054aae3fb/tests%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=5f2ad80e183a629eac81f543cee9a1c054aae3fb", "patch": "@@ -2,16 +2,18 @@ error[E0631]: type mismatch in closure arguments\n   --> $DIR/issue-36053-2.rs:7:32\n    |\n LL |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n-   |                                ^^^^^^ ---------\n-   |                                |      |   |\n-   |                                |      |   help: consider borrowing the argument: `&&str`\n-   |                                |      found signature defined here\n+   |                                ^^^^^^ --------- found signature defined here\n+   |                                |\n    |                                expected due to this\n    |\n    = note: expected closure signature `for<'a> fn(&'a &str) -> _`\n               found closure signature `for<'a> fn(&'a str) -> _`\n note: required by a bound in `filter`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+help: consider borrowing the argument\n+   |\n+LL |     once::<&str>(\"str\").fuse().filter(|a: &&str| true).count();\n+   |                                           +\n \n error[E0599]: the method `count` exists for struct `Filter<Fuse<Once<&str>>, [closure@issue-36053-2.rs:7:39]>`, but its trait bounds were not satisfied\n   --> $DIR/issue-36053-2.rs:7:55"}]}