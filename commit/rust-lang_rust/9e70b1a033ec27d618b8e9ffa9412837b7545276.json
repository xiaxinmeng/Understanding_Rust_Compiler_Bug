{"sha": "9e70b1a033ec27d618b8e9ffa9412837b7545276", "node_id": "C_kwDOAAsO6NoAKDllNzBiMWEwMzNlYzI3ZDYxOGI4ZTlmZmE5NDEyODM3Yjc1NDUyNzY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-11T19:29:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-11T19:29:45Z"}, "message": "Rollup merge of #94827 - RalfJung:offset-from-ub, r=oli-obk\n\nCTFE/Miri: detect out-of-bounds pointers in offset_from\n\nAlso I became uneasy with aggressively doing `try_to_int` here -- this will always succeed on Miri, leading to the wrong codepath being taken. We should rather try to convert them both to pointers, and use the integer path as a fallback, so that's what I implemented now.\n\nHiding whitespaces helps with the diff.\n\nFixes https://github.com/rust-lang/miri/issues/1950\n\nr? ``@oli-obk``", "tree": {"sha": "7a0c67489ce634e50e75f272b9c3c9c4d6fc5b3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a0c67489ce634e50e75f272b9c3c9c4d6fc5b3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e70b1a033ec27d618b8e9ffa9412837b7545276", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiK6MqCRBK7hj4Ov3rIwAA8gYIAJHStoMRHTLCQcRGvPR+wxzN\n6cL7Y+Kg0wD+VKuJRps8qsKuApP0/xMgrX3SMVi9GcRfPgeKZE9yAJf4ADj6Ub5c\n9wvum7Q0MnzhNs4qij1Dn3aiuU0Yju2wysZVcDOt4u/Cb23xVD/2jv2Czz4YRdzW\nxQB+zPJ15ux+supfam8CoiStq0te+MHArSDS8YYbXT/NAwZgHclxFbdn2QOHB1wz\n05kLwrf3BqHc9obrovcBPMLwwc/aG3QCfLdx4aU4e640ezBfbCS1ZWjBF/L0PkSM\nX70Efox5eHD+3UEU+izFZLDKos1gE895Ny6HYuxsVynjmNZTfcjrhvehDjJEBNg=\n=FWYe\n-----END PGP SIGNATURE-----\n", "payload": "tree 7a0c67489ce634e50e75f272b9c3c9c4d6fc5b3a\nparent fedf70acb1e8a51c36a970bf20aa4e6febf815f9\nparent 63ed8e41ce1f126827055b3b6b35db734d3cca28\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1647026985 +0100\ncommitter GitHub <noreply@github.com> 1647026985 +0100\n\nRollup merge of #94827 - RalfJung:offset-from-ub, r=oli-obk\n\nCTFE/Miri: detect out-of-bounds pointers in offset_from\n\nAlso I became uneasy with aggressively doing `try_to_int` here -- this will always succeed on Miri, leading to the wrong codepath being taken. We should rather try to convert them both to pointers, and use the integer path as a fallback, so that's what I implemented now.\n\nHiding whitespaces helps with the diff.\n\nFixes https://github.com/rust-lang/miri/issues/1950\n\nr? ``@oli-obk``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e70b1a033ec27d618b8e9ffa9412837b7545276", "html_url": "https://github.com/rust-lang/rust/commit/9e70b1a033ec27d618b8e9ffa9412837b7545276", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e70b1a033ec27d618b8e9ffa9412837b7545276/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fedf70acb1e8a51c36a970bf20aa4e6febf815f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/fedf70acb1e8a51c36a970bf20aa4e6febf815f9", "html_url": "https://github.com/rust-lang/rust/commit/fedf70acb1e8a51c36a970bf20aa4e6febf815f9"}, {"sha": "63ed8e41ce1f126827055b3b6b35db734d3cca28", "url": "https://api.github.com/repos/rust-lang/rust/commits/63ed8e41ce1f126827055b3b6b35db734d3cca28", "html_url": "https://github.com/rust-lang/rust/commit/63ed8e41ce1f126827055b3b6b35db734d3cca28"}], "stats": {"total": 148, "additions": 101, "deletions": 47}, "files": [{"sha": "a39ef22ec0834a561304aeba5fa0ac5ba668e71f", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 42, "deletions": 38, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/9e70b1a033ec27d618b8e9ffa9412837b7545276/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e70b1a033ec27d618b8e9ffa9412837b7545276/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=9e70b1a033ec27d618b8e9ffa9412837b7545276", "patch": "@@ -307,53 +307,57 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.write_pointer(offset_ptr, dest)?;\n             }\n             sym::ptr_offset_from => {\n-                let a = self.read_immediate(&args[0])?.to_scalar()?;\n-                let b = self.read_immediate(&args[1])?.to_scalar()?;\n+                let a = self.read_pointer(&args[0])?;\n+                let b = self.read_pointer(&args[1])?;\n \n                 // Special case: if both scalars are *equal integers*\n                 // and not null, we pretend there is an allocation of size 0 right there,\n                 // and their offset is 0. (There's never a valid object at null, making it an\n                 // exception from the exception.)\n                 // This is the dual to the special exception for offset-by-0\n-                // in the inbounds pointer offset operation (see the Miri code, `src/operator.rs`).\n-                //\n-                // Control flow is weird because we cannot early-return (to reach the\n-                // `go_to_block` at the end).\n-                let done = if let (Ok(a), Ok(b)) = (a.try_to_int(), b.try_to_int()) {\n-                    let a = a.try_to_machine_usize(*self.tcx).unwrap();\n-                    let b = b.try_to_machine_usize(*self.tcx).unwrap();\n-                    if a == b && a != 0 {\n+                // in the inbounds pointer offset operation (see `ptr_offset_inbounds` below).\n+                match (self.memory.ptr_try_get_alloc(a), self.memory.ptr_try_get_alloc(b)) {\n+                    (Err(a), Err(b)) if a == b && a != 0 => {\n+                        // Both are the same non-null integer.\n                         self.write_scalar(Scalar::from_machine_isize(0, self), dest)?;\n-                        true\n-                    } else {\n-                        false\n                     }\n-                } else {\n-                    false\n-                };\n-\n-                if !done {\n-                    // General case: we need two pointers.\n-                    let a = self.scalar_to_ptr(a);\n-                    let b = self.scalar_to_ptr(b);\n-                    let (a_alloc_id, a_offset, _) = self.memory.ptr_get_alloc(a)?;\n-                    let (b_alloc_id, b_offset, _) = self.memory.ptr_get_alloc(b)?;\n-                    if a_alloc_id != b_alloc_id {\n-                        throw_ub_format!(\n-                            \"ptr_offset_from cannot compute offset of pointers into different \\\n-                            allocations.\",\n-                        );\n+                    (Err(offset), _) | (_, Err(offset)) => {\n+                        throw_ub!(DanglingIntPointer(offset, CheckInAllocMsg::OffsetFromTest));\n+                    }\n+                    (Ok((a_alloc_id, a_offset, _)), Ok((b_alloc_id, b_offset, _))) => {\n+                        // Both are pointers. They must be into the same allocation.\n+                        if a_alloc_id != b_alloc_id {\n+                            throw_ub_format!(\n+                                \"ptr_offset_from cannot compute offset of pointers into different \\\n+                                allocations.\",\n+                            );\n+                        }\n+                        // And they must both be valid for zero-sized accesses (\"in-bounds or one past the end\").\n+                        self.memory.check_ptr_access_align(\n+                            a,\n+                            Size::ZERO,\n+                            Align::ONE,\n+                            CheckInAllocMsg::OffsetFromTest,\n+                        )?;\n+                        self.memory.check_ptr_access_align(\n+                            b,\n+                            Size::ZERO,\n+                            Align::ONE,\n+                            CheckInAllocMsg::OffsetFromTest,\n+                        )?;\n+\n+                        // Compute offset.\n+                        let usize_layout = self.layout_of(self.tcx.types.usize)?;\n+                        let isize_layout = self.layout_of(self.tcx.types.isize)?;\n+                        let a_offset = ImmTy::from_uint(a_offset.bytes(), usize_layout);\n+                        let b_offset = ImmTy::from_uint(b_offset.bytes(), usize_layout);\n+                        let (val, _overflowed, _ty) =\n+                            self.overflowing_binary_op(BinOp::Sub, &a_offset, &b_offset)?;\n+                        let pointee_layout = self.layout_of(substs.type_at(0))?;\n+                        let val = ImmTy::from_scalar(val, isize_layout);\n+                        let size = ImmTy::from_int(pointee_layout.size.bytes(), isize_layout);\n+                        self.exact_div(&val, &size, dest)?;\n                     }\n-                    let usize_layout = self.layout_of(self.tcx.types.usize)?;\n-                    let isize_layout = self.layout_of(self.tcx.types.isize)?;\n-                    let a_offset = ImmTy::from_uint(a_offset.bytes(), usize_layout);\n-                    let b_offset = ImmTy::from_uint(b_offset.bytes(), usize_layout);\n-                    let (val, _overflowed, _ty) =\n-                        self.overflowing_binary_op(BinOp::Sub, &a_offset, &b_offset)?;\n-                    let pointee_layout = self.layout_of(substs.type_at(0))?;\n-                    let val = ImmTy::from_scalar(val, isize_layout);\n-                    let size = ImmTy::from_int(pointee_layout.size.bytes(), isize_layout);\n-                    self.exact_div(&val, &size, dest)?;\n                 }\n             }\n "}, {"sha": "6397fcaaf8d10844823f6990034488f4eeb25173", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e70b1a033ec27d618b8e9ffa9412837b7545276/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e70b1a033ec27d618b8e9ffa9412837b7545276/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=9e70b1a033ec27d618b8e9ffa9412837b7545276", "patch": "@@ -388,9 +388,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 CheckInAllocMsg::DerefTest | CheckInAllocMsg::MemoryAccessTest => {\n                     AllocCheck::Dereferenceable\n                 }\n-                CheckInAllocMsg::PointerArithmeticTest | CheckInAllocMsg::InboundsTest => {\n-                    AllocCheck::Live\n-                }\n+                CheckInAllocMsg::PointerArithmeticTest\n+                | CheckInAllocMsg::OffsetFromTest\n+                | CheckInAllocMsg::InboundsTest => AllocCheck::Live,\n             };\n             let (size, align) = self.get_size_and_align(alloc_id, check)?;\n             Ok((size, align, ()))"}, {"sha": "c97865904769820f5793b94e54b6f98a8e09d4dc", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e70b1a033ec27d618b8e9ffa9412837b7545276/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e70b1a033ec27d618b8e9ffa9412837b7545276/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=9e70b1a033ec27d618b8e9ffa9412837b7545276", "patch": "@@ -184,6 +184,8 @@ pub enum CheckInAllocMsg {\n     MemoryAccessTest,\n     /// We are doing pointer arithmetic.\n     PointerArithmeticTest,\n+    /// We are doing pointer offset_from.\n+    OffsetFromTest,\n     /// None of the above -- generic/unspecific inbounds test.\n     InboundsTest,\n }\n@@ -199,6 +201,7 @@ impl fmt::Display for CheckInAllocMsg {\n                 CheckInAllocMsg::DerefTest => \"dereferencing pointer failed: \",\n                 CheckInAllocMsg::MemoryAccessTest => \"memory access failed: \",\n                 CheckInAllocMsg::PointerArithmeticTest => \"pointer arithmetic failed: \",\n+                CheckInAllocMsg::OffsetFromTest => \"out-of-bounds offset_from: \",\n                 CheckInAllocMsg::InboundsTest => \"\",\n             }\n         )\n@@ -358,6 +361,9 @@ impl fmt::Display for UndefinedBehaviorInfo<'_> {\n             DanglingIntPointer(0, CheckInAllocMsg::InboundsTest) => {\n                 write!(f, \"null pointer is not a valid pointer for this operation\")\n             }\n+            DanglingIntPointer(0, msg) => {\n+                write!(f, \"{}null pointer is not a valid pointer\", msg)\n+            }\n             DanglingIntPointer(i, msg) => {\n                 write!(f, \"{}0x{:x} is not a valid pointer\", msg, i)\n             }"}, {"sha": "fee61907eb3caa8d593239a7c26c999a99a8fc3d", "filename": "src/test/ui/consts/offset_from_ub.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9e70b1a033ec27d618b8e9ffa9412837b7545276/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e70b1a033ec27d618b8e9ffa9412837b7545276/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.rs?ref=9e70b1a033ec27d618b8e9ffa9412837b7545276", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_ptr_offset_from)]\n+#![feature(const_ptr_offset_from, const_ptr_offset)]\n #![feature(core_intrinsics)]\n \n use std::intrinsics::ptr_offset_from;\n@@ -44,4 +44,30 @@ pub const DIFFERENT_INT: isize = { // offset_from with two different integers: l\n     //~| 0x10 is not a valid pointer\n };\n \n+const OUT_OF_BOUNDS_1: isize = {\n+    let start_ptr = &4 as *const _ as *const u8;\n+    let length = 10;\n+    let end_ptr = (start_ptr).wrapping_add(length);\n+    // First ptr is out of bounds\n+    unsafe { ptr_offset_from(end_ptr, start_ptr) } //~ERROR evaluation of constant value failed\n+    //~| pointer at offset 10 is out-of-bounds\n+};\n+\n+const OUT_OF_BOUNDS_2: isize = {\n+    let start_ptr = &4 as *const _ as *const u8;\n+    let length = 10;\n+    let end_ptr = (start_ptr).wrapping_add(length);\n+    // Second ptr is out of bounds\n+    unsafe { ptr_offset_from(start_ptr, end_ptr) } //~ERROR evaluation of constant value failed\n+    //~| pointer at offset 10 is out-of-bounds\n+};\n+\n+const OUT_OF_BOUNDS_SAME: isize = {\n+    let start_ptr = &4 as *const _ as *const u8;\n+    let length = 10;\n+    let end_ptr = (start_ptr).wrapping_add(length);\n+    unsafe { ptr_offset_from(end_ptr, end_ptr) } //~ERROR evaluation of constant value failed\n+    //~| pointer at offset 10 is out-of-bounds\n+};\n+\n fn main() {}"}, {"sha": "4d60d4df203b33d4659513cf21a07ae7a540a2a9", "filename": "src/test/ui/consts/offset_from_ub.stderr", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9e70b1a033ec27d618b8e9ffa9412837b7545276/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e70b1a033ec27d618b8e9ffa9412837b7545276/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr?ref=9e70b1a033ec27d618b8e9ffa9412837b7545276", "patch": "@@ -10,7 +10,7 @@ error[E0080]: evaluation of constant value failed\n LL |         unsafe { intrinsics::ptr_offset_from(self, origin) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  0x2a is not a valid pointer\n+   |                  out-of-bounds offset_from: 0x2a is not a valid pointer\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset_from` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n   ::: $DIR/offset_from_ub.rs:23:14\n@@ -28,14 +28,32 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/offset_from_ub.rs:36:14\n    |\n LL |     unsafe { ptr_offset_from(ptr, ptr) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ null pointer is not a valid pointer for this operation\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: null pointer is not a valid pointer\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/offset_from_ub.rs:43:14\n    |\n LL |     unsafe { ptr_offset_from(ptr2, ptr1) }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ 0x10 is not a valid pointer\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: 0x10 is not a valid pointer\n \n-error: aborting due to 5 previous errors\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/offset_from_ub.rs:52:14\n+   |\n+LL |     unsafe { ptr_offset_from(end_ptr, start_ptr) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: alloc18 has size 4, so pointer at offset 10 is out-of-bounds\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/offset_from_ub.rs:61:14\n+   |\n+LL |     unsafe { ptr_offset_from(start_ptr, end_ptr) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: alloc21 has size 4, so pointer at offset 10 is out-of-bounds\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/offset_from_ub.rs:69:14\n+   |\n+LL |     unsafe { ptr_offset_from(end_ptr, end_ptr) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: alloc24 has size 4, so pointer at offset 10 is out-of-bounds\n+\n+error: aborting due to 8 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "237950a30e841ba7fc56eb040446d91cf9775354", "filename": "src/test/ui/consts/offset_ub.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e70b1a033ec27d618b8e9ffa9412837b7545276/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e70b1a033ec27d618b8e9ffa9412837b7545276/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr?ref=9e70b1a033ec27d618b8e9ffa9412837b7545276", "patch": "@@ -144,7 +144,7 @@ error[E0080]: evaluation of constant value failed\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  pointer arithmetic failed: 0x0 is not a valid pointer\n+   |                  pointer arithmetic failed: null pointer is not a valid pointer\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n   ::: $DIR/offset_ub.rs:22:50"}]}