{"sha": "45677b453c191124138950f20d11b52a9a9407f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1Njc3YjQ1M2MxOTExMjQxMzg5NTBmMjBkMTFiNTJhOWE5NDA3ZjE=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-05T05:44:49Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-05T05:44:49Z"}, "message": "Rename memory \"values\" to \"allocations\".", "tree": {"sha": "6b4327af95fb808923b235a92e54b039e80a48a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b4327af95fb808923b235a92e54b039e80a48a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45677b453c191124138950f20d11b52a9a9407f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45677b453c191124138950f20d11b52a9a9407f1", "html_url": "https://github.com/rust-lang/rust/commit/45677b453c191124138950f20d11b52a9a9407f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45677b453c191124138950f20d11b52a9a9407f1/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d9a91d0f704dbc61afe30b6a0b2a0f158383ce5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d9a91d0f704dbc61afe30b6a0b2a0f158383ce5", "html_url": "https://github.com/rust-lang/rust/commit/3d9a91d0f704dbc61afe30b6a0b2a0f158383ce5"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "bc3ce81bdae2d75645cdac84a9aa4ee3673eab03", "filename": "src/interpreter.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/45677b453c191124138950f20d11b52a9a9407f1/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45677b453c191124138950f20d11b52a9a9407f1/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=45677b453c191124138950f20d11b52a9a9407f1", "patch": "@@ -30,16 +30,15 @@ mod memory {\n \n     pub struct Memory {\n         next_id: u64,\n-        alloc_map: HashMap<u64, Value>,\n+        alloc_map: HashMap<u64, Allocation>,\n     }\n \n     #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n     pub struct AllocId(u64);\n \n-    // TODO(tsion): Shouldn't clone Values. (Audit the rest of the code.)\n-    // TODO(tsion): Rename to Allocation.\n+    // TODO(tsion): Shouldn't clone Allocation. (Audit the rest of the code.)\n     #[derive(Clone, Debug)]\n-    pub struct Value {\n+    pub struct Allocation {\n         pub bytes: Vec<u8>,\n         // TODO(tsion): relocations\n         // TODO(tsion): undef mask\n@@ -74,8 +73,8 @@ mod memory {\n \n         pub fn allocate_raw(&mut self, size: usize) -> AllocId {\n             let id = AllocId(self.next_id);\n-            let val = Value { bytes: vec![0; size] };\n-            self.alloc_map.insert(self.next_id, val);\n+            let alloc = Allocation { bytes: vec![0; size] };\n+            self.alloc_map.insert(self.next_id, alloc);\n             self.next_id += 1;\n             id\n         }\n@@ -90,22 +89,22 @@ mod memory {\n \n         pub fn allocate_int(&mut self, n: i64) -> AllocId {\n             let id = self.allocate_raw(mem::size_of::<i64>());\n-            byteorder::NativeEndian::write_i64(&mut self.value_mut(id).unwrap().bytes, n);\n+            byteorder::NativeEndian::write_i64(&mut self.get_mut(id).unwrap().bytes, n);\n             id\n         }\n \n-        pub fn value(&self, id: AllocId) -> EvalResult<&Value> {\n+        pub fn get(&self, id: AllocId) -> EvalResult<&Allocation> {\n             self.alloc_map.get(&id.0).ok_or(EvalError::DanglingPointerDeref)\n         }\n \n-        pub fn value_mut(&mut self, id: AllocId) -> EvalResult<&mut Value> {\n+        pub fn get_mut(&mut self, id: AllocId) -> EvalResult<&mut Allocation> {\n             self.alloc_map.get_mut(&id.0).ok_or(EvalError::DanglingPointerDeref)\n         }\n \n         pub fn copy(&mut self, src: &Pointer, dest: &Pointer, size: usize) -> EvalResult<()> {\n-            let src_bytes = try!(self.value_mut(src.alloc_id))\n+            let src_bytes = try!(self.get_mut(src.alloc_id))\n                 .bytes[src.offset..src.offset + size].as_mut_ptr();\n-            let dest_bytes = try!(self.value_mut(dest.alloc_id))\n+            let dest_bytes = try!(self.get_mut(dest.alloc_id))\n                 .bytes[dest.offset..dest.offset + size].as_mut_ptr();\n \n             // SAFE: The above indexing would have panicked if there weren't at least `size` bytes\n@@ -158,7 +157,7 @@ mod memory {\n         }\n     }\n }\n-use self::memory::{Pointer, Repr, Value};\n+use self::memory::{Pointer, Repr, Allocation};\n \n #[derive(Clone, Debug)]\n pub enum EvalError {\n@@ -300,7 +299,7 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n     //     ptr\n     // }\n \n-    fn call(&mut self, mir: &Mir, args: &[Value], return_ptr: Option<Pointer>) -> EvalResult<()> {\n+    fn call(&mut self, mir: &Mir, args: &[Allocation], return_ptr: Option<Pointer>) -> EvalResult<()> {\n         self.return_ptr = return_ptr;\n         // self.push_stack_frame(mir, args, return_ptr);\n         let mut block = mir::START_BLOCK;\n@@ -453,8 +452,8 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n     fn eval_binary_op(&mut self, bin_op: mir::BinOp, left: Pointer, right: Pointer, dest: &Pointer) {\n         match (left.repr, right.repr, &dest.repr) {\n             (Repr::Int, Repr::Int, &Repr::Int) => {\n-                let l = byteorder::NativeEndian::read_i64(&self.memory.value(left.alloc_id).unwrap().bytes);\n-                let r = byteorder::NativeEndian::read_i64(&self.memory.value(right.alloc_id).unwrap().bytes);\n+                let l = byteorder::NativeEndian::read_i64(&self.memory.get(left.alloc_id).unwrap().bytes);\n+                let r = byteorder::NativeEndian::read_i64(&self.memory.get(right.alloc_id).unwrap().bytes);\n                 let n = match bin_op {\n                     mir::BinOp::Add    => l + r,\n                     mir::BinOp::Sub    => l - r,\n@@ -474,7 +473,7 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n                     // mir::BinOp::Ge     => Value::Bool(l >= r),\n                     // mir::BinOp::Gt     => Value::Bool(l > r),\n                 };\n-                byteorder::NativeEndian::write_i64(&mut self.memory.value_mut(dest.alloc_id).unwrap().bytes, n);\n+                byteorder::NativeEndian::write_i64(&mut self.memory.get_mut(dest.alloc_id).unwrap().bytes, n);\n             }\n             (ref l, ref r, ref o) =>\n                 panic!(\"unhandled binary operation: {:?}({:?}, {:?}) into {:?}\", bin_op, l, r, o),\n@@ -496,13 +495,13 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n \n             mir::Rvalue::UnaryOp(un_op, ref operand) => {\n                 let ptr = try!(self.operand_to_ptr(operand));\n-                let m = byteorder::NativeEndian::read_i64(&self.memory.value(ptr.alloc_id).unwrap().bytes);\n+                let m = byteorder::NativeEndian::read_i64(&self.memory.get(ptr.alloc_id).unwrap().bytes);\n                 let n = match (un_op, ptr.repr) {\n                     (mir::UnOp::Not, Repr::Int) => !m,\n                     (mir::UnOp::Neg, Repr::Int) => -m,\n                     (_, ref p) => panic!(\"unhandled binary operation: {:?}({:?})\", un_op, p),\n                 };\n-                byteorder::NativeEndian::write_i64(&mut self.memory.value_mut(dest.alloc_id).unwrap().bytes, n);\n+                byteorder::NativeEndian::write_i64(&mut self.memory.get_mut(dest.alloc_id).unwrap().bytes, n);\n             }\n \n             mir::Rvalue::Aggregate(mir::AggregateKind::Tuple, ref operands) => {\n@@ -601,7 +600,7 @@ pub fn interpret_start_points<'tcx>(tcx: &TyCtxt<'tcx>, mir_map: &MirMap<'tcx>)\n                 miri.call(mir, &[], return_ptr.clone()).unwrap();\n \n                 if let Some(ret) = return_ptr {\n-                    println!(\"Returned: {:?}\\n\", miri.memory.value(ret.alloc_id).unwrap());\n+                    println!(\"Returned: {:?}\\n\", miri.memory.get(ret.alloc_id).unwrap());\n                 }\n             }\n         }"}]}