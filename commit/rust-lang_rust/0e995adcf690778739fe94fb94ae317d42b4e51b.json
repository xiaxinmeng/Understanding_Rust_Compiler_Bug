{"sha": "0e995adcf690778739fe94fb94ae317d42b4e51b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlOTk1YWRjZjY5MDc3ODczOWZlOTRmYjk0YWUzMTdkNDJiNGU1MWI=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-28T19:39:43Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-28T19:39:43Z"}, "message": "Turn Ty::Tuple variant into a tuple-variant", "tree": {"sha": "5f15802e2bac7e1752d3c3d493ea39bc97ccaec9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f15802e2bac7e1752d3c3d493ea39bc97ccaec9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e995adcf690778739fe94fb94ae317d42b4e51b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e995adcf690778739fe94fb94ae317d42b4e51b", "html_url": "https://github.com/rust-lang/rust/commit/0e995adcf690778739fe94fb94ae317d42b4e51b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e995adcf690778739fe94fb94ae317d42b4e51b/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fc137b70f9d455676cc99a1a5c7e6e10c3e7cc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fc137b70f9d455676cc99a1a5c7e6e10c3e7cc2", "html_url": "https://github.com/rust-lang/rust/commit/2fc137b70f9d455676cc99a1a5c7e6e10c3e7cc2"}], "stats": {"total": 42, "additions": 20, "deletions": 22}, "files": [{"sha": "1c31e29ac02a543c1a0e6856bdefab34675084eb", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e995adcf690778739fe94fb94ae317d42b4e51b/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e995adcf690778739fe94fb94ae317d42b4e51b/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=0e995adcf690778739fe94fb94ae317d42b4e51b", "patch": "@@ -1547,7 +1547,7 @@ impl Type {\n     }\n \n     pub fn is_unit(&self) -> bool {\n-        matches!(self.ty.value, Ty::Tuple { cardinality: 0, .. })\n+        matches!(self.ty.value, Ty::Tuple(0, ..))\n     }\n     pub fn is_bool(&self) -> bool {\n         matches!(self.ty.value, Ty::Scalar(Scalar::Bool))\n@@ -1741,7 +1741,7 @@ impl Type {\n     }\n \n     pub fn tuple_fields(&self, _db: &dyn HirDatabase) -> Vec<Type> {\n-        if let Ty::Tuple { substs, .. } = &self.ty.value {\n+        if let Ty::Tuple(_, substs) = &self.ty.value {\n             substs.iter().map(|ty| self.derived(ty.clone())).collect()\n         } else {\n             Vec::new()"}, {"sha": "666bb1f9da671483e51cf40cbda7f32115477a57", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e995adcf690778739fe94fb94ae317d42b4e51b/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e995adcf690778739fe94fb94ae317d42b4e51b/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=0e995adcf690778739fe94fb94ae317d42b4e51b", "patch": "@@ -330,7 +330,7 @@ impl HirDisplay for Ty {\n                     write!(f, \"{}\", ty_display)?;\n                 }\n             }\n-            Ty::Tuple { substs, .. } => {\n+            Ty::Tuple(_, substs) => {\n                 if substs.len() == 1 {\n                     write!(f, \"(\")?;\n                     substs[0].hir_fmt(f)?;"}, {"sha": "13240f790826f02c3eddb552fdd1a55df130eb3a", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e995adcf690778739fe94fb94ae317d42b4e51b/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e995adcf690778739fe94fb94ae317d42b4e51b/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=0e995adcf690778739fe94fb94ae317d42b4e51b", "patch": "@@ -82,7 +82,7 @@ impl<'a> InferenceContext<'a> {\n             arg_tys.push(arg);\n         }\n         let parameters = param_builder.build();\n-        let arg_ty = Ty::Tuple { cardinality: num_args as u16, substs: parameters };\n+        let arg_ty = Ty::Tuple(num_args, parameters);\n         let substs =\n             Substs::build_for_generics(&generic_params).push(ty.clone()).push(arg_ty).build();\n \n@@ -424,7 +424,7 @@ impl<'a> InferenceContext<'a> {\n                     },\n                 )\n                 .find_map(|derefed_ty| match canonicalized.decanonicalize_ty(derefed_ty.value) {\n-                    Ty::Tuple { substs, .. } => {\n+                    Ty::Tuple(_, substs) => {\n                         name.as_tuple_index().and_then(|idx| substs.0.get(idx).cloned())\n                     }\n                     Ty::Adt(AdtId::StructId(s), parameters) => {\n@@ -635,7 +635,7 @@ impl<'a> InferenceContext<'a> {\n             }\n             Expr::Tuple { exprs } => {\n                 let mut tys = match &expected.ty {\n-                    Ty::Tuple { substs, .. } => substs\n+                    Ty::Tuple(_, substs) => substs\n                         .iter()\n                         .cloned()\n                         .chain(repeat_with(|| self.table.new_type_var()))\n@@ -648,7 +648,7 @@ impl<'a> InferenceContext<'a> {\n                     self.infer_expr_coerce(*expr, &Expectation::has_type(ty.clone()));\n                 }\n \n-                Ty::Tuple { cardinality: tys.len() as u16, substs: Substs(tys.into()) }\n+                Ty::Tuple(tys.len(), Substs(tys.into()))\n             }\n             Expr::Array(array) => {\n                 let elem_ty = match &expected.ty {"}, {"sha": "a318e47f3badddeacc8b4345b8d09370972cdb3b", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e995adcf690778739fe94fb94ae317d42b4e51b/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e995adcf690778739fe94fb94ae317d42b4e51b/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=0e995adcf690778739fe94fb94ae317d42b4e51b", "patch": "@@ -138,7 +138,7 @@ impl<'a> InferenceContext<'a> {\n                 inner_tys.extend(expectations_iter.by_ref().take(n_uncovered_patterns).cloned());\n                 inner_tys.extend(post.iter().zip(expectations_iter).map(infer_pat));\n \n-                Ty::Tuple { cardinality: inner_tys.len() as u16, substs: Substs(inner_tys.into()) }\n+                Ty::Tuple(inner_tys.len(), Substs(inner_tys.into()))\n             }\n             Pat::Or(ref pats) => {\n                 if let Some((first_pat, rest)) = pats.split_first() {"}, {"sha": "3d134453f5c73813c762fbb9aa1e1b61d9f3e02d", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0e995adcf690778739fe94fb94ae317d42b4e51b/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e995adcf690778739fe94fb94ae317d42b4e51b/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=0e995adcf690778739fe94fb94ae317d42b4e51b", "patch": "@@ -120,7 +120,7 @@ pub enum Ty {\n     Scalar(Scalar),\n \n     /// A tuple type.  For example, `(i32, bool)`.\n-    Tuple { cardinality: u16, substs: Substs },\n+    Tuple(usize, Substs),\n \n     /// An array with the given length. Written as `[T; n]`.\n     Array(Substs),\n@@ -582,7 +582,7 @@ impl TypeWalk for FnSig {\n \n impl Ty {\n     pub fn unit() -> Self {\n-        Ty::Tuple { cardinality: 0, substs: Substs::empty() }\n+        Ty::Tuple(0, Substs::empty())\n     }\n \n     pub fn fn_ptr(sig: FnSig) -> Self {\n@@ -642,7 +642,7 @@ impl Ty {\n \n     pub fn as_tuple(&self) -> Option<&Substs> {\n         match self {\n-            Ty::Tuple { substs: parameters, .. } => Some(parameters),\n+            Ty::Tuple(_, substs) => Some(substs),\n             _ => None,\n         }\n     }\n@@ -684,9 +684,7 @@ impl Ty {\n                 Ty::FnPtr { num_args, is_varargs, .. },\n                 Ty::FnPtr { num_args: num_args2, is_varargs: is_varargs2, .. },\n             ) => num_args == num_args2 && is_varargs == is_varargs2,\n-            (Ty::Tuple { cardinality, .. }, Ty::Tuple { cardinality: cardinality2, .. }) => {\n-                cardinality == cardinality2\n-            }\n+            (Ty::Tuple(cardinality, _), Ty::Tuple(cardinality2, _)) => cardinality == cardinality2,\n             (Ty::Str, Ty::Str) | (Ty::Never, Ty::Never) => true,\n             (Ty::Scalar(scalar), Ty::Scalar(scalar2)) => scalar == scalar2,\n             _ => false,\n@@ -754,7 +752,7 @@ impl Ty {\n             | Ty::Ref(_, substs)\n             | Ty::FnDef(_, substs)\n             | Ty::FnPtr { substs, .. }\n-            | Ty::Tuple { substs, .. }\n+            | Ty::Tuple(_, substs)\n             | Ty::OpaqueType(_, substs)\n             | Ty::AssociatedType(_, substs)\n             | Ty::ForeignType(_, substs)\n@@ -778,7 +776,7 @@ impl Ty {\n             | Ty::Ref(_, substs)\n             | Ty::FnDef(_, substs)\n             | Ty::FnPtr { substs, .. }\n-            | Ty::Tuple { substs, .. }\n+            | Ty::Tuple(_, substs)\n             | Ty::OpaqueType(_, substs)\n             | Ty::AssociatedType(_, substs)\n             | Ty::ForeignType(_, substs)\n@@ -796,7 +794,7 @@ impl Ty {\n             | Ty::Ref(_, substs)\n             | Ty::FnDef(_, substs)\n             | Ty::FnPtr { substs, .. }\n-            | Ty::Tuple { substs, .. }\n+            | Ty::Tuple(_, substs)\n             | Ty::OpaqueType(_, substs)\n             | Ty::AssociatedType(_, substs)\n             | Ty::ForeignType(_, substs)"}, {"sha": "8295f4c3194f3f268242be4ac3f19aa383719045", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e995adcf690778739fe94fb94ae317d42b4e51b/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e995adcf690778739fe94fb94ae317d42b4e51b/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=0e995adcf690778739fe94fb94ae317d42b4e51b", "patch": "@@ -148,7 +148,7 @@ impl Ty {\n             TypeRef::Never => Ty::Never,\n             TypeRef::Tuple(inner) => {\n                 let inner_tys: Arc<[Ty]> = inner.iter().map(|tr| Ty::from_hir(ctx, tr)).collect();\n-                Ty::Tuple { cardinality: inner_tys.len() as u16, substs: Substs(inner_tys) }\n+                Ty::Tuple(inner_tys.len(), Substs(inner_tys))\n             }\n             TypeRef::Path(path) => {\n                 let (ty, res_) = Ty::from_hir_path(ctx, path);"}, {"sha": "422e61f0adbcf01c73f394845f43fd22e9eb2fc7", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e995adcf690778739fe94fb94ae317d42b4e51b/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e995adcf690778739fe94fb94ae317d42b4e51b/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=0e995adcf690778739fe94fb94ae317d42b4e51b", "patch": "@@ -33,7 +33,7 @@ pub enum TyFingerprint {\n     Scalar(Scalar),\n     Adt(AdtId),\n     Dyn(TraitId),\n-    Tuple { cardinality: u16 },\n+    Tuple(usize),\n     ForeignType(TypeAliasId),\n     FnPtr { num_args: u16, is_varargs: bool },\n }\n@@ -50,7 +50,7 @@ impl TyFingerprint {\n             &Ty::Array(..) => TyFingerprint::Array,\n             &Ty::Scalar(scalar) => TyFingerprint::Scalar(scalar),\n             &Ty::Adt(adt, _) => TyFingerprint::Adt(adt),\n-            &Ty::Tuple { cardinality: u16, .. } => TyFingerprint::Tuple { cardinality: u16 },\n+            &Ty::Tuple(cardinality, _) => TyFingerprint::Tuple(cardinality),\n             &Ty::RawPtr(mutability, ..) => TyFingerprint::RawPtr(mutability),\n             &Ty::ForeignType(alias_id, ..) => TyFingerprint::ForeignType(alias_id),\n             &Ty::FnPtr { num_args, is_varargs, .. } => {"}, {"sha": "09e5a82b8f0a741062ef0ab34f0f475886a5868b", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e995adcf690778739fe94fb94ae317d42b4e51b/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e995adcf690778739fe94fb94ae317d42b4e51b/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=0e995adcf690778739fe94fb94ae317d42b4e51b", "patch": "@@ -63,7 +63,7 @@ impl ToChalk for Ty {\n \n             Ty::Scalar(scalar) => chalk_ir::TyKind::Scalar(scalar).intern(&Interner),\n \n-            Ty::Tuple { cardinality, substs } => {\n+            Ty::Tuple(cardinality, substs) => {\n                 let substitution = substs.to_chalk(db);\n                 chalk_ir::TyKind::Tuple(cardinality.into(), substitution).intern(&Interner)\n             }\n@@ -199,7 +199,7 @@ impl ToChalk for Ty {\n \n             chalk_ir::TyKind::Scalar(scalar) => Ty::Scalar(scalar),\n             chalk_ir::TyKind::Tuple(cardinality, subst) => {\n-                Ty::Tuple { cardinality: cardinality as u16, substs: from_chalk(db, subst) }\n+                Ty::Tuple(cardinality, from_chalk(db, subst))\n             }\n             chalk_ir::TyKind::Raw(mutability, ty) => {\n                 Ty::RawPtr(from_chalk(db, mutability), Substs::single(from_chalk(db, ty)))"}]}