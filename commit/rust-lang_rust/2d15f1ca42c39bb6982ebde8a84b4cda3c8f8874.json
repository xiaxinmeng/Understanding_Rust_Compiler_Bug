{"sha": "2d15f1ca42c39bb6982ebde8a84b4cda3c8f8874", "node_id": "C_kwDOAAsO6NoAKDJkMTVmMWNhNDJjMzliYjY5ODJlYmRlOGE4NGI0Y2RhM2M4Zjg4NzQ", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-07-10T19:25:33Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-07-10T19:25:33Z"}, "message": "Don't try to resolve inference variables in WF computation, just register", "tree": {"sha": "e70d056764a342adc0b8283f9dbd844c01a781f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e70d056764a342adc0b8283f9dbd844c01a781f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d15f1ca42c39bb6982ebde8a84b4cda3c8f8874", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d15f1ca42c39bb6982ebde8a84b4cda3c8f8874", "html_url": "https://github.com/rust-lang/rust/commit/2d15f1ca42c39bb6982ebde8a84b4cda3c8f8874", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d15f1ca42c39bb6982ebde8a84b4cda3c8f8874/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4693bc946729393c087fb120af566395915d19d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4693bc946729393c087fb120af566395915d19d", "html_url": "https://github.com/rust-lang/rust/commit/c4693bc946729393c087fb120af566395915d19d"}], "stats": {"total": 63, "additions": 25, "deletions": 38}, "files": [{"sha": "75330fdf91a2d9bf6a0b382e7a997f5cf7b59e4a", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 17, "deletions": 35, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/2d15f1ca42c39bb6982ebde8a84b4cda3c8f8874/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d15f1ca42c39bb6982ebde8a84b4cda3c8f8874/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=2d15f1ca42c39bb6982ebde8a84b4cda3c8f8874", "patch": "@@ -452,26 +452,16 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                                 predicate,\n                             ));\n                         }\n-                        ty::ConstKind::Infer(infer) => {\n-                            let resolved = self.infcx.shallow_resolve(infer);\n-                            // the `InferConst` changed, meaning that we made progress.\n-                            if resolved != infer {\n-                                let cause = self.cause(traits::WellFormed(None));\n-\n-                                let resolved_constant = self.infcx.tcx.mk_const(ty::ConstS {\n-                                    kind: ty::ConstKind::Infer(resolved),\n-                                    ty: constant.ty(),\n-                                });\n-                                self.out.push(traits::Obligation::with_depth(\n-                                    cause,\n-                                    self.recursion_depth,\n-                                    self.param_env,\n-                                    ty::Binder::dummy(ty::PredicateKind::WellFormed(\n-                                        resolved_constant.into(),\n-                                    ))\n+                        ty::ConstKind::Infer(_) => {\n+                            let cause = self.cause(traits::WellFormed(None));\n+\n+                            self.out.push(traits::Obligation::with_depth(\n+                                cause,\n+                                self.recursion_depth,\n+                                self.param_env,\n+                                ty::Binder::dummy(ty::PredicateKind::WellFormed(constant.into()))\n                                     .to_predicate(self.tcx()),\n-                                ));\n-                            }\n+                            ));\n                         }\n                         ty::ConstKind::Error(_)\n                         | ty::ConstKind::Param(_)\n@@ -675,22 +665,14 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                 // See also the comment on `fn obligations`, describing \"livelock\"\n                 // prevention, which happens before this can be reached.\n                 ty::Infer(_) => {\n-                    let ty = self.infcx.shallow_resolve(ty);\n-                    if let ty::Infer(ty::TyVar(_)) = ty.kind() {\n-                        // Not yet resolved, but we've made progress.\n-                        let cause = self.cause(traits::WellFormed(None));\n-                        self.out.push(traits::Obligation::with_depth(\n-                            cause,\n-                            self.recursion_depth,\n-                            param_env,\n-                            ty::Binder::dummy(ty::PredicateKind::WellFormed(ty.into()))\n-                                .to_predicate(self.tcx()),\n-                        ));\n-                    } else {\n-                        // Yes, resolved, proceed with the result.\n-                        // FIXME(eddyb) add the type to `walker` instead of recursing.\n-                        self.compute(ty.into());\n-                    }\n+                    let cause = self.cause(traits::WellFormed(None));\n+                    self.out.push(traits::Obligation::with_depth(\n+                        cause,\n+                        self.recursion_depth,\n+                        param_env,\n+                        ty::Binder::dummy(ty::PredicateKind::WellFormed(ty.into()))\n+                            .to_predicate(self.tcx()),\n+                    ));\n                 }\n             }\n         }"}, {"sha": "fd905392a21ad230f0240541764287fbf99ca923", "filename": "src/test/ui/issues/issue-98299.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2d15f1ca42c39bb6982ebde8a84b4cda3c8f8874/src%2Ftest%2Fui%2Fissues%2Fissue-98299.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d15f1ca42c39bb6982ebde8a84b4cda3c8f8874/src%2Ftest%2Fui%2Fissues%2Fissue-98299.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-98299.stderr?ref=2d15f1ca42c39bb6982ebde8a84b4cda3c8f8874", "patch": "@@ -1,8 +1,13 @@\n-error[E0282]: type annotations needed\n-  --> $DIR/issue-98299.rs:4:5\n+error[E0282]: type annotations needed for `SmallCString<N>`\n+  --> $DIR/issue-98299.rs:4:36\n    |\n LL |     SmallCString::try_from(p).map(|cstr| cstr);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for enum `Result<SmallCString<{_: usize}>, ()>`\n+   |                                    ^^^^\n+   |\n+help: consider giving this closure parameter an explicit type, where the the value of const parameter `N` is specified\n+   |\n+LL |     SmallCString::try_from(p).map(|cstr: SmallCString<N>| cstr);\n+   |                                        +++++++++++++++++\n \n error: aborting due to previous error\n "}]}