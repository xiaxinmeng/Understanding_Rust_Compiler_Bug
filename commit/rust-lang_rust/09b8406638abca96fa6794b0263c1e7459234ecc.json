{"sha": "09b8406638abca96fa6794b0263c1e7459234ecc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5Yjg0MDY2MzhhYmNhOTZmYTY3OTRiMDI2M2MxZTc0NTkyMzRlY2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-18T05:31:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-18T05:31:47Z"}, "message": "auto merge of #11019 : alexcrichton/rust/issue-10545, r=pcwalton\n\nThis code in resolve accidentally forced all types with an impl to become\r\npublic. This fixes it by default inheriting the privacy of what was previously\r\nthere and then becoming `true` if nothing else exits.\r\n\r\nCloses #10545", "tree": {"sha": "3063349e63d911fea64996a97ae8dac05fdb0781", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3063349e63d911fea64996a97ae8dac05fdb0781"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09b8406638abca96fa6794b0263c1e7459234ecc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09b8406638abca96fa6794b0263c1e7459234ecc", "html_url": "https://github.com/rust-lang/rust/commit/09b8406638abca96fa6794b0263c1e7459234ecc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09b8406638abca96fa6794b0263c1e7459234ecc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac137f6dbe51429de203ea2e900b8bac01f466cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac137f6dbe51429de203ea2e900b8bac01f466cb", "html_url": "https://github.com/rust-lang/rust/commit/ac137f6dbe51429de203ea2e900b8bac01f466cb"}, {"sha": "eabf11b9cb1f1bddeb1208e5564e592d10e4b680", "url": "https://api.github.com/repos/rust-lang/rust/commits/eabf11b9cb1f1bddeb1208e5564e592d10e4b680", "html_url": "https://github.com/rust-lang/rust/commit/eabf11b9cb1f1bddeb1208e5564e592d10e4b680"}], "stats": {"total": 45, "additions": 35, "deletions": 10}, "files": [{"sha": "3b44ad50ad79ab1b3eed09cf12a90a7cf7cb14bb", "filename": "src/libextra/bitv.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/09b8406638abca96fa6794b0263c1e7459234ecc/src%2Flibextra%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b8406638abca96fa6794b0263c1e7459234ecc/src%2Flibextra%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbitv.rs?ref=09b8406638abca96fa6794b0263c1e7459234ecc", "patch": "@@ -932,7 +932,8 @@ impl<'a> Iterator<uint> for BitvSetIterator<'a> {\n mod tests {\n     use extra::test::BenchHarness;\n \n-    use bitv::*;\n+    use bitv::{Bitv, SmallBitv, BigBitv, BitvSet, from_bools, from_fn,\n+               from_bytes};\n     use bitv;\n \n     use std::uint;"}, {"sha": "0f9eba2e9dcd4b72739a0a5120637d38b3c8fbdd", "filename": "src/libextra/btree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09b8406638abca96fa6794b0263c1e7459234ecc/src%2Flibextra%2Fbtree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b8406638abca96fa6794b0263c1e7459234ecc/src%2Flibextra%2Fbtree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbtree.rs?ref=09b8406638abca96fa6794b0263c1e7459234ecc", "patch": "@@ -407,7 +407,7 @@ impl<K: Clone + TotalOrd, V: Clone> Clone for BranchElt<K, V> {\n #[cfg(test)]\n mod test_btree{\n \n-    use super::*;\n+    use super::{BTree, LeafElt};\n \n     ///Tests the functionality of the add methods (which are unfinished).\n     #[test]"}, {"sha": "1546e9ca59cf46e76b037a68590cd604282792ff", "filename": "src/libextra/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09b8406638abca96fa6794b0263c1e7459234ecc/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b8406638abca96fa6794b0263c1e7459234ecc/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=09b8406638abca96fa6794b0263c1e7459234ecc", "patch": "@@ -329,7 +329,7 @@ impl Sem<~[WaitQueue]> {\n  ****************************************************************************/\n \n /// A counting, blocking, bounded-waiting semaphore.\n-struct Semaphore { priv sem: Sem<()> }\n+pub struct Semaphore { priv sem: Sem<()> }\n \n \n impl Clone for Semaphore {"}, {"sha": "8f0c4fe6d234766def08a331c0d806a1ac5c6848", "filename": "src/libextra/test.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09b8406638abca96fa6794b0263c1e7459234ecc/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b8406638abca96fa6794b0263c1e7459234ecc/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=09b8406638abca96fa6794b0263c1e7459234ecc", "patch": "@@ -670,7 +670,6 @@ fn should_sort_failures_before_printing_them() {\n     use std::io::Decorator;\n     use std::io::mem::MemWriter;\n     use std::str;\n-    fn dummy() {}\n \n     let test_a = TestDesc {\n         name: StaticTestName(\"a\"),\n@@ -1296,8 +1295,6 @@ mod tests {\n \n     #[test]\n     pub fn filter_for_ignored_option() {\n-        fn dummy() {}\n-\n         // When we run ignored tests the test filter should filter out all the\n         // unignored tests and flip the ignore flag on the rest to false\n \n@@ -1441,6 +1438,7 @@ mod tests {\n         assert_eq!(diff2.len(), 7);\n     }\n \n+    #[test]\n     pub fn ratchet_test() {\n \n         let dpth = TempDir::new(\"test-ratchet\").expect(\"missing test for ratchet\");"}, {"sha": "1cf980b1059410cbc01f01bc14acff7d6cf21a40", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09b8406638abca96fa6794b0263c1e7459234ecc/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b8406638abca96fa6794b0263c1e7459234ecc/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=09b8406638abca96fa6794b0263c1e7459234ecc", "patch": "@@ -884,7 +884,7 @@ impl<T: TotalOrd> Extendable<T> for TreeSet<T> {\n #[cfg(test)]\n mod test_treemap {\n \n-    use super::*;\n+    use super::{TreeMap, TreeNode};\n \n     use std::rand::Rng;\n     use std::rand;"}, {"sha": "07bcba684cab556e850ded0a51b67fc2d16510e3", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/09b8406638abca96fa6794b0263c1e7459234ecc/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b8406638abca96fa6794b0263c1e7459234ecc/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=09b8406638abca96fa6794b0263c1e7459234ecc", "patch": "@@ -1258,11 +1258,16 @@ impl Resolver {\n                                 let parent_link =\n                                     self.get_parent_link(new_parent, ident);\n                                 let def_id = local_def(item.id);\n+                                let ns = TypeNS;\n+                                let is_public =\n+                                    !name_bindings.defined_in_namespace(ns) ||\n+                                     name_bindings.defined_in_public_namespace(ns);\n+\n                                 name_bindings.define_module(parent_link,\n                                                             Some(def_id),\n                                                             ImplModuleKind,\n                                                             false,\n-                                                            true,\n+                                                            is_public,\n                                                             sp);\n \n                                 ModuleReducedGraphParent("}, {"sha": "c8be404f5ffe8e590a899b8d7ac40142fa0d73cd", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09b8406638abca96fa6794b0263c1e7459234ecc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b8406638abca96fa6794b0263c1e7459234ecc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=09b8406638abca96fa6794b0263c1e7459234ecc", "patch": "@@ -130,7 +130,7 @@ pub fn push_ctxt(s: &'static str) -> _InsnCtxt {\n     _InsnCtxt { _x: () }\n }\n \n-struct StatRecorder<'a> {\n+pub struct StatRecorder<'a> {\n     ccx: @mut CrateContext,\n     name: &'a str,\n     start: u64,"}, {"sha": "4782bb5dd139f4b29042aef99565c26017c88b94", "filename": "src/libstd/hash.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09b8406638abca96fa6794b0263c1e7459234ecc/src%2Flibstd%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b8406638abca96fa6794b0263c1e7459234ecc/src%2Flibstd%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash.rs?ref=09b8406638abca96fa6794b0263c1e7459234ecc", "patch": "@@ -303,6 +303,7 @@ impl Streaming for SipState {\n mod tests {\n     use super::*;\n     use prelude::*;\n+    use super::SipState;\n \n     // Hash just the bytes of the slice, without length prefix\n     struct Bytes<'a>(&'a [u8]);"}, {"sha": "25a3ba8ab48f19064cde20f3922909921e0fbcd0", "filename": "src/libstd/rt/mpmc_bounded_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09b8406638abca96fa6794b0263c1e7459234ecc/src%2Flibstd%2Frt%2Fmpmc_bounded_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b8406638abca96fa6794b0263c1e7459234ecc/src%2Flibstd%2Frt%2Fmpmc_bounded_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmpmc_bounded_queue.rs?ref=09b8406638abca96fa6794b0263c1e7459234ecc", "patch": "@@ -51,7 +51,7 @@ struct State<T> {\n     pad3: [u8, ..64],\n }\n \n-struct Queue<T> {\n+pub struct Queue<T> {\n     priv state: UnsafeArc<State<T>>,\n }\n "}, {"sha": "f6c62bb855720c8956f3b855a7e719cf2d4556e9", "filename": "src/test/compile-fail/issue-10545.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/09b8406638abca96fa6794b0263c1e7459234ecc/src%2Ftest%2Fcompile-fail%2Fissue-10545.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09b8406638abca96fa6794b0263c1e7459234ecc/src%2Ftest%2Fcompile-fail%2Fissue-10545.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10545.rs?ref=09b8406638abca96fa6794b0263c1e7459234ecc", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+mod a {\n+    struct S;\n+    impl S { }\n+}\n+\n+fn foo(_: a::S) { //~ ERROR: type `S` is private\n+}\n+\n+fn main() {}"}]}