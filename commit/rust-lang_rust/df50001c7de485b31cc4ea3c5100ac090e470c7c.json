{"sha": "df50001c7de485b31cc4ea3c5100ac090e470c7c", "node_id": "C_kwDOAAsO6NoAKGRmNTAwMDFjN2RlNDg1YjMxY2M0ZWEzYzUxMDBhYzA5MGU0NzBjN2M", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-11T14:43:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-11T14:43:15Z"}, "message": "Rollup merge of #108806 - cjgillot:query-lints, r=davidtwco\n\nQuerify register_tools and post-expansion early lints\n\nThe 2 extra queries correspond to code that happen before and after macro expansion, and don't need the resolver to exist.", "tree": {"sha": "de137e747189be70c479f028dd576d1067ab9090", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de137e747189be70c479f028dd576d1067ab9090"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df50001c7de485b31cc4ea3c5100ac090e470c7c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkDJODCRBK7hj4Ov3rIwAAjIUIAFgzp4HIhyv5E7T8QHpaehWT\nculmYX3fXWtJUGpd4KWCQRmgPNUonAXuWfG3OmhomGatZAC/fAMpH2WUnnEN94yN\ndZeC4YP9JmtFCHPMBSRz8ZVhr/qx6giET8qBl9wBiztJNzHoQ4//oWdNn0yDgVOC\n9e38Q95rtS2x5C+qEfE6zI70Bj+r9NQGAhqo18Tp63twjHWI4EhsiNe2KJKs14Uf\ncu0bVK6k8qwClDIgc+ZCU+U9G6tqs6ThxcRjagOfL+CaVpa/v2QgDxCULCFCJZAP\ntepq/45UBtCtf7KW3HAJJB/0iXX0de+SwkMQIfwGCWyq+zL0tdCF5MSLe0xMKPg=\n=ymSc\n-----END PGP SIGNATURE-----\n", "payload": "tree de137e747189be70c479f028dd576d1067ab9090\nparent d7372a17872a67bf136426780561bd41783dfdde\nparent c90fc105cba334c37b2773a054d4f234b501b481\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678545795 +0100\ncommitter GitHub <noreply@github.com> 1678545795 +0100\n\nRollup merge of #108806 - cjgillot:query-lints, r=davidtwco\n\nQuerify register_tools and post-expansion early lints\n\nThe 2 extra queries correspond to code that happen before and after macro expansion, and don't need the resolver to exist.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df50001c7de485b31cc4ea3c5100ac090e470c7c", "html_url": "https://github.com/rust-lang/rust/commit/df50001c7de485b31cc4ea3c5100ac090e470c7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df50001c7de485b31cc4ea3c5100ac090e470c7c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7372a17872a67bf136426780561bd41783dfdde", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7372a17872a67bf136426780561bd41783dfdde", "html_url": "https://github.com/rust-lang/rust/commit/d7372a17872a67bf136426780561bd41783dfdde"}, {"sha": "c90fc105cba334c37b2773a054d4f234b501b481", "url": "https://api.github.com/repos/rust-lang/rust/commits/c90fc105cba334c37b2773a054d4f234b501b481", "html_url": "https://github.com/rust-lang/rust/commit/c90fc105cba334c37b2773a054d4f234b501b481"}], "stats": {"total": 114, "additions": 74, "deletions": 40}, "files": [{"sha": "0862db1c34582e339bc8d8a7c3a26ea9c846e8a6", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df50001c7de485b31cc4ea3c5100ac090e470c7c/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df50001c7de485b31cc4ea3c5100ac090e470c7c/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=df50001c7de485b31cc4ea3c5100ac090e470c7c", "patch": "@@ -436,6 +436,7 @@ fn compute_hir_hash(\n pub fn lower_to_hir(tcx: TyCtxt<'_>, (): ()) -> hir::Crate<'_> {\n     let sess = tcx.sess;\n     tcx.ensure().output_filenames(());\n+    let _ = tcx.early_lint_checks(()); // Borrows `resolver_for_lowering`.\n     let (mut resolver, krate) = tcx.resolver_for_lowering(()).steal();\n \n     let ast_index = index_crate(&resolver.node_id_to_def_id, &krate);"}, {"sha": "e321a9847ba06e516181a492ab2796a38e986eb1", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df50001c7de485b31cc4ea3c5100ac090e470c7c/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df50001c7de485b31cc4ea3c5100ac090e470c7c/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=df50001c7de485b31cc4ea3c5100ac090e470c7c", "patch": "@@ -331,6 +331,7 @@ fn run_compiler(\n             if let Some(ppm) = &sess.opts.pretty {\n                 if ppm.needs_ast_map() {\n                     queries.global_ctxt()?.enter(|tcx| {\n+                        tcx.ensure().early_lint_checks(());\n                         pretty::print_after_hir_lowering(tcx, *ppm);\n                         Ok(())\n                     })?;"}, {"sha": "713e4fbbdce2364b855db30b2604080ce2a4409a", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df50001c7de485b31cc4ea3c5100ac090e470c7c/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df50001c7de485b31cc4ea3c5100ac090e470c7c/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=df50001c7de485b31cc4ea3c5100ac090e470c7c", "patch": "@@ -12,13 +12,13 @@ use rustc_ast::tokenstream::TokenStream;\n use rustc_ast::visit::{AssocCtxt, Visitor};\n use rustc_ast::{self as ast, AttrVec, Attribute, HasAttrs, Item, NodeId, PatKind};\n use rustc_attr::{self as attr, Deprecation, Stability};\n-use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n+use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::sync::{self, Lrc};\n use rustc_errors::{\n     Applicability, DiagnosticBuilder, ErrorGuaranteed, IntoDiagnostic, MultiSpan, PResult,\n };\n use rustc_lint_defs::builtin::PROC_MACRO_BACK_COMPAT;\n-use rustc_lint_defs::{BufferedEarlyLint, BuiltinLintDiagnostics};\n+use rustc_lint_defs::{BufferedEarlyLint, BuiltinLintDiagnostics, RegisteredTools};\n use rustc_parse::{self, parser, MACRO_ARGUMENTS};\n use rustc_session::errors::report_lit_error;\n use rustc_session::{parse::ParseSess, Limit, Session};\n@@ -947,14 +947,14 @@ pub trait ResolverExpand {\n     fn declare_proc_macro(&mut self, id: NodeId);\n \n     /// Tools registered with `#![register_tool]` and used by tool attributes and lints.\n-    fn registered_tools(&self) -> &FxHashSet<Ident>;\n+    fn registered_tools(&self) -> &RegisteredTools;\n }\n \n pub trait LintStoreExpand {\n     fn pre_expansion_lint(\n         &self,\n         sess: &Session,\n-        registered_tools: &FxHashSet<Ident>,\n+        registered_tools: &RegisteredTools,\n         node_id: NodeId,\n         attrs: &[Attribute],\n         items: &[P<Item>],"}, {"sha": "4a02981f9543dbd5ff46d28c8fc23142732adbf1", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/df50001c7de485b31cc4ea3c5100ac090e470c7c/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df50001c7de485b31cc4ea3c5100ac090e470c7c/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=df50001c7de485b31cc4ea3c5100ac090e470c7c", "patch": "@@ -11,7 +11,7 @@ use rustc_data_structures::parallel;\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n use rustc_errors::PResult;\n-use rustc_expand::base::{ExtCtxt, LintStoreExpand, ResolverExpand};\n+use rustc_expand::base::{ExtCtxt, LintStoreExpand};\n use rustc_hir::def_id::{StableCrateId, LOCAL_CRATE};\n use rustc_lint::{unerased_lint_store, BufferedEarlyLint, EarlyCheckNode, LintStore};\n use rustc_metadata::creader::CStore;\n@@ -178,7 +178,7 @@ fn configure_and_expand(mut krate: ast::Crate, resolver: &mut Resolver<'_, '_>)\n     let sess = tcx.sess;\n     let lint_store = unerased_lint_store(tcx);\n     let crate_name = tcx.crate_name(LOCAL_CRATE);\n-    pre_expansion_lint(sess, lint_store, resolver.registered_tools(), &krate, crate_name);\n+    pre_expansion_lint(sess, lint_store, tcx.registered_tools(()), &krate, crate_name);\n     rustc_builtin_macros::register_builtin_macros(resolver);\n \n     krate = sess.time(\"crate_injection\", || {\n@@ -302,6 +302,16 @@ fn configure_and_expand(mut krate: ast::Crate, resolver: &mut Resolver<'_, '_>)\n \n     // Done with macro expansion!\n \n+    resolver.resolve_crate(&krate);\n+\n+    krate\n+}\n+\n+fn early_lint_checks(tcx: TyCtxt<'_>, (): ()) {\n+    let sess = tcx.sess;\n+    let (resolver, krate) = &*tcx.resolver_for_lowering(()).borrow();\n+    let mut lint_buffer = resolver.lint_buffer.steal();\n+\n     if sess.opts.unstable_opts.input_stats {\n         eprintln!(\"Post-expansion node count: {}\", count_nodes(&krate));\n     }\n@@ -310,8 +320,6 @@ fn configure_and_expand(mut krate: ast::Crate, resolver: &mut Resolver<'_, '_>)\n         hir_stats::print_ast_stats(&krate, \"POST EXPANSION AST STATS\", \"ast-stats-2\");\n     }\n \n-    resolver.resolve_crate(&krate);\n-\n     // Needs to go *after* expansion to be able to check the results of macro expansion.\n     sess.time(\"complete_gated_feature_checking\", || {\n         rustc_ast_passes::feature_gate::check_crate(&krate, sess);\n@@ -321,7 +329,7 @@ fn configure_and_expand(mut krate: ast::Crate, resolver: &mut Resolver<'_, '_>)\n     sess.parse_sess.buffered_lints.with_lock(|buffered_lints| {\n         info!(\"{} parse sess buffered_lints\", buffered_lints.len());\n         for early_lint in buffered_lints.drain(..) {\n-            resolver.lint_buffer().add_early_lint(early_lint);\n+            lint_buffer.add_early_lint(early_lint);\n         }\n     });\n \n@@ -340,20 +348,16 @@ fn configure_and_expand(mut krate: ast::Crate, resolver: &mut Resolver<'_, '_>)\n         }\n     });\n \n-    sess.time(\"early_lint_checks\", || {\n-        let lint_buffer = Some(std::mem::take(resolver.lint_buffer()));\n-        rustc_lint::check_ast_node(\n-            sess,\n-            false,\n-            lint_store,\n-            resolver.registered_tools(),\n-            lint_buffer,\n-            rustc_lint::BuiltinCombinedEarlyLintPass::new(),\n-            &krate,\n-        )\n-    });\n-\n-    krate\n+    let lint_store = unerased_lint_store(tcx);\n+    rustc_lint::check_ast_node(\n+        sess,\n+        false,\n+        lint_store,\n+        tcx.registered_tools(()),\n+        Some(lint_buffer),\n+        rustc_lint::BuiltinCombinedEarlyLintPass::new(),\n+        &**krate,\n+    )\n }\n \n // Returns all the paths that correspond to generated files.\n@@ -557,6 +561,7 @@ fn resolver_for_lowering<'tcx>(\n     (): (),\n ) -> &'tcx Steal<(ty::ResolverAstLowering, Lrc<ast::Crate>)> {\n     let arenas = Resolver::arenas();\n+    let _ = tcx.registered_tools(()); // Uses `crate_for_resolver`.\n     let krate = tcx.crate_for_resolver(()).steal();\n     let mut resolver = Resolver::new(tcx, &krate, &arenas);\n     let krate = configure_and_expand(krate, &mut resolver);\n@@ -629,6 +634,7 @@ pub static DEFAULT_QUERY_PROVIDERS: LazyLock<Providers> = LazyLock::new(|| {\n     providers.hir_crate = rustc_ast_lowering::lower_to_hir;\n     providers.output_filenames = output_filenames;\n     providers.resolver_for_lowering = resolver_for_lowering;\n+    providers.early_lint_checks = early_lint_checks;\n     proc_macro_decls::provide(providers);\n     rustc_const_eval::provide(providers);\n     rustc_middle::hir::provide(providers);\n@@ -637,6 +643,7 @@ pub static DEFAULT_QUERY_PROVIDERS: LazyLock<Providers> = LazyLock::new(|| {\n     rustc_mir_transform::provide(providers);\n     rustc_monomorphize::provide(providers);\n     rustc_privacy::provide(providers);\n+    rustc_resolve::provide(providers);\n     rustc_hir_analysis::provide(providers);\n     rustc_hir_typeck::provide(providers);\n     ty::provide(providers);"}, {"sha": "a76229dd3524b2ed0ce13a9310817a542317a4cb", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df50001c7de485b31cc4ea3c5100ac090e470c7c/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df50001c7de485b31cc4ea3c5100ac090e470c7c/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=df50001c7de485b31cc4ea3c5100ac090e470c7c", "patch": "@@ -128,7 +128,7 @@ fn lint_expectations(tcx: TyCtxt<'_>, (): ()) -> Vec<(LintExpectationId, LintExp\n         },\n         warn_about_weird_lints: false,\n         store,\n-        registered_tools: &tcx.resolutions(()).registered_tools,\n+        registered_tools: &tcx.registered_tools(()),\n     };\n \n     builder.add_command_line();\n@@ -156,7 +156,7 @@ fn shallow_lint_levels_on(tcx: TyCtxt<'_>, owner: hir::OwnerId) -> ShallowLintLe\n         },\n         warn_about_weird_lints: false,\n         store,\n-        registered_tools: &tcx.resolutions(()).registered_tools,\n+        registered_tools: &tcx.registered_tools(()),\n     };\n \n     if owner == hir::CRATE_OWNER_ID {"}, {"sha": "6f22bdabff450e898fcf3141b718c631427526b9", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/df50001c7de485b31cc4ea3c5100ac090e470c7c/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df50001c7de485b31cc4ea3c5100ac090e470c7c/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=df50001c7de485b31cc4ea3c5100ac090e470c7c", "patch": "@@ -8,7 +8,7 @@ extern crate rustc_macros;\n pub use self::Level::*;\n use rustc_ast::node_id::NodeId;\n use rustc_ast::{AttrId, Attribute};\n-use rustc_data_structures::fx::FxIndexMap;\n+use rustc_data_structures::fx::{FxIndexMap, FxIndexSet};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n use rustc_error_messages::{DiagnosticMessage, MultiSpan};\n use rustc_hir::HashStableContext;\n@@ -533,6 +533,7 @@ pub enum BuiltinLintDiagnostics {\n \n /// Lints that are buffered up early on in the `Session` before the\n /// `LintLevels` is calculated.\n+#[derive(Debug)]\n pub struct BufferedEarlyLint {\n     /// The span of code that we are linting on.\n     pub span: MultiSpan,\n@@ -551,7 +552,7 @@ pub struct BufferedEarlyLint {\n     pub diagnostic: BuiltinLintDiagnostics,\n }\n \n-#[derive(Default)]\n+#[derive(Default, Debug)]\n pub struct LintBuffer {\n     pub map: FxIndexMap<NodeId, Vec<BufferedEarlyLint>>,\n }\n@@ -601,6 +602,8 @@ impl LintBuffer {\n     }\n }\n \n+pub type RegisteredTools = FxIndexSet<Ident>;\n+\n /// Declares a static item of type `&'static Lint`.\n ///\n /// See <https://rustc-dev-guide.rust-lang.org/diagnostics.html> for"}, {"sha": "72907fba5e62ce23712c6a9b21989ad7592907f3", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df50001c7de485b31cc4ea3c5100ac090e470c7c/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df50001c7de485b31cc4ea3c5100ac090e470c7c/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=df50001c7de485b31cc4ea3c5100ac090e470c7c", "patch": "@@ -108,6 +108,7 @@ macro_rules! arena_types {\n             // (during lowering) and the `librustc_middle` arena (for decoding MIR)\n             [decode] asm_template: rustc_ast::InlineAsmTemplatePiece,\n             [decode] used_trait_imports: rustc_data_structures::unord::UnordSet<rustc_hir::def_id::LocalDefId>,\n+            [decode] registered_tools: rustc_middle::ty::RegisteredTools,\n             [decode] is_late_bound_map: rustc_data_structures::fx::FxIndexSet<rustc_hir::ItemLocalId>,\n             [decode] impl_source: rustc_middle::traits::ImplSource<'tcx, ()>,\n "}, {"sha": "ca0243d715faaff85afbb4912db2588c3b97f22c", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/df50001c7de485b31cc4ea3c5100ac090e470c7c/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df50001c7de485b31cc4ea3c5100ac090e470c7c/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=df50001c7de485b31cc4ea3c5100ac090e470c7c", "patch": "@@ -26,6 +26,15 @@ rustc_queries! {\n         desc { \"triggering a delay span bug\" }\n     }\n \n+    query registered_tools(_: ()) -> &'tcx ty::RegisteredTools {\n+        arena_cache\n+        desc { \"compute registered tools for crate\" }\n+    }\n+\n+    query early_lint_checks(_: ()) -> () {\n+        desc { \"perform lints prior to macro expansion\" }\n+    }\n+\n     query resolutions(_: ()) -> &'tcx ty::ResolverGlobalCtxt {\n         feedable\n         no_hash"}, {"sha": "487cbf1ec4e301a4d680833b3a5dbeb8cca2c4e4", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/df50001c7de485b31cc4ea3c5100ac090e470c7c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df50001c7de485b31cc4ea3c5100ac090e470c7c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=df50001c7de485b31cc4ea3c5100ac090e470c7c", "patch": "@@ -34,6 +34,7 @@ use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap, FxIndexSet};\n use rustc_data_structures::intern::Interned;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_data_structures::steal::Steal;\n use rustc_data_structures::tagged_ptr::CopyTaggedPtr;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n@@ -44,6 +45,8 @@ use rustc_index::vec::IndexVec;\n use rustc_macros::HashStable;\n use rustc_query_system::ich::StableHashingContext;\n use rustc_serialize::{Decodable, Encodable};\n+use rustc_session::lint::LintBuffer;\n+pub use rustc_session::lint::RegisteredTools;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{ExpnId, ExpnKind, Span};\n@@ -148,8 +151,6 @@ mod typeck_results;\n \n // Data types\n \n-pub type RegisteredTools = FxHashSet<Ident>;\n-\n pub struct ResolverOutputs {\n     pub global_ctxt: ResolverGlobalCtxt,\n     pub ast_lowering: ResolverAstLowering,\n@@ -175,7 +176,6 @@ pub struct ResolverGlobalCtxt {\n     /// Mapping from ident span to path span for paths that don't exist as written, but that\n     /// exist under `std`. For example, wrote `str::from_utf8` instead of `std::str::from_utf8`.\n     pub confused_type_with_std_module: FxHashMap<Span, Span>,\n-    pub registered_tools: RegisteredTools,\n     pub doc_link_resolutions: FxHashMap<LocalDefId, DocLinkResMap>,\n     pub doc_link_traits_in_scope: FxHashMap<LocalDefId, Vec<DefId>>,\n     pub all_macro_rules: FxHashMap<Symbol, Res<ast::NodeId>>,\n@@ -209,6 +209,9 @@ pub struct ResolverAstLowering {\n     pub builtin_macro_kinds: FxHashMap<LocalDefId, MacroKind>,\n     /// List functions and methods for which lifetime elision was successful.\n     pub lifetime_elision_allowed: FxHashSet<ast::NodeId>,\n+\n+    /// Lints that were emitted by the resolver and early lints.\n+    pub lint_buffer: Steal<LintBuffer>,\n }\n \n #[derive(Clone, Copy, Debug)]"}, {"sha": "3e2c400dbb68bc4fc148d9eb5020460b0726ae61", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/df50001c7de485b31cc4ea3c5100ac090e470c7c/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df50001c7de485b31cc4ea3c5100ac090e470c7c/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=df50001c7de485b31cc4ea3c5100ac090e470c7c", "patch": "@@ -27,6 +27,7 @@ use rustc_ast::{self as ast, NodeId, CRATE_NODE_ID};\n use rustc_ast::{AngleBracketedArg, Crate, Expr, ExprKind, GenericArg, GenericArgs, LitKind, Path};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap, FxIndexSet};\n use rustc_data_structures::intern::Interned;\n+use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{Lrc, MappedReadGuard};\n use rustc_errors::{\n     Applicability, DiagnosticBuilder, DiagnosticMessage, ErrorGuaranteed, SubdiagnosticMessage,\n@@ -965,7 +966,7 @@ pub struct Resolver<'a, 'tcx> {\n     /// A small map keeping true kinds of built-in macros that appear to be fn-like on\n     /// the surface (`macro` items in libcore), but are actually attributes or derives.\n     builtin_macro_kinds: FxHashMap<LocalDefId, MacroKind>,\n-    registered_tools: RegisteredTools,\n+    registered_tools: &'tcx RegisteredTools,\n     macro_use_prelude: FxHashMap<Symbol, &'a NameBinding<'a>>,\n     macro_map: FxHashMap<DefId, MacroData>,\n     dummy_ext_bang: Lrc<SyntaxExtension>,\n@@ -1233,7 +1234,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             }\n         }\n \n-        let registered_tools = macros::registered_tools(tcx.sess, &krate.attrs);\n+        let registered_tools = tcx.registered_tools(());\n \n         let features = tcx.sess.features_untracked();\n \n@@ -1408,7 +1409,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             trait_impls: self.trait_impls,\n             proc_macros,\n             confused_type_with_std_module,\n-            registered_tools: self.registered_tools,\n             doc_link_resolutions: self.doc_link_resolutions,\n             doc_link_traits_in_scope: self.doc_link_traits_in_scope,\n             all_macro_rules: self.all_macro_rules,\n@@ -1426,6 +1426,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             trait_map: self.trait_map,\n             builtin_macro_kinds: self.builtin_macro_kinds,\n             lifetime_elision_allowed: self.lifetime_elision_allowed,\n+            lint_buffer: Steal::new(self.lint_buffer),\n         };\n         ResolverOutputs { global_ctxt, ast_lowering }\n     }\n@@ -2040,3 +2041,7 @@ impl Finalize {\n         Finalize { node_id, path_span, root_span, report_private: true }\n     }\n }\n+\n+pub fn provide(providers: &mut ty::query::Providers) {\n+    providers.registered_tools = macros::registered_tools;\n+}"}, {"sha": "37153854f7e7f7c49e03a5a87b817c98a5c2bb2d", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/df50001c7de485b31cc4ea3c5100ac090e470c7c/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df50001c7de485b31cc4ea3c5100ac090e470c7c/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=df50001c7de485b31cc4ea3c5100ac090e470c7c", "patch": "@@ -8,7 +8,6 @@ use crate::{ModuleKind, ModuleOrUniformRoot, NameBinding, PathResult, Segment};\n use rustc_ast::{self as ast, Inline, ItemKind, ModKind, NodeId};\n use rustc_ast_pretty::pprust;\n use rustc_attr::StabilityLevel;\n-use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::intern::Interned;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{struct_span_err, Applicability};\n@@ -20,11 +19,11 @@ use rustc_hir::def::{self, DefKind, NonMacroAttrKind};\n use rustc_hir::def_id::{CrateNum, LocalDefId};\n use rustc_middle::middle::stability;\n use rustc_middle::ty::RegisteredTools;\n+use rustc_middle::ty::TyCtxt;\n use rustc_session::lint::builtin::{LEGACY_DERIVE_HELPERS, SOFT_UNSTABLE};\n use rustc_session::lint::builtin::{UNUSED_MACROS, UNUSED_MACRO_RULES};\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_session::parse::feature_err;\n-use rustc_session::Session;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::{self, ExpnData, ExpnKind, LocalExpnId};\n use rustc_span::hygiene::{AstPass, MacroKind};\n@@ -111,23 +110,28 @@ fn fast_print_path(path: &ast::Path) -> Symbol {\n     }\n }\n \n-pub(crate) fn registered_tools(sess: &Session, attrs: &[ast::Attribute]) -> FxHashSet<Ident> {\n-    let mut registered_tools = FxHashSet::default();\n-    for attr in sess.filter_by_name(attrs, sym::register_tool) {\n+pub(crate) fn registered_tools(tcx: TyCtxt<'_>, (): ()) -> RegisteredTools {\n+    let mut registered_tools = RegisteredTools::default();\n+    let krate = tcx.crate_for_resolver(()).borrow();\n+    for attr in tcx.sess.filter_by_name(&krate.attrs, sym::register_tool) {\n         for nested_meta in attr.meta_item_list().unwrap_or_default() {\n             match nested_meta.ident() {\n                 Some(ident) => {\n                     if let Some(old_ident) = registered_tools.replace(ident) {\n                         let msg = format!(\"{} `{}` was already registered\", \"tool\", ident);\n-                        sess.struct_span_err(ident.span, &msg)\n+                        tcx.sess\n+                            .struct_span_err(ident.span, &msg)\n                             .span_label(old_ident.span, \"already registered here\")\n                             .emit();\n                     }\n                 }\n                 None => {\n                     let msg = format!(\"`{}` only accepts identifiers\", sym::register_tool);\n                     let span = nested_meta.span();\n-                    sess.struct_span_err(span, &msg).span_label(span, \"not an identifier\").emit();\n+                    tcx.sess\n+                        .struct_span_err(span, &msg)\n+                        .span_label(span, \"not an identifier\")\n+                        .emit();\n                 }\n             }\n         }"}]}