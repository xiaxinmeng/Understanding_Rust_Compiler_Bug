{"sha": "3194958217c24744ee3118fdc5b3d6b274b7316d", "node_id": "C_kwDOAAsO6NoAKDMxOTQ5NTgyMTdjMjQ3NDRlZTMxMThmZGM1YjNkNmIyNzRiNzMxNmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-12T03:24:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-12T03:24:29Z"}, "message": "Auto merge of #100251 - compiler-errors:tuple-trait-2, r=jackh726\n\nImplement `std::marker::Tuple`\n\nSplit out from #99943 (https://github.com/rust-lang/rust/pull/99943#pullrequestreview-1064459183).\n\nImplements part of rust-lang/compiler-team#537\nr? `@jackh726`", "tree": {"sha": "c596475e489ffeb7cbb2d5b9229c575e3d44be2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c596475e489ffeb7cbb2d5b9229c575e3d44be2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3194958217c24744ee3118fdc5b3d6b274b7316d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3194958217c24744ee3118fdc5b3d6b274b7316d", "html_url": "https://github.com/rust-lang/rust/commit/3194958217c24744ee3118fdc5b3d6b274b7316d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3194958217c24744ee3118fdc5b3d6b274b7316d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa521a469153702972f6bf3988f106902985cd28", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa521a469153702972f6bf3988f106902985cd28", "html_url": "https://github.com/rust-lang/rust/commit/fa521a469153702972f6bf3988f106902985cd28"}, {"sha": "109cc1de9201e0523a24de1ad543f9baa23b57dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/109cc1de9201e0523a24de1ad543f9baa23b57dc", "html_url": "https://github.com/rust-lang/rust/commit/109cc1de9201e0523a24de1ad543f9baa23b57dc"}], "stats": {"total": 192, "additions": 181, "deletions": 11}, "files": [{"sha": "ca615a4912a193ed362282fa44b3aeb153b00ab6", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3194958217c24744ee3118fdc5b3d6b274b7316d/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3194958217c24744ee3118fdc5b3d6b274b7316d/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=3194958217c24744ee3118fdc5b3d6b274b7316d", "patch": "@@ -289,6 +289,8 @@ language_item_table! {\n \n     Try,                     sym::Try,                 try_trait,                  Target::Trait,          GenericRequirement::None;\n \n+    Tuple,                   sym::tuple_trait,         tuple_trait,                Target::Trait,          GenericRequirement::Exact(0);\n+\n     SliceLen,                sym::slice_len_fn,        slice_len_fn,               Target::Method(MethodKind::Inherent), GenericRequirement::None;\n \n     // Language items from AST lowering"}, {"sha": "c0bf04e9e59d4e71b66ea40a7b3c39d8553e369e", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3194958217c24744ee3118fdc5b3d6b274b7316d/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3194958217c24744ee3118fdc5b3d6b274b7316d/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=3194958217c24744ee3118fdc5b3d6b274b7316d", "patch": "@@ -651,6 +651,10 @@ pub enum ImplSource<'tcx, N> {\n \n     /// ImplSource for a `const Drop` implementation.\n     ConstDestruct(ImplSourceConstDestructData<N>),\n+\n+    /// ImplSource for a `std::marker::Tuple` implementation.\n+    /// This has no nested predicates ever, so no data.\n+    Tuple,\n }\n \n impl<'tcx, N> ImplSource<'tcx, N> {\n@@ -665,7 +669,8 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n             ImplSource::Object(d) => d.nested,\n             ImplSource::FnPointer(d) => d.nested,\n             ImplSource::DiscriminantKind(ImplSourceDiscriminantKindData)\n-            | ImplSource::Pointee(ImplSourcePointeeData) => Vec::new(),\n+            | ImplSource::Pointee(ImplSourcePointeeData)\n+            | ImplSource::Tuple => Vec::new(),\n             ImplSource::TraitAlias(d) => d.nested,\n             ImplSource::TraitUpcasting(d) => d.nested,\n             ImplSource::ConstDestruct(i) => i.nested,\n@@ -683,7 +688,8 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n             ImplSource::Object(d) => &d.nested,\n             ImplSource::FnPointer(d) => &d.nested,\n             ImplSource::DiscriminantKind(ImplSourceDiscriminantKindData)\n-            | ImplSource::Pointee(ImplSourcePointeeData) => &[],\n+            | ImplSource::Pointee(ImplSourcePointeeData)\n+            | ImplSource::Tuple => &[],\n             ImplSource::TraitAlias(d) => &d.nested,\n             ImplSource::TraitUpcasting(d) => &d.nested,\n             ImplSource::ConstDestruct(i) => &i.nested,\n@@ -750,6 +756,7 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n                     nested: i.nested.into_iter().map(f).collect(),\n                 })\n             }\n+            ImplSource::Tuple => ImplSource::Tuple,\n         }\n     }\n }"}, {"sha": "53af3e905341960e528da3528de1c91336cee72c", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3194958217c24744ee3118fdc5b3d6b274b7316d/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3194958217c24744ee3118fdc5b3d6b274b7316d/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=3194958217c24744ee3118fdc5b3d6b274b7316d", "patch": "@@ -160,6 +160,9 @@ pub enum SelectionCandidate<'tcx> {\n \n     /// Implementation of `const Destruct`, optionally from a custom `impl const Drop`.\n     ConstDestructCandidate(Option<DefId>),\n+\n+    /// Witnesses the fact that a type is a tuple.\n+    TupleCandidate,\n }\n \n /// The result of trait evaluation. The order is important"}, {"sha": "c526344e1f263cfa92e280eb114d5e07b8a9b822", "filename": "compiler/rustc_middle/src/traits/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3194958217c24744ee3118fdc5b3d6b274b7316d/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3194958217c24744ee3118fdc5b3d6b274b7316d/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=3194958217c24744ee3118fdc5b3d6b274b7316d", "patch": "@@ -34,6 +34,8 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::ImplSource<'tcx, N> {\n             super::ImplSource::TraitUpcasting(ref d) => write!(f, \"{:?}\", d),\n \n             super::ImplSource::ConstDestruct(ref d) => write!(f, \"{:?}\", d),\n+\n+            super::ImplSource::Tuple => write!(f, \"ImplSource::Tuple\"),\n         }\n     }\n }"}, {"sha": "871bc5c1cdb06a5e4c250660885194fc5c336987", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3194958217c24744ee3118fdc5b3d6b274b7316d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3194958217c24744ee3118fdc5b3d6b274b7316d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=3194958217c24744ee3118fdc5b3d6b274b7316d", "patch": "@@ -1497,6 +1497,7 @@ symbols! {\n         tuple,\n         tuple_from_req,\n         tuple_indexing,\n+        tuple_trait,\n         two_phase,\n         ty,\n         type_alias_enum_variants,"}, {"sha": "95a34d6f51f63f7729129f8966f9909f2d35c7ef", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3194958217c24744ee3118fdc5b3d6b274b7316d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3194958217c24744ee3118fdc5b3d6b274b7316d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=3194958217c24744ee3118fdc5b3d6b274b7316d", "patch": "@@ -1751,7 +1751,8 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n             super::ImplSource::AutoImpl(..)\n             | super::ImplSource::Builtin(..)\n             | super::ImplSource::TraitUpcasting(_)\n-            | super::ImplSource::ConstDestruct(_) => {\n+            | super::ImplSource::ConstDestruct(_)\n+            | super::ImplSource::Tuple => {\n                 // These traits have no associated types.\n                 selcx.tcx().sess.delay_span_bug(\n                     obligation.cause.span,\n@@ -1829,7 +1830,8 @@ fn confirm_select_candidate<'cx, 'tcx>(\n         | super::ImplSource::Builtin(..)\n         | super::ImplSource::TraitUpcasting(_)\n         | super::ImplSource::TraitAlias(..)\n-        | super::ImplSource::ConstDestruct(_) => {\n+        | super::ImplSource::ConstDestruct(_)\n+        | super::ImplSource::Tuple => {\n             // we don't create Select candidates with this kind of resolution\n             span_bug!(\n                 obligation.cause.span,"}, {"sha": "83bde1c50e23d22b623178249c5912ae23022ae7", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3194958217c24744ee3118fdc5b3d6b274b7316d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3194958217c24744ee3118fdc5b3d6b274b7316d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=3194958217c24744ee3118fdc5b3d6b274b7316d", "patch": "@@ -309,6 +309,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // User-defined transmutability impls are permitted.\n                 self.assemble_candidates_from_impls(obligation, &mut candidates);\n                 self.assemble_candidates_for_transmutability(obligation, &mut candidates);\n+            } else if lang_items.tuple_trait() == Some(def_id) {\n+                self.assemble_candidate_for_tuple(obligation, &mut candidates);\n             } else {\n                 if lang_items.clone_trait() == Some(def_id) {\n                     // Same builtin conditions as `Copy`, i.e., every type which has builtin support\n@@ -1009,4 +1011,46 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n         }\n     }\n+\n+    fn assemble_candidate_for_tuple(\n+        &mut self,\n+        obligation: &TraitObligation<'tcx>,\n+        candidates: &mut SelectionCandidateSet<'tcx>,\n+    ) {\n+        let self_ty = self.infcx().shallow_resolve(obligation.self_ty().skip_binder());\n+        match self_ty.kind() {\n+            ty::Tuple(_) => {\n+                candidates.vec.push(TupleCandidate);\n+            }\n+            ty::Infer(ty::TyVar(_)) => {\n+                candidates.ambiguous = true;\n+            }\n+            ty::Bool\n+            | ty::Char\n+            | ty::Int(_)\n+            | ty::Uint(_)\n+            | ty::Float(_)\n+            | ty::Adt(_, _)\n+            | ty::Foreign(_)\n+            | ty::Str\n+            | ty::Array(_, _)\n+            | ty::Slice(_)\n+            | ty::RawPtr(_)\n+            | ty::Ref(_, _, _)\n+            | ty::FnDef(_, _)\n+            | ty::FnPtr(_)\n+            | ty::Dynamic(_, _)\n+            | ty::Closure(_, _)\n+            | ty::Generator(_, _, _)\n+            | ty::GeneratorWitness(_)\n+            | ty::Never\n+            | ty::Projection(_)\n+            | ty::Opaque(_, _)\n+            | ty::Param(_)\n+            | ty::Bound(_, _)\n+            | ty::Error(_)\n+            | ty::Infer(_)\n+            | ty::Placeholder(_) => {}\n+        }\n+    }\n }"}, {"sha": "046a587205b51c1bdd36cfb41a9532ad46e4ee6b", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3194958217c24744ee3118fdc5b3d6b274b7316d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3194958217c24744ee3118fdc5b3d6b274b7316d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=3194958217c24744ee3118fdc5b3d6b274b7316d", "patch": "@@ -126,6 +126,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 let data = self.confirm_const_destruct_candidate(obligation, def_id)?;\n                 ImplSource::ConstDestruct(data)\n             }\n+\n+            TupleCandidate => ImplSource::Tuple,\n         };\n \n         if !obligation.predicate.is_const_if_const() {"}, {"sha": "8b15e10ba9cbf4559faf5cd5dc558fca7ccf721a", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3194958217c24744ee3118fdc5b3d6b274b7316d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3194958217c24744ee3118fdc5b3d6b274b7316d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=3194958217c24744ee3118fdc5b3d6b274b7316d", "patch": "@@ -1609,7 +1609,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         };\n \n         // (*) Prefer `BuiltinCandidate { has_nested: false }`, `PointeeCandidate`,\n-        // `DiscriminantKindCandidate`, and `ConstDestructCandidate` to anything else.\n+        // `DiscriminantKindCandidate`, `ConstDestructCandidate`, and `TupleCandidate`\n+        // to anything else.\n         //\n         // This is a fix for #53123 and prevents winnowing from accidentally extending the\n         // lifetime of a variable.\n@@ -1629,15 +1630,17 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 BuiltinCandidate { has_nested: false }\n                 | DiscriminantKindCandidate\n                 | PointeeCandidate\n-                | ConstDestructCandidate(_),\n+                | ConstDestructCandidate(_)\n+                | TupleCandidate,\n                 _,\n             ) => true,\n             (\n                 _,\n                 BuiltinCandidate { has_nested: false }\n                 | DiscriminantKindCandidate\n                 | PointeeCandidate\n-                | ConstDestructCandidate(_),\n+                | ConstDestructCandidate(_)\n+                | TupleCandidate,\n             ) => false,\n \n             (ParamCandidate(other), ParamCandidate(victim)) => {"}, {"sha": "05738b6c48ae24d85c227d3cd1835d6389944220", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3194958217c24744ee3118fdc5b3d6b274b7316d/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3194958217c24744ee3118fdc5b3d6b274b7316d/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=3194958217c24744ee3118fdc5b3d6b274b7316d", "patch": "@@ -291,7 +291,8 @@ fn resolve_associated_item<'tcx>(\n         | traits::ImplSource::DiscriminantKind(..)\n         | traits::ImplSource::Pointee(..)\n         | traits::ImplSource::TraitUpcasting(_)\n-        | traits::ImplSource::ConstDestruct(_) => None,\n+        | traits::ImplSource::ConstDestruct(_)\n+        | traits::ImplSource::Tuple => None,\n     })\n }\n "}, {"sha": "b8239ed88accafb919f3ca99a0a62be23dacb1dc", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3194958217c24744ee3118fdc5b3d6b274b7316d/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3194958217c24744ee3118fdc5b3d6b274b7316d/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=3194958217c24744ee3118fdc5b3d6b274b7316d", "patch": "@@ -800,6 +800,15 @@ impl<T: ?Sized> Unpin for *mut T {}\n #[rustc_on_unimplemented(message = \"can't drop `{Self}`\", append_const_msg)]\n pub trait Destruct {}\n \n+/// A marker for tuple types.\n+///\n+/// The implementation of this trait is built-in and cannot be implemented\n+/// for any user type.\n+#[unstable(feature = \"tuple_trait\", issue = \"none\")]\n+#[cfg_attr(not(bootstrap), lang = \"tuple_trait\")]\n+#[rustc_on_unimplemented(message = \"`{Self}` is not a tuple\")]\n+pub trait Tuple {}\n+\n /// Implementations of `Copy` for primitive types.\n ///\n /// Implementations that cannot be described in Rust"}, {"sha": "08dadb4db851aff968f993fb13729efc56f68fc0", "filename": "src/test/ui/explore-issue-38412.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3194958217c24744ee3118fdc5b3d6b274b7316d/src%2Ftest%2Fui%2Fexplore-issue-38412.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3194958217c24744ee3118fdc5b3d6b274b7316d/src%2Ftest%2Fui%2Fexplore-issue-38412.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplore-issue-38412.stderr?ref=3194958217c24744ee3118fdc5b3d6b274b7316d", "patch": "@@ -43,19 +43,19 @@ LL |     t.2;\n    = note: see issue #38412 <https://github.com/rust-lang/rust/issues/38412> for more information\n    = help: add `#![feature(unstable_undeclared)]` to the crate attributes to enable\n \n-error[E0616]: field `3` of struct `Tuple` is private\n+error[E0616]: field `3` of struct `pub_and_stability::Tuple` is private\n   --> $DIR/explore-issue-38412.rs:36:7\n    |\n LL |     t.3;\n    |       ^ private field\n \n-error[E0616]: field `4` of struct `Tuple` is private\n+error[E0616]: field `4` of struct `pub_and_stability::Tuple` is private\n   --> $DIR/explore-issue-38412.rs:37:7\n    |\n LL |     t.4;\n    |       ^ private field\n \n-error[E0616]: field `5` of struct `Tuple` is private\n+error[E0616]: field `5` of struct `pub_and_stability::Tuple` is private\n   --> $DIR/explore-issue-38412.rs:38:7\n    |\n LL |     t.5;"}, {"sha": "31208096151dcb854f945ca8ffa7a3213cf0ff52", "filename": "src/test/ui/tuple/builtin-fail.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3194958217c24744ee3118fdc5b3d6b274b7316d/src%2Ftest%2Fui%2Ftuple%2Fbuiltin-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3194958217c24744ee3118fdc5b3d6b274b7316d/src%2Ftest%2Fui%2Ftuple%2Fbuiltin-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fbuiltin-fail.rs?ref=3194958217c24744ee3118fdc5b3d6b274b7316d", "patch": "@@ -0,0 +1,19 @@\n+#![feature(tuple_trait)]\n+\n+fn assert_is_tuple<T: std::marker::Tuple + ?Sized>() {}\n+\n+struct TupleStruct(i32, i32);\n+\n+fn from_param_env<T>() {\n+    assert_is_tuple::<T>();\n+    //~^ ERROR `T` is not a tuple\n+}\n+\n+fn main() {\n+    assert_is_tuple::<i32>();\n+    //~^ ERROR `i32` is not a tuple\n+    assert_is_tuple::<(i32)>();\n+    //~^ ERROR `i32` is not a tuple\n+    assert_is_tuple::<TupleStruct>();\n+    //~^ ERROR `TupleStruct` is not a tuple\n+}"}, {"sha": "e3e29a73fdc0116bd17fdec7369850151ba8b990", "filename": "src/test/ui/tuple/builtin-fail.stderr", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/3194958217c24744ee3118fdc5b3d6b274b7316d/src%2Ftest%2Fui%2Ftuple%2Fbuiltin-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3194958217c24744ee3118fdc5b3d6b274b7316d/src%2Ftest%2Fui%2Ftuple%2Fbuiltin-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fbuiltin-fail.stderr?ref=3194958217c24744ee3118fdc5b3d6b274b7316d", "patch": "@@ -0,0 +1,55 @@\n+error[E0277]: `T` is not a tuple\n+  --> $DIR/builtin-fail.rs:8:23\n+   |\n+LL |     assert_is_tuple::<T>();\n+   |                       ^ the trait `Tuple` is not implemented for `T`\n+   |\n+note: required by a bound in `assert_is_tuple`\n+  --> $DIR/builtin-fail.rs:3:23\n+   |\n+LL | fn assert_is_tuple<T: std::marker::Tuple + ?Sized>() {}\n+   |                       ^^^^^^^^^^^^^^^^^^ required by this bound in `assert_is_tuple`\n+help: consider restricting type parameter `T`\n+   |\n+LL | fn from_param_env<T: std::marker::Tuple>() {\n+   |                    ++++++++++++++++++++\n+\n+error[E0277]: `i32` is not a tuple\n+  --> $DIR/builtin-fail.rs:13:23\n+   |\n+LL |     assert_is_tuple::<i32>();\n+   |                       ^^^ the trait `Tuple` is not implemented for `i32`\n+   |\n+note: required by a bound in `assert_is_tuple`\n+  --> $DIR/builtin-fail.rs:3:23\n+   |\n+LL | fn assert_is_tuple<T: std::marker::Tuple + ?Sized>() {}\n+   |                       ^^^^^^^^^^^^^^^^^^ required by this bound in `assert_is_tuple`\n+\n+error[E0277]: `i32` is not a tuple\n+  --> $DIR/builtin-fail.rs:15:24\n+   |\n+LL |     assert_is_tuple::<(i32)>();\n+   |                        ^^^ the trait `Tuple` is not implemented for `i32`\n+   |\n+note: required by a bound in `assert_is_tuple`\n+  --> $DIR/builtin-fail.rs:3:23\n+   |\n+LL | fn assert_is_tuple<T: std::marker::Tuple + ?Sized>() {}\n+   |                       ^^^^^^^^^^^^^^^^^^ required by this bound in `assert_is_tuple`\n+\n+error[E0277]: `TupleStruct` is not a tuple\n+  --> $DIR/builtin-fail.rs:17:23\n+   |\n+LL |     assert_is_tuple::<TupleStruct>();\n+   |                       ^^^^^^^^^^^ the trait `Tuple` is not implemented for `TupleStruct`\n+   |\n+note: required by a bound in `assert_is_tuple`\n+  --> $DIR/builtin-fail.rs:3:23\n+   |\n+LL | fn assert_is_tuple<T: std::marker::Tuple + ?Sized>() {}\n+   |                       ^^^^^^^^^^^^^^^^^^ required by this bound in `assert_is_tuple`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "d87ce526357e3d63223521b98f0a11a0b90aae5b", "filename": "src/test/ui/tuple/builtin.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3194958217c24744ee3118fdc5b3d6b274b7316d/src%2Ftest%2Fui%2Ftuple%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3194958217c24744ee3118fdc5b3d6b274b7316d/src%2Ftest%2Fui%2Ftuple%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fbuiltin.rs?ref=3194958217c24744ee3118fdc5b3d6b274b7316d", "patch": "@@ -0,0 +1,20 @@\n+// check-pass\n+\n+#![feature(tuple_trait)]\n+\n+fn assert_is_tuple<T: std::marker::Tuple + ?Sized>() {}\n+\n+struct Unsized([u8]);\n+\n+fn from_param_env<T: std::marker::Tuple + ?Sized>() {\n+    assert_is_tuple::<T>();\n+}\n+\n+fn main() {\n+    assert_is_tuple::<()>();\n+    assert_is_tuple::<(i32,)>();\n+    assert_is_tuple::<(Unsized,)>();\n+    from_param_env::<()>();\n+    from_param_env::<(i32,)>();\n+    from_param_env::<(Unsized,)>();\n+}"}]}