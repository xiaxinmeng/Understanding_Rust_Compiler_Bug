{"sha": "89eb9e8002466f3099de77bc42cdabbf67d5dc1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ZWI5ZTgwMDI0NjZmMzA5OWRlNzdiYzQyY2RhYmJmNjdkNWRjMWI=", "commit": {"author": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-03-13T12:57:44Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-03-13T13:50:03Z"}, "message": "Protect against infinite macro expansion in def collector\n\nThere was a test for this, but it wasn't actually working because the first\nrecursive expansion failed. (The comma...)\n\nEven with this limit, that test (when fixed) still takes some time to pass\nbecause of the exponential growth of the expansions, so I disabled it and added\na different one without growth.", "tree": {"sha": "210539acb34578b5ec4697e9995457700545af07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/210539acb34578b5ec4697e9995457700545af07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89eb9e8002466f3099de77bc42cdabbf67d5dc1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89eb9e8002466f3099de77bc42cdabbf67d5dc1b", "html_url": "https://github.com/rust-lang/rust/commit/89eb9e8002466f3099de77bc42cdabbf67d5dc1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89eb9e8002466f3099de77bc42cdabbf67d5dc1b/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93527b5f193ed214f6ae0f8112eaec2eebabd016", "url": "https://api.github.com/repos/rust-lang/rust/commits/93527b5f193ed214f6ae0f8112eaec2eebabd016", "html_url": "https://github.com/rust-lang/rust/commit/93527b5f193ed214f6ae0f8112eaec2eebabd016"}], "stats": {"total": 48, "additions": 39, "deletions": 9}, "files": [{"sha": "db9838cb5e4387be48275fdcc443a97a3df01792", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 39, "deletions": 9, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/89eb9e8002466f3099de77bc42cdabbf67d5dc1b/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89eb9e8002466f3099de77bc42cdabbf67d5dc1b/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=89eb9e8002466f3099de77bc42cdabbf67d5dc1b", "patch": "@@ -102,6 +102,7 @@ struct MacroDirective {\n     module_id: LocalModuleId,\n     ast_id: AstIdWithPath<ast::MacroCall>,\n     legacy: Option<MacroCallId>,\n+    depth: usize,\n }\n \n #[derive(Clone, Debug, Eq, PartialEq)]\n@@ -134,6 +135,7 @@ where\n         self.def_map.modules[module_id].origin = ModuleOrigin::CrateRoot { definition: file_id };\n         ModCollector {\n             def_collector: &mut *self,\n+            macro_depth: 0,\n             module_id,\n             file_id: file_id.into(),\n             raw_items: &raw_items,\n@@ -516,7 +518,7 @@ where\n         macros.retain(|directive| {\n             if let Some(call_id) = directive.legacy {\n                 res = ReachedFixedPoint::No;\n-                resolved.push((directive.module_id, call_id));\n+                resolved.push((directive.module_id, call_id, directive.depth));\n                 return false;\n             }\n \n@@ -530,7 +532,7 @@ where\n                 );\n                 resolved_res.resolved_def.take_macros()\n             }) {\n-                resolved.push((directive.module_id, call_id));\n+                resolved.push((directive.module_id, call_id, directive.depth));\n                 res = ReachedFixedPoint::No;\n                 return false;\n             }\n@@ -541,7 +543,7 @@ where\n             if let Some(call_id) =\n                 directive.ast_id.as_call_id(self.db, |path| self.resolve_attribute_macro(&path))\n             {\n-                resolved.push((directive.module_id, call_id));\n+                resolved.push((directive.module_id, call_id, 0));\n                 res = ReachedFixedPoint::No;\n                 return false;\n             }\n@@ -552,8 +554,12 @@ where\n         self.unexpanded_macros = macros;\n         self.unexpanded_attribute_macros = attribute_macros;\n \n-        for (module_id, macro_call_id) in resolved {\n-            self.collect_macro_expansion(module_id, macro_call_id);\n+        for (module_id, macro_call_id, depth) in resolved {\n+            if depth > 1024 {\n+                log::debug!(\"Max macro expansion depth reached\");\n+                continue;\n+            }\n+            self.collect_macro_expansion(module_id, macro_call_id, depth);\n         }\n \n         res\n@@ -573,12 +579,18 @@ where\n         None\n     }\n \n-    fn collect_macro_expansion(&mut self, module_id: LocalModuleId, macro_call_id: MacroCallId) {\n+    fn collect_macro_expansion(\n+        &mut self,\n+        module_id: LocalModuleId,\n+        macro_call_id: MacroCallId,\n+        depth: usize,\n+    ) {\n         let file_id: HirFileId = macro_call_id.as_file();\n         let raw_items = self.db.raw_items(file_id);\n         let mod_dir = self.mod_dirs[&module_id].clone();\n         ModCollector {\n             def_collector: &mut *self,\n+            macro_depth: depth,\n             file_id,\n             module_id,\n             raw_items: &raw_items,\n@@ -595,6 +607,7 @@ where\n /// Walks a single module, populating defs, imports and macros\n struct ModCollector<'a, D> {\n     def_collector: D,\n+    macro_depth: usize,\n     module_id: LocalModuleId,\n     file_id: HirFileId,\n     raw_items: &'a raw::RawItems,\n@@ -684,6 +697,7 @@ where\n \n                 ModCollector {\n                     def_collector: &mut *self.def_collector,\n+                    macro_depth: self.macro_depth,\n                     module_id,\n                     file_id: self.file_id,\n                     raw_items: self.raw_items,\n@@ -713,6 +727,7 @@ where\n                         let raw_items = self.def_collector.db.raw_items(file_id.into());\n                         ModCollector {\n                             def_collector: &mut *self.def_collector,\n+                            macro_depth: self.macro_depth,\n                             module_id,\n                             file_id: file_id.into(),\n                             raw_items: &raw_items,\n@@ -887,6 +902,7 @@ where\n                 module_id: self.module_id,\n                 ast_id,\n                 legacy: Some(macro_call_id),\n+                depth: self.macro_depth + 1,\n             });\n \n             return;\n@@ -902,6 +918,7 @@ where\n             module_id: self.module_id,\n             ast_id,\n             legacy: None,\n+            depth: self.macro_depth + 1,\n         });\n     }\n \n@@ -971,13 +988,26 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_macro_expand_will_stop() {\n+    fn test_macro_expand_will_stop_1() {\n+        do_resolve(\n+            r#\"\n+        macro_rules! foo {\n+            ($($ty:ty)*) => { foo!($($ty)*); }\n+        }\n+        foo!(KABOOM);\n+        \"#,\n+        );\n+    }\n+\n+    #[ignore] // this test does succeed, but takes quite a while :/\n+    #[test]\n+    fn test_macro_expand_will_stop_2() {\n         do_resolve(\n             r#\"\n         macro_rules! foo {\n-            ($($ty:ty)*) => { foo!($($ty)*, $($ty)*); }\n+            ($($ty:ty)*) => { foo!($($ty)* $($ty)*); }\n         }\n-foo!(KABOOM);\n+        foo!(KABOOM);\n         \"#,\n         );\n     }"}]}