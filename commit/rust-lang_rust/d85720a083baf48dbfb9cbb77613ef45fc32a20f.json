{"sha": "d85720a083baf48dbfb9cbb77613ef45fc32a20f", "node_id": "C_kwDOAAsO6NoAKGQ4NTcyMGEwODNiYWY0OGRiZmI5Y2JiNzc2MTNlZjQ1ZmMzMmEyMGY", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-03T22:34:00Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-04T14:26:59Z"}, "message": "Document lower_opaque_impl_trait", "tree": {"sha": "5e27d24c88ac1b85f27ff52ce72562d646ff462c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e27d24c88ac1b85f27ff52ce72562d646ff462c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d85720a083baf48dbfb9cbb77613ef45fc32a20f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmLr1zMACgkQgTGiTgx5\n76+eQw/+JYYJroYZqfOGrrap3ChvmPbE98nfRfq8A6hKD0Tfwjq7xxpkrNzjwMec\n/jl/XwcRWtt1EVNE/vVf8EqE+IHc223tM3M/lGOBy34mKIYTigy8J0vIRjQdbtPP\nTd1HWWJ2ymrFpScFJSLoi4uNE1MYQBso2Acp+sS2itiV+Ieq9AGiQRCUngy5gCXA\nIxqvMgOnyMLoxLHlBFPMFzohF1fcCFjfunyINxVjwas/Y4Ywfs+b+OaYyZHyZ/pr\nLmXSnDIQpvpNJ9NJdHkRprJ0rAC4NMk+P05T69TBPzS15LbnEbPAY0tNBzA4JDP0\nntC1xR6FSrVygef5FjZk9cP9Yx6TFe02B7I2g+lPFBP9rySd3IOPHAmxzOt6TWEd\nlWS+BMWWlgUQTaAQqFn7ozcn/UbMrDPSnV8Jswv3D+T+xzFIdP8wIhqlmUnb5Civ\n2Nr+pJibhXjkRAqjs7bZxvUOMKCU+OgwnYcI4Ilc5qDqLKWYaFnY4DObsuT9LETP\nE6BQ1hPG4EorBZu2S/h82RzTx70CTPqFJLop87hKm6ZlECq+kyGPC8KS69PkP/Lz\nXSnVgyzvg2Tgx1mmNxj8C03fXEZ73HHDqzRkuVvDujaneJL60y7REII7Uk+ApWJv\nJotTbTK84i7gA4AGD9cp0tzepaqbcfLaFPDf2NJ+s7Etx8Jr5Vc=\n=Y34I\n-----END PGP SIGNATURE-----", "payload": "tree 5e27d24c88ac1b85f27ff52ce72562d646ff462c\nparent 6289d0eb538424f312d2d39f9ec83679e451c88a\nauthor Santiago Pastorino <spastorino@gmail.com> 1659566040 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1659623219 -0300\n\nDocument lower_opaque_impl_trait\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d85720a083baf48dbfb9cbb77613ef45fc32a20f", "html_url": "https://github.com/rust-lang/rust/commit/d85720a083baf48dbfb9cbb77613ef45fc32a20f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d85720a083baf48dbfb9cbb77613ef45fc32a20f/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6289d0eb538424f312d2d39f9ec83679e451c88a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6289d0eb538424f312d2d39f9ec83679e451c88a", "html_url": "https://github.com/rust-lang/rust/commit/6289d0eb538424f312d2d39f9ec83679e451c88a"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "3af5945b80927f0ecc7d41e8fd9027376f55078e", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d85720a083baf48dbfb9cbb77613ef45fc32a20f/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d85720a083baf48dbfb9cbb77613ef45fc32a20f/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=d85720a083baf48dbfb9cbb77613ef45fc32a20f", "patch": "@@ -1349,6 +1349,35 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         hir::Ty { kind, span: self.lower_span(t.span), hir_id: self.lower_node_id(t.id) }\n     }\n \n+    /// Lowers a `ReturnPositionOpaqueTy` (`-> impl Trait`) or a `TypeAliasesOpaqueTy` (`type F =\n+    /// impl Trait`): this creates the associated Opaque Type (TAIT) definition and then returns a\n+    /// HIR type that references the TAIT.\n+    ///\n+    /// Given a function definition like:\n+    ///\n+    /// ```rust\n+    /// fn test<'a, T: Debug>(x: &'a T) -> impl Debug + 'a {\n+    ///     x\n+    /// }\n+    /// ```\n+    ///\n+    /// we will create a TAIT definition in the HIR like\n+    ///\n+    /// ```\n+    /// type TestReturn<'a, T, 'x> = impl Debug + 'x\n+    /// ```\n+    ///\n+    /// and return a type like `TestReturn<'static, T, 'a>`, so that the function looks like:\n+    ///\n+    /// ```rust\n+    /// fn test<'a, T: Debug>(x: &'a T) -> TestReturn<'static, T, 'a>\n+    /// ```\n+    ///\n+    /// Note the subtely around type parameters! The new TAIT, `TestReturn`, inherits all the\n+    /// type parameters from the function `test` (this is implemented in the query layer, they aren't\n+    /// added explicitly in the HIR). But this includes all the lifetimes, and we only want to\n+    /// capture the lifetimes that are referenced in the bounds. Therefore, we add *extra* lifetime parameters\n+    /// for the lifetimes that get captured (`'x`, in our example above) and reference those.\n     #[tracing::instrument(level = \"debug\", skip(self))]\n     fn lower_opaque_impl_trait(\n         &mut self,"}]}