{"sha": "1ec86708caa23dda718f58a52d9159bc40201b7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYzg2NzA4Y2FhMjNkZGE3MThmNThhNTJkOTE1OWJjNDAyMDFiN2E=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-09-11T09:18:58Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-09-11T09:30:47Z"}, "message": "Split `CrateNum` into an enum instead of having magic constants", "tree": {"sha": "be8c39c7b61ac3c01c09d344d6a155330195c998", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be8c39c7b61ac3c01c09d344d6a155330195c998"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ec86708caa23dda718f58a52d9159bc40201b7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ec86708caa23dda718f58a52d9159bc40201b7a", "html_url": "https://github.com/rust-lang/rust/commit/1ec86708caa23dda718f58a52d9159bc40201b7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ec86708caa23dda718f58a52d9159bc40201b7a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1b5231aa75d6c25efc839454331d3c9fb09ffb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1b5231aa75d6c25efc839454331d3c9fb09ffb3", "html_url": "https://github.com/rust-lang/rust/commit/d1b5231aa75d6c25efc839454331d3c9fb09ffb3"}], "stats": {"total": 84, "additions": 58, "deletions": 26}, "files": [{"sha": "1dc668066d8b78be4c8264f97463341c1b69cdbc", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 47, "deletions": 14, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/1ec86708caa23dda718f58a52d9159bc40201b7a/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec86708caa23dda718f58a52d9159bc40201b7a/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=1ec86708caa23dda718f58a52d9159bc40201b7a", "patch": "@@ -18,23 +18,51 @@ use std::u32;\n newtype_index! {\n     pub struct CrateNum {\n         ENCODABLE = custom\n-        DEBUG_FORMAT = \"crate{}\",\n+    }\n+}\n+\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+pub enum CrateNum {\n+    /// Virtual crate for builtin macros\n+    // FIXME(jseyfried): this is also used for custom derives until proc-macro crates get\n+    // `CrateNum`s.\n+    BuiltinMacros,\n+    /// A CrateNum value that indicates that something is wrong.\n+    Invalid,\n+    /// A special CrateNum that we use for the tcx.rcache when decoding from\n+    /// the incr. comp. cache.\n+    ReservedForIncrCompCache,\n+    Index(CrateId),\n+}\n \n-        /// Item definitions in the currently-compiled crate would have the CrateNum\n-        /// LOCAL_CRATE in their DefId.\n-        const LOCAL_CRATE = 0,\n+impl ::std::fmt::Debug for CrateNum {\n+    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n+        match self {\n+            CrateNum::Index(id) => write!(fmt, \"crate{}\", id.0),\n+            CrateNum::Invalid => write!(fmt, \"invalid crate\"),\n+            CrateNum::BuiltinMacros => write!(fmt, \"bultin macros crate\"),\n+            CrateNum::ReservedForIncrCompCache => write!(fmt, \"crate for decoding incr comp cache\"),\n+        }\n+    }\n+}\n \n-        /// Virtual crate for builtin macros\n-        // FIXME(jseyfried): this is also used for custom derives until proc-macro crates get\n-        // `CrateNum`s.\n-        const BUILTIN_MACROS_CRATE = CrateNum::MAX_AS_U32,\n+/// Item definitions in the currently-compiled crate would have the CrateNum\n+/// LOCAL_CRATE in their DefId.\n+pub const LOCAL_CRATE: CrateNum = CrateNum::Index(CrateId(0));\n \n-        /// A CrateNum value that indicates that something is wrong.\n-        const INVALID_CRATE = CrateNum::MAX_AS_U32 - 1,\n \n-        /// A special CrateNum that we use for the tcx.rcache when decoding from\n-        /// the incr. comp. cache.\n-        const RESERVED_FOR_INCR_COMP_CACHE = CrateNum::MAX_AS_U32 - 2,\n+impl Idx for CrateNum {\n+    #[inline]\n+    fn new(value: usize) -> Self {\n+        CrateNum::Index(Idx::new(value))\n+    }\n+\n+    #[inline]\n+    fn index(self) -> usize {\n+        match self {\n+            CrateNum::Index(idx) => Idx::index(idx),\n+            _ => bug!(\"Tried to get crate index of {:?}\", self),\n+        }\n     }\n }\n \n@@ -48,7 +76,12 @@ impl CrateNum {\n \n impl fmt::Display for CrateNum {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Display::fmt(&self.as_u32(), f)\n+        match self {\n+            CrateNum::Index(id) => fmt::Display::fmt(&id.0, f),\n+            CrateNum::Invalid => write!(f, \"invalid crate\"),\n+            CrateNum::BuiltinMacros => write!(f, \"bultin macros crate\"),\n+            CrateNum::ReservedForIncrCompCache => write!(f, \"crate for decoding incr comp cache\"),\n+        }\n     }\n }\n "}, {"sha": "cfc5cd60b1785df9fe55da5f94f0acd93fdb4677", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ec86708caa23dda718f58a52d9159bc40201b7a/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec86708caa23dda718f58a52d9159bc40201b7a/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=1ec86708caa23dda718f58a52d9159bc40201b7a", "patch": "@@ -829,9 +829,9 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for TypeckTables<'gcx> {\n impl<'tcx> CommonTypes<'tcx> {\n     fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {\n         // Ensure our type representation does not grow\n-        #[cfg(target_pointer_width = \"64\")]\n+        #[cfg(all(not(stage0), target_pointer_width = \"64\"))]\n         assert!(mem::size_of::<ty::TyKind>() <= 24);\n-        #[cfg(target_pointer_width = \"64\")]\n+        #[cfg(all(not(stage0), target_pointer_width = \"64\"))]\n         assert!(mem::size_of::<ty::TyS>() <= 32);\n \n         let mk = |sty| CtxtInterners::intern_ty(interners, interners, sty);"}, {"sha": "cb82e28f1d1c645a938127b6ded757a18f9ab495", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ec86708caa23dda718f58a52d9159bc40201b7a/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec86708caa23dda718f58a52d9159bc40201b7a/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=1ec86708caa23dda718f58a52d9159bc40201b7a", "patch": "@@ -11,8 +11,7 @@\n use dep_graph::{DepNodeIndex, SerializedDepNodeIndex};\n use errors::Diagnostic;\n use hir;\n-use hir::def_id::{CrateNum, DefIndex, DefId, LocalDefId,\n-                  RESERVED_FOR_INCR_COMP_CACHE, LOCAL_CRATE};\n+use hir::def_id::{CrateNum, DefIndex, DefId, LocalDefId, LOCAL_CRATE};\n use hir::map::definitions::DefPathHash;\n use ich::{CachingSourceMapView, Fingerprint};\n use mir::{self, interpret};\n@@ -566,7 +565,7 @@ impl<'a, 'tcx: 'a, 'x> ty_codec::TyDecoder<'a, 'tcx> for CacheDecoder<'a, 'tcx,\n         let tcx = self.tcx();\n \n         let cache_key = ty::CReaderCacheKey {\n-            cnum: RESERVED_FOR_INCR_COMP_CACHE,\n+            cnum: CrateNum::ReservedForIncrCompCache,\n             pos: shorthand,\n         };\n "}, {"sha": "0c9d563f47fae1c43900fdb226b19a87ab2cd9d3", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ec86708caa23dda718f58a52d9159bc40201b7a/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec86708caa23dda718f58a52d9159bc40201b7a/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=1ec86708caa23dda718f58a52d9159bc40201b7a", "patch": "@@ -22,7 +22,7 @@ use Namespace::{self, TypeNS, ValueNS, MacroNS};\n use {resolve_error, resolve_struct_error, ResolutionError};\n \n use rustc::hir::def::*;\n-use rustc::hir::def_id::{BUILTIN_MACROS_CRATE, CRATE_DEF_INDEX, LOCAL_CRATE, DefId};\n+use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, LOCAL_CRATE, DefId};\n use rustc::ty;\n use rustc::middle::cstore::CrateStore;\n use rustc_metadata::cstore::LoadedMacro;\n@@ -768,7 +768,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n         let def_id = self.macro_defs[&expansion];\n         if let Some(id) = self.definitions.as_local_node_id(def_id) {\n             self.local_macro_def_scopes[&id]\n-        } else if def_id.krate == BUILTIN_MACROS_CRATE {\n+        } else if def_id.krate == CrateNum::BuiltinMacros {\n             self.injected_crate.unwrap_or(self.graph_root)\n         } else {\n             let module_def_id = ty::DefIdTree::parent(&*self, def_id).unwrap();"}, {"sha": "d40edef6862aac4a4dbf525f8539bdafa29d0f52", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1ec86708caa23dda718f58a52d9159bc40201b7a/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec86708caa23dda718f58a52d9159bc40201b7a/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=1ec86708caa23dda718f58a52d9159bc40201b7a", "patch": "@@ -14,8 +14,8 @@ use ModuleOrUniformRoot;\n use Namespace::{self, TypeNS, MacroNS};\n use build_reduced_graph::{BuildReducedGraphVisitor, IsMacroExport};\n use resolve_imports::ImportResolver;\n-use rustc::hir::def_id::{DefId, BUILTIN_MACROS_CRATE, CRATE_DEF_INDEX, DefIndex,\n-                         DefIndexAddressSpace};\n+use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX, DefIndex,\n+                         CrateNum, DefIndexAddressSpace};\n use rustc::hir::def::{Def, NonMacroAttrKind};\n use rustc::hir::map::{self, DefCollector};\n use rustc::{ty, lint};\n@@ -202,7 +202,7 @@ impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n \n     fn add_builtin(&mut self, ident: ast::Ident, ext: Lrc<SyntaxExtension>) {\n         let def_id = DefId {\n-            krate: BUILTIN_MACROS_CRATE,\n+            krate: CrateNum::BuiltinMacros,\n             index: DefIndex::from_array_index(self.macro_map.len(),\n                                               DefIndexAddressSpace::Low),\n         };\n@@ -335,7 +335,7 @@ impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n             self.definitions.add_parent_module_of_macro_def(invoc.expansion_data.mark,\n                                                             normal_module_def_id);\n             invoc.expansion_data.mark.set_default_transparency(ext.default_transparency());\n-            invoc.expansion_data.mark.set_is_builtin(def_id.krate == BUILTIN_MACROS_CRATE);\n+            invoc.expansion_data.mark.set_is_builtin(def_id.krate == CrateNum::BuiltinMacros);\n         }\n \n         Ok(Some(ext))\n@@ -1087,7 +1087,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n         };\n \n         // Plugin-based syntax extensions are exempt from this check\n-        if krate == BUILTIN_MACROS_CRATE { return; }\n+        if krate == CrateNum::BuiltinMacros { return; }\n \n         let ext = binding.get_macro(self);\n "}]}