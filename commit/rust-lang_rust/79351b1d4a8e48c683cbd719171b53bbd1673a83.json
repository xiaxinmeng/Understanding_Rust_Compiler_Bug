{"sha": "79351b1d4a8e48c683cbd719171b53bbd1673a83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5MzUxYjFkNGE4ZTQ4YzY4M2NiZDcxOTE3MWI1M2JiZDE2NzNhODM=", "commit": {"author": {"name": "Ethan Brierley", "email": "ethanboxx@gmail.com", "date": "2020-10-12T21:27:59Z"}, "committer": {"name": "Ethan Brierley", "email": "ethanboxx@gmail.com", "date": "2020-10-12T21:27:59Z"}, "message": "Bless expected errors", "tree": {"sha": "3ddb13e18a90afae55d7a81806e1058b61718fc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ddb13e18a90afae55d7a81806e1058b61718fc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79351b1d4a8e48c683cbd719171b53bbd1673a83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79351b1d4a8e48c683cbd719171b53bbd1673a83", "html_url": "https://github.com/rust-lang/rust/commit/79351b1d4a8e48c683cbd719171b53bbd1673a83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79351b1d4a8e48c683cbd719171b53bbd1673a83/comments", "author": {"login": "eopb", "id": 8074468, "node_id": "MDQ6VXNlcjgwNzQ0Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/8074468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eopb", "html_url": "https://github.com/eopb", "followers_url": "https://api.github.com/users/eopb/followers", "following_url": "https://api.github.com/users/eopb/following{/other_user}", "gists_url": "https://api.github.com/users/eopb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eopb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eopb/subscriptions", "organizations_url": "https://api.github.com/users/eopb/orgs", "repos_url": "https://api.github.com/users/eopb/repos", "events_url": "https://api.github.com/users/eopb/events{/privacy}", "received_events_url": "https://api.github.com/users/eopb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eopb", "id": 8074468, "node_id": "MDQ6VXNlcjgwNzQ0Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/8074468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eopb", "html_url": "https://github.com/eopb", "followers_url": "https://api.github.com/users/eopb/followers", "following_url": "https://api.github.com/users/eopb/following{/other_user}", "gists_url": "https://api.github.com/users/eopb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eopb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eopb/subscriptions", "organizations_url": "https://api.github.com/users/eopb/orgs", "repos_url": "https://api.github.com/users/eopb/repos", "events_url": "https://api.github.com/users/eopb/events{/privacy}", "received_events_url": "https://api.github.com/users/eopb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "facb38d1dcdc7a311f96f965389a837829f8f8d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/facb38d1dcdc7a311f96f965389a837829f8f8d6", "html_url": "https://github.com/rust-lang/rust/commit/facb38d1dcdc7a311f96f965389a837829f8f8d6"}], "stats": {"total": 264, "additions": 132, "deletions": 132}, "files": [{"sha": "cfaacf7a5be337d308b571bb0abf9921e1862729", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/array-size-in-generic-struct-param.rs:9:48\n    |\n LL | struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n    |                                                ^ cannot perform const operation using `N`\n    |\n-   = help: const parameters may only be used as standalone arguments `N`\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/array-size-in-generic-struct-param.rs:20:15\n    |\n LL |     arr: [u8; CFG.arr_size],\n    |               ^^^ cannot perform const operation using `CFG`\n    |\n-   = help: const parameters may only be used as standalone arguments `CFG`\n+   = help: const parameters may only be used as standalone arguments, i.e. `CFG`\n \n error: `Config` is forbidden as the type of a const generic parameter\n   --> $DIR/array-size-in-generic-struct-param.rs:18:21"}, {"sha": "768180d0813a93b4fb8a98c790bbe8c070fb0876", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -8,7 +8,7 @@\n #[allow(dead_code)]\n struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n //[full]~^ ERROR constant expression depends on a generic parameter\n-//[min]~^^ ERROR generic parameters must not be used inside const evaluations\n+//[min]~^^ ERROR generic parameters may not be used in const operations\n \n #[derive(PartialEq, Eq)]\n struct Config {\n@@ -19,7 +19,7 @@ struct B<const CFG: Config> {\n     //[min]~^ ERROR `Config` is forbidden\n     arr: [u8; CFG.arr_size],\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside const evaluations\n+    //[min]~^^ ERROR generic parameters may not be used in const operations\n }\n \n const C: Config = Config { arr_size: 5 };"}, {"sha": "bce701ade8651f22c40c8956a30c0f88fb9a3e2a", "filename": "src/test/ui/const-generics/const-argument-if-length.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/const-argument-if-length.rs:19:24\n    |\n LL |     pad: [u8; is_zst::<T>()],\n    |                        ^ cannot perform const operation using `T`\n    |\n-   = note: type parameters may not be used in anonymous constants\n+   = note: type parameters may not be used in const expressions\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/const-argument-if-length.rs:17:12"}, {"sha": "a8bffd17b912c0ac3205a1541357bf684ad4f40c", "filename": "src/test/ui/const-generics/const-argument-if-length.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.rs?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -17,7 +17,7 @@ pub struct AtLeastByte<T: ?Sized> {\n     value: T,\n     //~^ ERROR the size for values of type `T` cannot be known at compilation time\n     pad: [u8; is_zst::<T>()],\n-    //[min]~^ ERROR generic parameters must not be used inside const evaluations\n+    //[min]~^ ERROR generic parameters may not be used in const operations\n     //[full]~^^ ERROR evaluation of constant value failed\n }\n "}, {"sha": "359c2d2a22f02b672257a665e3dc1780bf74461a", "filename": "src/test/ui/const-generics/const_evaluatable_checked/feature-gate-const_evaluatable_checked.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.min.stderr?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/feature-gate-const_evaluatable_checked.rs:6:33\n    |\n LL | type Arr<const N: usize> = [u8; N - 1];\n    |                                 ^ cannot perform const operation using `N`\n    |\n-   = help: const parameters may only be used as standalone arguments `N`\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: aborting due to previous error\n "}, {"sha": "9746adab29bf63c7f89cb3ee1d3b5525dc779415", "filename": "src/test/ui/const-generics/const_evaluatable_checked/feature-gate-const_evaluatable_checked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.rs?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -4,7 +4,7 @@\n #![cfg_attr(min, feature(min_const_generics))]\n \n type Arr<const N: usize> = [u8; N - 1];\n-//[min]~^ ERROR generic parameters must not be used inside const evaluations\n+//[min]~^ ERROR generic parameters may not be used in const operations\n \n fn test<const N: usize>() -> Arr<N> where Arr<N>: Default {\n     //[full]~^ ERROR constant expression depends"}, {"sha": "46485262cc46eab2606aab57e8818647ce607ef9", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/simple.rs:8:53\n    |\n LL | fn test<const N: usize>() -> [u8; N - 1] where [u8; N - 1]: Default {\n    |                                                     ^ cannot perform const operation using `N`\n    |\n-   = help: const parameters may only be used as standalone arguments `N`\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/simple.rs:8:35\n    |\n LL | fn test<const N: usize>() -> [u8; N - 1] where [u8; N - 1]: Default {\n    |                                   ^ cannot perform const operation using `N`\n    |\n-   = help: const parameters may only be used as standalone arguments `N`\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "981d993f58976460988c182404cd31cc11ce2a09", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/simple_fail.rs:7:33\n    |\n LL | type Arr<const N: usize> = [u8; N - 1];\n    |                                 ^ cannot perform const operation using `N`\n    |\n-   = help: const parameters may only be used as standalone arguments `N`\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: aborting due to previous error\n "}, {"sha": "5e2c080927f8601c282f8c394294b6a01d55a0c1", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -5,7 +5,7 @@\n #![allow(incomplete_features)]\n \n type Arr<const N: usize> = [u8; N - 1]; //[full]~ ERROR evaluation of constant\n-//[min]~^ ERROR generic parameters must not be used inside const evaluations\n+//[min]~^ ERROR generic parameters may not be used in const operations\n \n fn test<const N: usize>() -> Arr<N> where Arr<N>: Sized {\n     todo!()"}, {"sha": "84449018e4609971b1768a10e97f30baf8c49e83", "filename": "src/test/ui/const-generics/generic-function-call-in-array-length.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.min.stderr?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/generic-function-call-in-array-length.rs:9:39\n    |\n LL | fn bar<const N: usize>() -> [u32; foo(N)] {\n    |                                       ^ cannot perform const operation using `N`\n    |\n-   = help: const parameters may only be used as standalone arguments `N`\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/generic-function-call-in-array-length.rs:12:13\n    |\n LL |     [0; foo(N)]\n    |             ^ cannot perform const operation using `N`\n    |\n-   = help: const parameters may only be used as standalone arguments `N`\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c838070dc95af4dd7f894e53e5f180985ed884fb", "filename": "src/test/ui/const-generics/generic-function-call-in-array-length.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.rs?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -7,10 +7,10 @@\n const fn foo(n: usize) -> usize { n * 2 }\n \n fn bar<const N: usize>() -> [u32; foo(N)] {\n-    //[min]~^ ERROR generic parameters must not be used inside const evaluations\n+    //[min]~^ ERROR generic parameters may not be used in const operations\n     //[full]~^^ ERROR constant expression depends on a generic parameter\n     [0; foo(N)]\n-    //[min]~^ ERROR generic parameters must not be used inside const evaluations\n+    //[min]~^ ERROR generic parameters may not be used in const operations\n }\n \n fn main() {}"}, {"sha": "d3f7143327ead8f5023faff290ae4468be4eb9b3", "filename": "src/test/ui/const-generics/generic-sum-in-array-length.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.min.stderr?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/generic-sum-in-array-length.rs:7:53\n    |\n LL | fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n    |                                                     ^ cannot perform const operation using `A`\n    |\n-   = help: const parameters may only be used as standalone arguments `A`\n+   = help: const parameters may only be used as standalone arguments, i.e. `A`\n \n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/generic-sum-in-array-length.rs:7:57\n    |\n LL | fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n    |                                                         ^ cannot perform const operation using `B`\n    |\n-   = help: const parameters may only be used as standalone arguments `B`\n+   = help: const parameters may only be used as standalone arguments, i.e. `B`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "84ddfe055dc3fe5644e1ca410a06430cf4b8f0c9", "filename": "src/test/ui/const-generics/generic-sum-in-array-length.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.rs?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -5,8 +5,8 @@\n #![cfg_attr(min, feature(min_const_generics))]\n \n fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n-//[min]~^ ERROR generic parameters must not be used inside const evaluations\n-//[min]~| ERROR generic parameters must not be used inside const evaluations\n+//[min]~^ ERROR generic parameters may not be used in const operations\n+//[min]~| ERROR generic parameters may not be used in const operations\n //[full]~^^^ ERROR constant expression depends on a generic parameter\n \n fn main() {}"}, {"sha": "20a8d9fdaab53c5001082a5ba291f46ebb6ceb7e", "filename": "src/test/ui/const-generics/intrinsics-type_name-as-const-argument.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/intrinsics-type_name-as-const-argument.rs:15:44\n    |\n LL |     T: Trait<{std::intrinsics::type_name::<T>()}>\n    |                                            ^ cannot perform const operation using `T`\n    |\n-   = note: type parameters may not be used in anonymous constants\n+   = note: type parameters may not be used in const expressions\n \n error: `&'static str` is forbidden as the type of a const generic parameter\n   --> $DIR/intrinsics-type_name-as-const-argument.rs:10:22"}, {"sha": "8971c00ed5a298d6883d5addaf0e67663dd9d53c", "filename": "src/test/ui/const-generics/intrinsics-type_name-as-const-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.rs?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -13,7 +13,7 @@ trait Trait<const S: &'static str> {}\n struct Bug<T>\n where\n     T: Trait<{std::intrinsics::type_name::<T>()}>\n-    //[min]~^ ERROR generic parameters must not be used inside const evaluations\n+    //[min]~^ ERROR generic parameters may not be used in const operations\n     //[full]~^^ ERROR constant expression depends on a generic parameter\n {\n     t: T"}, {"sha": "526807f0a247469e728ae6f6e32cae0697a99401", "filename": "src/test/ui/const-generics/issue-61522-array-len-succ.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.min.stderr?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-61522-array-len-succ.rs:7:45\n    |\n LL | pub struct MyArray<const COUNT: usize>([u8; COUNT + 1]);\n    |                                             ^^^^^ cannot perform const operation using `COUNT`\n    |\n-   = help: const parameters may only be used as standalone arguments `COUNT`\n+   = help: const parameters may only be used as standalone arguments, i.e. `COUNT`\n \n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-61522-array-len-succ.rs:12:30\n    |\n LL |     fn inner(&self) -> &[u8; COUNT + 1] {\n    |                              ^^^^^ cannot perform const operation using `COUNT`\n    |\n-   = help: const parameters may only be used as standalone arguments `COUNT`\n+   = help: const parameters may only be used as standalone arguments, i.e. `COUNT`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8c0a3a0377468f3dbc2fbbc21899af330331b14a", "filename": "src/test/ui/const-generics/issue-61522-array-len-succ.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.rs?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -6,12 +6,12 @@\n \n pub struct MyArray<const COUNT: usize>([u8; COUNT + 1]);\n //[full]~^ ERROR constant expression depends on a generic parameter\n-//[min]~^^ ERROR generic parameters must not be used\n+//[min]~^^ ERROR generic parameters may not be used\n \n impl<const COUNT: usize> MyArray<COUNT> {\n     fn inner(&self) -> &[u8; COUNT + 1] {\n         //[full]~^ ERROR constant expression depends on a generic parameter\n-        //[min]~^^ ERROR generic parameters must not be used\n+        //[min]~^^ ERROR generic parameters may not be used\n         &self.0\n     }\n }"}, {"sha": "3c344edbf1d15f33329187968c9cd8c0ff13aadc", "filename": "src/test/ui/const-generics/issue-67375.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.min.stderr?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-67375.rs:9:25\n    |\n LL |     inner: [(); { [|_: &T| {}; 0].len() }],\n    |                         ^ cannot perform const operation using `T`\n    |\n-   = note: type parameters may not be used in anonymous constants\n+   = note: type parameters may not be used in const expressions\n \n error[E0392]: parameter `T` is never used\n   --> $DIR/issue-67375.rs:7:12"}, {"sha": "ecc76bcae06c5b8f1e55517ff27ccdf74ee15528", "filename": "src/test/ui/const-generics/issue-67375.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.rs?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -7,7 +7,7 @@\n struct Bug<T> {\n     //~^ ERROR parameter `T` is never used\n     inner: [(); { [|_: &T| {}; 0].len() }],\n-    //[min]~^ ERROR generic parameters must not be used inside const evaluations\n+    //[min]~^ ERROR generic parameters may not be used in const operations\n     //[full]~^^ WARN cannot use constants which depend on generic parameters in types\n     //[full]~^^^ WARN this was previously accepted by the compiler\n }"}, {"sha": "804236c30bd8153fa9e63d5caef60bc1e6c9d416", "filename": "src/test/ui/const-generics/issue-67945-1.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.min.stderr?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-67945-1.rs:14:16\n    |\n LL |         let x: S = MaybeUninit::uninit();\n    |                ^ cannot perform const operation using `S`\n    |\n-   = note: type parameters may not be used in anonymous constants\n+   = note: type parameters may not be used in const expressions\n \n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-67945-1.rs:17:45\n    |\n LL |         let b = &*(&x as *const _ as *const S);\n    |                                             ^ cannot perform const operation using `S`\n    |\n-   = note: type parameters may not be used in anonymous constants\n+   = note: type parameters may not be used in const expressions\n \n error[E0392]: parameter `S` is never used\n   --> $DIR/issue-67945-1.rs:11:12"}, {"sha": "6771603f2594bad3e0af72323e97cd3b9d810e34", "filename": "src/test/ui/const-generics/issue-67945-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.rs?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -12,10 +12,10 @@ struct Bug<S> {\n     //~^ ERROR parameter `S` is never used\n     A: [(); {\n         let x: S = MaybeUninit::uninit();\n-        //[min]~^ ERROR generic parameters must not be used inside const evaluations\n+        //[min]~^ ERROR generic parameters may not be used in const operations\n         //[full]~^^ ERROR mismatched types\n         let b = &*(&x as *const _ as *const S);\n-        //[min]~^ ERROR generic parameters must not be used inside const evaluations\n+        //[min]~^ ERROR generic parameters may not be used in const operations\n         0\n     }],\n }"}, {"sha": "2de942c1220cd636c43358e10bcdd4612bb2274a", "filename": "src/test/ui/const-generics/issue-67945-2.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.min.stderr?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-67945-2.rs:12:16\n    |\n LL |         let x: S = MaybeUninit::uninit();\n    |                ^ cannot perform const operation using `S`\n    |\n-   = note: type parameters may not be used in anonymous constants\n+   = note: type parameters may not be used in const expressions\n \n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-67945-2.rs:15:45\n    |\n LL |         let b = &*(&x as *const _ as *const S);\n    |                                             ^ cannot perform const operation using `S`\n    |\n-   = note: type parameters may not be used in anonymous constants\n+   = note: type parameters may not be used in const expressions\n \n error[E0392]: parameter `S` is never used\n   --> $DIR/issue-67945-2.rs:9:12"}, {"sha": "72dbb674e66bd33fd108df58af146dab975d037d", "filename": "src/test/ui/const-generics/issue-67945-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.rs?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -10,10 +10,10 @@ struct Bug<S> {\n     //~^ ERROR parameter `S` is never used\n     A: [(); {\n         let x: S = MaybeUninit::uninit();\n-        //[min]~^ ERROR generic parameters must not be used inside const evaluations\n+        //[min]~^ ERROR generic parameters may not be used in const operations\n         //[full]~^^ ERROR mismatched types\n         let b = &*(&x as *const _ as *const S);\n-        //[min]~^ ERROR generic parameters must not be used inside const evaluations\n+        //[min]~^ ERROR generic parameters may not be used in const operations\n         0\n     }],\n }"}, {"sha": "b176f9d1c75aa95d2b0ecfa8a567aa73c3ecf79e", "filename": "src/test/ui/const-generics/issues/issue-61747.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-61747.rs:8:30\n    |\n LL |     fn successor() -> Const<{C + 1}> {\n    |                              ^ cannot perform const operation using `C`\n    |\n-   = help: const parameters may only be used as standalone arguments `C`\n+   = help: const parameters may only be used as standalone arguments, i.e. `C`\n \n error: aborting due to previous error\n "}, {"sha": "3a4dd1cdd181df9d1db2e4391868d6a2fdc89304", "filename": "src/test/ui/const-generics/issues/issue-61747.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.rs?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -7,7 +7,7 @@ struct Const<const N: usize>;\n impl<const C: usize> Const<{C}> {\n     fn successor() -> Const<{C + 1}> {\n         //[full]~^ ERROR constant expression depends on a generic parameter\n-        //[min]~^^ ERROR generic parameters must not be used\n+        //[min]~^^ ERROR generic parameters may not be used\n         Const\n     }\n }"}, {"sha": "9e31466259fd9a607957c278a49e26f3e19f3cee", "filename": "src/test/ui/const-generics/issues/issue-61935.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-61935.rs:10:23\n    |\n LL |         Self:FooImpl<{N==0}>\n    |                       ^ cannot perform const operation using `N`\n    |\n-   = help: const parameters may only be used as standalone arguments `N`\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: aborting due to previous error\n "}, {"sha": "9fa02329a7124c805d82453896e8babfb9f87a72", "filename": "src/test/ui/const-generics/issues/issue-61935.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -9,7 +9,7 @@ impl<const N: usize> Foo for [(); N]\n     where\n         Self:FooImpl<{N==0}>\n //[full]~^ERROR constant expression depends on a generic parameter\n-//[min]~^^ERROR generic parameters must not be used inside const evaluations\n+//[min]~^^ERROR generic parameters may not be used in const operations\n {}\n \n trait FooImpl<const IS_ZERO: bool>{}"}, {"sha": "3bd127ee74a592c401b72f3d9cd30f8e1d931e0c", "filename": "src/test/ui/const-generics/issues/issue-62220.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-62220.rs:8:59\n    |\n LL | pub type TruncatedVector<T, const N: usize> = Vector<T, { N - 1 }>;\n    |                                                           ^ cannot perform const operation using `N`\n    |\n-   = help: const parameters may only be used as standalone arguments `N`\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: aborting due to previous error\n "}, {"sha": "2017473fa9e24cbb66bc2961685bdc32aa27759b", "filename": "src/test/ui/const-generics/issues/issue-62220.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -6,7 +6,7 @@\n pub struct Vector<T, const N: usize>([T; N]);\n \n pub type TruncatedVector<T, const N: usize> = Vector<T, { N - 1 }>;\n-//[min]~^ ERROR generic parameters must not be used inside const evaluations\n+//[min]~^ ERROR generic parameters may not be used in const operations\n \n impl<T, const N: usize> Vector<T, { N }> {\n     /// Drop the last component and return the vector with one fewer dimension."}, {"sha": "c73f62a4a07d9a2141ca5ef1c2c98eedac98c7bd", "filename": "src/test/ui/const-generics/issues/issue-62456.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-62456.rs:7:20\n    |\n LL |     let _ = [0u64; N + 1];\n    |                    ^ cannot perform const operation using `N`\n    |\n-   = help: const parameters may only be used as standalone arguments `N`\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: aborting due to previous error\n "}, {"sha": "cbb2a11a931aeabd1df230222a68ef0211fc7884", "filename": "src/test/ui/const-generics/issues/issue-62456.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -6,7 +6,7 @@\n fn foo<const N: usize>() {\n     let _ = [0u64; N + 1];\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside const evaluations\n+    //[min]~^^ ERROR generic parameters may not be used in const operations\n }\n \n fn main() {}"}, {"sha": "8b02fd108bd5bbc427aa1a8effbe700326b1d300", "filename": "src/test/ui/const-generics/issues/issue-64494.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-64494.rs:16:38\n    |\n LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 5}>: True {}\n    |                                      ^^^^^^ cannot perform const operation using `T`\n    |\n-   = note: type parameters may not be used in anonymous constants\n+   = note: type parameters may not be used in const expressions\n \n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-64494.rs:19:38\n    |\n LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 6}>: True {}\n    |                                      ^^^^^^ cannot perform const operation using `T`\n    |\n-   = note: type parameters may not be used in anonymous constants\n+   = note: type parameters may not be used in const expressions\n \n error[E0119]: conflicting implementations of trait `MyTrait`:\n   --> $DIR/issue-64494.rs:19:1"}, {"sha": "014742be03db609f858a3b7ae8f362ba412dfc6f", "filename": "src/test/ui/const-generics/issues/issue-64494.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.rs?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -15,10 +15,10 @@ impl True for Is<{true}> {}\n \n impl<T: Foo> MyTrait for T where Is<{T::VAL == 5}>: True {}\n //[full]~^ ERROR constant expression depends on a generic parameter\n-//[min]~^^ ERROR generic parameters must not be used inside const evaluations\n+//[min]~^^ ERROR generic parameters may not be used in const operations\n impl<T: Foo> MyTrait for T where Is<{T::VAL == 6}>: True {}\n //[full]~^ ERROR constant expression depends on a generic parameter\n-//[min]~^^ ERROR generic parameters must not be used inside const evaluations\n+//[min]~^^ ERROR generic parameters may not be used in const operations\n //[min]~| ERROR conflicting implementations of trait `MyTrait`\n \n fn main() {}"}, {"sha": "282f72be6da6e3bc2e139123e90271824caeb544", "filename": "src/test/ui/const-generics/issues/issue-66205.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-66205.rs:8:14\n    |\n LL |     fact::<{ N - 1 }>();\n    |              ^ cannot perform const operation using `N`\n    |\n-   = help: const parameters may only be used as standalone arguments `N`\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: aborting due to previous error\n "}, {"sha": "4e37c247d008ed461f3596cdebd3cd08005b4674", "filename": "src/test/ui/const-generics/issues/issue-66205.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -7,7 +7,7 @@\n fn fact<const N: usize>() {\n     fact::<{ N - 1 }>();\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside const evaluations\n+    //[min]~^^ ERROR generic parameters may not be used in const operations\n }\n \n fn main() {}"}, {"sha": "35d97c4624811c79f461306eecdab42dd1f0fea9", "filename": "src/test/ui/const-generics/issues/issue-67739.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-67739.rs:12:30\n    |\n LL |         [0u8; mem::size_of::<Self::Associated>()];\n    |                              ^^^^^^^^^^^^^^^^ cannot perform const operation using `Self`\n    |\n-   = note: type parameters may not be used in anonymous constants\n+   = note: type parameters may not be used in const expressions\n \n error: aborting due to previous error\n "}, {"sha": "21d13de22ebfc7ac279cb0bb0ac4bcb84414eb98", "filename": "src/test/ui/const-generics/issues/issue-67739.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -11,7 +11,7 @@ pub trait Trait {\n     fn associated_size(&self) -> usize {\n         [0u8; mem::size_of::<Self::Associated>()];\n         //[full]~^ ERROR constant expression depends on a generic parameter\n-        //[min]~^^ ERROR generic parameters must not be used inside const evaluations\n+        //[min]~^^ ERROR generic parameters may not be used in const operations\n         0\n     }\n }"}, {"sha": "b900a0d096ac2d71642415634ab95d9a48d3aea3", "filename": "src/test/ui/const-generics/issues/issue-68366.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-68366.rs:12:37\n    |\n LL | impl <const N: usize> Collatz<{Some(N)}> {}\n    |                                     ^ cannot perform const operation using `N`\n    |\n-   = help: const parameters may only be used as standalone arguments `N`\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n   --> $DIR/issue-68366.rs:12:13"}, {"sha": "474cdb7258d96478eb2a3f6c30991e970c024738", "filename": "src/test/ui/const-generics/issues/issue-68366.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -11,7 +11,7 @@ struct Collatz<const N: Option<usize>>;\n \n impl <const N: usize> Collatz<{Some(N)}> {}\n //~^ ERROR the const parameter\n-//[min]~^^ generic parameters must not be used inside const evaluations\n+//[min]~^^ generic parameters may not be used in const operations\n \n struct Foo;\n "}, {"sha": "7828d859394979e5841696d97a9bb668f06d1e03", "filename": "src/test/ui/const-generics/issues/issue-68977.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-68977.rs:29:17\n    |\n LL |     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;\n    |                 ^^^^^^^^ cannot perform const operation using `INT_BITS`\n    |\n-   = help: const parameters may only be used as standalone arguments `INT_BITS`\n+   = help: const parameters may only be used as standalone arguments, i.e. `INT_BITS`\n \n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-68977.rs:29:28\n    |\n LL |     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;\n    |                            ^^^^^^^^^ cannot perform const operation using `FRAC_BITS`\n    |\n-   = help: const parameters may only be used as standalone arguments `FRAC_BITS`\n+   = help: const parameters may only be used as standalone arguments, i.e. `FRAC_BITS`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4fea94cb4652bf5f992a6730cfca6eedab970a57", "filename": "src/test/ui/const-generics/issues/issue-68977.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.rs?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -27,8 +27,8 @@ fxp_storage_impls! {\n \n type FxpStorageHelper<const INT_BITS: u8, const FRAC_BITS: u8> =\n     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;\n-    //[min]~^ ERROR generic parameters must not be used inside const evaluations\n-    //[min]~| ERROR generic parameters must not be used inside const evaluations\n+    //[min]~^ ERROR generic parameters may not be used in const operations\n+    //[min]~| ERROR generic parameters may not be used in const operations\n \n struct Fxp<const INT_BITS: u8, const FRAC_BITS: u8>\n where"}, {"sha": "d960d9513b7528e8a083944e5a3e9d30b91bc3c6", "filename": "src/test/ui/const-generics/issues/issue-72787.min.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -1,34 +1,34 @@\n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-72787.rs:11:17\n    |\n LL |     Condition<{ LHS <= RHS }>: True\n    |                 ^^^ cannot perform const operation using `LHS`\n    |\n-   = help: const parameters may only be used as standalone arguments `LHS`\n+   = help: const parameters may only be used as standalone arguments, i.e. `LHS`\n \n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-72787.rs:11:24\n    |\n LL |     Condition<{ LHS <= RHS }>: True\n    |                        ^^^ cannot perform const operation using `RHS`\n    |\n-   = help: const parameters may only be used as standalone arguments `RHS`\n+   = help: const parameters may only be used as standalone arguments, i.e. `RHS`\n \n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-72787.rs:26:25\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                         ^ cannot perform const operation using `I`\n    |\n-   = help: const parameters may only be used as standalone arguments `I`\n+   = help: const parameters may only be used as standalone arguments, i.e. `I`\n \n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-72787.rs:26:36\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                                    ^ cannot perform const operation using `J`\n    |\n-   = help: const parameters may only be used as standalone arguments `J`\n+   = help: const parameters may only be used as standalone arguments, i.e. `J`\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72787.rs:22:26"}, {"sha": "57572e23aa4dee8a83d7ab9c04ca87caae4be15f", "filename": "src/test/ui/const-generics/issues/issue-72787.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.rs?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -10,8 +10,8 @@ pub trait True {}\n impl<const LHS: u32, const RHS: u32> True for IsLessOrEqual<LHS, RHS> where\n     Condition<{ LHS <= RHS }>: True\n //[full]~^ Error constant expression depends on a generic parameter\n-//[min]~^^ Error generic parameters must not be used inside const evaluations\n-//[min]~| Error generic parameters must not be used inside const evaluations\n+//[min]~^^ Error generic parameters may not be used in const operations\n+//[min]~| Error generic parameters may not be used in const operations\n {\n }\n impl True for Condition<true> {}\n@@ -28,8 +28,8 @@ where\n //[full]~| constant expression depends on a generic parameter\n //[full]~| constant expression depends on a generic parameter\n //[full]~| constant expression depends on a generic parameter\n-//[min]~^^^^^ Error generic parameters must not be used inside const evaluations\n-//[min]~| Error generic parameters must not be used inside const evaluations\n+//[min]~^^^^^ Error generic parameters may not be used in const operations\n+//[min]~| Error generic parameters may not be used in const operations\n     // Condition<{ 8 - I <= 8 - J }>: True,\n {\n     fn print() {"}, {"sha": "9fec3eb946d8313c92ce512338444a72da4101de", "filename": "src/test/ui/const-generics/issues/issue-72819-generic-in-const-eval.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-72819-generic-in-const-eval.rs:9:17\n    |\n LL | where Assert::<{N < usize::max_value() / 2}>: IsTrue,\n    |                 ^ cannot perform const operation using `N`\n    |\n-   = help: const parameters may only be used as standalone arguments `N`\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: aborting due to previous error\n "}, {"sha": "6182042bde7817e85aa29d0dd7e69b2625f95578", "filename": "src/test/ui/const-generics/issues/issue-72819-generic-in-const-eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.rs?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -8,7 +8,7 @@\n struct Arr<const N: usize>\n where Assert::<{N < usize::max_value() / 2}>: IsTrue,\n //[full]~^ ERROR constant expression depends on a generic parameter\n-//[min]~^^ ERROR generic parameters must not be used inside const evaluations\n+//[min]~^^ ERROR generic parameters may not be used in const operations\n {\n }\n "}, {"sha": "c10db84ea6ecc1c1fc36e22907cf0c2f2c70302c", "filename": "src/test/ui/const-generics/issues/issue-76701-ty-param-in-const.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-76701-ty-param-in-const.rs:6:46\n    |\n LL | fn ty_param<T>() -> [u8; std::mem::size_of::<T>()] {\n    |                                              ^ cannot perform const operation using `T`\n    |\n-   = note: type parameters may not be used in anonymous constants\n+   = note: type parameters may not be used in const expressions\n \n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/issue-76701-ty-param-in-const.rs:12:42\n    |\n LL | fn const_param<const N: usize>() -> [u8; N + 1] {\n    |                                          ^ cannot perform const operation using `N`\n    |\n-   = help: const parameters may only be used as standalone arguments `N`\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9051c36fe81f40aa8d5dd2a7c96583b4b7686438", "filename": "src/test/ui/const-generics/issues/issue-76701-ty-param-in-const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.rs?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -5,13 +5,13 @@\n \n fn ty_param<T>() -> [u8; std::mem::size_of::<T>()] {\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside const evaluations\n+    //[min]~^^ ERROR generic parameters may not be used in const operations\n     todo!()\n }\n \n fn const_param<const N: usize>() -> [u8; N + 1] {\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside const evaluations\n+    //[min]~^^ ERROR generic parameters may not be used in const operations\n     todo!()\n }\n "}, {"sha": "8257ffbf4915b3d5cb731a7f4a6c96514febfa90", "filename": "src/test/ui/const-generics/min_const_generics/complex-expression.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -7,19 +7,19 @@ fn ok<const M: usize>() -> [u8; M] {\n }\n \n struct Break0<const N: usize>([u8; { N + 1 }]);\n-//~^ ERROR generic parameters must not be used inside const evaluations\n+//~^ ERROR generic parameters may not be used in const operations\n \n struct Break1<const N: usize>([u8; { { N } }]);\n-//~^ ERROR generic parameters must not be used inside const evaluations\n+//~^ ERROR generic parameters may not be used in const operations\n \n fn break2<const N: usize>() {\n     let _: [u8; N + 1];\n-    //~^ ERROR generic parameters must not be used inside const evaluations\n+    //~^ ERROR generic parameters may not be used in const operations\n }\n \n fn break3<const N: usize>() {\n     let _ = [0; N + 1];\n-    //~^ ERROR generic parameters must not be used inside const evaluations\n+    //~^ ERROR generic parameters may not be used in const operations\n }\n \n trait Foo {"}, {"sha": "73768ac03a4b107d40aab45adbefe8c27782c925", "filename": "src/test/ui/const-generics/min_const_generics/complex-expression.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -1,34 +1,34 @@\n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/complex-expression.rs:9:38\n    |\n LL | struct Break0<const N: usize>([u8; { N + 1 }]);\n    |                                      ^ cannot perform const operation using `N`\n    |\n-   = help: const parameters may only be used as standalone arguments `N`\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/complex-expression.rs:12:40\n    |\n LL | struct Break1<const N: usize>([u8; { { N } }]);\n    |                                        ^ cannot perform const operation using `N`\n    |\n-   = help: const parameters may only be used as standalone arguments `N`\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/complex-expression.rs:16:17\n    |\n LL |     let _: [u8; N + 1];\n    |                 ^ cannot perform const operation using `N`\n    |\n-   = help: const parameters may only be used as standalone arguments `N`\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/complex-expression.rs:21:17\n    |\n LL |     let _ = [0; N + 1];\n    |                 ^ cannot perform const operation using `N`\n    |\n-   = help: const parameters may only be used as standalone arguments `N`\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "64da5e07df2f4bbfb354cfdb1801d5f55fb35f55", "filename": "src/test/ui/const-generics/min_const_generics/self-ty-in-const-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/self-ty-in-const-1.rs:4:41\n    |\n LL |     fn t1() -> [u8; std::mem::size_of::<Self>()];\n    |                                         ^^^^ cannot perform const operation using `Self`\n    |\n-   = note: type parameters may not be used in anonymous constants\n+   = note: type parameters may not be used in const expressions\n \n error: generic `Self` types are currently not permitted in anonymous constants\n   --> $DIR/self-ty-in-const-1.rs:14:41"}, {"sha": "39aa8087cec50a5fff1ff06003597fda61947205", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -6,13 +6,13 @@ LL | struct Bar<T = [u8; N], const N: usize>(T);\n    |\n    = note: using type defaults and const parameters in the same parameter list is currently not permitted\n \n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:7:44\n    |\n LL | struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n    |                                            ^ cannot perform const operation using `T`\n    |\n-   = note: type parameters may not be used in anonymous constants\n+   = note: type parameters may not be used in const expressions\n \n error: constant values inside of type parameter defaults must not depend on generic parameters\n   --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:12:21"}, {"sha": "51f0cff3f215e61e8f1da9cb07071cd932387464", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -6,7 +6,7 @@\n \n struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n //[full]~^ ERROR constant values inside of type parameter defaults\n-//[min]~^^ ERROR generic parameters must not be used inside const evaluations\n+//[min]~^^ ERROR generic parameters may not be used in const operations\n \n // FIXME(const_generics:defaults): We still don't know how to we deal with type defaults.\n struct Bar<T = [u8; N], const N: usize>(T);"}, {"sha": "935f12dd2c3048e8c8f077653e303619d7fdee1a", "filename": "src/test/ui/const-generics/wf-misc.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/wf-misc.rs:9:17\n    |\n LL |     let _: [u8; N + 1];\n    |                 ^ cannot perform const operation using `N`\n    |\n-   = help: const parameters may only be used as standalone arguments `N`\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n-error: generic parameters must not be used inside const evaluations\n+error: generic parameters may not be used in const operations\n   --> $DIR/wf-misc.rs:17:21\n    |\n LL |     let _: Const::<{N + 1}>;\n    |                     ^ cannot perform const operation using `N`\n    |\n-   = help: const parameters may only be used as standalone arguments `N`\n+   = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "103c580f28fc44985d2c154fa619c339bbe511aa", "filename": "src/test/ui/const-generics/wf-misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79351b1d4a8e48c683cbd719171b53bbd1673a83/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.rs?ref=79351b1d4a8e48c683cbd719171b53bbd1673a83", "patch": "@@ -8,15 +8,15 @@\n pub fn arr_len<const N: usize>() {\n     let _: [u8; N + 1];\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside const evaluations\n+    //[min]~^^ ERROR generic parameters may not be used in const operations\n }\n \n struct Const<const N: usize>;\n \n pub fn func_call<const N: usize>() {\n     let _: Const::<{N + 1}>;\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside const evaluations\n+    //[min]~^^ ERROR generic parameters may not be used in const operations\n }\n \n fn main() {}"}]}