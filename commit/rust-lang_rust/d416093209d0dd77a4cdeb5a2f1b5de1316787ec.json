{"sha": "d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0MTYwOTMyMDlkMGRkNzdhNGNkZWI1YTJmMWI1ZGUxMzE2Nzg3ZWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-12T14:40:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-12T14:40:27Z"}, "message": "Auto merge of #82025 - JohnTitor:rollup-cohp0gy, r=JohnTitor\n\nRollup of 16 pull requests\n\nSuccessful merges:\n\n - #79983 (fix indefinite article in cell.rs)\n - #81831 (Don't display `mut` in arguments for functions documentation)\n - #81947 (Relax ItemCtxt::to_ty lifetime)\n - #81954 (RELEASES.md 1.50: Group platform support notes together)\n - #81955 (bootstrap: Locate llvm-dwp based on llvm-config bindir)\n - #81959 (Fix assosiated typo)\n - #81964 (Fix documentation not showing on localStorage error)\n - #81968 (bootstrap: fix wrong docs installation path)\n - #81990 (Make suggestion of changing mutability of arguments broader)\n - #81994 (Improve long explanation for E0542 and E0546)\n - #81997 (dist: include src/build_helper as part of the crate graph for rustc-dev)\n - #82003 (Stack probes: fix error message)\n - #82004 (clean up clean::Static struct)\n - #82011 (Fix private intra-doc warnings on associated items)\n - #82013 (Tell user how to fix CI file being not up to date)\n - #82017 (Fix typo in mod.rs)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "5346fc9e189c71ddfd57402bb3bf9dce8653a1a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5346fc9e189c71ddfd57402bb3bf9dce8653a1a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "html_url": "https://github.com/rust-lang/rust/commit/d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a118ee2c13cc96ceb27bd5030c1cca1052377604", "url": "https://api.github.com/repos/rust-lang/rust/commits/a118ee2c13cc96ceb27bd5030c1cca1052377604", "html_url": "https://github.com/rust-lang/rust/commit/a118ee2c13cc96ceb27bd5030c1cca1052377604"}, {"sha": "ff8b7f20d9e5e9bb4257f4fc1a41075ad8c5ec1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff8b7f20d9e5e9bb4257f4fc1a41075ad8c5ec1a", "html_url": "https://github.com/rust-lang/rust/commit/ff8b7f20d9e5e9bb4257f4fc1a41075ad8c5ec1a"}], "stats": {"total": 423, "additions": 288, "deletions": 135}, "files": [{"sha": "f5b71f295c62990dec4f6757e5dd01278e83b74c", "filename": "RELEASES.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "patch": "@@ -12,6 +12,7 @@ Compiler\n - [Added tier 3\\* support for the `armv5te-unknown-linux-uclibceabi` target.][78142]\n - [Added tier 3 support for the `aarch64-apple-ios-macabi` target.][77484]\n - [The `x86_64-unknown-freebsd` is now built with the full toolset.][79484]\n+- [Dropped support for all cloudabi targets.][78439]\n \n \\* Refer to Rust's [platform support page][forge-platform-support] for more\n information on Rust's tiered platform support.\n@@ -77,7 +78,6 @@ Compatibility Notes\n - [`#![test]` as an inner attribute is now considered unstable like other inner macro\n   attributes, and reports an error by default through the `soft_unstable` lint.][79003]\n - [Overriding a `forbid` lint at the same level that it was set is now a hard error.][78864]\n-- [Dropped support for all cloudabi targets.][78439]\n - [You can no longer intercept `panic!` calls by supplying your own macro.][78343] It's\n   recommended to use the `#[panic_handler]` attribute to provide your own implementation.\n - [Semi-colons after item statements (e.g. `struct Foo {};`) now produce a warning.][78296]"}, {"sha": "7cb58f9d0cb74c0906db6b007596530dd1d6a01c", "filename": "compiler/rustc_error_codes/src/error_codes/E0542.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0542.md", "raw_url": "https://github.com/rust-lang/rust/raw/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0542.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0542.md?ref=d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "patch": "@@ -19,7 +19,7 @@ fn _stable_const_fn() {}\n fn _deprecated_fn() {}\n ```\n \n-To fix the issue you need to provide the `since` field.\n+To fix this issue, you need to provide the `since` field. Example:\n \n ```\n #![feature(staged_api)]"}, {"sha": "a33dcb7a9ac58fdc1249f1ced2dd32c7c8636e56", "filename": "compiler/rustc_error_codes/src/error_codes/E0546.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0546.md", "raw_url": "https://github.com/rust-lang/rust/raw/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0546.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0546.md?ref=d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "patch": "@@ -13,7 +13,7 @@ fn unstable_fn() {}\n fn stable_fn() {}\n ```\n \n-To fix the issue you need to provide the `feature` field.\n+To fix this issue, you need to provide the `feature` field. Example:\n \n ```\n #![feature(staged_api)]"}, {"sha": "251f8c0afe63d28de0c8f733923abb50dc5f7161", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "patch": "@@ -285,7 +285,7 @@ impl<'hir> Map<'hir> {\n             let owner = self.tcx.hir_owner_nodes(id.owner);\n             owner.and_then(|owner| {\n                 let node = owner.nodes[id.local_id].as_ref();\n-                // FIXME(eddyb) use a single generic type insted of having both\n+                // FIXME(eddyb) use a single generic type instead of having both\n                 // `Entry` and `ParentedNode`, which are effectively the same.\n                 // Alternatively, rewrite code using `Entry` to use `ParentedNode`.\n                 node.map(|node| Entry {"}, {"sha": "98450f5a547da25917ef3ba5a7b42baf17844cfc", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "patch": "@@ -540,7 +540,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         );\n     }\n \n-    // Attempt to search similar mutable assosiated items for suggestion.\n+    // Attempt to search similar mutable associated items for suggestion.\n     // In the future, attempt in all path but initially for RHS of for_loop\n     fn suggest_similar_mut_method_for_for_loop(&self, err: &mut DiagnosticBuilder<'_>) {\n         let hir = self.infcx.tcx.hir();"}, {"sha": "0e55c4ec0b7cb60e289d9a0800a7c2b17e493612", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "patch": "@@ -589,7 +589,7 @@ impl StackProbeType {\n                 Ok(StackProbeType::InlineOrCall { min_llvm_version_for_inline })\n             }\n             _ => Err(String::from(\n-                \"`kind` expected to be one of `inline-or-none`, `call` or `inline-or-call`\",\n+                \"`kind` expected to be one of `none`, `inline`, `call` or `inline-or-call`\",\n             )),\n         }\n     }"}, {"sha": "3233d1e048bf735631dce46d97e32926fc619877", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "patch": "@@ -468,22 +468,21 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                 trait_ref,\n                                 obligation.cause.body_id,\n                             );\n-                        } else {\n-                            if !have_alt_message {\n-                                // Can't show anything else useful, try to find similar impls.\n-                                let impl_candidates = self.find_similar_impl_candidates(trait_ref);\n-                                self.report_similar_impl_candidates(impl_candidates, &mut err);\n-                            }\n-                            // Changing mutability doesn't make a difference to whether we have\n-                            // an `Unsize` impl (Fixes ICE in #71036)\n-                            if !is_unsize {\n-                                self.suggest_change_mut(\n-                                    &obligation,\n-                                    &mut err,\n-                                    trait_ref,\n-                                    points_at_arg,\n-                                );\n-                            }\n+                        } else if !have_alt_message {\n+                            // Can't show anything else useful, try to find similar impls.\n+                            let impl_candidates = self.find_similar_impl_candidates(trait_ref);\n+                            self.report_similar_impl_candidates(impl_candidates, &mut err);\n+                        }\n+\n+                        // Changing mutability doesn't make a difference to whether we have\n+                        // an `Unsize` impl (Fixes ICE in #71036)\n+                        if !is_unsize {\n+                            self.suggest_change_mut(\n+                                &obligation,\n+                                &mut err,\n+                                trait_ref,\n+                                points_at_arg,\n+                            );\n                         }\n \n                         // If this error is due to `!: Trait` not implemented but `(): Trait` is"}, {"sha": "66d158b0ee96542a3009c911ccba192b57938ac0", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "patch": "@@ -280,7 +280,7 @@ impl ItemCtxt<'tcx> {\n         ItemCtxt { tcx, item_def_id }\n     }\n \n-    pub fn to_ty(&self, ast_ty: &'tcx hir::Ty<'tcx>) -> Ty<'tcx> {\n+    pub fn to_ty(&self, ast_ty: &hir::Ty<'_>) -> Ty<'tcx> {\n         AstConv::ast_ty_to_ty(self, ast_ty)\n     }\n "}, {"sha": "542fa1a5acce0737a94f8cb6d446a3af3353a2c7", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "patch": "@@ -421,8 +421,7 @@ pub fn hir_ty_to_ty<'tcx>(tcx: TyCtxt<'tcx>, hir_ty: &hir::Ty<'_>) -> Ty<'tcx> {\n     let env_node_id = tcx.hir().get_parent_item(hir_ty.hir_id);\n     let env_def_id = tcx.hir().local_def_id(env_node_id);\n     let item_cx = self::collect::ItemCtxt::new(tcx, env_def_id.to_def_id());\n-\n-    astconv::AstConv::ast_ty_to_ty(&item_cx, hir_ty)\n+    item_cx.to_ty(hir_ty)\n }\n \n pub fn hir_trait_to_predicates<'tcx>("}, {"sha": "cb772458e50b628ca0714d3fa2c4f1594fefba23", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "patch": "@@ -1622,7 +1622,7 @@ impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {\n /// `UnsafeCell<T>` is a type that wraps some `T` and indicates unsafe interior operations on the\n /// wrapped type. Types with an `UnsafeCell<T>` field are considered to have an 'unsafe interior'.\n /// The `UnsafeCell<T>` type is the only legal way to obtain aliasable data that is considered\n-/// mutable. In general, transmuting an `&T` type into an `&mut T` is considered undefined behavior.\n+/// mutable. In general, transmuting a `&T` type into a `&mut T` is considered undefined behavior.\n ///\n /// If you have a reference `&SomeStruct`, then normally in Rust all fields of `SomeStruct` are\n /// immutable. The compiler makes optimizations based on the knowledge that `&T` is not mutably"}, {"sha": "dee0c154201362f89c5f052033115188e24cd822", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "patch": "@@ -1075,8 +1075,11 @@ impl Step for Assemble {\n             let src_exe = exe(\"llvm-dwp\", target_compiler.host);\n             let dst_exe = exe(\"rust-llvm-dwp\", target_compiler.host);\n             let llvm_config_bin = builder.ensure(native::Llvm { target: target_compiler.host });\n-            let llvm_bin_dir = llvm_config_bin.parent().unwrap();\n-            builder.copy(&llvm_bin_dir.join(&src_exe), &libdir_bin.join(&dst_exe));\n+            if !builder.config.dry_run {\n+                let llvm_bin_dir = output(Command::new(llvm_config_bin).arg(\"--bindir\"));\n+                let llvm_bin_dir = Path::new(llvm_bin_dir.trim());\n+                builder.copy(&llvm_bin_dir.join(&src_exe), &libdir_bin.join(&dst_exe));\n+            }\n         }\n \n         // Ensure that `libLLVM.so` ends up in the newly build compiler directory,"}, {"sha": "3ebfdb24879fa80633c92b3745d734a7fbb1d89a", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "patch": "@@ -645,6 +645,14 @@ impl Step for RustcDev {\n             &[],\n             &tarball.image_dir().join(\"lib/rustlib/rustc-src/rust\"),\n         );\n+        // This particular crate is used as a build dependency of the above.\n+        copy_src_dirs(\n+            builder,\n+            &builder.src,\n+            &[\"src/build_helper\"],\n+            &[],\n+            &tarball.image_dir().join(\"lib/rustlib/rustc-src/rust\"),\n+        );\n         for file in src_files {\n             tarball.add_file(builder.src.join(file), \"lib/rustlib/rustc-src/rust\", 0o644);\n         }"}, {"sha": "22124ec67f5f3373d74c270da4edaf7ff1431f0f", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "patch": "@@ -29,7 +29,7 @@ fn install_sh(\n     let prefix = default_path(&builder.config.prefix, \"/usr/local\");\n     let sysconfdir = prefix.join(default_path(&builder.config.sysconfdir, \"/etc\"));\n     let datadir = prefix.join(default_path(&builder.config.datadir, \"share\"));\n-    let docdir = prefix.join(default_path(&builder.config.docdir, \"share/doc\"));\n+    let docdir = prefix.join(default_path(&builder.config.docdir, \"share/doc/rust\"));\n     let mandir = prefix.join(default_path(&builder.config.mandir, \"share/man\"));\n     let libdir = prefix.join(default_path(&builder.config.libdir, \"lib\"));\n     let bindir = prefix.join(&builder.config.bindir); // Default in config.rs"}, {"sha": "cacca542284d96285b28e93ba34f79af1ad2d0dc", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "patch": "@@ -510,7 +510,7 @@ fn build_static(cx: &DocContext<'_>, did: DefId, mutable: bool) -> clean::Static\n     clean::Static {\n         type_: cx.tcx.type_of(did).clean(cx),\n         mutability: if mutable { Mutability::Mut } else { Mutability::Not },\n-        expr: \"\\n\\n\\n\".to_string(), // trigger the \"[definition]\" links\n+        expr: None,\n     }\n }\n "}, {"sha": "a0ab6ed4a4c8834578e5bfd4c51cfdc022479568", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "patch": "@@ -408,7 +408,7 @@ impl Clean<Constant> for hir::ConstArg {\n                 .tcx\n                 .type_of(cx.tcx.hir().body_owner_def_id(self.value.body).to_def_id())\n                 .clean(cx),\n-            expr: print_const_expr(cx, self.value.body),\n+            expr: print_const_expr(cx.tcx, self.value.body),\n             value: None,\n             is_literal: is_literal_expr(cx, self.value.body.hir_id),\n         }\n@@ -961,7 +961,7 @@ impl<'a> Clean<Arguments> for (&'a [hir::Ty<'a>], hir::BodyId) {\n                 .iter()\n                 .enumerate()\n                 .map(|(i, ty)| Argument {\n-                    name: Symbol::intern(&rustc_hir_pretty::param_to_string(&body.params[i])),\n+                    name: name_from_pat(&body.params[i].pat),\n                     type_: ty.clean(cx),\n                 })\n                 .collect(),\n@@ -1052,7 +1052,7 @@ impl Clean<Item> for hir::TraitItem<'_> {\n         cx.with_param_env(local_did, || {\n             let inner = match self.kind {\n                 hir::TraitItemKind::Const(ref ty, default) => {\n-                    AssocConstItem(ty.clean(cx), default.map(|e| print_const_expr(cx, e)))\n+                    AssocConstItem(ty.clean(cx), default.map(|e| print_const_expr(cx.tcx, e)))\n                 }\n                 hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Provided(body)) => {\n                     let mut m = (sig, &self.generics, body).clean(cx);\n@@ -1093,7 +1093,7 @@ impl Clean<Item> for hir::ImplItem<'_> {\n         cx.with_param_env(local_did, || {\n             let inner = match self.kind {\n                 hir::ImplItemKind::Const(ref ty, expr) => {\n-                    AssocConstItem(ty.clean(cx), Some(print_const_expr(cx, expr)))\n+                    AssocConstItem(ty.clean(cx), Some(print_const_expr(cx.tcx, expr)))\n                 }\n                 hir::ImplItemKind::Fn(ref sig, body) => {\n                     let mut m = (sig, &self.generics, body).clean(cx);\n@@ -1954,14 +1954,12 @@ impl Clean<Vec<Item>> for (&hir::Item<'_>, Option<Symbol>) {\n         let mut name = renamed.unwrap_or_else(|| cx.tcx.hir().name(item.hir_id));\n         cx.with_param_env(def_id, || {\n             let kind = match item.kind {\n-                ItemKind::Static(ty, mutability, body_id) => StaticItem(Static {\n-                    type_: ty.clean(cx),\n-                    mutability,\n-                    expr: print_const_expr(cx, body_id),\n-                }),\n+                ItemKind::Static(ty, mutability, body_id) => {\n+                    StaticItem(Static { type_: ty.clean(cx), mutability, expr: Some(body_id) })\n+                }\n                 ItemKind::Const(ty, body_id) => ConstantItem(Constant {\n                     type_: ty.clean(cx),\n-                    expr: print_const_expr(cx, body_id),\n+                    expr: print_const_expr(cx.tcx, body_id),\n                     value: print_evaluated_const(cx, def_id),\n                     is_literal: is_literal_expr(cx, body_id.hir_id),\n                 }),\n@@ -2263,11 +2261,9 @@ impl Clean<Item> for (&hir::ForeignItem<'_>, Option<Symbol>) {\n                         },\n                     })\n                 }\n-                hir::ForeignItemKind::Static(ref ty, mutability) => ForeignStaticItem(Static {\n-                    type_: ty.clean(cx),\n-                    mutability,\n-                    expr: String::new(),\n-                }),\n+                hir::ForeignItemKind::Static(ref ty, mutability) => {\n+                    ForeignStaticItem(Static { type_: ty.clean(cx), mutability, expr: None })\n+                }\n                 hir::ForeignItemKind::Type => ForeignTypeItem,\n             };\n "}, {"sha": "9b8e04a1d239de7ffb9eca4ffebeba921ad4fce2", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "patch": "@@ -19,7 +19,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex};\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::Mutability;\n+use rustc_hir::{BodyId, Mutability};\n use rustc_index::vec::IndexVec;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::Session;\n@@ -1955,10 +1955,7 @@ crate struct BareFunctionDecl {\n crate struct Static {\n     crate type_: Type,\n     crate mutability: Mutability,\n-    /// It's useful to have the value of a static documented, but I have no\n-    /// desire to represent expressions (that'd basically be all of the AST,\n-    /// which is huge!). So, have a string.\n-    crate expr: String,\n+    crate expr: Option<BodyId>,\n }\n \n #[derive(Clone, PartialEq, Eq, Hash, Debug)]"}, {"sha": "59af49b0d8a283426d1f9bdf9d032d1e36e48d91", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 73, "deletions": 5, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "patch": "@@ -195,6 +195,25 @@ crate fn strip_path(path: &Path) -> Path {\n     Path { global: path.global, res: path.res, segments }\n }\n \n+crate fn qpath_to_string(p: &hir::QPath<'_>) -> String {\n+    let segments = match *p {\n+        hir::QPath::Resolved(_, ref path) => &path.segments,\n+        hir::QPath::TypeRelative(_, ref segment) => return segment.ident.to_string(),\n+        hir::QPath::LangItem(lang_item, ..) => return lang_item.name().to_string(),\n+    };\n+\n+    let mut s = String::new();\n+    for (i, seg) in segments.iter().enumerate() {\n+        if i > 0 {\n+            s.push_str(\"::\");\n+        }\n+        if seg.ident.name != kw::PathRoot {\n+            s.push_str(&seg.ident.as_str());\n+        }\n+    }\n+    s\n+}\n+\n crate fn build_deref_target_impls(cx: &DocContext<'_>, items: &[Item], ret: &mut Vec<Item>) {\n     let tcx = cx.tcx;\n \n@@ -232,12 +251,60 @@ impl ToSource for rustc_span::Span {\n     }\n }\n \n+crate fn name_from_pat(p: &hir::Pat<'_>) -> Symbol {\n+    use rustc_hir::*;\n+    debug!(\"trying to get a name from pattern: {:?}\", p);\n+\n+    Symbol::intern(&match p.kind {\n+        PatKind::Wild => return kw::Underscore,\n+        PatKind::Binding(_, _, ident, _) => return ident.name,\n+        PatKind::TupleStruct(ref p, ..) | PatKind::Path(ref p) => qpath_to_string(p),\n+        PatKind::Struct(ref name, ref fields, etc) => format!(\n+            \"{} {{ {}{} }}\",\n+            qpath_to_string(name),\n+            fields\n+                .iter()\n+                .map(|fp| format!(\"{}: {}\", fp.ident, name_from_pat(&fp.pat)))\n+                .collect::<Vec<String>>()\n+                .join(\", \"),\n+            if etc { \", ..\" } else { \"\" }\n+        ),\n+        PatKind::Or(ref pats) => pats\n+            .iter()\n+            .map(|p| name_from_pat(&**p).to_string())\n+            .collect::<Vec<String>>()\n+            .join(\" | \"),\n+        PatKind::Tuple(ref elts, _) => format!(\n+            \"({})\",\n+            elts.iter()\n+                .map(|p| name_from_pat(&**p).to_string())\n+                .collect::<Vec<String>>()\n+                .join(\", \")\n+        ),\n+        PatKind::Box(ref p) => return name_from_pat(&**p),\n+        PatKind::Ref(ref p, _) => return name_from_pat(&**p),\n+        PatKind::Lit(..) => {\n+            warn!(\n+                \"tried to get argument name from PatKind::Lit, which is silly in function arguments\"\n+            );\n+            return Symbol::intern(\"()\");\n+        }\n+        PatKind::Range(..) => return kw::Underscore,\n+        PatKind::Slice(ref begin, ref mid, ref end) => {\n+            let begin = begin.iter().map(|p| name_from_pat(&**p).to_string());\n+            let mid = mid.as_ref().map(|p| format!(\"..{}\", name_from_pat(&**p))).into_iter();\n+            let end = end.iter().map(|p| name_from_pat(&**p).to_string());\n+            format!(\"[{}]\", begin.chain(mid).chain(end).collect::<Vec<_>>().join(\", \"))\n+        }\n+    })\n+}\n+\n crate fn print_const(cx: &DocContext<'_>, n: &'tcx ty::Const<'_>) -> String {\n     match n.val {\n         ty::ConstKind::Unevaluated(def, _, promoted) => {\n             let mut s = if let Some(def) = def.as_local() {\n                 let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def.did);\n-                print_const_expr(cx, cx.tcx.hir().body_owned_by(hir_id))\n+                print_const_expr(cx.tcx, cx.tcx.hir().body_owned_by(hir_id))\n             } else {\n                 inline::print_inlined_const(cx, def.did)\n             };\n@@ -326,16 +393,17 @@ crate fn is_literal_expr(cx: &DocContext<'_>, hir_id: hir::HirId) -> bool {\n     false\n }\n \n-crate fn print_const_expr(cx: &DocContext<'_>, body: hir::BodyId) -> String {\n-    let value = &cx.tcx.hir().body(body).value;\n+crate fn print_const_expr(tcx: TyCtxt<'_>, body: hir::BodyId) -> String {\n+    let hir = tcx.hir();\n+    let value = &hir.body(body).value;\n \n     let snippet = if !value.span.from_expansion() {\n-        cx.sess().source_map().span_to_snippet(value.span).ok()\n+        tcx.sess.source_map().span_to_snippet(value.span).ok()\n     } else {\n         None\n     };\n \n-    snippet.unwrap_or_else(|| rustc_hir_pretty::id_to_string(&cx.tcx.hir(), body.hir_id))\n+    snippet.unwrap_or_else(|| rustc_hir_pretty::id_to_string(&hir, body.hir_id))\n }\n \n /// Given a type Path, resolve it to a Type using the TyCtxt"}, {"sha": "a50ed5b662bf674b7cff123cee0f4fcfcebeef98", "filename": "src/librustdoc/html/static/storage.js", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js?ref=d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "patch": "@@ -89,35 +89,20 @@ function hasOwnProperty(obj, property) {\n     return Object.prototype.hasOwnProperty.call(obj, property);\n }\n \n-function usableLocalStorage() {\n-    // Check if the browser supports localStorage at all:\n-    if (typeof Storage === \"undefined\") {\n-        return false;\n-    }\n-    // Check if we can access it; this access will fail if the browser\n-    // preferences deny access to localStorage, e.g., to prevent storage of\n-    // \"cookies\" (or cookie-likes, as is the case here).\n-    try {\n-        return window.localStorage !== null && window.localStorage !== undefined;\n-    } catch(err) {\n-        // Storage is supported, but browser preferences deny access to it.\n-        return false;\n-    }\n-}\n-\n function updateLocalStorage(name, value) {\n-    if (usableLocalStorage()) {\n-        localStorage[name] = value;\n-    } else {\n-        // No Web Storage support so we do nothing\n+    try {\n+        window.localStorage.setItem(name, value);\n+    } catch(e) {\n+        // localStorage is not accessible, do nothing\n     }\n }\n \n function getCurrentValue(name) {\n-    if (usableLocalStorage() && localStorage[name] !== undefined) {\n-        return localStorage[name];\n+    try {\n+        return window.localStorage.getItem(name);\n+    } catch(e) {\n+        return null;\n     }\n-    return null;\n }\n \n function switchTheme(styleElem, mainStyleElem, newTheme, saveTheme) {"}, {"sha": "f96f6d52088a4c74413fc0ad4242a1a021c8753e", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 44, "deletions": 46, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "patch": "@@ -6,12 +6,14 @@ use std::convert::From;\n \n use rustc_ast::ast;\n use rustc_hir::def::CtorKind;\n+use rustc_middle::ty::TyCtxt;\n use rustc_span::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_span::Pos;\n \n use rustdoc_json_types::*;\n \n use crate::clean;\n+use crate::clean::utils::print_const_expr;\n use crate::formats::item_type::ItemType;\n use crate::json::JsonRenderer;\n \n@@ -43,7 +45,7 @@ impl JsonRenderer<'_> {\n                     .collect(),\n                 deprecation: deprecation.map(from_deprecation),\n                 kind: item_type.into(),\n-                inner: kind.into(),\n+                inner: from_clean_item_kind(kind, self.tcx),\n             }),\n         }\n     }\n@@ -144,44 +146,42 @@ crate fn from_def_id(did: DefId) -> Id {\n     Id(format!(\"{}:{}\", did.krate.as_u32(), u32::from(did.index)))\n }\n \n-impl From<clean::ItemKind> for ItemEnum {\n-    fn from(item: clean::ItemKind) -> Self {\n-        use clean::ItemKind::*;\n-        match item {\n-            ModuleItem(m) => ItemEnum::ModuleItem(m.into()),\n-            ExternCrateItem(c, a) => {\n-                ItemEnum::ExternCrateItem { name: c.to_string(), rename: a.map(|x| x.to_string()) }\n-            }\n-            ImportItem(i) => ItemEnum::ImportItem(i.into()),\n-            StructItem(s) => ItemEnum::StructItem(s.into()),\n-            UnionItem(u) => ItemEnum::UnionItem(u.into()),\n-            StructFieldItem(f) => ItemEnum::StructFieldItem(f.into()),\n-            EnumItem(e) => ItemEnum::EnumItem(e.into()),\n-            VariantItem(v) => ItemEnum::VariantItem(v.into()),\n-            FunctionItem(f) => ItemEnum::FunctionItem(f.into()),\n-            ForeignFunctionItem(f) => ItemEnum::FunctionItem(f.into()),\n-            TraitItem(t) => ItemEnum::TraitItem(t.into()),\n-            TraitAliasItem(t) => ItemEnum::TraitAliasItem(t.into()),\n-            MethodItem(m, _) => ItemEnum::MethodItem(from_function_method(m, true)),\n-            TyMethodItem(m) => ItemEnum::MethodItem(from_function_method(m, false)),\n-            ImplItem(i) => ItemEnum::ImplItem(i.into()),\n-            StaticItem(s) => ItemEnum::StaticItem(s.into()),\n-            ForeignStaticItem(s) => ItemEnum::StaticItem(s.into()),\n-            ForeignTypeItem => ItemEnum::ForeignTypeItem,\n-            TypedefItem(t, _) => ItemEnum::TypedefItem(t.into()),\n-            OpaqueTyItem(t) => ItemEnum::OpaqueTyItem(t.into()),\n-            ConstantItem(c) => ItemEnum::ConstantItem(c.into()),\n-            MacroItem(m) => ItemEnum::MacroItem(m.source),\n-            ProcMacroItem(m) => ItemEnum::ProcMacroItem(m.into()),\n-            AssocConstItem(t, s) => ItemEnum::AssocConstItem { type_: t.into(), default: s },\n-            AssocTypeItem(g, t) => ItemEnum::AssocTypeItem {\n-                bounds: g.into_iter().map(Into::into).collect(),\n-                default: t.map(Into::into),\n-            },\n-            StrippedItem(inner) => (*inner).into(),\n-            PrimitiveItem(_) | KeywordItem(_) => {\n-                panic!(\"{:?} is not supported for JSON output\", item)\n-            }\n+fn from_clean_item_kind(item: clean::ItemKind, tcx: TyCtxt<'_>) -> ItemEnum {\n+    use clean::ItemKind::*;\n+    match item {\n+        ModuleItem(m) => ItemEnum::ModuleItem(m.into()),\n+        ExternCrateItem(c, a) => {\n+            ItemEnum::ExternCrateItem { name: c.to_string(), rename: a.map(|x| x.to_string()) }\n+        }\n+        ImportItem(i) => ItemEnum::ImportItem(i.into()),\n+        StructItem(s) => ItemEnum::StructItem(s.into()),\n+        UnionItem(u) => ItemEnum::UnionItem(u.into()),\n+        StructFieldItem(f) => ItemEnum::StructFieldItem(f.into()),\n+        EnumItem(e) => ItemEnum::EnumItem(e.into()),\n+        VariantItem(v) => ItemEnum::VariantItem(v.into()),\n+        FunctionItem(f) => ItemEnum::FunctionItem(f.into()),\n+        ForeignFunctionItem(f) => ItemEnum::FunctionItem(f.into()),\n+        TraitItem(t) => ItemEnum::TraitItem(t.into()),\n+        TraitAliasItem(t) => ItemEnum::TraitAliasItem(t.into()),\n+        MethodItem(m, _) => ItemEnum::MethodItem(from_function_method(m, true)),\n+        TyMethodItem(m) => ItemEnum::MethodItem(from_function_method(m, false)),\n+        ImplItem(i) => ItemEnum::ImplItem(i.into()),\n+        StaticItem(s) => ItemEnum::StaticItem(from_clean_static(s, tcx)),\n+        ForeignStaticItem(s) => ItemEnum::StaticItem(from_clean_static(s, tcx)),\n+        ForeignTypeItem => ItemEnum::ForeignTypeItem,\n+        TypedefItem(t, _) => ItemEnum::TypedefItem(t.into()),\n+        OpaqueTyItem(t) => ItemEnum::OpaqueTyItem(t.into()),\n+        ConstantItem(c) => ItemEnum::ConstantItem(c.into()),\n+        MacroItem(m) => ItemEnum::MacroItem(m.source),\n+        ProcMacroItem(m) => ItemEnum::ProcMacroItem(m.into()),\n+        AssocConstItem(t, s) => ItemEnum::AssocConstItem { type_: t.into(), default: s },\n+        AssocTypeItem(g, t) => ItemEnum::AssocTypeItem {\n+            bounds: g.into_iter().map(Into::into).collect(),\n+            default: t.map(Into::into),\n+        },\n+        StrippedItem(inner) => from_clean_item_kind(*inner, tcx).into(),\n+        PrimitiveItem(_) | KeywordItem(_) => {\n+            panic!(\"{:?} is not supported for JSON output\", item)\n         }\n     }\n }\n@@ -535,13 +535,11 @@ impl From<clean::OpaqueTy> for OpaqueTy {\n     }\n }\n \n-impl From<clean::Static> for Static {\n-    fn from(stat: clean::Static) -> Self {\n-        Static {\n-            type_: stat.type_.into(),\n-            mutable: stat.mutability == ast::Mutability::Mut,\n-            expr: stat.expr,\n-        }\n+fn from_clean_static(stat: clean::Static, tcx: TyCtxt<'_>) -> Static {\n+    Static {\n+        type_: stat.type_.into(),\n+        mutable: stat.mutability == ast::Mutability::Mut,\n+        expr: stat.expr.map(|e| print_const_expr(tcx, e)).unwrap_or_default(),\n     }\n }\n "}, {"sha": "a54b4adc13295c605f7139803cd3ea7ae3229e40", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "patch": "@@ -1151,11 +1151,12 @@ impl LinkCollector<'_, '_> {\n         };\n \n         let verify = |kind: DefKind, id: DefId| {\n-            debug!(\"intra-doc link to {} resolved to {:?}\", path_str, res);\n+            let (kind, id) = self.kind_side_channel.take().unwrap_or((kind, id));\n+            debug!(\"intra-doc link to {} resolved to {:?} (id: {:?})\", path_str, res, id);\n \n             // Disallow e.g. linking to enums with `struct@`\n             debug!(\"saw kind {:?} with disambiguator {:?}\", kind, disambiguator);\n-            match (self.kind_side_channel.take().map(|(kind, _)| kind).unwrap_or(kind), disambiguator) {\n+            match (kind, disambiguator) {\n                 | (DefKind::Const | DefKind::ConstParam | DefKind::AssocConst | DefKind::AnonConst, Some(Disambiguator::Kind(DefKind::Const)))\n                 // NOTE: this allows 'method' to mean both normal functions and associated functions\n                 // This can't cause ambiguity because both are in the same namespace.\n@@ -1190,7 +1191,7 @@ impl LinkCollector<'_, '_> {\n                 }\n             }\n \n-            Some((kind, id))\n+            Some(())\n         };\n \n         match res {\n@@ -1241,7 +1242,7 @@ impl LinkCollector<'_, '_> {\n                 Some(ItemLink { link: ori_link.link, link_text, did: None, fragment })\n             }\n             Res::Def(kind, id) => {\n-                let (kind, id) = verify(kind, id)?;\n+                verify(kind, id)?;\n                 let id = clean::register_res(cx, rustc_hir::def::Res::Def(kind, id));\n                 Some(ItemLink { link: ori_link.link, link_text, did: Some(id), fragment })\n             }"}, {"sha": "94a833fcc1a15518894c8c7a738d17005f5ac6ad", "filename": "src/test/rustdoc-ui/intra-doc/private.private.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate.private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate.private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate.private.stderr?ref=d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "patch": "@@ -1,11 +1,19 @@\n warning: public documentation for `DocMe` links to private item `DontDocMe`\n   --> $DIR/private.rs:5:11\n    |\n-LL | /// docs [DontDocMe]\n+LL | /// docs [DontDocMe] [DontDocMe::f]\n    |           ^^^^^^^^^ this item is private\n    |\n    = note: `#[warn(private_intra_doc_links)]` on by default\n    = note: this link resolves only because you passed `--document-private-items`, but will break without\n \n-warning: 1 warning emitted\n+warning: public documentation for `DocMe` links to private item `DontDocMe::f`\n+  --> $DIR/private.rs:5:23\n+   |\n+LL | /// docs [DontDocMe] [DontDocMe::f]\n+   |                       ^^^^^^^^^^^^ this item is private\n+   |\n+   = note: this link resolves only because you passed `--document-private-items`, but will break without\n+\n+warning: 2 warnings emitted\n "}, {"sha": "21a60638d5efc8248b59734e1e16af4de832b355", "filename": "src/test/rustdoc-ui/intra-doc/private.public.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate.public.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate.public.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate.public.stderr?ref=d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "patch": "@@ -1,11 +1,19 @@\n warning: public documentation for `DocMe` links to private item `DontDocMe`\n   --> $DIR/private.rs:5:11\n    |\n-LL | /// docs [DontDocMe]\n+LL | /// docs [DontDocMe] [DontDocMe::f]\n    |           ^^^^^^^^^ this item is private\n    |\n    = note: `#[warn(private_intra_doc_links)]` on by default\n    = note: this link will resolve properly if you pass `--document-private-items`\n \n-warning: 1 warning emitted\n+warning: public documentation for `DocMe` links to private item `DontDocMe::f`\n+  --> $DIR/private.rs:5:23\n+   |\n+LL | /// docs [DontDocMe] [DontDocMe::f]\n+   |                       ^^^^^^^^^^^^ this item is private\n+   |\n+   = note: this link will resolve properly if you pass `--document-private-items`\n+\n+warning: 2 warnings emitted\n "}, {"sha": "3782864305f1f482a0a187f513918710bb0cd1b7", "filename": "src/test/rustdoc-ui/intra-doc/private.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fprivate.rs?ref=d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "patch": "@@ -2,8 +2,13 @@\n // revisions: public private\n // [private]compile-flags: --document-private-items\n \n-/// docs [DontDocMe]\n+/// docs [DontDocMe] [DontDocMe::f]\n //~^ WARNING public documentation for `DocMe` links to private item `DontDocMe`\n+//~| WARNING public documentation for `DocMe` links to private item `DontDocMe::f`\n // FIXME: for [private] we should also make sure the link was actually generated\n pub struct DocMe;\n struct DontDocMe;\n+\n+impl DontDocMe {\n+    fn f() {}\n+}"}, {"sha": "1ef7e304fa256bd3f4a8a34e4433de5756f97eb8", "filename": "src/test/rustdoc/mut-params.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Ftest%2Frustdoc%2Fmut-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Ftest%2Frustdoc%2Fmut-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmut-params.rs?ref=d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "patch": "@@ -0,0 +1,18 @@\n+// Rustdoc shouldn't display `mut` in function arguments, which are\n+// implementation details. Regression test for #81289.\n+\n+#![crate_name = \"foo\"]\n+\n+pub struct Foo;\n+\n+// @count foo/struct.Foo.html '//*[@class=\"impl-items\"]//*[@class=\"method\"]' 2\n+// @!has - '//*[@class=\"impl-items\"]//*[@class=\"method\"]' 'mut'\n+impl Foo {\n+    pub fn foo(mut self) {}\n+\n+    pub fn bar(mut bar: ()) {}\n+}\n+\n+// @count foo/fn.baz.html '//*[@class=\"rust fn\"]' 1\n+// @!has - '//*[@class=\"rust fn\"]' 'mut'\n+pub fn baz(mut foo: Foo) {}"}, {"sha": "c08faaad0eccfc6a8dabc6c224f225f7fdfabcab", "filename": "src/test/rustdoc/range-arg-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Ftest%2Frustdoc%2Frange-arg-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Ftest%2Frustdoc%2Frange-arg-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Frange-arg-pattern.rs?ref=d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.f.html\n-// @has - '//*[@class=\"rust fn\"]' 'pub fn f(0u8 ...255: u8)'\n+// @has - '//*[@class=\"rust fn\"]' 'pub fn f(_: u8)'\n pub fn f(0u8...255: u8) {}"}, {"sha": "8b465aae66b6e6ae771cdfa9aca07c6ec5852f04", "filename": "src/test/ui/suggestions/suggest-change-mut.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.rs?ref=d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "patch": "@@ -0,0 +1,21 @@\n+#![allow(warnings)]\n+\n+use std::io::{BufRead, BufReader, Read, Write};\n+\n+fn issue_81421<T: Read + Write>(mut stream: T) {\n+    let initial_message = format!(\"Hello world\");\n+    let mut buffer: Vec<u8> = Vec::new();\n+    let bytes_written = stream.write_all(initial_message.as_bytes());\n+    let flush = stream.flush();\n+\n+    loop {\n+        let mut stream_reader = BufReader::new(&stream);\n+        //~^ ERROR the trait bound `&T: std::io::Read` is not satisfied [E0277]\n+        //~| HELP consider removing the leading `&`-reference\n+        //~| HELP consider changing this borrow's mutability\n+        stream_reader.read_until(b'\\n', &mut buffer).expect(\"Reading into buffer failed\");\n+        //~^ ERROR the method `read_until` exists for struct `BufReader<&T>`,\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "cb156f7c7877a0cf2c24f3172d5047fa6cb0e8ca", "filename": "src/test/ui/suggestions/suggest-change-mut.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr?ref=d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "patch": "@@ -0,0 +1,35 @@\n+error[E0277]: the trait bound `&T: std::io::Read` is not satisfied\n+  --> $DIR/suggest-change-mut.rs:12:48\n+   |\n+LL |         let mut stream_reader = BufReader::new(&stream);\n+   |                                                ^^^^^^^ the trait `std::io::Read` is not implemented for `&T`\n+   |\n+   = note: required by `BufReader::<R>::new`\n+help: consider removing the leading `&`-reference\n+   |\n+LL |         let mut stream_reader = BufReader::new(stream);\n+   |                                               --\n+help: consider changing this borrow's mutability\n+   |\n+LL |         let mut stream_reader = BufReader::new(&mut stream);\n+   |                                                ^^^^\n+\n+error[E0599]: the method `read_until` exists for struct `BufReader<&T>`, but its trait bounds were not satisfied\n+  --> $DIR/suggest-change-mut.rs:16:23\n+   |\n+LL |         stream_reader.read_until(b'\\n', &mut buffer).expect(\"Reading into buffer failed\");\n+   |                       ^^^^^^^^^^ method cannot be called on `BufReader<&T>` due to unsatisfied trait bounds\n+   | \n+  ::: $SRC_DIR/std/src/io/buffered/bufreader.rs:LL:COL\n+   |\n+LL | pub struct BufReader<R> {\n+   | ----------------------- doesn't satisfy `BufReader<&T>: BufRead`\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `&T: std::io::Read`\n+           which is required by `BufReader<&T>: BufRead`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0277, E0599.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "8992d165d5d504a783e6a5bf3f25f1fd7150598a", "filename": "src/tools/expand-yaml-anchors/src/main.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Ftools%2Fexpand-yaml-anchors%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d416093209d0dd77a4cdeb5a2f1b5de1316787ec/src%2Ftools%2Fexpand-yaml-anchors%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fexpand-yaml-anchors%2Fsrc%2Fmain.rs?ref=d416093209d0dd77a4cdeb5a2f1b5de1316787ec", "patch": "@@ -76,7 +76,11 @@ impl App {\n                         self.path(&path),\n                         self.path(&dest_path)\n                     ),\n-                    Mode::Check => format!(\"{} is not up to date\", self.path(&dest_path)),\n+                    Mode::Check => format!(\n+                        \"{} is not up to date; please run \\\n+                        `x.py run src/tools/expand-yaml-anchors`.\",\n+                        self.path(&dest_path)\n+                    ),\n                 })?;\n             }\n         }"}]}