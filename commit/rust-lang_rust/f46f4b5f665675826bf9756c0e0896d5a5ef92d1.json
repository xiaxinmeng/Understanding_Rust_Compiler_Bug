{"sha": "f46f4b5f665675826bf9756c0e0896d5a5ef92d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NmY0YjVmNjY1Njc1ODI2YmY5NzU2YzBlMDg5NmQ1YTVlZjkyZDE=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-05-06T23:23:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-06T23:23:14Z"}, "message": "Merge pull request #2675 from flodiebold/non-modrs-mods\n\nFix handling of modules in non_modrs_mods style", "tree": {"sha": "0cd1a68e7d38d09137eb26bf7c5dfe1cb324be5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cd1a68e7d38d09137eb26bf7c5dfe1cb324be5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f46f4b5f665675826bf9756c0e0896d5a5ef92d1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa745iCRBK7hj4Ov3rIwAAdHIIAA1GFoNPoxxYPM4HTmeUgIM0\nAjYm1C799r+DH/W/kXPsGIO021pi+w4CdTbMNR0HTa+rQQJ+PCWDzrXRn7deFoIR\nMRqzseLMt/8cpymVk7Rnz5oWqHeBYhXQyHNdjgoTRvmAGFxOFETTSfEt4Yj9e1VV\n+YmIiR5B37PiVUdemRS9JnkDB7MPr+cUHbWzM6hToQyzzJ8tFakkec3SkKZ4sLF/\nneSUx4AvWMlQ0YaxlzRhIRLEda2b3OxPrU84QmGSHZSuoEyQF0nqXvikLefQ8+/I\nTuWJcr1d4GBSynu+v+yinRM+GxQpT7U5poGjX5sX5AajZhpnNv2fv/TIqgFb87o=\n=tjPS\n-----END PGP SIGNATURE-----\n", "payload": "tree 0cd1a68e7d38d09137eb26bf7c5dfe1cb324be5f\nparent bd7ae5e89b510207a9170e72c11a4949497f9c0e\nparent e65aa302d34da29839fc72cf3363e85ccd71b2ee\nauthor Nick Cameron <nrc@ncameron.org> 1525648994 +1200\ncommitter GitHub <noreply@github.com> 1525648994 +1200\n\nMerge pull request #2675 from flodiebold/non-modrs-mods\n\nFix handling of modules in non_modrs_mods style"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f46f4b5f665675826bf9756c0e0896d5a5ef92d1", "html_url": "https://github.com/rust-lang/rust/commit/f46f4b5f665675826bf9756c0e0896d5a5ef92d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f46f4b5f665675826bf9756c0e0896d5a5ef92d1/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd7ae5e89b510207a9170e72c11a4949497f9c0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd7ae5e89b510207a9170e72c11a4949497f9c0e", "html_url": "https://github.com/rust-lang/rust/commit/bd7ae5e89b510207a9170e72c11a4949497f9c0e"}, {"sha": "e65aa302d34da29839fc72cf3363e85ccd71b2ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/e65aa302d34da29839fc72cf3363e85ccd71b2ee", "html_url": "https://github.com/rust-lang/rust/commit/e65aa302d34da29839fc72cf3363e85ccd71b2ee"}], "stats": {"total": 48, "additions": 37, "deletions": 11}, "files": [{"sha": "80a7e85c71def304fa72e688f384e22e082f780e", "filename": "src/modules.rs", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f46f4b5f665675826bf9756c0e0896d5a5ef92d1/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46f4b5f665675826bf9756c0e0896d5a5ef92d1/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=f46f4b5f665675826bf9756c0e0896d5a5ef92d1", "patch": "@@ -14,7 +14,7 @@ use std::path::{Path, PathBuf};\n \n use syntax::ast;\n use syntax::codemap::{self, FileName};\n-use syntax::parse::parser;\n+use syntax::parse::{parser, DirectoryOwnership};\n \n use utils::contains_skip;\n \n@@ -31,7 +31,7 @@ pub fn list_files<'a>(\n             FileName::Real(ref path) => path.parent().unwrap(),\n             _ => Path::new(\"\"),\n         };\n-        list_submodules(&krate.module, parent, codemap, &mut result)?;\n+        list_submodules(&krate.module, parent, None, codemap, &mut result)?;\n     }\n     result.insert(root_filename, &krate.module);\n     Ok(result)\n@@ -41,6 +41,7 @@ pub fn list_files<'a>(\n fn list_submodules<'a>(\n     module: &'a ast::Mod,\n     search_dir: &Path,\n+    relative: Option<ast::Ident>,\n     codemap: &codemap::CodeMap,\n     result: &mut BTreeMap<FileName, &'a ast::Mod>,\n ) -> Result<(), io::Error> {\n@@ -50,15 +51,16 @@ fn list_submodules<'a>(\n             if !contains_skip(&item.attrs) {\n                 let is_internal =\n                     codemap.span_to_filename(item.span) == codemap.span_to_filename(sub_mod.inner);\n-                let dir_path = if is_internal {\n-                    search_dir.join(&item.ident.to_string())\n+                let (dir_path, relative) = if is_internal {\n+                    (search_dir.join(&item.ident.to_string()), None)\n                 } else {\n-                    let mod_path = module_file(item.ident, &item.attrs, search_dir, codemap)?;\n+                    let (mod_path, relative) =\n+                        module_file(item.ident, &item.attrs, search_dir, relative, codemap)?;\n                     let dir_path = mod_path.parent().unwrap().to_owned();\n                     result.insert(FileName::Real(mod_path), sub_mod);\n-                    dir_path\n+                    (dir_path, relative)\n                 };\n-                list_submodules(sub_mod, &dir_path, codemap, result)?;\n+                list_submodules(sub_mod, &dir_path, relative, codemap, result)?;\n             }\n         }\n     }\n@@ -70,14 +72,26 @@ fn module_file(\n     id: ast::Ident,\n     attrs: &[ast::Attribute],\n     dir_path: &Path,\n+    relative: Option<ast::Ident>,\n     codemap: &codemap::CodeMap,\n-) -> Result<PathBuf, io::Error> {\n+) -> Result<(PathBuf, Option<ast::Ident>), io::Error> {\n     if let Some(path) = parser::Parser::submod_path_from_attr(attrs, dir_path) {\n-        return Ok(path);\n+        return Ok((path, None));\n     }\n \n-    match parser::Parser::default_submod_path(id, None, dir_path, codemap).result {\n-        Ok(parser::ModulePathSuccess { path, .. }) => Ok(path),\n+    match parser::Parser::default_submod_path(id, relative, dir_path, codemap).result {\n+        Ok(parser::ModulePathSuccess {\n+            path,\n+            directory_ownership,\n+            ..\n+        }) => {\n+            let relative = if let DirectoryOwnership::Owned { relative } = directory_ownership {\n+                relative\n+            } else {\n+                None\n+            };\n+            Ok((path, relative))\n+        }\n         Err(_) => Err(io::Error::new(\n             io::ErrorKind::Other,\n             format!(\"Couldn't find module {}\", id),"}, {"sha": "49f37a88dfbeebf6454dcb22bf052a90ae401d29", "filename": "tests/config/skip_children.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f46f4b5f665675826bf9756c0e0896d5a5ef92d1/tests%2Fconfig%2Fskip_children.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f46f4b5f665675826bf9756c0e0896d5a5ef92d1/tests%2Fconfig%2Fskip_children.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Fskip_children.toml?ref=f46f4b5f665675826bf9756c0e0896d5a5ef92d1", "patch": "@@ -0,0 +1 @@\n+skip_children = true\n\\ No newline at end of file"}, {"sha": "5340816d61e0c2cca0cc2a1219e0fe142a683368", "filename": "tests/target/issue-2673-nonmodrs-mods/foo.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f46f4b5f665675826bf9756c0e0896d5a5ef92d1/tests%2Ftarget%2Fissue-2673-nonmodrs-mods%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46f4b5f665675826bf9756c0e0896d5a5ef92d1/tests%2Ftarget%2Fissue-2673-nonmodrs-mods%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2673-nonmodrs-mods%2Ffoo.rs?ref=f46f4b5f665675826bf9756c0e0896d5a5ef92d1", "patch": "@@ -0,0 +1,4 @@\n+// rustfmt-config: skip_children.toml\n+mod bar;\n+\n+mod baz {}"}, {"sha": "9ceacd59d86f779890861cee8d5c2b0af759b6a6", "filename": "tests/target/issue-2673-nonmodrs-mods/foo/bar.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f46f4b5f665675826bf9756c0e0896d5a5ef92d1/tests%2Ftarget%2Fissue-2673-nonmodrs-mods%2Ffoo%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46f4b5f665675826bf9756c0e0896d5a5ef92d1/tests%2Ftarget%2Fissue-2673-nonmodrs-mods%2Ffoo%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2673-nonmodrs-mods%2Ffoo%2Fbar.rs?ref=f46f4b5f665675826bf9756c0e0896d5a5ef92d1", "patch": "@@ -0,0 +1 @@\n+fn dummy() {}"}, {"sha": "82425de565a22d07119b42a8f340a9ffaa682352", "filename": "tests/target/issue-2673-nonmodrs-mods/lib.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f46f4b5f665675826bf9756c0e0896d5a5ef92d1/tests%2Ftarget%2Fissue-2673-nonmodrs-mods%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46f4b5f665675826bf9756c0e0896d5a5ef92d1/tests%2Ftarget%2Fissue-2673-nonmodrs-mods%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2673-nonmodrs-mods%2Flib.rs?ref=f46f4b5f665675826bf9756c0e0896d5a5ef92d1", "patch": "@@ -0,0 +1,6 @@\n+#![feature(non_modrs_mods)]\n+\n+// Test that submodules in non-mod.rs files work. This is just an idempotence\n+// test since we just want to verify that rustfmt doesn't fail.\n+\n+mod foo;"}]}