{"sha": "1366629262e20560f86fe986999dc52a168ee768", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNjY2MjkyNjJlMjA1NjBmODZmZTk4Njk5OWRjNTJhMTY4ZWU3Njg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-25T21:54:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-25T21:54:14Z"}, "message": "Auto merge of #4575 - Manishearth:suggestions, r=oli-obk\n\nMake more tests rustfixable\n\nFixes https://github.com/rust-lang/rust-clippy/issues/3630\n\nchangelog: Improve suggestions for many lints in preparation for `cargo fix --clippy`\n\nr? @phansch @yaahc", "tree": {"sha": "f65b4c35fcd16db311f94e4acb05d29b3fc9f4b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f65b4c35fcd16db311f94e4acb05d29b3fc9f4b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1366629262e20560f86fe986999dc52a168ee768", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1366629262e20560f86fe986999dc52a168ee768", "html_url": "https://github.com/rust-lang/rust/commit/1366629262e20560f86fe986999dc52a168ee768", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1366629262e20560f86fe986999dc52a168ee768/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5570e44e8c6cfe9a5633f9a53c7749bd3bacc4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5570e44e8c6cfe9a5633f9a53c7749bd3bacc4e", "html_url": "https://github.com/rust-lang/rust/commit/d5570e44e8c6cfe9a5633f9a53c7749bd3bacc4e"}, {"sha": "49374a4380a36b8fdde479bd2358dec78dd463fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/49374a4380a36b8fdde479bd2358dec78dd463fe", "html_url": "https://github.com/rust-lang/rust/commit/49374a4380a36b8fdde479bd2358dec78dd463fe"}], "stats": {"total": 2280, "additions": 1464, "deletions": 816}, "files": [{"sha": "c0eba516dee053e9bc0aa640752bf89621757207", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,5 +1,6 @@\n use crate::utils::SpanlessEq;\n-use crate::utils::{get_item_name, higher, match_type, paths, snippet, snippet_opt, span_lint_and_then, walk_ptrs_ty};\n+use crate::utils::{get_item_name, higher, match_type, paths, snippet, snippet_opt};\n+use crate::utils::{snippet_with_applicability, span_lint_and_then, walk_ptrs_ty};\n use if_chain::if_chain;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc::hir::*;\n@@ -64,6 +65,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for HashMapPass {\n                             } else {\n                                 true\n                             }\n+                        // XXXManishearth we can also check for if/else blocks containing `None`.\n                     };\n \n                     let mut visitor = InsertVisitor {\n@@ -145,10 +147,11 @@ impl<'a, 'tcx, 'b> Visitor<'tcx> for InsertVisitor<'a, 'tcx, 'b> {\n                 span_lint_and_then(self.cx, MAP_ENTRY, self.span,\n                                    &format!(\"usage of `contains_key` followed by `insert` on a `{}`\", self.ty), |db| {\n                     if self.sole_expr {\n-                        let help = format!(\"{}.entry({}).or_insert({})\",\n-                                           snippet(self.cx, self.map.span, \"map\"),\n-                                           snippet(self.cx, params[1].span, \"..\"),\n-                                           snippet(self.cx, params[2].span, \"..\"));\n+                        let mut app = Applicability::MachineApplicable;\n+                        let help = format!(\"{}.entry({}).or_insert({});\",\n+                                           snippet_with_applicability(self.cx, self.map.span, \"map\", &mut app),\n+                                           snippet_with_applicability(self.cx, params[1].span, \"..\", &mut app),\n+                                           snippet_with_applicability(self.cx, params[2].span, \"..\", &mut app));\n \n                         db.span_suggestion(\n                             self.span,\n@@ -158,15 +161,13 @@ impl<'a, 'tcx, 'b> Visitor<'tcx> for InsertVisitor<'a, 'tcx, 'b> {\n                         );\n                     }\n                     else {\n-                        let help = format!(\"{}.entry({})\",\n+                        let help = format!(\"consider using `{}.entry({})`\",\n                                            snippet(self.cx, self.map.span, \"map\"),\n                                            snippet(self.cx, params[1].span, \"..\"));\n \n-                        db.span_suggestion(\n+                        db.span_label(\n                             self.span,\n-                            \"consider using\",\n-                            help,\n-                            Applicability::MachineApplicable, // snippet\n+                            &help,\n                         );\n                     }\n                 });"}, {"sha": "ae372b8d50cf6e47cfcbd3b083673ee019144d52", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -118,7 +118,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                                     left.span,\n                                     \"use the left value directly\",\n                                     lsnip,\n-                                    Applicability::MachineApplicable, // snippet\n+                                    Applicability::MaybeIncorrect, // FIXME #2597\n                                 );\n                             })\n                         } else if !lcpy\n@@ -136,7 +136,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                                         right.span,\n                                         \"use the right value directly\",\n                                         rsnip,\n-                                        Applicability::MachineApplicable, // snippet\n+                                        Applicability::MaybeIncorrect, // FIXME #2597\n                                     );\n                                 },\n                             )"}, {"sha": "0a315fe48b5d009cca7e0fdac9a11c775d7f6c04", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -2427,12 +2427,17 @@ fn check_needless_collect<'a, 'tcx>(expr: &'tcx Expr, cx: &LateContext<'a, 'tcx>\n                     let contains_arg = snippet(cx, args[1].span, \"??\");\n                     let span = shorten_needless_collect_span(expr);\n                     span_lint_and_then(cx, NEEDLESS_COLLECT, span, NEEDLESS_COLLECT_MSG, |db| {\n+                        let (arg, pred) = if contains_arg.starts_with('&') {\n+                            (\"x\", &contains_arg[1..])\n+                        } else {\n+                            (\"&x\", &*contains_arg)\n+                        };\n                         db.span_suggestion(\n                             span,\n                             \"replace with\",\n                             format!(\n-                                \".any(|&x| x == {})\",\n-                                if contains_arg.starts_with('&') { &contains_arg[1..] } else { &contains_arg }\n+                                \".any(|{}| x == {})\",\n+                                arg, pred\n                             ),\n                             Applicability::MachineApplicable,\n                         );"}, {"sha": "a888834551c960a57b9247e66a8e703fa36c8e20", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -217,15 +217,15 @@ fn lint_map_unit_fn(cx: &LateContext<'_, '_>, stmt: &hir::Stmt, expr: &hir::Expr\n     if is_unit_function(cx, fn_arg) {\n         let msg = suggestion_msg(\"function\", map_type);\n         let suggestion = format!(\n-            \"if let {0}({1}) = {2} {{ {3}(...) }}\",\n+            \"if let {0}({binding}) = {1} {{ {2}({binding}) }}\",\n             variant,\n-            let_binding_name(cx, var_arg),\n             snippet(cx, var_arg.span, \"_\"),\n-            snippet(cx, fn_arg.span, \"_\")\n+            snippet(cx, fn_arg.span, \"_\"),\n+            binding = let_binding_name(cx, var_arg)\n         );\n \n         span_lint_and_then(cx, lint, expr.span, &msg, |db| {\n-            db.span_suggestion(stmt.span, \"try this\", suggestion, Applicability::Unspecified);\n+            db.span_suggestion(stmt.span, \"try this\", suggestion, Applicability::MachineApplicable);\n         });\n     } else if let Some((binding, closure_expr)) = unit_closure(cx, fn_arg) {\n         let msg = suggestion_msg(\"closure\", map_type);\n@@ -250,9 +250,9 @@ fn lint_map_unit_fn(cx: &LateContext<'_, '_>, stmt: &hir::Stmt, expr: &hir::Expr\n                     \"if let {0}({1}) = {2} {{ ... }}\",\n                     variant,\n                     snippet(cx, binding.pat.span, \"_\"),\n-                    snippet(cx, var_arg.span, \"_\")\n+                    snippet(cx, var_arg.span, \"_\"),\n                 );\n-                db.span_suggestion(stmt.span, \"try this\", suggestion, Applicability::Unspecified);\n+                db.span_suggestion(stmt.span, \"try this\", suggestion, Applicability::HasPlaceholders);\n             }\n         });\n     }"}, {"sha": "588f5f75c1e7c6dbbd3301fbd4bb360b033cf988", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,5 +1,6 @@\n use crate::utils::{\n-    constants, snippet, snippet_opt, span_help_and_lint, span_lint, span_lint_and_sugg, span_lint_and_then,\n+    constants, snippet_opt, snippet_with_applicability, span_help_and_lint, span_lint, span_lint_and_sugg,\n+    span_lint_and_then,\n };\n use if_chain::if_chain;\n use rustc::lint::{in_external_macro, EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n@@ -414,13 +415,10 @@ impl EarlyLintPass for MiscEarlyLints {\n                                 \"Try not to call a closure in the expression where it is declared.\",\n                                 |db| {\n                                     if decl.inputs.is_empty() {\n-                                        let hint = snippet(cx, block.span, \"..\").into_owned();\n-                                        db.span_suggestion(\n-                                            expr.span,\n-                                            \"Try doing something like: \",\n-                                            hint,\n-                                            Applicability::MachineApplicable, // snippet\n-                                        );\n+                                        let mut app = Applicability::MachineApplicable;\n+                                        let hint =\n+                                            snippet_with_applicability(cx, block.span, \"..\", &mut app).into_owned();\n+                                        db.span_suggestion(expr.span, \"Try doing something like: \", hint, app);\n                                     }\n                                 },\n                             );"}, {"sha": "9afa67dadd140ea58061684bb2890408954c36fe", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -2,9 +2,9 @@\n //!\n //! This lint is **warn** by default\n \n-use crate::utils::{snippet, span_lint_and_then};\n+use crate::utils::{snippet_with_applicability, span_lint_and_then};\n use if_chain::if_chain;\n-use rustc::hir::{BindingAnnotation, MutImmutable, Pat, PatKind};\n+use rustc::hir::{BindingAnnotation, MutImmutable, Node, Pat, PatKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n@@ -65,16 +65,25 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrowedRef {\n \n             // Check sub_pat got a `ref` keyword (excluding `ref mut`).\n             if let PatKind::Binding(BindingAnnotation::Ref, .., spanned_name, _) = sub_pat.node;\n+            let parent_id = cx.tcx.hir().get_parent_node(pat.hir_id);\n+            if let Some(parent_node) = cx.tcx.hir().find(parent_id);\n             then {\n+                // do not recurse within patterns, as they may have other references\n+                // XXXManishearth we can relax this constraint if we only check patterns\n+                // with a single ref pattern inside them\n+                if let Node::Pat(_) = parent_node {\n+                    return;\n+                }\n+                let mut applicability = Applicability::MachineApplicable;\n                 span_lint_and_then(cx, NEEDLESS_BORROWED_REFERENCE, pat.span,\n                                    \"this pattern takes a reference on something that is being de-referenced\",\n                                    |db| {\n-                                       let hint = snippet(cx, spanned_name.span, \"..\").into_owned();\n+                                       let hint = snippet_with_applicability(cx, spanned_name.span, \"..\", &mut applicability).into_owned();\n                                        db.span_suggestion(\n                                            pat.span,\n                                            \"try removing the `&ref` part and just keep\",\n                                            hint,\n-                                           Applicability::MachineApplicable, // snippet\n+                                           applicability,\n                                        );\n                                    });\n             }"}, {"sha": "90a31f710f4d5d82680d0ab2b8e6dd25237aa598", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -10,7 +10,6 @@ use rustc::lint::{LateContext, LateLintPass, Lint, LintArray, LintPass};\n use rustc::ty::adjustment::Adjust;\n use rustc::ty::{Ty, TypeFlags};\n use rustc::{declare_lint_pass, declare_tool_lint};\n-use rustc_errors::Applicability;\n use rustc_typeck::hir_ty_to_ty;\n use syntax_pos::{InnerSpan, Span, DUMMY_SP};\n \n@@ -125,16 +124,11 @@ fn verify_ty_bound<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>, source: S\n         match source {\n             Source::Item { .. } => {\n                 let const_kw_span = span.from_inner(InnerSpan::new(0, 5));\n-                db.span_suggestion(\n-                    const_kw_span,\n-                    \"make this a static item\",\n-                    \"static\".to_string(),\n-                    Applicability::MachineApplicable,\n-                );\n+                db.span_label(const_kw_span, \"make this a static item (maybe with lazy_static)\");\n             },\n             Source::Assoc { ty: ty_span, .. } => {\n                 if ty.flags.contains(TypeFlags::HAS_FREE_LOCAL_NAMES) {\n-                    db.span_help(ty_span, &format!(\"consider requiring `{}` to be `Copy`\", ty));\n+                    db.span_label(ty_span, &format!(\"consider requiring `{}` to be `Copy`\", ty));\n                 }\n             },\n             Source::Expr { .. } => {"}, {"sha": "8fea20dba67c84ddb47481e1ca335aaa98b13232", "filename": "clippy_lints/src/redundant_pattern_matching.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -49,14 +49,22 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantPatternMatching {\n         if let ExprKind::Match(ref op, ref arms, ref match_source) = expr.node {\n             match match_source {\n                 MatchSource::Normal => find_sugg_for_match(cx, expr, op, arms),\n-                MatchSource::IfLetDesugar { .. } => find_sugg_for_if_let(cx, expr, op, arms),\n+                MatchSource::IfLetDesugar { contains_else_clause } => {\n+                    find_sugg_for_if_let(cx, expr, op, arms, *contains_else_clause)\n+                },\n                 _ => return,\n             }\n         }\n     }\n }\n \n-fn find_sugg_for_if_let<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, op: &P<Expr>, arms: &HirVec<Arm>) {\n+fn find_sugg_for_if_let<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    expr: &'tcx Expr,\n+    op: &P<Expr>,\n+    arms: &HirVec<Arm>,\n+    has_else: bool,\n+) {\n     let good_method = match arms[0].pat.node {\n         PatKind::TupleStruct(ref path, ref patterns, _) if patterns.len() == 1 => {\n             if let PatKind::Wild = patterns[0].node {\n@@ -79,6 +87,8 @@ fn find_sugg_for_if_let<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr,\n         _ => return,\n     };\n \n+    let maybe_semi = if has_else { \"\" } else { \";\" };\n+\n     span_lint_and_then(\n         cx,\n         REDUNDANT_PATTERN_MATCHING,\n@@ -89,7 +99,7 @@ fn find_sugg_for_if_let<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr,\n             db.span_suggestion(\n                 span,\n                 \"try this\",\n-                format!(\"{}.{}\", snippet(cx, op.span, \"_\"), good_method),\n+                format!(\"{}.{}{}\", snippet(cx, op.span, \"_\"), good_method, maybe_semi),\n                 Applicability::MaybeIncorrect, // snippet\n             );\n         },"}, {"sha": "dcdaae7e72430494a3224bb9f0312ab07e90f274", "filename": "tests/ui/entry_fixable.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fentry_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fentry_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry_fixable.fixed?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+\n+#![allow(unused, clippy::needless_pass_by_value)]\n+#![warn(clippy::map_entry)]\n+\n+use std::collections::{BTreeMap, HashMap};\n+use std::hash::Hash;\n+\n+fn foo() {}\n+\n+fn insert_if_absent0<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n+    m.entry(k).or_insert(v);\n+}\n+\n+fn main() {}"}, {"sha": "55d5b21568d0e03223089aad2e5990a3a104d9eb", "filename": "tests/ui/entry_fixable.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fentry_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fentry_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry_fixable.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,17 @@\n+// run-rustfix\n+\n+#![allow(unused, clippy::needless_pass_by_value)]\n+#![warn(clippy::map_entry)]\n+\n+use std::collections::{BTreeMap, HashMap};\n+use std::hash::Hash;\n+\n+fn foo() {}\n+\n+fn insert_if_absent0<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n+    if !m.contains_key(&k) {\n+        m.insert(k, v);\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "87403200ced5008788562ebe66b8c6c2ea918129", "filename": "tests/ui/entry_fixable.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fentry_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fentry_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry_fixable.stderr?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,12 @@\n+error: usage of `contains_key` followed by `insert` on a `HashMap`\n+  --> $DIR/entry_fixable.rs:12:5\n+   |\n+LL | /     if !m.contains_key(&k) {\n+LL | |         m.insert(k, v);\n+LL | |     }\n+   | |_____^ help: consider using: `m.entry(k).or_insert(v);`\n+   |\n+   = note: `-D clippy::map-entry` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "f530fc023cfbf920f46b98cacb2847966234c6c8", "filename": "tests/ui/entry_unfixable.rs", "status": "renamed", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fentry_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fentry_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry_unfixable.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -6,19 +6,6 @@ use std::hash::Hash;\n \n fn foo() {}\n \n-fn insert_if_absent0<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n-    if !m.contains_key(&k) {\n-        m.insert(k, v);\n-    }\n-}\n-\n-fn insert_if_absent1<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n-    if !m.contains_key(&k) {\n-        foo();\n-        m.insert(k, v);\n-    }\n-}\n-\n fn insert_if_absent2<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, v: V) {\n     if !m.contains_key(&k) {\n         m.insert(k, v)\n@@ -62,6 +49,7 @@ fn insert_in_btreemap<K: Ord, V>(m: &mut BTreeMap<K, V>, k: K, v: V) {\n     };\n }\n \n+// should not trigger\n fn insert_other_if_absent<K: Eq + Hash, V>(m: &mut HashMap<K, V>, k: K, o: K, v: V) {\n     if !m.contains_key(&k) {\n         m.insert(o, v);", "previous_filename": "tests/ui/entry.rs"}, {"sha": "e58c8d22dc45e2bc6303f3afeb8dd813ded7c42f", "filename": "tests/ui/entry_unfixable.stderr", "status": "renamed", "additions": 13, "deletions": 30, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fentry_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fentry_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry_unfixable.stderr?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,74 +1,57 @@\n error: usage of `contains_key` followed by `insert` on a `HashMap`\n-  --> $DIR/entry.rs:10:5\n-   |\n-LL | /     if !m.contains_key(&k) {\n-LL | |         m.insert(k, v);\n-LL | |     }\n-   | |_____^ help: consider using: `m.entry(k).or_insert(v)`\n-   |\n-   = note: `-D clippy::map-entry` implied by `-D warnings`\n-\n-error: usage of `contains_key` followed by `insert` on a `HashMap`\n-  --> $DIR/entry.rs:16:5\n-   |\n-LL | /     if !m.contains_key(&k) {\n-LL | |         foo();\n-LL | |         m.insert(k, v);\n-LL | |     }\n-   | |_____^ help: consider using: `m.entry(k)`\n-\n-error: usage of `contains_key` followed by `insert` on a `HashMap`\n-  --> $DIR/entry.rs:23:5\n+  --> $DIR/entry_unfixable.rs:10:5\n    |\n LL | /     if !m.contains_key(&k) {\n LL | |         m.insert(k, v)\n LL | |     } else {\n LL | |         None\n LL | |     };\n-   | |_____^ help: consider using: `m.entry(k)`\n+   | |_____^ consider using `m.entry(k)`\n+   |\n+   = note: `-D clippy::map-entry` implied by `-D warnings`\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n-  --> $DIR/entry.rs:31:5\n+  --> $DIR/entry_unfixable.rs:18:5\n    |\n LL | /     if m.contains_key(&k) {\n LL | |         None\n LL | |     } else {\n LL | |         m.insert(k, v)\n LL | |     };\n-   | |_____^ help: consider using: `m.entry(k)`\n+   | |_____^ consider using `m.entry(k)`\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n-  --> $DIR/entry.rs:39:5\n+  --> $DIR/entry_unfixable.rs:26:5\n    |\n LL | /     if !m.contains_key(&k) {\n LL | |         foo();\n LL | |         m.insert(k, v)\n LL | |     } else {\n LL | |         None\n LL | |     };\n-   | |_____^ help: consider using: `m.entry(k)`\n+   | |_____^ consider using `m.entry(k)`\n \n error: usage of `contains_key` followed by `insert` on a `HashMap`\n-  --> $DIR/entry.rs:48:5\n+  --> $DIR/entry_unfixable.rs:35:5\n    |\n LL | /     if m.contains_key(&k) {\n LL | |         None\n LL | |     } else {\n LL | |         foo();\n LL | |         m.insert(k, v)\n LL | |     };\n-   | |_____^ help: consider using: `m.entry(k)`\n+   | |_____^ consider using `m.entry(k)`\n \n error: usage of `contains_key` followed by `insert` on a `BTreeMap`\n-  --> $DIR/entry.rs:57:5\n+  --> $DIR/entry_unfixable.rs:44:5\n    |\n LL | /     if !m.contains_key(&k) {\n LL | |         foo();\n LL | |         m.insert(k, v)\n LL | |     } else {\n LL | |         None\n LL | |     };\n-   | |_____^ help: consider using: `m.entry(k)`\n+   | |_____^ consider using `m.entry(k)`\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 5 previous errors\n ", "previous_filename": "tests/ui/entry.stderr"}, {"sha": "e9a685b9c79a962d1597f4984b9bc0ca207a1690", "filename": "tests/ui/eq_op.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feq_op.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,3 +1,5 @@\n+// does not test any rustfixable lints\n+\n #[rustfmt::skip]\n #[warn(clippy::eq_op)]\n #[allow(clippy::identity_op, clippy::double_parens, clippy::many_single_char_names)]"}, {"sha": "5b80e6078eed779a002db07565b8b0b7c1c18fe9", "filename": "tests/ui/eq_op.stderr", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Feq_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Feq_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feq_op.stderr?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,163 +1,163 @@\n error: equal expressions as operands to `==`\n-  --> $DIR/eq_op.rs:9:5\n+  --> $DIR/eq_op.rs:11:5\n    |\n LL |     1 == 1;\n    |     ^^^^^^\n    |\n    = note: `-D clippy::eq-op` implied by `-D warnings`\n \n error: equal expressions as operands to `==`\n-  --> $DIR/eq_op.rs:10:5\n+  --> $DIR/eq_op.rs:12:5\n    |\n LL |     \"no\" == \"no\";\n    |     ^^^^^^^^^^^^\n \n error: equal expressions as operands to `!=`\n-  --> $DIR/eq_op.rs:12:5\n+  --> $DIR/eq_op.rs:14:5\n    |\n LL |     false != false;\n    |     ^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `<`\n-  --> $DIR/eq_op.rs:13:5\n+  --> $DIR/eq_op.rs:15:5\n    |\n LL |     1.5 < 1.5;\n    |     ^^^^^^^^^\n \n error: equal expressions as operands to `>=`\n-  --> $DIR/eq_op.rs:14:5\n+  --> $DIR/eq_op.rs:16:5\n    |\n LL |     1u64 >= 1u64;\n    |     ^^^^^^^^^^^^\n \n error: equal expressions as operands to `&`\n-  --> $DIR/eq_op.rs:17:5\n+  --> $DIR/eq_op.rs:19:5\n    |\n LL |     (1 as u64) & (1 as u64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `^`\n-  --> $DIR/eq_op.rs:18:5\n+  --> $DIR/eq_op.rs:20:5\n    |\n LL |     1 ^ ((((((1))))));\n    |     ^^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `<`\n-  --> $DIR/eq_op.rs:21:5\n+  --> $DIR/eq_op.rs:23:5\n    |\n LL |     (-(2) < -(2));\n    |     ^^^^^^^^^^^^^\n \n error: equal expressions as operands to `==`\n-  --> $DIR/eq_op.rs:22:5\n+  --> $DIR/eq_op.rs:24:5\n    |\n LL |     ((1 + 1) & (1 + 1) == (1 + 1) & (1 + 1));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `&`\n-  --> $DIR/eq_op.rs:22:6\n+  --> $DIR/eq_op.rs:24:6\n    |\n LL |     ((1 + 1) & (1 + 1) == (1 + 1) & (1 + 1));\n    |      ^^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `&`\n-  --> $DIR/eq_op.rs:22:27\n+  --> $DIR/eq_op.rs:24:27\n    |\n LL |     ((1 + 1) & (1 + 1) == (1 + 1) & (1 + 1));\n    |                           ^^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `==`\n-  --> $DIR/eq_op.rs:23:5\n+  --> $DIR/eq_op.rs:25:5\n    |\n LL |     (1 * 2) + (3 * 4) == 1 * 2 + 3 * 4;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `!=`\n-  --> $DIR/eq_op.rs:26:5\n+  --> $DIR/eq_op.rs:28:5\n    |\n LL |     ([1] != [1]);\n    |     ^^^^^^^^^^^^\n \n error: equal expressions as operands to `!=`\n-  --> $DIR/eq_op.rs:27:5\n+  --> $DIR/eq_op.rs:29:5\n    |\n LL |     ((1, 2) != (1, 2));\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `==`\n-  --> $DIR/eq_op.rs:31:5\n+  --> $DIR/eq_op.rs:33:5\n    |\n LL |     1 + 1 == 2;\n    |     ^^^^^^^^^^\n \n error: equal expressions as operands to `==`\n-  --> $DIR/eq_op.rs:32:5\n+  --> $DIR/eq_op.rs:34:5\n    |\n LL |     1 - 1 == 0;\n    |     ^^^^^^^^^^\n \n error: equal expressions as operands to `-`\n-  --> $DIR/eq_op.rs:32:5\n+  --> $DIR/eq_op.rs:34:5\n    |\n LL |     1 - 1 == 0;\n    |     ^^^^^\n \n error: equal expressions as operands to `-`\n-  --> $DIR/eq_op.rs:34:5\n+  --> $DIR/eq_op.rs:36:5\n    |\n LL |     1 - 1;\n    |     ^^^^^\n \n error: equal expressions as operands to `/`\n-  --> $DIR/eq_op.rs:35:5\n+  --> $DIR/eq_op.rs:37:5\n    |\n LL |     1 / 1;\n    |     ^^^^^\n \n error: equal expressions as operands to `&&`\n-  --> $DIR/eq_op.rs:36:5\n+  --> $DIR/eq_op.rs:38:5\n    |\n LL |     true && true;\n    |     ^^^^^^^^^^^^\n \n error: equal expressions as operands to `||`\n-  --> $DIR/eq_op.rs:38:5\n+  --> $DIR/eq_op.rs:40:5\n    |\n LL |     true || true;\n    |     ^^^^^^^^^^^^\n \n error: equal expressions as operands to `&&`\n-  --> $DIR/eq_op.rs:44:5\n+  --> $DIR/eq_op.rs:46:5\n    |\n LL |     a == b && b == a;\n    |     ^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `&&`\n-  --> $DIR/eq_op.rs:45:5\n+  --> $DIR/eq_op.rs:47:5\n    |\n LL |     a != b && b != a;\n    |     ^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `&&`\n-  --> $DIR/eq_op.rs:46:5\n+  --> $DIR/eq_op.rs:48:5\n    |\n LL |     a < b && b > a;\n    |     ^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `&&`\n-  --> $DIR/eq_op.rs:47:5\n+  --> $DIR/eq_op.rs:49:5\n    |\n LL |     a <= b && b >= a;\n    |     ^^^^^^^^^^^^^^^^\n \n error: equal expressions as operands to `==`\n-  --> $DIR/eq_op.rs:50:5\n+  --> $DIR/eq_op.rs:52:5\n    |\n LL |     a == a;\n    |     ^^^^^^\n \n error: equal expressions as operands to `/`\n-  --> $DIR/eq_op.rs:60:20\n+  --> $DIR/eq_op.rs:62:20\n    |\n LL |     const D: u32 = A / A;\n    |                    ^^^^^"}, {"sha": "8f4ad15720b0ac238b607d1b57119e0b5e8821f3", "filename": "tests/ui/float_cmp_const.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Ffloat_cmp_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Ffloat_cmp_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp_const.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,3 +1,5 @@\n+// does not test any rustfixable lints\n+\n #![warn(clippy::float_cmp_const)]\n #![allow(clippy::float_cmp)]\n #![allow(unused, clippy::no_effect, clippy::unnecessary_operation)]"}, {"sha": "3f2ac9eee9bedecec92d31366638831b9a8d3ad0", "filename": "tests/ui/float_cmp_const.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Ffloat_cmp_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Ffloat_cmp_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp_const.stderr?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,84 +1,84 @@\n error: strict comparison of f32 or f64 constant\n-  --> $DIR/float_cmp_const.rs:18:5\n+  --> $DIR/float_cmp_const.rs:20:5\n    |\n LL |     1f32 == ONE;\n    |     ^^^^^^^^^^^ help: consider comparing them within some error: `(1f32 - ONE).abs() < error`\n    |\n    = note: `-D clippy::float-cmp-const` implied by `-D warnings`\n note: std::f32::EPSILON and std::f64::EPSILON are available.\n-  --> $DIR/float_cmp_const.rs:18:5\n+  --> $DIR/float_cmp_const.rs:20:5\n    |\n LL |     1f32 == ONE;\n    |     ^^^^^^^^^^^\n \n error: strict comparison of f32 or f64 constant\n-  --> $DIR/float_cmp_const.rs:19:5\n+  --> $DIR/float_cmp_const.rs:21:5\n    |\n LL |     TWO == ONE;\n    |     ^^^^^^^^^^ help: consider comparing them within some error: `(TWO - ONE).abs() < error`\n    |\n note: std::f32::EPSILON and std::f64::EPSILON are available.\n-  --> $DIR/float_cmp_const.rs:19:5\n+  --> $DIR/float_cmp_const.rs:21:5\n    |\n LL |     TWO == ONE;\n    |     ^^^^^^^^^^\n \n error: strict comparison of f32 or f64 constant\n-  --> $DIR/float_cmp_const.rs:20:5\n+  --> $DIR/float_cmp_const.rs:22:5\n    |\n LL |     TWO != ONE;\n    |     ^^^^^^^^^^ help: consider comparing them within some error: `(TWO - ONE).abs() > error`\n    |\n note: std::f32::EPSILON and std::f64::EPSILON are available.\n-  --> $DIR/float_cmp_const.rs:20:5\n+  --> $DIR/float_cmp_const.rs:22:5\n    |\n LL |     TWO != ONE;\n    |     ^^^^^^^^^^\n \n error: strict comparison of f32 or f64 constant\n-  --> $DIR/float_cmp_const.rs:21:5\n+  --> $DIR/float_cmp_const.rs:23:5\n    |\n LL |     ONE + ONE == TWO;\n    |     ^^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(ONE + ONE - TWO).abs() < error`\n    |\n note: std::f32::EPSILON and std::f64::EPSILON are available.\n-  --> $DIR/float_cmp_const.rs:21:5\n+  --> $DIR/float_cmp_const.rs:23:5\n    |\n LL |     ONE + ONE == TWO;\n    |     ^^^^^^^^^^^^^^^^\n \n error: strict comparison of f32 or f64 constant\n-  --> $DIR/float_cmp_const.rs:23:5\n+  --> $DIR/float_cmp_const.rs:25:5\n    |\n LL |     x as f32 == ONE;\n    |     ^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(x as f32 - ONE).abs() < error`\n    |\n note: std::f32::EPSILON and std::f64::EPSILON are available.\n-  --> $DIR/float_cmp_const.rs:23:5\n+  --> $DIR/float_cmp_const.rs:25:5\n    |\n LL |     x as f32 == ONE;\n    |     ^^^^^^^^^^^^^^^\n \n error: strict comparison of f32 or f64 constant\n-  --> $DIR/float_cmp_const.rs:26:5\n+  --> $DIR/float_cmp_const.rs:28:5\n    |\n LL |     v == ONE;\n    |     ^^^^^^^^ help: consider comparing them within some error: `(v - ONE).abs() < error`\n    |\n note: std::f32::EPSILON and std::f64::EPSILON are available.\n-  --> $DIR/float_cmp_const.rs:26:5\n+  --> $DIR/float_cmp_const.rs:28:5\n    |\n LL |     v == ONE;\n    |     ^^^^^^^^\n \n error: strict comparison of f32 or f64 constant\n-  --> $DIR/float_cmp_const.rs:27:5\n+  --> $DIR/float_cmp_const.rs:29:5\n    |\n LL |     v != ONE;\n    |     ^^^^^^^^ help: consider comparing them within some error: `(v - ONE).abs() > error`\n    |\n note: std::f32::EPSILON and std::f64::EPSILON are available.\n-  --> $DIR/float_cmp_const.rs:27:5\n+  --> $DIR/float_cmp_const.rs:29:5\n    |\n LL |     v != ONE;\n    |     ^^^^^^^^"}, {"sha": "2773227e26bcaa0be55b82eb4abbedcdb8816829", "filename": "tests/ui/iter_cloned_collect.fixed", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fiter_cloned_collect.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fiter_cloned_collect.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_cloned_collect.fixed?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,22 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+\n+use std::collections::HashSet;\n+use std::collections::VecDeque;\n+\n+fn main() {\n+    let v = [1, 2, 3, 4, 5];\n+    let v2: Vec<isize> = v.to_vec();\n+    let v3: HashSet<isize> = v.iter().cloned().collect();\n+    let v4: VecDeque<isize> = v.iter().cloned().collect();\n+\n+    // Handle macro expansion in suggestion\n+    let _: Vec<isize> = vec![1, 2, 3].to_vec();\n+\n+    // Issue #3704\n+    unsafe {\n+        let _: Vec<u8> = std::ffi::CStr::from_ptr(std::ptr::null())\n+            .to_bytes().to_vec();\n+    }\n+}"}, {"sha": "60a4eac23c79f61650593f77063d69d40a3605c3", "filename": "tests/ui/iter_cloned_collect.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fiter_cloned_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fiter_cloned_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_cloned_collect.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,25 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+\n+use std::collections::HashSet;\n+use std::collections::VecDeque;\n+\n+fn main() {\n+    let v = [1, 2, 3, 4, 5];\n+    let v2: Vec<isize> = v.iter().cloned().collect();\n+    let v3: HashSet<isize> = v.iter().cloned().collect();\n+    let v4: VecDeque<isize> = v.iter().cloned().collect();\n+\n+    // Handle macro expansion in suggestion\n+    let _: Vec<isize> = vec![1, 2, 3].iter().cloned().collect();\n+\n+    // Issue #3704\n+    unsafe {\n+        let _: Vec<u8> = std::ffi::CStr::from_ptr(std::ptr::null())\n+            .to_bytes()\n+            .iter()\n+            .cloned()\n+            .collect();\n+    }\n+}"}, {"sha": "b90a1e6c9196733db6f63a23f2e48a2e0dfe136e", "filename": "tests/ui/iter_cloned_collect.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fiter_cloned_collect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fiter_cloned_collect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_cloned_collect.stderr?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,26 @@\n+error: called `iter().cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n+  --> $DIR/iter_cloned_collect.rs:10:27\n+   |\n+LL |     let v2: Vec<isize> = v.iter().cloned().collect();\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.to_vec()`\n+   |\n+   = note: `-D clippy::iter-cloned-collect` implied by `-D warnings`\n+\n+error: called `iter().cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n+  --> $DIR/iter_cloned_collect.rs:15:38\n+   |\n+LL |     let _: Vec<isize> = vec![1, 2, 3].iter().cloned().collect();\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.to_vec()`\n+\n+error: called `iter().cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n+  --> $DIR/iter_cloned_collect.rs:20:24\n+   |\n+LL |               .to_bytes()\n+   |  ________________________^\n+LL | |             .iter()\n+LL | |             .cloned()\n+LL | |             .collect();\n+   | |______________________^ help: try: `.to_vec()`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "20bd872c638c71a1e3db5ad055a6a0007fb0ff8e", "filename": "tests/ui/literals.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fliterals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fliterals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliterals.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,4 +1,5 @@\n-#![warn(clippy::large_digit_groups)]\n+// does not test any rustfixable lints\n+\n #![warn(clippy::mixed_case_hex_literals)]\n #![warn(clippy::zero_prefixed_literal)]\n #![allow(clippy::unseparated_literal_suffix)]\n@@ -28,8 +29,6 @@ fn main() {\n     let ok16 = 0xFE_BAFE_ABAB_ABCD;\n     let ok17 = 0x123_4567_8901_usize;\n \n-    let fail13 = 0x1_23456_78901_usize;\n-\n     let fail19 = 12_3456_21;\n     let fail22 = 3__4___23;\n     let fail23 = 3__16___23;"}, {"sha": "4e1e8e4c246a52bb3f742df74cdcadcdf8e2b315", "filename": "tests/ui/literals.stderr", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fliterals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fliterals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliterals.stderr?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,25 +1,25 @@\n error: inconsistent casing in hexadecimal literal\n-  --> $DIR/literals.rs:13:17\n+  --> $DIR/literals.rs:14:17\n    |\n LL |     let fail1 = 0xabCD;\n    |                 ^^^^^^\n    |\n    = note: `-D clippy::mixed-case-hex-literals` implied by `-D warnings`\n \n error: inconsistent casing in hexadecimal literal\n-  --> $DIR/literals.rs:14:17\n+  --> $DIR/literals.rs:15:17\n    |\n LL |     let fail2 = 0xabCD_u32;\n    |                 ^^^^^^^^^^\n \n error: inconsistent casing in hexadecimal literal\n-  --> $DIR/literals.rs:15:17\n+  --> $DIR/literals.rs:16:17\n    |\n LL |     let fail2 = 0xabCD_isize;\n    |                 ^^^^^^^^^^^^\n \n error: this is a decimal constant\n-  --> $DIR/literals.rs:16:27\n+  --> $DIR/literals.rs:17:27\n    |\n LL |     let fail_multi_zero = 000_123usize;\n    |                           ^^^^^^^^^^^^\n@@ -35,7 +35,7 @@ LL |     let fail_multi_zero = 0o123usize;\n    |                           ^^^^^^^^^^\n \n error: this is a decimal constant\n-  --> $DIR/literals.rs:20:17\n+  --> $DIR/literals.rs:21:17\n    |\n LL |     let fail8 = 0123;\n    |                 ^^^^\n@@ -48,33 +48,25 @@ help: if you mean to use an octal constant, use `0o`\n LL |     let fail8 = 0o123;\n    |                 ^^^^^\n \n-error: digit groups should be smaller\n-  --> $DIR/literals.rs:31:18\n-   |\n-LL |     let fail13 = 0x1_23456_78901_usize;\n-   |                  ^^^^^^^^^^^^^^^^^^^^^ help: consider: `0x0123_4567_8901_usize`\n-   |\n-   = note: `-D clippy::large-digit-groups` implied by `-D warnings`\n-\n error: digits grouped inconsistently by underscores\n-  --> $DIR/literals.rs:33:18\n+  --> $DIR/literals.rs:32:18\n    |\n LL |     let fail19 = 12_3456_21;\n    |                  ^^^^^^^^^^ help: consider: `12_345_621`\n    |\n    = note: `-D clippy::inconsistent-digit-grouping` implied by `-D warnings`\n \n error: digits grouped inconsistently by underscores\n-  --> $DIR/literals.rs:34:18\n+  --> $DIR/literals.rs:33:18\n    |\n LL |     let fail22 = 3__4___23;\n    |                  ^^^^^^^^^ help: consider: `3_423`\n \n error: digits grouped inconsistently by underscores\n-  --> $DIR/literals.rs:35:18\n+  --> $DIR/literals.rs:34:18\n    |\n LL |     let fail23 = 3__16___23;\n    |                  ^^^^^^^^^^ help: consider: `31_623`\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 8 previous errors\n "}, {"sha": "51732e02be4fe9244a703f4c2547b275e160f891", "filename": "tests/ui/map_flatten.fixed", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fmap_flatten.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fmap_flatten.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.fixed?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+\n+#![warn(clippy::all, clippy::pedantic)]\n+#![allow(clippy::missing_docs_in_private_items)]\n+\n+fn main() {\n+    let _: Vec<_> = vec![5_i8; 6].into_iter().flat_map(|x| 0..x).collect();\n+}"}, {"sha": "66137a50ae8da563188dbe3845516b86d15c730b", "filename": "tests/ui/map_flatten.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fmap_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fmap_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n #![warn(clippy::all, clippy::pedantic)]\n #![allow(clippy::missing_docs_in_private_items)]\n "}, {"sha": "478c7e780d9634b1419304a5f92bc4858c56d0ba", "filename": "tests/ui/map_flatten.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fmap_flatten.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fmap_flatten.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.stderr?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,5 +1,5 @@\n error: called `map(..).flatten()` on an `Iterator`. This is more succinctly expressed by calling `.flat_map(..)`\n-  --> $DIR/map_flatten.rs:5:21\n+  --> $DIR/map_flatten.rs:7:21\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| 0..x).flatten().collect();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using flat_map instead: `vec![5_i8; 6].into_iter().flat_map(|x| 0..x)`"}, {"sha": "69a8f286d050d398dc19f78e0252a8d31f67d62f", "filename": "tests/ui/mem_discriminant.fixed", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fmem_discriminant.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fmem_discriminant.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_discriminant.fixed?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,45 @@\n+// run-rustfix\n+\n+#![deny(clippy::mem_discriminant_non_enum)]\n+\n+use std::mem;\n+\n+enum Foo {\n+    One(usize),\n+    Two(u8),\n+}\n+\n+fn main() {\n+    // bad\n+    mem::discriminant(&Some(2));\n+    mem::discriminant(&None::<u8>);\n+    mem::discriminant(&Foo::One(5));\n+    mem::discriminant(&Foo::Two(5));\n+\n+    let ro = &Some(3);\n+    let rro = &ro;\n+    mem::discriminant(ro);\n+    mem::discriminant(*rro);\n+    mem::discriminant(*rro);\n+\n+    macro_rules! mem_discriminant_but_in_a_macro {\n+        ($param:expr) => {\n+            mem::discriminant($param)\n+        };\n+    }\n+\n+    mem_discriminant_but_in_a_macro!(*rro);\n+\n+    let rrrrro = &&&rro;\n+    mem::discriminant(****rrrrro);\n+    mem::discriminant(****rrrrro);\n+\n+    // ok\n+    mem::discriminant(&Some(2));\n+    mem::discriminant(&None::<u8>);\n+    mem::discriminant(&Foo::One(5));\n+    mem::discriminant(&Foo::Two(5));\n+    mem::discriminant(ro);\n+    mem::discriminant(*rro);\n+    mem::discriminant(****rrrrro);\n+}"}, {"sha": "55db50fcdc733d4a0180df3ff1eedf535045711d", "filename": "tests/ui/mem_discriminant.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fmem_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fmem_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_discriminant.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n #![deny(clippy::mem_discriminant_non_enum)]\n \n use std::mem;\n@@ -7,16 +9,12 @@ enum Foo {\n     Two(u8),\n }\n \n-struct A(Foo);\n-\n fn main() {\n     // bad\n-    mem::discriminant(&\"hello\");\n     mem::discriminant(&&Some(2));\n     mem::discriminant(&&None::<u8>);\n     mem::discriminant(&&Foo::One(5));\n     mem::discriminant(&&Foo::Two(5));\n-    mem::discriminant(&A(Foo::One(0)));\n \n     let ro = &Some(3);\n     let rro = &ro;"}, {"sha": "0420c82abda5e70d543982f634d781ee27f80963", "filename": "tests/ui/mem_discriminant.stderr", "status": "modified", "additions": 16, "deletions": 28, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fmem_discriminant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fmem_discriminant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_discriminant.stderr?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,79 +1,67 @@\n-error: calling `mem::discriminant` on non-enum type `&str`\n+error: calling `mem::discriminant` on non-enum type `&std::option::Option<i32>`\n   --> $DIR/mem_discriminant.rs:14:5\n    |\n-LL |     mem::discriminant(&\"hello\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     mem::discriminant(&&Some(2));\n+   |     ^^^^^^^^^^^^^^^^^^---------^\n+   |                       |\n+   |                       help: try dereferencing: `&Some(2)`\n    |\n note: lint level defined here\n-  --> $DIR/mem_discriminant.rs:1:9\n+  --> $DIR/mem_discriminant.rs:3:9\n    |\n LL | #![deny(clippy::mem_discriminant_non_enum)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: calling `mem::discriminant` on non-enum type `&std::option::Option<i32>`\n-  --> $DIR/mem_discriminant.rs:15:5\n-   |\n-LL |     mem::discriminant(&&Some(2));\n-   |     ^^^^^^^^^^^^^^^^^^---------^\n-   |                       |\n-   |                       help: try dereferencing: `&Some(2)`\n-\n error: calling `mem::discriminant` on non-enum type `&std::option::Option<u8>`\n-  --> $DIR/mem_discriminant.rs:16:5\n+  --> $DIR/mem_discriminant.rs:15:5\n    |\n LL |     mem::discriminant(&&None::<u8>);\n    |     ^^^^^^^^^^^^^^^^^^------------^\n    |                       |\n    |                       help: try dereferencing: `&None::<u8>`\n \n error: calling `mem::discriminant` on non-enum type `&Foo`\n-  --> $DIR/mem_discriminant.rs:17:5\n+  --> $DIR/mem_discriminant.rs:16:5\n    |\n LL |     mem::discriminant(&&Foo::One(5));\n    |     ^^^^^^^^^^^^^^^^^^-------------^\n    |                       |\n    |                       help: try dereferencing: `&Foo::One(5)`\n \n error: calling `mem::discriminant` on non-enum type `&Foo`\n-  --> $DIR/mem_discriminant.rs:18:5\n+  --> $DIR/mem_discriminant.rs:17:5\n    |\n LL |     mem::discriminant(&&Foo::Two(5));\n    |     ^^^^^^^^^^^^^^^^^^-------------^\n    |                       |\n    |                       help: try dereferencing: `&Foo::Two(5)`\n \n-error: calling `mem::discriminant` on non-enum type `A`\n-  --> $DIR/mem_discriminant.rs:19:5\n-   |\n-LL |     mem::discriminant(&A(Foo::One(0)));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: calling `mem::discriminant` on non-enum type `&std::option::Option<i32>`\n-  --> $DIR/mem_discriminant.rs:23:5\n+  --> $DIR/mem_discriminant.rs:21:5\n    |\n LL |     mem::discriminant(&ro);\n    |     ^^^^^^^^^^^^^^^^^^---^\n    |                       |\n    |                       help: try dereferencing: `ro`\n \n error: calling `mem::discriminant` on non-enum type `&std::option::Option<i32>`\n-  --> $DIR/mem_discriminant.rs:24:5\n+  --> $DIR/mem_discriminant.rs:22:5\n    |\n LL |     mem::discriminant(rro);\n    |     ^^^^^^^^^^^^^^^^^^---^\n    |                       |\n    |                       help: try dereferencing: `*rro`\n \n error: calling `mem::discriminant` on non-enum type `&&std::option::Option<i32>`\n-  --> $DIR/mem_discriminant.rs:25:5\n+  --> $DIR/mem_discriminant.rs:23:5\n    |\n LL |     mem::discriminant(&rro);\n    |     ^^^^^^^^^^^^^^^^^^----^\n    |                       |\n    |                       help: try dereferencing: `*rro`\n \n error: calling `mem::discriminant` on non-enum type `&&std::option::Option<i32>`\n-  --> $DIR/mem_discriminant.rs:29:13\n+  --> $DIR/mem_discriminant.rs:27:13\n    |\n LL |             mem::discriminant($param)\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -85,20 +73,20 @@ LL |     mem_discriminant_but_in_a_macro!(&rro);\n    |     in this macro invocation\n \n error: calling `mem::discriminant` on non-enum type `&&&&&std::option::Option<i32>`\n-  --> $DIR/mem_discriminant.rs:36:5\n+  --> $DIR/mem_discriminant.rs:34:5\n    |\n LL |     mem::discriminant(&rrrrro);\n    |     ^^^^^^^^^^^^^^^^^^-------^\n    |                       |\n    |                       help: try dereferencing: `****rrrrro`\n \n error: calling `mem::discriminant` on non-enum type `&&&std::option::Option<i32>`\n-  --> $DIR/mem_discriminant.rs:37:5\n+  --> $DIR/mem_discriminant.rs:35:5\n    |\n LL |     mem::discriminant(*rrrrro);\n    |     ^^^^^^^^^^^^^^^^^^-------^\n    |                       |\n    |                       help: try dereferencing: `****rrrrro`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 10 previous errors\n "}, {"sha": "e245d3257d55d02a5639ec09761a8a8af87f58f2", "filename": "tests/ui/mem_discriminant_unfixable.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fmem_discriminant_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fmem_discriminant_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_discriminant_unfixable.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,16 @@\n+#![deny(clippy::mem_discriminant_non_enum)]\n+\n+use std::mem;\n+\n+enum Foo {\n+    One(usize),\n+    Two(u8),\n+}\n+\n+struct A(Foo);\n+\n+fn main() {\n+    // bad\n+    mem::discriminant(&\"hello\");\n+    mem::discriminant(&A(Foo::One(0)));\n+}"}, {"sha": "f12a9b2d934d64a7f78dbbbb68241d9a553ebff0", "filename": "tests/ui/mem_discriminant_unfixable.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fmem_discriminant_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fmem_discriminant_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_discriminant_unfixable.stderr?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,20 @@\n+error: calling `mem::discriminant` on non-enum type `&str`\n+  --> $DIR/mem_discriminant_unfixable.rs:14:5\n+   |\n+LL |     mem::discriminant(&\"hello\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/mem_discriminant_unfixable.rs:1:9\n+   |\n+LL | #![deny(clippy::mem_discriminant_non_enum)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: calling `mem::discriminant` on non-enum type `A`\n+  --> $DIR/mem_discriminant_unfixable.rs:15:5\n+   |\n+LL |     mem::discriminant(&A(Foo::One(0)));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "50f9b7c7ba63deacb24ce940bf8159a1591da5c4", "filename": "tests/ui/needless_borrow.fixed", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fneedless_borrow.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fneedless_borrow.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.fixed?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,62 @@\n+// run-rustfix\n+\n+#![allow(clippy::needless_borrowed_reference)]\n+\n+#[allow(clippy::trivially_copy_pass_by_ref)]\n+fn x(y: &i32) -> i32 {\n+    *y\n+}\n+\n+#[warn(clippy::all, clippy::needless_borrow)]\n+#[allow(unused_variables)]\n+fn main() {\n+    let a = 5;\n+    let b = x(&a);\n+    let c = x(&a);\n+    let s = &String::from(\"hi\");\n+    let s_ident = f(&s); // should not error, because `&String` implements Copy, but `String` does not\n+    let g_val = g(&Vec::new()); // should not error, because `&Vec<T>` derefs to `&[T]`\n+    let vec = Vec::new();\n+    let vec_val = g(&vec); // should not error, because `&Vec<T>` derefs to `&[T]`\n+    h(&\"foo\"); // should not error, because the `&&str` is required, due to `&Trait`\n+    if let Some(cake) = Some(&5) {}\n+    let garbl = match 42 {\n+        44 => &a,\n+        45 => {\n+            println!(\"foo\");\n+            &&a // FIXME: this should lint, too\n+        },\n+        46 => &a,\n+        _ => panic!(),\n+    };\n+}\n+\n+fn f<T: Copy>(y: &T) -> T {\n+    *y\n+}\n+\n+fn g(y: &[u8]) -> u8 {\n+    y[0]\n+}\n+\n+trait Trait {}\n+\n+impl<'a> Trait for &'a str {}\n+\n+fn h(_: &dyn Trait) {}\n+#[warn(clippy::needless_borrow)]\n+#[allow(dead_code)]\n+fn issue_1432() {\n+    let mut v = Vec::<String>::new();\n+    let _ = v.iter_mut().filter(|&ref a| a.is_empty());\n+    let _ = v.iter().filter(|&a| a.is_empty());\n+\n+    let _ = v.iter().filter(|&a| a.is_empty());\n+}\n+\n+#[allow(dead_code)]\n+#[warn(clippy::needless_borrow)]\n+#[derive(Debug)]\n+enum Foo<'a> {\n+    Str(&'a str),\n+}"}, {"sha": "8677b957e4c3b335ea7c86df1becaf6ec1d69776", "filename": "tests/ui/needless_borrow.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,4 +1,6 @@\n-use std::borrow::Cow;\n+// run-rustfix\n+\n+#![allow(clippy::needless_borrowed_reference)]\n \n #[allow(clippy::trivially_copy_pass_by_ref)]\n fn x(y: &i32) -> i32 {"}, {"sha": "49df9cd072b3e3c89e058f3557dcca30d5083c92", "filename": "tests/ui/needless_borrow.stderr", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fneedless_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fneedless_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.stderr?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,42 +1,28 @@\n error: this expression borrows a reference that is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:13:15\n+  --> $DIR/needless_borrow.rs:15:15\n    |\n LL |     let c = x(&&a);\n    |               ^^^ help: change this to: `&a`\n    |\n    = note: `-D clippy::needless-borrow` implied by `-D warnings`\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/needless_borrow.rs:20:17\n+  --> $DIR/needless_borrow.rs:22:17\n    |\n LL |     if let Some(ref cake) = Some(&5) {}\n    |                 ^^^^^^^^ help: change this to: `cake`\n \n error: this expression borrows a reference that is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:27:15\n+  --> $DIR/needless_borrow.rs:29:15\n    |\n LL |         46 => &&a,\n    |               ^^^ help: change this to: `&a`\n \n-error: this pattern takes a reference on something that is being de-referenced\n-  --> $DIR/needless_borrow.rs:49:34\n-   |\n-LL |     let _ = v.iter_mut().filter(|&ref a| a.is_empty());\n-   |                                  ^^^^^^ help: try removing the `&ref` part and just keep: `a`\n-   |\n-   = note: `-D clippy::needless-borrowed-reference` implied by `-D warnings`\n-\n-error: this pattern takes a reference on something that is being de-referenced\n-  --> $DIR/needless_borrow.rs:50:30\n-   |\n-LL |     let _ = v.iter().filter(|&ref a| a.is_empty());\n-   |                              ^^^^^^ help: try removing the `&ref` part and just keep: `a`\n-\n error: this pattern creates a reference to a reference\n-  --> $DIR/needless_borrow.rs:50:31\n+  --> $DIR/needless_borrow.rs:52:31\n    |\n LL |     let _ = v.iter().filter(|&ref a| a.is_empty());\n    |                               ^^^^^ help: change this to: `a`\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 4 previous errors\n "}, {"sha": "a0937a2c5f62f5d3ffa28e9c2328d311e10a7833", "filename": "tests/ui/needless_borrowed_ref.fixed", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fneedless_borrowed_ref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fneedless_borrowed_ref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrowed_ref.fixed?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,45 @@\n+// run-rustfix\n+\n+#[warn(clippy::needless_borrowed_reference)]\n+#[allow(unused_variables)]\n+fn main() {\n+    let mut v = Vec::<String>::new();\n+    let _ = v.iter_mut().filter(|a| a.is_empty());\n+    //                            ^ should be linted\n+\n+    let var = 3;\n+    let thingy = Some(&var);\n+    if let Some(&ref v) = thingy {\n+        //          ^ should be linted\n+    }\n+\n+    let mut var2 = 5;\n+    let thingy2 = Some(&mut var2);\n+    if let Some(&mut ref mut v) = thingy2 {\n+        //          ^ should **not** be linted\n+        // v is borrowed as mutable.\n+        *v = 10;\n+    }\n+    if let Some(&mut ref v) = thingy2 {\n+        //          ^ should **not** be linted\n+        // here, v is borrowed as immutable.\n+        // can't do that:\n+        //*v = 15;\n+    }\n+}\n+\n+#[allow(dead_code)]\n+enum Animal {\n+    Cat(u64),\n+    Dog(u64),\n+}\n+\n+#[allow(unused_variables)]\n+#[allow(dead_code)]\n+fn foo(a: &Animal, b: &Animal) {\n+    match (a, b) {\n+        (&Animal::Cat(v), &ref k) | (&ref k, &Animal::Cat(v)) => (), // lifetime mismatch error if there is no '&ref'\n+        //                  ^    and   ^ should **not** be linted\n+        (&Animal::Dog(ref a), &Animal::Dog(_)) => (), //              ^ should **not** be linted\n+    }\n+}"}, {"sha": "500ac448f0d58c4da01ed449101803ba0d702f2f", "filename": "tests/ui/needless_borrowed_ref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrowed_ref.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n #[warn(clippy::needless_borrowed_reference)]\n #[allow(unused_variables)]\n fn main() {"}, {"sha": "0a5cfb3db0b116fad26040dc10b589be15d19b4b", "filename": "tests/ui/needless_borrowed_ref.stderr", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fneedless_borrowed_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fneedless_borrowed_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrowed_ref.stderr?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,28 +1,10 @@\n error: this pattern takes a reference on something that is being de-referenced\n-  --> $DIR/needless_borrowed_ref.rs:5:34\n+  --> $DIR/needless_borrowed_ref.rs:7:34\n    |\n LL |     let _ = v.iter_mut().filter(|&ref a| a.is_empty());\n    |                                  ^^^^^^ help: try removing the `&ref` part and just keep: `a`\n    |\n    = note: `-D clippy::needless-borrowed-reference` implied by `-D warnings`\n \n-error: this pattern takes a reference on something that is being de-referenced\n-  --> $DIR/needless_borrowed_ref.rs:10:17\n-   |\n-LL |     if let Some(&ref v) = thingy {\n-   |                 ^^^^^^ help: try removing the `&ref` part and just keep: `v`\n-\n-error: this pattern takes a reference on something that is being de-referenced\n-  --> $DIR/needless_borrowed_ref.rs:39:27\n-   |\n-LL |         (&Animal::Cat(v), &ref k) | (&ref k, &Animal::Cat(v)) => (), // lifetime mismatch error if there is no '&ref'\n-   |                           ^^^^^^ help: try removing the `&ref` part and just keep: `k`\n-\n-error: this pattern takes a reference on something that is being de-referenced\n-  --> $DIR/needless_borrowed_ref.rs:39:38\n-   |\n-LL |         (&Animal::Cat(v), &ref k) | (&ref k, &Animal::Cat(v)) => (), // lifetime mismatch error if there is no '&ref'\n-   |                                      ^^^^^^ help: try removing the `&ref` part and just keep: `k`\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to previous error\n "}, {"sha": "b4227eaf2f8bbb8846e191bf888e2b99114619d9", "filename": "tests/ui/needless_collect.fixed", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fneedless_collect.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fneedless_collect.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect.fixed?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,21 @@\n+// run-rustfix\n+\n+#![allow(unused, clippy::suspicious_map)]\n+\n+use std::collections::{BTreeSet, HashMap, HashSet};\n+\n+#[warn(clippy::needless_collect)]\n+#[allow(unused_variables, clippy::iter_cloned_collect)]\n+fn main() {\n+    let sample = [1; 5];\n+    let len = sample.iter().count();\n+    if sample.iter().next().is_none() {\n+        // Empty\n+    }\n+    sample.iter().cloned().any(|x| x == 1);\n+    sample.iter().map(|x| (x, x)).count();\n+    // Notice the `HashSet`--this should not be linted\n+    sample.iter().collect::<HashSet<_>>().len();\n+    // Neither should this\n+    sample.iter().collect::<BTreeSet<_>>().len();\n+}"}, {"sha": "7ee603afeb0778e74bc67e24d25919660c89ee87", "filename": "tests/ui/needless_collect.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,3 +1,7 @@\n+// run-rustfix\n+\n+#![allow(unused, clippy::suspicious_map)]\n+\n use std::collections::{BTreeSet, HashMap, HashSet};\n \n #[warn(clippy::needless_collect)]"}, {"sha": "8884c8e161293c11bed7b32cf2a5473fa85cc28a", "filename": "tests/ui/needless_collect.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fneedless_collect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fneedless_collect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect.stderr?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,25 +1,25 @@\n error: avoid using `collect()` when not needed\n-  --> $DIR/needless_collect.rs:7:28\n+  --> $DIR/needless_collect.rs:11:28\n    |\n LL |     let len = sample.iter().collect::<Vec<_>>().len();\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `.count()`\n    |\n    = note: `-D clippy::needless-collect` implied by `-D warnings`\n \n error: avoid using `collect()` when not needed\n-  --> $DIR/needless_collect.rs:8:21\n+  --> $DIR/needless_collect.rs:12:21\n    |\n LL |     if sample.iter().collect::<Vec<_>>().is_empty() {\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `.next().is_none()`\n \n error: avoid using `collect()` when not needed\n-  --> $DIR/needless_collect.rs:11:27\n+  --> $DIR/needless_collect.rs:15:27\n    |\n LL |     sample.iter().cloned().collect::<Vec<_>>().contains(&1);\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `.any(|&x| x == 1)`\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `.any(|x| x == 1)`\n \n error: avoid using `collect()` when not needed\n-  --> $DIR/needless_collect.rs:12:34\n+  --> $DIR/needless_collect.rs:16:34\n    |\n LL |     sample.iter().map(|x| (x, x)).collect::<HashMap<_, _>>().len();\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `.count()`"}, {"sha": "70af5c1961410fedb6e1e2fc4dae7f9e44c0760b", "filename": "tests/ui/needless_return.fixed", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fneedless_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fneedless_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.fixed?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,78 @@\n+// run-rustfix\n+\n+#![allow(unused, clippy::needless_bool, clippy::match_bool)]\n+#![allow(clippy::if_same_then_else, clippy::single_match)]\n+#![warn(clippy::needless_return)]\n+\n+macro_rules! the_answer {\n+    () => {\n+        42\n+    };\n+}\n+\n+fn test_end_of_fn() -> bool {\n+    if true {\n+        // no error!\n+        return true;\n+    }\n+    true\n+}\n+\n+fn test_no_semicolon() -> bool {\n+    true\n+}\n+\n+fn test_if_block() -> bool {\n+    if true {\n+        true\n+    } else {\n+        false\n+    }\n+}\n+\n+fn test_match(x: bool) -> bool {\n+    match x {\n+        true => false,\n+        false => {\n+            true\n+        },\n+    }\n+}\n+\n+fn test_closure() {\n+    let _ = || {\n+        true\n+    };\n+    let _ = || true;\n+}\n+\n+fn test_macro_call() -> i32 {\n+    return the_answer!();\n+}\n+\n+fn test_void_fun() {\n+    \n+}\n+\n+fn test_void_if_fun(b: bool) {\n+    if b {\n+        \n+    } else {\n+        \n+    }\n+}\n+\n+fn test_void_match(x: u32) {\n+    match x {\n+        0 => (),\n+        _ => {},\n+    }\n+}\n+\n+fn main() {\n+    let _ = test_end_of_fn();\n+    let _ = test_no_semicolon();\n+    let _ = test_if_block();\n+    let _ = test_match(true);\n+    test_closure();\n+}"}, {"sha": "a1f8321ac6e7ed0f0280c7c8547a09bae9aa9554", "filename": "tests/ui/needless_return.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,3 +1,7 @@\n+// run-rustfix\n+\n+#![allow(unused, clippy::needless_bool, clippy::match_bool)]\n+#![allow(clippy::if_same_then_else, clippy::single_match)]\n #![warn(clippy::needless_return)]\n \n macro_rules! the_answer {"}, {"sha": "b29c47f7b7a786c2bdfd20d7958843810038861a", "filename": "tests/ui/needless_return.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.stderr?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,73 +1,73 @@\n error: unneeded return statement\n-  --> $DIR/needless_return.rs:14:5\n+  --> $DIR/needless_return.rs:18:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^^ help: remove `return`: `true`\n    |\n    = note: `-D clippy::needless-return` implied by `-D warnings`\n \n error: unneeded return statement\n-  --> $DIR/needless_return.rs:18:5\n+  --> $DIR/needless_return.rs:22:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded return statement\n-  --> $DIR/needless_return.rs:23:9\n+  --> $DIR/needless_return.rs:27:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded return statement\n-  --> $DIR/needless_return.rs:25:9\n+  --> $DIR/needless_return.rs:29:9\n    |\n LL |         return false;\n    |         ^^^^^^^^^^^^^ help: remove `return`: `false`\n \n error: unneeded return statement\n-  --> $DIR/needless_return.rs:31:17\n+  --> $DIR/needless_return.rs:35:17\n    |\n LL |         true => return false,\n    |                 ^^^^^^^^^^^^ help: remove `return`: `false`\n \n error: unneeded return statement\n-  --> $DIR/needless_return.rs:33:13\n+  --> $DIR/needless_return.rs:37:13\n    |\n LL |             return true;\n    |             ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded return statement\n-  --> $DIR/needless_return.rs:40:9\n+  --> $DIR/needless_return.rs:44:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded return statement\n-  --> $DIR/needless_return.rs:42:16\n+  --> $DIR/needless_return.rs:46:16\n    |\n LL |     let _ = || return true;\n    |                ^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded return statement\n-  --> $DIR/needless_return.rs:50:5\n+  --> $DIR/needless_return.rs:54:5\n    |\n LL |     return;\n    |     ^^^^^^^ help: remove `return`\n \n error: unneeded return statement\n-  --> $DIR/needless_return.rs:55:9\n+  --> $DIR/needless_return.rs:59:9\n    |\n LL |         return;\n    |         ^^^^^^^ help: remove `return`\n \n error: unneeded return statement\n-  --> $DIR/needless_return.rs:57:9\n+  --> $DIR/needless_return.rs:61:9\n    |\n LL |         return;\n    |         ^^^^^^^ help: remove `return`\n \n error: unneeded return statement\n-  --> $DIR/needless_return.rs:64:14\n+  --> $DIR/needless_return.rs:68:14\n    |\n LL |         _ => return,\n    |              ^^^^^^ help: replace `return` with an empty block: `{}`"}, {"sha": "0568386f889bb5f874bb334a76fec5c88be797b4", "filename": "tests/ui/non_copy_const.stderr", "status": "modified", "additions": 21, "deletions": 45, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fnon_copy_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fnon_copy_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_copy_const.stderr?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -4,7 +4,7 @@ error: a const item should never be interior mutable\n LL | const ATOMIC: AtomicUsize = AtomicUsize::new(5); //~ ERROR interior mutable\n    | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    | |\n-   | help: make this a static item: `static`\n+   | make this a static item (maybe with lazy_static)\n    |\n    = note: `#[deny(clippy::declare_interior_mutable_const)]` on by default\n \n@@ -14,15 +14,15 @@ error: a const item should never be interior mutable\n LL | const CELL: Cell<usize> = Cell::new(6); //~ ERROR interior mutable\n    | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    | |\n-   | help: make this a static item: `static`\n+   | make this a static item (maybe with lazy_static)\n \n error: a const item should never be interior mutable\n   --> $DIR/non_copy_const.rs:11:1\n    |\n LL | const ATOMIC_TUPLE: ([AtomicUsize; 1], Vec<AtomicUsize>, u8) = ([ATOMIC], Vec::new(), 7);\n    | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    | |\n-   | help: make this a static item: `static`\n+   | make this a static item (maybe with lazy_static)\n \n error: a const item should never be interior mutable\n   --> $DIR/non_copy_const.rs:16:9\n@@ -43,37 +43,25 @@ error: a const item should never be interior mutable\n   --> $DIR/non_copy_const.rs:44:5\n    |\n LL |     const INPUT: T;\n-   |     ^^^^^^^^^^^^^^^\n-   |\n-help: consider requiring `T` to be `Copy`\n-  --> $DIR/non_copy_const.rs:44:18\n-   |\n-LL |     const INPUT: T;\n-   |                  ^\n+   |     ^^^^^^^^^^^^^-^\n+   |                  |\n+   |                  consider requiring `T` to be `Copy`\n \n error: a const item should never be interior mutable\n   --> $DIR/non_copy_const.rs:47:5\n    |\n LL |     const ASSOC: Self::NonCopyType;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: consider requiring `<Self as Trait<T>>::NonCopyType` to be `Copy`\n-  --> $DIR/non_copy_const.rs:47:18\n-   |\n-LL |     const ASSOC: Self::NonCopyType;\n-   |                  ^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^-----------------^\n+   |                  |\n+   |                  consider requiring `<Self as Trait<T>>::NonCopyType` to be `Copy`\n \n error: a const item should never be interior mutable\n   --> $DIR/non_copy_const.rs:51:5\n    |\n LL |     const AN_INPUT: T = Self::INPUT;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: consider requiring `T` to be `Copy`\n-  --> $DIR/non_copy_const.rs:51:21\n-   |\n-LL |     const AN_INPUT: T = Self::INPUT;\n-   |                     ^\n+   |     ^^^^^^^^^^^^^^^^-^^^^^^^^^^^^^^^\n+   |                     |\n+   |                     consider requiring `T` to be `Copy`\n \n error: a const item should never be interior mutable\n   --> $DIR/non_copy_const.rs:16:9\n@@ -88,13 +76,9 @@ error: a const item should never be interior mutable\n   --> $DIR/non_copy_const.rs:60:5\n    |\n LL |     const SELF_2: Self;\n-   |     ^^^^^^^^^^^^^^^^^^^\n-   |\n-help: consider requiring `Self` to be `Copy`\n-  --> $DIR/non_copy_const.rs:60:19\n-   |\n-LL |     const SELF_2: Self;\n-   |                   ^^^^\n+   |     ^^^^^^^^^^^^^^----^\n+   |                   |\n+   |                   consider requiring `Self` to be `Copy`\n \n error: a const item should never be interior mutable\n   --> $DIR/non_copy_const.rs:81:5\n@@ -106,25 +90,17 @@ error: a const item should never be interior mutable\n   --> $DIR/non_copy_const.rs:84:5\n    |\n LL |     const U_SELF: U = U::SELF_2;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: consider requiring `U` to be `Copy`\n-  --> $DIR/non_copy_const.rs:84:19\n-   |\n-LL |     const U_SELF: U = U::SELF_2;\n-   |                   ^\n+   |     ^^^^^^^^^^^^^^-^^^^^^^^^^^^^\n+   |                   |\n+   |                   consider requiring `U` to be `Copy`\n \n error: a const item should never be interior mutable\n   --> $DIR/non_copy_const.rs:87:5\n    |\n LL |     const T_ASSOC: T::NonCopyType = T::ASSOC;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: consider requiring `<T as Trait<u32>>::NonCopyType` to be `Copy`\n-  --> $DIR/non_copy_const.rs:87:20\n-   |\n-LL |     const T_ASSOC: T::NonCopyType = T::ASSOC;\n-   |                    ^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^--------------^^^^^^^^^^^^\n+   |                    |\n+   |                    consider requiring `<T as Trait<u32>>::NonCopyType` to be `Copy`\n \n error: a const item with interior mutability should not be borrowed\n   --> $DIR/non_copy_const.rs:94:5"}, {"sha": "ad153e4fc1948f9a5824ba9e3a8a8cf225d7fc9e", "filename": "tests/ui/option_map_unit_fn_fixable.fixed", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Foption_map_unit_fn_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Foption_map_unit_fn_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.fixed?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,78 @@\n+// run-rustfix\n+\n+#![warn(clippy::option_map_unit_fn)]\n+#![allow(unused)]\n+\n+fn do_nothing<T>(_: T) {}\n+\n+fn diverge<T>(_: T) -> ! {\n+    panic!()\n+}\n+\n+fn plus_one(value: usize) -> usize {\n+    value + 1\n+}\n+\n+struct HasOption {\n+    field: Option<usize>,\n+}\n+\n+impl HasOption {\n+    fn do_option_nothing(self: &Self, value: usize) {}\n+\n+    fn do_option_plus_one(self: &Self, value: usize) -> usize {\n+        value + 1\n+    }\n+}\n+#[rustfmt::skip]\n+fn option_map_unit_fn() {\n+    let x = HasOption { field: Some(10) };\n+\n+    x.field.map(plus_one);\n+    let _ : Option<()> = x.field.map(do_nothing);\n+\n+    if let Some(x_field) = x.field { do_nothing(x_field) }\n+\n+    if let Some(x_field) = x.field { do_nothing(x_field) }\n+\n+    if let Some(x_field) = x.field { diverge(x_field) }\n+\n+    let captured = 10;\n+    if let Some(value) = x.field { do_nothing(value + captured) };\n+    let _ : Option<()> = x.field.map(|value| do_nothing(value + captured));\n+\n+    if let Some(value) = x.field { x.do_option_nothing(value + captured) }\n+\n+    if let Some(value) = x.field { x.do_option_plus_one(value + captured); }\n+\n+\n+    if let Some(value) = x.field { do_nothing(value + captured) }\n+\n+    if let Some(value) = x.field { do_nothing(value + captured) }\n+\n+    if let Some(value) = x.field { do_nothing(value + captured); }\n+\n+    if let Some(value) = x.field { do_nothing(value + captured); }\n+\n+\n+    if let Some(value) = x.field { diverge(value + captured) }\n+\n+    if let Some(value) = x.field { diverge(value + captured) }\n+\n+    if let Some(value) = x.field { diverge(value + captured); }\n+\n+    if let Some(value) = x.field { diverge(value + captured); }\n+\n+\n+    x.field.map(|value| plus_one(value + captured));\n+    x.field.map(|value| { plus_one(value + captured) });\n+    if let Some(value) = x.field { let y = plus_one(value + captured); }\n+\n+    if let Some(value) = x.field { plus_one(value + captured); }\n+\n+    if let Some(value) = x.field { plus_one(value + captured); }\n+\n+\n+    if let Some(ref value) = x.field { do_nothing(value + captured) }}\n+\n+fn main() {}"}, {"sha": "6926498341ac2e0a6cb8fe4969b3a37cee930195", "filename": "tests/ui/option_map_unit_fn_fixable.rs", "status": "renamed", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Foption_map_unit_fn_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Foption_map_unit_fn_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n #![warn(clippy::option_map_unit_fn)]\n #![allow(unused)]\n \n@@ -71,29 +73,6 @@ fn option_map_unit_fn() {\n     x.field.map(|value| { { plus_one(value + captured); } });\n \n \n-    x.field.map(|ref value| { do_nothing(value + captured) });\n-\n-\n-    x.field.map(|value| { do_nothing(value); do_nothing(value) });\n-\n-    x.field.map(|value| if value > 0 { do_nothing(value); do_nothing(value) });\n-\n-    // Suggestion for the let block should be `{ ... }` as it's too difficult to build a\n-    // proper suggestion for these cases\n-    x.field.map(|value| {\n-        do_nothing(value);\n-        do_nothing(value)\n-    });\n-    x.field.map(|value| { do_nothing(value); do_nothing(value); });\n-\n-    // The following should suggest `if let Some(_X) ...` as it's difficult to generate a proper let variable name for them\n-    Some(42).map(diverge);\n-    \"12\".parse::<i32>().ok().map(diverge);\n-    Some(plus_one(1)).map(do_nothing);\n-\n-    // Should suggest `if let Some(_y) ...` to not override the existing foo variable\n-    let y = Some(42);\n-    y.map(do_nothing);\n-}\n+    x.field.map(|ref value| { do_nothing(value + captured) });}\n \n fn main() {}", "previous_filename": "tests/ui/option_map_unit_fn.rs"}, {"sha": "6e87b070909ee754d6bbeb7700eb288f78565324", "filename": "tests/ui/option_map_unit_fn_fixable.stderr", "status": "renamed", "additions": 22, "deletions": 92, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Foption_map_unit_fn_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Foption_map_unit_fn_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.stderr?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,210 +1,140 @@\n error: called `map(f)` on an Option value where `f` is a unit function\n-  --> $DIR/option_map_unit_fn.rs:32:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:34:5\n    |\n LL |     x.field.map(do_nothing);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n-   |     help: try this: `if let Some(x_field) = x.field { do_nothing(...) }`\n+   |     help: try this: `if let Some(x_field) = x.field { do_nothing(x_field) }`\n    |\n    = note: `-D clippy::option-map-unit-fn` implied by `-D warnings`\n \n error: called `map(f)` on an Option value where `f` is a unit function\n-  --> $DIR/option_map_unit_fn.rs:34:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:36:5\n    |\n LL |     x.field.map(do_nothing);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n-   |     help: try this: `if let Some(x_field) = x.field { do_nothing(...) }`\n+   |     help: try this: `if let Some(x_field) = x.field { do_nothing(x_field) }`\n \n error: called `map(f)` on an Option value where `f` is a unit function\n-  --> $DIR/option_map_unit_fn.rs:36:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:38:5\n    |\n LL |     x.field.map(diverge);\n    |     ^^^^^^^^^^^^^^^^^^^^-\n    |     |\n-   |     help: try this: `if let Some(x_field) = x.field { diverge(...) }`\n+   |     help: try this: `if let Some(x_field) = x.field { diverge(x_field) }`\n \n error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn.rs:42:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:44:5\n    |\n LL |     x.field.map(|value| x.do_option_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { x.do_option_nothing(value + captured) }`\n \n error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn.rs:44:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:46:5\n    |\n LL |     x.field.map(|value| { x.do_option_plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { x.do_option_plus_one(value + captured); }`\n \n error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn.rs:47:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:49:5\n    |\n LL |     x.field.map(|value| do_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured) }`\n \n error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn.rs:49:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:51:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured) }`\n \n error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn.rs:51:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:53:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured); }`\n \n error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn.rs:53:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:55:5\n    |\n LL |     x.field.map(|value| { { do_nothing(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured); }`\n \n error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn.rs:56:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:58:5\n    |\n LL |     x.field.map(|value| diverge(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured) }`\n \n error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn.rs:58:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:60:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured) }`\n \n error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn.rs:60:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:62:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured); }`\n \n error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn.rs:62:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:64:5\n    |\n LL |     x.field.map(|value| { { diverge(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured); }`\n \n error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn.rs:67:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:69:5\n    |\n LL |     x.field.map(|value| { let y = plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { let y = plus_one(value + captured); }`\n \n error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn.rs:69:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:71:5\n    |\n LL |     x.field.map(|value| { plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { plus_one(value + captured); }`\n \n error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn.rs:71:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:73:5\n    |\n LL |     x.field.map(|value| { { plus_one(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { plus_one(value + captured); }`\n \n error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn.rs:74:5\n+  --> $DIR/option_map_unit_fn_fixable.rs:76:5\n    |\n-LL |     x.field.map(|ref value| { do_nothing(value + captured) });\n+LL |     x.field.map(|ref value| { do_nothing(value + captured) });}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(ref value) = x.field { do_nothing(value + captured) }`\n \n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn.rs:77:5\n-   |\n-LL |     x.field.map(|value| { do_nothing(value); do_nothing(value) });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { ... }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn.rs:79:5\n-   |\n-LL |     x.field.map(|value| if value > 0 { do_nothing(value); do_nothing(value) });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { ... }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn.rs:83:5\n-   |\n-LL |        x.field.map(|value| {\n-   |   _____^\n-   |  |_____|\n-   | ||\n-LL | ||         do_nothing(value);\n-LL | ||         do_nothing(value)\n-LL | ||     });\n-   | ||______^- help: try this: `if let Some(value) = x.field { ... }`\n-   | |_______|\n-   | \n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/option_map_unit_fn.rs:87:5\n-   |\n-LL |     x.field.map(|value| { do_nothing(value); do_nothing(value); });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { ... }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit function\n-  --> $DIR/option_map_unit_fn.rs:90:5\n-   |\n-LL |     Some(42).map(diverge);\n-   |     ^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(_) = Some(42) { diverge(...) }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit function\n-  --> $DIR/option_map_unit_fn.rs:91:5\n-   |\n-LL |     \"12\".parse::<i32>().ok().map(diverge);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(_) = \"12\".parse::<i32>().ok() { diverge(...) }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit function\n-  --> $DIR/option_map_unit_fn.rs:92:5\n-   |\n-LL |     Some(plus_one(1)).map(do_nothing);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(_) = Some(plus_one(1)) { do_nothing(...) }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit function\n-  --> $DIR/option_map_unit_fn.rs:96:5\n-   |\n-LL |     y.map(do_nothing);\n-   |     ^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(_y) = y { do_nothing(...) }`\n-\n-error: aborting due to 25 previous errors\n+error: aborting due to 17 previous errors\n ", "previous_filename": "tests/ui/option_map_unit_fn.stderr"}, {"sha": "20e6c15b18d5f97717dd8331308be29b6f16b8b9", "filename": "tests/ui/option_map_unit_fn_unfixable.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Foption_map_unit_fn_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Foption_map_unit_fn_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_unfixable.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,39 @@\n+#![warn(clippy::option_map_unit_fn)]\n+#![allow(unused)]\n+\n+fn do_nothing<T>(_: T) {}\n+\n+fn diverge<T>(_: T) -> ! {\n+    panic!()\n+}\n+\n+fn plus_one(value: usize) -> usize {\n+    value + 1\n+}\n+\n+#[rustfmt::skip]\n+fn option_map_unit_fn() {\n+\n+    x.field.map(|value| { do_nothing(value); do_nothing(value) });\n+\n+    x.field.map(|value| if value > 0 { do_nothing(value); do_nothing(value) });\n+\n+    // Suggestion for the let block should be `{ ... }` as it's too difficult to build a\n+    // proper suggestion for these cases\n+    x.field.map(|value| {\n+        do_nothing(value);\n+        do_nothing(value)\n+    });\n+    x.field.map(|value| { do_nothing(value); do_nothing(value); });\n+\n+    // The following should suggest `if let Some(_X) ...` as it's difficult to generate a proper let variable name for them\n+    Some(42).map(diverge);\n+    \"12\".parse::<i32>().ok().map(diverge);\n+    Some(plus_one(1)).map(do_nothing);\n+\n+    // Should suggest `if let Some(_y) ...` to not override the existing foo variable\n+    let y = Some(42);\n+    y.map(do_nothing);\n+}\n+\n+fn main() {}"}, {"sha": "a53f5889c58dac2b355a74739bd4fcc3a85003bc", "filename": "tests/ui/option_map_unit_fn_unfixable.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Foption_map_unit_fn_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Foption_map_unit_fn_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_unfixable.stderr?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,27 @@\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/option_map_unit_fn_unfixable.rs:17:5\n+   |\n+LL |     x.field.map(|value| { do_nothing(value); do_nothing(value) });\n+   |     ^ not found in this scope\n+\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/option_map_unit_fn_unfixable.rs:19:5\n+   |\n+LL |     x.field.map(|value| if value > 0 { do_nothing(value); do_nothing(value) });\n+   |     ^ not found in this scope\n+\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/option_map_unit_fn_unfixable.rs:23:5\n+   |\n+LL |     x.field.map(|value| {\n+   |     ^ not found in this scope\n+\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/option_map_unit_fn_unfixable.rs:27:5\n+   |\n+LL |     x.field.map(|value| { do_nothing(value); do_nothing(value); });\n+   |     ^ not found in this scope\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "bacd67db7c30571e1e12708e7ae4d911df272efe", "filename": "tests/ui/redundant_closure_call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,8 +1,8 @@\n+// non rustfixable, see redundant_closure_call_fixable.rs\n+\n #![warn(clippy::redundant_closure_call)]\n \n fn main() {\n-    let a = (|| 42)();\n-\n     let mut i = 1;\n     let mut k = (|m| m + 1)(i);\n "}, {"sha": "68c1416bb6b1a33ff731f9fa9895116248011966", "filename": "tests/ui/redundant_closure_call.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fredundant_closure_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fredundant_closure_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call.stderr?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -12,12 +12,6 @@ error: Closure called just once immediately after it was declared\n LL |     i = closure(3);\n    |     ^^^^^^^^^^^^^^\n \n-error: Try not to call a closure in the expression where it is declared.\n-  --> $DIR/redundant_closure_call.rs:4:13\n-   |\n-LL |     let a = (|| 42)();\n-   |             ^^^^^^^^^ help: Try doing something like: : `42`\n-\n error: Try not to call a closure in the expression where it is declared.\n   --> $DIR/redundant_closure_call.rs:7:17\n    |\n@@ -30,5 +24,5 @@ error: Try not to call a closure in the expression where it is declared.\n LL |     k = (|a, b| a * b)(1, 5);\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n "}, {"sha": "0abca6fca0613b4469c74af12206f25c7a0a1b41", "filename": "tests/ui/redundant_closure_call_fixable.fixed", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fredundant_closure_call_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fredundant_closure_call_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call_fixable.fixed?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+\n+#![warn(clippy::redundant_closure_call)]\n+#![allow(unused)]\n+\n+fn main() {\n+    let a = 42;\n+}"}, {"sha": "f8b9d37a5cc4e757efe2960f1a1a804a62e839cd", "filename": "tests/ui/redundant_closure_call_fixable.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fredundant_closure_call_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fredundant_closure_call_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call_fixable.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+\n+#![warn(clippy::redundant_closure_call)]\n+#![allow(unused)]\n+\n+fn main() {\n+    let a = (|| 42)();\n+}"}, {"sha": "e7737f9dd856fe6719da3275e182d4df6f865e8c", "filename": "tests/ui/redundant_closure_call_fixable.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fredundant_closure_call_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fredundant_closure_call_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call_fixable.stderr?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,10 @@\n+error: Try not to call a closure in the expression where it is declared.\n+  --> $DIR/redundant_closure_call_fixable.rs:7:13\n+   |\n+LL |     let a = (|| 42)();\n+   |             ^^^^^^^^^ help: Try doing something like: : `42`\n+   |\n+   = note: `-D clippy::redundant-closure-call` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "776c9444566bde988039bab8916f3ec34cbbc593", "filename": "tests/ui/redundant_pattern_matching.fixed", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fredundant_pattern_matching.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fredundant_pattern_matching.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.fixed?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,60 @@\n+// run-rustfix\n+\n+#![warn(clippy::all)]\n+#![warn(clippy::redundant_pattern_matching)]\n+#![allow(clippy::unit_arg, clippy::let_unit_value, unused_must_use)]\n+\n+fn main() {\n+    Ok::<i32, i32>(42).is_ok();\n+\n+    Err::<i32, i32>(42).is_err();\n+\n+    None::<()>.is_none();\n+\n+    Some(42).is_some();\n+\n+    if Ok::<i32, i32>(42).is_ok() {}\n+\n+    if Err::<i32, i32>(42).is_err() {}\n+\n+    if None::<i32>.is_none() {}\n+\n+    if Some(42).is_some() {}\n+\n+    if let Ok(x) = Ok::<i32, i32>(42) {\n+        println!(\"{}\", x);\n+    }\n+\n+    Ok::<i32, i32>(42).is_ok();\n+\n+    Ok::<i32, i32>(42).is_err();\n+\n+    Err::<i32, i32>(42).is_err();\n+\n+    Err::<i32, i32>(42).is_ok();\n+\n+    Some(42).is_some();\n+\n+    None::<()>.is_none();\n+\n+    let _ = None::<()>.is_none();\n+\n+    let _ = Ok::<usize, ()>(4).is_ok();\n+\n+    let _ = does_something();\n+    let _ = returns_unit();\n+\n+    let opt = Some(false);\n+    let x = opt.is_some();\n+    takes_bool(x);\n+}\n+\n+fn takes_bool(_: bool) {}\n+\n+fn does_something() -> bool {\n+    Ok::<i32, i32>(4).is_ok()\n+}\n+\n+fn returns_unit() {\n+    Ok::<i32, i32>(4).is_ok();\n+}"}, {"sha": "2b2d5b1c1ec67b38d56e4b1068ab8ecf62721811", "filename": "tests/ui/redundant_pattern_matching.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,6 +1,8 @@\n+// run-rustfix\n+\n #![warn(clippy::all)]\n #![warn(clippy::redundant_pattern_matching)]\n-#![allow(clippy::unit_arg, clippy::let_unit_value)]\n+#![allow(clippy::unit_arg, clippy::let_unit_value, unused_must_use)]\n \n fn main() {\n     if let Ok(_) = Ok::<i32, i32>(42) {}\n@@ -66,12 +68,9 @@ fn main() {\n     let opt = Some(false);\n     let x = if let Some(_) = opt { true } else { false };\n     takes_bool(x);\n-    let y = if let Some(_) = opt {};\n-    takes_unit(y);\n }\n \n-fn takes_bool(x: bool) {}\n-fn takes_unit(x: ()) {}\n+fn takes_bool(_: bool) {}\n \n fn does_something() -> bool {\n     if let Ok(_) = Ok::<i32, i32>(4) {"}, {"sha": "5a4a69b122003e3b52d10eab9ffb1a0fd1a0cb63", "filename": "tests/ui/redundant_pattern_matching.stderr", "status": "modified", "additions": 20, "deletions": 26, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fredundant_pattern_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fredundant_pattern_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.stderr?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,31 +1,31 @@\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:6:12\n+  --> $DIR/redundant_pattern_matching.rs:8:12\n    |\n LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n-   |     -------^^^^^------------------------ help: try this: `Ok::<i32, i32>(42).is_ok()`\n+   |     -------^^^^^------------------------ help: try this: `Ok::<i32, i32>(42).is_ok();`\n    |\n    = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:8:12\n+  --> $DIR/redundant_pattern_matching.rs:10:12\n    |\n LL |     if let Err(_) = Err::<i32, i32>(42) {}\n-   |     -------^^^^^^------------------------- help: try this: `Err::<i32, i32>(42).is_err()`\n+   |     -------^^^^^^------------------------- help: try this: `Err::<i32, i32>(42).is_err();`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:10:12\n+  --> $DIR/redundant_pattern_matching.rs:12:12\n    |\n LL |     if let None = None::<()> {}\n-   |     -------^^^^---------------- help: try this: `None::<()>.is_none()`\n+   |     -------^^^^---------------- help: try this: `None::<()>.is_none();`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:12:12\n+  --> $DIR/redundant_pattern_matching.rs:14:12\n    |\n LL |     if let Some(_) = Some(42) {}\n-   |     -------^^^^^^^-------------- help: try this: `Some(42).is_some()`\n+   |     -------^^^^^^^-------------- help: try this: `Some(42).is_some();`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:26:5\n+  --> $DIR/redundant_pattern_matching.rs:28:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -34,7 +34,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:31:5\n+  --> $DIR/redundant_pattern_matching.rs:33:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -43,7 +43,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:36:5\n+  --> $DIR/redundant_pattern_matching.rs:38:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -52,7 +52,7 @@ LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:41:5\n+  --> $DIR/redundant_pattern_matching.rs:43:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -61,7 +61,7 @@ LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:46:5\n+  --> $DIR/redundant_pattern_matching.rs:48:5\n    |\n LL | /     match Some(42) {\n LL | |         Some(_) => true,\n@@ -70,7 +70,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:51:5\n+  --> $DIR/redundant_pattern_matching.rs:53:5\n    |\n LL | /     match None::<()> {\n LL | |         Some(_) => false,\n@@ -79,7 +79,7 @@ LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:56:13\n+  --> $DIR/redundant_pattern_matching.rs:58:13\n    |\n LL |       let _ = match None::<()> {\n    |  _____________^\n@@ -89,25 +89,19 @@ LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:61:20\n+  --> $DIR/redundant_pattern_matching.rs:63:20\n    |\n LL |     let _ = if let Ok(_) = Ok::<usize, ()>(4) { true } else { false };\n    |             -------^^^^^--------------------------------------------- help: try this: `Ok::<usize, ()>(4).is_ok()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:67:20\n+  --> $DIR/redundant_pattern_matching.rs:69:20\n    |\n LL |     let x = if let Some(_) = opt { true } else { false };\n    |             -------^^^^^^^------------------------------ help: try this: `opt.is_some()`\n \n-error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:69:20\n-   |\n-LL |     let y = if let Some(_) = opt {};\n-   |             -------^^^^^^^--------- help: try this: `opt.is_some()`\n-\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:77:12\n+  --> $DIR/redundant_pattern_matching.rs:76:12\n    |\n LL |       if let Ok(_) = Ok::<i32, i32>(4) {\n    |  _____-      ^^^^^\n@@ -118,7 +112,7 @@ LL | |     }\n    | |_____- help: try this: `Ok::<i32, i32>(4).is_ok()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:85:12\n+  --> $DIR/redundant_pattern_matching.rs:84:12\n    |\n LL |       if let Ok(_) = Ok::<i32, i32>(4) {\n    |  _____-      ^^^^^\n@@ -128,5 +122,5 @@ LL | |         false\n LL | |     };\n    | |_____- help: try this: `Ok::<i32, i32>(4).is_ok()`\n \n-error: aborting due to 16 previous errors\n+error: aborting due to 15 previous errors\n "}, {"sha": "921249606ad2716da28f748c27da23342d52123d", "filename": "tests/ui/redundant_static_lifetimes.fixed", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fredundant_static_lifetimes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fredundant_static_lifetimes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_static_lifetimes.fixed?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,56 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+\n+#[derive(Debug)]\n+struct Foo {}\n+\n+const VAR_ONE: &str = \"Test constant #1\"; // ERROR Consider removing 'static.\n+\n+const VAR_TWO: &str = \"Test constant #2\"; // This line should not raise a warning.\n+\n+const VAR_THREE: &[&str] = &[\"one\", \"two\"]; // ERROR Consider removing 'static\n+\n+const VAR_FOUR: (&str, (&str, &str), &str) = (\"on\", (\"th\", \"th\"), \"on\"); // ERROR Consider removing 'static\n+\n+const VAR_SIX: &u8 = &5;\n+\n+const VAR_HEIGHT: &Foo = &Foo {};\n+\n+const VAR_SLICE: &[u8] = b\"Test constant #1\"; // ERROR Consider removing 'static.\n+\n+const VAR_TUPLE: &(u8, u8) = &(1, 2); // ERROR Consider removing 'static.\n+\n+const VAR_ARRAY: &[u8; 1] = b\"T\"; // ERROR Consider removing 'static.\n+\n+static STATIC_VAR_ONE: &str = \"Test static #1\"; // ERROR Consider removing 'static.\n+\n+static STATIC_VAR_TWO: &str = \"Test static #2\"; // This line should not raise a warning.\n+\n+static STATIC_VAR_THREE: &[&str] = &[\"one\", \"two\"]; // ERROR Consider removing 'static\n+\n+static STATIC_VAR_SIX: &u8 = &5;\n+\n+static STATIC_VAR_HEIGHT: &Foo = &Foo {};\n+\n+static STATIC_VAR_SLICE: &[u8] = b\"Test static #3\"; // ERROR Consider removing 'static.\n+\n+static STATIC_VAR_TUPLE: &(u8, u8) = &(1, 2); // ERROR Consider removing 'static.\n+\n+static STATIC_VAR_ARRAY: &[u8; 1] = b\"T\"; // ERROR Consider removing 'static.\n+\n+fn main() {\n+    let false_positive: &'static str = \"test\";\n+}\n+\n+trait Bar {\n+    const TRAIT_VAR: &'static str;\n+}\n+\n+impl Foo {\n+    const IMPL_VAR: &'static str = \"var\";\n+}\n+\n+impl Bar for Foo {\n+    const TRAIT_VAR: &'static str = \"foo\";\n+}"}, {"sha": "4d4b249d076ffca81ecd13eca4022b2e960c5c38", "filename": "tests/ui/redundant_static_lifetimes.rs", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_static_lifetimes.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,3 +1,7 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+\n #[derive(Debug)]\n struct Foo {}\n \n@@ -9,12 +13,8 @@ const VAR_THREE: &[&'static str] = &[\"one\", \"two\"]; // ERROR Consider removing '\n \n const VAR_FOUR: (&str, (&str, &'static str), &'static str) = (\"on\", (\"th\", \"th\"), \"on\"); // ERROR Consider removing 'static\n \n-const VAR_FIVE: &'static [&[&'static str]] = &[&[\"test\"], &[\"other one\"]]; // ERROR Consider removing 'static\n-\n const VAR_SIX: &'static u8 = &5;\n \n-const VAR_SEVEN: &[&(&str, &'static [&'static str])] = &[&(\"one\", &[\"other one\"])];\n-\n const VAR_HEIGHT: &'static Foo = &Foo {};\n \n const VAR_SLICE: &'static [u8] = b\"Test constant #1\"; // ERROR Consider removing 'static.\n@@ -29,14 +29,8 @@ static STATIC_VAR_TWO: &str = \"Test static #2\"; // This line should not raise a\n \n static STATIC_VAR_THREE: &[&'static str] = &[\"one\", \"two\"]; // ERROR Consider removing 'static\n \n-static STATIC_VAR_FOUR: (&str, (&str, &'static str), &'static str) = (\"on\", (\"th\", \"th\"), \"on\"); // ERROR Consider removing 'static\n-\n-static STATIC_VAR_FIVE: &'static [&[&'static str]] = &[&[\"test\"], &[\"other one\"]]; // ERROR Consider removing 'static\n-\n static STATIC_VAR_SIX: &'static u8 = &5;\n \n-static STATIC_VAR_SEVEN: &[&(&str, &'static [&'static str])] = &[&(\"one\", &[\"other one\"])];\n-\n static STATIC_VAR_HEIGHT: &'static Foo = &Foo {};\n \n static STATIC_VAR_SLICE: &'static [u8] = b\"Test static #3\"; // ERROR Consider removing 'static.\n@@ -47,15 +41,6 @@ static STATIC_VAR_ARRAY: &'static [u8; 1] = b\"T\"; // ERROR Consider removing 'st\n \n fn main() {\n     let false_positive: &'static str = \"test\";\n-    println!(\"{}\", VAR_ONE);\n-    println!(\"{}\", VAR_TWO);\n-    println!(\"{:?}\", VAR_THREE);\n-    println!(\"{:?}\", VAR_FOUR);\n-    println!(\"{:?}\", VAR_FIVE);\n-    println!(\"{:?}\", VAR_SIX);\n-    println!(\"{:?}\", VAR_SEVEN);\n-    println!(\"{:?}\", VAR_HEIGHT);\n-    println!(\"{}\", false_positive);\n }\n \n trait Bar {"}, {"sha": "3c3d2eacd8d9c51c64a1deaf1e4decb4b18dcc0e", "filename": "tests/ui/redundant_static_lifetimes.stderr", "status": "modified", "additions": 11, "deletions": 71, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fredundant_static_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fredundant_static_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_static_lifetimes.stderr?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,59 +1,35 @@\n error: Constants have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:4:17\n+  --> $DIR/redundant_static_lifetimes.rs:8:17\n    |\n LL | const VAR_ONE: &'static str = \"Test constant #1\"; // ERROR Consider removing 'static.\n    |                -^^^^^^^---- help: consider removing `'static`: `&str`\n    |\n    = note: `-D clippy::redundant-static-lifetimes` implied by `-D warnings`\n \n error: Constants have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:8:21\n+  --> $DIR/redundant_static_lifetimes.rs:12:21\n    |\n LL | const VAR_THREE: &[&'static str] = &[\"one\", \"two\"]; // ERROR Consider removing 'static\n    |                    -^^^^^^^---- help: consider removing `'static`: `&str`\n \n error: Constants have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:10:32\n+  --> $DIR/redundant_static_lifetimes.rs:14:32\n    |\n LL | const VAR_FOUR: (&str, (&str, &'static str), &'static str) = (\"on\", (\"th\", \"th\"), \"on\"); // ERROR Consider removing 'static\n    |                               -^^^^^^^---- help: consider removing `'static`: `&str`\n \n error: Constants have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:10:47\n+  --> $DIR/redundant_static_lifetimes.rs:14:47\n    |\n LL | const VAR_FOUR: (&str, (&str, &'static str), &'static str) = (\"on\", (\"th\", \"th\"), \"on\"); // ERROR Consider removing 'static\n    |                                              -^^^^^^^---- help: consider removing `'static`: `&str`\n \n error: Constants have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:12:18\n-   |\n-LL | const VAR_FIVE: &'static [&[&'static str]] = &[&[\"test\"], &[\"other one\"]]; // ERROR Consider removing 'static\n-   |                 -^^^^^^^------------------ help: consider removing `'static`: `&[&[&'static str]]`\n-\n-error: Constants have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:12:30\n-   |\n-LL | const VAR_FIVE: &'static [&[&'static str]] = &[&[\"test\"], &[\"other one\"]]; // ERROR Consider removing 'static\n-   |                             -^^^^^^^---- help: consider removing `'static`: `&str`\n-\n-error: Constants have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:14:17\n+  --> $DIR/redundant_static_lifetimes.rs:16:17\n    |\n LL | const VAR_SIX: &'static u8 = &5;\n    |                -^^^^^^^--- help: consider removing `'static`: `&u8`\n \n-error: Constants have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:16:29\n-   |\n-LL | const VAR_SEVEN: &[&(&str, &'static [&'static str])] = &[&(\"one\", &[\"other one\"])];\n-   |                            -^^^^^^^--------------- help: consider removing `'static`: `&[&'static str]`\n-\n-error: Constants have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:16:39\n-   |\n-LL | const VAR_SEVEN: &[&(&str, &'static [&'static str])] = &[&(\"one\", &[\"other one\"])];\n-   |                                      -^^^^^^^---- help: consider removing `'static`: `&str`\n-\n error: Constants have by default a `'static` lifetime\n   --> $DIR/redundant_static_lifetimes.rs:18:20\n    |\n@@ -91,70 +67,34 @@ LL | static STATIC_VAR_THREE: &[&'static str] = &[\"one\", \"two\"]; // ERROR Consid\n    |                            -^^^^^^^---- help: consider removing `'static`: `&str`\n \n error: Statics have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:32:40\n-   |\n-LL | static STATIC_VAR_FOUR: (&str, (&str, &'static str), &'static str) = (\"on\", (\"th\", \"th\"), \"on\"); // ERROR Consider removing 'static\n-   |                                       -^^^^^^^---- help: consider removing `'static`: `&str`\n-\n-error: Statics have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:32:55\n-   |\n-LL | static STATIC_VAR_FOUR: (&str, (&str, &'static str), &'static str) = (\"on\", (\"th\", \"th\"), \"on\"); // ERROR Consider removing 'static\n-   |                                                      -^^^^^^^---- help: consider removing `'static`: `&str`\n-\n-error: Statics have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:34:26\n-   |\n-LL | static STATIC_VAR_FIVE: &'static [&[&'static str]] = &[&[\"test\"], &[\"other one\"]]; // ERROR Consider removing 'static\n-   |                         -^^^^^^^------------------ help: consider removing `'static`: `&[&[&'static str]]`\n-\n-error: Statics have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:34:38\n-   |\n-LL | static STATIC_VAR_FIVE: &'static [&[&'static str]] = &[&[\"test\"], &[\"other one\"]]; // ERROR Consider removing 'static\n-   |                                     -^^^^^^^---- help: consider removing `'static`: `&str`\n-\n-error: Statics have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:36:25\n+  --> $DIR/redundant_static_lifetimes.rs:32:25\n    |\n LL | static STATIC_VAR_SIX: &'static u8 = &5;\n    |                        -^^^^^^^--- help: consider removing `'static`: `&u8`\n \n error: Statics have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:38:37\n-   |\n-LL | static STATIC_VAR_SEVEN: &[&(&str, &'static [&'static str])] = &[&(\"one\", &[\"other one\"])];\n-   |                                    -^^^^^^^--------------- help: consider removing `'static`: `&[&'static str]`\n-\n-error: Statics have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:38:47\n-   |\n-LL | static STATIC_VAR_SEVEN: &[&(&str, &'static [&'static str])] = &[&(\"one\", &[\"other one\"])];\n-   |                                              -^^^^^^^---- help: consider removing `'static`: `&str`\n-\n-error: Statics have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:40:28\n+  --> $DIR/redundant_static_lifetimes.rs:34:28\n    |\n LL | static STATIC_VAR_HEIGHT: &'static Foo = &Foo {};\n    |                           -^^^^^^^---- help: consider removing `'static`: `&Foo`\n \n error: Statics have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:42:27\n+  --> $DIR/redundant_static_lifetimes.rs:36:27\n    |\n LL | static STATIC_VAR_SLICE: &'static [u8] = b\"Test static #3\"; // ERROR Consider removing 'static.\n    |                          -^^^^^^^----- help: consider removing `'static`: `&[u8]`\n \n error: Statics have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:44:27\n+  --> $DIR/redundant_static_lifetimes.rs:38:27\n    |\n LL | static STATIC_VAR_TUPLE: &'static (u8, u8) = &(1, 2); // ERROR Consider removing 'static.\n    |                          -^^^^^^^--------- help: consider removing `'static`: `&(u8, u8)`\n \n error: Statics have by default a `'static` lifetime\n-  --> $DIR/redundant_static_lifetimes.rs:46:27\n+  --> $DIR/redundant_static_lifetimes.rs:40:27\n    |\n LL | static STATIC_VAR_ARRAY: &'static [u8; 1] = b\"T\"; // ERROR Consider removing 'static.\n    |                          -^^^^^^^-------- help: consider removing `'static`: `&[u8; 1]`\n \n-error: aborting due to 26 previous errors\n+error: aborting due to 16 previous errors\n "}, {"sha": "f57dd58e230a31b05c40919f426c7362d0c513b1", "filename": "tests/ui/redundant_static_lifetimes_multiple.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fredundant_static_lifetimes_multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fredundant_static_lifetimes_multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_static_lifetimes_multiple.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,13 @@\n+// these are rustfixable, but run-rustfix tests cannot handle them\n+\n+const VAR_FIVE: &'static [&[&'static str]] = &[&[\"test\"], &[\"other one\"]]; // ERROR Consider removing 'static\n+\n+const VAR_SEVEN: &[&(&str, &'static [&'static str])] = &[&(\"one\", &[\"other one\"])];\n+\n+static STATIC_VAR_FOUR: (&str, (&str, &'static str), &'static str) = (\"on\", (\"th\", \"th\"), \"on\"); // ERROR Consider removing 'static\n+\n+static STATIC_VAR_FIVE: &'static [&[&'static str]] = &[&[\"test\"], &[\"other one\"]]; // ERROR Consider removing 'static\n+\n+static STATIC_VAR_SEVEN: &[&(&str, &'static [&'static str])] = &[&(\"one\", &[\"other one\"])];\n+\n+fn main() {}"}, {"sha": "afc853dcfce8357fd01e4c66f85422c5f473f5a9", "filename": "tests/ui/redundant_static_lifetimes_multiple.stderr", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fredundant_static_lifetimes_multiple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fredundant_static_lifetimes_multiple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_static_lifetimes_multiple.stderr?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,64 @@\n+error: Constants have by default a `'static` lifetime\n+  --> $DIR/redundant_static_lifetimes_multiple.rs:3:18\n+   |\n+LL | const VAR_FIVE: &'static [&[&'static str]] = &[&[\"test\"], &[\"other one\"]]; // ERROR Consider removing 'static\n+   |                 -^^^^^^^------------------ help: consider removing `'static`: `&[&[&'static str]]`\n+   |\n+   = note: `-D clippy::redundant-static-lifetimes` implied by `-D warnings`\n+\n+error: Constants have by default a `'static` lifetime\n+  --> $DIR/redundant_static_lifetimes_multiple.rs:3:30\n+   |\n+LL | const VAR_FIVE: &'static [&[&'static str]] = &[&[\"test\"], &[\"other one\"]]; // ERROR Consider removing 'static\n+   |                             -^^^^^^^---- help: consider removing `'static`: `&str`\n+\n+error: Constants have by default a `'static` lifetime\n+  --> $DIR/redundant_static_lifetimes_multiple.rs:5:29\n+   |\n+LL | const VAR_SEVEN: &[&(&str, &'static [&'static str])] = &[&(\"one\", &[\"other one\"])];\n+   |                            -^^^^^^^--------------- help: consider removing `'static`: `&[&'static str]`\n+\n+error: Constants have by default a `'static` lifetime\n+  --> $DIR/redundant_static_lifetimes_multiple.rs:5:39\n+   |\n+LL | const VAR_SEVEN: &[&(&str, &'static [&'static str])] = &[&(\"one\", &[\"other one\"])];\n+   |                                      -^^^^^^^---- help: consider removing `'static`: `&str`\n+\n+error: Statics have by default a `'static` lifetime\n+  --> $DIR/redundant_static_lifetimes_multiple.rs:7:40\n+   |\n+LL | static STATIC_VAR_FOUR: (&str, (&str, &'static str), &'static str) = (\"on\", (\"th\", \"th\"), \"on\"); // ERROR Consider removing 'static\n+   |                                       -^^^^^^^---- help: consider removing `'static`: `&str`\n+\n+error: Statics have by default a `'static` lifetime\n+  --> $DIR/redundant_static_lifetimes_multiple.rs:7:55\n+   |\n+LL | static STATIC_VAR_FOUR: (&str, (&str, &'static str), &'static str) = (\"on\", (\"th\", \"th\"), \"on\"); // ERROR Consider removing 'static\n+   |                                                      -^^^^^^^---- help: consider removing `'static`: `&str`\n+\n+error: Statics have by default a `'static` lifetime\n+  --> $DIR/redundant_static_lifetimes_multiple.rs:9:26\n+   |\n+LL | static STATIC_VAR_FIVE: &'static [&[&'static str]] = &[&[\"test\"], &[\"other one\"]]; // ERROR Consider removing 'static\n+   |                         -^^^^^^^------------------ help: consider removing `'static`: `&[&[&'static str]]`\n+\n+error: Statics have by default a `'static` lifetime\n+  --> $DIR/redundant_static_lifetimes_multiple.rs:9:38\n+   |\n+LL | static STATIC_VAR_FIVE: &'static [&[&'static str]] = &[&[\"test\"], &[\"other one\"]]; // ERROR Consider removing 'static\n+   |                                     -^^^^^^^---- help: consider removing `'static`: `&str`\n+\n+error: Statics have by default a `'static` lifetime\n+  --> $DIR/redundant_static_lifetimes_multiple.rs:11:37\n+   |\n+LL | static STATIC_VAR_SEVEN: &[&(&str, &'static [&'static str])] = &[&(\"one\", &[\"other one\"])];\n+   |                                    -^^^^^^^--------------- help: consider removing `'static`: `&[&'static str]`\n+\n+error: Statics have by default a `'static` lifetime\n+  --> $DIR/redundant_static_lifetimes_multiple.rs:11:47\n+   |\n+LL | static STATIC_VAR_SEVEN: &[&(&str, &'static [&'static str])] = &[&(\"one\", &[\"other one\"])];\n+   |                                              -^^^^^^^---- help: consider removing `'static`: `&str`\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "cb91b841d2cb2625de974adfd72f3049c2b4dd3f", "filename": "tests/ui/renamed_builtin_attr.fixed", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Frenamed_builtin_attr.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Frenamed_builtin_attr.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frenamed_builtin_attr.fixed?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,4 @@\n+// run-rustfix\n+\n+#[clippy::cognitive_complexity = \"1\"]\n+fn main() {}"}, {"sha": "b3ce2758067cfa5a97e6516c142dbfe71cd9cb7a", "filename": "tests/ui/renamed_builtin_attr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Frenamed_builtin_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Frenamed_builtin_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frenamed_builtin_attr.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,2 +1,4 @@\n+// run-rustfix\n+\n #[clippy::cyclomatic_complexity = \"1\"]\n fn main() {}"}, {"sha": "a399ff52fb8b607dc9500afeb05cf0c7dd1f8be7", "filename": "tests/ui/renamed_builtin_attr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Frenamed_builtin_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Frenamed_builtin_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frenamed_builtin_attr.stderr?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,5 +1,5 @@\n error: Usage of deprecated attribute\n-  --> $DIR/renamed_builtin_attr.rs:1:11\n+  --> $DIR/renamed_builtin_attr.rs:3:11\n    |\n LL | #[clippy::cyclomatic_complexity = \"1\"]\n    |           ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `cognitive_complexity`"}, {"sha": "64d39516be71329c4aec67a2dc9db9a6c7c5313d", "filename": "tests/ui/result_map_unit_fn_fixable.fixed", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fresult_map_unit_fn_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fresult_map_unit_fn_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_fixable.fixed?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,81 @@\n+// run-rustfix\n+\n+#![feature(never_type)]\n+#![warn(clippy::result_map_unit_fn)]\n+#![allow(unused)]\n+\n+fn do_nothing<T>(_: T) {}\n+\n+fn diverge<T>(_: T) -> ! {\n+    panic!()\n+}\n+\n+fn plus_one(value: usize) -> usize {\n+    value + 1\n+}\n+\n+struct HasResult {\n+    field: Result<usize, usize>,\n+}\n+\n+impl HasResult {\n+    fn do_result_nothing(self: &Self, value: usize) {}\n+\n+    fn do_result_plus_one(self: &Self, value: usize) -> usize {\n+        value + 1\n+    }\n+}\n+\n+#[rustfmt::skip]\n+fn result_map_unit_fn() {\n+    let x = HasResult { field: Ok(10) };\n+\n+    x.field.map(plus_one);\n+    let _: Result<(), usize> = x.field.map(do_nothing);\n+\n+    if let Ok(x_field) = x.field { do_nothing(x_field) }\n+\n+    if let Ok(x_field) = x.field { do_nothing(x_field) }\n+\n+    if let Ok(x_field) = x.field { diverge(x_field) }\n+\n+    let captured = 10;\n+    if let Ok(value) = x.field { do_nothing(value + captured) };\n+    let _: Result<(), usize> = x.field.map(|value| do_nothing(value + captured));\n+\n+    if let Ok(value) = x.field { x.do_result_nothing(value + captured) }\n+\n+    if let Ok(value) = x.field { x.do_result_plus_one(value + captured); }\n+\n+\n+    if let Ok(value) = x.field { do_nothing(value + captured) }\n+\n+    if let Ok(value) = x.field { do_nothing(value + captured) }\n+\n+    if let Ok(value) = x.field { do_nothing(value + captured); }\n+\n+    if let Ok(value) = x.field { do_nothing(value + captured); }\n+\n+\n+    if let Ok(value) = x.field { diverge(value + captured) }\n+\n+    if let Ok(value) = x.field { diverge(value + captured) }\n+\n+    if let Ok(value) = x.field { diverge(value + captured); }\n+\n+    if let Ok(value) = x.field { diverge(value + captured); }\n+\n+\n+    x.field.map(|value| plus_one(value + captured));\n+    x.field.map(|value| { plus_one(value + captured) });\n+    if let Ok(value) = x.field { let y = plus_one(value + captured); }\n+\n+    if let Ok(value) = x.field { plus_one(value + captured); }\n+\n+    if let Ok(value) = x.field { plus_one(value + captured); }\n+\n+\n+    if let Ok(ref value) = x.field { do_nothing(value + captured) }\n+}\n+\n+fn main() {}"}, {"sha": "bf4aba8a7cc134b04c882521a86d3b38e0f60750", "filename": "tests/ui/result_map_unit_fn_fixable.rs", "status": "renamed", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fresult_map_unit_fn_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fresult_map_unit_fn_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_fixable.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n #![feature(never_type)]\n #![warn(clippy::result_map_unit_fn)]\n #![allow(unused)]\n@@ -74,29 +76,6 @@ fn result_map_unit_fn() {\n \n \n     x.field.map(|ref value| { do_nothing(value + captured) });\n-\n-\n-    x.field.map(|value| { do_nothing(value); do_nothing(value) });\n-\n-    x.field.map(|value| if value > 0 { do_nothing(value); do_nothing(value) });\n-\n-    // Suggestion for the let block should be `{ ... }` as it's too difficult to build a\n-    // proper suggestion for these cases\n-    x.field.map(|value| {\n-        do_nothing(value);\n-        do_nothing(value)\n-    });\n-    x.field.map(|value| { do_nothing(value); do_nothing(value); });\n-\n-    // The following should suggest `if let Ok(_X) ...` as it's difficult to generate a proper let variable name for them\n-    let res: Result<!, usize> = Ok(42).map(diverge);\n-    \"12\".parse::<i32>().map(diverge);\n-\n-    let res: Result<(), usize> = Ok(plus_one(1)).map(do_nothing);\n-\n-    // Should suggest `if let Ok(_y) ...` to not override the existing foo variable\n-    let y: Result<usize, usize> = Ok(42);\n-    y.map(do_nothing);\n }\n \n fn main() {}", "previous_filename": "tests/ui/result_map_unit_fn.rs"}, {"sha": "db72c64d52e23f2b2e75c972b9eecbdd25645221", "filename": "tests/ui/result_map_unit_fn_fixable.stderr", "status": "renamed", "additions": 21, "deletions": 75, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fresult_map_unit_fn_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fresult_map_unit_fn_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_fixable.stderr?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,194 +1,140 @@\n error: called `map(f)` on an Result value where `f` is a unit function\n-  --> $DIR/result_map_unit_fn.rs:34:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:36:5\n    |\n LL |     x.field.map(do_nothing);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n-   |     help: try this: `if let Ok(x_field) = x.field { do_nothing(...) }`\n+   |     help: try this: `if let Ok(x_field) = x.field { do_nothing(x_field) }`\n    |\n    = note: `-D clippy::result-map-unit-fn` implied by `-D warnings`\n \n error: called `map(f)` on an Result value where `f` is a unit function\n-  --> $DIR/result_map_unit_fn.rs:36:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:38:5\n    |\n LL |     x.field.map(do_nothing);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n-   |     help: try this: `if let Ok(x_field) = x.field { do_nothing(...) }`\n+   |     help: try this: `if let Ok(x_field) = x.field { do_nothing(x_field) }`\n \n error: called `map(f)` on an Result value where `f` is a unit function\n-  --> $DIR/result_map_unit_fn.rs:38:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:40:5\n    |\n LL |     x.field.map(diverge);\n    |     ^^^^^^^^^^^^^^^^^^^^-\n    |     |\n-   |     help: try this: `if let Ok(x_field) = x.field { diverge(...) }`\n+   |     help: try this: `if let Ok(x_field) = x.field { diverge(x_field) }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn.rs:44:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:46:5\n    |\n LL |     x.field.map(|value| x.do_result_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { x.do_result_nothing(value + captured) }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn.rs:46:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:48:5\n    |\n LL |     x.field.map(|value| { x.do_result_plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { x.do_result_plus_one(value + captured); }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn.rs:49:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:51:5\n    |\n LL |     x.field.map(|value| do_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { do_nothing(value + captured) }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn.rs:51:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:53:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { do_nothing(value + captured) }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn.rs:53:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:55:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { do_nothing(value + captured); }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn.rs:55:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:57:5\n    |\n LL |     x.field.map(|value| { { do_nothing(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { do_nothing(value + captured); }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn.rs:58:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:60:5\n    |\n LL |     x.field.map(|value| diverge(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { diverge(value + captured) }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn.rs:60:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:62:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { diverge(value + captured) }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn.rs:62:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:64:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { diverge(value + captured); }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn.rs:64:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:66:5\n    |\n LL |     x.field.map(|value| { { diverge(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { diverge(value + captured); }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn.rs:69:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:71:5\n    |\n LL |     x.field.map(|value| { let y = plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { let y = plus_one(value + captured); }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn.rs:71:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:73:5\n    |\n LL |     x.field.map(|value| { plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { plus_one(value + captured); }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn.rs:73:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:75:5\n    |\n LL |     x.field.map(|value| { { plus_one(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { plus_one(value + captured); }`\n \n error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn.rs:76:5\n+  --> $DIR/result_map_unit_fn_fixable.rs:78:5\n    |\n LL |     x.field.map(|ref value| { do_nothing(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(ref value) = x.field { do_nothing(value + captured) }`\n \n-error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn.rs:79:5\n-   |\n-LL |     x.field.map(|value| { do_nothing(value); do_nothing(value) });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Ok(value) = x.field { ... }`\n-\n-error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn.rs:81:5\n-   |\n-LL |     x.field.map(|value| if value > 0 { do_nothing(value); do_nothing(value) });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Ok(value) = x.field { ... }`\n-\n-error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn.rs:85:5\n-   |\n-LL |        x.field.map(|value| {\n-   |   _____^\n-   |  |_____|\n-   | ||\n-LL | ||         do_nothing(value);\n-LL | ||         do_nothing(value)\n-LL | ||     });\n-   | ||______^- help: try this: `if let Ok(value) = x.field { ... }`\n-   | |_______|\n-   | \n-\n-error: called `map(f)` on an Result value where `f` is a unit closure\n-  --> $DIR/result_map_unit_fn.rs:89:5\n-   |\n-LL |     x.field.map(|value| { do_nothing(value); do_nothing(value); });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Ok(value) = x.field { ... }`\n-\n-error: called `map(f)` on an Result value where `f` is a unit function\n-  --> $DIR/result_map_unit_fn.rs:93:5\n-   |\n-LL |     \"12\".parse::<i32>().map(diverge);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Ok(_) = \"12\".parse::<i32>() { diverge(...) }`\n-\n-error: called `map(f)` on an Result value where `f` is a unit function\n-  --> $DIR/result_map_unit_fn.rs:99:5\n-   |\n-LL |     y.map(do_nothing);\n-   |     ^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Ok(_y) = y { do_nothing(...) }`\n-\n-error: aborting due to 23 previous errors\n+error: aborting due to 17 previous errors\n ", "previous_filename": "tests/ui/result_map_unit_fn.stderr"}, {"sha": "7d597332eafc5a6d064ba126fd4ba6e3320c0389", "filename": "tests/ui/result_map_unit_fn_unfixable.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fresult_map_unit_fn_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fresult_map_unit_fn_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_unfixable.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,40 @@\n+#![feature(never_type)]\n+#![warn(clippy::result_map_unit_fn)]\n+#![allow(unused)]\n+\n+fn do_nothing<T>(_: T) {}\n+\n+fn diverge<T>(_: T) -> ! {\n+    panic!()\n+}\n+\n+fn plus_one(value: usize) -> usize {\n+    value + 1\n+}\n+\n+#[rustfmt::skip]\n+fn result_map_unit_fn() {\n+    x.field.map(|value| { do_nothing(value); do_nothing(value) });\n+\n+    x.field.map(|value| if value > 0 { do_nothing(value); do_nothing(value) });\n+\n+    // Suggestion for the let block should be `{ ... }` as it's too difficult to build a\n+    // proper suggestion for these cases\n+    x.field.map(|value| {\n+        do_nothing(value);\n+        do_nothing(value)\n+    });\n+    x.field.map(|value| { do_nothing(value); do_nothing(value); });\n+\n+    // The following should suggest `if let Ok(_X) ...` as it's difficult to generate a proper let variable name for them\n+    let res: Result<!, usize> = Ok(42).map(diverge);\n+    \"12\".parse::<i32>().map(diverge);\n+\n+    let res: Result<(), usize> = Ok(plus_one(1)).map(do_nothing);\n+\n+    // Should suggest `if let Ok(_y) ...` to not override the existing foo variable\n+    let y: Result<usize, usize> = Ok(42);\n+    y.map(do_nothing);\n+}\n+\n+fn main() {}"}, {"sha": "949c22946793d0e4b6117b0c8bff005ee7501ccb", "filename": "tests/ui/result_map_unit_fn_unfixable.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fresult_map_unit_fn_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fresult_map_unit_fn_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_unfixable.stderr?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,27 @@\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/result_map_unit_fn_unfixable.rs:17:5\n+   |\n+LL |     x.field.map(|value| { do_nothing(value); do_nothing(value) });\n+   |     ^ not found in this scope\n+\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/result_map_unit_fn_unfixable.rs:19:5\n+   |\n+LL |     x.field.map(|value| if value > 0 { do_nothing(value); do_nothing(value) });\n+   |     ^ not found in this scope\n+\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/result_map_unit_fn_unfixable.rs:23:5\n+   |\n+LL |     x.field.map(|value| {\n+   |     ^ not found in this scope\n+\n+error[E0425]: cannot find value `x` in this scope\n+  --> $DIR/result_map_unit_fn_unfixable.rs:27:5\n+   |\n+LL |     x.field.map(|value| { do_nothing(value); do_nothing(value); });\n+   |     ^ not found in this scope\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "c9dd13eea8a30256c22e14b7752fc4ad9109f65d", "filename": "tests/ui/string_add.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fstring_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fstring_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_add.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,19 @@\n+#[warn(clippy::string_add)]\n+#[allow(clippy::string_add_assign, unused)]\n+fn main() {\n+    // ignores assignment distinction\n+    let mut x = \"\".to_owned();\n+\n+    for _ in 1..3 {\n+        x = x + \".\";\n+    }\n+\n+    let y = \"\".to_owned();\n+    let z = y + \"...\";\n+\n+    assert_eq!(&x, &z);\n+\n+    let mut x = 1;\n+    x = x + 1;\n+    assert_eq!(2, x);\n+}"}, {"sha": "8345c50f9710c2b32a5db37bc059380dddad117d", "filename": "tests/ui/string_add.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fstring_add.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fstring_add.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_add.stderr?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,30 @@\n+error: manual implementation of an assign operation\n+  --> $DIR/string_add.rs:8:9\n+   |\n+LL |         x = x + \".\";\n+   |         ^^^^^^^^^^^ help: replace it with: `x += \".\"`\n+   |\n+   = note: `-D clippy::assign-op-pattern` implied by `-D warnings`\n+\n+error: you added something to a string. Consider using `String::push_str()` instead\n+  --> $DIR/string_add.rs:8:13\n+   |\n+LL |         x = x + \".\";\n+   |             ^^^^^^^\n+   |\n+   = note: `-D clippy::string-add` implied by `-D warnings`\n+\n+error: you added something to a string. Consider using `String::push_str()` instead\n+  --> $DIR/string_add.rs:12:13\n+   |\n+LL |     let z = y + \"...\";\n+   |             ^^^^^^^^^\n+\n+error: manual implementation of an assign operation\n+  --> $DIR/string_add.rs:17:5\n+   |\n+LL |     x = x + 1;\n+   |     ^^^^^^^^^ help: replace it with: `x += 1`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "db71bab1e5214a96baceeb1a62ee426e3d6173a3", "filename": "tests/ui/string_add_assign.fixed", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fstring_add_assign.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fstring_add_assign.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_add_assign.fixed?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,21 @@\n+// run-rustfix\n+\n+#[allow(clippy::string_add, unused)]\n+#[warn(clippy::string_add_assign)]\n+fn main() {\n+    // ignores assignment distinction\n+    let mut x = \"\".to_owned();\n+\n+    for _ in 1..3 {\n+        x += \".\";\n+    }\n+\n+    let y = \"\".to_owned();\n+    let z = y + \"...\";\n+\n+    assert_eq!(&x, &z);\n+\n+    let mut x = 1;\n+    x += 1;\n+    assert_eq!(2, x);\n+}"}, {"sha": "644991945cbe2b77da49ca71a1e5e8a8830301a3", "filename": "tests/ui/string_add_assign.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fstring_add_assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fstring_add_assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_add_assign.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,21 @@\n+// run-rustfix\n+\n+#[allow(clippy::string_add, unused)]\n+#[warn(clippy::string_add_assign)]\n+fn main() {\n+    // ignores assignment distinction\n+    let mut x = \"\".to_owned();\n+\n+    for _ in 1..3 {\n+        x = x + \".\";\n+    }\n+\n+    let y = \"\".to_owned();\n+    let z = y + \"...\";\n+\n+    assert_eq!(&x, &z);\n+\n+    let mut x = 1;\n+    x = x + 1;\n+    assert_eq!(2, x);\n+}"}, {"sha": "7676175c1b82f39a2943db9a5b48c7fd484c5359", "filename": "tests/ui/string_add_assign.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fstring_add_assign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fstring_add_assign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_add_assign.stderr?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,24 @@\n+error: you assigned the result of adding something to this string. Consider using `String::push_str()` instead\n+  --> $DIR/string_add_assign.rs:10:9\n+   |\n+LL |         x = x + \".\";\n+   |         ^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::string-add-assign` implied by `-D warnings`\n+\n+error: manual implementation of an assign operation\n+  --> $DIR/string_add_assign.rs:10:9\n+   |\n+LL |         x = x + \".\";\n+   |         ^^^^^^^^^^^ help: replace it with: `x += \".\"`\n+   |\n+   = note: `-D clippy::assign-op-pattern` implied by `-D warnings`\n+\n+error: manual implementation of an assign operation\n+  --> $DIR/string_add_assign.rs:19:5\n+   |\n+LL |     x = x + 1;\n+   |     ^^^^^^^^^ help: replace it with: `x += 1`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "c8d1479f1206daba3a9b4c3dcd0cd1cbb13800b0", "filename": "tests/ui/string_lit_as_bytes.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fstring_lit_as_bytes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fstring_lit_as_bytes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_lit_as_bytes.fixed?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -14,7 +14,7 @@ fn str_lit_as_bytes() {\n \n     let strify = stringify!(foobar).as_bytes();\n \n-    let includestr = include_bytes!(\"entry.rs\");\n+    let includestr = include_bytes!(\"entry_unfixable.rs\");\n }\n \n fn main() {}"}, {"sha": "f0066d5d177b5f32256a37af151d780ff5dbdbd8", "filename": "tests/ui/string_lit_as_bytes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fstring_lit_as_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fstring_lit_as_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_lit_as_bytes.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -14,7 +14,7 @@ fn str_lit_as_bytes() {\n \n     let strify = stringify!(foobar).as_bytes();\n \n-    let includestr = include_str!(\"entry.rs\").as_bytes();\n+    let includestr = include_str!(\"entry_unfixable.rs\").as_bytes();\n }\n \n fn main() {}"}, {"sha": "d6c6c52709f8c4aa01b7ac1e22e424b0aea93769", "filename": "tests/ui/string_lit_as_bytes.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fstring_lit_as_bytes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Fstring_lit_as_bytes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_lit_as_bytes.stderr?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -15,8 +15,8 @@ LL |     let bs = r###\"raw string with 3# plus \" \"\"###.as_bytes();\n error: calling `as_bytes()` on `include_str!(..)`\n   --> $DIR/string_lit_as_bytes.rs:17:22\n    |\n-LL |     let includestr = include_str!(\"entry.rs\").as_bytes();\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `include_bytes!(..)` instead: `include_bytes!(\"entry.rs\")`\n+LL |     let includestr = include_str!(\"entry_unfixable.rs\").as_bytes();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `include_bytes!(..)` instead: `include_bytes!(\"entry_unfixable.rs\")`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "766e23c744a577a4cb0ff88d64b9ef4e287bab0b", "filename": "tests/ui/strings.rs", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/d5570e44e8c6cfe9a5633f9a53c7749bd3bacc4e/tests%2Fui%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5570e44e8c6cfe9a5633f9a53c7749bd3bacc4e/tests%2Fui%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstrings.rs?ref=d5570e44e8c6cfe9a5633f9a53c7749bd3bacc4e", "patch": "@@ -1,55 +0,0 @@\n-#[warn(clippy::string_add)]\n-#[allow(clippy::string_add_assign)]\n-fn add_only() {\n-    // ignores assignment distinction\n-    let mut x = \"\".to_owned();\n-\n-    for _ in 1..3 {\n-        x = x + \".\";\n-    }\n-\n-    let y = \"\".to_owned();\n-    let z = y + \"...\";\n-\n-    assert_eq!(&x, &z);\n-}\n-\n-#[warn(clippy::string_add_assign)]\n-fn add_assign_only() {\n-    let mut x = \"\".to_owned();\n-\n-    for _ in 1..3 {\n-        x = x + \".\";\n-    }\n-\n-    let y = \"\".to_owned();\n-    let z = y + \"...\";\n-\n-    assert_eq!(&x, &z);\n-}\n-\n-#[warn(clippy::string_add, clippy::string_add_assign)]\n-fn both() {\n-    let mut x = \"\".to_owned();\n-\n-    for _ in 1..3 {\n-        x = x + \".\";\n-    }\n-\n-    let y = \"\".to_owned();\n-    let z = y + \"...\";\n-\n-    assert_eq!(&x, &z);\n-}\n-\n-#[allow(clippy::assign_op_pattern)]\n-fn main() {\n-    add_only();\n-    add_assign_only();\n-    both();\n-\n-    // the add is only caught for `String`\n-    let mut x = 1;\n-    x = x + 1;\n-    assert_eq!(2, x);\n-}"}, {"sha": "7f684fe63555e00fef23c57ce34de684fbf089df", "filename": "tests/ui/strings.stderr", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d5570e44e8c6cfe9a5633f9a53c7749bd3bacc4e/tests%2Fui%2Fstrings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5570e44e8c6cfe9a5633f9a53c7749bd3bacc4e/tests%2Fui%2Fstrings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstrings.stderr?ref=d5570e44e8c6cfe9a5633f9a53c7749bd3bacc4e", "patch": "@@ -1,56 +0,0 @@\n-error: manual implementation of an assign operation\n-  --> $DIR/strings.rs:8:9\n-   |\n-LL |         x = x + \".\";\n-   |         ^^^^^^^^^^^ help: replace it with: `x += \".\"`\n-   |\n-   = note: `-D clippy::assign-op-pattern` implied by `-D warnings`\n-\n-error: you added something to a string. Consider using `String::push_str()` instead\n-  --> $DIR/strings.rs:8:13\n-   |\n-LL |         x = x + \".\";\n-   |             ^^^^^^^\n-   |\n-   = note: `-D clippy::string-add` implied by `-D warnings`\n-\n-error: you added something to a string. Consider using `String::push_str()` instead\n-  --> $DIR/strings.rs:12:13\n-   |\n-LL |     let z = y + \"...\";\n-   |             ^^^^^^^^^\n-\n-error: you assigned the result of adding something to this string. Consider using `String::push_str()` instead\n-  --> $DIR/strings.rs:22:9\n-   |\n-LL |         x = x + \".\";\n-   |         ^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::string-add-assign` implied by `-D warnings`\n-\n-error: manual implementation of an assign operation\n-  --> $DIR/strings.rs:22:9\n-   |\n-LL |         x = x + \".\";\n-   |         ^^^^^^^^^^^ help: replace it with: `x += \".\"`\n-\n-error: you assigned the result of adding something to this string. Consider using `String::push_str()` instead\n-  --> $DIR/strings.rs:36:9\n-   |\n-LL |         x = x + \".\";\n-   |         ^^^^^^^^^^^\n-\n-error: manual implementation of an assign operation\n-  --> $DIR/strings.rs:36:9\n-   |\n-LL |         x = x + \".\";\n-   |         ^^^^^^^^^^^ help: replace it with: `x += \".\"`\n-\n-error: you added something to a string. Consider using `String::push_str()` instead\n-  --> $DIR/strings.rs:40:13\n-   |\n-LL |     let z = y + \"...\";\n-   |             ^^^^^^^^^\n-\n-error: aborting due to 8 previous errors\n-"}, {"sha": "a0a50fee1808f69ac41eb25087bb8b011194f898", "filename": "tests/ui/unnecessary_clone.rs", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Funnecessary_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Funnecessary_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,9 +1,9 @@\n+// does not test any rustfixable lints\n+\n #![warn(clippy::clone_on_ref_ptr)]\n #![allow(unused)]\n \n use std::cell::RefCell;\n-use std::collections::HashSet;\n-use std::collections::VecDeque;\n use std::rc::{self, Rc};\n use std::sync::{self, Arc};\n \n@@ -66,25 +66,6 @@ fn clone_on_double_ref() {\n     println!(\"{:p} {:p}\", *y, z);\n }\n \n-fn iter_clone_collect() {\n-    let v = [1, 2, 3, 4, 5];\n-    let v2: Vec<isize> = v.iter().cloned().collect();\n-    let v3: HashSet<isize> = v.iter().cloned().collect();\n-    let v4: VecDeque<isize> = v.iter().cloned().collect();\n-\n-    // Handle macro expansion in suggestion\n-    let _: Vec<isize> = vec![1, 2, 3].iter().cloned().collect();\n-\n-    // Issue #3704\n-    unsafe {\n-        let _: Vec<u8> = std::ffi::CStr::from_ptr(std::ptr::null())\n-            .to_bytes()\n-            .iter()\n-            .cloned()\n-            .collect();\n-    }\n-}\n-\n mod many_derefs {\n     struct A;\n     struct B;"}, {"sha": "7ed1df8d703e1c11fd4d2d0dc0e07f3e7a6a72c4", "filename": "tests/ui/unnecessary_clone.stderr", "status": "modified", "additions": 2, "deletions": 26, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Funnecessary_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Funnecessary_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.stderr?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -78,35 +78,11 @@ help: or try being explicit about what type to clone\n LL |     let z: &Vec<_> = &std::vec::Vec<i32>::clone(y);\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: called `iter().cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n-  --> $DIR/unnecessary_clone.rs:71:27\n-   |\n-LL |     let v2: Vec<isize> = v.iter().cloned().collect();\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.to_vec()`\n-   |\n-   = note: `-D clippy::iter-cloned-collect` implied by `-D warnings`\n-\n-error: called `iter().cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n-  --> $DIR/unnecessary_clone.rs:76:38\n-   |\n-LL |     let _: Vec<isize> = vec![1, 2, 3].iter().cloned().collect();\n-   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.to_vec()`\n-\n-error: called `iter().cloned().collect()` on a slice to create a `Vec`. Calling `to_vec()` is both faster and more readable\n-  --> $DIR/unnecessary_clone.rs:81:24\n-   |\n-LL |               .to_bytes()\n-   |  ________________________^\n-LL | |             .iter()\n-LL | |             .cloned()\n-LL | |             .collect();\n-   | |______________________^ help: try: `.to_vec()`\n-\n error: using `clone` on a `Copy` type\n-  --> $DIR/unnecessary_clone.rs:119:20\n+  --> $DIR/unnecessary_clone.rs:100:20\n    |\n LL |         let _: E = a.clone();\n    |                    ^^^^^^^^^ help: try dereferencing it: `*****a`\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 12 previous errors\n "}, {"sha": "2fca96c4cd556654db75f3f0b58ab24c0c9d028a", "filename": "tests/ui/unnecessary_operation.fixed", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Funnecessary_operation.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Funnecessary_operation.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_operation.fixed?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -0,0 +1,79 @@\n+// run-rustfix\n+\n+#![feature(box_syntax)]\n+#![allow(clippy::deref_addrof, dead_code, unused, clippy::no_effect)]\n+#![warn(clippy::unnecessary_operation)]\n+\n+struct Tuple(i32);\n+struct Struct {\n+    field: i32,\n+}\n+enum Enum {\n+    Tuple(i32),\n+    Struct { field: i32 },\n+}\n+struct DropStruct {\n+    field: i32,\n+}\n+impl Drop for DropStruct {\n+    fn drop(&mut self) {}\n+}\n+struct DropTuple(i32);\n+impl Drop for DropTuple {\n+    fn drop(&mut self) {}\n+}\n+enum DropEnum {\n+    Tuple(i32),\n+    Struct { field: i32 },\n+}\n+impl Drop for DropEnum {\n+    fn drop(&mut self) {}\n+}\n+struct FooString {\n+    s: String,\n+}\n+\n+fn get_number() -> i32 {\n+    0\n+}\n+\n+fn get_usize() -> usize {\n+    0\n+}\n+fn get_struct() -> Struct {\n+    Struct { field: 0 }\n+}\n+fn get_drop_struct() -> DropStruct {\n+    DropStruct { field: 0 }\n+}\n+\n+fn main() {\n+    get_number();\n+    get_number();\n+    get_struct();\n+    get_number();\n+    get_number();\n+    5;get_number();\n+    get_number();\n+    get_number();\n+    5;6;get_number();\n+    get_number();\n+    get_number();\n+    get_number();\n+    5;get_number();\n+    42;get_number();\n+    [42, 55];get_usize();\n+    42;get_number();\n+    get_number();\n+    [42; 55];get_usize();\n+    get_number();\n+    String::from(\"blah\");\n+\n+    // Do not warn\n+    DropTuple(get_number());\n+    DropStruct { field: get_number() };\n+    DropStruct { field: get_number() };\n+    DropStruct { ..get_drop_struct() };\n+    DropEnum::Tuple(get_number());\n+    DropEnum::Struct { field: get_number() };\n+}"}, {"sha": "08cb9ab522ee0d7f22ea647908102b06b73b36a7", "filename": "tests/ui/unnecessary_operation.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Funnecessary_operation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Funnecessary_operation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_operation.rs?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,5 +1,7 @@\n+// run-rustfix\n+\n #![feature(box_syntax)]\n-#![allow(clippy::deref_addrof)]\n+#![allow(clippy::deref_addrof, dead_code, unused, clippy::no_effect)]\n #![warn(clippy::unnecessary_operation)]\n \n struct Tuple(i32);\n@@ -34,6 +36,10 @@ struct FooString {\n fn get_number() -> i32 {\n     0\n }\n+\n+fn get_usize() -> usize {\n+    0\n+}\n fn get_struct() -> Struct {\n     Struct { field: 0 }\n }\n@@ -56,10 +62,10 @@ fn main() {\n     ..get_number();\n     5..get_number();\n     [42, get_number()];\n-    [42, 55][get_number() as usize];\n+    [42, 55][get_usize()];\n     (42, get_number()).1;\n     [get_number(); 55];\n-    [42; 55][get_number() as usize];\n+    [42; 55][get_usize()];\n     {\n         get_number()\n     };"}, {"sha": "f88c9f9908beabdf4c2bef4afaebf708ee533059", "filename": "tests/ui/unnecessary_operation.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Funnecessary_operation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1366629262e20560f86fe986999dc52a168ee768/tests%2Fui%2Funnecessary_operation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_operation.stderr?ref=1366629262e20560f86fe986999dc52a168ee768", "patch": "@@ -1,123 +1,123 @@\n error: statement can be reduced\n-  --> $DIR/unnecessary_operation.rs:45:5\n+  --> $DIR/unnecessary_operation.rs:51:5\n    |\n LL |     Tuple(get_number());\n    |     ^^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n    |\n    = note: `-D clippy::unnecessary-operation` implied by `-D warnings`\n \n error: statement can be reduced\n-  --> $DIR/unnecessary_operation.rs:46:5\n+  --> $DIR/unnecessary_operation.rs:52:5\n    |\n LL |     Struct { field: get_number() };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n \n error: statement can be reduced\n-  --> $DIR/unnecessary_operation.rs:47:5\n+  --> $DIR/unnecessary_operation.rs:53:5\n    |\n LL |     Struct { ..get_struct() };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_struct();`\n \n error: statement can be reduced\n-  --> $DIR/unnecessary_operation.rs:48:5\n+  --> $DIR/unnecessary_operation.rs:54:5\n    |\n LL |     Enum::Tuple(get_number());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n \n error: statement can be reduced\n-  --> $DIR/unnecessary_operation.rs:49:5\n+  --> $DIR/unnecessary_operation.rs:55:5\n    |\n LL |     Enum::Struct { field: get_number() };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n \n error: statement can be reduced\n-  --> $DIR/unnecessary_operation.rs:50:5\n+  --> $DIR/unnecessary_operation.rs:56:5\n    |\n LL |     5 + get_number();\n    |     ^^^^^^^^^^^^^^^^^ help: replace it with: `5;get_number();`\n \n error: statement can be reduced\n-  --> $DIR/unnecessary_operation.rs:51:5\n+  --> $DIR/unnecessary_operation.rs:57:5\n    |\n LL |     *&get_number();\n    |     ^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n \n error: statement can be reduced\n-  --> $DIR/unnecessary_operation.rs:52:5\n+  --> $DIR/unnecessary_operation.rs:58:5\n    |\n LL |     &get_number();\n    |     ^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n \n error: statement can be reduced\n-  --> $DIR/unnecessary_operation.rs:53:5\n+  --> $DIR/unnecessary_operation.rs:59:5\n    |\n LL |     (5, 6, get_number());\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `5;6;get_number();`\n \n error: statement can be reduced\n-  --> $DIR/unnecessary_operation.rs:54:5\n+  --> $DIR/unnecessary_operation.rs:60:5\n    |\n LL |     box get_number();\n    |     ^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n \n error: statement can be reduced\n-  --> $DIR/unnecessary_operation.rs:55:5\n+  --> $DIR/unnecessary_operation.rs:61:5\n    |\n LL |     get_number()..;\n    |     ^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n \n error: statement can be reduced\n-  --> $DIR/unnecessary_operation.rs:56:5\n+  --> $DIR/unnecessary_operation.rs:62:5\n    |\n LL |     ..get_number();\n    |     ^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n \n error: statement can be reduced\n-  --> $DIR/unnecessary_operation.rs:57:5\n+  --> $DIR/unnecessary_operation.rs:63:5\n    |\n LL |     5..get_number();\n    |     ^^^^^^^^^^^^^^^^ help: replace it with: `5;get_number();`\n \n error: statement can be reduced\n-  --> $DIR/unnecessary_operation.rs:58:5\n+  --> $DIR/unnecessary_operation.rs:64:5\n    |\n LL |     [42, get_number()];\n    |     ^^^^^^^^^^^^^^^^^^^ help: replace it with: `42;get_number();`\n \n error: statement can be reduced\n-  --> $DIR/unnecessary_operation.rs:59:5\n+  --> $DIR/unnecessary_operation.rs:65:5\n    |\n-LL |     [42, 55][get_number() as usize];\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `[42, 55];get_number() as usize;`\n+LL |     [42, 55][get_usize()];\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `[42, 55];get_usize();`\n \n error: statement can be reduced\n-  --> $DIR/unnecessary_operation.rs:60:5\n+  --> $DIR/unnecessary_operation.rs:66:5\n    |\n LL |     (42, get_number()).1;\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `42;get_number();`\n \n error: statement can be reduced\n-  --> $DIR/unnecessary_operation.rs:61:5\n+  --> $DIR/unnecessary_operation.rs:67:5\n    |\n LL |     [get_number(); 55];\n    |     ^^^^^^^^^^^^^^^^^^^ help: replace it with: `get_number();`\n \n error: statement can be reduced\n-  --> $DIR/unnecessary_operation.rs:62:5\n+  --> $DIR/unnecessary_operation.rs:68:5\n    |\n-LL |     [42; 55][get_number() as usize];\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `[42; 55];get_number() as usize;`\n+LL |     [42; 55][get_usize()];\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `[42; 55];get_usize();`\n \n error: statement can be reduced\n-  --> $DIR/unnecessary_operation.rs:63:5\n+  --> $DIR/unnecessary_operation.rs:69:5\n    |\n LL | /     {\n LL | |         get_number()\n LL | |     };\n    | |______^ help: replace it with: `get_number();`\n \n error: statement can be reduced\n-  --> $DIR/unnecessary_operation.rs:66:5\n+  --> $DIR/unnecessary_operation.rs:72:5\n    |\n LL | /     FooString {\n LL | |         s: String::from(\"blah\"),"}]}