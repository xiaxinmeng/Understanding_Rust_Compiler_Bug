{"sha": "b9441f2428f501de15dcb00af8da255a70302a0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5NDQxZjI0MjhmNTAxZGUxNWRjYjAwYWY4ZGEyNTVhNzAzMDJhMGQ=", "commit": {"author": {"name": "Ryan Cumming", "email": "etaoins@gmail.com", "date": "2018-01-31T21:15:38Z"}, "committer": {"name": "Ryan Cumming", "email": "etaoins@gmail.com", "date": "2018-01-31T21:19:22Z"}, "message": "Improve char escaping in lexer messages\n\nCurrently ', \" and \\ are escaped as \\', \\\" and \\\\ respectively. This\nleads to confusing messages such as `error: unknown start of token: \\\\`\nwhen encountering a single backslash.\n\nFix by emitting printable ASCII characters directly. This will still\nescape \\r, \\n, \\t and Unicode characters.\n\nFixes #47902", "tree": {"sha": "3747f40ef4362574c666c9bbcd37dc3708ae0107", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3747f40ef4362574c666c9bbcd37dc3708ae0107"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9441f2428f501de15dcb00af8da255a70302a0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9441f2428f501de15dcb00af8da255a70302a0d", "html_url": "https://github.com/rust-lang/rust/commit/b9441f2428f501de15dcb00af8da255a70302a0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9441f2428f501de15dcb00af8da255a70302a0d/comments", "author": {"login": "etaoins", "id": 687534, "node_id": "MDQ6VXNlcjY4NzUzNA==", "avatar_url": "https://avatars.githubusercontent.com/u/687534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/etaoins", "html_url": "https://github.com/etaoins", "followers_url": "https://api.github.com/users/etaoins/followers", "following_url": "https://api.github.com/users/etaoins/following{/other_user}", "gists_url": "https://api.github.com/users/etaoins/gists{/gist_id}", "starred_url": "https://api.github.com/users/etaoins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/etaoins/subscriptions", "organizations_url": "https://api.github.com/users/etaoins/orgs", "repos_url": "https://api.github.com/users/etaoins/repos", "events_url": "https://api.github.com/users/etaoins/events{/privacy}", "received_events_url": "https://api.github.com/users/etaoins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "etaoins", "id": 687534, "node_id": "MDQ6VXNlcjY4NzUzNA==", "avatar_url": "https://avatars.githubusercontent.com/u/687534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/etaoins", "html_url": "https://github.com/etaoins", "followers_url": "https://api.github.com/users/etaoins/followers", "following_url": "https://api.github.com/users/etaoins/following{/other_user}", "gists_url": "https://api.github.com/users/etaoins/gists{/gist_id}", "starred_url": "https://api.github.com/users/etaoins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/etaoins/subscriptions", "organizations_url": "https://api.github.com/users/etaoins/orgs", "repos_url": "https://api.github.com/users/etaoins/repos", "events_url": "https://api.github.com/users/etaoins/events{/privacy}", "received_events_url": "https://api.github.com/users/etaoins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "560a2f4faf4828ba5f48fe2bd7709265c2f5354d", "url": "https://api.github.com/repos/rust-lang/rust/commits/560a2f4faf4828ba5f48fe2bd7709265c2f5354d", "html_url": "https://github.com/rust-lang/rust/commit/560a2f4faf4828ba5f48fe2bd7709265c2f5354d"}], "stats": {"total": 46, "additions": 33, "deletions": 13}, "files": [{"sha": "11ab84a572916e76edc6f7473f6e4cb17cf74787", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b9441f2428f501de15dcb00af8da255a70302a0d/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9441f2428f501de15dcb00af8da255a70302a0d/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=b9441f2428f501de15dcb00af8da255a70302a0d", "patch": "@@ -246,14 +246,27 @@ impl<'a> StringReader<'a> {\n         self.err_span(self.mk_sp(from_pos, to_pos), m)\n     }\n \n+    /// Pushes a character to a message string for error reporting\n+    fn push_escaped_char_for_msg(m: &mut String, c: char) {\n+        match c {\n+            '\\u{20}'...'\\u{7e}' => {\n+                // Don't escape \\, ' or \" for user-facing messages\n+                m.push(c);\n+            }\n+            _ => {\n+                for c in c.escape_default() {\n+                    m.push(c);\n+                }\n+            }\n+        }\n+    }\n+\n     /// Report a lexical error spanning [`from_pos`, `to_pos`), appending an\n     /// escaped character to the error message\n     fn fatal_span_char(&self, from_pos: BytePos, to_pos: BytePos, m: &str, c: char) -> FatalError {\n         let mut m = m.to_string();\n         m.push_str(\": \");\n-        for c in c.escape_default() {\n-            m.push(c)\n-        }\n+        Self::push_escaped_char_for_msg(&mut m, c);\n         self.fatal_span_(from_pos, to_pos, &m[..])\n     }\n     fn struct_fatal_span_char(&self,\n@@ -264,9 +277,7 @@ impl<'a> StringReader<'a> {\n                               -> DiagnosticBuilder<'a> {\n         let mut m = m.to_string();\n         m.push_str(\": \");\n-        for c in c.escape_default() {\n-            m.push(c)\n-        }\n+        Self::push_escaped_char_for_msg(&mut m, c);\n         self.sess.span_diagnostic.struct_span_fatal(self.mk_sp(from_pos, to_pos), &m[..])\n     }\n \n@@ -275,9 +286,7 @@ impl<'a> StringReader<'a> {\n     fn err_span_char(&self, from_pos: BytePos, to_pos: BytePos, m: &str, c: char) {\n         let mut m = m.to_string();\n         m.push_str(\": \");\n-        for c in c.escape_default() {\n-            m.push(c)\n-        }\n+        Self::push_escaped_char_for_msg(&mut m, c);\n         self.err_span_(from_pos, to_pos, &m[..]);\n     }\n     fn struct_err_span_char(&self,\n@@ -288,9 +297,7 @@ impl<'a> StringReader<'a> {\n                             -> DiagnosticBuilder<'a> {\n         let mut m = m.to_string();\n         m.push_str(\": \");\n-        for c in c.escape_default() {\n-            m.push(c)\n-        }\n+        Self::push_escaped_char_for_msg(&mut m, c);\n         self.sess.span_diagnostic.struct_span_err(self.mk_sp(from_pos, to_pos), &m[..])\n     }\n "}, {"sha": "821015ece77124acff5bd042fc7e4d21960964a4", "filename": "src/test/parse-fail/bad-char-literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9441f2428f501de15dcb00af8da255a70302a0d/src%2Ftest%2Fparse-fail%2Fbad-char-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9441f2428f501de15dcb00af8da255a70302a0d/src%2Ftest%2Fparse-fail%2Fbad-char-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fbad-char-literals.rs?ref=b9441f2428f501de15dcb00af8da255a70302a0d", "patch": "@@ -15,7 +15,7 @@\n fn main() {\n     // these literals are just silly.\n     ''';\n-    //~^ ERROR: character constant must be escaped: \\'\n+    //~^ ERROR: character constant must be escaped: '\n \n     // note that this is a literal \"\\n\" byte\n     '"}, {"sha": "b6042bbdc1a2699c60729045a6763e295e0824a2", "filename": "src/test/parse-fail/lex-stray-backslash.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b9441f2428f501de15dcb00af8da255a70302a0d/src%2Ftest%2Fparse-fail%2Flex-stray-backslash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9441f2428f501de15dcb00af8da255a70302a0d/src%2Ftest%2Fparse-fail%2Flex-stray-backslash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Flex-stray-backslash.rs?ref=b9441f2428f501de15dcb00af8da255a70302a0d", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only\n+\n+\\ //~ ERROR: unknown start of token: \\"}]}