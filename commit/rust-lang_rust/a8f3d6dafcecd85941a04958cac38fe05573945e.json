{"sha": "a8f3d6dafcecd85941a04958cac38fe05573945e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZjNkNmRhZmNlY2Q4NTk0MWEwNDk1OGNhYzM4ZmUwNTU3Mzk0NWU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-19T21:19:29Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-22T14:04:47Z"}, "message": "convert user-provided signatures into def-id", "tree": {"sha": "a82de17093c6ecf0f384400a1bf879aa2dc707ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a82de17093c6ecf0f384400a1bf879aa2dc707ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8f3d6dafcecd85941a04958cac38fe05573945e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8f3d6dafcecd85941a04958cac38fe05573945e", "html_url": "https://github.com/rust-lang/rust/commit/a8f3d6dafcecd85941a04958cac38fe05573945e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8f3d6dafcecd85941a04958cac38fe05573945e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "167b460961b4c3c127c0fc8782012043c8cf97af", "url": "https://api.github.com/repos/rust-lang/rust/commits/167b460961b4c3c127c0fc8782012043c8cf97af", "html_url": "https://github.com/rust-lang/rust/commit/167b460961b4c3c127c0fc8782012043c8cf97af"}], "stats": {"total": 32, "additions": 6, "deletions": 26}, "files": [{"sha": "c60471c285dcb0f1b35c532853337a23ba44ed08", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a8f3d6dafcecd85941a04958cac38fe05573945e/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f3d6dafcecd85941a04958cac38fe05573945e/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=a8f3d6dafcecd85941a04958cac38fe05573945e", "patch": "@@ -51,7 +51,7 @@ use ty::steal::Steal;\n use ty::BindingMode;\n use ty::CanonicalTy;\n use ty::CanonicalPolyFnSig;\n-use util::nodemap::{DefIdSet, ItemLocalMap};\n+use util::nodemap::{DefIdMap, DefIdSet, ItemLocalMap};\n use util::nodemap::{FxHashMap, FxHashSet};\n use smallvec::SmallVec;\n use rustc_data_structures::stable_hasher::{HashStable, hash_stable_hashmap,\n@@ -362,7 +362,7 @@ pub struct TypeckTables<'tcx> {\n \n     /// Stores the canonicalized types provided by the user. See also\n     /// `AscribeUserType` statement in MIR.\n-    user_provided_sigs: ItemLocalMap<CanonicalPolyFnSig<'tcx>>,\n+    pub user_provided_sigs: DefIdMap<CanonicalPolyFnSig<'tcx>>,\n \n     /// Stores the substitutions that the user explicitly gave (if any)\n     /// attached to `id`. These will not include any inferred\n@@ -519,20 +519,6 @@ impl<'tcx> TypeckTables<'tcx> {\n         }\n     }\n \n-    pub fn user_provided_sigs(&self) -> LocalTableInContext<'_, CanonicalPolyFnSig<'tcx>> {\n-        LocalTableInContext {\n-            local_id_root: self.local_id_root,\n-            data: &self.user_provided_sigs\n-        }\n-    }\n-\n-    pub fn user_provided_sigs_mut(&mut self) -> LocalTableInContextMut<'_, CanonicalPolyFnSig<'tcx>> {\n-        LocalTableInContextMut {\n-            local_id_root: self.local_id_root,\n-            data: &mut self.user_provided_sigs\n-        }\n-    }\n-\n     pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {\n         LocalTableInContext {\n             local_id_root: self.local_id_root,"}, {"sha": "d968bf222aa0983ef9e2674a0fde46f19d3f1ac4", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a8f3d6dafcecd85941a04958cac38fe05573945e/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f3d6dafcecd85941a04958cac38fe05573945e/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=a8f3d6dafcecd85941a04958cac38fe05573945e", "patch": "@@ -392,27 +392,21 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n     fn visit_user_provided_sigs(&mut self) {\n         let fcx_tables = self.fcx.tables.borrow();\n         debug_assert_eq!(fcx_tables.local_id_root, self.tables.local_id_root);\n-        let common_local_id_root = fcx_tables.local_id_root.unwrap();\n-\n-        for (&local_id, c_sig) in fcx_tables.user_provided_sigs().iter() {\n-            let hir_id = hir::HirId {\n-                owner: common_local_id_root.index,\n-                local_id,\n-            };\n \n+        for (&def_id, c_sig) in fcx_tables.user_provided_sigs.iter() {\n             let c_sig = if let Some(c_sig) = self.tcx().lift_to_global(c_sig) {\n                 c_sig\n             } else {\n                 span_bug!(\n-                    hir_id.to_span(&self.fcx.tcx),\n+                    self.fcx.tcx.hir.span_if_local(def_id).unwrap(),\n                     \"writeback: `{:?}` missing from the global type context\",\n                     c_sig\n                 );\n             };\n \n             self.tables\n-                .user_provided_sigs_mut()\n-                .insert(hir_id, c_sig.clone());\n+                .user_provided_sigs\n+                .insert(def_id, c_sig.clone());\n         }\n     }\n "}]}