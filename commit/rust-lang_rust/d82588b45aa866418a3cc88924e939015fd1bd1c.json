{"sha": "d82588b45aa866418a3cc88924e939015fd1bd1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MjU4OGI0NWFhODY2NDE4YTNjYzg4OTI0ZTkzOTAxNWZkMWJkMWM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-11T06:26:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-11T06:26:24Z"}, "message": "Rollup merge of #72303 - yoshuawuyts:future-poll-fn, r=dtolnay\n\nAdd core::future::{poll_fn, PollFn}\n\nThis is a sibling PR to #70834, adding `future::poll_fn`. This is a small helper function that helps bridge the gap between \"poll state machines\" and \"async/await\". It was first introduced in [futures@0.1.7](https://docs.rs/futures/0.1.7/futures/future/fn.poll_fn.html) in December of 2016, and has been tried and tested as part of the ecosystem for the past 3.5 years.\n\n## Implementation\n\nMuch of the same reasoning from #70834 applies: by returning a concrete struct rather than an `async fn` we get to mark the future as `Unpin`. It also becomes named which allows storing it in structs without boxing. This implementation has been modified from the implementation in `futures-rs`.\n\n## References\n- [`futures::future::poll_fn`](https://docs.rs/futures/0.3.5/futures/future/fn.poll_fn.html)\n- [`async_std::future::poll_fn`](https://docs.rs/async-std/1.5.0/async_std/future/fn.poll_fn.html)", "tree": {"sha": "eed55c32d102df6ab06e88937e385ac7e04a1a88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eed55c32d102df6ab06e88937e385ac7e04a1a88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d82588b45aa866418a3cc88924e939015fd1bd1c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfCVuRCRBK7hj4Ov3rIwAAdHIIAGRgIZblBNU+LiZhAXHty21B\n9IFqVmJEW+2vzjDxGmzl7luIaA9Q+M5yXxVXrRFeKRw59rd4Wu+7O6Tq8HgBNesX\nG6BqXlHIRGyou24JIlF7m4bp6JkuxERJIDDBBWMnb6YlJCSYyjf/xudYgxI6A5ac\nEj0Pl0B1XvF+B3Jl/0nHlEcS/5Uz+lHS8ZocA1m4/VkEmt1uEUwzFQ7/9L1FFFE6\nW6YLkx41SfnqY/3kBKAYYF1BU7meHWekN4IGsJ5idbc9oby6b06E3EhCMNw21ZyB\nbINcwbiftQu2CF9BR3n/UNnIQoOmRionkbCh44anFpod0qhAE5Bay6ox30v/9aI=\n=pBrZ\n-----END PGP SIGNATURE-----\n", "payload": "tree eed55c32d102df6ab06e88937e385ac7e04a1a88\nparent ec1e7e9dbc83e57da7809cfc32c01e881b42555b\nparent a31f103fd27bde3f83b9dd54af8e41d64e5001f4\nauthor Manish Goregaokar <manishsmail@gmail.com> 1594448784 -0700\ncommitter GitHub <noreply@github.com> 1594448784 -0700\n\nRollup merge of #72303 - yoshuawuyts:future-poll-fn, r=dtolnay\n\nAdd core::future::{poll_fn, PollFn}\n\nThis is a sibling PR to #70834, adding `future::poll_fn`. This is a small helper function that helps bridge the gap between \"poll state machines\" and \"async/await\". It was first introduced in [futures@0.1.7](https://docs.rs/futures/0.1.7/futures/future/fn.poll_fn.html) in December of 2016, and has been tried and tested as part of the ecosystem for the past 3.5 years.\n\n## Implementation\n\nMuch of the same reasoning from #70834 applies: by returning a concrete struct rather than an `async fn` we get to mark the future as `Unpin`. It also becomes named which allows storing it in structs without boxing. This implementation has been modified from the implementation in `futures-rs`.\n\n## References\n- [`futures::future::poll_fn`](https://docs.rs/futures/0.3.5/futures/future/fn.poll_fn.html)\n- [`async_std::future::poll_fn`](https://docs.rs/async-std/1.5.0/async_std/future/fn.poll_fn.html)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d82588b45aa866418a3cc88924e939015fd1bd1c", "html_url": "https://github.com/rust-lang/rust/commit/d82588b45aa866418a3cc88924e939015fd1bd1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d82588b45aa866418a3cc88924e939015fd1bd1c/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec1e7e9dbc83e57da7809cfc32c01e881b42555b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec1e7e9dbc83e57da7809cfc32c01e881b42555b", "html_url": "https://github.com/rust-lang/rust/commit/ec1e7e9dbc83e57da7809cfc32c01e881b42555b"}, {"sha": "a31f103fd27bde3f83b9dd54af8e41d64e5001f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a31f103fd27bde3f83b9dd54af8e41d64e5001f4", "html_url": "https://github.com/rust-lang/rust/commit/a31f103fd27bde3f83b9dd54af8e41d64e5001f4"}], "stats": {"total": 70, "additions": 70, "deletions": 0}, "files": [{"sha": "6d1ad9db74435fca5d1afa81b57ff0283faea49d", "filename": "src/libcore/future/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d82588b45aa866418a3cc88924e939015fd1bd1c/src%2Flibcore%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82588b45aa866418a3cc88924e939015fd1bd1c/src%2Flibcore%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Fmod.rs?ref=d82588b45aa866418a3cc88924e939015fd1bd1c", "patch": "@@ -12,6 +12,7 @@ use crate::{\n mod future;\n mod into_future;\n mod pending;\n+mod poll_fn;\n mod ready;\n \n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n@@ -25,6 +26,9 @@ pub use pending::{pending, Pending};\n #[unstable(feature = \"future_readiness_fns\", issue = \"70921\")]\n pub use ready::{ready, Ready};\n \n+#[unstable(feature = \"future_poll_fn\", issue = \"72302\")]\n+pub use poll_fn::{poll_fn, PollFn};\n+\n /// This type is needed because:\n ///\n /// a) Generators cannot implement `for<'a, 'b> Generator<&'a mut Context<'b>>`, so we need to pass"}, {"sha": "9ab3bfcea1c71b810c0d51ccbd44abf9d3d9bd3c", "filename": "src/libcore/future/poll_fn.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/d82588b45aa866418a3cc88924e939015fd1bd1c/src%2Flibcore%2Ffuture%2Fpoll_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d82588b45aa866418a3cc88924e939015fd1bd1c/src%2Flibcore%2Ffuture%2Fpoll_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Fpoll_fn.rs?ref=d82588b45aa866418a3cc88924e939015fd1bd1c", "patch": "@@ -0,0 +1,66 @@\n+use crate::fmt;\n+use crate::future::Future;\n+use crate::pin::Pin;\n+use crate::task::{Context, Poll};\n+\n+/// Creates a future that wraps a function returning `Poll`.\n+///\n+/// Polling the future delegates to the wrapped function.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(future_poll_fn)]\n+/// # async fn run() {\n+/// use core::future::poll_fn;\n+/// use core::task::{Context, Poll};\n+///\n+/// fn read_line(_cx: &mut Context<'_>) -> Poll<String> {\n+///     Poll::Ready(\"Hello, World!\".into())\n+/// }\n+///\n+/// let read_future = poll_fn(read_line);\n+/// assert_eq!(read_future.await, \"Hello, World!\".to_owned());\n+/// # };\n+/// ```\n+#[unstable(feature = \"future_poll_fn\", issue = \"72302\")]\n+pub fn poll_fn<T, F>(f: F) -> PollFn<F>\n+where\n+    F: FnMut(&mut Context<'_>) -> Poll<T>,\n+{\n+    PollFn { f }\n+}\n+\n+/// A Future that wraps a function returning `Poll`.\n+///\n+/// This `struct` is created by the [`poll_fn`] function. See its\n+/// documentation for more.\n+///\n+/// [`poll_fn`]: fn.poll_fn.html\n+#[must_use = \"futures do nothing unless you `.await` or poll them\"]\n+#[unstable(feature = \"future_poll_fn\", issue = \"72302\")]\n+pub struct PollFn<F> {\n+    f: F,\n+}\n+\n+#[unstable(feature = \"future_poll_fn\", issue = \"72302\")]\n+impl<F> Unpin for PollFn<F> {}\n+\n+#[unstable(feature = \"future_poll_fn\", issue = \"72302\")]\n+impl<F> fmt::Debug for PollFn<F> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_struct(\"PollFn\").finish()\n+    }\n+}\n+\n+#[unstable(feature = \"future_poll_fn\", issue = \"72302\")]\n+impl<T, F> Future for PollFn<F>\n+where\n+    F: FnMut(&mut Context<'_>) -> Poll<T>,\n+{\n+    type Output = T;\n+\n+    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<T> {\n+        (&mut self.f)(cx)\n+    }\n+}"}]}