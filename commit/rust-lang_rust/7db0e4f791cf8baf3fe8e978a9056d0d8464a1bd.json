{"sha": "7db0e4f791cf8baf3fe8e978a9056d0d8464a1bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkYjBlNGY3OTFjZjhiYWYzZmU4ZTk3OGE5MDU2ZDBkODQ2NGExYmQ=", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-05-21T16:27:40Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-05-21T16:27:40Z"}, "message": "Suggest `&mut iter` inside a closure for `while_let_on_iterator`", "tree": {"sha": "e8dc69ae1100d980eed724ac4261b709f3bec0a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8dc69ae1100d980eed724ac4261b709f3bec0a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7db0e4f791cf8baf3fe8e978a9056d0d8464a1bd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nComment: Created with Krypton\n\niF4EABYKAAYFAmCn35oACgkQ2lnoZDo37QY97gEAgCnCj/zK9FgNnngMi8Df4FR7\nrLOjVMyRk+BALdfhigsBAI8q5OiHZONXoQOxElK+xkWHbq3UGyvBWpOX2EI4swkA\n=ibef\n-----END PGP SIGNATURE-----", "payload": "tree e8dc69ae1100d980eed724ac4261b709f3bec0a4\nparent 029c3260585bbc16300ef572da439bbecd5c22da\nauthor Jason Newcomb <jsnewcomb@pm.me> 1621614460 -0400\ncommitter Jason Newcomb <jsnewcomb@pm.me> 1621614460 -0400\n\nSuggest `&mut iter` inside a closure for `while_let_on_iterator`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7db0e4f791cf8baf3fe8e978a9056d0d8464a1bd", "html_url": "https://github.com/rust-lang/rust/commit/7db0e4f791cf8baf3fe8e978a9056d0d8464a1bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7db0e4f791cf8baf3fe8e978a9056d0d8464a1bd/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "029c3260585bbc16300ef572da439bbecd5c22da", "url": "https://api.github.com/repos/rust-lang/rust/commits/029c3260585bbc16300ef572da439bbecd5c22da", "html_url": "https://github.com/rust-lang/rust/commit/029c3260585bbc16300ef572da439bbecd5c22da"}], "stats": {"total": 59, "additions": 49, "deletions": 10}, "files": [{"sha": "d57588716a5bf16c8f4b28d0b75ceb251718837e", "filename": "clippy_lints/src/loops/while_let_on_iterator.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7db0e4f791cf8baf3fe8e978a9056d0d8464a1bd/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db0e4f791cf8baf3fe8e978a9056d0d8464a1bd/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs?ref=7db0e4f791cf8baf3fe8e978a9056d0d8464a1bd", "patch": "@@ -1,7 +1,9 @@\n use super::WHILE_LET_ON_ITERATOR;\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::{get_enclosing_loop, is_refutable, is_trait_method, match_def_path, paths, visitors::is_res_used};\n+use clippy_utils::{\n+    get_enclosing_loop_or_closure, is_refutable, is_trait_method, match_def_path, paths, visitors::is_res_used,\n+};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, ErasedMap, NestedVisitorMap, Visitor};\n@@ -315,9 +317,10 @@ fn needs_mutable_borrow(cx: &LateContext<'tcx>, iter_expr: &IterExpr, loop_expr:\n         }\n     }\n \n-    if let Some(e) = get_enclosing_loop(cx.tcx, loop_expr) {\n-        // The iterator expression will be used on the next iteration unless it is declared within the outer\n-        // loop.\n+    if let Some(e) = get_enclosing_loop_or_closure(cx.tcx, loop_expr) {\n+        // The iterator expression will be used on the next iteration (for loops), or on the next call (for\n+        // closures) unless it is declared within the enclosing expression. TODO: Check for closures\n+        // used where an `FnOnce` type is expected.\n         let local_id = match iter_expr.path {\n             Res::Local(id) => id,\n             _ => return true,"}, {"sha": "d32c3ec929a4ace79bdc2b799151bde0f8c914ee", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7db0e4f791cf8baf3fe8e978a9056d0d8464a1bd/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db0e4f791cf8baf3fe8e978a9056d0d8464a1bd/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=7db0e4f791cf8baf3fe8e978a9056d0d8464a1bd", "patch": "@@ -861,14 +861,16 @@ pub fn get_enclosing_block<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Optio\n     })\n }\n \n-/// Gets the loop enclosing the given expression, if any.\n-pub fn get_enclosing_loop(tcx: TyCtxt<'tcx>, expr: &Expr<'_>) -> Option<&'tcx Expr<'tcx>> {\n+/// Gets the loop or closure enclosing the given expression, if any.\n+pub fn get_enclosing_loop_or_closure(tcx: TyCtxt<'tcx>, expr: &Expr<'_>) -> Option<&'tcx Expr<'tcx>> {\n     let map = tcx.hir();\n     for (_, node) in map.parent_iter(expr.hir_id) {\n         match node {\n             Node::Expr(\n-                e @ Expr {\n-                    kind: ExprKind::Loop(..),\n+                e\n+                @\n+                Expr {\n+                    kind: ExprKind::Loop(..) | ExprKind::Closure(..),\n                     ..\n                 },\n             ) => return Some(e),"}, {"sha": "52e80ceee83cf31439c07cfff967fc46a03e09fd", "filename": "tests/ui/while_let_on_iterator.fixed", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7db0e4f791cf8baf3fe8e978a9056d0d8464a1bd/tests%2Fui%2Fwhile_let_on_iterator.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7db0e4f791cf8baf3fe8e978a9056d0d8464a1bd/tests%2Fui%2Fwhile_let_on_iterator.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.fixed?ref=7db0e4f791cf8baf3fe8e978a9056d0d8464a1bd", "patch": "@@ -320,6 +320,20 @@ fn issue1924() {\n     println!(\"iterator field {}\", it.1);\n }\n \n+fn issue7249() {\n+    let mut it = 0..10;\n+    let mut x = || {\n+        // Needs &mut, the closure can be called multiple times\n+        for x in &mut it {\n+            if x % 2 == 0 {\n+                break;\n+            }\n+        }\n+    };\n+    x();\n+    x();\n+}\n+\n fn main() {\n     let mut it = 0..20;\n     for _ in it {"}, {"sha": "5078a3c9028c4762f9d7ea09e3b1baf5c837c7c5", "filename": "tests/ui/while_let_on_iterator.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7db0e4f791cf8baf3fe8e978a9056d0d8464a1bd/tests%2Fui%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7db0e4f791cf8baf3fe8e978a9056d0d8464a1bd/tests%2Fui%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.rs?ref=7db0e4f791cf8baf3fe8e978a9056d0d8464a1bd", "patch": "@@ -320,6 +320,20 @@ fn issue1924() {\n     println!(\"iterator field {}\", it.1);\n }\n \n+fn issue7249() {\n+    let mut it = 0..10;\n+    let mut x = || {\n+        // Needs &mut, the closure can be called multiple times\n+        while let Some(x) = it.next() {\n+            if x % 2 == 0 {\n+                break;\n+            }\n+        }\n+    };\n+    x();\n+    x();\n+}\n+\n fn main() {\n     let mut it = 0..20;\n     while let Some(..) = it.next() {"}, {"sha": "cb0afeae15ee0ead89f0bbe769e7af04660ccd72", "filename": "tests/ui/while_let_on_iterator.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7db0e4f791cf8baf3fe8e978a9056d0d8464a1bd/tests%2Fui%2Fwhile_let_on_iterator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7db0e4f791cf8baf3fe8e978a9056d0d8464a1bd/tests%2Fui%2Fwhile_let_on_iterator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_let_on_iterator.stderr?ref=7db0e4f791cf8baf3fe8e978a9056d0d8464a1bd", "patch": "@@ -105,10 +105,16 @@ LL |     while let Some(n) = it.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for n in &mut it`\n \n error: this loop could be written as a `for` loop\n-  --> $DIR/while_let_on_iterator.rs:325:5\n+  --> $DIR/while_let_on_iterator.rs:327:9\n+   |\n+LL |         while let Some(x) = it.next() {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for x in &mut it`\n+\n+error: this loop could be written as a `for` loop\n+  --> $DIR/while_let_on_iterator.rs:339:5\n    |\n LL |     while let Some(..) = it.next() {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for _ in it`\n \n-error: aborting due to 18 previous errors\n+error: aborting due to 19 previous errors\n "}]}