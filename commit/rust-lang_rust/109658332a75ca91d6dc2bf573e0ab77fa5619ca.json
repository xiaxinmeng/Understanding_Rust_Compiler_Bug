{"sha": "109658332a75ca91d6dc2bf573e0ab77fa5619ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwOTY1ODMzMmE3NWNhOTFkNmRjMmJmNTczZTBhYjc3ZmE1NjE5Y2E=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-14T12:03:27Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-14T12:03:27Z"}, "message": "Support raw strings in lexer", "tree": {"sha": "9227430826c75e184577623c25e54489b1033865", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9227430826c75e184577623c25e54489b1033865"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/109658332a75ca91d6dc2bf573e0ab77fa5619ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/109658332a75ca91d6dc2bf573e0ab77fa5619ca", "html_url": "https://github.com/rust-lang/rust/commit/109658332a75ca91d6dc2bf573e0ab77fa5619ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/109658332a75ca91d6dc2bf573e0ab77fa5619ca/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "199e3b73c712a74e36bbb75eebf9e9418f1b1341", "url": "https://api.github.com/repos/rust-lang/rust/commits/199e3b73c712a74e36bbb75eebf9e9418f1b1341", "html_url": "https://github.com/rust-lang/rust/commit/199e3b73c712a74e36bbb75eebf9e9418f1b1341"}], "stats": {"total": 86, "additions": 52, "deletions": 34}, "files": [{"sha": "fc0b9ee9a8562ea93eb60ecf43b063cdd5fe9b61", "filename": "crates/libanalysis/src/lib.rs", "status": "modified", "additions": 36, "deletions": 33, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/109658332a75ca91d6dc2bf573e0ab77fa5619ca/crates%2Flibanalysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109658332a75ca91d6dc2bf573e0ab77fa5619ca/crates%2Flibanalysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Flib.rs?ref=109658332a75ca91d6dc2bf573e0ab77fa5619ca", "patch": "@@ -20,7 +20,6 @@ use std::{\n         atomic::{AtomicUsize, Ordering::SeqCst},\n     },\n     collections::hash_map::HashMap,\n-    path::{PathBuf, Path},\n     time::Instant,\n };\n \n@@ -38,6 +37,7 @@ pub type Result<T> = ::std::result::Result<T, ::failure::Error>;\n const INDEXING_THRESHOLD: usize = 128;\n \n pub struct WorldState {\n+    next_file_id: u32,\n     data: Arc<WorldData>\n }\n \n@@ -46,9 +46,13 @@ pub struct World {\n     data: Arc<WorldData>,\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+pub struct FileId(u32);\n+\n impl WorldState {\n     pub fn new() -> WorldState {\n         WorldState {\n+            next_file_id: 0,\n             data: Arc::new(WorldData::default())\n         }\n     }\n@@ -57,21 +61,27 @@ impl WorldState {\n         World { data: self.data.clone() }\n     }\n \n-    pub fn change_file(&mut self, path: PathBuf, text: Option<String>) {\n-        self.change_files(::std::iter::once((path, text)));\n+    pub fn new_file_id(&mut self) -> FileId {\n+        let id = FileId(self.next_file_id);\n+        self.next_file_id += 1;\n+        id\n+    }\n+\n+    pub fn change_file(&mut self, file_id: FileId, text: Option<String>) {\n+        self.change_files(::std::iter::once((file_id, text)));\n     }\n \n-    pub fn change_files(&mut self, changes: impl Iterator<Item=(PathBuf, Option<String>)>) {\n+    pub fn change_files(&mut self, changes: impl Iterator<Item=(FileId, Option<String>)>) {\n         let data = self.data_mut();\n         let mut cnt = 0;\n-        for (path, text) in changes {\n+        for (id, text) in changes {\n             cnt += 1;\n-            data.file_map.remove(&path);\n+            data.file_map.remove(&id);\n             if let Some(text) = text {\n                 let file_data = FileData::new(text);\n-                data.file_map.insert(path, Arc::new(file_data));\n+                data.file_map.insert(id, Arc::new(file_data));\n             } else {\n-                data.file_map.remove(&path);\n+                data.file_map.remove(&id);\n             }\n         }\n         *data.unindexed.get_mut() += cnt;\n@@ -92,37 +102,33 @@ impl WorldState {\n \n \n impl World {\n-    pub fn file_syntax(&self, path: &Path) -> Result<ast::File> {\n-        let data = self.file_data(path)?;\n-        Ok(data.syntax(path).clone())\n+    pub fn file_syntax(&self, file_id: FileId) -> Result<ast::File> {\n+        let data = self.file_data(file_id)?;\n+        Ok(data.syntax().clone())\n     }\n \n-    pub fn file_line_index(&self, path: &Path) -> Result<LineIndex> {\n-        let data = self.file_data(path)?;\n+    pub fn file_line_index(&self, id: FileId) -> Result<LineIndex> {\n+        let data = self.file_data(id)?;\n         let index = data.lines\n-            .get_or_init(|| {\n-                trace!(\"calc line index: {}\", path.display());\n-                LineIndex::new(&data.text)\n-            });\n+            .get_or_init(|| LineIndex::new(&data.text));\n         Ok(index.clone())\n     }\n \n-    pub fn world_symbols<'a>(&'a self, mut query: Query) -> impl Iterator<Item=(&'a Path, &'a FileSymbol)> + 'a {\n+    pub fn world_symbols<'a>(&'a self, mut query: Query) -> impl Iterator<Item=(FileId, &'a FileSymbol)> + 'a {\n         self.reindex();\n         self.data.file_map.iter()\n-            .flat_map(move |(path, data)| {\n+            .flat_map(move |(id, data)| {\n                 let symbols = data.symbols();\n-                let path: &'a Path = path.as_path();\n-                query.process(symbols).into_iter().map(move |s| (path, s))\n+                query.process(symbols).into_iter().map(move |s| (*id, s))\n             })\n     }\n \n     pub fn approximately_resolve_symbol<'a>(\n         &'a self,\n-        path: &Path,\n+        id: FileId,\n         offset: TextUnit,\n-    ) -> Result<Vec<(&'a Path, &'a FileSymbol)>> {\n-        let file = self.file_syntax(path)?;\n+    ) -> Result<Vec<(FileId, &'a FileSymbol)>> {\n+        let file = self.file_syntax(id)?;\n         let syntax = file.syntax();\n         let syntax = syntax.as_ref();\n         let name_ref =\n@@ -160,10 +166,10 @@ impl World {\n         }\n     }\n \n-    fn file_data(&self, path: &Path) -> Result<Arc<FileData>> {\n-        match self.data.file_map.get(path) {\n+    fn file_data(&self, file_id: FileId) -> Result<Arc<FileData>> {\n+        match self.data.file_map.get(&file_id) {\n             Some(data) => Ok(data.clone()),\n-            None => bail!(\"unknown file: {}\", path.display()),\n+            None => bail!(\"unknown file: {:?}\", file_id),\n         }\n     }\n }\n@@ -182,7 +188,7 @@ pub const BREAK: SearchResult = Err(Break);\n #[derive(Default, Debug)]\n struct WorldData {\n     unindexed: AtomicUsize,\n-    file_map: HashMap<PathBuf, Arc<FileData>>,\n+    file_map: HashMap<FileId, Arc<FileData>>,\n }\n \n #[derive(Debug)]\n@@ -203,12 +209,9 @@ impl FileData {\n         }\n     }\n \n-    fn syntax(&self, path: &Path) -> &ast::File {\n+    fn syntax(&self) -> &ast::File {\n         self.syntax\n-            .get_or_init(|| {\n-                trace!(\"parsing: {}\", path.display());\n-                ast::File::parse(&self.text)\n-            })\n+            .get_or_init(|| ast::File::parse(&self.text))\n     }\n \n     fn syntax_transient(&self) -> ast::File {"}, {"sha": "fbae767e56a78528ade3f99d656f2c54005f724c", "filename": "crates/libsyntax2/src/lexer/strings.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/109658332a75ca91d6dc2bf573e0ab77fa5619ca/crates%2Flibsyntax2%2Fsrc%2Flexer%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109658332a75ca91d6dc2bf573e0ab77fa5619ca/crates%2Flibsyntax2%2Fsrc%2Flexer%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Flexer%2Fstrings.rs?ref=109658332a75ca91d6dc2bf573e0ab77fa5619ca", "patch": "@@ -55,14 +55,26 @@ pub(crate) fn scan_string(ptr: &mut Ptr) {\n }\n \n pub(crate) fn scan_raw_string(ptr: &mut Ptr) {\n+    let mut hashes = 0;\n+    while ptr.next_is('#') {\n+        hashes += 1;\n+        ptr.bump();\n+    }\n     if !ptr.next_is('\"') {\n         return;\n     }\n     ptr.bump();\n \n     while let Some(c) = ptr.bump() {\n         if c == '\"' {\n-            return;\n+            let mut hashes_left = hashes;\n+            while ptr.next_is('#') && hashes_left > 0{\n+                hashes_left -= 1;\n+                ptr.bump();\n+            }\n+            if hashes_left == 0 {\n+                return;\n+            }\n         }\n     }\n }"}, {"sha": "e5ed0b693b390d94f2826d0bb0af5dee2fd990a2", "filename": "crates/libsyntax2/tests/data/lexer/0013_raw_strings.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/109658332a75ca91d6dc2bf573e0ab77fa5619ca/crates%2Flibsyntax2%2Ftests%2Fdata%2Flexer%2F0013_raw_strings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109658332a75ca91d6dc2bf573e0ab77fa5619ca/crates%2Flibsyntax2%2Ftests%2Fdata%2Flexer%2F0013_raw_strings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Flexer%2F0013_raw_strings.rs?ref=109658332a75ca91d6dc2bf573e0ab77fa5619ca", "patch": "@@ -0,0 +1 @@\n+r###\"this is a r##\"raw\"## string\"###"}, {"sha": "9cf0957d1e69932d371c0cf9518b7e76bdf7993d", "filename": "crates/libsyntax2/tests/data/lexer/0013_raw_strings.txt", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/109658332a75ca91d6dc2bf573e0ab77fa5619ca/crates%2Flibsyntax2%2Ftests%2Fdata%2Flexer%2F0013_raw_strings.txt", "raw_url": "https://github.com/rust-lang/rust/raw/109658332a75ca91d6dc2bf573e0ab77fa5619ca/crates%2Flibsyntax2%2Ftests%2Fdata%2Flexer%2F0013_raw_strings.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Flexer%2F0013_raw_strings.txt?ref=109658332a75ca91d6dc2bf573e0ab77fa5619ca", "patch": "@@ -0,0 +1,2 @@\n+RAW_STRING 36 \"r###\\\"this is a r##\\\"raw\\\"## string\\\"###\"\n+WHITESPACE 1 \"\\n\""}]}