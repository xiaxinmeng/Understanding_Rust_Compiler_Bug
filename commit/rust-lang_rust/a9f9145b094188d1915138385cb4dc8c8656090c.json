{"sha": "a9f9145b094188d1915138385cb4dc8c8656090c", "node_id": "C_kwDOAAsO6NoAKGE5ZjkxNDViMDk0MTg4ZDE5MTUxMzgzODVjYjRkYzhjODY1NjA5MGM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-28T17:13:13Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-28T17:32:48Z"}, "message": "CTFE: exposing pointers and calling extern fn doesn't need an RFC, it is just impossible", "tree": {"sha": "a38cec92b1a9edb3916a1ae1ce6056ae17185227", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a38cec92b1a9edb3916a1ae1ce6056ae17185227"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9f9145b094188d1915138385cb4dc8c8656090c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9f9145b094188d1915138385cb4dc8c8656090c", "html_url": "https://github.com/rust-lang/rust/commit/a9f9145b094188d1915138385cb4dc8c8656090c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9f9145b094188d1915138385cb4dc8c8656090c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee285eab69d515114ed54a8e6c25e359acd6b684", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee285eab69d515114ed54a8e6c25e359acd6b684", "html_url": "https://github.com/rust-lang/rust/commit/ee285eab69d515114ed54a8e6c25e359acd6b684"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "55b5bbc70650f238dbe0dcffd7a1a94c270d19ff", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9f9145b094188d1915138385cb4dc8c8656090c/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f9145b094188d1915138385cb4dc8c8656090c/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=a9f9145b094188d1915138385cb4dc8c8656090c", "patch": "@@ -269,9 +269,10 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                     );\n                     throw_inval!(AlreadyReported(guar));\n                 } else {\n+                    // `find_mir_or_eval_fn` checks that this is a const fn before even calling us,\n+                    // so this should be unreachable.\n                     let path = ecx.tcx.def_path_str(def.did);\n-                    Err(ConstEvalErrKind::NeedsRfc(format!(\"calling extern function `{}`\", path))\n-                        .into())\n+                    bug!(\"trying to call extern function `{path}` at compile-time\");\n                 }\n             }\n             _ => Ok(ecx.tcx.instance_mir(instance)),\n@@ -469,7 +470,8 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         _ptr: Pointer<AllocId>,\n     ) -> InterpResult<'tcx> {\n-        Err(ConstEvalErrKind::NeedsRfc(\"exposing pointers\".to_string()).into())\n+        // This is only reachable with -Zunleash-the-miri-inside-of-you.\n+        throw_unsup_format!(\"exposing pointers is not possible at compile-time\")\n     }\n \n     #[inline(always)]"}, {"sha": "8df6737b83980891768aaee2496426643e587fa4", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9f9145b094188d1915138385cb4dc8c8656090c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f9145b094188d1915138385cb4dc8c8656090c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=a9f9145b094188d1915138385cb4dc8c8656090c", "patch": "@@ -490,6 +490,7 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n     ) -> InterpResult<$tcx, Pointer<Option<AllocId>>> {\n         // Allow these casts, but make the pointer not dereferenceable.\n         // (I.e., they behave like transmutation.)\n+        // This is correct because no pointers can ever be exposed in compile-time evaluation.\n         Ok(Pointer::from_addr(addr))\n     }\n "}, {"sha": "2d5cb9b683460b6cafa3a994d96a28bb4ef7cf3b", "filename": "src/test/ui/consts/miri_unleashed/ptr_arith.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9f9145b094188d1915138385cb4dc8c8656090c/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f9145b094188d1915138385cb4dc8c8656090c/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.rs?ref=a9f9145b094188d1915138385cb4dc8c8656090c", "patch": "@@ -8,7 +8,7 @@\n static PTR_INT_CAST: () = {\n     let x = &0 as *const _ as usize;\n     //~^ ERROR could not evaluate static initializer\n-    //~| \"exposing pointers\" needs an rfc before being allowed inside constants\n+    //~| exposing pointers\n     let _v = x == x;\n };\n "}, {"sha": "f5c5ee2b8ebad330a511c8135d59483909a34d04", "filename": "src/test/ui/consts/miri_unleashed/ptr_arith.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9f9145b094188d1915138385cb4dc8c8656090c/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9f9145b094188d1915138385cb4dc8c8656090c/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr?ref=a9f9145b094188d1915138385cb4dc8c8656090c", "patch": "@@ -2,7 +2,7 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/ptr_arith.rs:9:13\n    |\n LL |     let x = &0 as *const _ as usize;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^ \"exposing pointers\" needs an rfc before being allowed inside constants\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^ exposing pointers is not possible at compile-time\n \n error[E0080]: could not evaluate static initializer\n   --> $DIR/ptr_arith.rs:17:14"}]}