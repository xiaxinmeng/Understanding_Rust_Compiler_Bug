{"sha": "ac31d52324f3a0c41b5daabd842e36448fd95aae", "node_id": "C_kwDOAAsO6NoAKGFjMzFkNTIzMjRmM2EwYzQxYjVkYWFiZDg0MmUzNjQ0OGZkOTVhYWU", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-11-02T12:37:37Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-11-23T18:58:56Z"}, "message": "implement PlaceBuilder::try_ty", "tree": {"sha": "33cc73e3897f9ee6076de735f9b6a4fcab075967", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33cc73e3897f9ee6076de735f9b6a4fcab075967"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac31d52324f3a0c41b5daabd842e36448fd95aae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac31d52324f3a0c41b5daabd842e36448fd95aae", "html_url": "https://github.com/rust-lang/rust/commit/ac31d52324f3a0c41b5daabd842e36448fd95aae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac31d52324f3a0c41b5daabd842e36448fd95aae/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80b3c6dbde3ff89a44f8eaa63e08054398b30ecd", "url": "https://api.github.com/repos/rust-lang/rust/commits/80b3c6dbde3ff89a44f8eaa63e08054398b30ecd", "html_url": "https://github.com/rust-lang/rust/commit/80b3c6dbde3ff89a44f8eaa63e08054398b30ecd"}], "stats": {"total": 110, "additions": 75, "deletions": 35}, "files": [{"sha": "12e075a08c2514beff4551cc625ccabc27b7d575", "filename": "Cargo.lock", "status": "modified", "additions": 17, "deletions": 35, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ac31d52324f3a0c41b5daabd842e36448fd95aae/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ac31d52324f3a0c41b5daabd842e36448fd95aae/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ac31d52324f3a0c41b5daabd842e36448fd95aae", "patch": "@@ -285,7 +285,7 @@ dependencies = [\n \n [[package]]\n name = \"cargo\"\n-version = \"0.68.0\"\n+version = \"0.67.0\"\n dependencies = [\n  \"anyhow\",\n  \"atty\",\n@@ -307,7 +307,6 @@ dependencies = [\n  \"glob\",\n  \"hex 0.4.2\",\n  \"home\",\n- \"http-auth\",\n  \"humantime 2.0.1\",\n  \"ignore\",\n  \"im-rc\",\n@@ -350,11 +349,11 @@ dependencies = [\n \n [[package]]\n name = \"cargo-credential\"\n-version = \"0.2.0\"\n+version = \"0.1.0\"\n \n [[package]]\n name = \"cargo-credential-1password\"\n-version = \"0.2.0\"\n+version = \"0.1.0\"\n dependencies = [\n  \"cargo-credential\",\n  \"serde\",\n@@ -363,15 +362,15 @@ dependencies = [\n \n [[package]]\n name = \"cargo-credential-macos-keychain\"\n-version = \"0.2.0\"\n+version = \"0.1.0\"\n dependencies = [\n  \"cargo-credential\",\n  \"security-framework\",\n ]\n \n [[package]]\n name = \"cargo-credential-wincred\"\n-version = \"0.2.0\"\n+version = \"0.1.0\"\n dependencies = [\n  \"cargo-credential\",\n  \"winapi\",\n@@ -425,6 +424,7 @@ dependencies = [\n  \"glob\",\n  \"itertools\",\n  \"lazy_static\",\n+ \"remove_dir_all\",\n  \"serde_json\",\n  \"snapbox\",\n  \"tar\",\n@@ -436,7 +436,7 @@ dependencies = [\n \n [[package]]\n name = \"cargo-util\"\n-version = \"0.2.3\"\n+version = \"0.2.2\"\n dependencies = [\n  \"anyhow\",\n  \"core-foundation\",\n@@ -446,7 +446,7 @@ dependencies = [\n  \"jobserver\",\n  \"libc\",\n  \"log\",\n- \"miow 0.5.0\",\n+ \"miow\",\n  \"same-file\",\n  \"shell-escape\",\n  \"tempfile\",\n@@ -808,7 +808,7 @@ dependencies = [\n  \"lazy_static\",\n  \"lazycell\",\n  \"libc\",\n- \"miow 0.3.7\",\n+ \"miow\",\n  \"miropt-test-tools\",\n  \"regex\",\n  \"rustfix\",\n@@ -833,7 +833,7 @@ dependencies = [\n  \"lazy_static\",\n  \"libc\",\n  \"log\",\n- \"miow 0.3.7\",\n+ \"miow\",\n  \"regex\",\n  \"rustfix\",\n  \"serde\",\n@@ -846,9 +846,9 @@ dependencies = [\n \n [[package]]\n name = \"concolor\"\n-version = \"0.0.9\"\n+version = \"0.0.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b90f9dcd9490a97db91a85ccd79e38a87e14323f0bb824659ee3274e9143ba37\"\n+checksum = \"015267563b1df20adccdd00cb05257b1dfbea70a04928e9cf88ffb850c1a40af\"\n dependencies = [\n  \"atty\",\n  \"bitflags\",\n@@ -857,9 +857,9 @@ dependencies = [\n \n [[package]]\n name = \"concolor-query\"\n-version = \"0.1.0\"\n+version = \"0.0.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"82a90734b3d5dcf656e7624cca6bce9c3a90ee11f900e80141a7427ccfb3d317\"\n+checksum = \"d6417fe6fc03a8b533fd2177742eeb39a90c7233eedec7bac96d4d6b69a09449\"\n \n [[package]]\n name = \"content_inspector\"\n@@ -909,7 +909,7 @@ dependencies = [\n \n [[package]]\n name = \"crates-io\"\n-version = \"0.35.0\"\n+version = \"0.34.0\"\n dependencies = [\n  \"anyhow\",\n  \"curl\",\n@@ -1698,15 +1698,6 @@ dependencies = [\n  \"syn\",\n ]\n \n-[[package]]\n-name = \"http-auth\"\n-version = \"0.1.6\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c0b40b39d66c28829a0cf4d09f7e139ff8201f7500a5083732848ed3b4b4d850\"\n-dependencies = [\n- \"memchr\",\n-]\n-\n [[package]]\n name = \"humantime\"\n version = \"1.3.0\"\n@@ -2309,15 +2300,6 @@ dependencies = [\n  \"winapi\",\n ]\n \n-[[package]]\n-name = \"miow\"\n-version = \"0.5.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"52ffbca2f655e33c08be35d87278e5b18b89550a37dbd598c20db92f6a471123\"\n-dependencies = [\n- \"windows-sys\",\n-]\n-\n [[package]]\n name = \"miri\"\n version = \"0.1.0\"\n@@ -4711,9 +4693,9 @@ checksum = \"da73c8f77aebc0e40c300b93f0a5f1bece7a248a36eee287d4e095f35c7b7d6e\"\n \n [[package]]\n name = \"snapbox\"\n-version = \"0.4.1\"\n+version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"827c00e91b15e2674d8a5270bae91f898693cbf9561cbb58d8eaa31974597293\"\n+checksum = \"44d199ccf8f606592df2d145db26f2aa45344e23c64b074cc5a4047f1d99b0f7\"\n dependencies = [\n  \"concolor\",\n  \"content_inspector\","}, {"sha": "b6f2e3de66827cf857b1686242c486149b08501d", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/ac31d52324f3a0c41b5daabd842e36448fd95aae/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac31d52324f3a0c41b5daabd842e36448fd95aae/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=ac31d52324f3a0c41b5daabd842e36448fd95aae", "patch": "@@ -323,6 +323,64 @@ impl<'tcx> PlaceBuilder<'tcx> {\n             projection: Vec::from_iter(self.projection.iter().copied().chain([elem])),\n         }\n     }\n+\n+    pub fn try_ty<D>(&self, local_decls: &D, cx: &Builder<'_, 'tcx>) -> Option<Ty<'tcx>>\n+    where\n+        D: HasLocalDecls<'tcx>,\n+    {\n+        let tcx = cx.tcx;\n+\n+        let project_ty = |ty: Ty<'tcx>, elem: &PlaceElem<'tcx>| -> Ty<'tcx> {\n+            match elem {\n+                ProjectionElem::Deref => {\n+                    ty.builtin_deref(true)\n+                        .unwrap_or_else(|| {\n+                            bug!(\"deref projection of non-dereferenceable ty {:?}\", ty)\n+                        })\n+                        .ty\n+                }\n+                ProjectionElem::Index(_) | ProjectionElem::ConstantIndex { .. } => {\n+                    ty.builtin_index().unwrap()\n+                }\n+                ProjectionElem::Subslice { from, to, from_end } => match ty.kind() {\n+                    ty::Slice(..) => ty,\n+                    ty::Array(inner, _) if !from_end => tcx.mk_array(*inner, (to - from) as u64),\n+                    ty::Array(inner, size) if *from_end => {\n+                        let size = size.eval_usize(tcx, ty::ParamEnv::empty());\n+                        let len = size - (*from as u64) - (*to as u64);\n+                        tcx.mk_array(*inner, len)\n+                    }\n+                    _ => bug!(\"cannot subslice non-array type: `{:?}`\", ty),\n+                },\n+                ProjectionElem::Downcast(..) => ty,\n+                ProjectionElem::Field(_, ty) | ProjectionElem::OpaqueCast(ty) => *ty,\n+            }\n+        };\n+\n+        match self.base {\n+            PlaceBase::Local(local) => {\n+                let base_ty = local_decls.local_decls()[local].ty;\n+                Some(self.projection.iter().fold(base_ty, |ty, &elem| project_ty(ty, &elem)))\n+            }\n+            PlaceBase::Upvar { .. } => {\n+                match to_upvars_resolved_place_builder(self.clone(), cx) {\n+                    Ok(resolved_place_builder) => {\n+                        // `base` is guaranteed to be `PlaceBase::Local` now, so recursive call is ok\n+                        resolved_place_builder.try_ty(local_decls, cx)\n+                    }\n+                    Err(place_builder) => {\n+                        match &place_builder.projection[..] {\n+                            &[ProjectionElem::OpaqueCast(base_ty), ref projections @ ..] => Some(\n+                                projections.iter().fold(base_ty, |ty, &elem| project_ty(ty, &elem)),\n+                            ),\n+\n+                            _ => None, // would need a base `Ty` for these\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n }\n \n impl<'tcx> From<Local> for PlaceBuilder<'tcx> {"}]}