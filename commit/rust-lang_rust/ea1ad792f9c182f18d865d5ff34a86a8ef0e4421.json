{"sha": "ea1ad792f9c182f18d865d5ff34a86a8ef0e4421", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMWFkNzkyZjljMTgyZjE4ZDg2NWQ1ZmYzNGE4NmE4ZWYwZTQ0MjE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-02T16:39:47Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-02T19:21:37Z"}, "message": "Evaluate projection predicates during trait selection. Fixes #20296.", "tree": {"sha": "a859b05e35f85c751b613f15c9215eed3c12ca3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a859b05e35f85c751b613f15c9215eed3c12ca3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea1ad792f9c182f18d865d5ff34a86a8ef0e4421", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea1ad792f9c182f18d865d5ff34a86a8ef0e4421", "html_url": "https://github.com/rust-lang/rust/commit/ea1ad792f9c182f18d865d5ff34a86a8ef0e4421", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea1ad792f9c182f18d865d5ff34a86a8ef0e4421/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cddb41dd1fd7ace99fbc653b8aca48a0feba9c48", "url": "https://api.github.com/repos/rust-lang/rust/commits/cddb41dd1fd7ace99fbc653b8aca48a0feba9c48", "html_url": "https://github.com/rust-lang/rust/commit/cddb41dd1fd7ace99fbc653b8aca48a0feba9c48"}], "stats": {"total": 119, "additions": 107, "deletions": 12}, "files": [{"sha": "ef8fbdfaa6c3e5a830da1b8252af97ca220fda33", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 34, "deletions": 12, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ea1ad792f9c182f18d865d5ff34a86a8ef0e4421/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea1ad792f9c182f18d865d5ff34a86a8ef0e4421/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=ea1ad792f9c182f18d865d5ff34a86a8ef0e4421", "patch": "@@ -289,6 +289,23 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n     }\n \n+    fn evaluate_predicates_recursively<'a,'o,I>(&mut self,\n+                                                stack: Option<&TraitObligationStack<'o, 'tcx>>,\n+                                                mut predicates: I)\n+                                                -> EvaluationResult<'tcx>\n+        where I : Iterator<&'a PredicateObligation<'tcx>>, 'tcx:'a\n+    {\n+        let mut result = EvaluatedToOk;\n+        for obligation in predicates {\n+            match self.evaluate_predicate_recursively(stack, obligation) {\n+                EvaluatedToErr(e) => { return EvaluatedToErr(e); }\n+                EvaluatedToAmbig => { result = EvaluatedToAmbig; }\n+                EvaluatedToOk => { }\n+            }\n+        }\n+        result\n+    }\n+\n     fn evaluate_predicate_recursively<'o>(&mut self,\n                                           previous_stack: Option<&TraitObligationStack<'o, 'tcx>>,\n                                           obligation: &PredicateObligation<'tcx>)\n@@ -320,9 +337,22 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 EvaluatedToOk\n             }\n \n-            ty::Predicate::Projection(..) => {\n-                // FIXME(#20296) -- we should be able to give a more precise answer here\n-                EvaluatedToAmbig\n+            ty::Predicate::Projection(ref data) => {\n+                let result = self.infcx.probe(|_| {\n+                    let project_obligation = obligation.with(data.clone());\n+                    project::poly_project_and_unify_type(self, &project_obligation)\n+                });\n+                match result {\n+                    Ok(Some(subobligations)) => {\n+                        self.evaluate_predicates_recursively(previous_stack, subobligations.iter())\n+                    }\n+                    Ok(None) => {\n+                        EvaluatedToAmbig\n+                    }\n+                    Err(_) => {\n+                        EvaluatedToErr(Unimplemented)\n+                    }\n+                }\n             }\n         }\n     }\n@@ -1026,15 +1056,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             selection: Selection<'tcx>)\n                             -> EvaluationResult<'tcx>\n     {\n-        let mut result = EvaluatedToOk;\n-        for obligation in selection.iter_nested() {\n-            match self.evaluate_predicate_recursively(stack, obligation) {\n-                EvaluatedToErr(e) => { return EvaluatedToErr(e); }\n-                EvaluatedToAmbig => { result = EvaluatedToAmbig; }\n-                EvaluatedToOk => { }\n-            }\n-        }\n-        result\n+        self.evaluate_predicates_recursively(stack, selection.iter_nested())\n     }\n \n     /// Returns true if `candidate_i` should be dropped in favor of `candidate_j`."}, {"sha": "4efd0ef348d331860b9d84afdfe258b70afe871a", "filename": "src/test/run-pass/associated-types-conditional-dispatch.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/ea1ad792f9c182f18d865d5ff34a86a8ef0e4421/src%2Ftest%2Frun-pass%2Fassociated-types-conditional-dispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea1ad792f9c182f18d865d5ff34a86a8ef0e4421/src%2Ftest%2Frun-pass%2Fassociated-types-conditional-dispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-conditional-dispatch.rs?ref=ea1ad792f9c182f18d865d5ff34a86a8ef0e4421", "patch": "@@ -0,0 +1,73 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we evaluate projection predicates to winnow out\n+// candidates during trait selection and method resolution (#20296).\n+// If we don't properly winnow out candidates based on the output type\n+// `Output=[A]`, then the impl marked with `(*)` is seen to conflict\n+// with all the others.\n+\n+#![feature(associated_types, default_type_params)]\n+\n+use std::ops::Deref;\n+\n+pub trait MyEq<Sized? U=Self> for Sized? {\n+    fn eq(&self, u: &U) -> bool;\n+}\n+\n+impl<A, B> MyEq<[B]> for [A]\n+    where A : MyEq<B>\n+{\n+    fn eq(&self, other: &[B]) -> bool {\n+        self.len() == other.len() &&\n+            self.iter().zip(other.iter())\n+                       .all(|(a, b)| MyEq::eq(a, b))\n+    }\n+}\n+\n+// (*) This impl conflicts with everything unless the `Output=[A]`\n+// constraint is considered.\n+impl<'a, A, B, Lhs> MyEq<[B; 0]> for Lhs\n+    where A: MyEq<B>, Lhs: Deref<Output=[A]>\n+{\n+    fn eq(&self, other: &[B; 0]) -> bool {\n+        MyEq::eq(&**self, other.as_slice())\n+    }\n+}\n+\n+struct DerefWithHelper<H, T> {\n+    pub helper: H\n+}\n+\n+trait Helper<T> {\n+    fn helper_borrow(&self) -> &T;\n+}\n+\n+impl<T> Helper<T> for Option<T> {\n+    fn helper_borrow(&self) -> &T {\n+        self.as_ref().unwrap()\n+    }\n+}\n+\n+impl<T, H: Helper<T>> Deref for DerefWithHelper<H, T> {\n+    type Output = T;\n+\n+    fn deref(&self) -> &T {\n+        self.helper.helper_borrow()\n+    }\n+}\n+\n+pub fn check<T: MyEq>(x: T, y: T) -> bool {\n+    let d: DerefWithHelper<Option<T>, T> = DerefWithHelper { helper: Some(x) };\n+    d.eq(&y)\n+}\n+\n+pub fn main() {\n+}"}]}