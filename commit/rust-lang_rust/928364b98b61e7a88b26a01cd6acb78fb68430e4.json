{"sha": "928364b98b61e7a88b26a01cd6acb78fb68430e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyODM2NGI5OGI2MWU3YTg4YjI2YTAxY2Q2YWNiNzhmYjY4NDMwZTQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-20T12:19:33Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-20T12:19:33Z"}, "message": "Only make symbols external when they are actually externally accessible\n\nCloses #2030", "tree": {"sha": "734f78ece3f9ffceb714e14a6962f8dd3b2ee920", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/734f78ece3f9ffceb714e14a6962f8dd3b2ee920"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/928364b98b61e7a88b26a01cd6acb78fb68430e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/928364b98b61e7a88b26a01cd6acb78fb68430e4", "html_url": "https://github.com/rust-lang/rust/commit/928364b98b61e7a88b26a01cd6acb78fb68430e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/928364b98b61e7a88b26a01cd6acb78fb68430e4/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ade1207ba35fd7bafd9391b9f14a2a3d0e4f85fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ade1207ba35fd7bafd9391b9f14a2a3d0e4f85fc", "html_url": "https://github.com/rust-lang/rust/commit/ade1207ba35fd7bafd9391b9f14a2a3d0e4f85fc"}], "stats": {"total": 58, "additions": 33, "deletions": 25}, "files": [{"sha": "a69ba168fe3cfa4629e2e65b1fda8efb2661c39c", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 15, "deletions": 24, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/928364b98b61e7a88b26a01cd6acb78fb68430e4/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928364b98b61e7a88b26a01cd6acb78fb68430e4/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=928364b98b61e7a88b26a01cd6acb78fb68430e4", "patch": "@@ -1898,7 +1898,7 @@ fn monomorphic_fn(ccx: @crate_ctxt, fn_id: ast::def_id, real_substs: [ty::t],\n \n     let pt = *pt + [path_name(ccx.names(name))];\n     let s = mangle_exported_name(ccx, pt, mono_ty);\n-    let lldecl = decl_cdecl_fn(ccx.llmod, s, llfty);\n+    let lldecl = decl_internal_cdecl_fn(ccx.llmod, s, llfty);\n     ccx.monomorphized.insert(hash_id, lldecl);\n     ccx.item_symbols.insert(fn_id.node, s);\n \n@@ -1982,12 +1982,14 @@ fn maybe_instantiate_inline(ccx: @crate_ctxt, fn_id: ast::def_id)\n           }\n           csearch::found(ast::ii_method(impl_did, mth)) {\n             ccx.external.insert(fn_id, some(mth.id));\n-            compute_ii_method_info(ccx, impl_did, mth) {|ty, bounds, path|\n-                if bounds.len() == 0u {\n-                    let llfn = get_item_val(ccx, mth.id);\n-                    trans_fn(ccx, path, mth.decl, mth.body,\n-                             llfn, impl_self(ty), none, mth.id, none);\n-                }\n+            let {bounds: impl_bnds, ty: impl_ty} =\n+                ty::lookup_item_type(ccx.tcx, impl_did);\n+            if (*impl_bnds).len() + mth.tps.len() == 0u {\n+                let llfn = get_item_val(ccx, mth.id);\n+                let path = ty::item_path(ccx.tcx, impl_did) +\n+                    [path_name(mth.ident)];\n+                trans_fn(ccx, path, mth.decl, mth.body,\n+                         llfn, impl_self(impl_ty), none, mth.id, none);\n             }\n             local_def(mth.id)\n           }\n@@ -4173,18 +4175,6 @@ fn trans_mod(ccx: @crate_ctxt, m: ast::_mod) {\n     for item in m.items { trans_item(ccx, *item); }\n }\n \n-fn compute_ii_method_info(ccx: @crate_ctxt,\n-                          impl_did: ast::def_id,\n-                          m: @ast::method,\n-                          f: fn(ty::t, [ty::param_bounds], ast_map::path)) {\n-    let {bounds: impl_bnds, ty: impl_ty} =\n-        ty::lookup_item_type(ccx.tcx, impl_did);\n-    let m_bounds = *impl_bnds + param_bounds(ccx, m.tps);\n-    let impl_path = ty::item_path(ccx.tcx, impl_did);\n-    let m_path = impl_path + [path_name(m.ident)];\n-    f(impl_ty, m_bounds, m_path);\n-}\n-\n fn get_pair_fn_ty(llpairty: TypeRef) -> TypeRef {\n     // Bit of a kludge: pick the fn typeref out of the pair.\n     ret struct_elt(llpairty, 0u);\n@@ -4196,11 +4186,6 @@ fn register_fn(ccx: @crate_ctxt, sp: span, path: path, flav: str,\n     register_fn_full(ccx, sp, path, flav, node_id, t)\n }\n \n-fn param_bounds(ccx: @crate_ctxt, tps: [ast::ty_param])\n-        -> [ty::param_bounds] {\n-    vec::map(tps) {|tp| ccx.tcx.ty_param_bounds.get(tp.id) }\n-}\n-\n fn register_fn_full(ccx: @crate_ctxt, sp: span, path: path, flav: str,\n                     node_id: ast::node_id, node_type: ty::t) -> ValueRef {\n     let llfty = type_of_fn_from_ty(ccx, node_type);\n@@ -4333,6 +4318,7 @@ fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n     alt ccx.item_vals.find(id) {\n       some(v) { v }\n       none {\n+        let exprt = false;\n         let val = alt check ccx.tcx.items.get(id) {\n           ast_map::node_item(i, pth) {\n             let my_path = *pth + [path_name(i.ident)];\n@@ -4368,6 +4354,7 @@ fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n             }\n           }\n           ast_map::node_method(m, impl_id, pth) {\n+            exprt = true;\n             let mty = ty::node_id_to_type(ccx.tcx, id);\n             let pth = *pth + [path_name(int::str(impl_id.node)),\n                               path_name(m.ident)];\n@@ -4377,6 +4364,7 @@ fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n             llfn\n           }\n           ast_map::node_native_item(ni, _, pth) {\n+            exprt = true;\n             native::decl_native_fn(ccx, ni, *pth + [path_name(ni.ident)])\n           }\n           ast_map::node_ctor(i, _) {\n@@ -4405,6 +4393,9 @@ fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n             llfn\n           }\n         };\n+        if !(exprt || ccx.reachable.contains_key(id)) {\n+            lib::llvm::SetLinkage(val, lib::llvm::InternalLinkage);\n+        }\n         ccx.item_vals.insert(id, val);\n         val\n       }"}, {"sha": "eabb3c0cd5c42439913e3be250658f426e6cabe6", "filename": "src/rustc/middle/trans/reachable.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/928364b98b61e7a88b26a01cd6acb78fb68430e4/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928364b98b61e7a88b26a01cd6acb78fb68430e4/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=928364b98b61e7a88b26a01cd6acb78fb68430e4", "patch": "@@ -98,7 +98,24 @@ fn traverse_public_item(cx: ctx, item: @item) {\n             }\n         }\n       }\n-      item_class(_tps, _items, _) {} // FIXME handle these when stable\n+      item_class(tps, items, ctor) {\n+        cx.rmap.insert(ctor.node.id, ());\n+        for item in items {\n+            alt item.node.decl {\n+              class_method(i) {\n+                cx.rmap.insert(i.id, ());\n+                if tps.len() > 0u ||\n+                   attr::find_inline_attr(i.attrs) != attr::ia_none {\n+                    alt i.node {\n+                      item_fn(_, _, blk) { traverse_inline_body(cx, blk); }\n+                      _ {}\n+                    }\n+                }\n+              }\n+              _ {}\n+            }\n+        }\n+      }\n       item_const(_, _) | item_ty(_, _) | item_enum(_, _) | item_iface(_, _) {}\n     }\n }"}]}