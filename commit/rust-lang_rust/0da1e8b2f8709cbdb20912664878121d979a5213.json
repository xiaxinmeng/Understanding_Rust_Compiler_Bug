{"sha": "0da1e8b2f8709cbdb20912664878121d979a5213", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkYTFlOGIyZjg3MDljYmRiMjA5MTI2NjQ4NzgxMjFkOTc5YTUyMTM=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-26T17:47:22Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-27T16:59:21Z"}, "message": "Add a FnSig to Ty::FnDef", "tree": {"sha": "70aadf8088268e247471dfb1927c313cf457e3c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70aadf8088268e247471dfb1927c313cf457e3c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0da1e8b2f8709cbdb20912664878121d979a5213", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0da1e8b2f8709cbdb20912664878121d979a5213", "html_url": "https://github.com/rust-lang/rust/commit/0da1e8b2f8709cbdb20912664878121d979a5213", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0da1e8b2f8709cbdb20912664878121d979a5213/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "089b1c57c1774eb1aacec53828ce2d2648adff2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/089b1c57c1774eb1aacec53828ce2d2648adff2d", "html_url": "https://github.com/rust-lang/rust/commit/089b1c57c1774eb1aacec53828ce2d2648adff2d"}], "stats": {"total": 162, "additions": 94, "deletions": 68}, "files": [{"sha": "9332aca9a48653a6461865dce91224b1abb7e482", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 64, "deletions": 38, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/0da1e8b2f8709cbdb20912664878121d979a5213/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da1e8b2f8709cbdb20912664878121d979a5213/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=0da1e8b2f8709cbdb20912664878121d979a5213", "patch": "@@ -34,7 +34,7 @@ use test_utils::tested_by;\n \n use crate::{\n     Module, Function, Struct, StructField, Enum, EnumVariant, Path, Name, ImplBlock,\n-    FnScopes, ModuleDef, AdtDef,\n+    FnSignature, FnScopes, ModuleDef, AdtDef,\n     db::HirDatabase,\n     type_ref::{TypeRef, Mutability},\n     name::KnownName,\n@@ -225,6 +225,8 @@ pub enum Ty {\n         def: Function,\n         /// For display\n         name: Name,\n+        /// Parameters and return type\n+        sig: Arc<FnSig>,\n         /// Substitutions for the generic parameters of the type\n         substs: Substs,\n     },\n@@ -544,7 +546,12 @@ impl Ty {\n                 name,\n                 substs,\n             },\n-            Ty::FnDef { def, name, .. } => Ty::FnDef { def, name, substs },\n+            Ty::FnDef { def, name, sig, .. } => Ty::FnDef {\n+                def,\n+                name,\n+                sig,\n+                substs,\n+            },\n             _ => self,\n         }\n     }\n@@ -607,7 +614,9 @@ impl fmt::Display for Ty {\n                     .to_fmt(f)?;\n                 write!(f, \" -> {}\", sig.output)\n             }\n-            Ty::FnDef { name, substs, .. } => {\n+            Ty::FnDef {\n+                name, substs, sig, ..\n+            } => {\n                 // don't have access to the param types here :-(\n                 // we could store them in the def, but not sure if it\n                 // is worth it\n@@ -618,7 +627,11 @@ impl fmt::Display for Ty {\n                         .separator(\", \")\n                         .to_fmt(f)?;\n                 }\n-                Ok(())\n+                join(sig.input.iter())\n+                    .surround_with(\"(\", \")\")\n+                    .separator(\", \")\n+                    .to_fmt(f)?;\n+                write!(f, \" -> {}\", sig.output)\n             }\n             Ty::Adt { name, substs, .. } => {\n                 write!(f, \"{}\", name)?;\n@@ -641,12 +654,29 @@ impl fmt::Display for Ty {\n \n /// Compute the declared type of a function. This should not need to look at the\n /// function body.\n-fn type_for_fn(db: &impl HirDatabase, f: Function) -> Ty {\n-    let generics = f.generic_params(db);\n+fn type_for_fn(db: &impl HirDatabase, def: Function) -> Ty {\n+    let signature = def.signature(db);\n+    let module = def.module(db);\n+    let impl_block = def.impl_block(db);\n+    let generics = def.generic_params(db);\n+    let input = signature\n+        .params()\n+        .iter()\n+        .map(|tr| Ty::from_hir(db, &module, impl_block.as_ref(), &generics, tr))\n+        .collect::<Vec<_>>();\n+    let output = Ty::from_hir(\n+        db,\n+        &module,\n+        impl_block.as_ref(),\n+        &generics,\n+        signature.ret_type(),\n+    );\n+    let sig = Arc::new(FnSig { input, output });\n     let substs = make_substs(&generics);\n-    let name = f.name(db);\n+    let name = def.name(db);\n     Ty::FnDef {\n-        def: f.into(),\n+        def,\n+        sig,\n         name,\n         substs,\n     }\n@@ -923,7 +953,9 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         self.type_of_pat.insert(pat, ty);\n     }\n \n-    fn make_ty(&mut self, type_ref: &TypeRef, generics: &GenericParams) -> Ty {\n+    fn make_ty(&mut self, type_ref: &TypeRef) -> Ty {\n+        // TODO provide generics of function\n+        let generics = GenericParams::default();\n         let ty = Ty::from_hir(\n             self.db,\n             &self.module,\n@@ -1337,7 +1369,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n                 for (arg_pat, arg_type) in args.iter().zip(arg_types.iter()) {\n                     let expected = if let Some(type_ref) = arg_type {\n-                        let ty = self.make_ty(type_ref, &GenericParams::default());\n+                        let ty = self.make_ty(type_ref);\n                         ty\n                     } else {\n                         Ty::Unknown\n@@ -1355,16 +1387,14 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let callee_ty = self.infer_expr(*callee, &Expectation::none());\n                 let (param_tys, ret_ty) = match &callee_ty {\n                     Ty::FnPtr(sig) => (sig.input.clone(), sig.output.clone()),\n-                    Ty::FnDef { def, substs, .. } => {\n-                        let fn_sig = def.signature(self.db);\n-                        let generic_params = def.generic_params(self.db);\n-                        let ret_ty = self\n-                            .make_ty(fn_sig.ret_type(), &generic_params)\n-                            .subst(&substs);\n-                        let param_tys = fn_sig\n-                            .params()\n+                    Ty::FnDef {\n+                        def, substs, sig, ..\n+                    } => {\n+                        let ret_ty = sig.output.clone().subst(&substs);\n+                        let param_tys = sig\n+                            .input\n                             .iter()\n-                            .map(|type_ref| self.make_ty(type_ref, &generic_params).subst(&substs))\n+                            .map(|ty| ty.clone().subst(&substs))\n                             .collect();\n                         (param_tys, ret_ty)\n                     }\n@@ -1407,17 +1437,13 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                             (Ty::Unknown, Vec::new(), sig.output.clone())\n                         }\n                     }\n-                    Ty::FnDef { def, substs, .. } => {\n-                        let fn_sig = def.signature(self.db);\n-                        let generic_params = def.generic_params(self.db);\n-                        let ret_ty = self\n-                            .make_ty(fn_sig.ret_type(), &generic_params)\n-                            .subst(&substs);\n-\n-                        if fn_sig.params().len() > 0 {\n-                            let mut arg_iter = fn_sig.params().iter().map(|type_ref| {\n-                                self.make_ty(type_ref, &generic_params).subst(&substs)\n-                            });\n+                    Ty::FnDef {\n+                        def, substs, sig, ..\n+                    } => {\n+                        let ret_ty = sig.output.clone().subst(&substs);\n+\n+                        if sig.input.len() > 0 {\n+                            let mut arg_iter = sig.input.iter().map(|ty| ty.clone().subst(&substs));\n                             let receiver_ty = arg_iter.next().unwrap();\n                             (receiver_ty, arg_iter.collect(), ret_ty)\n                         } else {\n@@ -1515,7 +1541,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             }\n             Expr::Cast { expr, type_ref } => {\n                 let _inner_ty = self.infer_expr(*expr, &Expectation::none());\n-                let cast_ty = self.make_ty(type_ref, &GenericParams::default());\n+                let cast_ty = self.make_ty(type_ref);\n                 // TODO check the cast...\n                 cast_ty\n             }\n@@ -1629,7 +1655,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 } => {\n                     let decl_ty = type_ref\n                         .as_ref()\n-                        .map(|tr| self.make_ty(tr, &GenericParams::default()))\n+                        .map(|tr| self.make_ty(tr))\n                         .unwrap_or(Ty::Unknown);\n                     let decl_ty = self.insert_type_vars(decl_ty);\n                     let ty = if let Some(expr) = initializer {\n@@ -1654,16 +1680,14 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         ty\n     }\n \n-    fn collect_fn_signature(&mut self, func: Function) {\n+    fn collect_fn_signature(&mut self, signature: &FnSignature) {\n         let body = Arc::clone(&self.body); // avoid borrow checker problem\n-        let signature = func.signature(self.db);\n-        let generics = func.generic_params(self.db);\n         for (type_ref, pat) in signature.params().iter().zip(body.params()) {\n-            let ty = self.make_ty(type_ref, &generics);\n+            let ty = self.make_ty(type_ref);\n \n             self.infer_pat(*pat, &ty);\n         }\n-        self.return_ty = self.make_ty(signature.ret_type(), &generics);\n+        self.return_ty = self.make_ty(signature.ret_type());\n     }\n \n     fn infer_body(&mut self) {\n@@ -1682,7 +1706,9 @@ pub fn infer(db: &impl HirDatabase, func: Function) -> Arc<InferenceResult> {\n     let impl_block = func.impl_block(db);\n     let mut ctx = InferenceContext::new(db, body, scopes, module, impl_block);\n \n-    ctx.collect_fn_signature(func);\n+    let signature = func.signature(db);\n+    ctx.collect_fn_signature(&signature);\n+\n     ctx.infer_body();\n \n     Arc::new(ctx.resolve_all())"}, {"sha": "84fbe6e4c5989c9582b731741229a694360806df", "filename": "crates/ra_hir/src/ty/snapshots/tests__generic_fn.snap", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0da1e8b2f8709cbdb20912664878121d979a5213/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__generic_fn.snap", "raw_url": "https://github.com/rust-lang/rust/raw/0da1e8b2f8709cbdb20912664878121d979a5213/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__generic_fn.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__generic_fn.snap?ref=0da1e8b2f8709cbdb20912664878121d979a5213", "patch": "@@ -1,23 +1,23 @@\n ---\n-created: \"2019-01-25T23:18:55.019197432+00:00\"\n+created: \"2019-01-26T17:46:03.963745056+00:00\"\n creator: insta@0.5.2\n expression: \"&result\"\n source: crates/ra_hir/src/ty/tests.rs\n ---\n-[10; 11) 'x': T\n-[21; 30) '{     x }': T\n-[27; 28) 'x': T\n-[44; 45) 'x': &T\n-[56; 65) '{     x }': &T\n-[62; 63) 'x': &T\n+[10; 11) 'x': [unknown]\n+[21; 30) '{     x }': [unknown]\n+[27; 28) 'x': [unknown]\n+[44; 45) 'x': &[unknown]\n+[56; 65) '{     x }': &[unknown]\n+[62; 63) 'x': &[unknown]\n [77; 138) '{     ...(z); }': ()\n [87; 88) 'y': u32\n [91; 96) '10u32': u32\n-[102; 104) 'id': fn id<u32>\n+[102; 104) 'id': fn id<u32>(T) -> T\n [102; 107) 'id(y)': u32\n [105; 106) 'y': u32\n [117; 118) 'x': bool\n-[127; 132) 'clone': fn clone<bool>\n+[127; 132) 'clone': fn clone<bool>(&T) -> T\n [127; 135) 'clone(z)': bool\n [133; 134) 'z': &bool\n "}, {"sha": "f5840a934748e8c244010bed30ae39c2a0bd0799", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_backwards.snap", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0da1e8b2f8709cbdb20912664878121d979a5213/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_backwards.snap", "raw_url": "https://github.com/rust-lang/rust/raw/0da1e8b2f8709cbdb20912664878121d979a5213/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_backwards.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_backwards.snap?ref=0da1e8b2f8709cbdb20912664878121d979a5213", "patch": "@@ -1,5 +1,5 @@\n ---\n-created: \"2019-01-25T23:18:54.943309491+00:00\"\n+created: \"2019-01-26T17:46:03.842478456+00:00\"\n creator: insta@0.5.2\n expression: \"&result\"\n source: crates/ra_hir/src/ty/tests.rs\n@@ -10,7 +10,7 @@ source: crates/ra_hir/src/ty/tests.rs\n [88; 89) 'a': u32\n [92; 108) 'unknow...nction': [unknown]\n [92; 110) 'unknow...tion()': u32\n-[116; 125) 'takes_u32': fn takes_u32\n+[116; 125) 'takes_u32': fn takes_u32(u32) -> ()\n [116; 128) 'takes_u32(a)': ()\n [126; 127) 'a': u32\n [138; 139) 'b': i32"}, {"sha": "b9dda2bc073cafb2045e8b9abb3e7393fceee114", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_binary_op.snap", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0da1e8b2f8709cbdb20912664878121d979a5213/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_binary_op.snap", "raw_url": "https://github.com/rust-lang/rust/raw/0da1e8b2f8709cbdb20912664878121d979a5213/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_binary_op.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_binary_op.snap?ref=0da1e8b2f8709cbdb20912664878121d979a5213", "patch": "@@ -1,5 +1,5 @@\n ---\n-created: \"2019-01-25T23:18:54.949540810+00:00\"\n+created: \"2019-01-26T17:46:03.853259898+00:00\"\n creator: insta@0.5.2\n expression: \"&result\"\n source: crates/ra_hir/src/ty/tests.rs\n@@ -28,7 +28,7 @@ source: crates/ra_hir/src/ty/tests.rs\n [174; 196) 'minus_...ONST_2': bool\n [189; 196) 'CONST_2': isize\n [206; 207) 'c': i32\n-[210; 211) 'f': fn f\n+[210; 211) 'f': fn f(bool) -> i32\n [210; 219) 'f(z || y)': i32\n [210; 223) 'f(z || y) + 5': i32\n [212; 213) 'z': bool"}, {"sha": "369705f84ccedc0b7cce507035a9ae1fbd0a8f37", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_function_generics.snap", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0da1e8b2f8709cbdb20912664878121d979a5213/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_function_generics.snap", "raw_url": "https://github.com/rust-lang/rust/raw/0da1e8b2f8709cbdb20912664878121d979a5213/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_function_generics.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_function_generics.snap?ref=0da1e8b2f8709cbdb20912664878121d979a5213", "patch": "@@ -1,21 +1,21 @@\n ---\n-created: \"2019-01-25T23:18:54.962273460+00:00\"\n+created: \"2019-01-26T17:46:03.856278205+00:00\"\n creator: insta@0.5.2\n expression: \"&result\"\n source: crates/ra_hir/src/ty/tests.rs\n ---\n-[10; 11) 't': T\n-[21; 26) '{ t }': T\n-[23; 24) 't': T\n+[10; 11) 't': [unknown]\n+[21; 26) '{ t }': [unknown]\n+[23; 24) 't': [unknown]\n [38; 98) '{     ...(1); }': ()\n-[44; 46) 'id': fn id<u32>\n+[44; 46) 'id': fn id<u32>(T) -> T\n [44; 52) 'id(1u32)': u32\n [47; 51) '1u32': u32\n-[58; 68) 'id::<i128>': fn id<i32>\n+[58; 68) 'id::<i128>': fn id<i32>(T) -> T\n [58; 71) 'id::<i128>(1)': i32\n [69; 70) '1': i32\n [81; 82) 'x': u64\n-[90; 92) 'id': fn id<u64>\n+[90; 92) 'id': fn id<u64>(T) -> T\n [90; 95) 'id(1)': u64\n [93; 94) '1': u64\n "}, {"sha": "f21bffa75450b20cf4f9ad263fd3187f645cefc9", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_generic_chain.snap", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0da1e8b2f8709cbdb20912664878121d979a5213/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_generic_chain.snap", "raw_url": "https://github.com/rust-lang/rust/raw/0da1e8b2f8709cbdb20912664878121d979a5213/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_generic_chain.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_generic_chain.snap?ref=0da1e8b2f8709cbdb20912664878121d979a5213", "patch": "@@ -1,5 +1,5 @@\n ---\n-created: \"2019-01-25T23:18:54.978506051+00:00\"\n+created: \"2019-01-26T17:46:03.866825843+00:00\"\n creator: insta@0.5.2\n expression: \"&result\"\n source: crates/ra_hir/src/ty/tests.rs\n@@ -8,23 +8,23 @@ source: crates/ra_hir/src/ty/tests.rs\n [65; 87) '{     ...     }': [unknown]\n [75; 79) 'self': A<[unknown]>\n [75; 81) 'self.x': [unknown]\n-[99; 100) 't': T\n-[110; 115) '{ t }': T\n-[112; 113) 't': T\n+[99; 100) 't': [unknown]\n+[110; 115) '{ t }': [unknown]\n+[112; 113) 't': [unknown]\n [135; 261) '{     ....x() }': i128\n [146; 147) 'x': i32\n [150; 151) '1': i32\n [162; 163) 'y': i32\n-[166; 168) 'id': fn id<i32>\n+[166; 168) 'id': fn id<i32>(T) -> T\n [166; 171) 'id(x)': i32\n [169; 170) 'x': i32\n [182; 183) 'a': A<i32>\n [186; 200) 'A { x: id(y) }': A<i32>\n-[193; 195) 'id': fn id<i32>\n+[193; 195) 'id': fn id<i32>(T) -> T\n [193; 198) 'id(y)': i32\n [196; 197) 'y': i32\n [211; 212) 'z': i32\n-[215; 217) 'id': fn id<i32>\n+[215; 217) 'id': fn id<i32>(T) -> T\n [215; 222) 'id(a.x)': i32\n [218; 219) 'a': A<i32>\n [218; 221) 'a.x': i32"}, {"sha": "afbe2f747aabf9b1ab1d3d6d0052d7b1453ba989", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_paths.snap", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0da1e8b2f8709cbdb20912664878121d979a5213/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_paths.snap", "raw_url": "https://github.com/rust-lang/rust/raw/0da1e8b2f8709cbdb20912664878121d979a5213/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_paths.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_paths.snap?ref=0da1e8b2f8709cbdb20912664878121d979a5213", "patch": "@@ -1,5 +1,5 @@\n ---\n-created: \"2019-01-25T23:18:54.985011010+00:00\"\n+created: \"2019-01-26T17:46:03.928773630+00:00\"\n creator: insta@0.5.2\n expression: \"&result\"\n source: crates/ra_hir/src/ty/tests.rs\n@@ -9,8 +9,8 @@ source: crates/ra_hir/src/ty/tests.rs\n [48; 53) '{ 1 }': u32\n [50; 51) '1': u32\n [67; 91) '{     ...c(); }': ()\n-[73; 74) 'a': fn a\n+[73; 74) 'a': fn a() -> u32\n [73; 76) 'a()': u32\n-[82; 86) 'b::c': fn c\n+[82; 86) 'b::c': fn c() -> u32\n [82; 88) 'b::c()': u32\n "}]}