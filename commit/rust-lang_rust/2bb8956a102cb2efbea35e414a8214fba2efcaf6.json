{"sha": "2bb8956a102cb2efbea35e414a8214fba2efcaf6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYjg5NTZhMTAyY2IyZWZiZWEzNWU0MTRhODIxNGZiYTJlZmNhZjY=", "commit": {"author": {"name": "oxalica", "email": "oxalicc@pm.me", "date": "2021-03-14T10:00:11Z"}, "committer": {"name": "oxalica", "email": "oxalicc@pm.me", "date": "2021-03-15T17:03:07Z"}, "message": "Introduce FunctionQualifier for hir::FunctionData", "tree": {"sha": "d1ab34b0c43e603f294ecb8f09ae5b5a5736d809", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1ab34b0c43e603f294ecb8f09ae5b5a5736d809"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bb8956a102cb2efbea35e414a8214fba2efcaf6", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXLDp5dXVcfV/VA/qztOS3gxIPQAFAmBPk00ACgkQztOS3gxI\nPQDzCQ//QNGxDnl8+LNtkvxyYzLxodS+sPbMEsF7NeFl8IqRDDbP49f7UGCFDGDd\neFbkLojKYd8AOQXtF8iwVmgiLHl1Kh7P5qWstmJcdtcbmsseTuN9oYDLpmKAPYxi\ncazyCwJ23gVBjK59E7MAfrue8pgz3uBjImoQFQXgoaRk8Y3Pm7CPTdz7dOijuVpl\nvYtBP9M/UwqIcgZnhOPtg1igCxUpbXwSHYP3DBHm0WqFqPqP43k552chOiITZ+wV\nk0y7QPjUlEpmjLByxqMtnxn3L5HnK3Bst89TDea86gX6CR4D0qCbLVI3Cwx5urjp\nzeVabk6jQsw3dCWk65zGnpPTtc/Z22FdX5+2if9tKoksu8cGV3ers72NGE/8p/SN\nmYhVHdlG801+nH+4od+24nZQTiT9+UazQbtCmbP6iCyOnIfKVDJ0hxvr765ziUJl\nKXQ28J4+cMY1j6eHNrijiTWedHMyfQfeUDPamvHHpU1nRhXCvJJH61QwKUz79io5\ntOTGgMhIG8X5rRZtw5QFRzDq06q96oLt2n+5nPb42tZlZCjXTDci6VgdOr68KxEZ\nDxZnsnLWcJ5bp6TDgfuNXkIZmagDdw56S6MruX5Z/uZvzQlGfjLCBrWdWuu/U4tC\n9QKKfsEVBtkYmh4JLGYcg+MowxC0LR6Pd+9gurucDuouaeNp+Es=\n=z0Sw\n-----END PGP SIGNATURE-----", "payload": "tree d1ab34b0c43e603f294ecb8f09ae5b5a5736d809\nparent b9c172a977135760006b6222820ac7240be67d58\nauthor oxalica <oxalicc@pm.me> 1615716011 +0800\ncommitter oxalica <oxalicc@pm.me> 1615827787 +0800\n\nIntroduce FunctionQualifier for hir::FunctionData\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bb8956a102cb2efbea35e414a8214fba2efcaf6", "html_url": "https://github.com/rust-lang/rust/commit/2bb8956a102cb2efbea35e414a8214fba2efcaf6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bb8956a102cb2efbea35e414a8214fba2efcaf6/comments", "author": {"login": "oxalica", "id": 14816024, "node_id": "MDQ6VXNlcjE0ODE2MDI0", "avatar_url": "https://avatars.githubusercontent.com/u/14816024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxalica", "html_url": "https://github.com/oxalica", "followers_url": "https://api.github.com/users/oxalica/followers", "following_url": "https://api.github.com/users/oxalica/following{/other_user}", "gists_url": "https://api.github.com/users/oxalica/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxalica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxalica/subscriptions", "organizations_url": "https://api.github.com/users/oxalica/orgs", "repos_url": "https://api.github.com/users/oxalica/repos", "events_url": "https://api.github.com/users/oxalica/events{/privacy}", "received_events_url": "https://api.github.com/users/oxalica/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oxalica", "id": 14816024, "node_id": "MDQ6VXNlcjE0ODE2MDI0", "avatar_url": "https://avatars.githubusercontent.com/u/14816024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxalica", "html_url": "https://github.com/oxalica", "followers_url": "https://api.github.com/users/oxalica/followers", "following_url": "https://api.github.com/users/oxalica/following{/other_user}", "gists_url": "https://api.github.com/users/oxalica/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxalica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxalica/subscriptions", "organizations_url": "https://api.github.com/users/oxalica/orgs", "repos_url": "https://api.github.com/users/oxalica/repos", "events_url": "https://api.github.com/users/oxalica/events{/privacy}", "received_events_url": "https://api.github.com/users/oxalica/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9c172a977135760006b6222820ac7240be67d58", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9c172a977135760006b6222820ac7240be67d58", "html_url": "https://github.com/rust-lang/rust/commit/b9c172a977135760006b6222820ac7240be67d58"}], "stats": {"total": 62, "additions": 45, "deletions": 17}, "files": [{"sha": "0d0e757fca7fed244fdca3ee660221506e1dd904", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bb8956a102cb2efbea35e414a8214fba2efcaf6/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb8956a102cb2efbea35e414a8214fba2efcaf6/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=2bb8956a102cb2efbea35e414a8214fba2efcaf6", "patch": "@@ -844,7 +844,7 @@ impl Function {\n     }\n \n     pub fn is_unsafe(self, db: &dyn HirDatabase) -> bool {\n-        db.function_data(self.id).is_unsafe\n+        db.function_data(self.id).qualifier.is_unsafe\n     }\n \n     pub fn diagnostics(self, db: &dyn HirDatabase, sink: &mut DiagnosticSink) {"}, {"sha": "b09da06979d591826e6ebf6f256f97ac53e490c7", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2bb8956a102cb2efbea35e414a8214fba2efcaf6/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb8956a102cb2efbea35e414a8214fba2efcaf6/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=2bb8956a102cb2efbea35e414a8214fba2efcaf6", "patch": "@@ -9,7 +9,7 @@ use crate::{\n     attr::Attrs,\n     body::Expander,\n     db::DefDatabase,\n-    item_tree::{AssocItem, ItemTreeId, ModItem},\n+    item_tree::{AssocItem, FunctionQualifier, ItemTreeId, ModItem},\n     type_ref::{TypeBound, TypeRef},\n     visibility::RawVisibility,\n     AssocContainerId, AssocItemId, ConstId, ConstLoc, FunctionId, FunctionLoc, HasModule, ImplId,\n@@ -26,9 +26,9 @@ pub struct FunctionData {\n     /// can be called as a method.\n     pub has_self_param: bool,\n     pub has_body: bool,\n-    pub is_unsafe: bool,\n+    pub qualifier: FunctionQualifier,\n+    pub is_in_extern_block: bool,\n     pub is_varargs: bool,\n-    pub is_extern: bool,\n     pub visibility: RawVisibility,\n }\n \n@@ -46,9 +46,9 @@ impl FunctionData {\n             attrs: item_tree.attrs(db, krate, ModItem::from(loc.id.value).into()),\n             has_self_param: func.has_self_param,\n             has_body: func.has_body,\n-            is_unsafe: func.is_unsafe,\n+            qualifier: func.qualifier.clone(),\n+            is_in_extern_block: func.is_in_extern_block,\n             is_varargs: func.is_varargs,\n-            is_extern: func.is_extern,\n             visibility: item_tree[func.visibility].clone(),\n         })\n     }"}, {"sha": "d8f22d4429684ad3804f4bcf24ff51bfe9b4323d", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2bb8956a102cb2efbea35e414a8214fba2efcaf6/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb8956a102cb2efbea35e414a8214fba2efcaf6/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=2bb8956a102cb2efbea35e414a8214fba2efcaf6", "patch": "@@ -24,7 +24,7 @@ use la_arena::{Arena, Idx, RawIdx};\n use profile::Count;\n use rustc_hash::FxHashMap;\n use smallvec::SmallVec;\n-use syntax::{ast, match_ast, SyntaxKind};\n+use syntax::{ast, match_ast, SmolStr, SyntaxKind};\n \n use crate::{\n     attr::{Attrs, RawAttrs},\n@@ -551,16 +551,25 @@ pub struct Function {\n     pub generic_params: GenericParamsId,\n     pub has_self_param: bool,\n     pub has_body: bool,\n-    pub is_unsafe: bool,\n+    pub qualifier: FunctionQualifier,\n     /// Whether the function is located in an `extern` block (*not* whether it is an\n     /// `extern \"abi\" fn`).\n-    pub is_extern: bool,\n+    pub is_in_extern_block: bool,\n     pub params: Box<[Idx<TypeRef>]>,\n     pub is_varargs: bool,\n     pub ret_type: Idx<TypeRef>,\n     pub ast_id: FileAstId<ast::Fn>,\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct FunctionQualifier {\n+    pub is_default: bool,\n+    pub is_const: bool,\n+    pub is_async: bool,\n+    pub is_unsafe: bool,\n+    pub abi: Option<SmolStr>,\n+}\n+\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Struct {\n     pub name: Name,"}, {"sha": "6b5438dc93d3f249dbb807fa40d74b988fc017b1", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2bb8956a102cb2efbea35e414a8214fba2efcaf6/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb8956a102cb2efbea35e414a8214fba2efcaf6/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=2bb8956a102cb2efbea35e414a8214fba2efcaf6", "patch": "@@ -391,14 +391,33 @@ impl Ctx {\n         let has_body = func.body().is_some();\n \n         let ast_id = self.source_ast_id_map.ast_id(func);\n+        let qualifier = FunctionQualifier {\n+            is_default: func.default_token().is_some(),\n+            is_const: func.const_token().is_some(),\n+            is_async: func.async_token().is_some(),\n+            is_unsafe: func.unsafe_token().is_some(),\n+            abi: func.abi().map(|abi| {\n+                // FIXME: Abi::abi() -> Option<SyntaxToken>?\n+                match abi.syntax().last_token() {\n+                    Some(tok) if tok.kind() == SyntaxKind::STRING => {\n+                        // FIXME: Better way to unescape?\n+                        tok.text().trim_matches('\"').into()\n+                    }\n+                    _ => {\n+                        // `extern` default to be `extern \"C\"`.\n+                        \"C\".into()\n+                    }\n+                }\n+            }),\n+        };\n         let mut res = Function {\n             name,\n             visibility,\n             generic_params: GenericParamsId::EMPTY,\n             has_self_param,\n             has_body,\n-            is_unsafe: func.unsafe_token().is_some(),\n-            is_extern: false,\n+            qualifier,\n+            is_in_extern_block: false,\n             params,\n             is_varargs,\n             ret_type,\n@@ -608,8 +627,8 @@ impl Ctx {\n                         ast::ExternItem::Fn(ast) => {\n                             let func_id = self.lower_function(&ast)?;\n                             let func = &mut self.data().functions[func_id.index];\n-                            func.is_unsafe = is_intrinsic_fn_unsafe(&func.name);\n-                            func.is_extern = true;\n+                            func.qualifier.is_unsafe = is_intrinsic_fn_unsafe(&func.name);\n+                            func.is_in_extern_block = true;\n                             func_id.into()\n                         }\n                         ast::ExternItem::Static(ast) => {"}, {"sha": "982ad5b9e0041982dd26748b4f76a2304b9267c4", "filename": "crates/hir_ty/src/diagnostics/decl_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bb8956a102cb2efbea35e414a8214fba2efcaf6/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb8956a102cb2efbea35e414a8214fba2efcaf6/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs?ref=2bb8956a102cb2efbea35e414a8214fba2efcaf6", "patch": "@@ -91,7 +91,7 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n \n     fn validate_func(&mut self, func: FunctionId) {\n         let data = self.db.function_data(func);\n-        if data.is_extern {\n+        if data.is_in_extern_block {\n             cov_mark::hit!(extern_func_incorrect_case_ignored);\n             return;\n         }"}, {"sha": "44a7e550647debda53baf7599ade10f8446772f3", "filename": "crates/hir_ty/src/diagnostics/unsafe_check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bb8956a102cb2efbea35e414a8214fba2efcaf6/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb8956a102cb2efbea35e414a8214fba2efcaf6/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs?ref=2bb8956a102cb2efbea35e414a8214fba2efcaf6", "patch": "@@ -32,7 +32,7 @@ impl<'a, 'b> UnsafeValidator<'a, 'b> {\n         let def = self.owner.into();\n         let unsafe_expressions = unsafe_expressions(db, self.infer.as_ref(), def);\n         let is_unsafe = match self.owner {\n-            DefWithBodyId::FunctionId(it) => db.function_data(it).is_unsafe,\n+            DefWithBodyId::FunctionId(it) => db.function_data(it).qualifier.is_unsafe,\n             DefWithBodyId::StaticId(_) | DefWithBodyId::ConstId(_) => false,\n         };\n         if is_unsafe\n@@ -86,7 +86,7 @@ fn walk_unsafe(\n     match expr {\n         &Expr::Call { callee, .. } => {\n             if let Some(func) = infer[callee].as_fn_def(db) {\n-                if db.function_data(func).is_unsafe {\n+                if db.function_data(func).qualifier.is_unsafe {\n                     unsafe_exprs.push(UnsafeExpr { expr: current, inside_unsafe_block });\n                 }\n             }\n@@ -103,7 +103,7 @@ fn walk_unsafe(\n         Expr::MethodCall { .. } => {\n             if infer\n                 .method_resolution(current)\n-                .map(|func| db.function_data(func).is_unsafe)\n+                .map(|func| db.function_data(func).qualifier.is_unsafe)\n                 .unwrap_or(false)\n             {\n                 unsafe_exprs.push(UnsafeExpr { expr: current, inside_unsafe_block });"}]}