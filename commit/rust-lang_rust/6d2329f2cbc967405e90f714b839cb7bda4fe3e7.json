{"sha": "6d2329f2cbc967405e90f714b839cb7bda4fe3e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMjMyOWYyY2JjOTY3NDA1ZTkwZjcxNGI4MzljYjdiZGE0ZmUzZTc=", "commit": {"author": {"name": "Luis de Bethencourt", "email": "luisbg@osg.samsung.com", "date": "2017-05-11T11:15:10Z"}, "committer": {"name": "Luis de Bethencourt", "email": "luisbg@osg.samsung.com", "date": "2017-05-11T15:22:32Z"}, "message": "clean tests/ui/for_loop.rs\n\nCleaning the empty lines for clarity.", "tree": {"sha": "f4e0538ef79ec78ae12708b299b25ab80db15a34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4e0538ef79ec78ae12708b299b25ab80db15a34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d2329f2cbc967405e90f714b839cb7bda4fe3e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d2329f2cbc967405e90f714b839cb7bda4fe3e7", "html_url": "https://github.com/rust-lang/rust/commit/6d2329f2cbc967405e90f714b839cb7bda4fe3e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d2329f2cbc967405e90f714b839cb7bda4fe3e7/comments", "author": {"login": "luisbg", "id": 303663, "node_id": "MDQ6VXNlcjMwMzY2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/303663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luisbg", "html_url": "https://github.com/luisbg", "followers_url": "https://api.github.com/users/luisbg/followers", "following_url": "https://api.github.com/users/luisbg/following{/other_user}", "gists_url": "https://api.github.com/users/luisbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/luisbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luisbg/subscriptions", "organizations_url": "https://api.github.com/users/luisbg/orgs", "repos_url": "https://api.github.com/users/luisbg/repos", "events_url": "https://api.github.com/users/luisbg/events{/privacy}", "received_events_url": "https://api.github.com/users/luisbg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luisbg", "id": 303663, "node_id": "MDQ6VXNlcjMwMzY2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/303663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luisbg", "html_url": "https://github.com/luisbg", "followers_url": "https://api.github.com/users/luisbg/followers", "following_url": "https://api.github.com/users/luisbg/following{/other_user}", "gists_url": "https://api.github.com/users/luisbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/luisbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luisbg/subscriptions", "organizations_url": "https://api.github.com/users/luisbg/orgs", "repos_url": "https://api.github.com/users/luisbg/repos", "events_url": "https://api.github.com/users/luisbg/events{/privacy}", "received_events_url": "https://api.github.com/users/luisbg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "faca269488948425e1e624a3c2abbad6fb694731", "url": "https://api.github.com/repos/rust-lang/rust/commits/faca269488948425e1e624a3c2abbad6fb694731", "html_url": "https://github.com/rust-lang/rust/commit/faca269488948425e1e624a3c2abbad6fb694731"}], "stats": {"total": 622, "additions": 201, "deletions": 421}, "files": [{"sha": "556053fdbc5d86d8b2b9be8a0142b2fe22a22c64", "filename": "tests/ui/for_loop.rs", "status": "modified", "additions": 0, "deletions": 139, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/6d2329f2cbc967405e90f714b839cb7bda4fe3e7/tests%2Fui%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2329f2cbc967405e90f714b839cb7bda4fe3e7/tests%2Fui%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.rs?ref=6d2329f2cbc967405e90f714b839cb7bda4fe3e7", "patch": "@@ -14,45 +14,30 @@ fn for_loop_over_option_and_result() {\n     let v = vec![0,1,2];\n \n     // check FOR_LOOP_OVER_OPTION lint\n-\n     for x in option {\n-\n-\n         println!(\"{}\", x);\n     }\n \n     // check FOR_LOOP_OVER_RESULT lint\n-\n     for x in result {\n-\n-\n         println!(\"{}\", x);\n     }\n \n     for x in option.ok_or(\"x not found\") {\n-\n-\n         println!(\"{}\", x);\n     }\n \n     // make sure LOOP_OVER_NEXT lint takes precedence when next() is the last call in the chain\n-\n     for x in v.iter().next() {\n-\n         println!(\"{}\", x);\n     }\n \n     // make sure we lint when next() is not the last call in the chain\n-\n     for x in v.iter().next().and(Some(0)) {\n-\n-\n         println!(\"{}\", x);\n     }\n \n     for x in v.iter().next().ok_or(\"x not found\") {\n-\n-\n         println!(\"{}\", x);\n     }\n \n@@ -97,134 +82,73 @@ fn main() {\n     let mut vec = vec![1, 2, 3, 4];\n     let vec2 = vec![1, 2, 3, 4];\n     for i in 0..vec.len() {\n-\n-\n-\n-\n         println!(\"{}\", vec[i]);\n     }\n \n     for i in 0..vec.len() {\n-\n         let i = 42; // make a different `i`\n         println!(\"{}\", vec[i]); // ok, not the `i` of the for-loop\n     }\n \n     for i in 0..vec.len() { let _ = vec[i]; }\n \n-\n-\n-\n-\n     // ICE #746\n     for j in 0..4 {\n-\n-\n-\n-\n         println!(\"{:?}\", STATIC[j]);\n     }\n \n     for j in 0..4 {\n-\n-\n-\n-\n         println!(\"{:?}\", CONST[j]);\n     }\n \n     for i in 0..vec.len() {\n-\n-\n-\n-\n         println!(\"{} {}\", vec[i], i);\n     }\n     for i in 0..vec.len() {      // not an error, indexing more than one variable\n         println!(\"{} {}\", vec[i], vec2[i]);\n     }\n \n     for i in 0..vec.len() {\n-\n-\n-\n-\n         println!(\"{}\", vec2[i]);\n     }\n \n     for i in 5..vec.len() {\n-\n-\n-\n-\n         println!(\"{}\", vec[i]);\n     }\n \n     for i in 0..MAX_LEN {\n-\n-\n-\n-\n         println!(\"{}\", vec[i]);\n     }\n \n     for i in 0...MAX_LEN {\n-\n-\n-\n-\n         println!(\"{}\", vec[i]);\n     }\n \n     for i in 5..10 {\n-\n-\n-\n-\n         println!(\"{}\", vec[i]);\n     }\n \n     for i in 5...10 {\n-\n-\n-\n-\n         println!(\"{}\", vec[i]);\n     }\n \n     for i in 5..vec.len() {\n-\n-\n-\n-\n         println!(\"{} {}\", vec[i], i);\n     }\n \n     for i in 5..10 {\n-\n-\n-\n-\n         println!(\"{} {}\", vec[i], i);\n     }\n \n     for i in 10..0 {\n-\n-\n-\n         println!(\"{}\", i);\n     }\n \n     for i in 10...0 {\n-\n-\n-\n         println!(\"{}\", i);\n     }\n \n     for i in MAX_LEN..0 {\n-\n-\n         println!(\"{}\", i);\n     }\n \n@@ -250,16 +174,10 @@ fn main() {\n \n     // testing that the empty range lint folds constants\n     for i in 10..5+4 {\n-\n-\n-\n         println!(\"{}\", i);\n     }\n \n     for i in (5+2)..(3-1) {\n-\n-\n-\n         println!(\"{}\", i);\n     }\n \n@@ -288,20 +206,11 @@ fn main() {\n \n     for _v in vec.iter() { }\n \n-\n-\n-\n     for _v in vec.iter_mut() { }\n \n-\n-\n-\n     let out_vec = vec![1,2,3];\n     for _v in out_vec.into_iter() { }\n \n-\n-\n-\n     let array = [1, 2, 3];\n     for _v in array.into_iter() {}\n \n@@ -310,61 +219,33 @@ fn main() {\n \n     for _v in [1, 2, 3].iter() { }\n \n-\n-\n-\n     for _v in (&mut [1, 2, 3]).iter() { } // no error\n \n     for _v in [0; 32].iter() {}\n \n-\n-\n-\n     for _v in [0; 33].iter() {} // no error\n \n     let ll: LinkedList<()> = LinkedList::new();\n     for _v in ll.iter() { }\n \n-\n-\n-\n     let vd: VecDeque<()> = VecDeque::new();\n     for _v in vd.iter() { }\n \n-\n-\n-\n     let bh: BinaryHeap<()> = BinaryHeap::new();\n     for _v in bh.iter() { }\n \n-\n-\n-\n     let hm: HashMap<(), ()> = HashMap::new();\n     for _v in hm.iter() { }\n \n-\n-\n-\n     let bt: BTreeMap<(), ()> = BTreeMap::new();\n     for _v in bt.iter() { }\n \n-\n-\n-\n     let hs: HashSet<()> = HashSet::new();\n     for _v in hs.iter() { }\n \n-\n-\n-\n     let bs: BTreeSet<()> = BTreeSet::new();\n     for _v in bs.iter() { }\n \n-\n-\n-\n-\n     for _v in vec.iter().next() { }\n \n     let u = Unrelated(vec![]);\n@@ -442,49 +323,29 @@ fn main() {\n \n     let m : HashMap<u64, u64> = HashMap::new();\n     for (_, v) in &m {\n-\n-\n-\n-\n         let _v = v;\n     }\n \n     let m : Rc<HashMap<u64, u64>> = Rc::new(HashMap::new());\n     for (_, v) in &*m {\n-\n-\n-\n-\n         let _v = v;\n         // Here the `*` is not actually necesarry, but the test tests that we don't suggest\n         // `in *m.values()` as we used to\n     }\n \n     let mut m : HashMap<u64, u64> = HashMap::new();\n     for (_, v) in &mut m {\n-\n-\n-\n-\n         let _v = v;\n     }\n \n     let m: &mut HashMap<u64, u64> = &mut HashMap::new();\n     for (_, v) in &mut *m {\n-\n-\n-\n-\n         let _v = v;\n     }\n \n     let m : HashMap<u64, u64> = HashMap::new();\n     let rm = &m;\n     for (k, _value) in rm {\n-\n-\n-\n-\n         let _k = k;\n     }\n "}, {"sha": "fb5592a54e70314de98d51f8f437653cf4d9dc2d", "filename": "tests/ui/for_loop.stderr", "status": "modified", "additions": 201, "deletions": 282, "changes": 483, "blob_url": "https://github.com/rust-lang/rust/blob/6d2329f2cbc967405e90f714b839cb7bda4fe3e7/tests%2Fui%2Ffor_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d2329f2cbc967405e90f714b839cb7bda4fe3e7/tests%2Fui%2Ffor_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.stderr?ref=6d2329f2cbc967405e90f714b839cb7bda4fe3e7", "patch": "@@ -1,7 +1,7 @@\n error: for loop over `option`, which is an `Option`. This is more readably written as an `if let` statement.\n-  --> $DIR/for_loop.rs:18:14\n+  --> $DIR/for_loop.rs:17:14\n    |\n-18 |     for x in option {\n+17 |     for x in option {\n    |              ^^^^^^\n    |\n    = note: #[deny(for_loop_over_option)] implied by #[deny(clippy)]\n@@ -13,9 +13,9 @@ note: lint level defined here\n    = help: consider replacing `for x in option` with `if let Some(x) = option`\n \n error: for loop over `result`, which is a `Result`. This is more readably written as an `if let` statement.\n-  --> $DIR/for_loop.rs:26:14\n+  --> $DIR/for_loop.rs:22:14\n    |\n-26 |     for x in result {\n+22 |     for x in result {\n    |              ^^^^^^\n    |\n    = note: #[deny(for_loop_over_result)] implied by #[deny(clippy)]\n@@ -27,21 +27,20 @@ note: lint level defined here\n    = help: consider replacing `for x in result` with `if let Ok(x) = result`\n \n error: for loop over `option.ok_or(\"x not found\")`, which is a `Result`. This is more readably written as an `if let` statement.\n-  --> $DIR/for_loop.rs:32:14\n+  --> $DIR/for_loop.rs:26:14\n    |\n-32 |     for x in option.ok_or(\"x not found\") {\n+26 |     for x in option.ok_or(\"x not found\") {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: #[deny(for_loop_over_result)] implied by #[deny(clippy)]\n    = help: consider replacing `for x in option.ok_or(\"x not found\")` with `if let Ok(x) = option.ok_or(\"x not found\")`\n \n error: you are iterating over `Iterator::next()` which is an Option; this will compile but is probably not what you want\n-  --> $DIR/for_loop.rs:40:5\n+  --> $DIR/for_loop.rs:31:5\n    |\n-40 | /     for x in v.iter().next() {\n-41 | |\n-42 | |         println!(\"{}\", x);\n-43 | |     }\n+31 | /     for x in v.iter().next() {\n+32 | |         println!(\"{}\", x);\n+33 | |     }\n    | |_____^\n    |\n    = note: #[deny(iter_next_loop)] implied by #[deny(clippy)]\n@@ -52,522 +51,442 @@ note: lint level defined here\n    |        ^^^^^^\n \n error: for loop over `v.iter().next().and(Some(0))`, which is an `Option`. This is more readably written as an `if let` statement.\n-  --> $DIR/for_loop.rs:47:14\n+  --> $DIR/for_loop.rs:36:14\n    |\n-47 |     for x in v.iter().next().and(Some(0)) {\n+36 |     for x in v.iter().next().and(Some(0)) {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: #[deny(for_loop_over_option)] implied by #[deny(clippy)]\n    = help: consider replacing `for x in v.iter().next().and(Some(0))` with `if let Some(x) = v.iter().next().and(Some(0))`\n \n error: for loop over `v.iter().next().ok_or(\"x not found\")`, which is a `Result`. This is more readably written as an `if let` statement.\n-  --> $DIR/for_loop.rs:53:14\n+  --> $DIR/for_loop.rs:40:14\n    |\n-53 |     for x in v.iter().next().ok_or(\"x not found\") {\n+40 |     for x in v.iter().next().ok_or(\"x not found\") {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: #[deny(for_loop_over_result)] implied by #[deny(clippy)]\n    = help: consider replacing `for x in v.iter().next().ok_or(\"x not found\")` with `if let Ok(x) = v.iter().next().ok_or(\"x not found\")`\n \n error: the loop variable `i` is only used to index `vec`.\n-   --> $DIR/for_loop.rs:99:5\n-    |\n-99  | /     for i in 0..vec.len() {\n-100 | |\n-101 | |\n-102 | |\n-103 | |\n-104 | |         println!(\"{}\", vec[i]);\n-105 | |     }\n-    | |_____^\n-    |\n+  --> $DIR/for_loop.rs:84:5\n+   |\n+84 | /     for i in 0..vec.len() {\n+85 | |         println!(\"{}\", vec[i]);\n+86 | |     }\n+   | |_____^\n+   |\n note: lint level defined here\n-   --> $DIR/for_loop.rs:90:8\n-    |\n-90  | #[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop, for_kv_map)]\n-    |        ^^^^^^^^^^^^^^^^^^^\n+  --> $DIR/for_loop.rs:75:8\n+   |\n+75 | #[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop, for_kv_map)]\n+   |        ^^^^^^^^^^^^^^^^^^^\n help: consider using an iterator\n-    |     for <item> in &vec {\n+   |     for <item> in &vec {\n \n warning: unused variable: `i`\n-   --> $DIR/for_loop.rs:107:9\n-    |\n-107 |     for i in 0..vec.len() {\n-    |         ^\n-    |\n-    = note: #[warn(unused_variables)] on by default\n+  --> $DIR/for_loop.rs:88:9\n+   |\n+88 |     for i in 0..vec.len() {\n+   |         ^\n+   |\n+   = note: #[warn(unused_variables)] on by default\n \n error: the loop variable `i` is only used to index `vec`.\n-   --> $DIR/for_loop.rs:113:5\n-    |\n-113 |     for i in 0..vec.len() { let _ = vec[i]; }\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-    |\n+  --> $DIR/for_loop.rs:93:5\n+   |\n+93 |     for i in 0..vec.len() { let _ = vec[i]; }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n help: consider using an iterator\n-    |     for <item> in &vec { let _ = vec[i]; }\n+   |     for <item> in &vec { let _ = vec[i]; }\n \n error: the loop variable `j` is only used to index `STATIC`.\n-   --> $DIR/for_loop.rs:120:5\n-    |\n-120 | /     for j in 0..4 {\n-121 | |\n-122 | |\n-123 | |\n-124 | |\n-125 | |         println!(\"{:?}\", STATIC[j]);\n-126 | |     }\n-    | |_____^\n-    |\n+  --> $DIR/for_loop.rs:96:5\n+   |\n+96 | /     for j in 0..4 {\n+97 | |         println!(\"{:?}\", STATIC[j]);\n+98 | |     }\n+   | |_____^\n+   |\n help: consider using an iterator\n-    |     for <item> in STATIC.iter().take(4) {\n+   |     for <item> in STATIC.iter().take(4) {\n \n error: the loop variable `j` is only used to index `CONST`.\n-   --> $DIR/for_loop.rs:128:5\n-    |\n-128 | /     for j in 0..4 {\n-129 | |\n-130 | |\n-131 | |\n-132 | |\n-133 | |         println!(\"{:?}\", CONST[j]);\n-134 | |     }\n+   --> $DIR/for_loop.rs:100:5\n+    |\n+100 | /     for j in 0..4 {\n+101 | |         println!(\"{:?}\", CONST[j]);\n+102 | |     }\n     | |_____^\n     |\n help: consider using an iterator\n     |     for <item> in CONST.iter().take(4) {\n \n error: the loop variable `i` is used to index `vec`\n-   --> $DIR/for_loop.rs:136:5\n-    |\n-136 | /     for i in 0..vec.len() {\n-137 | |\n-138 | |\n-139 | |\n-140 | |\n-141 | |         println!(\"{} {}\", vec[i], i);\n-142 | |     }\n+   --> $DIR/for_loop.rs:104:5\n+    |\n+104 | /     for i in 0..vec.len() {\n+105 | |         println!(\"{} {}\", vec[i], i);\n+106 | |     }\n     | |_____^\n     |\n help: consider using an iterator\n     |     for (i, <item>) in vec.iter().enumerate() {\n \n error: the loop variable `i` is only used to index `vec2`.\n-   --> $DIR/for_loop.rs:147:5\n+   --> $DIR/for_loop.rs:111:5\n     |\n-147 | /     for i in 0..vec.len() {\n-148 | |\n-149 | |\n-150 | |\n-151 | |\n-152 | |         println!(\"{}\", vec2[i]);\n-153 | |     }\n+111 | /     for i in 0..vec.len() {\n+112 | |         println!(\"{}\", vec2[i]);\n+113 | |     }\n     | |_____^\n     |\n help: consider using an iterator\n     |     for <item> in vec2.iter().take(vec.len()) {\n \n error: the loop variable `i` is only used to index `vec`.\n-   --> $DIR/for_loop.rs:155:5\n+   --> $DIR/for_loop.rs:115:5\n     |\n-155 | /     for i in 5..vec.len() {\n-156 | |\n-157 | |\n-158 | |\n-159 | |\n-160 | |         println!(\"{}\", vec[i]);\n-161 | |     }\n+115 | /     for i in 5..vec.len() {\n+116 | |         println!(\"{}\", vec[i]);\n+117 | |     }\n     | |_____^\n     |\n help: consider using an iterator\n     |     for <item> in vec.iter().skip(5) {\n \n error: the loop variable `i` is only used to index `vec`.\n-   --> $DIR/for_loop.rs:163:5\n-    |\n-163 | /     for i in 0..MAX_LEN {\n-164 | |\n-165 | |\n-166 | |\n-167 | |\n-168 | |         println!(\"{}\", vec[i]);\n-169 | |     }\n+   --> $DIR/for_loop.rs:119:5\n+    |\n+119 | /     for i in 0..MAX_LEN {\n+120 | |         println!(\"{}\", vec[i]);\n+121 | |     }\n     | |_____^\n     |\n help: consider using an iterator\n     |     for <item> in vec.iter().take(MAX_LEN) {\n \n error: the loop variable `i` is only used to index `vec`.\n-   --> $DIR/for_loop.rs:171:5\n-    |\n-171 | /     for i in 0...MAX_LEN {\n-172 | |\n-173 | |\n-174 | |\n-175 | |\n-176 | |         println!(\"{}\", vec[i]);\n-177 | |     }\n+   --> $DIR/for_loop.rs:123:5\n+    |\n+123 | /     for i in 0...MAX_LEN {\n+124 | |         println!(\"{}\", vec[i]);\n+125 | |     }\n     | |_____^\n     |\n help: consider using an iterator\n     |     for <item> in vec.iter().take(MAX_LEN + 1) {\n \n error: the loop variable `i` is only used to index `vec`.\n-   --> $DIR/for_loop.rs:179:5\n-    |\n-179 | /     for i in 5..10 {\n-180 | |\n-181 | |\n-182 | |\n-183 | |\n-184 | |         println!(\"{}\", vec[i]);\n-185 | |     }\n+   --> $DIR/for_loop.rs:127:5\n+    |\n+127 | /     for i in 5..10 {\n+128 | |         println!(\"{}\", vec[i]);\n+129 | |     }\n     | |_____^\n     |\n help: consider using an iterator\n     |     for <item> in vec.iter().take(10).skip(5) {\n \n error: the loop variable `i` is only used to index `vec`.\n-   --> $DIR/for_loop.rs:187:5\n-    |\n-187 | /     for i in 5...10 {\n-188 | |\n-189 | |\n-190 | |\n-191 | |\n-192 | |         println!(\"{}\", vec[i]);\n-193 | |     }\n+   --> $DIR/for_loop.rs:131:5\n+    |\n+131 | /     for i in 5...10 {\n+132 | |         println!(\"{}\", vec[i]);\n+133 | |     }\n     | |_____^\n     |\n help: consider using an iterator\n     |     for <item> in vec.iter().take(10 + 1).skip(5) {\n \n error: the loop variable `i` is used to index `vec`\n-   --> $DIR/for_loop.rs:195:5\n-    |\n-195 | /     for i in 5..vec.len() {\n-196 | |\n-197 | |\n-198 | |\n-199 | |\n-200 | |         println!(\"{} {}\", vec[i], i);\n-201 | |     }\n+   --> $DIR/for_loop.rs:135:5\n+    |\n+135 | /     for i in 5..vec.len() {\n+136 | |         println!(\"{} {}\", vec[i], i);\n+137 | |     }\n     | |_____^\n     |\n help: consider using an iterator\n     |     for (i, <item>) in vec.iter().enumerate().skip(5) {\n \n error: the loop variable `i` is used to index `vec`\n-   --> $DIR/for_loop.rs:203:5\n-    |\n-203 | /     for i in 5..10 {\n-204 | |\n-205 | |\n-206 | |\n-207 | |\n-208 | |         println!(\"{} {}\", vec[i], i);\n-209 | |     }\n+   --> $DIR/for_loop.rs:139:5\n+    |\n+139 | /     for i in 5..10 {\n+140 | |         println!(\"{} {}\", vec[i], i);\n+141 | |     }\n     | |_____^\n     |\n help: consider using an iterator\n     |     for (i, <item>) in vec.iter().enumerate().take(10).skip(5) {\n \n error: this range is empty so this for loop will never run\n-   --> $DIR/for_loop.rs:211:5\n-    |\n-211 | /     for i in 10..0 {\n-212 | |\n-213 | |\n-214 | |\n-215 | |         println!(\"{}\", i);\n-216 | |     }\n+   --> $DIR/for_loop.rs:143:5\n+    |\n+143 | /     for i in 10..0 {\n+144 | |         println!(\"{}\", i);\n+145 | |     }\n     | |_____^\n     |\n note: lint level defined here\n-   --> $DIR/for_loop.rs:90:90\n+   --> $DIR/for_loop.rs:75:90\n     |\n-90  | #[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop, for_kv_map)]\n+75  | #[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop, for_kv_map)]\n     |                                                                                          ^^^^^^^^^^^^^^^^^^\n help: consider using the following if you are attempting to iterate over this range in reverse\n     |     for i in (0..10).rev() {\n \n error: this range is empty so this for loop will never run\n-   --> $DIR/for_loop.rs:218:5\n-    |\n-218 | /     for i in 10...0 {\n-219 | |\n-220 | |\n-221 | |\n-222 | |         println!(\"{}\", i);\n-223 | |     }\n+   --> $DIR/for_loop.rs:147:5\n+    |\n+147 | /     for i in 10...0 {\n+148 | |         println!(\"{}\", i);\n+149 | |     }\n     | |_____^\n     |\n help: consider using the following if you are attempting to iterate over this range in reverse\n     |     for i in (0...10).rev() {\n \n error: this range is empty so this for loop will never run\n-   --> $DIR/for_loop.rs:225:5\n+   --> $DIR/for_loop.rs:151:5\n     |\n-225 | /     for i in MAX_LEN..0 {\n-226 | |\n-227 | |\n-228 | |         println!(\"{}\", i);\n-229 | |     }\n+151 | /     for i in MAX_LEN..0 {\n+152 | |         println!(\"{}\", i);\n+153 | |     }\n     | |_____^\n     |\n help: consider using the following if you are attempting to iterate over this range in reverse\n     |     for i in (0..MAX_LEN).rev() {\n \n error: this range is empty so this for loop will never run\n-   --> $DIR/for_loop.rs:231:5\n+   --> $DIR/for_loop.rs:155:5\n     |\n-231 | /     for i in 5..5 {\n-232 | |         println!(\"{}\", i);\n-233 | |     }\n+155 | /     for i in 5..5 {\n+156 | |         println!(\"{}\", i);\n+157 | |     }\n     | |_____^\n \n error: this range is empty so this for loop will never run\n-   --> $DIR/for_loop.rs:252:5\n-    |\n-252 | /     for i in 10..5+4 {\n-253 | |\n-254 | |\n-255 | |\n-256 | |         println!(\"{}\", i);\n-257 | |     }\n+   --> $DIR/for_loop.rs:176:5\n+    |\n+176 | /     for i in 10..5+4 {\n+177 | |         println!(\"{}\", i);\n+178 | |     }\n     | |_____^\n     |\n help: consider using the following if you are attempting to iterate over this range in reverse\n     |     for i in (5+4..10).rev() {\n \n error: this range is empty so this for loop will never run\n-   --> $DIR/for_loop.rs:259:5\n-    |\n-259 | /     for i in (5+2)..(3-1) {\n-260 | |\n-261 | |\n-262 | |\n-263 | |         println!(\"{}\", i);\n-264 | |     }\n+   --> $DIR/for_loop.rs:180:5\n+    |\n+180 | /     for i in (5+2)..(3-1) {\n+181 | |         println!(\"{}\", i);\n+182 | |     }\n     | |_____^\n     |\n help: consider using the following if you are attempting to iterate over this range in reverse\n     |     for i in ((3-1)..(5+2)).rev() {\n \n error: this range is empty so this for loop will never run\n-   --> $DIR/for_loop.rs:266:5\n+   --> $DIR/for_loop.rs:184:5\n     |\n-266 | /     for i in (5+2)..(8-1) {\n-267 | |         println!(\"{}\", i);\n-268 | |     }\n+184 | /     for i in (5+2)..(8-1) {\n+185 | |         println!(\"{}\", i);\n+186 | |     }\n     | |_____^\n \n error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:289:15\n+   --> $DIR/for_loop.rs:207:15\n     |\n-289 |     for _v in vec.iter() { }\n+207 |     for _v in vec.iter() { }\n     |               ^^^^^^^^^^ help: to write this more concisely, try `&vec`\n     |\n note: lint level defined here\n-   --> $DIR/for_loop.rs:90:29\n+   --> $DIR/for_loop.rs:75:29\n     |\n-90  | #[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop, for_kv_map)]\n+75  | #[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop, for_kv_map)]\n     |                             ^^^^^^^^^^^^^^^^^^\n \n error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:294:15\n+   --> $DIR/for_loop.rs:209:15\n     |\n-294 |     for _v in vec.iter_mut() { }\n+209 |     for _v in vec.iter_mut() { }\n     |               ^^^^^^^^^^^^^^ help: to write this more concisely, try `&mut vec`\n \n error: it is more idiomatic to loop over containers instead of using explicit iteration methods`\n-   --> $DIR/for_loop.rs:300:15\n+   --> $DIR/for_loop.rs:212:15\n     |\n-300 |     for _v in out_vec.into_iter() { }\n+212 |     for _v in out_vec.into_iter() { }\n     |               ^^^^^^^^^^^^^^^^^^^ help: to write this more concisely, try `out_vec`\n     |\n note: lint level defined here\n-   --> $DIR/for_loop.rs:90:49\n+   --> $DIR/for_loop.rs:75:49\n     |\n-90  | #[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop, for_kv_map)]\n+75  | #[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop, for_kv_map)]\n     |                                                 ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:306:15\n+   --> $DIR/for_loop.rs:215:15\n     |\n-306 |     for _v in array.into_iter() {}\n+215 |     for _v in array.into_iter() {}\n     |               ^^^^^^^^^^^^^^^^^ help: to write this more concisely, try `&array`\n \n error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:311:15\n+   --> $DIR/for_loop.rs:220:15\n     |\n-311 |     for _v in [1, 2, 3].iter() { }\n+220 |     for _v in [1, 2, 3].iter() { }\n     |               ^^^^^^^^^^^^^^^^ help: to write this more concisely, try `&[1, 2, 3]`\n \n error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:318:15\n+   --> $DIR/for_loop.rs:224:15\n     |\n-318 |     for _v in [0; 32].iter() {}\n+224 |     for _v in [0; 32].iter() {}\n     |               ^^^^^^^^^^^^^^ help: to write this more concisely, try `&[0; 32]`\n \n error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:326:15\n+   --> $DIR/for_loop.rs:229:15\n     |\n-326 |     for _v in ll.iter() { }\n+229 |     for _v in ll.iter() { }\n     |               ^^^^^^^^^ help: to write this more concisely, try `&ll`\n \n error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:332:15\n+   --> $DIR/for_loop.rs:232:15\n     |\n-332 |     for _v in vd.iter() { }\n+232 |     for _v in vd.iter() { }\n     |               ^^^^^^^^^ help: to write this more concisely, try `&vd`\n \n error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:338:15\n+   --> $DIR/for_loop.rs:235:15\n     |\n-338 |     for _v in bh.iter() { }\n+235 |     for _v in bh.iter() { }\n     |               ^^^^^^^^^ help: to write this more concisely, try `&bh`\n \n error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:344:15\n+   --> $DIR/for_loop.rs:238:15\n     |\n-344 |     for _v in hm.iter() { }\n+238 |     for _v in hm.iter() { }\n     |               ^^^^^^^^^ help: to write this more concisely, try `&hm`\n \n error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:350:15\n+   --> $DIR/for_loop.rs:241:15\n     |\n-350 |     for _v in bt.iter() { }\n+241 |     for _v in bt.iter() { }\n     |               ^^^^^^^^^ help: to write this more concisely, try `&bt`\n \n error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:356:15\n+   --> $DIR/for_loop.rs:244:15\n     |\n-356 |     for _v in hs.iter() { }\n+244 |     for _v in hs.iter() { }\n     |               ^^^^^^^^^ help: to write this more concisely, try `&hs`\n \n error: it is more idiomatic to loop over references to containers instead of using explicit iteration methods\n-   --> $DIR/for_loop.rs:362:15\n+   --> $DIR/for_loop.rs:247:15\n     |\n-362 |     for _v in bs.iter() { }\n+247 |     for _v in bs.iter() { }\n     |               ^^^^^^^^^ help: to write this more concisely, try `&bs`\n \n error: you are iterating over `Iterator::next()` which is an Option; this will compile but is probably not what you want\n-   --> $DIR/for_loop.rs:368:5\n+   --> $DIR/for_loop.rs:249:5\n     |\n-368 |     for _v in vec.iter().next() { }\n+249 |     for _v in vec.iter().next() { }\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n note: lint level defined here\n-   --> $DIR/for_loop.rs:90:74\n+   --> $DIR/for_loop.rs:75:74\n     |\n-90  | #[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop, for_kv_map)]\n+75  | #[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop, for_kv_map)]\n     |                                                                          ^^^^^^^^^^^^^^\n \n error: you are collect()ing an iterator and throwing away the result. Consider using an explicit for loop to exhaust the iterator\n-   --> $DIR/for_loop.rs:375:5\n+   --> $DIR/for_loop.rs:256:5\n     |\n-375 |     vec.iter().map(|x| out.push(x)).collect::<Vec<_>>();\n+256 |     vec.iter().map(|x| out.push(x)).collect::<Vec<_>>();\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n note: lint level defined here\n-   --> $DIR/for_loop.rs:91:8\n+   --> $DIR/for_loop.rs:76:8\n     |\n-91  | #[deny(unused_collect)]\n+76  | #[deny(unused_collect)]\n     |        ^^^^^^^^^^^^^^\n \n error: the variable `_index` is used as a loop counter. Consider using `for (_index, item) in &vec.enumerate()` or similar iterators\n-   --> $DIR/for_loop.rs:380:5\n+   --> $DIR/for_loop.rs:261:5\n     |\n-380 |     for _v in &vec { _index += 1 }\n+261 |     for _v in &vec { _index += 1 }\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n note: lint level defined here\n-   --> $DIR/for_loop.rs:90:110\n+   --> $DIR/for_loop.rs:75:110\n     |\n-90  | #[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop, for_kv_map)]\n+75  | #[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop, for_kv_map)]\n     |                                                                                                              ^^^^^^^^^^^^^^^^^^^^^\n \n error: the variable `_index` is used as a loop counter. Consider using `for (_index, item) in &vec.enumerate()` or similar iterators\n-   --> $DIR/for_loop.rs:384:5\n+   --> $DIR/for_loop.rs:265:5\n     |\n-384 |     for _v in &vec { _index += 1 }\n+265 |     for _v in &vec { _index += 1 }\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: you seem to want to iterate on a map's values\n-   --> $DIR/for_loop.rs:444:5\n-    |\n-444 | /     for (_, v) in &m {\n-445 | |\n-446 | |\n-447 | |\n-448 | |\n-449 | |         let _v = v;\n-450 | |     }\n+   --> $DIR/for_loop.rs:325:5\n+    |\n+325 | /     for (_, v) in &m {\n+326 | |         let _v = v;\n+327 | |     }\n     | |_____^\n     |\n note: lint level defined here\n-   --> $DIR/for_loop.rs:90:133\n+   --> $DIR/for_loop.rs:75:133\n     |\n-90  | #[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop, for_kv_map)]\n+75  | #[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop, for_kv_map)]\n     |                                                                                                                                     ^^^^^^^^^^\n help: use the corresponding method\n     |     for v in m.values() {\n \n error: you seem to want to iterate on a map's values\n-   --> $DIR/for_loop.rs:453:5\n-    |\n-453 | /     for (_, v) in &*m {\n-454 | |\n-455 | |\n-456 | |\n-...   |\n-460 | |         // `in *m.values()` as we used to\n-461 | |     }\n+   --> $DIR/for_loop.rs:330:5\n+    |\n+330 | /     for (_, v) in &*m {\n+331 | |         let _v = v;\n+332 | |         // Here the `*` is not actually necesarry, but the test tests that we don't suggest\n+333 | |         // `in *m.values()` as we used to\n+334 | |     }\n     | |_____^\n     |\n help: use the corresponding method\n     |     for v in (*m).values() {\n \n error: you seem to want to iterate on a map's values\n-   --> $DIR/for_loop.rs:464:5\n-    |\n-464 | /     for (_, v) in &mut m {\n-465 | |\n-466 | |\n-467 | |\n-468 | |\n-469 | |         let _v = v;\n-470 | |     }\n+   --> $DIR/for_loop.rs:337:5\n+    |\n+337 | /     for (_, v) in &mut m {\n+338 | |         let _v = v;\n+339 | |     }\n     | |_____^\n     |\n help: use the corresponding method\n     |     for v in m.values_mut() {\n \n error: you seem to want to iterate on a map's values\n-   --> $DIR/for_loop.rs:473:5\n-    |\n-473 | /     for (_, v) in &mut *m {\n-474 | |\n-475 | |\n-476 | |\n-477 | |\n-478 | |         let _v = v;\n-479 | |     }\n+   --> $DIR/for_loop.rs:342:5\n+    |\n+342 | /     for (_, v) in &mut *m {\n+343 | |         let _v = v;\n+344 | |     }\n     | |_____^\n     |\n help: use the corresponding method\n     |     for v in (*m).values_mut() {\n \n error: you seem to want to iterate on a map's keys\n-   --> $DIR/for_loop.rs:483:5\n-    |\n-483 | /     for (k, _value) in rm {\n-484 | |\n-485 | |\n-486 | |\n-487 | |\n-488 | |         let _k = k;\n-489 | |     }\n+   --> $DIR/for_loop.rs:348:5\n+    |\n+348 | /     for (k, _value) in rm {\n+349 | |         let _k = k;\n+350 | |     }\n     | |_____^\n     |\n help: use the corresponding method"}]}