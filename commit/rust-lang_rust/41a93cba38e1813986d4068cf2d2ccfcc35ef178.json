{"sha": "41a93cba38e1813986d4068cf2d2ccfcc35ef178", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxYTkzY2JhMzhlMTgxMzk4NmQ0MDY4Y2YyZDJjY2ZjYzM1ZWYxNzg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-01-08T18:25:42Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-01-08T18:48:04Z"}, "message": "Remove `-Z continue-parse-after-error`", "tree": {"sha": "88559a0d9e78bd44e0e5ae56e585c609a4bff4a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88559a0d9e78bd44e0e5ae56e585c609a4bff4a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41a93cba38e1813986d4068cf2d2ccfcc35ef178", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41a93cba38e1813986d4068cf2d2ccfcc35ef178", "html_url": "https://github.com/rust-lang/rust/commit/41a93cba38e1813986d4068cf2d2ccfcc35ef178", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41a93cba38e1813986d4068cf2d2ccfcc35ef178/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed6468da160bd67a2ce0573427f09a98daff8c07", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed6468da160bd67a2ce0573427f09a98daff8c07", "html_url": "https://github.com/rust-lang/rust/commit/ed6468da160bd67a2ce0573427f09a98daff8c07"}], "stats": {"total": 202, "additions": 77, "deletions": 125}, "files": [{"sha": "32ba2dd65a3fa8d5088fa05f74c165a08e587abd", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -1679,7 +1679,6 @@ impl SharedEmitterMain {\n                         d.code(code);\n                     }\n                     handler.emit_diagnostic(&d);\n-                    handler.abort_if_errors_and_should_abort();\n                 }\n                 Ok(SharedEmitterMessage::InlineAsmError(cookie, msg)) => {\n                     sess.span_err(ExpnId::from_u32(cookie).expn_data().call_site, &msg)"}, {"sha": "8fbdf44de048d74f9d9f6ca7f9a0d10b27ca8250", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -1178,7 +1178,6 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     if !info.payload().is::<errors::ExplicitBug>() {\n         let d = errors::Diagnostic::new(errors::Level::Bug, \"unexpected panic\");\n         handler.emit_diagnostic(&d);\n-        handler.abort_if_errors_and_should_abort();\n     }\n \n     let mut xs: Vec<Cow<'static, str>> = vec!["}, {"sha": "99a6d6f8ec2d49d190ceabd975df9dc7d33676d1", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -278,7 +278,6 @@ struct HandlerInner {\n     err_count: usize,\n     deduplicated_err_count: usize,\n     emitter: Box<dyn Emitter + sync::Send>,\n-    continue_after_error: bool,\n     delayed_span_bugs: Vec<Diagnostic>,\n \n     /// This set contains the `DiagnosticId` of all emitted diagnostics to avoid\n@@ -402,7 +401,6 @@ impl Handler {\n                 err_count: 0,\n                 deduplicated_err_count: 0,\n                 emitter,\n-                continue_after_error: true,\n                 delayed_span_bugs: Vec::new(),\n                 taught_diagnostics: Default::default(),\n                 emitted_diagnostic_codes: Default::default(),\n@@ -412,10 +410,6 @@ impl Handler {\n         }\n     }\n \n-    pub fn set_continue_after_error(&self, continue_after_error: bool) {\n-        self.inner.borrow_mut().continue_after_error = continue_after_error;\n-    }\n-\n     // This is here to not allow mutation of flags;\n     // as of this writing it's only used in tests in librustc.\n     pub fn can_emit_warnings(&self) -> bool {\n@@ -672,10 +666,6 @@ impl Handler {\n         self.inner.borrow_mut().abort_if_errors()\n     }\n \n-    pub fn abort_if_errors_and_should_abort(&self) {\n-        self.inner.borrow_mut().abort_if_errors_and_should_abort()\n-    }\n-\n     /// `true` if we haven't taught a diagnostic with this code already.\n     /// The caller must then teach the user about such a diagnostic.\n     ///\n@@ -696,7 +686,6 @@ impl Handler {\n     fn emit_diag_at_span(&self, mut diag: Diagnostic, sp: impl Into<MultiSpan>) {\n         let mut inner = self.inner.borrow_mut();\n         inner.emit_diagnostic(diag.set_span(sp));\n-        inner.abort_if_errors_and_should_abort();\n     }\n \n     pub fn emit_artifact_notification(&self, path: &Path, artifact_type: &str) {\n@@ -830,14 +819,6 @@ impl HandlerInner {\n         self.has_errors() || !self.delayed_span_bugs.is_empty()\n     }\n \n-    fn abort_if_errors_and_should_abort(&mut self) {\n-        self.emit_stashed_diagnostics();\n-\n-        if self.has_errors() && !self.continue_after_error {\n-            FatalError.raise();\n-        }\n-    }\n-\n     fn abort_if_errors(&mut self) {\n         self.emit_stashed_diagnostics();\n \n@@ -853,7 +834,6 @@ impl HandlerInner {\n \n     fn emit_diag_at_span(&mut self, mut diag: Diagnostic, sp: impl Into<MultiSpan>) {\n         self.emit_diagnostic(diag.set_span(sp));\n-        self.abort_if_errors_and_should_abort();\n     }\n \n     fn delay_span_bug(&mut self, sp: impl Into<MultiSpan>, msg: &str) {"}, {"sha": "6e776e7d5542406b346514031a2625b67d3ee939", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -54,16 +54,13 @@ use std::rc::Rc;\n use std::{env, fs, iter, mem};\n \n pub fn parse<'a>(sess: &'a Session, input: &Input) -> PResult<'a, ast::Crate> {\n-    sess.diagnostic().set_continue_after_error(sess.opts.debugging_opts.continue_parse_after_error);\n     let krate = sess.time(\"parsing\", || match input {\n         Input::File(file) => parse_crate_from_file(file, &sess.parse_sess),\n         Input::Str { input, name } => {\n             parse_crate_from_source_str(name.clone(), input.clone(), &sess.parse_sess)\n         }\n     })?;\n \n-    sess.diagnostic().set_continue_after_error(true);\n-\n     if sess.opts.debugging_opts.ast_json_noexpand {\n         println!(\"{}\", json::as_json(&krate));\n     }"}, {"sha": "c2e9c35fcd4a71c7be05862f349e675367b9c3a7", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -601,10 +601,6 @@ fn test_debugging_options_tracking_hash() {\n     opts.debugging_opts.report_delayed_bugs = true;\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n-    opts = reference.clone();\n-    opts.debugging_opts.continue_parse_after_error = true;\n-    assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n     opts = reference.clone();\n     opts.debugging_opts.force_overflow_checks = Some(true);\n     assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());"}, {"sha": "4b5736adc17c3f0d4de30fed1499ece9bae4792a", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -772,8 +772,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"set the current terminal width\"),\n     panic_abort_tests: bool = (false, parse_bool, [TRACKED],\n         \"support compiling tests with panic=abort\"),\n-    continue_parse_after_error: bool = (false, parse_bool, [TRACKED],\n-        \"attempt to recover from parse errors (experimental)\"),\n     dep_tasks: bool = (false, parse_bool, [UNTRACKED],\n         \"print tasks that execute and the color their dep node gets (requires debug build)\"),\n     incremental: Option<String> = (None, parse_opt_string, [UNTRACKED],"}, {"sha": "88418e57acddaef394bea355a32b946f511e29df", "filename": "src/test/ui/consts/miri_unleashed/mutable_const2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -10,7 +10,7 @@ error: internal compiler error: mutable allocation in constant\n LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-thread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', src/librustc_errors/lib.rs:347:17\n+thread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', src/librustc_errors/lib.rs:346:17\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n \n error: internal compiler error: unexpected panic"}, {"sha": "13759a2351997c5636c9b1fdaa32474dc0ba5dc2", "filename": "src/test/ui/parse-error-correct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparse-error-correct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparse-error-correct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparse-error-correct.rs?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n // Test that the parser is error correcting missing idents. Despite a parsing\n // error (or two), we still run type checking (and don't get extra errors there).\n "}, {"sha": "c54baf00b27f2c8ef395bd044f30e65f5a90ef67", "filename": "src/test/ui/parse-error-correct.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparse-error-correct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparse-error-correct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparse-error-correct.stderr?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -1,17 +1,17 @@\n error: unexpected token: `;`\n-  --> $DIR/parse-error-correct.rs:8:15\n+  --> $DIR/parse-error-correct.rs:6:15\n    |\n LL |     let x = y.;\n    |               ^\n \n error: unexpected token: `(`\n-  --> $DIR/parse-error-correct.rs:9:15\n+  --> $DIR/parse-error-correct.rs:7:15\n    |\n LL |     let x = y.();\n    |               ^\n \n error[E0618]: expected function, found `{integer}`\n-  --> $DIR/parse-error-correct.rs:9:13\n+  --> $DIR/parse-error-correct.rs:7:13\n    |\n LL |     let y = 42;\n    |         - `{integer}` defined here\n@@ -22,7 +22,7 @@ LL |     let x = y.();\n    |             call expression requires function\n \n error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n-  --> $DIR/parse-error-correct.rs:11:15\n+  --> $DIR/parse-error-correct.rs:9:15\n    |\n LL |     let x = y.foo;\n    |               ^^^"}, {"sha": "7e26b4f2b6a22273724d741c223fb23be7264856", "filename": "src/test/ui/parser-recovery-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser-recovery-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser-recovery-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser-recovery-1.rs?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n // Test that we can recover from missing braces in the parser.\n \n trait Foo {"}, {"sha": "f56060c3e356f6b41b31e373820f85349db2b503", "filename": "src/test/ui/parser-recovery-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser-recovery-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser-recovery-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser-recovery-1.stderr?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -1,5 +1,5 @@\n error: this file contains an unclosed delimiter\n-  --> $DIR/parser-recovery-1.rs:15:54\n+  --> $DIR/parser-recovery-1.rs:13:54\n    |\n LL | trait Foo {\n    |           - unclosed delimiter\n@@ -13,19 +13,19 @@ LL | }\n    |                                                      ^\n \n error: unexpected token: `;`\n-  --> $DIR/parser-recovery-1.rs:12:15\n+  --> $DIR/parser-recovery-1.rs:10:15\n    |\n LL |     let x = y.;\n    |               ^\n \n error[E0425]: cannot find function `foo` in this scope\n-  --> $DIR/parser-recovery-1.rs:7:17\n+  --> $DIR/parser-recovery-1.rs:5:17\n    |\n LL |         let x = foo();\n    |                 ^^^ not found in this scope\n \n error[E0425]: cannot find value `y` in this scope\n-  --> $DIR/parser-recovery-1.rs:12:13\n+  --> $DIR/parser-recovery-1.rs:10:13\n    |\n LL |     let x = y.;\n    |             ^ not found in this scope"}, {"sha": "48b22afffe7f04ae57a4f6fcc873255716f8f2c7", "filename": "src/test/ui/parser-recovery-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser-recovery-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser-recovery-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser-recovery-2.rs?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n // Test that we can recover from mismatched braces in the parser.\n \n trait Foo {"}, {"sha": "cd3da4c71f0b5685fbffd5d6b189e279c455f42a", "filename": "src/test/ui/parser-recovery-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser-recovery-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser-recovery-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser-recovery-2.stderr?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -1,11 +1,11 @@\n error: unexpected token: `;`\n-  --> $DIR/parser-recovery-2.rs:12:15\n+  --> $DIR/parser-recovery-2.rs:10:15\n    |\n LL |     let x = y.;\n    |               ^\n \n error: mismatched closing delimiter: `)`\n-  --> $DIR/parser-recovery-2.rs:8:5\n+  --> $DIR/parser-recovery-2.rs:6:5\n    |\n LL |     fn bar() {\n    |              - unclosed delimiter\n@@ -14,13 +14,13 @@ LL |     )\n    |     ^ mismatched closing delimiter\n \n error[E0425]: cannot find function `foo` in this scope\n-  --> $DIR/parser-recovery-2.rs:7:17\n+  --> $DIR/parser-recovery-2.rs:5:17\n    |\n LL |         let x = foo();\n    |                 ^^^ not found in this scope\n \n error[E0425]: cannot find value `y` in this scope\n-  --> $DIR/parser-recovery-2.rs:12:13\n+  --> $DIR/parser-recovery-2.rs:10:13\n    |\n LL |     let x = y.;\n    |             ^ not found in this scope"}, {"sha": "20d3edf12517514475b8c8c077918ee1b7c99667", "filename": "src/test/ui/parser/ascii-only-character-escape.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Fascii-only-character-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Fascii-only-character-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fascii-only-character-escape.rs?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n fn main() {\n     let x = \"\\x80\"; //~ ERROR may only be used\n     let y = \"\\xff\"; //~ ERROR may only be used"}, {"sha": "cf51b00cdc39aa5aa8356e51e34bbca7b3973380", "filename": "src/test/ui/parser/ascii-only-character-escape.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Fascii-only-character-escape.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Fascii-only-character-escape.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fascii-only-character-escape.stderr?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -1,17 +1,17 @@\n error: this form of character escape may only be used with characters in the range [\\x00-\\x7f]\n-  --> $DIR/ascii-only-character-escape.rs:4:14\n+  --> $DIR/ascii-only-character-escape.rs:2:14\n    |\n LL |     let x = \"\\x80\";\n    |              ^^^^\n \n error: this form of character escape may only be used with characters in the range [\\x00-\\x7f]\n-  --> $DIR/ascii-only-character-escape.rs:5:14\n+  --> $DIR/ascii-only-character-escape.rs:3:14\n    |\n LL |     let y = \"\\xff\";\n    |              ^^^^\n \n error: this form of character escape may only be used with characters in the range [\\x00-\\x7f]\n-  --> $DIR/ascii-only-character-escape.rs:6:14\n+  --> $DIR/ascii-only-character-escape.rs:4:14\n    |\n LL |     let z = \"\\xe2\";\n    |              ^^^^"}, {"sha": "11696b82bc9ac9b4f566bdb69bfebf8003b0c9d0", "filename": "src/test/ui/parser/bad-char-literals.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Fbad-char-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Fbad-char-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-char-literals.rs?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -1,7 +1,6 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n // ignore-tidy-cr\n // ignore-tidy-tab\n+\n fn main() {\n     // these literals are just silly.\n     ''';"}, {"sha": "093978fd84d007851a4adc24459409d19e729a74", "filename": "src/test/ui/parser/bad-char-literals.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Fbad-char-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Fbad-char-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-char-literals.stderr?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -1,25 +1,25 @@\n error: character constant must be escaped: '\n-  --> $DIR/bad-char-literals.rs:7:6\n+  --> $DIR/bad-char-literals.rs:6:6\n    |\n LL |     ''';\n    |      ^\n \n error: character constant must be escaped: \\n\n-  --> $DIR/bad-char-literals.rs:11:6\n+  --> $DIR/bad-char-literals.rs:10:6\n    |\n LL |       '\n    |  ______^\n LL | | ';\n    | |_\n \n error: character constant must be escaped: \\r\n-  --> $DIR/bad-char-literals.rs:16:6\n+  --> $DIR/bad-char-literals.rs:15:6\n    |\n LL |     '\r';\n    |      ^\n \n error: character constant must be escaped: \\t\n-  --> $DIR/bad-char-literals.rs:19:6\n+  --> $DIR/bad-char-literals.rs:18:6\n    |\n LL |     '    ';\n    |      ^^^^"}, {"sha": "dadf3971220f7054ae75af19ef90c11c6a3578b2", "filename": "src/test/ui/parser/byte-literals.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.rs?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -1,6 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n-\n // ignore-tidy-tab\n \n static FOO: u8 = b'\\f';  //~ ERROR unknown byte escape"}, {"sha": "53d50af88d33b84d2a8b75b99a98af06d084452a", "filename": "src/test/ui/parser/byte-literals.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.stderr?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -1,41 +1,41 @@\n error: unknown byte escape: f\n-  --> $DIR/byte-literals.rs:6:21\n+  --> $DIR/byte-literals.rs:3:21\n    |\n LL | static FOO: u8 = b'\\f';\n    |                     ^ unknown byte escape\n \n error: unknown byte escape: f\n-  --> $DIR/byte-literals.rs:9:8\n+  --> $DIR/byte-literals.rs:6:8\n    |\n LL |     b'\\f';\n    |        ^ unknown byte escape\n \n error: invalid character in numeric character escape: Z\n-  --> $DIR/byte-literals.rs:10:10\n+  --> $DIR/byte-literals.rs:7:10\n    |\n LL |     b'\\x0Z';\n    |          ^\n \n error: byte constant must be escaped: \\t\n-  --> $DIR/byte-literals.rs:11:7\n+  --> $DIR/byte-literals.rs:8:7\n    |\n LL |     b'    ';\n    |       ^^^^\n \n error: byte constant must be escaped: '\n-  --> $DIR/byte-literals.rs:12:7\n+  --> $DIR/byte-literals.rs:9:7\n    |\n LL |     b''';\n    |       ^\n \n error: byte constant must be ASCII. Use a \\xHH escape for a non-ASCII byte\n-  --> $DIR/byte-literals.rs:13:7\n+  --> $DIR/byte-literals.rs:10:7\n    |\n LL |     b'\u00e9';\n    |       ^\n \n error: unterminated byte constant\n-  --> $DIR/byte-literals.rs:14:6\n+  --> $DIR/byte-literals.rs:11:6\n    |\n LL |     b'a\n    |      ^^^^"}, {"sha": "caffd9efbed37f9bcf964a9be40fd9f02bba1949", "filename": "src/test/ui/parser/byte-string-literals.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.rs?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n static FOO: &'static [u8] = b\"\\f\";  //~ ERROR unknown byte escape\n \n pub fn main() {"}, {"sha": "ca964cd4b8f21e995c1cfc2b1e75af5849b249ac", "filename": "src/test/ui/parser/byte-string-literals.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -1,29 +1,29 @@\n error: unknown byte escape: f\n-  --> $DIR/byte-string-literals.rs:3:32\n+  --> $DIR/byte-string-literals.rs:1:32\n    |\n LL | static FOO: &'static [u8] = b\"\\f\";\n    |                                ^ unknown byte escape\n \n error: unknown byte escape: f\n-  --> $DIR/byte-string-literals.rs:6:8\n+  --> $DIR/byte-string-literals.rs:4:8\n    |\n LL |     b\"\\f\";\n    |        ^ unknown byte escape\n \n error: invalid character in numeric character escape: Z\n-  --> $DIR/byte-string-literals.rs:7:10\n+  --> $DIR/byte-string-literals.rs:5:10\n    |\n LL |     b\"\\x0Z\";\n    |          ^\n \n error: byte constant must be ASCII. Use a \\xHH escape for a non-ASCII byte\n-  --> $DIR/byte-string-literals.rs:8:7\n+  --> $DIR/byte-string-literals.rs:6:7\n    |\n LL |     b\"\u00e9\";\n    |       ^\n \n error: unterminated double quote byte string\n-  --> $DIR/byte-string-literals.rs:9:6\n+  --> $DIR/byte-string-literals.rs:7:6\n    |\n LL |       b\"a\n    |  ______^"}, {"sha": "270c8b43dfd5e7d8527f67d1810888f9036a208a", "filename": "src/test/ui/parser/impl-parsing.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.rs?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n impl ! {} // OK\n impl ! where u8: Copy {} // OK\n "}, {"sha": "7c2a7937c5da7c15238467ce3a98f763e5a65028", "filename": "src/test/ui/parser/impl-parsing.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-parsing.stderr?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -1,29 +1,29 @@\n error: missing `for` in a trait impl\n-  --> $DIR/impl-parsing.rs:6:11\n+  --> $DIR/impl-parsing.rs:4:11\n    |\n LL | impl Trait Type {}\n    |           ^ help: add `for` here\n \n error: missing `for` in a trait impl\n-  --> $DIR/impl-parsing.rs:7:11\n+  --> $DIR/impl-parsing.rs:5:11\n    |\n LL | impl Trait .. {}\n    |           ^ help: add `for` here\n \n error: expected a trait, found type\n-  --> $DIR/impl-parsing.rs:8:6\n+  --> $DIR/impl-parsing.rs:6:6\n    |\n LL | impl ?Sized for Type {}\n    |      ^^^^^^\n \n error: expected a trait, found type\n-  --> $DIR/impl-parsing.rs:9:6\n+  --> $DIR/impl-parsing.rs:7:6\n    |\n LL | impl ?Sized for .. {}\n    |      ^^^^^^\n \n error: expected `impl`, found `FAIL`\n-  --> $DIR/impl-parsing.rs:11:16\n+  --> $DIR/impl-parsing.rs:9:16\n    |\n LL | default unsafe FAIL\n    |                ^^^^ expected `impl`"}, {"sha": "ab445a9329426cbc094b868182ae6a9b26d1652e", "filename": "src/test/ui/parser/issue-23620-invalid-escapes.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.rs?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n fn main() {\n     let _ = b\"\\u{a66e}\";\n     //~^ ERROR unicode escape sequences cannot be used as a byte or in a byte string"}, {"sha": "b391ac75bf8d1129dcf7394f347c2564f8531421", "filename": "src/test/ui/parser/issue-23620-invalid-escapes.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.stderr?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -1,83 +1,83 @@\n error: unicode escape sequences cannot be used as a byte or in a byte string\n-  --> $DIR/issue-23620-invalid-escapes.rs:4:15\n+  --> $DIR/issue-23620-invalid-escapes.rs:2:15\n    |\n LL |     let _ = b\"\\u{a66e}\";\n    |               ^^^^^^^^\n \n error: unicode escape sequences cannot be used as a byte or in a byte string\n-  --> $DIR/issue-23620-invalid-escapes.rs:7:15\n+  --> $DIR/issue-23620-invalid-escapes.rs:5:15\n    |\n LL |     let _ = b'\\u{a66e}';\n    |               ^^^^^^^^\n \n error: incorrect unicode escape sequence\n-  --> $DIR/issue-23620-invalid-escapes.rs:10:15\n+  --> $DIR/issue-23620-invalid-escapes.rs:8:15\n    |\n LL |     let _ = b'\\u';\n    |               ^^ incorrect unicode escape sequence\n    |\n    = help: format of unicode escape sequences is `\\u{...}`\n \n error: numeric character escape is too short\n-  --> $DIR/issue-23620-invalid-escapes.rs:13:15\n+  --> $DIR/issue-23620-invalid-escapes.rs:11:15\n    |\n LL |     let _ = b'\\x5';\n    |               ^^^\n \n error: invalid character in numeric character escape: x\n-  --> $DIR/issue-23620-invalid-escapes.rs:16:17\n+  --> $DIR/issue-23620-invalid-escapes.rs:14:17\n    |\n LL |     let _ = b'\\xxy';\n    |                 ^\n \n error: numeric character escape is too short\n-  --> $DIR/issue-23620-invalid-escapes.rs:19:14\n+  --> $DIR/issue-23620-invalid-escapes.rs:17:14\n    |\n LL |     let _ = '\\x5';\n    |              ^^^\n \n error: invalid character in numeric character escape: x\n-  --> $DIR/issue-23620-invalid-escapes.rs:22:16\n+  --> $DIR/issue-23620-invalid-escapes.rs:20:16\n    |\n LL |     let _ = '\\xxy';\n    |                ^\n \n error: unicode escape sequences cannot be used as a byte or in a byte string\n-  --> $DIR/issue-23620-invalid-escapes.rs:25:15\n+  --> $DIR/issue-23620-invalid-escapes.rs:23:15\n    |\n LL |     let _ = b\"\\u{a4a4} \\xf \\u\";\n    |               ^^^^^^^^\n \n error: invalid character in numeric character escape:  \n-  --> $DIR/issue-23620-invalid-escapes.rs:25:27\n+  --> $DIR/issue-23620-invalid-escapes.rs:23:27\n    |\n LL |     let _ = b\"\\u{a4a4} \\xf \\u\";\n    |                           ^\n \n error: incorrect unicode escape sequence\n-  --> $DIR/issue-23620-invalid-escapes.rs:25:28\n+  --> $DIR/issue-23620-invalid-escapes.rs:23:28\n    |\n LL |     let _ = b\"\\u{a4a4} \\xf \\u\";\n    |                            ^^ incorrect unicode escape sequence\n    |\n    = help: format of unicode escape sequences is `\\u{...}`\n \n error: invalid character in numeric character escape:  \n-  --> $DIR/issue-23620-invalid-escapes.rs:30:17\n+  --> $DIR/issue-23620-invalid-escapes.rs:28:17\n    |\n LL |     let _ = \"\\xf \\u\";\n    |                 ^\n \n error: incorrect unicode escape sequence\n-  --> $DIR/issue-23620-invalid-escapes.rs:30:18\n+  --> $DIR/issue-23620-invalid-escapes.rs:28:18\n    |\n LL |     let _ = \"\\xf \\u\";\n    |                  ^^ incorrect unicode escape sequence\n    |\n    = help: format of unicode escape sequences is `\\u{...}`\n \n error: incorrect unicode escape sequence\n-  --> $DIR/issue-23620-invalid-escapes.rs:34:14\n+  --> $DIR/issue-23620-invalid-escapes.rs:32:14\n    |\n LL |     let _ = \"\\u8f\";\n    |              ^^--"}, {"sha": "0db06f636c3ec39e63bed76aa829a5179ade2053", "filename": "src/test/ui/parser/issue-62913.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Fissue-62913.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Fissue-62913.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62913.rs?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -1,3 +1,4 @@\n \"\\u\\\\\"\n //~^ ERROR incorrect unicode escape sequence\n //~| ERROR invalid trailing slash in literal\n+//~| ERROR expected item, found `\"\\u\\\\\"`"}, {"sha": "f72174f8929b888b947d62b8d006b83a6d30c734", "filename": "src/test/ui/parser/issue-62913.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Fissue-62913.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Fissue-62913.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62913.stderr?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -12,5 +12,11 @@ error: invalid trailing slash in literal\n LL | \"\\u\\\"\n    |     ^\n \n-error: aborting due to 2 previous errors\n+error: expected item, found `\"\\u\\\"`\n+  --> $DIR/issue-62913.rs:1:1\n+   |\n+LL | \"\\u\\\"\n+   | ^^^^^^ expected item\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "e7951cfd2d20cc2314ef754f690f4342e1aad4d0", "filename": "src/test/ui/parser/lex-bad-char-literals-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-1.rs?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -1,4 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n static c3: char =\n     '\\x1' //~ ERROR: numeric character escape is too short\n ;"}, {"sha": "fcf4802f79bba85a8f853fd83fd1757a49dafbda", "filename": "src/test/ui/parser/lex-bad-char-literals-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-1.stderr?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -1,23 +1,23 @@\n error: numeric character escape is too short\n-  --> $DIR/lex-bad-char-literals-1.rs:3:6\n+  --> $DIR/lex-bad-char-literals-1.rs:2:6\n    |\n LL |     '\\x1'\n    |      ^^^\n \n error: numeric character escape is too short\n-  --> $DIR/lex-bad-char-literals-1.rs:7:6\n+  --> $DIR/lex-bad-char-literals-1.rs:6:6\n    |\n LL |     \"\\x1\"\n    |      ^^^\n \n error: unknown character escape: \\u{25cf}\n-  --> $DIR/lex-bad-char-literals-1.rs:11:7\n+  --> $DIR/lex-bad-char-literals-1.rs:10:7\n    |\n LL |     '\\\u25cf'\n    |       ^ unknown character escape\n \n error: unknown character escape: \\u{25cf}\n-  --> $DIR/lex-bad-char-literals-1.rs:15:7\n+  --> $DIR/lex-bad-char-literals-1.rs:14:7\n    |\n LL |     \"\\\u25cf\"\n    |       ^ unknown character escape"}, {"sha": "1580157210e6940c54d47319ff186ab812a6e3ba", "filename": "src/test/ui/parser/lex-bad-char-literals-7.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-7.rs?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -1,4 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n fn main() {\n     let _: char = '';\n     //~^ ERROR: empty character literal"}, {"sha": "ee9aa869352990d480fdc87a6efe5f8b6b34e515", "filename": "src/test/ui/parser/lex-bad-char-literals-7.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-7.stderr?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -1,17 +1,17 @@\n error: empty character literal\n-  --> $DIR/lex-bad-char-literals-7.rs:3:20\n+  --> $DIR/lex-bad-char-literals-7.rs:2:20\n    |\n LL |     let _: char = '';\n    |                    ^\n \n error: empty unicode escape (must have at least 1 hex digit)\n-  --> $DIR/lex-bad-char-literals-7.rs:5:20\n+  --> $DIR/lex-bad-char-literals-7.rs:4:20\n    |\n LL |     let _: char = '\\u{}';\n    |                    ^^^^\n \n error: unterminated character literal\n-  --> $DIR/lex-bad-char-literals-7.rs:12:13\n+  --> $DIR/lex-bad-char-literals-7.rs:11:13\n    |\n LL |     let _ = ' hello // here's a comment\n    |             ^^^^^^^^"}, {"sha": "9a9f9c433e1d6f8f9c36593e1e12051f9b7355d3", "filename": "src/test/ui/parser/lex-bare-cr-string-literal-doc-comment.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.rs?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n // ignore-tidy-cr\n \n /// doc comment with bare CR: '\r'"}, {"sha": "598da6b930730aa90235d3cf8db6074f6803d511", "filename": "src/test/ui/parser/lex-bare-cr-string-literal-doc-comment.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.stderr?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -1,41 +1,41 @@\n error: bare CR not allowed in doc-comment\n-  --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:5:32\n+  --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:3:32\n    |\n LL | /// doc comment with bare CR: '\r'\n    |                                ^\n \n error: bare CR not allowed in block doc-comment\n-  --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:9:38\n+  --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:7:38\n    |\n LL | /** block doc comment with bare CR: '\r' */\n    |                                      ^\n \n error: bare CR not allowed in doc-comment\n-  --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:14:36\n+  --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:12:36\n    |\n LL |     //! doc comment with bare CR: '\r'\n    |                                    ^\n \n error: bare CR not allowed in block doc-comment\n-  --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:17:42\n+  --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:15:42\n    |\n LL |     /*! block doc comment with bare CR: '\r' */\n    |                                          ^\n \n error: bare CR not allowed in string, use \\r instead\n-  --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:21:18\n+  --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:19:18\n    |\n LL |     let _s = \"foo\rbar\";\n    |                  ^\n \n error: bare CR not allowed in raw string\n-  --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:24:19\n+  --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:22:19\n    |\n LL |     let _s = r\"bar\rfoo\";\n    |                   ^\n \n error: unknown character escape: \\r\n-  --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:27:19\n+  --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:25:19\n    |\n LL |     let _s = \"foo\\\rbar\";\n    |                   ^ unknown character escape"}, {"sha": "163c8ac66b022ae8eb4aac851d8adc71027e05bb", "filename": "src/test/ui/parser/raw-byte-string-literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Fraw-byte-string-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Fraw-byte-string-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw-byte-string-literals.rs?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -1,5 +1,5 @@\n // ignore-tidy-cr\n-// compile-flags: -Z continue-parse-after-error\n+\n pub fn main() {\n     br\"a\r\"; //~ ERROR bare CR not allowed in raw string\n     br\"\u00e9\";  //~ ERROR raw byte string must be ASCII"}, {"sha": "6a3b2c1c60605ad9274487d2b46385cac5deea0c", "filename": "src/test/ui/parser/type-parameters-in-field-exprs.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.rs?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Z continue-parse-after-error\n-\n struct Foo {\n     x: isize,\n     y: isize,"}, {"sha": "306b4754d0d69a6ad46dc9d382359f14dd8a44a8", "filename": "src/test/ui/parser/type-parameters-in-field-exprs.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41a93cba38e1813986d4068cf2d2ccfcc35ef178/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftype-parameters-in-field-exprs.stderr?ref=41a93cba38e1813986d4068cf2d2ccfcc35ef178", "patch": "@@ -1,17 +1,17 @@\n error: field expressions may not have generic arguments\n-  --> $DIR/type-parameters-in-field-exprs.rs:13:10\n+  --> $DIR/type-parameters-in-field-exprs.rs:11:10\n    |\n LL |     f.x::<isize>;\n    |          ^^^^^^^\n \n error: field expressions may not have generic arguments\n-  --> $DIR/type-parameters-in-field-exprs.rs:15:10\n+  --> $DIR/type-parameters-in-field-exprs.rs:13:10\n    |\n LL |     f.x::<>;\n    |          ^^\n \n error: field expressions may not have generic arguments\n-  --> $DIR/type-parameters-in-field-exprs.rs:17:7\n+  --> $DIR/type-parameters-in-field-exprs.rs:15:7\n    |\n LL |     f.x::();\n    |       ^^^^^"}]}