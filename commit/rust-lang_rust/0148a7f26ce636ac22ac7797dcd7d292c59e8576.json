{"sha": "0148a7f26ce636ac22ac7797dcd7d292c59e8576", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNDhhN2YyNmNlNjM2YWMyMmFjNzc5N2RjZDdkMjkyYzU5ZTg1NzY=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-05-14T12:46:43Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-05-15T16:54:20Z"}, "message": "InvalidUninitBytes: Track more info about access", "tree": {"sha": "c429f29b7289c71cd28be194236a449ce602a1df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c429f29b7289c71cd28be194236a449ce602a1df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0148a7f26ce636ac22ac7797dcd7d292c59e8576", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0148a7f26ce636ac22ac7797dcd7d292c59e8576", "html_url": "https://github.com/rust-lang/rust/commit/0148a7f26ce636ac22ac7797dcd7d292c59e8576", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0148a7f26ce636ac22ac7797dcd7d292c59e8576/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94c0ab936b65cc27011e5b250223056c8d734656", "url": "https://api.github.com/repos/rust-lang/rust/commits/94c0ab936b65cc27011e5b250223056c8d734656", "html_url": "https://github.com/rust-lang/rust/commit/94c0ab936b65cc27011e5b250223056c8d734656"}], "stats": {"total": 92, "additions": 67, "deletions": 25}, "files": [{"sha": "96195db0bacd227aecb090741694413dadf3d798", "filename": "src/librustc_middle/mir/interpret/allocation.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0148a7f26ce636ac22ac7797dcd7d292c59e8576/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0148a7f26ce636ac22ac7797dcd7d292c59e8576/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fallocation.rs?ref=0148a7f26ce636ac22ac7797dcd7d292c59e8576", "patch": "@@ -11,6 +11,7 @@ use rustc_target::abi::{Align, HasDataLayout, Size};\n \n use super::{\n     read_target_uint, write_target_uint, AllocId, InterpResult, Pointer, Scalar, ScalarMaybeUninit,\n+    UninitBytesAccess,\n };\n \n #[derive(Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n@@ -545,17 +546,23 @@ impl<'tcx, Tag: Copy, Extra> Allocation<Tag, Extra> {\n impl<'tcx, Tag: Copy, Extra> Allocation<Tag, Extra> {\n     /// Checks whether the given range  is entirely defined.\n     ///\n-    /// Returns `Ok(())` if it's defined. Otherwise returns the index of the byte\n-    /// at which the first undefined access begins.\n-    fn is_defined(&self, ptr: Pointer<Tag>, size: Size) -> Result<(), Size> {\n+    /// Returns `Ok(())` if it's defined. Otherwise returns the range of byte\n+    /// indexes of the first contiguous undefined access.\n+    fn is_defined(&self, ptr: Pointer<Tag>, size: Size) -> Result<(), Range<Size>> {\n         self.init_mask.is_range_initialized(ptr.offset, ptr.offset + size) // `Size` addition\n     }\n \n-    /// Checks that a range of bytes is defined. If not, returns the `ReadUndefBytes`\n-    /// error which will report the first byte which is undefined.\n+    /// Checks that a range of bytes is defined. If not, returns the `InvalidUndefBytes`\n+    /// error which will report the first range of bytes which is undefined.\n     fn check_defined(&self, ptr: Pointer<Tag>, size: Size) -> InterpResult<'tcx> {\n-        self.is_defined(ptr, size)\n-            .or_else(|idx| throw_ub!(InvalidUninitBytes(Some(Pointer::new(ptr.alloc_id, idx)))))\n+        self.is_defined(ptr, size).or_else(|idx_range| {\n+            throw_ub!(InvalidUninitBytes(Some(Box::new(UninitBytesAccess {\n+                access_ptr: ptr.erase_tag(),\n+                access_size: size,\n+                uninit_ptr: Pointer::new(ptr.alloc_id, idx_range.start),\n+                uninit_size: idx_range.end - idx_range.start, // `Size` subtraction\n+            }))))\n+        })\n     }\n \n     pub fn mark_definedness(&mut self, ptr: Pointer<Tag>, size: Size, new_state: bool) {\n@@ -758,19 +765,25 @@ impl InitMask {\n \n     /// Checks whether the range `start..end` (end-exclusive) is entirely initialized.\n     ///\n-    /// Returns `Ok(())` if it's initialized. Otherwise returns the index of the byte\n-    /// at which the first uninitialized access begins.\n+    /// Returns `Ok(())` if it's initialized. Otherwise returns a range of byte\n+    /// indexes for the first contiguous span of the uninitialized access.\n     #[inline]\n-    pub fn is_range_initialized(&self, start: Size, end: Size) -> Result<(), Size> {\n+    pub fn is_range_initialized(&self, start: Size, end: Size) -> Result<(), Range<Size>> {\n         if end > self.len {\n-            return Err(self.len);\n+            return Err(self.len..end);\n         }\n \n         // FIXME(oli-obk): optimize this for allocations larger than a block.\n         let idx = (start.bytes()..end.bytes()).map(Size::from_bytes).find(|&i| !self.get(i));\n \n         match idx {\n-            Some(idx) => Err(idx),\n+            Some(idx) => {\n+                let undef_end = (idx.bytes()..end.bytes())\n+                    .map(Size::from_bytes)\n+                    .find(|&i| self.get(i))\n+                    .unwrap_or(end);\n+                Err(idx..undef_end)\n+            }\n             None => Ok(()),\n         }\n     }"}, {"sha": "d32a147344992115bacde0cb8ebed88539115d75", "filename": "src/librustc_middle/mir/interpret/error.rs", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0148a7f26ce636ac22ac7797dcd7d292c59e8576/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0148a7f26ce636ac22ac7797dcd7d292c59e8576/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs?ref=0148a7f26ce636ac22ac7797dcd7d292c59e8576", "patch": "@@ -6,7 +6,7 @@ use crate::ty::query::TyCtxtAt;\n use crate::ty::{self, layout, tls, FnSig, Ty};\n \n use rustc_data_structures::sync::Lock;\n-use rustc_errors::{struct_span_err, DiagnosticBuilder, ErrorReported};\n+use rustc_errors::{pluralize, struct_span_err, DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::definitions::DefPathData;\n use rustc_macros::HashStable;\n@@ -327,6 +327,19 @@ impl fmt::Display for CheckInAllocMsg {\n     }\n }\n \n+/// Details of an access to uninitialized bytes where it is not allowed.\n+#[derive(Debug)]\n+pub struct UninitBytesAccess {\n+    /// Location of the original memory access.\n+    pub access_ptr: Pointer,\n+    /// Size of the original memory access.\n+    pub access_size: Size,\n+    /// Location of the first uninitialized byte that was accessed.\n+    pub uninit_ptr: Pointer,\n+    /// Number of consecutive uninitialized bytes that were accessed.\n+    pub uninit_size: Size,\n+}\n+\n /// Error information for when the program caused Undefined Behavior.\n pub enum UndefinedBehaviorInfo<'tcx> {\n     /// Free-form case. Only for errors that are never caught!\n@@ -384,7 +397,7 @@ pub enum UndefinedBehaviorInfo<'tcx> {\n     /// Using a string that is not valid UTF-8,\n     InvalidStr(std::str::Utf8Error),\n     /// Using uninitialized data where it is not allowed.\n-    InvalidUninitBytes(Option<Pointer>),\n+    InvalidUninitBytes(Option<Box<UninitBytesAccess>>),\n     /// Working with a local that is not currently live.\n     DeadLocal,\n     /// Data size is not equal to target size.\n@@ -455,10 +468,18 @@ impl fmt::Display for UndefinedBehaviorInfo<'_> {\n                 write!(f, \"using {} as function pointer but it does not point to a function\", p)\n             }\n             InvalidStr(err) => write!(f, \"this string is not valid UTF-8: {}\", err),\n-            InvalidUninitBytes(Some(p)) => write!(\n+            InvalidUninitBytes(Some(access)) => write!(\n                 f,\n-                \"reading uninitialized memory at {}, but this operation requires initialized memory\",\n-                p\n+                \"reading {} byte{} of memory starting at {}, \\\n+                 but {} byte{} {} uninitialized starting at {}, \\\n+                 and this operation requires initialized memory\",\n+                access.access_size.bytes(),\n+                pluralize!(access.access_size.bytes()),\n+                access.access_ptr,\n+                access.uninit_size.bytes(),\n+                pluralize!(access.uninit_size.bytes()),\n+                if access.uninit_size.bytes() != 1 { \"are\" } else { \"is\" },\n+                access.uninit_ptr,\n             ),\n             InvalidUninitBytes(None) => write!(\n                 f,\n@@ -556,6 +577,9 @@ impl dyn MachineStopType {\n     }\n }\n \n+#[cfg(target_arch = \"x86_64\")]\n+static_assert_size!(InterpError<'_>, 40);\n+\n pub enum InterpError<'tcx> {\n     /// The program caused undefined behavior.\n     UndefinedBehavior(UndefinedBehaviorInfo<'tcx>),\n@@ -604,7 +628,10 @@ impl InterpError<'_> {\n             InterpError::MachineStop(b) => mem::size_of_val::<dyn MachineStopType>(&**b) > 0,\n             InterpError::Unsupported(UnsupportedOpInfo::Unsupported(_))\n             | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::ValidationFailure(_))\n-            | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::Ub(_)) => true,\n+            | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::Ub(_))\n+            | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::InvalidUninitBytes(Some(_))) => {\n+                true\n+            }\n             _ => false,\n         }\n     }"}, {"sha": "d9e52af89007ca4286d32314bb18c1e641acfd39", "filename": "src/librustc_middle/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0148a7f26ce636ac22ac7797dcd7d292c59e8576/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0148a7f26ce636ac22ac7797dcd7d292c59e8576/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fmod.rs?ref=0148a7f26ce636ac22ac7797dcd7d292c59e8576", "patch": "@@ -119,7 +119,7 @@ use crate::ty::{self, Instance, Ty, TyCtxt};\n pub use self::error::{\n     struct_error, CheckInAllocMsg, ConstEvalErr, ConstEvalRawResult, ConstEvalResult, ErrorHandled,\n     FrameInfo, InterpError, InterpErrorInfo, InterpResult, InvalidProgramInfo, MachineStopType,\n-    ResourceExhaustionInfo, UndefinedBehaviorInfo, UnsupportedOpInfo,\n+    ResourceExhaustionInfo, UndefinedBehaviorInfo, UninitBytesAccess, UnsupportedOpInfo,\n };\n \n pub use self::value::{get_slice_bytes, ConstValue, RawConst, Scalar, ScalarMaybeUninit};"}, {"sha": "6ce93f21021ca4ef2197501627c1e7d1badfbde1", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0148a7f26ce636ac22ac7797dcd7d292c59e8576/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0148a7f26ce636ac22ac7797dcd7d292c59e8576/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=0148a7f26ce636ac22ac7797dcd7d292c59e8576", "patch": "@@ -366,7 +366,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n         let place = try_validation!(\n             self.ecx.ref_to_mplace(value),\n             self.path,\n-            err_ub!(InvalidUninitBytes(..)) => { \"uninitialized {}\", kind },\n+            err_ub!(InvalidUninitBytes { .. }) => { \"uninitialized {}\", kind },\n         );\n         if place.layout.is_unsized() {\n             self.check_wide_ptr_meta(place.meta, place.layout)?;\n@@ -514,7 +514,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 let place = try_validation!(\n                     self.ecx.ref_to_mplace(self.ecx.read_immediate(value)?),\n                     self.path,\n-                    err_ub!(InvalidUninitBytes(..)) => { \"uninitialized raw pointer\" },\n+                    err_ub!(InvalidUninitBytes { .. } ) => { \"uninitialized raw pointer\" },\n                 );\n                 if place.layout.is_unsized() {\n                     self.check_wide_ptr_meta(place.meta, place.layout)?;\n@@ -593,7 +593,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n         let value = try_validation!(\n             value.not_undef(),\n             self.path,\n-            err_ub!(InvalidUninitBytes(..)) => { \"{}\", value }\n+            err_ub!(InvalidUninitBytes { .. }) => { \"{}\", value }\n                 expected { \"something {}\", wrapping_range_format(valid_range, max_hi) },\n         );\n         let bits = match value.to_bits_or_ptr(op.layout.size, self.ecx) {\n@@ -804,12 +804,14 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                         // For some errors we might be able to provide extra information.\n                         // (This custom logic does not fit the `try_validation!` macro.)\n                         match err.kind {\n-                            err_ub!(InvalidUninitBytes(Some(ptr))) => {\n+                            err_ub!(InvalidUninitBytes(Some(access))) => {\n                                 // Some byte was uninitialized, determine which\n                                 // element that byte belongs to so we can\n                                 // provide an index.\n-                                let i = usize::try_from(ptr.offset.bytes() / layout.size.bytes())\n-                                    .unwrap();\n+                                let i = usize::try_from(\n+                                    access.uninit_ptr.offset.bytes() / layout.size.bytes(),\n+                                )\n+                                .unwrap();\n                                 self.path.push(PathElem::ArrayElem(i));\n \n                                 throw_validation_failure!(self.path, { \"uninitialized bytes\" })"}]}