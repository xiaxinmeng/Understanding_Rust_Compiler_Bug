{"sha": "a8bd0c04b480255ed3c2eb329fdba403cbf66ecd", "node_id": "C_kwDOAAsO6NoAKGE4YmQwYzA0YjQ4MDI1NWVkM2MyZWIzMjlmZGJhNDAzY2JmNjZlY2Q", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-12T05:52:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-12T05:52:34Z"}, "message": "Rollup merge of #106167 - yanchen4791:issue-105544-fix, r=oli-obk\n\nFix invalid syntax and incomplete suggestion in impl Trait parameter type suggestions for E0311\n\nFixes #105544\n\nThe problems: The suggestion given for E0311 has invalid syntax when the synthetic type parameter is used for Trait type in function declaration:\n```rust\nfn foo(d: impl Sized) -> impl Sized\n```\ninstead of explicitly specified like the following:\n```rust\nfn foo<T: Sized>(d: T) -> impl Sized\n```\nIn addition to the syntax error, the suggestions given for E0311 are not complete when multiple elided lifetimes are involved in lifetime bounds, not all involved parameters are given the named lifetime in the suggestions. For the following test case:\n```\nfn foo(d: impl Sized, p: &mut ()) -> impl Sized + '_ {\n    (d, p)\n}\n```\na good suggestion should add the lifetime 'a to both d and p, instead of d only:\n```\nfn foo<'a>(d: impl Sized + 'a, p: &'a mut ()) -> impl Sized + '_ {\n    (d, p)\n}\n```\n\nThe Solution: Fix the syntax problem in the suggestions when synthetic type parameter is used, and also add lifetimes for all involved parameters.", "tree": {"sha": "0059f00bd23a580a8d784115069aeee7346773bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0059f00bd23a580a8d784115069aeee7346773bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjv6AiCRBK7hj4Ov3rIwAAIqYIAJc5RK232PyQdefPasGBc0T8\nv690YM0I2vWoz8Z23mv8dWpEjt4GF95sKTJhlwM/CLM/KhR6NIZGAj4cWxyIl0U/\ngAEJFaf/Qb0bq5Gx2fj9fIEE6IGvhkwTy8q2LTMUD583T/PXhLZ3D3g72RUGtz5p\nQCUsDIBwueyrOZLm50o6ALz8+b8QiPTgD7kMwzPC4GH27Qfeen8ALwDmFLrMN9bF\nsPT5ziaoRqRvBA/d3C4T8JXOFgaXgznJD7aJoqKu6Sgda4fhx2wfH2GBD/qAABX+\nUr24ptCa2/KYiwIolxicpCHnmjYn60INmp/wK/MGGGI1/bSTWLTD+WZLU8eY73Y=\n=2/pB\n-----END PGP SIGNATURE-----\n", "payload": "tree 0059f00bd23a580a8d784115069aeee7346773bc\nparent d4203eda5f0dd0b0192bfd22ea5989fbaf917818\nparent 621d4122413b371b0aaa53480d8efd80c4b5f0ba\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1673502754 +0100\ncommitter GitHub <noreply@github.com> 1673502754 +0100\n\nRollup merge of #106167 - yanchen4791:issue-105544-fix, r=oli-obk\n\nFix invalid syntax and incomplete suggestion in impl Trait parameter type suggestions for E0311\n\nFixes #105544\n\nThe problems: The suggestion given for E0311 has invalid syntax when the synthetic type parameter is used for Trait type in function declaration:\n```rust\nfn foo(d: impl Sized) -> impl Sized\n```\ninstead of explicitly specified like the following:\n```rust\nfn foo<T: Sized>(d: T) -> impl Sized\n```\nIn addition to the syntax error, the suggestions given for E0311 are not complete when multiple elided lifetimes are involved in lifetime bounds, not all involved parameters are given the named lifetime in the suggestions. For the following test case:\n```\nfn foo(d: impl Sized, p: &mut ()) -> impl Sized + '_ {\n    (d, p)\n}\n```\na good suggestion should add the lifetime 'a to both d and p, instead of d only:\n```\nfn foo<'a>(d: impl Sized + 'a, p: &'a mut ()) -> impl Sized + '_ {\n    (d, p)\n}\n```\n\nThe Solution: Fix the syntax problem in the suggestions when synthetic type parameter is used, and also add lifetimes for all involved parameters.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd", "html_url": "https://github.com/rust-lang/rust/commit/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4203eda5f0dd0b0192bfd22ea5989fbaf917818", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4203eda5f0dd0b0192bfd22ea5989fbaf917818", "html_url": "https://github.com/rust-lang/rust/commit/d4203eda5f0dd0b0192bfd22ea5989fbaf917818"}, {"sha": "621d4122413b371b0aaa53480d8efd80c4b5f0ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/621d4122413b371b0aaa53480d8efd80c4b5f0ba", "html_url": "https://github.com/rust-lang/rust/commit/621d4122413b371b0aaa53480d8efd80c4b5f0ba"}], "stats": {"total": 404, "additions": 365, "deletions": 39}, "files": [{"sha": "9747f360eca48b53edc2d6c57702751897260ecf", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 77, "deletions": 17, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=a8bd0c04b480255ed3c2eb329fdba403cbf66ecd", "patch": "@@ -2144,18 +2144,21 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         // suggest adding an explicit lifetime bound to it.\n         let generics = self.tcx.generics_of(generic_param_scope);\n         // type_param_span is (span, has_bounds)\n+        let mut is_synthetic = false;\n+        let mut ast_generics = None;\n         let type_param_span = match bound_kind {\n             GenericKind::Param(ref param) => {\n                 // Account for the case where `param` corresponds to `Self`,\n                 // which doesn't have the expected type argument.\n                 if !(generics.has_self && param.index == 0) {\n                     let type_param = generics.type_param(param, self.tcx);\n+                    is_synthetic = type_param.kind.is_synthetic();\n                     type_param.def_id.as_local().map(|def_id| {\n                         // Get the `hir::Param` to verify whether it already has any bounds.\n                         // We do this to avoid suggesting code that ends up as `T: 'a'b`,\n                         // instead we suggest `T: 'a + 'b` in that case.\n                         let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n-                        let ast_generics = self.tcx.hir().get_generics(hir_id.owner.def_id);\n+                        ast_generics = self.tcx.hir().get_generics(hir_id.owner.def_id);\n                         let bounds =\n                             ast_generics.and_then(|g| g.bounds_span_for_suggestions(def_id));\n                         // `sp` only covers `T`, change it so that it covers\n@@ -2187,11 +2190,64 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 .unwrap_or(\"'lt\".to_string())\n         };\n \n-        let add_lt_sugg = generics\n-            .params\n-            .first()\n-            .and_then(|param| param.def_id.as_local())\n-            .map(|def_id| (self.tcx.def_span(def_id).shrink_to_lo(), format!(\"{}, \", new_lt)));\n+        let mut add_lt_suggs: Vec<Option<_>> = vec![];\n+        if is_synthetic {\n+            if let Some(ast_generics) = ast_generics {\n+                let named_lifetime_param_exist = ast_generics.params.iter().any(|p| {\n+                    matches!(\n+                        p.kind,\n+                        hir::GenericParamKind::Lifetime { kind: hir::LifetimeParamKind::Explicit }\n+                    )\n+                });\n+                if named_lifetime_param_exist && let [param, ..] = ast_generics.params\n+                {\n+                    add_lt_suggs.push(Some((\n+                        self.tcx.def_span(param.def_id).shrink_to_lo(),\n+                        format!(\"{new_lt}, \"),\n+                    )));\n+                } else {\n+                    add_lt_suggs\n+                        .push(Some((ast_generics.span.shrink_to_hi(), format!(\"<{new_lt}>\"))));\n+                }\n+            }\n+        } else {\n+            if let [param, ..] = &generics.params[..] && let Some(def_id) = param.def_id.as_local()\n+            {\n+                add_lt_suggs\n+                    .push(Some((self.tcx.def_span(def_id).shrink_to_lo(), format!(\"{new_lt}, \"))));\n+            }\n+        }\n+\n+        if let Some(ast_generics) = ast_generics {\n+            for p in ast_generics.params {\n+                if p.is_elided_lifetime() {\n+                    if self\n+                        .tcx\n+                        .sess\n+                        .source_map()\n+                        .span_to_prev_source(p.span.shrink_to_hi())\n+                        .ok()\n+                        .map_or(false, |s| *s.as_bytes().last().unwrap() == b'&')\n+                    {\n+                        add_lt_suggs\n+                            .push(Some(\n+                                (\n+                                    p.span.shrink_to_hi(),\n+                                    if let Ok(snip) = self.tcx.sess.source_map().span_to_next_source(p.span)\n+                                        && snip.starts_with(' ')\n+                                    {\n+                                        format!(\"{new_lt}\")\n+                                    } else {\n+                                        format!(\"{new_lt} \")\n+                                    }\n+                                )\n+                            ));\n+                    } else {\n+                        add_lt_suggs.push(Some((p.span.shrink_to_hi(), format!(\"<{new_lt}>\"))));\n+                    }\n+                }\n+            }\n+        }\n \n         let labeled_user_string = match bound_kind {\n             GenericKind::Param(ref p) => format!(\"the parameter type `{}`\", p),\n@@ -2215,20 +2271,22 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             );\n         }\n \n-        fn binding_suggestion<S: fmt::Display>(\n+        fn binding_suggestion<'tcx, S: fmt::Display>(\n             err: &mut Diagnostic,\n             type_param_span: Option<(Span, bool)>,\n-            bound_kind: GenericKind<'_>,\n+            bound_kind: GenericKind<'tcx>,\n             sub: S,\n-            add_lt_sugg: Option<(Span, String)>,\n+            add_lt_suggs: Vec<Option<(Span, String)>>,\n         ) {\n             let msg = \"consider adding an explicit lifetime bound\";\n             if let Some((sp, has_lifetimes)) = type_param_span {\n                 let suggestion =\n                     if has_lifetimes { format!(\" + {}\", sub) } else { format!(\": {}\", sub) };\n                 let mut suggestions = vec![(sp, suggestion)];\n-                if let Some(add_lt_sugg) = add_lt_sugg {\n-                    suggestions.push(add_lt_sugg);\n+                for add_lt_sugg in add_lt_suggs {\n+                    if let Some(add_lt_sugg) = add_lt_sugg {\n+                        suggestions.push(add_lt_sugg);\n+                    }\n                 }\n                 err.multipart_suggestion_verbose(\n                     format!(\"{msg}...\"),\n@@ -2252,9 +2310,11 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     };\n                     let mut sugg =\n                         vec![(sp, suggestion), (span.shrink_to_hi(), format!(\" + {}\", new_lt))];\n-                    if let Some(lt) = add_lt_sugg.clone() {\n-                        sugg.push(lt);\n-                        sugg.rotate_right(1);\n+                    for add_lt_sugg in add_lt_suggs.clone() {\n+                        if let Some(lt) = add_lt_sugg {\n+                            sugg.push(lt);\n+                            sugg.rotate_right(1);\n+                        }\n                     }\n                     // `MaybeIncorrect` due to issue #41966.\n                     err.multipart_suggestion(msg, sugg, Applicability::MaybeIncorrect);\n@@ -2358,7 +2418,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 // for the bound is not suitable for suggestions when `-Zverbose` is set because it\n                 // uses `Debug` output, so we handle it specially here so that suggestions are\n                 // always correct.\n-                binding_suggestion(&mut err, type_param_span, bound_kind, name, None);\n+                binding_suggestion(&mut err, type_param_span, bound_kind, name, vec![]);\n                 err\n             }\n \n@@ -2371,7 +2431,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     \"{} may not live long enough\",\n                     labeled_user_string\n                 );\n-                binding_suggestion(&mut err, type_param_span, bound_kind, \"'static\", None);\n+                binding_suggestion(&mut err, type_param_span, bound_kind, \"'static\", vec![]);\n                 err\n             }\n \n@@ -2410,7 +2470,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                                 type_param_span,\n                                 bound_kind,\n                                 new_lt,\n-                                add_lt_sugg,\n+                                add_lt_suggs,\n                             );\n                         }\n                     }"}, {"sha": "4410a4d707af462bfb20c1400e5a073350a8947d", "filename": "tests/ui/error-codes/E0311.fixed", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd/tests%2Fui%2Ferror-codes%2FE0311.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd/tests%2Fui%2Ferror-codes%2FE0311.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0311.fixed?ref=a8bd0c04b480255ed3c2eb329fdba403cbf66ecd", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+\n+#![allow(warnings)]\n+\n+fn no_restriction<'a, T: 'a>(x: &'a ()) -> &() {\n+    with_restriction::<T>(x) //~ ERROR E0311\n+}\n+\n+fn with_restriction<'a, T: 'a>(x: &'a ()) -> &'a () {\n+    x\n+}\n+\n+fn main() {}"}, {"sha": "99e454f4d75c24a6a7f35005637a9b1a892059aa", "filename": "tests/ui/error-codes/E0311.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd/tests%2Fui%2Ferror-codes%2FE0311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd/tests%2Fui%2Ferror-codes%2FE0311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0311.rs?ref=a8bd0c04b480255ed3c2eb329fdba403cbf66ecd", "patch": "@@ -1,3 +1,7 @@\n+// run-rustfix\n+\n+#![allow(warnings)]\n+\n fn no_restriction<T>(x: &()) -> &() {\n     with_restriction::<T>(x) //~ ERROR E0311\n }"}, {"sha": "b0e6dd1e2727c75bc9360fb2739abe485c57e9f2", "filename": "tests/ui/error-codes/E0311.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd/tests%2Fui%2Ferror-codes%2FE0311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd/tests%2Fui%2Ferror-codes%2FE0311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0311.stderr?ref=a8bd0c04b480255ed3c2eb329fdba403cbf66ecd", "patch": "@@ -1,23 +1,23 @@\n error[E0311]: the parameter type `T` may not live long enough\n-  --> $DIR/E0311.rs:2:5\n+  --> $DIR/E0311.rs:6:5\n    |\n LL |     with_restriction::<T>(x)\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/E0311.rs:1:25\n+  --> $DIR/E0311.rs:5:25\n    |\n LL | fn no_restriction<T>(x: &()) -> &() {\n    |                         ^^^\n note: ...so that the type `T` will meet its required lifetime bounds\n-  --> $DIR/E0311.rs:2:5\n+  --> $DIR/E0311.rs:6:5\n    |\n LL |     with_restriction::<T>(x)\n    |     ^^^^^^^^^^^^^^^^^^^^^\n help: consider adding an explicit lifetime bound...\n    |\n-LL | fn no_restriction<'a, T: 'a>(x: &()) -> &() {\n-   |                   +++  ++++\n+LL | fn no_restriction<'a, T: 'a>(x: &'a ()) -> &() {\n+   |                   +++  ++++      ++\n \n error: aborting due to previous error\n "}, {"sha": "f977f0bd3a8c2ae27e4b08294a0296b31ad9b7ce", "filename": "tests/ui/lifetimes/suggest-introducing-and-adding-missing-lifetime.fixed", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd/tests%2Fui%2Flifetimes%2Fsuggest-introducing-and-adding-missing-lifetime.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd/tests%2Fui%2Flifetimes%2Fsuggest-introducing-and-adding-missing-lifetime.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fsuggest-introducing-and-adding-missing-lifetime.fixed?ref=a8bd0c04b480255ed3c2eb329fdba403cbf66ecd", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+\n+#![allow(warnings)]\n+\n+fn no_restriction<'a, T: 'a>(x: &'a ()) -> &() {\n+    with_restriction::<T>(x) //~ ERROR the parameter type `T` may not live long enough\n+}\n+\n+fn with_restriction<'b, T: 'b>(x: &'b ()) -> &'b () {\n+    x\n+}\n+\n+fn main() {}"}, {"sha": "d6ce112ec93d40fda0814f44f21b0be7977817bf", "filename": "tests/ui/lifetimes/suggest-introducing-and-adding-missing-lifetime.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd/tests%2Fui%2Flifetimes%2Fsuggest-introducing-and-adding-missing-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd/tests%2Fui%2Flifetimes%2Fsuggest-introducing-and-adding-missing-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fsuggest-introducing-and-adding-missing-lifetime.rs?ref=a8bd0c04b480255ed3c2eb329fdba403cbf66ecd", "patch": "@@ -1,3 +1,7 @@\n+// run-rustfix\n+\n+#![allow(warnings)]\n+\n fn no_restriction<T>(x: &()) -> &() {\n     with_restriction::<T>(x) //~ ERROR the parameter type `T` may not live long enough\n }"}, {"sha": "2d58d3a02f35e4d8c4ec429c0982555884091264", "filename": "tests/ui/lifetimes/suggest-introducing-and-adding-missing-lifetime.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd/tests%2Fui%2Flifetimes%2Fsuggest-introducing-and-adding-missing-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd/tests%2Fui%2Flifetimes%2Fsuggest-introducing-and-adding-missing-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fsuggest-introducing-and-adding-missing-lifetime.stderr?ref=a8bd0c04b480255ed3c2eb329fdba403cbf66ecd", "patch": "@@ -1,23 +1,23 @@\n error[E0311]: the parameter type `T` may not live long enough\n-  --> $DIR/suggest-introducing-and-adding-missing-lifetime.rs:2:5\n+  --> $DIR/suggest-introducing-and-adding-missing-lifetime.rs:6:5\n    |\n LL |     with_restriction::<T>(x)\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/suggest-introducing-and-adding-missing-lifetime.rs:1:25\n+  --> $DIR/suggest-introducing-and-adding-missing-lifetime.rs:5:25\n    |\n LL | fn no_restriction<T>(x: &()) -> &() {\n    |                         ^^^\n note: ...so that the type `T` will meet its required lifetime bounds\n-  --> $DIR/suggest-introducing-and-adding-missing-lifetime.rs:2:5\n+  --> $DIR/suggest-introducing-and-adding-missing-lifetime.rs:6:5\n    |\n LL |     with_restriction::<T>(x)\n    |     ^^^^^^^^^^^^^^^^^^^^^\n help: consider adding an explicit lifetime bound...\n    |\n-LL | fn no_restriction<'a, T: 'a>(x: &()) -> &() {\n-   |                   +++  ++++\n+LL | fn no_restriction<'a, T: 'a>(x: &'a ()) -> &() {\n+   |                   +++  ++++      ++\n \n error: aborting due to previous error\n "}, {"sha": "47087eb47497239355db1a0e47899b371b0629e7", "filename": "tests/ui/suggestions/lifetimes/issue-105544.fixed", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd/tests%2Fui%2Fsuggestions%2Flifetimes%2Fissue-105544.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd/tests%2Fui%2Fsuggestions%2Flifetimes%2Fissue-105544.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Flifetimes%2Fissue-105544.fixed?ref=a8bd0c04b480255ed3c2eb329fdba403cbf66ecd", "patch": "@@ -0,0 +1,45 @@\n+// run-rustfix\n+\n+#![allow(warnings)]\n+\n+fn foo<'a>(d: impl Sized + 'a, p: &'a mut ()) -> impl Sized + '_ { //~ NOTE the parameter type `impl Sized` must be valid for the anonymous lifetime defined here...\n+//~^ HELP consider adding an explicit lifetime bound\n+    (d, p)\n+    //~^ ERROR the parameter type `impl Sized` may not live long enough\n+    //~| NOTE ...so that the type `impl Sized` will meet its required lifetime bounds\n+}\n+\n+fn foo1<'b>(d: impl Sized + 'b, p: &'b mut ()) -> impl Sized + '_ {\n+//~^ HELP consider adding an explicit lifetime bound...\n+    (d, p) //~ NOTE ...so that the type `impl Sized` will meet its required lifetime bounds\n+    //~^ ERROR the parameter type `impl Sized` may not live long enough\n+}\n+\n+fn foo2<'b, 'a>(d: impl Sized + 'a + 'b, p: &'b mut ()) -> impl Sized + '_ { //~ NOTE the parameter type `impl Sized + 'a` must be valid for the anonymous lifetime defined here...\n+//~^ HELP consider adding an explicit lifetime bound\n+    (d, p)\n+    //~^ ERROR the parameter type `impl Sized + 'a` may not live long enough\n+    //~| NOTE ...so that the type `impl Sized + 'a` will meet its required lifetime bounds\n+}\n+\n+fn bar<'a, T : Sized + 'a>(d: T, p: &'a mut ()) -> impl Sized + '_ { //~ NOTE the parameter type `T` must be valid for the anonymous lifetime defined here...\n+//~^ HELP consider adding an explicit lifetime bound\n+    (d, p)\n+    //~^ ERROR the parameter type `T` may not live long enough\n+    //~| NOTE ...so that the type `T` will meet its required lifetime bounds\n+}\n+\n+fn bar1<'b, T : Sized + 'b>(d: T, p: &'b mut ()) -> impl Sized + '_ {\n+//~^ HELP consider adding an explicit lifetime bound...\n+    (d, p) //~ NOTE ...so that the type `T` will meet its required lifetime bounds\n+    //~^ ERROR the parameter type `T` may not live long enough\n+}\n+\n+fn bar2<'b, 'a, T : Sized + 'a + 'b>(d: T, p: &'b mut ()) -> impl Sized + '_ { //~ NOTE the parameter type `T` must be valid for the anonymous lifetime defined here...\n+//~^ HELP consider adding an explicit lifetime bound\n+    (d, p)\n+    //~^ ERROR the parameter type `T` may not live long enough\n+    //~| NOTE ...so that the type `T` will meet its required lifetime bounds\n+}\n+\n+fn main() {}"}, {"sha": "bd3bc1ef9bd2d55b8bee0fed2a3ce7560b438597", "filename": "tests/ui/suggestions/lifetimes/issue-105544.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd/tests%2Fui%2Fsuggestions%2Flifetimes%2Fissue-105544.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd/tests%2Fui%2Fsuggestions%2Flifetimes%2Fissue-105544.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Flifetimes%2Fissue-105544.rs?ref=a8bd0c04b480255ed3c2eb329fdba403cbf66ecd", "patch": "@@ -0,0 +1,45 @@\n+// run-rustfix\n+\n+#![allow(warnings)]\n+\n+fn foo(d: impl Sized, p: &mut ()) -> impl Sized + '_ { //~ NOTE the parameter type `impl Sized` must be valid for the anonymous lifetime defined here...\n+//~^ HELP consider adding an explicit lifetime bound\n+    (d, p)\n+    //~^ ERROR the parameter type `impl Sized` may not live long enough\n+    //~| NOTE ...so that the type `impl Sized` will meet its required lifetime bounds\n+}\n+\n+fn foo1<'b>(d: impl Sized, p: &'b mut ()) -> impl Sized + '_ {\n+//~^ HELP consider adding an explicit lifetime bound...\n+    (d, p) //~ NOTE ...so that the type `impl Sized` will meet its required lifetime bounds\n+    //~^ ERROR the parameter type `impl Sized` may not live long enough\n+}\n+\n+fn foo2<'a>(d: impl Sized + 'a, p: &mut ()) -> impl Sized + '_ { //~ NOTE the parameter type `impl Sized + 'a` must be valid for the anonymous lifetime defined here...\n+//~^ HELP consider adding an explicit lifetime bound\n+    (d, p)\n+    //~^ ERROR the parameter type `impl Sized + 'a` may not live long enough\n+    //~| NOTE ...so that the type `impl Sized + 'a` will meet its required lifetime bounds\n+}\n+\n+fn bar<T : Sized>(d: T, p: & mut ()) -> impl Sized + '_ { //~ NOTE the parameter type `T` must be valid for the anonymous lifetime defined here...\n+//~^ HELP consider adding an explicit lifetime bound\n+    (d, p)\n+    //~^ ERROR the parameter type `T` may not live long enough\n+    //~| NOTE ...so that the type `T` will meet its required lifetime bounds\n+}\n+\n+fn bar1<'b, T : Sized>(d: T, p: &'b mut ()) -> impl Sized + '_ {\n+//~^ HELP consider adding an explicit lifetime bound...\n+    (d, p) //~ NOTE ...so that the type `T` will meet its required lifetime bounds\n+    //~^ ERROR the parameter type `T` may not live long enough\n+}\n+\n+fn bar2<'a, T : Sized + 'a>(d: T, p: &mut ()) -> impl Sized + '_ { //~ NOTE the parameter type `T` must be valid for the anonymous lifetime defined here...\n+//~^ HELP consider adding an explicit lifetime bound\n+    (d, p)\n+    //~^ ERROR the parameter type `T` may not live long enough\n+    //~| NOTE ...so that the type `T` will meet its required lifetime bounds\n+}\n+\n+fn main() {}"}, {"sha": "08fe21b11b501bc85921c0ea055d8ff2a44f61a5", "filename": "tests/ui/suggestions/lifetimes/issue-105544.stderr", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd/tests%2Fui%2Fsuggestions%2Flifetimes%2Fissue-105544.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd/tests%2Fui%2Fsuggestions%2Flifetimes%2Fissue-105544.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Flifetimes%2Fissue-105544.stderr?ref=a8bd0c04b480255ed3c2eb329fdba403cbf66ecd", "patch": "@@ -0,0 +1,110 @@\n+error[E0311]: the parameter type `impl Sized` may not live long enough\n+  --> $DIR/issue-105544.rs:7:5\n+   |\n+LL |     (d, p)\n+   |     ^^^^^^\n+   |\n+note: the parameter type `impl Sized` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/issue-105544.rs:5:26\n+   |\n+LL | fn foo(d: impl Sized, p: &mut ()) -> impl Sized + '_ {\n+   |                          ^^^^^^^\n+note: ...so that the type `impl Sized` will meet its required lifetime bounds\n+  --> $DIR/issue-105544.rs:7:5\n+   |\n+LL |     (d, p)\n+   |     ^^^^^^\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn foo<'a>(d: impl Sized + 'a, p: &'a mut ()) -> impl Sized + '_ {\n+   |       ++++               ++++      ++\n+\n+error[E0309]: the parameter type `impl Sized` may not live long enough\n+  --> $DIR/issue-105544.rs:14:5\n+   |\n+LL |     (d, p)\n+   |     ^^^^^^ ...so that the type `impl Sized` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn foo1<'b>(d: impl Sized + 'b, p: &'b mut ()) -> impl Sized + '_ {\n+   |                           ++++\n+\n+error[E0311]: the parameter type `impl Sized + 'a` may not live long enough\n+  --> $DIR/issue-105544.rs:20:5\n+   |\n+LL |     (d, p)\n+   |     ^^^^^^\n+   |\n+note: the parameter type `impl Sized + 'a` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/issue-105544.rs:18:36\n+   |\n+LL | fn foo2<'a>(d: impl Sized + 'a, p: &mut ()) -> impl Sized + '_ {\n+   |                                    ^^^^^^^\n+note: ...so that the type `impl Sized + 'a` will meet its required lifetime bounds\n+  --> $DIR/issue-105544.rs:20:5\n+   |\n+LL |     (d, p)\n+   |     ^^^^^^\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn foo2<'b, 'a>(d: impl Sized + 'a + 'b, p: &'b mut ()) -> impl Sized + '_ {\n+   |         +++                        ++++      ++\n+\n+error[E0311]: the parameter type `T` may not live long enough\n+  --> $DIR/issue-105544.rs:27:5\n+   |\n+LL |     (d, p)\n+   |     ^^^^^^\n+   |\n+note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/issue-105544.rs:25:28\n+   |\n+LL | fn bar<T : Sized>(d: T, p: & mut ()) -> impl Sized + '_ {\n+   |                            ^^^^^^^^\n+note: ...so that the type `T` will meet its required lifetime bounds\n+  --> $DIR/issue-105544.rs:27:5\n+   |\n+LL |     (d, p)\n+   |     ^^^^^^\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn bar<'a, T : Sized + 'a>(d: T, p: &'a mut ()) -> impl Sized + '_ {\n+   |        +++           ++++            ++\n+\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/issue-105544.rs:34:5\n+   |\n+LL |     (d, p)\n+   |     ^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn bar1<'b, T : Sized + 'b>(d: T, p: &'b mut ()) -> impl Sized + '_ {\n+   |                       ++++\n+\n+error[E0311]: the parameter type `T` may not live long enough\n+  --> $DIR/issue-105544.rs:40:5\n+   |\n+LL |     (d, p)\n+   |     ^^^^^^\n+   |\n+note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/issue-105544.rs:38:38\n+   |\n+LL | fn bar2<'a, T : Sized + 'a>(d: T, p: &mut ()) -> impl Sized + '_ {\n+   |                                      ^^^^^^^\n+note: ...so that the type `T` will meet its required lifetime bounds\n+  --> $DIR/issue-105544.rs:40:5\n+   |\n+LL |     (d, p)\n+   |     ^^^^^^\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn bar2<'b, 'a, T : Sized + 'a + 'b>(d: T, p: &'b mut ()) -> impl Sized + '_ {\n+   |         +++                    ++++            ++\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors have detailed explanations: E0309, E0311.\n+For more information about an error, try `rustc --explain E0309`."}, {"sha": "4013d98c3cfe76654c4225c016f62e8bc42efe81", "filename": "tests/ui/suggestions/lifetimes/missing-lifetimes-in-signature-2.fixed", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd/tests%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd/tests%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.fixed?ref=a8bd0c04b480255ed3c2eb329fdba403cbf66ecd", "patch": "@@ -0,0 +1,29 @@\n+// Regression test for #81650\n+// run-rustfix\n+\n+#![allow(warnings)]\n+\n+struct Foo<'a> {\n+    x: &'a mut &'a i32,\n+}\n+\n+impl<'a> Foo<'a> {\n+    fn bar<F, T>(&self, f: F)\n+    where\n+        F: FnOnce(&Foo<'a>) -> T,\n+        F: 'a,\n+    {}\n+}\n+\n+trait Test {\n+    fn test(&self);\n+}\n+\n+fn func<'a, T: Test + 'a>(foo: &'a Foo<'a>, t: T) {\n+    foo.bar(move |_| {\n+    //~^ ERROR the parameter type `T` may not live long enough\n+        t.test();\n+    });\n+}\n+\n+fn main() {}"}, {"sha": "4096d95e5fd7fe74f57b9f6bbbc14c77081c1878", "filename": "tests/ui/suggestions/lifetimes/missing-lifetimes-in-signature-2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd/tests%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd/tests%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.rs?ref=a8bd0c04b480255ed3c2eb329fdba403cbf66ecd", "patch": "@@ -1,4 +1,7 @@\n // Regression test for #81650\n+// run-rustfix\n+\n+#![allow(warnings)]\n \n struct Foo<'a> {\n     x: &'a mut &'a i32,"}, {"sha": "936d87f7968248e318f36b74276d07964f125b92", "filename": "tests/ui/suggestions/lifetimes/missing-lifetimes-in-signature-2.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd/tests%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd/tests%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr?ref=a8bd0c04b480255ed3c2eb329fdba403cbf66ecd", "patch": "@@ -1,5 +1,5 @@\n error[E0311]: the parameter type `T` may not live long enough\n-  --> $DIR/missing-lifetimes-in-signature-2.rs:20:5\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:23:5\n    |\n LL | /     foo.bar(move |_| {\n LL | |\n@@ -8,12 +8,12 @@ LL | |     });\n    | |______^\n    |\n note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/missing-lifetimes-in-signature-2.rs:19:24\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:22:24\n    |\n LL | fn func<T: Test>(foo: &Foo, t: T) {\n    |                        ^^^\n note: ...so that the type `T` will meet its required lifetime bounds\n-  --> $DIR/missing-lifetimes-in-signature-2.rs:20:5\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:23:5\n    |\n LL | /     foo.bar(move |_| {\n LL | |\n@@ -22,8 +22,8 @@ LL | |     });\n    | |______^\n help: consider adding an explicit lifetime bound...\n    |\n-LL | fn func<'a, T: Test + 'a>(foo: &Foo, t: T) {\n-   |         +++         ++++\n+LL | fn func<'a, T: Test + 'a>(foo: &'a Foo<'a>, t: T) {\n+   |         +++         ++++        ++    ++++\n \n error: aborting due to previous error\n "}, {"sha": "c5c3f7b468c8bdf0b603074e09da82a64fd64000", "filename": "tests/ui/suggestions/lifetimes/missing-lifetimes-in-signature.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd/tests%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8bd0c04b480255ed3c2eb329fdba403cbf66ecd/tests%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr?ref=a8bd0c04b480255ed3c2eb329fdba403cbf66ecd", "patch": "@@ -47,7 +47,7 @@ LL | |     }\n    | |_____^\n help: consider adding an explicit lifetime bound...\n    |\n-LL ~ fn bar<'a, G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+LL ~ fn bar<'a, G, T>(g: G, dest: &'a mut T) -> impl FnOnce() + '_\n LL | where\n LL ~     G: Get<T> + 'a,\n    |\n@@ -76,8 +76,8 @@ LL | |     }\n    | |_____^\n help: consider adding an explicit lifetime bound...\n    |\n-LL | fn qux<'b, 'a, G: 'a + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n-   |        +++           ++++\n+LL | fn qux<'b, 'a, G: 'a + 'b, T>(g: G, dest: &'b mut T) -> impl FnOnce() + '_\n+   |        +++           ++++                  ++\n \n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:61:9\n@@ -103,8 +103,8 @@ LL | |         }\n    | |_________^\n help: consider adding an explicit lifetime bound...\n    |\n-LL |     fn qux<'c, 'b, G: Get<T> + 'b + 'c, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n-   |            +++                    ++++\n+LL |     fn qux<'c, 'b, G: Get<T> + 'b + 'c, T>(g: G, dest: &'c mut T) -> impl FnOnce() + '_ {\n+   |            +++                    ++++                  ++\n \n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:73:5\n@@ -132,8 +132,8 @@ LL | |     }\n    | |_____^\n help: consider adding an explicit lifetime bound...\n    |\n-LL | fn bat<'b, 'a, G: 'a + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n-   |        +++           ++++\n+LL | fn bat<'b, 'a, G: 'a + 'b, T>(g: G, dest: &'b mut T) -> impl FnOnce() + '_ + 'a\n+   |        +++           ++++                  ++\n \n error[E0621]: explicit lifetime required in the type of `dest`\n   --> $DIR/missing-lifetimes-in-signature.rs:73:5"}]}