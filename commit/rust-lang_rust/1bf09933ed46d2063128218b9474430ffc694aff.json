{"sha": "1bf09933ed46d2063128218b9474430ffc694aff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiZjA5OTMzZWQ0NmQyMDYzMTI4MjE4Yjk0NzQ0MzBmZmM2OTRhZmY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-07-13T17:07:37Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-07-16T08:03:28Z"}, "message": "Group the try_eval functions before the eval functions", "tree": {"sha": "da7de183a459de2f6c4da624f62fe2ff7df37ca4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da7de183a459de2f6c4da624f62fe2ff7df37ca4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bf09933ed46d2063128218b9474430ffc694aff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bf09933ed46d2063128218b9474430ffc694aff", "html_url": "https://github.com/rust-lang/rust/commit/1bf09933ed46d2063128218b9474430ffc694aff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bf09933ed46d2063128218b9474430ffc694aff/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef66bf067b4614cc57f07bcdc186b6344a0bdc6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef66bf067b4614cc57f07bcdc186b6344a0bdc6b", "html_url": "https://github.com/rust-lang/rust/commit/ef66bf067b4614cc57f07bcdc186b6344a0bdc6b"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "f3a863c3fce62f5046603f282a153a21597d6623", "filename": "src/librustc_middle/ty/consts.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1bf09933ed46d2063128218b9474430ffc694aff/src%2Flibrustc_middle%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bf09933ed46d2063128218b9474430ffc694aff/src%2Flibrustc_middle%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fconsts.rs?ref=1bf09933ed46d2063128218b9474430ffc694aff", "patch": "@@ -163,6 +163,16 @@ impl<'tcx> Const<'tcx> {\n         self.val.eval(tcx, param_env).try_to_bits(size)\n     }\n \n+    #[inline]\n+    pub fn try_eval_bool(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> Option<bool> {\n+        self.val.eval(tcx, param_env).try_to_bool()\n+    }\n+\n+    #[inline]\n+    pub fn try_eval_usize(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> Option<u64> {\n+        self.val.eval(tcx, param_env).try_to_machine_usize(tcx)\n+    }\n+\n     #[inline]\n     /// Tries to evaluate the constant if it is `Unevaluated`. If that doesn't succeed, return the\n     /// unevaluated constant.\n@@ -177,16 +187,6 @@ impl<'tcx> Const<'tcx> {\n         }\n     }\n \n-    #[inline]\n-    pub fn try_eval_bool(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> Option<bool> {\n-        self.val.eval(tcx, param_env).try_to_bool()\n-    }\n-\n-    #[inline]\n-    pub fn try_eval_usize(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> Option<u64> {\n-        self.val.eval(tcx, param_env).try_to_machine_usize(tcx)\n-    }\n-\n     #[inline]\n     /// Panics if the value cannot be evaluated or doesn't contain a valid integer of the given type.\n     pub fn eval_bits(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>, ty: Ty<'tcx>) -> u128 {"}]}