{"sha": "b83ab0ce965356308921acabe8a40fe88bcdd8c7", "node_id": "C_kwDOAAsO6NoAKGI4M2FiMGNlOTY1MzU2MzA4OTIxYWNhYmU4YTQwZmU4OGJjZGQ4Yzc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-25T19:17:46Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-25T19:37:10Z"}, "message": "Suggest mutable borrows correctly", "tree": {"sha": "08ab5e266284ab4f98e21185e6c4a04ddb9ee63a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08ab5e266284ab4f98e21185e6c4a04ddb9ee63a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b83ab0ce965356308921acabe8a40fe88bcdd8c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b83ab0ce965356308921acabe8a40fe88bcdd8c7", "html_url": "https://github.com/rust-lang/rust/commit/b83ab0ce965356308921acabe8a40fe88bcdd8c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b83ab0ce965356308921acabe8a40fe88bcdd8c7/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "800f1f351399a4923636c77b7a34a66ee0b09d8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/800f1f351399a4923636c77b7a34a66ee0b09d8b", "html_url": "https://github.com/rust-lang/rust/commit/800f1f351399a4923636c77b7a34a66ee0b09d8b"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "64f19aa0097006fd1e22cdd89de4509b1248141b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b83ab0ce965356308921acabe8a40fe88bcdd8c7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83ab0ce965356308921acabe8a40fe88bcdd8c7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=b83ab0ce965356308921acabe8a40fe88bcdd8c7", "patch": "@@ -3775,12 +3775,12 @@ fn hint_missing_borrow<'tcx>(\n \n     let args = fn_decl.inputs.iter().map(|ty| ty);\n \n-    fn get_deref_type_and_refs(mut ty: Ty<'_>) -> (Ty<'_>, usize) {\n-        let mut refs = 0;\n+    fn get_deref_type_and_refs(mut ty: Ty<'_>) -> (Ty<'_>, Vec<hir::Mutability>) {\n+        let mut refs = vec![];\n \n-        while let ty::Ref(_, new_ty, _) = ty.kind() {\n+        while let ty::Ref(_, new_ty, mutbl) = ty.kind() {\n             ty = *new_ty;\n-            refs += 1;\n+            refs.push(*mutbl);\n         }\n \n         (ty, refs)\n@@ -3794,11 +3794,21 @@ fn hint_missing_borrow<'tcx>(\n         let (expected_ty, expected_refs) = get_deref_type_and_refs(*expected_arg);\n \n         if infcx.can_eq(param_env, found_ty, expected_ty).is_ok() {\n-            if found_refs < expected_refs {\n-                to_borrow.push((arg.span.shrink_to_lo(), \"&\".repeat(expected_refs - found_refs)));\n-            } else if found_refs > expected_refs {\n+            // FIXME: This could handle more exotic cases like mutability mismatches too!\n+            if found_refs.len() < expected_refs.len()\n+                && found_refs[..] == expected_refs[expected_refs.len() - found_refs.len()..]\n+            {\n+                to_borrow.push((\n+                    arg.span.shrink_to_lo(),\n+                    expected_refs[..expected_refs.len() - found_refs.len()]\n+                        .iter()\n+                        .map(|mutbl| format!(\"&{}\", mutbl.prefix_str()))\n+                        .collect::<Vec<_>>()\n+                        .join(\"\"),\n+                ));\n+            } else if found_refs.len() > expected_refs.len() {\n                 let mut span = arg.span.shrink_to_lo();\n-                let mut left = found_refs - expected_refs;\n+                let mut left = found_refs.len() - expected_refs.len();\n                 let mut ty = arg;\n                 while let hir::TyKind::Ref(_, mut_ty) = &ty.kind && left > 0 {\n                     span = span.with_hi(mut_ty.ty.span.lo());"}, {"sha": "6820af1fd45c36e03418bf26e18241566b6ff667", "filename": "tests/ui/suggestions/late-bound-in-borrow-closure-sugg.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b83ab0ce965356308921acabe8a40fe88bcdd8c7/tests%2Fui%2Fsuggestions%2Flate-bound-in-borrow-closure-sugg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b83ab0ce965356308921acabe8a40fe88bcdd8c7/tests%2Fui%2Fsuggestions%2Flate-bound-in-borrow-closure-sugg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Flate-bound-in-borrow-closure-sugg.stderr?ref=b83ab0ce965356308921acabe8a40fe88bcdd8c7", "patch": "@@ -18,8 +18,8 @@ LL |     pub fn set_closure(&mut self, function: impl Fn(&mut Trader) + 'a) {\n    |                                                  ^^^^^^^^^^^^^^^ required by this bound in `Trader::<'a>::set_closure`\n help: consider borrowing the argument\n    |\n-LL |     let closure = |trader : &Trader| {\n-   |                             +\n+LL |     let closure = |trader : &mut Trader| {\n+   |                             ++++\n \n error: aborting due to previous error\n "}]}