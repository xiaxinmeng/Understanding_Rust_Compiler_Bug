{"sha": "cc35a11a393c3fca47a3b80db48c39c416f20bf6", "node_id": "C_kwDOAAsO6NoAKGNjMzVhMTFhMzkzYzNmY2E0N2EzYjgwZGI0OGMzOWM0MTZmMjBiZjY", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2021-12-10T14:18:54Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2021-12-10T15:30:04Z"}, "message": "BTree: assert presence of derived functions", "tree": {"sha": "a5cc1d1ed43921d5fca4353f4989cb81accd685d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5cc1d1ed43921d5fca4353f4989cb81accd685d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc35a11a393c3fca47a3b80db48c39c416f20bf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc35a11a393c3fca47a3b80db48c39c416f20bf6", "html_url": "https://github.com/rust-lang/rust/commit/cc35a11a393c3fca47a3b80db48c39c416f20bf6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc35a11a393c3fca47a3b80db48c39c416f20bf6/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8bc4b7a55606ae6d7b7af7c116c8188762b0871", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8bc4b7a55606ae6d7b7af7c116c8188762b0871", "html_url": "https://github.com/rust-lang/rust/commit/c8bc4b7a55606ae6d7b7af7c116c8188762b0871"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "7390ff5a59c8cd5b7908e53d04a2fa09e2108295", "filename": "library/alloc/src/collections/btree/set/tests.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cc35a11a393c3fca47a3b80db48c39c416f20bf6/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc35a11a393c3fca47a3b80db48c39c416f20bf6/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs?ref=cc35a11a393c3fca47a3b80db48c39c416f20bf6", "patch": "@@ -3,6 +3,7 @@ use super::super::testing::rng::DeterministicRng;\n use super::*;\n use crate::vec::Vec;\n use std::cmp::Ordering;\n+use std::hash::{Hash, Hasher};\n use std::iter::FromIterator;\n use std::panic::{catch_unwind, AssertUnwindSafe};\n \n@@ -607,6 +608,37 @@ fn assert_send() {\n     }\n }\n \n+#[allow(dead_code)]\n+// Check that the member-like functions conditionally provided by #[derive()]\n+// are not overriden by genuine member functions with a different signature.\n+fn assert_derives() {\n+    fn hash<T: Hash, H: Hasher>(v: BTreeSet<T>, state: &mut H) {\n+        v.hash(state);\n+        // Tested much more thoroughly outside the crate in btree_set_hash.rs\n+    }\n+    fn eq<T: PartialEq>(v: BTreeSet<T>) {\n+        let _ = v.eq(&v);\n+    }\n+    fn ne<T: PartialEq>(v: BTreeSet<T>) {\n+        let _ = v.ne(&v);\n+    }\n+    fn cmp<T: Ord>(v: BTreeSet<T>) {\n+        let _ = v.cmp(&v);\n+    }\n+    fn min<T: Ord>(v: BTreeSet<T>, w: BTreeSet<T>) {\n+        let _ = v.min(w);\n+    }\n+    fn max<T: Ord>(v: BTreeSet<T>, w: BTreeSet<T>) {\n+        let _ = v.max(w);\n+    }\n+    fn clamp<T: Ord>(v: BTreeSet<T>, w: BTreeSet<T>, x: BTreeSet<T>) {\n+        let _ = v.clamp(w, x);\n+    }\n+    fn partial_cmp<T: PartialOrd>(v: &BTreeSet<T>) {\n+        let _ = v.partial_cmp(&v);\n+    }\n+}\n+\n #[test]\n fn test_ord_absence() {\n     fn set<K>(mut set: BTreeSet<K>) {"}]}