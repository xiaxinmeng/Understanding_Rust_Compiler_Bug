{"sha": "3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19", "node_id": "C_kwDOAAsO6NoAKDNhNzNjYTU4N2JiOGE4ZmI1MmQ2MDQ1ZmJlMzFkNTBkNWE1NmZmMTk", "commit": {"author": {"name": "Lo\u00efc BRANSTETT", "email": "lolo.branstett@numericable.fr", "date": "2021-09-29T00:39:30Z"}, "committer": {"name": "Lo\u00efc BRANSTETT", "email": "lolo.branstett@numericable.fr", "date": "2022-02-16T12:03:12Z"}, "message": "Implement --check-cfg option (RFC 3013)\n\nCo-authored-by: Urgau <lolo.branstett@numericable.fr>\nCo-authored-by: Marcelina Ko\u015bcielnicka <mwk@0x04.net>", "tree": {"sha": "37a0d4e25436b3524bb8e1b876f009dad1824f64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37a0d4e25436b3524bb8e1b876f009dad1824f64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19", "html_url": "https://github.com/rust-lang/rust/commit/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6499c5e7fc173a3f55b7a3bd1e6a50e9edef782d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6499c5e7fc173a3f55b7a3bd1e6a50e9edef782d", "html_url": "https://github.com/rust-lang/rust/commit/6499c5e7fc173a3f55b7a3bd1e6a50e9edef782d"}], "stats": {"total": 372, "additions": 365, "deletions": 7}, "files": [{"sha": "49043e9f5f9d630ebfad878d08a48862200a1acb", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19", "patch": "@@ -1,10 +1,13 @@\n //! Parsing and validation of builtin attributes\n \n-use rustc_ast::{self as ast, Attribute, Lit, LitKind, MetaItem, MetaItemKind, NestedMetaItem};\n+use rustc_ast as ast;\n+use rustc_ast::node_id::CRATE_NODE_ID;\n+use rustc_ast::{Attribute, Lit, LitKind, MetaItem, MetaItemKind, NestedMetaItem};\n use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_feature::{find_gated_cfg, is_builtin_attr_name, Features, GatedCfg};\n use rustc_macros::HashStable_Generic;\n+use rustc_session::lint::builtin::UNEXPECTED_CFGS;\n use rustc_session::parse::{feature_err, ParseSess};\n use rustc_session::Session;\n use rustc_span::hygiene::Transparency;\n@@ -458,8 +461,30 @@ pub fn cfg_matches(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Feat\n                 true\n             }\n             MetaItemKind::NameValue(..) | MetaItemKind::Word => {\n-                let ident = cfg.ident().expect(\"multi-segment cfg predicate\");\n-                sess.config.contains(&(ident.name, cfg.value_str()))\n+                let name = cfg.ident().expect(\"multi-segment cfg predicate\").name;\n+                let value = cfg.value_str();\n+                if sess.check_config.names_checked && !sess.check_config.names_valid.contains(&name)\n+                {\n+                    sess.buffer_lint(\n+                        UNEXPECTED_CFGS,\n+                        cfg.span,\n+                        CRATE_NODE_ID,\n+                        \"unexpected `cfg` condition name\",\n+                    );\n+                }\n+                if let Some(val) = value {\n+                    if sess.check_config.values_checked.contains(&name)\n+                        && !sess.check_config.values_valid.contains(&(name, val))\n+                    {\n+                        sess.buffer_lint(\n+                            UNEXPECTED_CFGS,\n+                            cfg.span,\n+                            CRATE_NODE_ID,\n+                            \"unexpected `cfg` condition value\",\n+                        );\n+                    }\n+                }\n+                sess.config.contains(&(name, value))\n             }\n         }\n     })"}, {"sha": "dd235063b5cf79d0fac6acf859b7304b8f2d1a2d", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19", "patch": "@@ -216,10 +216,12 @@ fn run_compiler(\n     }\n \n     let cfg = interface::parse_cfgspecs(matches.opt_strs(\"cfg\"));\n+    let check_cfg = interface::parse_check_cfg(matches.opt_strs(\"check-cfg\"));\n     let (odir, ofile) = make_output(&matches);\n     let mut config = interface::Config {\n         opts: sopts,\n         crate_cfg: cfg,\n+        crate_check_cfg: check_cfg,\n         input: Input::File(PathBuf::new()),\n         input_path: None,\n         output_file: ofile,"}, {"sha": "81d33411c4e869d6fafd418287a9f71f881be4c2", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 89, "deletions": 2, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19", "patch": "@@ -2,7 +2,7 @@ pub use crate::passes::BoxedResolver;\n use crate::util;\n \n use rustc_ast::token;\n-use rustc_ast::{self as ast, MetaItemKind};\n+use rustc_ast::{self as ast, LitKind, MetaItemKind};\n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n@@ -13,12 +13,13 @@ use rustc_lint::LintStore;\n use rustc_middle::ty;\n use rustc_parse::maybe_new_parser_from_source_str;\n use rustc_query_impl::QueryCtxt;\n-use rustc_session::config::{self, ErrorOutputType, Input, OutputFilenames};\n+use rustc_session::config::{self, CheckCfg, ErrorOutputType, Input, OutputFilenames};\n use rustc_session::early_error;\n use rustc_session::lint;\n use rustc_session::parse::{CrateConfig, ParseSess};\n use rustc_session::{DiagnosticOutput, Session};\n use rustc_span::source_map::{FileLoader, FileName};\n+use rustc_span::symbol::sym;\n use std::path::PathBuf;\n use std::result;\n use std::sync::{Arc, Mutex};\n@@ -140,13 +141,98 @@ pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String\n     })\n }\n \n+/// Converts strings provided as `--check-cfg [specs]` into a `CheckCfg`.\n+pub fn parse_check_cfg(specs: Vec<String>) -> CheckCfg {\n+    rustc_span::create_default_session_if_not_set_then(move |_| {\n+        let mut cfg = CheckCfg::default();\n+\n+        'specs: for s in specs {\n+            let sess = ParseSess::with_silent_emitter(Some(format!(\n+                \"this error occurred on the command line: `--check-cfg={}`\",\n+                s\n+            )));\n+            let filename = FileName::cfg_spec_source_code(&s);\n+\n+            macro_rules! error {\n+                ($reason: expr) => {\n+                    early_error(\n+                        ErrorOutputType::default(),\n+                        &format!(\n+                            concat!(\"invalid `--check-cfg` argument: `{}` (\", $reason, \")\"),\n+                            s\n+                        ),\n+                    );\n+                };\n+            }\n+\n+            match maybe_new_parser_from_source_str(&sess, filename, s.to_string()) {\n+                Ok(mut parser) => match &mut parser.parse_meta_item() {\n+                    Ok(meta_item) if parser.token == token::Eof => {\n+                        if let Some(args) = meta_item.meta_item_list() {\n+                            if meta_item.has_name(sym::names) {\n+                                cfg.names_checked = true;\n+                                for arg in args {\n+                                    if arg.is_word() && arg.ident().is_some() {\n+                                        let ident = arg.ident().expect(\"multi-segment cfg key\");\n+                                        cfg.names_valid.insert(ident.name.to_string());\n+                                    } else {\n+                                        error!(\"`names()` arguments must be simple identifers\");\n+                                    }\n+                                }\n+                                continue 'specs;\n+                            } else if meta_item.has_name(sym::values) {\n+                                if let Some((name, values)) = args.split_first() {\n+                                    if name.is_word() && name.ident().is_some() {\n+                                        let ident = name.ident().expect(\"multi-segment cfg key\");\n+                                        cfg.values_checked.insert(ident.to_string());\n+                                        for val in values {\n+                                            if let Some(LitKind::Str(s, _)) =\n+                                                val.literal().map(|lit| &lit.kind)\n+                                            {\n+                                                cfg.values_valid\n+                                                    .insert((ident.to_string(), s.to_string()));\n+                                            } else {\n+                                                error!(\n+                                                    \"`values()` arguments must be string literals\"\n+                                                );\n+                                            }\n+                                        }\n+\n+                                        continue 'specs;\n+                                    } else {\n+                                        error!(\n+                                            \"`values()` first argument must be a simple identifer\"\n+                                        );\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                    Ok(..) => {}\n+                    Err(err) => err.cancel(),\n+                },\n+                Err(errs) => errs.into_iter().for_each(|mut err| err.cancel()),\n+            }\n+\n+            error!(\n+                \"expected `names(name1, name2, ... nameN)` or \\\n+                `values(name, \\\"value1\\\", \\\"value2\\\", ... \\\"valueN\\\")`\"\n+            );\n+        }\n+\n+        cfg.names_valid.extend(cfg.values_checked.iter().cloned());\n+        cfg\n+    })\n+}\n+\n /// The compiler configuration\n pub struct Config {\n     /// Command line options\n     pub opts: config::Options,\n \n     /// cfg! configuration in addition to the default ones\n     pub crate_cfg: FxHashSet<(String, Option<String>)>,\n+    pub crate_check_cfg: CheckCfg,\n \n     pub input: Input,\n     pub input_path: Option<PathBuf>,\n@@ -190,6 +276,7 @@ pub fn create_compiler_and_run<R>(config: Config, f: impl FnOnce(&Compiler) -> R\n     let (mut sess, codegen_backend) = util::create_session(\n         config.opts,\n         config.crate_cfg,\n+        config.crate_check_cfg,\n         config.diagnostic_output,\n         config.file_loader,\n         config.input_path.clone(),"}, {"sha": "4b1b01de54942d6513698cfeae91c59276fa4262", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19", "patch": "@@ -15,6 +15,7 @@ use rustc_parse::validate_attr;\n use rustc_query_impl::QueryCtxt;\n use rustc_resolve::{self, Resolver};\n use rustc_session as session;\n+use rustc_session::config::CheckCfg;\n use rustc_session::config::{self, CrateType};\n use rustc_session::config::{ErrorOutputType, Input, OutputFilenames};\n use rustc_session::lint::{self, BuiltinLintDiagnostics, LintBuffer};\n@@ -67,6 +68,7 @@ pub fn add_configuration(\n pub fn create_session(\n     sopts: config::Options,\n     cfg: FxHashSet<(String, Option<String>)>,\n+    check_cfg: CheckCfg,\n     diagnostic_output: DiagnosticOutput,\n     file_loader: Option<Box<dyn FileLoader + Send + Sync + 'static>>,\n     input_path: Option<PathBuf>,\n@@ -102,7 +104,13 @@ pub fn create_session(\n \n     let mut cfg = config::build_configuration(&sess, config::to_crate_config(cfg));\n     add_configuration(&mut cfg, &mut sess, &*codegen_backend);\n+\n+    let mut check_cfg = config::to_crate_check_config(check_cfg);\n+    check_cfg.fill_well_known();\n+    check_cfg.fill_actual(&cfg);\n+\n     sess.parse_sess.config = cfg;\n+    sess.parse_sess.check_config = check_cfg;\n \n     (Lrc::new(sess), Lrc::new(codegen_backend))\n }"}, {"sha": "adec1a3ab00d6c0e89805232dc89ff13f842f8ab", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19", "patch": "@@ -2957,6 +2957,43 @@ declare_lint! {\n     };\n }\n \n+declare_lint! {\n+    /// The `unexpected_cfgs` lint detects unexpected conditional compilation conditions.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```text\n+    /// rustc --check-cfg 'names()'\n+    /// ```\n+    ///\n+    /// ```rust,ignore (needs command line option)\n+    /// #[cfg(widnows)]\n+    /// fn foo() {}\n+    /// ```\n+    ///\n+    /// This will produce:\n+    ///\n+    /// ```text\n+    /// warning: unknown condition name used\n+    ///  --> lint_example.rs:1:7\n+    ///   |\n+    /// 1 | #[cfg(widnows)]\n+    ///   |       ^^^^^^^\n+    ///   |\n+    ///   = note: `#[warn(unexpected_cfgs)]` on by default\n+    /// ```\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// This lint is only active when a `--check-cfg='names(...)'` option has been passed\n+    /// to the compiler and triggers whenever an unknown condition name or value is used.\n+    /// The known condition include names or values passed in `--check-cfg`, `--cfg`, and some\n+    /// well-knows names and values built into the compiler.\n+    pub UNEXPECTED_CFGS,\n+    Warn,\n+    \"detects unexpected names and values in `#[cfg]` conditions\",\n+}\n+\n declare_lint_pass! {\n     /// Does nothing as a lint pass, but registers some `Lint`s\n     /// that are used by other parts of the compiler.\n@@ -3055,6 +3092,7 @@ declare_lint_pass! {\n         DEPRECATED_CFG_ATTR_CRATE_TYPE_NAME,\n         DUPLICATE_MACRO_ATTRIBUTES,\n         SUSPICIOUS_AUTO_TRAIT_IMPLS,\n+        UNEXPECTED_CFGS,\n     ]\n }\n "}, {"sha": "f90766875d290d0db5c1a55b1d584bd3ac8ce540", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 88, "deletions": 1, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19", "patch": "@@ -16,7 +16,7 @@ use rustc_target::spec::{LinkerFlavor, SplitDebuginfo, Target, TargetTriple, Tar\n \n use rustc_serialize::json;\n \n-use crate::parse::CrateConfig;\n+use crate::parse::{CrateCheckConfig, CrateConfig};\n use rustc_feature::UnstableFeatures;\n use rustc_span::edition::{Edition, DEFAULT_EDITION, EDITION_NAME_LIST, LATEST_STABLE_EDITION};\n use rustc_span::source_map::{FileName, FilePathMapping};\n@@ -921,6 +921,7 @@ pub const fn default_lib_output() -> CrateType {\n }\n \n fn default_configuration(sess: &Session) -> CrateConfig {\n+    // NOTE: This should be kept in sync with `CrateCheckConfig::fill_well_known` below.\n     let end = &sess.target.endian;\n     let arch = &sess.target.arch;\n     let wordsz = sess.target.pointer_width.to_string();\n@@ -1005,6 +1006,91 @@ pub fn to_crate_config(cfg: FxHashSet<(String, Option<String>)>) -> CrateConfig\n     cfg.into_iter().map(|(a, b)| (Symbol::intern(&a), b.map(|b| Symbol::intern(&b)))).collect()\n }\n \n+/// The parsed `--check-cfg` options\n+pub struct CheckCfg<T = String> {\n+    /// Set if `names()` checking is enabled\n+    pub names_checked: bool,\n+    /// The union of all `names()`\n+    pub names_valid: FxHashSet<T>,\n+    /// The set of names for which `values()` was used\n+    pub values_checked: FxHashSet<T>,\n+    /// The set of all (name, value) pairs passed in `values()`\n+    pub values_valid: FxHashSet<(T, T)>,\n+}\n+\n+impl<T> Default for CheckCfg<T> {\n+    fn default() -> Self {\n+        CheckCfg {\n+            names_checked: false,\n+            names_valid: FxHashSet::default(),\n+            values_checked: FxHashSet::default(),\n+            values_valid: FxHashSet::default(),\n+        }\n+    }\n+}\n+\n+impl<T> CheckCfg<T> {\n+    fn map_data<O: Eq + Hash>(&self, f: impl Fn(&T) -> O) -> CheckCfg<O> {\n+        CheckCfg {\n+            names_checked: self.names_checked,\n+            names_valid: self.names_valid.iter().map(|a| f(a)).collect(),\n+            values_checked: self.values_checked.iter().map(|a| f(a)).collect(),\n+            values_valid: self.values_valid.iter().map(|(a, b)| (f(a), f(b))).collect(),\n+        }\n+    }\n+}\n+\n+/// Converts the crate `--check-cfg` options from `String` to `Symbol`.\n+/// `rustc_interface::interface::Config` accepts this in the compiler configuration,\n+/// but the symbol interner is not yet set up then, so we must convert it later.\n+pub fn to_crate_check_config(cfg: CheckCfg) -> CrateCheckConfig {\n+    cfg.map_data(|s| Symbol::intern(s))\n+}\n+\n+impl CrateCheckConfig {\n+    /// Fills a `CrateCheckConfig` with well-known configuration names.\n+    pub fn fill_well_known(&mut self) {\n+        // NOTE: This should be kept in sync with `default_configuration`\n+        const WELL_KNOWN_NAMES: &[Symbol] = &[\n+            sym::unix,\n+            sym::windows,\n+            sym::target_os,\n+            sym::target_family,\n+            sym::target_arch,\n+            sym::target_endian,\n+            sym::target_pointer_width,\n+            sym::target_env,\n+            sym::target_abi,\n+            sym::target_vendor,\n+            sym::target_thread_local,\n+            sym::target_has_atomic_load_store,\n+            sym::target_has_atomic,\n+            sym::target_has_atomic_equal_alignment,\n+            sym::panic,\n+            sym::sanitize,\n+            sym::debug_assertions,\n+            sym::proc_macro,\n+            sym::test,\n+            sym::doc,\n+            sym::doctest,\n+            sym::feature,\n+        ];\n+        for &name in WELL_KNOWN_NAMES {\n+            self.names_valid.insert(name);\n+        }\n+    }\n+\n+    /// Fills a `CrateCheckConfig` with configuration names and values that are actually active.\n+    pub fn fill_actual(&mut self, cfg: &CrateConfig) {\n+        for &(k, v) in cfg {\n+            self.names_valid.insert(k);\n+            if let Some(v) = v {\n+                self.values_valid.insert((k, v));\n+            }\n+        }\n+    }\n+}\n+\n pub fn build_configuration(sess: &Session, mut user_cfg: CrateConfig) -> CrateConfig {\n     // Combine the configuration requested by the session (command line) with\n     // some default and generated configuration items.\n@@ -1148,6 +1234,7 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n     vec![\n         opt::flag_s(\"h\", \"help\", \"Display this message\"),\n         opt::multi_s(\"\", \"cfg\", \"Configure the compilation environment\", \"SPEC\"),\n+        opt::multi(\"\", \"check-cfg\", \"Provide list of valid cfg options for checking\", \"SPEC\"),\n         opt::multi_s(\n             \"L\",\n             \"\","}, {"sha": "7113f9b0a2f5a4d8fc4f21fd0d26116d7de7dcfe", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19", "patch": "@@ -1,6 +1,7 @@\n //! Contains `ParseSess` which holds state living beyond what one `Parser` might.\n //! It also serves as an input to the parser itself.\n \n+use crate::config::CheckCfg;\n use crate::lint::{BufferedEarlyLint, BuiltinLintDiagnostics, Lint, LintId};\n use rustc_ast::node_id::NodeId;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -18,6 +19,7 @@ use std::str;\n /// The set of keys (and, optionally, values) that define the compilation\n /// environment of the crate, used to drive conditional compilation.\n pub type CrateConfig = FxHashSet<(Symbol, Option<Symbol>)>;\n+pub type CrateCheckConfig = CheckCfg<Symbol>;\n \n /// Collected spans during parsing for places where a certain feature was\n /// used and should be feature gated accordingly in `check_crate`.\n@@ -117,6 +119,7 @@ pub struct ParseSess {\n     pub span_diagnostic: Handler,\n     pub unstable_features: UnstableFeatures,\n     pub config: CrateConfig,\n+    pub check_config: CrateCheckConfig,\n     pub edition: Edition,\n     pub missing_fragment_specifiers: Lock<FxHashMap<Span, NodeId>>,\n     /// Places where raw identifiers were used. This is used to avoid complaining about idents\n@@ -162,6 +165,7 @@ impl ParseSess {\n             span_diagnostic: handler,\n             unstable_features: UnstableFeatures::from_environment(None),\n             config: FxHashSet::default(),\n+            check_config: CrateCheckConfig::default(),\n             edition: ExpnId::root().expn_data().edition,\n             missing_fragment_specifiers: Default::default(),\n             raw_identifier_spans: Lock::new(Vec::new()),"}, {"sha": "1d8b5ab75c291beef0cd519c36bbc3af5af7eca4", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19", "patch": "@@ -908,6 +908,7 @@ symbols! {\n         naked,\n         naked_functions,\n         name,\n+        names,\n         native_link_modifiers,\n         native_link_modifiers_as_needed,\n         native_link_modifiers_bundle,\n@@ -1478,6 +1479,7 @@ symbols! {\n         va_list,\n         va_start,\n         val,\n+        values,\n         var,\n         variant_count,\n         vec,"}, {"sha": "5d2f774f8cff38fbd9234f8d0cb7b3a973f0aeae", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19", "patch": "@@ -250,6 +250,7 @@ crate fn create_config(\n     interface::Config {\n         opts: sessopts,\n         crate_cfg: interface::parse_cfgspecs(cfgs),\n+        crate_check_cfg: interface::parse_check_cfg(vec![]),\n         input,\n         input_path: cpath,\n         output_file: None,"}, {"sha": "6f398c176832d02a5bcb05535b46d26e71883906", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19", "patch": "@@ -91,6 +91,7 @@ crate fn run(options: RustdocOptions) -> Result<(), ErrorReported> {\n     let config = interface::Config {\n         opts: sessopts,\n         crate_cfg: interface::parse_cfgspecs(cfgs),\n+        crate_check_cfg: interface::parse_check_cfg(vec![]),\n         input,\n         input_path: None,\n         output_file: None,"}, {"sha": "ec711eb4e487e7d20c8dc42286cb323db5143b17", "filename": "src/test/run-make-fulldeps/issue-19371/foo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs?ref=3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19", "patch": "@@ -49,6 +49,7 @@ fn compile(code: String, output: PathBuf, sysroot: PathBuf) {\n     let config = interface::Config {\n         opts,\n         crate_cfg: Default::default(),\n+        crate_check_cfg: Default::default(),\n         input,\n         input_path: None,\n         output_file: Some(output),"}, {"sha": "046ff0364e2716081e4ebd0f0dce900d03af5f71", "filename": "src/test/ui/check-cfg/empty-names.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-names.rs?ref=3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19", "patch": "@@ -0,0 +1,10 @@\n+// Check warning for unexpected cfg\n+//\n+// check-pass\n+// compile-flags: --check-cfg=names() -Z unstable-options\n+\n+#[cfg(unknown_key = \"value\")]\n+//~^ WARNING unexpected `cfg` condition name\n+pub fn f() {}\n+\n+fn main() {}"}, {"sha": "f926d1133cced3e50d7cb6d86bf2af3941644b7b", "filename": "src/test/ui/check-cfg/empty-names.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-names.stderr?ref=3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19", "patch": "@@ -0,0 +1,10 @@\n+warning: unexpected `cfg` condition name\n+  --> $DIR/empty-names.rs:6:7\n+   |\n+LL | #[cfg(unknown_key = \"value\")]\n+   |       ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "38ef9e51c7a1f58f4f19d094d875b8a30fb9358d", "filename": "src/test/ui/check-cfg/empty-values.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.rs?ref=3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19", "patch": "@@ -0,0 +1,6 @@\n+// Check that a an empty values() is rejected\n+//\n+// check-fail\n+// compile-flags: --check-cfg=values() -Z unstable-options\n+\n+fn main() {}"}, {"sha": "106d5b7b47f9bec61c11562793d3723c597a3c68", "filename": "src/test/ui/check-cfg/empty-values.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fempty-values.stderr?ref=3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19", "patch": "@@ -0,0 +1,2 @@\n+error: invalid `--check-cfg` argument: `values()` (expected `names(name1, name2, ... nameN)` or `values(name, \"value1\", \"value2\", ... \"valueN\")`)\n+"}, {"sha": "850924d993ac940946382e184f6dcb2486351ab0", "filename": "src/test/ui/check-cfg/invalid-arguments.anything_else.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-arguments.anything_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-arguments.anything_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-arguments.anything_else.stderr?ref=3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19", "patch": "@@ -0,0 +1,2 @@\n+error: invalid `--check-cfg` argument: `anything_else(...)` (expected `names(name1, name2, ... nameN)` or `values(name, \"value1\", \"value2\", ... \"valueN\")`)\n+"}, {"sha": "bdfbc3d54a2c58ec3d8af494a8d5751132cabcc9", "filename": "src/test/ui/check-cfg/invalid-arguments.names_simple_ident.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-arguments.names_simple_ident.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-arguments.names_simple_ident.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-arguments.names_simple_ident.stderr?ref=3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19", "patch": "@@ -0,0 +1,2 @@\n+error: invalid `--check-cfg` argument: `names(\"NOT_IDENT\")` (`names()` arguments must be simple identifers)\n+"}, {"sha": "5090ce3e845d368934d54b06763e6b4fce71f6fb", "filename": "src/test/ui/check-cfg/invalid-arguments.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-arguments.rs?ref=3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19", "patch": "@@ -0,0 +1,10 @@\n+// Check that invalid --check-cfg are rejected\n+//\n+// check-fail\n+// revisions: anything_else names_simple_ident values_simple_ident values_string_literals\n+// [anything_else]compile-flags: -Z unstable-options --check-cfg=anything_else(...)\n+// [names_simple_ident]compile-flags: -Z unstable-options --check-cfg=names(\"NOT_IDENT\")\n+// [values_simple_ident]compile-flags: -Z unstable-options --check-cfg=values(\"NOT_IDENT\")\n+// [values_string_literals]compile-flags: -Z unstable-options --check-cfg=values(test,12)\n+\n+fn main() {}"}, {"sha": "b25882baaf3e634d135217138a34a074b588297f", "filename": "src/test/ui/check-cfg/invalid-arguments.values_simple_ident.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-arguments.values_simple_ident.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-arguments.values_simple_ident.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-arguments.values_simple_ident.stderr?ref=3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19", "patch": "@@ -0,0 +1,2 @@\n+error: invalid `--check-cfg` argument: `values(\"NOT_IDENT\")` (`values()` first argument must be a simple identifer)\n+"}, {"sha": "5853b4741a6422e8551ec8056449ff5a3032d04c", "filename": "src/test/ui/check-cfg/invalid-arguments.values_string_literals.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-arguments.values_string_literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-arguments.values_string_literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-arguments.values_string_literals.stderr?ref=3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19", "patch": "@@ -0,0 +1,2 @@\n+error: invalid `--check-cfg` argument: `values(test,12)` (`values()` arguments must be string literals)\n+"}, {"sha": "8499d3d4448da583454bdba3f996aceed2a19a57", "filename": "src/test/ui/check-cfg/invalid-cfg-name.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-name.rs?ref=3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19", "patch": "@@ -0,0 +1,14 @@\n+// Check warning for invalid configuration name\n+//\n+// edition:2018\n+// check-pass\n+// compile-flags: --check-cfg=names() -Z unstable-options\n+\n+#[cfg(widnows)]\n+//~^ WARNING unexpected `cfg` condition name\n+pub fn f() {}\n+\n+#[cfg(windows)]\n+pub fn g() {}\n+\n+pub fn main() {}"}, {"sha": "2587685afa048a66ed27f66973ecfbb01a13fed0", "filename": "src/test/ui/check-cfg/invalid-cfg-name.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-name.stderr?ref=3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19", "patch": "@@ -0,0 +1,10 @@\n+warning: unexpected `cfg` condition name\n+  --> $DIR/invalid-cfg-name.rs:7:7\n+   |\n+LL | #[cfg(widnows)]\n+   |       ^^^^^^^\n+   |\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "a60095a5aae9dd7e564663b5b44c4f1626f53f0f", "filename": "src/test/ui/check-cfg/invalid-cfg-value.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.rs?ref=3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19", "patch": "@@ -0,0 +1,17 @@\n+// Check warning for invalid configuration value\n+//\n+// edition:2018\n+// check-pass\n+// compile-flags: --check-cfg=values(feature,\"serde\",\"full\") --cfg=feature=\"rand\" -Z unstable-options\n+\n+#[cfg(feature = \"sedre\")]\n+//~^ WARNING unexpected `cfg` condition value\n+pub fn f() {}\n+\n+#[cfg(feature = \"serde\")]\n+pub fn g() {}\n+\n+#[cfg(feature = \"rand\")]\n+pub fn h() {}\n+\n+pub fn main() {}"}, {"sha": "c591d8474a26146a0ece257f3a6a65c302f70685", "filename": "src/test/ui/check-cfg/invalid-cfg-value.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr?ref=3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19", "patch": "@@ -0,0 +1,10 @@\n+warning: unexpected `cfg` condition value\n+  --> $DIR/invalid-cfg-value.rs:7:7\n+   |\n+LL | #[cfg(feature = \"sedre\")]\n+   |       ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "4012a3b04b522d6dce854a66dd54d152400e67bf", "filename": "src/test/ui/feature-gates/feature-gate-check-cfg.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-check-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-check-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-check-cfg.rs?ref=3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19", "patch": "@@ -0,0 +1,3 @@\n+// compile-flags: --check-cfg \"names()\"\n+\n+fn main() {}"}, {"sha": "9b27c2bc058a73760e18439b943d0d8bd1b74577", "filename": "src/test/ui/feature-gates/feature-gate-check-cfg.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-check-cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-check-cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-check-cfg.stderr?ref=3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19", "patch": "@@ -0,0 +1,2 @@\n+error: the `-Z unstable-options` flag must also be passed to enable the flag `check-cfg`\n+"}, {"sha": "95847dcd46be5e2b8f212230058aa2958f39fda0", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=3a73ca587bb8a8fb52d6045fbe31d50d5a56ff19", "patch": "@@ -7,7 +7,7 @@ use std::path::Path;\n \n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n-const ROOT_ENTRY_LIMIT: usize = 982;\n+const ROOT_ENTRY_LIMIT: usize = 983;\n const ISSUES_ENTRY_LIMIT: usize = 2310;\n \n fn check_entries(path: &Path, bad: &mut bool) {"}]}