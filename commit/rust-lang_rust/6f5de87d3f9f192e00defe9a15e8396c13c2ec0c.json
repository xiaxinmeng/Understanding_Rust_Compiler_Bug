{"sha": "6f5de87d3f9f192e00defe9a15e8396c13c2ec0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmNWRlODdkM2Y5ZjE5MmUwMGRlZmU5YTE1ZTgzOTZjMTNjMmVjMGM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-03T16:34:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-03T16:34:34Z"}, "message": "Rollup merge of #71398 - ThinkChaos:feat_refcell_take, r=LukasKalbertodt\n\nAdd `RefCell::take`\n\nAdd `RefCell::take` to match `Cell` and `Option`.\nI also changed a couple of calls to `.replace` to `.take`.\n\nTracking issue is #71395.\n\nThis is my first contribution, please tell me if there's anything I could improve, thanks!", "tree": {"sha": "2abe45831799f97a5f86e08c910cc7d5a515778f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2abe45831799f97a5f86e08c910cc7d5a515778f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f5de87d3f9f192e00defe9a15e8396c13c2ec0c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJervKbCRBK7hj4Ov3rIwAAdHIIAGP6r46/5l6bwf5Gvm6WjOz5\n48MH7jnPqttgIYY7mGJZLFnhvsxOgnj3bRZV3Dwy5Jyq00N/Myn+Caa3ge5QNG0L\nP1AgXzQ6MyXkaO94JtP52x3AbIUKgcyb9RtqqrPMVfScBtgoEHDbGidvzheprPy1\nRepTGkIAjq1zUeN0/PkiuV9SsY5WjbNqAk7EuHOd9RtcsssPsjkaHQqx3Yp2wpW3\nMTIcpusZ5dldCSXekaLEBRwoN10A4vD2hTzsSA1EI4kyRi8XGFQmpdHSkXhjW8Rq\nvl8/oooGL0DVpbx9JmO9Mo7P18HGk8kUeiyitjxSG9XceZjV+xANJtk5xJUw/6E=\n=uxGq\n-----END PGP SIGNATURE-----\n", "payload": "tree 2abe45831799f97a5f86e08c910cc7d5a515778f\nparent e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2\nparent 4a79424b748338bd9635f0115c025942af2d5c3d\nauthor Dylan DPC <dylan.dpc@gmail.com> 1588523674 +0200\ncommitter GitHub <noreply@github.com> 1588523674 +0200\n\nRollup merge of #71398 - ThinkChaos:feat_refcell_take, r=LukasKalbertodt\n\nAdd `RefCell::take`\n\nAdd `RefCell::take` to match `Cell` and `Option`.\nI also changed a couple of calls to `.replace` to `.take`.\n\nTracking issue is #71395.\n\nThis is my first contribution, please tell me if there's anything I could improve, thanks!\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f5de87d3f9f192e00defe9a15e8396c13c2ec0c", "html_url": "https://github.com/rust-lang/rust/commit/6f5de87d3f9f192e00defe9a15e8396c13c2ec0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f5de87d3f9f192e00defe9a15e8396c13c2ec0c/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2", "html_url": "https://github.com/rust-lang/rust/commit/e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2"}, {"sha": "4a79424b748338bd9635f0115c025942af2d5c3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a79424b748338bd9635f0115c025942af2d5c3d", "html_url": "https://github.com/rust-lang/rust/commit/4a79424b748338bd9635f0115c025942af2d5c3d"}], "stats": {"total": 33, "additions": 29, "deletions": 4}, "files": [{"sha": "0f2665eba6f22f1be3e2e48652129dcfefa53023", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6f5de87d3f9f192e00defe9a15e8396c13c2ec0c/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5de87d3f9f192e00defe9a15e8396c13c2ec0c/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=6f5de87d3f9f192e00defe9a15e8396c13c2ec0c", "patch": "@@ -1023,6 +1023,31 @@ impl<T: ?Sized> RefCell<T> {\n     }\n }\n \n+impl<T: Default> RefCell<T> {\n+    /// Takes the wrapped value, leaving `Default::default()` in its place.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if the value is currently borrowed.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(refcell_take)]\n+    /// use std::cell::RefCell;\n+    ///\n+    /// let c = RefCell::new(5);\n+    /// let five = c.take();\n+    ///\n+    /// assert_eq!(five, 5);\n+    /// assert_eq!(c.into_inner(), 0);\n+    /// ```\n+    #[unstable(feature = \"refcell_take\", issue = \"71395\")]\n+    pub fn take(&self) -> T {\n+        self.replace(Default::default())\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T: ?Sized> Send for RefCell<T> where T: Send {}\n "}, {"sha": "a3ee14e85d22286df13e0dfcffef2f14ea9f3e27", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f5de87d3f9f192e00defe9a15e8396c13c2ec0c/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5de87d3f9f192e00defe9a15e8396c13c2ec0c/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=6f5de87d3f9f192e00defe9a15e8396c13c2ec0c", "patch": "@@ -497,7 +497,7 @@ impl Drop for WaiterQueue<'_> {\n             let mut queue = (state_and_queue & !STATE_MASK) as *const Waiter;\n             while !queue.is_null() {\n                 let next = (*queue).next;\n-                let thread = (*queue).thread.replace(None).unwrap();\n+                let thread = (*queue).thread.take().unwrap();\n                 (*queue).signaled.store(true, Ordering::Release);\n                 // ^- FIXME (maybe): This is another case of issue #55005\n                 // `store()` has a potentially dangling ref to `signaled`."}, {"sha": "6df52affe399333863131ffe8ba84bb9c4d8a1c6", "filename": "src/test/run-make/wasm-panic-small/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f5de87d3f9f192e00defe9a15e8396c13c2ec0c/src%2Ftest%2Frun-make%2Fwasm-panic-small%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5de87d3f9f192e00defe9a15e8396c13c2ec0c/src%2Ftest%2Frun-make%2Fwasm-panic-small%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-panic-small%2Ffoo.rs?ref=6f5de87d3f9f192e00defe9a15e8396c13c2ec0c", "patch": "@@ -23,5 +23,5 @@ pub fn foo() {\n pub fn foo() -> usize {\n     use std::cell::Cell;\n     thread_local!(static A: Cell<Vec<u32>> = Cell::new(Vec::new()));\n-    A.try_with(|x| x.replace(Vec::new()).len()).unwrap_or(0)\n+    A.try_with(|x| x.take().len()).unwrap_or(0)\n }"}, {"sha": "a5b85646581bfe9b85cc395937162e05f3c342c2", "filename": "src/test/ui/traits/negative-impls/pin-unsound-issue-66544-clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f5de87d3f9f192e00defe9a15e8396c13c2ec0c/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5de87d3f9f192e00defe9a15e8396c13c2ec0c/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.rs?ref=6f5de87d3f9f192e00defe9a15e8396c13c2ec0c", "patch": "@@ -7,7 +7,7 @@ struct MyType<'a>(Cell<Option<&'a mut MyType<'a>>>, PhantomPinned);\n impl<'a> Clone for &'a mut MyType<'a> {\n     //~^ ERROR E0751\n     fn clone(&self) -> &'a mut MyType<'a> {\n-        self.0.replace(None).unwrap()\n+        self.0.take().unwrap()\n     }\n }\n "}, {"sha": "606cc65a84bc2612eec4da2674b5bf0f2981ee7c", "filename": "src/test/ui/traits/negative-impls/pin-unsound-issue-66544-derefmut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f5de87d3f9f192e00defe9a15e8396c13c2ec0c/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5de87d3f9f192e00defe9a15e8396c13c2ec0c/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.rs?ref=6f5de87d3f9f192e00defe9a15e8396c13c2ec0c", "patch": "@@ -12,7 +12,7 @@ struct MyType<'a>(Cell<Option<&'a mut MyType<'a>>>, PhantomPinned);\n impl<'a> DerefMut for &'a MyType<'a> {\n     //~^ ERROR E0751\n     fn deref_mut(&mut self) -> &mut MyType<'a> {\n-        self.0.replace(None).unwrap()\n+        self.0.take().unwrap()\n     }\n }\n "}]}