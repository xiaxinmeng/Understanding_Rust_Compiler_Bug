{"sha": "085eaa7ee303d487dc254bca2a402284450e163e", "node_id": "C_kwDOAAsO6NoAKDA4NWVhYTdlZTMwM2Q0ODdkYzI1NGJjYTJhNDAyMjg0NDUwZTE2M2U", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-11T17:12:57Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-18T21:35:02Z"}, "message": "Adapt interpreter.", "tree": {"sha": "f5fcfe77b19dc366aa9fa5e4fd097402799442da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5fcfe77b19dc366aa9fa5e4fd097402799442da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/085eaa7ee303d487dc254bca2a402284450e163e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/085eaa7ee303d487dc254bca2a402284450e163e", "html_url": "https://github.com/rust-lang/rust/commit/085eaa7ee303d487dc254bca2a402284450e163e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/085eaa7ee303d487dc254bca2a402284450e163e/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f36a3fcd788292c56c3a21e6145e7f6c78f0d84", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f36a3fcd788292c56c3a21e6145e7f6c78f0d84", "html_url": "https://github.com/rust-lang/rust/commit/7f36a3fcd788292c56c3a21e6145e7f6c78f0d84"}], "stats": {"total": 18, "additions": 3, "deletions": 15}, "files": [{"sha": "d18d9bb5a986d406cdd76fa25cf898a338dabd79", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/085eaa7ee303d487dc254bca2a402284450e163e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/085eaa7ee303d487dc254bca2a402284450e163e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=085eaa7ee303d487dc254bca2a402284450e163e", "patch": "@@ -219,9 +219,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     sym::mul_with_overflow => BinOp::Mul,\n                     _ => bug!(),\n                 };\n-                self.binop_with_overflow(\n-                    bin_op, /*force_overflow_checks*/ true, &lhs, &rhs, dest,\n-                )?;\n+                self.binop_with_overflow(bin_op, &lhs, &rhs, dest)?;\n             }\n             sym::saturating_add | sym::saturating_sub => {\n                 let l = self.read_immediate(&args[0])?;"}, {"sha": "422120084d3182e3f692486bda7a351bcc30b482", "filename": "compiler/rustc_const_eval/src/interpret/operator.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/085eaa7ee303d487dc254bca2a402284450e163e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/085eaa7ee303d487dc254bca2a402284450e163e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs?ref=085eaa7ee303d487dc254bca2a402284450e163e", "patch": "@@ -10,13 +10,9 @@ use super::{ImmTy, Immediate, InterpCx, Machine, PlaceTy};\n impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// Applies the binary operation `op` to the two operands and writes a tuple of the result\n     /// and a boolean signifying the potential overflow to the destination.\n-    ///\n-    /// `force_overflow_checks` indicates whether overflow checks should be done even when\n-    /// `tcx.sess.overflow_checks()` is `false`.\n     pub fn binop_with_overflow(\n         &mut self,\n         op: mir::BinOp,\n-        force_overflow_checks: bool,\n         left: &ImmTy<'tcx, M::Provenance>,\n         right: &ImmTy<'tcx, M::Provenance>,\n         dest: &PlaceTy<'tcx, M::Provenance>,\n@@ -28,10 +24,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             \"type mismatch for result of {:?}\",\n             op,\n         );\n-        // As per https://github.com/rust-lang/rust/pull/98738, we always return `false` in the 2nd\n-        // component when overflow checking is disabled.\n-        let overflowed =\n-            overflowed && (force_overflow_checks || M::checked_binop_checks_overflow(self));\n         // Write the result to `dest`.\n         if let Abi::ScalarPair(..) = dest.layout.abi {\n             // We can use the optimized path and avoid `place_field` (which might do"}, {"sha": "6863435e5087813d315084abbf4c4221d9e165bd", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/085eaa7ee303d487dc254bca2a402284450e163e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/085eaa7ee303d487dc254bca2a402284450e163e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=085eaa7ee303d487dc254bca2a402284450e163e", "patch": "@@ -185,9 +185,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let left = self.read_immediate(&self.eval_operand(left, None)?)?;\n                 let layout = binop_right_homogeneous(bin_op).then_some(left.layout);\n                 let right = self.read_immediate(&self.eval_operand(right, layout)?)?;\n-                self.binop_with_overflow(\n-                    bin_op, /*force_overflow_checks*/ false, &left, &right, &dest,\n-                )?;\n+                self.binop_with_overflow(bin_op, &left, &right, &dest)?;\n             }\n \n             UnaryOp(un_op, ref operand) => {"}, {"sha": "70805972c406403152e53af5ee350d9cab7dfa3a", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/085eaa7ee303d487dc254bca2a402284450e163e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/085eaa7ee303d487dc254bca2a402284450e163e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=085eaa7ee303d487dc254bca2a402284450e163e", "patch": "@@ -137,7 +137,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             Assert { ref cond, expected, ref msg, target, cleanup } => {\n-                let ignored = M::checked_binop_checks_overflow(self)\n+                let ignored = !M::checked_binop_checks_overflow(self)\n                     && match msg {\n                         mir::AssertKind::OverflowNeg(..) => true,\n                         mir::AssertKind::Overflow(op, ..) => op.is_checkable(),"}]}