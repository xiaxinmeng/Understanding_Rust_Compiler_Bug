{"sha": "7a818c096c42df787468b9550a1814121a7b1080", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhODE4YzA5NmM0MmRmNzg3NDY4Yjk1NTBhMTgxNDEyMWE3YjEwODA=", "commit": {"author": {"name": "Ryan1729", "email": "Ryan1729@gmail.com", "date": "2020-08-03T08:47:25Z"}, "committer": {"name": "Ryan1729", "email": "Ryan1729@gmail.com", "date": "2020-08-06T10:24:25Z"}, "message": "get the expected number of errors by acknowledging that other lints are covering the same ground", "tree": {"sha": "e31fcdf56f96293c7e7af5df46dc5ff20a0dee2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e31fcdf56f96293c7e7af5df46dc5ff20a0dee2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a818c096c42df787468b9550a1814121a7b1080", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a818c096c42df787468b9550a1814121a7b1080", "html_url": "https://github.com/rust-lang/rust/commit/7a818c096c42df787468b9550a1814121a7b1080", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a818c096c42df787468b9550a1814121a7b1080/comments", "author": {"login": "Ryan1729", "id": 2133026, "node_id": "MDQ6VXNlcjIxMzMwMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2133026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryan1729", "html_url": "https://github.com/Ryan1729", "followers_url": "https://api.github.com/users/Ryan1729/followers", "following_url": "https://api.github.com/users/Ryan1729/following{/other_user}", "gists_url": "https://api.github.com/users/Ryan1729/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryan1729/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryan1729/subscriptions", "organizations_url": "https://api.github.com/users/Ryan1729/orgs", "repos_url": "https://api.github.com/users/Ryan1729/repos", "events_url": "https://api.github.com/users/Ryan1729/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryan1729/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryan1729", "id": 2133026, "node_id": "MDQ6VXNlcjIxMzMwMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2133026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryan1729", "html_url": "https://github.com/Ryan1729", "followers_url": "https://api.github.com/users/Ryan1729/followers", "following_url": "https://api.github.com/users/Ryan1729/following{/other_user}", "gists_url": "https://api.github.com/users/Ryan1729/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryan1729/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryan1729/subscriptions", "organizations_url": "https://api.github.com/users/Ryan1729/orgs", "repos_url": "https://api.github.com/users/Ryan1729/repos", "events_url": "https://api.github.com/users/Ryan1729/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryan1729/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e5c14df58ddbaf203eb2b6a3d89edd6080f3dd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e5c14df58ddbaf203eb2b6a3d89edd6080f3dd7", "html_url": "https://github.com/rust-lang/rust/commit/1e5c14df58ddbaf203eb2b6a3d89edd6080f3dd7"}], "stats": {"total": 145, "additions": 100, "deletions": 45}, "files": [{"sha": "269d2f00353aaedeaa5802bfde2e44c659759747", "filename": "src/tools/clippy/clippy_lints/src/transmute.rs", "status": "modified", "additions": 39, "deletions": 41, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/7a818c096c42df787468b9550a1814121a7b1080/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a818c096c42df787468b9550a1814121a7b1080/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute.rs?ref=7a818c096c42df787468b9550a1814121a7b1080", "patch": "@@ -50,6 +50,29 @@ declare_clippy_lint! {\n     \"transmutes that have the same to and from types or could be a cast/coercion\"\n }\n \n+// FIXME: Merge this lint with USELESS_TRANSMUTE once that is out of the nursery.\n+declare_clippy_lint! {\n+    /// **What it does:**Checks for transmutes that could be a pointer cast.\n+    ///\n+    /// **Why is this bad?** Readability. The code tricks people into thinking that\n+    /// something complex is going on.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust,ignore\n+    /// core::intrinsics::transmute::<*const [i32], *const [u16]>(p)\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// p as *const [u16]\n+    /// ```\n+    pub TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS,\n+    complexity,\n+    \"transmutes that could be a pointer cast\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for transmutes between a type `T` and `*T`.\n     ///\n@@ -272,27 +295,6 @@ declare_clippy_lint! {\n     \"transmute between collections of layout-incompatible types\"\n }\n \n-declare_clippy_lint! {\n-    /// **What it does:**\n-    ///\n-    /// **Why is this bad?**\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    ///\n-    /// ```rust\n-    /// // example code where clippy issues a warning\n-    /// ```\n-    /// Use instead:\n-    /// ```rust\n-    /// // example code which does not raise clippy warning\n-    /// ```\n-    pub TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS,\n-    complexity,\n-    \"default lint description\"\n-}\n-\n declare_lint_pass!(Transmute => [\n     CROSSPOINTER_TRANSMUTE,\n     TRANSMUTE_PTR_TO_REF,\n@@ -330,26 +332,6 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                 let from_ty = cx.typeck_results().expr_ty(&args[0]);\n                 let to_ty = cx.typeck_results().expr_ty(e);\n \n-                if can_be_expressed_as_pointer_cast(cx, e, from_ty, to_ty) {\n-                    span_lint_and_then(\n-                        cx,\n-                        TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS,\n-                        e.span,\n-                        &format!(\n-                            \"transmute from `{}` to `{}` which could be expressed as a pointer cast instead\",\n-                            from_ty,\n-                            to_ty\n-                        ),\n-                        |diag| {\n-                            if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n-                                let sugg = format!(\"{} as {}\", arg, to_ty);\n-                                diag.span_suggestion(e.span, \"try\", sugg, Applicability::Unspecified);\n-                            }\n-                        }\n-                    );\n-                    return\n-                }\n-\n                 match (&from_ty.kind, &to_ty.kind) {\n                     _ if from_ty == to_ty => span_lint(\n                         cx,\n@@ -646,6 +628,22 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                             );\n                         }\n                     },\n+                    (_, _) if can_be_expressed_as_pointer_cast(cx, e, from_ty, to_ty) => span_lint_and_then(\n+                        cx,\n+                        TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS,\n+                        e.span,\n+                        &format!(\n+                            \"transmute from `{}` to `{}` which could be expressed as a pointer cast instead\",\n+                            from_ty,\n+                            to_ty\n+                        ),\n+                        |diag| {\n+                            if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n+                                let sugg = arg.as_ty(&to_ty.to_string()).to_string();\n+                                diag.span_suggestion(e.span, \"try\", sugg, Applicability::Unspecified);\n+                            }\n+                        }\n+                    ),\n                     _ => {\n                         return;\n                     },"}, {"sha": "bb853d237047fbc33f6bd85b50c04ad8f2e5edf2", "filename": "src/tools/clippy/tests/ui/transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a818c096c42df787468b9550a1814121a7b1080/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a818c096c42df787468b9550a1814121a7b1080/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute.rs?ref=7a818c096c42df787468b9550a1814121a7b1080", "patch": "@@ -1,7 +1,7 @@\n #![allow(dead_code)]\n-#![allow(clippy::transmutes_expressible_as_ptr_casts)]\n \n extern crate core;\n+\n use std::mem::transmute as my_transmute;\n use std::vec::Vec as MyVec;\n "}, {"sha": "0d8a322f2b2b0b7fa31f410c4af644409b1e0310", "filename": "src/tools/clippy/tests/ui/transmute_ptr_to_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a818c096c42df787468b9550a1814121a7b1080/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a818c096c42df787468b9550a1814121a7b1080/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ptr.rs?ref=7a818c096c42df787468b9550a1814121a7b1080", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::transmute_ptr_to_ptr)]\n-#![allow(clippy::transmutes_expressible_as_ptr_casts)]\n+\n // Make sure we can modify lifetimes, which is one of the recommended uses\n // of transmute\n "}, {"sha": "db544b438a28fd01aab439d87794f627f51dbf85", "filename": "src/tools/clippy/tests/ui/transmutes_expressible_as_ptr_casts.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a818c096c42df787468b9550a1814121a7b1080/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a818c096c42df787468b9550a1814121a7b1080/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs?ref=7a818c096c42df787468b9550a1814121a7b1080", "patch": "@@ -1,10 +1,18 @@\n #![warn(clippy::transmutes_expressible_as_ptr_casts)]\n+// These two warnings currrently cover the cases transmutes_expressible_as_ptr_casts\n+// would otherwise be responsible for\n+#![warn(clippy::useless_transmute)]\n+#![warn(clippy::transmute_ptr_to_ptr)]\n+\n+use std::mem::transmute;\n \n // rustc_typeck::check::cast contains documentation about when a cast `e as U` is \n // valid, which we quote from below.\n-use std::mem::transmute;\n \n fn main() {\n+    // We should see an error message for each transmute, and no error messages for\n+    // the casts, since the casts are the recommended fixes.\n+\n     // e is an integer and U is *U_0, while U_0: Sized; addr-ptr-cast\n     let ptr_i32_transmute = unsafe {\n         transmute::<isize, *const i32>(-1)"}, {"sha": "7cd316bf38aac53a5c805bccf6c39f9d5bfd4b4e", "filename": "src/tools/clippy/tests/ui/transmutes_expressible_as_ptr_casts.stderr", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/7a818c096c42df787468b9550a1814121a7b1080/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a818c096c42df787468b9550a1814121a7b1080/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr?ref=7a818c096c42df787468b9550a1814121a7b1080", "patch": "@@ -1 +1,50 @@\n-Should have 7 errors, one for each transmute\n+error: transmute from an integer to a pointer\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:18:9\n+   |\n+LL |         transmute::<isize, *const i32>(-1)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `-1 as *const i32`\n+   |\n+   = note: `-D clippy::useless-transmute` implied by `-D warnings`\n+\n+error: transmute from a pointer to a pointer\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:24:9\n+   |\n+LL |         transmute::<*const i32, *const i8>(ptr_i32)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ptr_i32 as *const i8`\n+   |\n+   = note: `-D clippy::transmute-ptr-to-ptr` implied by `-D warnings`\n+\n+error: transmute from a pointer to a pointer\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:32:9\n+   |\n+LL |         transmute::<*const [i32], *const [u16]>(slice_ptr)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `slice_ptr as *const [u16]`\n+\n+error: transmute from `*const i32` to `usize` which could be expressed as a pointer cast instead\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:40:9\n+   |\n+LL |         transmute::<*const i32, usize>(ptr_i32)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ptr_i32 as usize`\n+   |\n+   = note: `-D clippy::transmutes-expressible-as-ptr-casts` implied by `-D warnings`\n+\n+error: transmute from a reference to a pointer\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:48:9\n+   |\n+LL |         transmute::<&[i32; 4], *const [i32; 4]>(array_ref)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `array_ref as *const [i32; 4]`\n+\n+error: transmute from `fn(usize) -> u8 {main::foo}` to `*const usize` which could be expressed as a pointer cast instead\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:56:9\n+   |\n+LL |         transmute::<fn(usize) -> u8, *const usize>(foo)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `foo as *const usize`\n+\n+error: transmute from `fn(usize) -> u8 {main::foo}` to `usize` which could be expressed as a pointer cast instead\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:62:9\n+   |\n+LL |         transmute::<fn(usize) -> u8, usize>(foo)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `foo as usize`\n+\n+error: aborting due to 7 previous errors\n+"}]}