{"sha": "19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "node_id": "C_kwDOAAsO6NoAKDE5YjM0OGZlZDQ0MzQyZDhhZGRiYmI1ZThmNjdjZGE1ZGM4ZDliOTU", "commit": {"author": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-09-18T15:45:41Z"}, "committer": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-09-21T15:39:52Z"}, "message": "UPDATE - rename DiagnosticHandler trait to IntoDiagnostic", "tree": {"sha": "08bc0d9e7f50ba3a3eb8f227ce9f1e82904a6cb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08bc0d9e7f50ba3a3eb8f227ce9f1e82904a6cb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "html_url": "https://github.com/rust-lang/rust/commit/19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/comments", "author": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b8152807cae152d5c7cfb40615e5a817a6cf750", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b8152807cae152d5c7cfb40615e5a817a6cf750", "html_url": "https://github.com/rust-lang/rust/commit/5b8152807cae152d5c7cfb40615e5a817a6cf750"}], "stats": {"total": 1243, "additions": 659, "deletions": 584}, "files": [{"sha": "3f3024eb2b842e332c80e1280f37495775806539", "filename": "compiler/rustc_ast_lowering/src/errors.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -1,8 +1,8 @@\n use rustc_errors::{fluent, AddSubdiagnostic, Applicability, Diagnostic, DiagnosticArgFromDisplay};\n-use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n+use rustc_macros::{DiagnosticHandler, SessionSubdiagnostic};\n use rustc_span::{symbol::Ident, Span, Symbol};\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(DiagnosticHandler, Clone, Copy)]\n #[diag(ast_lowering::generic_type_with_parentheses, code = \"E0214\")]\n pub struct GenericTypeWithParentheses {\n     #[primary_span]\n@@ -28,7 +28,7 @@ impl AddSubdiagnostic for UseAngleBrackets {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[help]\n #[diag(ast_lowering::invalid_abi, code = \"E0703\")]\n pub struct InvalidAbi {\n@@ -39,7 +39,7 @@ pub struct InvalidAbi {\n     pub valid_abis: String,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(DiagnosticHandler, Clone, Copy)]\n #[diag(ast_lowering::assoc_ty_parentheses)]\n pub struct AssocTyParentheses {\n     #[primary_span]\n@@ -71,38 +71,38 @@ impl AddSubdiagnostic for AssocTyParenthesesSub {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(ast_lowering::misplaced_impl_trait, code = \"E0562\")]\n pub struct MisplacedImplTrait<'a> {\n     #[primary_span]\n     pub span: Span,\n     pub position: DiagnosticArgFromDisplay<'a>,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(DiagnosticHandler, Clone, Copy)]\n #[diag(ast_lowering::rustc_box_attribute_error)]\n pub struct RustcBoxAttributeError {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(DiagnosticHandler, Clone, Copy)]\n #[diag(ast_lowering::underscore_expr_lhs_assign)]\n pub struct UnderscoreExprLhsAssign {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(DiagnosticHandler, Clone, Copy)]\n #[diag(ast_lowering::base_expression_double_dot)]\n pub struct BaseExpressionDoubleDot {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(DiagnosticHandler, Clone, Copy)]\n #[diag(ast_lowering::await_only_in_async_fn_and_blocks, code = \"E0728\")]\n pub struct AwaitOnlyInAsyncFnAndBlocks {\n     #[primary_span]\n@@ -112,58 +112,58 @@ pub struct AwaitOnlyInAsyncFnAndBlocks {\n     pub item_span: Option<Span>,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(DiagnosticHandler, Clone, Copy)]\n #[diag(ast_lowering::generator_too_many_parameters, code = \"E0628\")]\n pub struct GeneratorTooManyParameters {\n     #[primary_span]\n     pub fn_decl_span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(DiagnosticHandler, Clone, Copy)]\n #[diag(ast_lowering::closure_cannot_be_static, code = \"E0697\")]\n pub struct ClosureCannotBeStatic {\n     #[primary_span]\n     pub fn_decl_span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(DiagnosticHandler, Clone, Copy)]\n #[help]\n #[diag(ast_lowering::async_non_move_closure_not_supported, code = \"E0708\")]\n pub struct AsyncNonMoveClosureNotSupported {\n     #[primary_span]\n     pub fn_decl_span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(DiagnosticHandler, Clone, Copy)]\n #[diag(ast_lowering::functional_record_update_destructuring_assignment)]\n pub struct FunctionalRecordUpdateDestructuringAssignemnt {\n     #[primary_span]\n     #[suggestion(code = \"\", applicability = \"machine-applicable\")]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(DiagnosticHandler, Clone, Copy)]\n #[diag(ast_lowering::async_generators_not_supported, code = \"E0727\")]\n pub struct AsyncGeneratorsNotSupported {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(DiagnosticHandler, Clone, Copy)]\n #[diag(ast_lowering::inline_asm_unsupported_target, code = \"E0472\")]\n pub struct InlineAsmUnsupportedTarget {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(DiagnosticHandler, Clone, Copy)]\n #[diag(ast_lowering::att_syntax_only_x86)]\n pub struct AttSyntaxOnlyX86 {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(DiagnosticHandler, Clone, Copy)]\n #[diag(ast_lowering::abi_specified_multiple_times)]\n pub struct AbiSpecifiedMultipleTimes {\n     #[primary_span]\n@@ -175,14 +175,14 @@ pub struct AbiSpecifiedMultipleTimes {\n     pub equivalent: Option<()>,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(DiagnosticHandler, Clone, Copy)]\n #[diag(ast_lowering::clobber_abi_not_supported)]\n pub struct ClobberAbiNotSupported {\n     #[primary_span]\n     pub abi_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[note]\n #[diag(ast_lowering::invalid_abi_clobber_abi)]\n pub struct InvalidAbiClobberAbi {\n@@ -191,7 +191,7 @@ pub struct InvalidAbiClobberAbi {\n     pub supported_abis: String,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(DiagnosticHandler, Clone, Copy)]\n #[diag(ast_lowering::invalid_register)]\n pub struct InvalidRegister<'a> {\n     #[primary_span]\n@@ -200,7 +200,7 @@ pub struct InvalidRegister<'a> {\n     pub error: &'a str,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(DiagnosticHandler, Clone, Copy)]\n #[diag(ast_lowering::invalid_register_class)]\n pub struct InvalidRegisterClass<'a> {\n     #[primary_span]\n@@ -209,7 +209,7 @@ pub struct InvalidRegisterClass<'a> {\n     pub error: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(ast_lowering::invalid_asm_template_modifier_reg_class)]\n pub struct InvalidAsmTemplateModifierRegClass {\n     #[primary_span]\n@@ -229,7 +229,7 @@ pub enum InvalidAsmTemplateModifierRegClassSub {\n     DoesNotSupportModifier { class_name: Symbol },\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(DiagnosticHandler, Clone, Copy)]\n #[diag(ast_lowering::invalid_asm_template_modifier_const)]\n pub struct InvalidAsmTemplateModifierConst {\n     #[primary_span]\n@@ -239,7 +239,7 @@ pub struct InvalidAsmTemplateModifierConst {\n     pub op_span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(DiagnosticHandler, Clone, Copy)]\n #[diag(ast_lowering::invalid_asm_template_modifier_sym)]\n pub struct InvalidAsmTemplateModifierSym {\n     #[primary_span]\n@@ -249,15 +249,15 @@ pub struct InvalidAsmTemplateModifierSym {\n     pub op_span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(DiagnosticHandler, Clone, Copy)]\n #[diag(ast_lowering::register_class_only_clobber)]\n pub struct RegisterClassOnlyClobber {\n     #[primary_span]\n     pub op_span: Span,\n     pub reg_class_name: Symbol,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(DiagnosticHandler, Clone, Copy)]\n #[diag(ast_lowering::register_conflict)]\n pub struct RegisterConflict<'a> {\n     #[primary_span]\n@@ -271,7 +271,7 @@ pub struct RegisterConflict<'a> {\n     pub in_out: Option<Span>,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(DiagnosticHandler, Clone, Copy)]\n #[help]\n #[diag(ast_lowering::sub_tuple_binding)]\n pub struct SubTupleBinding<'a> {\n@@ -288,7 +288,7 @@ pub struct SubTupleBinding<'a> {\n     pub ctx: &'a str,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(DiagnosticHandler, Clone, Copy)]\n #[diag(ast_lowering::extra_double_dot)]\n pub struct ExtraDoubleDot<'a> {\n     #[primary_span]\n@@ -299,36 +299,36 @@ pub struct ExtraDoubleDot<'a> {\n     pub ctx: &'a str,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(DiagnosticHandler, Clone, Copy)]\n #[note]\n #[diag(ast_lowering::misplaced_double_dot)]\n pub struct MisplacedDoubleDot {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(DiagnosticHandler, Clone, Copy)]\n #[diag(ast_lowering::misplaced_relax_trait_bound)]\n pub struct MisplacedRelaxTraitBound {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(DiagnosticHandler, Clone, Copy)]\n #[diag(ast_lowering::not_supported_for_lifetime_binder_async_closure)]\n pub struct NotSupportedForLifetimeBinderAsyncClosure {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(DiagnosticHandler, Clone, Copy)]\n #[diag(ast_lowering::arbitrary_expression_in_pattern)]\n pub struct ArbitraryExpressionInPattern {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic, Clone, Copy)]\n+#[derive(DiagnosticHandler, Clone, Copy)]\n #[diag(ast_lowering::inclusive_range_with_no_end)]\n pub struct InclusiveRangeWithNoEnd {\n     #[primary_span]"}, {"sha": "20e2209acbe2c4e90c477136fc97297f0dede740", "filename": "compiler/rustc_ast_passes/src/errors.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -1,12 +1,12 @@\n //! Errors emitted by ast_passes.\n \n-use rustc_errors::{fluent, AddSubdiagnostic, Applicability, Diagnostic};\n-use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n+use rustc_errors::{fluent, AddToDiagnostic, Applicability, Diagnostic};\n+use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_span::{Span, Symbol};\n \n use crate::ast_validation::ForbiddenLetReason;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::forbidden_let)]\n #[note]\n pub struct ForbiddenLet {\n@@ -16,7 +16,7 @@ pub struct ForbiddenLet {\n     pub(crate) reason: ForbiddenLetReason,\n }\n \n-impl AddSubdiagnostic for ForbiddenLetReason {\n+impl AddToDiagnostic for ForbiddenLetReason {\n     fn add_to_diagnostic(self, diag: &mut Diagnostic) {\n         match self {\n             Self::GenericForbidden => {}\n@@ -30,37 +30,37 @@ impl AddSubdiagnostic for ForbiddenLetReason {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::forbidden_let_stable)]\n #[note]\n pub struct ForbiddenLetStable {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::forbidden_assoc_constraint)]\n pub struct ForbiddenAssocConstraint {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::keyword_lifetime)]\n pub struct KeywordLifetime {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::invalid_label)]\n pub struct InvalidLabel {\n     #[primary_span]\n     pub span: Span,\n     pub name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::invalid_visibility, code = \"E0449\")]\n pub struct InvalidVisibility {\n     #[primary_span]\n@@ -79,66 +79,66 @@ pub enum InvalidVisibilityNote {\n     IndividualForeignItems,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::trait_fn_const, code = \"E0379\")]\n pub struct TraitFnConst {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::forbidden_lifetime_bound)]\n pub struct ForbiddenLifetimeBound {\n     #[primary_span]\n     pub spans: Vec<Span>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::forbidden_non_lifetime_param)]\n pub struct ForbiddenNonLifetimeParam {\n     #[primary_span]\n     pub spans: Vec<Span>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::fn_param_too_many)]\n pub struct FnParamTooMany {\n     #[primary_span]\n     pub span: Span,\n     pub max_num_args: usize,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::fn_param_c_var_args_only)]\n pub struct FnParamCVarArgsOnly {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::fn_param_c_var_args_not_last)]\n pub struct FnParamCVarArgsNotLast {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::fn_param_doc_comment)]\n pub struct FnParamDocComment {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::fn_param_forbidden_attr)]\n pub struct FnParamForbiddenAttr {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::fn_param_forbidden_self)]\n #[note]\n pub struct FnParamForbiddenSelf {\n@@ -147,7 +147,7 @@ pub struct FnParamForbiddenSelf {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::forbidden_default)]\n pub struct ForbiddenDefault {\n     #[primary_span]\n@@ -156,7 +156,7 @@ pub struct ForbiddenDefault {\n     pub def_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::assoc_const_without_body)]\n pub struct AssocConstWithoutBody {\n     #[primary_span]\n@@ -165,7 +165,7 @@ pub struct AssocConstWithoutBody {\n     pub replace_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::assoc_fn_without_body)]\n pub struct AssocFnWithoutBody {\n     #[primary_span]\n@@ -174,7 +174,7 @@ pub struct AssocFnWithoutBody {\n     pub replace_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::assoc_type_without_body)]\n pub struct AssocTypeWithoutBody {\n     #[primary_span]\n@@ -183,7 +183,7 @@ pub struct AssocTypeWithoutBody {\n     pub replace_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::const_without_body)]\n pub struct ConstWithoutBody {\n     #[primary_span]\n@@ -192,7 +192,7 @@ pub struct ConstWithoutBody {\n     pub replace_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::static_without_body)]\n pub struct StaticWithoutBody {\n     #[primary_span]\n@@ -201,7 +201,7 @@ pub struct StaticWithoutBody {\n     pub replace_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::ty_alias_without_body)]\n pub struct TyAliasWithoutBody {\n     #[primary_span]\n@@ -210,7 +210,7 @@ pub struct TyAliasWithoutBody {\n     pub replace_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(ast_passes::fn_without_body)]\n pub struct FnWithoutBody {\n     #[primary_span]\n@@ -227,7 +227,7 @@ pub struct ExternBlockSuggestion {\n     pub abi: Option<Symbol>,\n }\n \n-impl AddSubdiagnostic for ExternBlockSuggestion {\n+impl AddToDiagnostic for ExternBlockSuggestion {\n     fn add_to_diagnostic(self, diag: &mut Diagnostic) {\n         let start_suggestion = if let Some(abi) = self.abi {\n             format!(\"extern \\\"{}\\\" {{\", abi)"}, {"sha": "8362b51af40adad21a66cdae0bbc1fd388856cc8", "filename": "compiler/rustc_attr/src/session_diagnostics.rs", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -1,23 +1,23 @@\n use std::num::IntErrorKind;\n \n use rustc_ast as ast;\n-use rustc_errors::SessionDiagnostic;\n use rustc_errors::{\n-    error_code, fluent, Applicability, DiagnosticBuilder, ErrorGuaranteed, Handler,\n+    error_code, fluent, Applicability, DiagnosticBuilder, IntoDiagnostic, ErrorGuaranteed,\n+    Handler,\n };\n-use rustc_macros::SessionDiagnostic;\n+use rustc_macros::DiagnosticHandler;\n use rustc_span::{Span, Symbol};\n \n use crate::UnsupportedLiteralReason;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(attr::expected_one_cfg_pattern, code = \"E0536\")]\n pub(crate) struct ExpectedOneCfgPattern {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(attr::invalid_predicate, code = \"E0537\")]\n pub(crate) struct InvalidPredicate {\n     #[primary_span]\n@@ -26,7 +26,7 @@ pub(crate) struct InvalidPredicate {\n     pub predicate: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(attr::multiple_item, code = \"E0538\")]\n pub(crate) struct MultipleItem {\n     #[primary_span]\n@@ -35,7 +35,7 @@ pub(crate) struct MultipleItem {\n     pub item: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(attr::incorrect_meta_item, code = \"E0539\")]\n pub(crate) struct IncorrectMetaItem {\n     #[primary_span]\n@@ -50,7 +50,7 @@ pub(crate) struct UnknownMetaItem<'a> {\n }\n \n // Manual implementation to be able to format `expected` items correctly.\n-impl<'a> SessionDiagnostic<'a> for UnknownMetaItem<'_> {\n+impl<'a> IntoDiagnostic<'a> for UnknownMetaItem<'_> {\n     fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let expected = self.expected.iter().map(|name| format!(\"`{}`\", name)).collect::<Vec<_>>();\n         let mut diag = handler.struct_span_err_with_code(\n@@ -65,28 +65,28 @@ impl<'a> SessionDiagnostic<'a> for UnknownMetaItem<'_> {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(attr::missing_since, code = \"E0542\")]\n pub(crate) struct MissingSince {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(attr::missing_note, code = \"E0543\")]\n pub(crate) struct MissingNote {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(attr::multiple_stability_levels, code = \"E0544\")]\n pub(crate) struct MultipleStabilityLevels {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(attr::invalid_issue_string, code = \"E0545\")]\n pub(crate) struct InvalidIssueString {\n     #[primary_span]\n@@ -144,21 +144,21 @@ impl InvalidIssueStringCause {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(attr::missing_feature, code = \"E0546\")]\n pub(crate) struct MissingFeature {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(attr::non_ident_feature, code = \"E0546\")]\n pub(crate) struct NonIdentFeature {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(attr::missing_issue, code = \"E0547\")]\n pub(crate) struct MissingIssue {\n     #[primary_span]\n@@ -167,7 +167,7 @@ pub(crate) struct MissingIssue {\n \n // FIXME: This diagnostic is identical to `IncorrectMetaItem`, barring the error code. Consider\n // changing this to `IncorrectMetaItem`. See #51489.\n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(attr::incorrect_meta_item, code = \"E0551\")]\n pub(crate) struct IncorrectMetaItem2 {\n     #[primary_span]\n@@ -176,14 +176,14 @@ pub(crate) struct IncorrectMetaItem2 {\n \n // FIXME: Why is this the same error code as `InvalidReprHintNoParen` and `InvalidReprHintNoValue`?\n // It is more similar to `IncorrectReprFormatGeneric`.\n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(attr::incorrect_repr_format_packed_one_or_zero_arg, code = \"E0552\")]\n pub(crate) struct IncorrectReprFormatPackedOneOrZeroArg {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(attr::invalid_repr_hint_no_paren, code = \"E0552\")]\n pub(crate) struct InvalidReprHintNoParen {\n     #[primary_span]\n@@ -192,7 +192,7 @@ pub(crate) struct InvalidReprHintNoParen {\n     pub name: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(attr::invalid_repr_hint_no_value, code = \"E0552\")]\n pub(crate) struct InvalidReprHintNoValue {\n     #[primary_span]\n@@ -209,7 +209,7 @@ pub(crate) struct UnsupportedLiteral {\n     pub start_point_span: Span,\n }\n \n-impl<'a> SessionDiagnostic<'a> for UnsupportedLiteral {\n+impl<'a> IntoDiagnostic<'a> for UnsupportedLiteral {\n     fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let mut diag = handler.struct_span_err_with_code(\n             self.span,\n@@ -237,15 +237,15 @@ impl<'a> SessionDiagnostic<'a> for UnsupportedLiteral {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(attr::invalid_repr_align_need_arg, code = \"E0589\")]\n pub(crate) struct InvalidReprAlignNeedArg {\n     #[primary_span]\n     #[suggestion(code = \"align(...)\", applicability = \"has-placeholders\")]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(attr::invalid_repr_generic, code = \"E0589\")]\n pub(crate) struct InvalidReprGeneric<'a> {\n     #[primary_span]\n@@ -255,14 +255,14 @@ pub(crate) struct InvalidReprGeneric<'a> {\n     pub error_part: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(attr::incorrect_repr_format_align_one_arg, code = \"E0693\")]\n pub(crate) struct IncorrectReprFormatAlignOneArg {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(attr::incorrect_repr_format_generic, code = \"E0693\")]\n pub(crate) struct IncorrectReprFormatGeneric<'a> {\n     #[primary_span]\n@@ -317,28 +317,28 @@ impl<'a> IncorrectReprFormatGenericCause<'a> {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(attr::rustc_promotable_pairing, code = \"E0717\")]\n pub(crate) struct RustcPromotablePairing {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(attr::rustc_allowed_unstable_pairing, code = \"E0789\")]\n pub(crate) struct RustcAllowedUnstablePairing {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(attr::cfg_predicate_identifier)]\n pub(crate) struct CfgPredicateIdentifier {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(attr::deprecated_item_suggestion)]\n pub(crate) struct DeprecatedItemSuggestion {\n     #[primary_span]\n@@ -351,21 +351,21 @@ pub(crate) struct DeprecatedItemSuggestion {\n     pub details: (),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(attr::expected_single_version_literal)]\n pub(crate) struct ExpectedSingleVersionLiteral {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(attr::expected_version_literal)]\n pub(crate) struct ExpectedVersionLiteral {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(attr::expects_feature_list)]\n pub(crate) struct ExpectsFeatureList {\n     #[primary_span]\n@@ -374,7 +374,7 @@ pub(crate) struct ExpectsFeatureList {\n     pub name: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(attr::expects_features)]\n pub(crate) struct ExpectsFeatures {\n     #[primary_span]\n@@ -383,14 +383,14 @@ pub(crate) struct ExpectsFeatures {\n     pub name: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(attr::soft_no_args)]\n pub(crate) struct SoftNoArgs {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(attr::unknown_version_literal)]\n pub(crate) struct UnknownVersionLiteral {\n     #[primary_span]"}, {"sha": "1014a92cc3907542467d0c1c15892f85341c7bc6", "filename": "compiler/rustc_borrowck/src/session_diagnostics.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -1,11 +1,11 @@\n use rustc_errors::{IntoDiagnosticArg, MultiSpan};\n-use rustc_macros::{LintDiagnostic, SessionDiagnostic, SessionSubdiagnostic};\n+use rustc_macros::{DiagnosticHandler, LintDiagnostic, SessionSubdiagnostic};\n use rustc_middle::ty::Ty;\n use rustc_span::Span;\n \n use crate::diagnostics::RegionName;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(borrowck::move_unsized, code = \"E0161\")]\n pub(crate) struct MoveUnsized<'tcx> {\n     pub ty: Ty<'tcx>,\n@@ -14,7 +14,7 @@ pub(crate) struct MoveUnsized<'tcx> {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(borrowck::higher_ranked_lifetime_error)]\n pub(crate) struct HigherRankedLifetimeError {\n     #[subdiagnostic]\n@@ -31,14 +31,14 @@ pub(crate) enum HigherRankedErrorCause {\n     CouldNotNormalize { value: String },\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(borrowck::higher_ranked_subtype_error)]\n pub(crate) struct HigherRankedSubtypeError {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(borrowck::generic_does_not_live_long_enough)]\n pub(crate) struct GenericDoesNotLiveLongEnough {\n     pub kind: String,\n@@ -53,15 +53,15 @@ pub(crate) struct VarNeedNotMut {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(borrowck::const_not_used_in_type_alias)]\n pub(crate) struct ConstNotUsedTraitAlias {\n     pub ct: String,\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(borrowck::var_cannot_escape_closure)]\n #[note]\n #[note(borrowck::cannot_escape)]\n@@ -110,7 +110,7 @@ pub(crate) enum FnMutReturnTypeErr {\n     },\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(borrowck::lifetime_constraints_error)]\n pub(crate) struct LifetimeOutliveErr {\n     #[primary_span]"}, {"sha": "55b54fede9384b90ff1a58bc3bca4945d34eb735", "filename": "compiler/rustc_builtin_macros/src/cfg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -8,7 +8,7 @@ use rustc_ast::tokenstream::TokenStream;\n use rustc_attr as attr;\n use rustc_errors::PResult;\n use rustc_expand::base::{self, *};\n-use rustc_macros::SessionDiagnostic;\n+use rustc_macros::DiagnosticHandler;\n use rustc_span::Span;\n \n pub fn expand_cfg(\n@@ -35,15 +35,15 @@ pub fn expand_cfg(\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(builtin_macros::requires_cfg_pattern)]\n struct RequiresCfgPattern {\n     #[primary_span]\n     #[label]\n     span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(builtin_macros::expected_one_cfg_pattern)]\n struct OneCfgPattern {\n     #[primary_span]"}, {"sha": "d0b94e91abf9d45abb220753c03debb752e9ec3a", "filename": "compiler/rustc_const_eval/src/errors.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -1,8 +1,8 @@\n use rustc_hir::ConstContext;\n-use rustc_macros::SessionDiagnostic;\n+use rustc_macros::DiagnosticHandler;\n use rustc_span::Span;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(const_eval::unstable_in_stable)]\n pub(crate) struct UnstableInStable {\n     pub gate: String,\n@@ -21,14 +21,14 @@ pub(crate) struct UnstableInStable {\n     pub attr_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(const_eval::thread_local_access, code = \"E0625\")]\n pub(crate) struct NonConstOpErr {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(const_eval::static_access, code = \"E0013\")]\n #[help]\n pub(crate) struct StaticAccessErr {\n@@ -40,7 +40,7 @@ pub(crate) struct StaticAccessErr {\n     pub teach: Option<()>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(const_eval::raw_ptr_to_int)]\n #[note]\n #[note(const_eval::note2)]\n@@ -49,70 +49,70 @@ pub(crate) struct RawPtrToIntErr {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(const_eval::raw_ptr_comparison)]\n #[note]\n pub(crate) struct RawPtrComparisonErr {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(const_eval::panic_non_str)]\n pub(crate) struct PanicNonStrErr {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(const_eval::mut_deref, code = \"E0658\")]\n pub(crate) struct MutDerefErr {\n     #[primary_span]\n     pub span: Span,\n     pub kind: ConstContext,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(const_eval::transient_mut_borrow, code = \"E0658\")]\n pub(crate) struct TransientMutBorrowErr {\n     #[primary_span]\n     pub span: Span,\n     pub kind: ConstContext,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(const_eval::transient_mut_borrow_raw, code = \"E0658\")]\n pub(crate) struct TransientMutBorrowErrRaw {\n     #[primary_span]\n     pub span: Span,\n     pub kind: ConstContext,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(const_eval::max_num_nodes_in_const)]\n pub(crate) struct MaxNumNodesInConstErr {\n     #[primary_span]\n     pub span: Span,\n     pub global_const_id: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(const_eval::unallowed_fn_pointer_call)]\n pub(crate) struct UnallowedFnPointerCall {\n     #[primary_span]\n     pub span: Span,\n     pub kind: ConstContext,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(const_eval::unstable_const_fn)]\n pub(crate) struct UnstableConstFn {\n     #[primary_span]\n     pub span: Span,\n     pub def_path: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(const_eval::unallowed_mutable_refs, code = \"E0764\")]\n pub(crate) struct UnallowedMutableRefs {\n     #[primary_span]\n@@ -122,7 +122,7 @@ pub(crate) struct UnallowedMutableRefs {\n     pub teach: Option<()>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(const_eval::unallowed_mutable_refs_raw, code = \"E0764\")]\n pub(crate) struct UnallowedMutableRefsRaw {\n     #[primary_span]\n@@ -131,15 +131,15 @@ pub(crate) struct UnallowedMutableRefsRaw {\n     #[note(const_eval::teach_note)]\n     pub teach: Option<()>,\n }\n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(const_eval::non_const_fmt_macro_call, code = \"E0015\")]\n pub(crate) struct NonConstFmtMacroCall {\n     #[primary_span]\n     pub span: Span,\n     pub kind: ConstContext,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(const_eval::non_const_fn_call, code = \"E0015\")]\n pub(crate) struct NonConstFnCall {\n     #[primary_span]\n@@ -148,15 +148,15 @@ pub(crate) struct NonConstFnCall {\n     pub kind: ConstContext,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(const_eval::unallowed_op_in_const_context)]\n pub(crate) struct UnallowedOpInConstContext {\n     #[primary_span]\n     pub span: Span,\n     pub msg: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(const_eval::unallowed_heap_allocations, code = \"E0010\")]\n pub(crate) struct UnallowedHeapAllocations {\n     #[primary_span]\n@@ -167,15 +167,15 @@ pub(crate) struct UnallowedHeapAllocations {\n     pub teach: Option<()>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(const_eval::unallowed_inline_asm, code = \"E0015\")]\n pub(crate) struct UnallowedInlineAsm {\n     #[primary_span]\n     pub span: Span,\n     pub kind: ConstContext,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(const_eval::interior_mutable_data_refer, code = \"E0492\")]\n pub(crate) struct InteriorMutableDataRefer {\n     #[primary_span]\n@@ -188,7 +188,7 @@ pub(crate) struct InteriorMutableDataRefer {\n     pub teach: Option<()>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(const_eval::interior_mutability_borrow)]\n pub(crate) struct InteriorMutabilityBorrow {\n     #[primary_span]"}, {"sha": "704d3c7fd2ad48feae12d57f12d7d9c2fe573476", "filename": "compiler/rustc_driver/src/session_diagnostics.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_driver%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_driver%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fsession_diagnostics.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -1,38 +1,38 @@\n-use rustc_macros::SessionDiagnostic;\n+use rustc_macros::DiagnosticHandler;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(driver::rlink_unable_to_read)]\n pub(crate) struct RlinkUnableToRead {\n     pub err: std::io::Error,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(driver::rlink_wrong_file_type)]\n pub(crate) struct RLinkWrongFileType;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(driver::rlink_empty_version_number)]\n pub(crate) struct RLinkEmptyVersionNumber;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(driver::rlink_encoding_version_mismatch)]\n pub(crate) struct RLinkEncodingVersionMismatch {\n     pub version_array: String,\n     pub rlink_version: u32,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(driver::rlink_rustc_version_mismatch)]\n pub(crate) struct RLinkRustcVersionMismatch<'a> {\n     pub rustc_version: String,\n     pub current_version: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(driver::rlink_no_a_file)]\n pub(crate) struct RlinkNotAFile;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(driver::unpretty_dump_fail)]\n pub(crate) struct UnprettyDumpFail {\n     pub path: String,"}, {"sha": "6cc0cb49e1fffc163fa9385800c607b8d918e665", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -51,7 +51,7 @@ lint_non_existant_doc_keyword = found non-existing keyword `{$keyword}` used in\n     .help = only existing keywords are allowed in core/std\n \n lint_diag_out_of_impl =\n-    diagnostics should only be created in `SessionDiagnostic`/`AddSubdiagnostic` impls\n+    diagnostics should only be created in `IntoDiagnostic`/`AddSubdiagnostic` impls\n \n lint_untranslatable_diag = diagnostics should be created using translatable messages\n "}, {"sha": "8a56068fcc71ea44308d264a478dde6c1ab2165a", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -35,7 +35,7 @@ pub enum DiagnosticArgValue<'source> {\n     Number(usize),\n }\n \n-/// Converts a value of a type into a `DiagnosticArg` (typically a field of a `SessionDiagnostic`\n+/// Converts a value of a type into a `DiagnosticArg` (typically a field of an `IntoDiagnostic`\n /// struct). Implemented as a custom trait rather than `From` so that it is implemented on the type\n /// being converted rather than on `DiagnosticArgValue`, which enables types from other `rustc_*`\n /// crates to implement this."}, {"sha": "b646dd662cb9e9759481672d062fc85c11e82564", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -14,9 +14,10 @@ use std::ops::{Deref, DerefMut};\n use std::thread::panicking;\n \n /// Trait implemented by error types. This should not be implemented manually. Instead, use\n-/// `#[derive(SessionDiagnostic)]` -- see [rustc_macros::SessionDiagnostic].\n-#[rustc_diagnostic_item = \"SessionDiagnostic\"]\n-pub trait SessionDiagnostic<'a, T: EmissionGuarantee = ErrorGuaranteed> {\n+/// `#[derive(DiagnosticHandler)]` -- see [rustc_macros::DiagnosticHandler].\n+#[cfg_attr(bootstrap, rustc_diagnostic_item = \"SessionDiagnostic\")]\n+#[cfg_attr(not(bootstrap), rustc_diagnostic_item = \"DiagnosticHandler\")]\n+pub trait IntoDiagnostic<'a, T: EmissionGuarantee = ErrorGuaranteed> {\n     /// Write out as a diagnostic out of `Handler`.\n     #[must_use]\n     fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, T>;"}, {"sha": "aed52bce9aa2a0c8dd78e138c775b207e066d43b", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 74, "deletions": 1, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -60,7 +60,7 @@ mod snippet;\n mod styled_buffer;\n pub mod translation;\n \n-pub use diagnostic_builder::SessionDiagnostic;\n+pub use diagnostic_builder::IntoDiagnostic;\n pub use snippet::Style;\n \n pub type PResult<'a, T> = Result<T, DiagnosticBuilder<'a, ErrorGuaranteed>>;\n@@ -647,6 +647,8 @@ impl Handler {\n \n     /// Construct a builder with the `msg` at the level appropriate for the specific `EmissionGuarantee`.\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n+    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_diagnostic<G: EmissionGuarantee>(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -660,6 +662,8 @@ impl Handler {\n     /// * `can_emit_warnings` is `true`\n     /// * `is_force_warn` was set in `DiagnosticId::Lint`\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n+    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_span_warn(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -676,6 +680,8 @@ impl Handler {\n     /// Attempting to `.emit()` the builder will only emit if either:\n     /// * `can_emit_warnings` is `true`\n     /// * `is_force_warn` was set in `DiagnosticId::Lint`\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n+    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_span_warn_with_expectation(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -689,6 +695,8 @@ impl Handler {\n \n     /// Construct a builder at the `Allow` level at the given `span` and with the `msg`.\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n+    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_span_allow(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -702,6 +710,8 @@ impl Handler {\n     /// Construct a builder at the `Warning` level at the given `span` and with the `msg`.\n     /// Also include a code.\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n+    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_span_warn_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -719,6 +729,8 @@ impl Handler {\n     /// * `can_emit_warnings` is `true`\n     /// * `is_force_warn` was set in `DiagnosticId::Lint`\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n+    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_warn(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         DiagnosticBuilder::new(self, Level::Warning(None), msg)\n     }\n@@ -729,6 +741,8 @@ impl Handler {\n     /// Attempting to `.emit()` the builder will only emit if either:\n     /// * `can_emit_warnings` is `true`\n     /// * `is_force_warn` was set in `DiagnosticId::Lint`\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n+    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_warn_with_expectation(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -739,12 +753,16 @@ impl Handler {\n \n     /// Construct a builder at the `Allow` level with the `msg`.\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n+    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_allow(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         DiagnosticBuilder::new(self, Level::Allow, msg)\n     }\n \n     /// Construct a builder at the `Expect` level with the `msg`.\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n+    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_expect(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -755,6 +773,8 @@ impl Handler {\n \n     /// Construct a builder at the `Error` level at the given `span` and with the `msg`.\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n+    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_span_err(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -767,6 +787,8 @@ impl Handler {\n \n     /// Construct a builder at the `Error` level at the given `span`, with the `msg`, and `code`.\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n+    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_span_err_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -781,6 +803,8 @@ impl Handler {\n     /// Construct a builder at the `Error` level with the `msg`.\n     // FIXME: This method should be removed (every error should have an associated error code).\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n+    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_err(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -790,12 +814,16 @@ impl Handler {\n \n     /// This should only be used by `rustc_middle::lint::struct_lint_level`. Do not use it for hard errors.\n     #[doc(hidden)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n+    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_err_lint(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         DiagnosticBuilder::new(self, Level::Error { lint: true }, msg)\n     }\n \n     /// Construct a builder at the `Error` level with the `msg` and the `code`.\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n+    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_err_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -808,6 +836,8 @@ impl Handler {\n \n     /// Construct a builder at the `Warn` level with the `msg` and the `code`.\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n+    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_warn_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -820,6 +850,8 @@ impl Handler {\n \n     /// Construct a builder at the `Fatal` level at the given `span` and with the `msg`.\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n+    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_span_fatal(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -832,6 +864,8 @@ impl Handler {\n \n     /// Construct a builder at the `Fatal` level at the given `span`, with the `msg`, and `code`.\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n+    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_span_fatal_with_code(\n         &self,\n         span: impl Into<MultiSpan>,\n@@ -845,18 +879,24 @@ impl Handler {\n \n     /// Construct a builder at the `Error` level with the `msg`.\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n+    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_fatal(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, !> {\n         DiagnosticBuilder::new_fatal(self, msg)\n     }\n \n     /// Construct a builder at the `Help` level with the `msg`.\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n+    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_help(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         DiagnosticBuilder::new(self, Level::Help, msg)\n     }\n \n     /// Construct a builder at the `Note` level with the `msg`.\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n+    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_note_without_error(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -1029,6 +1069,39 @@ impl Handler {\n         self.inner.borrow_mut().emit_diagnostic(diagnostic)\n     }\n \n+    pub fn emit_err<'a>(&'a self, err: impl IntoDiagnostic<'a>) -> ErrorGuaranteed {\n+        self.create_err(err).emit()\n+    }\n+\n+    pub fn create_err<'a>(\n+        &'a self,\n+        err: impl IntoDiagnostic<'a>,\n+    ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+        err.into_diagnostic(self)\n+    }\n+\n+    pub fn create_warning<'a>(\n+        &'a self,\n+        warning: impl IntoDiagnostic<'a, ()>,\n+    ) -> DiagnosticBuilder<'a, ()> {\n+        warning.into_diagnostic(self)\n+    }\n+\n+    pub fn emit_warning<'a>(&'a self, warning: impl IntoDiagnostic<'a, ()>) {\n+        self.create_warning(warning).emit()\n+    }\n+\n+    pub fn create_fatal<'a>(\n+        &'a self,\n+        fatal: impl IntoDiagnostic<'a, !>,\n+    ) -> DiagnosticBuilder<'a, !> {\n+        fatal.into_diagnostic(self)\n+    }\n+\n+    pub fn emit_fatal<'a>(&'a self, fatal: impl IntoDiagnostic<'a, !>) -> ! {\n+        self.create_fatal(fatal).emit()\n+    }\n+\n     fn emit_diag_at_span(\n         &self,\n         mut diag: Diagnostic,"}, {"sha": "ca429b6adc10a9cda799f959b93c91b137f72ad7", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -11,7 +11,7 @@ use rustc_attr::{self as attr, Deprecation, Stability};\n use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_data_structures::sync::{self, Lrc};\n use rustc_errors::{\n-    Applicability, DiagnosticBuilder, ErrorGuaranteed, MultiSpan, PResult, SessionDiagnostic,\n+    Applicability, DiagnosticBuilder, IntoDiagnostic, ErrorGuaranteed, MultiSpan, PResult,\n };\n use rustc_lint_defs::builtin::PROC_MACRO_BACK_COMPAT;\n use rustc_lint_defs::{BufferedEarlyLint, BuiltinLintDiagnostics};\n@@ -1111,12 +1111,12 @@ impl<'a> ExtCtxt<'a> {\n \n     pub fn create_err(\n         &self,\n-        err: impl SessionDiagnostic<'a>,\n+        err: impl IntoDiagnostic<'a>,\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         self.sess.create_err(err)\n     }\n \n-    pub fn emit_err(&self, err: impl SessionDiagnostic<'a>) -> ErrorGuaranteed {\n+    pub fn emit_err(&self, err: impl IntoDiagnostic<'a>) -> ErrorGuaranteed {\n         self.sess.emit_err(err)\n     }\n "}, {"sha": "7cbdad3cd958560d9f459e3dbe2d7fa9599f85e9", "filename": "compiler/rustc_expand/src/errors.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_expand%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_expand%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Ferrors.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -1,45 +1,45 @@\n-use rustc_macros::SessionDiagnostic;\n+use rustc_macros::DiagnosticHandler;\n use rustc_span::symbol::MacroRulesNormalizedIdent;\n use rustc_span::Span;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(expand::expr_repeat_no_syntax_vars)]\n pub(crate) struct NoSyntaxVarsExprRepeat {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(expand::must_repeat_once)]\n pub(crate) struct MustRepeatOnce {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(expand::count_repetition_misplaced)]\n pub(crate) struct CountRepetitionMisplaced {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(expand::meta_var_expr_unrecognized_var)]\n pub(crate) struct MetaVarExprUnrecognizedVar {\n     #[primary_span]\n     pub span: Span,\n     pub key: MacroRulesNormalizedIdent,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(expand::var_still_repeating)]\n pub(crate) struct VarStillRepeating {\n     #[primary_span]\n     pub span: Span,\n     pub ident: MacroRulesNormalizedIdent,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(expand::meta_var_dif_seq_matchers)]\n pub(crate) struct MetaVarsDifSeqMatchers {\n     #[primary_span]"}, {"sha": "baa97d72a4baab067f77395502cecac7460541cc", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -4,7 +4,7 @@ use crate::errors::{\n };\n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::InferCtxt;\n-use rustc_errors::SessionDiagnostic;\n+use rustc_errors::IntoDiagnostic;\n use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed, IntoDiagnosticArg};\n use rustc_hir as hir;\n use rustc_hir::def::Res;"}, {"sha": "dc975099fc76c2c355d3cdda203bf26c314813ac", "filename": "compiler/rustc_interface/src/errors.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_interface%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_interface%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ferrors.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -1,10 +1,10 @@\n-use rustc_macros::SessionDiagnostic;\n+use rustc_macros::DiagnosticHandler;\n use rustc_span::{Span, Symbol};\n \n use std::io;\n use std::path::Path;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(interface::ferris_identifier)]\n pub struct FerrisIdentifier {\n     #[primary_span]\n@@ -13,75 +13,75 @@ pub struct FerrisIdentifier {\n     pub first_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(interface::emoji_identifier)]\n pub struct EmojiIdentifier {\n     #[primary_span]\n     pub spans: Vec<Span>,\n     pub ident: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(interface::mixed_bin_crate)]\n pub struct MixedBinCrate;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(interface::mixed_proc_macro_crate)]\n pub struct MixedProcMacroCrate;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(interface::proc_macro_doc_without_arg)]\n pub struct ProcMacroDocWithoutArg;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(interface::error_writing_dependencies)]\n pub struct ErrorWritingDependencies<'a> {\n     pub path: &'a Path,\n     pub error: io::Error,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(interface::input_file_would_be_overwritten)]\n pub struct InputFileWouldBeOverWritten<'a> {\n     pub path: &'a Path,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(interface::generated_file_conflicts_with_directory)]\n pub struct GeneratedFileConflictsWithDirectory<'a> {\n     pub input_path: &'a Path,\n     pub dir_path: &'a Path,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(interface::temps_dir_error)]\n pub struct TempsDirError;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(interface::out_dir_error)]\n pub struct OutDirError;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(interface::cant_emit_mir)]\n pub struct CantEmitMIR {\n     pub error: io::Error,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(interface::rustc_error_fatal)]\n pub struct RustcErrorFatal {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(interface::rustc_error_unexpected_annotation)]\n pub struct RustcErrorUnexpectedAnnotation {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(interface::failed_writing_file)]\n pub struct FailedWritingFile<'a> {\n     pub path: &'a Path,"}, {"sha": "261570acb7b1febc18c5a8626e578d8cd345294c", "filename": "compiler/rustc_lint/src/errors.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -1,9 +1,9 @@\n-use rustc_errors::{fluent, AddSubdiagnostic, ErrorGuaranteed, Handler, SessionDiagnostic};\n-use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n+use rustc_errors::{fluent, AddSubdiagnostic, IntoDiagnostic, ErrorGuaranteed, Handler};\n+use rustc_macros::{DiagnosticHandler, SessionSubdiagnostic};\n use rustc_session::lint::Level;\n use rustc_span::{Span, Symbol};\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(lint::overruled_attribute, code = \"E0453\")]\n pub struct OverruledAttribute {\n     #[primary_span]\n@@ -42,7 +42,7 @@ impl AddSubdiagnostic for OverruledAttributeSub {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(lint::malformed_attribute, code = \"E0452\")]\n pub struct MalformedAttribute {\n     #[primary_span]\n@@ -61,7 +61,7 @@ pub enum MalformedAttributeSub {\n     ReasonMustComeLast(#[primary_span] Span),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(lint::unknown_tool_in_scoped_lint, code = \"E0710\")]\n pub struct UnknownToolInScopedLint {\n     #[primary_span]\n@@ -72,7 +72,7 @@ pub struct UnknownToolInScopedLint {\n     pub is_nightly_build: Option<()>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(lint::builtin_ellipsis_inclusive_range_patterns, code = \"E0783\")]\n pub struct BuiltinEllpisisInclusiveRangePatterns {\n     #[primary_span]\n@@ -107,7 +107,7 @@ impl AddSubdiagnostic for RequestedLevel {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(lint::unsupported_group, code = \"E0602\")]\n pub struct UnsupportedGroup {\n     pub lint_group: String,\n@@ -119,7 +119,7 @@ pub struct CheckNameUnknown {\n     pub sub: RequestedLevel,\n }\n \n-impl SessionDiagnostic<'_> for CheckNameUnknown {\n+impl IntoDiagnostic<'_> for CheckNameUnknown {\n     fn into_diagnostic(\n         self,\n         handler: &Handler,\n@@ -136,23 +136,23 @@ impl SessionDiagnostic<'_> for CheckNameUnknown {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(lint::check_name_unknown_tool, code = \"E0602\")]\n pub struct CheckNameUnknownTool {\n     pub tool_name: Symbol,\n     #[subdiagnostic]\n     pub sub: RequestedLevel,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(lint::check_name_warning)]\n pub struct CheckNameWarning {\n     pub msg: String,\n     #[subdiagnostic]\n     pub sub: RequestedLevel,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(lint::check_name_deprecated)]\n pub struct CheckNameDeprecated {\n     pub lint_name: String,"}, {"sha": "dec75c9d380c701531b26e4688ea7724f5946248", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -372,7 +372,7 @@ declare_tool_lint! {\n declare_tool_lint! {\n     pub rustc::DIAGNOSTIC_OUTSIDE_OF_IMPL,\n     Allow,\n-    \"prevent creation of diagnostics outside of `SessionDiagnostic`/`AddSubdiagnostic` impls\",\n+    \"prevent creation of diagnostics outside of `DiagnosticHandler`/`AddSubdiagnostic` impls\",\n     report_in_external_macro: true\n }\n \n@@ -404,7 +404,7 @@ impl LateLintPass<'_> for Diagnostics {\n                 let Impl { of_trait: Some(of_trait), .. } = impl_ &&\n                 let Some(def_id) = of_trait.trait_def_id() &&\n                 let Some(name) = cx.tcx.get_diagnostic_name(def_id) &&\n-                matches!(name, sym::SessionDiagnostic | sym::AddSubdiagnostic | sym::DecorateLint)\n+                matches!(name, sym::DiagnosticHandler | sym::AddSubdiagnostic | sym::DecorateLint)\n             {\n                 found_impl = true;\n                 break;"}, {"sha": "c5b5edab816ed9da1fa2cad3e10ec03902870944", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -11,27 +11,27 @@ use synstructure::Structure;\n /// The central struct for constructing the `into_diagnostic` method from an annotated struct.\n pub(crate) struct SessionDiagnosticDerive<'a> {\n     structure: Structure<'a>,\n-    sess: syn::Ident,\n+    handler: syn::Ident,\n     builder: DiagnosticDeriveBuilder,\n }\n \n impl<'a> SessionDiagnosticDerive<'a> {\n-    pub(crate) fn new(diag: syn::Ident, sess: syn::Ident, structure: Structure<'a>) -> Self {\n+    pub(crate) fn new(diag: syn::Ident, handler: syn::Ident, structure: Structure<'a>) -> Self {\n         Self {\n             builder: DiagnosticDeriveBuilder {\n                 diag,\n                 fields: build_field_mapping(&structure),\n-                kind: DiagnosticDeriveKind::SessionDiagnostic,\n+                kind: DiagnosticDeriveKind::DiagnosticHandler,\n                 code: None,\n                 slug: None,\n             },\n-            sess,\n+            handler,\n             structure,\n         }\n     }\n \n     pub(crate) fn into_tokens(self) -> TokenStream {\n-        let SessionDiagnosticDerive { mut structure, sess, mut builder } = self;\n+        let SessionDiagnosticDerive { mut structure, handler, mut builder } = self;\n \n         let ast = structure.ast();\n         let implementation = {\n@@ -53,7 +53,7 @@ impl<'a> SessionDiagnosticDerive<'a> {\n                     }\n                     Some(slug) => {\n                         quote! {\n-                            let mut #diag = #sess.struct_diagnostic(rustc_errors::fluent::#slug);\n+                            let mut #diag = #handler.struct_diagnostic(rustc_errors::fluent::#slug);\n                         }\n                     }\n                 };\n@@ -72,7 +72,7 @@ impl<'a> SessionDiagnosticDerive<'a> {\n             } else {\n                 span_err(\n                     ast.span().unwrap(),\n-                    \"`#[derive(SessionDiagnostic)]` can only be used on structs\",\n+                    \"`#[derive(DiagnosticHandler)]` can only be used on structs\",\n                 )\n                 .emit();\n \n@@ -81,15 +81,15 @@ impl<'a> SessionDiagnosticDerive<'a> {\n         };\n \n         structure.gen_impl(quote! {\n-            gen impl<'__session_diagnostic_sess, G>\n-                    rustc_errors::SessionDiagnostic<'__session_diagnostic_sess, G>\n+            gen impl<'__diagnostic_handler_sess, G>\n+                    rustc_errors::IntoDiagnostic<'__diagnostic_handler_sess, G>\n                     for @Self\n                 where G: rustc_errors::EmissionGuarantee\n             {\n                 fn into_diagnostic(\n                     self,\n-                    #sess: &'__session_diagnostic_sess rustc_errors::Handler\n-                ) -> rustc_errors::DiagnosticBuilder<'__session_diagnostic_sess, G> {\n+                    #handler: &'__diagnostic_handler_sess rustc_errors::Handler\n+                ) -> rustc_errors::DiagnosticBuilder<'__diagnostic_handler_sess, G> {\n                     use rustc_errors::IntoDiagnosticArg;\n                     #implementation\n                 }"}, {"sha": "4af3fd236245efbcf51db733625787b23e27ebdc", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic_builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -21,12 +21,12 @@ use synstructure::{BindingInfo, Structure};\n /// What kind of diagnostic is being derived - a fatal/error/warning or a lint?\n #[derive(Copy, Clone, PartialEq, Eq)]\n pub(crate) enum DiagnosticDeriveKind {\n-    SessionDiagnostic,\n+    DiagnosticHandler,\n     LintDiagnostic,\n }\n \n /// Tracks persistent information required for building up individual calls to diagnostic methods\n-/// for generated diagnostic derives - both `SessionDiagnostic` for fatal/errors/warnings and\n+/// for generated diagnostic derives - both `DiagnosticHandler` for fatal/errors/warnings and\n /// `LintDiagnostic` for lints.\n pub(crate) struct DiagnosticDeriveBuilder {\n     /// The identifier to use for the generated `DiagnosticBuilder` instance.\n@@ -333,7 +333,7 @@ impl DiagnosticDeriveBuilder {\n             }\n             \"primary_span\" => {\n                 match self.kind {\n-                    DiagnosticDeriveKind::SessionDiagnostic => {\n+                    DiagnosticDeriveKind::DiagnosticHandler => {\n                         report_error_if_not_applied_to_span(attr, &info)?;\n \n                         Ok(quote! {"}, {"sha": "162089c881e163180691c75d2b00b6c4e08e6696", "filename": "compiler/rustc_macros/src/diagnostics/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -12,7 +12,7 @@ use quote::format_ident;\n use subdiagnostic::SessionSubdiagnosticDerive;\n use synstructure::Structure;\n \n-/// Implements `#[derive(SessionDiagnostic)]`, which allows for errors to be specified as a struct,\n+/// Implements `#[derive(DiagnosticHandler)]`, which allows for errors to be specified as a struct,\n /// independent from the actual diagnostics emitting code.\n ///\n /// ```ignore (rust)\n@@ -22,7 +22,7 @@ use synstructure::Structure;\n /// # use rustc_span::{symbol::Ident, Span};\n /// # extern crate rust_middle;\n /// # use rustc_middle::ty::Ty;\n-/// #[derive(SessionDiagnostic)]\n+/// #[derive(DiagnosticHandler)]\n /// #[diag(borrowck::move_out_of_borrow, code = \"E0505\")]\n /// pub struct MoveOutOfBorrowError<'tcx> {\n ///     pub name: Ident,\n@@ -56,10 +56,10 @@ use synstructure::Structure;\n /// });\n /// ```\n ///\n-/// See rustc dev guide for more examples on using the `#[derive(SessionDiagnostic)]`:\n+/// See rustc dev guide for more examples on using the `#[derive(DiagnosticHandler)]`:\n /// <https://rustc-dev-guide.rust-lang.org/diagnostics/diagnostic-structs.html>\n pub fn session_diagnostic_derive(s: Structure<'_>) -> TokenStream {\n-    SessionDiagnosticDerive::new(format_ident!(\"diag\"), format_ident!(\"sess\"), s).into_tokens()\n+    SessionDiagnosticDerive::new(format_ident!(\"diag\"), format_ident!(\"handler\"), s).into_tokens()\n }\n \n /// Implements `#[derive(LintDiagnostic)]`, which allows for lints to be specified as a struct,"}, {"sha": "13305782ff148c17f340fa722605f7ade0c4742d", "filename": "compiler/rustc_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Flib.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -127,7 +127,7 @@ decl_derive!([TypeFoldable, attributes(type_foldable)] => type_foldable::type_fo\n decl_derive!([TypeVisitable, attributes(type_visitable)] => type_visitable::type_visitable_derive);\n decl_derive!([Lift, attributes(lift)] => lift::lift_derive);\n decl_derive!(\n-    [SessionDiagnostic, attributes(\n+    [DiagnosticHandler, attributes(\n         // struct attributes\n         diag,\n         help,"}, {"sha": "0a5973ca1aa1b47f8d54e8598828d824f72a63d0", "filename": "compiler/rustc_metadata/src/errors.rs", "status": "modified", "additions": 79, "deletions": 79, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -3,136 +3,136 @@ use std::{\n     path::{Path, PathBuf},\n };\n \n-use rustc_errors::{error_code, ErrorGuaranteed, SessionDiagnostic};\n-use rustc_macros::SessionDiagnostic;\n+use rustc_errors::{error_code, IntoDiagnostic, ErrorGuaranteed};\n+use rustc_macros::DiagnosticHandler;\n use rustc_session::config;\n use rustc_span::{sym, Span, Symbol};\n use rustc_target::spec::{PanicStrategy, TargetTriple};\n \n use crate::locator::CrateFlavor;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::rlib_required)]\n pub struct RlibRequired {\n     pub crate_name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::lib_required)]\n pub struct LibRequired<'a> {\n     pub crate_name: Symbol,\n     pub kind: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::crate_dep_multiple)]\n #[help]\n pub struct CrateDepMultiple {\n     pub crate_name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::two_panic_runtimes)]\n pub struct TwoPanicRuntimes {\n     pub prev_name: Symbol,\n     pub cur_name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::bad_panic_strategy)]\n pub struct BadPanicStrategy {\n     pub runtime: Symbol,\n     pub strategy: PanicStrategy,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::required_panic_strategy)]\n pub struct RequiredPanicStrategy {\n     pub crate_name: Symbol,\n     pub found_strategy: PanicStrategy,\n     pub desired_strategy: PanicStrategy,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::incompatible_panic_in_drop_strategy)]\n pub struct IncompatiblePanicInDropStrategy {\n     pub crate_name: Symbol,\n     pub found_strategy: PanicStrategy,\n     pub desired_strategy: PanicStrategy,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::multiple_names_in_link)]\n pub struct MultipleNamesInLink {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::multiple_kinds_in_link)]\n pub struct MultipleKindsInLink {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::link_name_form)]\n pub struct LinkNameForm {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::link_kind_form)]\n pub struct LinkKindForm {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::link_modifiers_form)]\n pub struct LinkModifiersForm {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::link_cfg_form)]\n pub struct LinkCfgForm {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::wasm_import_form)]\n pub struct WasmImportForm {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::empty_link_name, code = \"E0454\")]\n pub struct EmptyLinkName {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::link_framework_apple, code = \"E0455\")]\n pub struct LinkFrameworkApple {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::framework_only_windows, code = \"E0455\")]\n pub struct FrameworkOnlyWindows {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::unknown_link_kind, code = \"E0458\")]\n pub struct UnknownLinkKind<'a> {\n     #[primary_span]\n@@ -141,199 +141,199 @@ pub struct UnknownLinkKind<'a> {\n     pub kind: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::multiple_link_modifiers)]\n pub struct MultipleLinkModifiers {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::multiple_cfgs)]\n pub struct MultipleCfgs {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::link_cfg_single_predicate)]\n pub struct LinkCfgSinglePredicate {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::multiple_wasm_import)]\n pub struct MultipleWasmImport {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::unexpected_link_arg)]\n pub struct UnexpectedLinkArg {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::invalid_link_modifier)]\n pub struct InvalidLinkModifier {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::multiple_modifiers)]\n pub struct MultipleModifiers<'a> {\n     #[primary_span]\n     pub span: Span,\n     pub modifier: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::bundle_needs_static)]\n pub struct BundleNeedsStatic {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::whole_archive_needs_static)]\n pub struct WholeArchiveNeedsStatic {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::as_needed_compatibility)]\n pub struct AsNeededCompatibility {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::unknown_link_modifier)]\n pub struct UnknownLinkModifier<'a> {\n     #[primary_span]\n     pub span: Span,\n     pub modifier: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::incompatible_wasm_link)]\n pub struct IncompatibleWasmLink {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::link_requires_name, code = \"E0459\")]\n pub struct LinkRequiresName {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::raw_dylib_no_nul)]\n pub struct RawDylibNoNul {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::link_ordinal_raw_dylib)]\n pub struct LinkOrdinalRawDylib {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::lib_framework_apple)]\n pub struct LibFrameworkApple;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::empty_renaming_target)]\n pub struct EmptyRenamingTarget<'a> {\n     pub lib_name: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::renaming_no_link)]\n pub struct RenamingNoLink<'a> {\n     pub lib_name: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::multiple_renamings)]\n pub struct MultipleRenamings<'a> {\n     pub lib_name: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::no_link_mod_override)]\n pub struct NoLinkModOverride {\n     #[primary_span]\n     pub span: Option<Span>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::unsupported_abi_i686)]\n pub struct UnsupportedAbiI686 {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::unsupported_abi)]\n pub struct UnsupportedAbi {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::fail_create_file_encoder)]\n pub struct FailCreateFileEncoder {\n     pub err: Error,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::fail_seek_file)]\n pub struct FailSeekFile {\n     pub err: Error,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::fail_write_file)]\n pub struct FailWriteFile {\n     pub err: Error,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::crate_not_panic_runtime)]\n pub struct CrateNotPanicRuntime {\n     pub crate_name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::no_panic_strategy)]\n pub struct NoPanicStrategy {\n     pub crate_name: Symbol,\n     pub strategy: PanicStrategy,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::profiler_builtins_needs_core)]\n pub struct ProfilerBuiltinsNeedsCore;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::not_profiler_runtime)]\n pub struct NotProfilerRuntime {\n     pub crate_name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::no_multiple_global_alloc)]\n pub struct NoMultipleGlobalAlloc {\n     #[primary_span]\n@@ -343,26 +343,26 @@ pub struct NoMultipleGlobalAlloc {\n     pub span1: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::conflicting_global_alloc)]\n pub struct ConflictingGlobalAlloc {\n     pub crate_name: Symbol,\n     pub other_crate_name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::global_alloc_required)]\n pub struct GlobalAllocRequired;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::no_transitive_needs_dep)]\n pub struct NoTransitiveNeedsDep<'a> {\n     pub crate_name: Symbol,\n     pub needs_crate_name: &'a str,\n     pub deps_crate_name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::failed_write_error)]\n pub struct FailedWriteError {\n     pub filename: PathBuf,\n@@ -381,28 +381,28 @@ pub struct FailedCreateTempdir {\n     pub err: Error,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::failed_create_file)]\n pub struct FailedCreateFile<'a> {\n     pub filename: &'a Path,\n     pub err: Error,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::failed_create_encoded_metadata)]\n pub struct FailedCreateEncodedMetadata {\n     pub err: Error,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::non_ascii_name)]\n pub struct NonAsciiName {\n     #[primary_span]\n     pub span: Span,\n     pub crate_name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::extern_location_not_exist)]\n pub struct ExternLocationNotExist<'a> {\n     #[primary_span]\n@@ -411,7 +411,7 @@ pub struct ExternLocationNotExist<'a> {\n     pub location: &'a Path,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::extern_location_not_file)]\n pub struct ExternLocationNotFile<'a> {\n     #[primary_span]\n@@ -427,7 +427,7 @@ pub(crate) struct MultipleCandidates {\n     pub candidates: Vec<PathBuf>,\n }\n \n-impl SessionDiagnostic<'_> for MultipleCandidates {\n+impl IntoDiagnostic<'_> for MultipleCandidates {\n     fn into_diagnostic(\n         self,\n         handler: &'_ rustc_errors::Handler,\n@@ -444,7 +444,7 @@ impl SessionDiagnostic<'_> for MultipleCandidates {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::multiple_matching_crates, code = \"E0464\")]\n #[note]\n pub struct MultipleMatchingCrates {\n@@ -454,23 +454,23 @@ pub struct MultipleMatchingCrates {\n     pub candidates: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::symbol_conflicts_current, code = \"E0519\")]\n pub struct SymbolConflictsCurrent {\n     #[primary_span]\n     pub span: Span,\n     pub crate_name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::symbol_conflicts_others, code = \"E0523\")]\n pub struct SymbolConflictsOthers {\n     #[primary_span]\n     pub span: Span,\n     pub crate_name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::stable_crate_id_collision)]\n pub struct StableCrateIdCollision {\n     #[primary_span]\n@@ -479,15 +479,15 @@ pub struct StableCrateIdCollision {\n     pub crate_name1: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::dl_error)]\n pub struct DlError {\n     #[primary_span]\n     pub span: Span,\n     pub err: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::newer_crate_version, code = \"E0460\")]\n #[note]\n #[note(metadata::found_crate_versions)]\n@@ -499,7 +499,7 @@ pub struct NewerCrateVersion {\n     pub found_crates: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::no_crate_with_triple, code = \"E0461\")]\n #[note(metadata::found_crate_versions)]\n pub struct NoCrateWithTriple<'a> {\n@@ -511,7 +511,7 @@ pub struct NoCrateWithTriple<'a> {\n     pub found_crates: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::found_staticlib, code = \"E0462\")]\n #[note(metadata::found_crate_versions)]\n #[help]\n@@ -523,7 +523,7 @@ pub struct FoundStaticlib {\n     pub found_crates: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::incompatible_rustc, code = \"E0514\")]\n #[note(metadata::found_crate_versions)]\n #[help]\n@@ -543,7 +543,7 @@ pub struct InvalidMetadataFiles {\n     pub crate_rejections: Vec<String>,\n }\n \n-impl SessionDiagnostic<'_> for InvalidMetadataFiles {\n+impl IntoDiagnostic<'_> for InvalidMetadataFiles {\n     fn into_diagnostic(\n         self,\n         handler: &'_ rustc_errors::Handler,\n@@ -571,7 +571,7 @@ pub struct CannotFindCrate {\n     pub locator_triple: TargetTriple,\n }\n \n-impl SessionDiagnostic<'_> for CannotFindCrate {\n+impl IntoDiagnostic<'_> for CannotFindCrate {\n     fn into_diagnostic(\n         self,\n         handler: &'_ rustc_errors::Handler,\n@@ -617,23 +617,23 @@ impl SessionDiagnostic<'_> for CannotFindCrate {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::no_dylib_plugin, code = \"E0457\")]\n pub struct NoDylibPlugin {\n     #[primary_span]\n     pub span: Span,\n     pub crate_name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::crate_location_unknown_type)]\n pub struct CrateLocationUnknownType<'a> {\n     #[primary_span]\n     pub span: Span,\n     pub path: &'a Path,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::lib_filename_form)]\n pub struct LibFilenameForm<'a> {\n     #[primary_span]\n@@ -642,36 +642,36 @@ pub struct LibFilenameForm<'a> {\n     pub dll_suffix: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::multiple_import_name_type)]\n pub struct MultipleImportNameType {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::import_name_type_form)]\n pub struct ImportNameTypeForm {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::import_name_type_x86)]\n pub struct ImportNameTypeX86 {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::unknown_import_name_type)]\n pub struct UnknownImportNameType<'a> {\n     #[primary_span]\n     pub span: Span,\n     pub import_name_type: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(metadata::import_name_type_raw)]\n pub struct ImportNameTypeRaw {\n     #[primary_span]"}, {"sha": "effda9c0557cf36670616f0135dfe821c20dcc37", "filename": "compiler/rustc_middle/src/error.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_middle%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_middle%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ferror.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -1,9 +1,9 @@\n-use rustc_macros::SessionDiagnostic;\n+use rustc_macros::DiagnosticHandler;\n use rustc_span::Span;\n \n use crate::ty::Ty;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(middle::drop_check_overflow, code = \"E0320\")]\n #[note]\n pub struct DropCheckOverflow<'tcx> {\n@@ -13,7 +13,7 @@ pub struct DropCheckOverflow<'tcx> {\n     pub overflow_ty: Ty<'tcx>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(middle::opaque_hidden_type_mismatch)]\n pub struct OpaqueHiddenTypeMismatch<'tcx> {\n     pub self_ty: Ty<'tcx>,\n@@ -39,7 +39,7 @@ pub enum TypeMismatchReason {\n     },\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(middle::limit_invalid)]\n pub struct LimitInvalid<'a> {\n     #[primary_span]"}, {"sha": "0d36abed2c00d38b35dee4dfc1e0e25f888591c2", "filename": "compiler/rustc_mir_dataflow/src/errors.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_mir_dataflow%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_mir_dataflow%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Ferrors.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -1,69 +1,69 @@\n-use rustc_macros::SessionDiagnostic;\n+use rustc_macros::DiagnosticHandler;\n use rustc_span::{Span, Symbol};\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(mir_dataflow::path_must_end_in_filename)]\n pub(crate) struct PathMustEndInFilename {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(mir_dataflow::unknown_formatter)]\n pub(crate) struct UnknownFormatter {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(mir_dataflow::duplicate_values_for)]\n pub(crate) struct DuplicateValuesFor {\n     #[primary_span]\n     pub span: Span,\n     pub name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(mir_dataflow::requires_an_argument)]\n pub(crate) struct RequiresAnArgument {\n     #[primary_span]\n     pub span: Span,\n     pub name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(mir_dataflow::stop_after_dataflow_ended_compilation)]\n pub(crate) struct StopAfterDataFlowEndedCompilation;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(mir_dataflow::peek_must_be_place_or_ref_place)]\n pub(crate) struct PeekMustBePlaceOrRefPlace {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(mir_dataflow::peek_must_be_not_temporary)]\n pub(crate) struct PeekMustBeNotTemporary {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(mir_dataflow::peek_bit_not_set)]\n pub(crate) struct PeekBitNotSet {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(mir_dataflow::peek_argument_not_a_local)]\n pub(crate) struct PeekArgumentNotALocal {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(mir_dataflow::peek_argument_untracked)]\n pub(crate) struct PeekArgumentUntracked {\n     #[primary_span]"}, {"sha": "150a702dc24c2b5eaf610cc5847c224c2d208b1b", "filename": "compiler/rustc_monomorphize/src/errors.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -1,11 +1,11 @@\n use std::path::PathBuf;\n \n+use rustc_errors::IntoDiagnostic;\n use rustc_errors::ErrorGuaranteed;\n-use rustc_errors::SessionDiagnostic;\n-use rustc_macros::{LintDiagnostic, SessionDiagnostic};\n+use rustc_macros::{DiagnosticHandler, LintDiagnostic};\n use rustc_span::Span;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(monomorphize::recursion_limit)]\n pub struct RecursionLimit {\n     #[primary_span]\n@@ -19,7 +19,7 @@ pub struct RecursionLimit {\n     pub path: PathBuf,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(monomorphize::type_length_limit)]\n #[help(monomorphize::consider_type_length_limit)]\n pub struct TypeLengthLimit {\n@@ -32,7 +32,7 @@ pub struct TypeLengthLimit {\n     pub type_length: usize,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(monomorphize::requires_lang_item)]\n pub struct RequiresLangItem {\n     pub lang_item: String,\n@@ -44,7 +44,7 @@ pub struct UnusedGenericParams {\n     pub param_names: Vec<String>,\n }\n \n-impl SessionDiagnostic<'_> for UnusedGenericParams {\n+impl IntoDiagnostic<'_> for UnusedGenericParams {\n     fn into_diagnostic(\n         self,\n         handler: &'_ rustc_errors::Handler,\n@@ -72,11 +72,11 @@ pub struct LargeAssignmentsLint {\n     pub limit: u64,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(monomorphize::unknown_partition_strategy)]\n pub struct UnknownPartitionStrategy;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(monomorphize::symbol_already_defined)]\n pub struct SymbolAlreadyDefined {\n     #[primary_span]"}, {"sha": "02148193cf0204a5334a2b11bfd48055b004fbee", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -20,7 +20,7 @@ use rustc_errors::{\n     fluent, Applicability, DiagnosticBuilder, DiagnosticMessage, Handler, MultiSpan, PResult,\n };\n use rustc_errors::{pluralize, struct_span_err, Diagnostic, ErrorGuaranteed};\n-use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n+use rustc_macros::{DiagnosticHandler, SessionSubdiagnostic};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{Span, SpanSnippetError, DUMMY_SP};\n@@ -242,7 +242,7 @@ impl MultiSugg {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::maybe_report_ambiguous_plus)]\n struct AmbiguousPlus {\n     pub sum_ty: String,\n@@ -251,7 +251,7 @@ struct AmbiguousPlus {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::maybe_recover_from_bad_type_plus, code = \"E0178\")]\n struct BadTypePlus {\n     pub ty: String,\n@@ -285,7 +285,7 @@ pub enum BadTypePlusSub {\n     },\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::maybe_recover_from_bad_qpath_stage_2)]\n struct BadQPathStage2 {\n     #[primary_span]\n@@ -294,7 +294,7 @@ struct BadQPathStage2 {\n     ty: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::incorrect_semicolon)]\n struct IncorrectSemicolon<'a> {\n     #[primary_span]\n@@ -305,15 +305,15 @@ struct IncorrectSemicolon<'a> {\n     name: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::incorrect_use_of_await)]\n struct IncorrectUseOfAwait {\n     #[primary_span]\n     #[suggestion(parser::parentheses_suggestion, applicability = \"machine-applicable\")]\n     span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::incorrect_use_of_await)]\n struct IncorrectAwait {\n     #[primary_span]\n@@ -324,7 +324,7 @@ struct IncorrectAwait {\n     question_mark: &'static str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::in_in_typo)]\n struct InInTypo {\n     #[primary_span]\n@@ -333,7 +333,7 @@ struct InInTypo {\n     sugg_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::invalid_variable_declaration)]\n pub struct InvalidVariableDeclaration {\n     #[primary_span]\n@@ -362,7 +362,7 @@ pub enum InvalidVariableDeclarationSub {\n     UseLetNotVar(#[primary_span] Span),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::invalid_comparison_operator)]\n pub(crate) struct InvalidComparisonOperator {\n     #[primary_span]\n@@ -389,7 +389,7 @@ pub(crate) enum InvalidComparisonOperatorSub {\n     Spaceship(#[primary_span] Span),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::invalid_logical_operator)]\n #[note]\n pub(crate) struct InvalidLogicalOperator {\n@@ -416,15 +416,15 @@ pub(crate) enum InvalidLogicalOperatorSub {\n     Disjunction(#[primary_span] Span),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::tilde_is_not_unary_operator)]\n pub(crate) struct TildeAsUnaryOperator(\n     #[primary_span]\n     #[suggestion_short(applicability = \"machine-applicable\", code = \"!\")]\n     pub Span,\n );\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::unexpected_token_after_not)]\n pub(crate) struct NotAsNegationOperator {\n     #[primary_span]\n@@ -458,7 +458,7 @@ pub enum NotAsNegationOperatorSub {\n     SuggestNotLogical(#[primary_span] Span),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::malformed_loop_label)]\n pub(crate) struct MalformedLoopLabel {\n     #[primary_span]\n@@ -467,7 +467,7 @@ pub(crate) struct MalformedLoopLabel {\n     pub correct_label: Ident,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::lifetime_in_borrow_expression)]\n pub(crate) struct LifetimeInBorrowExpression {\n     #[primary_span]\n@@ -477,23 +477,23 @@ pub(crate) struct LifetimeInBorrowExpression {\n     pub lifetime_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::field_expression_with_generic)]\n pub(crate) struct FieldExpressionWithGeneric(#[primary_span] pub Span);\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::macro_invocation_with_qualified_path)]\n pub(crate) struct MacroInvocationWithQualifiedPath(#[primary_span] pub Span);\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::unexpected_token_after_label)]\n pub(crate) struct UnexpectedTokenAfterLabel(\n     #[primary_span]\n     #[label(parser::unexpected_token_after_label)]\n     pub Span,\n );\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::require_colon_after_labeled_expression)]\n #[note]\n pub(crate) struct RequireColonAfterLabeledExpression {\n@@ -505,7 +505,7 @@ pub(crate) struct RequireColonAfterLabeledExpression {\n     pub label_end: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::do_catch_syntax_removed)]\n #[note]\n pub(crate) struct DoCatchSyntaxRemoved {\n@@ -514,7 +514,7 @@ pub(crate) struct DoCatchSyntaxRemoved {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::float_literal_requires_integer_part)]\n pub(crate) struct FloatLiteralRequiresIntegerPart {\n     #[primary_span]\n@@ -523,7 +523,7 @@ pub(crate) struct FloatLiteralRequiresIntegerPart {\n     pub correct: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::invalid_int_literal_width)]\n #[help]\n pub(crate) struct InvalidIntLiteralWidth {\n@@ -532,7 +532,7 @@ pub(crate) struct InvalidIntLiteralWidth {\n     pub width: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::invalid_num_literal_base_prefix)]\n #[note]\n pub(crate) struct InvalidNumLiteralBasePrefix {\n@@ -542,7 +542,7 @@ pub(crate) struct InvalidNumLiteralBasePrefix {\n     pub fixed: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::invalid_num_literal_suffix)]\n #[help]\n pub(crate) struct InvalidNumLiteralSuffix {\n@@ -552,7 +552,7 @@ pub(crate) struct InvalidNumLiteralSuffix {\n     pub suffix: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::invalid_float_literal_width)]\n #[help]\n pub(crate) struct InvalidFloatLiteralWidth {\n@@ -561,7 +561,7 @@ pub(crate) struct InvalidFloatLiteralWidth {\n     pub width: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::invalid_float_literal_suffix)]\n #[help]\n pub(crate) struct InvalidFloatLiteralSuffix {\n@@ -571,14 +571,14 @@ pub(crate) struct InvalidFloatLiteralSuffix {\n     pub suffix: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::int_literal_too_large)]\n pub(crate) struct IntLiteralTooLarge {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::missing_semicolon_before_array)]\n pub(crate) struct MissingSemicolonBeforeArray {\n     #[primary_span]\n@@ -587,7 +587,7 @@ pub(crate) struct MissingSemicolonBeforeArray {\n     pub semicolon: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::invalid_block_macro_segment)]\n pub(crate) struct InvalidBlockMacroSegment {\n     #[primary_span]\n@@ -596,7 +596,7 @@ pub(crate) struct InvalidBlockMacroSegment {\n     pub context: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::if_expression_missing_then_block)]\n pub(crate) struct IfExpressionMissingThenBlock {\n     #[primary_span]\n@@ -613,7 +613,7 @@ pub(crate) enum IfExpressionMissingThenBlockSub {\n     AddThenBlock(#[primary_span] Span),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::if_expression_missing_condition)]\n pub(crate) struct IfExpressionMissingCondition {\n     #[primary_span]\n@@ -623,14 +623,14 @@ pub(crate) struct IfExpressionMissingCondition {\n     pub block_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::expected_expression_found_let)]\n pub(crate) struct ExpectedExpressionFoundLet {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::expected_else_block)]\n pub(crate) struct ExpectedElseBlock {\n     #[primary_span]\n@@ -642,7 +642,7 @@ pub(crate) struct ExpectedElseBlock {\n     pub condition_start: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::outer_attribute_not_allowed_on_if_else)]\n pub(crate) struct OuterAttributeNotAllowedOnIfElse {\n     #[primary_span]\n@@ -659,7 +659,7 @@ pub(crate) struct OuterAttributeNotAllowedOnIfElse {\n     pub attributes: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::missing_in_in_for_loop)]\n pub(crate) struct MissingInInForLoop {\n     #[primary_span]\n@@ -677,23 +677,23 @@ pub(crate) enum MissingInInForLoopSub {\n     AddIn(#[primary_span] Span),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::missing_comma_after_match_arm)]\n pub(crate) struct MissingCommaAfterMatchArm {\n     #[primary_span]\n     #[suggestion(applicability = \"machine-applicable\", code = \",\")]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::catch_after_try)]\n #[help]\n pub(crate) struct CatchAfterTry {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::comma_after_base_struct)]\n #[note]\n pub(crate) struct CommaAfterBaseStruct {\n@@ -703,7 +703,7 @@ pub(crate) struct CommaAfterBaseStruct {\n     pub comma: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::eq_field_init)]\n pub(crate) struct EqFieldInit {\n     #[primary_span]\n@@ -712,7 +712,7 @@ pub(crate) struct EqFieldInit {\n     pub eq: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::dotdotdot)]\n pub(crate) struct DotDotDot {\n     #[primary_span]\n@@ -721,15 +721,15 @@ pub(crate) struct DotDotDot {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::left_arrow_operator)]\n pub(crate) struct LeftArrowOperator {\n     #[primary_span]\n     #[suggestion(applicability = \"maybe-incorrect\", code = \"< -\")]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::remove_let)]\n pub(crate) struct RemoveLet {\n     #[primary_span]"}, {"sha": "ae77961b7bc28f7855a6230f24e9f28ad0248509", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -36,7 +36,7 @@ use rustc_ast::{AnonConst, BinOp, BinOpKind, FnDecl, FnRetTy, MacCall, Param, Ty\n use rustc_ast::{Arm, Async, BlockCheckMode, Expr, ExprKind, Label, Movability, RangeLimits};\n use rustc_ast::{ClosureBinder, StmtKind};\n use rustc_ast_pretty::pprust;\n-use rustc_errors::SessionDiagnostic;\n+use rustc_errors::IntoDiagnostic;\n use rustc_errors::{Applicability, Diagnostic, PResult};\n use rustc_session::lint::builtin::BREAK_WITH_LABEL_AND_LOOP;\n use rustc_session::lint::BuiltinLintDiagnostics;"}, {"sha": "ade5927be8e1775d6f74a112d3edb74f8deb0a32", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -1,5 +1,5 @@\n use rustc_errors::{Applicability, MultiSpan};\n-use rustc_macros::{LintDiagnostic, SessionDiagnostic, SessionSubdiagnostic};\n+use rustc_macros::{DiagnosticHandler, LintDiagnostic, SessionSubdiagnostic};\n use rustc_span::{Span, Symbol};\n \n #[derive(LintDiagnostic)]\n@@ -32,7 +32,7 @@ pub struct IgnoredInlineAttrFnProto;\n #[note]\n pub struct IgnoredInlineAttrConstants;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::inline_not_fn_or_closure, code = \"E0518\")]\n pub struct InlineNotFnOrClosure {\n     #[primary_span]\n@@ -53,7 +53,7 @@ pub struct IgnoredNoCoveragePropagate;\n #[diag(passes::no_coverage_fn_defn)]\n pub struct IgnoredNoCoverageFnDefn;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::no_coverage_not_coverable, code = \"E0788\")]\n pub struct IgnoredNoCoverageNotCoverable {\n     #[primary_span]\n@@ -62,7 +62,7 @@ pub struct IgnoredNoCoverageNotCoverable {\n     pub defn_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::should_be_applied_to_fn)]\n pub struct AttrShouldBeAppliedToFn {\n     #[primary_span]\n@@ -71,14 +71,14 @@ pub struct AttrShouldBeAppliedToFn {\n     pub defn_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::naked_tracked_caller, code = \"E0736\")]\n pub struct NakedTrackedCaller {\n     #[primary_span]\n     pub attr_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::should_be_applied_to_fn, code = \"E0739\")]\n pub struct TrackedCallerWrongLocation {\n     #[primary_span]\n@@ -87,7 +87,7 @@ pub struct TrackedCallerWrongLocation {\n     pub defn_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::should_be_applied_to_struct_enum, code = \"E0701\")]\n pub struct NonExhaustiveWrongLocation {\n     #[primary_span]\n@@ -96,7 +96,7 @@ pub struct NonExhaustiveWrongLocation {\n     pub defn_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::should_be_applied_to_trait)]\n pub struct AttrShouldBeAppliedToTrait {\n     #[primary_span]\n@@ -109,7 +109,7 @@ pub struct AttrShouldBeAppliedToTrait {\n #[diag(passes::target_feature_on_statement)]\n pub struct TargetFeatureOnStatement;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::should_be_applied_to_static)]\n pub struct AttrShouldBeAppliedToStatic {\n     #[primary_span]\n@@ -118,23 +118,23 @@ pub struct AttrShouldBeAppliedToStatic {\n     pub defn_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::doc_expect_str)]\n pub struct DocExpectStr<'a> {\n     #[primary_span]\n     pub attr_span: Span,\n     pub attr_name: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::doc_alias_empty)]\n pub struct DocAliasEmpty<'a> {\n     #[primary_span]\n     pub span: Span,\n     pub attr_str: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::doc_alias_bad_char)]\n pub struct DocAliasBadChar<'a> {\n     #[primary_span]\n@@ -143,15 +143,15 @@ pub struct DocAliasBadChar<'a> {\n     pub char_: char,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::doc_alias_start_end)]\n pub struct DocAliasStartEnd<'a> {\n     #[primary_span]\n     pub span: Span,\n     pub attr_str: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::doc_alias_bad_location)]\n pub struct DocAliasBadLocation<'a> {\n     #[primary_span]\n@@ -160,7 +160,7 @@ pub struct DocAliasBadLocation<'a> {\n     pub location: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::doc_alias_not_an_alias)]\n pub struct DocAliasNotAnAlias<'a> {\n     #[primary_span]\n@@ -175,57 +175,57 @@ pub struct DocAliasDuplicated {\n     pub first_defn: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::doc_alias_not_string_literal)]\n pub struct DocAliasNotStringLiteral {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::doc_alias_malformed)]\n pub struct DocAliasMalformed {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::doc_keyword_empty_mod)]\n pub struct DocKeywordEmptyMod {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::doc_keyword_not_mod)]\n pub struct DocKeywordNotMod {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::doc_keyword_invalid_ident)]\n pub struct DocKeywordInvalidIdent {\n     #[primary_span]\n     pub span: Span,\n     pub doc_keyword: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::doc_fake_variadic_not_valid)]\n pub struct DocFakeVariadicNotValid {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::doc_keyword_only_impl)]\n pub struct DocKeywordOnlyImpl {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::doc_inline_conflict)]\n #[help]\n pub struct DocKeywordConflict {\n@@ -243,7 +243,7 @@ pub struct DocInlineOnlyUse {\n     pub item_span: Option<Span>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::doc_attr_not_crate_level)]\n pub struct DocAttrNotCrateLevel<'a> {\n     #[primary_span]\n@@ -295,7 +295,7 @@ pub struct DocTestUnknownInclude {\n #[diag(passes::doc_invalid)]\n pub struct DocInvalid;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::pass_by_value)]\n pub struct PassByValue {\n     #[primary_span]\n@@ -304,7 +304,7 @@ pub struct PassByValue {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::allow_incoherent_impl)]\n pub struct AllowIncoherentImpl {\n     #[primary_span]\n@@ -313,7 +313,7 @@ pub struct AllowIncoherentImpl {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::has_incoherent_inherent_impl)]\n pub struct HasIncoherentInherentImpl {\n     #[primary_span]\n@@ -336,7 +336,7 @@ pub struct MustUseNoEffect {\n     pub target: rustc_hir::Target,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::must_not_suspend)]\n pub struct MustNotSuspend {\n     #[primary_span]\n@@ -372,7 +372,7 @@ pub struct LinkName<'a> {\n     pub value: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::no_link)]\n pub struct NoLink {\n     #[primary_span]\n@@ -381,7 +381,7 @@ pub struct NoLink {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::export_name)]\n pub struct ExportName {\n     #[primary_span]\n@@ -390,7 +390,7 @@ pub struct ExportName {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::rustc_layout_scalar_valid_range_not_struct)]\n pub struct RustcLayoutScalarValidRangeNotStruct {\n     #[primary_span]\n@@ -399,14 +399,14 @@ pub struct RustcLayoutScalarValidRangeNotStruct {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::rustc_layout_scalar_valid_range_arg)]\n pub struct RustcLayoutScalarValidRangeArg {\n     #[primary_span]\n     pub attr_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::rustc_legacy_const_generics_only)]\n pub struct RustcLegacyConstGenericsOnly {\n     #[primary_span]\n@@ -415,7 +415,7 @@ pub struct RustcLegacyConstGenericsOnly {\n     pub param_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::rustc_legacy_const_generics_index)]\n pub struct RustcLegacyConstGenericsIndex {\n     #[primary_span]\n@@ -424,7 +424,7 @@ pub struct RustcLegacyConstGenericsIndex {\n     pub generics_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::rustc_legacy_const_generics_index_exceed)]\n pub struct RustcLegacyConstGenericsIndexExceed {\n     #[primary_span]\n@@ -433,14 +433,14 @@ pub struct RustcLegacyConstGenericsIndexExceed {\n     pub arg_count: usize,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::rustc_legacy_const_generics_index_negative)]\n pub struct RustcLegacyConstGenericsIndexNegative {\n     #[primary_span]\n     pub invalid_args: Vec<Span>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::rustc_dirty_clean)]\n pub struct RustcDirtyClean {\n     #[primary_span]\n@@ -475,7 +475,7 @@ pub struct NoMangle {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::repr_ident, code = \"E0565\")]\n pub struct ReprIdent {\n     #[primary_span]\n@@ -486,21 +486,21 @@ pub struct ReprIdent {\n #[diag(passes::repr_conflicting, code = \"E0566\")]\n pub struct ReprConflicting;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::used_static)]\n pub struct UsedStatic {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::used_compiler_linker)]\n pub struct UsedCompilerLinker {\n     #[primary_span]\n     pub spans: Vec<Span>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::allow_internal_unstable)]\n pub struct AllowInternalUnstable {\n     #[primary_span]\n@@ -509,14 +509,14 @@ pub struct AllowInternalUnstable {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::debug_visualizer_placement)]\n pub struct DebugVisualizerPlacement {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::debug_visualizer_invalid)]\n #[note(passes::note_1)]\n #[note(passes::note_2)]\n@@ -526,7 +526,7 @@ pub struct DebugVisualizerInvalid {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::rustc_allow_const_fn_unstable)]\n pub struct RustcAllowConstFnUnstable {\n     #[primary_span]\n@@ -535,7 +535,7 @@ pub struct RustcAllowConstFnUnstable {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::rustc_std_internal_symbol)]\n pub struct RustcStdInternalSymbol {\n     #[primary_span]\n@@ -544,21 +544,21 @@ pub struct RustcStdInternalSymbol {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::const_trait)]\n pub struct ConstTrait {\n     #[primary_span]\n     pub attr_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::link_ordinal)]\n pub struct LinkOrdinal {\n     #[primary_span]\n     pub attr_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::stability_promotable)]\n pub struct StabilityPromotable {\n     #[primary_span]\n@@ -602,7 +602,7 @@ pub struct Unused {\n     pub note: UnusedNote,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::non_exported_macro_invalid_attrs, code = \"E0518\")]\n pub struct NonExportedMacroInvalidAttrs {\n     #[primary_span]\n@@ -621,7 +621,7 @@ pub struct UnusedDuplicate {\n     pub warning: Option<()>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::unused_multiple)]\n pub struct UnusedMultiple {\n     #[primary_span]\n@@ -632,7 +632,7 @@ pub struct UnusedMultiple {\n     pub name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::rustc_lint_opt_ty)]\n pub struct RustcLintOptTy {\n     #[primary_span]\n@@ -641,7 +641,7 @@ pub struct RustcLintOptTy {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(passes::rustc_lint_opt_deny_field_access)]\n pub struct RustcLintOptDenyFieldAccess {\n     #[primary_span]"}, {"sha": "0b2c09f9e1df98f4bcdafccd8f9cb07b43ee7c89", "filename": "compiler/rustc_plugin_impl/src/errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_plugin_impl%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_plugin_impl%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_plugin_impl%2Fsrc%2Ferrors.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -1,17 +1,17 @@\n //! Errors emitted by plugin_impl\n \n-use rustc_macros::SessionDiagnostic;\n+use rustc_macros::DiagnosticHandler;\n use rustc_span::Span;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(plugin_impl::load_plugin_error)]\n pub struct LoadPluginError {\n     #[primary_span]\n     pub span: Span,\n     pub msg: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(plugin_impl::malformed_plugin_attribute, code = \"E0498\")]\n pub struct MalformedPluginAttribute {\n     #[primary_span]"}, {"sha": "56a2cb059b562684438669ef64df057dfe5b004b", "filename": "compiler/rustc_privacy/src/errors.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -1,8 +1,8 @@\n use rustc_errors::DiagnosticArgFromDisplay;\n-use rustc_macros::{LintDiagnostic, SessionDiagnostic, SessionSubdiagnostic};\n+use rustc_macros::{DiagnosticHandler, LintDiagnostic, SessionSubdiagnostic};\n use rustc_span::{Span, Symbol};\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(privacy::field_is_private, code = \"E0451\")]\n pub struct FieldIsPrivate {\n     #[primary_span]\n@@ -29,7 +29,7 @@ pub enum FieldIsPrivateLabel {\n     },\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(privacy::item_is_private)]\n pub struct ItemIsPrivate<'a> {\n     #[primary_span]\n@@ -39,7 +39,7 @@ pub struct ItemIsPrivate<'a> {\n     pub descr: DiagnosticArgFromDisplay<'a>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(privacy::unnamed_item_is_private)]\n pub struct UnnamedItemIsPrivate {\n     #[primary_span]\n@@ -48,7 +48,7 @@ pub struct UnnamedItemIsPrivate {\n }\n \n // Duplicate of `InPublicInterface` but with a different error code, shares the same slug.\n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(privacy::in_public_interface, code = \"E0445\")]\n pub struct InPublicInterfaceTraits<'a> {\n     #[primary_span]\n@@ -62,7 +62,7 @@ pub struct InPublicInterfaceTraits<'a> {\n }\n \n // Duplicate of `InPublicInterfaceTraits` but with a different error code, shares the same slug.\n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(privacy::in_public_interface, code = \"E0446\")]\n pub struct InPublicInterface<'a> {\n     #[primary_span]\n@@ -75,7 +75,7 @@ pub struct InPublicInterface<'a> {\n     pub vis_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(privacy::report_effective_visibility)]\n pub struct ReportEffectiveVisibility {\n     #[primary_span]"}, {"sha": "97a74517f68030f47f339accd7f1c16c9cb47b85", "filename": "compiler/rustc_query_system/src/error.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_query_system%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_query_system%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Ferror.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -1,4 +1,4 @@\n-use rustc_errors::AddSubdiagnostic;\n+use rustc_errors::AddToDiagnostic;\n use rustc_session::Limit;\n use rustc_span::{Span, Symbol};\n \n@@ -7,7 +7,7 @@ pub struct CycleStack {\n     pub desc: String,\n }\n \n-impl AddSubdiagnostic for CycleStack {\n+impl AddToDiagnostic for CycleStack {\n     fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n         diag.span_note(self.span, &format!(\"...which requires {}...\", self.desc));\n     }\n@@ -46,7 +46,7 @@ pub struct CycleUsage {\n     pub usage: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(query_system::cycle, code = \"E0391\")]\n pub struct Cycle {\n     #[primary_span]\n@@ -62,11 +62,11 @@ pub struct Cycle {\n     pub cycle_usage: Option<CycleUsage>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(query_system::reentrant)]\n pub struct Reentrant;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(query_system::increment_compilation)]\n #[help]\n #[note(query_system::increment_compilation_note1)]\n@@ -76,7 +76,7 @@ pub struct IncrementCompilation {\n     pub dep_node: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[help]\n #[diag(query_system::query_overflow)]\n pub struct QueryOverflow {\n@@ -88,7 +88,7 @@ pub struct QueryOverflow {\n     pub crate_name: Symbol,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n #[note(query_system::layout_of_depth)]\n pub struct LayoutOfDepth {\n     pub desc: String,"}, {"sha": "6d26c8f47f3cf6d4eb2c35daf196058abd9f54e9", "filename": "compiler/rustc_query_system/src/query/job.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -4,7 +4,7 @@ use crate::query::{QueryContext, QueryStackFrame};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{\n-    Diagnostic, DiagnosticBuilder, ErrorGuaranteed, Handler, Level, SessionDiagnostic,\n+    Diagnostic, DiagnosticBuilder, IntoDiagnostic, ErrorGuaranteed, Handler, Level,\n };\n use rustc_hir::def::DefKind;\n use rustc_session::Session;"}, {"sha": "0983ec2f6f768b0329b2b92da03df0bb946a9e49", "filename": "compiler/rustc_save_analysis/src/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_save_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_save_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Ferrors.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -1,8 +1,8 @@\n-use rustc_macros::SessionDiagnostic;\n+use rustc_macros::DiagnosticHandler;\n \n use std::path::Path;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(save_analysis::could_not_open)]\n pub(crate) struct CouldNotOpen<'a> {\n     pub file_name: &'a Path,"}, {"sha": "4cf461098956a18690d5b33b78921bc6b5fc8699", "filename": "compiler/rustc_session/src/errors.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -8,7 +8,7 @@ use rustc_span::{Span, Symbol};\n use rustc_target::abi::TargetDataLayoutErrors;\n use rustc_target::spec::{SplitDebuginfo, StackProtector, TargetTriple};\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(session::incorrect_cgu_reuse_type)]\n pub struct IncorrectCguReuseType<'a> {\n     #[primary_span]\n@@ -19,14 +19,14 @@ pub struct IncorrectCguReuseType<'a> {\n     pub at_least: u8,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(session::cgu_not_recorded)]\n pub struct CguNotRecorded<'a> {\n     pub cgu_user_name: &'a str,\n     pub cgu_name: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(session::feature_gate_error, code = \"E0658\")]\n pub struct FeatureGateError<'a> {\n     #[primary_span]\n@@ -46,50 +46,50 @@ pub struct FeatureDiagnosticHelp {\n     pub feature: Symbol,\n }\n \n-impl SessionDiagnostic<'_, !> for TargetDataLayoutErrors<'_> {\n-    fn into_diagnostic(self, sess: &Handler) -> DiagnosticBuilder<'_, !> {\n+impl DiagnosticHandler<'_, !> for TargetDataLayoutErrors<'_> {\n+    fn into_diagnostic(self, handler: &Handler) -> DiagnosticBuilder<'_, !> {\n         let mut diag;\n         match self {\n             TargetDataLayoutErrors::InvalidAddressSpace { addr_space, err, cause } => {\n-                diag = sess.struct_fatal(fluent::session::target_invalid_address_space);\n+                diag = handler.struct_fatal(fluent::session::target_invalid_address_space);\n                 diag.set_arg(\"addr_space\", addr_space);\n                 diag.set_arg(\"cause\", cause);\n                 diag.set_arg(\"err\", err);\n                 diag\n             }\n             TargetDataLayoutErrors::InvalidBits { kind, bit, cause, err } => {\n-                diag = sess.struct_fatal(fluent::session::target_invalid_bits);\n+                diag = handler.struct_fatal(fluent::session::target_invalid_bits);\n                 diag.set_arg(\"kind\", kind);\n                 diag.set_arg(\"bit\", bit);\n                 diag.set_arg(\"cause\", cause);\n                 diag.set_arg(\"err\", err);\n                 diag\n             }\n             TargetDataLayoutErrors::MissingAlignment { cause } => {\n-                diag = sess.struct_fatal(fluent::session::target_missing_alignment);\n+                diag = handler.struct_fatal(fluent::session::target_missing_alignment);\n                 diag.set_arg(\"cause\", cause);\n                 diag\n             }\n             TargetDataLayoutErrors::InvalidAlignment { cause, err } => {\n-                diag = sess.struct_fatal(fluent::session::target_invalid_alignment);\n+                diag = handler.struct_fatal(fluent::session::target_invalid_alignment);\n                 diag.set_arg(\"cause\", cause);\n                 diag.set_arg(\"err\", err);\n                 diag\n             }\n             TargetDataLayoutErrors::InconsistentTargetArchitecture { dl, target } => {\n-                diag = sess.struct_fatal(fluent::session::target_inconsistent_architecture);\n+                diag = handler.struct_fatal(fluent::session::target_inconsistent_architecture);\n                 diag.set_arg(\"dl\", dl);\n                 diag.set_arg(\"target\", target);\n                 diag\n             }\n             TargetDataLayoutErrors::InconsistentTargetPointerWidth { pointer_size, target } => {\n-                diag = sess.struct_fatal(fluent::session::target_inconsistent_pointer_width);\n+                diag = handler.struct_fatal(fluent::session::target_inconsistent_pointer_width);\n                 diag.set_arg(\"pointer_size\", pointer_size);\n                 diag.set_arg(\"target\", target);\n                 diag\n             }\n             TargetDataLayoutErrors::InvalidBitsSize { err } => {\n-                diag = sess.struct_fatal(fluent::session::target_invalid_bits_size);\n+                diag = handler.struct_fatal(fluent::session::target_invalid_bits_size);\n                 diag.set_arg(\"err\", err);\n                 diag\n             }"}, {"sha": "3189dcb08ade33883a322a6b783e1bced001e643", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -11,8 +11,8 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::{emitter::SilentEmitter, ColorConfig, Handler};\n use rustc_errors::{\n-    fallback_fluent_bundle, Applicability, Diagnostic, DiagnosticBuilder, DiagnosticId,\n-    DiagnosticMessage, EmissionGuarantee, ErrorGuaranteed, MultiSpan, SessionDiagnostic, StashKey,\n+    fallback_fluent_bundle, Applicability, Diagnostic, DiagnosticBuilder, IntoDiagnostic,\n+    DiagnosticId, DiagnosticMessage, EmissionGuarantee, ErrorGuaranteed, MultiSpan, StashKey,\n };\n use rustc_feature::{find_feature_issue, GateIssue, UnstableFeatures};\n use rustc_span::edition::Edition;\n@@ -344,34 +344,34 @@ impl ParseSess {\n \n     pub fn create_err<'a>(\n         &'a self,\n-        err: impl SessionDiagnostic<'a>,\n+        err: impl IntoDiagnostic<'a>,\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         err.into_diagnostic(&self.span_diagnostic)\n     }\n \n-    pub fn emit_err<'a>(&'a self, err: impl SessionDiagnostic<'a>) -> ErrorGuaranteed {\n+    pub fn emit_err<'a>(&'a self, err: impl IntoDiagnostic<'a>) -> ErrorGuaranteed {\n         self.create_err(err).emit()\n     }\n \n     pub fn create_warning<'a>(\n         &'a self,\n-        warning: impl SessionDiagnostic<'a, ()>,\n+        warning: impl IntoDiagnostic<'a, ()>,\n     ) -> DiagnosticBuilder<'a, ()> {\n         warning.into_diagnostic(&self.span_diagnostic)\n     }\n \n-    pub fn emit_warning<'a>(&'a self, warning: impl SessionDiagnostic<'a, ()>) {\n+    pub fn emit_warning<'a>(&'a self, warning: impl IntoDiagnostic<'a, ()>) {\n         self.create_warning(warning).emit()\n     }\n \n     pub fn create_fatal<'a>(\n         &'a self,\n-        fatal: impl SessionDiagnostic<'a, !>,\n+        fatal: impl IntoDiagnostic<'a, !>,\n     ) -> DiagnosticBuilder<'a, !> {\n         fatal.into_diagnostic(&self.span_diagnostic)\n     }\n \n-    pub fn emit_fatal<'a>(&'a self, fatal: impl SessionDiagnostic<'a, !>) -> ! {\n+    pub fn emit_fatal<'a>(&'a self, fatal: impl IntoDiagnostic<'a, !>) -> ! {\n         self.create_fatal(fatal).emit()\n     }\n "}, {"sha": "e660b739928455d958aaa38b465fc934df76250d", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -27,8 +27,8 @@ use rustc_errors::emitter::{Emitter, EmitterWriter, HumanReadableErrorType};\n use rustc_errors::json::JsonEmitter;\n use rustc_errors::registry::Registry;\n use rustc_errors::{\n-    error_code, fallback_fluent_bundle, DiagnosticBuilder, DiagnosticId, DiagnosticMessage,\n-    ErrorGuaranteed, FluentBundle, LazyFallbackBundle, MultiSpan, SessionDiagnostic,\n+    error_code, fallback_fluent_bundle, DiagnosticBuilder, IntoDiagnostic, DiagnosticId,\n+    DiagnosticMessage, ErrorGuaranteed, FluentBundle, LazyFallbackBundle, MultiSpan,\n };\n use rustc_macros::HashStable_Generic;\n pub use rustc_span::def_id::StableCrateId;\n@@ -505,13 +505,13 @@ impl Session {\n     }\n     pub fn create_err<'a>(\n         &'a self,\n-        err: impl SessionDiagnostic<'a>,\n+        err: impl IntoDiagnostic<'a>,\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         self.parse_sess.create_err(err)\n     }\n     pub fn create_feature_err<'a>(\n         &'a self,\n-        err: impl SessionDiagnostic<'a>,\n+        err: impl IntoDiagnostic<'a>,\n         feature: Symbol,\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let mut err = self.parse_sess.create_err(err);\n@@ -521,25 +521,25 @@ impl Session {\n         add_feature_diagnostics(&mut err, &self.parse_sess, feature);\n         err\n     }\n-    pub fn emit_err<'a>(&'a self, err: impl SessionDiagnostic<'a>) -> ErrorGuaranteed {\n+    pub fn emit_err<'a>(&'a self, err: impl IntoDiagnostic<'a>) -> ErrorGuaranteed {\n         self.parse_sess.emit_err(err)\n     }\n     pub fn create_warning<'a>(\n         &'a self,\n-        err: impl SessionDiagnostic<'a, ()>,\n+        err: impl IntoDiagnostic<'a, ()>,\n     ) -> DiagnosticBuilder<'a, ()> {\n         self.parse_sess.create_warning(err)\n     }\n-    pub fn emit_warning<'a>(&'a self, warning: impl SessionDiagnostic<'a, ()>) {\n+    pub fn emit_warning<'a>(&'a self, warning: impl IntoDiagnostic<'a, ()>) {\n         self.parse_sess.emit_warning(warning)\n     }\n     pub fn create_fatal<'a>(\n         &'a self,\n-        fatal: impl SessionDiagnostic<'a, !>,\n+        fatal: impl IntoDiagnostic<'a, !>,\n     ) -> DiagnosticBuilder<'a, !> {\n         self.parse_sess.create_fatal(fatal)\n     }\n-    pub fn emit_fatal<'a>(&'a self, fatal: impl SessionDiagnostic<'a, !>) -> ! {\n+    pub fn emit_fatal<'a>(&'a self, fatal: impl IntoDiagnostic<'a, !>) -> ! {\n         self.parse_sess.emit_fatal(fatal)\n     }\n     #[inline]"}, {"sha": "98ff9694808f2668cce2af6e14e1083f282076e6", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -177,6 +177,7 @@ symbols! {\n         DecorateLint,\n         Default,\n         Deref,\n+        DiagnosticHandler,\n         DiagnosticMessage,\n         DirBuilder,\n         Display,\n@@ -277,7 +278,6 @@ symbols! {\n         RwLockWriteGuard,\n         Send,\n         SeqCst,\n-        SessionDiagnostic,\n         SliceIndex,\n         Some,\n         String,"}, {"sha": "eb487a03c93a8a9377f70882b85c5133cf266b92", "filename": "compiler/rustc_symbol_mangling/src/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_symbol_mangling%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_symbol_mangling%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ferrors.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -1,10 +1,10 @@\n //! Errors emitted by symbol_mangling.\n \n use rustc_errors::{DiagnosticArgValue, IntoDiagnosticArg};\n-use rustc_macros::SessionDiagnostic;\n+use rustc_macros::Diagnostic;\n use rustc_span::Span;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(symbol_mangling::test_output)]\n pub struct TestOutput {\n     #[primary_span]"}, {"sha": "f62bdb00ee008eb1dcccd847c506da90db73772b", "filename": "compiler/rustc_trait_selection/src/errors.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -1,10 +1,10 @@\n-use rustc_errors::{fluent, ErrorGuaranteed, Handler, SessionDiagnostic};\n-use rustc_macros::SessionDiagnostic;\n+use rustc_errors::{fluent, IntoDiagnostic, ErrorGuaranteed, Handler};\n+use rustc_macros::DiagnosticHandler;\n use rustc_middle::ty::{PolyTraitRef, Ty, Unevaluated};\n use rustc_session::Limit;\n use rustc_span::{Span, Symbol};\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(trait_selection::dump_vtable_entries)]\n pub struct DumpVTableEntries<'a> {\n     #[primary_span]\n@@ -13,15 +13,15 @@ pub struct DumpVTableEntries<'a> {\n     pub entries: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(trait_selection::unable_to_construct_constant_value)]\n pub struct UnableToConstructConstantValue<'a> {\n     #[primary_span]\n     pub span: Span,\n     pub unevaluated: Unevaluated<'a>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[help]\n #[diag(trait_selection::auto_deref_reached_recursion_limit, code = \"E0055\")]\n pub struct AutoDerefReachedRecursionLimit<'a> {\n@@ -33,23 +33,23 @@ pub struct AutoDerefReachedRecursionLimit<'a> {\n     pub crate_name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(trait_selection::empty_on_clause_in_rustc_on_unimplemented, code = \"E0232\")]\n pub struct EmptyOnClauseInOnUnimplemented {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(trait_selection::invalid_on_clause_in_rustc_on_unimplemented, code = \"E0232\")]\n pub struct InvalidOnClauseInOnUnimplemented {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(trait_selection::no_value_in_rustc_on_unimplemented, code = \"E0232\")]\n #[note]\n pub struct NoValueInOnUnimplemented {\n@@ -66,7 +66,7 @@ pub struct NegativePositiveConflict<'a> {\n     pub positive_impl_span: Result<Span, Symbol>,\n }\n \n-impl SessionDiagnostic<'_> for NegativePositiveConflict<'_> {\n+impl IntoDiagnostic<'_> for NegativePositiveConflict<'_> {\n     fn into_diagnostic(\n         self,\n         handler: &Handler,"}, {"sha": "995e87bcd3bb9b38bded22bd5caa8979d4e2bdfc", "filename": "compiler/rustc_ty_utils/src/errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -1,16 +1,16 @@\n //! Errors emitted by ty_utils\n \n-use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n+use rustc_macros::{DiagnosticHandler, SessionSubdiagnostic};\n use rustc_middle::ty::Ty;\n use rustc_span::Span;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(ty_utils::needs_drop_overflow)]\n pub struct NeedsDropOverflow<'tcx> {\n     pub query_ty: Ty<'tcx>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(ty_utils::generic_constant_too_complex)]\n #[help]\n pub struct GenericConstantTooComplex {"}, {"sha": "11661b8ef6c51495ccf43c6483ececc6877c3e9b", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -881,7 +881,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return;\n         }\n \n-        // FIXME: Make this use SessionDiagnostic once error codes can be dynamically set.\n+        // FIXME: Make this use DiagnosticHandler once error codes can be dynamically set.\n         let mut err = self.tcx.sess.struct_span_err_with_code(\n             op_span,\n             \"invalid left-hand side of assignment\","}, {"sha": "50d400e2921c679f4f7f8dd424df43e7bb72f2ae", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -1,11 +1,11 @@\n //! Errors emitted by typeck.\n-use rustc_errors::SessionDiagnostic;\n+use rustc_errors::IntoDiagnostic;\n use rustc_errors::{error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed, Handler};\n-use rustc_macros::{LintDiagnostic, SessionDiagnostic, SessionSubdiagnostic};\n+use rustc_macros::{DiagnosticHandler, LintDiagnostic, SessionSubdiagnostic};\n use rustc_middle::ty::Ty;\n use rustc_span::{symbol::Ident, Span, Symbol};\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::field_multiply_specified_in_initializer, code = \"E0062\")]\n pub struct FieldMultiplySpecifiedInInitializer {\n     #[primary_span]\n@@ -16,7 +16,7 @@ pub struct FieldMultiplySpecifiedInInitializer {\n     pub ident: Ident,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::unrecognized_atomic_operation, code = \"E0092\")]\n pub struct UnrecognizedAtomicOperation<'a> {\n     #[primary_span]\n@@ -25,7 +25,7 @@ pub struct UnrecognizedAtomicOperation<'a> {\n     pub op: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::wrong_number_of_generic_arguments_to_intrinsic, code = \"E0094\")]\n pub struct WrongNumberOfGenericArgumentsToIntrinsic<'a> {\n     #[primary_span]\n@@ -36,7 +36,7 @@ pub struct WrongNumberOfGenericArgumentsToIntrinsic<'a> {\n     pub descr: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::unrecognized_intrinsic_function, code = \"E0093\")]\n pub struct UnrecognizedIntrinsicFunction {\n     #[primary_span]\n@@ -45,7 +45,7 @@ pub struct UnrecognizedIntrinsicFunction {\n     pub name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::lifetimes_or_bounds_mismatch_on_trait, code = \"E0195\")]\n pub struct LifetimesOrBoundsMismatchOnTrait {\n     #[primary_span]\n@@ -57,15 +57,15 @@ pub struct LifetimesOrBoundsMismatchOnTrait {\n     pub ident: Ident,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::drop_impl_on_wrong_item, code = \"E0120\")]\n pub struct DropImplOnWrongItem {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::field_already_declared, code = \"E0124\")]\n pub struct FieldAlreadyDeclared {\n     pub field_name: Ident,\n@@ -76,30 +76,30 @@ pub struct FieldAlreadyDeclared {\n     pub prev_span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::copy_impl_on_type_with_dtor, code = \"E0184\")]\n pub struct CopyImplOnTypeWithDtor {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::multiple_relaxed_default_bounds, code = \"E0203\")]\n pub struct MultipleRelaxedDefaultBounds {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::copy_impl_on_non_adt, code = \"E0206\")]\n pub struct CopyImplOnNonAdt {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::trait_object_declared_with_no_traits, code = \"E0224\")]\n pub struct TraitObjectDeclaredWithNoTraits {\n     #[primary_span]\n@@ -108,29 +108,29 @@ pub struct TraitObjectDeclaredWithNoTraits {\n     pub trait_alias_span: Option<Span>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0227\")]\n pub struct AmbiguousLifetimeBound {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::assoc_type_binding_not_allowed, code = \"E0229\")]\n pub struct AssocTypeBindingNotAllowed {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::functional_record_update_on_non_struct, code = \"E0436\")]\n pub struct FunctionalRecordUpdateOnNonStruct {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::typeof_reserved_keyword_used, code = \"E0516\")]\n pub struct TypeofReservedKeywordUsed<'tcx> {\n     pub ty: Ty<'tcx>,\n@@ -141,7 +141,7 @@ pub struct TypeofReservedKeywordUsed<'tcx> {\n     pub opt_sugg: Option<(Span, Applicability)>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::return_stmt_outside_of_fn_body, code = \"E0572\")]\n pub struct ReturnStmtOutsideOfFnBody {\n     #[primary_span]\n@@ -152,29 +152,29 @@ pub struct ReturnStmtOutsideOfFnBody {\n     pub encl_fn_span: Option<Span>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::yield_expr_outside_of_generator, code = \"E0627\")]\n pub struct YieldExprOutsideOfGenerator {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::struct_expr_non_exhaustive, code = \"E0639\")]\n pub struct StructExprNonExhaustive {\n     #[primary_span]\n     pub span: Span,\n     pub what: &'static str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::method_call_on_unknown_type, code = \"E0699\")]\n pub struct MethodCallOnUnknownType {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::value_of_associated_struct_already_specified, code = \"E0719\")]\n pub struct ValueOfAssociatedStructAlreadySpecified {\n     #[primary_span]\n@@ -186,7 +186,7 @@ pub struct ValueOfAssociatedStructAlreadySpecified {\n     pub def_path: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::address_of_temporary_taken, code = \"E0745\")]\n pub struct AddressOfTemporaryTaken {\n     #[primary_span]\n@@ -232,7 +232,7 @@ pub enum ExpectedReturnTypeLabel<'tcx> {\n     },\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::unconstrained_opaque_type)]\n #[note]\n pub struct UnconstrainedOpaqueType {\n@@ -249,8 +249,8 @@ pub struct MissingTypeParams {\n     pub empty_generic_args: bool,\n }\n \n-// Manual implementation of `SessionDiagnostic` to be able to call `span_to_snippet`.\n-impl<'a> SessionDiagnostic<'a> for MissingTypeParams {\n+// Manual implementation of `DiagnosticHandler` to be able to call `span_to_snippet`.\n+impl<'a> IntoDiagnostic<'a> for MissingTypeParams {\n     fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let mut err = handler.struct_span_err_with_code(\n             self.span,\n@@ -306,7 +306,7 @@ impl<'a> SessionDiagnostic<'a> for MissingTypeParams {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::manual_implementation, code = \"E0183\")]\n #[help]\n pub struct ManualImplementation {\n@@ -316,7 +316,7 @@ pub struct ManualImplementation {\n     pub trait_name: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::substs_on_overridden_impl)]\n pub struct SubstsOnOverriddenImpl {\n     #[primary_span]\n@@ -339,7 +339,7 @@ pub struct ExternCrateNotIdiomatic {\n     pub suggestion_code: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::expected_used_symbol)]\n pub struct ExpectedUsedSymbol {\n     #[primary_span]"}, {"sha": "1ead987ec419952b6326c04bb6f815d45f6b4606", "filename": "src/test/ui-fulldeps/internal-lints/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -12,12 +12,13 @@ extern crate rustc_session;\n extern crate rustc_span;\n \n use rustc_errors::{\n-    AddSubdiagnostic, SessionDiagnostic, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, Handler, fluent\n+    AddSubdiagnostic, IntoDiagnostic, Diagnostic, DiagnosticBuilder,\n+    ErrorGuaranteed, Handler, fluent\n };\n-use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n+use rustc_macros::{DiagnosticHandler, SessionSubdiagnostic};\n use rustc_span::Span;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(parser::expect_path)]\n struct DeriveSessionDiagnostic {\n     #[primary_span]\n@@ -33,7 +34,7 @@ struct Note {\n \n pub struct UntranslatableInSessionDiagnostic;\n \n-impl<'a> SessionDiagnostic<'a, ErrorGuaranteed> for UntranslatableInSessionDiagnostic {\n+impl<'a> IntoDiagnostic<'a, ErrorGuaranteed> for UntranslatableInSessionDiagnostic {\n     fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         handler.struct_err(\"untranslatable diagnostic\")\n         //~^ ERROR diagnostics should be created using translatable messages\n@@ -42,7 +43,7 @@ impl<'a> SessionDiagnostic<'a, ErrorGuaranteed> for UntranslatableInSessionDiagn\n \n pub struct TranslatableInSessionDiagnostic;\n \n-impl<'a> SessionDiagnostic<'a, ErrorGuaranteed> for TranslatableInSessionDiagnostic {\n+impl<'a> IntoDiagnostic<'a, ErrorGuaranteed> for TranslatableInSessionDiagnostic {\n     fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         handler.struct_err(fluent::parser::expect_path)\n     }\n@@ -67,10 +68,10 @@ impl AddSubdiagnostic for TranslatableInAddSubdiagnostic {\n \n pub fn make_diagnostics<'a>(handler: &'a Handler) {\n     let _diag = handler.struct_err(fluent::parser::expect_path);\n-    //~^ ERROR diagnostics should only be created in `SessionDiagnostic`/`AddSubdiagnostic` impls\n+    //~^ ERROR diagnostics should only be created in `IntoDiagnostic`/`AddSubdiagnostic` impls\n \n     let _diag = handler.struct_err(\"untranslatable diagnostic\");\n-    //~^ ERROR diagnostics should only be created in `SessionDiagnostic`/`AddSubdiagnostic` impls\n+    //~^ ERROR diagnostics should only be created in `IntoDiagnostic`/`AddSubdiagnostic` impls\n     //~^^ ERROR diagnostics should be created using translatable messages\n }\n "}, {"sha": "d5833cf3970557959497c545acf738279d2b738b", "filename": "src/test/ui-fulldeps/internal-lints/diagnostics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.stderr?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -16,7 +16,7 @@ error: diagnostics should be created using translatable messages\n LL |         diag.note(\"untranslatable diagnostic\");\n    |              ^^^^\n \n-error: diagnostics should only be created in `SessionDiagnostic`/`AddSubdiagnostic` impls\n+error: diagnostics should only be created in `IntoDiagnostic`/`AddSubdiagnostic` impls\n   --> $DIR/diagnostics.rs:70:25\n    |\n LL |     let _diag = handler.struct_err(fluent::parser::expect_path);\n@@ -28,7 +28,7 @@ note: the lint level is defined here\n LL | #![deny(rustc::diagnostic_outside_of_impl)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: diagnostics should only be created in `SessionDiagnostic`/`AddSubdiagnostic` impls\n+error: diagnostics should only be created in `IntoDiagnostic`/`AddSubdiagnostic` impls\n   --> $DIR/diagnostics.rs:73:25\n    |\n LL |     let _diag = handler.struct_err(\"untranslatable diagnostic\");"}, {"sha": "32ba5be89632520d458c016c2ce8e5809252be92", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 77, "deletions": 77, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -1,10 +1,10 @@\n // check-fail\n-// Tests error conditions for specifying diagnostics using #[derive(SessionDiagnostic)]\n+// Tests error conditions for specifying diagnostics using #[derive(DiagnosticHandler)]\n \n // normalize-stderr-test \"the following other types implement trait `IntoDiagnosticArg`:(?:.*\\n){0,9}\\s+and \\d+ others\" -> \"normalized in stderr\"\n // normalize-stderr-test \"diagnostic_builder\\.rs:[0-9]+:[0-9]+\" -> \"diagnostic_builder.rs:LL:CC\"\n // The proc_macro2 crate handles spans differently when on beta/stable release rather than nightly,\n-// changing the output of this test. Since SessionDiagnostic is strictly internal to the compiler\n+// changing the output of this test. Since DiagnosticHandler is strictly internal to the compiler\n // the test is just ignored on stable and beta:\n // ignore-beta\n // ignore-stable\n@@ -17,7 +17,7 @@ use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n extern crate rustc_macros;\n-use rustc_macros::{SessionDiagnostic, LintDiagnostic, SessionSubdiagnostic};\n+use rustc_macros::{DiagnosticHandler, LintDiagnostic, SessionSubdiagnostic};\n \n extern crate rustc_middle;\n use rustc_middle::ty::Ty;\n@@ -27,115 +27,115 @@ use rustc_errors::{Applicability, MultiSpan};\n \n extern crate rustc_session;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct Hello {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct HelloWarn {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n-//~^ ERROR `#[derive(SessionDiagnostic)]` can only be used on structs\n-enum SessionDiagnosticOnEnum {\n+//~^ ERROR `#[derive(DiagnosticHandler)]` can only be used on structs\n+enum DiagnosticHandlerOnEnum {\n     Foo,\n     Bar,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n #[diag = \"E0123\"]\n //~^ ERROR `#[diag = ...]` is not a valid attribute\n struct WrongStructAttrStyle {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[nonsense(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n //~^ ERROR `#[nonsense(...)]` is not a valid attribute\n //~^^ ERROR diagnostic slug not specified\n //~^^^ ERROR cannot find attribute `nonsense` in this scope\n struct InvalidStructAttr {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(\"E0123\")]\n //~^ ERROR `#[diag(\"...\")]` is not a valid attribute\n //~^^ ERROR diagnostic slug not specified\n struct InvalidLitNestedAttr {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(nonsense, code = \"E0123\")]\n //~^ ERROR cannot find value `nonsense` in module `rustc_errors::fluent`\n struct InvalidNestedStructAttr {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(nonsense(\"foo\"), code = \"E0123\", slug = \"foo\")]\n //~^ ERROR `#[diag(nonsense(...))]` is not a valid attribute\n //~^^ ERROR diagnostic slug not specified\n struct InvalidNestedStructAttr1 {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(nonsense = \"...\", code = \"E0123\", slug = \"foo\")]\n //~^ ERROR `#[diag(nonsense = ...)]` is not a valid attribute\n //~^^ ERROR diagnostic slug not specified\n struct InvalidNestedStructAttr2 {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(nonsense = 4, code = \"E0123\", slug = \"foo\")]\n //~^ ERROR `#[diag(nonsense = ...)]` is not a valid attribute\n //~^^ ERROR diagnostic slug not specified\n struct InvalidNestedStructAttr3 {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\", slug = \"foo\")]\n //~^ ERROR `#[diag(slug = ...)]` is not a valid attribute\n struct InvalidNestedStructAttr4 {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct WrongPlaceField {\n     #[suggestion = \"bar\"]\n     //~^ ERROR `#[suggestion = ...]` is not a valid attribute\n     sp: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n //~^ ERROR specified multiple times\n //~^^ ERROR specified multiple times\n struct DiagSpecifiedTwice {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0456\", code = \"E0457\")]\n //~^ ERROR specified multiple times\n struct CodeSpecifiedTwice {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n //~^ ERROR `#[diag(typeck::ambiguous_lifetime_bound)]` is not a valid attribute\n struct SlugSpecifiedTwice {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n struct KindNotProvided {} //~ ERROR diagnostic slug not specified\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(code = \"E0456\")]\n //~^ ERROR diagnostic slug not specified\n struct SlugNotProvided {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound)]\n struct CodeNotProvided {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct MessageWrongType {\n     #[primary_span]\n     //~^ ERROR `#[primary_span]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n     foo: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct InvalidPathFieldAttr {\n     #[nonsense]\n@@ -144,31 +144,31 @@ struct InvalidPathFieldAttr {\n     foo: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithField {\n     name: String,\n     #[label(typeck::label)]\n     span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithMessageAppliedToField {\n     #[label(typeck::label)]\n     //~^ ERROR the `#[label(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n     name: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithNonexistentField {\n     #[suggestion(typeck::suggestion, code = \"{name}\")]\n     //~^ ERROR `name` doesn't refer to a field on this type\n     suggestion: (Span, Applicability),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n //~^ ERROR invalid format string: expected `'}'`\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorMissingClosingBrace {\n@@ -178,7 +178,7 @@ struct ErrorMissingClosingBrace {\n     val: usize,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n //~^ ERROR invalid format string: unmatched `}`\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorMissingOpeningBrace {\n@@ -188,22 +188,22 @@ struct ErrorMissingOpeningBrace {\n     val: usize,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct LabelOnSpan {\n     #[label(typeck::label)]\n     sp: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct LabelOnNonSpan {\n     #[label(typeck::label)]\n     //~^ ERROR the `#[label(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n     id: u32,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct Suggest {\n     #[suggestion(typeck::suggestion, code = \"This is the suggested code\")]\n@@ -213,83 +213,83 @@ struct Suggest {\n     suggestion: (Span, Applicability),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithoutCode {\n     #[suggestion(typeck::suggestion)]\n     suggestion: (Span, Applicability),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithBadKey {\n     #[suggestion(nonsense = \"bar\")]\n     //~^ ERROR `#[suggestion(nonsense = ...)]` is not a valid attribute\n     suggestion: (Span, Applicability),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithShorthandMsg {\n     #[suggestion(msg = \"bar\")]\n     //~^ ERROR `#[suggestion(msg = ...)]` is not a valid attribute\n     suggestion: (Span, Applicability),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithoutMsg {\n     #[suggestion(code = \"bar\")]\n     suggestion: (Span, Applicability),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithTypesSwapped {\n     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n     suggestion: (Applicability, Span),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithWrongTypeApplicabilityOnly {\n     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n     //~^ ERROR wrong field type for suggestion\n     suggestion: Applicability,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithSpanOnly {\n     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n     suggestion: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithDuplicateSpanAndApplicability {\n     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n     //~^ ERROR type of field annotated with `#[suggestion(...)]` contains more than one `Span`\n     suggestion: (Span, Span, Applicability),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithDuplicateApplicabilityAndSpan {\n     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n     //~^ ERROR type of field annotated with `#[suggestion(...)]` contains more than one\n     suggestion: (Applicability, Applicability, Span),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct WrongKindOfAnnotation {\n     #[label = \"bar\"]\n     //~^ ERROR `#[label = ...]` is not a valid attribute\n     z: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct OptionsInErrors {\n     #[label(typeck::label)]\n@@ -298,7 +298,7 @@ struct OptionsInErrors {\n     opt_sugg: Option<(Span, Applicability)>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n struct MoveOutOfBorrowError<'tcx> {\n     name: Ident,\n@@ -312,23 +312,23 @@ struct MoveOutOfBorrowError<'tcx> {\n     opt_sugg: Option<(Span, Applicability)>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithLifetime<'a> {\n     #[label(typeck::label)]\n     span: Span,\n     name: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithDefaultLabelAttr<'a> {\n     #[label]\n     span: Span,\n     name: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n //~^ ERROR the trait bound `Hello: IntoDiagnosticArg` is not satisfied\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ArgFieldWithoutSkip {\n@@ -337,7 +337,7 @@ struct ArgFieldWithoutSkip {\n     other: Hello,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ArgFieldWithSkip {\n     #[primary_span]\n@@ -348,114 +348,114 @@ struct ArgFieldWithSkip {\n     other: Hello,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithSpannedNote {\n     #[note]\n     span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithSpannedNoteCustom {\n     #[note(typeck::note)]\n     span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n #[note]\n struct ErrorWithNote {\n     val: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n #[note(typeck::note)]\n struct ErrorWithNoteCustom {\n     val: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithSpannedHelp {\n     #[help]\n     span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithSpannedHelpCustom {\n     #[help(typeck::help)]\n     span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n #[help]\n struct ErrorWithHelp {\n     val: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n #[help(typeck::help)]\n struct ErrorWithHelpCustom {\n     val: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[help]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithHelpWrongOrder {\n     val: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[help(typeck::help)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithHelpCustomWrongOrder {\n     val: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[note]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithNoteWrongOrder {\n     val: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[note(typeck::note)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithNoteCustomWrongOrder {\n     val: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ApplicabilityInBoth {\n     #[suggestion(typeck::suggestion, code = \"...\", applicability = \"maybe-incorrect\")]\n     //~^ ERROR applicability cannot be set in both the field and attribute\n     suggestion: (Span, Applicability),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct InvalidApplicability {\n     #[suggestion(typeck::suggestion, code = \"...\", applicability = \"batman\")]\n     //~^ ERROR invalid applicability\n     suggestion: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ValidApplicability {\n     #[suggestion(typeck::suggestion, code = \"...\", applicability = \"maybe-incorrect\")]\n     suggestion: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct NoApplicability {\n     #[suggestion(typeck::suggestion, code = \"...\")]\n@@ -466,22 +466,22 @@ struct NoApplicability {\n #[note(parser::add_paren)]\n struct Note;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound)]\n struct Subdiagnostic {\n     #[subdiagnostic]\n     note: Note,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct VecField {\n     #[primary_span]\n     #[label]\n     spans: Vec<Span>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct UnitField {\n     #[primary_span]\n@@ -492,7 +492,7 @@ struct UnitField {\n     bar: (),\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct OptUnitField {\n     #[primary_span]\n@@ -503,23 +503,23 @@ struct OptUnitField {\n     bar: Option<()>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct LabelWithTrailingPath {\n     #[label(typeck::label, foo)]\n     //~^ ERROR `#[label(...)]` is not a valid attribute\n     span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct LabelWithTrailingNameValue {\n     #[label(typeck::label, foo = \"...\")]\n     //~^ ERROR `#[label(...)]` is not a valid attribute\n     span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct LabelWithTrailingList {\n     #[label(typeck::label, foo(\"...\"))]\n@@ -540,35 +540,35 @@ struct PrimarySpanOnLint {\n     span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ErrorWithMultiSpan {\n     #[primary_span]\n     span: MultiSpan,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n #[warning]\n struct ErrorWithWarn {\n     val: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n //~^ ERROR `#[error(...)]` is not a valid attribute\n //~| ERROR diagnostic slug not specified\n //~| ERROR cannot find attribute `error` in this scope\n struct ErrorAttribute {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[warn_(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n //~^ ERROR `#[warn_(...)]` is not a valid attribute\n //~| ERROR diagnostic slug not specified\n //~| ERROR cannot find attribute `warn_` in this scope\n struct WarnAttribute {}\n \n-#[derive(SessionDiagnostic)]\n+#[derive(DiagnosticHandler)]\n #[lint(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n //~^ ERROR `#[lint(...)]` is not a valid attribute\n //~| ERROR diagnostic slug not specified"}, {"sha": "d9198d4ef806a9c428417527c78e9d08ca109f10", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19b348fed44342d8addbbb5e8f67cda5dc8d9b95/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=19b348fed44342d8addbbb5e8f67cda5dc8d9b95", "patch": "@@ -1,9 +1,9 @@\n-error: `#[derive(SessionDiagnostic)]` can only be used on structs\n+error: `#[derive(DiagnosticHandler)]` can only be used on structs\n   --> $DIR/diagnostic-derive.rs:39:1\n    |\n LL | / #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n LL | |\n-LL | | enum SessionDiagnosticOnEnum {\n+LL | | enum DiagnosticHandlerOnEnum {\n LL | |     Foo,\n LL | |     Bar,\n LL | | }\n@@ -214,22 +214,22 @@ LL |     #[suggestion(typeck::suggestion, code = \"{name}\")]\n error: invalid format string: expected `'}'` but string was terminated\n   --> $DIR/diagnostic-derive.rs:171:16\n    |\n-LL | #[derive(SessionDiagnostic)]\n+LL | #[derive(DiagnosticHandler)]\n    |           -    ^ expected `'}'` in format string\n    |           |\n    |           because of this opening brace\n    |\n    = note: if you intended to print `{`, you can escape it using `{{`\n-   = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `DiagnosticHandler` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: invalid format string: unmatched `}` found\n   --> $DIR/diagnostic-derive.rs:181:15\n    |\n-LL | #[derive(SessionDiagnostic)]\n+LL | #[derive(DiagnosticHandler)]\n    |               ^ unmatched `}` in format string\n    |\n    = note: if you intended to print `}`, you can escape it using `}}`\n-   = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `DiagnosticHandler` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: the `#[label(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n   --> $DIR/diagnostic-derive.rs:201:5\n@@ -448,7 +448,7 @@ LL | #[diag(nonsense, code = \"E0123\")]\n error[E0277]: the trait bound `Hello: IntoDiagnosticArg` is not satisfied\n   --> $DIR/diagnostic-derive.rs:331:10\n    |\n-LL | #[derive(SessionDiagnostic)]\n+LL | #[derive(DiagnosticHandler)]\n    |          ^^^^^^^^^^^^^^^^^ the trait `IntoDiagnosticArg` is not implemented for `Hello`\n    |\n    = help: normalized in stderr\n@@ -457,7 +457,7 @@ note: required by a bound in `DiagnosticBuilder::<'a, G>::set_arg`\n    |\n LL |         arg: impl IntoDiagnosticArg,\n    |                   ^^^^^^^^^^^^^^^^^ required by this bound in `DiagnosticBuilder::<'a, G>::set_arg`\n-   = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `DiagnosticHandler` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 55 previous errors\n "}]}