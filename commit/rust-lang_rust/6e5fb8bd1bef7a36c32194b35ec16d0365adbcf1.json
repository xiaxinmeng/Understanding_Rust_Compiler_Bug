{"sha": "6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlNWZiOGJkMWJlZjdhMzZjMzIxOTRiMzVlYzE2ZDAzNjVhZGJjZjE=", "commit": {"author": {"name": "Akos Kiss", "email": "akiss@inf.u-szeged.hu", "date": "2014-12-12T23:39:27Z"}, "committer": {"name": "Akos Kiss", "email": "akiss@inf.u-szeged.hu", "date": "2015-01-03T15:16:10Z"}, "message": "Initial version of AArch64 support.\n\nAdds AArch64 knowledge to:\n* configure,\n* make files,\n* sources,\n* tests, and\n* documentation.", "tree": {"sha": "b6bbb41f6e5b897a93ffb89d1603ab7c16096cf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6bbb41f6e5b897a93ffb89d1603ab7c16096cf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "comment_count": 7, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "html_url": "https://github.com/rust-lang/rust/commit/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/comments", "author": {"login": "akosthekiss", "id": 9976482, "node_id": "MDQ6VXNlcjk5NzY0ODI=", "avatar_url": "https://avatars.githubusercontent.com/u/9976482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akosthekiss", "html_url": "https://github.com/akosthekiss", "followers_url": "https://api.github.com/users/akosthekiss/followers", "following_url": "https://api.github.com/users/akosthekiss/following{/other_user}", "gists_url": "https://api.github.com/users/akosthekiss/gists{/gist_id}", "starred_url": "https://api.github.com/users/akosthekiss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akosthekiss/subscriptions", "organizations_url": "https://api.github.com/users/akosthekiss/orgs", "repos_url": "https://api.github.com/users/akosthekiss/repos", "events_url": "https://api.github.com/users/akosthekiss/events{/privacy}", "received_events_url": "https://api.github.com/users/akosthekiss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "akosthekiss", "id": 9976482, "node_id": "MDQ6VXNlcjk5NzY0ODI=", "avatar_url": "https://avatars.githubusercontent.com/u/9976482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akosthekiss", "html_url": "https://github.com/akosthekiss", "followers_url": "https://api.github.com/users/akosthekiss/followers", "following_url": "https://api.github.com/users/akosthekiss/following{/other_user}", "gists_url": "https://api.github.com/users/akosthekiss/gists{/gist_id}", "starred_url": "https://api.github.com/users/akosthekiss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akosthekiss/subscriptions", "organizations_url": "https://api.github.com/users/akosthekiss/orgs", "repos_url": "https://api.github.com/users/akosthekiss/repos", "events_url": "https://api.github.com/users/akosthekiss/events{/privacy}", "received_events_url": "https://api.github.com/users/akosthekiss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc2ba13939aa9672d886beb06efde7aeda2d5f7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc2ba13939aa9672d886beb06efde7aeda2d5f7f", "html_url": "https://github.com/rust-lang/rust/commit/fc2ba13939aa9672d886beb06efde7aeda2d5f7f"}], "stats": {"total": 598, "additions": 509, "deletions": 89}, "files": [{"sha": "ea9320c901b6df97daa2ba947aa1fb58da5ed604", "filename": "configure", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/configure", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -444,6 +444,10 @@ case $CFG_CPUTYPE in\n         CFG_OSTYPE=\"${CFG_OSTYPE}eabihf\"\n         ;;\n \n+    aarch64)\n+        CFG_CPUTYPE=aarch64\n+        ;;\n+\n     x86_64 | x86-64 | x64 | amd64)\n         CFG_CPUTYPE=x86_64\n         ;;\n@@ -988,7 +992,7 @@ do\n     make_dir $t/rt/jemalloc\n     for i in                                          \\\n       isaac sync test \\\n-      arch/i386 arch/x86_64 arch/arm arch/mips\n+      arch/i386 arch/x86_64 arch/arm arch/aarch64 arch/mips\n     do\n       make_dir $t/rt/stage$s/$i\n     done\n@@ -1165,7 +1169,7 @@ do\n \n         msg \"configuring LLVM for $gnu_t\"\n \n-        LLVM_TARGETS=\"--enable-targets=x86,x86_64,arm,mips\"\n+        LLVM_TARGETS=\"--enable-targets=x86,x86_64,arm,aarch64,mips\"\n         LLVM_BUILD=\"--build=$gnu_t\"\n         LLVM_HOST=\"--host=$gnu_t\"\n         LLVM_TARGET=\"--target=$gnu_t\""}, {"sha": "fade026654960e764ecfb3fcceec880e197c7d52", "filename": "mk/cfg/aarch64-unknown-linux-gnu.mk", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/mk%2Fcfg%2Faarch64-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/mk%2Fcfg%2Faarch64-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Faarch64-unknown-linux-gnu.mk?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -0,0 +1,30 @@\n+# aarch64-unknown-linux-gnu configuration\n+CROSS_PREFIX_aarch64-unknown-linux-gnu=aarch64-linux-gnu-\n+CC_aarch64-unknown-linux-gnu=gcc\n+CXX_aarch64-unknown-linux-gnu=g++\n+CPP_aarch64-unknown-linux-gnu=gcc -E\n+AR_aarch64-unknown-linux-gnu=ar\n+CFG_LIB_NAME_aarch64-unknown-linux-gnu=lib$(1).so\n+CFG_STATIC_LIB_NAME_aarch64-unknown-linux-gnu=lib$(1).a\n+CFG_LIB_GLOB_aarch64-unknown-linux-gnu=lib$(1)-*.so\n+CFG_LIB_DSYM_GLOB_aarch64-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n+CFG_JEMALLOC_CFLAGS_aarch64-unknown-linux-gnu := -D__aarch64__ $(CFLAGS)\n+CFG_GCCISH_CFLAGS_aarch64-unknown-linux-gnu := -Wall -g -fPIC -D__aarch64__ $(CFLAGS)\n+CFG_GCCISH_CXXFLAGS_aarch64-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n+CFG_GCCISH_LINK_FLAGS_aarch64-unknown-linux-gnu := -shared -fPIC -g\n+CFG_GCCISH_DEF_FLAG_aarch64-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n+CFG_GCCISH_PRE_LIB_FLAGS_aarch64-unknown-linux-gnu := -Wl,-whole-archive\n+CFG_GCCISH_POST_LIB_FLAGS_aarch64-unknown-linux-gnu := -Wl,-no-whole-archive\n+CFG_DEF_SUFFIX_aarch64-unknown-linux-gnu := .linux.def\n+CFG_LLC_FLAGS_aarch64-unknown-linux-gnu :=\n+CFG_INSTALL_NAME_aarch64-unknown-linux-gnu =\n+CFG_EXE_SUFFIX_aarch64-unknown-linux-gnu :=\n+CFG_WINDOWSY_aarch64-unknown-linux-gnu :=\n+CFG_UNIXY_aarch64-unknown-linux-gnu := 1\n+CFG_PATH_MUNGE_aarch64-unknown-linux-gnu := true\n+CFG_LDPATH_aarch64-unknown-linux-gnu :=\n+CFG_RUN_aarch64-unknown-linux-gnu=$(2)\n+CFG_RUN_TARG_aarch64-unknown-linux-gnu=$(call CFG_RUN_aarch64-unknown-linux-gnu,,$(2))\n+RUSTC_FLAGS_aarch64-unknown-linux-gnu :=\n+RUSTC_CROSS_FLAGS_aarch64-unknown-linux-gnu :=\n+CFG_GNU_TRIPLE_aarch64-unknown-linux-gnu := aarch64-unknown-linux-gnu"}, {"sha": "0d9419cccfa83e0299d1c19079ef1114d98990f9", "filename": "mk/main.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+# Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n # file at the top-level directory of this distribution and at\n # http://rust-lang.org/COPYRIGHT.\n #\n@@ -261,7 +261,7 @@ endif\n ######################################################################\n \n # FIXME: x86-ism\n-LLVM_COMPONENTS=x86 arm mips ipo bitreader bitwriter linker asmparser mcjit \\\n+LLVM_COMPONENTS=x86 arm aarch64 mips ipo bitreader bitwriter linker asmparser mcjit \\\n                 interpreter instrumentation\n \n # Only build these LLVM tools"}, {"sha": "50bf51b20de18f4bfb87d66c43ed00d3744366b1", "filename": "mk/platform.mk", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-# Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+# Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n # file at the top-level directory of this distribution and at\n # http://rust-lang.org/COPYRIGHT.\n #\n@@ -177,7 +177,7 @@ define CFG_MAKE_TOOLCHAIN\n         $$(CFG_GCCISH_DEF_FLAG_$(1))$$(3) $$(2) \\\n         $$(call CFG_INSTALL_NAME_$(1),$$(4))\n \n-  ifeq ($$(findstring $(HOST_$(1)),arm mips mipsel),)\n+  ifeq ($$(findstring $(HOST_$(1)),arm aarch64 mips mipsel),)\n \n   # We're using llvm-mc as our assembler because it supports\n   # .cfi pseudo-ops on mac\n@@ -189,7 +189,7 @@ define CFG_MAKE_TOOLCHAIN\n                     -o=$$(1)\n   else\n \n-  # For the ARM and MIPS crosses, use the toolchain assembler\n+  # For the ARM, AARCH64 and MIPS crosses, use the toolchain assembler\n   # FIXME: We should be able to use the LLVM assembler\n   CFG_ASSEMBLE_$(1)=$$(CC_$(1)) $$(CFG_GCCISH_CFLAGS_$(1)) \\\n \t\t    $$(CFG_DEPEND_FLAGS) $$(2) -c -o $$(1)"}, {"sha": "8c2c5ab7b8580c2e96d2372c2156a51559133f15", "filename": "src/doc/reference.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -2141,7 +2141,7 @@ arbitrarily complex configurations through nesting.\n The following configurations must be defined by the implementation:\n \n * `target_arch = \"...\"`. Target CPU architecture, such as `\"x86\"`, `\"x86_64\"`\n-  `\"mips\"`, or `\"arm\"`.\n+  `\"mips\"`, `\"arm\"`, or `\"aarch64\"`.\n * `target_endian = \"...\"`. Endianness of the target CPU, either `\"little\"` or\n   `\"big\"`.\n * `target_family = \"...\"`. Operating system family of the target, e. g."}, {"sha": "c57435cdc8c0c6e9d9a12cc02d7971d8130a9ac6", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -120,7 +120,8 @@ unsafe fn exchange_free(ptr: *mut u8, old_size: uint, align: uint) {\n           target_arch = \"mipsel\"))]\n const MIN_ALIGN: uint = 8;\n #[cfg(any(target_arch = \"x86\",\n-          target_arch = \"x86_64\"))]\n+          target_arch = \"x86_64\",\n+          target_arch = \"aarch64\"))]\n const MIN_ALIGN: uint = 16;\n \n #[cfg(external_funcs)]"}, {"sha": "020f0f6de9bab731809d2bf9c6733a5d04a5251d", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -419,6 +419,12 @@ mod tests {\n         }\n     }\n \n+    #[test] #[cfg(target_arch = \"aarch64\")]\n+    fn test_hash_uint() {\n+        let val = 0xdeadbeef_deadbeef_u64;\n+        assert_eq!(hash(&(val as u64)), hash(&(val as uint)));\n+        assert!(hash(&(val as u32)) != hash(&(val as uint)));\n+    }\n     #[test] #[cfg(target_arch = \"arm\")]\n     fn test_hash_uint() {\n         let val = 0xdeadbeef_deadbeef_u64;"}, {"sha": "96b50e8bccbad0c62c067522ee8a93a68ff781b9", "filename": "src/libcoretest/mem.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibcoretest%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibcoretest%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fmem.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -29,7 +29,8 @@ fn size_of_32() {\n }\n \n #[test]\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(any(target_arch = \"x86_64\",\n+          target_arch = \"aarch64\"))]\n fn size_of_64() {\n     assert_eq!(size_of::<uint>(), 8u);\n     assert_eq!(size_of::<*const uint>(), 8u);\n@@ -61,7 +62,8 @@ fn align_of_32() {\n }\n \n #[test]\n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(any(target_arch = \"x86_64\",\n+          target_arch = \"aarch64\"))]\n fn align_of_64() {\n     assert_eq!(align_of::<uint>(), 8u);\n     assert_eq!(align_of::<*const uint>(), 8u);"}, {"sha": "ac0bab67b406f63af3007d7d4f76b285ee2ca853", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 64, "deletions": 5, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -720,10 +720,14 @@ pub mod types {\n \n         }\n \n-        #[cfg(target_arch = \"x86_64\")]\n+        #[cfg(any(target_arch = \"x86_64\",\n+                  target_arch = \"aarch64\"))]\n         pub mod arch {\n             pub mod c95 {\n+                #[cfg(not(target_arch = \"aarch64\"))]\n                 pub type c_char = i8;\n+                #[cfg(target_arch = \"aarch64\")]\n+                pub type c_char = u8;\n                 pub type c_schar = i8;\n                 pub type c_uchar = u8;\n                 pub type c_short = i16;\n@@ -739,7 +743,10 @@ pub mod types {\n                 pub type clock_t = i64;\n                 pub type time_t = i64;\n                 pub type suseconds_t = i64;\n+                #[cfg(not(target_arch = \"aarch64\"))]\n                 pub type wchar_t = i32;\n+                #[cfg(target_arch = \"aarch64\")]\n+                pub type wchar_t = u32;\n             }\n             pub mod c99 {\n                 pub type c_longlong = i64;\n@@ -760,6 +767,7 @@ pub mod types {\n                 pub type mode_t = u32;\n                 pub type ssize_t = i64;\n             }\n+            #[cfg(not(target_arch = \"aarch64\"))]\n             pub mod posix01 {\n                 use types::os::arch::c95::{c_int, c_long, time_t};\n                 use types::os::arch::posix88::{dev_t, gid_t, ino_t};\n@@ -769,6 +777,7 @@ pub mod types {\n                 pub type nlink_t = u64;\n                 pub type blksize_t = i64;\n                 pub type blkcnt_t = i64;\n+\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct stat {\n                     pub st_dev: dev_t,\n@@ -802,6 +811,51 @@ pub mod types {\n                     pub __size: [u64; 7]\n                 }\n             }\n+            #[cfg(target_arch = \"aarch64\")]\n+            pub mod posix01 {\n+                use types::os::arch::c95::{c_int, c_long, time_t};\n+                use types::os::arch::posix88::{dev_t, gid_t, ino_t};\n+                use types::os::arch::posix88::{mode_t, off_t};\n+                use types::os::arch::posix88::{uid_t};\n+\n+                pub type nlink_t = u32;\n+                pub type blksize_t = i32;\n+                pub type blkcnt_t = i64;\n+\n+                #[repr(C)]\n+                #[deriving(Copy)] pub struct stat {\n+                    pub st_dev: dev_t,\n+                    pub st_ino: ino_t,\n+                    pub st_mode: mode_t,\n+                    pub st_nlink: nlink_t,\n+                    pub st_uid: uid_t,\n+                    pub st_gid: gid_t,\n+                    pub st_rdev: dev_t,\n+                    pub __pad1: dev_t,\n+                    pub st_size: off_t,\n+                    pub st_blksize: blksize_t,\n+                    pub __pad2: c_int,\n+                    pub st_blocks: blkcnt_t,\n+                    pub st_atime: time_t,\n+                    pub st_atime_nsec: c_long,\n+                    pub st_mtime: time_t,\n+                    pub st_mtime_nsec: c_long,\n+                    pub st_ctime: time_t,\n+                    pub st_ctime_nsec: c_long,\n+                    pub __unused: [c_int; 2],\n+                }\n+\n+                #[repr(C)]\n+                #[deriving(Copy)] pub struct utimbuf {\n+                    pub actime: time_t,\n+                    pub modtime: time_t,\n+                }\n+\n+                #[repr(C)]\n+                #[deriving(Copy)] pub struct pthread_attr_t {\n+                    pub __size: [u64; 8]\n+                }\n+            }\n             pub mod posix08 {\n             }\n             pub mod bsd44 {\n@@ -2444,7 +2498,8 @@ pub mod consts {\n         }\n         #[cfg(any(target_arch = \"x86\",\n                   target_arch = \"x86_64\",\n-                  target_arch = \"arm\"))]\n+                  target_arch = \"arm\",\n+                  target_arch = \"aarch64\"))]\n         pub mod posix88 {\n             use types::os::arch::c95::c_int;\n             use types::common::c95::c_void;\n@@ -2939,7 +2994,9 @@ pub mod consts {\n             pub const PTHREAD_STACK_MIN: size_t = 16384;\n \n             #[cfg(all(target_os = \"linux\",\n-                      any(target_arch = \"mips\", target_arch = \"mipsel\")))]\n+                      any(target_arch = \"mips\",\n+                          target_arch = \"mipsel\",\n+                          target_arch = \"aarch64\")))]\n             pub const PTHREAD_STACK_MIN: size_t = 131072;\n \n             pub const CLOCK_REALTIME: c_int = 0;\n@@ -2948,6 +3005,7 @@ pub mod consts {\n         pub mod posix08 {\n         }\n         #[cfg(any(target_arch = \"arm\",\n+                  target_arch = \"aarch64\",\n                   target_arch = \"x86\",\n                   target_arch = \"x86_64\"))]\n         pub mod bsd44 {\n@@ -3043,7 +3101,8 @@ pub mod consts {\n         }\n         #[cfg(any(target_arch = \"x86\",\n                   target_arch = \"x86_64\",\n-                  target_arch = \"arm\"))]\n+                  target_arch = \"arm\",\n+                  target_arch = \"aarch64\"))]\n         pub mod extra {\n             use types::os::arch::c95::c_int;\n "}, {"sha": "296552a6abd90c3bb5409a1b7e40e2a4d5c5be78", "filename": "src/librustc_back/target/aarch64_unknown_linux_gnu.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::Target;\n+\n+pub fn target() -> Target {\n+    let base = super::linux_base::opts();\n+    Target {\n+        data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n+                      f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n+                      n32:64-S128\".to_string(),\n+        llvm_target: \"aarch64-unknown-linux-gnu\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_word_size: \"64\".to_string(),\n+        arch: \"aarch64\".to_string(),\n+        target_os: \"linux\".to_string(),\n+        options: base,\n+    }\n+}"}, {"sha": "b7b74fe2314f2edc3c29569794681b728d65e89d", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -60,6 +60,7 @@ mod arm_apple_ios;\n mod arm_linux_androideabi;\n mod arm_unknown_linux_gnueabi;\n mod arm_unknown_linux_gnueabihf;\n+mod aarch64_unknown_linux_gnu;\n mod i686_apple_darwin;\n mod i386_apple_ios;\n mod i686_pc_windows_gnu;\n@@ -88,8 +89,8 @@ pub struct Target {\n     pub target_word_size: String,\n     /// OS name to use for conditional compilation.\n     pub target_os: String,\n-    /// Architecture to use for ABI considerations. Valid options: \"x86\", \"x86_64\", \"arm\", and\n-    /// \"mips\". \"mips\" includes \"mipsel\".\n+    /// Architecture to use for ABI considerations. Valid options: \"x86\", \"x86_64\", \"arm\",\n+    /// \"aarch64\", and \"mips\". \"mips\" includes \"mipsel\".\n     pub arch: String,\n     /// Optional settings with defaults.\n     pub options: TargetOptions,\n@@ -335,6 +336,7 @@ impl Target {\n             arm_linux_androideabi,\n             arm_unknown_linux_gnueabi,\n             arm_unknown_linux_gnueabihf,\n+            aarch64_unknown_linux_gnu,\n \n             x86_64_unknown_freebsd,\n "}, {"sha": "e16c27a145093ea7478419efe3253ce68ef4a43a", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -1962,6 +1962,11 @@ extern {\n     pub fn LLVMInitializeARMTargetMC();\n     pub fn LLVMInitializeARMAsmPrinter();\n     pub fn LLVMInitializeARMAsmParser();\n+    pub fn LLVMInitializeAArch64TargetInfo();\n+    pub fn LLVMInitializeAArch64Target();\n+    pub fn LLVMInitializeAArch64TargetMC();\n+    pub fn LLVMInitializeAArch64AsmPrinter();\n+    pub fn LLVMInitializeAArch64AsmParser();\n     pub fn LLVMInitializeMipsTargetInfo();\n     pub fn LLVMInitializeMipsTarget();\n     pub fn LLVMInitializeMipsTargetMC();\n@@ -2231,6 +2236,12 @@ pub unsafe fn static_link_hack_this_sucks() {\n     LLVMInitializeARMAsmPrinter();\n     LLVMInitializeARMAsmParser();\n \n+    LLVMInitializeAArch64TargetInfo();\n+    LLVMInitializeAArch64Target();\n+    LLVMInitializeAArch64TargetMC();\n+    LLVMInitializeAArch64AsmPrinter();\n+    LLVMInitializeAArch64AsmParser();\n+\n     LLVMInitializeMipsTargetInfo();\n     LLVMInitializeMipsTarget();\n     LLVMInitializeMipsTargetMC();"}, {"sha": "c1e470aa4e8b7fc99bd47a84604f57dcf90082ff", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -1029,6 +1029,12 @@ unsafe fn configure_llvm(sess: &Session) {\n         llvm::LLVMInitializeARMAsmPrinter();\n         llvm::LLVMInitializeARMAsmParser();\n \n+        llvm::LLVMInitializeAArch64TargetInfo();\n+        llvm::LLVMInitializeAArch64Target();\n+        llvm::LLVMInitializeAArch64TargetMC();\n+        llvm::LLVMInitializeAArch64AsmPrinter();\n+        llvm::LLVMInitializeAArch64AsmParser();\n+\n         llvm::LLVMInitializeMipsTargetInfo();\n         llvm::LLVMInitializeMipsTarget();\n         llvm::LLVMInitializeMipsTargetMC();"}, {"sha": "5597e112f76d1727f05d08a1febd1a599d1bb023", "filename": "src/librustc_trans/trans/asm.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibrustc_trans%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibrustc_trans%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fasm.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -165,6 +165,7 @@ pub fn trans_inline_asm<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, ia: &ast::InlineAsm)\n // Basically what clang does\n \n #[cfg(any(target_arch = \"arm\",\n+          target_arch = \"aarch64\",\n           target_arch = \"mips\",\n           target_arch = \"mipsel\"))]\n fn get_clobbers() -> String {"}, {"sha": "abe5af44c3f56ec111d228938def3f6c07dc52c8", "filename": "src/librustc_trans/trans/cabi.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -17,6 +17,7 @@ use trans::cabi_x86;\n use trans::cabi_x86_64;\n use trans::cabi_x86_win64;\n use trans::cabi_arm;\n+use trans::cabi_aarch64;\n use trans::cabi_mips;\n use trans::type_::Type;\n \n@@ -115,6 +116,7 @@ pub fn compute_abi_info(ccx: &CrateContext,\n             cabi_x86_64::compute_abi_info(ccx, atys, rty, ret_def)\n         },\n         \"arm\" => cabi_arm::compute_abi_info(ccx, atys, rty, ret_def),\n+        \"aarch64\" => cabi_aarch64::compute_abi_info(ccx, atys, rty, ret_def),\n         \"mips\" => cabi_mips::compute_abi_info(ccx, atys, rty, ret_def),\n         a => ccx.sess().fatal((format!(\"unrecognized arch \\\"{}\\\" in target specification\", a))\n                               []),"}, {"sha": "66308503b818d15fabc9f3deed1088bca9988568", "filename": "src/librustc_trans/trans/cabi_aarch64.rs", "status": "added", "additions": 165, "deletions": 0, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibrustc_trans%2Ftrans%2Fcabi_aarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibrustc_trans%2Ftrans%2Fcabi_aarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_aarch64.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -0,0 +1,165 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(non_upper_case_globals)]\n+\n+use llvm;\n+use llvm::{Integer, Pointer, Float, Double, Struct, Array};\n+use llvm::{StructRetAttribute, ZExtAttribute};\n+use trans::cabi::{FnType, ArgType};\n+use trans::context::CrateContext;\n+use trans::type_::Type;\n+\n+use std::cmp;\n+\n+fn align_up_to(off: uint, a: uint) -> uint {\n+    return (off + a - 1u) / a * a;\n+}\n+\n+fn align(off: uint, ty: Type) -> uint {\n+    let a = ty_align(ty);\n+    return align_up_to(off, a);\n+}\n+\n+fn ty_align(ty: Type) -> uint {\n+    match ty.kind() {\n+        Integer => {\n+            unsafe {\n+                ((llvm::LLVMGetIntTypeWidth(ty.to_ref()) as uint) + 7) / 8\n+            }\n+        }\n+        Pointer => 8,\n+        Float => 4,\n+        Double => 8,\n+        Struct => {\n+            if ty.is_packed() {\n+                1\n+            } else {\n+                let str_tys = ty.field_types();\n+                str_tys.iter().fold(1, |a, t| cmp::max(a, ty_align(*t)))\n+            }\n+        }\n+        Array => {\n+            let elt = ty.element_type();\n+            ty_align(elt)\n+        }\n+        _ => panic!(\"ty_align: unhandled type\")\n+    }\n+}\n+\n+fn ty_size(ty: Type) -> uint {\n+    match ty.kind() {\n+        Integer => {\n+            unsafe {\n+                ((llvm::LLVMGetIntTypeWidth(ty.to_ref()) as uint) + 7) / 8\n+            }\n+        }\n+        Pointer => 8,\n+        Float => 4,\n+        Double => 8,\n+        Struct => {\n+            if ty.is_packed() {\n+                let str_tys = ty.field_types();\n+                str_tys.iter().fold(0, |s, t| s + ty_size(*t))\n+            } else {\n+                let str_tys = ty.field_types();\n+                let size = str_tys.iter().fold(0, |s, t| align(s, *t) + ty_size(*t));\n+                align(size, ty)\n+            }\n+        }\n+        Array => {\n+            let len = ty.array_length();\n+            let elt = ty.element_type();\n+            let eltsz = ty_size(elt);\n+            len * eltsz\n+        }\n+        _ => panic!(\"ty_size: unhandled type\")\n+    }\n+}\n+\n+fn classify_ret_ty(ccx: &CrateContext, ty: Type) -> ArgType {\n+    if is_reg_ty(ty) {\n+        let attr = if ty == Type::i1(ccx) { Some(ZExtAttribute) } else { None };\n+        return ArgType::direct(ty, None, None, attr);\n+    }\n+    let size = ty_size(ty);\n+    if size <= 16 {\n+        let llty = if size <= 1 {\n+            Type::i8(ccx)\n+        } else if size <= 2 {\n+            Type::i16(ccx)\n+        } else if size <= 4 {\n+            Type::i32(ccx)\n+        } else if size <= 8 {\n+            Type::i64(ccx)\n+        } else {\n+            Type::array(&Type::i64(ccx), ((size + 7 ) / 8 ) as u64)\n+        };\n+        return ArgType::direct(ty, Some(llty), None, None);\n+    }\n+    ArgType::indirect(ty, Some(StructRetAttribute))\n+}\n+\n+fn classify_arg_ty(ccx: &CrateContext, ty: Type) -> ArgType {\n+    if is_reg_ty(ty) {\n+        let attr = if ty == Type::i1(ccx) { Some(ZExtAttribute) } else { None };\n+        return ArgType::direct(ty, None, None, attr);\n+    }\n+    let size = ty_size(ty);\n+    if size <= 16 {\n+        let llty = if size == 0 {\n+            Type::array(&Type::i64(ccx), 0u64)\n+        } else if size == 1 {\n+            Type::i8(ccx)\n+        } else if size == 2 {\n+            Type::i16(ccx)\n+        } else if size <= 4 {\n+            Type::i32(ccx)\n+        } else if size <= 8 {\n+            Type::i64(ccx)\n+        } else {\n+            Type::array(&Type::i64(ccx), ((size + 7 ) / 8 ) as u64)\n+        };\n+        return ArgType::direct(ty, Some(llty), None, None);\n+    }\n+    ArgType::indirect(ty, None)\n+}\n+\n+fn is_reg_ty(ty: Type) -> bool {\n+    match ty.kind() {\n+        Integer\n+        | Pointer\n+        | Float\n+        | Double => true,\n+        _ => false\n+    }\n+}\n+\n+pub fn compute_abi_info(ccx: &CrateContext,\n+                        atys: &[Type],\n+                        rty: Type,\n+                        ret_def: bool) -> FnType {\n+    let mut arg_tys = Vec::new();\n+    for &aty in atys.iter() {\n+        let ty = classify_arg_ty(ccx, aty);\n+        arg_tys.push(ty);\n+    }\n+\n+    let ret_ty = if ret_def {\n+        classify_ret_ty(ccx, rty)\n+    } else {\n+        ArgType::direct(Type::void(ccx), None, None, None)\n+    };\n+\n+    return FnType {\n+        arg_tys: arg_tys,\n+        ret_ty: ret_ty,\n+    };\n+}"}, {"sha": "3030714f4e9894b1c93025ba4c42242284398d27", "filename": "src/librustc_trans/trans/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmod.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -41,6 +41,7 @@ mod cabi_x86;\n mod cabi_x86_64;\n mod cabi_x86_win64;\n mod cabi_arm;\n+mod cabi_aarch64;\n mod cabi_mips;\n mod foreign;\n mod intrinsic;"}, {"sha": "2ca6bccabc0184d8f315145a013fe59bb8c6320c", "filename": "src/libstd/os.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -1414,6 +1414,11 @@ mod arch_consts {\n     pub const ARCH: &'static str = \"arm\";\n }\n \n+#[cfg(target_arch = \"aarch64\")]\n+mod arch_consts {\n+    pub const ARCH: &'static str = \"aarch64\";\n+}\n+\n #[cfg(target_arch = \"mips\")]\n mod arch_consts {\n     pub const ARCH: &'static str = \"mips\";"}, {"sha": "5caa71b43475ea8fef86a1a9b1fa93d66f3be297", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -29,7 +29,10 @@ mod imp {\n     use os::errno;\n \n     #[cfg(all(target_os = \"linux\",\n-              any(target_arch = \"x86_64\", target_arch = \"x86\", target_arch = \"arm\")))]\n+              any(target_arch = \"x86_64\",\n+                  target_arch = \"x86\",\n+                  target_arch = \"arm\",\n+                  target_arch = \"aarch64\")))]\n     fn getrandom(buf: &mut [u8]) -> libc::c_long {\n         extern \"C\" {\n             fn syscall(number: libc::c_long, ...) -> libc::c_long;\n@@ -39,7 +42,7 @@ mod imp {\n         const NR_GETRANDOM: libc::c_long = 318;\n         #[cfg(target_arch = \"x86\")]\n         const NR_GETRANDOM: libc::c_long = 355;\n-        #[cfg(target_arch = \"arm\")]\n+        #[cfg(any(target_arch = \"arm\", target_arch = \"aarch64\"))]\n         const NR_GETRANDOM: libc::c_long = 384;\n \n         unsafe {\n@@ -48,7 +51,10 @@ mod imp {\n     }\n \n     #[cfg(not(all(target_os = \"linux\",\n-                  any(target_arch = \"x86_64\", target_arch = \"x86\", target_arch = \"arm\"))))]\n+                  any(target_arch = \"x86_64\",\n+                      target_arch = \"x86\",\n+                      target_arch = \"arm\",\n+                      target_arch = \"aarch64\"))))]\n     fn getrandom(_buf: &mut [u8]) -> libc::c_long { -1 }\n \n     fn getrandom_fill_bytes(v: &mut [u8]) {\n@@ -82,7 +88,10 @@ mod imp {\n     }\n \n     #[cfg(all(target_os = \"linux\",\n-              any(target_arch = \"x86_64\", target_arch = \"x86\", target_arch = \"arm\")))]\n+              any(target_arch = \"x86_64\",\n+                  target_arch = \"x86\",\n+                  target_arch = \"arm\",\n+                  target_arch = \"aarch64\")))]\n     fn is_getrandom_available() -> bool {\n         use sync::atomic::{AtomicBool, ATOMIC_BOOL_INIT, Relaxed};\n \n@@ -107,7 +116,10 @@ mod imp {\n     }\n \n     #[cfg(not(all(target_os = \"linux\",\n-                  any(target_arch = \"x86_64\", target_arch = \"x86\", target_arch = \"arm\"))))]\n+                  any(target_arch = \"x86_64\",\n+                      target_arch = \"x86\",\n+                      target_arch = \"arm\",\n+                      target_arch = \"aarch64\"))))]\n     fn is_getrandom_available() -> bool { false }\n \n     /// A random number generator that retrieves randomness straight from"}, {"sha": "3fdfb5327ee1f143559965802cfa20a760202f70", "filename": "src/libstd/rt/libunwind.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibstd%2Frt%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibstd%2Frt%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flibunwind.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -75,6 +75,9 @@ pub const unwinder_private_data_size: uint = 20;\n #[cfg(all(target_arch = \"arm\", target_os = \"ios\"))]\n pub const unwinder_private_data_size: uint = 5;\n \n+#[cfg(target_arch = \"aarch64\")]\n+pub const unwinder_private_data_size: uint = 2;\n+\n #[cfg(any(target_arch = \"mips\", target_arch = \"mipsel\"))]\n pub const unwinder_private_data_size: uint = 2;\n "}, {"sha": "ce5ab67ae613c5c66e099aa5407127b210b010ef", "filename": "src/libstd/sys/common/stack.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibstd%2Fsys%2Fcommon%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibstd%2Fsys%2Fcommon%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fstack.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -226,6 +226,11 @@ pub unsafe fn record_sp_limit(limit: uint) {\n         }\n     }\n \n+    // aarch64 - FIXME(AARCH64): missing...\n+    #[cfg(target_arch = \"aarch64\")]\n+    unsafe fn target_record_sp_limit(_: uint) {\n+    }\n+\n     // iOS segmented stack is disabled for now, see related notes\n     #[cfg(all(target_arch = \"arm\", target_os = \"ios\"))] #[inline(always)]\n     unsafe fn target_record_sp_limit(_: uint) {\n@@ -315,6 +320,12 @@ pub unsafe fn get_sp_limit() -> uint {\n         }\n     }\n \n+    // aarch64 - FIXME(AARCH64): missing...\n+    #[cfg(target_arch = \"aarch64\")]\n+    unsafe fn target_get_sp_limit() -> uint {\n+        1024\n+    }\n+\n     // iOS doesn't support segmented stacks yet. This function might\n     // be called by runtime though so it is unsafe to mark it as\n     // unreachable, let's return a fixed constant."}, {"sha": "ca419d1c7f436044f90c5dd2a1c17787c5db2f39", "filename": "src/libstd/sys/unix/c.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fc.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -28,7 +28,8 @@ pub const FIONBIO: libc::c_ulong = 0x8004667e;\n #[cfg(any(all(target_os = \"linux\",\n               any(target_arch = \"x86\",\n                   target_arch = \"x86_64\",\n-                  target_arch = \"arm\")),\n+                  target_arch = \"arm\",\n+                  target_arch = \"aarch64\")),\n           target_os = \"android\"))]\n pub const FIONBIO: libc::c_ulong = 0x5421;\n #[cfg(all(target_os = \"linux\",\n@@ -43,7 +44,8 @@ pub const FIOCLEX: libc::c_ulong = 0x20006601;\n #[cfg(any(all(target_os = \"linux\",\n               any(target_arch = \"x86\",\n                   target_arch = \"x86_64\",\n-                  target_arch = \"arm\")),\n+                  target_arch = \"arm\",\n+                  target_arch = \"aarch64\")),\n           target_os = \"android\"))]\n pub const FIOCLEX: libc::c_ulong = 0x5451;\n #[cfg(all(target_os = \"linux\",\n@@ -127,7 +129,8 @@ mod select {\n #[cfg(any(all(target_os = \"linux\",\n               any(target_arch = \"x86\",\n                   target_arch = \"x86_64\",\n-                  target_arch = \"arm\")),\n+                  target_arch = \"arm\",\n+                  target_arch = \"aarch64\")),\n           target_os = \"android\"))]\n mod signal {\n     use libc;"}, {"sha": "1fd619a28db84118305ae70e1916c5cdf002ce68", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -147,6 +147,7 @@ mod imp {\n     #[cfg(any(all(target_os = \"linux\", target_arch = \"x86\"), // may not match\n               all(target_os = \"linux\", target_arch = \"x86_64\"),\n               all(target_os = \"linux\", target_arch = \"arm\"), // may not match\n+              all(target_os = \"linux\", target_arch = \"aarch64\"),\n               all(target_os = \"linux\", target_arch = \"mips\"), // may not match\n               all(target_os = \"linux\", target_arch = \"mipsel\"), // may not match\n               target_os = \"android\"))] // may not match"}, {"sha": "1d8a59dbbb3db4ee68d4b8b588e88bce9e54aa7e", "filename": "src/libstd/sys/unix/sync.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibstd%2Fsys%2Funix%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibstd%2Fsys%2Funix%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fsync.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -125,15 +125,19 @@ mod os {\n               target_arch = \"mips\",\n               target_arch = \"mipsel\"))]\n     const __SIZEOF_PTHREAD_MUTEX_T: uint = 24 - 8;\n+    #[cfg(target_arch = \"aarch64\")]\n+    const __SIZEOF_PTHREAD_MUTEX_T: uint = 48 - 8;\n \n     #[cfg(any(target_arch = \"x86_64\",\n               target_arch = \"x86\",\n               target_arch = \"arm\",\n+              target_arch = \"aarch64\",\n               target_arch = \"mips\",\n               target_arch = \"mipsel\"))]\n     const __SIZEOF_PTHREAD_COND_T: uint = 48 - 8;\n \n-    #[cfg(target_arch = \"x86_64\")]\n+    #[cfg(any(target_arch = \"x86_64\",\n+              target_arch = \"aarch64\"))]\n     const __SIZEOF_PTHREAD_RWLOCK_T: uint = 56 - 8;\n \n     #[cfg(any(target_arch = \"x86\","}, {"sha": "91d8aec01cf346896064006691b5ca9a7acc97f9", "filename": "src/libstd/thread_local/mod.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibstd%2Fthread_local%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibstd%2Fthread_local%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fmod.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -175,17 +175,21 @@ macro_rules! thread_local {\n #[doc(hidden)]\n macro_rules! __thread_local_inner {\n     (static $name:ident: $t:ty = $init:expr) => (\n-        #[cfg_attr(any(target_os = \"macos\", target_os = \"linux\"), thread_local)]\n+        #[cfg_attr(all(any(target_os = \"macos\", target_os = \"linux\"),\n+                       not(target_arch = \"aarch64\")),\n+                   thread_local)]\n         static $name: ::std::thread_local::__impl::KeyInner<$t> =\n             __thread_local_inner!($init, $t);\n     );\n     (pub static $name:ident: $t:ty = $init:expr) => (\n-        #[cfg_attr(any(target_os = \"macos\", target_os = \"linux\"), thread_local)]\n+        #[cfg_attr(all(any(target_os = \"macos\", target_os = \"linux\"),\n+                       not(target_arch = \"aarch64\")),\n+                   thread_local)]\n         pub static $name: ::std::thread_local::__impl::KeyInner<$t> =\n             __thread_local_inner!($init, $t);\n     );\n     ($init:expr, $t:ty) => ({\n-        #[cfg(any(target_os = \"macos\", target_os = \"linux\"))]\n+        #[cfg(all(any(target_os = \"macos\", target_os = \"linux\"), not(target_arch = \"aarch64\")))]\n         const _INIT: ::std::thread_local::__impl::KeyInner<$t> = {\n             ::std::thread_local::__impl::KeyInner {\n                 inner: ::std::cell::UnsafeCell { value: $init },\n@@ -194,7 +198,7 @@ macro_rules! __thread_local_inner {\n             }\n         };\n \n-        #[cfg(all(not(any(target_os = \"macos\", target_os = \"linux\"))))]\n+        #[cfg(any(not(any(target_os = \"macos\", target_os = \"linux\")), target_arch = \"aarch64\"))]\n         const _INIT: ::std::thread_local::__impl::KeyInner<$t> = {\n             unsafe extern fn __destroy(ptr: *mut u8) {\n                 ::std::thread_local::__impl::destroy_value::<$t>(ptr);\n@@ -317,7 +321,7 @@ impl<T: 'static> Key<T> {\n     pub fn destroyed(&'static self) -> bool { self.state() == State::Destroyed }\n }\n \n-#[cfg(any(target_os = \"macos\", target_os = \"linux\"))]\n+#[cfg(all(any(target_os = \"macos\", target_os = \"linux\"), not(target_arch = \"aarch64\")))]\n mod imp {\n     use prelude::v1::*;\n \n@@ -449,7 +453,7 @@ mod imp {\n     }\n }\n \n-#[cfg(not(any(target_os = \"macos\", target_os = \"linux\")))]\n+#[cfg(any(not(any(target_os = \"macos\", target_os = \"linux\")), target_arch = \"aarch64\"))]\n mod imp {\n     use prelude::v1::*;\n "}, {"sha": "dc36fda3a020e9000b51ab6d0739417dd1cabf61", "filename": "src/libstd/thread_local/scoped.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibstd%2Fthread_local%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Flibstd%2Fthread_local%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fscoped.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -78,28 +78,34 @@ macro_rules! scoped_thread_local {\n #[doc(hidden)]\n macro_rules! __scoped_thread_local_inner {\n     (static $name:ident: $t:ty) => (\n-        #[cfg_attr(not(any(windows, target_os = \"android\", target_os = \"ios\")),\n+        #[cfg_attr(not(any(windows,\n+                           target_os = \"android\",\n+                           target_os = \"ios\",\n+                           target_arch = \"aarch64\")),\n                    thread_local)]\n         static $name: ::std::thread_local::scoped::Key<$t> =\n             __scoped_thread_local_inner!($t);\n     );\n     (pub static $name:ident: $t:ty) => (\n-        #[cfg_attr(not(any(windows, target_os = \"android\", target_os = \"ios\")),\n+        #[cfg_attr(not(any(windows,\n+                           target_os = \"android\",\n+                           target_os = \"ios\",\n+                           target_arch = \"aarch64\")),\n                    thread_local)]\n         pub static $name: ::std::thread_local::scoped::Key<$t> =\n             __scoped_thread_local_inner!($t);\n     );\n     ($t:ty) => ({\n         use std::thread_local::scoped::Key as __Key;\n \n-        #[cfg(not(any(windows, target_os = \"android\", target_os = \"ios\")))]\n+        #[cfg(not(any(windows, target_os = \"android\", target_os = \"ios\", target_arch = \"aarch64\")))]\n         const _INIT: __Key<$t> = __Key {\n             inner: ::std::thread_local::scoped::__impl::KeyInner {\n                 inner: ::std::cell::UnsafeCell { value: 0 as *mut _ },\n             }\n         };\n \n-        #[cfg(any(windows, target_os = \"android\", target_os = \"ios\"))]\n+        #[cfg(any(windows, target_os = \"android\", target_os = \"ios\", target_arch = \"aarch64\"))]\n         const _INIT: __Key<$t> = __Key {\n             inner: ::std::thread_local::scoped::__impl::KeyInner {\n                 inner: ::std::thread_local::scoped::__impl::OS_INIT,\n@@ -199,7 +205,7 @@ impl<T> Key<T> {\n     }\n }\n \n-#[cfg(not(any(windows, target_os = \"android\", target_os = \"ios\")))]\n+#[cfg(not(any(windows, target_os = \"android\", target_os = \"ios\", target_arch = \"aarch64\")))]\n mod imp {\n     use std::cell::UnsafeCell;\n \n@@ -217,7 +223,7 @@ mod imp {\n     }\n }\n \n-#[cfg(any(windows, target_os = \"android\", target_os = \"ios\"))]\n+#[cfg(any(windows, target_os = \"android\", target_os = \"ios\", target_arch = \"aarch64\"))]\n mod imp {\n     use kinds::marker;\n     use sys_common::thread_local::StaticKey as OsStaticKey;"}, {"sha": "ae42a5d22433ce0b3c59e25aa43ab5f0aa70cbb5", "filename": "src/rt/arch/aarch64/macros.S", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Frt%2Farch%2Faarch64%2Fmacros.S", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Frt%2Farch%2Faarch64%2Fmacros.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Faarch64%2Fmacros.S?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -0,0 +1,11 @@\n+.macro\tfunc _name\n+\t.text\n+\t.align\t2\n+\t.globl\t\\_name\n+\t.type\t\\_name, %function\n+\\_name:\n+.endm\n+\n+.macro\tendfunc _name\n+\t.size\t\\_name, .-\\_name\n+.endm"}, {"sha": "12827cea0feda1b6b4b59e7514047732efd899d1", "filename": "src/rt/arch/aarch64/morestack.S", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Frt%2Farch%2Faarch64%2Fmorestack.S", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Frt%2Farch%2Faarch64%2Fmorestack.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Faarch64%2Fmorestack.S?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -0,0 +1,19 @@\n+#include \"macros.S\"\n+\n+// Mark stack as non-executable\n+#if defined(__linux__) && defined(__ELF__)\n+.section\t.note.GNU-stack, \"\", %progbits\n+#endif\n+\n+/* See i386/morestack.S for the lengthy, general explanation. */\n+\n+.global rust_stack_exhausted\n+\n+// FIXME(AARCH64): this might not be perfectly right but works for now\n+func\t__morestack\n+\t.cfi_startproc\n+\tbl rust_stack_exhausted\n+\t// the above function ensures that it never returns\n+\t.cfi_endproc\n+endfunc\t__morestack\n+\t.hidden __morestack"}, {"sha": "115e286866e6ebaed0a6029d8a0c81d96d63bfc5", "filename": "src/rt/arch/aarch64/record_sp.S", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Frt%2Farch%2Faarch64%2Frecord_sp.S", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Frt%2Farch%2Faarch64%2Frecord_sp.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Faarch64%2Frecord_sp.S?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -0,0 +1,6 @@\n+#include \"macros.S\"\n+\n+// Mark stack as non-executable\n+#if defined(__linux__) && defined(__ELF__)\n+.section\t.note.GNU-stack, \"\", %progbits\n+#endif"}, {"sha": "c1ad6754ca1c36e877c5264f4448b291aca2dd9b", "filename": "src/rustllvm/llvm-auto-clean-trigger", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Frustllvm%2Fllvm-auto-clean-trigger", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Frustllvm%2Fllvm-auto-clean-trigger", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Fllvm-auto-clean-trigger?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n # If this file is modified, then llvm will be forcibly cleaned and then rebuilt.\n # The actual contents of this file do not matter, but to trigger a change on the\n # build bots then the contents should be changed so git updates the mtime.\n-2014-10-04\n+2015-01-03"}, {"sha": "d7e84a474e849e433fdb9fb7d662c8d782a8dda9", "filename": "src/test/auxiliary/extern_calling_convention.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Ftest%2Fauxiliary%2Fextern_calling_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Ftest%2Fauxiliary%2Fextern_calling_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fextern_calling_convention.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -24,7 +24,7 @@ pub extern \"win64\" fn foo(a: int, b: int, c: int, d: int) {\n }\n \n #[inline(never)]\n-#[cfg(any(target_arch = \"x86\", target_arch = \"arm\"))]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"arm\", target_arch = \"aarch64\"))]\n pub extern fn foo(a: int, b: int, c: int, d: int) {\n     assert!(a == 1);\n     assert!(b == 2);"}, {"sha": "bc240df9b3b1c2414b5309272dd6b00e1155092a", "filename": "src/test/compile-fail/asm-in-bad-modifier.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -14,7 +14,8 @@ fn foo(x: int) { println!(\"{}\", x); }\n \n #[cfg(any(target_arch = \"x86\",\n           target_arch = \"x86_64\",\n-          target_arch = \"arm\"))]\n+          target_arch = \"arm\",\n+          target_arch = \"aarch64\"))]\n pub fn main() {\n     let x: int;\n     let y: int;\n@@ -26,5 +27,8 @@ pub fn main() {\n     foo(y);\n }\n \n-#[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\", target_arch = \"arm\")))]\n+#[cfg(not(any(target_arch = \"x86\",\n+              target_arch = \"x86_64\",\n+              target_arch = \"arm\",\n+              target_arch = \"aarch64\")))]\n pub fn main() {}"}, {"sha": "387b4bec47eaa165801e5e3d16b1e7e2f57bcb53", "filename": "src/test/compile-fail/asm-out-assign-imm.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -14,7 +14,8 @@ fn foo(x: int) { println!(\"{}\", x); }\n \n #[cfg(any(target_arch = \"x86\",\n           target_arch = \"x86_64\",\n-          target_arch = \"arm\"))]\n+          target_arch = \"arm\",\n+          target_arch = \"aarch64\"))]\n pub fn main() {\n     let x: int;\n     x = 1; //~ NOTE prior assignment occurs here\n@@ -25,5 +26,8 @@ pub fn main() {\n     foo(x);\n }\n \n-#[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\", target_arch = \"arm\")))]\n+#[cfg(not(any(target_arch = \"x86\",\n+              target_arch = \"x86_64\",\n+              target_arch = \"arm\",\n+              target_arch = \"aarch64\")))]\n pub fn main() {}"}, {"sha": "4690bdc40cbc098825f6b1c555b09f2fd881beae", "filename": "src/test/compile-fail/asm-out-no-modifier.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -14,7 +14,8 @@ fn foo(x: int) { println!(\"{}\", x); }\n \n #[cfg(any(target_arch = \"x86\",\n           target_arch = \"x86_64\",\n-          target_arch = \"arm\"))]\n+          target_arch = \"arm\",\n+          target_arch = \"aarch64\"))]\n pub fn main() {\n     let x: int;\n     unsafe {\n@@ -23,5 +24,8 @@ pub fn main() {\n     foo(x);\n }\n \n-#[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\", target_arch = \"arm\")))]\n+#[cfg(not(any(target_arch = \"x86\",\n+              target_arch = \"x86_64\",\n+              target_arch = \"arm\",\n+              target_arch = \"aarch64\")))]\n pub fn main() {}"}, {"sha": "2577dcc3f995403b126575a48510bf12289599f1", "filename": "src/test/compile-fail/asm-out-read-uninit.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -14,7 +14,8 @@ fn foo(x: int) { println!(\"{}\", x); }\n \n #[cfg(any(target_arch = \"x86\",\n           target_arch = \"x86_64\",\n-          target_arch = \"arm\"))]\n+          target_arch = \"arm\",\n+          target_arch = \"aarch64\"))]\n pub fn main() {\n     let x: int;\n     unsafe {\n@@ -23,5 +24,8 @@ pub fn main() {\n     foo(x);\n }\n \n-#[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\", target_arch = \"arm\")))]\n+#[cfg(not(any(target_arch = \"x86\",\n+              target_arch = \"x86_64\",\n+              target_arch = \"arm\",\n+              target_arch = \"aarch64\")))]\n pub fn main() {}"}, {"sha": "e3cece7c8f0db9d9e06326d9a91193e784f212c6", "filename": "src/test/compile-fail/asm-src-loc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Ftest%2Fcompile-fail%2Fasm-src-loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Ftest%2Fcompile-fail%2Fasm-src-loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-src-loc.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -12,6 +12,6 @@\n \n fn main() {\n     unsafe {\n-        asm!(\"nowayisthisavalidinstruction\"); //~ ERROR invalid instruction\n+        asm!(\"nowayisthisavalidinstruction\"); //~ ERROR instruction\n     }\n }"}, {"sha": "0cb73bc98a45aec9b71a07250abe3bad25a32f75", "filename": "src/test/run-fail/bug-2470-bounds-check-overflow-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-3.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -32,7 +32,7 @@ fn main() {\n     println!(\"ov3 0x%x\",  x.as_slice()[idx]);\n }\n \n-#[cfg(target_arch=\"x86_64\")]\n+#[cfg(any(target_arch=\"x86_64\", target_arch = \"aarch64\"))]\n fn main() {\n     // This version just panics anyways, for symmetry on 64-bit hosts.\n     let x = vec!(1u,2u,3u);"}, {"sha": "251804e214b6022e9c04ed61b128e13b2ecd79e6", "filename": "src/test/run-pass/bitwise.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Ftest%2Frun-pass%2Fbitwise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Ftest%2Frun-pass%2Fbitwise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitwise.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -14,7 +14,7 @@ fn target() {\n     assert_eq!(-1000 as uint >> 3u, 536870787u);\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(any(target_arch = \"x86_64\", target_arch = \"aarch64\"))]\n fn target() {\n     assert_eq!(-1000 as uint >> 3u, 2305843009213693827u);\n }"}, {"sha": "0e9447bd2497d2fe23510bc5c674f77ddae8e1c4", "filename": "src/test/run-pass/conditional-compile-arch.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Ftest%2Frun-pass%2Fconditional-compile-arch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Ftest%2Frun-pass%2Fconditional-compile-arch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile-arch.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -16,3 +16,6 @@ pub fn main() { }\n \n #[cfg(target_arch = \"arm\")]\n pub fn main() { }\n+\n+#[cfg(target_arch = \"aarch64\")]\n+pub fn main() { }"}, {"sha": "52fcaf5c3ae8df757e31361e96e1697fd9c3f4fe", "filename": "src/test/run-pass/intrinsic-alignment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -32,7 +32,7 @@ mod m {\n     }\n \n     #[main]\n-    #[cfg(any(target_arch = \"x86_64\", target_arch = \"arm\"))]\n+    #[cfg(any(target_arch = \"x86_64\", target_arch = \"arm\", target_arch = \"aarch64\"))]\n     pub fn main() {\n         unsafe {\n             assert_eq!(::rusti::pref_align_of::<u64>(), 8u);"}, {"sha": "5f7a4d87b9ae27ff984d235395cfc82058081242", "filename": "src/test/run-pass/issue-2895.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Ftest%2Frun-pass%2Fissue-2895.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Ftest%2Frun-pass%2Fissue-2895.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2895.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -22,7 +22,7 @@ impl Drop for Kitty {\n     fn drop(&mut self) {}\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(any(target_arch = \"x86_64\", target_arch=\"aarch64\"))]\n pub fn main() {\n     assert_eq!(mem::size_of::<Cat>(), 8 as uint);\n     assert_eq!(mem::size_of::<Kitty>(), 16 as uint);"}, {"sha": "e165b34f680ba70d42723ff292d957dc494b389b", "filename": "src/test/run-pass/rec-align-u32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u32.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -36,7 +36,7 @@ struct Outer {\n }\n \n \n-#[cfg(any(target_arch = \"x86\", target_arch = \"arm\"))]\n+#[cfg(any(target_arch = \"x86\", target_arch = \"arm\", target_arch = \"aarch64\"))]\n mod m {\n     pub fn align() -> uint { 4u }\n     pub fn size() -> uint { 8u }"}, {"sha": "c3cec77a646585372b792f3a1587df12ce02a491", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -47,7 +47,7 @@ mod m {\n         pub fn size() -> uint { 12u }\n     }\n \n-    #[cfg(any(target_arch = \"x86_64\", target_arch = \"arm\"))]\n+    #[cfg(any(target_arch = \"x86_64\", target_arch = \"arm\", target_arch = \"aarch64\"))]\n     pub mod m {\n         pub fn align() -> uint { 8u }\n         pub fn size() -> uint { 16u }"}, {"sha": "bd945327d107c50778f318f16b425b5b9ab6df83", "filename": "src/test/run-pass/struct-return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-return.rs?ref=6e5fb8bd1bef7a36c32194b35ec16d0365adbcf1", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -46,7 +46,7 @@ fn test1() {\n     }\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(any(target_arch = \"x86_64\", target_arch = \"aarch64\"))]\n fn test2() {\n     unsafe {\n         let f = Floats { a: 1.234567890e-15_f64,"}]}