{"sha": "537db9a1ef2ad5f195378c7f64676b147f56f57a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzN2RiOWExZWYyYWQ1ZjE5NTM3OGM3ZjY0Njc2YjE0N2Y1NmY1N2E=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-02-18T17:32:40Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-02-18T17:46:22Z"}, "message": "Disable 128bit atomic operations on macOS", "tree": {"sha": "8e6e38394381b81453ffe156baac19645532fd10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e6e38394381b81453ffe156baac19645532fd10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/537db9a1ef2ad5f195378c7f64676b147f56f57a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/537db9a1ef2ad5f195378c7f64676b147f56f57a", "html_url": "https://github.com/rust-lang/rust/commit/537db9a1ef2ad5f195378c7f64676b147f56f57a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/537db9a1ef2ad5f195378c7f64676b147f56f57a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2f5452089a6cf8eb611badf20118960030f6585", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2f5452089a6cf8eb611badf20118960030f6585", "html_url": "https://github.com/rust-lang/rust/commit/f2f5452089a6cf8eb611badf20118960030f6585"}], "stats": {"total": 153, "additions": 152, "deletions": 1}, "files": [{"sha": "c90205db0fbd067af3c33691164486277ddc1b56", "filename": "build_sysroot/prepare_sysroot_src.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/537db9a1ef2ad5f195378c7f64676b147f56f57a/build_sysroot%2Fprepare_sysroot_src.sh", "raw_url": "https://github.com/rust-lang/rust/raw/537db9a1ef2ad5f195378c7f64676b147f56f57a/build_sysroot%2Fprepare_sysroot_src.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2Fprepare_sysroot_src.sh?ref=537db9a1ef2ad5f195378c7f64676b147f56f57a", "patch": "@@ -33,7 +33,7 @@ git clone https://github.com/rust-lang/compiler-builtins.git || echo \"rust-lang/\n pushd compiler-builtins\n git checkout -- .\n git checkout 0.1.39\n-git apply ../../crate_patches/0001-compiler-builtins-Remove-rotate_left-from-Int.patch\n+git apply ../../crate_patches/000*-compiler-builtins-*.patch\n popd\n \n echo \"Successfully prepared sysroot source for building\""}, {"sha": "7daea99f5794d2103588c152a0ac02ca1b5b14b1", "filename": "crate_patches/0002-compiler-builtins-Disable-128bit-atomic-operations.patch", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/537db9a1ef2ad5f195378c7f64676b147f56f57a/crate_patches%2F0002-compiler-builtins-Disable-128bit-atomic-operations.patch", "raw_url": "https://github.com/rust-lang/rust/raw/537db9a1ef2ad5f195378c7f64676b147f56f57a/crate_patches%2F0002-compiler-builtins-Disable-128bit-atomic-operations.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crate_patches%2F0002-compiler-builtins-Disable-128bit-atomic-operations.patch?ref=537db9a1ef2ad5f195378c7f64676b147f56f57a", "patch": "@@ -0,0 +1,48 @@\n+From 1d574bf5e32d51641dcacaf8ef777e95b44f6f2a Mon Sep 17 00:00:00 2001\n+From: bjorn3 <bjorn3@users.noreply.github.com>\n+Date: Thu, 18 Feb 2021 18:30:55 +0100\n+Subject: [PATCH] Disable 128bit atomic operations\n+\n+Cranelift doesn't support them yet\n+---\n+ src/mem/mod.rs | 12 ------------\n+ 1 file changed, 12 deletions(-)\n+\n+diff --git a/src/mem/mod.rs b/src/mem/mod.rs\n+index 107762c..2d1ae10 100644\n+--- a/src/mem/mod.rs\n++++ b/src/mem/mod.rs\n+@@ -137,10 +137,6 @@ intrinsics! {\n+     pub extern \"C\" fn __llvm_memcpy_element_unordered_atomic_8(dest: *mut u64, src: *const u64, bytes: usize) -> () {\n+         memcpy_element_unordered_atomic(dest, src, bytes);\n+     }\n+-    #[cfg(target_has_atomic_load_store = \"128\")]\n+-    pub extern \"C\" fn __llvm_memcpy_element_unordered_atomic_16(dest: *mut u128, src: *const u128, bytes: usize) -> () {\n+-        memcpy_element_unordered_atomic(dest, src, bytes);\n+-    }\n+ \n+     #[cfg(target_has_atomic_load_store = \"8\")]\n+     pub extern \"C\" fn __llvm_memmove_element_unordered_atomic_1(dest: *mut u8, src: *const u8, bytes: usize) -> () {\n+@@ -158,10 +154,6 @@ intrinsics! {\n+     pub extern \"C\" fn __llvm_memmove_element_unordered_atomic_8(dest: *mut u64, src: *const u64, bytes: usize) -> () {\n+         memmove_element_unordered_atomic(dest, src, bytes);\n+     }\n+-    #[cfg(target_has_atomic_load_store = \"128\")]\n+-    pub extern \"C\" fn __llvm_memmove_element_unordered_atomic_16(dest: *mut u128, src: *const u128, bytes: usize) -> () {\n+-        memmove_element_unordered_atomic(dest, src, bytes);\n+-    }\n+ \n+     #[cfg(target_has_atomic_load_store = \"8\")]\n+     pub extern \"C\" fn __llvm_memset_element_unordered_atomic_1(s: *mut u8, c: u8, bytes: usize) -> () {\n+@@ -179,8 +171,4 @@ intrinsics! {\n+     pub extern \"C\" fn __llvm_memset_element_unordered_atomic_8(s: *mut u64, c: u8, bytes: usize) -> () {\n+         memset_element_unordered_atomic(s, c, bytes);\n+     }\n+-    #[cfg(target_has_atomic_load_store = \"128\")]\n+-    pub extern \"C\" fn __llvm_memset_element_unordered_atomic_16(s: *mut u128, c: u8, bytes: usize) -> () {\n+-        memset_element_unordered_atomic(s, c, bytes);\n+-    }\n+ }\n+-- \n+2.26.2.7.g19db9cfb68\n+"}, {"sha": "054299e8aab289efed7696bb9e9b24817803ec57", "filename": "patches/0027-Disable-128bit-atomic-operations.patch", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/537db9a1ef2ad5f195378c7f64676b147f56f57a/patches%2F0027-Disable-128bit-atomic-operations.patch", "raw_url": "https://github.com/rust-lang/rust/raw/537db9a1ef2ad5f195378c7f64676b147f56f57a/patches%2F0027-Disable-128bit-atomic-operations.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0027-Disable-128bit-atomic-operations.patch?ref=537db9a1ef2ad5f195378c7f64676b147f56f57a", "patch": "@@ -0,0 +1,103 @@\n+From 894e07dfec2624ba539129b1c1d63e1d7d812bda Mon Sep 17 00:00:00 2001\n+From: bjorn3 <bjorn3@users.noreply.github.com>\n+Date: Thu, 18 Feb 2021 18:45:28 +0100\n+Subject: [PATCH] Disable 128bit atomic operations\n+\n+Cranelift doesn't support them yet\n+---\n+ library/core/src/sync/atomic.rs | 38 ---------------------------------\n+ library/core/tests/atomic.rs    |  4 ----\n+ library/std/src/panic.rs        |  6 ------\n+ 3 files changed, 48 deletions(-)\n+\n+diff --git a/library/core/src/sync/atomic.rs b/library/core/src/sync/atomic.rs\n+index 81c9e1d..65c9503 100644\n+--- a/library/core/src/sync/atomic.rs\n++++ b/library/core/src/sync/atomic.rs\n+@@ -2228,44 +2228,6 @@ atomic_int! {\n+     \"AtomicU64::new(0)\",\n+     u64 AtomicU64 ATOMIC_U64_INIT\n+ }\n+-#[cfg(target_has_atomic_load_store = \"128\")]\n+-atomic_int! {\n+-    cfg(target_has_atomic = \"128\"),\n+-    cfg(target_has_atomic_equal_alignment = \"128\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    \"i128\", \"../../../std/primitive.i128.html\",\n+-    \"#![feature(integer_atomics)]\\n\\n\",\n+-    atomic_min, atomic_max,\n+-    16,\n+-    \"AtomicI128::new(0)\",\n+-    i128 AtomicI128 ATOMIC_I128_INIT\n+-}\n+-#[cfg(target_has_atomic_load_store = \"128\")]\n+-atomic_int! {\n+-    cfg(target_has_atomic = \"128\"),\n+-    cfg(target_has_atomic_equal_alignment = \"128\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n+-    unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+-    \"u128\", \"../../../std/primitive.u128.html\",\n+-    \"#![feature(integer_atomics)]\\n\\n\",\n+-    atomic_umin, atomic_umax,\n+-    16,\n+-    \"AtomicU128::new(0)\",\n+-    u128 AtomicU128 ATOMIC_U128_INIT\n+-}\n+ \n+ macro_rules! atomic_int_ptr_sized {\n+     ( $($target_pointer_width:literal $align:literal)* ) => { $(\n+diff --git a/library/core/tests/atomic.rs b/library/core/tests/atomic.rs\n+index 2d1e449..cb6da5d 100644\n+--- a/library/core/tests/atomic.rs\n++++ b/library/core/tests/atomic.rs\n+@@ -145,10 +145,6 @@ fn atomic_alignment() {\n+     assert_eq!(align_of::<AtomicU64>(), size_of::<AtomicU64>());\n+     #[cfg(target_has_atomic = \"64\")]\n+     assert_eq!(align_of::<AtomicI64>(), size_of::<AtomicI64>());\n+-    #[cfg(target_has_atomic = \"128\")]\n+-    assert_eq!(align_of::<AtomicU128>(), size_of::<AtomicU128>());\n+-    #[cfg(target_has_atomic = \"128\")]\n+-    assert_eq!(align_of::<AtomicI128>(), size_of::<AtomicI128>());\n+     #[cfg(target_has_atomic = \"ptr\")]\n+     assert_eq!(align_of::<AtomicUsize>(), size_of::<AtomicUsize>());\n+     #[cfg(target_has_atomic = \"ptr\")]\n+diff --git a/library/std/src/panic.rs b/library/std/src/panic.rs\n+index 89a822a..779fd88 100644\n+--- a/library/std/src/panic.rs\n++++ b/library/std/src/panic.rs\n+@@ -279,9 +279,6 @@ impl RefUnwindSafe for atomic::AtomicI32 {}\n+ #[cfg(target_has_atomic_load_store = \"64\")]\n+ #[stable(feature = \"integer_atomics_stable\", since = \"1.34.0\")]\n+ impl RefUnwindSafe for atomic::AtomicI64 {}\n+-#[cfg(target_has_atomic_load_store = \"128\")]\n+-#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n+-impl RefUnwindSafe for atomic::AtomicI128 {}\n+ \n+ #[cfg(target_has_atomic_load_store = \"ptr\")]\n+ #[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n+@@ -298,9 +295,6 @@ impl RefUnwindSafe for atomic::AtomicU32 {}\n+ #[cfg(target_has_atomic_load_store = \"64\")]\n+ #[stable(feature = \"integer_atomics_stable\", since = \"1.34.0\")]\n+ impl RefUnwindSafe for atomic::AtomicU64 {}\n+-#[cfg(target_has_atomic_load_store = \"128\")]\n+-#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n+-impl RefUnwindSafe for atomic::AtomicU128 {}\n+ \n+ #[cfg(target_has_atomic_load_store = \"8\")]\n+ #[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n+-- \n+2.26.2.7.g19db9cfb68\n+"}]}