{"sha": "b304e60131a081930382a6bf327aa11c6432698c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMDRlNjAxMzFhMDgxOTMwMzgyYTZiZjMyN2FhMTFjNjQzMjY5OGM=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-07T15:21:17Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-17T13:30:45Z"}, "message": "Remove Handler::{emit, emit_with_code}", "tree": {"sha": "6c49e17ecc26fd14a62754adfc48188480ac6870", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c49e17ecc26fd14a62754adfc48188480ac6870"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b304e60131a081930382a6bf327aa11c6432698c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b304e60131a081930382a6bf327aa11c6432698c", "html_url": "https://github.com/rust-lang/rust/commit/b304e60131a081930382a6bf327aa11c6432698c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b304e60131a081930382a6bf327aa11c6432698c/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "998df0d70b0c837d52a1c8100773409390df840c", "url": "https://api.github.com/repos/rust-lang/rust/commits/998df0d70b0c837d52a1c8100773409390df840c", "html_url": "https://github.com/rust-lang/rust/commit/998df0d70b0c837d52a1c8100773409390df840c"}], "stats": {"total": 93, "additions": 40, "deletions": 53}, "files": [{"sha": "afaea54006018f8ce4e9453125d226e65dbb623a", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b304e60131a081930382a6bf327aa11c6432698c/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b304e60131a081930382a6bf327aa11c6432698c/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=b304e60131a081930382a6bf327aa11c6432698c", "patch": "@@ -1394,7 +1394,7 @@ pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n             Box::new(JsonEmitter::basic(pretty, json_rendered, false)),\n     };\n     let handler = errors::Handler::with_emitter(true, None, emitter);\n-    handler.emit(&MultiSpan::new(), msg, errors::Level::Fatal);\n+    handler.struct_fatal(msg).emit();\n     errors::FatalError.raise();\n }\n \n@@ -1408,7 +1408,7 @@ pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n             Box::new(JsonEmitter::basic(pretty, json_rendered, false)),\n     };\n     let handler = errors::Handler::with_emitter(true, None, emitter);\n-    handler.emit(&MultiSpan::new(), msg, errors::Level::Warning);\n+    handler.struct_warn(msg).emit();\n }\n \n pub type CompileResult = Result<(), ErrorReported>;"}, {"sha": "1bba479c1fd5db7f0dc37aaf3fff25308c605e22", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b304e60131a081930382a6bf327aa11c6432698c/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b304e60131a081930382a6bf327aa11c6432698c/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=b304e60131a081930382a6bf327aa11c6432698c", "patch": "@@ -27,7 +27,6 @@ use rustc_errors::emitter::{Emitter};\n use rustc_target::spec::MergeFunctions;\n use syntax::attr;\n use syntax::ext::hygiene::ExpnId;\n-use syntax_pos::MultiSpan;\n use syntax_pos::symbol::{Symbol, sym};\n use jobserver::{Client, Acquired};\n \n@@ -1760,19 +1759,12 @@ impl SharedEmitterMain {\n             match message {\n                 Ok(SharedEmitterMessage::Diagnostic(diag)) => {\n                     let handler = sess.diagnostic();\n-                    match diag.code {\n-                        Some(ref code) => {\n-                            handler.emit_with_code(&MultiSpan::new(),\n-                                                   &diag.msg,\n-                                                   code.clone(),\n-                                                   diag.lvl);\n-                        }\n-                        None => {\n-                            handler.emit(&MultiSpan::new(),\n-                                         &diag.msg,\n-                                         diag.lvl);\n-                        }\n+                    let mut d = rustc_errors::Diagnostic::new(diag.lvl, &diag.msg);\n+                    if let Some(code) = diag.code {\n+                        d.code(code);\n                     }\n+                    handler.emit_diagnostic(&d);\n+                    handler.abort_if_errors_and_should_abort();\n                 }\n                 Ok(SharedEmitterMessage::InlineAsmError(cookie, msg)) => {\n                     sess.span_err(ExpnId::from_u32(cookie).expn_data().call_site, &msg)"}, {"sha": "f99e65b4494a7f136c7eb91c7994573cb1d8d66d", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b304e60131a081930382a6bf327aa11c6432698c/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b304e60131a081930382a6bf327aa11c6432698c/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=b304e60131a081930382a6bf327aa11c6432698c", "patch": "@@ -66,7 +66,7 @@ use syntax::source_map::FileLoader;\n use syntax::feature_gate::{GatedCfg, UnstableFeatures};\n use syntax::parse::{self, PResult};\n use syntax::symbol::sym;\n-use syntax_pos::{DUMMY_SP, MultiSpan, FileName};\n+use syntax_pos::{DUMMY_SP, FileName};\n \n pub mod pretty;\n mod args;\n@@ -1203,9 +1203,9 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     // a .span_bug or .bug call has already printed what\n     // it wants to print.\n     if !info.payload().is::<errors::ExplicitBug>() {\n-        handler.emit(&MultiSpan::new(),\n-                     \"unexpected panic\",\n-                     errors::Level::Bug);\n+        let d = errors::Diagnostic::new(errors::Level::Bug, \"unexpected panic\");\n+        handler.emit_diagnostic(&d);\n+        handler.abort_if_errors_and_should_abort();\n     }\n \n     let mut xs: Vec<Cow<'static, str>> = vec![\n@@ -1225,9 +1225,7 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     }\n \n     for note in &xs {\n-        handler.emit(&MultiSpan::new(),\n-                     note,\n-                     errors::Level::Note);\n+        handler.note_without_error(&note);\n     }\n \n     // If backtraces are enabled, also print the query stack"}, {"sha": "b74a6035032fada69549e97b990932b9317fc801", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 28, "deletions": 31, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/b304e60131a081930382a6bf327aa11c6432698c/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b304e60131a081930382a6bf327aa11c6432698c/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=b304e60131a081930382a6bf327aa11c6432698c", "patch": "@@ -539,19 +539,22 @@ impl Handler {\n     }\n \n     pub fn span_fatal<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> FatalError {\n-        self.emit(&sp.into(), msg, Fatal);\n+        self.emit_diagnostic(Diagnostic::new(Fatal, msg).set_span(sp));\n+        self.abort_if_errors_and_should_abort();\n         FatalError\n     }\n     pub fn span_fatal_with_code<S: Into<MultiSpan>>(&self,\n                                                     sp: S,\n                                                     msg: &str,\n                                                     code: DiagnosticId)\n                                                     -> FatalError {\n-        self.emit_with_code(&sp.into(), msg, code, Fatal);\n+        self.emit_diagnostic(Diagnostic::new_with_code(Fatal, Some(code), msg).set_span(sp));\n+        self.abort_if_errors_and_should_abort();\n         FatalError\n     }\n     pub fn span_err<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n-        self.emit(&sp.into(), msg, Error);\n+        self.emit_diagnostic(Diagnostic::new(Error, msg).set_span(sp));\n+        self.abort_if_errors_and_should_abort();\n     }\n     pub fn mut_span_err<S: Into<MultiSpan>>(&self,\n                                             sp: S,\n@@ -562,16 +565,20 @@ impl Handler {\n         result\n     }\n     pub fn span_err_with_code<S: Into<MultiSpan>>(&self, sp: S, msg: &str, code: DiagnosticId) {\n-        self.emit_with_code(&sp.into(), msg, code, Error);\n+        self.emit_diagnostic(Diagnostic::new_with_code(Error, Some(code), msg).set_span(sp));\n+        self.abort_if_errors_and_should_abort();\n     }\n     pub fn span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n-        self.emit(&sp.into(), msg, Warning);\n+        self.emit_diagnostic(Diagnostic::new(Warning, msg).set_span(sp));\n+        self.abort_if_errors_and_should_abort();\n     }\n     pub fn span_warn_with_code<S: Into<MultiSpan>>(&self, sp: S, msg: &str, code: DiagnosticId) {\n-        self.emit_with_code(&sp.into(), msg, code, Warning);\n+        self.emit_diagnostic(Diagnostic::new_with_code(Warning, Some(code), msg).set_span(sp));\n+        self.abort_if_errors_and_should_abort();\n     }\n     pub fn span_bug<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ! {\n-        self.emit(&sp.into(), msg, Bug);\n+        self.emit_diagnostic(Diagnostic::new(Bug, msg).set_span(sp));\n+        self.abort_if_errors_and_should_abort();\n         panic!(ExplicitBug);\n     }\n     pub fn delay_span_bug<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n@@ -590,10 +597,12 @@ impl Handler {\n         self.delayed_span_bugs.borrow_mut().push(diagnostic);\n     }\n     pub fn span_bug_no_panic<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n-        self.emit(&sp.into(), msg, Bug);\n+        self.emit_diagnostic(Diagnostic::new(Bug, msg).set_span(sp));\n+        self.abort_if_errors_and_should_abort();\n     }\n     pub fn span_note_without_error<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n-        self.emit(&sp.into(), msg, Note);\n+        self.emit_diagnostic(Diagnostic::new(Note, msg).set_span(sp));\n+        self.abort_if_errors_and_should_abort();\n     }\n     pub fn span_note_diag(&self,\n                           sp: Span,\n@@ -701,31 +710,15 @@ impl Handler {\n         }\n     }\n \n-    pub fn abort_if_errors(&self) {\n-        if self.has_errors() {\n+    pub fn abort_if_errors_and_should_abort(&self) {\n+        if self.has_errors() && !self.continue_after_error.load(SeqCst) {\n             FatalError.raise();\n         }\n     }\n-    pub fn emit(&self, msp: &MultiSpan, msg: &str, lvl: Level) {\n-        if lvl == Warning && !self.flags.can_emit_warnings {\n-            return;\n-        }\n-        let mut db = DiagnosticBuilder::new(self, lvl, msg);\n-        db.set_span(msp.clone());\n-        db.emit();\n-        if !self.continue_after_error.load(SeqCst) {\n-            self.abort_if_errors();\n-        }\n-    }\n-    pub fn emit_with_code(&self, msp: &MultiSpan, msg: &str, code: DiagnosticId, lvl: Level) {\n-        if lvl == Warning && !self.flags.can_emit_warnings {\n-            return;\n-        }\n-        let mut db = DiagnosticBuilder::new_with_code(self, lvl, Some(code), msg);\n-        db.set_span(msp.clone());\n-        db.emit();\n-        if !self.continue_after_error.load(SeqCst) {\n-            self.abort_if_errors();\n+\n+    pub fn abort_if_errors(&self) {\n+        if self.has_errors() {\n+            FatalError.raise();\n         }\n     }\n \n@@ -747,6 +740,10 @@ impl Handler {\n             return;\n         }\n \n+        if diagnostic.level == Warning && !self.flags.can_emit_warnings {\n+            return;\n+        }\n+\n         TRACK_DIAGNOSTICS.with(|track_diagnostics| {\n             track_diagnostics.get()(diagnostic);\n         });"}]}