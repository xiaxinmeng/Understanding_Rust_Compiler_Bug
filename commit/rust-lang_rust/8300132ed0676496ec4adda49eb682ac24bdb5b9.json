{"sha": "8300132ed0676496ec4adda49eb682ac24bdb5b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzMDAxMzJlZDA2NzY0OTZlYzRhZGRhNDllYjY4MmFjMjRiZGI1Yjk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-20T21:50:29Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-20T21:50:42Z"}, "message": "More snippets", "tree": {"sha": "f261a04d3ab18c2c424f7933b8ee7dc4df0787c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f261a04d3ab18c2c424f7933b8ee7dc4df0787c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8300132ed0676496ec4adda49eb682ac24bdb5b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8300132ed0676496ec4adda49eb682ac24bdb5b9", "html_url": "https://github.com/rust-lang/rust/commit/8300132ed0676496ec4adda49eb682ac24bdb5b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8300132ed0676496ec4adda49eb682ac24bdb5b9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4677cea71994a593d56052767f625f46fd2e4a83", "url": "https://api.github.com/repos/rust-lang/rust/commits/4677cea71994a593d56052767f625f46fd2e4a83", "html_url": "https://github.com/rust-lang/rust/commit/4677cea71994a593d56052767f625f46fd2e4a83"}], "stats": {"total": 40, "additions": 17, "deletions": 23}, "files": [{"sha": "e016f51c3eb490883dfe4a5563b525e17134f2cf", "filename": "crates/ra_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8300132ed0676496ec4adda49eb682ac24bdb5b9/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8300132ed0676496ec4adda49eb682ac24bdb5b9/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=8300132ed0676496ec4adda49eb682ac24bdb5b9", "patch": "@@ -68,7 +68,6 @@ pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext)\n                 .indent(IndentLevel::from_node(if_expr.syntax()))\n         };\n \n-        edit.set_cursor(if_expr.syntax().text_range().start());\n         edit.replace_ast::<ast::Expr>(if_expr.into(), match_expr);\n     })\n }\n@@ -83,7 +82,7 @@ mod tests {\n     fn test_replace_if_let_with_match_unwraps_simple_expressions() {\n         check_assist(\n             replace_if_let_with_match,\n-            \"\n+            r#\"\n impl VariantData {\n     pub fn is_struct(&self) -> bool {\n         if <|>let VariantData::Struct(..) = *self {\n@@ -92,24 +91,24 @@ impl VariantData {\n             false\n         }\n     }\n-}           \",\n-            \"\n+}           \"#,\n+            r#\"\n impl VariantData {\n     pub fn is_struct(&self) -> bool {\n-        <|>match *self {\n+        match *self {\n             VariantData::Struct(..) => true,\n             _ => false,\n         }\n     }\n-}           \",\n+}           \"#,\n         )\n     }\n \n     #[test]\n     fn test_replace_if_let_with_match_doesnt_unwrap_multiline_expressions() {\n         check_assist(\n             replace_if_let_with_match,\n-            \"\n+            r#\"\n fn foo() {\n     if <|>let VariantData::Struct(..) = a {\n         bar(\n@@ -118,26 +117,26 @@ fn foo() {\n     } else {\n         false\n     }\n-}           \",\n-            \"\n+}           \"#,\n+            r#\"\n fn foo() {\n-    <|>match a {\n+    match a {\n         VariantData::Struct(..) => {\n             bar(\n                 123\n             )\n         }\n         _ => false,\n     }\n-}           \",\n+}           \"#,\n         )\n     }\n \n     #[test]\n     fn replace_if_let_with_match_target() {\n         check_assist_target(\n             replace_if_let_with_match,\n-            \"\n+            r#\"\n impl VariantData {\n     pub fn is_struct(&self) -> bool {\n         if <|>let VariantData::Struct(..) = *self {\n@@ -146,7 +145,7 @@ impl VariantData {\n             false\n         }\n     }\n-}           \",\n+}           \"#,\n             \"if let VariantData::Struct(..) = *self {\n             true\n         } else {\n@@ -176,7 +175,7 @@ enum Option<T> { Some(T), None }\n use Option::*;\n \n fn foo(x: Option<i32>) {\n-    <|>match x {\n+    match x {\n         Some(x) => println!(\"{}\", x),\n         None => println!(\"none\"),\n     }\n@@ -206,7 +205,7 @@ enum Result<T, E> { Ok(T), Err(E) }\n use Result::*;\n \n fn foo(x: Result<i32, ()>) {\n-    <|>match x {\n+    match x {\n         Ok(x) => println!(\"{}\", x),\n         Err(_) => println!(\"none\"),\n     }"}, {"sha": "761557ac05c8c5813b323c7b3bc193ae437c0571", "filename": "crates/ra_assists/src/handlers/replace_let_with_if_let.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8300132ed0676496ec4adda49eb682ac24bdb5b9/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8300132ed0676496ec4adda49eb682ac24bdb5b9/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_let_with_if_let.rs?ref=8300132ed0676496ec4adda49eb682ac24bdb5b9", "patch": "@@ -58,12 +58,9 @@ pub(crate) fn replace_let_with_if_let(acc: &mut Assists, ctx: &AssistContext) ->\n         let stmt = make::expr_stmt(if_);\n \n         let placeholder = stmt.syntax().descendants().find_map(ast::PlaceholderPat::cast).unwrap();\n-        let target_offset =\n-            let_stmt.syntax().text_range().start() + placeholder.syntax().text_range().start();\n         let stmt = stmt.replace_descendant(placeholder.into(), original_pat);\n \n         edit.replace_ast(ast::Stmt::from(let_stmt), ast::Stmt::from(stmt));\n-        edit.set_cursor(target_offset);\n     })\n }\n \n@@ -88,7 +85,7 @@ fn main() {\n enum E<T> { X(T), Y(T) }\n \n fn main() {\n-    if let <|>x = E::X(92) {\n+    if let x = E::X(92) {\n     }\n }\n             \","}, {"sha": "c7a8744802dccb6ac7ad1b055dc4c6626f2b15f3", "filename": "crates/ra_assists/src/handlers/split_import.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8300132ed0676496ec4adda49eb682ac24bdb5b9/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8300132ed0676496ec4adda49eb682ac24bdb5b9/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fsplit_import.rs?ref=8300132ed0676496ec4adda49eb682ac24bdb5b9", "patch": "@@ -26,12 +26,10 @@ pub(crate) fn split_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     if new_tree == use_tree {\n         return None;\n     }\n-    let cursor = ctx.offset();\n \n     let target = colon_colon.text_range();\n     acc.add(AssistId(\"split_import\"), \"Split import\", target, |edit| {\n         edit.replace_ast(use_tree, new_tree);\n-        edit.set_cursor(cursor);\n     })\n }\n \n@@ -46,7 +44,7 @@ mod tests {\n         check_assist(\n             split_import,\n             \"use crate::<|>db::RootDatabase;\",\n-            \"use crate::<|>{db::RootDatabase};\",\n+            \"use crate::{db::RootDatabase};\",\n         )\n     }\n \n@@ -55,7 +53,7 @@ mod tests {\n         check_assist(\n             split_import,\n             \"use crate:<|>:db::{RootDatabase, FileSymbol}\",\n-            \"use crate:<|>:{db::{RootDatabase, FileSymbol}}\",\n+            \"use crate::{db::{RootDatabase, FileSymbol}}\",\n         )\n     }\n "}]}