{"sha": "1a6c1e5d3238cd9817e72006735b59a578e0ac13", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNmMxZTVkMzIzOGNkOTgxN2U3MjAwNjczNWI1OWE1NzhlMGFjMTM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T22:08:42Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:36Z"}, "message": "librustc: De-`@mut` `Liveness::successors`", "tree": {"sha": "b0ebc4f6c7319ad40dced35fa9be33886272adbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0ebc4f6c7319ad40dced35fa9be33886272adbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a6c1e5d3238cd9817e72006735b59a578e0ac13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a6c1e5d3238cd9817e72006735b59a578e0ac13", "html_url": "https://github.com/rust-lang/rust/commit/1a6c1e5d3238cd9817e72006735b59a578e0ac13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a6c1e5d3238cd9817e72006735b59a578e0ac13/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89dfd00dcf8016447143e985dbbd812dba4c1b3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/89dfd00dcf8016447143e985dbbd812dba4c1b3a", "html_url": "https://github.com/rust-lang/rust/commit/89dfd00dcf8016447143e985dbbd812dba4c1b3a"}], "stats": {"total": 35, "additions": 27, "deletions": 8}, "files": [{"sha": "7b83279385ed8a7cbde31887882b8336e0f9b059", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1a6c1e5d3238cd9817e72006735b59a578e0ac13/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6c1e5d3238cd9817e72006735b59a578e0ac13/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=1a6c1e5d3238cd9817e72006735b59a578e0ac13", "patch": "@@ -590,7 +590,7 @@ pub struct Liveness {\n     tcx: ty::ctxt,\n     ir: @IrMaps,\n     s: Specials,\n-    successors: @mut ~[LiveNode],\n+    successors: @RefCell<~[LiveNode]>,\n     users: @mut ~[Users],\n     // The list of node IDs for the nested loop scopes\n     // we're in.\n@@ -607,8 +607,8 @@ fn Liveness(ir: @IrMaps, specials: Specials) -> Liveness {\n         ir: ir,\n         tcx: ir.tcx,\n         s: specials,\n-        successors: @mut vec::from_elem(ir.num_live_nodes.get(),\n-                                        invalid_node()),\n+        successors: @RefCell::new(vec::from_elem(ir.num_live_nodes.get(),\n+                                                 invalid_node())),\n         users: @mut vec::from_elem(ir.num_live_nodes.get() *\n                                    ir.num_vars.get(),\n                                    invalid_users()),\n@@ -694,7 +694,11 @@ impl Liveness {\n     */\n     pub fn live_on_exit(&self, ln: LiveNode, var: Variable)\n                         -> Option<LiveNodeKind> {\n-        self.live_on_entry(self.successors[*ln], var)\n+        let successor = {\n+            let successors = self.successors.borrow();\n+            successors.get()[*ln]\n+        };\n+        self.live_on_entry(successor, var)\n     }\n \n     pub fn used_on_entry(&self, ln: LiveNode, var: Variable) -> bool {\n@@ -711,7 +715,11 @@ impl Liveness {\n \n     pub fn assigned_on_exit(&self, ln: LiveNode, var: Variable)\n                             -> Option<LiveNodeKind> {\n-        self.assigned_on_entry(self.successors[*ln], var)\n+        let successor = {\n+            let successors = self.successors.borrow();\n+            successors.get()[*ln]\n+        };\n+        self.assigned_on_entry(successor, var)\n     }\n \n     pub fn indices2(&self,\n@@ -782,12 +790,19 @@ impl Liveness {\n             self.write_vars(wr, ln, |idx| self.users[idx].reader);\n             write!(wr, \"  writes\");\n             self.write_vars(wr, ln, |idx| self.users[idx].writer);\n-            write!(wr, \"  precedes {}]\", self.successors[*ln].to_str());\n+            let successor = {\n+                let successors = self.successors.borrow();\n+                successors.get()[*ln]\n+            };\n+            write!(wr, \"  precedes {}]\", successor.to_str());\n         }))\n     }\n \n     pub fn init_empty(&self, ln: LiveNode, succ_ln: LiveNode) {\n-        self.successors[*ln] = succ_ln;\n+        {\n+            let mut successors = self.successors.borrow_mut();\n+            successors.get()[*ln] = succ_ln;\n+        }\n \n         // It is not necessary to initialize the\n         // values to empty because this is the value\n@@ -801,7 +816,11 @@ impl Liveness {\n \n     pub fn init_from_succ(&self, ln: LiveNode, succ_ln: LiveNode) {\n         // more efficient version of init_empty() / merge_from_succ()\n-        self.successors[*ln] = succ_ln;\n+        {\n+            let mut successors = self.successors.borrow_mut();\n+            successors.get()[*ln] = succ_ln;\n+        }\n+\n         self.indices2(ln, succ_ln, |idx, succ_idx| {\n             self.users[idx] = self.users[succ_idx]\n         });"}]}