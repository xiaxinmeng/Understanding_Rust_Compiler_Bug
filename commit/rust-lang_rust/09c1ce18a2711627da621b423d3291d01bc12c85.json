{"sha": "09c1ce18a2711627da621b423d3291d01bc12c85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5YzFjZTE4YTI3MTE2MjdkYTYyMWI0MjNkMzI5MWQwMWJjMTJjODU=", "commit": {"author": {"name": "Simon Mazur", "email": "semmaz.box@gmail.com", "date": "2015-09-19T01:43:59Z"}, "committer": {"name": "Simon Mazur", "email": "semmaz.box@gmail.com", "date": "2015-09-20T10:24:47Z"}, "message": "rustdoc: added tests for header rendering & minor fixes", "tree": {"sha": "59ccd55cae5bc7428d7bbd2d57b2b6bed5d07c80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59ccd55cae5bc7428d7bbd2d57b2b6bed5d07c80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09c1ce18a2711627da621b423d3291d01bc12c85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09c1ce18a2711627da621b423d3291d01bc12c85", "html_url": "https://github.com/rust-lang/rust/commit/09c1ce18a2711627da621b423d3291d01bc12c85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09c1ce18a2711627da621b423d3291d01bc12c85/comments", "author": {"login": "semmaz", "id": 3989426, "node_id": "MDQ6VXNlcjM5ODk0MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3989426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/semmaz", "html_url": "https://github.com/semmaz", "followers_url": "https://api.github.com/users/semmaz/followers", "following_url": "https://api.github.com/users/semmaz/following{/other_user}", "gists_url": "https://api.github.com/users/semmaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/semmaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/semmaz/subscriptions", "organizations_url": "https://api.github.com/users/semmaz/orgs", "repos_url": "https://api.github.com/users/semmaz/repos", "events_url": "https://api.github.com/users/semmaz/events{/privacy}", "received_events_url": "https://api.github.com/users/semmaz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "semmaz", "id": 3989426, "node_id": "MDQ6VXNlcjM5ODk0MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3989426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/semmaz", "html_url": "https://github.com/semmaz", "followers_url": "https://api.github.com/users/semmaz/followers", "following_url": "https://api.github.com/users/semmaz/following{/other_user}", "gists_url": "https://api.github.com/users/semmaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/semmaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/semmaz/subscriptions", "organizations_url": "https://api.github.com/users/semmaz/orgs", "repos_url": "https://api.github.com/users/semmaz/repos", "events_url": "https://api.github.com/users/semmaz/events{/privacy}", "received_events_url": "https://api.github.com/users/semmaz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6f0a21e207612b0064fdd93f2ae9338f839f1f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6f0a21e207612b0064fdd93f2ae9338f839f1f7", "html_url": "https://github.com/rust-lang/rust/commit/d6f0a21e207612b0064fdd93f2ae9338f839f1f7"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "f68e82501e91ea4d9123b85d25933553edf4da86", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/09c1ce18a2711627da621b423d3291d01bc12c85/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c1ce18a2711627da621b423d3291d01bc12c85/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=09c1ce18a2711627da621b423d3291d01bc12c85", "patch": "@@ -289,6 +289,7 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n         // html for text rather than the raw text.\n         let mut id = s.clone();\n         let repl_sub = vec![\"<em>\", \"</em>\", \"<code>\", \"</code>\",\n+                            \"<strong>\", \"</strong>\",\n                             \"&lt;\", \"&gt;\", \"&amp;\", \"&#39;\", \"&quot;\"];\n         for sub in repl_sub {\n             id = id.replace(sub, \"\");\n@@ -326,8 +327,8 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n         });\n \n         // Render the HTML\n-        let text = format!(r##\"<h{lvl} id=\"{id}\" class='section-header'><a\n-                           href=\"#{id}\">{sec}{}</a></h{lvl}>\"##,\n+        let text = format!(\"<h{lvl} id='{id}' class='section-header'>\\\n+                           <a href='#{id}'>{sec}{}</a></h{lvl}>\",\n                            s, lvl = level, id = id, sec = sec);\n \n         let text = CString::new(text).unwrap();\n@@ -612,6 +613,27 @@ mod tests {\n         format!(\"{}\", Markdown(markdown));\n     }\n \n+    #[test]\n+    fn test_header() {\n+        fn t(input: &str, expect: &str) {\n+            let output = format!(\"{}\", Markdown(input));\n+            assert_eq!(output, expect);\n+        }\n+\n+        t(\"# Foo bar\", \"\\n<h1 id='foo-bar' class='section-header'>\\\n+          <a href='#foo-bar'>Foo bar</a></h1>\");\n+        t(\"## Foo-bar_baz qux\", \"\\n<h2 id='foo-bar_baz-qux' class=\\'section-\\\n+          header'><a href='#foo-bar_baz-qux'>Foo-bar_baz qux</a></h2>\");\n+        t(\"### **Foo** *bar* baz!?!& -_qux_-%\",\n+          \"\\n<h3 id='foo-bar-baz--_qux_-' class='section-header'>\\\n+          <a href='#foo-bar-baz--_qux_-'><strong>Foo</strong> \\\n+          <em>bar</em> baz!?!&amp; -_qux_-%</a></h3>\");\n+        t(\"####**Foo?** & \\\\*bar?!*  _`baz`_ \u2764 #qux\",\n+          \"\\n<h4 id='foo--bar--baz--qux' class='section-header'>\\\n+          <a href='#foo--bar--baz--qux'><strong>Foo?</strong> &amp; *bar?!*  \\\n+          <em><code>baz</code></em> \u2764 #qux</a></h4>\");\n+    }\n+\n     #[test]\n     fn test_plain_summary_line() {\n         fn t(input: &str, expect: &str) {"}]}