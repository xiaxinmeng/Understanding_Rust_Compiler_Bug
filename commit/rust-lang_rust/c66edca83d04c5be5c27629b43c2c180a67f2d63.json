{"sha": "c66edca83d04c5be5c27629b43c2c180a67f2d63", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NmVkY2E4M2QwNGM1YmU1YzI3NjI5YjQzYzJjMTgwYTY3ZjJkNjM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-01T02:12:40Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-01T02:12:40Z"}, "message": "rustc: Add a type annotation to tag items", "tree": {"sha": "37db28b65567fd8c067c82d1917878181a69c0f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37db28b65567fd8c067c82d1917878181a69c0f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c66edca83d04c5be5c27629b43c2c180a67f2d63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c66edca83d04c5be5c27629b43c2c180a67f2d63", "html_url": "https://github.com/rust-lang/rust/commit/c66edca83d04c5be5c27629b43c2c180a67f2d63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c66edca83d04c5be5c27629b43c2c180a67f2d63/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1eeedbd00865fbc8c2650b8e2feba0b6e7f290dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1eeedbd00865fbc8c2650b8e2feba0b6e7f290dc", "html_url": "https://github.com/rust-lang/rust/commit/1eeedbd00865fbc8c2650b8e2feba0b6e7f290dc"}], "stats": {"total": 71, "additions": 35, "deletions": 36}, "files": [{"sha": "0bd183828b9d29cc3e026edd76d430a925e19850", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c66edca83d04c5be5c27629b43c2c180a67f2d63/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66edca83d04c5be5c27629b43c2c180a67f2d63/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=c66edca83d04c5be5c27629b43c2c180a67f2d63", "patch": "@@ -404,7 +404,7 @@ tag item_ {\n     item_mod(ident, _mod, def_id);\n     item_native_mod(ident, native_mod, def_id);\n     item_ty(ident, @ty, vec[ty_param], def_id, ann);\n-    item_tag(ident, vec[variant], vec[ty_param], def_id);\n+    item_tag(ident, vec[variant], vec[ty_param], def_id, ann);\n     item_obj(ident, _obj, vec[ty_param], obj_def_ids, ann);\n }\n \n@@ -448,7 +448,7 @@ fn index_item(mod_index index, @item it) {\n         case (ast.item_ty(?id, _, _, _, _)) {\n             index.insert(id, ast.mie_item(it));\n         }\n-        case (ast.item_tag(?id, ?variants, _, _)) {\n+        case (ast.item_tag(?id, ?variants, _, _, _)) {\n             index.insert(id, ast.mie_item(it));\n             let uint variant_idx = 0u;\n             for (ast.variant v in variants) {\n@@ -505,7 +505,7 @@ fn index_stmt(block_index index, @stmt s) {\n                         case (ast.item_ty(?i, _, _, _, _)) {\n                             index.insert(i, ast.bie_item(it));\n                         }\n-                        case (ast.item_tag(?i, ?variants, _, _)) {\n+                        case (ast.item_tag(?i, ?variants, _, _, _)) {\n                             index.insert(i, ast.bie_item(it));\n                             let uint vid = 0u;\n                             for (ast.variant v in variants) {"}, {"sha": "f7d355a4ba625fa27978d52a455112eb60f22086", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c66edca83d04c5be5c27629b43c2c180a67f2d63/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66edca83d04c5be5c27629b43c2c180a67f2d63/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=c66edca83d04c5be5c27629b43c2c180a67f2d63", "patch": "@@ -2071,7 +2071,8 @@ impure fn parse_item_tag(parser p) -> @ast.item {\n     p.bump();\n \n     auto hi = p.get_span();\n-    auto item = ast.item_tag(id, variants, ty_params, p.next_def_id());\n+    auto item = ast.item_tag(id, variants, ty_params, p.next_def_id(),\n+                             ast.ann_none);\n     ret @spanned(lo, hi, item);\n }\n "}, {"sha": "8138d1a3dc9d674e62af513167c074588b56c49a", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c66edca83d04c5be5c27629b43c2c180a67f2d63/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66edca83d04c5be5c27629b43c2c180a67f2d63/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=c66edca83d04c5be5c27629b43c2c180a67f2d63", "patch": "@@ -269,7 +269,7 @@ type ast_fold[ENV] =\n      (fn(&ENV e, &span sp, ident ident,\n          vec[ast.variant] variants,\n          vec[ast.ty_param] ty_params,\n-         def_id id) -> @item)                     fold_item_tag,\n+         def_id id, ann a) -> @item)              fold_item_tag,\n \n      (fn(&ENV e, &span sp, ident ident,\n          &ast._obj ob,\n@@ -971,7 +971,7 @@ fn fold_item[ENV](&ENV env, ast_fold[ENV] fld, @item i) -> @item {\n             ret fld.fold_item_ty(env_, i.span, ident, ty_, params, id, ann);\n         }\n \n-        case (ast.item_tag(?ident, ?variants, ?ty_params, ?id)) {\n+        case (ast.item_tag(?ident, ?variants, ?ty_params, ?id, ?ann)) {\n             let vec[ast.variant] new_variants = vec();\n             for (ast.variant v in variants) {\n                 let vec[ast.variant_arg] new_args = vec();\n@@ -984,7 +984,7 @@ fn fold_item[ENV](&ENV env, ast_fold[ENV] fld, @item i) -> @item {\n                 new_variants += vec(respan[ast.variant_](v.span, new_v));\n             }\n             ret fld.fold_item_tag(env_, i.span, ident, new_variants,\n-                                  ty_params, id);\n+                                  ty_params, id, ann);\n         }\n \n         case (ast.item_obj(?ident, ?ob, ?tps, ?odid, ?ann)) {\n@@ -1440,8 +1440,8 @@ fn identity_fold_native_item_ty[ENV](&ENV e, &span sp, ident i,\n fn identity_fold_item_tag[ENV](&ENV e, &span sp, ident i,\n                                vec[ast.variant] variants,\n                                vec[ast.ty_param] ty_params,\n-                               def_id id) -> @item {\n-    ret @respan(sp, ast.item_tag(i, variants, ty_params, id));\n+                               def_id id, ann a) -> @item {\n+    ret @respan(sp, ast.item_tag(i, variants, ty_params, id, a));\n }\n \n fn identity_fold_item_obj[ENV](&ENV e, &span sp, ident i,\n@@ -1654,7 +1654,7 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_item_ty   = bind identity_fold_item_ty[ENV](_,_,_,_,_,_,_),\n          fold_native_item_ty =\n              bind identity_fold_native_item_ty[ENV](_,_,_,_),\n-         fold_item_tag  = bind identity_fold_item_tag[ENV](_,_,_,_,_,_),\n+         fold_item_tag  = bind identity_fold_item_tag[ENV](_,_,_,_,_,_,_),\n          fold_item_obj  = bind identity_fold_item_obj[ENV](_,_,_,_,_,_,_),\n \n          fold_view_item_use ="}, {"sha": "c42ed6dbade8b21664e147426393a918b1ffcf92", "filename": "src/comp/middle/metadata.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c66edca83d04c5be5c27629b43c2c180a67f2d63/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66edca83d04c5be5c27629b43c2c180a67f2d63/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fmetadata.rs?ref=c66edca83d04c5be5c27629b43c2c180a67f2d63", "patch": "@@ -262,7 +262,7 @@ fn encode_module_item_paths(&ebml.writer ebml_w,\n                 encode_def_id(ebml_w, did);\n                 ebml.end_tag(ebml_w);\n             }\n-            case (ast.item_tag(?id, ?variants, ?tps, ?did)) {\n+            case (ast.item_tag(?id, ?variants, ?tps, ?did, _)) {\n                 add_to_index(ebml_w, path, index, id);\n                 ebml.start_tag(ebml_w, tag_paths_data_item);\n                 encode_name(ebml_w, id);\n@@ -403,11 +403,12 @@ fn encode_info_for_item(@trans.crate_ctxt cx, &ebml.writer ebml_w,\n             encode_type(ebml_w, trans.node_ann_type(cx, ann));\n             ebml.end_tag(ebml_w);\n         }\n-        case (ast.item_tag(?id, ?variants, ?tps, ?did)) {\n+        case (ast.item_tag(?id, ?variants, ?tps, ?did, ?ann)) {\n             ebml.start_tag(ebml_w, tag_items_data_item);\n             encode_def_id(ebml_w, did);\n             encode_kind(ebml_w, 't' as u8);\n             encode_type_params(ebml_w, tps);\n+            encode_type(ebml_w, trans.node_ann_type(cx, ann));\n             ebml.end_tag(ebml_w);\n \n             encode_tag_variant_info(cx, ebml_w, did, variants);"}, {"sha": "20e60971dca77b80d8157459d903e7a86c6b71ae", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c66edca83d04c5be5c27629b43c2c180a67f2d63/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66edca83d04c5be5c27629b43c2c180a67f2d63/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=c66edca83d04c5be5c27629b43c2c180a67f2d63", "patch": "@@ -319,7 +319,7 @@ fn lookup_name_wrapped(&env e, ast.ident i, namespace ns)\n             case (ast.item_ty(_, _, _, ?id, _)) {\n                 ret def_wrap_other(ast.def_ty(id));\n             }\n-            case (ast.item_tag(_, _, _, ?id)) {\n+            case (ast.item_tag(_, _, _, ?id, _)) {\n                 ret def_wrap_other(ast.def_ty(id));\n             }\n             case (ast.item_obj(_, _, _, ?odid, _)) {\n@@ -388,7 +388,7 @@ fn lookup_name_wrapped(&env e, ast.ident i, namespace ns)\n                     }\n                     case (ast.mie_tag_variant(?item, ?variant_idx)) {\n                         alt (item.node) {\n-                            case (ast.item_tag(_, ?variants, _, ?tid)) {\n+                            case (ast.item_tag(_, ?variants, _, ?tid, _)) {\n                                 auto vid = variants.(variant_idx).node.id;\n                                 auto t = ast.def_variant(tid, vid);\n                                 ret some[def_wrap](def_wrap_other(t));\n@@ -445,7 +445,7 @@ fn lookup_name_wrapped(&env e, ast.ident i, namespace ns)\n \n     fn found_tag(@ast.item item, uint variant_idx) -> def_wrap {\n         alt (item.node) {\n-            case (ast.item_tag(_, ?variants, _, ?tid)) {\n+            case (ast.item_tag(_, ?variants, _, ?tid, _)) {\n                 auto vid = variants.(variant_idx).node.id;\n                 auto t = ast.def_variant(tid, vid);\n                 ret def_wrap_other(t);\n@@ -505,7 +505,7 @@ fn lookup_name_wrapped(&env e, ast.ident i, namespace ns)\n                             }\n                         }\n                     }\n-                    case (ast.item_tag(_, ?variants, ?ty_params, ?tag_id)) {\n+                    case (ast.item_tag(_,?variants,?ty_params,?tag_id,_)) {\n                         for (ast.ty_param tp in ty_params) {\n                             if (_str.eq(tp.ident, i)) {\n                                 auto t = ast.def_ty_arg(tp.id);"}, {"sha": "a945c88e2a68be64f03f530ad1abdb3bdac041b6", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c66edca83d04c5be5c27629b43c2c180a67f2d63/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66edca83d04c5be5c27629b43c2c180a67f2d63/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=c66edca83d04c5be5c27629b43c2c180a67f2d63", "patch": "@@ -1913,7 +1913,7 @@ fn tag_ty_params(@crate_ctxt cx, ast.def_id id) -> vec[ast.def_id] {\n fn tag_variants(@crate_ctxt cx, ast.def_id id) -> vec[ast.variant] {\n     check (cx.items.contains_key(id));\n     alt (cx.items.get(id).node) {\n-        case (ast.item_tag(_, ?variants, _, _)) { ret variants; }\n+        case (ast.item_tag(_, ?variants, _, _, _)) { ret variants; }\n     }\n     fail;   // not reached\n }\n@@ -3703,7 +3703,7 @@ fn trans_path(@block_ctxt cx, &ast.path p, &option.t[ast.def] dopt,\n                         auto params = ty.item_ty(tag_item)._0;\n                         auto fty = plain_ty(ty.ty_nil);\n                         alt (tag_item.node) {\n-                            case (ast.item_tag(_, ?variants, _, _)) {\n+                            case (ast.item_tag(_, ?variants, _, _, _)) {\n                                 for (ast.variant v in variants) {\n                                     if (v.node.id == vid) {\n                                         fty = node_ann_type(cx.fcx.ccx,\n@@ -5943,7 +5943,7 @@ fn trans_item(@crate_ctxt cx, &ast.item item) {\n             auto sub_cx = extend_path(cx, name);\n             trans_mod(sub_cx, m);\n         }\n-        case (ast.item_tag(?name, ?variants, ?tps, ?tag_id)) {\n+        case (ast.item_tag(?name, ?variants, ?tps, ?tag_id, _)) {\n             auto sub_cx = extend_path(cx, name);\n             auto i = 0;\n             for (ast.variant variant in variants) {\n@@ -6162,7 +6162,7 @@ fn item_name(@ast.item i) -> str {\n         case (ast.item_mod(?name, _, _)) {\n             ret name;\n         }\n-        case (ast.item_tag(?name, _, _, _)) {\n+        case (ast.item_tag(?name, _, _, _, _)) {\n             ret name;\n         }\n         case (ast.item_const(?name, _, _, _, _)) {\n@@ -6211,7 +6211,7 @@ fn collect_item(&@crate_ctxt cx, @ast.item i) -> @crate_ctxt {\n             cx.items.insert(did, i);\n         }\n \n-        case (ast.item_tag(?name, ?variants, ?tps, ?tag_id)) {\n+        case (ast.item_tag(?name, ?variants, ?tps, ?tag_id, _)) {\n             cx.items.insert(tag_id, i);\n         }\n \n@@ -6272,7 +6272,7 @@ fn collect_tag_ctor(&@crate_ctxt cx, @ast.item i) -> @crate_ctxt {\n \n     alt (i.node) {\n \n-        case (ast.item_tag(_, ?variants, ?tps, _)) {\n+        case (ast.item_tag(_, ?variants, ?tps, _, _)) {\n             for (ast.variant variant in variants) {\n                 if (_vec.len[ast.variant_arg](variant.node.args) != 0u) {\n                     decl_fn_and_pair(extend_path(cx, variant.node.name),\n@@ -6302,7 +6302,7 @@ fn collect_tag_ctors(@crate_ctxt cx, @ast.crate crate) {\n \n fn trans_constant(&@crate_ctxt cx, @ast.item it) -> @crate_ctxt {\n     alt (it.node) {\n-        case (ast.item_tag(_, ?variants, _, ?tag_id)) {\n+        case (ast.item_tag(_, ?variants, _, ?tag_id, _)) {\n             auto i = 0u;\n             auto n_variants = _vec.len[ast.variant](variants);\n             while (i < n_variants) {"}, {"sha": "829a5e5f09664ddf396e2795bdc67d6bd50c08b7", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c66edca83d04c5be5c27629b43c2c180a67f2d63/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66edca83d04c5be5c27629b43c2c180a67f2d63/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=c66edca83d04c5be5c27629b43c2c180a67f2d63", "patch": "@@ -706,14 +706,9 @@ fn item_ty(@ast.item it) -> ty_params_and_ty {\n             ty_params = tps;\n             result_ty = ann_to_type(ann);\n         }\n-        case (ast.item_tag(_, _, ?tps, ?did)) {\n-            // Create a new generic polytype.\n+        case (ast.item_tag(_, _, ?tps, ?did, ?ann)) {\n             ty_params = tps;\n-            let vec[@t] subtys = vec();\n-            for (ast.ty_param tp in tps) {\n-                subtys += vec(plain_ty(ty_param(tp.id)));\n-            }\n-            result_ty = plain_ty(ty_tag(did, subtys));\n+            result_ty = ann_to_type(ann);\n         }\n         case (ast.item_obj(_, _, ?tps, _, ?ann)) {\n             ty_params = tps;"}, {"sha": "d0481b6a64ab84c5a9e12b154e829d749d7f0ed4", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c66edca83d04c5be5c27629b43c2c180a67f2d63/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66edca83d04c5be5c27629b43c2c180a67f2d63/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=c66edca83d04c5be5c27629b43c2c180a67f2d63", "patch": "@@ -586,7 +586,7 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n                 ret tpt;\n             }\n \n-            case (ast.item_tag(_, _, ?tps, ?def_id)) {\n+            case (ast.item_tag(_, _, ?tps, ?def_id, _)) {\n                 // Create a new generic polytype.\n                 let vec[@ty.t] subtys = vec();\n                 for (ast.ty_param tp in tps) {\n@@ -694,7 +694,7 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n             case (ast.item_ty(_, _, _, ?def_id, _)) {\n                 id_to_ty_item.insert(def_id, any_item_rust(i));\n             }\n-            case (ast.item_tag(_, _, _, ?def_id)) {\n+            case (ast.item_tag(_, _, _, ?def_id, _)) {\n                 id_to_ty_item.insert(def_id, any_item_rust(i));\n             }\n             case (ast.item_obj(_, _, _, ?odid, _)) {\n@@ -870,14 +870,16 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n     fn fold_item_tag(&@env e, &span sp, ast.ident i,\n                      vec[ast.variant] variants,\n                      vec[ast.ty_param] ty_params,\n-                     ast.def_id id) -> @ast.item {\n+                     ast.def_id id, ast.ann a) -> @ast.item {\n         auto variants_t = get_tag_variant_types(e.sess,\n                                                 e.id_to_ty_item,\n                                                 e.type_cache,\n                                                 id,\n                                                 variants,\n                                                 ty_params);\n-        auto item = ast.item_tag(i, variants_t, ty_params, id);\n+        auto typ = e.type_cache.get(id)._1;\n+        auto item = ast.item_tag(i, variants_t, ty_params, id,\n+                                 ast.ann_type(typ, none[vec[@ty.t]]));\n         ret @fold.respan[ast.item_](sp, item);\n     }\n \n@@ -890,7 +892,7 @@ fn collect_item_types(session.session sess, @ast.crate crate)\n              fold_native_item_fn = bind fold_native_item_fn(_,_,_,_,_,_,_,_),\n              fold_item_obj   = bind fold_item_obj(_,_,_,_,_,_,_),\n              fold_item_ty    = bind fold_item_ty(_,_,_,_,_,_,_),\n-             fold_item_tag   = bind fold_item_tag(_,_,_,_,_,_)\n+             fold_item_tag   = bind fold_item_tag(_,_,_,_,_,_,_)\n              with *fld_2);\n     auto crate_ = fold.fold_crate[@env](e, fld_2, crate);\n     ret tup(crate_, type_cache, id_to_ty_item);"}, {"sha": "d478227ce2278d9e102232dcd7131259cfd6f916", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c66edca83d04c5be5c27629b43c2c180a67f2d63/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66edca83d04c5be5c27629b43c2c180a67f2d63/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=c66edca83d04c5be5c27629b43c2c180a67f2d63", "patch": "@@ -240,7 +240,7 @@ impure fn print_item(ps s, @ast.item item) {\n             print_type(s, ty);\n             wrd(s.s, \";\");\n         }\n-        case (ast.item_tag(?id,?variants,?params,_)) {\n+        case (ast.item_tag(?id,?variants,?params,_,_)) {\n             wrd1(s, \"tag\");\n             wrd(s.s, id);\n             print_type_params(s, params);"}]}