{"sha": "6e63f7be54d084b3ba31b3706b3a1eb36a98b43f", "node_id": "C_kwDOAAsO6NoAKDZlNjNmN2JlNTRkMDg0YjNiYTMxYjM3MDZiM2ExZWIzNmE5OGI0M2Y", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-12-21T16:32:16Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-01-12T02:28:37Z"}, "message": "attempt to make a minimal example work", "tree": {"sha": "352bf30ec83302aa1948d2e3bf725d30bf65f3b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/352bf30ec83302aa1948d2e3bf725d30bf65f3b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e63f7be54d084b3ba31b3706b3a1eb36a98b43f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e63f7be54d084b3ba31b3706b3a1eb36a98b43f", "html_url": "https://github.com/rust-lang/rust/commit/6e63f7be54d084b3ba31b3706b3a1eb36a98b43f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e63f7be54d084b3ba31b3706b3a1eb36a98b43f/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23718a3cc207c20655c08c828b497dbb52413f50", "url": "https://api.github.com/repos/rust-lang/rust/commits/23718a3cc207c20655c08c828b497dbb52413f50", "html_url": "https://github.com/rust-lang/rust/commit/23718a3cc207c20655c08c828b497dbb52413f50"}], "stats": {"total": 83, "additions": 62, "deletions": 21}, "files": [{"sha": "351c701305adc022b1c24dcf59ecf2e4ff2c8764", "filename": "compiler/rustc_const_eval/src/const_eval/fn_queries.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e63f7be54d084b3ba31b3706b3a1eb36a98b43f/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e63f7be54d084b3ba31b3706b3a1eb36a98b43f/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=6e63f7be54d084b3ba31b3706b3a1eb36a98b43f", "patch": "@@ -41,6 +41,7 @@ fn constness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::Constness {\n             };\n             if is_const { hir::Constness::Const } else { hir::Constness::NotConst }\n         }\n+        hir::Node::Expr(e) if let hir::ExprKind::Closure(c) = e.kind => c.constness,\n         _ => {\n             if let Some(fn_kind) = node.fn_kind() {\n                 if fn_kind.constness() == hir::Constness::Const {"}, {"sha": "46e7b09a55e109c61f24eabb844437a13dcd1d1d", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e63f7be54d084b3ba31b3706b3a1eb36a98b43f/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e63f7be54d084b3ba31b3706b3a1eb36a98b43f/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=6e63f7be54d084b3ba31b3706b3a1eb36a98b43f", "patch": "@@ -20,6 +20,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(trusted_step)]\n #![feature(try_blocks)]\n #![feature(yeet_expr)]\n+#![feature(if_let_guard)]\n #![feature(is_some_and)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "38212496ec84154a616016d680d599c3518e2aa5", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6e63f7be54d084b3ba31b3706b3a1eb36a98b43f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e63f7be54d084b3ba31b3706b3a1eb36a98b43f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=6e63f7be54d084b3ba31b3706b3a1eb36a98b43f", "patch": "@@ -783,6 +783,20 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                             );\n                             return;\n                         }\n+                        Ok(Some(ImplSource::Closure(data))) => {\n+                            if !tcx.is_const_fn_raw(data.closure_def_id) {\n+                                self.check_op(ops::FnCallNonConst {\n+                                    caller,\n+                                    callee,\n+                                    substs,\n+                                    span: *fn_span,\n+                                    from_hir_call: *from_hir_call,\n+                                    feature: None,\n+                                });\n+\n+                                return;\n+                            }\n+                        }\n                         Ok(Some(ImplSource::UserDefined(data))) => {\n                             let callee_name = tcx.item_name(callee);\n                             if let Some(&did) = tcx"}, {"sha": "030328d1e26ff1f6b64feb983aba60d89a25eb50", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e63f7be54d084b3ba31b3706b3a1eb36a98b43f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e63f7be54d084b3ba31b3706b3a1eb36a98b43f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=6e63f7be54d084b3ba31b3706b3a1eb36a98b43f", "patch": "@@ -1686,6 +1686,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             }\n \n             ty::Closure(_, substs) => {\n+                let constness = self.tcx.constness(def_id.to_def_id());\n+                self.tables.constness.set(def_id.to_def_id().index, constness);\n                 record!(self.tables.fn_sig[def_id.to_def_id()] <- substs.as_closure().sig());\n             }\n "}, {"sha": "4b09a9b6939e08a3cd4b4d604036a4a8b6d59235", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e63f7be54d084b3ba31b3706b3a1eb36a98b43f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e63f7be54d084b3ba31b3706b3a1eb36a98b43f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=6e63f7be54d084b3ba31b3706b3a1eb36a98b43f", "patch": "@@ -485,7 +485,7 @@ impl<'hir> Map<'hir> {\n             BodyOwnerKind::Static(mt) => ConstContext::Static(mt),\n \n             BodyOwnerKind::Fn if self.tcx.is_constructor(def_id.to_def_id()) => return None,\n-            BodyOwnerKind::Fn if self.tcx.is_const_fn_raw(def_id.to_def_id()) => {\n+            BodyOwnerKind::Fn | BodyOwnerKind::Closure if self.tcx.is_const_fn_raw(def_id.to_def_id()) => {\n                 ConstContext::ConstFn\n             }\n             BodyOwnerKind::Fn if self.tcx.is_const_default_method(def_id.to_def_id()) => {"}, {"sha": "1cc9fd526b44f3133445f3bb781c333f7f01f5d0", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e63f7be54d084b3ba31b3706b3a1eb36a98b43f/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e63f7be54d084b3ba31b3706b3a1eb36a98b43f/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=6e63f7be54d084b3ba31b3706b3a1eb36a98b43f", "patch": "@@ -131,7 +131,9 @@ pub enum SelectionCandidate<'tcx> {\n \n     /// Implementation of a `Fn`-family trait by one of the anonymous types\n     /// generated for an `||` expression.\n-    ClosureCandidate,\n+    ClosureCandidate {\n+        is_const: bool,\n+    },\n \n     /// Implementation of a `Generator` trait by one of the anonymous types\n     /// generated for a generator."}, {"sha": "993e95b351484a7d31cb40dfc13a1d7414175633", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e63f7be54d084b3ba31b3706b3a1eb36a98b43f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e63f7be54d084b3ba31b3706b3a1eb36a98b43f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=6e63f7be54d084b3ba31b3706b3a1eb36a98b43f", "patch": "@@ -2465,8 +2465,10 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn is_const_fn_raw(self, def_id: DefId) -> bool {\n-        matches!(self.def_kind(def_id), DefKind::Fn | DefKind::AssocFn | DefKind::Ctor(..))\n-            && self.constness(def_id) == hir::Constness::Const\n+        matches!(\n+            self.def_kind(def_id),\n+            DefKind::Fn | DefKind::AssocFn | DefKind::Ctor(..) | DefKind::Closure\n+        ) && self.constness(def_id) == hir::Constness::Const\n     }\n \n     #[inline]"}, {"sha": "a5635ccfec4f3bd5b3ad6e5fb56cf51aa736f377", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6e63f7be54d084b3ba31b3706b3a1eb36a98b43f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e63f7be54d084b3ba31b3706b3a1eb36a98b43f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=6e63f7be54d084b3ba31b3706b3a1eb36a98b43f", "patch": "@@ -254,18 +254,23 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // touch bound regions, they just capture the in-scope\n         // type/region parameters\n         match *obligation.self_ty().skip_binder().kind() {\n-            ty::Closure(_, closure_substs) => {\n+            ty::Closure(def_id, closure_substs) => {\n+                let is_const = self.tcx().is_const_fn_raw(def_id);\n                 debug!(?kind, ?obligation, \"assemble_unboxed_candidates\");\n                 match self.infcx.closure_kind(closure_substs) {\n                     Some(closure_kind) => {\n                         debug!(?closure_kind, \"assemble_unboxed_candidates\");\n                         if closure_kind.extends(kind) {\n-                            candidates.vec.push(ClosureCandidate);\n+                            candidates.vec.push(ClosureCandidate {\n+                                is_const,\n+                            });\n                         }\n                     }\n                     None => {\n                         debug!(\"assemble_unboxed_candidates: closure_kind not yet known\");\n-                        candidates.vec.push(ClosureCandidate);\n+                        candidates.vec.push(ClosureCandidate {\n+                            is_const,\n+                        });\n                     }\n                 }\n             }"}, {"sha": "a41d10f104358ea57f8f6e4cb641e38455b63ad7", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e63f7be54d084b3ba31b3706b3a1eb36a98b43f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e63f7be54d084b3ba31b3706b3a1eb36a98b43f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=6e63f7be54d084b3ba31b3706b3a1eb36a98b43f", "patch": "@@ -84,7 +84,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ImplSource::Object(data)\n             }\n \n-            ClosureCandidate => {\n+            ClosureCandidate { .. } => {\n                 let vtable_closure = self.confirm_closure_candidate(obligation)?;\n                 ImplSource::Closure(vtable_closure)\n             }"}, {"sha": "25a294b54013eedee3e73acb4d51cd5f748567f6", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6e63f7be54d084b3ba31b3706b3a1eb36a98b43f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e63f7be54d084b3ba31b3706b3a1eb36a98b43f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=6e63f7be54d084b3ba31b3706b3a1eb36a98b43f", "patch": "@@ -1365,15 +1365,18 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     // const param\n                     ParamCandidate(trait_pred) if trait_pred.is_const_if_const() => {}\n                     // const projection\n-                    ProjectionCandidate(_, ty::BoundConstness::ConstIfConst) => {}\n+                    ProjectionCandidate(_, ty::BoundConstness::ConstIfConst)\n                     // auto trait impl\n-                    AutoImplCandidate => {}\n+                    | AutoImplCandidate\n                     // generator / future, this will raise error in other places\n                     // or ignore error with const_async_blocks feature\n-                    GeneratorCandidate => {}\n-                    FutureCandidate => {}\n+                    | GeneratorCandidate\n+                    | FutureCandidate\n                     // FnDef where the function is const\n-                    FnPointerCandidate { is_const: true } => {}\n+                    | FnPointerCandidate { is_const: true }\n+                    | ConstDestructCandidate(_)\n+                    | ClosureCandidate { is_const: true } => {}\n+\n                     FnPointerCandidate { is_const: false } => {\n                         if let ty::FnDef(def_id, _) = obligation.self_ty().skip_binder().kind() && tcx.trait_of_item(*def_id).is_some() {\n                             // Trait methods are not seen as const unless the trait is implemented as const.\n@@ -1382,7 +1385,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             continue\n                         }\n                     }\n-                    ConstDestructCandidate(_) => {}\n+\n                     _ => {\n                         // reject all other types of candidates\n                         continue;\n@@ -1844,7 +1847,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             (\n                 ParamCandidate(ref cand),\n                 ImplCandidate(..)\n-                | ClosureCandidate\n+                | ClosureCandidate { .. }\n                 | GeneratorCandidate\n                 | FutureCandidate\n                 | FnPointerCandidate { .. }\n@@ -1863,7 +1866,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n             (\n                 ImplCandidate(_)\n-                | ClosureCandidate\n+                | ClosureCandidate { .. }\n                 | GeneratorCandidate\n                 | FutureCandidate\n                 | FnPointerCandidate { .. }\n@@ -1894,7 +1897,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             (\n                 ObjectCandidate(_) | ProjectionCandidate(..),\n                 ImplCandidate(..)\n-                | ClosureCandidate\n+                | ClosureCandidate { .. }\n                 | GeneratorCandidate\n                 | FutureCandidate\n                 | FnPointerCandidate { .. }\n@@ -1907,7 +1910,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n             (\n                 ImplCandidate(..)\n-                | ClosureCandidate\n+                | ClosureCandidate { .. }\n                 | GeneratorCandidate\n                 | FutureCandidate\n                 | FnPointerCandidate { .. }\n@@ -1989,7 +1992,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             // Everything else is ambiguous\n             (\n                 ImplCandidate(_)\n-                | ClosureCandidate\n+                | ClosureCandidate { .. }\n                 | GeneratorCandidate\n                 | FutureCandidate\n                 | FnPointerCandidate { .. }\n@@ -1999,7 +2002,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 | BuiltinCandidate { has_nested: true }\n                 | TraitAliasCandidate,\n                 ImplCandidate(_)\n-                | ClosureCandidate\n+                | ClosureCandidate { .. }\n                 | GeneratorCandidate\n                 | FutureCandidate\n                 | FnPointerCandidate { .. }"}, {"sha": "5f48c235373520320a7b3adf19e9f51d25d1dc92", "filename": "src/test/ui/rfc-2632-const-trait-impl/const_closures/call.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6e63f7be54d084b3ba31b3706b3a1eb36a98b43f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst_closures%2Fcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e63f7be54d084b3ba31b3706b3a1eb36a98b43f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst_closures%2Fcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst_closures%2Fcall.rs?ref=6e63f7be54d084b3ba31b3706b3a1eb36a98b43f", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+\n+#![feature(const_closures, const_trait_impl)]\n+#![allow(incomplete_features)]\n+\n+pub const _: () = {\n+    assert!((const || true)());\n+};\n+\n+fn main() {}"}, {"sha": "f2cd26c91b64076da72c486b3acdd3819ee77f0d", "filename": "src/test/ui/rfc-2632-const-trait-impl/const_closures/gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e63f7be54d084b3ba31b3706b3a1eb36a98b43f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst_closures%2Fgate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e63f7be54d084b3ba31b3706b3a1eb36a98b43f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst_closures%2Fgate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst_closures%2Fgate.rs?ref=6e63f7be54d084b3ba31b3706b3a1eb36a98b43f", "patch": "@@ -1,3 +1,4 @@\n+// gate-test-const_closures\n fn main() {\n     (const || {})();\n     //~^ ERROR: const closures are experimental"}, {"sha": "30edc4127e1f4662c1dc8bd25a4b25f87bd9bba0", "filename": "src/test/ui/rfc-2632-const-trait-impl/const_closures/gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e63f7be54d084b3ba31b3706b3a1eb36a98b43f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst_closures%2Fgate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e63f7be54d084b3ba31b3706b3a1eb36a98b43f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst_closures%2Fgate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst_closures%2Fgate.stderr?ref=6e63f7be54d084b3ba31b3706b3a1eb36a98b43f", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: const closures are experimental\n-  --> $DIR/gate.rs:2:6\n+  --> $DIR/gate.rs:3:6\n    |\n LL |     (const || {})();\n    |      ^^^^^^^^^^^"}]}