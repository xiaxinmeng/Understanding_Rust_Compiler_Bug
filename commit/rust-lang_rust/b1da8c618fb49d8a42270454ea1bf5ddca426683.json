{"sha": "b1da8c618fb49d8a42270454ea1bf5ddca426683", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxZGE4YzYxOGZiNDlkOGE0MjI3MDQ1NGVhMWJmNWRkY2E0MjY2ODM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-01-17T13:30:06Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-01-17T13:30:06Z"}, "message": "Change expansion of `for` loop to use a `match` statement\nso that the \"innermost enclosing statement\" used for rvalue\ntemporaries matches up with user expectations", "tree": {"sha": "d7b2a73cf5209538c19337d57aad8576abcd2af7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7b2a73cf5209538c19337d57aad8576abcd2af7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1da8c618fb49d8a42270454ea1bf5ddca426683", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1da8c618fb49d8a42270454ea1bf5ddca426683", "html_url": "https://github.com/rust-lang/rust/commit/b1da8c618fb49d8a42270454ea1bf5ddca426683", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1da8c618fb49d8a42270454ea1bf5ddca426683/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f16356e5fb1a86bf2239a6bd51c3dda11155d1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f16356e5fb1a86bf2239a6bd51c3dda11155d1e", "html_url": "https://github.com/rust-lang/rust/commit/8f16356e5fb1a86bf2239a6bd51c3dda11155d1e"}], "stats": {"total": 100, "additions": 82, "deletions": 18}, "files": [{"sha": "6ef938030ff0d757692df475bcdbf87d5c0e28f3", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b1da8c618fb49d8a42270454ea1bf5ddca426683/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1da8c618fb49d8a42270454ea1bf5ddca426683/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=b1da8c618fb49d8a42270454ea1bf5ddca426683", "patch": "@@ -137,15 +137,16 @@ pub fn expand_expr(e: @ast::Expr, fld: &mut MacroExpander) -> @ast::Expr {\n \n             // to:\n             //\n-            // {\n-            //   let _i = &mut <src_expr>;\n-            //   ['<ident>:] loop {\n-            //       match i.next() {\n+            //   match &mut <src_expr> {\n+            //     i => {\n+            //       ['<ident>:] loop {\n+            //         match i.next() {\n             //           None => break,\n             //           Some(<src_pat>) => <src_loop_block>\n+            //         }\n             //       }\n+            //     }\n             //   }\n-            // }\n \n             let local_ident = token::gensym_ident(\"i\");\n             let next_ident = fld.cx.ident_of(\"next\");\n@@ -154,10 +155,6 @@ pub fn expand_expr(e: @ast::Expr, fld: &mut MacroExpander) -> @ast::Expr {\n             let local_path = fld.cx.path_ident(span, local_ident);\n             let some_path = fld.cx.path_ident(span, fld.cx.ident_of(\"Some\"));\n \n-            // `let i = &mut <src_expr>`\n-            let iter_decl_stmt = fld.cx.stmt_let(span, false, local_ident,\n-                                                 fld.cx.expr_mut_addr_of(span, src_expr));\n-\n             // `None => break ['<ident>];`\n             let none_arm = {\n                 // FIXME #6993: this map goes away:\n@@ -185,16 +182,13 @@ pub fn expand_expr(e: @ast::Expr, fld: &mut MacroExpander) -> @ast::Expr {\n                                         ast::ExprLoop(fld.cx.block_expr(match_expr),\n                                                       opt_ident));\n \n-            // `{ let ... ;  loop { ... } }`\n-            let block = fld.cx.block(span,\n-                                     ~[iter_decl_stmt],\n-                                     Some(loop_expr));\n+            // `i => loop { ... }`\n \n-            @ast::Expr {\n-                id: ast::DUMMY_NODE_ID,\n-                node: ast::ExprBlock(block),\n-                span: span,\n-            }\n+            // `match &mut <src_expr> { i => loop { ... } }`\n+            let discrim = fld.cx.expr_mut_addr_of(span, src_expr);\n+            let i_pattern = fld.cx.pat_ident(span, local_ident);\n+            let arm = fld.cx.arm(span, ~[i_pattern], loop_expr);\n+            fld.cx.expr_match(span, discrim, ~[arm])\n         }\n \n         _ => noop_fold_expr(e, fld)"}, {"sha": "98a08479098579cbac364eaa5ccf4067183ec5e1", "filename": "src/test/run-pass/cleanup-rvalue-for-scope.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/b1da8c618fb49d8a42270454ea1bf5ddca426683/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-for-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1da8c618fb49d8a42270454ea1bf5ddca426683/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-for-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-for-scope.rs?ref=b1da8c618fb49d8a42270454ea1bf5ddca426683", "patch": "@@ -0,0 +1,70 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the lifetime of rvalues in for loops is extended\n+// to the for loop itself.\n+\n+#[feature(macro_rules)];\n+\n+use std::ops::Drop;\n+\n+static mut FLAGS: u64 = 0;\n+\n+struct Box<T> { f: T }\n+struct AddFlags { bits: u64 }\n+\n+fn AddFlags(bits: u64) -> AddFlags {\n+    AddFlags { bits: bits }\n+}\n+\n+fn arg(exp: u64, _x: &AddFlags) {\n+    check_flags(exp);\n+}\n+\n+fn pass<T>(v: T) -> T {\n+    v\n+}\n+\n+fn check_flags(exp: u64) {\n+    unsafe {\n+        let x = FLAGS;\n+        FLAGS = 0;\n+        println!(\"flags {}, expected {}\", x, exp);\n+        assert_eq!(x, exp);\n+    }\n+}\n+\n+impl AddFlags {\n+    fn check_flags<'a>(&'a self, exp: u64) -> &'a AddFlags {\n+        check_flags(exp);\n+        self\n+    }\n+\n+    fn bits(&self) -> u64 {\n+        self.bits\n+    }\n+}\n+\n+impl Drop for AddFlags {\n+    fn drop(&mut self) {\n+        unsafe {\n+            FLAGS = FLAGS + self.bits;\n+        }\n+    }\n+}\n+\n+pub fn main() {\n+    // The array containing [AddFlags] should not be dropped until\n+    // after the for loop:\n+    for x in [AddFlags(1)].iter() {\n+        check_flags(0);\n+    }\n+    check_flags(1);\n+}"}]}