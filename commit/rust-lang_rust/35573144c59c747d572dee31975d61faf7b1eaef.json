{"sha": "35573144c59c747d572dee31975d61faf7b1eaef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NTczMTQ0YzU5Yzc0N2Q1NzJkZWUzMTk3NWQ2MWZhZjdiMWVhZWY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-09T00:54:46Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-09T00:54:46Z"}, "message": "Remove silly legacy glue-offset encoding, predicate runtime adjustments by ABI. LLVM should inline most glue now.", "tree": {"sha": "439200e09161aae14e1aaea3e1eb50d91a1c5038", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/439200e09161aae14e1aaea3e1eb50d91a1c5038"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35573144c59c747d572dee31975d61faf7b1eaef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35573144c59c747d572dee31975d61faf7b1eaef", "html_url": "https://github.com/rust-lang/rust/commit/35573144c59c747d572dee31975d61faf7b1eaef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35573144c59c747d572dee31975d61faf7b1eaef/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19ebc0f376eb4c1128ba8e43be42ab2c41292eae", "url": "https://api.github.com/repos/rust-lang/rust/commits/19ebc0f376eb4c1128ba8e43be42ab2c41292eae", "html_url": "https://github.com/rust-lang/rust/commit/19ebc0f376eb4c1128ba8e43be42ab2c41292eae"}], "stats": {"total": 92, "additions": 38, "deletions": 54}, "files": [{"sha": "cf88515cd4ce2e9a294b1bc56bde593581c37c6e", "filename": "src/comp/back/abi.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/35573144c59c747d572dee31975d61faf7b1eaef/src%2Fcomp%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35573144c59c747d572dee31975d61faf7b1eaef/src%2Fcomp%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fabi.rs?ref=35573144c59c747d572dee31975d61faf7b1eaef", "patch": "@@ -32,12 +32,12 @@ const int vec_elt_data = 4;\n const int tydesc_field_first_param = 0;\n const int tydesc_field_size = 1;\n const int tydesc_field_align = 2;\n-const int tydesc_field_take_glue_off = 3;\n-const int tydesc_field_drop_glue_off = 4;\n-const int tydesc_field_free_glue_off = 5;\n-const int tydesc_field_sever_glue_off = 6;\n-const int tydesc_field_mark_glue_off = 7;\n-const int tydesc_field_obj_drop_glue_off = 8;\n+const int tydesc_field_take_glue = 3;\n+const int tydesc_field_drop_glue = 4;\n+const int tydesc_field_free_glue = 5;\n+const int tydesc_field_sever_glue = 6;\n+const int tydesc_field_mark_glue = 7;\n+const int tydesc_field_obj_drop_glue = 8;\n const int tydesc_field_is_stateful = 9;\n \n "}, {"sha": "7d9e13b084d1b6737a94c1b11537fe268c91e303", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 24, "deletions": 42, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/35573144c59c747d572dee31975d61faf7b1eaef/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35573144c59c747d572dee31975d61faf7b1eaef/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=35573144c59c747d572dee31975d61faf7b1eaef", "patch": "@@ -331,7 +331,7 @@ fn T_glue_fn(type_names tn) -> TypeRef {\n                                    _vec.buf[TypeRef](tydesc_elts));\n     auto t =\n         llvm.LLVMGetElementType\n-        (tydesc_elts.(abi.tydesc_field_drop_glue_off));\n+        (tydesc_elts.(abi.tydesc_field_drop_glue));\n     tn.associate(s, t);\n     ret t;\n }\n@@ -355,12 +355,12 @@ fn T_tydesc(type_names tn) -> TypeRef {\n     auto tydesc = T_struct(vec(tydescpp,          // first_param\n                                T_int(),           // size\n                                T_int(),           // align\n-                               glue_fn_ty,        // take_glue_off\n-                               glue_fn_ty,        // drop_glue_off\n-                               glue_fn_ty,        // free_glue_off\n-                               glue_fn_ty,        // sever_glue_off\n-                               glue_fn_ty,        // mark_glue_off\n-                               glue_fn_ty,        // obj_drop_glue_off\n+                               glue_fn_ty,        // take_glue\n+                               glue_fn_ty,        // drop_glue\n+                               glue_fn_ty,        // free_glue\n+                               glue_fn_ty,        // sever_glue\n+                               glue_fn_ty,        // mark_glue\n+                               glue_fn_ty,        // obj_drop_glue\n                                glue_fn_ty));      // is_stateful\n \n     llvm.LLVMRefineType(abs_tydesc, tydesc);\n@@ -414,11 +414,11 @@ fn T_crate(type_names tn) -> TypeRef {\n                           T_int(),      // size_t debug_abbrev_sz\n                           T_int(),      // ptrdiff_t debug_info_off\n                           T_int(),      // size_t debug_info_sz\n-                          T_int(),      // size_t activate_glue_off\n-                          T_int(),      // size_t yield_glue_off\n-                          T_int(),      // size_t unwind_glue_off\n-                          T_int(),      // size_t gc_glue_off\n-                          T_int(),      // size_t main_exit_task_glue_off\n+                          T_int(),      // size_t activate_glue\n+                          T_int(),      // size_t yield_glue\n+                          T_int(),      // size_t unwind_glue\n+                          T_int(),      // size_t gc_glue\n+                          T_int(),      // size_t main_exit_task_glue\n                           T_int(),      // int n_rust_syms\n                           T_int(),      // int n_c_syms\n                           T_int(),      // int n_libs\n@@ -1576,29 +1576,19 @@ fn declare_tydesc(@crate_ctxt cx, @ty.t t) {\n     }\n \n     auto glue_fn_ty = T_ptr(T_glue_fn(cx.tn));\n-\n-    // FIXME: this adjustment has to do with the ridiculous encoding of\n-    // glue-pointer-constants in the tydesc records: They are tydesc-relative\n-    // displacements.  This is purely for compatibility with rustboot and\n-    // should go when it is discarded.\n-    fn off(ValueRef tydescp,\n-           ValueRef gluefn) -> ValueRef {\n-        ret i2p(llvm.LLVMConstSub(p2i(gluefn), p2i(tydescp)),\n-                val_ty(gluefn));\n-    }\n-\n+ \n     auto name = sanitize(cx.names.next(\"tydesc_\" + ty.ty_to_str(t)));\n     auto gvar = llvm.LLVMAddGlobal(cx.llmod, T_tydesc(cx.tn),\n                                    _str.buf(name));\n     auto tydesc = C_struct(vec(C_null(T_ptr(T_ptr(T_tydesc(cx.tn)))),\n                                llsize,\n                                llalign,\n-                               off(gvar, take_glue),  // take_glue_off\n-                               off(gvar, drop_glue),  // drop_glue_off\n-                               C_null(glue_fn_ty),    // free_glue_off\n-                               C_null(glue_fn_ty),    // sever_glue_off\n-                               C_null(glue_fn_ty),    // mark_glue_off\n-                               C_null(glue_fn_ty),    // obj_drop_glue_off\n+                               take_glue,             // take_glue\n+                               drop_glue,             // drop_glue\n+                               C_null(glue_fn_ty),    // free_glue\n+                               C_null(glue_fn_ty),    // sever_glue\n+                               C_null(glue_fn_ty),    // mark_glue\n+                               C_null(glue_fn_ty),    // obj_drop_glue\n                                C_null(glue_fn_ty)));  // is_stateful\n \n     llvm.LLVMSetInitializer(gvar, tydesc);\n@@ -1789,7 +1779,7 @@ fn make_drop_glue(@block_ctxt cx, ValueRef v, @ty.t t) -> result {\n                                      C_int(abi.obj_body_elt_tydesc)));\n \n                 call_tydesc_glue_full(cx, body, cx.build.Load(tydescptr),\n-                                      abi.tydesc_field_drop_glue_off);\n+                                      abi.tydesc_field_drop_glue);\n \n                 // Then free the body.\n                 // FIXME: switch gc/non-gc on layer of the type.\n@@ -1827,7 +1817,7 @@ fn make_drop_glue(@block_ctxt cx, ValueRef v, @ty.t t) -> result {\n                                      C_int(abi.closure_elt_tydesc)));\n \n                 call_tydesc_glue_full(cx, bindings, cx.build.Load(tydescptr),\n-                                      abi.tydesc_field_drop_glue_off);\n+                                      abi.tydesc_field_drop_glue);\n \n \n                 // Then free the body.\n@@ -2316,14 +2306,6 @@ fn call_tydesc_glue_full(@block_ctxt cx, ValueRef v,\n     auto llfnptr = cx.build.GEP(tydesc, vec(C_int(0), C_int(field)));\n     auto llfn = cx.build.Load(llfnptr);\n \n-    // FIXME: this adjustment has to do with the ridiculous encoding of\n-    // glue-pointer-constants in the tydesc records: They are tydesc-relative\n-    // displacements.  This is purely for compatibility with rustboot and\n-    // should go when it is discarded.\n-    llfn = vi2p(cx, cx.build.Add(vp2i(cx, llfn),\n-                                 vp2i(cx, tydesc)),\n-                val_ty(llfn));\n-\n     cx.build.FastCall(llfn, vec(C_null(T_ptr(T_nil())),\n                                 cx.fcx.lltaskptr,\n                                 C_null(T_ptr(T_nil())),\n@@ -2340,7 +2322,7 @@ fn take_ty(@block_ctxt cx,\n                     ValueRef v,\n                     @ty.t t) -> result {\n     if (!ty.type_is_scalar(t)) {\n-        call_tydesc_glue(cx, v, t, abi.tydesc_field_take_glue_off);\n+        call_tydesc_glue(cx, v, t, abi.tydesc_field_take_glue);\n     }\n     ret res(cx, C_nil());\n }\n@@ -2362,7 +2344,7 @@ fn drop_ty(@block_ctxt cx,\n            @ty.t t) -> result {\n \n     if (!ty.type_is_scalar(t)) {\n-        call_tydesc_glue(cx, v, t, abi.tydesc_field_drop_glue_off);\n+        call_tydesc_glue(cx, v, t, abi.tydesc_field_drop_glue);\n     }\n     ret res(cx, C_nil());\n }\n@@ -6939,7 +6921,7 @@ fn trans_vec_append_glue(@crate_ctxt cx) {\n                     ValueRef dst, ValueRef src) -> result {\n             call_tydesc_glue_full(cx, src,\n                                   elt_tydesc,\n-                                  abi.tydesc_field_take_glue_off);\n+                                  abi.tydesc_field_take_glue);\n             ret res(cx, src);\n         }\n "}, {"sha": "6c498b320f1fd6c0b3caa839939c959b11253bbe", "filename": "src/rt/rust_crate_cache.cpp", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/35573144c59c747d572dee31975d61faf7b1eaef/src%2Frt%2Frust_crate_cache.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/35573144c59c747d572dee31975d61faf7b1eaef/src%2Frt%2Frust_crate_cache.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_crate_cache.cpp?ref=35573144c59c747d572dee31975d61faf7b1eaef", "patch": "@@ -221,12 +221,14 @@ rust_crate_cache::get_type_desc(size_t size,\n         // FIXME (issue #136):  Below is a miscalculation.\n         td->is_stateful |= descs[i]->is_stateful;\n     }\n-    adjust_disp(td->copy_glue_off, descs[0], td);\n-    adjust_disp(td->drop_glue_off, descs[0], td);\n-    adjust_disp(td->free_glue_off, descs[0], td);\n-    adjust_disp(td->mark_glue_off, descs[0], td);\n-    adjust_disp(td->sever_glue_off, descs[0], td);\n-    adjust_disp(td->obj_drop_glue_off, descs[0], td);\n+    if (crate->abi_tag == ABI_X86_RUSTBOOT_CDECL) {\n+        adjust_disp(td->copy_glue_off, descs[0], td);\n+        adjust_disp(td->drop_glue_off, descs[0], td);\n+        adjust_disp(td->free_glue_off, descs[0], td);\n+        adjust_disp(td->mark_glue_off, descs[0], td);\n+        adjust_disp(td->sever_glue_off, descs[0], td);\n+        adjust_disp(td->obj_drop_glue_off, descs[0], td);\n+    }\n     HASH_ADD(hh, this->type_descs, descs, keysz, td);\n     return td;\n }"}]}