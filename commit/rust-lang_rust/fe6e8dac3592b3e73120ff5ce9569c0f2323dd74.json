{"sha": "fe6e8dac3592b3e73120ff5ce9569c0f2323dd74", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNmU4ZGFjMzU5MmIzZTczMTIwZmY1Y2U5NTY5YzBmMjMyM2RkNzQ=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-04-13T14:02:44Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-04-13T14:02:44Z"}, "message": "More tests in `DOC_MARKDOWN`", "tree": {"sha": "3bf7a9913336fde1d7d49eae2f3e55cb342226f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bf7a9913336fde1d7d49eae2f3e55cb342226f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe6e8dac3592b3e73120ff5ce9569c0f2323dd74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe6e8dac3592b3e73120ff5ce9569c0f2323dd74", "html_url": "https://github.com/rust-lang/rust/commit/fe6e8dac3592b3e73120ff5ce9569c0f2323dd74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe6e8dac3592b3e73120ff5ce9569c0f2323dd74/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbf8fa9daf1e7fb1c167b7ae3ff1e468d2a4b5c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbf8fa9daf1e7fb1c167b7ae3ff1e468d2a4b5c1", "html_url": "https://github.com/rust-lang/rust/commit/fbf8fa9daf1e7fb1c167b7ae3ff1e468d2a4b5c1"}], "stats": {"total": 59, "additions": 55, "deletions": 4}, "files": [{"sha": "f27b4d862f1232b2c60d1fb8a16db7ac9c72b8bd", "filename": "src/doc.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fe6e8dac3592b3e73120ff5ce9569c0f2323dd74/src%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6e8dac3592b3e73120ff5ce9569c0f2323dd74/src%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc.rs?ref=fe6e8dac3592b3e73120ff5ce9569c0f2323dd74", "patch": "@@ -165,7 +165,10 @@ pub fn check_doc(cx: &EarlyContext, valid_idents: &[String], doc: &str, span: Sp\n                                     ':' => { // reference link\n                                         current_word_begin = jump_to!(chars, '\\n', len);\n                                     }\n-                                    _ => continue,\n+                                    _ => { // automatic reference link\n+                                        current_word_begin = jump_to!(@next_char, chars, len);\n+                                        check_doc(cx, valid_idents, link_text, span);\n+                                    }\n                                 }\n                             }\n                             None => return,"}, {"sha": "74a68d2d7301c850eaeacd1b7aba3a2e5811d561", "filename": "src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe6e8dac3592b3e73120ff5ce9569c0f2323dd74/src%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6e8dac3592b3e73120ff5ce9569c0f2323dd74/src%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils%2Fconf.rs?ref=fe6e8dac3592b3e73120ff5ce9569c0f2323dd74", "patch": "@@ -150,7 +150,7 @@ define_Conf! {\n     /// Lint: CYCLOMATIC_COMPLEXITY. The maximum cyclomatic complexity a function can have\n     (\"cyclomatic-complexity-threshold\", cyclomatic_complexity_threshold, 25 => u64),\n     /// Lint: DOC_MARKDOWN. The list of words this lint should not consider as identifiers needing ticks\n-    (\"doc-valid-idents\", doc_valid_idents, [\"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\"] => Vec<String>),\n+    (\"doc-valid-idents\", doc_valid_idents, [\"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"GitHub\"] => Vec<String>),\n     /// Lint: TOO_MANY_ARGUMENTS. The maximum number of argument a function or method can have\n     (\"too-many-arguments-threshold\", too_many_arguments_threshold, 7 => u64),\n     /// Lint: TYPE_COMPLEXITY. The maximum complexity a type can have"}, {"sha": "16e460e50556aa98ff35a9f917cf33318659fcbe", "filename": "tests/compile-fail/doc.rs", "status": "modified", "additions": 50, "deletions": 2, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/fe6e8dac3592b3e73120ff5ce9569c0f2323dd74/tests%2Fcompile-fail%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe6e8dac3592b3e73120ff5ce9569c0f2323dd74/tests%2Fcompile-fail%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdoc.rs?ref=fe6e8dac3592b3e73120ff5ce9569c0f2323dd74", "patch": "@@ -9,24 +9,30 @@\n /// The foo_bar function does _nothing_. See also foo::bar. (note the dot there)\n /// Markdown is _weird_. I mean _really weird_.  This \\_ is ok. So is `_`. But not Foo::some_fun\n /// which should be reported only once despite being __doubly bad__.\n+/// be_sure_we_got_to_the_end_of_it\n fn foo_bar() {\n //~^ ERROR: you should put `foo_bar` between ticks\n //~| ERROR: you should put `foo::bar` between ticks\n //~| ERROR: you should put `Foo::some_fun` between ticks\n+//~| ERROR: you should put `be_sure_we_got_to_the_end_of_it` between ticks\n }\n \n /// That one tests multiline ticks.\n /// ```rust\n /// foo_bar FOO_BAR\n /// _foo bar_\n /// ```\n+/// be_sure_we_got_to_the_end_of_it\n fn multiline_ticks() {\n+//~^ ERROR: you should put `be_sure_we_got_to_the_end_of_it` between ticks\n }\n \n /// This _is a test for\n /// multiline\n /// emphasis_.\n+/// be_sure_we_got_to_the_end_of_it\n fn test_emphasis() {\n+//~^ ERROR: you should put `be_sure_we_got_to_the_end_of_it` between ticks\n }\n \n /// This tests units. See also #835.\n@@ -38,22 +44,64 @@ fn test_emphasis() {\n /// 32kib 32Mib 32Gib 32Tib 32Pib 32Eib\n /// 32kB 32MB 32GB 32TB 32PB 32EB\n /// 32kb 32Mb 32Gb 32Tb 32Pb 32Eb\n+/// be_sure_we_got_to_the_end_of_it\n fn test_units() {\n+//~^ ERROR: you should put `be_sure_we_got_to_the_end_of_it` between ticks\n+}\n+\n+/// This one checks we don\u2019t try to split unicode codepoints\n+/// `\u00df`\n+/// `\u211d`\n+/// `\ud83d\udca3`\n+/// `\u2764\ufe0f`\n+/// \u00df_foo\n+/// \u211d_foo\n+/// \ud83d\udca3_foo\n+/// \u2764\ufe0f_foo\n+/// foo_\u00df\n+/// foo_\u211d\n+/// foo_\ud83d\udca3\n+/// foo_\u2764\ufe0f\n+/// [\u00dfdummy text\u00df][foo_\u00df]\n+/// [\u211ddummy text\u211d][foo_\u211d]\n+/// [\ud83d\udca3dummy tex\ud83d\udca3t][foo_\ud83d\udca3]\n+/// [\u2764\ufe0fdummy text\u2764\ufe0f][foo_\u2764\ufe0f]\n+/// [\u00dfdummy text\u00df](foo_\u00df)\n+/// [\u211ddummy text\u211d](foo_\u211d)\n+/// [\ud83d\udca3dummy tex\ud83d\udca3t](foo_\ud83d\udca3)\n+/// [\u2764\ufe0fdummy text\u2764\ufe0f](foo_\u2764\ufe0f)\n+/// [foo_\u00df]: dummy text\n+/// [foo_\u211d]: dummy text\n+/// [foo_\ud83d\udca3]: dummy text\n+/// [foo_\u2764\ufe0f]: dummy text\n+/// be_sure_we_got_to_the_end_of_it\n+fn test_unicode() {\n+//~^ ERROR: you should put `\u00df_foo` between ticks\n+//~| ERROR: you should put `\u211d_foo` between ticks\n+//~| ERROR: you should put `foo_\u00df` between ticks\n+//~| ERROR: you should put `foo_\u211d` between ticks\n+//~| ERROR: you should put `be_sure_we_got_to_the_end_of_it` between ticks\n }\n \n /// This test has [a link_with_underscores][chunked-example] inside it. See #823.\n-/// See also [the issue tracker](https://github.com/Manishearth/rust-clippy/search?q=doc_markdown&type=Issues). And here is another [inline link][inline_link].\n+/// See also [the issue tracker](https://github.com/Manishearth/rust-clippy/search?q=doc_markdown&type=Issues)\n+/// on GitHub (which is a camel-cased word, but is OK). And here is another [inline link][inline_link].\n+/// It can also be [inline_link2].\n ///\n /// [chunked-example]: https://en.wikipedia.org/wiki/Chunked_transfer_encoding#Example\n /// [inline_link]: https://foobar\n+/// [inline_link2]: https://foobar\n \n /// The `main` function is the entry point of the program. Here it only calls the `foo_bar` and\n /// `multiline_ticks` functions.\n ///\n /// expression of the type  `_ <bit_op> m <cmp_op> c` (where `<bit_op>`\n /// is one of {`&`, '|'} and `<cmp_op>` is one of {`!=`, `>=`, `>` ,\n+/// be_sure_we_got_to_the_end_of_it\n fn main() {\n-//~^ ERROR: you should put `link_with_underscores` between ticks\n+//~^ ERROR: you should put `inline_link2` between ticks\n+//~| ERROR: you should put `link_with_underscores` between ticks\n+//~| ERROR: you should put `be_sure_we_got_to_the_end_of_it` between ticks\n     foo_bar();\n     multiline_ticks();\n     test_emphasis();"}]}