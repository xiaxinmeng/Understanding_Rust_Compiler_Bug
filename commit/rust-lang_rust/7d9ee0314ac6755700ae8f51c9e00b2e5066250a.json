{"sha": "7d9ee0314ac6755700ae8f51c9e00b2e5066250a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkOWVlMDMxNGFjNjc1NTcwMGFlOGY1MWM5ZTAwYjJlNTA2NjI1MGE=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-11-06T23:17:11Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-11-07T21:57:45Z"}, "message": "Only do check for trait objects, not trait or trait alias definitions.", "tree": {"sha": "22d1915ebfa8d821c5c3222ba410fa832b9517f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22d1915ebfa8d821c5c3222ba410fa832b9517f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d9ee0314ac6755700ae8f51c9e00b2e5066250a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d9ee0314ac6755700ae8f51c9e00b2e5066250a", "html_url": "https://github.com/rust-lang/rust/commit/7d9ee0314ac6755700ae8f51c9e00b2e5066250a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d9ee0314ac6755700ae8f51c9e00b2e5066250a/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d3ee4170d525612161fa7f4c34315316dd422c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d3ee4170d525612161fa7f4c34315316dd422c5", "html_url": "https://github.com/rust-lang/rust/commit/6d3ee4170d525612161fa7f4c34315316dd422c5"}], "stats": {"total": 275, "additions": 112, "deletions": 163}, "files": [{"sha": "ef9b3e3efab275f3421c3ea5eb9bcede113efa92", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7d9ee0314ac6755700ae8f51c9e00b2e5066250a/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9ee0314ac6755700ae8f51c9e00b2e5066250a/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=7d9ee0314ac6755700ae8f51c9e00b2e5066250a", "patch": "@@ -1195,6 +1195,7 @@ impl<'a, 'gcx, 'tcx> Predicate<'tcx> {\n pub struct TraitPredicate<'tcx> {\n     pub trait_ref: TraitRef<'tcx>\n }\n+\n pub type PolyTraitPredicate<'tcx> = ty::Binder<TraitPredicate<'tcx>>;\n \n impl<'tcx> TraitPredicate<'tcx> {\n@@ -1516,14 +1517,14 @@ impl UniverseIndex {\n         UniverseIndex::from_u32(self.private.checked_add(1).unwrap())\n     }\n \n-    /// `true` if `self` can name a name from `other` -- in other words,\n+    /// Returns `true` if `self` can name a name from `other` -- in other words,\n     /// if the set of names in `self` is a superset of those in\n     /// `other` (`self >= other`).\n     pub fn can_name(self, other: UniverseIndex) -> bool {\n         self.private >= other.private\n     }\n \n-    /// `true` if `self` cannot name some names from `other` -- in other\n+    /// Returns `true` if `self` cannot name some names from `other` -- in other\n     /// words, if the set of names in `self` is a strict subset of\n     /// those in `other` (`self < other`).\n     pub fn cannot_name(self, other: UniverseIndex) -> bool {"}, {"sha": "572e79407a10be41586bc8b9d38d5aeb33de66a6", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 44, "deletions": 73, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/7d9ee0314ac6755700ae8f51c9e00b2e5066250a/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9ee0314ac6755700ae8f51c9e00b2e5066250a/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=7d9ee0314ac6755700ae8f51c9e00b2e5066250a", "patch": "@@ -719,8 +719,6 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n         speculative: bool)\n         -> ty::PolyTraitRef<'tcx>\n     {\n-        let tcx = self.tcx();\n-\n         let trait_def_id = self.trait_def_id(trait_ref);\n \n         debug!(\"instantiate_poly_trait_ref({:?}, def_id={:?})\", trait_ref, trait_def_id);\n@@ -734,74 +732,16 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                                                  trait_ref.path.segments.last().unwrap());\n         let poly_trait_ref = ty::Binder::bind(ty::TraitRef::new(trait_def_id, substs));\n \n+        let mut dup_bindings = FxHashMap::default();\n         poly_projections.extend(assoc_bindings.iter().filter_map(|binding| {\n             // specify type to assert that error was already reported in Err case:\n             let predicate: Result<_, ErrorReported> =\n                 self.ast_type_binding_to_poly_projection_predicate(\n-                    trait_ref.ref_id, poly_trait_ref, binding, speculative);\n+                    trait_ref.ref_id, poly_trait_ref, binding, speculative, &mut dup_bindings);\n             // okay to ignore Err because of ErrorReported (see above)\n             Some((predicate.ok()?, binding.span))\n         }));\n \n-        // make flat_map:\n-        // for tr in traits::supertraits(tcx, poly_trait_ref) {\n-        //     let sup_trait_ref = tr.skip_binder();\n-        //     poly_projections.extend(sup_trait_ref.substs.types().filter_map(|t| {\n-        //         if let TyKind::Projection(proj) = t.sty {\n-        //             Some((proj, span))\n-        //         } else {\n-        //             None\n-        //         }\n-        //     });\n-        // }\n-\n-        // Include all projections from associated type bindings of supertraits.\n-        poly_projections.extend(traits::elaborate_trait_ref(tcx, poly_trait_ref)\n-            .into_iter()\n-            .filter_map(|pred| {\n-                if let ty::Predicate::Projection(proj) = pred {\n-                    Some(proj)\n-                } else {\n-                    None\n-                }\n-            })\n-            .map(|proj| (proj, DUMMY_SP))\n-        );\n-\n-        // // Include associated type bindings from supertraits.\n-        // let mut foo = poly_projections.clone();\n-        // foo.extend(tcx.predicates_of(trait_def_id)\n-        //     .predicates.into_iter()\n-        //     .filter_map(|(pred, span)| {\n-        //         debug!(\"pred: {:?}\", pred);\n-        //         if let ty::Predicate::Projection(proj) = pred {\n-        //             Some((proj, span))\n-        //         } else {\n-        //             None\n-        //         }\n-        //     }));\n-\n-        // Check for multiple bindings of associated types.\n-        let mut seen_projection_bounds = FxHashMap::default();\n-        for (projection_bound, span) in poly_projections.iter().rev() {\n-            let bound_def_id = projection_bound.projection_def_id();\n-            let assoc_item = tcx.associated_item(bound_def_id);\n-            let trait_def_id = assoc_item.container.id();\n-            // let trait_ref = tcx.associated_item(proj.projection_type.item_def_id).container;\n-            seen_projection_bounds.entry((assoc_item.def_id, bound_def_id))\n-                .and_modify(|prev_span| {\n-                    struct_span_err!(tcx.sess, *span, E0719,\n-                                     \"the value of the associated type `{}` (from the trait `{}`) \\\n-                                      is already specified\",\n-                                     assoc_item.ident,\n-                                     tcx.item_path_str(trait_def_id))\n-                        .span_label(*span, \"re-bound here\")\n-                        .span_label(*prev_span, format!(\"`{}` bound here first\", assoc_item.ident))\n-                        .emit();\n-                })\n-                .or_insert(*span);\n-        }\n-\n         debug!(\"instantiate_poly_trait_ref({:?}, projections={:?}) -> {:?}\",\n                trait_ref, poly_projections, poly_trait_ref);\n         poly_trait_ref\n@@ -884,7 +824,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n         ref_id: ast::NodeId,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         binding: &ConvertedBinding<'tcx>,\n-        speculative: bool)\n+        speculative: bool,\n+        dup_bindings: &mut FxHashMap<DefId, Span>)\n         -> Result<ty::PolyProjectionPredicate<'tcx>, ErrorReported>\n     {\n         let tcx = self.tcx();\n@@ -948,7 +889,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n             let candidates = traits::supertraits(tcx, trait_ref).filter(|r| {\n                 self.trait_defines_associated_type_named(r.def_id(), binding.item_name)\n             });\n-            self.one_bound_for_assoc_type(candidates.into_iter(), &trait_ref.to_string(),\n+            self.one_bound_for_assoc_type(candidates, &trait_ref.to_string(),\n                                           binding.item_name, binding.span)\n         }?;\n \n@@ -964,6 +905,21 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n         }\n         tcx.check_stability(assoc_ty.def_id, Some(ref_id), binding.span);\n \n+        if !speculative {\n+            dup_bindings.entry(assoc_ty.def_id)\n+                .and_modify(|prev_span| {\n+                    struct_span_err!(self.tcx().sess, binding.span, E0719,\n+                                     \"the value of the associated type `{}` (from the trait `{}`) \\\n+                                      is already specified\",\n+                                     binding.item_name,\n+                                     tcx.item_path_str(assoc_ty.container.id()))\n+                        .span_label(binding.span, \"re-bound here\")\n+                        .span_label(*prev_span, format!(\"`{}` bound here first\", binding.item_name))\n+                        .emit();\n+                })\n+                .or_insert(binding.span);\n+        }\n+\n         Ok(candidate.map_bound(|trait_ref| {\n             ty::ProjectionPredicate {\n                 projection_ty: ty::ProjectionTy::from_ref_and_name(\n@@ -989,6 +945,14 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n         )\n     }\n \n+    /// Transform a `PolyTraitRef` into a `PolyExistentialTraitRef` by\n+    /// removing the dummy `Self` type (`TRAIT_OBJECT_DUMMY_SELF`).\n+    fn trait_ref_to_existential(&self, trait_ref: ty::TraitRef<'tcx>)\n+                                -> ty::ExistentialTraitRef<'tcx> {\n+        assert_eq!(trait_ref.self_ty().sty, TRAIT_OBJECT_DUMMY_SELF);\n+        ty::ExistentialTraitRef::erase_self_ty(self.tcx(), trait_ref)\n+    }\n+\n     fn conv_object_ty_poly_trait_ref(&self,\n         span: Span,\n         trait_bounds: &[hir::PolyTraitRef],\n@@ -1043,13 +1007,22 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n         // Use a `BTreeSet` to keep output in a more consistent order.\n         let mut associated_types = BTreeSet::default();\n \n-        for tr in traits::supertraits(tcx, principal) {\n-            associated_types.extend(tcx.associated_items(tr.def_id())\n-                .filter(|item| item.kind == ty::AssociatedKind::Type)\n-                .map(|item| item.def_id));\n+        for tr in traits::elaborate_trait_ref(tcx, principal) {\n+            match tr {\n+                ty::Predicate::Trait(pred) => {\n+                    associated_types.extend(tcx.associated_items(pred.def_id())\n+                                    .filter(|item| item.kind == ty::AssociatedKind::Type)\n+                                    .map(|item| item.def_id));\n+                }\n+                ty::Predicate::Projection(pred) => {\n+                    // Include projections defined on supertraits.\n+                    projection_bounds.push((pred, DUMMY_SP))\n+                }\n+                _ => ()\n+            }\n         }\n \n-        for (projection_bound, _) in projection_bounds.iter().rev() {\n+        for (projection_bound, _) in &projection_bounds {\n             associated_types.remove(&projection_bound.projection_def_id());\n         }\n \n@@ -1067,13 +1040,11 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n \n         // Erase the `dummy_self` (`TRAIT_OBJECT_DUMMY_SELF`) used above.\n         let existential_principal = principal.map_bound(|trait_ref| {\n-            assert_eq!(trait_ref.self_ty().sty, TRAIT_OBJECT_DUMMY_SELF);\n-            ty::ExistentialTraitRef::erase_self_ty(self.tcx(), trait_ref)\n+            self.trait_ref_to_existential(trait_ref)\n         });\n         let existential_projections = projection_bounds.iter().map(|(bound, _)| {\n             bound.map_bound(|b| {\n-                let trait_ref = ty::ExistentialTraitRef::erase_self_ty(self.tcx(),\n-                    b.projection_ty.trait_ref(tcx));\n+                let trait_ref = self.trait_ref_to_existential(b.projection_ty.trait_ref(tcx));\n                 ty::ExistentialProjection {\n                     ty: b.ty,\n                     item_def_id: b.projection_ty.item_def_id,"}, {"sha": "e69c0af2be768dfa4c51c41117eb44894ef04f66", "filename": "src/test/run-pass/associated-types/associated-types-from-supertrait.rs", "status": "renamed", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7d9ee0314ac6755700ae8f51c9e00b2e5066250a/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-from-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9ee0314ac6755700ae8f51c9e00b2e5066250a/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-from-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types%2Fassociated-types-from-supertrait.rs?ref=7d9ee0314ac6755700ae8f51c9e00b2e5066250a", "patch": "@@ -8,16 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-pass\n-\n-use std::iter::Iterator;\n-\n-type Unit = ();\n-\n-fn test() ->  Box<Iterator<Item = (), Item = Unit>> {\n-    Box::new(None.into_iter())\n-}\n+trait Foo: Iterator<Item = i32> {}\n+trait Bar: Foo {}\n \n fn main() {\n-    test();\n+    let _: &dyn Bar;\n }", "previous_filename": "src/test/ui/lint/issue-50589-multiple-associated-types.rs"}, {"sha": "8d91561b7d64feb218d1a0ff9d71c2834a3573ec", "filename": "src/test/ui/associated-types/associated-types-overridden-binding-2.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d9ee0314ac6755700ae8f51c9e00b2e5066250a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9ee0314ac6755700ae8f51c9e00b2e5066250a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.rs?ref=7d9ee0314ac6755700ae8f51c9e00b2e5066250a", "patch": "@@ -13,5 +13,5 @@\n trait I32Iterator = Iterator<Item = i32>;\n \n fn main() {\n-    let _: &I32Iterator<Item = u32>; //~ ERROR E0719\n+    let _: &I32Iterator<Item = u32> = &vec![42].into_iter();\n }", "previous_filename": "src/test/ui/error-codes/E0719-trait-alias-object.rs"}, {"sha": "536cd945083a60cb8b6f77919a45ea6da7175b0c", "filename": "src/test/ui/associated-types/associated-types-overridden-binding-2.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7d9ee0314ac6755700ae8f51c9e00b2e5066250a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d9ee0314ac6755700ae8f51c9e00b2e5066250a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr?ref=7d9ee0314ac6755700ae8f51c9e00b2e5066250a", "patch": "@@ -0,0 +1,13 @@\n+error[E0271]: type mismatch resolving `<std::vec::IntoIter<u32> as std::iter::Iterator>::Item == i32`\n+  --> $DIR/associated-types-overridden-binding-2.rs:16:39\n+   |\n+LL |     let _: &I32Iterator<Item = u32> = &vec![42].into_iter();\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^ expected u32, found i32\n+   |\n+   = note: expected type `u32`\n+              found type `i32`\n+   = note: required for the cast to the object type `dyn I32Iterator<Item=u32, Item=i32>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "ed2211ecffd2bff8fba1f529674d4eda3138e3ce", "filename": "src/test/ui/associated-types/associated-types-overridden-binding.rs", "status": "renamed", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7d9ee0314ac6755700ae8f51c9e00b2e5066250a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9ee0314ac6755700ae8f51c9e00b2e5066250a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.rs?ref=7d9ee0314ac6755700ae8f51c9e00b2e5066250a", "patch": "@@ -10,9 +10,12 @@\n \n #![feature(trait_alias)]\n \n+trait Foo: Iterator<Item = i32> {}\n+trait Bar: Foo<Item = u32> {}\n+\n trait I32Iterator = Iterator<Item = i32>;\n-trait I32Iterator2 = I32Iterator<Item = i32>; //~ ERROR E0719\n-trait U32Iterator = I32Iterator2<Item = i32>; //~ ERROR E0719\n-trait U32Iterator2 = U32Iterator<Item = u32>; //~ ERROR E0719\n+trait U32Iterator = I32Iterator<Item = u32>;\n \n-fn main() {}\n+fn main() {\n+    let _: &I32Iterator<Item = u32>;\n+}", "previous_filename": "src/test/ui/error-codes/E0719-trait-alias.rs"}, {"sha": "216aa097db9fb7c44f0af2ea27b691c859415ec6", "filename": "src/test/ui/associated-types/associated-types-overridden-binding.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7d9ee0314ac6755700ae8f51c9e00b2e5066250a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d9ee0314ac6755700ae8f51c9e00b2e5066250a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr?ref=7d9ee0314ac6755700ae8f51c9e00b2e5066250a", "patch": "@@ -0,0 +1,15 @@\n+error[E0284]: type annotations required: cannot resolve `<Self as std::iter::Iterator>::Item == i32`\n+  --> $DIR/associated-types-overridden-binding.rs:14:1\n+   |\n+LL | trait Bar: Foo<Item = u32> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: required by `Foo`\n+  --> $DIR/associated-types-overridden-binding.rs:13:1\n+   |\n+LL | trait Foo: Iterator<Item = i32> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0284`."}, {"sha": "17ebf5901c438c778c22f95c4d8e9ff336af1809", "filename": "src/test/ui/error-codes/E0719-trait-alias-object.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d3ee4170d525612161fa7f4c34315316dd422c5/src%2Ftest%2Fui%2Ferror-codes%2FE0719-trait-alias-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d3ee4170d525612161fa7f4c34315316dd422c5/src%2Ftest%2Fui%2Ferror-codes%2FE0719-trait-alias-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0719-trait-alias-object.stderr?ref=6d3ee4170d525612161fa7f4c34315316dd422c5", "patch": "@@ -1,12 +0,0 @@\n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/E0719-trait-alias-object.rs:16:25\n-   |\n-LL | trait I32Iterator = Iterator<Item = i32>;\n-   |                              ---------- `Item` bound here first\n-...\n-LL |     let _: &I32Iterator<Item = u32>; //~ ERROR E0719\n-   |                         ^^^^^^^^^^ re-bound here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0719`."}, {"sha": "6bb1a541f4d44b4f505c4f6ed3222c4f6da8480a", "filename": "src/test/ui/error-codes/E0719-trait-alias.stderr", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6d3ee4170d525612161fa7f4c34315316dd422c5/src%2Ftest%2Fui%2Ferror-codes%2FE0719-trait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d3ee4170d525612161fa7f4c34315316dd422c5/src%2Ftest%2Fui%2Ferror-codes%2FE0719-trait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0719-trait-alias.stderr?ref=6d3ee4170d525612161fa7f4c34315316dd422c5", "patch": "@@ -1,29 +0,0 @@\n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/E0719-trait-alias.rs:14:34\n-   |\n-LL | trait I32Iterator = Iterator<Item = i32>;\n-   |                              ---------- `Item` bound here first\n-LL | trait I32Iterator2 = I32Iterator<Item = i32>; //~ ERROR E0719\n-   |                                  ^^^^^^^^^^ re-bound here\n-\n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/E0719-trait-alias.rs:15:34\n-   |\n-LL | trait I32Iterator = Iterator<Item = i32>;\n-   |                              ---------- `Item` bound here first\n-LL | trait I32Iterator2 = I32Iterator<Item = i32>; //~ ERROR E0719\n-LL | trait U32Iterator = I32Iterator2<Item = i32>; //~ ERROR E0719\n-   |                                  ^^^^^^^^^^ re-bound here\n-\n-error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/E0719-trait-alias.rs:16:34\n-   |\n-LL | trait I32Iterator = Iterator<Item = i32>;\n-   |                              ---------- `Item` bound here first\n-...\n-LL | trait U32Iterator2 = U32Iterator<Item = u32>; //~ ERROR E0719\n-   |                                  ^^^^^^^^^^ re-bound here\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0719`."}, {"sha": "c7bfa85093f2da7147a162af5bdbe627a9c5c32f", "filename": "src/test/ui/error-codes/E0719.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7d9ee0314ac6755700ae8f51c9e00b2e5066250a/src%2Ftest%2Fui%2Ferror-codes%2FE0719.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d9ee0314ac6755700ae8f51c9e00b2e5066250a/src%2Ftest%2Fui%2Ferror-codes%2FE0719.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0719.rs?ref=7d9ee0314ac6755700ae8f51c9e00b2e5066250a", "patch": "@@ -8,6 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+trait Foo: Iterator<Item = i32, Item = i32> {}\n+\n+type Unit = ();\n+\n+fn test() -> Box<Iterator<Item = (), Item = Unit>> {\n+    Box::new(None.into_iter())\n+}\n+\n fn main() {\n-    let _: &Iterator<Item = i32, Item = i32>; //~ ERROR E0719\n+    let _: &Iterator<Item = i32, Item = i32>;\n+    test();\n }"}, {"sha": "3a908fceced6028cd4612ee7b1753115350cb04d", "filename": "src/test/ui/error-codes/E0719.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7d9ee0314ac6755700ae8f51c9e00b2e5066250a/src%2Ftest%2Fui%2Ferror-codes%2FE0719.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d9ee0314ac6755700ae8f51c9e00b2e5066250a/src%2Ftest%2Fui%2Ferror-codes%2FE0719.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0719.stderr?ref=7d9ee0314ac6755700ae8f51c9e00b2e5066250a", "patch": "@@ -1,11 +1,19 @@\n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/E0719.rs:12:22\n+  --> $DIR/E0719.rs:11:33\n    |\n-LL |     let _: &Iterator<Item = i32, Item = i32>; //~ ERROR E0719\n-   |                      ^^^^^^^^^^  ---------- `Item` bound here first\n-   |                      |\n-   |                      re-bound here\n+LL | trait Foo: Iterator<Item = i32, Item = i32> {}\n+   |                     ----------  ^^^^^^^^^^ re-bound here\n+   |                     |\n+   |                     `Item` bound here first\n \n-error: aborting due to previous error\n+error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n+  --> $DIR/E0719.rs:15:38\n+   |\n+LL | fn test() -> Box<Iterator<Item = (), Item = Unit>> {\n+   |                           ---------  ^^^^^^^^^^^ re-bound here\n+   |                           |\n+   |                           `Item` bound here first\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0719`."}, {"sha": "7f0a1ee1f3307b2a4f3f226d88f715a50af84def", "filename": "src/test/ui/lint/issue-50589-multiple-associated-types.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6d3ee4170d525612161fa7f4c34315316dd422c5/src%2Ftest%2Fui%2Flint%2Fissue-50589-multiple-associated-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d3ee4170d525612161fa7f4c34315316dd422c5/src%2Ftest%2Fui%2Flint%2Fissue-50589-multiple-associated-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-50589-multiple-associated-types.stderr?ref=6d3ee4170d525612161fa7f4c34315316dd422c5", "patch": "@@ -1,23 +0,0 @@\n-warning: associated type binding `Item` specified more than once\n-  --> $DIR/issue-50589-multiple-associated-types.rs:17:39\n-   |\n-LL | fn test() ->  Box<Iterator<Item = (), Item = Unit>> {\n-   |                            ---------  ^^^^^^^^^^^ used more than once\n-   |                            |\n-   |                            first use of `Item`\n-   |\n-   = note: #[warn(duplicate_associated_type_bindings)] on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #50589 <https://github.com/rust-lang/rust/issues/50589>\n-\n-warning: associated type binding `Item` specified more than once\n-  --> $DIR/issue-50589-multiple-associated-types.rs:17:39\n-   |\n-LL | fn test() ->  Box<Iterator<Item = (), Item = Unit>> {\n-   |                            ---------  ^^^^^^^^^^^ used more than once\n-   |                            |\n-   |                            first use of `Item`\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #50589 <https://github.com/rust-lang/rust/issues/50589>\n-"}, {"sha": "6b7b322a53d9e86ec530d55da1ef9a887bbd02ff", "filename": "src/test/ui/traits/trait-alias-object.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d9ee0314ac6755700ae8f51c9e00b2e5066250a/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d9ee0314ac6755700ae8f51c9e00b2e5066250a/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-object.stderr?ref=7d9ee0314ac6755700ae8f51c9e00b2e5066250a", "patch": "@@ -1,13 +1,13 @@\n error[E0038]: the trait `EqAlias` cannot be made into an object\n-  --> $DIR/trait-alias-objects.rs:17:13\n+  --> $DIR/trait-alias-object.rs:17:13\n    |\n LL |     let _: &dyn EqAlias = &123;\n    |             ^^^^^^^^^^^ the trait `EqAlias` cannot be made into an object\n    |\n    = note: the trait cannot use `Self` as a type parameter in the supertraits or where-clauses\n \n error[E0191]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) must be specified\n-  --> $DIR/trait-alias-objects.rs:18:13\n+  --> $DIR/trait-alias-object.rs:18:13\n    |\n LL |     let _: &dyn IteratorAlias = &vec![123].into_iter();\n    |             ^^^^^^^^^^^^^^^^^ missing associated type `Item` value"}]}