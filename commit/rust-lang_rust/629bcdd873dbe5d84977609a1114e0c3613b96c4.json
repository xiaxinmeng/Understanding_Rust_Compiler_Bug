{"sha": "629bcdd873dbe5d84977609a1114e0c3613b96c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyOWJjZGQ4NzNkYmU1ZDg0OTc3NjA5YTExMTRlMGMzNjEzYjk2YzQ=", "commit": {"author": {"name": "Guillaume Pinot", "email": "texitoi@texitoi.eu", "date": "2015-01-10T19:14:21Z"}, "committer": {"name": "Guillaume Pinot", "email": "texitoi@texitoi.eu", "date": "2015-01-10T19:19:54Z"}, "message": "Improvement of shootout-binarytrees.rs\n\nPart of #18085\n\nInstead of using an Enum, we use a struct with Option<&Tree> as leaves. It allow\nto limit a lot of allocation.\n\nbefore:\n```\ntexitoi@vaio:~/dev/benchmarksgame-rs$ time ./bin/binary-trees-orig 20\nstretch tree of depth 21\t check: -1\n2097152\t trees of depth 4\t check: -2097152\n524288\t trees of depth 6\t check: -524288\n131072\t trees of depth 8\t check: -131072\n32768\t trees of depth 10\t check: -32768\n8192\t trees of depth 12\t check: -8192\n2048\t trees of depth 14\t check: -2048\n512\t trees of depth 16\t check: -512\n128\t trees of depth 18\t check: -128\n32\t trees of depth 20\t check: -32\nlong lived tree of depth 20\t check: -1\n\nreal\t0m3.860s\nuser\t0m11.032s\nsys\t0m3.572s\n```\nafter:\n```\ntexitoi@vaio:~/dev/benchmarksgame-rs$ time ./bin/binary-trees 20\nstretch tree of depth 21\t check: -1\n2097152\t trees of depth 4\t check: -2097152\n524288\t trees of depth 6\t check: -524288\n131072\t trees of depth 8\t check: -131072\n32768\t trees of depth 10\t check: -32768\n8192\t trees of depth 12\t check: -8192\n2048\t trees of depth 14\t check: -2048\n512\t trees of depth 16\t check: -512\n128\t trees of depth 18\t check: -128\n32\t trees of depth 20\t check: -32\nlong lived tree of depth 20\t check: -1\n\nreal\t0m2.824s\nuser\t0m9.224s\nsys\t0m1.428s\n```", "tree": {"sha": "08d983b3ad9986610093e61b622c4cd20df26c77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08d983b3ad9986610093e61b622c4cd20df26c77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/629bcdd873dbe5d84977609a1114e0c3613b96c4", "comment_count": 7, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/629bcdd873dbe5d84977609a1114e0c3613b96c4", "html_url": "https://github.com/rust-lang/rust/commit/629bcdd873dbe5d84977609a1114e0c3613b96c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/629bcdd873dbe5d84977609a1114e0c3613b96c4/comments", "author": {"login": "TeXitoi", "id": 5787066, "node_id": "MDQ6VXNlcjU3ODcwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5787066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TeXitoi", "html_url": "https://github.com/TeXitoi", "followers_url": "https://api.github.com/users/TeXitoi/followers", "following_url": "https://api.github.com/users/TeXitoi/following{/other_user}", "gists_url": "https://api.github.com/users/TeXitoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/TeXitoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TeXitoi/subscriptions", "organizations_url": "https://api.github.com/users/TeXitoi/orgs", "repos_url": "https://api.github.com/users/TeXitoi/repos", "events_url": "https://api.github.com/users/TeXitoi/events{/privacy}", "received_events_url": "https://api.github.com/users/TeXitoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TeXitoi", "id": 5787066, "node_id": "MDQ6VXNlcjU3ODcwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5787066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TeXitoi", "html_url": "https://github.com/TeXitoi", "followers_url": "https://api.github.com/users/TeXitoi/followers", "following_url": "https://api.github.com/users/TeXitoi/following{/other_user}", "gists_url": "https://api.github.com/users/TeXitoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/TeXitoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TeXitoi/subscriptions", "organizations_url": "https://api.github.com/users/TeXitoi/orgs", "repos_url": "https://api.github.com/users/TeXitoi/repos", "events_url": "https://api.github.com/users/TeXitoi/events{/privacy}", "received_events_url": "https://api.github.com/users/TeXitoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a09b139f9c4c6f4a2c3fb78e906e3ae0abf7f901", "url": "https://api.github.com/repos/rust-lang/rust/commits/a09b139f9c4c6f4a2c3fb78e906e3ae0abf7f901", "html_url": "https://github.com/rust-lang/rust/commit/a09b139f9c4c6f4a2c3fb78e906e3ae0abf7f901"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "58e2430b0ffa4d4acb817cc83389c568d313591e", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/629bcdd873dbe5d84977609a1114e0c3613b96c4/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629bcdd873dbe5d84977609a1114e0c3613b96c4/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=629bcdd873dbe5d84977609a1114e0c3613b96c4", "patch": "@@ -44,26 +44,30 @@ use std::iter::range_step;\n use std::thread::Thread;\n use arena::TypedArena;\n \n-enum Tree<'a> {\n-    Nil,\n-    Node(&'a Tree<'a>, &'a Tree<'a>, int)\n+struct Tree<'a> {\n+    l: Option<&'a Tree<'a>>,\n+    r: Option<&'a Tree<'a>>,\n+    i: i32\n }\n \n-fn item_check(t: &Tree) -> int {\n+fn item_check(t: &Option<&Tree>) -> i32 {\n     match *t {\n-        Tree::Nil => 0,\n-        Tree::Node(l, r, i) => i + item_check(l) - item_check(r)\n+        None => 0,\n+        Some(&Tree { ref l, ref r, i }) => i + item_check(l) - item_check(r)\n     }\n }\n \n-fn bottom_up_tree<'r>(arena: &'r TypedArena<Tree<'r>>, item: int, depth: int)\n-                  -> &'r Tree<'r> {\n+fn bottom_up_tree<'r>(arena: &'r TypedArena<Tree<'r>>, item: i32, depth: i32)\n+                  -> Option<&'r Tree<'r>> {\n     if depth > 0 {\n-        arena.alloc(Tree::Node(bottom_up_tree(arena, 2 * item - 1, depth - 1),\n-                               bottom_up_tree(arena, 2 * item, depth - 1),\n-                               item))\n+        let t: &Tree<'r> = arena.alloc(Tree {\n+            l: bottom_up_tree(arena, 2 * item - 1, depth - 1),\n+            r: bottom_up_tree(arena, 2 * item, depth - 1),\n+            i: item\n+        });\n+        Some(t)\n     } else {\n-        arena.alloc(Tree::Nil)\n+        None\n     }\n }\n \n@@ -86,22 +90,22 @@ fn main() {\n         let tree = bottom_up_tree(&arena, 0, depth);\n \n         println!(\"stretch tree of depth {}\\t check: {}\",\n-                 depth, item_check(tree));\n+                 depth, item_check(&tree));\n     }\n \n     let long_lived_arena = TypedArena::new();\n     let long_lived_tree = bottom_up_tree(&long_lived_arena, 0, max_depth);\n \n     let messages = range_step(min_depth, max_depth + 1, 2).map(|depth| {\n             use std::num::Int;\n-            let iterations = 2i.pow((max_depth - depth + min_depth) as uint);\n+            let iterations = 2.pow((max_depth - depth + min_depth) as usize);\n             Thread::scoped(move|| {\n                 let mut chk = 0;\n-                for i in range(1, iterations + 1) {\n+                for i in 1 .. iterations + 1 {\n                     let arena = TypedArena::new();\n                     let a = bottom_up_tree(&arena, i, depth);\n                     let b = bottom_up_tree(&arena, -i, depth);\n-                    chk += item_check(a) + item_check(b);\n+                    chk += item_check(&a) + item_check(&b);\n                 }\n                 format!(\"{}\\t trees of depth {}\\t check: {}\",\n                         iterations * 2, depth, chk)\n@@ -113,5 +117,5 @@ fn main() {\n     }\n \n     println!(\"long lived tree of depth {}\\t check: {}\",\n-             max_depth, item_check(long_lived_tree));\n+             max_depth, item_check(&long_lived_tree));\n }"}]}