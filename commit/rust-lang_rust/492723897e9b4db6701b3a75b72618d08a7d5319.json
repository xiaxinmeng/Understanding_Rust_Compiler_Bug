{"sha": "492723897e9b4db6701b3a75b72618d08a7d5319", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5MjcyMzg5N2U5YjRkYjY3MDFiM2E3NWI3MjYxOGQwOGE3ZDUzMTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-29T20:52:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-29T20:52:34Z"}, "message": "Auto merge of #85901 - ijackson:bufwriter-tweaks, r=joshtriplett\n\nBufwriter disassembly tweaks\n\nIn #80690 `@BurntSushi` observed that `WriterPanicked` was erroneously not exported, and suggested renaming `into_raw_parts` to `into_parts`. (More info in my commit messages.)\n\nr? `@BurntSushi`", "tree": {"sha": "5c3806cbfbb38537f3d8a8f2be0a08ec8d409141", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c3806cbfbb38537f3d8a8f2be0a08ec8d409141"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/492723897e9b4db6701b3a75b72618d08a7d5319", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/492723897e9b4db6701b3a75b72618d08a7d5319", "html_url": "https://github.com/rust-lang/rust/commit/492723897e9b4db6701b3a75b72618d08a7d5319", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/492723897e9b4db6701b3a75b72618d08a7d5319/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a985d8e6c7f0519fa1e147854430a381ac4eadf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a985d8e6c7f0519fa1e147854430a381ac4eadf8", "html_url": "https://github.com/rust-lang/rust/commit/a985d8e6c7f0519fa1e147854430a381ac4eadf8"}, {"sha": "bf30c51541c533830ec46ae65d9863666055a74b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf30c51541c533830ec46ae65d9863666055a74b", "html_url": "https://github.com/rust-lang/rust/commit/bf30c51541c533830ec46ae65d9863666055a74b"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "9da5fbff9cf0295184d13e57e01b5a0d483a2fed", "filename": "library/std/src/io/buffered/bufwriter.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/492723897e9b4db6701b3a75b72618d08a7d5319/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/492723897e9b4db6701b3a75b72618d08a7d5319/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs?ref=492723897e9b4db6701b3a75b72618d08a7d5319", "patch": "@@ -307,7 +307,7 @@ impl<W: Write> BufWriter<W> {\n     pub fn into_inner(mut self) -> Result<W, IntoInnerError<BufWriter<W>>> {\n         match self.flush_buf() {\n             Err(e) => Err(IntoInnerError::new(self, e)),\n-            Ok(()) => Ok(self.into_raw_parts().0),\n+            Ok(()) => Ok(self.into_parts().0),\n         }\n     }\n \n@@ -318,24 +318,24 @@ impl<W: Write> BufWriter<W> {\n     /// In this case, we return `WriterPanicked` for the buffered data (from which the buffer\n     /// contents can still be recovered).\n     ///\n-    /// `into_raw_parts` makes no attempt to flush data and cannot fail.\n+    /// `into_parts` makes no attempt to flush data and cannot fail.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(bufwriter_into_raw_parts)]\n+    /// #![feature(bufwriter_into_parts)]\n     /// use std::io::{BufWriter, Write};\n     ///\n     /// let mut buffer = [0u8; 10];\n     /// let mut stream = BufWriter::new(buffer.as_mut());\n     /// write!(stream, \"too much data\").unwrap();\n     /// stream.flush().expect_err(\"it doesn't fit\");\n-    /// let (recovered_writer, buffered_data) = stream.into_raw_parts();\n+    /// let (recovered_writer, buffered_data) = stream.into_parts();\n     /// assert_eq!(recovered_writer.len(), 0);\n     /// assert_eq!(&buffered_data.unwrap(), b\"ata\");\n     /// ```\n-    #[unstable(feature = \"bufwriter_into_raw_parts\", issue = \"80690\")]\n-    pub fn into_raw_parts(mut self) -> (W, Result<Vec<u8>, WriterPanicked>) {\n+    #[unstable(feature = \"bufwriter_into_parts\", issue = \"80690\")]\n+    pub fn into_parts(mut self) -> (W, Result<Vec<u8>, WriterPanicked>) {\n         let buf = mem::take(&mut self.buf);\n         let buf = if !self.panicked { Ok(buf) } else { Err(WriterPanicked { buf }) };\n \n@@ -444,14 +444,14 @@ impl<W: Write> BufWriter<W> {\n     }\n }\n \n-#[unstable(feature = \"bufwriter_into_raw_parts\", issue = \"80690\")]\n-/// Error returned for the buffered data from `BufWriter::into_raw_parts`, when the underlying\n+#[unstable(feature = \"bufwriter_into_parts\", issue = \"80690\")]\n+/// Error returned for the buffered data from `BufWriter::into_parts`, when the underlying\n /// writer has previously panicked.  Contains the (possibly partly written) buffered data.\n ///\n /// # Example\n ///\n /// ```\n-/// #![feature(bufwriter_into_raw_parts)]\n+/// #![feature(bufwriter_into_parts)]\n /// use std::io::{self, BufWriter, Write};\n /// use std::panic::{catch_unwind, AssertUnwindSafe};\n ///\n@@ -467,7 +467,7 @@ impl<W: Write> BufWriter<W> {\n ///     stream.flush().unwrap()\n /// }));\n /// assert!(result.is_err());\n-/// let (recovered_writer, buffered_data) = stream.into_raw_parts();\n+/// let (recovered_writer, buffered_data) = stream.into_parts();\n /// assert!(matches!(recovered_writer, PanickingWriter));\n /// assert_eq!(buffered_data.unwrap_err().into_inner(), b\"some data\");\n /// ```\n@@ -478,7 +478,7 @@ pub struct WriterPanicked {\n impl WriterPanicked {\n     /// Returns the perhaps-unwritten data.  Some of this data may have been written by the\n     /// panicking call(s) to the underlying writer, so simply writing it again is not a good idea.\n-    #[unstable(feature = \"bufwriter_into_raw_parts\", issue = \"80690\")]\n+    #[unstable(feature = \"bufwriter_into_parts\", issue = \"80690\")]\n     pub fn into_inner(self) -> Vec<u8> {\n         self.buf\n     }\n@@ -487,22 +487,22 @@ impl WriterPanicked {\n         \"BufWriter inner writer panicked, what data remains unwritten is not known\";\n }\n \n-#[unstable(feature = \"bufwriter_into_raw_parts\", issue = \"80690\")]\n+#[unstable(feature = \"bufwriter_into_parts\", issue = \"80690\")]\n impl error::Error for WriterPanicked {\n     #[allow(deprecated, deprecated_in_future)]\n     fn description(&self) -> &str {\n         Self::DESCRIPTION\n     }\n }\n \n-#[unstable(feature = \"bufwriter_into_raw_parts\", issue = \"80690\")]\n+#[unstable(feature = \"bufwriter_into_parts\", issue = \"80690\")]\n impl fmt::Display for WriterPanicked {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{}\", Self::DESCRIPTION)\n     }\n }\n \n-#[unstable(feature = \"bufwriter_into_raw_parts\", issue = \"80690\")]\n+#[unstable(feature = \"bufwriter_into_parts\", issue = \"80690\")]\n impl fmt::Debug for WriterPanicked {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"WriterPanicked\")"}, {"sha": "8cfffc2fd35a4e32ccd0faefa36be2c8089677ae", "filename": "library/std/src/io/buffered/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/492723897e9b4db6701b3a75b72618d08a7d5319/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/492723897e9b4db6701b3a75b72618d08a7d5319/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fmod.rs?ref=492723897e9b4db6701b3a75b72618d08a7d5319", "patch": "@@ -14,6 +14,8 @@ use crate::io::Error;\n \n pub use bufreader::BufReader;\n pub use bufwriter::BufWriter;\n+#[unstable(feature = \"bufwriter_into_parts\", issue = \"80690\")]\n+pub use bufwriter::WriterPanicked;\n pub use linewriter::LineWriter;\n use linewritershim::LineWriterShim;\n "}, {"sha": "c58abf2a737a355b0061661b6003e6848ab12088", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/492723897e9b4db6701b3a75b72618d08a7d5319/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/492723897e9b4db6701b3a75b72618d08a7d5319/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=492723897e9b4db6701b3a75b72618d08a7d5319", "patch": "@@ -264,6 +264,8 @@ use crate::sys_common::memchr;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::buffered::IntoInnerError;\n+#[unstable(feature = \"bufwriter_into_parts\", issue = \"80690\")]\n+pub use self::buffered::WriterPanicked;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::buffered::{BufReader, BufWriter, LineWriter};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}