{"sha": "bde225e2fafc7f593cfa5a9e1e6c750264682b71", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkZTIyNWUyZmFmYzdmNTkzY2ZhNWE5ZTFlNmM3NTAyNjQ2ODJiNzE=", "commit": {"author": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-18T16:39:16Z"}, "committer": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-18T22:07:14Z"}, "message": "Feature gate non-ASCII lifetime identifiers\n\nFixes #19069.", "tree": {"sha": "64f06c4455fbe97f90675aa9d2476cb3e504e87f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64f06c4455fbe97f90675aa9d2476cb3e504e87f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bde225e2fafc7f593cfa5a9e1e6c750264682b71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bde225e2fafc7f593cfa5a9e1e6c750264682b71", "html_url": "https://github.com/rust-lang/rust/commit/bde225e2fafc7f593cfa5a9e1e6c750264682b71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bde225e2fafc7f593cfa5a9e1e6c750264682b71/comments", "author": null, "committer": null, "parents": [{"sha": "c8d6e3b2c2a780eff92299da5d1c02e081617088", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8d6e3b2c2a780eff92299da5d1c02e081617088", "html_url": "https://github.com/rust-lang/rust/commit/c8d6e3b2c2a780eff92299da5d1c02e081617088"}], "stats": {"total": 74, "additions": 55, "deletions": 19}, "files": [{"sha": "9ab45ff0f7abceb7ae742560f0b4c17d7eb185e1", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bde225e2fafc7f593cfa5a9e1e6c750264682b71/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bde225e2fafc7f593cfa5a9e1e6c750264682b71/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=bde225e2fafc7f593cfa5a9e1e6c750264682b71", "patch": "@@ -992,7 +992,7 @@ impl LintPass for NonSnakeCase {\n         self.check_snake_case(cx, \"trait method\", t.ident, t.span);\n     }\n \n-    fn check_lifetime_decl(&mut self, cx: &Context, t: &ast::LifetimeDef) {\n+    fn check_lifetime_def(&mut self, cx: &Context, t: &ast::LifetimeDef) {\n         self.check_snake_case(cx, \"lifetime\", t.lifetime.name.ident(), t.lifetime.span);\n     }\n "}, {"sha": "52d1c72de68c18cfe4ed1d33beafb0759eb80dc9", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bde225e2fafc7f593cfa5a9e1e6c750264682b71/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bde225e2fafc7f593cfa5a9e1e6c750264682b71/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=bde225e2fafc7f593cfa5a9e1e6c750264682b71", "patch": "@@ -725,8 +725,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n         run_lints!(self, check_lifetime_ref, lt);\n     }\n \n-    fn visit_lifetime_decl(&mut self, lt: &ast::LifetimeDef) {\n-        run_lints!(self, check_lifetime_decl, lt);\n+    fn visit_lifetime_def(&mut self, lt: &ast::LifetimeDef) {\n+        run_lints!(self, check_lifetime_def, lt);\n     }\n \n     fn visit_explicit_self(&mut self, es: &ast::ExplicitSelf) {"}, {"sha": "d6b83752cc50cc7c0f624f13f4e0045f5587c714", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bde225e2fafc7f593cfa5a9e1e6c750264682b71/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bde225e2fafc7f593cfa5a9e1e6c750264682b71/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=bde225e2fafc7f593cfa5a9e1e6c750264682b71", "patch": "@@ -155,7 +155,7 @@ pub trait LintPass {\n     fn check_variant_post(&mut self, _: &Context, _: &ast::Variant, _: &ast::Generics) { }\n     fn check_opt_lifetime_ref(&mut self, _: &Context, _: Span, _: &Option<ast::Lifetime>) { }\n     fn check_lifetime_ref(&mut self, _: &Context, _: &ast::Lifetime) { }\n-    fn check_lifetime_decl(&mut self, _: &Context, _: &ast::LifetimeDef) { }\n+    fn check_lifetime_def(&mut self, _: &Context, _: &ast::LifetimeDef) { }\n     fn check_explicit_self(&mut self, _: &Context, _: &ast::ExplicitSelf) { }\n     fn check_mac(&mut self, _: &Context, _: &ast::Mac) { }\n     fn check_path(&mut self, _: &Context, _: &ast::Path, _: ast::NodeId) { }"}, {"sha": "3fc92a84194243d08ad631a4250c65ec363dd2af", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bde225e2fafc7f593cfa5a9e1e6c750264682b71/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bde225e2fafc7f593cfa5a9e1e6c750264682b71/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=bde225e2fafc7f593cfa5a9e1e6c750264682b71", "patch": "@@ -226,7 +226,7 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n         self.with(LateScope(&trait_ref.bound_lifetimes, self.scope), |this| {\n             this.check_lifetime_defs(&trait_ref.bound_lifetimes);\n             for lifetime in trait_ref.bound_lifetimes.iter() {\n-                this.visit_lifetime_decl(lifetime);\n+                this.visit_lifetime_def(lifetime);\n             }\n             this.visit_trait_ref(&trait_ref.trait_ref)\n         })"}, {"sha": "2cca63bd65d94a8b3ef207028d52033fdde1fd89", "filename": "src/librustc_back/svh.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bde225e2fafc7f593cfa5a9e1e6c750264682b71/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bde225e2fafc7f593cfa5a9e1e6c750264682b71/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=bde225e2fafc7f593cfa5a9e1e6c750264682b71", "patch": "@@ -181,7 +181,7 @@ mod svh_visitor {\n         SawStructDef(token::InternedString),\n \n         SawLifetimeRef(token::InternedString),\n-        SawLifetimeDecl(token::InternedString),\n+        SawLifetimeDef(token::InternedString),\n \n         SawMod,\n         SawViewItem,\n@@ -414,8 +414,8 @@ mod svh_visitor {\n             SawLifetimeRef(content(l.name)).hash(self.st);\n         }\n \n-        fn visit_lifetime_decl(&mut self, l: &LifetimeDef) {\n-            SawLifetimeDecl(content(l.lifetime.name)).hash(self.st);\n+        fn visit_lifetime_def(&mut self, l: &LifetimeDef) {\n+            SawLifetimeDef(content(l.lifetime.name)).hash(self.st);\n         }\n \n         // We do recursively walk the bodies of functions/methods"}, {"sha": "472331bc9e15d645aec5592af9ea35abfbecf719", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bde225e2fafc7f593cfa5a9e1e6c750264682b71/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bde225e2fafc7f593cfa5a9e1e6c750264682b71/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=bde225e2fafc7f593cfa5a9e1e6c750264682b71", "patch": "@@ -866,7 +866,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n         self.insert(lifetime.id, NodeLifetime(lifetime));\n     }\n \n-    fn visit_lifetime_decl(&mut self, def: &'ast LifetimeDef) {\n+    fn visit_lifetime_def(&mut self, def: &'ast LifetimeDef) {\n         self.visit_lifetime_ref(&def.lifetime);\n     }\n }"}, {"sha": "043e79bffd9e9cc7d574f5cc190ef66d631a88ad", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bde225e2fafc7f593cfa5a9e1e6c750264682b71/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bde225e2fafc7f593cfa5a9e1e6c750264682b71/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=bde225e2fafc7f593cfa5a9e1e6c750264682b71", "patch": "@@ -535,7 +535,7 @@ impl<'a, 'v, O: IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O> {\n         self.operation.visit_id(lifetime.id);\n     }\n \n-    fn visit_lifetime_decl(&mut self, def: &'v LifetimeDef) {\n+    fn visit_lifetime_def(&mut self, def: &'v LifetimeDef) {\n         self.visit_lifetime_ref(&def.lifetime);\n     }\n }"}, {"sha": "460a94a8d5aaa2a9ca1cdd76ffb5f3c1b45a44d3", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bde225e2fafc7f593cfa5a9e1e6c750264682b71/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bde225e2fafc7f593cfa5a9e1e6c750264682b71/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=bde225e2fafc7f593cfa5a9e1e6c750264682b71", "patch": "@@ -141,8 +141,8 @@ impl<'a> Context<'a> {\n }\n \n impl<'a, 'v> Visitor<'v> for Context<'a> {\n-    fn visit_ident(&mut self, sp: Span, id: ast::Ident) {\n-        if !token::get_ident(id).get().is_ascii() {\n+    fn visit_name(&mut self, sp: Span, name: ast::Name) {\n+        if !token::get_name(name).get().is_ascii() {\n             self.gate_feature(\"non_ascii_idents\", sp,\n                               \"non-ascii idents are not fully supported.\");\n         }"}, {"sha": "e98cc3b9c7190eabad891ef6ce6fc1ec1b4222fd", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bde225e2fafc7f593cfa5a9e1e6c750264682b71/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bde225e2fafc7f593cfa5a9e1e6c750264682b71/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=bde225e2fafc7f593cfa5a9e1e6c750264682b71", "patch": "@@ -55,8 +55,11 @@ pub enum FnKind<'a> {\n /// new default implementation gets introduced.)\n pub trait Visitor<'v> {\n \n-    fn visit_ident(&mut self, _sp: Span, _ident: Ident) {\n-        /*! Visit the idents */\n+    fn visit_name(&mut self, _span: Span, _name: Name) {\n+        // Nothing to do.\n+    }\n+    fn visit_ident(&mut self, span: Span, ident: Ident) {\n+        self.visit_name(span, ident.name);\n     }\n     fn visit_mod(&mut self, m: &'v Mod, _s: Span, _n: NodeId) { walk_mod(self, m) }\n     fn visit_view_item(&mut self, i: &'v ViewItem) { walk_view_item(self, i) }\n@@ -102,11 +105,11 @@ pub trait Visitor<'v> {\n             None => ()\n         }\n     }\n-    fn visit_lifetime_ref(&mut self, _lifetime: &'v Lifetime) {\n-        /*! Visits a reference to a lifetime */\n+    fn visit_lifetime_ref(&mut self, lifetime: &'v Lifetime) {\n+        self.visit_name(lifetime.span, lifetime.name)\n     }\n-    fn visit_lifetime_decl(&mut self, _lifetime: &'v LifetimeDef) {\n-        /*! Visits a declaration of a lifetime */\n+    fn visit_lifetime_def(&mut self, lifetime: &'v LifetimeDef) {\n+        walk_lifetime_def(self, lifetime)\n     }\n     fn visit_explicit_self(&mut self, es: &'v ExplicitSelf) {\n         walk_explicit_self(self, es)\n@@ -207,6 +210,14 @@ pub fn walk_local<'v, V: Visitor<'v>>(visitor: &mut V, local: &'v Local) {\n     walk_expr_opt(visitor, &local.init);\n }\n \n+pub fn walk_lifetime_def<'v, V: Visitor<'v>>(visitor: &mut V,\n+                                              lifetime_def: &'v LifetimeDef) {\n+    visitor.visit_lifetime_ref(&lifetime_def.lifetime);\n+    for bound in lifetime_def.bounds.iter() {\n+        visitor.visit_lifetime_ref(bound);\n+    }\n+}\n+\n pub fn walk_explicit_self<'v, V: Visitor<'v>>(visitor: &mut V,\n                                               explicit_self: &'v ExplicitSelf) {\n     match explicit_self.node {\n@@ -424,7 +435,7 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n pub fn walk_lifetime_decls_helper<'v, V: Visitor<'v>>(visitor: &mut V,\n                                                       lifetimes: &'v Vec<LifetimeDef>) {\n     for l in lifetimes.iter() {\n-        visitor.visit_lifetime_decl(l);\n+        visitor.visit_lifetime_def(l);\n     }\n }\n \n@@ -555,6 +566,7 @@ pub fn walk_ty_param_bound<'v, V: Visitor<'v>>(visitor: &mut V,\n \n pub fn walk_generics<'v, V: Visitor<'v>>(visitor: &mut V, generics: &'v Generics) {\n     for type_parameter in generics.ty_params.iter() {\n+        visitor.visit_ident(type_parameter.span, type_parameter.ident);\n         walk_ty_param_bounds_helper(visitor, &type_parameter.bounds);\n         match type_parameter.default {\n             Some(ref ty) => visitor.visit_ty(&**ty),"}, {"sha": "0c3c11ccd07b30389d492abb3ffc575172e3470f", "filename": "src/test/compile-fail/utf8_idents.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bde225e2fafc7f593cfa5a9e1e6c750264682b71/src%2Ftest%2Fcompile-fail%2Futf8_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bde225e2fafc7f593cfa5a9e1e6c750264682b71/src%2Ftest%2Fcompile-fail%2Futf8_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Futf8_idents.rs?ref=bde225e2fafc7f593cfa5a9e1e6c750264682b71", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+// ignore-lexer-test FIXME #15679\n+\n+fn foo<\n+    '\u03b2, //~ ERROR non-ascii idents are not fully supported.\n+    \u03b3  //~ ERROR non-ascii idents are not fully supported.\n+>() {}\n+\n+struct X {\n+    \u03b4: uint //~ ERROR non-ascii idents are not fully supported.\n+}\n+\n+pub fn main() {\n+    let \u03b1 = 0.00001f64; //~ ERROR non-ascii idents are not fully supported.\n+}"}]}