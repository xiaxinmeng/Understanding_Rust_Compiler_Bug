{"sha": "4fd18c9c06dd7d8165c5259f19847ac22248af66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZDE4YzljMDZkZDdkODE2NWM1MjU5ZjE5ODQ3YWMyMjI0OGFmNjY=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-05T01:43:05Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-11T01:31:38Z"}, "message": "Use `Symbol` in `external_path()`.", "tree": {"sha": "0118b13c144da8148b720b349d1b7db4b18c83a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0118b13c144da8148b720b349d1b7db4b18c83a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fd18c9c06dd7d8165c5259f19847ac22248af66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fd18c9c06dd7d8165c5259f19847ac22248af66", "html_url": "https://github.com/rust-lang/rust/commit/4fd18c9c06dd7d8165c5259f19847ac22248af66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fd18c9c06dd7d8165c5259f19847ac22248af66/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e5611ab4320b892e2e3b999a683dabf5e120a2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e5611ab4320b892e2e3b999a683dabf5e120a2f", "html_url": "https://github.com/rust-lang/rust/commit/5e5611ab4320b892e2e3b999a683dabf5e120a2f"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "ae70fdc530be63f79aced4903dec9a8bae01ea73", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4fd18c9c06dd7d8165c5259f19847ac22248af66/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fd18c9c06dd7d8165c5259f19847ac22248af66/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4fd18c9c06dd7d8165c5259f19847ac22248af66", "patch": "@@ -1039,7 +1039,7 @@ impl GenericBound {\n     fn maybe_sized(cx: &DocContext<'_>) -> GenericBound {\n         let did = cx.tcx.require_lang_item(lang_items::SizedTraitLangItem, None);\n         let empty = cx.tcx.intern_substs(&[]);\n-        let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n+        let path = external_path(cx, cx.tcx.item_name(did),\n             Some(did), false, vec![], empty);\n         inline::record_extern_fqn(cx, did, TypeKind::Trait);\n         GenericBound::TraitBound(PolyTrait {\n@@ -1138,13 +1138,13 @@ fn external_generic_args(\n \n // trait_did should be set to a trait's DefId if called on a TraitRef, in order to sugar\n // from Fn<(A, B,), C> to Fn(A, B) -> C\n-fn external_path(cx: &DocContext<'_>, name: &str, trait_did: Option<DefId>, has_self: bool,\n+fn external_path(cx: &DocContext<'_>, name: Symbol, trait_did: Option<DefId>, has_self: bool,\n                  bindings: Vec<TypeBinding>, substs: SubstsRef<'_>) -> Path {\n     Path {\n         global: false,\n         res: Res::Err,\n         segments: vec![PathSegment {\n-            name: name.to_string(),\n+            name: name.as_str().to_string(),\n             args: external_generic_args(cx, trait_did, has_self, bindings, substs)\n         }],\n     }\n@@ -1154,7 +1154,7 @@ impl<'a, 'tcx> Clean<GenericBound> for (&'a ty::TraitRef<'tcx>, Vec<TypeBinding>\n     fn clean(&self, cx: &DocContext<'_>) -> GenericBound {\n         let (trait_ref, ref bounds) = *self;\n         inline::record_extern_fqn(cx, trait_ref.def_id, TypeKind::Trait);\n-        let path = external_path(cx, &cx.tcx.item_name(trait_ref.def_id).as_str(),\n+        let path = external_path(cx, cx.tcx.item_name(trait_ref.def_id),\n                                  Some(trait_ref.def_id), true, bounds.clone(), trait_ref.substs);\n \n         debug!(\"ty::TraitRef\\n  subst: {:?}\\n\", trait_ref.substs);\n@@ -3089,8 +3089,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     AdtKind::Enum => TypeKind::Enum,\n                 };\n                 inline::record_extern_fqn(cx, did, kind);\n-                let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n-                                         None, false, vec![], substs);\n+                let path = external_path(cx, cx.tcx.item_name(did), None, false, vec![], substs);\n                 ResolvedPath {\n                     path,\n                     param_names: None,\n@@ -3100,7 +3099,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n             }\n             ty::Foreign(did) => {\n                 inline::record_extern_fqn(cx, did, TypeKind::Foreign);\n-                let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n+                let path = external_path(cx, cx.tcx.item_name(did),\n                                          None, false, vec![], InternalSubsts::empty());\n                 ResolvedPath {\n                     path: path,\n@@ -3129,7 +3128,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                 reg.clean(cx).map(|b| param_names.push(GenericBound::Outlives(b)));\n                 for did in dids {\n                     let empty = cx.tcx.intern_substs(&[]);\n-                    let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n+                    let path = external_path(cx, cx.tcx.item_name(did),\n                         Some(did), false, vec![], empty);\n                     inline::record_extern_fqn(cx, did, TypeKind::Trait);\n                     let bound = GenericBound::TraitBound(PolyTrait {\n@@ -3154,7 +3153,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     });\n                 }\n \n-                let path = external_path(cx, &cx.tcx.item_name(did).as_str(), Some(did),\n+                let path = external_path(cx, cx.tcx.item_name(did), Some(did),\n                     false, bindings, substs);\n                 ResolvedPath {\n                     path,"}]}