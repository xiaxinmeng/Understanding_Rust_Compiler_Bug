{"sha": "f2ed9a3a8cc8d7972509143f2d8cb2a53e1a6b43", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyZWQ5YTNhOGNjOGQ3OTcyNTA5MTQzZjJkOGNiMmE1M2UxYTZiNDM=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-01-17T00:17:59Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-01-17T00:17:59Z"}, "message": "Can't use EncodableWithShorthand for Predicate", "tree": {"sha": "2788a8728115d01db5c1d159cf4b42d0b00304da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2788a8728115d01db5c1d159cf4b42d0b00304da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2ed9a3a8cc8d7972509143f2d8cb2a53e1a6b43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2ed9a3a8cc8d7972509143f2d8cb2a53e1a6b43", "html_url": "https://github.com/rust-lang/rust/commit/f2ed9a3a8cc8d7972509143f2d8cb2a53e1a6b43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2ed9a3a8cc8d7972509143f2d8cb2a53e1a6b43/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcad9f1893d6bd4d09fe1c48ea4b500be1096031", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcad9f1893d6bd4d09fe1c48ea4b500be1096031", "html_url": "https://github.com/rust-lang/rust/commit/dcad9f1893d6bd4d09fe1c48ea4b500be1096031"}], "stats": {"total": 37, "additions": 2, "deletions": 35}, "files": [{"sha": "0b398c35db0ce5487ef58c7237f4dcc18b679765", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2ed9a3a8cc8d7972509143f2d8cb2a53e1a6b43/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ed9a3a8cc8d7972509143f2d8cb2a53e1a6b43/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=f2ed9a3a8cc8d7972509143f2d8cb2a53e1a6b43", "patch": "@@ -46,7 +46,6 @@ pub(super) struct EncodeContext<'a, 'tcx> {\n \n     lazy_state: LazyState,\n     type_shorthands: FxHashMap<Ty<'tcx>, usize>,\n-    predicate_shorthands: FxHashMap<ty::Predicate<'tcx>, usize>,\n \n     interpret_allocs: FxIndexSet<interpret::AllocId>,\n \n@@ -328,10 +327,6 @@ impl<'a, 'tcx> TyEncoder<'tcx> for EncodeContext<'a, 'tcx> {\n         &mut self.type_shorthands\n     }\n \n-    fn predicate_shorthands(&mut self) -> &mut FxHashMap<rustc_middle::ty::Predicate<'tcx>, usize> {\n-        &mut self.predicate_shorthands\n-    }\n-\n     fn encode_alloc_id(\n         &mut self,\n         alloc_id: &rustc_middle::mir::interpret::AllocId,\n@@ -2151,7 +2146,6 @@ fn encode_metadata_impl(tcx: TyCtxt<'_>) -> EncodedMetadata {\n         tables: Default::default(),\n         lazy_state: LazyState::NoNode,\n         type_shorthands: Default::default(),\n-        predicate_shorthands: Default::default(),\n         source_file_cache,\n         interpret_allocs: Default::default(),\n         required_source_files,"}, {"sha": "380fb8172a75852c1c6428d9089fe40c7c538483", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f2ed9a3a8cc8d7972509143f2d8cb2a53e1a6b43/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ed9a3a8cc8d7972509143f2d8cb2a53e1a6b43/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=f2ed9a3a8cc8d7972509143f2d8cb2a53e1a6b43", "patch": "@@ -43,19 +43,11 @@ impl<'tcx, E: TyEncoder<'tcx>> EncodableWithShorthand<'tcx, E> for Ty<'tcx> {\n     }\n }\n \n-impl<'tcx, E: TyEncoder<'tcx>> EncodableWithShorthand<'tcx, E> for ty::Predicate<'tcx> {\n-    type Variant = ty::Binder<ty::PredicateKind<'tcx>>;\n-    fn variant(&self) -> &Self::Variant {\n-        self.kind_ref()\n-    }\n-}\n-\n pub trait TyEncoder<'tcx>: Encoder {\n     const CLEAR_CROSS_CRATE: bool;\n \n     fn position(&self) -> usize;\n     fn type_shorthands(&mut self) -> &mut FxHashMap<Ty<'tcx>, usize>;\n-    fn predicate_shorthands(&mut self) -> &mut FxHashMap<ty::Predicate<'tcx>, usize>;\n     fn encode_alloc_id(&mut self, alloc_id: &AllocId) -> Result<(), Self::Error>;\n }\n \n@@ -120,7 +112,7 @@ impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for Ty<'tcx> {\n \n impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for ty::Predicate<'tcx> {\n     fn encode(&self, e: &mut E) -> Result<(), E::Error> {\n-        encode_with_shorthand(e, self, TyEncoder::predicate_shorthands)\n+        self.kind().encode(e)\n     }\n }\n \n@@ -220,16 +212,7 @@ impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for Ty<'tcx> {\n \n impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ty::Predicate<'tcx> {\n     fn decode(decoder: &mut D) -> Result<ty::Predicate<'tcx>, D::Error> {\n-        // Handle shorthands first, if we have an usize > 0x80.\n-        let predicate_kind = if decoder.positioned_at_shorthand() {\n-            let pos = decoder.read_usize()?;\n-            assert!(pos >= SHORTHAND_OFFSET);\n-            let shorthand = pos - SHORTHAND_OFFSET;\n-\n-            decoder.with_position(shorthand, ty::Binder::<ty::PredicateKind<'tcx>>::decode)\n-        } else {\n-            ty::Binder::<ty::PredicateKind<'tcx>>::decode(decoder)\n-        }?;\n+        let predicate_kind = Decodable::decode(decoder)?;\n         let predicate = decoder.tcx().mk_predicate(predicate_kind);\n         Ok(predicate)\n     }"}, {"sha": "099c5aa84e5111e7a084f4a33c6b8a517caf2b36", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f2ed9a3a8cc8d7972509143f2d8cb2a53e1a6b43/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ed9a3a8cc8d7972509143f2d8cb2a53e1a6b43/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=f2ed9a3a8cc8d7972509143f2d8cb2a53e1a6b43", "patch": "@@ -1064,11 +1064,6 @@ impl<'tcx> Predicate<'tcx> {\n     pub fn kind(self) -> Binder<PredicateKind<'tcx>> {\n         self.inner.kind\n     }\n-\n-    /// Like `kind` but returns a reference. Only needed because of encoding.\n-    pub(super) fn kind_ref(self) -> &'tcx Binder<PredicateKind<'tcx>> {\n-        &self.inner.kind\n-    }\n }\n \n impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for Predicate<'tcx> {"}, {"sha": "914937134b47a21f4795a66bd90aa010d5909614", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f2ed9a3a8cc8d7972509143f2d8cb2a53e1a6b43/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ed9a3a8cc8d7972509143f2d8cb2a53e1a6b43/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=f2ed9a3a8cc8d7972509143f2d8cb2a53e1a6b43", "patch": "@@ -293,7 +293,6 @@ impl<'sess> OnDiskCache<'sess> {\n                 tcx,\n                 encoder,\n                 type_shorthands: Default::default(),\n-                predicate_shorthands: Default::default(),\n                 interpret_allocs: Default::default(),\n                 source_map: CachingSourceMapView::new(tcx.sess.source_map()),\n                 file_to_file_index,\n@@ -989,7 +988,6 @@ struct CacheEncoder<'a, 'tcx, E: OpaqueEncoder> {\n     tcx: TyCtxt<'tcx>,\n     encoder: &'a mut E,\n     type_shorthands: FxHashMap<Ty<'tcx>, usize>,\n-    predicate_shorthands: FxHashMap<ty::Predicate<'tcx>, usize>,\n     interpret_allocs: FxIndexSet<interpret::AllocId>,\n     source_map: CachingSourceMapView<'tcx>,\n     file_to_file_index: FxHashMap<*const SourceFile, SourceFileIndex>,\n@@ -1103,9 +1101,6 @@ where\n     fn type_shorthands(&mut self) -> &mut FxHashMap<Ty<'tcx>, usize> {\n         &mut self.type_shorthands\n     }\n-    fn predicate_shorthands(&mut self) -> &mut FxHashMap<ty::Predicate<'tcx>, usize> {\n-        &mut self.predicate_shorthands\n-    }\n     fn encode_alloc_id(&mut self, alloc_id: &interpret::AllocId) -> Result<(), Self::Error> {\n         let (index, _) = self.interpret_allocs.insert_full(*alloc_id);\n "}]}