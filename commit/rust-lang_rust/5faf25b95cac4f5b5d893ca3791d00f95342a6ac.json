{"sha": "5faf25b95cac4f5b5d893ca3791d00f95342a6ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmYWYyNWI5NWNhYzRmNWI1ZDg5M2NhMzc5MWQwMGY5NTM0MmE2YWM=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-10-08T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-10-08T21:53:15Z"}, "message": "Check for non-zero return value from posix_spawn functions\n\nThe cvt function compares the argument with -1 and when equal returns a new\nio::Error constructed from errno. It is used together posix_spawn_* functions.\nThis is incorrect. Those functions do not set errno. Instead they return\nnon-zero error code directly.\n\nCheck for non-zero return code and use it to construct a new io::Error.", "tree": {"sha": "472d002d5b7667a21b48330e635781b2e448177d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/472d002d5b7667a21b48330e635781b2e448177d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5faf25b95cac4f5b5d893ca3791d00f95342a6ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5faf25b95cac4f5b5d893ca3791d00f95342a6ac", "html_url": "https://github.com/rust-lang/rust/commit/5faf25b95cac4f5b5d893ca3791d00f95342a6ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5faf25b95cac4f5b5d893ca3791d00f95342a6ac/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b8d7911a1d329d0d98b90606d8c2cb808af090a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b8d7911a1d329d0d98b90606d8c2cb808af090a", "html_url": "https://github.com/rust-lang/rust/commit/6b8d7911a1d329d0d98b90606d8c2cb808af090a"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "520e5e5d1c59a06b8d55769128483e5975ff1c2b", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5faf25b95cac4f5b5d893ca3791d00f95342a6ac/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5faf25b95cac4f5b5d893ca3791d00f95342a6ac/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=5faf25b95cac4f5b5d893ca3791d00f95342a6ac", "patch": "@@ -339,6 +339,10 @@ impl Command {\n             }\n         }\n \n+        fn cvt_nz(error: libc::c_int) -> io::Result<()> {\n+            if error == 0 { Ok(()) } else { Err(io::Error::from_raw_os_error(error)) }\n+        }\n+\n         unsafe {\n             let mut file_actions = PosixSpawnFileActions(MaybeUninit::uninit());\n             let mut attrs = PosixSpawnattr(MaybeUninit::uninit());\n@@ -347,51 +351,51 @@ impl Command {\n             libc::posix_spawn_file_actions_init(file_actions.0.as_mut_ptr());\n \n             if let Some(fd) = stdio.stdin.fd() {\n-                cvt(libc::posix_spawn_file_actions_adddup2(\n+                cvt_nz(libc::posix_spawn_file_actions_adddup2(\n                     file_actions.0.as_mut_ptr(),\n                     fd,\n                     libc::STDIN_FILENO,\n                 ))?;\n             }\n             if let Some(fd) = stdio.stdout.fd() {\n-                cvt(libc::posix_spawn_file_actions_adddup2(\n+                cvt_nz(libc::posix_spawn_file_actions_adddup2(\n                     file_actions.0.as_mut_ptr(),\n                     fd,\n                     libc::STDOUT_FILENO,\n                 ))?;\n             }\n             if let Some(fd) = stdio.stderr.fd() {\n-                cvt(libc::posix_spawn_file_actions_adddup2(\n+                cvt_nz(libc::posix_spawn_file_actions_adddup2(\n                     file_actions.0.as_mut_ptr(),\n                     fd,\n                     libc::STDERR_FILENO,\n                 ))?;\n             }\n             if let Some((f, cwd)) = addchdir {\n-                cvt(f(file_actions.0.as_mut_ptr(), cwd.as_ptr()))?;\n+                cvt_nz(f(file_actions.0.as_mut_ptr(), cwd.as_ptr()))?;\n             }\n \n             let mut set = MaybeUninit::<libc::sigset_t>::uninit();\n             cvt(sigemptyset(set.as_mut_ptr()))?;\n-            cvt(libc::posix_spawnattr_setsigmask(attrs.0.as_mut_ptr(), set.as_ptr()))?;\n+            cvt_nz(libc::posix_spawnattr_setsigmask(attrs.0.as_mut_ptr(), set.as_ptr()))?;\n             cvt(sigaddset(set.as_mut_ptr(), libc::SIGPIPE))?;\n-            cvt(libc::posix_spawnattr_setsigdefault(attrs.0.as_mut_ptr(), set.as_ptr()))?;\n+            cvt_nz(libc::posix_spawnattr_setsigdefault(attrs.0.as_mut_ptr(), set.as_ptr()))?;\n \n             let flags = libc::POSIX_SPAWN_SETSIGDEF | libc::POSIX_SPAWN_SETSIGMASK;\n-            cvt(libc::posix_spawnattr_setflags(attrs.0.as_mut_ptr(), flags as _))?;\n+            cvt_nz(libc::posix_spawnattr_setflags(attrs.0.as_mut_ptr(), flags as _))?;\n \n             // Make sure we synchronize access to the global `environ` resource\n             let _env_lock = sys::os::env_lock();\n             let envp = envp.map(|c| c.as_ptr()).unwrap_or_else(|| *sys::os::environ() as *const _);\n-            let ret = libc::posix_spawnp(\n+            cvt_nz(libc::posix_spawnp(\n                 &mut p.pid,\n                 self.get_program_cstr().as_ptr(),\n                 file_actions.0.as_ptr(),\n                 attrs.0.as_ptr(),\n                 self.get_argv().as_ptr() as *const _,\n                 envp as *const _,\n-            );\n-            if ret == 0 { Ok(Some(p)) } else { Err(io::Error::from_raw_os_error(ret)) }\n+            ))?;\n+            Ok(Some(p))\n         }\n     }\n }"}]}