{"sha": "f52c31840df7ec9c9350baff51a8964b20b5e1ba", "node_id": "C_kwDOAAsO6NoAKGY1MmMzMTg0MGRmN2VjOWM5MzUwYmFmZjUxYTg5NjRiMjBiNWUxYmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-07T15:32:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-07T15:32:19Z"}, "message": "Auto merge of #93738 - m-ou-se:rollup-zjyd2et, r=m-ou-se\n\nRollup of 13 pull requests\n\nSuccessful merges:\n\n - #88313 (Make the pre-commit script pre-push instead)\n - #91530 (Suggest 1-tuple parentheses on exprs without existing parens)\n - #92724 (Cleanup c_str.rs)\n - #93208 (Impl {Add,Sub,Mul,Div,Rem,BitXor,BitOr,BitAnd}Assign<$t> for Wrapping<$t> for rust 1.60.0)\n - #93394 (Don't allow {} to refer to implicit captures in format_args.)\n - #93416 (remove `allow_fail` test flag)\n - #93487 (Fix linking stage1 toolchain in `./x.py setup`)\n - #93673 (Linkify sidebar headings for sibling items)\n - #93680 (Drop json::from_reader)\n - #93682 (Update tracking issue for `const_fn_trait_bound`)\n - #93722 (Use shallow clones for submodules managed by rustbuild, not just bootstrap.py)\n - #93723 (Rerun bootstrap's build script when RUSTC changes)\n - #93737 (bootstrap: prefer using '--config' over 'RUST_BOOTSTRAP_CONFIG')\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a7ea66705f0f42dc17756f1a63b91f3faa2a5139", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7ea66705f0f42dc17756f1a63b91f3faa2a5139"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f52c31840df7ec9c9350baff51a8964b20b5e1ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f52c31840df7ec9c9350baff51a8964b20b5e1ba", "html_url": "https://github.com/rust-lang/rust/commit/f52c31840df7ec9c9350baff51a8964b20b5e1ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f52c31840df7ec9c9350baff51a8964b20b5e1ba/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5e414843ebfe25674d8e18a5369d6249fdee741", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5e414843ebfe25674d8e18a5369d6249fdee741", "html_url": "https://github.com/rust-lang/rust/commit/c5e414843ebfe25674d8e18a5369d6249fdee741"}, {"sha": "a6c48108ad2a5bbfb161818a047e4497dde0afea", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6c48108ad2a5bbfb161818a047e4497dde0afea", "html_url": "https://github.com/rust-lang/rust/commit/a6c48108ad2a5bbfb161818a047e4497dde0afea"}], "stats": {"total": 859, "additions": 470, "deletions": 389}, "files": [{"sha": "584fbd1b605cd7e4d2af62b1bc062e1e488ad0e6", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -25,6 +25,7 @@ enum ArgumentType {\n \n enum Position {\n     Exact(usize),\n+    Capture(usize),\n     Named(Symbol),\n }\n \n@@ -49,6 +50,8 @@ struct Context<'a, 'b> {\n     /// * `arg_unique_types` (in simplified JSON): `[[\"o\", \"x\"], [\"o\", \"x\"], [\"o\", \"x\"]]`\n     /// * `names` (in JSON): `{\"foo\": 2}`\n     args: Vec<P<ast::Expr>>,\n+    /// The number of arguments that were added by implicit capturing.\n+    num_captured_args: usize,\n     /// Placeholder slot numbers indexed by argument.\n     arg_types: Vec<Vec<usize>>,\n     /// Unique format specs seen for each argument.\n@@ -231,6 +234,11 @@ fn parse_args<'a>(\n }\n \n impl<'a, 'b> Context<'a, 'b> {\n+    /// The number of arguments that were explicitly given.\n+    fn num_args(&self) -> usize {\n+        self.args.len() - self.num_captured_args\n+    }\n+\n     fn resolve_name_inplace(&self, p: &mut parse::Piece<'_>) {\n         // NOTE: the `unwrap_or` branch is needed in case of invalid format\n         // arguments, e.g., `format_args!(\"{foo}\")`.\n@@ -345,7 +353,7 @@ impl<'a, 'b> Context<'a, 'b> {\n     }\n \n     fn describe_num_args(&self) -> Cow<'_, str> {\n-        match self.args.len() {\n+        match self.num_args() {\n             0 => \"no arguments were given\".into(),\n             1 => \"there is 1 argument\".into(),\n             x => format!(\"there are {} arguments\", x).into(),\n@@ -371,7 +379,7 @@ impl<'a, 'b> Context<'a, 'b> {\n \n         let count = self.pieces.len()\n             + self.arg_with_formatting.iter().filter(|fmt| fmt.precision_span.is_some()).count();\n-        if self.names.is_empty() && !numbered_position_args && count != self.args.len() {\n+        if self.names.is_empty() && !numbered_position_args && count != self.num_args() {\n             e = self.ecx.struct_span_err(\n                 sp,\n                 &format!(\n@@ -419,7 +427,7 @@ impl<'a, 'b> Context<'a, 'b> {\n             if let Some(span) = fmt.precision_span {\n                 let span = self.fmtsp.from_inner(span);\n                 match fmt.precision {\n-                    parse::CountIsParam(pos) if pos > self.args.len() => {\n+                    parse::CountIsParam(pos) if pos > self.num_args() => {\n                         e.span_label(\n                             span,\n                             &format!(\n@@ -462,7 +470,7 @@ impl<'a, 'b> Context<'a, 'b> {\n             if let Some(span) = fmt.width_span {\n                 let span = self.fmtsp.from_inner(span);\n                 match fmt.width {\n-                    parse::CountIsParam(pos) if pos > self.args.len() => {\n+                    parse::CountIsParam(pos) if pos > self.num_args() => {\n                         e.span_label(\n                             span,\n                             &format!(\n@@ -494,12 +502,15 @@ impl<'a, 'b> Context<'a, 'b> {\n     /// Actually verifies and tracks a given format placeholder\n     /// (a.k.a. argument).\n     fn verify_arg_type(&mut self, arg: Position, ty: ArgumentType) {\n+        if let Exact(arg) = arg {\n+            if arg >= self.num_args() {\n+                self.invalid_refs.push((arg, self.curpiece));\n+                return;\n+            }\n+        }\n+\n         match arg {\n-            Exact(arg) => {\n-                if self.args.len() <= arg {\n-                    self.invalid_refs.push((arg, self.curpiece));\n-                    return;\n-                }\n+            Exact(arg) | Capture(arg) => {\n                 match ty {\n                     Placeholder(_) => {\n                         // record every (position, type) combination only once\n@@ -526,7 +537,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 match self.names.get(&name) {\n                     Some(&idx) => {\n                         // Treat as positional arg.\n-                        self.verify_arg_type(Exact(idx), ty)\n+                        self.verify_arg_type(Capture(idx), ty)\n                     }\n                     None => {\n                         // For the moment capturing variables from format strings expanded from macros is\n@@ -541,9 +552,10 @@ impl<'a, 'b> Context<'a, 'b> {\n                             } else {\n                                 self.fmtsp\n                             };\n+                            self.num_captured_args += 1;\n                             self.args.push(self.ecx.expr_ident(span, Ident::new(name, span)));\n                             self.names.insert(name, idx);\n-                            self.verify_arg_type(Exact(idx), ty)\n+                            self.verify_arg_type(Capture(idx), ty)\n                         } else {\n                             let msg = format!(\"there is no argument named `{}`\", name);\n                             let sp = if self.is_literal {\n@@ -1051,6 +1063,7 @@ pub fn expand_preparsed_format_args(\n     let mut cx = Context {\n         ecx,\n         args,\n+        num_captured_args: 0,\n         arg_types,\n         arg_unique_types,\n         names,"}, {"sha": "9459bb7047f5c64e2f45b53c7c8787431bd349e4", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -252,11 +252,6 @@ pub fn expand_test_or_bench(\n                                         \"ignore\",\n                                         cx.expr_bool(sp, should_ignore(&cx.sess, &item)),\n                                     ),\n-                                    // allow_fail: true | false\n-                                    field(\n-                                        \"allow_fail\",\n-                                        cx.expr_bool(sp, should_fail(&cx.sess, &item)),\n-                                    ),\n                                     // compile_fail: true | false\n                                     field(\"compile_fail\", cx.expr_bool(sp, false)),\n                                     // no_run: true | false\n@@ -359,10 +354,6 @@ fn should_ignore(sess: &Session, i: &ast::Item) -> bool {\n     sess.contains_name(&i.attrs, sym::ignore)\n }\n \n-fn should_fail(sess: &Session, i: &ast::Item) -> bool {\n-    sess.contains_name(&i.attrs, sym::allow_fail)\n-}\n-\n fn should_panic(cx: &ExtCtxt<'_>, i: &ast::Item) -> ShouldPanic {\n     match cx.sess.find_by_name(&i.attrs, sym::should_panic) {\n         Some(attr) => {"}, {"sha": "e5232bf3dd0193a2789d7a58aa605644d594b127", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -277,8 +277,6 @@ declare_features! (\n     (incomplete, adt_const_params, \"1.56.0\", Some(44580), None),\n     /// Allows defining an `#[alloc_error_handler]`.\n     (active, alloc_error_handler, \"1.29.0\", Some(51540), None),\n-    /// Allows a test to fail without failing the whole suite.\n-    (active, allow_fail, \"1.19.0\", Some(46488), None),\n     /// Allows explicit discriminants on non-unit enum variants.\n     (active, arbitrary_enum_discriminant, \"1.37.0\", Some(60553), None),\n     /// Allows trait methods with arbitrary self types.\n@@ -332,7 +330,7 @@ declare_features! (\n     /// Allows using and casting function pointers in a `const fn`.\n     (active, const_fn_fn_ptr_basics, \"1.48.0\", Some(57563), None),\n     /// Allows trait bounds in `const fn`.\n-    (active, const_fn_trait_bound, \"1.53.0\", Some(57563), None),\n+    (active, const_fn_trait_bound, \"1.53.0\", Some(93706), None),\n     /// Allows `for _ in _` loops in const contexts.\n     (active, const_for, \"1.56.0\", Some(87575), None),\n     /// Allows argument and return position `impl Trait` in a `const fn`."}, {"sha": "cb2562d09a5250e5c39c1ddf2944927c891e05bc", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -403,7 +403,6 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     },\n \n     // Testing:\n-    gated!(allow_fail, Normal, template!(Word), WarnFollowing, experimental!(allow_fail)),\n     gated!(\n         test_runner, CrateLevel, template!(List: \"path\"), ErrorFollowing, custom_test_frameworks,\n         \"custom test frameworks are an unstable feature\","}, {"sha": "f5f944db5e90b23cbbd63a3a381beb997e566ff1", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -48,6 +48,8 @@ declare_features! (\n     (removed, advanced_slice_patterns, \"1.0.0\", Some(62254), None,\n      Some(\"merged into `#![feature(slice_patterns)]`\")),\n     (removed, allocator, \"1.0.0\", None, None, None),\n+    /// Allows a test to fail without failing the whole suite.\n+    (removed, allow_fail, \"1.19.0\", Some(46488), None, Some(\"removed due to no clear use cases\")),\n     (removed, await_macro, \"1.38.0\", Some(50547), None,\n      Some(\"subsumed by `.await` syntax\")),\n     /// Allows comparing raw pointers during const eval."}, {"sha": "c5da9977db782404c8abef815f91a10e131330bb", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 37, "deletions": 13, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -2044,19 +2044,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         // If a tuple of length one was expected and the found expression has\n                         // parentheses around it, perhaps the user meant to write `(expr,)` to\n                         // build a tuple (issue #86100)\n-                        (ty::Tuple(_), _) if expected.tuple_fields().count() == 1 => {\n-                            if let Ok(code) = self.tcx.sess().source_map().span_to_snippet(span) {\n-                                if let Some(code) =\n-                                    code.strip_prefix('(').and_then(|s| s.strip_suffix(')'))\n-                                {\n-                                    err.span_suggestion(\n-                                        span,\n-                                        \"use a trailing comma to create a tuple with one element\",\n-                                        format!(\"({},)\", code),\n-                                        Applicability::MaybeIncorrect,\n-                                    );\n-                                }\n-                            }\n+                        (ty::Tuple(_), _) => {\n+                            self.emit_tuple_wrap_err(&mut err, span, found, expected)\n                         }\n                         // If a character was expected and the found expression is a string literal\n                         // containing a single character, perhaps the user meant to write `'c'` to\n@@ -2119,6 +2108,41 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         diag\n     }\n \n+    fn emit_tuple_wrap_err(\n+        &self,\n+        err: &mut DiagnosticBuilder<'tcx>,\n+        span: Span,\n+        found: Ty<'tcx>,\n+        expected: Ty<'tcx>,\n+    ) {\n+        let [expected_tup_elem] = &expected.tuple_fields().collect::<Vec<_>>()[..]\n+            else { return };\n+\n+        if !same_type_modulo_infer(expected_tup_elem, found) {\n+            return;\n+        }\n+\n+        let Ok(code) = self.tcx.sess().source_map().span_to_snippet(span)\n+            else { return };\n+\n+        let msg = \"use a trailing comma to create a tuple with one element\";\n+        if code.starts_with('(') && code.ends_with(')') {\n+            let before_close = span.hi() - BytePos::from_u32(1);\n+            err.span_suggestion(\n+                span.with_hi(before_close).shrink_to_hi(),\n+                msg,\n+                \",\".into(),\n+                Applicability::MachineApplicable,\n+            );\n+        } else {\n+            err.multipart_suggestion(\n+                msg,\n+                vec![(span.shrink_to_lo(), \"(\".into()), (span.shrink_to_hi(), \",)\".into())],\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+\n     fn values_str(\n         &self,\n         values: ValuePairs<'tcx>,"}, {"sha": "6a3985492412262d382a0160922ddd24b94d5f3e", "filename": "compiler/rustc_serialize/src/json.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/compiler%2Frustc_serialize%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/compiler%2Frustc_serialize%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fjson.rs?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -185,8 +185,6 @@ use self::ParserState::*;\n \n use std::borrow::Cow;\n use std::collections::{BTreeMap, HashMap};\n-use std::io;\n-use std::io::prelude::*;\n use std::mem::swap;\n use std::num::FpCategory as Fp;\n use std::ops::Index;\n@@ -250,7 +248,6 @@ pub enum ErrorCode {\n pub enum ParserError {\n     /// msg, line, col\n     SyntaxError(ErrorCode, usize, usize),\n-    IoError(io::ErrorKind, String),\n }\n \n // Builder and Parser have the same errors.\n@@ -329,10 +326,6 @@ impl fmt::Display for ErrorCode {\n     }\n }\n \n-fn io_error_to_error(io: io::Error) -> ParserError {\n-    IoError(io.kind(), io.to_string())\n-}\n-\n impl fmt::Display for ParserError {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         // FIXME this should be a nicer error\n@@ -2163,21 +2156,6 @@ impl<T: Iterator<Item = char>> Builder<T> {\n     }\n }\n \n-/// Decodes a json value from an `&mut io::Read`\n-pub fn from_reader(rdr: &mut dyn Read) -> Result<Json, BuilderError> {\n-    let mut contents = Vec::new();\n-    match rdr.read_to_end(&mut contents) {\n-        Ok(c) => c,\n-        Err(e) => return Err(io_error_to_error(e)),\n-    };\n-    let s = match str::from_utf8(&contents).ok() {\n-        Some(s) => s,\n-        _ => return Err(SyntaxError(NotUtf8, 0, 0)),\n-    };\n-    let mut builder = Builder::new(s.chars());\n-    builder.build()\n-}\n-\n /// Decodes a json value from a string\n pub fn from_str(s: &str) -> Result<Json, BuilderError> {\n     let mut builder = Builder::new(s.chars());"}, {"sha": "c96c52752d02ca4b59f83411595c556c796cc0b5", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -2148,8 +2148,8 @@ impl Target {\n         use std::fs;\n \n         fn load_file(path: &Path) -> Result<(Target, TargetWarnings), String> {\n-            let contents = fs::read(path).map_err(|e| e.to_string())?;\n-            let obj = json::from_reader(&mut &contents[..]).map_err(|e| e.to_string())?;\n+            let contents = fs::read_to_string(path).map_err(|e| e.to_string())?;\n+            let obj = json::from_str(&contents).map_err(|e| e.to_string())?;\n             Target::from_json(obj)\n         }\n "}, {"sha": "5353d900e76629a33ef568ef1ecbe13291b81a50", "filename": "library/core/src/num/wrapping.rs", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -239,6 +239,16 @@ macro_rules! wrapping_impl {\n         }\n         forward_ref_op_assign! { impl const AddAssign, add_assign for Wrapping<$t>, Wrapping<$t> }\n \n+        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.60.0\")]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const AddAssign<$t> for Wrapping<$t> {\n+            #[inline]\n+            fn add_assign(&mut self, other: $t) {\n+                *self = *self + Wrapping(other);\n+            }\n+        }\n+        forward_ref_op_assign! { impl const AddAssign, add_assign for Wrapping<$t>, $t }\n+\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n         impl const Sub for Wrapping<$t> {\n@@ -262,6 +272,16 @@ macro_rules! wrapping_impl {\n         }\n         forward_ref_op_assign! { impl const SubAssign, sub_assign for Wrapping<$t>, Wrapping<$t> }\n \n+        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.60.0\")]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const SubAssign<$t> for Wrapping<$t> {\n+            #[inline]\n+            fn sub_assign(&mut self, other: $t) {\n+                *self = *self - Wrapping(other);\n+            }\n+        }\n+        forward_ref_op_assign! { impl const SubAssign, sub_assign for Wrapping<$t>, $t }\n+\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n         impl const Mul for Wrapping<$t> {\n@@ -285,6 +305,16 @@ macro_rules! wrapping_impl {\n         }\n         forward_ref_op_assign! { impl const MulAssign, mul_assign for Wrapping<$t>, Wrapping<$t> }\n \n+        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.60.0\")]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const MulAssign<$t> for Wrapping<$t> {\n+            #[inline]\n+            fn mul_assign(&mut self, other: $t) {\n+                *self = *self * Wrapping(other);\n+            }\n+        }\n+        forward_ref_op_assign! { impl const MulAssign, mul_assign for Wrapping<$t>, $t }\n+\n         #[stable(feature = \"wrapping_div\", since = \"1.3.0\")]\n         #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n         impl const Div for Wrapping<$t> {\n@@ -308,6 +338,16 @@ macro_rules! wrapping_impl {\n         }\n         forward_ref_op_assign! { impl const DivAssign, div_assign for Wrapping<$t>, Wrapping<$t> }\n \n+        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.60.0\")]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const DivAssign<$t> for Wrapping<$t> {\n+            #[inline]\n+            fn div_assign(&mut self, other: $t) {\n+                *self = *self / Wrapping(other);\n+            }\n+        }\n+        forward_ref_op_assign! { impl const DivAssign, div_assign for Wrapping<$t>, $t }\n+\n         #[stable(feature = \"wrapping_impls\", since = \"1.7.0\")]\n         #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n         impl const Rem for Wrapping<$t> {\n@@ -331,6 +371,16 @@ macro_rules! wrapping_impl {\n         }\n         forward_ref_op_assign! { impl const RemAssign, rem_assign for Wrapping<$t>, Wrapping<$t> }\n \n+        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.60.0\")]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const RemAssign<$t> for Wrapping<$t> {\n+            #[inline]\n+            fn rem_assign(&mut self, other: $t) {\n+                *self = *self % Wrapping(other);\n+            }\n+        }\n+        forward_ref_op_assign! { impl const RemAssign, rem_assign for Wrapping<$t>, $t }\n+\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n         impl const Not for Wrapping<$t> {\n@@ -367,6 +417,16 @@ macro_rules! wrapping_impl {\n         }\n         forward_ref_op_assign! { impl const BitXorAssign, bitxor_assign for Wrapping<$t>, Wrapping<$t> }\n \n+        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.60.0\")]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitXorAssign<$t> for Wrapping<$t> {\n+            #[inline]\n+            fn bitxor_assign(&mut self, other: $t) {\n+                *self = *self ^ Wrapping(other);\n+            }\n+        }\n+        forward_ref_op_assign! { impl const BitXorAssign, bitxor_assign for Wrapping<$t>, $t }\n+\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n         impl const BitOr for Wrapping<$t> {\n@@ -390,6 +450,16 @@ macro_rules! wrapping_impl {\n         }\n         forward_ref_op_assign! { impl const BitOrAssign, bitor_assign for Wrapping<$t>, Wrapping<$t> }\n \n+        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.60.0\")]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitOrAssign<$t> for Wrapping<$t> {\n+            #[inline]\n+            fn bitor_assign(&mut self, other: $t) {\n+                *self = *self | Wrapping(other);\n+            }\n+        }\n+        forward_ref_op_assign! { impl const BitOrAssign, bitor_assign for Wrapping<$t>, $t }\n+\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n         impl const BitAnd for Wrapping<$t> {\n@@ -413,6 +483,16 @@ macro_rules! wrapping_impl {\n         }\n         forward_ref_op_assign! { impl const BitAndAssign, bitand_assign for Wrapping<$t>, Wrapping<$t> }\n \n+        #[stable(feature = \"wrapping_int_assign_impl\", since = \"1.60.0\")]\n+        #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n+        impl const BitAndAssign<$t> for Wrapping<$t> {\n+            #[inline]\n+            fn bitand_assign(&mut self, other: $t) {\n+                *self = *self & Wrapping(other);\n+            }\n+        }\n+        forward_ref_op_assign! { impl const BitAndAssign, bitand_assign for Wrapping<$t>, $t }\n+\n         #[stable(feature = \"wrapping_neg\", since = \"1.10.0\")]\n         #[rustc_const_unstable(feature = \"const_ops\", issue = \"90080\")]\n         impl const Neg for Wrapping<$t> {"}, {"sha": "e10c6a5daf13e4216447c8a44ad1bcc75b465708", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -1252,15 +1252,16 @@ impl CStr {\n     /// assert!(cstr.is_err());\n     /// ```\n     #[stable(feature = \"cstr_from_bytes\", since = \"1.10.0\")]\n-    pub fn from_bytes_with_nul(bytes: &[u8]) -> Result<&CStr, FromBytesWithNulError> {\n+    pub fn from_bytes_with_nul(bytes: &[u8]) -> Result<&Self, FromBytesWithNulError> {\n         let nul_pos = memchr::memchr(0, bytes);\n-        if let Some(nul_pos) = nul_pos {\n-            if nul_pos + 1 != bytes.len() {\n-                return Err(FromBytesWithNulError::interior_nul(nul_pos));\n+        match nul_pos {\n+            Some(nul_pos) if nul_pos + 1 == bytes.len() => {\n+                // SAFETY: We know there is only one nul byte, at the end\n+                // of the byte slice.\n+                Ok(unsafe { Self::from_bytes_with_nul_unchecked(bytes) })\n             }\n-            Ok(unsafe { CStr::from_bytes_with_nul_unchecked(bytes) })\n-        } else {\n-            Err(FromBytesWithNulError::not_nul_terminated())\n+            Some(nul_pos) => Err(FromBytesWithNulError::interior_nul(nul_pos)),\n+            None => Err(FromBytesWithNulError::not_nul_terminated()),\n         }\n     }\n "}, {"sha": "920f55ad251a651ca3f484c6d8f2fc1eb2c0d2c2", "filename": "library/test/src/console.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/library%2Ftest%2Fsrc%2Fconsole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/library%2Ftest%2Fsrc%2Fconsole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fconsole.rs?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -47,7 +47,6 @@ pub struct ConsoleTestState {\n     pub passed: usize,\n     pub failed: usize,\n     pub ignored: usize,\n-    pub allowed_fail: usize,\n     pub filtered_out: usize,\n     pub measured: usize,\n     pub exec_time: Option<TestSuiteExecTime>,\n@@ -71,7 +70,6 @@ impl ConsoleTestState {\n             passed: 0,\n             failed: 0,\n             ignored: 0,\n-            allowed_fail: 0,\n             filtered_out: 0,\n             measured: 0,\n             exec_time: None,\n@@ -112,7 +110,6 @@ impl ConsoleTestState {\n                     TestResult::TrFailed => \"failed\".to_owned(),\n                     TestResult::TrFailedMsg(ref msg) => format!(\"failed: {}\", msg),\n                     TestResult::TrIgnored => \"ignored\".to_owned(),\n-                    TestResult::TrAllowedFail => \"failed (allowed)\".to_owned(),\n                     TestResult::TrBench(ref bs) => fmt_bench_samples(bs),\n                     TestResult::TrTimedFail => \"failed (time limit exceeded)\".to_owned(),\n                 },\n@@ -126,7 +123,7 @@ impl ConsoleTestState {\n     }\n \n     fn current_test_count(&self) -> usize {\n-        self.passed + self.failed + self.ignored + self.measured + self.allowed_fail\n+        self.passed + self.failed + self.ignored + self.measured\n     }\n }\n \n@@ -191,7 +188,6 @@ fn handle_test_result(st: &mut ConsoleTestState, completed_test: CompletedTest)\n             st.not_failures.push((test, stdout));\n         }\n         TestResult::TrIgnored => st.ignored += 1,\n-        TestResult::TrAllowedFail => st.allowed_fail += 1,\n         TestResult::TrBench(bs) => {\n             st.metrics.insert_metric(\n                 test.name.as_slice(),"}, {"sha": "c089bfc4791b5e2bf9b8162c1e72b9bba4ff9d75", "filename": "library/test/src/formatters/json.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -124,15 +124,6 @@ impl<T: Write> OutputFormatter for JsonFormatter<T> {\n                 self.write_event(\"test\", desc.name.as_slice(), \"ignored\", exec_time, stdout, None)\n             }\n \n-            TestResult::TrAllowedFail => self.write_event(\n-                \"test\",\n-                desc.name.as_slice(),\n-                \"allowed_failure\",\n-                exec_time,\n-                stdout,\n-                None,\n-            ),\n-\n             TestResult::TrBench(ref bs) => {\n                 let median = bs.ns_iter_summ.median as usize;\n                 let deviation = (bs.ns_iter_summ.max - bs.ns_iter_summ.min) as usize;\n@@ -172,14 +163,12 @@ impl<T: Write> OutputFormatter for JsonFormatter<T> {\n              \\\"event\\\": \\\"{}\\\", \\\n              \\\"passed\\\": {}, \\\n              \\\"failed\\\": {}, \\\n-             \\\"allowed_fail\\\": {}, \\\n              \\\"ignored\\\": {}, \\\n              \\\"measured\\\": {}, \\\n              \\\"filtered_out\\\": {}\",\n             if state.failed == 0 { \"ok\" } else { \"failed\" },\n             state.passed,\n-            state.failed + state.allowed_fail,\n-            state.allowed_fail,\n+            state.failed,\n             state.ignored,\n             state.measured,\n             state.filtered_out,"}, {"sha": "54e9860ab548779173d623709d5a33fe4c98eb9e", "filename": "library/test/src/formatters/junit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -121,7 +121,7 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n                     ))?;\n                 }\n \n-                TestResult::TrOk | TestResult::TrAllowedFail => {\n+                TestResult::TrOk => {\n                     self.write_message(&*format!(\n                         \"<testcase classname=\\\"{}\\\" \\\n                          name=\\\"{}\\\" time=\\\"{}\\\"/>\","}, {"sha": "4726ae864df7733a34551e7c4181426231dcc87f", "filename": "library/test/src/formatters/pretty.rs", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -49,10 +49,6 @@ impl<T: Write> PrettyFormatter<T> {\n         self.write_short_result(\"ignored\", term::color::YELLOW)\n     }\n \n-    pub fn write_allowed_fail(&mut self) -> io::Result<()> {\n-        self.write_short_result(\"FAILED (allowed)\", term::color::YELLOW)\n-    }\n-\n     pub fn write_time_failed(&mut self) -> io::Result<()> {\n         self.write_short_result(\"FAILED (time limit exceeded)\", term::color::RED)\n     }\n@@ -219,7 +215,6 @@ impl<T: Write> OutputFormatter for PrettyFormatter<T> {\n             TestResult::TrOk => self.write_ok()?,\n             TestResult::TrFailed | TestResult::TrFailedMsg(_) => self.write_failed()?,\n             TestResult::TrIgnored => self.write_ignored()?,\n-            TestResult::TrAllowedFail => self.write_allowed_fail()?,\n             TestResult::TrBench(ref bs) => {\n                 self.write_bench()?;\n                 self.write_plain(&format!(\": {}\", fmt_bench_samples(bs)))?;\n@@ -263,22 +258,10 @@ impl<T: Write> OutputFormatter for PrettyFormatter<T> {\n             self.write_pretty(\"FAILED\", term::color::RED)?;\n         }\n \n-        let s = if state.allowed_fail > 0 {\n-            format!(\n-                \". {} passed; {} failed ({} allowed); {} ignored; {} measured; {} filtered out\",\n-                state.passed,\n-                state.failed + state.allowed_fail,\n-                state.allowed_fail,\n-                state.ignored,\n-                state.measured,\n-                state.filtered_out\n-            )\n-        } else {\n-            format!(\n-                \". {} passed; {} failed; {} ignored; {} measured; {} filtered out\",\n-                state.passed, state.failed, state.ignored, state.measured, state.filtered_out\n-            )\n-        };\n+        let s = format!(\n+            \". {} passed; {} failed; {} ignored; {} measured; {} filtered out\",\n+            state.passed, state.failed, state.ignored, state.measured, state.filtered_out\n+        );\n \n         self.write_plain(&s)?;\n "}, {"sha": "12aca7cd9a42dd7af12b5cea216bd1e164a751a4", "filename": "library/test/src/formatters/terse.rs", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -54,10 +54,6 @@ impl<T: Write> TerseFormatter<T> {\n         self.write_short_result(\"i\", term::color::YELLOW)\n     }\n \n-    pub fn write_allowed_fail(&mut self) -> io::Result<()> {\n-        self.write_short_result(\"a\", term::color::YELLOW)\n-    }\n-\n     pub fn write_bench(&mut self) -> io::Result<()> {\n         self.write_pretty(\"bench\", term::color::CYAN)\n     }\n@@ -207,7 +203,6 @@ impl<T: Write> OutputFormatter for TerseFormatter<T> {\n                 self.write_failed()\n             }\n             TestResult::TrIgnored => self.write_ignored(),\n-            TestResult::TrAllowedFail => self.write_allowed_fail(),\n             TestResult::TrBench(ref bs) => {\n                 if self.is_multithreaded {\n                     self.write_test_name(desc)?;\n@@ -244,22 +239,10 @@ impl<T: Write> OutputFormatter for TerseFormatter<T> {\n             self.write_pretty(\"FAILED\", term::color::RED)?;\n         }\n \n-        let s = if state.allowed_fail > 0 {\n-            format!(\n-                \". {} passed; {} failed ({} allowed); {} ignored; {} measured; {} filtered out\",\n-                state.passed,\n-                state.failed + state.allowed_fail,\n-                state.allowed_fail,\n-                state.ignored,\n-                state.measured,\n-                state.filtered_out\n-            )\n-        } else {\n-            format!(\n-                \". {} passed; {} failed; {} ignored; {} measured; {} filtered out\",\n-                state.passed, state.failed, state.ignored, state.measured, state.filtered_out\n-            )\n-        };\n+        let s = format!(\n+            \". {} passed; {} failed; {} ignored; {} measured; {} filtered out\",\n+            state.passed, state.failed, state.ignored, state.measured, state.filtered_out\n+        );\n \n         self.write_plain(&s)?;\n "}, {"sha": "8c216a1e0e70e2d40206073610ac6b7be29a1cf1", "filename": "library/test/src/test_result.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/library%2Ftest%2Fsrc%2Ftest_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/library%2Ftest%2Fsrc%2Ftest_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftest_result.rs?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -19,7 +19,6 @@ pub enum TestResult {\n     TrFailed,\n     TrFailedMsg(String),\n     TrIgnored,\n-    TrAllowedFail,\n     TrBench(BenchSamples),\n     TrTimedFail,\n }\n@@ -42,8 +41,6 @@ pub fn calc_result<'a>(\n \n             if maybe_panic_str.map(|e| e.contains(msg)).unwrap_or(false) {\n                 TestResult::TrOk\n-            } else if desc.allow_fail {\n-                TestResult::TrAllowedFail\n             } else if let Some(panic_str) = maybe_panic_str {\n                 TestResult::TrFailedMsg(format!(\n                     r#\"panic did not contain expected string\n@@ -64,7 +61,6 @@ pub fn calc_result<'a>(\n         (&ShouldPanic::Yes, Ok(())) | (&ShouldPanic::YesWithMessage(_), Ok(())) => {\n             TestResult::TrFailedMsg(\"test did not panic as expected\".to_string())\n         }\n-        _ if desc.allow_fail => TestResult::TrAllowedFail,\n         _ => TestResult::TrFailed,\n     };\n \n@@ -90,11 +86,10 @@ pub fn get_result_from_exit_code(\n     time_opts: &Option<time::TestTimeOptions>,\n     exec_time: &Option<time::TestExecTime>,\n ) -> TestResult {\n-    let result = match (desc.allow_fail, code) {\n-        (_, TR_OK) => TestResult::TrOk,\n-        (true, TR_FAILED) => TestResult::TrAllowedFail,\n-        (false, TR_FAILED) => TestResult::TrFailed,\n-        (_, _) => TestResult::TrFailedMsg(format!(\"got unexpected return code {}\", code)),\n+    let result = match code {\n+        TR_OK => TestResult::TrOk,\n+        TR_FAILED => TestResult::TrFailed,\n+        _ => TestResult::TrFailedMsg(format!(\"got unexpected return code {}\", code)),\n     };\n \n     // If test is already failed (or allowed to fail), do not change the result."}, {"sha": "9b9c5205686629cc1c6105117d4955de54208dd7", "filename": "library/test/src/tests.rs", "status": "modified", "additions": 38, "deletions": 20, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/library%2Ftest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/library%2Ftest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftests.rs?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -62,10 +62,11 @@ fn one_ignored_one_unignored_test() -> Vec<TestDescAndFn> {\n                 name: StaticTestName(\"1\"),\n                 ignore: true,\n                 should_panic: ShouldPanic::No,\n-                allow_fail: false,\n                 compile_fail: false,\n                 no_run: false,\n                 test_type: TestType::Unknown,\n+                #[cfg(bootstrap)]\n+                allow_fail: false,\n             },\n             testfn: DynTestFn(Box::new(move || {})),\n         },\n@@ -74,10 +75,11 @@ fn one_ignored_one_unignored_test() -> Vec<TestDescAndFn> {\n                 name: StaticTestName(\"2\"),\n                 ignore: false,\n                 should_panic: ShouldPanic::No,\n-                allow_fail: false,\n                 compile_fail: false,\n                 no_run: false,\n                 test_type: TestType::Unknown,\n+                #[cfg(bootstrap)]\n+                allow_fail: false,\n             },\n             testfn: DynTestFn(Box::new(move || {})),\n         },\n@@ -94,10 +96,11 @@ pub fn do_not_run_ignored_tests() {\n             name: StaticTestName(\"whatever\"),\n             ignore: true,\n             should_panic: ShouldPanic::No,\n-            allow_fail: false,\n             compile_fail: false,\n             no_run: false,\n             test_type: TestType::Unknown,\n+            #[cfg(bootstrap)]\n+            allow_fail: false,\n         },\n         testfn: DynTestFn(Box::new(f)),\n     };\n@@ -115,10 +118,11 @@ pub fn ignored_tests_result_in_ignored() {\n             name: StaticTestName(\"whatever\"),\n             ignore: true,\n             should_panic: ShouldPanic::No,\n-            allow_fail: false,\n             compile_fail: false,\n             no_run: false,\n             test_type: TestType::Unknown,\n+            #[cfg(bootstrap)]\n+            allow_fail: false,\n         },\n         testfn: DynTestFn(Box::new(f)),\n     };\n@@ -140,10 +144,11 @@ fn test_should_panic() {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             should_panic: ShouldPanic::Yes,\n-            allow_fail: false,\n             compile_fail: false,\n             no_run: false,\n             test_type: TestType::Unknown,\n+            #[cfg(bootstrap)]\n+            allow_fail: false,\n         },\n         testfn: DynTestFn(Box::new(f)),\n     };\n@@ -165,10 +170,11 @@ fn test_should_panic_good_message() {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             should_panic: ShouldPanic::YesWithMessage(\"error message\"),\n-            allow_fail: false,\n             compile_fail: false,\n             no_run: false,\n             test_type: TestType::Unknown,\n+            #[cfg(bootstrap)]\n+            allow_fail: false,\n         },\n         testfn: DynTestFn(Box::new(f)),\n     };\n@@ -195,10 +201,11 @@ fn test_should_panic_bad_message() {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             should_panic: ShouldPanic::YesWithMessage(expected),\n-            allow_fail: false,\n             compile_fail: false,\n             no_run: false,\n             test_type: TestType::Unknown,\n+            #[cfg(bootstrap)]\n+            allow_fail: false,\n         },\n         testfn: DynTestFn(Box::new(f)),\n     };\n@@ -229,10 +236,11 @@ fn test_should_panic_non_string_message_type() {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             should_panic: ShouldPanic::YesWithMessage(expected),\n-            allow_fail: false,\n             compile_fail: false,\n             no_run: false,\n             test_type: TestType::Unknown,\n+            #[cfg(bootstrap)]\n+            allow_fail: false,\n         },\n         testfn: DynTestFn(Box::new(f)),\n     };\n@@ -255,10 +263,11 @@ fn test_should_panic_but_succeeds() {\n                 name: StaticTestName(\"whatever\"),\n                 ignore: false,\n                 should_panic,\n-                allow_fail: false,\n                 compile_fail: false,\n                 no_run: false,\n                 test_type: TestType::Unknown,\n+                #[cfg(bootstrap)]\n+                allow_fail: false,\n             },\n             testfn: DynTestFn(Box::new(f)),\n         };\n@@ -289,10 +298,11 @@ fn report_time_test_template(report_time: bool) -> Option<TestExecTime> {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             should_panic: ShouldPanic::No,\n-            allow_fail: false,\n             compile_fail: false,\n             no_run: false,\n             test_type: TestType::Unknown,\n+            #[cfg(bootstrap)]\n+            allow_fail: false,\n         },\n         testfn: DynTestFn(Box::new(f)),\n     };\n@@ -324,10 +334,11 @@ fn time_test_failure_template(test_type: TestType) -> TestResult {\n             name: StaticTestName(\"whatever\"),\n             ignore: false,\n             should_panic: ShouldPanic::No,\n-            allow_fail: false,\n             compile_fail: false,\n             no_run: false,\n             test_type,\n+            #[cfg(bootstrap)]\n+            allow_fail: false,\n         },\n         testfn: DynTestFn(Box::new(f)),\n     };\n@@ -363,10 +374,11 @@ fn typed_test_desc(test_type: TestType) -> TestDesc {\n         name: StaticTestName(\"whatever\"),\n         ignore: false,\n         should_panic: ShouldPanic::No,\n-        allow_fail: false,\n         compile_fail: false,\n         no_run: false,\n         test_type,\n+        #[cfg(bootstrap)]\n+        allow_fail: false,\n     }\n }\n \n@@ -476,10 +488,11 @@ pub fn exclude_should_panic_option() {\n             name: StaticTestName(\"3\"),\n             ignore: false,\n             should_panic: ShouldPanic::Yes,\n-            allow_fail: false,\n             compile_fail: false,\n             no_run: false,\n             test_type: TestType::Unknown,\n+            #[cfg(bootstrap)]\n+            allow_fail: false,\n         },\n         testfn: DynTestFn(Box::new(move || {})),\n     });\n@@ -500,10 +513,11 @@ pub fn exact_filter_match() {\n                     name: StaticTestName(name),\n                     ignore: false,\n                     should_panic: ShouldPanic::No,\n-                    allow_fail: false,\n                     compile_fail: false,\n                     no_run: false,\n                     test_type: TestType::Unknown,\n+                    #[cfg(bootstrap)]\n+                    allow_fail: false,\n                 },\n                 testfn: DynTestFn(Box::new(move || {})),\n             })\n@@ -589,10 +603,11 @@ fn sample_tests() -> Vec<TestDescAndFn> {\n                 name: DynTestName((*name).clone()),\n                 ignore: false,\n                 should_panic: ShouldPanic::No,\n-                allow_fail: false,\n                 compile_fail: false,\n                 no_run: false,\n                 test_type: TestType::Unknown,\n+                #[cfg(bootstrap)]\n+                allow_fail: false,\n             },\n             testfn: DynTestFn(Box::new(testfn)),\n         };\n@@ -740,10 +755,11 @@ pub fn test_bench_no_iter() {\n         name: StaticTestName(\"f\"),\n         ignore: false,\n         should_panic: ShouldPanic::No,\n-        allow_fail: false,\n         compile_fail: false,\n         no_run: false,\n         test_type: TestType::Unknown,\n+        #[cfg(bootstrap)]\n+        allow_fail: false,\n     };\n \n     crate::bench::benchmark(TestId(0), desc, tx, true, f);\n@@ -762,10 +778,11 @@ pub fn test_bench_iter() {\n         name: StaticTestName(\"f\"),\n         ignore: false,\n         should_panic: ShouldPanic::No,\n-        allow_fail: false,\n         compile_fail: false,\n         no_run: false,\n         test_type: TestType::Unknown,\n+        #[cfg(bootstrap)]\n+        allow_fail: false,\n     };\n \n     crate::bench::benchmark(TestId(0), desc, tx, true, f);\n@@ -778,20 +795,22 @@ fn should_sort_failures_before_printing_them() {\n         name: StaticTestName(\"a\"),\n         ignore: false,\n         should_panic: ShouldPanic::No,\n-        allow_fail: false,\n         compile_fail: false,\n         no_run: false,\n         test_type: TestType::Unknown,\n+        #[cfg(bootstrap)]\n+        allow_fail: false,\n     };\n \n     let test_b = TestDesc {\n         name: StaticTestName(\"b\"),\n         ignore: false,\n         should_panic: ShouldPanic::No,\n-        allow_fail: false,\n         compile_fail: false,\n         no_run: false,\n         test_type: TestType::Unknown,\n+        #[cfg(bootstrap)]\n+        allow_fail: false,\n     };\n \n     let mut out = PrettyFormatter::new(OutputLocation::Raw(Vec::new()), false, 10, false, None);\n@@ -802,7 +821,6 @@ fn should_sort_failures_before_printing_them() {\n         passed: 0,\n         failed: 0,\n         ignored: 0,\n-        allowed_fail: 0,\n         filtered_out: 0,\n         measured: 0,\n         exec_time: None,"}, {"sha": "43e5a10ebbe95a02f6184410fb9368e7556a1f1f", "filename": "library/test/src/types.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/library%2Ftest%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/library%2Ftest%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftypes.rs?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -118,10 +118,11 @@ pub struct TestDesc {\n     pub name: TestName,\n     pub ignore: bool,\n     pub should_panic: options::ShouldPanic,\n-    pub allow_fail: bool,\n     pub compile_fail: bool,\n     pub no_run: bool,\n     pub test_type: TestType,\n+    #[cfg(bootstrap)]\n+    pub allow_fail: bool,\n }\n \n impl TestDesc {\n@@ -150,9 +151,6 @@ impl TestDesc {\n             }\n             options::ShouldPanic::No => {}\n         }\n-        if self.allow_fail {\n-            return Some(\"allow fail\");\n-        }\n         if self.compile_fail {\n             return Some(\"compile fail\");\n         }"}, {"sha": "9c41ab69c8be3784e4e07f12acc9c06d60b03844", "filename": "src/bootstrap/bin/main.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Fbootstrap%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Fbootstrap%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Fmain.rs?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -30,6 +30,7 @@ fn main() {\n         println!(\"{}\", suggestion);\n     }\n \n+    let pre_commit = config.src.join(\".git\").join(\"hooks\").join(\"pre-commit\");\n     Build::new(config).build();\n \n     if suggest_setup {\n@@ -42,6 +43,19 @@ fn main() {\n         println!(\"{}\", suggestion);\n     }\n \n+    // Give a warning if the pre-commit script is in pre-commit and not pre-push.\n+    // HACK: Since the commit script uses hard links, we can't actually tell if it was installed by x.py setup or not.\n+    // We could see if it's identical to src/etc/pre-push.sh, but pre-push may have been modified in the meantime.\n+    // Instead, look for this comment, which is almost certainly not in any custom hook.\n+    if std::fs::read_to_string(pre_commit).map_or(false, |contents| {\n+        contents.contains(\"https://github.com/rust-lang/rust/issues/77620#issuecomment-705144570\")\n+    }) {\n+        println!(\n+            \"warning: You have the pre-push script installed to .git/hooks/pre-commit. \\\n+                  Consider moving it to .git/hooks/pre-push instead, which runs less often.\"\n+        );\n+    }\n+\n     if suggest_setup || changelog_suggestion.is_some() {\n         println!(\"note: this message was printed twice to make it more likely to be seen\");\n     }"}, {"sha": "86115a90294654fff30c570e0e92801cf035ee3d", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -1221,9 +1221,9 @@ def bootstrap(help_triggered):\n     build.verbose = args.verbose\n     build.clean = args.clean\n \n-    # Read from `RUST_BOOTSTRAP_CONFIG`, then `--config`, then fallback to `config.toml` (if it\n+    # Read from `--config`, then `RUST_BOOTSTRAP_CONFIG`, then fallback to `config.toml` (if it\n     # exists).\n-    toml_path = os.getenv('RUST_BOOTSTRAP_CONFIG') or args.config\n+    toml_path = args.config or os.getenv('RUST_BOOTSTRAP_CONFIG')\n     if not toml_path and os.path.exists('config.toml'):\n         toml_path = 'config.toml'\n "}, {"sha": "6e39ea00f808c20ae34cf367a0b01f8b4b0cdc70", "filename": "src/bootstrap/build.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Fbootstrap%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Fbootstrap%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild.rs?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -3,6 +3,8 @@ use std::path::PathBuf;\n \n fn main() {\n     println!(\"cargo:rerun-if-changed=build.rs\");\n+    println!(\"cargo:rerun-if-env-changed=RUSTC\");\n+    println!(\"cargo:rerun-if-env-changed=PATH\");\n     println!(\"cargo:rustc-env=BUILD_TRIPLE={}\", env::var(\"HOST\").unwrap());\n \n     // This may not be a canonicalized path."}, {"sha": "1a42d25c352d3eaa041807697e35b3c22db88242", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -527,7 +527,7 @@ impl Build {\n         // Try passing `--progress` to start, then run git again without if that fails.\n         let update = |progress: bool| {\n             let mut git = Command::new(\"git\");\n-            git.args(&[\"submodule\", \"update\", \"--init\", \"--recursive\"]);\n+            git.args(&[\"submodule\", \"update\", \"--init\", \"--recursive\", \"--depth=1\"]);\n             if progress {\n                 git.arg(\"--progress\");\n             }"}, {"sha": "9a9ef0b76955d503127bc64bd7b6be057b575be7", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 45, "deletions": 8, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -1,7 +1,9 @@\n use crate::TargetSelection;\n use crate::{t, VERSION};\n+use std::env::consts::EXE_SUFFIX;\n use std::fmt::Write as _;\n-use std::path::{Path, PathBuf};\n+use std::fs::File;\n+use std::path::{Path, PathBuf, MAIN_SEPARATOR};\n use std::process::Command;\n use std::str::FromStr;\n use std::{\n@@ -109,7 +111,8 @@ pub fn setup(src_path: &Path, profile: Profile) {\n     println!(\"`x.py` will now use the configuration at {}\", include_path.display());\n \n     let build = TargetSelection::from_user(&env!(\"BUILD_TRIPLE\"));\n-    let stage_path = [\"build\", build.rustc_target_arg(), \"stage1\"].join(\"/\");\n+    let stage_path =\n+        [\"build\", build.rustc_target_arg(), \"stage1\"].join(&MAIN_SEPARATOR.to_string());\n \n     println!();\n \n@@ -171,6 +174,13 @@ fn attempt_toolchain_link(stage_path: &str) {\n         return;\n     }\n \n+    if !ensure_stage1_toolchain_placeholder_exists(stage_path) {\n+        println!(\n+            \"Failed to create a template for stage 1 toolchain or confirm that it already exists\"\n+        );\n+        return;\n+    }\n+\n     if try_link_toolchain(&stage_path[..]) {\n         println!(\n             \"Added `stage1` rustup toolchain; try `cargo +stage1 build` on a separate rust project to run a newly-built toolchain\"\n@@ -219,6 +229,33 @@ fn try_link_toolchain(stage_path: &str) -> bool {\n         .map_or(false, |output| output.status.success())\n }\n \n+fn ensure_stage1_toolchain_placeholder_exists(stage_path: &str) -> bool {\n+    let pathbuf = PathBuf::from(stage_path);\n+\n+    if fs::create_dir_all(pathbuf.join(\"lib\")).is_err() {\n+        return false;\n+    };\n+\n+    let pathbuf = pathbuf.join(\"bin\");\n+    if fs::create_dir_all(&pathbuf).is_err() {\n+        return false;\n+    };\n+\n+    let pathbuf = pathbuf.join(format!(\"rustc{}\", EXE_SUFFIX));\n+\n+    if pathbuf.exists() {\n+        return true;\n+    }\n+\n+    // Take care not to overwrite the file\n+    let result = File::options().append(true).create(true).open(&pathbuf);\n+    if result.is_err() {\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n // Used to get the path for `Subcommand::Setup`\n pub fn interactive_path() -> io::Result<Profile> {\n     fn abbrev_all() -> impl Iterator<Item = ((String, String), Profile)> {\n@@ -271,9 +308,9 @@ fn install_git_hook_maybe(src_path: &Path) -> io::Result<()> {\n     let mut input = String::new();\n     println!(\n         \"Rust's CI will automatically fail if it doesn't pass `tidy`, the internal tool for ensuring code quality.\n-If you'd like, x.py can install a git hook for you that will automatically run `tidy --bless` on each commit\n-to ensure your code is up to par. If you decide later that this behavior is undesirable,\n-simply delete the `pre-commit` file from .git/hooks.\"\n+If you'd like, x.py can install a git hook for you that will automatically run `tidy --bless` before\n+pushing your code to ensure your code is up to par. If you decide later that this behavior is\n+undesirable, simply delete the `pre-push` file from .git/hooks.\"\n     );\n \n     let should_install = loop {\n@@ -293,21 +330,21 @@ simply delete the `pre-commit` file from .git/hooks.\"\n     };\n \n     if should_install {\n-        let src = src_path.join(\"src\").join(\"etc\").join(\"pre-commit.sh\");\n+        let src = src_path.join(\"src\").join(\"etc\").join(\"pre-push.sh\");\n         let git = t!(Command::new(\"git\").args(&[\"rev-parse\", \"--git-common-dir\"]).output().map(\n             |output| {\n                 assert!(output.status.success(), \"failed to run `git`\");\n                 PathBuf::from(t!(String::from_utf8(output.stdout)).trim())\n             }\n         ));\n-        let dst = git.join(\"hooks\").join(\"pre-commit\");\n+        let dst = git.join(\"hooks\").join(\"pre-push\");\n         match fs::hard_link(src, &dst) {\n             Err(e) => println!(\n                 \"error: could not create hook {}: do you already have the git hook installed?\\n{}\",\n                 dst.display(),\n                 e\n             ),\n-            Ok(_) => println!(\"Linked `src/etc/pre-commit.sh` to `.git/hooks/pre-commit`\"),\n+            Ok(_) => println!(\"Linked `src/etc/pre-commit.sh` to `.git/hooks/pre-push`\"),\n         };\n     } else {\n         println!(\"Ok, skipping installation!\");"}, {"sha": "a78725f2ab0d1c1383e708240e819ae451c843c0", "filename": "src/etc/pre-push.sh", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Fetc%2Fpre-push.sh", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Fetc%2Fpre-push.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fpre-push.sh?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -16,7 +16,7 @@ if [[ \"$OSTYPE\" == \"msys\" || \"$OSTYPE\" == \"win32\" ]]; then\n   COMMAND=\"python $COMMAND\"\n fi\n \n-echo \"Running pre-commit script '$COMMAND'\"\n+echo \"Running pre-push script '$COMMAND'\"\n \n cd \"$ROOT_DIR\"\n ", "previous_filename": "src/etc/pre-commit.sh"}, {"sha": "6c55721c0dd9422dcd6f03ad8de6c9ca7841662d", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -951,10 +951,11 @@ impl Tester for Collector {\n                 },\n                 // compiler failures are test failures\n                 should_panic: test::ShouldPanic::No,\n-                allow_fail: config.allow_fail,\n                 compile_fail: config.compile_fail,\n                 no_run,\n                 test_type: test::TestType::DocTest,\n+                #[cfg(bootstrap)]\n+                allow_fail: false,\n             },\n             testfn: test::DynTestFn(box move || {\n                 let report_unused_externs = |uext| {"}, {"sha": "a40181352f6c03a19fc955b8ff8c21c85c2586e7", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -847,7 +847,6 @@ crate struct LangString {\n     crate test_harness: bool,\n     crate compile_fail: bool,\n     crate error_codes: Vec<String>,\n-    crate allow_fail: bool,\n     crate edition: Option<Edition>,\n }\n \n@@ -869,7 +868,6 @@ impl Default for LangString {\n             test_harness: false,\n             compile_fail: false,\n             error_codes: Vec::new(),\n-            allow_fail: false,\n             edition: None,\n         }\n     }\n@@ -943,10 +941,6 @@ impl LangString {\n                         seen_rust_tags = !seen_other_tags;\n                     }\n                 }\n-                \"allow_fail\" => {\n-                    data.allow_fail = true;\n-                    seen_rust_tags = !seen_other_tags;\n-                }\n                 \"rust\" => {\n                     data.rust = true;\n                     seen_rust_tags = true;\n@@ -994,12 +988,6 @@ impl LangString {\n                             \"the code block will either not be tested if not marked as a rust one \\\n                              or will be run (which you might not want)\",\n                         ))\n-                    } else if s == \"allow-fail\" || s == \"allow_fail\" || s == \"allowfail\" {\n-                        Some((\n-                            \"allow_fail\",\n-                            \"the code block will either not be tested if not marked as a rust one \\\n-                             or will be run (which you might not want)\",\n-                        ))\n                     } else if s == \"test-harness\" || s == \"test_harness\" || s == \"testharness\" {\n                         Some((\n                             \"test_harness\","}, {"sha": "ea6575d179d86716a10891c598c41b9ca20a2e8a", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -70,7 +70,6 @@ fn test_lang_string_parse() {\n         compile_fail: true,\n         ..Default::default()\n     });\n-    t(LangString { original: \"allow_fail\".into(), allow_fail: true, ..Default::default() });\n     t(LangString { original: \"no_run,example\".into(), no_run: true, ..Default::default() });\n     t(LangString {\n         original: \"sh,should_panic\".into(),"}, {"sha": "cf3c63d6a8fb6b64b6c1c53f8283041946002204", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -472,6 +472,7 @@ nav.sub {\n }\n .block ul, .block li {\n \tpadding: 0;\n+\tmargin: 0;\n \tlist-style: none;\n }\n \n@@ -502,8 +503,6 @@ nav.sub {\n \tfont-weight: 500;\n \tpadding: 0;\n \tmargin: 0;\n-\tmargin-top: 0.5rem;\n-\tmargin-bottom: 0.25rem;\n }\n \n .sidebar-links,"}, {"sha": "8e1919f75d671512149b1efdba9247121f2984ec", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -559,7 +559,15 @@ function hideThemeButtonState() {\n             others.appendChild(div);\n         }\n \n-        function block(shortty, longty) {\n+        /**\n+         * Append to the sidebar a \"block\" of links - a heading along with a list (`<ul>`) of items.\n+         *\n+         * @param {string} shortty - A short type name, like \"primitive\", \"mod\", or \"macro\"\n+         * @param {string} id - The HTML id of the corresponding section on the module page.\n+         * @param {string} longty - A long, capitalized, plural name, like \"Primitive Types\",\n+         *                          \"Modules\", or \"Macros\".\n+         */\n+        function block(shortty, id, longty) {\n             var filtered = items[shortty];\n             if (!filtered) {\n                 return;\n@@ -568,7 +576,7 @@ function hideThemeButtonState() {\n             var div = document.createElement(\"div\");\n             div.className = \"block \" + shortty;\n             var h3 = document.createElement(\"h3\");\n-            h3.textContent = longty;\n+            h3.innerHTML = `<a href=\"index.html#${id}\">${longty}</a>`;\n             div.appendChild(h3);\n             var ul = document.createElement(\"ul\");\n \n@@ -607,20 +615,20 @@ function hideThemeButtonState() {\n \n             var isModule = hasClass(document.body, \"mod\");\n             if (!isModule) {\n-                block(\"primitive\", \"Primitive Types\");\n-                block(\"mod\", \"Modules\");\n-                block(\"macro\", \"Macros\");\n-                block(\"struct\", \"Structs\");\n-                block(\"enum\", \"Enums\");\n-                block(\"union\", \"Unions\");\n-                block(\"constant\", \"Constants\");\n-                block(\"static\", \"Statics\");\n-                block(\"trait\", \"Traits\");\n-                block(\"fn\", \"Functions\");\n-                block(\"type\", \"Type Definitions\");\n-                block(\"foreigntype\", \"Foreign Types\");\n-                block(\"keyword\", \"Keywords\");\n-                block(\"traitalias\", \"Trait Aliases\");\n+                block(\"primitive\", \"primitives\", \"Primitive Types\");\n+                block(\"mod\", \"modules\", \"Modules\");\n+                block(\"macro\", \"macros\", \"Macros\");\n+                block(\"struct\", \"structs\", \"Structs\");\n+                block(\"enum\", \"enums\", \"Enums\");\n+                block(\"union\", \"unions\", \"Unions\");\n+                block(\"constant\", \"constants\", \"Constants\");\n+                block(\"static\", \"static\", \"Statics\");\n+                block(\"trait\", \"traits\", \"Traits\");\n+                block(\"fn\", \"functions\", \"Functions\");\n+                block(\"type\", \"types\", \"Type Definitions\");\n+                block(\"foreigntype\", \"foreign-types\", \"Foreign Types\");\n+                block(\"keyword\", \"keywords\", \"Keywords\");\n+                block(\"traitalias\", \"trait-aliases\", \"Trait Aliases\");\n             }\n \n             // `crates{version}.js` should always be loaded before this script, so we can use"}, {"sha": "e2c778aa8650964a540d747c0ace08018a7bda80", "filename": "src/test/run-make-fulldeps/libtest-json/output-default.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-default.json", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-default.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-default.json?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -7,4 +7,4 @@\n { \"type\": \"test\", \"name\": \"c\", \"event\": \"ok\" }\n { \"type\": \"test\", \"event\": \"started\", \"name\": \"d\" }\n { \"type\": \"test\", \"name\": \"d\", \"event\": \"ignored\" }\n-{ \"type\": \"suite\", \"event\": \"failed\", \"passed\": 2, \"failed\": 1, \"allowed_fail\": 0, \"ignored\": 1, \"measured\": 0, \"filtered_out\": 0, \"exec_time\": $TIME }\n+{ \"type\": \"suite\", \"event\": \"failed\", \"passed\": 2, \"failed\": 1, \"ignored\": 1, \"measured\": 0, \"filtered_out\": 0, \"exec_time\": $TIME }"}, {"sha": "68eb00c297ea72a175bbd3c3b952572503d62478", "filename": "src/test/run-make-fulldeps/libtest-json/output-stdout-success.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-stdout-success.json", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-stdout-success.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-stdout-success.json?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -7,4 +7,4 @@\n { \"type\": \"test\", \"name\": \"c\", \"event\": \"ok\", \"stdout\": \"thread 'main' panicked at 'assertion failed: false', f.rs:15:5\\n\" }\n { \"type\": \"test\", \"event\": \"started\", \"name\": \"d\" }\n { \"type\": \"test\", \"name\": \"d\", \"event\": \"ignored\" }\n-{ \"type\": \"suite\", \"event\": \"failed\", \"passed\": 2, \"failed\": 1, \"allowed_fail\": 0, \"ignored\": 1, \"measured\": 0, \"filtered_out\": 0, \"exec_time\": $TIME }\n+{ \"type\": \"suite\", \"event\": \"failed\", \"passed\": 2, \"failed\": 1, \"ignored\": 1, \"measured\": 0, \"filtered_out\": 0, \"exec_time\": $TIME }"}, {"sha": "ef588a69f1d5f7b2638ec2ed05d296b0e0b5e135", "filename": "src/test/rustdoc-gui/sidebar-mobile.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -39,4 +39,4 @@ assert-position: (\"#method\\.must_use\", {\"y\": 45})\n // Check that the bottom-most item on the sidebar menu can be scrolled fully into view.\n click: \".sidebar-menu-toggle\"\n scroll-to: \".block.keyword li:nth-child(1)\"\n-assert-position: (\".block.keyword li:nth-child(1)\", {\"y\": 542.96875})\n+assert-position: (\".block.keyword li:nth-child(1)\", {\"y\": 542.234375})"}, {"sha": "9505e00512f4ca4289a0b140eedbf10fde2be4de", "filename": "src/test/rustdoc-gui/sidebar.goml", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -78,3 +78,10 @@ assert-text: (\"#functions + .item-table .item-left > a\", \"foo\")\n // Links to trait implementations in the sidebar should not wrap even if they are long.\n goto: file://|DOC_PATH|/lib2/struct.HasALongTraitWithParams.html\n assert-property: (\".sidebar-links a\", {\"offsetHeight\": 29})\n+\n+// Test that clicking on of the \"In <module>\" headings in the sidebar links to the\n+// appropriate anchor in index.html.\n+goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n+click: \".block.mod h3 a\"\n+// PAGE: index.html\n+assert-css: (\"#modules\", {\"background-color\": \"rgb(253, 255, 211)\"})"}, {"sha": "e955470148a16cba9c857c43d0877f5d9f99f539", "filename": "src/test/rustdoc-ui/check-attr-test.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Frustdoc-ui%2Fcheck-attr-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Frustdoc-ui%2Fcheck-attr-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-attr-test.rs?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -23,13 +23,6 @@ pub fn bar() {}\n /// ```\n pub fn foobar() {}\n \n-/// barfoo\n-///\n-/// ```allow-fail,allowfail,allOw_fail\n-/// boo\n-/// ```\n-pub fn barfoo() {}\n-\n /// b\n ///\n /// ```test-harness,testharness,tesT_harness"}, {"sha": "b1fa9edf0e4cb3cb6ed3c688e5a8ce3f50cb0c1e", "filename": "src/test/rustdoc-ui/check-attr-test.stderr", "status": "modified", "additions": 12, "deletions": 48, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Frustdoc-ui%2Fcheck-attr-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Frustdoc-ui%2Fcheck-attr-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-attr-test.stderr?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -111,77 +111,41 @@ error: unknown attribute `nO_run`. Did you mean `no_run`?\n    |\n    = help: the code block will either not be tested if not marked as a rust one or will be run (which you might not want)\n \n-error: unknown attribute `allow-fail`. Did you mean `allow_fail`?\n+error: unknown attribute `test-harness`. Did you mean `test_harness`?\n   --> $DIR/check-attr-test.rs:26:1\n    |\n-26 | / /// barfoo\n+26 | / /// b\n 27 | | ///\n-28 | | /// ```allow-fail,allowfail,allOw_fail\n+28 | | /// ```test-harness,testharness,tesT_harness\n 29 | | /// boo\n 30 | | /// ```\n    | |_______^\n    |\n-   = help: the code block will either not be tested if not marked as a rust one or will be run (which you might not want)\n+   = help: the code block will either not be tested if not marked as a rust one or the code will be wrapped inside a main function\n \n-error: unknown attribute `allowfail`. Did you mean `allow_fail`?\n+error: unknown attribute `testharness`. Did you mean `test_harness`?\n   --> $DIR/check-attr-test.rs:26:1\n    |\n-26 | / /// barfoo\n+26 | / /// b\n 27 | | ///\n-28 | | /// ```allow-fail,allowfail,allOw_fail\n+28 | | /// ```test-harness,testharness,tesT_harness\n 29 | | /// boo\n 30 | | /// ```\n    | |_______^\n    |\n-   = help: the code block will either not be tested if not marked as a rust one or will be run (which you might not want)\n+   = help: the code block will either not be tested if not marked as a rust one or the code will be wrapped inside a main function\n \n-error: unknown attribute `allOw_fail`. Did you mean `allow_fail`?\n+error: unknown attribute `tesT_harness`. Did you mean `test_harness`?\n   --> $DIR/check-attr-test.rs:26:1\n    |\n-26 | / /// barfoo\n+26 | / /// b\n 27 | | ///\n-28 | | /// ```allow-fail,allowfail,allOw_fail\n+28 | | /// ```test-harness,testharness,tesT_harness\n 29 | | /// boo\n 30 | | /// ```\n-   | |_______^\n-   |\n-   = help: the code block will either not be tested if not marked as a rust one or will be run (which you might not want)\n-\n-error: unknown attribute `test-harness`. Did you mean `test_harness`?\n-  --> $DIR/check-attr-test.rs:33:1\n-   |\n-33 | / /// b\n-34 | | ///\n-35 | | /// ```test-harness,testharness,tesT_harness\n-36 | | /// boo\n-37 | | /// ```\n-   | |_______^\n-   |\n-   = help: the code block will either not be tested if not marked as a rust one or the code will be wrapped inside a main function\n-\n-error: unknown attribute `testharness`. Did you mean `test_harness`?\n-  --> $DIR/check-attr-test.rs:33:1\n-   |\n-33 | / /// b\n-34 | | ///\n-35 | | /// ```test-harness,testharness,tesT_harness\n-36 | | /// boo\n-37 | | /// ```\n-   | |_______^\n-   |\n-   = help: the code block will either not be tested if not marked as a rust one or the code will be wrapped inside a main function\n-\n-error: unknown attribute `tesT_harness`. Did you mean `test_harness`?\n-  --> $DIR/check-attr-test.rs:33:1\n-   |\n-33 | / /// b\n-34 | | ///\n-35 | | /// ```test-harness,testharness,tesT_harness\n-36 | | /// boo\n-37 | | /// ```\n    | |_______^\n    |\n    = help: the code block will either not be tested if not marked as a rust one or the code will be wrapped inside a main function\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 12 previous errors\n "}, {"sha": "0b3f7bedda5cf9b442a625b2a97e7bb90bd71141", "filename": "src/test/rustdoc-ui/check-attr.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Frustdoc-ui%2Fcheck-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Frustdoc-ui%2Fcheck-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-attr.rs?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -30,16 +30,6 @@ pub fn bar() {}\n /// ```\n pub fn foobar() {}\n \n-/// barfoo\n-//~^ ERROR\n-//~^^ ERROR\n-//~^^^ ERROR\n-///\n-/// ```allow-fail,allowfail,alLow_fail\n-/// boo\n-/// ```\n-pub fn barfoo() {}\n-\n /// b\n //~^ ERROR\n //~^^ ERROR"}, {"sha": "370b804c56c64a840e3cfd37d909b15342e13be3", "filename": "src/test/rustdoc-ui/check-attr.stderr", "status": "modified", "additions": 4, "deletions": 46, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Frustdoc-ui%2Fcheck-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Frustdoc-ui%2Fcheck-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-attr.stderr?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -129,50 +129,8 @@ LL | | /// ```\n    |\n    = help: the code block will either not be tested if not marked as a rust one or will be run (which you might not want)\n \n-error: unknown attribute `allow-fail`. Did you mean `allow_fail`?\n-  --> $DIR/check-attr.rs:33:1\n-   |\n-LL | / /// barfoo\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | | /// boo\n-LL | | /// ```\n-   | |_______^\n-   |\n-   = help: the code block will either not be tested if not marked as a rust one or will be run (which you might not want)\n-\n-error: unknown attribute `allowfail`. Did you mean `allow_fail`?\n-  --> $DIR/check-attr.rs:33:1\n-   |\n-LL | / /// barfoo\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | | /// boo\n-LL | | /// ```\n-   | |_______^\n-   |\n-   = help: the code block will either not be tested if not marked as a rust one or will be run (which you might not want)\n-\n-error: unknown attribute `alLow_fail`. Did you mean `allow_fail`?\n-  --> $DIR/check-attr.rs:33:1\n-   |\n-LL | / /// barfoo\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | | /// boo\n-LL | | /// ```\n-   | |_______^\n-   |\n-   = help: the code block will either not be tested if not marked as a rust one or will be run (which you might not want)\n-\n error: unknown attribute `test-harness`. Did you mean `test_harness`?\n-  --> $DIR/check-attr.rs:43:1\n+  --> $DIR/check-attr.rs:33:1\n    |\n LL | / /// b\n LL | |\n@@ -186,7 +144,7 @@ LL | | /// ```\n    = help: the code block will either not be tested if not marked as a rust one or the code will be wrapped inside a main function\n \n error: unknown attribute `testharness`. Did you mean `test_harness`?\n-  --> $DIR/check-attr.rs:43:1\n+  --> $DIR/check-attr.rs:33:1\n    |\n LL | / /// b\n LL | |\n@@ -200,7 +158,7 @@ LL | | /// ```\n    = help: the code block will either not be tested if not marked as a rust one or the code will be wrapped inside a main function\n \n error: unknown attribute `teSt_harness`. Did you mean `test_harness`?\n-  --> $DIR/check-attr.rs:43:1\n+  --> $DIR/check-attr.rs:33:1\n    |\n LL | / /// b\n LL | |\n@@ -213,5 +171,5 @@ LL | | /// ```\n    |\n    = help: the code block will either not be tested if not marked as a rust one or the code will be wrapped inside a main function\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 12 previous errors\n "}, {"sha": "d301f8c4054c23bb901cac12cc877926b3a90607", "filename": "src/test/ui/consts/const-tup-index-span.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.stderr?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -6,6 +6,10 @@ LL | const TUP: (usize,) = 5usize << 64;\n    |\n    = note: expected tuple `(usize,)`\n                found type `usize`\n+help: use a trailing comma to create a tuple with one element\n+   |\n+LL | const TUP: (usize,) = (5usize << 64,);\n+   |                       +            ++\n \n error: aborting due to previous error\n "}, {"sha": "7d9e18cb341f38330e3e99e141386cf3fdeb935e", "filename": "src/test/ui/consts/const_fn_trait_bound.stock.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_trait_bound.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_trait_bound.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_trait_bound.stock.stderr?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -4,7 +4,7 @@ error[E0658]: trait bounds other than `Sized` on const fn parameters are unstabl\n LL | const fn test1<T: std::ops::Add>() {}\n    |                ^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n error[E0658]: trait objects in const fn are unstable\n@@ -13,7 +13,7 @@ error[E0658]: trait objects in const fn are unstable\n LL | const fn test2(_x: &dyn Send) {}\n    |                ^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n error[E0658]: trait objects in const fn are unstable\n@@ -22,7 +22,7 @@ error[E0658]: trait objects in const fn are unstable\n LL | const fn test3() -> &'static dyn Send { loop {} }\n    |                     ^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n error: aborting due to 3 previous errors"}, {"sha": "67cb604b6a7be0344258766ec7b3bd21478ab4d8", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -136,7 +136,7 @@ error[E0658]: trait bounds other than `Sized` on const fn parameters are unstabl\n LL | const fn foo11<T: std::fmt::Display>(t: T) -> T { t }\n    |                ^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n@@ -145,7 +145,7 @@ error[E0658]: trait bounds other than `Sized` on const fn parameters are unstabl\n LL | const fn foo11_2<T: Send>(t: T) -> T { t }\n    |                  ^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n error[E0013]: constant functions cannot refer to statics\n@@ -218,7 +218,7 @@ LL |\n LL |     const fn foo(&self) {}\n    |     ------------------- function declared as const here\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n@@ -230,7 +230,7 @@ LL |\n LL |     const fn foo2(&self) {}\n    |     -------------------- function declared as const here\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n@@ -242,7 +242,7 @@ LL |\n LL |     const fn foo3(&self) {}\n    |     -------------------- function declared as const here\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n@@ -251,7 +251,7 @@ error[E0658]: trait bounds other than `Sized` on const fn parameters are unstabl\n LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n    |                                  ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n error[E0493]: destructors cannot be evaluated at compile-time\n@@ -268,7 +268,7 @@ error[E0658]: trait bounds other than `Sized` on const fn parameters are unstabl\n LL | const fn no_apit(_x: impl std::fmt::Debug) {}\n    |                      ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n error[E0493]: destructors cannot be evaluated at compile-time\n@@ -285,7 +285,7 @@ error[E0658]: trait objects in const fn are unstable\n LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n    |                       ^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n error[E0658]: trait objects in const fn are unstable\n@@ -294,7 +294,7 @@ error[E0658]: trait objects in const fn are unstable\n LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n error[E0658]: trait objects in const fn are unstable\n@@ -305,7 +305,7 @@ LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1\n    | |\n    | function declared as const here\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n error[E0658]: trait objects in const fn are unstable\n@@ -316,7 +316,7 @@ LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1\n    | |\n    | function declared as const here\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n error[E0658]: trait objects in const fn are unstable\n@@ -327,7 +327,7 @@ LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1\n    | |\n    | function declared as const here\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n error[E0658]: function pointers cannot appear in constant functions"}, {"sha": "4c2199101d302318385feb16278201b7722667a8", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -6,7 +6,7 @@ LL | const fn no_inner_dyn_trait2(x: Hide) {\n LL |     x.0.field;\n    |     ^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n error[E0658]: trait objects in const fn are unstable\n@@ -17,7 +17,7 @@ LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n    | |\n    | function declared as const here\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors"}, {"sha": "287d4ccf18010a6e803c18fc14bc6935524e90b4", "filename": "src/test/ui/feature-gates/feature-gate-allow_fail.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5e414843ebfe25674d8e18a5369d6249fdee741/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5e414843ebfe25674d8e18a5369d6249fdee741/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow_fail.rs?ref=c5e414843ebfe25674d8e18a5369d6249fdee741", "patch": "@@ -1,8 +0,0 @@\n-// check that #[allow_fail] is feature-gated\n-\n-#[allow_fail] //~ ERROR the `#[allow_fail]` attribute is an experimental feature\n-fn ok_to_fail() {\n-    assert!(false);\n-}\n-\n-fn main() {}"}, {"sha": "76115fb9698332502d0722020bcd0fad7690dcac", "filename": "src/test/ui/feature-gates/feature-gate-allow_fail.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5e414843ebfe25674d8e18a5369d6249fdee741/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5e414843ebfe25674d8e18a5369d6249fdee741/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow_fail.stderr?ref=c5e414843ebfe25674d8e18a5369d6249fdee741", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: the `#[allow_fail]` attribute is an experimental feature\n-  --> $DIR/feature-gate-allow_fail.rs:3:1\n-   |\n-LL | #[allow_fail]\n-   | ^^^^^^^^^^^^^\n-   |\n-   = note: see issue #46488 <https://github.com/rust-lang/rust/issues/46488> for more information\n-   = help: add `#![feature(allow_fail)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "6744444426472baeb402fd7a6a1a9919549183e0", "filename": "src/test/ui/fmt/format-args-capture-issue-93378.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-issue-93378.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-issue-93378.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-issue-93378.rs?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -0,0 +1,11 @@\n+fn main() {\n+    let a = \"a\";\n+    let b = \"b\";\n+\n+    println!(\"{a} {b} {} {} {c} {}\", c = \"c\");\n+    //~^ ERROR: invalid reference to positional arguments 1 and 2 (there is 1 argument)\n+\n+    let n = 1;\n+    println!(\"{a:.n$} {b:.*}\");\n+    //~^ ERROR: invalid reference to positional argument 0 (no arguments were given)\n+}"}, {"sha": "588541044fe136369d16006abb4fc805a979d822", "filename": "src/test/ui/fmt/format-args-capture-issue-93378.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-issue-93378.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-issue-93378.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-issue-93378.stderr?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -0,0 +1,22 @@\n+error: invalid reference to positional arguments 1 and 2 (there is 1 argument)\n+  --> $DIR/format-args-capture-issue-93378.rs:5:26\n+   |\n+LL |     println!(\"{a} {b} {} {} {c} {}\", c = \"c\");\n+   |                          ^^     ^^\n+   |\n+   = note: positional arguments are zero-based\n+\n+error: invalid reference to positional argument 0 (no arguments were given)\n+  --> $DIR/format-args-capture-issue-93378.rs:9:23\n+   |\n+LL |     println!(\"{a:.n$} {b:.*}\");\n+   |               ------- ^^^--^\n+   |               |          |\n+   |               |          this precision flag adds an extra required argument at position 0, which is why there are 3 arguments expected\n+   |               this parameter corresponds to the precision flag\n+   |\n+   = note: positional arguments are zero-based\n+   = note: for information about formatting flags, visit https://doc.rust-lang.org/std/fmt/index.html\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "d31d2a6c33657fff6b4975c399e33784cea5ccb2", "filename": "src/test/ui/fmt/format-args-capture.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -5,6 +5,7 @@ fn main() {\n     named_argument_takes_precedence_to_captured();\n     formatting_parameters_can_be_captured();\n     capture_raw_strings_and_idents();\n+    repeated_capture();\n \n     #[cfg(panic = \"unwind\")]\n     {\n@@ -80,3 +81,10 @@ fn formatting_parameters_can_be_captured() {\n     let s = format!(\"{x:-^width$.precision$}\");\n     assert_eq!(&s, \"--7.000--\");\n }\n+\n+fn repeated_capture() {\n+    let a = 1;\n+    let b = 2;\n+    let s = format!(\"{a} {b} {a}\");\n+    assert_eq!(&s, \"1 2 1\");\n+}"}, {"sha": "c834f8bd9c4f5b545c7e335b38f73c6670c21062", "filename": "src/test/ui/nll/issue-55825-const-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Fui%2Fnll%2Fissue-55825-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Fui%2Fnll%2Fissue-55825-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55825-const-fn.stderr?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -4,7 +4,7 @@ error[E0658]: trait objects in const fn are unstable\n LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = note: see issue #93706 <https://github.com/rust-lang/rust/issues/93706> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n error: aborting due to previous error"}, {"sha": "5403b8d6d2871ae65a8f548ff6e39e2e2b9a1659", "filename": "src/test/ui/suggestions/args-instead-of-tuple-errors.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.rs?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -10,6 +10,12 @@ fn main() {\n \n     let _: Option<(i8,)> = Some();\n     //~^ ERROR this enum variant takes 1 argument but 0 arguments were supplied\n+\n+    let _: Option<(i32,)> = Some(5_usize);\n+    //~^ ERROR mismatched types\n+\n+    let _: Option<(i32,)> = Some((5_usize));\n+    //~^ ERROR mismatched types\n }\n \n fn int_bool(_: (i32, bool)) {"}, {"sha": "ddcdfb1c3b34413be0a3bc9e6504cbb75db0897a", "filename": "src/test/ui/suggestions/args-instead-of-tuple-errors.stderr", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -15,7 +15,7 @@ LL |     int_bool(1, 2);\n    |     expected 1 argument\n    |\n note: function defined here\n-  --> $DIR/args-instead-of-tuple-errors.rs:15:4\n+  --> $DIR/args-instead-of-tuple-errors.rs:21:4\n    |\n LL | fn int_bool(_: (i32, bool)) {\n    |    ^^^^^^^^ --------------\n@@ -28,6 +28,25 @@ LL |     let _: Option<(i8,)> = Some();\n    |                            |\n    |                            expected 1 argument\n \n-error: aborting due to 3 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/args-instead-of-tuple-errors.rs:14:34\n+   |\n+LL |     let _: Option<(i32,)> = Some(5_usize);\n+   |                                  ^^^^^^^ expected tuple, found `usize`\n+   |\n+   = note: expected tuple `(i32,)`\n+               found type `usize`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/args-instead-of-tuple-errors.rs:17:34\n+   |\n+LL |     let _: Option<(i32,)> = Some((5_usize));\n+   |                                  ^^^^^^^^^ expected tuple, found `usize`\n+   |\n+   = note: expected tuple `(i32,)`\n+               found type `usize`\n+\n+error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0061`.\n+Some errors have detailed explanations: E0061, E0308.\n+For more information about an error, try `rustc --explain E0061`."}, {"sha": "66e53f9ce2c80bef49c642f16571fc521fb0f458", "filename": "src/test/ui/suggestions/args-instead-of-tuple.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.fixed?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -11,6 +11,12 @@ fn main() {\n     let _: Option<()> = Some(());\n     //~^ ERROR this enum variant takes 1 argument but 0 arguments were supplied\n \n+    let _: Option<(i32,)> = Some((3,));\n+    //~^ ERROR mismatched types\n+\n+    let _: Option<(i32,)> = Some((3,));\n+    //~^ ERROR mismatched types\n+\n     two_ints((1, 2)); //~ ERROR this function takes 1 argument\n \n     with_generic((3, 4)); //~ ERROR this function takes 1 argument"}, {"sha": "a15bff07ebfe6766e2a99ea097f7d23ea7397215", "filename": "src/test/ui/suggestions/args-instead-of-tuple.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.rs?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -11,6 +11,12 @@ fn main() {\n     let _: Option<()> = Some();\n     //~^ ERROR this enum variant takes 1 argument but 0 arguments were supplied\n \n+    let _: Option<(i32,)> = Some(3);\n+    //~^ ERROR mismatched types\n+\n+    let _: Option<(i32,)> = Some((3));\n+    //~^ ERROR mismatched types\n+\n     two_ints(1, 2); //~ ERROR this function takes 1 argument\n \n     with_generic(3, 4); //~ ERROR this function takes 1 argument"}, {"sha": "6a7602c9d0f45cc3742ad56b50a52b0b5719e1c1", "filename": "src/test/ui/suggestions/args-instead-of-tuple.stderr", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -31,14 +31,40 @@ help: expected the unit value `()`; create it with empty parentheses\n LL |     let _: Option<()> = Some(());\n    |                              ++\n \n+error[E0308]: mismatched types\n+  --> $DIR/args-instead-of-tuple.rs:14:34\n+   |\n+LL |     let _: Option<(i32,)> = Some(3);\n+   |                                  ^ expected tuple, found integer\n+   |\n+   = note: expected tuple `(i32,)`\n+               found type `{integer}`\n+help: use a trailing comma to create a tuple with one element\n+   |\n+LL |     let _: Option<(i32,)> = Some((3,));\n+   |                                  + ++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/args-instead-of-tuple.rs:17:34\n+   |\n+LL |     let _: Option<(i32,)> = Some((3));\n+   |                                  ^^^ expected tuple, found integer\n+   |\n+   = note: expected tuple `(i32,)`\n+               found type `{integer}`\n+help: use a trailing comma to create a tuple with one element\n+   |\n+LL |     let _: Option<(i32,)> = Some((3,));\n+   |                                    +\n+\n error[E0061]: this function takes 1 argument but 2 arguments were supplied\n-  --> $DIR/args-instead-of-tuple.rs:14:5\n+  --> $DIR/args-instead-of-tuple.rs:20:5\n    |\n LL |     two_ints(1, 2);\n    |     ^^^^^^^^ -  - supplied 2 arguments\n    |\n note: function defined here\n-  --> $DIR/args-instead-of-tuple.rs:19:4\n+  --> $DIR/args-instead-of-tuple.rs:25:4\n    |\n LL | fn two_ints(_: (i32, i32)) {\n    |    ^^^^^^^^ -------------\n@@ -48,13 +74,13 @@ LL |     two_ints((1, 2));\n    |              +    +\n \n error[E0061]: this function takes 1 argument but 2 arguments were supplied\n-  --> $DIR/args-instead-of-tuple.rs:16:5\n+  --> $DIR/args-instead-of-tuple.rs:22:5\n    |\n LL |     with_generic(3, 4);\n    |     ^^^^^^^^^^^^ -  - supplied 2 arguments\n    |\n note: function defined here\n-  --> $DIR/args-instead-of-tuple.rs:22:4\n+  --> $DIR/args-instead-of-tuple.rs:28:4\n    |\n LL | fn with_generic<T: Copy + Send>((a, b): (i32, T)) {\n    |    ^^^^^^^^^^^^                 ----------------\n@@ -64,13 +90,13 @@ LL |     with_generic((3, 4));\n    |                  +    +\n \n error[E0061]: this function takes 1 argument but 2 arguments were supplied\n-  --> $DIR/args-instead-of-tuple.rs:25:9\n+  --> $DIR/args-instead-of-tuple.rs:31:9\n    |\n LL |         with_generic(a, b);\n    |         ^^^^^^^^^^^^ -  - supplied 2 arguments\n    |\n note: function defined here\n-  --> $DIR/args-instead-of-tuple.rs:22:4\n+  --> $DIR/args-instead-of-tuple.rs:28:4\n    |\n LL | fn with_generic<T: Copy + Send>((a, b): (i32, T)) {\n    |    ^^^^^^^^^^^^                 ----------------\n@@ -79,6 +105,7 @@ help: use parentheses to construct a tuple\n LL |         with_generic((a, b));\n    |                      +    +\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 8 previous errors\n \n-For more information about this error, try `rustc --explain E0061`.\n+Some errors have detailed explanations: E0061, E0308.\n+For more information about an error, try `rustc --explain E0061`."}, {"sha": "0016f19284250eae33697601612bed322883c80c", "filename": "src/test/ui/suggestions/issue-86100-tuple-paren-comma.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86100-tuple-paren-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86100-tuple-paren-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-86100-tuple-paren-comma.stderr?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -11,7 +11,7 @@ LL |     let _x: (i32,) = (5);\n help: use a trailing comma to create a tuple with one element\n    |\n LL |     let _x: (i32,) = (5,);\n-   |                      ~~~~\n+   |                        +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-86100-tuple-paren-comma.rs:13:9\n@@ -24,7 +24,7 @@ LL |     foo((Some(3)));\n help: use a trailing comma to create a tuple with one element\n    |\n LL |     foo((Some(3),));\n-   |         ~~~~~~~~~~\n+   |                 +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-86100-tuple-paren-comma.rs:17:22\n@@ -37,7 +37,7 @@ LL |     let _s = S { _s: (\"abc\".to_string()) };\n help: use a trailing comma to create a tuple with one element\n    |\n LL |     let _s = S { _s: (\"abc\".to_string(),) };\n-   |                      ~~~~~~~~~~~~~~~~~~~~\n+   |                                        +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-86100-tuple-paren-comma.rs:23:22"}, {"sha": "29ce9f7c2e94fe3dd1d5f663cf9854e3c528e70c", "filename": "src/test/ui/test-attrs/test-allow-fail-attr.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c5e414843ebfe25674d8e18a5369d6249fdee741/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-allow-fail-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5e414843ebfe25674d8e18a5369d6249fdee741/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-allow-fail-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-allow-fail-attr.rs?ref=c5e414843ebfe25674d8e18a5369d6249fdee741", "patch": "@@ -1,17 +0,0 @@\n-// run-pass\n-// compile-flags: --test\n-#![feature(allow_fail)]\n-#![feature(cfg_panic)]\n-\n-#[test]\n-#[allow_fail]\n-fn test1() {\n-    #[cfg(not(panic = \"abort\"))]\n-    panic!();\n-}\n-\n-#[test]\n-#[allow_fail]\n-fn test2() {\n-    assert!(true);\n-}"}, {"sha": "da7a19139c65b3f28d019b33fbeef5ad883a7e0e", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f52c31840df7ec9c9350baff51a8964b20b5e1ba/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=f52c31840df7ec9c9350baff51a8964b20b5e1ba", "patch": "@@ -922,10 +922,11 @@ pub fn make_test_description<R: Read>(\n         name,\n         ignore,\n         should_panic,\n-        allow_fail: false,\n         compile_fail: false,\n         no_run: false,\n         test_type: test::TestType::Unknown,\n+        #[cfg(bootstrap)]\n+        allow_fail: false,\n     }\n }\n "}]}