{"sha": "39ffda014debd9d1d4126a8996d39af934fe8d94", "node_id": "C_kwDOAAsO6NoAKDM5ZmZkYTAxNGRlYmQ5ZDFkNDEyNmE4OTk2ZDM5YWY5MzRmZThkOTQ", "commit": {"author": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-06-20T02:14:52Z"}, "committer": {"name": "kyoto7250", "email": "50972773+kyoto7250@users.noreply.github.com", "date": "2022-06-20T02:14:52Z"}, "message": "check macro in HitEqInterExpr", "tree": {"sha": "30aa6dd103806502dd05d7bc096408bb5e090fff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30aa6dd103806502dd05d7bc096408bb5e090fff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39ffda014debd9d1d4126a8996d39af934fe8d94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39ffda014debd9d1d4126a8996d39af934fe8d94", "html_url": "https://github.com/rust-lang/rust/commit/39ffda014debd9d1d4126a8996d39af934fe8d94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39ffda014debd9d1d4126a8996d39af934fe8d94/comments", "author": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kyoto7250", "id": 50972773, "node_id": "MDQ6VXNlcjUwOTcyNzcz", "avatar_url": "https://avatars.githubusercontent.com/u/50972773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyoto7250", "html_url": "https://github.com/kyoto7250", "followers_url": "https://api.github.com/users/kyoto7250/followers", "following_url": "https://api.github.com/users/kyoto7250/following{/other_user}", "gists_url": "https://api.github.com/users/kyoto7250/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyoto7250/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyoto7250/subscriptions", "organizations_url": "https://api.github.com/users/kyoto7250/orgs", "repos_url": "https://api.github.com/users/kyoto7250/repos", "events_url": "https://api.github.com/users/kyoto7250/events{/privacy}", "received_events_url": "https://api.github.com/users/kyoto7250/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46d056e2eb7c5cab767c91383cf7ef1828809fd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/46d056e2eb7c5cab767c91383cf7ef1828809fd9", "html_url": "https://github.com/rust-lang/rust/commit/46d056e2eb7c5cab767c91383cf7ef1828809fd9"}], "stats": {"total": 71, "additions": 36, "deletions": 35}, "files": [{"sha": "46b615c04f3974d6469363c4d28a47a739407766", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 36, "deletions": 35, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/39ffda014debd9d1d4126a8996d39af934fe8d94/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39ffda014debd9d1d4126a8996d39af934fe8d94/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=39ffda014debd9d1d4126a8996d39af934fe8d94", "patch": "@@ -66,9 +66,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n     }\n \n     pub fn eq_block(&mut self, left: &Block<'_>, right: &Block<'_>) -> bool {\n-        !self.cannot_be_compared_block(left)\n-            && !self.cannot_be_compared_block(right)\n-            && self.inter_expr().eq_block(left, right)\n+        self.inter_expr().eq_block(left, right)\n     }\n \n     pub fn eq_expr(&mut self, left: &Expr<'_>, right: &Expr<'_>) -> bool {\n@@ -86,38 +84,6 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n     pub fn eq_path_segments(&mut self, left: &[PathSegment<'_>], right: &[PathSegment<'_>]) -> bool {\n         self.inter_expr().eq_path_segments(left, right)\n     }\n-\n-    fn cannot_be_compared_block(&mut self, block: &Block<'_>) -> bool {\n-        if block.stmts.last().map_or(false, |stmt| {\n-            matches!(\n-                stmt.kind,\n-                StmtKind::Semi(semi_expr) if self.should_ignore(semi_expr)\n-            )\n-        }) {\n-            return true;\n-        }\n-\n-        if let Some(block_expr) = block.expr\n-            && self.should_ignore(block_expr)\n-        {\n-            return true\n-        }\n-\n-        false\n-    }\n-\n-    fn should_ignore(&mut self, expr: &Expr<'_>) -> bool {\n-        if macro_backtrace(expr.span).last().map_or(false, |macro_call| {\n-            matches!(\n-                &self.cx.tcx.get_diagnostic_name(macro_call.def_id),\n-                Some(sym::todo_macro | sym::unimplemented_macro)\n-            )\n-        }) {\n-            return true;\n-        }\n-\n-        false\n-    }\n }\n \n pub struct HirEqInterExpr<'a, 'b, 'tcx> {\n@@ -156,6 +122,9 @@ impl HirEqInterExpr<'_, '_, '_> {\n \n     /// Checks whether two blocks are the same.\n     fn eq_block(&mut self, left: &Block<'_>, right: &Block<'_>) -> bool {\n+        if self.cannot_be_compared_block(left) || self.cannot_be_compared_block(right) {\n+            return false;\n+        }\n         match (left.stmts, left.expr, right.stmts, right.expr) {\n             ([], None, [], None) => {\n                 // For empty blocks, check to see if the tokens are equal. This will catch the case where a macro\n@@ -206,6 +175,38 @@ impl HirEqInterExpr<'_, '_, '_> {\n         }\n     }\n \n+    fn cannot_be_compared_block(&mut self, block: &Block<'_>) -> bool {\n+        if block.stmts.last().map_or(false, |stmt| {\n+            matches!(\n+                stmt.kind,\n+                StmtKind::Semi(semi_expr) if self.should_ignore(semi_expr)\n+            )\n+        }) {\n+            return true;\n+        }\n+\n+        if let Some(block_expr) = block.expr\n+            && self.should_ignore(block_expr)\n+        {\n+            return true\n+        }\n+\n+        false\n+    }\n+\n+    fn should_ignore(&mut self, expr: &Expr<'_>) -> bool {\n+        if macro_backtrace(expr.span).last().map_or(false, |macro_call| {\n+            matches!(\n+                &self.inner.cx.tcx.get_diagnostic_name(macro_call.def_id),\n+                Some(sym::todo_macro | sym::unimplemented_macro)\n+            )\n+        }) {\n+            return true;\n+        }\n+\n+        false\n+    }\n+\n     pub fn eq_array_length(&mut self, left: ArrayLen, right: ArrayLen) -> bool {\n         match (left, right) {\n             (ArrayLen::Infer(..), ArrayLen::Infer(..)) => true,"}]}