{"sha": "ed9a21eb0c1b18b1b108351f3154dfff432a4e3b", "node_id": "C_kwDOAAsO6NoAKGVkOWEyMWViMGMxYjE4YjFiMTA4MzUxZjMxNTRkZmZmNDMyYTRlM2I", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-03T16:37:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-03T16:37:44Z"}, "message": "Rollup merge of #105193 - tmiasko:naked-nocoverage, r=wesleywiser\n\nDisable coverage instrumentation for naked functions\n\nFixes #105170.", "tree": {"sha": "882d68ceb43fc414858cf4e03ee8baba5ec90cbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/882d68ceb43fc414858cf4e03ee8baba5ec90cbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed9a21eb0c1b18b1b108351f3154dfff432a4e3b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJji3tYCRBK7hj4Ov3rIwAALqIIAIhJ2Lqx7PwSDx4u2O7n4ibS\nLBivtZBbMCwVtEgoO+lVRBkjBEQIciWBq42+TDZuvcYT/abdtwfPBafMNUrgtX6x\n9q8wvg+1LY01Dds9HXMupAnfPFlw34IHo7vcOCr4eRDOLrprlptC/AWyFXoNrL1e\nKeAyPGWtUGpCL8cR1fTw1jnDIa2qhzk/4Y2HViwUOXcJirBSVlb1M0elC8WKvuWW\ndyJpO3JmAsYIYGHubtqK2PmlyRYgckPpqy+IuNwENc/t8johWKi67iofuN5Ou2O5\nNvWRnO9s4lRYITxZ5s4wzFf9rvvGAvz9NceKAs0KJyYgehvaw3gZwH7FFFwjWao=\n=nCkE\n-----END PGP SIGNATURE-----\n", "payload": "tree 882d68ceb43fc414858cf4e03ee8baba5ec90cbb\nparent a739fc81539e22591bc43b189c5d6e8c0b1d1a03\nparent b740cdcf43f6d686f52d3f85100a0ff5ff0c043d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670085464 +0100\ncommitter GitHub <noreply@github.com> 1670085464 +0100\n\nRollup merge of #105193 - tmiasko:naked-nocoverage, r=wesleywiser\n\nDisable coverage instrumentation for naked functions\n\nFixes #105170.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed9a21eb0c1b18b1b108351f3154dfff432a4e3b", "html_url": "https://github.com/rust-lang/rust/commit/ed9a21eb0c1b18b1b108351f3154dfff432a4e3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed9a21eb0c1b18b1b108351f3154dfff432a4e3b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a739fc81539e22591bc43b189c5d6e8c0b1d1a03", "url": "https://api.github.com/repos/rust-lang/rust/commits/a739fc81539e22591bc43b189c5d6e8c0b1d1a03", "html_url": "https://github.com/rust-lang/rust/commit/a739fc81539e22591bc43b189c5d6e8c0b1d1a03"}, {"sha": "b740cdcf43f6d686f52d3f85100a0ff5ff0c043d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b740cdcf43f6d686f52d3f85100a0ff5ff0c043d", "html_url": "https://github.com/rust-lang/rust/commit/b740cdcf43f6d686f52d3f85100a0ff5ff0c043d"}], "stats": {"total": 41, "additions": 30, "deletions": 11}, "files": [{"sha": "f3bdacf6085552109871140a10cacd1e2757d24b", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ed9a21eb0c1b18b1b108351f3154dfff432a4e3b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9a21eb0c1b18b1b108351f3154dfff432a4e3b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=ed9a21eb0c1b18b1b108351f3154dfff432a4e3b", "patch": "@@ -258,13 +258,12 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n         OptimizeAttr::Speed => {}\n     }\n \n-    let inline = if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::NAKED) {\n-        InlineAttr::Never\n-    } else if codegen_fn_attrs.inline == InlineAttr::None && instance.def.requires_inline(cx.tcx) {\n-        InlineAttr::Hint\n-    } else {\n-        codegen_fn_attrs.inline\n-    };\n+    let inline =\n+        if codegen_fn_attrs.inline == InlineAttr::None && instance.def.requires_inline(cx.tcx) {\n+            InlineAttr::Hint\n+        } else {\n+            codegen_fn_attrs.inline\n+        };\n     to_add.extend(inline_attr(cx, inline));\n \n     // The `uwtable` attribute according to LLVM is:"}, {"sha": "b7084303aafb1d0b85c1c0f2c0423b30c6e519f5", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed9a21eb0c1b18b1b108351f3154dfff432a4e3b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9a21eb0c1b18b1b108351f3154dfff432a4e3b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=ed9a21eb0c1b18b1b108351f3154dfff432a4e3b", "patch": "@@ -2073,6 +2073,11 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n         }\n     }\n \n+    if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::NAKED) {\n+        codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_COVERAGE;\n+        codegen_fn_attrs.inline = InlineAttr::Never;\n+    }\n+\n     // Weak lang items have the same semantics as \"std internal\" symbols in the\n     // sense that they're preserved through all our LTO passes and only\n     // strippable by the linker."}, {"sha": "bf670c5c26a7753394e631bca6d73d77ccaf664d", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed9a21eb0c1b18b1b108351f3154dfff432a4e3b/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9a21eb0c1b18b1b108351f3154dfff432a4e3b/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=ed9a21eb0c1b18b1b108351f3154dfff432a4e3b", "patch": "@@ -363,10 +363,6 @@ impl<'tcx> Inliner<'tcx> {\n             return Err(\"C variadic\");\n         }\n \n-        if callee_attrs.flags.contains(CodegenFnAttrFlags::NAKED) {\n-            return Err(\"naked\");\n-        }\n-\n         if callee_attrs.flags.contains(CodegenFnAttrFlags::COLD) {\n             return Err(\"cold\");\n         }"}, {"sha": "91a6260bf2aa2f1794b3f676a1b231ab91b69848", "filename": "src/test/codegen/naked-nocoverage.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ed9a21eb0c1b18b1b108351f3154dfff432a4e3b/src%2Ftest%2Fcodegen%2Fnaked-nocoverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed9a21eb0c1b18b1b108351f3154dfff432a4e3b/src%2Ftest%2Fcodegen%2Fnaked-nocoverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnaked-nocoverage.rs?ref=ed9a21eb0c1b18b1b108351f3154dfff432a4e3b", "patch": "@@ -0,0 +1,19 @@\n+// Checks that naked functions are not instrumented by -Cinstrument-coverage.\n+// Regression test for issue #105170.\n+//\n+// needs-asm-support\n+// needs-profiler-support\n+// compile-flags: -Cinstrument-coverage\n+#![crate_type = \"lib\"]\n+#![feature(naked_functions)]\n+use std::arch::asm;\n+\n+#[naked]\n+#[no_mangle]\n+pub unsafe extern \"C\" fn f() {\n+    // CHECK:       define void @f()\n+    // CHECK-NEXT:  start:\n+    // CHECK-NEXT:    call void asm\n+    // CHECK-NEXT:    unreachable\n+    asm!(\"\", options(noreturn));\n+}"}]}