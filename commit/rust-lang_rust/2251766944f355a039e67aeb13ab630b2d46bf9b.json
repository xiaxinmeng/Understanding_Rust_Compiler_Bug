{"sha": "2251766944f355a039e67aeb13ab630b2d46bf9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNTE3NjY5NDRmMzU1YTAzOWU2N2FlYjEzYWI2MzBiMmQ0NmJmOWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-04T04:33:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-04T04:33:28Z"}, "message": "Auto merge of #77517 - JohnTitor:rollup-msbd49e, r=JohnTitor\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #75143 (Use `tracing` spans to trace the entire MIR interp stack)\n - #75699 (Uplift drop-bounds lint from clippy)\n - #76768 (Test and reject out-of-bounds shuffle vectors)\n - #77190 (updated p! macro to accept literals)\n - #77388 (Add some regression tests)\n - #77419 (Create E0777 error code for invalid argument in derive)\n - #77447 (BTreeMap: document DrainFilterInner better)\n - #77468 (Fix test name)\n - #77469 (Improve rustdoc error for failed intra-doc link resolution)\n - #77473 (Make --all-targets in x.py check opt-in)\n - #77508 (Fix capitalization in blog post name)\n\nFailed merges:\n\nr? `@ghost`", "tree": {"sha": "255a2666dc4671287f122208c30df66693e17855", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/255a2666dc4671287f122208c30df66693e17855"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2251766944f355a039e67aeb13ab630b2d46bf9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2251766944f355a039e67aeb13ab630b2d46bf9b", "html_url": "https://github.com/rust-lang/rust/commit/2251766944f355a039e67aeb13ab630b2d46bf9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2251766944f355a039e67aeb13ab630b2d46bf9b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cf3dc19a1e59ffdebe3d8ca106e5b7f2d6d212e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cf3dc19a1e59ffdebe3d8ca106e5b7f2d6d212e", "html_url": "https://github.com/rust-lang/rust/commit/4cf3dc19a1e59ffdebe3d8ca106e5b7f2d6d212e"}, {"sha": "f5db16639713a9a3e6730a59c5a03007557df057", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5db16639713a9a3e6730a59c5a03007557df057", "html_url": "https://github.com/rust-lang/rust/commit/f5db16639713a9a3e6730a59c5a03007557df057"}], "stats": {"total": 1197, "additions": 866, "deletions": 331}, "files": [{"sha": "fb7d2a4ac2fc60216707f83995b94cfa68dbd0f6", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -1726,15 +1726,6 @@ dependencies = [\n  \"cfg-if\",\n ]\n \n-[[package]]\n-name = \"log_settings\"\n-version = \"0.1.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"19af41f0565d7c19b2058153ad0b42d4d5ce89ec4dbf06ed6741114a8b63e7cd\"\n-dependencies = [\n- \"lazy_static\",\n-]\n-\n [[package]]\n name = \"lsp-codec\"\n version = \"0.1.2\"\n@@ -3523,6 +3514,7 @@ dependencies = [\n  \"rustc_target\",\n  \"tracing\",\n  \"tracing-subscriber\",\n+ \"tracing-tree\",\n  \"winapi 0.3.9\",\n ]\n \n@@ -3810,7 +3802,6 @@ version = \"0.0.0\"\n dependencies = [\n  \"either\",\n  \"itertools 0.9.0\",\n- \"log_settings\",\n  \"polonius-engine\",\n  \"regex\",\n  \"rustc_apfloat\",\n@@ -5105,9 +5096,9 @@ dependencies = [\n \n [[package]]\n name = \"tracing-tree\"\n-version = \"0.1.5\"\n+version = \"0.1.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e1a3dc4774db3a6b2d66a4f8d8de670e874ec3ed55615860c994927419b32c5f\"\n+checksum = \"43aac8afb493b08e1e1904956f7407c1e671b9c83b26a17e1bd83d6a3520e350\"\n dependencies = [\n  \"ansi_term 0.12.1\",\n  \"atty\","}, {"sha": "ce11a74b71f53d0f3a4f86da8e690966a434c542", "filename": "RELEASES.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -90,7 +90,7 @@ Compatibility Notes\n \n Internal Only\n --------\n-- [Improved default settings for bootstrapping in `x.py`.][73964] You can read details about this change in the [\"Changes To `x.py` Defaults\"](https://blog.rust-lang.org/inside-rust/2020/08/30/changes-to-x-py-defaults.html) post on the Inside Rust blog.\n+- [Improved default settings for bootstrapping in `x.py`.][73964] You can read details about this change in the [\"Changes to `x.py` defaults\"](https://blog.rust-lang.org/inside-rust/2020/08/30/changes-to-x-py-defaults.html) post on the Inside Rust blog.\n \n [1.47.0-cfg]: https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard\n [75048]: https://github.com/rust-lang/rust/pull/75048/"}, {"sha": "f610e88b7fce5fe7cee95c9179fc6ba151bdbe8b", "filename": "compiler/rustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/compiler%2Frustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/compiler%2Frustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2FCargo.toml?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -11,6 +11,7 @@ crate-type = [\"dylib\"]\n libc = \"0.2\"\n tracing = { version = \"0.1.18\" }\n tracing-subscriber = { version = \"0.2.10\", default-features = false, features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"] }\n+tracing-tree = \"0.1.6\"\n rustc_middle = { path = \"../rustc_middle\" }\n rustc_ast_pretty = { path = \"../rustc_ast_pretty\" }\n rustc_target = { path = \"../rustc_target\" }"}, {"sha": "3f50c68e3ebf54ff3b93d0fafcef306c3db2301c", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -1251,11 +1251,21 @@ pub fn init_env_logger(env: &str) {\n         Ok(s) if s.is_empty() => return,\n         Ok(_) => {}\n     }\n-    let builder = tracing_subscriber::FmtSubscriber::builder();\n-\n-    let builder = builder.with_env_filter(tracing_subscriber::EnvFilter::from_env(env));\n-\n-    builder.init()\n+    let filter = tracing_subscriber::EnvFilter::from_env(env);\n+    let layer = tracing_tree::HierarchicalLayer::default()\n+        .with_indent_lines(true)\n+        .with_ansi(true)\n+        .with_targets(true)\n+        .with_thread_ids(true)\n+        .with_thread_names(true)\n+        .with_wraparound(10)\n+        .with_verbose_exit(true)\n+        .with_verbose_entry(true)\n+        .with_indent_amount(2);\n+\n+    use tracing_subscriber::layer::SubscriberExt;\n+    let subscriber = tracing_subscriber::Registry::default().with(filter).with(layer);\n+    tracing::subscriber::set_global_default(subscriber).unwrap();\n }\n \n pub fn main() -> ! {"}, {"sha": "981b5bb8ba72f43599ca439fcfc39e9ca330baa8", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -459,6 +459,7 @@ E0773: include_str!(\"./error_codes/E0773.md\"),\n E0774: include_str!(\"./error_codes/E0774.md\"),\n E0775: include_str!(\"./error_codes/E0775.md\"),\n E0776: include_str!(\"./error_codes/E0776.md\"),\n+E0777: include_str!(\"./error_codes/E0777.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "8c5c6e28b65c6750a4eef3a4f9d443b0da723467", "filename": "compiler/rustc_error_codes/src/error_codes/E0777.md", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0777.md", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0777.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0777.md?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -0,0 +1,19 @@\n+A literal value was used inside `#[derive]`.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0777\n+#[derive(\"Clone\")] // error!\n+struct Foo;\n+```\n+\n+Only paths to traits are allowed as argument inside `#[derive]`. You can find\n+more information about the `#[derive]` attribute in the [Rust Book].\n+\n+\n+```\n+#[derive(Clone)] // ok!\n+struct Foo;\n+```\n+\n+[Rust Book]: https://doc.rust-lang.org/book/appendix-03-derivable-traits.html"}, {"sha": "c6287693dc9e62ae0013f56fadb65a715eb4a756", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -18,7 +18,7 @@ use rustc_ast_pretty::pprust;\n use rustc_attr::{self as attr, is_builtin_attr, HasAttrs};\n use rustc_data_structures::map_in_place::MapInPlace;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n-use rustc_errors::{Applicability, PResult};\n+use rustc_errors::{struct_span_err, Applicability, PResult};\n use rustc_feature::Features;\n use rustc_parse::parser::Parser;\n use rustc_parse::validate_attr;\n@@ -542,7 +542,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n     fn error_derive_forbidden_on_non_adt(&self, derives: &[Path], item: &Annotatable) {\n         let attr = self.cx.sess.find_by_name(item.attrs(), sym::derive);\n         let span = attr.map_or(item.span(), |attr| attr.span);\n-        let mut err = rustc_errors::struct_span_err!(\n+        let mut err = struct_span_err!(\n             self.cx.sess,\n             span,\n             E0774,"}, {"sha": "4c95f19b96dc69113bc9e65e3d5c3eb349e4f337", "filename": "compiler/rustc_expand/src/proc_macro.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -5,7 +5,8 @@ use rustc_ast::token;\n use rustc_ast::tokenstream::{TokenStream, TokenTree};\n use rustc_ast::{self as ast, *};\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{Applicability, ErrorReported};\n+use rustc_errors::{struct_span_err, Applicability, ErrorReported};\n+use rustc_lexer::is_ident;\n use rustc_parse::nt_to_tokenstream;\n use rustc_span::symbol::sym;\n use rustc_span::{Span, DUMMY_SP};\n@@ -182,9 +183,22 @@ crate fn collect_derives(cx: &mut ExtCtxt<'_>, attrs: &mut Vec<ast::Attribute>)\n             .filter_map(|nmi| match nmi {\n                 NestedMetaItem::Literal(lit) => {\n                     error_reported_filter_map = true;\n-                    cx.struct_span_err(lit.span, \"expected path to a trait, found literal\")\n-                        .help(\"for example, write `#[derive(Debug)]` for `Debug`\")\n-                        .emit();\n+                    let mut err = struct_span_err!(\n+                        cx.sess,\n+                        lit.span,\n+                        E0777,\n+                        \"expected path to a trait, found literal\",\n+                    );\n+                    let token = lit.token.to_string();\n+                    if token.starts_with('\"')\n+                        && token.len() > 2\n+                        && is_ident(&token[1..token.len() - 1])\n+                    {\n+                        err.help(&format!(\"try using `#[derive({})]`\", &token[1..token.len() - 1]));\n+                    } else {\n+                        err.help(\"for example, write `#[derive(Debug)]` for `Debug`\");\n+                    }\n+                    err.emit();\n                     None\n                 }\n                 NestedMetaItem::MetaItem(mi) => Some(mi),"}, {"sha": "49e80f9d8a531741b5d8e1c19cd219a66ee4a080", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -53,6 +53,7 @@ mod non_ascii_idents;\n mod nonstandard_style;\n mod passes;\n mod redundant_semicolon;\n+mod traits;\n mod types;\n mod unused;\n \n@@ -75,6 +76,7 @@ use internal::*;\n use non_ascii_idents::*;\n use nonstandard_style::*;\n use redundant_semicolon::*;\n+use traits::*;\n use types::*;\n use unused::*;\n \n@@ -157,6 +159,7 @@ macro_rules! late_lint_passes {\n                 MissingDebugImplementations: MissingDebugImplementations::default(),\n                 ArrayIntoIter: ArrayIntoIter,\n                 ClashingExternDeclarations: ClashingExternDeclarations::new(),\n+                DropTraitConstraints: DropTraitConstraints,\n             ]\n         );\n     };"}, {"sha": "d4f79036e5a180f92d67d1529b8709041fd73061", "filename": "compiler/rustc_lint/src/traits.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftraits.rs?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -0,0 +1,79 @@\n+use crate::LateContext;\n+use crate::LateLintPass;\n+use crate::LintContext;\n+use rustc_hir as hir;\n+use rustc_span::symbol::sym;\n+\n+declare_lint! {\n+    /// The `drop_bounds` lint checks for generics with `std::ops::Drop` as\n+    /// bounds.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// fn foo<T: Drop>() {}\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// `Drop` bounds do not really accomplish anything. A type may have\n+    /// compiler-generated drop glue without implementing the `Drop` trait\n+    /// itself. The `Drop` trait also only has one method, `Drop::drop`, and\n+    /// that function is by fiat not callable in user code. So there is really\n+    /// no use case for using `Drop` in trait bounds.\n+    ///\n+    /// The most likely use case of a drop bound is to distinguish between\n+    /// types that have destructors and types that don't. Combined with\n+    /// specialization, a naive coder would write an implementation that\n+    /// assumed a type could be trivially dropped, then write a specialization\n+    /// for `T: Drop` that actually calls the destructor. Except that doing so\n+    /// is not correct; String, for example, doesn't actually implement Drop,\n+    /// but because String contains a Vec, assuming it can be trivially dropped\n+    /// will leak memory.\n+    pub DROP_BOUNDS,\n+    Warn,\n+    \"bounds of the form `T: Drop` are useless\"\n+}\n+\n+declare_lint_pass!(\n+    /// Lint for bounds of the form `T: Drop`, which usually\n+    /// indicate an attempt to emulate `std::mem::needs_drop`.\n+    DropTraitConstraints => [DROP_BOUNDS]\n+);\n+\n+impl<'tcx> LateLintPass<'tcx> for DropTraitConstraints {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'tcx>) {\n+        use rustc_middle::ty::PredicateAtom::*;\n+\n+        let def_id = cx.tcx.hir().local_def_id(item.hir_id);\n+        let predicates = cx.tcx.explicit_predicates_of(def_id);\n+        for &(predicate, span) in predicates.predicates {\n+            let trait_predicate = match predicate.skip_binders() {\n+                Trait(trait_predicate, _constness) => trait_predicate,\n+                _ => continue,\n+            };\n+            let def_id = trait_predicate.trait_ref.def_id;\n+            if cx.tcx.lang_items().drop_trait() == Some(def_id) {\n+                // Explicitly allow `impl Drop`, a drop-guards-as-Voldemort-type pattern.\n+                if trait_predicate.trait_ref.self_ty().is_impl_trait() {\n+                    continue;\n+                }\n+                cx.struct_span_lint(DROP_BOUNDS, span, |lint| {\n+                    let needs_drop = match cx.tcx.get_diagnostic_item(sym::needs_drop) {\n+                        Some(needs_drop) => needs_drop,\n+                        None => return,\n+                    };\n+                    let msg = format!(\n+                        \"bounds on `{}` are useless, consider instead \\\n+                         using `{}` to detect if a type has a destructor\",\n+                        predicate,\n+                        cx.tcx.def_path_str(needs_drop)\n+                    );\n+                    lint.build(&msg).emit()\n+                });\n+            }\n+        }\n+    }\n+}"}, {"sha": "238bce94cf50529bdd5ae2f38a144d6749c2bfbc", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 89, "deletions": 96, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -28,6 +28,9 @@ use std::ops::{Deref, DerefMut};\n use super::*;\n \n macro_rules! p {\n+    (@$lit:literal) => {\n+        write!(scoped_cx!(), $lit)?\n+    };\n     (@write($($data:expr),+)) => {\n         write!(scoped_cx!(), $($data),+)?\n     };\n@@ -37,8 +40,8 @@ macro_rules! p {\n     (@$method:ident($($arg:expr),*)) => {\n         scoped_cx!() = scoped_cx!().$method($($arg),*)?\n     };\n-    ($($kind:ident $data:tt),+) => {{\n-        $(p!(@$kind $data);)+\n+    ($($elem:tt $(($($args:tt)*))?),+) => {{\n+        $(p!(@ $elem $(($($args)*))?);)+\n     }};\n }\n macro_rules! define_scoped_cx {\n@@ -478,7 +481,7 @@ pub trait PrettyPrinter<'tcx>:\n \n             p!(print(self_ty));\n             if let Some(trait_ref) = trait_ref {\n-                p!(write(\" as \"), print(trait_ref.print_only_trait_path()));\n+                p!(\" as \", print(trait_ref.print_only_trait_path()));\n             }\n             Ok(cx)\n         })\n@@ -495,9 +498,9 @@ pub trait PrettyPrinter<'tcx>:\n         self.generic_delimiters(|mut cx| {\n             define_scoped_cx!(cx);\n \n-            p!(write(\"impl \"));\n+            p!(\"impl \");\n             if let Some(trait_ref) = trait_ref {\n-                p!(print(trait_ref.print_only_trait_path()), write(\" for \"));\n+                p!(print(trait_ref.print_only_trait_path()), \" for \");\n             }\n             p!(print(self_ty));\n \n@@ -509,8 +512,8 @@ pub trait PrettyPrinter<'tcx>:\n         define_scoped_cx!(self);\n \n         match *ty.kind() {\n-            ty::Bool => p!(write(\"bool\")),\n-            ty::Char => p!(write(\"char\")),\n+            ty::Bool => p!(\"bool\"),\n+            ty::Char => p!(\"char\"),\n             ty::Int(t) => p!(write(\"{}\", t.name_str())),\n             ty::Uint(t) => p!(write(\"{}\", t.name_str())),\n             ty::Float(t) => p!(write(\"{}\", t.name_str())),\n@@ -525,23 +528,23 @@ pub trait PrettyPrinter<'tcx>:\n                 p!(print(tm.ty))\n             }\n             ty::Ref(r, ty, mutbl) => {\n-                p!(write(\"&\"));\n+                p!(\"&\");\n                 if self.region_should_not_be_omitted(r) {\n-                    p!(print(r), write(\" \"));\n+                    p!(print(r), \" \");\n                 }\n                 p!(print(ty::TypeAndMut { ty, mutbl }))\n             }\n-            ty::Never => p!(write(\"!\")),\n+            ty::Never => p!(\"!\"),\n             ty::Tuple(ref tys) => {\n-                p!(write(\"(\"), comma_sep(tys.iter()));\n+                p!(\"(\", comma_sep(tys.iter()));\n                 if tys.len() == 1 {\n-                    p!(write(\",\"));\n+                    p!(\",\");\n                 }\n-                p!(write(\")\"))\n+                p!(\")\")\n             }\n             ty::FnDef(def_id, substs) => {\n                 let sig = self.tcx().fn_sig(def_id).subst(self.tcx(), substs);\n-                p!(print(sig), write(\" {{\"), print_value_path(def_id, substs), write(\"}}\"));\n+                p!(print(sig), \" {{\", print_value_path(def_id, substs), \"}}\");\n             }\n             ty::FnPtr(ref bare_fn) => p!(print(bare_fn)),\n             ty::Infer(infer_ty) => {\n@@ -555,7 +558,7 @@ pub trait PrettyPrinter<'tcx>:\n                     p!(write(\"{}\", infer_ty))\n                 }\n             }\n-            ty::Error(_) => p!(write(\"[type error]\")),\n+            ty::Error(_) => p!(\"[type error]\"),\n             ty::Param(ref param_ty) => p!(write(\"{}\", param_ty)),\n             ty::Bound(debruijn, bound_ty) => match bound_ty.kind {\n                 ty::BoundTyKind::Anon => self.pretty_print_bound_var(debruijn, bound_ty.var)?,\n@@ -567,11 +570,11 @@ pub trait PrettyPrinter<'tcx>:\n             ty::Dynamic(data, r) => {\n                 let print_r = self.region_should_not_be_omitted(r);\n                 if print_r {\n-                    p!(write(\"(\"));\n+                    p!(\"(\");\n                 }\n-                p!(write(\"dyn \"), print(data));\n+                p!(\"dyn \", print(data));\n                 if print_r {\n-                    p!(write(\" + \"), print(r), write(\")\"));\n+                    p!(\" + \", print(r), \")\");\n                 }\n             }\n             ty::Foreign(def_id) => {\n@@ -597,7 +600,7 @@ pub trait PrettyPrinter<'tcx>:\n                         p!(write(\"{}\", name));\n                         // FIXME(eddyb) print this with `print_def_path`.\n                         if !substs.is_empty() {\n-                            p!(write(\"::\"));\n+                            p!(\"::\");\n                             p!(generic_delimiters(|cx| cx.comma_sep(substs.iter())));\n                         }\n                         return Ok(self);\n@@ -608,7 +611,7 @@ pub trait PrettyPrinter<'tcx>:\n \n                     let mut first = true;\n                     let mut is_sized = false;\n-                    p!(write(\"impl\"));\n+                    p!(\"impl\");\n                     for predicate in bounds.predicates {\n                         // Note: We can't use `to_opt_poly_trait_ref` here as `predicate`\n                         // may contain unbound variables. We therefore do this manually.\n@@ -634,21 +637,21 @@ pub trait PrettyPrinter<'tcx>:\n                     if !is_sized {\n                         p!(write(\"{}?Sized\", if first { \" \" } else { \"+\" }));\n                     } else if first {\n-                        p!(write(\" Sized\"));\n+                        p!(\" Sized\");\n                     }\n                     Ok(self)\n                 })?);\n             }\n-            ty::Str => p!(write(\"str\")),\n+            ty::Str => p!(\"str\"),\n             ty::Generator(did, substs, movability) => {\n                 p!(write(\"[\"));\n                 match movability {\n                     hir::Movability::Movable => {}\n-                    hir::Movability::Static => p!(write(\"static \")),\n+                    hir::Movability::Static => p!(\"static \"),\n                 }\n \n                 if !self.tcx().sess.verbose() {\n-                    p!(write(\"generator\"));\n+                    p!(\"generator\");\n                     // FIXME(eddyb) should use `def_span`.\n                     if let Some(did) = did.as_local() {\n                         let hir_id = self.tcx().hir().local_def_id_to_hir_id(did);\n@@ -661,23 +664,23 @@ pub trait PrettyPrinter<'tcx>:\n                     p!(print_def_path(did, substs));\n                     if substs.as_generator().is_valid() {\n                         // Search for the first inference variable\n-                        p!(write(\" upvar_tys=(\"));\n+                        p!(\" upvar_tys=(\");\n                         let mut uninferred_ty =\n                             substs.as_generator().upvar_tys().filter(|ty| ty.is_ty_infer());\n                         if uninferred_ty.next().is_some() {\n                             p!(write(\"unavailable\"));\n                         } else {\n                             self = self.comma_sep(substs.as_generator().upvar_tys())?;\n                         }\n-                        p!(write(\")\"));\n+                        p!(\")\");\n                     }\n                 }\n \n                 if substs.as_generator().is_valid() {\n-                    p!(write(\" \"), print(substs.as_generator().witness()));\n+                    p!(\" \", print(substs.as_generator().witness()));\n                 }\n \n-                p!(write(\"]\"));\n+                p!(\"]\")\n             }\n             ty::GeneratorWitness(types) => {\n                 p!(in_binder(&types));\n@@ -690,7 +693,7 @@ pub trait PrettyPrinter<'tcx>:\n                     if let Some(did) = did.as_local() {\n                         let hir_id = self.tcx().hir().local_def_id_to_hir_id(did);\n                         if self.tcx().sess.opts.debugging_opts.span_free_formats {\n-                            p!(write(\"@\"), print_def_path(did.to_def_id(), substs));\n+                            p!(\"@\", print_def_path(did.to_def_id(), substs));\n                         } else {\n                             let span = self.tcx().hir().span(hir_id);\n                             p!(write(\"@{}\", self.tcx().sess.source_map().span_to_string(span)));\n@@ -707,40 +710,40 @@ pub trait PrettyPrinter<'tcx>:\n                         if uninferred_ty.next().is_some() {\n                             // If the upvar substs contain an inference variable we haven't\n                             // finished capture analysis.\n-                            p!(write(\" closure_substs=(unavailable)\"));\n+                            p!(\" closure_substs=(unavailable)\");\n                         } else {\n-                            p!(write(\" closure_kind_ty=\"), print(substs.as_closure().kind_ty()));\n+                            p!(\" closure_kind_ty=\", print(substs.as_closure().kind_ty()));\n                             p!(\n-                                write(\" closure_sig_as_fn_ptr_ty=\"),\n+                                \" closure_sig_as_fn_ptr_ty=\",\n                                 print(substs.as_closure().sig_as_fn_ptr_ty())\n                             );\n-                            p!(write(\" upvar_tys=(\"));\n+                            p!(\" upvar_tys=(\");\n                             self = self.comma_sep(substs.as_closure().upvar_tys())?;\n-                            p!(write(\")\"));\n+                            p!(\")\");\n                         }\n                     }\n                 }\n-                p!(write(\"]\"));\n+                p!(\"]\");\n             }\n             ty::Array(ty, sz) => {\n-                p!(write(\"[\"), print(ty), write(\"; \"));\n+                p!(\"[\", print(ty), \"; \");\n                 if self.tcx().sess.verbose() {\n                     p!(write(\"{:?}\", sz));\n                 } else if let ty::ConstKind::Unevaluated(..) = sz.val {\n                     // Do not try to evaluate unevaluated constants. If we are const evaluating an\n                     // array length anon const, rustc will (with debug assertions) print the\n                     // constant's path. Which will end up here again.\n-                    p!(write(\"_\"));\n+                    p!(\"_\");\n                 } else if let Some(n) = sz.val.try_to_bits(self.tcx().data_layout.pointer_size) {\n                     p!(write(\"{}\", n));\n                 } else if let ty::ConstKind::Param(param) = sz.val {\n                     p!(write(\"{}\", param));\n                 } else {\n-                    p!(write(\"_\"));\n+                    p!(\"_\");\n                 }\n-                p!(write(\"]\"))\n+                p!(\"]\")\n             }\n-            ty::Slice(ty) => p!(write(\"[\"), print(ty), write(\"]\")),\n+            ty::Slice(ty) => p!(\"[\", print(ty), \"]\"),\n         }\n \n         Ok(self)\n@@ -847,7 +850,7 @@ pub trait PrettyPrinter<'tcx>:\n \n         for (_, def_id) in auto_traits {\n             if !first {\n-                p!(write(\" + \"));\n+                p!(\" + \");\n             }\n             first = false;\n \n@@ -865,16 +868,16 @@ pub trait PrettyPrinter<'tcx>:\n     ) -> Result<Self, Self::Error> {\n         define_scoped_cx!(self);\n \n-        p!(write(\"(\"), comma_sep(inputs.iter().copied()));\n+        p!(\"(\", comma_sep(inputs.iter().copied()));\n         if c_variadic {\n             if !inputs.is_empty() {\n-                p!(write(\", \"));\n+                p!(\", \");\n             }\n-            p!(write(\"...\"));\n+            p!(\"...\");\n         }\n-        p!(write(\")\"));\n+        p!(\")\");\n         if !output.is_unit() {\n-            p!(write(\" -> \"), print(output));\n+            p!(\" -> \", print(output));\n         }\n \n         Ok(self)\n@@ -945,7 +948,7 @@ pub trait PrettyPrinter<'tcx>:\n                 self.pretty_print_bound_var(debruijn, bound_var)?\n             }\n             ty::ConstKind::Placeholder(placeholder) => p!(write(\"Placeholder({:?})\", placeholder)),\n-            ty::ConstKind::Error(_) => p!(write(\"[const error]\")),\n+            ty::ConstKind::Error(_) => p!(\"[const error]\"),\n         };\n         Ok(self)\n     }\n@@ -987,17 +990,17 @@ pub trait PrettyPrinter<'tcx>:\n                     {\n                         p!(pretty_print_byte_str(byte_str))\n                     } else {\n-                        p!(write(\"<too short allocation>\"))\n+                        p!(\"<too short allocation>\")\n                     }\n                 }\n                 // FIXME: for statics and functions, we could in principle print more detail.\n                 Some(GlobalAlloc::Static(def_id)) => p!(write(\"<static({:?})>\", def_id)),\n-                Some(GlobalAlloc::Function(_)) => p!(write(\"<function>\")),\n-                None => p!(write(\"<dangling pointer>\")),\n+                Some(GlobalAlloc::Function(_)) => p!(\"<function>\"),\n+                None => p!(\"<dangling pointer>\"),\n             },\n             // Bool\n-            (Scalar::Raw { data: 0, .. }, ty::Bool) => p!(write(\"false\")),\n-            (Scalar::Raw { data: 1, .. }, ty::Bool) => p!(write(\"true\")),\n+            (Scalar::Raw { data: 0, .. }, ty::Bool) => p!(\"false\"),\n+            (Scalar::Raw { data: 1, .. }, ty::Bool) => p!(\"true\"),\n             // Float\n             (Scalar::Raw { data, .. }, ty::Float(ast::FloatTy::F32)) => {\n                 p!(write(\"{}f32\", Single::from_bits(data)))\n@@ -1093,13 +1096,13 @@ pub trait PrettyPrinter<'tcx>:\n \n     fn pretty_print_byte_str(mut self, byte_str: &'tcx [u8]) -> Result<Self::Const, Self::Error> {\n         define_scoped_cx!(self);\n-        p!(write(\"b\\\"\"));\n+        p!(\"b\\\"\");\n         for &c in byte_str {\n             for e in std::ascii::escape_default(c) {\n                 self.write_char(e as char)?;\n             }\n         }\n-        p!(write(\"\\\"\"));\n+        p!(\"\\\"\");\n         Ok(self)\n     }\n \n@@ -1112,7 +1115,7 @@ pub trait PrettyPrinter<'tcx>:\n         define_scoped_cx!(self);\n \n         if self.tcx().sess.verbose() {\n-            p!(write(\"ConstValue({:?}: \", ct), print(ty), write(\")\"));\n+            p!(write(\"ConstValue({:?}: \", ct), print(ty), \")\");\n             return Ok(self);\n         }\n \n@@ -1149,7 +1152,7 @@ pub trait PrettyPrinter<'tcx>:\n                 let ptr = Pointer::new(AllocId(0), offset);\n \n                 let byte_str = alloc.get_bytes(&self.tcx(), ptr, n).unwrap();\n-                p!(write(\"*\"));\n+                p!(\"*\");\n                 p!(pretty_print_byte_str(byte_str));\n                 Ok(self)\n             }\n@@ -1173,14 +1176,14 @@ pub trait PrettyPrinter<'tcx>:\n \n                 match *ty.kind() {\n                     ty::Array(..) => {\n-                        p!(write(\"[\"), comma_sep(fields), write(\"]\"));\n+                        p!(\"[\", comma_sep(fields), \"]\");\n                     }\n                     ty::Tuple(..) => {\n-                        p!(write(\"(\"), comma_sep(fields));\n+                        p!(\"(\", comma_sep(fields));\n                         if contents.fields.len() == 1 {\n-                            p!(write(\",\"));\n+                            p!(\",\");\n                         }\n-                        p!(write(\")\"));\n+                        p!(\")\");\n                     }\n                     ty::Adt(def, substs) if def.variants.is_empty() => {\n                         p!(print_value_path(def.did, substs));\n@@ -1194,19 +1197,19 @@ pub trait PrettyPrinter<'tcx>:\n                         match variant_def.ctor_kind {\n                             CtorKind::Const => {}\n                             CtorKind::Fn => {\n-                                p!(write(\"(\"), comma_sep(fields), write(\")\"));\n+                                p!(\"(\", comma_sep(fields), \")\");\n                             }\n                             CtorKind::Fictive => {\n-                                p!(write(\" {{ \"));\n+                                p!(\" {{ \");\n                                 let mut first = true;\n                                 for (field_def, field) in variant_def.fields.iter().zip(fields) {\n                                     if !first {\n-                                        p!(write(\", \"));\n+                                        p!(\", \");\n                                     }\n                                     p!(write(\"{}: \", field_def.ident), print(field));\n                                     first = false;\n                                 }\n-                                p!(write(\" }}\"));\n+                                p!(\" }}\");\n                             }\n                         }\n                     }\n@@ -1224,7 +1227,7 @@ pub trait PrettyPrinter<'tcx>:\n                 // fallback\n                 p!(write(\"{:?}\", ct));\n                 if print_ty {\n-                    p!(write(\": \"), print(ty));\n+                    p!(\": \", print(ty));\n                 }\n                 Ok(self)\n             }\n@@ -1637,7 +1640,7 @@ impl<F: fmt::Write> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx, F> {\n             if this.print_alloc_ids {\n                 p!(write(\"{:?}\", p));\n             } else {\n-                p!(write(\"&_\"));\n+                p!(\"&_\");\n             }\n             Ok(this)\n         };\n@@ -1703,11 +1706,11 @@ impl<F: fmt::Write> FmtPrinter<'_, '_, F> {\n             ty::ReVar(_) => {}\n             ty::ReErased => {}\n             ty::ReStatic => {\n-                p!(write(\"'static\"));\n+                p!(\"'static\");\n                 return Ok(self);\n             }\n             ty::ReEmpty(ty::UniverseIndex::ROOT) => {\n-                p!(write(\"'<empty>\"));\n+                p!(\"'<empty>\");\n                 return Ok(self);\n             }\n             ty::ReEmpty(ui) => {\n@@ -1716,7 +1719,7 @@ impl<F: fmt::Write> FmtPrinter<'_, '_, F> {\n             }\n         }\n \n-        p!(write(\"'_\"));\n+        p!(\"'_\");\n \n         Ok(self)\n     }\n@@ -1847,7 +1850,7 @@ where\n     type Error = P::Error;\n     fn print(&self, mut cx: P) -> Result<Self::Output, Self::Error> {\n         define_scoped_cx!(cx);\n-        p!(print(self.0), write(\": \"), print(self.1));\n+        p!(print(self.0), \": \", print(self.1));\n         Ok(cx)\n     }\n }\n@@ -1945,7 +1948,7 @@ define_print_and_forward_display! {\n     (self, cx):\n \n     &'tcx ty::List<Ty<'tcx>> {\n-        p!(write(\"{{\"), comma_sep(self.iter()), write(\"}}\"))\n+        p!(\"{{\", comma_sep(self.iter()), \"}}\")\n     }\n \n     ty::TypeAndMut<'tcx> {\n@@ -1981,7 +1984,7 @@ define_print_and_forward_display! {\n             p!(write(\"extern {} \", self.abi));\n         }\n \n-        p!(write(\"fn\"), pretty_fn_sig(self.inputs(), self.c_variadic, self.output()));\n+        p!(\"fn\", pretty_fn_sig(self.inputs(), self.c_variadic, self.output()));\n     }\n \n     ty::InferTy {\n@@ -1990,7 +1993,7 @@ define_print_and_forward_display! {\n             return Ok(cx);\n         }\n         match *self {\n-            ty::TyVar(_) => p!(write(\"_\")),\n+            ty::TyVar(_) => p!(\"_\"),\n             ty::IntVar(_) => p!(write(\"{}\", \"{integer}\")),\n             ty::FloatVar(_) => p!(write(\"{}\", \"{float}\")),\n             ty::FreshTy(v) => p!(write(\"FreshTy({})\", v)),\n@@ -2016,16 +2019,16 @@ define_print_and_forward_display! {\n     }\n \n     ty::SubtypePredicate<'tcx> {\n-        p!(print(self.a), write(\" <: \"), print(self.b))\n+        p!(print(self.a), \" <: \", print(self.b))\n     }\n \n     ty::TraitPredicate<'tcx> {\n-        p!(print(self.trait_ref.self_ty()), write(\": \"),\n+        p!(print(self.trait_ref.self_ty()), \": \",\n            print(self.trait_ref.print_only_trait_path()))\n     }\n \n     ty::ProjectionPredicate<'tcx> {\n-        p!(print(self.projection_ty), write(\" == \"), print(self.ty))\n+        p!(print(self.projection_ty), \" == \", print(self.ty))\n     }\n \n     ty::ProjectionTy<'tcx> {\n@@ -2034,9 +2037,9 @@ define_print_and_forward_display! {\n \n     ty::ClosureKind {\n         match *self {\n-            ty::ClosureKind::Fn => p!(write(\"Fn\")),\n-            ty::ClosureKind::FnMut => p!(write(\"FnMut\")),\n-            ty::ClosureKind::FnOnce => p!(write(\"FnOnce\")),\n+            ty::ClosureKind::Fn => p!(\"Fn\"),\n+            ty::ClosureKind::FnMut => p!(\"FnMut\"),\n+            ty::ClosureKind::FnOnce => p!(\"FnOnce\"),\n         }\n     }\n \n@@ -2051,41 +2054,31 @@ define_print_and_forward_display! {\n         match *self {\n             ty::PredicateAtom::Trait(ref data, constness) => {\n                 if let hir::Constness::Const = constness {\n-                    p!(write(\"const \"));\n+                    p!(\"const \");\n                 }\n                 p!(print(data))\n             }\n             ty::PredicateAtom::Subtype(predicate) => p!(print(predicate)),\n             ty::PredicateAtom::RegionOutlives(predicate) => p!(print(predicate)),\n             ty::PredicateAtom::TypeOutlives(predicate) => p!(print(predicate)),\n             ty::PredicateAtom::Projection(predicate) => p!(print(predicate)),\n-            ty::PredicateAtom::WellFormed(arg) => p!(print(arg), write(\" well-formed\")),\n+            ty::PredicateAtom::WellFormed(arg) => p!(print(arg), \" well-formed\"),\n             ty::PredicateAtom::ObjectSafe(trait_def_id) => {\n-                p!(write(\"the trait `\"),\n-                print_def_path(trait_def_id, &[]),\n-                write(\"` is object-safe\"))\n+                p!(\"the trait `\", print_def_path(trait_def_id, &[]), \"` is object-safe\")\n             }\n             ty::PredicateAtom::ClosureKind(closure_def_id, _closure_substs, kind) => {\n-                p!(write(\"the closure `\"),\n+                p!(\"the closure `\",\n                 print_value_path(closure_def_id, &[]),\n                 write(\"` implements the trait `{}`\", kind))\n             }\n             ty::PredicateAtom::ConstEvaluatable(def, substs) => {\n-                p!(write(\"the constant `\"),\n-                print_value_path(def.did, substs),\n-                write(\"` can be evaluated\"))\n+                p!(\"the constant `\", print_value_path(def.did, substs), \"` can be evaluated\")\n             }\n             ty::PredicateAtom::ConstEquate(c1, c2) => {\n-                p!(write(\"the constant `\"),\n-                print(c1),\n-                write(\"` equals `\"),\n-                print(c2),\n-                write(\"`\"))\n+                p!(\"the constant `\", print(c1), \"` equals `\", print(c2), \"`\")\n             }\n             ty::PredicateAtom::TypeWellFormedFromEnv(ty) => {\n-                p!(write(\"the type `\"),\n-                print(ty),\n-                write(\"` is found in the environment\"))\n+                p!(\"the type `\", print(ty), \"` is found in the environment\")\n             }\n         }\n     }"}, {"sha": "487668cfa1109476ccc6449d32718a20e8e49ce1", "filename": "compiler/rustc_mir/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/compiler%2Frustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/compiler%2Frustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2FCargo.toml?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -12,7 +12,6 @@ either = \"1.5.0\"\n rustc_graphviz = { path = \"../rustc_graphviz\" }\n itertools = \"0.9\"\n tracing = \"0.1\"\n-log_settings = \"0.1.1\"\n polonius-engine = \"0.12.0\"\n regex = \"1\"\n rustc_middle = { path = \"../rustc_middle\" }"}, {"sha": "93da6e3d38a93c71df5a1491dda6cf2eae02b893", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 56, "deletions": 22, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -48,8 +48,41 @@ pub struct InterpCx<'mir, 'tcx, M: Machine<'mir, 'tcx>> {\n         FxHashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), Pointer<M::PointerTag>>,\n }\n \n+// The Phantomdata exists to prevent this type from being `Send`. If it were sent across a thread\n+// boundary and dropped in the other thread, it would exit the span in the other thread.\n+struct SpanGuard(tracing::Span, std::marker::PhantomData<*const u8>);\n+\n+impl SpanGuard {\n+    /// By default a `SpanGuard` does nothing.\n+    fn new() -> Self {\n+        Self(tracing::Span::none(), std::marker::PhantomData)\n+    }\n+\n+    /// If a span is entered, we exit the previous span (if any, normally none) and enter the\n+    /// new span. This is mainly so we don't have to use `Option` for the `tracing_span` field of\n+    /// `Frame` by creating a dummy span to being with and then entering it once the frame has\n+    /// been pushed.\n+    fn enter(&mut self, span: tracing::Span) {\n+        // This executes the destructor on the previous instance of `SpanGuard`, ensuring that\n+        // we never enter or exit more spans than vice versa. Unless you `mem::leak`, then we\n+        // can't protect the tracing stack, but that'll just lead to weird logging, no actual\n+        // problems.\n+        *self = Self(span, std::marker::PhantomData);\n+        self.0.with_subscriber(|(id, dispatch)| {\n+            dispatch.enter(id);\n+        });\n+    }\n+}\n+\n+impl Drop for SpanGuard {\n+    fn drop(&mut self) {\n+        self.0.with_subscriber(|(id, dispatch)| {\n+            dispatch.exit(id);\n+        });\n+    }\n+}\n+\n /// A stack frame.\n-#[derive(Clone)]\n pub struct Frame<'mir, 'tcx, Tag = (), Extra = ()> {\n     ////////////////////////////////////////////////////////////////////////////////\n     // Function and callsite information\n@@ -80,6 +113,11 @@ pub struct Frame<'mir, 'tcx, Tag = (), Extra = ()> {\n     /// can either directly contain `Scalar` or refer to some part of an `Allocation`.\n     pub locals: IndexVec<mir::Local, LocalState<'tcx, Tag>>,\n \n+    /// The span of the `tracing` crate is stored here.\n+    /// When the guard is dropped, the span is exited. This gives us\n+    /// a full stack trace on all tracing statements.\n+    tracing_span: SpanGuard,\n+\n     ////////////////////////////////////////////////////////////////////////////////\n     // Current position within the function\n     ////////////////////////////////////////////////////////////////////////////////\n@@ -184,6 +222,7 @@ impl<'mir, 'tcx, Tag> Frame<'mir, 'tcx, Tag> {\n             locals: self.locals,\n             loc: self.loc,\n             extra,\n+            tracing_span: self.tracing_span,\n         }\n     }\n }\n@@ -637,11 +676,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         return_place: Option<PlaceTy<'tcx, M::PointerTag>>,\n         return_to_block: StackPopCleanup,\n     ) -> InterpResult<'tcx> {\n-        if !self.stack().is_empty() {\n-            info!(\"PAUSING({}) {}\", self.frame_idx(), self.frame().instance);\n-        }\n-        ::log_settings::settings().indentation += 1;\n-\n         // first push a stack frame so we have access to the local substs\n         let pre_frame = Frame {\n             body,\n@@ -652,6 +686,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             // all methods actually know about the frame\n             locals: IndexVec::new(),\n             instance,\n+            tracing_span: SpanGuard::new(),\n             extra: (),\n         };\n         let frame = M::init_frame_extra(self, pre_frame)?;\n@@ -696,7 +731,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         self.frame_mut().locals = locals;\n         M::after_stack_push(self)?;\n         self.frame_mut().loc = Ok(mir::Location::START);\n-        info!(\"ENTERING({}) {}\", self.frame_idx(), self.frame().instance);\n+\n+        let span = info_span!(\"frame\", \"{}\", instance);\n+        self.frame_mut().tracing_span.enter(span);\n \n         Ok(())\n     }\n@@ -747,10 +784,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// cause us to continue unwinding.\n     pub(super) fn pop_stack_frame(&mut self, unwinding: bool) -> InterpResult<'tcx> {\n         info!(\n-            \"LEAVING({}) {} (unwinding = {})\",\n-            self.frame_idx(),\n-            self.frame().instance,\n-            unwinding\n+            \"popping stack frame ({})\",\n+            if unwinding { \"during unwinding\" } else { \"returning from function\" }\n         );\n \n         // Sanity check `unwinding`.\n@@ -766,7 +801,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             throw_ub_format!(\"unwinding past the topmost frame of the stack\");\n         }\n \n-        ::log_settings::settings().indentation -= 1;\n         let frame =\n             self.stack_mut().pop().expect(\"tried to pop a stack frame, but there were none\");\n \n@@ -823,15 +857,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n         }\n \n-        if !self.stack().is_empty() {\n-            info!(\n-                \"CONTINUING({}) {} (unwinding = {})\",\n-                self.frame_idx(),\n-                self.frame().instance,\n-                unwinding\n-            );\n-        }\n-\n         Ok(())\n     }\n \n@@ -995,7 +1020,16 @@ where\n {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'ctx>, hasher: &mut StableHasher) {\n         // Exhaustive match on fields to make sure we forget no field.\n-        let Frame { body, instance, return_to_block, return_place, locals, loc, extra } = self;\n+        let Frame {\n+            body,\n+            instance,\n+            return_to_block,\n+            return_place,\n+            locals,\n+            loc,\n+            extra,\n+            tracing_span: _,\n+        } = self;\n         body.hash_stable(hcx, hasher);\n         instance.hash_stable(hcx, hasher);\n         return_to_block.hash_stable(hcx, hasher);"}, {"sha": "04f317401f15da46d0e70f1ebe088a454ff9a8d2", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -1701,10 +1701,14 @@ where\n /// Most of the implementation of DrainFilter, independent of the type\n /// of the predicate, thus also serving for BTreeSet::DrainFilter.\n pub(super) struct DrainFilterInner<'a, K: 'a, V: 'a> {\n+    /// Reference to the length field in the borrowed map, updated live.\n     length: &'a mut usize,\n-    // dormant_root is wrapped in an Option to be able to `take` it.\n+    /// Burried reference to the root field in the borrowed map.\n+    /// Wrapped in `Option` to allow drop handler to `take` it.\n     dormant_root: Option<DormantMutRef<'a, node::Root<K, V>>>,\n-    // cur_leaf_edge is wrapped in an Option because maps without root lack a leaf edge.\n+    /// Contains a leaf edge preceding the next element to be returned, or the last leaf edge.\n+    /// Empty if the map has no root, if iteration went beyond the last leaf edge,\n+    /// or if a panic occurred in the predicate.\n     cur_leaf_edge: Option<Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>>,\n }\n "}, {"sha": "a2c7da6e6958e2c9dacd0d9453ebee368157cf85", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -568,6 +568,7 @@ pub unsafe fn align_of_val_raw<T: ?Sized>(val: *const T) -> usize {\n #[inline]\n #[stable(feature = \"needs_drop\", since = \"1.21.0\")]\n #[rustc_const_stable(feature = \"const_needs_drop\", since = \"1.36.0\")]\n+#[rustc_diagnostic_item = \"needs_drop\"]\n pub const fn needs_drop<T>() -> bool {\n     intrinsics::needs_drop::<T>()\n }"}, {"sha": "d8c704f451bfc00341be4a67a31d1fbac1f975bf", "filename": "src/bootstrap/CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Fbootstrap%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Fbootstrap%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCHANGELOG.md?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -6,7 +6,7 @@ The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n \n ## [Non-breaking changes since the last major version]\n \n-None.\n+- `x.py check` needs opt-in to check tests (--all-targets) [#77473](https://github.com/rust-lang/rust/pull/77473)\n \n ## [Version 2] - 2020-09-25\n "}, {"sha": "6856cd338cfad83f772ade8c81add34be3f8c81a", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -532,7 +532,7 @@ impl<'a> Builder<'a> {\n     pub fn new(build: &Build) -> Builder<'_> {\n         let (kind, paths) = match build.config.cmd {\n             Subcommand::Build { ref paths } => (Kind::Build, &paths[..]),\n-            Subcommand::Check { ref paths } => (Kind::Check, &paths[..]),\n+            Subcommand::Check { ref paths, all_targets: _ } => (Kind::Check, &paths[..]),\n             Subcommand::Clippy { ref paths } => (Kind::Clippy, &paths[..]),\n             Subcommand::Fix { ref paths } => (Kind::Fix, &paths[..]),\n             Subcommand::Doc { ref paths, .. } => (Kind::Doc, &paths[..]),"}, {"sha": "371631154f72da87ef23cf934c7501d5c597d011", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 39, "deletions": 30, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -1,9 +1,12 @@\n //! Implementation of compiling the compiler and standard library, in \"check\"-based modes.\n \n-use crate::builder::{Builder, Kind, RunConfig, ShouldRun, Step};\n use crate::compile::{add_to_sysroot, run_cargo, rustc_cargo, std_cargo};\n use crate::config::TargetSelection;\n use crate::tool::{prepare_tool_cargo, SourceType};\n+use crate::{\n+    builder::{Builder, Kind, RunConfig, ShouldRun, Step},\n+    Subcommand,\n+};\n use crate::{Compiler, Mode};\n use std::path::PathBuf;\n \n@@ -74,35 +77,37 @@ impl Step for Std {\n         //\n         // Currently only the \"libtest\" tree of crates does this.\n \n-        let mut cargo = builder.cargo(\n-            compiler,\n-            Mode::Std,\n-            SourceType::InTree,\n-            target,\n-            cargo_subcommand(builder.kind),\n-        );\n-        std_cargo(builder, target, compiler.stage, &mut cargo);\n-        cargo.arg(\"--all-targets\");\n+        if let Subcommand::Check { all_targets: true, .. } = builder.config.cmd {\n+            let mut cargo = builder.cargo(\n+                compiler,\n+                Mode::Std,\n+                SourceType::InTree,\n+                target,\n+                cargo_subcommand(builder.kind),\n+            );\n+            std_cargo(builder, target, compiler.stage, &mut cargo);\n+            cargo.arg(\"--all-targets\");\n+\n+            // Explicitly pass -p for all dependencies krates -- this will force cargo\n+            // to also check the tests/benches/examples for these crates, rather\n+            // than just the leaf crate.\n+            for krate in builder.in_tree_crates(\"test\") {\n+                cargo.arg(\"-p\").arg(krate.name);\n+            }\n \n-        // Explicitly pass -p for all dependencies krates -- this will force cargo\n-        // to also check the tests/benches/examples for these crates, rather\n-        // than just the leaf crate.\n-        for krate in builder.in_tree_crates(\"test\") {\n-            cargo.arg(\"-p\").arg(krate.name);\n+            builder.info(&format!(\n+                \"Checking std test/bench/example targets ({} -> {})\",\n+                &compiler.host, target\n+            ));\n+            run_cargo(\n+                builder,\n+                cargo,\n+                args(builder.kind),\n+                &libstd_test_stamp(builder, compiler, target),\n+                vec![],\n+                true,\n+            );\n         }\n-\n-        builder.info(&format!(\n-            \"Checking std test/bench/example targets ({} -> {})\",\n-            &compiler.host, target\n-        ));\n-        run_cargo(\n-            builder,\n-            cargo,\n-            args(builder.kind),\n-            &libstd_test_stamp(builder, compiler, target),\n-            vec![],\n-            true,\n-        );\n     }\n }\n \n@@ -143,7 +148,9 @@ impl Step for Rustc {\n             cargo_subcommand(builder.kind),\n         );\n         rustc_cargo(builder, &mut cargo, target);\n-        cargo.arg(\"--all-targets\");\n+        if let Subcommand::Check { all_targets: true, .. } = builder.config.cmd {\n+            cargo.arg(\"--all-targets\");\n+        }\n \n         // Explicitly pass -p for all compiler krates -- this will force cargo\n         // to also check the tests/benches/examples for these crates, rather\n@@ -205,7 +212,9 @@ macro_rules! tool_check_step {\n                     &[],\n                 );\n \n-                cargo.arg(\"--all-targets\");\n+                if let Subcommand::Check { all_targets: true, .. } = builder.config.cmd {\n+                    cargo.arg(\"--all-targets\");\n+                }\n \n                 builder.info(&format!(\n                     \"Checking {} artifacts ({} -> {})\","}, {"sha": "c1a9d4fcd23fef732c03ed1c11ffd8e108f02e23", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -47,6 +47,9 @@ pub enum Subcommand {\n         paths: Vec<PathBuf>,\n     },\n     Check {\n+        // Whether to run checking over all targets (e.g., unit / integration\n+        // tests).\n+        all_targets: bool,\n         paths: Vec<PathBuf>,\n     },\n     Clippy {\n@@ -250,6 +253,9 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n                         `/<build_base>/rustfix_missing_coverage.txt`\",\n                 );\n             }\n+            \"check\" => {\n+                opts.optflag(\"\", \"all-targets\", \"Check all targets\");\n+            }\n             \"bench\" => {\n                 opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\");\n             }\n@@ -484,7 +490,9 @@ Arguments:\n \n         let cmd = match subcommand.as_str() {\n             \"build\" | \"b\" => Subcommand::Build { paths },\n-            \"check\" | \"c\" => Subcommand::Check { paths },\n+            \"check\" | \"c\" => {\n+                Subcommand::Check { paths, all_targets: matches.opt_present(\"all-targets\") }\n+            }\n             \"clippy\" => Subcommand::Clippy { paths },\n             \"fix\" => Subcommand::Fix { paths },\n             \"test\" | \"t\" => Subcommand::Test {"}, {"sha": "b2aa5844e476671dd329b274dc555fcaa6a38195", "filename": "src/ci/docker/host-x86_64/mingw-check/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -24,7 +24,7 @@ COPY host-x86_64/mingw-check/validate-toolstate.sh /scripts/\n \n ENV RUN_CHECK_WITH_PARALLEL_QUERIES 1\n ENV SCRIPT python3 ../x.py --stage 2 test src/tools/expand-yaml-anchors && \\\n-           python3 ../x.py check --target=i686-pc-windows-gnu --host=i686-pc-windows-gnu && \\\n+           python3 ../x.py check --target=i686-pc-windows-gnu --host=i686-pc-windows-gnu --all-targets && \\\n            python3 ../x.py build --stage 0 src/tools/build-manifest && \\\n            python3 ../x.py test --stage 0 src/tools/compiletest && \\\n            python3 ../x.py test --stage 2 src/tools/tidy && \\"}, {"sha": "f234dc5c03b313fa4cddf99981598b6adc13b1f8", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -1576,22 +1576,27 @@ fn resolution_failure(\n                     };\n                     // See if this was a module: `[path]` or `[std::io::nope]`\n                     if let Some(module) = last_found_module {\n-                        let module_name = collector.cx.tcx.item_name(module);\n-                        let note = format!(\n-                            \"the module `{}` contains no item named `{}`\",\n-                            module_name, unresolved\n-                        );\n+                        let note = if partial_res.is_some() {\n+                            // Part of the link resolved; e.g. `std::io::nonexistent`\n+                            let module_name = collector.cx.tcx.item_name(module);\n+                            format!(\"no item named `{}` in module `{}`\", unresolved, module_name)\n+                        } else {\n+                            // None of the link resolved; e.g. `Notimported`\n+                            format!(\"no item named `{}` in scope\", unresolved)\n+                        };\n                         if let Some(span) = sp {\n                             diag.span_label(span, &note);\n                         } else {\n                             diag.note(&note);\n                         }\n+\n                         // If the link has `::` in it, assume it was meant to be an intra-doc link.\n                         // Otherwise, the `[]` might be unrelated.\n                         // FIXME: don't show this for autolinks (`<>`), `()` style links, or reference links\n                         if !path_str.contains(\"::\") {\n                             diag.help(r#\"to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\"#);\n                         }\n+\n                         continue;\n                     }\n "}, {"sha": "9ec9dd4bc9ab73d4c153bfef6eb8abcb3171da8d", "filename": "src/test/rustdoc-ui/deny-intra-link-resolution-failure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Frustdoc-ui%2Fdeny-intra-link-resolution-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Frustdoc-ui%2Fdeny-intra-link-resolution-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdeny-intra-link-resolution-failure.stderr?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -2,7 +2,7 @@ error: unresolved link to `v2`\n   --> $DIR/deny-intra-link-resolution-failure.rs:3:6\n    |\n LL | /// [v2]\n-   |      ^^ the module `deny_intra_link_resolution_failure` contains no item named `v2`\n+   |      ^^ no item named `v2` in scope\n    |\n note: the lint level is defined here\n   --> $DIR/deny-intra-link-resolution-failure.rs:1:9"}, {"sha": "ef928ae02f3e3c3754a1d27f294c305e4e934371", "filename": "src/test/rustdoc-ui/intra-link-errors.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.rs?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -6,23 +6,23 @@\n \n /// [path::to::nonexistent::module]\n //~^ ERROR unresolved link\n-//~| NOTE `intra_link_errors` contains no item named `path`\n+//~| NOTE no item named `path` in scope\n \n /// [path::to::nonexistent::macro!]\n //~^ ERROR unresolved link\n-//~| NOTE `intra_link_errors` contains no item named `path`\n+//~| NOTE no item named `path` in scope\n \n /// [type@path::to::nonexistent::type]\n //~^ ERROR unresolved link\n-//~| NOTE `intra_link_errors` contains no item named `path`\n+//~| NOTE no item named `path` in scope\n \n /// [std::io::not::here]\n //~^ ERROR unresolved link\n-//~| NOTE `io` contains no item named `not`\n+//~| NOTE no item named `not` in module `io`\n \n /// [type@std::io::not::here]\n //~^ ERROR unresolved link\n-//~| NOTE `io` contains no item named `not`\n+//~| NOTE no item named `not` in module `io`\n \n /// [std::io::Error::x]\n //~^ ERROR unresolved link"}, {"sha": "31e7fc48afde5cec42a12f9c4ef457cfde679ae2", "filename": "src/test/rustdoc-ui/intra-link-errors.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.stderr?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -2,7 +2,7 @@ error: unresolved link to `path::to::nonexistent::module`\n   --> $DIR/intra-link-errors.rs:7:6\n    |\n LL | /// [path::to::nonexistent::module]\n-   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the module `intra_link_errors` contains no item named `path`\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no item named `path` in scope\n    |\n note: the lint level is defined here\n   --> $DIR/intra-link-errors.rs:1:9\n@@ -14,25 +14,25 @@ error: unresolved link to `path::to::nonexistent::macro`\n   --> $DIR/intra-link-errors.rs:11:6\n    |\n LL | /// [path::to::nonexistent::macro!]\n-   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the module `intra_link_errors` contains no item named `path`\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no item named `path` in scope\n \n error: unresolved link to `path::to::nonexistent::type`\n   --> $DIR/intra-link-errors.rs:15:6\n    |\n LL | /// [type@path::to::nonexistent::type]\n-   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the module `intra_link_errors` contains no item named `path`\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no item named `path` in scope\n \n error: unresolved link to `std::io::not::here`\n   --> $DIR/intra-link-errors.rs:19:6\n    |\n LL | /// [std::io::not::here]\n-   |      ^^^^^^^^^^^^^^^^^^ the module `io` contains no item named `not`\n+   |      ^^^^^^^^^^^^^^^^^^ no item named `not` in module `io`\n \n error: unresolved link to `std::io::not::here`\n   --> $DIR/intra-link-errors.rs:23:6\n    |\n LL | /// [type@std::io::not::here]\n-   |      ^^^^^^^^^^^^^^^^^^^^^^^ the module `io` contains no item named `not`\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^ no item named `not` in module `io`\n \n error: unresolved link to `std::io::Error::x`\n   --> $DIR/intra-link-errors.rs:27:6"}, {"sha": "d8afa9e7efd59aaa3d80c39e2b520e6ba17ab5d1", "filename": "src/test/rustdoc-ui/intra-link-span-ice-55723.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-link-span-ice-55723.stderr?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -2,7 +2,7 @@ error: unresolved link to `i`\n   --> $DIR/intra-link-span-ice-55723.rs:9:10\n    |\n LL | /// \uff08arr[i]\uff09\n-   |           ^ the module `intra_link_span_ice_55723` contains no item named `i`\n+   |           ^ no item named `i` in scope\n    |\n note: the lint level is defined here\n   --> $DIR/intra-link-span-ice-55723.rs:1:9"}, {"sha": "67c48378fd2f4a314e021c0a93cb955e511918e4", "filename": "src/test/rustdoc-ui/intra-links-warning-crlf.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning-crlf.stderr?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -2,7 +2,7 @@ warning: unresolved link to `error`\n   --> $DIR/intra-links-warning-crlf.rs:7:6\n    |\n LL | /// [error]\n-   |      ^^^^^ the module `intra_links_warning_crlf` contains no item named `error`\n+   |      ^^^^^ no item named `error` in scope\n    |\n    = note: `#[warn(broken_intra_doc_links)]` on by default\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n@@ -11,23 +11,23 @@ warning: unresolved link to `error1`\n   --> $DIR/intra-links-warning-crlf.rs:12:11\n    |\n LL | /// docs [error1]\n-   |           ^^^^^^ the module `intra_links_warning_crlf` contains no item named `error1`\n+   |           ^^^^^^ no item named `error1` in scope\n    |\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n warning: unresolved link to `error2`\n   --> $DIR/intra-links-warning-crlf.rs:15:11\n    |\n LL | /// docs [error2]\n-   |           ^^^^^^ the module `intra_links_warning_crlf` contains no item named `error2`\n+   |           ^^^^^^ no item named `error2` in scope\n    |\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n warning: unresolved link to `error`\n   --> $DIR/intra-links-warning-crlf.rs:23:20\n    |\n LL |  * It also has an [error].\n-   |                    ^^^^^ the module `intra_links_warning_crlf` contains no item named `error`\n+   |                    ^^^^^ no item named `error` in scope\n    |\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n "}, {"sha": "4cdb8bbdde782ba90503a070b5736c0969bb31e7", "filename": "src/test/rustdoc-ui/intra-links-warning.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -10,53 +10,53 @@ warning: unresolved link to `Bar::foo`\n   --> $DIR/intra-links-warning.rs:3:35\n    |\n LL |        //! Test with [Foo::baz], [Bar::foo], ...\n-   |                                   ^^^^^^^^ the module `intra_links_warning` contains no item named `Bar`\n+   |                                   ^^^^^^^^ no item named `Bar` in scope\n \n warning: unresolved link to `Uniooon::X`\n   --> $DIR/intra-links-warning.rs:6:13\n    |\n LL |      //! , [Uniooon::X] and [Qux::Z].\n-   |             ^^^^^^^^^^ the module `intra_links_warning` contains no item named `Uniooon`\n+   |             ^^^^^^^^^^ no item named `Uniooon` in scope\n \n warning: unresolved link to `Qux::Z`\n   --> $DIR/intra-links-warning.rs:6:30\n    |\n LL |      //! , [Uniooon::X] and [Qux::Z].\n-   |                              ^^^^^^ the module `intra_links_warning` contains no item named `Qux`\n+   |                              ^^^^^^ no item named `Qux` in scope\n \n warning: unresolved link to `Uniooon::X`\n   --> $DIR/intra-links-warning.rs:10:14\n    |\n LL |       //! , [Uniooon::X] and [Qux::Z].\n-   |              ^^^^^^^^^^ the module `intra_links_warning` contains no item named `Uniooon`\n+   |              ^^^^^^^^^^ no item named `Uniooon` in scope\n \n warning: unresolved link to `Qux::Z`\n   --> $DIR/intra-links-warning.rs:10:31\n    |\n LL |       //! , [Uniooon::X] and [Qux::Z].\n-   |                               ^^^^^^ the module `intra_links_warning` contains no item named `Qux`\n+   |                               ^^^^^^ no item named `Qux` in scope\n \n warning: unresolved link to `Qux:Y`\n   --> $DIR/intra-links-warning.rs:14:13\n    |\n LL |        /// [Qux:Y]\n-   |             ^^^^^ the module `intra_links_warning` contains no item named `Qux:Y`\n+   |             ^^^^^ no item named `Qux:Y` in scope\n    |\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n warning: unresolved link to `error`\n   --> $DIR/intra-links-warning.rs:58:30\n    |\n LL |  * time to introduce a link [error]*/\n-   |                              ^^^^^ the module `intra_links_warning` contains no item named `error`\n+   |                              ^^^^^ no item named `error` in scope\n    |\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n warning: unresolved link to `error`\n   --> $DIR/intra-links-warning.rs:64:30\n    |\n LL |  * time to introduce a link [error]\n-   |                              ^^^^^ the module `intra_links_warning` contains no item named `error`\n+   |                              ^^^^^ no item named `error` in scope\n    |\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n@@ -70,7 +70,7 @@ LL | #[doc = \"single line [error]\"]\n            \n            single line [error]\n                         ^^^^^\n-   = note: the module `intra_links_warning` contains no item named `error`\n+   = note: no item named `error` in scope\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n warning: unresolved link to `error`\n@@ -83,7 +83,7 @@ LL | #[doc = \"single line with \\\"escaping\\\" [error]\"]\n            \n            single line with \"escaping\" [error]\n                                         ^^^^^\n-   = note: the module `intra_links_warning` contains no item named `error`\n+   = note: no item named `error` in scope\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n warning: unresolved link to `error`\n@@ -98,46 +98,46 @@ LL | | /// [error]\n            \n            [error]\n             ^^^^^\n-   = note: the module `intra_links_warning` contains no item named `error`\n+   = note: no item named `error` in scope\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n warning: unresolved link to `error1`\n   --> $DIR/intra-links-warning.rs:80:11\n    |\n LL | /// docs [error1]\n-   |           ^^^^^^ the module `intra_links_warning` contains no item named `error1`\n+   |           ^^^^^^ no item named `error1` in scope\n    |\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n warning: unresolved link to `error2`\n   --> $DIR/intra-links-warning.rs:82:11\n    |\n LL | /// docs [error2]\n-   |           ^^^^^^ the module `intra_links_warning` contains no item named `error2`\n+   |           ^^^^^^ no item named `error2` in scope\n    |\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n warning: unresolved link to `BarA`\n   --> $DIR/intra-links-warning.rs:21:10\n    |\n LL | /// bar [BarA] bar\n-   |          ^^^^ the module `intra_links_warning` contains no item named `BarA`\n+   |          ^^^^ no item named `BarA` in scope\n    |\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n warning: unresolved link to `BarB`\n   --> $DIR/intra-links-warning.rs:27:9\n    |\n LL |  * bar [BarB] bar\n-   |         ^^^^ the module `intra_links_warning` contains no item named `BarB`\n+   |         ^^^^ no item named `BarB` in scope\n    |\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n warning: unresolved link to `BarC`\n   --> $DIR/intra-links-warning.rs:34:6\n    |\n LL | bar [BarC] bar\n-   |      ^^^^ the module `intra_links_warning` contains no item named `BarC`\n+   |      ^^^^ no item named `BarC` in scope\n    |\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n@@ -151,7 +151,7 @@ LL | #[doc = \"Foo\\nbar [BarD] bar\\nbaz\"]\n            \n            bar [BarD] bar\n                 ^^^^\n-   = note: the module `intra_links_warning` contains no item named `BarD`\n+   = note: no item named `BarD` in scope\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n warning: unresolved link to `BarF`\n@@ -167,7 +167,7 @@ LL | f!(\"Foo\\nbar [BarF] bar\\nbaz\");\n            \n            bar [BarF] bar\n                 ^^^^\n-   = note: the module `intra_links_warning` contains no item named `BarF`\n+   = note: no item named `BarF` in scope\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n    = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "32be90193fe9070e397db5e9ba11a9a2ad841a08", "filename": "src/test/rustdoc-ui/lint-group.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -32,7 +32,7 @@ error: unresolved link to `error`\n   --> $DIR/lint-group.rs:9:29\n    |\n LL | /// what up, let's make an [error]\n-   |                             ^^^^^ the module `lint_group` contains no item named `error`\n+   |                             ^^^^^ no item named `error` in scope\n    |\n note: the lint level is defined here\n   --> $DIR/lint-group.rs:7:9"}, {"sha": "23f30a1eea073729c75034a1a949055420b2b495", "filename": "src/test/ui/const-generics/issues/issue-75299.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75299.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75299.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75299.rs?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -0,0 +1,11 @@\n+// compile-flags: -Zmir-opt-level=3\n+// run-pass\n+\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+fn main() {\n+    fn foo<const N: usize>() -> [u8; N] {\n+        [0; N]\n+    }\n+    let _x = foo::<1>();\n+}"}, {"sha": "063efc7b31abde057f5fcac4778e846d26fe14be", "filename": "src/test/ui/drop-bounds/drop-bounds-impl-drop.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds-impl-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds-impl-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds-impl-drop.rs?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -0,0 +1,14 @@\n+// run-pass\n+#![deny(drop_bounds)]\n+// As a special exemption, `impl Drop` in the return position raises no error.\n+// This allows a convenient way to return an unnamed drop guard.\n+fn voldemort_type() -> impl Drop {\n+  struct Voldemort;\n+  impl Drop for Voldemort {\n+    fn drop(&mut self) {}\n+  }\n+  Voldemort\n+}\n+fn main() {\n+  let _ = voldemort_type();\n+}"}, {"sha": "c73538278d3be9cc8cf0637c04d046eca43e6b32", "filename": "src/test/ui/drop-bounds/drop-bounds.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds.rs?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -0,0 +1,19 @@\n+#![deny(drop_bounds)]\n+fn foo<T: Drop>() {} //~ ERROR\n+fn bar<U>()\n+where\n+    U: Drop, //~ ERROR\n+{\n+}\n+fn baz(_x: impl Drop) {} //~ ERROR\n+struct Foo<T: Drop> { //~ ERROR\n+  _x: T\n+}\n+struct Bar<U> where U: Drop { //~ ERROR\n+  _x: U\n+}\n+trait Baz: Drop { //~ ERROR\n+}\n+impl<T: Drop> Baz for T { //~ ERROR\n+}\n+fn main() {}"}, {"sha": "15ba4c9a649890476bc906881b0dafc1a14b2a9c", "filename": "src/test/ui/drop-bounds/drop-bounds.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop-bounds%2Fdrop-bounds.stderr?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -0,0 +1,50 @@\n+error: bounds on `T: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+  --> $DIR/drop-bounds.rs:2:11\n+   |\n+LL | fn foo<T: Drop>() {}\n+   |           ^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/drop-bounds.rs:1:9\n+   |\n+LL | #![deny(drop_bounds)]\n+   |         ^^^^^^^^^^^\n+\n+error: bounds on `U: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+  --> $DIR/drop-bounds.rs:5:8\n+   |\n+LL |     U: Drop,\n+   |        ^^^^\n+\n+error: bounds on `impl Drop: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+  --> $DIR/drop-bounds.rs:8:17\n+   |\n+LL | fn baz(_x: impl Drop) {}\n+   |                 ^^^^\n+\n+error: bounds on `T: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+  --> $DIR/drop-bounds.rs:9:15\n+   |\n+LL | struct Foo<T: Drop> {\n+   |               ^^^^\n+\n+error: bounds on `U: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+  --> $DIR/drop-bounds.rs:12:24\n+   |\n+LL | struct Bar<U> where U: Drop {\n+   |                        ^^^^\n+\n+error: bounds on `Self: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+  --> $DIR/drop-bounds.rs:15:12\n+   |\n+LL | trait Baz: Drop {\n+   |            ^^^^\n+\n+error: bounds on `T: Drop` are useless, consider instead using `std::mem::needs_drop` to detect if a type has a destructor\n+  --> $DIR/drop-bounds.rs:17:9\n+   |\n+LL | impl<T: Drop> Baz for T {\n+   |         ^^^^\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "ff70f7368666586e2279e4a9ddf10a8af66292c8", "filename": "src/test/ui/error-codes/E0777.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Fui%2Ferror-codes%2FE0777.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Fui%2Ferror-codes%2FE0777.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0777.rs?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -0,0 +1,7 @@\n+#[derive(\"Clone\")] //~ ERROR E0777\n+#[derive(\"Clone\n+\")]\n+//~^^ ERROR E0777\n+struct Foo;\n+\n+fn main() {}"}, {"sha": "ea73c58993e2b70fee65eaa5967186d38ff2d48a", "filename": "src/test/ui/error-codes/E0777.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Fui%2Ferror-codes%2FE0777.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Fui%2Ferror-codes%2FE0777.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0777.stderr?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -0,0 +1,21 @@\n+error[E0777]: expected path to a trait, found literal\n+  --> $DIR/E0777.rs:1:10\n+   |\n+LL | #[derive(\"Clone\")]\n+   |          ^^^^^^^\n+   |\n+   = help: try using `#[derive(Clone)]`\n+\n+error[E0777]: expected path to a trait, found literal\n+  --> $DIR/E0777.rs:2:10\n+   |\n+LL |   #[derive(\"Clone\n+   |  __________^\n+LL | | \")]\n+   | |_^\n+   |\n+   = help: for example, write `#[derive(Debug)]` for `Debug`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0777`."}, {"sha": "1c1e92c5bbcbbe7fc18858c883aee105ce06e712", "filename": "src/test/ui/issues/issue-68951.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Fui%2Fissues%2Fissue-68951.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Fui%2Fissues%2Fissue-68951.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-68951.rs?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+\n+fn main() {\n+    let array = [0x42u8; 10];\n+    for b in &array {\n+        let lo = b & 0xf;\n+        let hi = (b >> 4) & 0xf;\n+    }\n+}"}, {"sha": "e58ba50a9e585c54b91c5cc47173aafee66b12e4", "filename": "src/test/ui/mir/issue-77359-simplify-arm-identity.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Fui%2Fmir%2Fissue-77359-simplify-arm-identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Fui%2Fmir%2Fissue-77359-simplify-arm-identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-77359-simplify-arm-identity.rs?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "previous_filename": "src/test/ui/mir/issue-77359-simplify-arm-identity-.rs"}, {"sha": "ffcfd4ad83e1f8e36fb49a89ce9892261c623561", "filename": "src/test/ui/pattern/issue-66501.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Fui%2Fpattern%2Fissue-66501.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Fui%2Fpattern%2Fissue-66501.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-66501.rs?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+\n+#![allow(unreachable_patterns)]\n+\n+fn main() {\n+    const CONST: &[Option<()>; 1] = &[Some(())];\n+    match &[Some(())] {\n+        &[None] => {}\n+        CONST => {}\n+        &[Some(())] => {}\n+    }\n+}"}, {"sha": "1e262fd50676500b13d68ae42c49ba6d12202052", "filename": "src/test/ui/pattern/issue-72565.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Fui%2Fpattern%2Fissue-72565.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Fui%2Fpattern%2Fissue-72565.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-72565.rs?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -0,0 +1,8 @@\n+const F: &'static dyn PartialEq<u32> = &7u32;\n+\n+fn main() {\n+    let a: &dyn PartialEq<u32> = &7u32;\n+    match a {\n+        F => panic!(), //~ ERROR: `&dyn PartialEq<u32>` cannot be used in patterns\n+    }\n+}"}, {"sha": "2f82616b277645a3aea8f305bf8f8975a051accb", "filename": "src/test/ui/pattern/issue-72565.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Fui%2Fpattern%2Fissue-72565.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Fui%2Fpattern%2Fissue-72565.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-72565.stderr?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -0,0 +1,8 @@\n+error: `&dyn PartialEq<u32>` cannot be used in patterns\n+  --> $DIR/issue-72565.rs:6:9\n+   |\n+LL |         F => panic!(),\n+   |         ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "8a533453e75fdac4582bd294a131e09b63e6f674", "filename": "src/test/ui/simd/shuffle-not-out-of-bounds.rs", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.rs?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -0,0 +1,191 @@\n+// build-fail\n+#![allow(non_camel_case_types)]\n+#![feature(repr_simd, platform_intrinsics)]\n+\n+// Test for #73542 to verify out-of-bounds shuffle vectors do not compile.\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct u8x2(u8, u8);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct u8x4(u8, u8, u8, u8);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct u8x8(u8, u8, u8, u8, u8, u8, u8, u8);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct u8x16(\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct u8x32(\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct u8x64(\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+    u8,\n+);\n+\n+// Test vectors by lane size. Since LLVM does not distinguish between a shuffle\n+// over two f32s and a shuffle over two u64s, or any other such combination,\n+// it is not necessary to test every possible vector, only lane counts.\n+macro_rules! test_shuffle_lanes {\n+    ($n:literal, $x:ident, $y:ident, $t:tt) => {\n+        unsafe {\n+                let shuffle: $x = {\n+                    const ARR: [u32; $n] = {\n+                        let mut arr = [0; $n];\n+                        arr[0] = $n * 2;\n+                        arr\n+                    };\n+                    extern \"platform-intrinsic\" {\n+                        pub fn $y<T, U>(x: T, y: T, idx: [u32; $n]) -> U;\n+                    }\n+                    let vec1 = $x$t;\n+                    let vec2 = $x$t;\n+                    $y(vec1, vec2, ARR)\n+                };\n+        }\n+    }\n+}\n+//~^^^^^ ERROR: invalid monomorphization of `simd_shuffle2` intrinsic\n+//~| ERROR: invalid monomorphization of `simd_shuffle4` intrinsic\n+//~| ERROR: invalid monomorphization of `simd_shuffle8` intrinsic\n+//~| ERROR: invalid monomorphization of `simd_shuffle16` intrinsic\n+//~| ERROR: invalid monomorphization of `simd_shuffle32` intrinsic\n+//~| ERROR: invalid monomorphization of `simd_shuffle64` intrinsic\n+// Because the test is mostly embedded in a macro, all the errors have the same origin point.\n+// And unfortunately, standard comments, as in the UI test harness, disappear in macros!\n+\n+fn main() {\n+    test_shuffle_lanes!(2, u8x2, simd_shuffle2, (2, 1));\n+    test_shuffle_lanes!(4, u8x4, simd_shuffle4, (4, 3, 2, 1));\n+    test_shuffle_lanes!(8, u8x8, simd_shuffle8, (8, 7, 6, 5, 4, 3, 2, 1));\n+    test_shuffle_lanes!(16, u8x16, simd_shuffle16,\n+        (16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\n+    test_shuffle_lanes!(32, u8x32, simd_shuffle32,\n+        (32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16,\n+         15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\n+    test_shuffle_lanes!(64, u8x64, simd_shuffle64,\n+        (64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49,\n+         48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33,\n+         32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17,\n+         16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\n+}"}, {"sha": "4806f2ca27b9eeb94f3e611c8aff15bcd5f0db5b", "filename": "src/test/ui/simd/shuffle-not-out-of-bounds.stderr", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.stderr?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -0,0 +1,76 @@\n+error[E0511]: invalid monomorphization of `simd_shuffle2` intrinsic: shuffle index #0 is out of bounds (limit 4)\n+  --> $DIR/shuffle-not-out-of-bounds.rs:163:21\n+   |\n+LL |                     $y(vec1, vec2, ARR)\n+   |                     ^^^^^^^^^^^^^^^^^^^\n+...\n+LL |     test_shuffle_lanes!(2, u8x2, simd_shuffle2, (2, 1));\n+   |     ---------------------------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0511]: invalid monomorphization of `simd_shuffle4` intrinsic: shuffle index #0 is out of bounds (limit 8)\n+  --> $DIR/shuffle-not-out-of-bounds.rs:163:21\n+   |\n+LL |                     $y(vec1, vec2, ARR)\n+   |                     ^^^^^^^^^^^^^^^^^^^\n+...\n+LL |     test_shuffle_lanes!(4, u8x4, simd_shuffle4, (4, 3, 2, 1));\n+   |     ---------------------------------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0511]: invalid monomorphization of `simd_shuffle8` intrinsic: shuffle index #0 is out of bounds (limit 16)\n+  --> $DIR/shuffle-not-out-of-bounds.rs:163:21\n+   |\n+LL |                     $y(vec1, vec2, ARR)\n+   |                     ^^^^^^^^^^^^^^^^^^^\n+...\n+LL |     test_shuffle_lanes!(8, u8x8, simd_shuffle8, (8, 7, 6, 5, 4, 3, 2, 1));\n+   |     ---------------------------------------------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0511]: invalid monomorphization of `simd_shuffle16` intrinsic: shuffle index #0 is out of bounds (limit 32)\n+  --> $DIR/shuffle-not-out-of-bounds.rs:163:21\n+   |\n+LL |                       $y(vec1, vec2, ARR)\n+   |                       ^^^^^^^^^^^^^^^^^^^\n+...\n+LL | /     test_shuffle_lanes!(16, u8x16, simd_shuffle16,\n+LL | |         (16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\n+   | |_________________________________________________________________- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0511]: invalid monomorphization of `simd_shuffle32` intrinsic: shuffle index #0 is out of bounds (limit 64)\n+  --> $DIR/shuffle-not-out-of-bounds.rs:163:21\n+   |\n+LL |                       $y(vec1, vec2, ARR)\n+   |                       ^^^^^^^^^^^^^^^^^^^\n+...\n+LL | /     test_shuffle_lanes!(32, u8x32, simd_shuffle32,\n+LL | |         (32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16,\n+LL | |          15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\n+   | |_____________________________________________________________- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0511]: invalid monomorphization of `simd_shuffle64` intrinsic: shuffle index #0 is out of bounds (limit 128)\n+  --> $DIR/shuffle-not-out-of-bounds.rs:163:21\n+   |\n+LL |                       $y(vec1, vec2, ARR)\n+   |                       ^^^^^^^^^^^^^^^^^^^\n+...\n+LL | /     test_shuffle_lanes!(64, u8x64, simd_shuffle64,\n+LL | |         (64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49,\n+LL | |          48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33,\n+LL | |          32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17,\n+LL | |          16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\n+   | |_________________________________________________________________- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0511`."}, {"sha": "bb4104b3d2519903699a152fe0fe0efe20377b87", "filename": "src/test/ui/type-alias-impl-trait/issue-74244.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.rs?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -0,0 +1,20 @@\n+#![feature(type_alias_impl_trait)]\n+\n+trait Allocator {\n+    type Buffer;\n+}\n+\n+struct DefaultAllocator;\n+\n+impl<T> Allocator for DefaultAllocator {\n+    //~^ ERROR: the type parameter `T` is not constrained\n+    type Buffer = ();\n+}\n+\n+type A = impl Fn(<DefaultAllocator as Allocator>::Buffer);\n+\n+fn foo() -> A {\n+    |_| ()\n+}\n+\n+fn main() {}"}, {"sha": "ff6bacd277e1ed9bb89ceabc2ac99c684535aa58", "filename": "src/test/ui/type-alias-impl-trait/issue-74244.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74244.stderr?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -0,0 +1,9 @@\n+error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/issue-74244.rs:9:6\n+   |\n+LL | impl<T> Allocator for DefaultAllocator {\n+   |      ^ unconstrained type parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0207`."}, {"sha": "c5884361dff9d313fae87dd86a20281b93defa43", "filename": "src/tools/clippy/clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -163,3 +163,12 @@ declare_deprecated_lint! {\n     pub REGEX_MACRO,\n     \"the regex! macro has been removed from the regex crate in 2018\"\n }\n+\n+declare_deprecated_lint! {\n+    /// **What it does:** Nothing. This lint has been deprecated.\n+    ///\n+    /// **Deprecation reason:** This lint has been uplifted to rustc and is now called\n+    /// `drop_bounds`.\n+    pub DROP_BOUNDS,\n+    \"this lint has been uplifted to rustc and is now called `drop_bounds`\"\n+}"}, {"sha": "ec3b6afa6300f13b76f17e40337b3efaeabfbeec", "filename": "src/tools/clippy/clippy_lints/src/drop_bounds.rs", "status": "removed", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/4cf3dc19a1e59ffdebe3d8ca106e5b7f2d6d212e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf3dc19a1e59ffdebe3d8ca106e5b7f2d6d212e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_bounds.rs?ref=4cf3dc19a1e59ffdebe3d8ca106e5b7f2d6d212e", "patch": "@@ -1,73 +0,0 @@\n-use crate::utils::{match_def_path, paths, span_lint};\n-use if_chain::if_chain;\n-use rustc_hir::{GenericBound, GenericParam, WhereBoundPredicate, WherePredicate};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-\n-declare_clippy_lint! {\n-    /// **What it does:** Checks for generics with `std::ops::Drop` as bounds.\n-    ///\n-    /// **Why is this bad?** `Drop` bounds do not really accomplish anything.\n-    /// A type may have compiler-generated drop glue without implementing the\n-    /// `Drop` trait itself. The `Drop` trait also only has one method,\n-    /// `Drop::drop`, and that function is by fiat not callable in user code.\n-    /// So there is really no use case for using `Drop` in trait bounds.\n-    ///\n-    /// The most likely use case of a drop bound is to distinguish between types\n-    /// that have destructors and types that don't. Combined with specialization,\n-    /// a naive coder would write an implementation that assumed a type could be\n-    /// trivially dropped, then write a specialization for `T: Drop` that actually\n-    /// calls the destructor. Except that doing so is not correct; String, for\n-    /// example, doesn't actually implement Drop, but because String contains a\n-    /// Vec, assuming it can be trivially dropped will leak memory.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    /// ```rust\n-    /// fn foo<T: Drop>() {}\n-    /// ```\n-    /// Could be written as:\n-    /// ```rust\n-    /// fn foo<T>() {}\n-    /// ```\n-    pub DROP_BOUNDS,\n-    correctness,\n-    \"bounds of the form `T: Drop` are useless\"\n-}\n-\n-const DROP_BOUNDS_SUMMARY: &str = \"bounds of the form `T: Drop` are useless, \\\n-                                   use `std::mem::needs_drop` to detect if a type has drop glue\";\n-\n-declare_lint_pass!(DropBounds => [DROP_BOUNDS]);\n-\n-impl<'tcx> LateLintPass<'tcx> for DropBounds {\n-    fn check_generic_param(&mut self, cx: &LateContext<'tcx>, p: &'tcx GenericParam<'_>) {\n-        for bound in p.bounds.iter() {\n-            lint_bound(cx, bound);\n-        }\n-    }\n-    fn check_where_predicate(&mut self, cx: &LateContext<'tcx>, p: &'tcx WherePredicate<'_>) {\n-        if let WherePredicate::BoundPredicate(WhereBoundPredicate { bounds, .. }) = p {\n-            for bound in *bounds {\n-                lint_bound(cx, bound);\n-            }\n-        }\n-    }\n-}\n-\n-fn lint_bound<'tcx>(cx: &LateContext<'tcx>, bound: &'tcx GenericBound<'_>) {\n-    if_chain! {\n-        if let GenericBound::Trait(t, _) = bound;\n-        if let Some(def_id) = t.trait_ref.path.res.opt_def_id();\n-        if match_def_path(cx, def_id, &paths::DROP_TRAIT);\n-        then {\n-            span_lint(\n-                cx,\n-                DROP_BOUNDS,\n-                t.span,\n-                DROP_BOUNDS_SUMMARY\n-            );\n-        }\n-    }\n-}"}, {"sha": "70efdaeb9c6690ee242fe32707814ee293efbf91", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -179,7 +179,6 @@ mod derive;\n mod doc;\n mod double_comparison;\n mod double_parens;\n-mod drop_bounds;\n mod drop_forget_ref;\n mod duration_subsec;\n mod else_if_without_else;\n@@ -478,6 +477,10 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         \"clippy::regex_macro\",\n         \"the regex! macro has been removed from the regex crate in 2018\",\n     );\n+    store.register_removed(\n+        \"clippy::drop_bounds\",\n+        \"this lint has been uplifted to rustc and is now called `drop_bounds`\",\n+    );\n     // end deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n \n     // begin register lints, do not remove this comment, it\u2019s used in `update_lints`\n@@ -532,7 +535,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &doc::NEEDLESS_DOCTEST_MAIN,\n         &double_comparison::DOUBLE_COMPARISONS,\n         &double_parens::DOUBLE_PARENS,\n-        &drop_bounds::DROP_BOUNDS,\n         &drop_forget_ref::DROP_COPY,\n         &drop_forget_ref::DROP_REF,\n         &drop_forget_ref::FORGET_COPY,\n@@ -959,7 +961,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box strings::StringLitAsBytes);\n     store.register_late_pass(|| box derive::Derive);\n     store.register_late_pass(|| box types::CharLitAsU8);\n-    store.register_late_pass(|| box drop_bounds::DropBounds);\n     store.register_late_pass(|| box get_last_with_len::GetLastWithLen);\n     store.register_late_pass(|| box drop_forget_ref::DropForgetRef);\n     store.register_late_pass(|| box empty_enum::EmptyEnum);\n@@ -1282,7 +1283,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&doc::NEEDLESS_DOCTEST_MAIN),\n         LintId::of(&double_comparison::DOUBLE_COMPARISONS),\n         LintId::of(&double_parens::DOUBLE_PARENS),\n-        LintId::of(&drop_bounds::DROP_BOUNDS),\n         LintId::of(&drop_forget_ref::DROP_COPY),\n         LintId::of(&drop_forget_ref::DROP_REF),\n         LintId::of(&drop_forget_ref::FORGET_COPY),\n@@ -1714,7 +1714,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&copies::IF_SAME_THEN_ELSE),\n         LintId::of(&derive::DERIVE_HASH_XOR_EQ),\n         LintId::of(&derive::DERIVE_ORD_XOR_PARTIAL_ORD),\n-        LintId::of(&drop_bounds::DROP_BOUNDS),\n         LintId::of(&drop_forget_ref::DROP_COPY),\n         LintId::of(&drop_forget_ref::DROP_REF),\n         LintId::of(&drop_forget_ref::FORGET_COPY),"}, {"sha": "be837a61dc07e99e39a9362f4b07618c73331e08", "filename": "src/tools/clippy/clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -31,7 +31,6 @@ pub const DISPLAY_FMT_METHOD: [&str; 4] = [\"core\", \"fmt\", \"Display\", \"fmt\"];\n pub const DISPLAY_TRAIT: [&str; 3] = [\"core\", \"fmt\", \"Display\"];\n pub const DOUBLE_ENDED_ITERATOR: [&str; 4] = [\"core\", \"iter\", \"traits\", \"DoubleEndedIterator\"];\n pub const DROP: [&str; 3] = [\"core\", \"mem\", \"drop\"];\n-pub const DROP_TRAIT: [&str; 4] = [\"core\", \"ops\", \"drop\", \"Drop\"];\n pub const DURATION: [&str; 3] = [\"core\", \"time\", \"Duration\"];\n pub const EARLY_CONTEXT: [&str; 4] = [\"rustc\", \"lint\", \"context\", \"EarlyContext\"];\n pub const EXIT: [&str; 3] = [\"std\", \"process\", \"exit\"];"}, {"sha": "f6d529de9a3a20beb7c88345cc0e6bafe248cc6b", "filename": "src/tools/clippy/src/lintlist/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftools%2Fclippy%2Fsrc%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftools%2Fclippy%2Fsrc%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Flintlist%2Fmod.rs?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -423,13 +423,6 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"double_parens\",\n     },\n-    Lint {\n-        name: \"drop_bounds\",\n-        group: \"correctness\",\n-        desc: \"bounds of the form `T: Drop` are useless\",\n-        deprecation: None,\n-        module: \"drop_bounds\",\n-    },\n     Lint {\n         name: \"drop_copy\",\n         group: \"correctness\","}, {"sha": "9e32fe36ece4dc09426703a7d96d3f250cf9fee7", "filename": "src/tools/clippy/tests/ui/deprecated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.rs?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -8,5 +8,6 @@\n #[warn(clippy::into_iter_on_array)]\n #[warn(clippy::unused_label)]\n #[warn(clippy::regex_macro)]\n+#[warn(clippy::drop_bounds)]\n \n fn main() {}"}, {"sha": "d3400a7be09fd69214d41e4821c6980d27f2c668", "filename": "src/tools/clippy/tests/ui/deprecated.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.stderr?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -60,11 +60,17 @@ error: lint `clippy::regex_macro` has been removed: `the regex! macro has been r\n LL | #[warn(clippy::regex_macro)]\n    |        ^^^^^^^^^^^^^^^^^^^\n \n+error: lint `clippy::drop_bounds` has been removed: `this lint has been uplifted to rustc and is now called `drop_bounds``\n+  --> $DIR/deprecated.rs:11:8\n+   |\n+LL | #[warn(clippy::drop_bounds)]\n+   |        ^^^^^^^^^^^^^^^^^^^\n+\n error: lint `clippy::str_to_string` has been removed: `using `str::to_string` is common even today and specialization will likely happen soon`\n   --> $DIR/deprecated.rs:1:8\n    |\n LL | #[warn(clippy::str_to_string)]\n    |        ^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 12 previous errors\n "}, {"sha": "6d6a9dc0783993f4f2e63520c78a23eb5c0f3331", "filename": "src/tools/clippy/tests/ui/drop_bounds.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4cf3dc19a1e59ffdebe3d8ca106e5b7f2d6d212e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cf3dc19a1e59ffdebe3d8ca106e5b7f2d6d212e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_bounds.rs?ref=4cf3dc19a1e59ffdebe3d8ca106e5b7f2d6d212e", "patch": "@@ -1,8 +0,0 @@\n-#![allow(unused)]\n-fn foo<T: Drop>() {}\n-fn bar<T>()\n-where\n-    T: Drop,\n-{\n-}\n-fn main() {}"}, {"sha": "8208c0ed7e3985e6e4059d4373574622f8540fb4", "filename": "src/tools/clippy/tests/ui/drop_bounds.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4cf3dc19a1e59ffdebe3d8ca106e5b7f2d6d212e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4cf3dc19a1e59ffdebe3d8ca106e5b7f2d6d212e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_bounds.stderr?ref=4cf3dc19a1e59ffdebe3d8ca106e5b7f2d6d212e", "patch": "@@ -1,16 +0,0 @@\n-error: bounds of the form `T: Drop` are useless, use `std::mem::needs_drop` to detect if a type has drop glue\n-  --> $DIR/drop_bounds.rs:2:11\n-   |\n-LL | fn foo<T: Drop>() {}\n-   |           ^^^^\n-   |\n-   = note: `#[deny(clippy::drop_bounds)]` on by default\n-\n-error: bounds of the form `T: Drop` are useless, use `std::mem::needs_drop` to detect if a type has drop glue\n-  --> $DIR/drop_bounds.rs:5:8\n-   |\n-LL |     T: Drop,\n-   |        ^^^^\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "0c52fee68a968e36686278e1b46ca183b51ce277", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2251766944f355a039e67aeb13ab630b2d46bf9b/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=2251766944f355a039e67aeb13ab630b2d46bf9b", "patch": "@@ -116,7 +116,6 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"libz-sys\",\n     \"lock_api\",\n     \"log\",\n-    \"log_settings\",\n     \"maybe-uninit\",\n     \"md-5\",\n     \"measureme\","}]}