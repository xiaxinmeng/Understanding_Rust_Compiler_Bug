{"sha": "3502e483213ad42468700b409ab4a4ecdd8ddf2c", "node_id": "C_kwDOAAsO6NoAKDM1MDJlNDgzMjEzYWQ0MjQ2ODcwMGI0MDlhYjRhNGVjZGQ4ZGRmMmM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-05T13:10:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-05T13:10:32Z"}, "message": "Rollup merge of #103056 - beetrees:timespec-bug-fix, r=thomcc\n\nFix `checked_{add,sub}_duration` incorrectly returning `None` when `other` has more than `i64::MAX` seconds\n\nUse `checked_{add,sub}_unsigned` in `checked_{add,sub}_duration` so that the correct result is returned when adding/subtracting durations with more than `i64::MAX` seconds.", "tree": {"sha": "6127abb5e2fd28f6c8345a1aae59303436a375af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6127abb5e2fd28f6c8345a1aae59303436a375af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3502e483213ad42468700b409ab4a4ecdd8ddf2c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkVQBICRBK7hj4Ov3rIwAAlywIAJgc9NgGk4LNKP1svtH1SlTj\ntk3uYwUMDWY03rW4M+1nUwqwt7WXqiiszQ1cfo0PDHfn15rKJI2864/e3aDV9LTZ\njQ2O5eiKv5EzxOd0+5tJOAuVNhoipbQYQcUPSN2Fsu5Pc9Y0rRGOAyq27+aeRMxo\n1ndE3s6iluNlRTqMR++sfobUr96u4JUbX3X+3TsBbB4TV8jyVG8B6I/SwrweUQTp\nOYepzHCl0piKyC/xyjvbv6ctRLqFnyYV7subRGhw9RRfapB8+orxl5U6vm3Nis2u\nwknNlWPmORPk0w7+f9kny7cY7GZKtia6/K4iI+a77X/T6/bWymKH9FxPaKuZwCc=\n=jpVD\n-----END PGP SIGNATURE-----\n", "payload": "tree 6127abb5e2fd28f6c8345a1aae59303436a375af\nparent dd9a7bf848e412c81e3045245acbd5a01641a610\nparent 5def7534e4f86165fd5f984e542c17921dc9fd08\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1683292232 +0530\ncommitter GitHub <noreply@github.com> 1683292232 +0530\n\nRollup merge of #103056 - beetrees:timespec-bug-fix, r=thomcc\n\nFix `checked_{add,sub}_duration` incorrectly returning `None` when `other` has more than `i64::MAX` seconds\n\nUse `checked_{add,sub}_unsigned` in `checked_{add,sub}_duration` so that the correct result is returned when adding/subtracting durations with more than `i64::MAX` seconds.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3502e483213ad42468700b409ab4a4ecdd8ddf2c", "html_url": "https://github.com/rust-lang/rust/commit/3502e483213ad42468700b409ab4a4ecdd8ddf2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3502e483213ad42468700b409ab4a4ecdd8ddf2c/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd9a7bf848e412c81e3045245acbd5a01641a610", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd9a7bf848e412c81e3045245acbd5a01641a610", "html_url": "https://github.com/rust-lang/rust/commit/dd9a7bf848e412c81e3045245acbd5a01641a610"}, {"sha": "5def7534e4f86165fd5f984e542c17921dc9fd08", "url": "https://api.github.com/repos/rust-lang/rust/commits/5def7534e4f86165fd5f984e542c17921dc9fd08", "html_url": "https://github.com/rust-lang/rust/commit/5def7534e4f86165fd5f984e542c17921dc9fd08"}], "stats": {"total": 59, "additions": 35, "deletions": 24}, "files": [{"sha": "5440d85df4adff59d441487998d4c2b96fdb9b8a", "filename": "library/std/src/sys/hermit/time.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3502e483213ad42468700b409ab4a4ecdd8ddf2c/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3502e483213ad42468700b409ab4a4ecdd8ddf2c/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ftime.rs?ref=3502e483213ad42468700b409ab4a4ecdd8ddf2c", "patch": "@@ -40,11 +40,7 @@ impl Timespec {\n     }\n \n     fn checked_add_duration(&self, other: &Duration) -> Option<Timespec> {\n-        let mut secs = other\n-            .as_secs()\n-            .try_into() // <- target type would be `libc::time_t`\n-            .ok()\n-            .and_then(|secs| self.t.tv_sec.checked_add(secs))?;\n+        let mut secs = self.tv_sec.checked_add_unsigned(other.as_secs())?;\n \n         // Nano calculations can't overflow because nanos are <1B which fit\n         // in a u32.\n@@ -57,11 +53,7 @@ impl Timespec {\n     }\n \n     fn checked_sub_duration(&self, other: &Duration) -> Option<Timespec> {\n-        let mut secs = other\n-            .as_secs()\n-            .try_into() // <- target type would be `libc::time_t`\n-            .ok()\n-            .and_then(|secs| self.t.tv_sec.checked_sub(secs))?;\n+        let mut secs = self.tv_sec.checked_sub_unsigned(other.as_secs())?;\n \n         // Similar to above, nanos can't overflow.\n         let mut nsec = self.t.tv_nsec as i32 - other.subsec_nanos() as i32;"}, {"sha": "f83f1644fe854483629bde2c4fbefed46c07ec15", "filename": "library/std/src/sys/solid/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3502e483213ad42468700b409ab4a4ecdd8ddf2c/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3502e483213ad42468700b409ab4a4ecdd8ddf2c/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ftime.rs?ref=3502e483213ad42468700b409ab4a4ecdd8ddf2c", "patch": "@@ -47,10 +47,10 @@ impl SystemTime {\n     }\n \n     pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {\n-        Some(SystemTime(self.0.checked_add(other.as_secs().try_into().ok()?)?))\n+        Some(SystemTime(self.0.checked_add_unsigned(other.as_secs())?))\n     }\n \n     pub fn checked_sub_duration(&self, other: &Duration) -> Option<SystemTime> {\n-        Some(SystemTime(self.0.checked_sub(other.as_secs().try_into().ok()?)?))\n+        Some(SystemTime(self.0.checked_sub_unsigned(other.as_secs())?))\n     }\n }"}, {"sha": "a9fbc7ab108a4653fa7d90a9f352d78a1b6ee983", "filename": "library/std/src/sys/unix/time.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3502e483213ad42468700b409ab4a4ecdd8ddf2c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3502e483213ad42468700b409ab4a4ecdd8ddf2c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs?ref=3502e483213ad42468700b409ab4a4ecdd8ddf2c", "patch": "@@ -113,11 +113,7 @@ impl Timespec {\n     }\n \n     pub fn checked_add_duration(&self, other: &Duration) -> Option<Timespec> {\n-        let mut secs = other\n-            .as_secs()\n-            .try_into() // <- target type would be `i64`\n-            .ok()\n-            .and_then(|secs| self.tv_sec.checked_add(secs))?;\n+        let mut secs = self.tv_sec.checked_add_unsigned(other.as_secs())?;\n \n         // Nano calculations can't overflow because nanos are <1B which fit\n         // in a u32.\n@@ -126,23 +122,19 @@ impl Timespec {\n             nsec -= NSEC_PER_SEC as u32;\n             secs = secs.checked_add(1)?;\n         }\n-        Some(Timespec::new(secs, nsec as i64))\n+        Some(Timespec::new(secs, nsec.into()))\n     }\n \n     pub fn checked_sub_duration(&self, other: &Duration) -> Option<Timespec> {\n-        let mut secs = other\n-            .as_secs()\n-            .try_into() // <- target type would be `i64`\n-            .ok()\n-            .and_then(|secs| self.tv_sec.checked_sub(secs))?;\n+        let mut secs = self.tv_sec.checked_sub_unsigned(other.as_secs())?;\n \n         // Similar to above, nanos can't overflow.\n         let mut nsec = self.tv_nsec.0 as i32 - other.subsec_nanos() as i32;\n         if nsec < 0 {\n             nsec += NSEC_PER_SEC as i32;\n             secs = secs.checked_sub(1)?;\n         }\n-        Some(Timespec::new(secs, nsec as i64))\n+        Some(Timespec::new(secs, nsec.into()))\n     }\n \n     #[allow(dead_code)]"}, {"sha": "6ed84806e6d375bab02359daee0b19bc7d8c05ae", "filename": "library/std/src/time/tests.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3502e483213ad42468700b409ab4a4ecdd8ddf2c/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3502e483213ad42468700b409ab4a4ecdd8ddf2c/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs?ref=3502e483213ad42468700b409ab4a4ecdd8ddf2c", "patch": "@@ -1,4 +1,5 @@\n use super::{Duration, Instant, SystemTime, UNIX_EPOCH};\n+use core::fmt::Debug;\n #[cfg(not(target_arch = \"wasm32\"))]\n use test::{black_box, Bencher};\n \n@@ -201,6 +202,32 @@ fn since_epoch() {\n     assert!(a < hundred_twenty_years);\n }\n \n+#[test]\n+fn big_math() {\n+    // Check that the same result occurs when adding/subtracting each duration one at a time as when\n+    // adding/subtracting them all at once.\n+    #[track_caller]\n+    fn check<T: Eq + Copy + Debug>(start: Option<T>, op: impl Fn(&T, Duration) -> Option<T>) {\n+        const DURATIONS: [Duration; 2] =\n+            [Duration::from_secs(i64::MAX as _), Duration::from_secs(50)];\n+        if let Some(start) = start {\n+            assert_eq!(\n+                op(&start, DURATIONS.into_iter().sum()),\n+                DURATIONS.into_iter().try_fold(start, |t, d| op(&t, d))\n+            )\n+        }\n+    }\n+\n+    check(SystemTime::UNIX_EPOCH.checked_sub(Duration::from_secs(100)), SystemTime::checked_add);\n+    check(SystemTime::UNIX_EPOCH.checked_add(Duration::from_secs(100)), SystemTime::checked_sub);\n+\n+    let instant = Instant::now();\n+    check(instant.checked_sub(Duration::from_secs(100)), Instant::checked_add);\n+    check(instant.checked_sub(Duration::from_secs(i64::MAX as _)), Instant::checked_add);\n+    check(instant.checked_add(Duration::from_secs(100)), Instant::checked_sub);\n+    check(instant.checked_add(Duration::from_secs(i64::MAX as _)), Instant::checked_sub);\n+}\n+\n macro_rules! bench_instant_threaded {\n     ($bench_name:ident, $thread_count:expr) => {\n         #[bench]"}]}