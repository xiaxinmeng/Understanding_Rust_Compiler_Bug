{"sha": "b7ee110ea2c739e1819b437754b345deda3f3606", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZWUxMTBlYTJjNzM5ZTE4MTliNDM3NzU0YjM0NWRlZGEzZjM2MDY=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-08-01T08:12:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-01T08:12:32Z"}, "message": "Rollup merge of #52340 - cypher:document-from-trait-in-ffi, r=steveklabnik\n\nDocument From trait implementations for OsStr, OsString, CString, and CStr\n\nAs part of issue #51430 (cc @skade).\n\nThe allocation and copy claims should be double-checked.\n\nr? @steveklabnik", "tree": {"sha": "123fcd3c5acaf3fa725a994b4cdcfd39ea66280d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/123fcd3c5acaf3fa725a994b4cdcfd39ea66280d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7ee110ea2c739e1819b437754b345deda3f3606", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbYWtwCRBK7hj4Ov3rIwAAdHIIACu0i6Ub4JtT1tOyeV9vPbUM\nKyLqTjuIZFWj/+TIAboqtrMG8GYB6CzY8jTbMGuF7CMMYEGdWPcmzlodXci7tGXm\npR39Ug6NWXEjhku3qsIGNbSbSehb980I2d2waCRj/8qO3+us4kxjlr8XevI7u/PA\n0zJNTcsIlOPCu8eLvxJmd/bVXvKhC1AK6LuHRu0MXDov/pdw19RfrvH3situh+yv\n1k71WWdXNCW1qpi6qO91d/n4z2xZkocC2jt9QTu/aAMFMVlQkTse/EpH0M3MMyHS\n2GwdnM15B9PlNg0Fv9Qnty8K+/KpWwGXXH1xKt6MZ81McoHiWeMgfbSjEXQLMpk=\n=zRLC\n-----END PGP SIGNATURE-----\n", "payload": "tree 123fcd3c5acaf3fa725a994b4cdcfd39ea66280d\nparent e94df4acb4c3f42fdc224a7164b63a99240add1e\nparent ed5edcb3186e87715143bbd53ab1dfa69771cbf9\nauthor Pietro Albini <pietro@pietroalbini.org> 1533111152 +0200\ncommitter GitHub <noreply@github.com> 1533111152 +0200\n\nRollup merge of #52340 - cypher:document-from-trait-in-ffi, r=steveklabnik\n\nDocument From trait implementations for OsStr, OsString, CString, and CStr\n\nAs part of issue #51430 (cc @skade).\n\nThe allocation and copy claims should be double-checked.\n\nr? @steveklabnik\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7ee110ea2c739e1819b437754b345deda3f3606", "html_url": "https://github.com/rust-lang/rust/commit/b7ee110ea2c739e1819b437754b345deda3f3606", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7ee110ea2c739e1819b437754b345deda3f3606/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e94df4acb4c3f42fdc224a7164b63a99240add1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e94df4acb4c3f42fdc224a7164b63a99240add1e", "html_url": "https://github.com/rust-lang/rust/commit/e94df4acb4c3f42fdc224a7164b63a99240add1e"}, {"sha": "ed5edcb3186e87715143bbd53ab1dfa69771cbf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed5edcb3186e87715143bbd53ab1dfa69771cbf9", "html_url": "https://github.com/rust-lang/rust/commit/ed5edcb3186e87715143bbd53ab1dfa69771cbf9"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "b2777f5c48541f13171259a711e7885a159da6b4", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b7ee110ea2c739e1819b437754b345deda3f3606/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ee110ea2c739e1819b437754b345deda3f3606/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=b7ee110ea2c739e1819b437754b345deda3f3606", "patch": "@@ -642,6 +642,12 @@ impl fmt::Debug for CString {\n \n #[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n impl From<CString> for Vec<u8> {\n+    /// Converts a [`CString`] into a [`Vec`]`<u8>`.\n+    ///\n+    /// The conversion consumes the [`CString`], and removes the terminating NUL byte.\n+    ///\n+    /// [`Vec`]: ../vec/struct.Vec.html\n+    /// [`CString`]: ../ffi/struct.CString.html\n     #[inline]\n     fn from(s: CString) -> Vec<u8> {\n         s.into_bytes()\n@@ -700,6 +706,10 @@ impl<'a> From<&'a CStr> for Box<CStr> {\n \n #[stable(feature = \"c_string_from_box\", since = \"1.18.0\")]\n impl From<Box<CStr>> for CString {\n+    /// Converts a [`Box`]`<CStr>` into a [`CString`] without copying or allocating.\n+    ///\n+    /// [`Box`]: ../boxed/struct.Box.html\n+    /// [`CString`]: ../ffi/struct.CString.html\n     #[inline]\n     fn from(s: Box<CStr>) -> CString {\n         s.into_c_string()\n@@ -716,6 +726,10 @@ impl Clone for Box<CStr> {\n \n #[stable(feature = \"box_from_c_string\", since = \"1.20.0\")]\n impl From<CString> for Box<CStr> {\n+    /// Converts a [`CString`] into a [`Box`]`<CStr>` without copying or allocating.\n+    ///\n+    /// [`CString`]: ../ffi/struct.CString.html\n+    /// [`Box`]: ../boxed/struct.Box.html\n     #[inline]\n     fn from(s: CString) -> Box<CStr> {\n         s.into_boxed_c_str()\n@@ -748,6 +762,10 @@ impl<'a> From<&'a CString> for Cow<'a, CStr> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<CString> for Arc<CStr> {\n+    /// Converts a [`CString`] into a [`Arc`]`<CStr>` without copying or allocating.\n+    ///\n+    /// [`CString`]: ../ffi/struct.CString.html\n+    /// [`Arc`]: ../sync/struct.Arc.html\n     #[inline]\n     fn from(s: CString) -> Arc<CStr> {\n         let arc: Arc<[u8]> = Arc::from(s.into_inner());\n@@ -766,6 +784,10 @@ impl<'a> From<&'a CStr> for Arc<CStr> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<CString> for Rc<CStr> {\n+    /// Converts a [`CString`] into a [`Rc`]`<CStr>` without copying or allocating.\n+    ///\n+    /// [`CString`]: ../ffi/struct.CString.html\n+    /// [`Rc`]: ../rc/struct.Rc.html\n     #[inline]\n     fn from(s: CString) -> Rc<CStr> {\n         let rc: Rc<[u8]> = Rc::from(s.into_inner());\n@@ -839,6 +861,10 @@ impl fmt::Display for NulError {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl From<NulError> for io::Error {\n+    /// Converts a [`NulError`] into a [`io::Error`].\n+    ///\n+    /// [`NulError`]: ../ffi/struct.NulError.html\n+    /// [`io::Error`]: ../io/struct.Error.html\n     fn from(_: NulError) -> io::Error {\n         io::Error::new(io::ErrorKind::InvalidInput,\n                        \"data provided contains a nul byte\")"}, {"sha": "9e501a84e05ec6e9176a5904c31f4674dfb746e0", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b7ee110ea2c739e1819b437754b345deda3f3606/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ee110ea2c739e1819b437754b345deda3f3606/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=b7ee110ea2c739e1819b437754b345deda3f3606", "patch": "@@ -348,6 +348,12 @@ impl OsString {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl From<String> for OsString {\n+    /// Converts a [`String`] into a [`OsString`].\n+    ///\n+    /// The conversion copies the data, and includes an allocation on the heap.\n+    ///\n+    /// [`String`]: ../string/struct.String.html\n+    /// [`OsString`]: struct.OsString.html\n     fn from(s: String) -> OsString {\n         OsString { inner: Buf::from_string(s) }\n     }\n@@ -630,13 +636,21 @@ impl<'a> From<&'a OsStr> for Box<OsStr> {\n \n #[stable(feature = \"os_string_from_box\", since = \"1.18.0\")]\n impl From<Box<OsStr>> for OsString {\n+    /// Converts a `Box<OsStr>` into a `OsString` without copying or allocating.\n+    ///\n+    /// [`Box`]: ../boxed/struct.Box.html\n+    /// [`OsString`]: ../ffi/struct.OsString.html\n     fn from(boxed: Box<OsStr>) -> OsString {\n         boxed.into_os_string()\n     }\n }\n \n #[stable(feature = \"box_from_os_string\", since = \"1.20.0\")]\n impl From<OsString> for Box<OsStr> {\n+    /// Converts a [`OsString`] into a [`Box`]`<OsStr>` without copying or allocating.\n+    ///\n+    /// [`Box`]: ../boxed/struct.Box.html\n+    /// [`OsString`]: ../ffi/struct.OsString.html\n     fn from(s: OsString) -> Box<OsStr> {\n         s.into_boxed_os_str()\n     }\n@@ -652,6 +666,10 @@ impl Clone for Box<OsStr> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<OsString> for Arc<OsStr> {\n+    /// Converts a [`OsString`] into a [`Arc`]`<OsStr>` without copying or allocating.\n+    ///\n+    /// [`Arc`]: ../sync/struct.Arc.html\n+    /// [`OsString`]: ../ffi/struct.OsString.html\n     #[inline]\n     fn from(s: OsString) -> Arc<OsStr> {\n         let arc = s.inner.into_arc();\n@@ -670,6 +688,10 @@ impl<'a> From<&'a OsStr> for Arc<OsStr> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<OsString> for Rc<OsStr> {\n+    /// Converts a [`OsString`] into a [`Rc`]`<OsStr>` without copying or allocating.\n+    ///\n+    /// [`Rc`]: ../rc/struct.Rc.html\n+    /// [`OsString`]: ../ffi/struct.OsString.html\n     #[inline]\n     fn from(s: OsString) -> Rc<OsStr> {\n         let rc = s.inner.into_rc();"}]}