{"sha": "29b1cc72feab7e5e15d9808c855e1a2ade9057ec", "node_id": "C_kwDOAAsO6NoAKDI5YjFjYzcyZmVhYjdlNWUxNWQ5ODA4Yzg1NWUxYTJhZGU5MDU3ZWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-28T12:53:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-28T12:53:27Z"}, "message": "Auto merge of #2280 - RalfJung:int2ptr, r=RalfJung\n\ntweak int2ptr diagnostics", "tree": {"sha": "a60733e8384f85ea85a86fb1f141f60b4af84537", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a60733e8384f85ea85a86fb1f141f60b4af84537"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29b1cc72feab7e5e15d9808c855e1a2ade9057ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29b1cc72feab7e5e15d9808c855e1a2ade9057ec", "html_url": "https://github.com/rust-lang/rust/commit/29b1cc72feab7e5e15d9808c855e1a2ade9057ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29b1cc72feab7e5e15d9808c855e1a2ade9057ec/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaaed51ab857b3e08870bb13ec44617fce902004", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaaed51ab857b3e08870bb13ec44617fce902004", "html_url": "https://github.com/rust-lang/rust/commit/aaaed51ab857b3e08870bb13ec44617fce902004"}, {"sha": "8bd4bbe3e4b4630cb96f238618d1bb7b3aea5502", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bd4bbe3e4b4630cb96f238618d1bb7b3aea5502", "html_url": "https://github.com/rust-lang/rust/commit/8bd4bbe3e4b4630cb96f238618d1bb7b3aea5502"}], "stats": {"total": 61, "additions": 34, "deletions": 27}, "files": [{"sha": "c762b3d8106de6ee662feb630de53eb09233bbee", "filename": "src/diagnostics.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/29b1cc72feab7e5e15d9808c855e1a2ade9057ec/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b1cc72feab7e5e15d9808c855e1a2ade9057ec/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=29b1cc72feab7e5e15d9808c855e1a2ade9057ec", "patch": "@@ -21,6 +21,7 @@ pub enum TerminationInfo {\n         help: Option<String>,\n         history: Option<TagHistory>,\n     },\n+    Int2PtrWithStrictProvenance,\n     Deadlock,\n     MultipleSymbolDefinitions {\n         link_name: Symbol,\n@@ -42,6 +43,11 @@ impl fmt::Display for TerminationInfo {\n             Exit(code) => write!(f, \"the evaluated program completed with exit code {}\", code),\n             Abort(msg) => write!(f, \"{}\", msg),\n             UnsupportedInIsolation(msg) => write!(f, \"{}\", msg),\n+            Int2PtrWithStrictProvenance =>\n+                write!(\n+                    f,\n+                    \"integer-to-pointer casts and `ptr::from_exposed_addr` are not supported with `-Zmiri-strict-provenance`\"\n+                ),\n             StackedBorrowsUb { msg, .. } => write!(f, \"{}\", msg),\n             Deadlock => write!(f, \"the evaluated program deadlocked\"),\n             MultipleSymbolDefinitions { link_name, .. } =>\n@@ -148,7 +154,8 @@ pub fn report_error<'tcx, 'mir>(\n             let title = match info {\n                 Exit(code) => return Some(*code),\n                 Abort(_) => Some(\"abnormal termination\"),\n-                UnsupportedInIsolation(_) => Some(\"unsupported operation\"),\n+                UnsupportedInIsolation(_) | Int2PtrWithStrictProvenance =>\n+                    Some(\"unsupported operation\"),\n                 StackedBorrowsUb { .. } => Some(\"Undefined Behavior\"),\n                 Deadlock => Some(\"deadlock\"),\n                 MultipleSymbolDefinitions { .. } | SymbolShimClashing { .. } => None,\n@@ -177,7 +184,7 @@ pub fn report_error<'tcx, 'mir>(\n                             }\n                             if let Some((protecting_tag, protecting_tag_span, protection_span)) = protected {\n                                 helps.push((Some(*protecting_tag_span), format!(\"{:?} was protected due to {:?} which was created here\", tag, protecting_tag)));\n-                                helps.push((Some(*protection_span), \"this protector is live for this call\".to_string()));\n+                                helps.push((Some(*protection_span), format!(\"this protector is live for this call\")));\n                             }\n                         }\n                         None => {}\n@@ -191,6 +198,8 @@ pub fn report_error<'tcx, 'mir>(\n                     ],\n                 SymbolShimClashing { link_name, span } =>\n                     vec![(Some(*span), format!(\"the `{}` symbol is defined here\", link_name))],\n+                Int2PtrWithStrictProvenance =>\n+                    vec![(None, format!(\"use Strict Provenance APIs (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance, https://crates.io/crates/sptr) instead\"))],\n                 _ => vec![],\n             };\n             (title, helps)\n@@ -471,12 +480,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let helps = match e {\n                     Int2Ptr { details: true } =>\n                         vec![\n-                            (None, format!(\"this program is using integer-to-pointer casts or (equivalently) `from_exposed_addr`,\")),\n-                            (None, format!(\"which means that Miri might miss pointer bugs in this program\")),\n-                            (None, format!(\"see https://doc.rust-lang.org/nightly/std/ptr/fn.from_exposed_addr.html for more details on that operation\")),\n-                            (None, format!(\"to ensure that Miri does not miss bugs in your program, use `with_addr` (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance) instead\")),\n-                            (None, format!(\"you can then pass the `-Zmiri-strict-provenance` flag to Miri, to ensure you are not relying on `from_exposed_addr` semantics\")),\n-                            (None, format!(\"alternatively, the `-Zmiri-permissive-provenance` flag disables this warning\")),\n+                            (None, format!(\"This program is using integer-to-pointer casts or (equivalently) `ptr::from_exposed_addr`,\")),\n+                            (None, format!(\"which means that Miri might miss pointer bugs in this program.\")),\n+                            (None, format!(\"See https://doc.rust-lang.org/nightly/std/ptr/fn.from_exposed_addr.html for more details on that operation.\")),\n+                            (None, format!(\"To ensure that Miri does not miss bugs in your program, use Strict Provenance APIs (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance, https://crates.io/crates/sptr) instead.\")),\n+                            (None, format!(\"You can then pass the `-Zmiri-strict-provenance` flag to Miri, to ensure you are not relying on `from_exposed_addr` semantics.\")),\n+                            (None, format!(\"Alternatively, the `-Zmiri-permissive-provenance` flag disables this warning.\")),\n                         ],\n                     _ => vec![],\n                 };"}, {"sha": "5a33ada450443798b129c252120a6cefc3103f56", "filename": "src/intptrcast.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29b1cc72feab7e5e15d9808c855e1a2ade9057ec/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b1cc72feab7e5e15d9808c855e1a2ade9057ec/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=29b1cc72feab7e5e15d9808c855e1a2ade9057ec", "patch": "@@ -146,9 +146,7 @@ impl<'mir, 'tcx> GlobalStateInner {\n                 });\n             }\n             ProvenanceMode::Strict => {\n-                throw_unsup_format!(\n-                    \"integer-to-pointer casts and `from_exposed_addr` are not supported with `-Zmiri-strict-provenance`; use `with_addr` instead\"\n-                )\n+                throw_machine_stop!(TerminationInfo::Int2PtrWithStrictProvenance);\n             }\n             ProvenanceMode::Permissive => {}\n         }"}, {"sha": "968c4dfded37ac3fba6051613fdec76db5ccc1f6", "filename": "tests/fail/provenance/strict_provenance_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29b1cc72feab7e5e15d9808c855e1a2ade9057ec/tests%2Ffail%2Fprovenance%2Fstrict_provenance_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b1cc72feab7e5e15d9808c855e1a2ade9057ec/tests%2Ffail%2Fprovenance%2Fstrict_provenance_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fstrict_provenance_cast.rs?ref=29b1cc72feab7e5e15d9808c855e1a2ade9057ec", "patch": "@@ -2,5 +2,5 @@\n \n fn main() {\n     let addr = &0 as *const i32 as usize;\n-    let _ptr = addr as *const i32; //~ ERROR integer-to-pointer casts and `from_exposed_addr` are not supported\n+    let _ptr = addr as *const i32; //~ ERROR integer-to-pointer casts and `ptr::from_exposed_addr` are not supported\n }"}, {"sha": "ab64f2bb288eabab1a05a21f1ee30674a7b6cb77", "filename": "tests/fail/provenance/strict_provenance_cast.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29b1cc72feab7e5e15d9808c855e1a2ade9057ec/tests%2Ffail%2Fprovenance%2Fstrict_provenance_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29b1cc72feab7e5e15d9808c855e1a2ade9057ec/tests%2Ffail%2Fprovenance%2Fstrict_provenance_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fstrict_provenance_cast.stderr?ref=29b1cc72feab7e5e15d9808c855e1a2ade9057ec", "patch": "@@ -1,10 +1,10 @@\n-error: unsupported operation: integer-to-pointer casts and `from_exposed_addr` are not supported with `-Zmiri-strict-provenance`; use `with_addr` instead\n+error: unsupported operation: integer-to-pointer casts and `ptr::from_exposed_addr` are not supported with `-Zmiri-strict-provenance`\n   --> $DIR/strict_provenance_cast.rs:LL:CC\n    |\n LL |     let _ptr = addr as *const i32;\n-   |                ^^^^^^^^^^^^^^^^^^ integer-to-pointer casts and `from_exposed_addr` are not supported with `-Zmiri-strict-provenance`; use `with_addr` instead\n+   |                ^^^^^^^^^^^^^^^^^^ integer-to-pointer casts and `ptr::from_exposed_addr` are not supported with `-Zmiri-strict-provenance`\n    |\n-   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n+   = help: use Strict Provenance APIs (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance, https://crates.io/crates/sptr) instead\n            \n    = note: inside `main` at $DIR/strict_provenance_cast.rs:LL:CC\n "}, {"sha": "41c752d5d0fc727c0f3514145be33dc52454df6d", "filename": "tests/pass/box.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29b1cc72feab7e5e15d9808c855e1a2ade9057ec/tests%2Fpass%2Fbox.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29b1cc72feab7e5e15d9808c855e1a2ade9057ec/tests%2Fpass%2Fbox.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fbox.stderr?ref=29b1cc72feab7e5e15d9808c855e1a2ade9057ec", "patch": "@@ -4,12 +4,12 @@ warning: integer-to-pointer cast\n LL |         let r2 = ((r as usize) + 0) as *mut i32;\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ integer-to-pointer cast\n    |\n-   = help: this program is using integer-to-pointer casts or (equivalently) `from_exposed_addr`,\n-   = help: which means that Miri might miss pointer bugs in this program\n-   = help: see https://doc.rust-lang.org/nightly/std/ptr/fn.from_exposed_addr.html for more details on that operation\n-   = help: to ensure that Miri does not miss bugs in your program, use `with_addr` (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance) instead\n-   = help: you can then pass the `-Zmiri-strict-provenance` flag to Miri, to ensure you are not relying on `from_exposed_addr` semantics\n-   = help: alternatively, the `-Zmiri-permissive-provenance` flag disables this warning\n+   = help: This program is using integer-to-pointer casts or (equivalently) `ptr::from_exposed_addr`,\n+   = help: which means that Miri might miss pointer bugs in this program.\n+   = help: See https://doc.rust-lang.org/nightly/std/ptr/fn.from_exposed_addr.html for more details on that operation.\n+   = help: To ensure that Miri does not miss bugs in your program, use Strict Provenance APIs (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance, https://crates.io/crates/sptr) instead.\n+   = help: You can then pass the `-Zmiri-strict-provenance` flag to Miri, to ensure you are not relying on `from_exposed_addr` semantics.\n+   = help: Alternatively, the `-Zmiri-permissive-provenance` flag disables this warning.\n            \n    = note: inside `into_raw` at $DIR/box.rs:LL:CC\n note: inside `main` at $DIR/box.rs:LL:CC"}, {"sha": "3a4acec5ddb9e7ebdb07471697333daf2d7d54cc", "filename": "tests/pass/extern_types.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29b1cc72feab7e5e15d9808c855e1a2ade9057ec/tests%2Fpass%2Fextern_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29b1cc72feab7e5e15d9808c855e1a2ade9057ec/tests%2Fpass%2Fextern_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fextern_types.stderr?ref=29b1cc72feab7e5e15d9808c855e1a2ade9057ec", "patch": "@@ -4,12 +4,12 @@ warning: integer-to-pointer cast\n LL |     let x: &Foo = unsafe { &*(16 as *const Foo) };\n    |                              ^^^^^^^^^^^^^^^^^^ integer-to-pointer cast\n    |\n-   = help: this program is using integer-to-pointer casts or (equivalently) `from_exposed_addr`,\n-   = help: which means that Miri might miss pointer bugs in this program\n-   = help: see https://doc.rust-lang.org/nightly/std/ptr/fn.from_exposed_addr.html for more details on that operation\n-   = help: to ensure that Miri does not miss bugs in your program, use `with_addr` (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance) instead\n-   = help: you can then pass the `-Zmiri-strict-provenance` flag to Miri, to ensure you are not relying on `from_exposed_addr` semantics\n-   = help: alternatively, the `-Zmiri-permissive-provenance` flag disables this warning\n+   = help: This program is using integer-to-pointer casts or (equivalently) `ptr::from_exposed_addr`,\n+   = help: which means that Miri might miss pointer bugs in this program.\n+   = help: See https://doc.rust-lang.org/nightly/std/ptr/fn.from_exposed_addr.html for more details on that operation.\n+   = help: To ensure that Miri does not miss bugs in your program, use Strict Provenance APIs (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance, https://crates.io/crates/sptr) instead.\n+   = help: You can then pass the `-Zmiri-strict-provenance` flag to Miri, to ensure you are not relying on `from_exposed_addr` semantics.\n+   = help: Alternatively, the `-Zmiri-permissive-provenance` flag disables this warning.\n            \n    = note: inside `main` at $DIR/extern_types.rs:LL:CC\n "}]}