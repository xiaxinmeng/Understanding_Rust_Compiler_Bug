{"sha": "ffce3c77e4e1dd997b1713e0c2bf151e612fc313", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmY2UzYzc3ZTRlMWRkOTk3YjE3MTNlMGMyYmYxNTFlNjEyZmMzMTM=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-08-06T06:20:50Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-08-06T06:20:50Z"}, "message": "Fix #3000", "tree": {"sha": "224d007a0ef69d4a593b426995b0edf4789de491", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/224d007a0ef69d4a593b426995b0edf4789de491"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffce3c77e4e1dd997b1713e0c2bf151e612fc313", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffce3c77e4e1dd997b1713e0c2bf151e612fc313", "html_url": "https://github.com/rust-lang/rust/commit/ffce3c77e4e1dd997b1713e0c2bf151e612fc313", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffce3c77e4e1dd997b1713e0c2bf151e612fc313/comments", "author": null, "committer": null, "parents": [{"sha": "32e4897854c111de6941bade2a9c8f40d009632e", "url": "https://api.github.com/repos/rust-lang/rust/commits/32e4897854c111de6941bade2a9c8f40d009632e", "html_url": "https://github.com/rust-lang/rust/commit/32e4897854c111de6941bade2a9c8f40d009632e"}], "stats": {"total": 76, "additions": 21, "deletions": 55}, "files": [{"sha": "5b6b362fdfc88cb7946c6c923ec393b185819c4a", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffce3c77e4e1dd997b1713e0c2bf151e612fc313/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffce3c77e4e1dd997b1713e0c2bf151e612fc313/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=ffce3c77e4e1dd997b1713e0c2bf151e612fc313", "patch": "@@ -178,6 +178,7 @@ mod reexport {\n \n pub fn register_pre_expansion_lints(session: &rustc::session::Session, store: &mut rustc::lint::LintStore) {\n     store.register_pre_expansion_pass(Some(session), box write::Pass);\n+    store.register_pre_expansion_pass(Some(session), box redundant_field_names::RedundantFieldNames);\n }\n \n #[cfg_attr(rustfmt, rustfmt_skip)]\n@@ -390,7 +391,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>) {\n     reg.register_late_lint_pass(box double_comparison::DoubleComparisonPass);\n     reg.register_late_lint_pass(box question_mark::QuestionMarkPass);\n     reg.register_late_lint_pass(box suspicious_trait_impl::SuspiciousImpl);\n-    reg.register_late_lint_pass(box redundant_field_names::RedundantFieldNames);\n     reg.register_early_lint_pass(box multiple_crate_versions::Pass);\n     reg.register_late_lint_pass(box map_unit_fn::Pass);\n     reg.register_late_lint_pass(box infallible_destructuring_match::Pass);"}, {"sha": "c5cf35edabe455246183486f72cd06c2331929e5", "filename": "clippy_lints/src/redundant_field_names.rs", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ffce3c77e4e1dd997b1713e0c2bf151e612fc313/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffce3c77e4e1dd997b1713e0c2bf151e612fc313/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_field_names.rs?ref=ffce3c77e4e1dd997b1713e0c2bf151e612fc313", "patch": "@@ -1,7 +1,7 @@\n use rustc::lint::*;\n use rustc::{declare_lint, lint_array};\n-use rustc::hir::*;\n-use crate::utils::{in_macro, match_var, span_lint_and_sugg};\n+use syntax::ast::*;\n+use crate::utils::{span_lint_and_sugg};\n \n /// **What it does:** Checks for fields in struct literals where shorthands\n /// could be used.\n@@ -35,28 +35,24 @@ impl LintPass for RedundantFieldNames {\n     }\n }\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantFieldNames {\n-    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        // Ignore all macros including range expressions.\n-        // They can have redundant field names when expanded.\n-        // e.g. range expression `start..end` is desugared to `Range { start: start, end: end }`\n-        if in_macro(expr.span) {\n-            return;\n-        }\n-\n+impl EarlyLintPass for RedundantFieldNames {\n+    fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n         if let ExprKind::Struct(_, ref fields, _) = expr.node {\n             for field in fields {\n-                let name = field.ident.name;\n-\n-                if match_var(&field.expr, name) && !field.is_shorthand {\n-                    span_lint_and_sugg (\n-                        cx,\n-                        REDUNDANT_FIELD_NAMES,\n-                        field.span,\n-                        \"redundant field names in struct initialization\",\n-                        \"replace it with\",\n-                        name.to_string()\n-                    );\n+                if field.is_shorthand {\n+                    continue;\n+                }\n+                if let ExprKind::Path(None, path) = &field.expr.node {\n+                    if path.segments.len() == 1 && path.segments[0].ident == field.ident {\n+                        span_lint_and_sugg (\n+                            cx,\n+                            REDUNDANT_FIELD_NAMES,\n+                            field.span,\n+                            \"redundant field names in struct initialization\",\n+                            \"replace it with\",\n+                            field.ident.to_string()\n+                        );\n+                    }\n                 }\n             }\n         }"}, {"sha": "d757f1871a781c4026b24485163b0cd050ef837f", "filename": "tests/ui/redundant_field_names.stderr", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ffce3c77e4e1dd997b1713e0c2bf151e612fc313/tests%2Fui%2Fredundant_field_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ffce3c77e4e1dd997b1713e0c2bf151e612fc313/tests%2Fui%2Fredundant_field_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.stderr?ref=ffce3c77e4e1dd997b1713e0c2bf151e612fc313", "patch": "@@ -12,36 +12,6 @@ error: redundant field names in struct initialization\n 35 |         age: age,\n    |         ^^^^^^^^ help: replace it with: `age`\n \n-error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:45:13\n-   |\n-45 |     let _ = start..;\n-   |             ^^^^^ help: replace it with: `start`\n-\n-error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:46:15\n-   |\n-46 |     let _ = ..end;\n-   |               ^^^ help: replace it with: `end`\n-\n-error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:47:13\n-   |\n-47 |     let _ = start..end;\n-   |             ^^^^^ help: replace it with: `start`\n-\n-error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:47:20\n-   |\n-47 |     let _ = start..end;\n-   |                    ^^^ help: replace it with: `end`\n-\n-error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:49:16\n-   |\n-49 |     let _ = ..=end;\n-   |                ^^^ help: replace it with: `end`\n-\n error: redundant field names in struct initialization\n   --> $DIR/redundant_field_names.rs:53:25\n    |\n@@ -72,5 +42,5 @@ error: redundant field names in struct initialization\n 57 |     let _ = RangeToInclusive { end: end };\n    |                                ^^^^^^^^ help: replace it with: `end`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 7 previous errors\n "}, {"sha": "a1a1de1e43941184eba6bba990da6f80c997e9cb", "filename": "tests/ui/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffce3c77e4e1dd997b1713e0c2bf151e612fc313/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffce3c77e4e1dd997b1713e0c2bf151e612fc313/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs?ref=ffce3c77e4e1dd997b1713e0c2bf151e612fc313", "patch": "@@ -1,4 +1,4 @@\n-#![allow(many_single_char_names, blacklisted_name)]\n+#![allow(many_single_char_names, blacklisted_name, redundant_field_names)]\n \n #[derive(Copy, Clone)]\n struct Foo(u32);"}]}