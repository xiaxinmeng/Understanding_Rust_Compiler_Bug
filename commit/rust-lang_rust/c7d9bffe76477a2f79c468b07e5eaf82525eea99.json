{"sha": "c7d9bffe76477a2f79c468b07e5eaf82525eea99", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ZDliZmZlNzY0NzdhMmY3OWM0NjhiMDdlNWVhZjgyNTI1ZWVhOTk=", "commit": {"author": {"name": "Tri Vo", "email": "trong@google.com", "date": "2021-01-23T02:32:38Z"}, "committer": {"name": "Tri Vo", "email": "trong@google.com", "date": "2021-02-08T07:48:58Z"}, "message": "HWASan support", "tree": {"sha": "addcee2a27c0041b9ba694a78d84ec30d86a1e19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/addcee2a27c0041b9ba694a78d84ec30d86a1e19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7d9bffe76477a2f79c468b07e5eaf82525eea99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7d9bffe76477a2f79c468b07e5eaf82525eea99", "html_url": "https://github.com/rust-lang/rust/commit/c7d9bffe76477a2f79c468b07e5eaf82525eea99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7d9bffe76477a2f79c468b07e5eaf82525eea99/comments", "author": null, "committer": null, "parents": [{"sha": "0b7a598e12649d7ab2415a82cbc3fea879fa9dab", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b7a598e12649d7ab2415a82cbc3fea879fa9dab", "html_url": "https://github.com/rust-lang/rust/commit/0b7a598e12649d7ab2415a82cbc3fea879fa9dab"}], "stats": {"total": 112, "additions": 100, "deletions": 12}, "files": [{"sha": "26111729ba5b237235640b00f2b915dc8bcc6c00", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7d9bffe76477a2f79c468b07e5eaf82525eea99/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d9bffe76477a2f79c468b07e5eaf82525eea99/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=c7d9bffe76477a2f79c468b07e5eaf82525eea99", "patch": "@@ -53,6 +53,9 @@ pub fn sanitize(cx: &CodegenCx<'ll, '_>, no_sanitize: SanitizerSet, llfn: &'ll V\n     if enabled.contains(SanitizerSet::THREAD) {\n         llvm::Attribute::SanitizeThread.apply_llfn(Function, llfn);\n     }\n+    if enabled.contains(SanitizerSet::HWADDRESS) {\n+        llvm::Attribute::SanitizeHWAddress.apply_llfn(Function, llfn);\n+    }\n }\n \n /// Tell LLVM to emit or not emit the information necessary to unwind the stack for the function."}, {"sha": "8b737c9a2e5576fcba8e80c9240a45a8a34b46bf", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7d9bffe76477a2f79c468b07e5eaf82525eea99/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d9bffe76477a2f79c468b07e5eaf82525eea99/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=c7d9bffe76477a2f79c468b07e5eaf82525eea99", "patch": "@@ -440,6 +440,8 @@ pub(crate) unsafe fn optimize_with_new_llvm_pass_manager(\n             sanitize_memory_recover: config.sanitizer_recover.contains(SanitizerSet::MEMORY),\n             sanitize_memory_track_origins: config.sanitizer_memory_track_origins as c_int,\n             sanitize_thread: config.sanitizer.contains(SanitizerSet::THREAD),\n+            sanitize_hwaddress: config.sanitizer.contains(SanitizerSet::HWADDRESS),\n+            sanitize_hwaddress_recover: config.sanitizer_recover.contains(SanitizerSet::HWADDRESS),\n         })\n     } else {\n         None\n@@ -652,6 +654,10 @@ unsafe fn add_sanitizer_passes(config: &ModuleConfig, passes: &mut Vec<&'static\n     if config.sanitizer.contains(SanitizerSet::THREAD) {\n         passes.push(llvm::LLVMRustCreateThreadSanitizerPass());\n     }\n+    if config.sanitizer.contains(SanitizerSet::HWADDRESS) {\n+        let recover = config.sanitizer_recover.contains(SanitizerSet::HWADDRESS);\n+        passes.push(llvm::LLVMRustCreateHWAddressSanitizerPass(recover));\n+    }\n }\n \n pub(crate) fn link("}, {"sha": "8c1740d8f25f0d3a5590bd5bfd5046fa4e0d59b1", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7d9bffe76477a2f79c468b07e5eaf82525eea99/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d9bffe76477a2f79c468b07e5eaf82525eea99/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=c7d9bffe76477a2f79c468b07e5eaf82525eea99", "patch": "@@ -131,6 +131,7 @@ pub enum Attribute {\n     ReturnsTwice = 25,\n     ReadNone = 26,\n     InaccessibleMemOnly = 27,\n+    SanitizeHWAddress = 28,\n }\n \n /// LLVMIntPredicate\n@@ -439,6 +440,8 @@ pub struct SanitizerOptions {\n     pub sanitize_memory_recover: bool,\n     pub sanitize_memory_track_origins: c_int,\n     pub sanitize_thread: bool,\n+    pub sanitize_hwaddress: bool,\n+    pub sanitize_hwaddress_recover: bool,\n }\n \n /// LLVMRelocMode\n@@ -2128,6 +2131,7 @@ extern \"C\" {\n         Recover: bool,\n     ) -> &'static mut Pass;\n     pub fn LLVMRustCreateThreadSanitizerPass() -> &'static mut Pass;\n+    pub fn LLVMRustCreateHWAddressSanitizerPass(Recover: bool) -> &'static mut Pass;\n     pub fn LLVMRustAddPass(PM: &PassManager<'_>, Pass: &'static mut Pass);\n     pub fn LLVMRustAddLastExtensionPasses(\n         PMB: &PassManagerBuilder,"}, {"sha": "6c58417590e695f8914eccba4138c44338f2001c", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7d9bffe76477a2f79c468b07e5eaf82525eea99/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d9bffe76477a2f79c468b07e5eaf82525eea99/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=c7d9bffe76477a2f79c468b07e5eaf82525eea99", "patch": "@@ -893,6 +893,9 @@ fn link_sanitizers(sess: &Session, crate_type: CrateType, linker: &mut dyn Linke\n     if sanitizer.contains(SanitizerSet::THREAD) {\n         link_sanitizer_runtime(sess, linker, \"tsan\");\n     }\n+    if sanitizer.contains(SanitizerSet::HWADDRESS) {\n+        link_sanitizer_runtime(sess, linker, \"hwasan\");\n+    }\n }\n \n fn link_sanitizer_runtime(sess: &Session, linker: &mut dyn Linker, name: &str) {"}, {"sha": "0e3bf5615af7bc3b5ff02fe23e7338239f7b3d90", "filename": "compiler/rustc_llvm/llvm-wrapper/LLVMWrapper.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7d9bffe76477a2f79c468b07e5eaf82525eea99/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "raw_url": "https://github.com/rust-lang/rust/raw/c7d9bffe76477a2f79c468b07e5eaf82525eea99/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h?ref=c7d9bffe76477a2f79c468b07e5eaf82525eea99", "patch": "@@ -85,6 +85,7 @@ enum LLVMRustAttribute {\n   ReturnsTwice = 25,\n   ReadNone = 26,\n   InaccessibleMemOnly = 27,\n+  SanitizeHWAddress = 28,\n };\n \n typedef struct OpaqueRustString *RustStringRef;"}, {"sha": "5263d5dcf3e8f2214cdfa3e9aff33e80598dcf23", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c7d9bffe76477a2f79c468b07e5eaf82525eea99/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c7d9bffe76477a2f79c468b07e5eaf82525eea99/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=c7d9bffe76477a2f79c468b07e5eaf82525eea99", "patch": "@@ -33,6 +33,7 @@\n #include \"llvm/Support/TimeProfiler.h\"\n #include \"llvm/Transforms/Instrumentation/ThreadSanitizer.h\"\n #include \"llvm/Transforms/Instrumentation/MemorySanitizer.h\"\n+#include \"llvm/Transforms/Instrumentation/HWAddressSanitizer.h\"\n #include \"llvm/Transforms/Utils/CanonicalizeAliases.h\"\n #include \"llvm/Transforms/Utils/NameAnonGlobals.h\"\n \n@@ -133,6 +134,12 @@ extern \"C\" LLVMPassRef LLVMRustCreateThreadSanitizerPass() {\n   return wrap(createThreadSanitizerLegacyPassPass());\n }\n \n+extern \"C\" LLVMPassRef LLVMRustCreateHWAddressSanitizerPass(bool Recover) {\n+  const bool CompileKernel = false;\n+\n+  return wrap(createHWAddressSanitizerLegacyPassPass(CompileKernel, Recover));\n+}\n+\n extern \"C\" LLVMRustPassKind LLVMRustPassKind(LLVMPassRef RustPass) {\n   assert(RustPass);\n   Pass *Pass = unwrap(RustPass);\n@@ -722,6 +729,8 @@ struct LLVMRustSanitizerOptions {\n   bool SanitizeMemoryRecover;\n   int  SanitizeMemoryTrackOrigins;\n   bool SanitizeThread;\n+  bool SanitizeHWAddress;\n+  bool SanitizeHWAddressRecover;\n };\n \n extern \"C\" void\n@@ -886,6 +895,23 @@ LLVMRustOptimizeWithNewPassManager(\n               /*CompileKernel=*/false, SanitizerOptions->SanitizeAddressRecover));\n         }\n       );\n+#endif\n+    }\n+    if (SanitizerOptions->SanitizeHWAddress) {\n+#if LLVM_VERSION_GE(11, 0)\n+      OptimizerLastEPCallbacks.push_back(\n+        [SanitizerOptions](ModulePassManager &MPM, PassBuilder::OptimizationLevel Level) {\n+          MPM.addPass(HWAddressSanitizerPass(\n+              /*CompileKernel=*/false, SanitizerOptions->SanitizeHWAddressRecover));\n+        }\n+      );\n+#else\n+      PipelineStartEPCallbacks.push_back(\n+        [SanitizerOptions](ModulePassManager &MPM) {\n+          MPM.addPass(HWAddressSanitizerPass(\n+              /*CompileKernel=*/false, SanitizerOptions->SanitizeHWAddressRecover));\n+        }\n+      );\n #endif\n     }\n   }"}, {"sha": "45835990cecbb01fb267b85dcd4d7213690640e1", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7d9bffe76477a2f79c468b07e5eaf82525eea99/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c7d9bffe76477a2f79c468b07e5eaf82525eea99/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=c7d9bffe76477a2f79c468b07e5eaf82525eea99", "patch": "@@ -205,6 +205,8 @@ static Attribute::AttrKind fromRust(LLVMRustAttribute Kind) {\n     return Attribute::ReadNone;\n   case InaccessibleMemOnly:\n     return Attribute::InaccessibleMemOnly;\n+  case SanitizeHWAddress:\n+    return Attribute::SanitizeHWAddress;\n   }\n   report_fatal_error(\"bad AttributeKind\");\n }"}, {"sha": "210dbb0ee993929c27e832ab4e3c5e0fcefee0c0", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c7d9bffe76477a2f79c468b07e5eaf82525eea99/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d9bffe76477a2f79c468b07e5eaf82525eea99/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=c7d9bffe76477a2f79c468b07e5eaf82525eea99", "patch": "@@ -43,6 +43,7 @@ bitflags! {\n         const LEAK    = 1 << 1;\n         const MEMORY  = 1 << 2;\n         const THREAD  = 1 << 3;\n+        const HWADDRESS  = 1 << 4;\n     }\n }\n \n@@ -56,6 +57,7 @@ impl fmt::Display for SanitizerSet {\n                 SanitizerSet::LEAK => \"leak\",\n                 SanitizerSet::MEMORY => \"memory\",\n                 SanitizerSet::THREAD => \"thread\",\n+                SanitizerSet::HWADDRESS => \"hwaddress\",\n                 _ => panic!(\"unrecognized sanitizer {:?}\", s),\n             };\n             if !first {\n@@ -73,12 +75,18 @@ impl IntoIterator for SanitizerSet {\n     type IntoIter = std::vec::IntoIter<SanitizerSet>;\n \n     fn into_iter(self) -> Self::IntoIter {\n-        [SanitizerSet::ADDRESS, SanitizerSet::LEAK, SanitizerSet::MEMORY, SanitizerSet::THREAD]\n-            .iter()\n-            .copied()\n-            .filter(|&s| self.contains(s))\n-            .collect::<Vec<_>>()\n-            .into_iter()\n+        [\n+            SanitizerSet::ADDRESS,\n+            SanitizerSet::LEAK,\n+            SanitizerSet::MEMORY,\n+            SanitizerSet::THREAD,\n+            SanitizerSet::HWADDRESS,\n+        ]\n+        .iter()\n+        .copied()\n+        .filter(|&s| self.contains(s))\n+        .collect::<Vec<_>>()\n+        .into_iter()\n     }\n }\n "}, {"sha": "baa0502521da748769933adf39c413e51bedfccf", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7d9bffe76477a2f79c468b07e5eaf82525eea99/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d9bffe76477a2f79c468b07e5eaf82525eea99/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=c7d9bffe76477a2f79c468b07e5eaf82525eea99", "patch": "@@ -253,7 +253,7 @@ macro_rules! options {\n         pub const parse_passes: &str = \"a space-separated list of passes, or `all`\";\n         pub const parse_panic_strategy: &str = \"either `unwind` or `abort`\";\n         pub const parse_relro_level: &str = \"one of: `full`, `partial`, or `off`\";\n-        pub const parse_sanitizers: &str = \"comma separated list of sanitizers: `address`, `leak`, `memory` or `thread`\";\n+        pub const parse_sanitizers: &str = \"comma separated list of sanitizers: `address`, `hwaddress`, `leak`, `memory` or `thread`\";\n         pub const parse_sanitizer_memory_track_origins: &str = \"0, 1, or 2\";\n         pub const parse_cfguard: &str =\n             \"either a boolean (`yes`, `no`, `on`, `off`, etc), `checks`, or `nochecks`\";\n@@ -476,6 +476,7 @@ macro_rules! options {\n                         \"leak\" => SanitizerSet::LEAK,\n                         \"memory\" => SanitizerSet::MEMORY,\n                         \"thread\" => SanitizerSet::THREAD,\n+                        \"hwaddress\" => SanitizerSet::HWADDRESS,\n                         _ => return false,\n                     }\n                 }"}, {"sha": "a7ceb9e06a5192ca111f3ac9e463a0fe8eabee48", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7d9bffe76477a2f79c468b07e5eaf82525eea99/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d9bffe76477a2f79c468b07e5eaf82525eea99/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=c7d9bffe76477a2f79c468b07e5eaf82525eea99", "patch": "@@ -1126,7 +1126,8 @@ impl Session {\n         self.opts.optimize != config::OptLevel::No\n         // AddressSanitizer uses lifetimes to detect use after scope bugs.\n         // MemorySanitizer uses lifetimes to detect use of uninitialized stack variables.\n-        || self.opts.debugging_opts.sanitizer.intersects(SanitizerSet::ADDRESS | SanitizerSet::MEMORY)\n+        // HWAddressSanitizer will use lifetimes to detect use after scope bugs in the future.\n+        || self.opts.debugging_opts.sanitizer.intersects(SanitizerSet::ADDRESS | SanitizerSet::MEMORY | SanitizerSet::HWADDRESS)\n     }\n \n     pub fn link_dead_code(&self) -> bool {\n@@ -1562,6 +1563,8 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n         \"x86_64-unknown-freebsd\",\n         \"x86_64-unknown-linux-gnu\",\n     ];\n+    const HWASAN_SUPPORTED_TARGETS: &[&str] =\n+        &[\"aarch64-linux-android\", \"aarch64-unknown-linux-gnu\"];\n \n     // Sanitizers can only be used on some tested platforms.\n     for s in sess.opts.debugging_opts.sanitizer {\n@@ -1570,6 +1573,7 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n             SanitizerSet::LEAK => LSAN_SUPPORTED_TARGETS,\n             SanitizerSet::MEMORY => MSAN_SUPPORTED_TARGETS,\n             SanitizerSet::THREAD => TSAN_SUPPORTED_TARGETS,\n+            SanitizerSet::HWADDRESS => HWASAN_SUPPORTED_TARGETS,\n             _ => panic!(\"unrecognized sanitizer {}\", s),\n         };\n         if !supported_targets.contains(&&*sess.opts.target_triple.triple()) {"}, {"sha": "1c37a6b2aca18a8b68feb1f532cb002b1955810c", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7d9bffe76477a2f79c468b07e5eaf82525eea99/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d9bffe76477a2f79c468b07e5eaf82525eea99/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=c7d9bffe76477a2f79c468b07e5eaf82525eea99", "patch": "@@ -593,6 +593,7 @@ symbols! {\n         html_no_source,\n         html_playground_url,\n         html_root_url,\n+        hwaddress,\n         i,\n         i128,\n         i128_type,"}, {"sha": "b89cbed3282ee3320a061f5291e2b5eecfe4f581", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7d9bffe76477a2f79c468b07e5eaf82525eea99/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d9bffe76477a2f79c468b07e5eaf82525eea99/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=c7d9bffe76477a2f79c468b07e5eaf82525eea99", "patch": "@@ -2628,10 +2628,12 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                         codegen_fn_attrs.no_sanitize |= SanitizerSet::MEMORY;\n                     } else if item.has_name(sym::thread) {\n                         codegen_fn_attrs.no_sanitize |= SanitizerSet::THREAD;\n+                    } else if item.has_name(sym::hwaddress) {\n+                        codegen_fn_attrs.no_sanitize |= SanitizerSet::HWADDRESS;\n                     } else {\n                         tcx.sess\n                             .struct_span_err(item.span(), \"invalid argument for `no_sanitize`\")\n-                            .note(\"expected one of: `address`, `memory` or `thread`\")\n+                            .note(\"expected one of: `address`, `hwaddress`, `memory` or `thread`\")\n                             .emit();\n                     }\n                 }"}, {"sha": "2e6e9142afe6c5a1be6a5b488d0e0c7efc79c3ce", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7d9bffe76477a2f79c468b07e5eaf82525eea99/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/c7d9bffe76477a2f79c468b07e5eaf82525eea99/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=c7d9bffe76477a2f79c468b07e5eaf82525eea99", "patch": "@@ -51,7 +51,7 @@ def v(*args):\n o(\"ninja\", \"llvm.ninja\", \"build LLVM using the Ninja generator (for MSVC, requires building in the correct environment)\")\n o(\"locked-deps\", \"build.locked-deps\", \"force Cargo.lock to be up to date\")\n o(\"vendor\", \"build.vendor\", \"enable usage of vendored Rust crates\")\n-o(\"sanitizers\", \"build.sanitizers\", \"build the sanitizer runtimes (asan, lsan, msan, tsan)\")\n+o(\"sanitizers\", \"build.sanitizers\", \"build the sanitizer runtimes (asan, lsan, msan, tsan, hwasan)\")\n o(\"dist-src\", \"rust.dist-src\", \"when building tarballs enables building a source tarball\")\n o(\"cargo-native-static\", \"build.cargo-native-static\", \"static native libraries in cargo\")\n o(\"profiler\", \"build.profiler\", \"build the profiler runtime\")"}, {"sha": "b5a8b694c9420d14e75c937c25d734789be8633c", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7d9bffe76477a2f79c468b07e5eaf82525eea99/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d9bffe76477a2f79c468b07e5eaf82525eea99/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=c7d9bffe76477a2f79c468b07e5eaf82525eea99", "patch": "@@ -804,7 +804,7 @@ fn supported_sanitizers(\n         \"aarch64-apple-darwin\" => darwin_libs(\"osx\", &[\"asan\", \"lsan\", \"tsan\"]),\n         \"aarch64-fuchsia\" => common_libs(\"fuchsia\", \"aarch64\", &[\"asan\"]),\n         \"aarch64-unknown-linux-gnu\" => {\n-            common_libs(\"linux\", \"aarch64\", &[\"asan\", \"lsan\", \"msan\", \"tsan\"])\n+            common_libs(\"linux\", \"aarch64\", &[\"asan\", \"lsan\", \"msan\", \"tsan\", \"hwasan\"])\n         }\n         \"x86_64-apple-darwin\" => darwin_libs(\"osx\", &[\"asan\", \"lsan\", \"tsan\"]),\n         \"x86_64-fuchsia\" => common_libs(\"fuchsia\", \"x86_64\", &[\"asan\"]),"}, {"sha": "4c0b17c7d376979eb422c9f276f4ecbbaa03b2c2", "filename": "src/test/ui/invalid/invalid-no-sanitize.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7d9bffe76477a2f79c468b07e5eaf82525eea99/src%2Ftest%2Fui%2Finvalid%2Finvalid-no-sanitize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7d9bffe76477a2f79c468b07e5eaf82525eea99/src%2Ftest%2Fui%2Finvalid%2Finvalid-no-sanitize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-no-sanitize.stderr?ref=c7d9bffe76477a2f79c468b07e5eaf82525eea99", "patch": "@@ -4,7 +4,7 @@ error: invalid argument for `no_sanitize`\n LL | #[no_sanitize(brontosaurus)]\n    |               ^^^^^^^^^^^^\n    |\n-   = note: expected one of: `address`, `memory` or `thread`\n+   = note: expected one of: `address`, `hwaddress`, `memory` or `thread`\n \n error: aborting due to previous error\n "}, {"sha": "ad5d0245457ec9a65b789ff07564255ed63cda41", "filename": "src/test/ui/sanitize/hwaddress.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c7d9bffe76477a2f79c468b07e5eaf82525eea99/src%2Ftest%2Fui%2Fsanitize%2Fhwaddress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d9bffe76477a2f79c468b07e5eaf82525eea99/src%2Ftest%2Fui%2Fsanitize%2Fhwaddress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fhwaddress.rs?ref=c7d9bffe76477a2f79c468b07e5eaf82525eea99", "patch": "@@ -0,0 +1,19 @@\n+// needs-sanitizer-support\n+// needs-sanitizer-hwaddress\n+//\n+// compile-flags: -Z sanitizer=hwaddress -O -g\n+//\n+// run-fail\n+// error-pattern: HWAddressSanitizer: tag-mismatch\n+\n+#![feature(test)]\n+\n+use std::hint::black_box;\n+\n+fn main() {\n+    let xs = vec![0, 1, 2, 3];\n+    // Avoid optimizing everything out.\n+    let xs = black_box(xs.as_ptr());\n+    let code = unsafe { *xs.offset(4) };\n+    std::process::exit(code);\n+}"}, {"sha": "becb6037e0bf448929b2effaef4c7a77a8a622ee", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c7d9bffe76477a2f79c468b07e5eaf82525eea99/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d9bffe76477a2f79c468b07e5eaf82525eea99/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=c7d9bffe76477a2f79c468b07e5eaf82525eea99", "patch": "@@ -48,6 +48,7 @@ impl EarlyProps {\n         let has_lsan = util::LSAN_SUPPORTED_TARGETS.contains(&&*config.target);\n         let has_msan = util::MSAN_SUPPORTED_TARGETS.contains(&&*config.target);\n         let has_tsan = util::TSAN_SUPPORTED_TARGETS.contains(&&*config.target);\n+        let has_hwasan = util::HWASAN_SUPPORTED_TARGETS.contains(&&*config.target);\n \n         iter_header(testfile, None, rdr, &mut |ln| {\n             // we should check if any only-<platform> exists and if it exists\n@@ -101,6 +102,10 @@ impl EarlyProps {\n                     props.ignore = true;\n                 }\n \n+                if !has_hwasan && config.parse_name_directive(ln, \"needs-sanitizer-hwaddress\") {\n+                    props.ignore = true;\n+                }\n+\n                 if config.target == \"wasm32-unknown-unknown\" && config.parse_check_run_results(ln) {\n                     props.ignore = true;\n                 }"}, {"sha": "b302953708c18d879c75a0c576a4e5c930851964", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7d9bffe76477a2f79c468b07e5eaf82525eea99/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d9bffe76477a2f79c468b07e5eaf82525eea99/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=c7d9bffe76477a2f79c468b07e5eaf82525eea99", "patch": "@@ -110,6 +110,9 @@ pub const TSAN_SUPPORTED_TARGETS: &[&str] = &[\n     \"x86_64-unknown-linux-gnu\",\n ];\n \n+pub const HWASAN_SUPPORTED_TARGETS: &[&str] =\n+    &[\"aarch64-linux-android\", \"aarch64-unknown-linux-gnu\"];\n+\n const BIG_ENDIAN: &[&str] = &[\n     \"aarch64_be\",\n     \"armebv7r\","}]}