{"sha": "e66a89c8afe8da0c784943502343c8620c156366", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NmE4OWM4YWZlOGRhMGM3ODQ5NDM1MDIzNDNjODYyMGMxNTYzNjY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-04-05T10:26:27Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-04-05T10:37:22Z"}, "message": "avoid some dead code and test no_run tests", "tree": {"sha": "0c63b4fe4e46032a7b2bd5993b74bf9760804a56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c63b4fe4e46032a7b2bd5993b74bf9760804a56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e66a89c8afe8da0c784943502343c8620c156366", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e66a89c8afe8da0c784943502343c8620c156366", "html_url": "https://github.com/rust-lang/rust/commit/e66a89c8afe8da0c784943502343c8620c156366", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e66a89c8afe8da0c784943502343c8620c156366/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29bc8a57b09f3259ae83b844c6c29e01f1ba00c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/29bc8a57b09f3259ae83b844c6c29e01f1ba00c6", "html_url": "https://github.com/rust-lang/rust/commit/29bc8a57b09f3259ae83b844c6c29e01f1ba00c6"}], "stats": {"total": 60, "additions": 31, "deletions": 29}, "files": [{"sha": "5d2759deea3db39c1ee88f1a3dc54d2bb79e9e3c", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e66a89c8afe8da0c784943502343c8620c156366/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e66a89c8afe8da0c784943502343c8620c156366/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=e66a89c8afe8da0c784943502343c8620c156366", "patch": "@@ -38,7 +38,7 @@ enum MiriCommand {\n }\n \n /// The information to run a crate with the given environment.\n-#[derive(Serialize, Deserialize)]\n+#[derive(Serialize, Deserialize, Clone)]\n struct CrateRunEnv {\n     /// The command-line arguments.\n     args: Vec<String>,\n@@ -50,16 +50,7 @@ struct CrateRunEnv {\n     stdin: Vec<u8>,\n }\n \n-/// The information Miri needs to run a crate. Stored as JSON when the crate is \"compiled\".\n-#[derive(Serialize, Deserialize)]\n-enum CrateRunInfo {\n-    /// Run it with the given environment.\n-    RunWith(CrateRunEnv),\n-    /// Skip it as Miri does not support interpreting such kind of crates.\n-    SkipProcMacroTest,\n-}\n-\n-impl CrateRunInfo {\n+impl CrateRunEnv {\n     /// Gather all the information we need.\n     fn collect(args: env::Args) -> Self {\n         let args = args.collect();\n@@ -71,9 +62,20 @@ impl CrateRunInfo {\n             std::io::stdin().lock().read_to_end(&mut stdin).expect(\"cannot read stdin\");\n         }\n \n-        Self::RunWith(CrateRunEnv { args, env, current_dir, stdin })\n+        CrateRunEnv { args, env, current_dir, stdin }\n     }\n+}\n \n+/// The information Miri needs to run a crate. Stored as JSON when the crate is \"compiled\".\n+#[derive(Serialize, Deserialize)]\n+enum CrateRunInfo {\n+    /// Run it with the given environment.\n+    RunWith(CrateRunEnv),\n+    /// Skip it as Miri does not support interpreting such kind of crates.\n+    SkipProcMacroTest,\n+}\n+\n+impl CrateRunInfo {\n     fn store(&self, filename: &Path) {\n         let file = File::create(filename)\n             .unwrap_or_else(|_| show_error(format!(\"cannot create `{}`\", filename.display())));\n@@ -644,7 +646,7 @@ fn phase_cargo_rustc(mut args: env::Args) {\n     let target_crate = is_target_crate();\n     let print = get_arg_flag_value(\"--print\").is_some(); // whether this is cargo passing `--print` to get some infos\n \n-    let store_json = |info: &CrateRunInfo| {\n+    let store_json = |info: CrateRunInfo| {\n         // Create a stub .d file to stop Cargo from \"rebuilding\" the crate:\n         // https://github.com/rust-lang/miri/issues/1724#issuecomment-787115693\n         // As we store a JSON file instead of building the crate here, an empty file is fine.\n@@ -672,30 +674,24 @@ fn phase_cargo_rustc(mut args: env::Args) {\n         // like we want them.\n         // Instead of compiling, we write JSON into the output file with all the relevant command-line flags\n         // and environment variables; this is used when cargo calls us again in the CARGO_TARGET_RUNNER phase.\n-        let info = CrateRunInfo::collect(args);\n-        store_json(&info);\n+        let env = CrateRunEnv::collect(args);\n \n         // Rustdoc expects us to exit with an error code if the test is marked as `compile_fail`,\n         // just creating the JSON file is not enough: we need to detect syntax errors,\n         // so we need to run Miri with `MIRI_BE_RUSTC` for a check-only build.\n         if std::env::var_os(\"MIRI_CALLED_FROM_RUSTDOC\").is_some() {\n             let mut cmd = miri();\n-            let env = if let CrateRunInfo::RunWith(env) = info {\n-                env\n-            } else {\n-                return;\n-            };\n \n-            // ensure --emit argument for a check-only build is present\n+            // Ensure --emit argument for a check-only build is present.\n             if let Some(i) = env.args.iter().position(|arg| arg.starts_with(\"--emit=\")) {\n-                // We need to make sure we're not producing a binary that overwrites the JSON file.\n-                // rustdoc should only ever pass an --emit=metadata argument for tests marked as `no_run`:\n+                // For `no_run` tests, rustdoc passes a `--emit` flag; make sure it has the right shape.\n                 assert_eq!(env.args[i], \"--emit=metadata\");\n             } else {\n-                cmd.arg(\"--emit=dep-info,metadata\");\n+                // For all other kinds of tests, we can just add our flag.\n+                cmd.arg(\"--emit=metadata\");\n             }\n \n-            cmd.args(env.args);\n+            cmd.args(&env.args);\n             cmd.env(\"MIRI_BE_RUSTC\", \"1\");\n \n             if verbose {\n@@ -706,14 +702,16 @@ fn phase_cargo_rustc(mut args: env::Args) {\n             exec_with_pipe(cmd, &env.stdin);\n         }\n \n+        store_json(CrateRunInfo::RunWith(env));\n+\n         return;\n     }\n \n     if runnable_crate && ArgFlagValueIter::new(\"--extern\").any(|krate| krate == \"proc_macro\") {\n         // This is a \"runnable\" `proc-macro` crate (unit tests). We do not support\n         // interpreting that under Miri now, so we write a JSON file to (display a\n         // helpful message and) skip it in the runner phase.\n-        store_json(&CrateRunInfo::SkipProcMacroTest);\n+        store_json(CrateRunInfo::SkipProcMacroTest);\n         return;\n     }\n "}, {"sha": "0c268a18f63c430e01e7d4747696724a07793acc", "filename": "test-cargo-miri/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e66a89c8afe8da0c784943502343c8620c156366/test-cargo-miri%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e66a89c8afe8da0c784943502343c8620c156366/test-cargo-miri%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fsrc%2Flib.rs?ref=e66a89c8afe8da0c784943502343c8620c156366", "patch": "@@ -2,6 +2,9 @@\n /// ```rust\n /// assert!(cargo_miri_test::make_true());\n /// ```\n+/// ```rust,no_run\n+/// assert!(cargo_miri_test::make_true());\n+/// ```\n /// ```rust,compile_fail\n /// assert!(cargo_miri_test::make_true() == 5);\n /// ```"}, {"sha": "72ae7e94a146260956da70d5c22e6e098bd2a6a7", "filename": "test-cargo-miri/test.default.stdout.ref", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e66a89c8afe8da0c784943502343c8620c156366/test-cargo-miri%2Ftest.default.stdout.ref", "raw_url": "https://github.com/rust-lang/rust/raw/e66a89c8afe8da0c784943502343c8620c156366/test-cargo-miri%2Ftest.default.stdout.ref", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftest.default.stdout.ref?ref=e66a89c8afe8da0c784943502343c8620c156366", "patch": "@@ -9,9 +9,10 @@ running 7 tests\n test result: ok. 6 passed; 0 failed; 1 ignored; 0 measured; 0 filtered out\n \n \n-running 2 tests\n+running 3 tests\n test src/lib.rs - make_true (line 5) ... ok\n+test src/lib.rs - make_true (line 8) ... ok\n test src/lib.rs - make_true (line 2) ... ok\n \n-test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n+test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n "}, {"sha": "11e47e8ff81652861f2a7efca84acabbb8fb2f07", "filename": "test-cargo-miri/test.filter.stdout.ref", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e66a89c8afe8da0c784943502343c8620c156366/test-cargo-miri%2Ftest.filter.stdout.ref", "raw_url": "https://github.com/rust-lang/rust/raw/e66a89c8afe8da0c784943502343c8620c156366/test-cargo-miri%2Ftest.filter.stdout.ref", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftest.filter.stdout.ref?ref=e66a89c8afe8da0c784943502343c8620c156366", "patch": "@@ -12,5 +12,5 @@ test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 6 filtered out\n \n running 0 tests\n \n-test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out; finished in $TIME\n+test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 3 filtered out; finished in $TIME\n "}]}