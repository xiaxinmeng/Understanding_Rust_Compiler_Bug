{"sha": "d9a88be0b05c2cfec0679caf428d129c9d46256d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5YTg4YmUwYjA1YzJjZmVjMDY3OWNhZjQyOGQxMjljOWQ0NjI1NmQ=", "commit": {"author": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-06-17T22:24:12Z"}, "committer": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-09-24T21:02:05Z"}, "message": "Rename `get_offset` and its private items", "tree": {"sha": "8f37b5089317ef90406529fa989da83c149e327c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f37b5089317ef90406529fa989da83c149e327c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9a88be0b05c2cfec0679caf428d129c9d46256d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9a88be0b05c2cfec0679caf428d129c9d46256d", "html_url": "https://github.com/rust-lang/rust/commit/d9a88be0b05c2cfec0679caf428d129c9d46256d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9a88be0b05c2cfec0679caf428d129c9d46256d/comments", "author": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8da6cfd17b7707d678d01a6688572169015ea83e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8da6cfd17b7707d678d01a6688572169015ea83e", "html_url": "https://github.com/rust-lang/rust/commit/8da6cfd17b7707d678d01a6688572169015ea83e"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "98c411f5ae60e92afc6b0bb96a7cd6aba7d90d9b", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d9a88be0b05c2cfec0679caf428d129c9d46256d/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9a88be0b05c2cfec0679caf428d129c9d46256d/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=d9a88be0b05c2cfec0679caf428d129c9d46256d", "patch": "@@ -942,20 +942,20 @@ fn fetch_cloned_expr<'tcx>(expr: &'tcx Expr<'tcx>) -> &'tcx Expr<'tcx> {\n     }\n }\n \n-fn get_offset<'tcx>(\n+fn get_details_from_idx<'tcx>(\n     cx: &LateContext<'tcx>,\n     idx: &Expr<'_>,\n     starts: &[Start<'tcx>],\n ) -> Option<(StartKind<'tcx>, Offset)> {\n-    fn extract_start<'tcx>(\n+    fn get_start<'tcx>(\n         cx: &LateContext<'tcx>,\n-        expr: &Expr<'_>,\n+        e: &Expr<'_>,\n         starts: &[Start<'tcx>],\n     ) -> Option<StartKind<'tcx>> {\n-        starts.iter().find(|var| same_var(cx, expr, var.id)).map(|v| v.kind)\n+        starts.iter().find(|var| same_var(cx, e, var.id)).map(|v| v.kind)\n     }\n \n-    fn extract_offset<'tcx>(\n+    fn get_offset<'tcx>(\n         cx: &LateContext<'tcx>,\n         e: &Expr<'_>,\n         starts: &[Start<'tcx>],\n@@ -965,7 +965,7 @@ fn get_offset<'tcx>(\n                 ast::LitKind::Int(x, _ty) => Some(MinifyingSugg::non_paren(x.to_string())),\n                 _ => None,\n             },\n-            ExprKind::Path(..) if extract_start(cx, e, starts).is_none() => {\n+            ExprKind::Path(..) if get_start(cx, e, starts).is_none() => {\n                 // `e` is always non paren as it's a `Path`\n                 Some(MinifyingSugg::non_paren(snippet(cx, e.span, \"???\")))\n             },\n@@ -976,21 +976,22 @@ fn get_offset<'tcx>(\n     match idx.kind {\n         ExprKind::Binary(op, lhs, rhs) => match op.node {\n             BinOpKind::Add => {\n-                let offset_opt = if let Some(s) = extract_start(cx, lhs, starts) {\n-                    extract_offset(cx, rhs, starts).map(|o| (s, o))\n-                } else if let Some(s) = extract_start(cx, rhs, starts) {\n-                    extract_offset(cx, lhs, starts).map(|o| (s, o))\n+                let offset_opt = if let Some(s) = get_start(cx, lhs, starts) {\n+                    get_offset(cx, rhs, starts).map(|o| (s, o))\n+                } else if let Some(s) = get_start(cx, rhs, starts) {\n+                    get_offset(cx, lhs, starts).map(|o| (s, o))\n                 } else {\n                     None\n                 };\n \n                 offset_opt.map(|(s, o)| (s, Offset::positive(o)))\n             },\n-            BinOpKind::Sub => extract_start(cx, lhs, starts)\n-                .and_then(|s| extract_offset(cx, rhs, starts).map(|o| (s, Offset::negative(o)))),\n+            BinOpKind::Sub => {\n+                get_start(cx, lhs, starts).and_then(|s| get_offset(cx, rhs, starts).map(|o| (s, Offset::negative(o))))\n+            },\n             _ => None,\n         },\n-        ExprKind::Path(..) => extract_start(cx, idx, starts).map(|s| (s, Offset::empty())),\n+        ExprKind::Path(..) => get_start(cx, idx, starts).map(|s| (s, Offset::empty())),\n         _ => None,\n     }\n }\n@@ -1196,8 +1197,8 @@ fn detect_manual_memcpy<'tcx>(\n                             if let ExprKind::Index(base_right, idx_right) = rhs.kind;\n                             if is_slice_like(cx, cx.typeck_results().expr_ty(base_left))\n                                 && is_slice_like(cx, cx.typeck_results().expr_ty(base_right));\n-                            if let Some((start_left, offset_left)) = get_offset(cx, &idx_left, &starts);\n-                            if let Some((start_right, offset_right)) = get_offset(cx, &idx_right, &starts);\n+                            if let Some((start_left, offset_left)) = get_details_from_idx(cx, &idx_left, &starts);\n+                            if let Some((start_right, offset_right)) = get_details_from_idx(cx, &idx_right, &starts);\n \n                             // Source and destination must be different\n                             if var_def_id(cx, base_left) != var_def_id(cx, base_right);"}]}