{"sha": "a2b59b110fc417ec90b7f24882a416dd8a8fe618", "node_id": "C_kwDOAAsO6NoAKGEyYjU5YjExMGZjNDE3ZWM5MGI3ZjI0ODgyYTQxNmRkOGE4ZmU2MTg", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-26T13:21:00Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-26T13:26:03Z"}, "message": "Report config errors via status", "tree": {"sha": "b3fa7b73bb01d1a547874ffb3c0e0440a71b3bc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3fa7b73bb01d1a547874ffb3c0e0440a71b3bc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2b59b110fc417ec90b7f24882a416dd8a8fe618", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2b59b110fc417ec90b7f24882a416dd8a8fe618", "html_url": "https://github.com/rust-lang/rust/commit/a2b59b110fc417ec90b7f24882a416dd8a8fe618", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2b59b110fc417ec90b7f24882a416dd8a8fe618/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79fe11ced3283b88c4a24da972e1649eb16a9f1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/79fe11ced3283b88c4a24da972e1649eb16a9f1b", "html_url": "https://github.com/rust-lang/rust/commit/79fe11ced3283b88c4a24da972e1649eb16a9f1b"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "05567f8f579cfc16bdf33bb6e6e9304575d0a340", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a2b59b110fc417ec90b7f24882a416dd8a8fe618/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b59b110fc417ec90b7f24882a416dd8a8fe618/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=a2b59b110fc417ec90b7f24882a416dd8a8fe618", "patch": "@@ -720,11 +720,11 @@ pub struct ClientCommandsConfig {\n }\n \n #[derive(Debug)]\n-pub struct ConfigUpdateError {\n+pub struct ConfigError {\n     errors: Vec<(String, serde_json::Error)>,\n }\n \n-impl fmt::Display for ConfigUpdateError {\n+impl fmt::Display for ConfigError {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let errors = self.errors.iter().format_with(\"\\n\", |(key, e), f| {\n             f(key)?;\n@@ -733,7 +733,7 @@ impl fmt::Display for ConfigUpdateError {\n         });\n         write!(\n             f,\n-            \"rust-analyzer found {} invalid config value{}:\\n{}\",\n+            \"invalid config value{}:\\n{}\",\n             self.errors.len(),\n             if self.errors.len() == 1 { \"\" } else { \"s\" },\n             errors\n@@ -777,7 +777,7 @@ impl Config {\n         self.workspace_roots.extend(paths);\n     }\n \n-    pub fn update(&mut self, mut json: serde_json::Value) -> Result<(), ConfigUpdateError> {\n+    pub fn update(&mut self, mut json: serde_json::Value) -> Result<(), ConfigError> {\n         tracing::info!(\"updating config from JSON: {:#}\", json);\n         if json.is_null() || json.as_object().map_or(false, |it| it.is_empty()) {\n             return Ok(());\n@@ -824,7 +824,7 @@ impl Config {\n         if errors.is_empty() {\n             Ok(())\n         } else {\n-            Err(ConfigUpdateError { errors })\n+            Err(ConfigError { errors })\n         }\n     }\n "}, {"sha": "d68e51240b79d064ded34c1fcb8d54a349aff3f8", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2b59b110fc417ec90b7f24882a416dd8a8fe618/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b59b110fc417ec90b7f24882a416dd8a8fe618/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=a2b59b110fc417ec90b7f24882a416dd8a8fe618", "patch": "@@ -19,7 +19,7 @@ use triomphe::Arc;\n use vfs::AnchoredPathBuf;\n \n use crate::{\n-    config::Config,\n+    config::{Config, ConfigError},\n     diagnostics::{CheckFixes, DiagnosticCollection},\n     from_proto,\n     line_index::{LineEndings, LineIndex},\n@@ -56,6 +56,7 @@ pub(crate) struct GlobalState {\n     pub(crate) task_pool: Handle<TaskPool<Task>, Receiver<Task>>,\n \n     pub(crate) config: Arc<Config>,\n+    pub(crate) config_errors: Option<ConfigError>,\n     pub(crate) analysis_host: AnalysisHost,\n     pub(crate) diagnostics: DiagnosticCollection,\n     pub(crate) mem_docs: MemDocs,\n@@ -168,6 +169,7 @@ impl GlobalState {\n             shutdown_requested: false,\n             last_reported_status: None,\n             source_root_config: SourceRootConfig::default(),\n+            config_errors: Default::default(),\n \n             proc_macro_changed: false,\n             // FIXME: use `Arc::from_iter` when it becomes available"}, {"sha": "481004988d3ed2a22f8f34d13b34fbc847b62ecb", "filename": "crates/rust-analyzer/src/handlers/notification.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a2b59b110fc417ec90b7f24882a416dd8a8fe618/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Fnotification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b59b110fc417ec90b7f24882a416dd8a8fe618/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Fnotification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Fnotification.rs?ref=a2b59b110fc417ec90b7f24882a416dd8a8fe618", "patch": "@@ -169,13 +169,7 @@ pub(crate) fn handle_did_change_configuration(\n                         // Note that json can be null according to the spec if the client can't\n                         // provide a configuration. This is handled in Config::update below.\n                         let mut config = Config::clone(&*this.config);\n-                        if let Err(error) = config.update(json.take()) {\n-                            this.show_message(\n-                                lsp_types::MessageType::WARNING,\n-                                error.to_string(),\n-                                false,\n-                            );\n-                        }\n+                        config.update(json.take());\n                         this.update_configuration(config);\n                     }\n                 }"}, {"sha": "49595a45ea9dea733258ce7c53bbcd2a35dfa530", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2b59b110fc417ec90b7f24882a416dd8a8fe618/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b59b110fc417ec90b7f24882a416dd8a8fe618/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=a2b59b110fc417ec90b7f24882a416dd8a8fe618", "patch": "@@ -419,7 +419,11 @@ impl GlobalState {\n \n             if self.config.server_status_notification() {\n                 self.send_notification::<lsp_ext::ServerStatusNotification>(status);\n-            } else if let (health, Some(message)) = (status.health, &status.message) {\n+            } else if let (\n+                health @ (lsp_ext::Health::Warning | lsp_ext::Health::Error),\n+                Some(message),\n+            ) = (status.health, &status.message)\n+            {\n                 let open_log_button = tracing::enabled!(tracing::Level::ERROR)\n                     && (self.fetch_build_data_error().is_err()\n                         || self.fetch_workspace_error().is_err());"}, {"sha": "5300349e7d2ce14a11b17af6cd3ac25472fee346", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a2b59b110fc417ec90b7f24882a416dd8a8fe618/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b59b110fc417ec90b7f24882a416dd8a8fe618/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=a2b59b110fc417ec90b7f24882a416dd8a8fe618", "patch": "@@ -27,6 +27,7 @@ use ide_db::{\n use itertools::Itertools;\n use proc_macro_api::{MacroDylib, ProcMacroServer};\n use project_model::{PackageRoot, ProjectWorkspace, WorkspaceBuildScripts};\n+use stdx::format_to;\n use syntax::SmolStr;\n use triomphe::Arc;\n use vfs::{file_set::FileSetConfig, AbsPath, AbsPathBuf, ChangeKind};\n@@ -134,6 +135,10 @@ impl GlobalState {\n             message.push_str(\"Failed to discover workspace.\\n\");\n             message.push_str(\"Consider adding the `Cargo.toml` of the workspace to the [`linkedProjects`](https://rust-analyzer.github.io/manual.html#rust-analyzer.linkedProjects) setting.\\n\\n\");\n         }\n+        if let Some(err) = &self.config_errors {\n+            status.health = lsp_ext::Health::Warning;\n+            format_to!(message, \"{err}\\n\");\n+        }\n \n         for ws in self.workspaces.iter() {\n             let (ProjectWorkspace::Cargo { sysroot, .. }"}]}