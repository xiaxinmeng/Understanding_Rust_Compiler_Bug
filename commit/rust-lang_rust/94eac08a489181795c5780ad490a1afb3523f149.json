{"sha": "94eac08a489181795c5780ad490a1afb3523f149", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ZWFjMDhhNDg5MTgxNzk1YzU3ODBhZDQ5MGExYWZiMzUyM2YxNDk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-12T14:11:15Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-12T14:11:15Z"}, "message": "Extract TargetIsa building to a separate function", "tree": {"sha": "62aa4bc5cdc7e7b28fb5260b6c447b7921c89fd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62aa4bc5cdc7e7b28fb5260b6c447b7921c89fd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94eac08a489181795c5780ad490a1afb3523f149", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94eac08a489181795c5780ad490a1afb3523f149", "html_url": "https://github.com/rust-lang/rust/commit/94eac08a489181795c5780ad490a1afb3523f149", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94eac08a489181795c5780ad490a1afb3523f149/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5538c15a436c7449f842ce207940f3248b8f5ec9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5538c15a436c7449f842ce207940f3248b8f5ec9", "html_url": "https://github.com/rust-lang/rust/commit/5538c15a436c7449f842ce207940f3248b8f5ec9"}], "stats": {"total": 60, "additions": 31, "deletions": 29}, "files": [{"sha": "a2ebf470b3d4428dbc3ec2fe05df9517643fcf6e", "filename": "src/lib.rs", "status": "modified", "additions": 31, "deletions": 29, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/94eac08a489181795c5780ad490a1afb3523f149/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94eac08a489181795c5780ad490a1afb3523f149/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=94eac08a489181795c5780ad490a1afb3523f149", "patch": "@@ -171,35 +171,6 @@ impl CodegenBackend for CraneliftCodegenBackend {\n \n         let metadata = tcx.encode_metadata();\n \n-        let mut flags_builder = settings::builder();\n-        flags_builder.enable(\"is_pic\").unwrap();\n-        flags_builder.set(\"enable_verifier\", if cfg!(debug_assertions) {\n-            \"true\"\n-        } else {\n-            \"false\"\n-        }).unwrap();\n-\n-        use rustc::session::config::OptLevel;\n-        match tcx.sess.opts.optimize {\n-            OptLevel::No => {\n-                flags_builder.set(\"opt_level\", \"fastest\").unwrap();\n-            }\n-            OptLevel::Less | OptLevel::Default => {}\n-            OptLevel::Aggressive => {\n-                flags_builder.set(\"opt_level\", \"best\").unwrap();\n-            }\n-            OptLevel::Size | OptLevel::SizeMin => {\n-                tcx.sess\n-                    .warn(\"Optimizing for size is not supported. Just ignoring the request\");\n-            }\n-        }\n-\n-        let flags = settings::Flags::new(flags_builder);\n-        let isa =\n-            cranelift::codegen::isa::lookup(tcx.sess.target.target.llvm_target.parse().unwrap())\n-                .unwrap()\n-                .finish(flags);\n-\n         // TODO: move to the end of this function when compiling libcore doesn't have unimplemented stuff anymore\n         save_incremental(tcx);\n         tcx.sess.warn(\"Saved incremental data\");\n@@ -245,6 +216,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             jit_module.finish();\n             ::std::process::exit(0);\n         } else {\n+            let isa = build_isa(tcx.sess);\n             let mut faerie_module: Module<FaerieBackend> = Module::new(\n                 FaerieBuilder::new(\n                     isa,\n@@ -322,6 +294,36 @@ impl CodegenBackend for CraneliftCodegenBackend {\n     }\n }\n \n+fn build_isa(sess: &Session) -> Box<isa::TargetIsa + 'static> {\n+    use rustc::session::config::OptLevel;\n+\n+    let mut flags_builder = settings::builder();\n+    flags_builder.enable(\"is_pic\").unwrap();\n+    flags_builder.set(\"enable_verifier\", if cfg!(debug_assertions) {\n+        \"true\"\n+    } else {\n+        \"false\"\n+    }).unwrap();\n+\n+    match sess.opts.optimize {\n+        OptLevel::No => {\n+            flags_builder.set(\"opt_level\", \"fastest\").unwrap();\n+        }\n+        OptLevel::Less | OptLevel::Default => {}\n+        OptLevel::Aggressive => {\n+            flags_builder.set(\"opt_level\", \"best\").unwrap();\n+        }\n+        OptLevel::Size | OptLevel::SizeMin => {\n+            sess.warn(\"Optimizing for size is not supported. Just ignoring the request\");\n+        }\n+    }\n+\n+    let flags = settings::Flags::new(flags_builder);\n+    cranelift::codegen::isa::lookup(sess.target.target.llvm_target.parse().unwrap())\n+        .unwrap()\n+        .finish(flags)\n+}\n+\n fn codegen_mono_items<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     module: &mut Module<impl Backend + 'static>,"}]}