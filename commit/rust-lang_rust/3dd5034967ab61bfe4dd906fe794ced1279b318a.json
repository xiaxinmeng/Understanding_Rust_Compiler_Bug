{"sha": "3dd5034967ab61bfe4dd906fe794ced1279b318a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZDUwMzQ5NjdhYjYxYmZlNGRkOTA2ZmU3OTRjZWQxMjc5YjMxOGE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-11-20T21:16:25Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-12-11T11:18:55Z"}, "message": "Restore old match behaviour", "tree": {"sha": "07c48c8f22ad9390a0b4fe1d7d32bea18a48a12a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07c48c8f22ad9390a0b4fe1d7d32bea18a48a12a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dd5034967ab61bfe4dd906fe794ced1279b318a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dd5034967ab61bfe4dd906fe794ced1279b318a", "html_url": "https://github.com/rust-lang/rust/commit/3dd5034967ab61bfe4dd906fe794ced1279b318a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dd5034967ab61bfe4dd906fe794ced1279b318a/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6561732f887e9e379293821d4d802a6fa1c44fd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6561732f887e9e379293821d4d802a6fa1c44fd6", "html_url": "https://github.com/rust-lang/rust/commit/6561732f887e9e379293821d4d802a6fa1c44fd6"}], "stats": {"total": 36, "additions": 32, "deletions": 4}, "files": [{"sha": "a251b723d61fcff12f6f57ea702431e36ad4c4f6", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3dd5034967ab61bfe4dd906fe794ced1279b318a/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd5034967ab61bfe4dd906fe794ced1279b318a/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=3dd5034967ab61bfe4dd906fe794ced1279b318a", "patch": "@@ -230,7 +230,11 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n                 let scrutinee_is_uninhabited = if self.tcx.features().exhaustive_patterns {\n                     self.tcx.is_ty_uninhabited_from(module, pat_ty)\n                 } else {\n-                    pat_ty.is_never()\n+                    match pat_ty.sty {\n+                        ty::Never => true,\n+                        ty::Adt(def, _) => def.variants.is_empty(),\n+                        _ => false\n+                    }\n                 };\n                 if !scrutinee_is_uninhabited {\n                     // We know the type is inhabited, so this must be wrong"}, {"sha": "1d3f8ff12d865650156ba18f24d64215e2e3e988", "filename": "src/test/ui/uninhabited/uninhabited-matches-feature-gated.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dd5034967ab61bfe4dd906fe794ced1279b318a/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd5034967ab61bfe4dd906fe794ced1279b318a/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.rs?ref=3dd5034967ab61bfe4dd906fe794ced1279b318a", "patch": "@@ -20,10 +20,10 @@ fn main() {\n     let _ = match x {}; //~ ERROR non-exhaustive\n \n     let x: (Void,) = unsafe { std::mem::uninitialized() };\n-    let _ = match x {}; // okay\n+    let _ = match x {}; //~ ERROR non-exhaustive\n \n     let x: [Void; 1] = unsafe { std::mem::uninitialized() };\n-    let _ = match x {}; // okay\n+    let _ = match x {}; //~ ERROR non-exhaustive\n \n     let x: &[Void] = unsafe { std::mem::uninitialized() };\n     let _ = match x {   //~ ERROR non-exhaustive"}, {"sha": "5b5b6df85fc0f1c378ebe44094938d4b3c26ee07", "filename": "src/test/ui/uninhabited/uninhabited-matches-feature-gated.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3dd5034967ab61bfe4dd906fe794ced1279b318a/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3dd5034967ab61bfe4dd906fe794ced1279b318a/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr?ref=3dd5034967ab61bfe4dd906fe794ced1279b318a", "patch": "@@ -16,6 +16,30 @@ help: ensure that all possible cases are being handled, possibly by adding wildc\n LL |     let _ = match x {}; //~ ERROR non-exhaustive\n    |                   ^\n \n+error[E0004]: non-exhaustive patterns: type (Void,) is non-empty\n+  --> $DIR/uninhabited-matches-feature-gated.rs:23:19\n+   |\n+LL |     let _ = match x {}; //~ ERROR non-exhaustive\n+   |                   ^\n+   |\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+  --> $DIR/uninhabited-matches-feature-gated.rs:23:19\n+   |\n+LL |     let _ = match x {}; //~ ERROR non-exhaustive\n+   |                   ^\n+\n+error[E0004]: non-exhaustive patterns: type [Void; 1] is non-empty\n+  --> $DIR/uninhabited-matches-feature-gated.rs:26:19\n+   |\n+LL |     let _ = match x {}; //~ ERROR non-exhaustive\n+   |                   ^\n+   |\n+help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+  --> $DIR/uninhabited-matches-feature-gated.rs:26:19\n+   |\n+LL |     let _ = match x {}; //~ ERROR non-exhaustive\n+   |                   ^\n+\n error[E0004]: non-exhaustive patterns: `&[_]` not covered\n   --> $DIR/uninhabited-matches-feature-gated.rs:29:19\n    |\n@@ -34,7 +58,7 @@ error[E0005]: refutable pattern in local binding: `Err(_)` not covered\n LL |     let Ok(x) = x;\n    |         ^^^^^ pattern `Err(_)` not covered\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 7 previous errors\n \n Some errors occurred: E0004, E0005.\n For more information about an error, try `rustc --explain E0004`."}]}