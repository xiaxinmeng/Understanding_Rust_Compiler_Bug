{"sha": "14c6835e03b285f7c73459ca851848fe8513b7a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0YzY4MzVlMDNiMjg1ZjdjNzM0NTljYTg1MTg0OGZlODUxM2I3YTU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-10-31T18:32:27Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-11-02T13:53:25Z"}, "message": "rustc: Wait for all codegen threads to exit\n\nThis commit updates rustc to wait for all codegen threads to exit before\nallowing the main thread to exit. This is a stab in the dark to fix the\nmysterious segfaults appearing on #55238, and hopefully we'll see\nwhether this actually fixes things in practice...", "tree": {"sha": "d0a07563e4105861b7cba64db74ff4827360c8b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0a07563e4105861b7cba64db74ff4827360c8b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14c6835e03b285f7c73459ca851848fe8513b7a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14c6835e03b285f7c73459ca851848fe8513b7a5", "html_url": "https://github.com/rust-lang/rust/commit/14c6835e03b285f7c73459ca851848fe8513b7a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14c6835e03b285f7c73459ca851848fe8513b7a5/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "016eaf88f5bca6c9253eedec713c6ddcd6da2906", "url": "https://api.github.com/repos/rust-lang/rust/commits/016eaf88f5bca6c9253eedec713c6ddcd6da2906", "html_url": "https://github.com/rust-lang/rust/commit/016eaf88f5bca6c9253eedec713c6ddcd6da2906"}], "stats": {"total": 126, "additions": 104, "deletions": 22}, "files": [{"sha": "2b00cde7f19d056193759d9ff84d5091e41e761e", "filename": "src/Cargo.lock", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14c6835e03b285f7c73459ca851848fe8513b7a5/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/14c6835e03b285f7c73459ca851848fe8513b7a5/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=14c6835e03b285f7c73459ca851848fe8513b7a5", "patch": "@@ -15,17 +15,6 @@ dependencies = [\n  \"rand 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"alloc_jemalloc\"\n-version = \"0.0.0\"\n-dependencies = [\n- \"build_helper 0.1.0\",\n- \"cc 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.0.0\",\n- \"core 0.0.0\",\n- \"libc 0.0.0\",\n-]\n-\n [[package]]\n name = \"alloc_system\"\n version = \"0.0.0\"\n@@ -2696,7 +2685,6 @@ name = \"std\"\n version = \"0.0.0\"\n dependencies = [\n  \"alloc 0.0.0\",\n- \"alloc_jemalloc 0.0.0\",\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cc 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "b5ed256cef6fd24371f85dc54c60e2056f5ec4f3", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 51, "deletions": 6, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/14c6835e03b285f7c73459ca851848fe8513b7a5/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c6835e03b285f7c73459ca851848fe8513b7a5/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=14c6835e03b285f7c73459ca851848fe8513b7a5", "patch": "@@ -1508,6 +1508,7 @@ enum Message {\n     },\n     CodegenComplete,\n     CodegenItem,\n+    CodegenAborted,\n }\n \n struct Diagnostic {\n@@ -1788,6 +1789,7 @@ fn start_executing_work(tcx: TyCtxt,\n         let mut needs_lto = Vec::new();\n         let mut lto_import_only_modules = Vec::new();\n         let mut started_lto = false;\n+        let mut codegen_aborted = false;\n \n         // This flag tracks whether all items have gone through codegens\n         let mut codegen_done = false;\n@@ -1805,13 +1807,19 @@ fn start_executing_work(tcx: TyCtxt,\n         let mut llvm_start_time = None;\n \n         // Run the message loop while there's still anything that needs message\n-        // processing:\n+        // processing. Note that as soon as codegen is aborted we simply want to\n+        // wait for all existing work to finish, so many of the conditions here\n+        // only apply if codegen hasn't been aborted as they represent pending\n+        // work to be done.\n         while !codegen_done ||\n-              work_items.len() > 0 ||\n               running > 0 ||\n-              needs_lto.len() > 0 ||\n-              lto_import_only_modules.len() > 0 ||\n-              main_thread_worker_state != MainThreadWorkerState::Idle {\n+              (!codegen_aborted && (\n+                  work_items.len() > 0 ||\n+                  needs_lto.len() > 0 ||\n+                  lto_import_only_modules.len() > 0 ||\n+                  main_thread_worker_state != MainThreadWorkerState::Idle\n+              ))\n+        {\n \n             // While there are still CGUs to be codegened, the coordinator has\n             // to decide how to utilize the compiler processes implicit Token:\n@@ -1840,6 +1848,9 @@ fn start_executing_work(tcx: TyCtxt,\n                         spawn_work(cgcx, item);\n                     }\n                 }\n+            } else if codegen_aborted {\n+                // don't queue up any more work if codegen was aborted, we're\n+                // just waiting for our existing children to finish\n             } else {\n                 // If we've finished everything related to normal codegen\n                 // then it must be the case that we've got some LTO work to do.\n@@ -1904,7 +1915,7 @@ fn start_executing_work(tcx: TyCtxt,\n \n             // Spin up what work we can, only doing this while we've got available\n             // parallelism slots and work left to spawn.\n-            while work_items.len() > 0 && running < tokens.len() {\n+            while !codegen_aborted && work_items.len() > 0 && running < tokens.len() {\n                 let (item, _) = work_items.pop().unwrap();\n \n                 maybe_start_llvm_timer(cgcx.config(item.module_kind()),\n@@ -1969,18 +1980,34 @@ fn start_executing_work(tcx: TyCtxt,\n                     if !cgcx.opts.debugging_opts.no_parallel_llvm {\n                         helper.request_token();\n                     }\n+                    assert!(!codegen_aborted);\n                     assert_eq!(main_thread_worker_state,\n                                MainThreadWorkerState::Codegenning);\n                     main_thread_worker_state = MainThreadWorkerState::Idle;\n                 }\n \n                 Message::CodegenComplete => {\n                     codegen_done = true;\n+                    assert!(!codegen_aborted);\n                     assert_eq!(main_thread_worker_state,\n                                MainThreadWorkerState::Codegenning);\n                     main_thread_worker_state = MainThreadWorkerState::Idle;\n                 }\n \n+                // If codegen is aborted that means translation was aborted due\n+                // to some normal-ish compiler error. In this situation we want\n+                // to exit as soon as possible, but we want to make sure all\n+                // existing work has finished. Flag codegen as being done, and\n+                // then conditions above will ensure no more work is spawned but\n+                // we'll keep executing this loop until `running` hits 0.\n+                Message::CodegenAborted => {\n+                    assert!(!codegen_aborted);\n+                    codegen_done = true;\n+                    codegen_aborted = true;\n+                    assert_eq!(main_thread_worker_state,\n+                               MainThreadWorkerState::Codegenning);\n+                }\n+\n                 // If a thread exits successfully then we drop a token associated\n                 // with that worker and update our `running` count. We may later\n                 // re-acquire a token to continue running more work. We may also not\n@@ -2446,6 +2473,19 @@ impl OngoingCodegen {\n         drop(self.coordinator_send.send(Box::new(Message::CodegenComplete)));\n     }\n \n+    /// Consume this context indicating that codegen was entirely aborted, and\n+    /// we need to exit as quickly as possible.\n+    ///\n+    /// This method blocks the current thread until all worker threads have\n+    /// finished, and all worker threads should have exited or be real close to\n+    /// exiting at this point.\n+    pub fn codegen_aborted(self) {\n+        // Signal to the coordinator it should spawn no more work and start\n+        // shutdown.\n+        drop(self.coordinator_send.send(Box::new(Message::CodegenAborted)));\n+        drop(self.future.join());\n+    }\n+\n     pub fn check_for_errors(&self, sess: &Session) {\n         self.shared_emitter_main.check(sess, false);\n     }\n@@ -2464,6 +2504,11 @@ impl OngoingCodegen {\n     }\n }\n \n+// impl Drop for OngoingCodegen {\n+//     fn drop(&mut self) {\n+//     }\n+// }\n+\n pub(crate) fn submit_codegened_module_to_llvm(tcx: TyCtxt,\n                                               module: ModuleCodegen,\n                                               cost: u64) {"}, {"sha": "a55aafe8b5731e240174d63e3cfc5043022386bf", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 53, "deletions": 4, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/14c6835e03b285f7c73459ca851848fe8513b7a5/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c6835e03b285f7c73459ca851848fe8513b7a5/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=14c6835e03b285f7c73459ca851848fe8513b7a5", "patch": "@@ -76,12 +76,13 @@ use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_data_structures::sync::Lrc;\n \n use std::any::Any;\n+use std::cmp;\n use std::ffi::CString;\n-use std::sync::Arc;\n-use std::time::{Instant, Duration};\n use std::i32;\n-use std::cmp;\n+use std::ops::{Deref, DerefMut};\n+use std::sync::Arc;\n use std::sync::mpsc;\n+use std::time::{Instant, Duration};\n use syntax_pos::Span;\n use syntax_pos::symbol::InternedString;\n use syntax::attr;\n@@ -820,6 +821,7 @@ pub fn codegen_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         metadata,\n         rx,\n         codegen_units.len());\n+    let ongoing_codegen = AbortCodegenOnDrop(Some(ongoing_codegen));\n \n     // Codegen an allocator shim, if necessary.\n     //\n@@ -949,7 +951,54 @@ pub fn codegen_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     ongoing_codegen.check_for_errors(tcx.sess);\n \n     assert_and_save_dep_graph(tcx);\n-    ongoing_codegen\n+    ongoing_codegen.into_inner()\n+}\n+\n+/// A curious wrapper structure whose only purpose is to call `codegen_aborted`\n+/// when it's dropped abnormally.\n+///\n+/// In the process of working on rust-lang/rust#55238 a mysterious segfault was\n+/// stumbled upon. The segfault was never reproduced locally, but it was\n+/// suspected to be releated to the fact that codegen worker threads were\n+/// sticking around by the time the main thread was exiting, causing issues.\n+///\n+/// This structure is an attempt to fix that issue where the `codegen_aborted`\n+/// message will block until all workers have finished. This should ensure that\n+/// even if the main codegen thread panics we'll wait for pending work to\n+/// complete before returning from the main thread, hopefully avoiding\n+/// segfaults.\n+///\n+/// If you see this comment in the code, then it means that this workaround\n+/// worked! We may yet one day track down the mysterious cause of that\n+/// segfault...\n+struct AbortCodegenOnDrop(Option<OngoingCodegen>);\n+\n+impl AbortCodegenOnDrop {\n+    fn into_inner(mut self) -> OngoingCodegen {\n+        self.0.take().unwrap()\n+    }\n+}\n+\n+impl Deref for AbortCodegenOnDrop {\n+    type Target = OngoingCodegen;\n+\n+    fn deref(&self) -> &OngoingCodegen {\n+        self.0.as_ref().unwrap()\n+    }\n+}\n+\n+impl DerefMut for AbortCodegenOnDrop {\n+    fn deref_mut(&mut self) -> &mut OngoingCodegen {\n+        self.0.as_mut().unwrap()\n+    }\n+}\n+\n+impl Drop for AbortCodegenOnDrop {\n+    fn drop(&mut self) {\n+        if let Some(codegen) = self.0.take() {\n+            codegen.codegen_aborted();\n+        }\n+    }\n }\n \n fn assert_and_save_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {"}]}