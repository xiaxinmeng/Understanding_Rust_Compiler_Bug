{"sha": "e8757af311601681f8002b699ab0d64838e75eab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NzU3YWYzMTE2MDE2ODFmODAwMmI2OTlhYjBkNjQ4MzhlNzVlYWI=", "commit": {"author": {"name": "John-John Tedro", "email": "udoprog@tedro.se", "date": "2020-12-17T00:46:06Z"}, "committer": {"name": "John-John Tedro", "email": "udoprog@tedro.se", "date": "2021-01-15T16:52:48Z"}, "message": "Use Result and rename to filter_map\n\nThe use of Result allows for making use of a reconstructed original value on failed\nprojections.", "tree": {"sha": "83632acb70bb51a2684faab3a42267bec43ca160", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83632acb70bb51a2684faab3a42267bec43ca160"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8757af311601681f8002b699ab0d64838e75eab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8757af311601681f8002b699ab0d64838e75eab", "html_url": "https://github.com/rust-lang/rust/commit/e8757af311601681f8002b699ab0d64838e75eab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8757af311601681f8002b699ab0d64838e75eab/comments", "author": {"login": "udoprog", "id": 111092, "node_id": "MDQ6VXNlcjExMTA5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/111092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/udoprog", "html_url": "https://github.com/udoprog", "followers_url": "https://api.github.com/users/udoprog/followers", "following_url": "https://api.github.com/users/udoprog/following{/other_user}", "gists_url": "https://api.github.com/users/udoprog/gists{/gist_id}", "starred_url": "https://api.github.com/users/udoprog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/udoprog/subscriptions", "organizations_url": "https://api.github.com/users/udoprog/orgs", "repos_url": "https://api.github.com/users/udoprog/repos", "events_url": "https://api.github.com/users/udoprog/events{/privacy}", "received_events_url": "https://api.github.com/users/udoprog/received_events", "type": "User", "site_admin": false}, "committer": {"login": "udoprog", "id": 111092, "node_id": "MDQ6VXNlcjExMTA5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/111092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/udoprog", "html_url": "https://github.com/udoprog", "followers_url": "https://api.github.com/users/udoprog/followers", "following_url": "https://api.github.com/users/udoprog/following{/other_user}", "gists_url": "https://api.github.com/users/udoprog/gists{/gist_id}", "starred_url": "https://api.github.com/users/udoprog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/udoprog/subscriptions", "organizations_url": "https://api.github.com/users/udoprog/orgs", "repos_url": "https://api.github.com/users/udoprog/repos", "events_url": "https://api.github.com/users/udoprog/events{/privacy}", "received_events_url": "https://api.github.com/users/udoprog/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0660b8b5a592a004557147ebe128d5d8fd024cc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0660b8b5a592a004557147ebe128d5d8fd024cc5", "html_url": "https://github.com/rust-lang/rust/commit/0660b8b5a592a004557147ebe128d5d8fd024cc5"}], "stats": {"total": 52, "additions": 34, "deletions": 18}, "files": [{"sha": "c0a0e2f618f5dc019f9a4147e8f7ac4331013af5", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 34, "deletions": 18, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e8757af311601681f8002b699ab0d64838e75eab/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8757af311601681f8002b699ab0d64838e75eab/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=e8757af311601681f8002b699ab0d64838e75eab", "patch": "@@ -1261,34 +1261,38 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n         Ref { value: f(orig.value), borrow: orig.borrow }\n     }\n \n-    /// Makes a new `Ref` for an optional component of the borrowed data.\n+    /// Makes a new `Ref` for an optional component of the borrowed data. The\n+    /// original guard is returned as an `Err(..)` if the closure returns\n+    /// `None`.\n     ///\n     /// The `RefCell` is already immutably borrowed, so this cannot fail.\n     ///\n     /// This is an associated function that needs to be used as\n-    /// `Ref::try_map(...)`. A method would interfere with methods of the same\n+    /// `Ref::filter_map(...)`. A method would interfere with methods of the same\n     /// name on the contents of a `RefCell` used through `Deref`.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(cell_try_map)]\n+    /// #![feature(cell_filter_map)]\n     ///\n     /// use std::cell::{RefCell, Ref};\n     ///\n     /// let c = RefCell::new(vec![1, 2, 3]);\n     /// let b1: Ref<Vec<u32>> = c.borrow();\n-    /// let b2: Option<Ref<u32>> = Ref::try_map(b1, |v| v.get(1));\n-    /// assert_eq!(b2.as_deref(), Some(&2))\n+    /// let b2: Result<Ref<u32>, _> = Ref::filter_map(b1, |v| v.get(1));\n+    /// assert_eq!(*b2.unwrap(), 2);\n     /// ```\n-    #[unstable(feature = \"cell_try_map\", reason = \"recently added\", issue = \"none\")]\n+    #[unstable(feature = \"cell_filter_map\", reason = \"recently added\", issue = \"none\")]\n     #[inline]\n-    pub fn try_map<U: ?Sized, F>(orig: Ref<'b, T>, f: F) -> Option<Ref<'b, U>>\n+    pub fn filter_map<U: ?Sized, F>(orig: Ref<'b, T>, f: F) -> Result<Ref<'b, U>, Self>\n     where\n         F: FnOnce(&T) -> Option<&U>,\n     {\n-        let value = f(orig.value)?;\n-        Some(Ref { value, borrow: orig.borrow })\n+        match f(orig.value) {\n+            Some(value) => Ok(Ref { value, borrow: orig.borrow }),\n+            None => Err(orig),\n+        }\n     }\n \n     /// Splits a `Ref` into multiple `Ref`s for different components of the\n@@ -1402,44 +1406,56 @@ impl<'b, T: ?Sized> RefMut<'b, T> {\n         RefMut { value: f(value), borrow }\n     }\n \n-    /// Makes a new `RefMut` for an optional component of the borrowed data.\n+    /// Makes a new `RefMut` for an optional component of the borrowed data. The\n+    /// original guard is returned as an `Err(..)` if the closure returns\n+    /// `None`.\n     ///\n     /// The `RefCell` is already mutably borrowed, so this cannot fail.\n     ///\n     /// This is an associated function that needs to be used as\n-    /// `RefMut::try_map(...)`. A method would interfere with methods of the\n+    /// `RefMut::filter_map(...)`. A method would interfere with methods of the\n     /// same name on the contents of a `RefCell` used through `Deref`.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(cell_try_map)]\n+    /// #![feature(cell_filter_map)]\n     ///\n     /// use std::cell::{RefCell, RefMut};\n     ///\n     /// let c = RefCell::new(vec![1, 2, 3]);\n     ///\n     /// {\n     ///     let b1: RefMut<Vec<u32>> = c.borrow_mut();\n-    ///     let mut b2: Option<RefMut<u32>> = RefMut::try_map(b1, |v| v.get_mut(1));\n+    ///     let mut b2: Result<RefMut<u32>, _> = RefMut::filter_map(b1, |v| v.get_mut(1));\n     ///\n-    ///     if let Some(mut b2) = b2 {\n+    ///     if let Ok(mut b2) = b2 {\n     ///         *b2 += 2;\n     ///     }\n     /// }\n     ///\n     /// assert_eq!(*c.borrow(), vec![1, 4, 3]);\n     /// ```\n-    #[unstable(feature = \"cell_try_map\", reason = \"recently added\", issue = \"none\")]\n+    #[unstable(feature = \"cell_filter_map\", reason = \"recently added\", issue = \"none\")]\n     #[inline]\n-    pub fn try_map<U: ?Sized, F>(orig: RefMut<'b, T>, f: F) -> Option<RefMut<'b, U>>\n+    pub fn filter_map<U: ?Sized, F>(orig: RefMut<'b, T>, f: F) -> Result<RefMut<'b, U>, Self>\n     where\n         F: FnOnce(&mut T) -> Option<&mut U>,\n     {\n         // FIXME(nll-rfc#40): fix borrow-check\n         let RefMut { value, borrow } = orig;\n-        let value = f(value)?;\n-        Some(RefMut { value, borrow })\n+        let value = value as *mut T;\n+        // SAFETY: function holds onto an exclusive reference for the duration\n+        // of its call through `orig`, and the pointer is only de-referenced\n+        // inside of the function call never allowing the exclusive reference to\n+        // escape.\n+        match f(unsafe { &mut *value }) {\n+            Some(value) => Ok(RefMut { value, borrow }),\n+            None => {\n+                // SAFETY: same as above.\n+                Err(RefMut { value: unsafe { &mut *value }, borrow })\n+            }\n+        }\n     }\n \n     /// Splits a `RefMut` into multiple `RefMut`s for different components of the"}]}