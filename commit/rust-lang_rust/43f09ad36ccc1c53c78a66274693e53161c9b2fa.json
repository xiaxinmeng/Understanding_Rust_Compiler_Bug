{"sha": "43f09ad36ccc1c53c78a66274693e53161c9b2fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzZjA5YWQzNmNjYzFjNTNjNzhhNjYyNzQ2OTNlNTMxNjFjOWIyZmE=", "commit": {"author": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-10-02T17:20:08Z"}, "committer": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-10-02T18:28:02Z"}, "message": "Refactor CfgOptions inside", "tree": {"sha": "a7fca4f85579ed6881ffc697b77a47347dd09b4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7fca4f85579ed6881ffc697b77a47347dd09b4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43f09ad36ccc1c53c78a66274693e53161c9b2fa", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXLDp5dXVcfV/VA/qztOS3gxIPQAFAl2U7DIACgkQztOS3gxI\nPQBn9A/+Jyryhw+DBdkznvSt/uZqtkDp+9Xi723zfLPJ3RSbgVNkdQ5MSGBd+A/v\nK31clRkXEtgNrHd1HlDHi7WkLN/FGwI8YB6+vHxHFGI6LrIsCMCIs2PDqkN/dNmB\noomU08Pa+YzoZb0h7dKT9a0WrL/MSq2yLSwcDSZpCIGGmZaKmOLi+8uKbRDMno+1\nNbSYLu4dK01xLSjH93MJGfW00mWEhbAN2vyCridYI+NIsNENaH/vm2m1VoEyPh2Z\nlyZayQWPwlJrFmv+Bx5R+emzycdi/vnTW8dq6DTDqAdisCIgvDcGQMnf9hZ4wm5R\nrn+ff31Sw62aCiO/BwOXiq0ytcwnudhbCMbrvdMUnzLK9lAWwaYMvgEJO/a3Jb6s\nKbkQ377WSs4YogfKUdGefXGJjDILbqVu8NV9k/IQOLVAGEnbUiQsDgmjsZ7CBAAI\nO8YsgGRKXBrCFgrgPtgYZ8WWowDZUq8HqE8763Xnd6U8/NurvzSmhpE8LtTSW+ap\n6JYM51ldC5mvJnjhG6vKP+sUkrRSVdqFaZr1n5tWaSgC1b7bGw3XYGTnea5YiQ6F\n3YW5p7dipLaJDHempmSGSS+3D55k7Ng7ylgz/0zvSzm1esjy0due5HTg+kr2MU0z\nc4gzvgWtb5Lax0msvy/fZFJ09YhUZQJT2bpc6lqbSO4dwW6i6f0=\n=bugB\n-----END PGP SIGNATURE-----", "payload": "tree a7fca4f85579ed6881ffc697b77a47347dd09b4b\nparent a49ad47e5afa5950f92b77badc6679295101328a\nauthor uHOOCCOOHu <hooccooh1896@gmail.com> 1570036808 +0800\ncommitter uHOOCCOOHu <hooccooh1896@gmail.com> 1570040882 +0800\n\nRefactor CfgOptions inside\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43f09ad36ccc1c53c78a66274693e53161c9b2fa", "html_url": "https://github.com/rust-lang/rust/commit/43f09ad36ccc1c53c78a66274693e53161c9b2fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43f09ad36ccc1c53c78a66274693e53161c9b2fa/comments", "author": null, "committer": null, "parents": [{"sha": "a49ad47e5afa5950f92b77badc6679295101328a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a49ad47e5afa5950f92b77badc6679295101328a", "html_url": "https://github.com/rust-lang/rust/commit/a49ad47e5afa5950f92b77badc6679295101328a"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "dd81a73f483cfae28677be05ada5905a68801492", "filename": "crates/ra_cfg/src/lib.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/43f09ad36ccc1c53c78a66274693e53161c9b2fa/crates%2Fra_cfg%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43f09ad36ccc1c53c78a66274693e53161c9b2fa/crates%2Fra_cfg%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cfg%2Fsrc%2Flib.rs?ref=43f09ad36ccc1c53c78a66274693e53161c9b2fa", "patch": "@@ -1,24 +1,32 @@\n //! ra_cfg defines conditional compiling options, `cfg` attibute parser and evaluator\n use ra_syntax::SmolStr;\n-use rustc_hash::{FxHashMap, FxHashSet};\n+use rustc_hash::FxHashSet;\n \n mod cfg_expr;\n \n pub use cfg_expr::{parse_cfg, CfgExpr};\n \n+/// Configuration options used for conditional compilition on items with `cfg` attributes.\n+/// We have two kind of options in different namespaces: atomic options like `unix`, and\n+/// key-value options like `target_arch=\"x86\"`.\n+///\n+/// Note that for key-value options, one key can have multiple values (but not none).\n+/// `feature` is an example. We have both `feature=\"foo\"` and `feature=\"bar\"` if features\n+/// `foo` and `bar` are both enabled. And here, we store key-value options as a set of tuple\n+/// of key and value in `key_values`.\n+///\n+/// See: https://doc.rust-lang.org/reference/conditional-compilation.html#set-configuration-options\n #[derive(Debug, Clone, PartialEq, Eq, Default)]\n pub struct CfgOptions {\n     atoms: FxHashSet<SmolStr>,\n-    features: FxHashSet<SmolStr>,\n-    options: FxHashMap<SmolStr, SmolStr>,\n+    key_values: FxHashSet<(SmolStr, SmolStr)>,\n }\n \n impl CfgOptions {\n     pub fn check(&self, cfg: &CfgExpr) -> Option<bool> {\n         cfg.fold(&|key, value| match value {\n             None => self.atoms.contains(key),\n-            Some(value) if key == \"feature\" => self.features.contains(value),\n-            Some(value) => self.options.get(key).map_or(false, |v| v == value),\n+            Some(value) => self.key_values.contains(&(key.clone(), value.clone())),\n         })\n     }\n \n@@ -31,13 +39,13 @@ impl CfgOptions {\n         self\n     }\n \n-    pub fn feature(mut self, name: SmolStr) -> CfgOptions {\n-        self.features.insert(name);\n+    pub fn key_value(mut self, key: SmolStr, value: SmolStr) -> CfgOptions {\n+        self.key_values.insert((key, value));\n         self\n     }\n \n-    pub fn option(mut self, key: SmolStr, value: SmolStr) -> CfgOptions {\n-        self.options.insert(key, value);\n+    pub fn remove_atom(mut self, name: &SmolStr) -> CfgOptions {\n+        self.atoms.remove(name);\n         self\n     }\n }"}, {"sha": "34dd795743852cf954a0111a85140b652184b102", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43f09ad36ccc1c53c78a66274693e53161c9b2fa/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43f09ad36ccc1c53c78a66274693e53161c9b2fa/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=43f09ad36ccc1c53c78a66274693e53161c9b2fa", "patch": "@@ -563,9 +563,9 @@ fn cfg_test() {\n             \"main\": (\"/main.rs\", [\"std\"]),\n             \"std\": (\"/lib.rs\", [], CfgOptions::default()\n                 .atom(\"test\".into())\n-                .feature(\"foo\".into())\n-                .feature(\"bar\".into())\n-                .option(\"opt\".into(), \"42\".into())\n+                .key_value(\"feature\".into(), \"foo\".into())\n+                .key_value(\"feature\".into(), \"bar\".into())\n+                .key_value(\"opt\".into(), \"42\".into())\n             ),\n         },\n     );"}, {"sha": "80b71894cdf64275918aa6f8801294396a0336c0", "filename": "crates/ra_ide_api/src/mock_analysis.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/43f09ad36ccc1c53c78a66274693e53161c9b2fa/crates%2Fra_ide_api%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43f09ad36ccc1c53c78a66274693e53161c9b2fa/crates%2Fra_ide_api%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fmock_analysis.rs?ref=43f09ad36ccc1c53c78a66274693e53161c9b2fa", "patch": "@@ -94,7 +94,6 @@ impl MockAnalysis {\n             assert!(path.starts_with('/'));\n             let path = RelativePathBuf::from_path(&path[1..]).unwrap();\n             let file_id = FileId(i as u32 + 1);\n-            // FIXME: cfg options\n             let cfg_options = CfgOptions::default();\n             if path == \"/lib.rs\" || path == \"/main.rs\" {\n                 root_crate = Some(crate_graph.add_crate_root(file_id, Edition2018, cfg_options));"}]}