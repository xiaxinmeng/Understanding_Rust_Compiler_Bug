{"sha": "f47caa666e0a2f7dd9ee9ac2535a2d26b301d4fb", "node_id": "C_kwDOAAsO6NoAKGY0N2NhYTY2NmUwYTJmN2RkOWVlOWFjMjUzNWEyZDI2YjMwMWQ0ZmI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-13T09:51:28Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-13T09:51:28Z"}, "message": "Add AbsPath::absolutize", "tree": {"sha": "08b2699d2f81814bc65dd76624b8ef44b9cbb237", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08b2699d2f81814bc65dd76624b8ef44b9cbb237"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f47caa666e0a2f7dd9ee9ac2535a2d26b301d4fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f47caa666e0a2f7dd9ee9ac2535a2d26b301d4fb", "html_url": "https://github.com/rust-lang/rust/commit/f47caa666e0a2f7dd9ee9ac2535a2d26b301d4fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f47caa666e0a2f7dd9ee9ac2535a2d26b301d4fb/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "939ebb44544379d0ea483e7e8d5d061f04e6ed12", "url": "https://api.github.com/repos/rust-lang/rust/commits/939ebb44544379d0ea483e7e8d5d061f04e6ed12", "html_url": "https://github.com/rust-lang/rust/commit/939ebb44544379d0ea483e7e8d5d061f04e6ed12"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "e0c20a4143bd686b2458bb66a1abb0f8c847ec6e", "filename": "crates/paths/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f47caa666e0a2f7dd9ee9ac2535a2d26b301d4fb/crates%2Fpaths%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f47caa666e0a2f7dd9ee9ac2535a2d26b301d4fb/crates%2Fpaths%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fpaths%2Fsrc%2Flib.rs?ref=f47caa666e0a2f7dd9ee9ac2535a2d26b301d4fb", "patch": "@@ -140,6 +140,11 @@ impl AbsPath {\n         self.0.parent().map(AbsPath::assert)\n     }\n \n+    /// Equivalent of [`Path::join`] for `AbsPath` with an additional normalize step afterwards.\n+    pub fn absolutize(&self, path: impl AsRef<Path>) -> AbsPathBuf {\n+        self.join(path).normalize()\n+    }\n+\n     /// Equivalent of [`Path::join`] for `AbsPath`.\n     pub fn join(&self, path: impl AsRef<Path>) -> AbsPathBuf {\n         self.as_ref().join(path).try_into().unwrap()"}, {"sha": "80897f7478cf9489cd0b4d51b4f5e32f2656aaec", "filename": "crates/project-model/src/project_json.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f47caa666e0a2f7dd9ee9ac2535a2d26b301d4fb/crates%2Fproject-model%2Fsrc%2Fproject_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f47caa666e0a2f7dd9ee9ac2535a2d26b301d4fb/crates%2Fproject-model%2Fsrc%2Fproject_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fproject_json.rs?ref=f47caa666e0a2f7dd9ee9ac2535a2d26b301d4fb", "patch": "@@ -98,24 +98,23 @@ impl ProjectJson {\n     /// * `data` - The parsed contents of `rust-project.json`, or project json that's passed via\n     ///            configuration.\n     pub fn new(base: &AbsPath, data: ProjectJsonData) -> ProjectJson {\n-        let absolutize =\n-            |p| AbsPathBuf::try_from(p).unwrap_or_else(|path| base.join(&path)).normalize();\n+        let absolutize_on_base = |p| base.absolutize(p);\n         ProjectJson {\n-            sysroot: data.sysroot.map(absolutize),\n-            sysroot_src: data.sysroot_src.map(absolutize),\n+            sysroot: data.sysroot.map(absolutize_on_base),\n+            sysroot_src: data.sysroot_src.map(absolutize_on_base),\n             project_root: base.to_path_buf(),\n             crates: data\n                 .crates\n                 .into_iter()\n                 .map(|crate_data| {\n-                    let root_module = absolutize(crate_data.root_module);\n+                    let root_module = absolutize_on_base(crate_data.root_module);\n                     let is_workspace_member = crate_data\n                         .is_workspace_member\n                         .unwrap_or_else(|| root_module.starts_with(base));\n                     let (include, exclude) = match crate_data.source {\n                         Some(src) => {\n                             let absolutize = |dirs: Vec<PathBuf>| {\n-                                dirs.into_iter().map(absolutize).collect::<Vec<_>>()\n+                                dirs.into_iter().map(absolutize_on_base).collect::<Vec<_>>()\n                             };\n                             (absolutize(src.include_dirs), absolutize(src.exclude_dirs))\n                         }\n@@ -142,7 +141,9 @@ impl ProjectJson {\n                         cfg: crate_data.cfg,\n                         target: crate_data.target,\n                         env: crate_data.env,\n-                        proc_macro_dylib_path: crate_data.proc_macro_dylib_path.map(absolutize),\n+                        proc_macro_dylib_path: crate_data\n+                            .proc_macro_dylib_path\n+                            .map(absolutize_on_base),\n                         is_workspace_member,\n                         include,\n                         exclude,"}]}