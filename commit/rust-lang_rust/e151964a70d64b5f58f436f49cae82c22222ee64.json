{"sha": "e151964a70d64b5f58f436f49cae82c22222ee64", "node_id": "C_kwDOAAsO6NoAKGUxNTE5NjRhNzBkNjRiNWY1OGY0MzZmNDljYWU4MmMyMjIyMmVlNjQ", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-07-26T14:45:00Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-07-26T15:17:34Z"}, "message": "Start moving away from the intrinsic_match macro\n\nIt isn't clear most people other than me and it blocks formatting by\nrustfmt.", "tree": {"sha": "07941591854086d47951d6c0b6f84f90fbbc38c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07941591854086d47951d6c0b6f84f90fbbc38c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e151964a70d64b5f58f436f49cae82c22222ee64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e151964a70d64b5f58f436f49cae82c22222ee64", "html_url": "https://github.com/rust-lang/rust/commit/e151964a70d64b5f58f436f49cae82c22222ee64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e151964a70d64b5f58f436f49cae82c22222ee64/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3deceedbc39bfde1fb3951d6b0358ace3ae95ce2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3deceedbc39bfde1fb3951d6b0358ace3ae95ce2", "html_url": "https://github.com/rust-lang/rust/commit/3deceedbc39bfde1fb3951d6b0358ace3ae95ce2"}], "stats": {"total": 550, "additions": 346, "deletions": 204}, "files": [{"sha": "a987e20b11a775a366a979a9fe66731add9d8775", "filename": "src/intrinsics/llvm.rs", "status": "modified", "additions": 83, "deletions": 54, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/e151964a70d64b5f58f436f49cae82c22222ee64/src%2Fintrinsics%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e151964a70d64b5f58f436f49cae82c22222ee64/src%2Fintrinsics%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm.rs?ref=e151964a70d64b5f58f436f49cae82c22222ee64", "patch": "@@ -13,23 +13,20 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n     ret: CPlace<'tcx>,\n     target: Option<BasicBlock>,\n ) {\n-    intrinsic_match! {\n-        fx, intrinsic, args,\n-        _ => {\n-            fx.tcx.sess.warn(&format!(\"unsupported llvm intrinsic {}; replacing with trap\", intrinsic));\n-            crate::trap::trap_unimplemented(fx, intrinsic);\n-        };\n-\n+    match intrinsic {\n         // Used by `_mm_movemask_epi8` and `_mm256_movemask_epi8`\n-        \"llvm.x86.sse2.pmovmskb.128\" | \"llvm.x86.avx2.pmovmskb\" | \"llvm.x86.sse2.movmsk.pd\", (c a) {\n+        \"llvm.x86.sse2.pmovmskb.128\" | \"llvm.x86.avx2.pmovmskb\" | \"llvm.x86.sse2.movmsk.pd\" => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n+\n             let (lane_count, lane_ty) = a.layout().ty.simd_size_and_type(fx.tcx);\n             let lane_ty = fx.clif_type(lane_ty).unwrap();\n             assert!(lane_count <= 32);\n \n             let mut res = fx.bcx.ins().iconst(types::I32, 0);\n \n             for lane in (0..lane_count).rev() {\n-                let a_lane = a.value_field(fx, mir::Field::new(lane.try_into().unwrap())).load_scalar(fx);\n+                let a_lane =\n+                    a.value_field(fx, mir::Field::new(lane.try_into().unwrap())).load_scalar(fx);\n \n                 // cast float to int\n                 let a_lane = match lane_ty {\n@@ -49,18 +46,33 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n \n             let res = CValue::by_val(res, fx.layout_of(fx.tcx.types.i32));\n             ret.write_cvalue(fx, res);\n-        };\n-        \"llvm.x86.sse2.cmp.ps\" | \"llvm.x86.sse2.cmp.pd\", (c x, c y, o kind) {\n-            let kind = crate::constant::mir_operand_get_const_val(fx, kind).expect(\"llvm.x86.sse2.cmp.* kind not const\");\n-            let flt_cc = match kind.try_to_bits(Size::from_bytes(1)).unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", kind)) {\n+        }\n+        \"llvm.x86.sse2.cmp.ps\" | \"llvm.x86.sse2.cmp.pd\" => {\n+            let (x, y, kind) = match args {\n+                [x, y, kind] => (x, y, kind),\n+                _ => bug!(\"wrong number of args for intrinsic {intrinsic}\"),\n+            };\n+            let x = codegen_operand(fx, x);\n+            let y = codegen_operand(fx, y);\n+            let kind = crate::constant::mir_operand_get_const_val(fx, kind)\n+                .expect(\"llvm.x86.sse2.cmp.* kind not const\");\n+\n+            let flt_cc = match kind\n+                .try_to_bits(Size::from_bytes(1))\n+                .unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", kind))\n+            {\n                 0 => FloatCC::Equal,\n                 1 => FloatCC::LessThan,\n                 2 => FloatCC::LessThanOrEqual,\n                 7 => {\n-                    unimplemented!(\"Compares corresponding elements in `a` and `b` to see if neither is `NaN`.\");\n+                    unimplemented!(\n+                        \"Compares corresponding elements in `a` and `b` to see if neither is `NaN`.\"\n+                    );\n                 }\n                 3 => {\n-                    unimplemented!(\"Compares corresponding elements in `a` and `b` to see if either is `NaN`.\");\n+                    unimplemented!(\n+                        \"Compares corresponding elements in `a` and `b` to see if either is `NaN`.\"\n+                    );\n                 }\n                 4 => FloatCC::NotEqual,\n                 5 => {\n@@ -79,50 +91,67 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n                 };\n                 bool_to_zero_or_max_uint(fx, res_lane_ty, res_lane)\n             });\n-        };\n-        \"llvm.x86.sse2.psrli.d\", (c a, o imm8) {\n-            let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8).expect(\"llvm.x86.sse2.psrli.d imm8 not const\");\n-            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| {\n-                match imm8.try_to_bits(Size::from_bytes(4)).unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8)) {\n-                    imm8 if imm8 < 32 => fx.bcx.ins().ushr_imm(lane, i64::from(imm8 as u8)),\n-                    _ => fx.bcx.ins().iconst(types::I32, 0),\n-                }\n+        }\n+        \"llvm.x86.sse2.psrli.d\" => {\n+            let (a, imm8) = match args {\n+                [a, imm8] => (a, imm8),\n+                _ => bug!(\"wrong number of args for intrinsic {intrinsic}\"),\n+            };\n+            let a = codegen_operand(fx, a);\n+            let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8)\n+                .expect(\"llvm.x86.sse2.psrli.d imm8 not const\");\n+\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| match imm8\n+                .try_to_bits(Size::from_bytes(4))\n+                .unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8))\n+            {\n+                imm8 if imm8 < 32 => fx.bcx.ins().ushr_imm(lane, i64::from(imm8 as u8)),\n+                _ => fx.bcx.ins().iconst(types::I32, 0),\n             });\n-        };\n-        \"llvm.x86.sse2.pslli.d\", (c a, o imm8) {\n-            let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8).expect(\"llvm.x86.sse2.psrli.d imm8 not const\");\n-            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| {\n-                match imm8.try_to_bits(Size::from_bytes(4)).unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8)) {\n-                    imm8 if imm8 < 32 => fx.bcx.ins().ishl_imm(lane, i64::from(imm8 as u8)),\n-                    _ => fx.bcx.ins().iconst(types::I32, 0),\n-                }\n+        }\n+        \"llvm.x86.sse2.pslli.d\" => {\n+            let (a, imm8) = match args {\n+                [a, imm8] => (a, imm8),\n+                _ => bug!(\"wrong number of args for intrinsic {intrinsic}\"),\n+            };\n+            let a = codegen_operand(fx, a);\n+            let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8)\n+                .expect(\"llvm.x86.sse2.psrli.d imm8 not const\");\n+\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| match imm8\n+                .try_to_bits(Size::from_bytes(4))\n+                .unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8))\n+            {\n+                imm8 if imm8 < 32 => fx.bcx.ins().ishl_imm(lane, i64::from(imm8 as u8)),\n+                _ => fx.bcx.ins().iconst(types::I32, 0),\n             });\n-        };\n-        \"llvm.x86.sse2.storeu.dq\", (v mem_addr, c a) {\n+        }\n+        \"llvm.x86.sse2.storeu.dq\" => {\n+            intrinsic_args!(fx, args => (mem_addr, a); intrinsic);\n+            let mem_addr = mem_addr.load_scalar(fx);\n+\n             // FIXME correctly handle the unalignment\n             let dest = CPlace::for_ptr(Pointer::new(mem_addr), a.layout());\n             dest.write_cvalue(fx, a);\n-        };\n-        \"llvm.x86.addcarry.64\", (v c_in, c a, c b) {\n-            llvm_add_sub(\n-                fx,\n-                BinOp::Add,\n-                ret,\n-                c_in,\n-                a,\n-                b\n-            );\n-        };\n-        \"llvm.x86.subborrow.64\", (v b_in, c a, c b) {\n-            llvm_add_sub(\n-                fx,\n-                BinOp::Sub,\n-                ret,\n-                b_in,\n-                a,\n-                b\n-            );\n-        };\n+        }\n+        \"llvm.x86.addcarry.64\" => {\n+            intrinsic_args!(fx, args => (c_in, a, b); intrinsic);\n+            let c_in = c_in.load_scalar(fx);\n+\n+            llvm_add_sub(fx, BinOp::Add, ret, c_in, a, b);\n+        }\n+        \"llvm.x86.subborrow.64\" => {\n+            intrinsic_args!(fx, args => (b_in, a, b); intrinsic);\n+            let b_in = b_in.load_scalar(fx);\n+\n+            llvm_add_sub(fx, BinOp::Sub, ret, b_in, a, b);\n+        }\n+        _ => {\n+            fx.tcx\n+                .sess\n+                .warn(&format!(\"unsupported llvm intrinsic {}; replacing with trap\", intrinsic));\n+            crate::trap::trap_unimplemented(fx, intrinsic);\n+        }\n     }\n \n     let dest = target.expect(\"all llvm intrinsics used by stdlib should return\");"}, {"sha": "de7695041d3605e5f6620dad5910955025c68c0d", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e151964a70d64b5f58f436f49cae82c22222ee64/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e151964a70d64b5f58f436f49cae82c22222ee64/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=e151964a70d64b5f58f436f49cae82c22222ee64", "patch": "@@ -11,9 +11,6 @@ macro_rules! intrinsic_pat {\n     (kw.$name:ident) => {\n         kw::$name\n     };\n-    ($name:literal) => {\n-        $name\n-    };\n }\n \n macro_rules! intrinsic_arg {\n@@ -26,6 +23,17 @@ macro_rules! intrinsic_arg {\n     };\n }\n \n+macro_rules! intrinsic_args {\n+    ($fx:expr, $args:expr => ($($arg:tt),*); $intrinsic:expr) => {\n+        #[allow(unused_parens)]\n+        let ($($arg),*) = if let [$($arg),*] = $args {\n+            ($(codegen_operand($fx, $arg)),*)\n+        } else {\n+            bug!(\"wrong number of args for intrinsic {}\", $intrinsic);\n+        };\n+    }\n+}\n+\n macro_rules! intrinsic_match {\n     ($fx:expr, $intrinsic:expr, $args:expr,\n     _ => $unknown:block;"}, {"sha": "30e3d112594a6d60beb75bb8459ffeb485d1ec6d", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 252, "deletions": 147, "changes": 399, "blob_url": "https://github.com/rust-lang/rust/blob/e151964a70d64b5f58f436f49cae82c22222ee64/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e151964a70d64b5f58f436f49cae82c22222ee64/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=e151964a70d64b5f58f436f49cae82c22222ee64", "patch": "@@ -25,13 +25,10 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n     ret: CPlace<'tcx>,\n     span: Span,\n ) {\n-    intrinsic_match! {\n-        fx, intrinsic, args,\n-        _ => {\n-            fx.tcx.sess.span_fatal(span, &format!(\"Unknown SIMD intrinsic {}\", intrinsic));\n-        };\n+    match intrinsic {\n+        sym::simd_cast => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n \n-        simd_cast, (c a) {\n             if !a.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n                 return;\n@@ -45,9 +42,11 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n                 clif_int_or_float_cast(fx, lane, from_signed, ret_lane_clif_ty, to_signed)\n             });\n-        };\n+        }\n+\n+        sym::simd_eq | sym::simd_ne | sym::simd_lt | sym::simd_le | sym::simd_gt | sym::simd_ge => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n \n-        simd_eq | simd_ne | simd_lt | simd_le | simd_gt | simd_ge, (c x, c y) {\n             if !x.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, x.layout().ty);\n                 return;\n@@ -57,7 +56,9 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             simd_pair_for_each_lane(fx, x, y, ret, &|fx, lane_ty, res_lane_ty, x_lane, y_lane| {\n                 let res_lane = match (lane_ty.kind(), intrinsic) {\n                     (ty::Uint(_), sym::simd_eq) => fx.bcx.ins().icmp(IntCC::Equal, x_lane, y_lane),\n-                    (ty::Uint(_), sym::simd_ne) => fx.bcx.ins().icmp(IntCC::NotEqual, x_lane, y_lane),\n+                    (ty::Uint(_), sym::simd_ne) => {\n+                        fx.bcx.ins().icmp(IntCC::NotEqual, x_lane, y_lane)\n+                    }\n                     (ty::Uint(_), sym::simd_lt) => {\n                         fx.bcx.ins().icmp(IntCC::UnsignedLessThan, x_lane, y_lane)\n                     }\n@@ -72,8 +73,12 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                     }\n \n                     (ty::Int(_), sym::simd_eq) => fx.bcx.ins().icmp(IntCC::Equal, x_lane, y_lane),\n-                    (ty::Int(_), sym::simd_ne) => fx.bcx.ins().icmp(IntCC::NotEqual, x_lane, y_lane),\n-                    (ty::Int(_), sym::simd_lt) => fx.bcx.ins().icmp(IntCC::SignedLessThan, x_lane, y_lane),\n+                    (ty::Int(_), sym::simd_ne) => {\n+                        fx.bcx.ins().icmp(IntCC::NotEqual, x_lane, y_lane)\n+                    }\n+                    (ty::Int(_), sym::simd_lt) => {\n+                        fx.bcx.ins().icmp(IntCC::SignedLessThan, x_lane, y_lane)\n+                    }\n                     (ty::Int(_), sym::simd_le) => {\n                         fx.bcx.ins().icmp(IntCC::SignedLessThanOrEqual, x_lane, y_lane)\n                     }\n@@ -84,13 +89,21 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                         fx.bcx.ins().icmp(IntCC::SignedGreaterThanOrEqual, x_lane, y_lane)\n                     }\n \n-                    (ty::Float(_), sym::simd_eq) => fx.bcx.ins().fcmp(FloatCC::Equal, x_lane, y_lane),\n-                    (ty::Float(_), sym::simd_ne) => fx.bcx.ins().fcmp(FloatCC::NotEqual, x_lane, y_lane),\n-                    (ty::Float(_), sym::simd_lt) => fx.bcx.ins().fcmp(FloatCC::LessThan, x_lane, y_lane),\n+                    (ty::Float(_), sym::simd_eq) => {\n+                        fx.bcx.ins().fcmp(FloatCC::Equal, x_lane, y_lane)\n+                    }\n+                    (ty::Float(_), sym::simd_ne) => {\n+                        fx.bcx.ins().fcmp(FloatCC::NotEqual, x_lane, y_lane)\n+                    }\n+                    (ty::Float(_), sym::simd_lt) => {\n+                        fx.bcx.ins().fcmp(FloatCC::LessThan, x_lane, y_lane)\n+                    }\n                     (ty::Float(_), sym::simd_le) => {\n                         fx.bcx.ins().fcmp(FloatCC::LessThanOrEqual, x_lane, y_lane)\n                     }\n-                    (ty::Float(_), sym::simd_gt) => fx.bcx.ins().fcmp(FloatCC::GreaterThan, x_lane, y_lane),\n+                    (ty::Float(_), sym::simd_gt) => {\n+                        fx.bcx.ins().fcmp(FloatCC::GreaterThan, x_lane, y_lane)\n+                    }\n                     (ty::Float(_), sym::simd_ge) => {\n                         fx.bcx.ins().fcmp(FloatCC::GreaterThanOrEqual, x_lane, y_lane)\n                     }\n@@ -103,10 +116,19 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 let res_lane = fx.bcx.ins().bint(ty, res_lane);\n                 fx.bcx.ins().ineg(res_lane)\n             });\n-        };\n+        }\n \n         // simd_shuffle32<T, U>(x: T, y: T, idx: [u32; 32]) -> U\n-        _ if intrinsic.as_str().starts_with(\"simd_shuffle\"), (c x, c y, o idx) {\n+        _ if intrinsic.as_str().starts_with(\"simd_shuffle\") => {\n+            let (x, y, idx) = match args {\n+                [x, y, idx] => (x, y, idx),\n+                _ => {\n+                    bug!(\"wrong number of args for intrinsic {intrinsic}\");\n+                }\n+            };\n+            let x = codegen_operand(fx, x);\n+            let y = codegen_operand(fx, y);\n+\n             if !x.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, x.layout().ty);\n                 return;\n@@ -119,11 +141,13 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 // version of this intrinsic.\n                 let idx_ty = fx.monomorphize(idx.ty(fx.mir, fx.tcx));\n                 match idx_ty.kind() {\n-                    ty::Array(ty, len) if matches!(ty.kind(), ty::Uint(ty::UintTy::U32)) => {\n-                        len.try_eval_usize(fx.tcx, ty::ParamEnv::reveal_all()).unwrap_or_else(|| {\n+                    ty::Array(ty, len) if matches!(ty.kind(), ty::Uint(ty::UintTy::U32)) => len\n+                        .try_eval_usize(fx.tcx, ty::ParamEnv::reveal_all())\n+                        .unwrap_or_else(|| {\n                             span_bug!(span, \"could not evaluate shuffle index array length\")\n-                        }).try_into().unwrap()\n-                    }\n+                        })\n+                        .try_into()\n+                        .unwrap(),\n                     _ => {\n                         fx.tcx.sess.span_err(\n                             span,\n@@ -154,24 +178,30 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n             let indexes = {\n                 use rustc_middle::mir::interpret::*;\n-                let idx_const = crate::constant::mir_operand_get_const_val(fx, idx).expect(\"simd_shuffle* idx not const\");\n+                let idx_const = crate::constant::mir_operand_get_const_val(fx, idx)\n+                    .expect(\"simd_shuffle* idx not const\");\n \n                 let idx_bytes = match idx_const {\n                     ConstValue::ByRef { alloc, offset } => {\n-                        let size = Size::from_bytes(4 * ret_lane_count /* size_of([u32; ret_lane_count]) */);\n+                        let size = Size::from_bytes(\n+                            4 * ret_lane_count, /* size_of([u32; ret_lane_count]) */\n+                        );\n                         alloc.inner().get_bytes(fx, alloc_range(offset, size)).unwrap()\n                     }\n                     _ => unreachable!(\"{:?}\", idx_const),\n                 };\n \n-                (0..ret_lane_count).map(|i| {\n-                    let i = usize::try_from(i).unwrap();\n-                    let idx = rustc_middle::mir::interpret::read_target_uint(\n-                        fx.tcx.data_layout.endian,\n-                        &idx_bytes[4*i.. 4*i + 4],\n-                    ).expect(\"read_target_uint\");\n-                    u16::try_from(idx).expect(\"try_from u32\")\n-                }).collect::<Vec<u16>>()\n+                (0..ret_lane_count)\n+                    .map(|i| {\n+                        let i = usize::try_from(i).unwrap();\n+                        let idx = rustc_middle::mir::interpret::read_target_uint(\n+                            fx.tcx.data_layout.endian,\n+                            &idx_bytes[4 * i..4 * i + 4],\n+                        )\n+                        .expect(\"read_target_uint\");\n+                        u16::try_from(idx).expect(\"try_from u32\")\n+                    })\n+                    .collect::<Vec<u16>>()\n             };\n \n             for &idx in &indexes {\n@@ -187,43 +217,63 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 let out_lane = ret.place_lane(fx, u64::try_from(out_idx).unwrap());\n                 out_lane.write_cvalue(fx, in_lane);\n             }\n-        };\n+        }\n+\n+        sym::simd_insert => {\n+            let (base, idx, val) = match args {\n+                [base, idx, val] => (base, idx, val),\n+                _ => {\n+                    bug!(\"wrong number of args for intrinsic {intrinsic}\");\n+                }\n+            };\n+            let base = codegen_operand(fx, base);\n+            let val = codegen_operand(fx, val);\n \n-        simd_insert, (c base, o idx, c val) {\n             // FIXME validate\n-            let idx_const = if let Some(idx_const) = crate::constant::mir_operand_get_const_val(fx, idx) {\n+            let idx_const = if let Some(idx_const) =\n+                crate::constant::mir_operand_get_const_val(fx, idx)\n+            {\n                 idx_const\n             } else {\n-                fx.tcx.sess.span_fatal(\n-                    span,\n-                    \"Index argument for `simd_insert` is not a constant\",\n-                );\n+                fx.tcx.sess.span_fatal(span, \"Index argument for `simd_insert` is not a constant\");\n             };\n \n-            let idx = idx_const.try_to_bits(Size::from_bytes(4 /* u32*/)).unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", idx_const));\n+            let idx = idx_const\n+                .try_to_bits(Size::from_bytes(4 /* u32*/))\n+                .unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", idx_const));\n             let (lane_count, _lane_ty) = base.layout().ty.simd_size_and_type(fx.tcx);\n             if idx >= lane_count.into() {\n-                fx.tcx.sess.span_fatal(fx.mir.span, &format!(\"[simd_insert] idx {} >= lane_count {}\", idx, lane_count));\n+                fx.tcx.sess.span_fatal(\n+                    fx.mir.span,\n+                    &format!(\"[simd_insert] idx {} >= lane_count {}\", idx, lane_count),\n+                );\n             }\n \n             ret.write_cvalue(fx, base);\n             let ret_lane = ret.place_field(fx, mir::Field::new(idx.try_into().unwrap()));\n             ret_lane.write_cvalue(fx, val);\n-        };\n+        }\n+\n+        sym::simd_extract => {\n+            let (v, idx) = match args {\n+                [v, idx] => (v, idx),\n+                _ => {\n+                    bug!(\"wrong number of args for intrinsic {intrinsic}\");\n+                }\n+            };\n+            let v = codegen_operand(fx, v);\n \n-        simd_extract, (c v, o idx) {\n             if !v.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n                 return;\n             }\n \n-            let idx_const = if let Some(idx_const) = crate::constant::mir_operand_get_const_val(fx, idx) {\n+            let idx_const = if let Some(idx_const) =\n+                crate::constant::mir_operand_get_const_val(fx, idx)\n+            {\n                 idx_const\n             } else {\n-                fx.tcx.sess.span_warn(\n-                    span,\n-                    \"Index argument for `simd_extract` is not a constant\",\n-                );\n+                fx.tcx.sess.span_warn(span, \"Index argument for `simd_extract` is not a constant\");\n                 let res = crate::trap::trap_unimplemented_ret_value(\n                     fx,\n                     ret.layout(),\n@@ -233,89 +283,105 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 return;\n             };\n \n-            let idx = idx_const.try_to_bits(Size::from_bytes(4 /* u32*/)).unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", idx_const));\n+            let idx = idx_const\n+                .try_to_bits(Size::from_bytes(4 /* u32*/))\n+                .unwrap_or_else(|| panic!(\"kind not scalar: {:?}\", idx_const));\n             let (lane_count, _lane_ty) = v.layout().ty.simd_size_and_type(fx.tcx);\n             if idx >= lane_count.into() {\n-                fx.tcx.sess.span_fatal(fx.mir.span, &format!(\"[simd_extract] idx {} >= lane_count {}\", idx, lane_count));\n+                fx.tcx.sess.span_fatal(\n+                    fx.mir.span,\n+                    &format!(\"[simd_extract] idx {} >= lane_count {}\", idx, lane_count),\n+                );\n             }\n \n             let ret_lane = v.value_lane(fx, idx.try_into().unwrap());\n             ret.write_cvalue(fx, ret_lane);\n-        };\n+        }\n+\n+        sym::simd_neg => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n \n-        simd_neg, (c a) {\n             if !a.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n                 return;\n             }\n \n-            simd_for_each_lane(fx, a, ret, &|fx, lane_ty, _ret_lane_ty, lane| {\n-                match lane_ty.kind() {\n+            simd_for_each_lane(\n+                fx,\n+                a,\n+                ret,\n+                &|fx, lane_ty, _ret_lane_ty, lane| match lane_ty.kind() {\n                     ty::Int(_) => fx.bcx.ins().ineg(lane),\n                     ty::Float(_) => fx.bcx.ins().fneg(lane),\n                     _ => unreachable!(),\n-                }\n-            });\n-        };\n-\n-        simd_add | simd_sub | simd_mul | simd_div | simd_rem\n-        | simd_shl | simd_shr | simd_and | simd_or | simd_xor, (c x, c y) {\n-            if !x.layout().ty.is_simd() {\n-                report_simd_type_validation_error(fx, intrinsic, span, x.layout().ty);\n-                return;\n-            }\n+                },\n+            );\n+        }\n+\n+        sym::simd_add\n+        | sym::simd_sub\n+        | sym::simd_mul\n+        | sym::simd_div\n+        | sym::simd_rem\n+        | sym::simd_shl\n+        | sym::simd_shr\n+        | sym::simd_and\n+        | sym::simd_or\n+        | sym::simd_xor => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n \n             // FIXME use vector instructions when possible\n-            simd_pair_for_each_lane(fx, x, y, ret, &|fx, lane_ty, _ret_lane_ty, x_lane, y_lane| match (\n-                lane_ty.kind(),\n-                intrinsic,\n-            ) {\n-                (ty::Uint(_), sym::simd_add) => fx.bcx.ins().iadd(x_lane, y_lane),\n-                (ty::Uint(_), sym::simd_sub) => fx.bcx.ins().isub(x_lane, y_lane),\n-                (ty::Uint(_), sym::simd_mul) => fx.bcx.ins().imul(x_lane, y_lane),\n-                (ty::Uint(_), sym::simd_div) => fx.bcx.ins().udiv(x_lane, y_lane),\n-                (ty::Uint(_), sym::simd_rem) => fx.bcx.ins().urem(x_lane, y_lane),\n-\n-                (ty::Int(_), sym::simd_add) => fx.bcx.ins().iadd(x_lane, y_lane),\n-                (ty::Int(_), sym::simd_sub) => fx.bcx.ins().isub(x_lane, y_lane),\n-                (ty::Int(_), sym::simd_mul) => fx.bcx.ins().imul(x_lane, y_lane),\n-                (ty::Int(_), sym::simd_div) => fx.bcx.ins().sdiv(x_lane, y_lane),\n-                (ty::Int(_), sym::simd_rem) => fx.bcx.ins().srem(x_lane, y_lane),\n-\n-                (ty::Float(_), sym::simd_add) => fx.bcx.ins().fadd(x_lane, y_lane),\n-                (ty::Float(_), sym::simd_sub) => fx.bcx.ins().fsub(x_lane, y_lane),\n-                (ty::Float(_), sym::simd_mul) => fx.bcx.ins().fmul(x_lane, y_lane),\n-                (ty::Float(_), sym::simd_div) => fx.bcx.ins().fdiv(x_lane, y_lane),\n-                (ty::Float(FloatTy::F32), sym::simd_rem) => fx.lib_call(\n-                    \"fmodf\",\n-                    vec![AbiParam::new(types::F32), AbiParam::new(types::F32)],\n-                    vec![AbiParam::new(types::F32)],\n-                    &[x_lane, y_lane],\n-                )[0],\n-                (ty::Float(FloatTy::F64), sym::simd_rem) => fx.lib_call(\n-                    \"fmod\",\n-                    vec![AbiParam::new(types::F64), AbiParam::new(types::F64)],\n-                    vec![AbiParam::new(types::F64)],\n-                    &[x_lane, y_lane],\n-                )[0],\n-\n-                (ty::Uint(_), sym::simd_shl) => fx.bcx.ins().ishl(x_lane, y_lane),\n-                (ty::Uint(_), sym::simd_shr) => fx.bcx.ins().ushr(x_lane, y_lane),\n-                (ty::Uint(_), sym::simd_and) => fx.bcx.ins().band(x_lane, y_lane),\n-                (ty::Uint(_), sym::simd_or) => fx.bcx.ins().bor(x_lane, y_lane),\n-                (ty::Uint(_), sym::simd_xor) => fx.bcx.ins().bxor(x_lane, y_lane),\n-\n-                (ty::Int(_), sym::simd_shl) => fx.bcx.ins().ishl(x_lane, y_lane),\n-                (ty::Int(_), sym::simd_shr) => fx.bcx.ins().sshr(x_lane, y_lane),\n-                (ty::Int(_), sym::simd_and) => fx.bcx.ins().band(x_lane, y_lane),\n-                (ty::Int(_), sym::simd_or) => fx.bcx.ins().bor(x_lane, y_lane),\n-                (ty::Int(_), sym::simd_xor) => fx.bcx.ins().bxor(x_lane, y_lane),\n-\n-                _ => unreachable!(),\n+            simd_pair_for_each_lane(fx, x, y, ret, &|fx, lane_ty, _ret_lane_ty, x_lane, y_lane| {\n+                match (lane_ty.kind(), intrinsic) {\n+                    (ty::Uint(_), sym::simd_add) => fx.bcx.ins().iadd(x_lane, y_lane),\n+                    (ty::Uint(_), sym::simd_sub) => fx.bcx.ins().isub(x_lane, y_lane),\n+                    (ty::Uint(_), sym::simd_mul) => fx.bcx.ins().imul(x_lane, y_lane),\n+                    (ty::Uint(_), sym::simd_div) => fx.bcx.ins().udiv(x_lane, y_lane),\n+                    (ty::Uint(_), sym::simd_rem) => fx.bcx.ins().urem(x_lane, y_lane),\n+\n+                    (ty::Int(_), sym::simd_add) => fx.bcx.ins().iadd(x_lane, y_lane),\n+                    (ty::Int(_), sym::simd_sub) => fx.bcx.ins().isub(x_lane, y_lane),\n+                    (ty::Int(_), sym::simd_mul) => fx.bcx.ins().imul(x_lane, y_lane),\n+                    (ty::Int(_), sym::simd_div) => fx.bcx.ins().sdiv(x_lane, y_lane),\n+                    (ty::Int(_), sym::simd_rem) => fx.bcx.ins().srem(x_lane, y_lane),\n+\n+                    (ty::Float(_), sym::simd_add) => fx.bcx.ins().fadd(x_lane, y_lane),\n+                    (ty::Float(_), sym::simd_sub) => fx.bcx.ins().fsub(x_lane, y_lane),\n+                    (ty::Float(_), sym::simd_mul) => fx.bcx.ins().fmul(x_lane, y_lane),\n+                    (ty::Float(_), sym::simd_div) => fx.bcx.ins().fdiv(x_lane, y_lane),\n+                    (ty::Float(FloatTy::F32), sym::simd_rem) => fx.lib_call(\n+                        \"fmodf\",\n+                        vec![AbiParam::new(types::F32), AbiParam::new(types::F32)],\n+                        vec![AbiParam::new(types::F32)],\n+                        &[x_lane, y_lane],\n+                    )[0],\n+                    (ty::Float(FloatTy::F64), sym::simd_rem) => fx.lib_call(\n+                        \"fmod\",\n+                        vec![AbiParam::new(types::F64), AbiParam::new(types::F64)],\n+                        vec![AbiParam::new(types::F64)],\n+                        &[x_lane, y_lane],\n+                    )[0],\n+\n+                    (ty::Uint(_), sym::simd_shl) => fx.bcx.ins().ishl(x_lane, y_lane),\n+                    (ty::Uint(_), sym::simd_shr) => fx.bcx.ins().ushr(x_lane, y_lane),\n+                    (ty::Uint(_), sym::simd_and) => fx.bcx.ins().band(x_lane, y_lane),\n+                    (ty::Uint(_), sym::simd_or) => fx.bcx.ins().bor(x_lane, y_lane),\n+                    (ty::Uint(_), sym::simd_xor) => fx.bcx.ins().bxor(x_lane, y_lane),\n+\n+                    (ty::Int(_), sym::simd_shl) => fx.bcx.ins().ishl(x_lane, y_lane),\n+                    (ty::Int(_), sym::simd_shr) => fx.bcx.ins().sshr(x_lane, y_lane),\n+                    (ty::Int(_), sym::simd_and) => fx.bcx.ins().band(x_lane, y_lane),\n+                    (ty::Int(_), sym::simd_or) => fx.bcx.ins().bor(x_lane, y_lane),\n+                    (ty::Int(_), sym::simd_xor) => fx.bcx.ins().bxor(x_lane, y_lane),\n+\n+                    _ => unreachable!(),\n+                }\n             });\n-        };\n+        }\n+\n+        sym::simd_fma => {\n+            intrinsic_args!(fx, args => (a, b, c); intrinsic);\n \n-        simd_fma, (c a, c b, c c) {\n             if !a.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n                 return;\n@@ -333,16 +399,22 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 let c_lane = c.value_lane(fx, lane);\n \n                 let res_lane = match lane_ty.kind() {\n-                    ty::Float(FloatTy::F32) => fx.easy_call(\"fmaf\", &[a_lane, b_lane, c_lane], lane_ty),\n-                    ty::Float(FloatTy::F64) => fx.easy_call(\"fma\", &[a_lane, b_lane, c_lane], lane_ty),\n+                    ty::Float(FloatTy::F32) => {\n+                        fx.easy_call(\"fmaf\", &[a_lane, b_lane, c_lane], lane_ty)\n+                    }\n+                    ty::Float(FloatTy::F64) => {\n+                        fx.easy_call(\"fma\", &[a_lane, b_lane, c_lane], lane_ty)\n+                    }\n                     _ => unreachable!(),\n                 };\n \n                 ret.place_lane(fx, lane).write_cvalue(fx, res_lane);\n             }\n-        };\n+        }\n+\n+        sym::simd_fmin | sym::simd_fmax => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n \n-        simd_fmin | simd_fmax, (c x, c y) {\n             if !x.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, x.layout().ty);\n                 return;\n@@ -351,7 +423,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             // FIXME use vector instructions when possible\n             simd_pair_for_each_lane(fx, x, y, ret, &|fx, lane_ty, _ret_lane_ty, x_lane, y_lane| {\n                 match lane_ty.kind() {\n-                    ty::Float(_) => {},\n+                    ty::Float(_) => {}\n                     _ => unreachable!(\"{:?}\", lane_ty),\n                 }\n                 match intrinsic {\n@@ -360,16 +432,21 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                     _ => unreachable!(),\n                 }\n             });\n-        };\n+        }\n+\n+        sym::simd_round => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n \n-        simd_round, (c a) {\n             if !a.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n                 return;\n             }\n \n-            simd_for_each_lane(fx, a, ret, &|fx, lane_ty, _ret_lane_ty, lane| {\n-                match lane_ty.kind() {\n+            simd_for_each_lane(\n+                fx,\n+                a,\n+                ret,\n+                &|fx, lane_ty, _ret_lane_ty, lane| match lane_ty.kind() {\n                     ty::Float(FloatTy::F32) => fx.lib_call(\n                         \"roundf\",\n                         vec![AbiParam::new(types::F32)],\n@@ -383,19 +460,21 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                         &[lane],\n                     )[0],\n                     _ => unreachable!(\"{:?}\", lane_ty),\n-                }\n-            });\n-        };\n+                },\n+            );\n+        }\n+\n+        sym::simd_fabs | sym::simd_fsqrt | sym::simd_ceil | sym::simd_floor | sym::simd_trunc => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n \n-        simd_fabs | simd_fsqrt | simd_ceil | simd_floor | simd_trunc, (c a) {\n             if !a.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n                 return;\n             }\n \n             simd_for_each_lane(fx, a, ret, &|fx, lane_ty, _ret_lane_ty, lane| {\n                 match lane_ty.kind() {\n-                    ty::Float(_) => {},\n+                    ty::Float(_) => {}\n                     _ => unreachable!(\"{:?}\", lane_ty),\n                 }\n                 match intrinsic {\n@@ -407,9 +486,12 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                     _ => unreachable!(),\n                 }\n             });\n-        };\n+        }\n+\n+        sym::simd_reduce_add_ordered | sym::simd_reduce_add_unordered => {\n+            intrinsic_args!(fx, args => (v, acc); intrinsic);\n+            let acc = acc.load_scalar(fx);\n \n-        simd_reduce_add_ordered | simd_reduce_add_unordered, (c v, v acc) {\n             // FIXME there must be no acc param for integer vectors\n             if !v.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n@@ -423,9 +505,12 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                     fx.bcx.ins().iadd(a, b)\n                 }\n             });\n-        };\n+        }\n+\n+        sym::simd_reduce_mul_ordered | sym::simd_reduce_mul_unordered => {\n+            intrinsic_args!(fx, args => (v, acc); intrinsic);\n+            let acc = acc.load_scalar(fx);\n \n-        simd_reduce_mul_ordered | simd_reduce_mul_unordered, (c v, v acc) {\n             // FIXME there must be no acc param for integer vectors\n             if !v.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n@@ -439,54 +524,66 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                     fx.bcx.ins().imul(a, b)\n                 }\n             });\n-        };\n+        }\n+\n+        sym::simd_reduce_all => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n \n-        simd_reduce_all, (c v) {\n             if !v.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n                 return;\n             }\n \n             simd_reduce_bool(fx, v, ret, &|fx, a, b| fx.bcx.ins().band(a, b));\n-        };\n+        }\n+\n+        sym::simd_reduce_any => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n \n-        simd_reduce_any, (c v) {\n             if !v.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n                 return;\n             }\n \n             simd_reduce_bool(fx, v, ret, &|fx, a, b| fx.bcx.ins().bor(a, b));\n-        };\n+        }\n+\n+        sym::simd_reduce_and => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n \n-        simd_reduce_and, (c v) {\n             if !v.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n                 return;\n             }\n \n             simd_reduce(fx, v, None, ret, &|fx, _ty, a, b| fx.bcx.ins().band(a, b));\n-        };\n+        }\n+\n+        sym::simd_reduce_or => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n \n-        simd_reduce_or, (c v) {\n             if !v.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n                 return;\n             }\n \n             simd_reduce(fx, v, None, ret, &|fx, _ty, a, b| fx.bcx.ins().bor(a, b));\n-        };\n+        }\n+\n+        sym::simd_reduce_xor => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n \n-        simd_reduce_xor, (c v) {\n             if !v.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n                 return;\n             }\n \n             simd_reduce(fx, v, None, ret, &|fx, _ty, a, b| fx.bcx.ins().bxor(a, b));\n-        };\n+        }\n+\n+        sym::simd_reduce_min => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n \n-        simd_reduce_min, (c v) {\n             if !v.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n                 return;\n@@ -501,9 +598,11 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 };\n                 fx.bcx.ins().select(lt, a, b)\n             });\n-        };\n+        }\n+\n+        sym::simd_reduce_max => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n \n-        simd_reduce_max, (c v) {\n             if !v.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n                 return;\n@@ -518,9 +617,11 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 };\n                 fx.bcx.ins().select(gt, a, b)\n             });\n-        };\n+        }\n+\n+        sym::simd_select => {\n+            intrinsic_args!(fx, args => (m, a, b); intrinsic);\n \n-        simd_select, (c m, c a, c b) {\n             if !m.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, m.layout().ty);\n                 return;\n@@ -540,15 +641,19 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 let b_lane = b.value_lane(fx, lane).load_scalar(fx);\n \n                 let m_lane = fx.bcx.ins().icmp_imm(IntCC::Equal, m_lane, 0);\n-                let res_lane = CValue::by_val(fx.bcx.ins().select(m_lane, b_lane, a_lane), lane_layout);\n+                let res_lane =\n+                    CValue::by_val(fx.bcx.ins().select(m_lane, b_lane, a_lane), lane_layout);\n \n                 ret.place_lane(fx, lane).write_cvalue(fx, res_lane);\n             }\n-        };\n+        }\n \n         // simd_saturating_*\n         // simd_bitmask\n         // simd_scatter\n         // simd_gather\n+        _ => {\n+            fx.tcx.sess.span_fatal(span, &format!(\"Unknown SIMD intrinsic {}\", intrinsic));\n+        }\n     }\n }"}]}