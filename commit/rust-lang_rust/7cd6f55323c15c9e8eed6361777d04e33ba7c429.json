{"sha": "7cd6f55323c15c9e8eed6361777d04e33ba7c429", "node_id": "C_kwDOAAsO6NoAKDdjZDZmNTUzMjNjMTVjOWU4ZWVkNjM2MTc3N2QwNGUzM2JhN2M0Mjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-09T05:00:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-09T05:00:24Z"}, "message": "Auto merge of #110101 - JohnTitor:rollup-ol20aw7, r=JohnTitor\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #110058 (Remove `box_syntax` usage)\n - #110059 (ignore_git \u2192 omit_git_hash)\n - #110060 (Document that `&T` and `&mut T` are `Sync` if `T` is)\n - #110074 (Make the \"codegen\" profile of `config.toml` download and build llvm from source.)\n - #110086 (Add `max_line_length` to `.editorconfig`, matching rustfmt)\n - #110096 (Tweak tuple indexing suggestion)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "c13ab6953069fe4f8e043ffae77d26e4a185068d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c13ab6953069fe4f8e043ffae77d26e4a185068d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cd6f55323c15c9e8eed6361777d04e33ba7c429", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cd6f55323c15c9e8eed6361777d04e33ba7c429", "html_url": "https://github.com/rust-lang/rust/commit/7cd6f55323c15c9e8eed6361777d04e33ba7c429", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cd6f55323c15c9e8eed6361777d04e33ba7c429/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0030465bcca71903c800df4a13046bcc91a9400f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0030465bcca71903c800df4a13046bcc91a9400f", "html_url": "https://github.com/rust-lang/rust/commit/0030465bcca71903c800df4a13046bcc91a9400f"}, {"sha": "eed27ac7f461d80eef7f7d944dffb08e8067db61", "url": "https://api.github.com/repos/rust-lang/rust/commits/eed27ac7f461d80eef7f7d944dffb08e8067db61", "html_url": "https://github.com/rust-lang/rust/commit/eed27ac7f461d80eef7f7d944dffb08e8067db61"}], "stats": {"total": 117, "additions": 74, "deletions": 43}, "files": [{"sha": "03aab32bfc6e108bb2255b08a7e04c8fe2d0d17d", "filename": ".editorconfig", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7cd6f55323c15c9e8eed6361777d04e33ba7c429/.editorconfig", "raw_url": "https://github.com/rust-lang/rust/raw/7cd6f55323c15c9e8eed6361777d04e33ba7c429/.editorconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.editorconfig?ref=7cd6f55323c15c9e8eed6361777d04e33ba7c429", "patch": "@@ -11,6 +11,7 @@ trim_trailing_whitespace = true\n insert_final_newline = true\n indent_style = space\n indent_size = 4\n+max_line_length = 100\n \n [*.md]\n # double whitespace at end of line"}, {"sha": "68e096e3bd023958e6fb2b7c14f4c370cd05aa7b", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7cd6f55323c15c9e8eed6361777d04e33ba7c429/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd6f55323c15c9e8eed6361777d04e33ba7c429/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=7cd6f55323c15c9e8eed6361777d04e33ba7c429", "patch": "@@ -2810,23 +2810,26 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         \"cannot index into a value of type `{base_t}`\",\n                     );\n                     // Try to give some advice about indexing tuples.\n-                    if let ty::Tuple(..) = base_t.kind() {\n+                    if let ty::Tuple(types) = base_t.kind() {\n                         let mut needs_note = true;\n                         // If the index is an integer, we can show the actual\n                         // fixed expression:\n-                        if let ExprKind::Lit(ref lit) = idx.kind {\n-                            if let ast::LitKind::Int(i, ast::LitIntType::Unsuffixed) = lit.node {\n-                                let snip = self.tcx.sess.source_map().span_to_snippet(base.span);\n-                                if let Ok(snip) = snip {\n-                                    err.span_suggestion(\n-                                        expr.span,\n-                                        \"to access tuple elements, use\",\n-                                        format!(\"{snip}.{i}\"),\n-                                        Applicability::MachineApplicable,\n-                                    );\n-                                    needs_note = false;\n-                                }\n+                        if let ExprKind::Lit(ref lit) = idx.kind\n+                            && let ast::LitKind::Int(i, ast::LitIntType::Unsuffixed) = lit.node\n+                            && i < types.len().try_into().expect(\"expected tuple index to be < usize length\")\n+                        {\n+                            let snip = self.tcx.sess.source_map().span_to_snippet(base.span);\n+                            if let Ok(snip) = snip {\n+                                err.span_suggestion(\n+                                    expr.span,\n+                                    \"to access tuple elements, use\",\n+                                    format!(\"{snip}.{i}\"),\n+                                    Applicability::MachineApplicable,\n+                                );\n+                                needs_note = false;\n                             }\n+                        } else if let ExprKind::Path(..) = idx.peel_borrows().kind {\n+                            err.span_label(idx.span, \"cannot access tuple elements at a variable index\");\n                         }\n                         if needs_note {\n                             err.help("}, {"sha": "b27a34e61c545fbb6b7f73b6ef2f133347a8fb02", "filename": "config.example.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cd6f55323c15c9e8eed6361777d04e33ba7c429/config.example.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7cd6f55323c15c9e8eed6361777d04e33ba7c429/config.example.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.example.toml?ref=7cd6f55323c15c9e8eed6361777d04e33ba7c429", "patch": "@@ -585,7 +585,7 @@ changelog-seen = 2\n # Having the git information can cause a lot of rebuilds during development.\n #\n # FIXME(#76720): this can causes bugs if different compilers reuse the same metadata cache.\n-#ignore-git = if rust.channel == \"dev\" { true } else { false }\n+#omit-git-hash = if rust.channel == \"dev\" { true } else { false }\n \n # Whether to create a source tarball by default when running `x dist`.\n #"}, {"sha": "51e6947a9c25a44c63cd8db28cc1c0677720ed9f", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7cd6f55323c15c9e8eed6361777d04e33ba7c429/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd6f55323c15c9e8eed6361777d04e33ba7c429/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=7cd6f55323c15c9e8eed6361777d04e33ba7c429", "patch": "@@ -1362,6 +1362,7 @@ mod prim_usize {}\n /// * [`Hash`]\n /// * [`ToSocketAddrs`]\n /// * [`Send`] \\(`&T` references also require <code>T: [Sync]</code>)\n+/// * [`Sync`]\n ///\n /// [`std::fmt`]: fmt\n /// [`Hash`]: hash::Hash"}, {"sha": "51e6947a9c25a44c63cd8db28cc1c0677720ed9f", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7cd6f55323c15c9e8eed6361777d04e33ba7c429/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd6f55323c15c9e8eed6361777d04e33ba7c429/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=7cd6f55323c15c9e8eed6361777d04e33ba7c429", "patch": "@@ -1362,6 +1362,7 @@ mod prim_usize {}\n /// * [`Hash`]\n /// * [`ToSocketAddrs`]\n /// * [`Send`] \\(`&T` references also require <code>T: [Sync]</code>)\n+/// * [`Sync`]\n ///\n /// [`std::fmt`]: fmt\n /// [`Hash`]: hash::Hash"}, {"sha": "390047f6fdce1c0b2a77b54fa82b14367108d468", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7cd6f55323c15c9e8eed6361777d04e33ba7c429/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd6f55323c15c9e8eed6361777d04e33ba7c429/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=7cd6f55323c15c9e8eed6361777d04e33ba7c429", "patch": "@@ -19,7 +19,7 @@ pub enum GitInfo {\n     #[default]\n     Absent,\n     /// This is a git repository.\n-    /// If the info should be used (`ignore_git` is false), this will be\n+    /// If the info should be used (`omit_git_hash` is false), this will be\n     /// `Some`, otherwise it will be `None`.\n     Present(Option<Info>),\n     /// This is not a git repostory, but the info can be fetched from the\n@@ -35,7 +35,7 @@ pub struct Info {\n }\n \n impl GitInfo {\n-    pub fn new(ignore_git: bool, dir: &Path) -> GitInfo {\n+    pub fn new(omit_git_hash: bool, dir: &Path) -> GitInfo {\n         // See if this even begins to look like a git dir\n         if !dir.join(\".git\").exists() {\n             match read_commit_info_file(dir) {\n@@ -52,7 +52,7 @@ impl GitInfo {\n \n         // If we're ignoring the git info, we don't actually need to collect it, just make sure this\n         // was a git repo in the first place.\n-        if ignore_git {\n+        if omit_git_hash {\n             return GitInfo::Present(None);\n         }\n "}, {"sha": "dd65dc91c0cd3142937e571fa374d2a5504e7619", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7cd6f55323c15c9e8eed6361777d04e33ba7c429/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd6f55323c15c9e8eed6361777d04e33ba7c429/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=7cd6f55323c15c9e8eed6361777d04e33ba7c429", "patch": "@@ -77,7 +77,7 @@ pub struct Config {\n     pub tools: Option<HashSet<String>>,\n     pub sanitizers: bool,\n     pub profiler: bool,\n-    pub ignore_git: bool,\n+    pub omit_git_hash: bool,\n     pub exclude: Vec<TaskPath>,\n     pub include_default_paths: bool,\n     pub rustc_error_format: Option<String>,\n@@ -764,7 +764,7 @@ define_config! {\n         verbose_tests: Option<bool> = \"verbose-tests\",\n         optimize_tests: Option<bool> = \"optimize-tests\",\n         codegen_tests: Option<bool> = \"codegen-tests\",\n-        ignore_git: Option<bool> = \"ignore-git\",\n+        omit_git_hash: Option<bool> = \"omit-git-hash\",\n         dist_src: Option<bool> = \"dist-src\",\n         save_toolstates: Option<String> = \"save-toolstates\",\n         codegen_backends: Option<Vec<String>> = \"codegen-backends\",\n@@ -1097,7 +1097,7 @@ impl Config {\n         let mut debuginfo_level_tools = None;\n         let mut debuginfo_level_tests = None;\n         let mut optimize = None;\n-        let mut ignore_git = None;\n+        let mut omit_git_hash = None;\n \n         if let Some(rust) = toml.rust {\n             debug = rust.debug;\n@@ -1118,7 +1118,7 @@ impl Config {\n                 .map(|v| v.expect(\"invalid value for rust.split_debuginfo\"))\n                 .unwrap_or(SplitDebuginfo::default_for_platform(&config.build.triple));\n             optimize = rust.optimize;\n-            ignore_git = rust.ignore_git;\n+            omit_git_hash = rust.omit_git_hash;\n             config.rust_new_symbol_mangling = rust.new_symbol_mangling;\n             set(&mut config.rust_optimize_tests, rust.optimize_tests);\n             set(&mut config.codegen_tests, rust.codegen_tests);\n@@ -1175,8 +1175,8 @@ impl Config {\n \n         // rust_info must be set before is_ci_llvm_available() is called.\n         let default = config.channel == \"dev\";\n-        config.ignore_git = ignore_git.unwrap_or(default);\n-        config.rust_info = GitInfo::new(config.ignore_git, &config.src);\n+        config.omit_git_hash = omit_git_hash.unwrap_or(default);\n+        config.rust_info = GitInfo::new(config.omit_git_hash, &config.src);\n \n         if let Some(llvm) = toml.llvm {\n             match llvm.ccache {"}, {"sha": "113df88d7c3492936977cf68a89595d473fa2550", "filename": "src/bootstrap/defaults/config.codegen.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cd6f55323c15c9e8eed6361777d04e33ba7c429/src%2Fbootstrap%2Fdefaults%2Fconfig.codegen.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7cd6f55323c15c9e8eed6361777d04e33ba7c429/src%2Fbootstrap%2Fdefaults%2Fconfig.codegen.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdefaults%2Fconfig.codegen.toml?ref=7cd6f55323c15c9e8eed6361777d04e33ba7c429", "patch": "@@ -9,6 +9,8 @@ compiler-docs = true\n assertions = true\n # enable warnings during the llvm compilation\n enable-warnings = true\n+# build llvm from source\n+download-ci-llvm = false\n \n [rust]\n # This enables `RUSTC_LOG=debug`, avoiding confusing situations"}, {"sha": "5ee18cf64110422f0f8d0c90c42c0e9dc8a09c46", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7cd6f55323c15c9e8eed6361777d04e33ba7c429/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd6f55323c15c9e8eed6361777d04e33ba7c429/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=7cd6f55323c15c9e8eed6361777d04e33ba7c429", "patch": "@@ -358,14 +358,14 @@ impl Build {\n         #[cfg(not(unix))]\n         let is_sudo = false;\n \n-        let ignore_git = config.ignore_git;\n-        let rust_info = channel::GitInfo::new(ignore_git, &src);\n-        let cargo_info = channel::GitInfo::new(ignore_git, &src.join(\"src/tools/cargo\"));\n+        let omit_git_hash = config.omit_git_hash;\n+        let rust_info = channel::GitInfo::new(omit_git_hash, &src);\n+        let cargo_info = channel::GitInfo::new(omit_git_hash, &src.join(\"src/tools/cargo\"));\n         let rust_analyzer_info =\n-            channel::GitInfo::new(ignore_git, &src.join(\"src/tools/rust-analyzer\"));\n-        let clippy_info = channel::GitInfo::new(ignore_git, &src.join(\"src/tools/clippy\"));\n-        let miri_info = channel::GitInfo::new(ignore_git, &src.join(\"src/tools/miri\"));\n-        let rustfmt_info = channel::GitInfo::new(ignore_git, &src.join(\"src/tools/rustfmt\"));\n+            channel::GitInfo::new(omit_git_hash, &src.join(\"src/tools/rust-analyzer\"));\n+        let clippy_info = channel::GitInfo::new(omit_git_hash, &src.join(\"src/tools/clippy\"));\n+        let miri_info = channel::GitInfo::new(omit_git_hash, &src.join(\"src/tools/miri\"));\n+        let rustfmt_info = channel::GitInfo::new(omit_git_hash, &src.join(\"src/tools/rustfmt\"));\n \n         // we always try to use git for LLVM builds\n         let in_tree_llvm_info = channel::GitInfo::new(false, &src.join(\"src/llvm-project\"));\n@@ -1233,7 +1233,7 @@ impl Build {\n         match &self.config.channel[..] {\n             \"stable\" => num.to_string(),\n             \"beta\" => {\n-                if self.rust_info().is_managed_git_subrepository() && !self.config.ignore_git {\n+                if self.rust_info().is_managed_git_subrepository() && !self.config.omit_git_hash {\n                     format!(\"{}-beta.{}\", num, self.beta_prerelease_version())\n                 } else {\n                     format!(\"{}-beta\", num)"}, {"sha": "6a687a7903e0f391bfdcedddbe86736e89dd563c", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cd6f55323c15c9e8eed6361777d04e33ba7c429/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd6f55323c15c9e8eed6361777d04e33ba7c429/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=7cd6f55323c15c9e8eed6361777d04e33ba7c429", "patch": "@@ -320,7 +320,7 @@ pub fn prepare_tool_cargo(\n     cargo.env(\"CFG_RELEASE_NUM\", &builder.version);\n     cargo.env(\"DOC_RUST_LANG_ORG_CHANNEL\", builder.doc_rust_lang_org_channel());\n \n-    let info = GitInfo::new(builder.config.ignore_git, &dir);\n+    let info = GitInfo::new(builder.config.omit_git_hash, &dir);\n     if let Some(sha) = info.sha() {\n         cargo.env(\"CFG_COMMIT_HASH\", sha);\n     }"}, {"sha": "2217e6ee7043ac826ea5d118e8d8743f6094055f", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-distcheck/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cd6f55323c15c9e8eed6361777d04e33ba7c429/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-distcheck%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/7cd6f55323c15c9e8eed6361777d04e33ba7c429/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-distcheck%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-distcheck%2FDockerfile?ref=7cd6f55323c15c9e8eed6361777d04e33ba7c429", "patch": "@@ -24,6 +24,6 @@ RUN sh /scripts/sccache.sh\n # We are disabling CI LLVM since distcheck is an offline build.\n ENV NO_DOWNLOAD_CI_LLVM 1\n \n-ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu --set rust.ignore-git=false\n+ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu --set rust.omit-git-hash=false\n ENV SCRIPT python3 ../x.py --stage 2 test distcheck\n ENV DIST_SRC 1"}, {"sha": "6adb3506e646a17ceee8e507824966129cdff65e", "filename": "src/doc/unstable-book/src/language-features/lang-items.md", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7cd6f55323c15c9e8eed6361777d04e33ba7c429/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "raw_url": "https://github.com/rust-lang/rust/raw/7cd6f55323c15c9e8eed6361777d04e33ba7c429/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md?ref=7cd6f55323c15c9e8eed6361777d04e33ba7c429", "patch": "@@ -16,18 +16,26 @@ and one for deallocation. A freestanding program that uses the `Box`\n sugar for dynamic allocations via `malloc` and `free`:\n \n ```rust,ignore (libc-is-finicky)\n-#![feature(lang_items, box_syntax, start, libc, core_intrinsics, rustc_private)]\n+#![feature(lang_items, start, libc, core_intrinsics, rustc_private, rustc_attrs)]\n #![no_std]\n use core::intrinsics;\n use core::panic::PanicInfo;\n+use core::ptr::NonNull;\n \n extern crate libc;\n \n-struct Unique<T>(*mut T);\n+struct Unique<T>(NonNull<T>);\n \n #[lang = \"owned_box\"]\n pub struct Box<T>(Unique<T>);\n \n+impl<T> Box<T> {\n+    pub fn new(x: T) -> Self {\n+        #[rustc_box]\n+        Box::new(x)\n+    }\n+}\n+\n #[lang = \"exchange_malloc\"]\n unsafe fn allocate(size: usize, _align: usize) -> *mut u8 {\n     let p = libc::malloc(size as libc::size_t) as *mut u8;\n@@ -47,13 +55,13 @@ unsafe fn box_free<T: ?Sized>(ptr: *mut T) {\n \n #[start]\n fn main(_argc: isize, _argv: *const *const u8) -> isize {\n-    let _x = box 1;\n+    let _x = Box::new(1);\n \n     0\n }\n \n #[lang = \"eh_personality\"] extern fn rust_eh_personality() {}\n-#[lang = \"panic_impl\"] extern fn rust_begin_panic(info: &PanicInfo) -> ! { unsafe { intrinsics::abort() } }\n+#[lang = \"panic_impl\"] extern fn rust_begin_panic(_info: &PanicInfo) -> ! { intrinsics::abort() }\n #[no_mangle] pub extern fn rust_eh_register_frames () {}\n #[no_mangle] pub extern fn rust_eh_unregister_frames () {}\n ```"}, {"sha": "1fade6ce95b89516d4b456fda9b5635390e966ce", "filename": "src/doc/unstable-book/src/language-features/plugin.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cd6f55323c15c9e8eed6361777d04e33ba7c429/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "raw_url": "https://github.com/rust-lang/rust/raw/7cd6f55323c15c9e8eed6361777d04e33ba7c429/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md?ref=7cd6f55323c15c9e8eed6361777d04e33ba7c429", "patch": "@@ -37,7 +37,7 @@ additional checks for code style, safety, etc. Now let's write a plugin\n that warns about any item named `lintme`.\n \n ```rust,ignore (requires-stage-2)\n-#![feature(box_syntax, rustc_private)]\n+#![feature(rustc_private)]\n \n extern crate rustc_ast;\n \n@@ -68,7 +68,7 @@ impl EarlyLintPass for Pass {\n #[no_mangle]\n fn __rustc_plugin_registrar(reg: &mut Registry) {\n     reg.lint_store.register_lints(&[&TEST_LINT]);\n-    reg.lint_store.register_early_pass(|| box Pass);\n+    reg.lint_store.register_early_pass(|| Box::new(Pass));\n }\n ```\n "}, {"sha": "88b848d6f85747848d5cd8d5564b93b86242301b", "filename": "tests/ui/index_message.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cd6f55323c15c9e8eed6361777d04e33ba7c429/tests%2Fui%2Findex_message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd6f55323c15c9e8eed6361777d04e33ba7c429/tests%2Fui%2Findex_message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findex_message.rs?ref=7cd6f55323c15c9e8eed6361777d04e33ba7c429", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n-    let z = ();\n-    let _ = z[0]; //~ ERROR cannot index into a value of type `()`\n+    let z = (10,);\n+    let _ = z[0]; //~ ERROR cannot index into a value of type `({integer},)`\n }"}, {"sha": "56d1d70809db85c1ef06b88b7f7e65e650dd109c", "filename": "tests/ui/index_message.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cd6f55323c15c9e8eed6361777d04e33ba7c429/tests%2Fui%2Findex_message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cd6f55323c15c9e8eed6361777d04e33ba7c429/tests%2Fui%2Findex_message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findex_message.stderr?ref=7cd6f55323c15c9e8eed6361777d04e33ba7c429", "patch": "@@ -1,4 +1,4 @@\n-error[E0608]: cannot index into a value of type `()`\n+error[E0608]: cannot index into a value of type `({integer},)`\n   --> $DIR/index_message.rs:3:13\n    |\n LL |     let _ = z[0];"}, {"sha": "060d3b34e09d991a39aab73ba5ccb5cd76bc4310", "filename": "tests/ui/issues/issue-27842.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7cd6f55323c15c9e8eed6361777d04e33ba7c429/tests%2Fui%2Fissues%2Fissue-27842.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cd6f55323c15c9e8eed6361777d04e33ba7c429/tests%2Fui%2Fissues%2Fissue-27842.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-27842.rs?ref=7cd6f55323c15c9e8eed6361777d04e33ba7c429", "patch": "@@ -8,4 +8,9 @@ fn main() {\n     let i = 0_usize;\n     let _ = tup[i];\n     //~^ ERROR cannot index into a value of type\n+\n+    // the case where the index is out of bounds\n+    let tup = (10,);\n+    let _ = tup[3];\n+    //~^ ERROR cannot index into a value of type\n }"}, {"sha": "83333aa0c47b95f55b2b10c5f0b611ada687fe75", "filename": "tests/ui/issues/issue-27842.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7cd6f55323c15c9e8eed6361777d04e33ba7c429/tests%2Fui%2Fissues%2Fissue-27842.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cd6f55323c15c9e8eed6361777d04e33ba7c429/tests%2Fui%2Fissues%2Fissue-27842.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-27842.stderr?ref=7cd6f55323c15c9e8eed6361777d04e33ba7c429", "patch": "@@ -8,10 +8,20 @@ error[E0608]: cannot index into a value of type `({integer}, {integer}, {integer\n   --> $DIR/issue-27842.rs:9:13\n    |\n LL |     let _ = tup[i];\n+   |             ^^^^-^\n+   |                 |\n+   |                 cannot access tuple elements at a variable index\n+   |\n+   = help: to access tuple elements, use tuple indexing syntax (e.g., `tuple.0`)\n+\n+error[E0608]: cannot index into a value of type `({integer},)`\n+  --> $DIR/issue-27842.rs:14:13\n+   |\n+LL |     let _ = tup[3];\n    |             ^^^^^^\n    |\n    = help: to access tuple elements, use tuple indexing syntax (e.g., `tuple.0`)\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0608`."}]}