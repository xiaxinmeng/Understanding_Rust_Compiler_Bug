{"sha": "5e78036e6c8752fda350818afdd411ab25f405ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlNzgwMzZlNmM4NzUyZmRhMzUwODE4YWZkZDQxMWFiMjVmNDA1Y2U=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-29T20:40:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-29T20:40:29Z"}, "message": "Merge #3379\n\n3379: Rename ast::ImplBlock -> ast::ImplDef r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "e099bb9e9c04392dcb7fed54200a989f663f3659", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e099bb9e9c04392dcb7fed54200a989f663f3659"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e78036e6c8752fda350818afdd411ab25f405ce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeWsw9CRBK7hj4Ov3rIwAAdHIIAAI8p1fHiZ3kLUIwAoav85eR\nhvl+hxnalDa5YiIaO+koD+SjAQI2Z61J04Oc9NUIysmvzvnTtdG+VBjKlqgpzHVP\npq97NfvV+9Y2pmU+xUP/1/IluFlLFC5MEGVZ8EDJn4aCP7Ta66deLwrpstH9P3pi\nSH2pM4AlBqTxC+kctbGBeNgoXOxR7Yf6q/dKUCdeUpAIIRhD8UbZCEGYxF/rQRen\n8HCYG+rFtXIK5zxHsKZK6CgYmPaZnIyBoKHzs/zBFcdJRM1yk20F3KtgdgxV9Pl4\nEAG0QKwjvmS1p2ag+P90BFknF2NWsSf5UYvAsRCAZgyF9ereNyyu3f18zPUnMjQ=\n=wJLv\n-----END PGP SIGNATURE-----\n", "payload": "tree e099bb9e9c04392dcb7fed54200a989f663f3659\nparent e91320632a9dfee937c3c2ba3ffafd3f5ffb22dc\nparent a1e18695548b5cd6661f26a985b34c8b105e1896\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1583008829 +0000\ncommitter GitHub <noreply@github.com> 1583008829 +0000\n\nMerge #3379\n\n3379: Rename ast::ImplBlock -> ast::ImplDef r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e78036e6c8752fda350818afdd411ab25f405ce", "html_url": "https://github.com/rust-lang/rust/commit/5e78036e6c8752fda350818afdd411ab25f405ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e78036e6c8752fda350818afdd411ab25f405ce/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e91320632a9dfee937c3c2ba3ffafd3f5ffb22dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e91320632a9dfee937c3c2ba3ffafd3f5ffb22dc", "html_url": "https://github.com/rust-lang/rust/commit/e91320632a9dfee937c3c2ba3ffafd3f5ffb22dc"}, {"sha": "a1e18695548b5cd6661f26a985b34c8b105e1896", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1e18695548b5cd6661f26a985b34c8b105e1896", "html_url": "https://github.com/rust-lang/rust/commit/a1e18695548b5cd6661f26a985b34c8b105e1896"}], "stats": {"total": 442, "additions": 218, "deletions": 224}, "files": [{"sha": "0e53c1eee81c776a00ec53a5b048c675001828d4", "filename": "crates/ra_assists/src/ast_transform.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_transform.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -40,9 +40,9 @@ impl<'a> SubstituteTypeParams<'a> {\n         db: &'a RootDatabase,\n         // FIXME: there's implicit invariant that `trait_` and  `source_scope` match...\n         trait_: hir::Trait,\n-        impl_block: ast::ImplBlock,\n+        impl_def: ast::ImplDef,\n     ) -> SubstituteTypeParams<'a> {\n-        let substs = get_syntactic_substs(impl_block).unwrap_or_default();\n+        let substs = get_syntactic_substs(impl_def).unwrap_or_default();\n         let generic_def: hir::GenericDef = trait_.into();\n         let substs_by_param: FxHashMap<_, _> = generic_def\n             .params(db)\n@@ -59,8 +59,8 @@ impl<'a> SubstituteTypeParams<'a> {\n \n         // FIXME: It would probably be nicer if we could get this via HIR (i.e. get the\n         // trait ref, and then go from the types in the substs back to the syntax)\n-        fn get_syntactic_substs(impl_block: ast::ImplBlock) -> Option<Vec<ast::TypeRef>> {\n-            let target_trait = impl_block.target_trait()?;\n+        fn get_syntactic_substs(impl_def: ast::ImplDef) -> Option<Vec<ast::TypeRef>> {\n+            let target_trait = impl_def.target_trait()?;\n             let path_type = match target_trait {\n                 ast::TypeRef::PathType(path) => path,\n                 _ => return None,"}, {"sha": "639180d37c6fb3a3f164a94832355ecb2ed9eaed", "filename": "crates/ra_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -101,7 +101,7 @@ fn add_missing_impl_members_inner(\n     label: &'static str,\n ) -> Option<Assist> {\n     let _p = ra_prof::profile(\"add_missing_impl_members_inner\");\n-    let impl_node = ctx.find_node_at_offset::<ast::ImplBlock>()?;\n+    let impl_node = ctx.find_node_at_offset::<ast::ImplDef>()?;\n     let impl_item_list = impl_node.item_list()?;\n \n     let trait_ = resolve_target_trait(&ctx.sema, &impl_node)?;\n@@ -257,7 +257,7 @@ impl Foo for S {\n     }\n \n     #[test]\n-    fn test_empty_impl_block() {\n+    fn test_empty_impl_def() {\n         check_assist(\n             add_missing_impl_members,\n             \"\n@@ -308,7 +308,7 @@ impl<U> Foo<U> for S {\n     }\n \n     #[test]\n-    fn test_cursor_after_empty_impl_block() {\n+    fn test_cursor_after_empty_impl_def() {\n         check_assist(\n             add_missing_impl_members,\n             \""}, {"sha": "697e7cda65afc0dcf3122769a16cdf2f025ef767", "filename": "crates/ra_assists/src/handlers/add_new.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -41,14 +41,14 @@ pub(crate) fn add_new(ctx: AssistCtx) -> Option<Assist> {\n     };\n \n     // Return early if we've found an existing new fn\n-    let impl_block = find_struct_impl(&ctx, &strukt)?;\n+    let impl_def = find_struct_impl(&ctx, &strukt)?;\n \n     ctx.add_assist(AssistId(\"add_new\"), \"Add default constructor\", |edit| {\n         edit.target(strukt.syntax().text_range());\n \n         let mut buf = String::with_capacity(512);\n \n-        if impl_block.is_some() {\n+        if impl_def.is_some() {\n             buf.push('\\n');\n         }\n \n@@ -71,10 +71,10 @@ pub(crate) fn add_new(ctx: AssistCtx) -> Option<Assist> {\n \n         buf.push_str(\"} }\");\n \n-        let (start_offset, end_offset) = impl_block\n-            .and_then(|impl_block| {\n+        let (start_offset, end_offset) = impl_def\n+            .and_then(|impl_def| {\n                 buf.push('\\n');\n-                let start = impl_block\n+                let start = impl_def\n                     .syntax()\n                     .descendants_with_tokens()\n                     .find(|t| t.kind() == T!['{'])?\n@@ -128,15 +128,15 @@ fn generate_impl_text(strukt: &ast::StructDef, code: &str) -> String {\n //\n // FIXME: change the new fn checking to a more semantic approach when that's more\n // viable (e.g. we process proc macros, etc)\n-fn find_struct_impl(ctx: &AssistCtx, strukt: &ast::StructDef) -> Option<Option<ast::ImplBlock>> {\n+fn find_struct_impl(ctx: &AssistCtx, strukt: &ast::StructDef) -> Option<Option<ast::ImplDef>> {\n     let db = ctx.db;\n     let module = strukt.syntax().ancestors().find(|node| {\n         ast::Module::can_cast(node.kind()) || ast::SourceFile::can_cast(node.kind())\n     })?;\n \n     let struct_def = ctx.sema.to_def(strukt)?;\n \n-    let block = module.descendants().filter_map(ast::ImplBlock::cast).find_map(|impl_blk| {\n+    let block = module.descendants().filter_map(ast::ImplDef::cast).find_map(|impl_blk| {\n         let blk = ctx.sema.to_def(&impl_blk)?;\n \n         // FIXME: handle e.g. `struct S<T>; impl<U> S<U> {}`\n@@ -164,7 +164,7 @@ fn find_struct_impl(ctx: &AssistCtx, strukt: &ast::StructDef) -> Option<Option<a\n     Some(block)\n }\n \n-fn has_new_fn(imp: &ast::ImplBlock) -> bool {\n+fn has_new_fn(imp: &ast::ImplDef) -> bool {\n     if let Some(il) = imp.item_list() {\n         for item in il.impl_items() {\n             if let ast::ImplItem::FnDef(f) = item {"}, {"sha": "0b501f3e583db373df5e7fcac8f8a1bd89fe8d4a", "filename": "crates/ra_assists/src/handlers/move_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -37,7 +37,7 @@ pub(crate) fn move_bounds_to_where_clause(ctx: AssistCtx) -> Option<Assist> {\n     let anchor: SyntaxElement = match parent.kind() {\n         FN_DEF => ast::FnDef::cast(parent)?.body()?.syntax().clone().into(),\n         TRAIT_DEF => ast::TraitDef::cast(parent)?.item_list()?.syntax().clone().into(),\n-        IMPL_BLOCK => ast::ImplBlock::cast(parent)?.item_list()?.syntax().clone().into(),\n+        IMPL_DEF => ast::ImplDef::cast(parent)?.item_list()?.syntax().clone().into(),\n         ENUM_DEF => ast::EnumDef::cast(parent)?.variant_list()?.syntax().clone().into(),\n         STRUCT_DEF => parent\n             .children_with_tokens()"}, {"sha": "3d6c59bda91db0b076f21007442111b340071ed1", "filename": "crates/ra_assists/src/utils.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -13,14 +13,14 @@ pub use insert_use::insert_use_statement;\n \n pub fn get_missing_impl_items(\n     sema: &Semantics<RootDatabase>,\n-    impl_block: &ast::ImplBlock,\n+    impl_def: &ast::ImplDef,\n ) -> Vec<hir::AssocItem> {\n     // Names must be unique between constants and functions. However, type aliases\n     // may share the same name as a function or constant.\n     let mut impl_fns_consts = FxHashSet::default();\n     let mut impl_type = FxHashSet::default();\n \n-    if let Some(item_list) = impl_block.item_list() {\n+    if let Some(item_list) = impl_def.item_list() {\n         for item in item_list.impl_items() {\n             match item {\n                 ast::ImplItem::FnDef(f) => {\n@@ -44,7 +44,7 @@ pub fn get_missing_impl_items(\n         }\n     }\n \n-    resolve_target_trait(sema, impl_block).map_or(vec![], |target_trait| {\n+    resolve_target_trait(sema, impl_def).map_or(vec![], |target_trait| {\n         target_trait\n             .items(sema.db)\n             .iter()\n@@ -65,9 +65,9 @@ pub fn get_missing_impl_items(\n \n pub(crate) fn resolve_target_trait(\n     sema: &Semantics<RootDatabase>,\n-    impl_block: &ast::ImplBlock,\n+    impl_def: &ast::ImplDef,\n ) -> Option<hir::Trait> {\n-    let ast_path = impl_block\n+    let ast_path = impl_def\n         .target_trait()\n         .map(|it| it.syntax().clone())\n         .and_then(ast::PathType::cast)?"}, {"sha": "c507e71e08faf8ad9df03681e68a7228957bf9e4", "filename": "crates/ra_assists/src/utils/insert_use.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_assists%2Fsrc%2Futils%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_assists%2Fsrc%2Futils%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils%2Finsert_use.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -1,4 +1,6 @@\n //! Handle syntactic aspects of inserting a new `use`.\n+// FIXME: rewrite according to the plan, outlined in\n+// https://github.com/rust-analyzer/rust-analyzer/issues/3301#issuecomment-592931553\n \n use hir::{self, ModPath};\n use ra_syntax::{"}, {"sha": "b71ee764ac37646c2c8dad94409a818cede09547", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -229,8 +229,8 @@ impl Module {\n             }\n         }\n \n-        for impl_block in self.impl_blocks(db) {\n-            for item in impl_block.items(db) {\n+        for impl_def in self.impl_defs(db) {\n+            for item in impl_def.items(db) {\n                 if let AssocItem::Function(f) = item {\n                     f.diagnostics(db, sink);\n                 }\n@@ -243,9 +243,9 @@ impl Module {\n         def_map[self.id.local_id].scope.declarations().map(ModuleDef::from).collect()\n     }\n \n-    pub fn impl_blocks(self, db: &impl DefDatabase) -> Vec<ImplBlock> {\n+    pub fn impl_defs(self, db: &impl DefDatabase) -> Vec<ImplDef> {\n         let def_map = db.crate_def_map(self.id.krate);\n-        def_map[self.id.local_id].scope.impls().map(ImplBlock::from).collect()\n+        def_map[self.id.local_id].scope.impls().map(ImplDef::from).collect()\n     }\n \n     pub(crate) fn with_module_id(self, module_id: LocalModuleId) -> Module {\n@@ -686,7 +686,7 @@ pub enum AssocItem {\n }\n pub enum AssocItemContainer {\n     Trait(Trait),\n-    ImplBlock(ImplBlock),\n+    ImplDef(ImplDef),\n }\n pub trait AsAssocItem {\n     fn as_assoc_item(self, db: &impl DefDatabase) -> Option<AssocItem>;\n@@ -736,7 +736,7 @@ impl AssocItem {\n         };\n         match container {\n             AssocContainerId::TraitId(id) => AssocItemContainer::Trait(id.into()),\n-            AssocContainerId::ImplId(id) => AssocItemContainer::ImplBlock(id.into()),\n+            AssocContainerId::ImplId(id) => AssocItemContainer::ImplDef(id.into()),\n             AssocContainerId::ContainerId(_) => panic!(\"invalid AssocItem\"),\n         }\n     }\n@@ -748,7 +748,7 @@ pub enum GenericDef {\n     Adt(Adt),\n     Trait(Trait),\n     TypeAlias(TypeAlias),\n-    ImplBlock(ImplBlock),\n+    ImplDef(ImplDef),\n     // enum variants cannot have generics themselves, but their parent enums\n     // can, and this makes some code easier to write\n     EnumVariant(EnumVariant),\n@@ -760,7 +760,7 @@ impl_froms!(\n     Adt(Struct, Enum, Union),\n     Trait,\n     TypeAlias,\n-    ImplBlock,\n+    ImplDef,\n     EnumVariant,\n     Const\n );\n@@ -850,20 +850,20 @@ impl TypeParam {\n     }\n }\n \n-// FIXME: rename from `ImplBlock` to `Impl`\n+// FIXME: rename from `ImplDef` to `Impl`\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct ImplBlock {\n+pub struct ImplDef {\n     pub(crate) id: ImplId,\n }\n \n-impl ImplBlock {\n-    pub fn all_in_crate(db: &impl HirDatabase, krate: Crate) -> Vec<ImplBlock> {\n+impl ImplDef {\n+    pub fn all_in_crate(db: &impl HirDatabase, krate: Crate) -> Vec<ImplDef> {\n         let impls = db.impls_in_crate(krate.id);\n         impls.all_impls().map(Self::from).collect()\n     }\n-    pub fn for_trait(db: &impl HirDatabase, krate: Crate, trait_: Trait) -> Vec<ImplBlock> {\n+    pub fn for_trait(db: &impl HirDatabase, krate: Crate, trait_: Trait) -> Vec<ImplDef> {\n         let impls = db.impls_in_crate(krate.id);\n-        impls.lookup_impl_blocks_for_trait(trait_.id).map(Self::from).collect()\n+        impls.lookup_impl_defs_for_trait(trait_.id).map(Self::from).collect()\n     }\n \n     pub fn target_trait(&self, db: &impl DefDatabase) -> Option<TypeRef> {\n@@ -1077,7 +1077,7 @@ impl Type {\n     }\n \n     // This would be nicer if it just returned an iterator, but that runs into\n-    // lifetime problems, because we need to borrow temp `CrateImplBlocks`.\n+    // lifetime problems, because we need to borrow temp `CrateImplDefs`.\n     pub fn iterate_impl_items<T>(\n         self,\n         db: &impl HirDatabase,\n@@ -1087,8 +1087,8 @@ impl Type {\n         for krate in self.ty.value.def_crates(db, krate.id)? {\n             let impls = db.impls_in_crate(krate);\n \n-            for impl_block in impls.lookup_impl_blocks(&self.ty.value) {\n-                for &item in db.impl_data(impl_block).items.iter() {\n+            for impl_def in impls.lookup_impl_defs(&self.ty.value) {\n+                for &item in db.impl_data(impl_def).items.iter() {\n                     if let Some(result) = callback(item.into()) {\n                         return Some(result);\n                     }\n@@ -1196,7 +1196,7 @@ pub enum ScopeDef {\n     ModuleDef(ModuleDef),\n     MacroDef(MacroDef),\n     GenericParam(TypeParam),\n-    ImplSelfType(ImplBlock),\n+    ImplSelfType(ImplDef),\n     AdtSelfType(Adt),\n     Local(Local),\n     Unknown,"}, {"sha": "c179b13c6bff480b277a5dba6ce238a95e34d9a0", "filename": "crates/ra_hir/src/from_id.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -39,7 +39,7 @@ from_id![\n     (hir_def::StaticId, crate::Static),\n     (hir_def::ConstId, crate::Const),\n     (hir_def::FunctionId, crate::Function),\n-    (hir_def::ImplId, crate::ImplBlock),\n+    (hir_def::ImplId, crate::ImplDef),\n     (hir_def::TypeParamId, crate::TypeParam),\n     (hir_expand::MacroDefId, crate::MacroDef)\n ];\n@@ -145,7 +145,7 @@ impl From<GenericDef> for GenericDefId {\n             GenericDef::Adt(it) => GenericDefId::AdtId(it.into()),\n             GenericDef::Trait(it) => GenericDefId::TraitId(it.id),\n             GenericDef::TypeAlias(it) => GenericDefId::TypeAliasId(it.id),\n-            GenericDef::ImplBlock(it) => GenericDefId::ImplId(it.id),\n+            GenericDef::ImplDef(it) => GenericDefId::ImplId(it.id),\n             GenericDef::EnumVariant(it) => {\n                 GenericDefId::EnumVariantId(EnumVariantId { parent: it.parent.id, local_id: it.id })\n             }"}, {"sha": "f121e1effc9b03764863c925f031adfc45a9b30b", "filename": "crates/ra_hir/src/has_source.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fhas_source.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -9,7 +9,7 @@ use hir_def::{\n use ra_syntax::ast;\n \n use crate::{\n-    db::DefDatabase, Const, Enum, EnumVariant, FieldSource, Function, ImplBlock, MacroDef, Module,\n+    db::DefDatabase, Const, Enum, EnumVariant, FieldSource, Function, ImplDef, MacroDef, Module,\n     Static, Struct, StructField, Trait, TypeAlias, TypeParam, Union,\n };\n \n@@ -111,9 +111,9 @@ impl HasSource for MacroDef {\n         }\n     }\n }\n-impl HasSource for ImplBlock {\n-    type Ast = ast::ImplBlock;\n-    fn source(self, db: &impl DefDatabase) -> InFile<ast::ImplBlock> {\n+impl HasSource for ImplDef {\n+    type Ast = ast::ImplDef;\n+    fn source(self, db: &impl DefDatabase) -> InFile<ast::ImplDef> {\n         self.id.lookup(db).source(db)\n     }\n }"}, {"sha": "e1cb12cca06818b423d8ae923cb0c463e717c19f", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -41,7 +41,7 @@ pub use crate::{\n     code_model::{\n         Adt, AsAssocItem, AssocItem, AssocItemContainer, AttrDef, Const, Crate, CrateDependency,\n         DefWithBody, Docs, Enum, EnumVariant, FieldSource, Function, GenericDef, HasAttrs,\n-        HasVisibility, ImplBlock, Local, MacroDef, Module, ModuleDef, ScopeDef, Static, Struct,\n+        HasVisibility, ImplDef, Local, MacroDef, Module, ModuleDef, ScopeDef, Static, Struct,\n         StructField, Trait, Type, TypeAlias, TypeParam, Union, VariantDef,\n     },\n     has_source::HasSource,"}, {"sha": "a0853957c1beb81573153ae538112a2c0649dced", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -262,7 +262,7 @@ to_def_impls![\n     (crate::Enum, ast::EnumDef, enum_to_def),\n     (crate::Union, ast::UnionDef, union_to_def),\n     (crate::Trait, ast::TraitDef, trait_to_def),\n-    (crate::ImplBlock, ast::ImplBlock, impl_to_def),\n+    (crate::ImplDef, ast::ImplDef, impl_to_def),\n     (crate::TypeAlias, ast::TypeAliasDef, type_alias_to_def),\n     (crate::Const, ast::ConstDef, const_to_def),\n     (crate::Static, ast::StaticDef, static_to_def),"}, {"sha": "67b243222de2045f2f43f10e94e9ecb56947c2de", "filename": "crates/ra_hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -67,7 +67,7 @@ impl<DB: HirDatabase> SourceToDefCtx<'_, &'_ DB> {\n     pub(super) fn trait_to_def(&mut self, src: InFile<ast::TraitDef>) -> Option<TraitId> {\n         self.to_def(src, keys::TRAIT)\n     }\n-    pub(super) fn impl_to_def(&mut self, src: InFile<ast::ImplBlock>) -> Option<ImplId> {\n+    pub(super) fn impl_to_def(&mut self, src: InFile<ast::ImplDef>) -> Option<ImplId> {\n         self.to_def(src, keys::IMPL)\n     }\n     pub(super) fn fn_to_def(&mut self, src: InFile<ast::FnDef>) -> Option<FunctionId> {\n@@ -166,7 +166,7 @@ impl<DB: HirDatabase> SourceToDefCtx<'_, &'_ DB> {\n                         let def = self.trait_to_def(container.with_value(it))?;\n                         def.into()\n                     },\n-                    ast::ImplBlock(it) => {\n+                    ast::ImplDef(it) => {\n                         let def = self.impl_to_def(container.with_value(it))?;\n                         def.into()\n                     },\n@@ -213,7 +213,7 @@ impl<DB: HirDatabase> SourceToDefCtx<'_, &'_ DB> {\n                     ast::EnumDef(it) => { self.enum_to_def(container.with_value(it))?.into() },\n                     ast::TraitDef(it) => { self.trait_to_def(container.with_value(it))?.into() },\n                     ast::TypeAliasDef(it) => { self.type_alias_to_def(container.with_value(it))?.into() },\n-                    ast::ImplBlock(it) => { self.impl_to_def(container.with_value(it))?.into() },\n+                    ast::ImplDef(it) => { self.impl_to_def(container.with_value(it))?.into() },\n                     _ => continue,\n                 }\n             };"}, {"sha": "4c121eb73923f979f07c2251eabbe5a8f2edf9ab", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -49,7 +49,7 @@ pub enum PathResolution {\n     Local(Local),\n     /// A generic parameter\n     TypeParam(TypeParam),\n-    SelfType(crate::ImplBlock),\n+    SelfType(crate::ImplDef),\n     Macro(MacroDef),\n     AssocItem(crate::AssocItem),\n }"}, {"sha": "c18e6879bae958502a1748956e6e59c6d408d8d8", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -544,7 +544,7 @@ where\n                     let ast_id = self.expander.ast_id(&def);\n                     (TraitLoc { container, ast_id }.intern(self.db).into(), def.name())\n                 }\n-                ast::ModuleItem::ImplBlock(_)\n+                ast::ModuleItem::ImplDef(_)\n                 | ast::ModuleItem::UseItem(_)\n                 | ast::ModuleItem::ExternCrateItem(_)\n                 | ast::ModuleItem::Module(_) => continue,"}, {"sha": "c5fb9428e709c27630d75418e66b17f6e4f2567d", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -238,16 +238,16 @@ impl ConstData {\n fn collect_impl_items_in_macros(\n     db: &impl DefDatabase,\n     module_id: ModuleId,\n-    impl_block: &InFile<ast::ItemList>,\n+    impl_def: &InFile<ast::ItemList>,\n     id: ImplId,\n ) -> Vec<AssocItemId> {\n-    let mut expander = Expander::new(db, impl_block.file_id, module_id);\n+    let mut expander = Expander::new(db, impl_def.file_id, module_id);\n     let mut res = Vec::new();\n \n     // We set a limit to protect against infinite recursion\n     let limit = 100;\n \n-    for m in impl_block.value.syntax().children().filter_map(ast::MacroCall::cast) {\n+    for m in impl_def.value.syntax().children().filter_map(ast::MacroCall::cast) {\n         res.extend(collect_impl_items_in_macro(db, &mut expander, m, id, limit))\n     }\n "}, {"sha": "8cd70eb9a3fe997aa240be6c2eb51c4023c0ba13", "filename": "crates/ra_hir_def/src/keys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -18,7 +18,7 @@ pub const FUNCTION: Key<ast::FnDef, FunctionId> = Key::new();\n pub const CONST: Key<ast::ConstDef, ConstId> = Key::new();\n pub const STATIC: Key<ast::StaticDef, StaticId> = Key::new();\n pub const TYPE_ALIAS: Key<ast::TypeAliasDef, TypeAliasId> = Key::new();\n-pub const IMPL: Key<ast::ImplBlock, ImplId> = Key::new();\n+pub const IMPL: Key<ast::ImplDef, ImplId> = Key::new();\n pub const TRAIT: Key<ast::TraitDef, TraitId> = Key::new();\n pub const STRUCT: Key<ast::StructDef, StructId> = Key::new();\n pub const UNION: Key<ast::UnionDef, UnionId> = Key::new();"}, {"sha": "5a336ea1f175f292e240818d9dc9467aa5b4125c", "filename": "crates/ra_hir_def/src/lang_item.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -16,7 +16,7 @@ use crate::{\n pub enum LangItemTarget {\n     EnumId(EnumId),\n     FunctionId(FunctionId),\n-    ImplBlockId(ImplId),\n+    ImplDefId(ImplId),\n     StaticId(StaticId),\n     StructId(StructId),\n     TraitId(TraitId),\n@@ -37,9 +37,9 @@ impl LangItemTarget {\n         }\n     }\n \n-    pub fn as_impl_block(self) -> Option<ImplId> {\n+    pub fn as_impl_def(self) -> Option<ImplId> {\n         match self {\n-            LangItemTarget::ImplBlockId(id) => Some(id),\n+            LangItemTarget::ImplDefId(id) => Some(id),\n             _ => None,\n         }\n     }\n@@ -125,8 +125,8 @@ impl LangItems {\n         // Look for impl targets\n         let def_map = db.crate_def_map(module.krate);\n         let module_data = &def_map[module.local_id];\n-        for impl_block in module_data.scope.impls() {\n-            self.collect_lang_item(db, impl_block, LangItemTarget::ImplBlockId)\n+        for impl_def in module_data.scope.impls() {\n+            self.collect_lang_item(db, impl_def, LangItemTarget::ImplDefId)\n         }\n \n         for def in module_data.scope.declarations() {"}, {"sha": "c9b14d0c80e78fa51a18f8cb4387e83b8f08aa4c", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -164,7 +164,7 @@ impl_intern!(TypeAliasId, TypeAliasLoc, intern_type_alias, lookup_intern_type_al\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct ImplId(salsa::InternId);\n-type ImplLoc = ItemLoc<ast::ImplBlock>;\n+type ImplLoc = ItemLoc<ast::ImplDef>;\n impl_intern!(ImplId, ImplLoc, intern_impl, lookup_intern_impl);\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]"}, {"sha": "ea3c00da817b96faa343c712f396463949a5a2c5", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -213,7 +213,7 @@ impl_arena_id!(Impl);\n \n #[derive(Debug, PartialEq, Eq)]\n pub(super) struct ImplData {\n-    pub(super) ast_id: FileAstId<ast::ImplBlock>,\n+    pub(super) ast_id: FileAstId<ast::ImplDef>,\n }\n \n struct RawItemsCollector {\n@@ -249,7 +249,7 @@ impl RawItemsCollector {\n                 self.add_extern_crate_item(current_module, extern_crate);\n                 return;\n             }\n-            ast::ModuleItem::ImplBlock(it) => {\n+            ast::ModuleItem::ImplDef(it) => {\n                 self.add_impl(current_module, it);\n                 return;\n             }\n@@ -395,7 +395,7 @@ impl RawItemsCollector {\n         self.push_item(current_module, attrs, RawItemKind::Macro(m));\n     }\n \n-    fn add_impl(&mut self, current_module: Option<Module>, imp: ast::ImplBlock) {\n+    fn add_impl(&mut self, current_module: Option<Module>, imp: ast::ImplDef) {\n         let attrs = self.parse_attrs(&imp);\n         let ast_id = self.source_ast_id_map.ast_id(&imp);\n         let imp = self.raw_items.impls.alloc(ImplData { ast_id });"}, {"sha": "2734d51a0afa31c4298dbee08a21c94c49da3f5b", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -52,7 +52,7 @@ enum Scope {\n     /// Brings the generic parameters of an item into scope\n     GenericParams { def: GenericDefId, params: Arc<GenericParams> },\n     /// Brings `Self` in `impl` block into scope\n-    ImplBlockScope(ImplId),\n+    ImplDefScope(ImplId),\n     /// Brings `Self` in enum, struct and union definitions into scope\n     AdtScope(AdtId),\n     /// Local bindings\n@@ -154,7 +154,7 @@ impl Resolver {\n             match scope {\n                 Scope::ExprScope(_) => continue,\n                 Scope::GenericParams { .. }\n-                | Scope::ImplBlockScope(_)\n+                | Scope::ImplDefScope(_)\n                 | Scope::LocalItemsScope(_)\n                     if skip_to_mod =>\n                 {\n@@ -170,7 +170,7 @@ impl Resolver {\n                         ));\n                     }\n                 }\n-                Scope::ImplBlockScope(impl_) => {\n+                Scope::ImplDefScope(impl_) => {\n                     if first_name == &name![Self] {\n                         let idx = if path.segments.len() == 1 { None } else { Some(1) };\n                         return Some((TypeNs::SelfType(*impl_), idx));\n@@ -263,7 +263,7 @@ impl Resolver {\n                 Scope::AdtScope(_)\n                 | Scope::ExprScope(_)\n                 | Scope::GenericParams { .. }\n-                | Scope::ImplBlockScope(_)\n+                | Scope::ImplDefScope(_)\n                 | Scope::LocalItemsScope(_)\n                     if skip_to_mod =>\n                 {\n@@ -291,7 +291,7 @@ impl Resolver {\n                 }\n                 Scope::GenericParams { .. } => continue,\n \n-                Scope::ImplBlockScope(impl_) if n_segments > 1 => {\n+                Scope::ImplDefScope(impl_) if n_segments > 1 => {\n                     if first_name == &name![Self] {\n                         let ty = TypeNs::SelfType(*impl_);\n                         return Some(ResolveValueResult::Partial(ty, 1));\n@@ -303,7 +303,7 @@ impl Resolver {\n                         return Some(ResolveValueResult::Partial(ty, 1));\n                     }\n                 }\n-                Scope::ImplBlockScope(_) | Scope::AdtScope(_) => continue,\n+                Scope::ImplDefScope(_) | Scope::AdtScope(_) => continue,\n \n                 Scope::ModuleScope(m) => {\n                     let (module_def, idx) = m.crate_def_map.resolve_path(\n@@ -503,7 +503,7 @@ impl Scope {\n                     }\n                 }\n             }\n-            Scope::ImplBlockScope(i) => {\n+            Scope::ImplDefScope(i) => {\n                 f(name![Self], ScopeDef::ImplSelfType(*i));\n             }\n             Scope::AdtScope(i) => {\n@@ -550,8 +550,8 @@ impl Resolver {\n         self.push_scope(Scope::GenericParams { def, params })\n     }\n \n-    fn push_impl_block_scope(self, impl_block: ImplId) -> Resolver {\n-        self.push_scope(Scope::ImplBlockScope(impl_block))\n+    fn push_impl_def_scope(self, impl_def: ImplId) -> Resolver {\n+        self.push_scope(Scope::ImplDefScope(impl_def))\n     }\n \n     fn push_module_scope(\n@@ -634,7 +634,7 @@ impl HasResolver for ImplId {\n             .container\n             .resolver(db)\n             .push_generic_params_scope(db, self.into())\n-            .push_impl_block_scope(self)\n+            .push_impl_def_scope(self)\n     }\n }\n "}, {"sha": "85d85182f37eaa3c66ca968062fe9d2bcddf3b1c", "filename": "crates/ra_hir_ty/src/db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -11,7 +11,7 @@ use ra_db::{impl_intern_key, salsa, CrateId};\n use ra_prof::profile;\n \n use crate::{\n-    method_resolution::CrateImplBlocks,\n+    method_resolution::CrateImplDefs,\n     traits::{chalk, AssocTyValue, Impl},\n     Binders, CallableDef, GenericPredicate, InferenceResult, PolyFnSig, Substs, TraitRef, Ty,\n     TyDefId, TypeCtor, ValueTyDefId,\n@@ -59,8 +59,8 @@ pub trait HirDatabase: DefDatabase {\n     #[salsa::invoke(crate::lower::generic_defaults_query)]\n     fn generic_defaults(&self, def: GenericDefId) -> Substs;\n \n-    #[salsa::invoke(crate::method_resolution::CrateImplBlocks::impls_in_crate_query)]\n-    fn impls_in_crate(&self, krate: CrateId) -> Arc<CrateImplBlocks>;\n+    #[salsa::invoke(crate::method_resolution::CrateImplDefs::impls_in_crate_query)]\n+    fn impls_in_crate(&self, krate: CrateId) -> Arc<CrateImplDefs>;\n \n     #[salsa::invoke(crate::traits::impls_for_trait_query)]\n     fn impls_for_trait(&self, krate: CrateId, trait_: TraitId) -> Arc<[ImplId]>;"}, {"sha": "df5901835ad9ad021b8031dcb910007eef7db23c", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -42,19 +42,19 @@ impl TyFingerprint {\n }\n \n #[derive(Debug, PartialEq, Eq)]\n-pub struct CrateImplBlocks {\n+pub struct CrateImplDefs {\n     impls: FxHashMap<TyFingerprint, Vec<ImplId>>,\n     impls_by_trait: FxHashMap<TraitId, Vec<ImplId>>,\n }\n \n-impl CrateImplBlocks {\n+impl CrateImplDefs {\n     pub(crate) fn impls_in_crate_query(\n         db: &impl HirDatabase,\n         krate: CrateId,\n-    ) -> Arc<CrateImplBlocks> {\n+    ) -> Arc<CrateImplDefs> {\n         let _p = profile(\"impls_in_crate_query\");\n         let mut res =\n-            CrateImplBlocks { impls: FxHashMap::default(), impls_by_trait: FxHashMap::default() };\n+            CrateImplDefs { impls: FxHashMap::default(), impls_by_trait: FxHashMap::default() };\n \n         let crate_def_map = db.crate_def_map(krate);\n         for (_module_id, module_data) in crate_def_map.modules.iter() {\n@@ -75,12 +75,12 @@ impl CrateImplBlocks {\n \n         Arc::new(res)\n     }\n-    pub fn lookup_impl_blocks(&self, ty: &Ty) -> impl Iterator<Item = ImplId> + '_ {\n+    pub fn lookup_impl_defs(&self, ty: &Ty) -> impl Iterator<Item = ImplId> + '_ {\n         let fingerprint = TyFingerprint::for_impl(ty);\n         fingerprint.and_then(|f| self.impls.get(&f)).into_iter().flatten().copied()\n     }\n \n-    pub fn lookup_impl_blocks_for_trait(&self, tr: TraitId) -> impl Iterator<Item = ImplId> + '_ {\n+    pub fn lookup_impl_defs_for_trait(&self, tr: TraitId) -> impl Iterator<Item = ImplId> + '_ {\n         self.impls_by_trait.get(&tr).into_iter().flatten().copied()\n     }\n \n@@ -131,7 +131,7 @@ impl Ty {\n         let res = lang_item_targets\n             .into_iter()\n             .filter_map(|it| match it {\n-                LangItemTarget::ImplBlockId(it) => Some(it),\n+                LangItemTarget::ImplDefId(it) => Some(it),\n                 _ => None,\n             })\n             .map(|it| it.lookup(db).container.module(db).krate)\n@@ -177,7 +177,7 @@ pub enum LookupMode {\n }\n \n // This would be nicer if it just returned an iterator, but that runs into\n-// lifetime problems, because we need to borrow temp `CrateImplBlocks`.\n+// lifetime problems, because we need to borrow temp `CrateImplDefs`.\n // FIXME add a context type here?\n pub fn iterate_method_candidates<T>(\n     ty: &Canonical<Ty>,\n@@ -425,17 +425,16 @@ fn iterate_inherent_methods<T>(\n     for krate in self_ty.value.def_crates(db, krate)? {\n         let impls = db.impls_in_crate(krate);\n \n-        for impl_block in impls.lookup_impl_blocks(&self_ty.value) {\n-            for &item in db.impl_data(impl_block).items.iter() {\n+        for impl_def in impls.lookup_impl_defs(&self_ty.value) {\n+            for &item in db.impl_data(impl_def).items.iter() {\n                 if !is_valid_candidate(db, name, receiver_ty, item, self_ty) {\n                     continue;\n                 }\n                 // we have to check whether the self type unifies with the type\n                 // that the impl is for. If we have a receiver type, this\n                 // already happens in `is_valid_candidate` above; if not, we\n                 // check it here\n-                if receiver_ty.is_none() && inherent_impl_substs(db, impl_block, self_ty).is_none()\n-                {\n+                if receiver_ty.is_none() && inherent_impl_substs(db, impl_def, self_ty).is_none() {\n                     test_utils::tested_by!(impl_self_type_match_without_receiver);\n                     continue;\n                 }"}, {"sha": "53cd81d464571766cfb7022edec6a46e834a8b95", "filename": "crates/ra_hir_ty/src/tests/macros.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -4,7 +4,7 @@ use insta::assert_snapshot;\n use ra_db::fixture::WithFixture;\n \n #[test]\n-fn cfg_impl_block() {\n+fn cfg_impl_def() {\n     let (db, pos) = TestDB::with_position(\n         r#\"\n //- /main.rs crate:main deps:foo cfg:test\n@@ -347,17 +347,17 @@ mod m {\n m::foo!(foo);\n use foo as bar;\n fn f() -> bar { 0 }\n-fn main() {  \n+fn main() {\n     let _a  = f();\n }\n \"#),\n         @r###\"\n         [159; 164) '{ 0 }': u64\n         [161; 162) '0': u64\n-        [175; 199) '{     ...f(); }': ()\n-        [187; 189) '_a': u64\n-        [193; 194) 'f': fn f() -> u64\n-        [193; 196) 'f()': u64        \n+        [175; 197) '{     ...f(); }': ()\n+        [185; 187) '_a': u64\n+        [191; 192) 'f': fn f() -> u64\n+        [191; 194) 'f()': u64\n     \"###\n     );\n }"}, {"sha": "bc6ee2600c384ddf08df0f37c313458866a2159d", "filename": "crates/ra_hir_ty/src/traits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -131,8 +131,8 @@ pub(crate) fn impls_for_trait_query(\n     for dep in db.crate_graph().dependencies(krate) {\n         impls.extend(db.impls_for_trait(dep.crate_id, trait_).iter());\n     }\n-    let crate_impl_blocks = db.impls_in_crate(krate);\n-    impls.extend(crate_impl_blocks.lookup_impl_blocks_for_trait(trait_));\n+    let crate_impl_defs = db.impls_in_crate(krate);\n+    impls.extend(crate_impl_defs.lookup_impl_defs_for_trait(trait_));\n     impls.into_iter().collect()\n }\n \n@@ -346,7 +346,7 @@ pub struct UnsizeToSuperTraitObjectData {\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum Impl {\n     /// A normal impl from an impl block.\n-    ImplBlock(ImplId),\n+    ImplDef(ImplId),\n     /// Closure types implement the Fn traits synthetically.\n     ClosureFnTraitImpl(ClosureFnTraitImplData),\n     /// [T; n]: Unsize<[T]>"}, {"sha": "03f9b4e2716ed9c8f5b97466a6ee3505f0c15519", "filename": "crates/ra_hir_ty/src/traits/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fbuiltin.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -96,7 +96,7 @@ fn get_builtin_unsize_impls(\n \n pub(super) fn impl_datum(db: &impl HirDatabase, krate: CrateId, impl_: Impl) -> BuiltinImplData {\n     match impl_ {\n-        Impl::ImplBlock(_) => unreachable!(),\n+        Impl::ImplDef(_) => unreachable!(),\n         Impl::ClosureFnTraitImpl(data) => closure_fn_trait_impl_datum(db, krate, data),\n         Impl::UnsizeArray => array_unsize_impl_datum(db, krate),\n         Impl::UnsizeToTraitObject(trait_) => trait_object_unsize_impl_datum(db, krate, trait_),"}, {"sha": "4001aa94174ec53e03f0ce5fa315365aaf548375", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -576,7 +576,7 @@ where\n             .impls_for_trait(self.krate, trait_)\n             .iter()\n             .copied()\n-            .map(Impl::ImplBlock)\n+            .map(Impl::ImplDef)\n             .map(|impl_| impl_.to_chalk(self.db))\n             .collect();\n \n@@ -712,12 +712,12 @@ pub(crate) fn impl_datum_query(\n     debug!(\"impl_datum {:?}\", impl_id);\n     let impl_: Impl = from_chalk(db, impl_id);\n     match impl_ {\n-        Impl::ImplBlock(impl_block) => impl_block_datum(db, krate, impl_id, impl_block),\n+        Impl::ImplDef(impl_def) => impl_def_datum(db, krate, impl_id, impl_def),\n         _ => Arc::new(builtin::impl_datum(db, krate, impl_).to_chalk(db)),\n     }\n }\n \n-fn impl_block_datum(\n+fn impl_def_datum(\n     db: &impl HirDatabase,\n     krate: CrateId,\n     chalk_id: ImplId,\n@@ -815,7 +815,7 @@ fn type_alias_associated_ty_value(\n     let ty = db.ty(type_alias.into());\n     let value_bound = chalk_rust_ir::AssociatedTyValueBound { ty: ty.value.to_chalk(db) };\n     let value = chalk_rust_ir::AssociatedTyValue {\n-        impl_id: Impl::ImplBlock(impl_id).to_chalk(db),\n+        impl_id: Impl::ImplDef(impl_id).to_chalk(db),\n         associated_ty_id: assoc_ty.to_chalk(db),\n         value: make_binders(value_bound, ty.num_binders),\n     };"}, {"sha": "18a1d29956c9c73d6d638478f947f85dad348b7c", "filename": "crates/ra_ide/src/completion/complete_trait_impl.rs", "status": "modified", "additions": 22, "deletions": 28, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -3,7 +3,7 @@\n //! This module adds the completion items related to implementing associated\n //! items within a `impl Trait for Struct` block. The current context node\n //! must be within either a `FN_DEF`, `TYPE_ALIAS_DEF`, or `CONST_DEF` node\n-//! and an direct child of an `IMPL_BLOCK`.\n+//! and an direct child of an `IMPL_DEF`.\n //!\n //! # Examples\n //!\n@@ -55,49 +55,43 @@ pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext\n         _ => false,\n     });\n \n-    let impl_block = trigger\n+    let impl_def = trigger\n         .as_ref()\n         .and_then(|node| node.parent())\n         .and_then(|node| node.parent())\n-        .and_then(ast::ImplBlock::cast);\n+        .and_then(ast::ImplDef::cast);\n \n-    if let (Some(trigger), Some(impl_block)) = (trigger, impl_block) {\n+    if let (Some(trigger), Some(impl_def)) = (trigger, impl_def) {\n         match trigger.kind() {\n             SyntaxKind::FN_DEF => {\n-                for missing_fn in\n-                    get_missing_impl_items(&ctx.sema, &impl_block).iter().filter_map(|item| {\n-                        match item {\n-                            hir::AssocItem::Function(fn_item) => Some(fn_item),\n-                            _ => None,\n-                        }\n-                    })\n-                {\n+                for missing_fn in get_missing_impl_items(&ctx.sema, &impl_def).iter().filter_map(\n+                    |item| match item {\n+                        hir::AssocItem::Function(fn_item) => Some(fn_item),\n+                        _ => None,\n+                    },\n+                ) {\n                     add_function_impl(&trigger, acc, ctx, &missing_fn);\n                 }\n             }\n \n             SyntaxKind::TYPE_ALIAS_DEF => {\n-                for missing_fn in\n-                    get_missing_impl_items(&ctx.sema, &impl_block).iter().filter_map(|item| {\n-                        match item {\n-                            hir::AssocItem::TypeAlias(type_item) => Some(type_item),\n-                            _ => None,\n-                        }\n-                    })\n-                {\n+                for missing_fn in get_missing_impl_items(&ctx.sema, &impl_def).iter().filter_map(\n+                    |item| match item {\n+                        hir::AssocItem::TypeAlias(type_item) => Some(type_item),\n+                        _ => None,\n+                    },\n+                ) {\n                     add_type_alias_impl(&trigger, acc, ctx, &missing_fn);\n                 }\n             }\n \n             SyntaxKind::CONST_DEF => {\n-                for missing_fn in\n-                    get_missing_impl_items(&ctx.sema, &impl_block).iter().filter_map(|item| {\n-                        match item {\n-                            hir::AssocItem::Const(const_item) => Some(const_item),\n-                            _ => None,\n-                        }\n-                    })\n-                {\n+                for missing_fn in get_missing_impl_items(&ctx.sema, &impl_def).iter().filter_map(\n+                    |item| match item {\n+                        hir::AssocItem::Const(const_item) => Some(const_item),\n+                        _ => None,\n+                    },\n+                ) {\n                     add_const_impl(&trigger, acc, ctx, &missing_fn);\n                 }\n             }"}, {"sha": "9aa5a705d5a62deb369f4f199695735be2878b3b", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -27,7 +27,7 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) use_item_syntax: Option<ast::UseItem>,\n     pub(super) record_lit_syntax: Option<ast::RecordLit>,\n     pub(super) record_lit_pat: Option<ast::RecordPat>,\n-    pub(super) impl_block: Option<ast::ImplBlock>,\n+    pub(super) impl_def: Option<ast::ImplDef>,\n     pub(super) is_param: bool,\n     /// If a name-binding or reference to a const in a pattern.\n     /// Irrefutable patterns (like let) are excluded.\n@@ -81,7 +81,7 @@ impl<'a> CompletionContext<'a> {\n             use_item_syntax: None,\n             record_lit_syntax: None,\n             record_lit_pat: None,\n-            impl_block: None,\n+            impl_def: None,\n             is_param: false,\n             is_pat_binding: false,\n             is_trivial_path: false,\n@@ -161,12 +161,12 @@ impl<'a> CompletionContext<'a> {\n             self.record_lit_syntax = find_node_at_offset(original_file.syntax(), self.offset);\n         }\n \n-        self.impl_block = self\n+        self.impl_def = self\n             .token\n             .parent()\n             .ancestors()\n             .take_while(|it| it.kind() != SOURCE_FILE && it.kind() != MODULE)\n-            .find_map(ast::ImplBlock::cast);\n+            .find_map(ast::ImplDef::cast);\n \n         let top_node = name_ref\n             .syntax()"}, {"sha": "4d3dd477ef4d7b139cd5f41cef3eb66e8b271df4", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -269,7 +269,7 @@ impl ToNav for hir::Module {\n     }\n }\n \n-impl ToNav for hir::ImplBlock {\n+impl ToNav for hir::ImplDef {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n         let src = self.source(db);\n         let frange = if let Some(item) = self.is_builtin_derive(db) {"}, {"sha": "5774e9a8b410bd886b1eff94c13922b45d635684", "filename": "crates/ra_ide/src/display/structure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fstructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fstructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fstructure.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -129,7 +129,7 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n             ast::RecordFieldDef(it) => { decl_with_ascription(it) },\n             ast::ConstDef(it) => { decl_with_ascription(it) },\n             ast::StaticDef(it) => { decl_with_ascription(it) },\n-            ast::ImplBlock(it) => {\n+            ast::ImplDef(it) => {\n                 let target_type = it.target_type()?;\n                 let target_trait = it.target_trait();\n                 let label = match target_trait {\n@@ -360,7 +360,7 @@ fn very_obsolete() {}\n                 label: \"impl E\",\n                 navigation_range: [239; 240),\n                 node_range: [234; 243),\n-                kind: IMPL_BLOCK,\n+                kind: IMPL_DEF,\n                 detail: None,\n                 deprecated: false,\n             },\n@@ -369,7 +369,7 @@ fn very_obsolete() {}\n                 label: \"impl fmt::Debug for E\",\n                 navigation_range: [265; 266),\n                 node_range: [245; 269),\n-                kind: IMPL_BLOCK,\n+                kind: IMPL_DEF,\n                 detail: None,\n                 deprecated: false,\n             },"}, {"sha": "f6667cb3315563c4f6b2b5a60815f5f139e56153", "filename": "crates/ra_ide/src/expand_macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_ide%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_ide%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fexpand_macro.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -195,7 +195,7 @@ fn some_thing() -> u32 {\n             mat<|>ch_ast! {\n                 match container {\n                     ast::TraitDef(it) => {},\n-                    ast::ImplBlock(it) => {},\n+                    ast::ImplDef(it) => {},\n                     _ => { continue },\n                 }\n             }\n@@ -207,7 +207,7 @@ fn some_thing() -> u32 {\n         assert_snapshot!(res.expansion, @r###\"\n {\n   if let Some(it) = ast::TraitDef::cast(container.clone()){}\n-  else if let Some(it) = ast::ImplBlock::cast(container.clone()){}\n+  else if let Some(it) = ast::ImplDef::cast(container.clone()){}\n   else {\n     {\n       continue"}, {"sha": "e675852035994a4d2ac4f3a32cbbcf952327e039", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -477,7 +477,7 @@ mod tests {\n                 }\n             }\n             \",\n-            \"impl IMPL_BLOCK FileId(1) [12; 73)\",\n+            \"impl IMPL_DEF FileId(1) [12; 73)\",\n             \"impl Foo {...}\",\n         );\n \n@@ -491,7 +491,7 @@ mod tests {\n                 }\n             }\n             \",\n-            \"impl IMPL_BLOCK FileId(1) [12; 73)\",\n+            \"impl IMPL_DEF FileId(1) [12; 73)\",\n             \"impl Foo {...}\",\n         );\n \n@@ -505,7 +505,7 @@ mod tests {\n                 }\n             }\n             \",\n-            \"impl IMPL_BLOCK FileId(1) [15; 75)\",\n+            \"impl IMPL_DEF FileId(1) [15; 75)\",\n             \"impl Foo {...}\",\n         );\n \n@@ -518,7 +518,7 @@ mod tests {\n                 }\n             }\n             \",\n-            \"impl IMPL_BLOCK FileId(1) [15; 62)\",\n+            \"impl IMPL_DEF FileId(1) [15; 62)\",\n             \"impl Foo {...}\",\n         );\n     }\n@@ -538,7 +538,7 @@ mod tests {\n                 }\n             }\n             \",\n-            \"impl IMPL_BLOCK FileId(1) [49; 115)\",\n+            \"impl IMPL_DEF FileId(1) [49; 115)\",\n             \"impl Make for Foo {...}\",\n         );\n \n@@ -555,7 +555,7 @@ mod tests {\n                 }\n             }\n             \",\n-            \"impl IMPL_BLOCK FileId(1) [49; 115)\",\n+            \"impl IMPL_DEF FileId(1) [49; 115)\",\n             \"impl Make for Foo {...}\",\n         );\n     }"}, {"sha": "68529c8a58297c5c26e30808d95ebeeffa03e48d", "filename": "crates/ra_ide/src/impls.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_ide%2Fsrc%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_ide%2Fsrc%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fimpls.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use hir::{Crate, ImplBlock, Semantics};\n+use hir::{Crate, ImplDef, Semantics};\n use ra_ide_db::RootDatabase;\n use ra_syntax::{algo::find_node_at_offset, ast, AstNode};\n \n@@ -42,12 +42,12 @@ fn impls_for_def(\n         ast::NominalDef::UnionDef(def) => sema.to_def(def)?.ty(sema.db),\n     };\n \n-    let impls = ImplBlock::all_in_crate(sema.db, krate);\n+    let impls = ImplDef::all_in_crate(sema.db, krate);\n \n     Some(\n         impls\n             .into_iter()\n-            .filter(|impl_block| ty.is_equal_for_find_impls(&impl_block.target_ty(sema.db)))\n+            .filter(|impl_def| ty.is_equal_for_find_impls(&impl_def.target_ty(sema.db)))\n             .map(|imp| imp.to_nav(sema.db))\n             .collect(),\n     )\n@@ -60,7 +60,7 @@ fn impls_for_trait(\n ) -> Option<Vec<NavigationTarget>> {\n     let tr = sema.to_def(node)?;\n \n-    let impls = ImplBlock::for_trait(sema.db, krate, tr);\n+    let impls = ImplDef::for_trait(sema.db, krate, tr);\n \n     Some(impls.into_iter().map(|imp| imp.to_nav(sema.db)).collect())\n }\n@@ -86,7 +86,7 @@ mod tests {\n             struct Foo<|>;\n             impl Foo {}\n             \",\n-            &[\"impl IMPL_BLOCK FileId(1) [12; 23)\"],\n+            &[\"impl IMPL_DEF FileId(1) [12; 23)\"],\n         );\n     }\n \n@@ -99,7 +99,7 @@ mod tests {\n             impl Foo {}\n             impl Foo {}\n             \",\n-            &[\"impl IMPL_BLOCK FileId(1) [12; 23)\", \"impl IMPL_BLOCK FileId(1) [24; 35)\"],\n+            &[\"impl IMPL_DEF FileId(1) [12; 23)\", \"impl IMPL_DEF FileId(1) [24; 35)\"],\n         );\n     }\n \n@@ -116,7 +116,7 @@ mod tests {\n                 impl super::Foo {}\n             }\n             \",\n-            &[\"impl IMPL_BLOCK FileId(1) [24; 42)\", \"impl IMPL_BLOCK FileId(1) [57; 75)\"],\n+            &[\"impl IMPL_DEF FileId(1) [24; 42)\", \"impl IMPL_DEF FileId(1) [57; 75)\"],\n         );\n     }\n \n@@ -133,7 +133,7 @@ mod tests {\n             //- /b.rs\n             impl crate::Foo {}\n             \",\n-            &[\"impl IMPL_BLOCK FileId(2) [0; 18)\", \"impl IMPL_BLOCK FileId(3) [0; 18)\"],\n+            &[\"impl IMPL_DEF FileId(2) [0; 18)\", \"impl IMPL_DEF FileId(3) [0; 18)\"],\n         );\n     }\n \n@@ -146,7 +146,7 @@ mod tests {\n             struct Foo;\n             impl T for Foo {}\n             \",\n-            &[\"impl IMPL_BLOCK FileId(1) [23; 40)\"],\n+            &[\"impl IMPL_DEF FileId(1) [23; 40)\"],\n         );\n     }\n \n@@ -164,7 +164,7 @@ mod tests {\n             //- /b.rs\n             impl crate::T for crate::Foo {}\n             \",\n-            &[\"impl IMPL_BLOCK FileId(2) [0; 31)\", \"impl IMPL_BLOCK FileId(3) [0; 31)\"],\n+            &[\"impl IMPL_DEF FileId(2) [0; 31)\", \"impl IMPL_DEF FileId(3) [0; 31)\"],\n         );\n     }\n \n@@ -180,9 +180,9 @@ mod tests {\n             impl T for &Foo {}\n             \",\n             &[\n-                \"impl IMPL_BLOCK FileId(1) [23; 34)\",\n-                \"impl IMPL_BLOCK FileId(1) [35; 52)\",\n-                \"impl IMPL_BLOCK FileId(1) [53; 71)\",\n+                \"impl IMPL_DEF FileId(1) [23; 34)\",\n+                \"impl IMPL_DEF FileId(1) [35; 52)\",\n+                \"impl IMPL_DEF FileId(1) [53; 71)\",\n             ],\n         );\n     }\n@@ -195,7 +195,7 @@ mod tests {\n             #[derive(Copy)]\n             struct Foo<|>;\n             \",\n-            &[\"impl IMPL_BLOCK FileId(1) [0; 15)\"],\n+            &[\"impl IMPL_DEF FileId(1) [0; 15)\"],\n         );\n     }\n }"}, {"sha": "fdd07d8d186f26b0392b162941e9f77f97fd7884", "filename": "crates/ra_ide/src/references/classify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -61,7 +61,7 @@ pub(crate) fn classify_name_ref(\n         PathResolution::Local(local) => NameDefinition::Local(local),\n         PathResolution::TypeParam(par) => NameDefinition::TypeParam(par),\n         PathResolution::Macro(def) => NameDefinition::Macro(def),\n-        PathResolution::SelfType(impl_block) => NameDefinition::SelfType(impl_block),\n+        PathResolution::SelfType(impl_def) => NameDefinition::SelfType(impl_def),\n     };\n     Some(res)\n }"}, {"sha": "ad46389069886a1af24f94af11cdcff04a09d662", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -6,7 +6,7 @@\n // FIXME: this badly needs rename/rewrite (matklad, 2020-02-06).\n \n use hir::{\n-    Adt, FieldSource, HasSource, ImplBlock, Local, MacroDef, Module, ModuleDef, Semantics,\n+    Adt, FieldSource, HasSource, ImplDef, Local, MacroDef, Module, ModuleDef, Semantics,\n     StructField, TypeParam,\n };\n use ra_prof::profile;\n@@ -22,7 +22,7 @@ pub enum NameDefinition {\n     Macro(MacroDef),\n     StructField(StructField),\n     ModuleDef(ModuleDef),\n-    SelfType(ImplBlock),\n+    SelfType(ImplDef),\n     Local(Local),\n     TypeParam(TypeParam),\n }"}, {"sha": "58098e8106aace380732c353f0b0ce00b55dc704", "filename": "crates/ra_parser/src/grammar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -152,7 +152,7 @@ pub(crate) fn reparser(\n         EXTERN_ITEM_LIST => items::extern_item_list,\n         TOKEN_TREE if first_child? == T!['{'] => items::token_tree,\n         ITEM_LIST => match parent? {\n-            IMPL_BLOCK => items::impl_item_list,\n+            IMPL_DEF => items::impl_item_list,\n             TRAIT_DEF => items::trait_item_list,\n             MODULE => items::mod_item_list,\n             _ => return None,"}, {"sha": "433ed6812fb70289fddde6c11218e95e2fce4ff1", "filename": "crates/ra_parser/src/grammar/items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -202,8 +202,8 @@ pub(super) fn maybe_item(p: &mut Parser, m: Marker, flavor: ItemFlavor) -> Resul\n         // test unsafe_default_impl\n         // unsafe default impl Foo {}\n         T![impl] => {\n-            traits::impl_block(p);\n-            m.complete(p, IMPL_BLOCK);\n+            traits::impl_def(p);\n+            m.complete(p, IMPL_DEF);\n         }\n \n         // test existential_type"}, {"sha": "c819e33be971700e83c80147a5a7ae3ad698d7ed", "filename": "crates/ra_parser/src/grammar/items/traits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -53,9 +53,9 @@ pub(crate) fn trait_item_list(p: &mut Parser) {\n     m.complete(p, ITEM_LIST);\n }\n \n-// test impl_block\n+// test impl_def\n // impl Foo {}\n-pub(super) fn impl_block(p: &mut Parser) {\n+pub(super) fn impl_def(p: &mut Parser) {\n     assert!(p.at(T![impl]));\n     p.bump(T![impl]);\n     if choose_type_params_over_qpath(p) {\n@@ -65,7 +65,7 @@ pub(super) fn impl_block(p: &mut Parser) {\n     // FIXME: never type\n     // impl ! {}\n \n-    // test impl_block_neg\n+    // test impl_def_neg\n     // impl !Send for X {}\n     p.eat(T![!]);\n     impl_type(p);"}, {"sha": "dfc30d727831aed7aef8da8d057f807854f3f0bf", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -133,7 +133,7 @@ pub enum SyntaxKind {\n     STATIC_DEF,\n     CONST_DEF,\n     TRAIT_DEF,\n-    IMPL_BLOCK,\n+    IMPL_DEF,\n     TYPE_ALIAS_DEF,\n     MACRO_CALL,\n     TOKEN_TREE,"}, {"sha": "d5986e8b4a9f13c166a1229047c5cd84be1d1cb6", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -169,7 +169,7 @@ impl ast::UseTreeList {\n     }\n }\n \n-impl ast::ImplBlock {\n+impl ast::ImplDef {\n     pub fn target_type(&self) -> Option<ast::TypeRef> {\n         match self.target() {\n             (Some(t), None) | (_, Some(t)) => Some(t),"}, {"sha": "150893e393e1c99e20a349dc80300ad6cd301d90", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -552,13 +552,13 @@ impl TypeAliasDef {\n     }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ImplBlock {\n+pub struct ImplDef {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl AstNode for ImplBlock {\n+impl AstNode for ImplDef {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            IMPL_BLOCK => true,\n+            IMPL_DEF => true,\n             _ => false,\n         }\n     }\n@@ -573,9 +573,9 @@ impl AstNode for ImplBlock {\n         &self.syntax\n     }\n }\n-impl ast::TypeParamsOwner for ImplBlock {}\n-impl ast::AttrsOwner for ImplBlock {}\n-impl ImplBlock {\n+impl ast::TypeParamsOwner for ImplDef {}\n+impl ast::AttrsOwner for ImplDef {}\n+impl ImplDef {\n     pub fn item_list(&self) -> Option<ItemList> {\n         AstChildren::new(&self.syntax).next()\n     }\n@@ -3524,7 +3524,7 @@ pub enum ModuleItem {\n     FnDef(FnDef),\n     TraitDef(TraitDef),\n     TypeAliasDef(TypeAliasDef),\n-    ImplBlock(ImplBlock),\n+    ImplDef(ImplDef),\n     UseItem(UseItem),\n     ExternCrateItem(ExternCrateItem),\n     ConstDef(ConstDef),\n@@ -3561,9 +3561,9 @@ impl From<TypeAliasDef> for ModuleItem {\n         ModuleItem::TypeAliasDef(node)\n     }\n }\n-impl From<ImplBlock> for ModuleItem {\n-    fn from(node: ImplBlock) -> ModuleItem {\n-        ModuleItem::ImplBlock(node)\n+impl From<ImplDef> for ModuleItem {\n+    fn from(node: ImplDef) -> ModuleItem {\n+        ModuleItem::ImplDef(node)\n     }\n }\n impl From<UseItem> for ModuleItem {\n@@ -3594,8 +3594,8 @@ impl From<Module> for ModuleItem {\n impl AstNode for ModuleItem {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            STRUCT_DEF | UNION_DEF | ENUM_DEF | FN_DEF | TRAIT_DEF | TYPE_ALIAS_DEF\n-            | IMPL_BLOCK | USE_ITEM | EXTERN_CRATE_ITEM | CONST_DEF | STATIC_DEF | MODULE => true,\n+            STRUCT_DEF | UNION_DEF | ENUM_DEF | FN_DEF | TRAIT_DEF | TYPE_ALIAS_DEF | IMPL_DEF\n+            | USE_ITEM | EXTERN_CRATE_ITEM | CONST_DEF | STATIC_DEF | MODULE => true,\n             _ => false,\n         }\n     }\n@@ -3607,7 +3607,7 @@ impl AstNode for ModuleItem {\n             FN_DEF => ModuleItem::FnDef(FnDef { syntax }),\n             TRAIT_DEF => ModuleItem::TraitDef(TraitDef { syntax }),\n             TYPE_ALIAS_DEF => ModuleItem::TypeAliasDef(TypeAliasDef { syntax }),\n-            IMPL_BLOCK => ModuleItem::ImplBlock(ImplBlock { syntax }),\n+            IMPL_DEF => ModuleItem::ImplDef(ImplDef { syntax }),\n             USE_ITEM => ModuleItem::UseItem(UseItem { syntax }),\n             EXTERN_CRATE_ITEM => ModuleItem::ExternCrateItem(ExternCrateItem { syntax }),\n             CONST_DEF => ModuleItem::ConstDef(ConstDef { syntax }),\n@@ -3625,7 +3625,7 @@ impl AstNode for ModuleItem {\n             ModuleItem::FnDef(it) => &it.syntax,\n             ModuleItem::TraitDef(it) => &it.syntax,\n             ModuleItem::TypeAliasDef(it) => &it.syntax,\n-            ModuleItem::ImplBlock(it) => &it.syntax,\n+            ModuleItem::ImplDef(it) => &it.syntax,\n             ModuleItem::UseItem(it) => &it.syntax,\n             ModuleItem::ExternCrateItem(it) => &it.syntax,\n             ModuleItem::ConstDef(it) => &it.syntax,"}, {"sha": "7915cf8cb219c43aeff1875656875587d12c0aeb", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -203,12 +203,11 @@ fn validate_visibility(vis: ast::Visibility, errors: &mut Vec<SyntaxError>) {\n         _ => return,\n     }\n \n-    let impl_block = match parent.parent().and_then(|it| it.parent()).and_then(ast::ImplBlock::cast)\n-    {\n+    let impl_def = match parent.parent().and_then(|it| it.parent()).and_then(ast::ImplDef::cast) {\n         Some(it) => it,\n         None => return,\n     };\n-    if impl_block.target_trait().is_some() {\n+    if impl_def.target_trait().is_some() {\n         errors.push(SyntaxError::new(\"Unnecessary visibility qualifier\", vis.syntax.text_range()));\n     }\n }"}, {"sha": "4b13a7236344fb09e679c65a708144ddf285f4a9", "filename": "crates/ra_syntax/test_data/parser/err/0018_incomplete_fn.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0018_incomplete_fn.txt?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@[0; 183)\n-  IMPL_BLOCK@[0; 182)\n+  IMPL_DEF@[0; 182)\n     IMPL_KW@[0; 4) \"impl\"\n     WHITESPACE@[4; 5) \" \"\n     PATH_TYPE@[5; 13)"}, {"sha": "9f50c85e52463d7a4bf2fbcac6bc1171b37985d6", "filename": "crates/ra_syntax/test_data/parser/err/0022_bad_exprs.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.txt?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -77,7 +77,7 @@ SOURCE_FILE@[0; 112)\n           ERROR@[54; 55)\n             COMMA@[54; 55) \",\"\n         WHITESPACE@[55; 56) \" \"\n-        IMPL_BLOCK@[56; 60)\n+        IMPL_DEF@[56; 60)\n           IMPL_KW@[56; 60) \"impl\"\n         EXPR_STMT@[60; 61)\n           ERROR@[60; 61)"}, {"sha": "f239b7b1e5c348b7f79de9fdeb760b8f3678a299", "filename": "crates/ra_syntax/test_data/parser/err/0026_imp_recovery.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0026_imp_recovery.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0026_imp_recovery.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0026_imp_recovery.txt?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@[0; 38)\n-  IMPL_BLOCK@[0; 14)\n+  IMPL_DEF@[0; 14)\n     IMPL_KW@[0; 4) \"impl\"\n     TYPE_PARAM_LIST@[4; 14)\n       L_ANGLE@[4; 5) \"<\"\n@@ -17,7 +17,7 @@ SOURCE_FILE@[0; 38)\n                     IDENT@[8; 13) \"Clone\"\n       R_ANGLE@[13; 14) \">\"\n   WHITESPACE@[14; 15) \"\\n\"\n-  IMPL_BLOCK@[15; 37)\n+  IMPL_DEF@[15; 37)\n     IMPL_KW@[15; 19) \"impl\"\n     TYPE_PARAM_LIST@[19; 22)\n       L_ANGLE@[19; 20) \"<\""}, {"sha": "d8622d45f2b021e6aa3c0ba5ce64817c3113532e", "filename": "crates/ra_syntax/test_data/parser/err/0037_visibility_in_traits.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0037_visibility_in_traits.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0037_visibility_in_traits.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0037_visibility_in_traits.txt?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@[0; 118)\n-  IMPL_BLOCK@[0; 117)\n+  IMPL_DEF@[0; 117)\n     IMPL_KW@[0; 4) \"impl\"\n     WHITESPACE@[4; 5) \" \"\n     PATH_TYPE@[5; 6)"}, {"sha": "01a853d632ab3bc359775ff01acf42b99e422ebc", "filename": "crates/ra_syntax/test_data/parser/inline/err/0002_misplaced_label_err.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.txt?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -18,7 +18,7 @@ SOURCE_FILE@[0; 30)\n               LIFETIME@[16; 21) \"\\'loop\"\n               COLON@[21; 22) \":\"\n         WHITESPACE@[22; 23) \" \"\n-        IMPL_BLOCK@[23; 27)\n+        IMPL_DEF@[23; 27)\n           IMPL_KW@[23; 27) \"impl\"\n         WHITESPACE@[27; 28) \"\\n\"\n         R_CURLY@[28; 29) \"}\""}, {"sha": "124f0a8919e3cf720a127e7a9348fe0add3f81cc", "filename": "crates/ra_syntax/test_data/parser/inline/err/0004_impl_type.txt", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0004_impl_type.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0004_impl_type.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0004_impl_type.txt?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@[0; 87)\n-  IMPL_BLOCK@[0; 12)\n+  IMPL_DEF@[0; 12)\n     IMPL_KW@[0; 4) \"impl\"\n     WHITESPACE@[4; 5) \" \"\n     PATH_TYPE@[5; 9)\n@@ -12,7 +12,7 @@ SOURCE_FILE@[0; 87)\n       L_CURLY@[10; 11) \"{\"\n       R_CURLY@[11; 12) \"}\"\n   WHITESPACE@[12; 13) \"\\n\"\n-  IMPL_BLOCK@[13; 33)\n+  IMPL_DEF@[13; 33)\n     IMPL_KW@[13; 17) \"impl\"\n     WHITESPACE@[17; 18) \" \"\n     PATH_TYPE@[18; 24)\n@@ -33,10 +33,10 @@ SOURCE_FILE@[0; 87)\n       L_CURLY@[31; 32) \"{\"\n       R_CURLY@[32; 33) \"}\"\n   WHITESPACE@[33; 34) \"\\n\"\n-  IMPL_BLOCK@[34; 38)\n+  IMPL_DEF@[34; 38)\n     IMPL_KW@[34; 38) \"impl\"\n   WHITESPACE@[38; 39) \" \"\n-  IMPL_BLOCK@[39; 54)\n+  IMPL_DEF@[39; 54)\n     IMPL_KW@[39; 43) \"impl\"\n     WHITESPACE@[43; 44) \" \"\n     PATH_TYPE@[44; 51)\n@@ -49,7 +49,7 @@ SOURCE_FILE@[0; 87)\n       L_CURLY@[52; 53) \"{\"\n       R_CURLY@[53; 54) \"}\"\n   WHITESPACE@[54; 55) \"\\n\"\n-  IMPL_BLOCK@[55; 70)\n+  IMPL_DEF@[55; 70)\n     IMPL_KW@[55; 59) \"impl\"\n     WHITESPACE@[59; 60) \" \"\n     PATH_TYPE@[60; 66)\n@@ -60,7 +60,7 @@ SOURCE_FILE@[0; 87)\n     WHITESPACE@[66; 67) \" \"\n     FOR_KW@[67; 70) \"for\"\n   WHITESPACE@[70; 71) \" \"\n-  IMPL_BLOCK@[71; 86)\n+  IMPL_DEF@[71; 86)\n     IMPL_KW@[71; 75) \"impl\"\n     WHITESPACE@[75; 76) \" \"\n     PATH_TYPE@[76; 83)"}, {"sha": "ad9f0965ea1beb7f475507e78be1e8152b5f08f3", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0001_trait_item_list.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0001_trait_item_list.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0001_trait_item_list.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0001_trait_item_list.txt?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@[0; 83)\n-  IMPL_BLOCK@[0; 82)\n+  IMPL_DEF@[0; 82)\n     IMPL_KW@[0; 4) \"impl\"\n     WHITESPACE@[4; 5) \" \"\n     PATH_TYPE@[5; 6)"}, {"sha": "757ac092a00b5e6f93cdae2a696a8d23d998d931", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0006_self_param.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0006_self_param.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0006_self_param.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0006_self_param.txt?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@[0; 128)\n-  IMPL_BLOCK@[0; 127)\n+  IMPL_DEF@[0; 127)\n     IMPL_KW@[0; 4) \"impl\"\n     WHITESPACE@[4; 5) \" \"\n     PATH_TYPE@[5; 6)"}, {"sha": "89caee54337a694199e407e614c4764f40471dbf", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0018_arb_self_types.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0018_arb_self_types.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0018_arb_self_types.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0018_arb_self_types.txt?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@[0; 69)\n-  IMPL_BLOCK@[0; 68)\n+  IMPL_DEF@[0; 68)\n     IMPL_KW@[0; 4) \"impl\"\n     WHITESPACE@[4; 5) \" \"\n     PATH_TYPE@[5; 6)"}, {"sha": "b1af679760e77ebd2cce71377b441759b20ad0c0", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0021_impl_item_list.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0021_impl_item_list.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0021_impl_item_list.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0021_impl_item_list.txt?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@[0; 89)\n-  IMPL_BLOCK@[0; 88)\n+  IMPL_DEF@[0; 88)\n     IMPL_KW@[0; 4) \"impl\"\n     WHITESPACE@[4; 5) \" \"\n     PATH_TYPE@[5; 6)"}, {"sha": "0a768a8e3ea7fa8122bd5fadf29593d15761c5ce", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0047_unsafe_default_impl.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0047_unsafe_default_impl.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0047_unsafe_default_impl.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0047_unsafe_default_impl.txt?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@[0; 27)\n-  IMPL_BLOCK@[0; 26)\n+  IMPL_DEF@[0; 26)\n     UNSAFE_KW@[0; 6) \"unsafe\"\n     WHITESPACE@[6; 7) \" \"\n     DEFAULT_KW@[7; 14) \"default\""}, {"sha": "b7527c8705acb07589470ae7a882cf2b9c7cabb9", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0063_impl_def_neg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0063_impl_def_neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0063_impl_def_neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0063_impl_def_neg.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "previous_filename": "crates/ra_syntax/test_data/parser/inline/ok/0063_impl_block_neg.rs"}, {"sha": "0cc3ac08508d52610872d489af12ac9de7f2b19e", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0063_impl_def_neg.txt", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0063_impl_def_neg.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0063_impl_def_neg.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0063_impl_def_neg.txt?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@[0; 20)\n-  IMPL_BLOCK@[0; 19)\n+  IMPL_DEF@[0; 19)\n     IMPL_KW@[0; 4) \"impl\"\n     WHITESPACE@[4; 5) \" \"\n     EXCL@[5; 6) \"!\"", "previous_filename": "crates/ra_syntax/test_data/parser/inline/ok/0063_impl_block_neg.txt"}, {"sha": "d6337f6b3a77b519e9937c7d0ae645e8c4b14912", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0079_impl_def.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0079_impl_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0079_impl_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0079_impl_def.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "previous_filename": "crates/ra_syntax/test_data/parser/inline/ok/0079_impl_block.rs"}, {"sha": "4c2863ba72c464697b823ef023061b3327a66ba1", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0079_impl_def.txt", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0079_impl_def.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0079_impl_def.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0079_impl_def.txt?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@[0; 12)\n-  IMPL_BLOCK@[0; 11)\n+  IMPL_DEF@[0; 11)\n     IMPL_KW@[0; 4) \"impl\"\n     WHITESPACE@[4; 5) \" \"\n     PATH_TYPE@[5; 8)", "previous_filename": "crates/ra_syntax/test_data/parser/inline/ok/0079_impl_block.txt"}, {"sha": "e614acc6faa486b71add74d37f1a35fcde1afb67", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0087_unsafe_impl.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0087_unsafe_impl.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0087_unsafe_impl.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0087_unsafe_impl.txt?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@[0; 19)\n-  IMPL_BLOCK@[0; 18)\n+  IMPL_DEF@[0; 18)\n     UNSAFE_KW@[0; 6) \"unsafe\"\n     WHITESPACE@[6; 7) \" \"\n     IMPL_KW@[7; 11) \"impl\""}, {"sha": "af9077270154ac09f25bbfaf9f5447a8110397e6", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0097_default_impl.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0097_default_impl.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0097_default_impl.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0097_default_impl.txt?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@[0; 20)\n-  IMPL_BLOCK@[0; 19)\n+  IMPL_DEF@[0; 19)\n     DEFAULT_KW@[0; 7) \"default\"\n     WHITESPACE@[7; 8) \" \"\n     IMPL_KW@[8; 12) \"impl\""}, {"sha": "5053ebde73b901ef212851c1c39cebe503485e45", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0118_impl_inner_attributes.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0118_impl_inner_attributes.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0118_impl_inner_attributes.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0118_impl_inner_attributes.txt?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -8,7 +8,7 @@ SOURCE_FILE@[0; 94)\n       L_CURLY@[6; 7) \"{\"\n       R_CURLY@[7; 8) \"}\"\n   WHITESPACE@[8; 9) \"\\n\"\n-  IMPL_BLOCK@[9; 93)\n+  IMPL_DEF@[9; 93)\n     IMPL_KW@[9; 13) \"impl\"\n     WHITESPACE@[13; 14) \" \"\n     PATH_TYPE@[14; 15)"}, {"sha": "e1734224b38b9617469fb715cec38b0ba5ee3c91", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0132_default_fn_type.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0132_default_fn_type.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0132_default_fn_type.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0132_default_fn_type.txt?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@[0; 69)\n-  IMPL_BLOCK@[0; 68)\n+  IMPL_DEF@[0; 68)\n     IMPL_KW@[0; 4) \"impl\"\n     WHITESPACE@[4; 5) \" \"\n     PATH_TYPE@[5; 6)"}, {"sha": "2d46eebb3d2ecef7ea4ef921273921c24813c814", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0150_impl_type_params.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0150_impl_type_params.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0150_impl_type_params.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0150_impl_type_params.txt?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@[0; 29)\n-  IMPL_BLOCK@[0; 28)\n+  IMPL_DEF@[0; 28)\n     IMPL_KW@[0; 4) \"impl\"\n     TYPE_PARAM_LIST@[4; 18)\n       L_ANGLE@[4; 5) \"<\""}, {"sha": "b30030de367dc0e135bfe097ec7aad195c33f608", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0152_fn_patterns.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0152_fn_patterns.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0152_fn_patterns.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0152_fn_patterns.txt?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@[0; 137)\n-  IMPL_BLOCK@[0; 136)\n+  IMPL_DEF@[0; 136)\n     IMPL_KW@[0; 4) \"impl\"\n     WHITESPACE@[4; 5) \" \"\n     PATH_TYPE@[5; 6)"}, {"sha": "341e02704413fa189f792db4377f79b894d953b3", "filename": "crates/ra_syntax/test_data/parser/ok/0042_ufcs_call_list.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0042_ufcs_call_list.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0042_ufcs_call_list.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0042_ufcs_call_list.txt?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -8,7 +8,7 @@ SOURCE_FILE@[0; 199)\n       IDENT@[69; 72) \"Foo\"\n     SEMI@[72; 73) \";\"\n   WHITESPACE@[73; 75) \"\\n\\n\"\n-  IMPL_BLOCK@[75; 141)\n+  IMPL_DEF@[75; 141)\n     IMPL_KW@[75; 79) \"impl\"\n     WHITESPACE@[79; 80) \" \"\n     PATH_TYPE@[80; 83)"}, {"sha": "e15447ca7223400192c23c02419fed425a062b0c", "filename": "crates/ra_syntax/test_data/parser/ok/0045_block_inner_attrs.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0045_block_inner_attrs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0045_block_inner_attrs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0045_block_inner_attrs.txt?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -92,7 +92,7 @@ SOURCE_FILE@[0; 686)\n   WHITESPACE@[461; 463) \"\\n\\n\"\n   COMMENT@[463; 523) \"// https://github.com ...\"\n   WHITESPACE@[523; 524) \"\\n\"\n-  IMPL_BLOCK@[524; 685)\n+  IMPL_DEF@[524; 685)\n     IMPL_KW@[524; 528) \"impl\"\n     WHITESPACE@[528; 529) \" \"\n     PATH_TYPE@[529; 537)"}, {"sha": "719c99c17fe66bee0e3252838f840333cab5aab5", "filename": "crates/ra_syntax/test_data/parser/ok/0051_parameter_attrs.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.txt?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -253,7 +253,7 @@ SOURCE_FILE@[0; 519)\n       WHITESPACE@[234; 235) \"\\n\"\n       R_CURLY@[235; 236) \"}\"\n   WHITESPACE@[236; 238) \"\\n\\n\"\n-  IMPL_BLOCK@[238; 519)\n+  IMPL_DEF@[238; 519)\n     IMPL_KW@[238; 242) \"impl\"\n     WHITESPACE@[242; 243) \" \"\n     PATH_TYPE@[243; 244)"}, {"sha": "6bf0be5656196a4e0762db09a348b0bf3b3b2a3b", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -76,8 +76,8 @@ pub fn analysis_stats(\n                 }\n             }\n \n-            for impl_block in module.impl_blocks(db) {\n-                for item in impl_block.items(db) {\n+            for impl_def in module.impl_defs(db) {\n+                for item in impl_def.items(db) {\n                     num_decls += 1;\n                     if let AssocItem::Function(f) = item {\n                         funcs.push(f);"}, {"sha": "eeeb33e8f97bfc1fe4cc54f73501ed68d4a7c44c", "filename": "crates/rust-analyzer/src/conv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconv.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -57,7 +57,7 @@ impl Conv for SyntaxKind {\n             SyntaxKind::RECORD_FIELD_DEF => SymbolKind::Field,\n             SyntaxKind::STATIC_DEF => SymbolKind::Constant,\n             SyntaxKind::CONST_DEF => SymbolKind::Constant,\n-            SyntaxKind::IMPL_BLOCK => SymbolKind::Object,\n+            SyntaxKind::IMPL_DEF => SymbolKind::Object,\n             _ => SymbolKind::Variable,\n         }\n     }"}, {"sha": "9b58aad975177d4c436df3d3c39f4cac1c37c3d3", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e78036e6c8752fda350818afdd411ab25f405ce/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e78036e6c8752fda350818afdd411ab25f405ce/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=5e78036e6c8752fda350818afdd411ab25f405ce", "patch": "@@ -104,7 +104,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"STATIC_DEF\",\n         \"CONST_DEF\",\n         \"TRAIT_DEF\",\n-        \"IMPL_BLOCK\",\n+        \"IMPL_DEF\",\n         \"TYPE_ALIAS_DEF\",\n         \"MACRO_CALL\",\n         \"TOKEN_TREE\",\n@@ -357,7 +357,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n             TypeRef,\n         }\n \n-        struct ImplBlock: TypeParamsOwner, AttrsOwner {\n+        struct ImplDef: TypeParamsOwner, AttrsOwner {\n             ItemList,\n         }\n \n@@ -560,7 +560,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n             FnDef,\n             TraitDef,\n             TypeAliasDef,\n-            ImplBlock,\n+            ImplDef,\n             UseItem,\n             ExternCrateItem,\n             ConstDef,"}]}