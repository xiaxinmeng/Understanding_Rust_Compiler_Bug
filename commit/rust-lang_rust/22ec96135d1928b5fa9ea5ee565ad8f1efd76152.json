{"sha": "22ec96135d1928b5fa9ea5ee565ad8f1efd76152", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZWM5NjEzNWQxOTI4YjVmYTllYTVlZTU2NWFkOGYxZWZkNzYxNTI=", "commit": {"author": {"name": "r00ster", "email": "r00ster91@protonmail.com", "date": "2021-04-25T12:45:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-25T12:45:48Z"}, "message": "Unify the docs of std::env::{args_os, args} more", "tree": {"sha": "3212b87c80893f89db7da52d9a1b45fefb2cf366", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3212b87c80893f89db7da52d9a1b45fefb2cf366"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22ec96135d1928b5fa9ea5ee565ad8f1efd76152", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJghWR8CRBK7hj4Ov3rIwAAVbcIAC9ruD2GzrADbZtwvtqfnFoz\n5bAhVpj8rUq1Q9xqxuf0gDd6Z43xkJ9IaWtlAc9ppDYvImyidkBSbIWEHQYCZm25\nq1w6FC0diVJvxNQFdNOrnH4gU2Q/9tU0hLiJAuIuNpSRzqMYX/tG5QKM2QLMwqnF\nqBP2VJpUnPbGGUQOg1uK11yZJW88UgFlWyxH4oPiwZ/RCCklcqWb4B6jFHQjsYlf\n/FD/GwzPGGNWhLNZixmIiU6PG4pdLnXKHt3w3vDBFtH5FU2Sl+iIjCXWGm7lkL+Y\nZ8x/xdf5he3gvLzOHPqSnvWvD6rzHuEUtBZJfapGKFCGGEpZtgiux2xTSLe5a24=\n=ckD2\n-----END PGP SIGNATURE-----\n", "payload": "tree 3212b87c80893f89db7da52d9a1b45fefb2cf366\nparent 13a2615883aa28433383a723a764ca9acb43fd48\nauthor r00ster <r00ster91@protonmail.com> 1619354748 +0200\ncommitter GitHub <noreply@github.com> 1619354748 +0200\n\nUnify the docs of std::env::{args_os, args} more"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22ec96135d1928b5fa9ea5ee565ad8f1efd76152", "html_url": "https://github.com/rust-lang/rust/commit/22ec96135d1928b5fa9ea5ee565ad8f1efd76152", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22ec96135d1928b5fa9ea5ee565ad8f1efd76152/comments", "author": {"login": "r00ster91", "id": 35064754, "node_id": "MDQ6VXNlcjM1MDY0NzU0", "avatar_url": "https://avatars.githubusercontent.com/u/35064754?v=4", "gravatar_id": "", "url": "https://api.github.com/users/r00ster91", "html_url": "https://github.com/r00ster91", "followers_url": "https://api.github.com/users/r00ster91/followers", "following_url": "https://api.github.com/users/r00ster91/following{/other_user}", "gists_url": "https://api.github.com/users/r00ster91/gists{/gist_id}", "starred_url": "https://api.github.com/users/r00ster91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/r00ster91/subscriptions", "organizations_url": "https://api.github.com/users/r00ster91/orgs", "repos_url": "https://api.github.com/users/r00ster91/repos", "events_url": "https://api.github.com/users/r00ster91/events{/privacy}", "received_events_url": "https://api.github.com/users/r00ster91/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13a2615883aa28433383a723a764ca9acb43fd48", "url": "https://api.github.com/repos/rust-lang/rust/commits/13a2615883aa28433383a723a764ca9acb43fd48", "html_url": "https://github.com/rust-lang/rust/commit/13a2615883aa28433383a723a764ca9acb43fd48"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "513d9caa157ad5ac9e4a028dbfc1b1523d2cd814", "filename": "library/std/src/env.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/22ec96135d1928b5fa9ea5ee565ad8f1efd76152/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22ec96135d1928b5fa9ea5ee565ad8f1efd76152/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=22ec96135d1928b5fa9ea5ee565ad8f1efd76152", "patch": "@@ -710,14 +710,14 @@ pub struct ArgsOs {\n /// passed as-is.\n ///\n /// On glibc Linux systems, arguments are retrieved by placing a function in `.init_array`.\n-/// Glibc passes `argc`, `argv`, and `envp` to functions in `.init_array`, as a non-standard\n+/// glibc passes `argc`, `argv`, and `envp` to functions in `.init_array`, as a non-standard\n /// extension. This allows `std::env::args` to work even in a `cdylib` or `staticlib`, as it\n /// does on macOS and Windows.\n ///\n /// # Panics\n ///\n /// The returned iterator will panic during iteration if any argument to the\n-/// process is not valid unicode. If this is not desired,\n+/// process is not valid Unicode. If this is not desired,\n /// use the [`args_os`] function instead.\n ///\n /// # Examples\n@@ -735,17 +735,25 @@ pub fn args() -> Args {\n     Args { inner: args_os() }\n }\n \n-/// Returns the arguments which this program was started with (normally passed\n+/// Returns the arguments that this program was started with (normally passed\n /// via the command line).\n ///\n /// The first element is traditionally the path of the executable, but it can be\n-/// set to arbitrary text, and it may not even exist, so this property should\n+/// set to arbitrary text, and may not even exist. This means this property should\n /// not be relied upon for security purposes.\n ///\n-/// On glibc Linux systems, arguments are retrieved by placing a function in \".init_array\".\n-/// Glibc passes argc, argv, and envp to functions in \".init_array\", as a non-standard extension.\n-/// This allows `std::env::args` to work even in a `cdylib` or `staticlib`, as it does on macOS\n-/// and Windows.\n+/// On Unix systems the shell usually expands unquoted arguments with glob patterns\n+/// (such as `*` and `?`). On Windows this is not done, and such arguments are\n+/// passed as-is.\n+///\n+/// On glibc Linux systems, arguments are retrieved by placing a function in `.init_array`.\n+/// glibc passes `argc`, `argv`, and `envp` to functions in `.init_array`, as a non-standard\n+/// extension. This allows `std::env::args_os` to work even in a `cdylib` or `staticlib`, as it\n+/// does on macOS and Windows.\n+///\n+/// Note that the returned iterator will not panic during iteration if any argument to the\n+/// process is not valid Unicode. For more safety,\n+/// use the [`args`] function instead.\n ///\n /// # Examples\n ///"}]}