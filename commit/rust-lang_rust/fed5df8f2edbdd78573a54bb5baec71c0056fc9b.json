{"sha": "fed5df8f2edbdd78573a54bb5baec71c0056fc9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlZDVkZjhmMmVkYmRkNzg1NzNhNTRiYjViYWVjNzFjMDA1NmZjOWI=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-10T21:56:03Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-10T23:51:25Z"}, "message": "libcore: LinearMap doesn't need to pass around the bucket vec", "tree": {"sha": "c44960c127dcd0a2b92f7b88041081da63a41d51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c44960c127dcd0a2b92f7b88041081da63a41d51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fed5df8f2edbdd78573a54bb5baec71c0056fc9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fed5df8f2edbdd78573a54bb5baec71c0056fc9b", "html_url": "https://github.com/rust-lang/rust/commit/fed5df8f2edbdd78573a54bb5baec71c0056fc9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fed5df8f2edbdd78573a54bb5baec71c0056fc9b/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f04df8522cc93dfcdc0eb49f8403d305a508e58", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f04df8522cc93dfcdc0eb49f8403d305a508e58", "html_url": "https://github.com/rust-lang/rust/commit/0f04df8522cc93dfcdc0eb49f8403d305a508e58"}], "stats": {"total": 17, "additions": 7, "deletions": 10}, "files": [{"sha": "81cfe2702398d218d3c8ff32166dee8241cf355d", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fed5df8f2edbdd78573a54bb5baec71c0056fc9b/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed5df8f2edbdd78573a54bb5baec71c0056fc9b/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=fed5df8f2edbdd78573a54bb5baec71c0056fc9b", "patch": "@@ -108,19 +108,17 @@ pub mod linear {\n         }\n \n         #[inline(always)]\n-        pure fn bucket_for_key(&self, buckets: &[Option<Bucket<K, V>>],\n-                               k: &K) -> SearchResult {\n+        pure fn bucket_for_key(&self, k: &K) -> SearchResult {\n             let hash = k.hash_keyed(self.k0, self.k1) as uint;\n-            self.bucket_for_key_with_hash(buckets, hash, k)\n+            self.bucket_for_key_with_hash(hash, k)\n         }\n \n         #[inline(always)]\n         pure fn bucket_for_key_with_hash(&self,\n-                                         buckets: &[Option<Bucket<K, V>>],\n                                          hash: uint,\n                                          k: &K) -> SearchResult {\n             let _ = for self.bucket_sequence(hash) |i| {\n-                match buckets[i] {\n+                match self.buckets[i] {\n                     Some(ref bkt) => if bkt.hash == hash && *k == bkt.key {\n                         return FoundEntry(i);\n                     },\n@@ -161,7 +159,7 @@ pub mod linear {\n         /// Assumes that there will be a bucket.\n         /// True if there was no previous entry with that key\n         fn insert_internal(&mut self, hash: uint, k: K, v: V) -> bool {\n-            match self.bucket_for_key_with_hash(self.buckets, hash, &k) {\n+            match self.bucket_for_key_with_hash(hash, &k) {\n                 TableFull => { die!(~\"Internal logic error\"); }\n                 FoundHole(idx) => {\n                     debug!(\"insert fresh (%?->%?) at idx %?, hash %?\",\n@@ -196,8 +194,7 @@ pub mod linear {\n             //\n             // I found this explanation elucidating:\n             // http://www.maths.lse.ac.uk/Courses/MA407/del-hash.pdf\n-            let mut idx = match self.bucket_for_key_with_hash(self.buckets,\n-                                                              hash, k) {\n+            let mut idx = match self.bucket_for_key_with_hash(hash, k) {\n                 TableFull | FoundHole(_) => return None,\n                 FoundEntry(idx) => idx\n             };\n@@ -273,7 +270,7 @@ pub mod linear {\n     impl <K: Hash IterBytes Eq, V> LinearMap<K, V>: Map<K, V> {\n         /// Return true if the map contains a value for the specified key\n         pure fn contains_key(&self, k: &K) -> bool {\n-            match self.bucket_for_key(self.buckets, k) {\n+            match self.bucket_for_key(k) {\n                 FoundEntry(_) => {true}\n                 TableFull | FoundHole(_) => {false}\n             }\n@@ -291,7 +288,7 @@ pub mod linear {\n \n         /// Return the value corresponding to the key in the map\n         pure fn find(&self, k: &K) -> Option<&self/V> {\n-            match self.bucket_for_key(self.buckets, k) {\n+            match self.bucket_for_key(k) {\n                 FoundEntry(idx) => {\n                     match self.buckets[idx] {\n                         Some(ref bkt) => {"}]}