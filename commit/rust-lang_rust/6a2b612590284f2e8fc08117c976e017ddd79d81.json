{"sha": "6a2b612590284f2e8fc08117c976e017ddd79d81", "node_id": "C_kwDOAAsO6NoAKDZhMmI2MTI1OTAyODRmMmU4ZmMwODExN2M5NzZlMDE3ZGRkNzlkODE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-17T22:00:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-17T22:00:57Z"}, "message": "Rollup merge of #93780 - GuillaumeGomez:links-in-sidebar, r=jsha\n\nGenerate list instead of div items in sidebar\n\nFixes #92986.\n\nSurprisingly, we didn't have much CSS for this...\n\n[Demo](https://rustdoc.crud.net/imperio/links-in-sidebar/std/index.html).\n\nr? `@jsha`", "tree": {"sha": "5fdbb9a781c515fbfd626380bb239fd7f77b9b0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fdbb9a781c515fbfd626380bb239fd7f77b9b0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a2b612590284f2e8fc08117c976e017ddd79d81", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiDsWZCRBK7hj4Ov3rIwAA+KgIAJJM9194YR6n2cK+q4n5bWtH\nymhgPpVO3PwguTS3RZrpcV2wsPazZW1w/Zgp+RQ0ONuWnHMKApfYGnmbUlZDiH2o\nJZ2RlUV8W2g+7gbFAgklqkZJZlgOapLLiJrbTJH/XfxfRDQ+wvTQ+2P44sRQcj/3\nuioDVxiLDDwP5ytNjkYQ2U6r0ltS/kcPxpWdrGzbQa8E4enRZbjVOdQZvMlIWW4i\n7MVRhQ45wqscVkNf7nHrRUlacJo19rxcXxCfF5FiW3yo2VbRTRm1xpkhoVxLx7wW\nNIF1BGpN3SwXo9LAjNATIwMBcnHU1hJr4f0T60rfhcXHGG3CppbcFxbF1yaEKWw=\n=uA0B\n-----END PGP SIGNATURE-----\n", "payload": "tree 5fdbb9a781c515fbfd626380bb239fd7f77b9b0a\nparent 98c54c8cad638e703b631a5ff64630e5e55eb5dc\nparent 0d928b6ed01ec66b4f6c4ea07d838bdcc5db4f23\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645135257 +0100\ncommitter GitHub <noreply@github.com> 1645135257 +0100\n\nRollup merge of #93780 - GuillaumeGomez:links-in-sidebar, r=jsha\n\nGenerate list instead of div items in sidebar\n\nFixes #92986.\n\nSurprisingly, we didn't have much CSS for this...\n\n[Demo](https://rustdoc.crud.net/imperio/links-in-sidebar/std/index.html).\n\nr? `@jsha`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a2b612590284f2e8fc08117c976e017ddd79d81", "html_url": "https://github.com/rust-lang/rust/commit/6a2b612590284f2e8fc08117c976e017ddd79d81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a2b612590284f2e8fc08117c976e017ddd79d81/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98c54c8cad638e703b631a5ff64630e5e55eb5dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/98c54c8cad638e703b631a5ff64630e5e55eb5dc", "html_url": "https://github.com/rust-lang/rust/commit/98c54c8cad638e703b631a5ff64630e5e55eb5dc"}, {"sha": "0d928b6ed01ec66b4f6c4ea07d838bdcc5db4f23", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d928b6ed01ec66b4f6c4ea07d838bdcc5db4f23", "html_url": "https://github.com/rust-lang/rust/commit/0d928b6ed01ec66b4f6c4ea07d838bdcc5db4f23"}], "stats": {"total": 354, "additions": 168, "deletions": 186}, "files": [{"sha": "3e3302f8f4db701594d95d1228106cc4b9b0a338", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 104, "deletions": 121, "changes": 225, "blob_url": "https://github.com/rust-lang/rust/blob/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=6a2b612590284f2e8fc08117c976e017ddd79d81", "patch": "@@ -1963,16 +1963,12 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n                 // We want links' order to be reproducible so we don't use unstable sort.\n                 assoc_consts.sort();\n \n-                out.push_str(\n-                    \"<h3 class=\\\"sidebar-title\\\">\\\n-                        <a href=\\\"#implementations\\\">Associated Constants</a>\\\n-                     </h3>\\\n-                     <div class=\\\"sidebar-links\\\">\",\n+                print_sidebar_block(\n+                    out,\n+                    \"implementations\",\n+                    \"Associated Constants\",\n+                    assoc_consts.iter(),\n                 );\n-                for line in assoc_consts {\n-                    write!(out, \"{}\", line);\n-                }\n-                out.push_str(\"</div>\");\n             }\n             let mut methods = v\n                 .iter()\n@@ -1983,14 +1979,7 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n                 // We want links' order to be reproducible so we don't use unstable sort.\n                 methods.sort();\n \n-                out.push_str(\n-                    \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#implementations\\\">Methods</a></h3>\\\n-                     <div class=\\\"sidebar-links\\\">\",\n-                );\n-                for line in methods {\n-                    write!(out, \"{}\", line);\n-                }\n-                out.push_str(\"</div>\");\n+                print_sidebar_block(out, \"implementations\", \"Methods\", methods.iter());\n             }\n         }\n \n@@ -2029,14 +2018,6 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n                 ret\n             };\n \n-            let write_sidebar_links = |out: &mut Buffer, links: Vec<String>| {\n-                out.push_str(\"<div class=\\\"sidebar-links\\\">\");\n-                for link in links {\n-                    out.push_str(&link);\n-                }\n-                out.push_str(\"</div>\");\n-            };\n-\n             let (synthetic, concrete): (Vec<&Impl>, Vec<&Impl>) =\n                 v.iter().partition::<Vec<_>, _>(|i| i.inner_impl().kind.is_auto());\n             let (blanket_impl, concrete): (Vec<&Impl>, Vec<&Impl>) =\n@@ -2047,27 +2028,30 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n             let blanket_format = format_impls(blanket_impl);\n \n             if !concrete_format.is_empty() {\n-                out.push_str(\n-                    \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#trait-implementations\\\">\\\n-                        Trait Implementations</a></h3>\",\n+                print_sidebar_block(\n+                    out,\n+                    \"trait-implementations\",\n+                    \"Trait Implementations\",\n+                    concrete_format.iter(),\n                 );\n-                write_sidebar_links(out, concrete_format);\n             }\n \n             if !synthetic_format.is_empty() {\n-                out.push_str(\n-                    \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#synthetic-implementations\\\">\\\n-                        Auto Trait Implementations</a></h3>\",\n+                print_sidebar_block(\n+                    out,\n+                    \"synthetic-implementations\",\n+                    \"Auto Trait Implementations\",\n+                    synthetic_format.iter(),\n                 );\n-                write_sidebar_links(out, synthetic_format);\n             }\n \n             if !blanket_format.is_empty() {\n-                out.push_str(\n-                    \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#blanket-implementations\\\">\\\n-                        Blanket Implementations</a></h3>\",\n+                print_sidebar_block(\n+                    out,\n+                    \"blanket-implementations\",\n+                    \"Blanket Implementations\",\n+                    blanket_format.iter(),\n                 );\n-                write_sidebar_links(out, blanket_format);\n             }\n         }\n     }\n@@ -2127,20 +2111,14 @@ fn sidebar_deref_methods(\n                 } else {\n                     \"deref-methods\"\n                 };\n-                write!(\n-                    out,\n-                    \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#{}\\\">Methods from {}&lt;Target={}&gt;</a></h3>\",\n-                    id,\n+                let title = format!(\n+                    \"Methods from {}&lt;Target={}&gt;\",\n                     Escape(&format!(\"{:#}\", impl_.inner_impl().trait_.as_ref().unwrap().print(cx))),\n                     Escape(&format!(\"{:#}\", real_target.print(cx))),\n                 );\n                 // We want links' order to be reproducible so we don't use unstable sort.\n                 ret.sort();\n-                out.push_str(\"<div class=\\\"sidebar-links\\\">\");\n-                for link in ret {\n-                    write!(out, \"{}\", link);\n-                }\n-                out.push_str(\"</div>\");\n+                print_sidebar_block(out, id, &title, ret.iter());\n             }\n         }\n \n@@ -2166,27 +2144,19 @@ fn sidebar_struct(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, s: &clea\n     let fields = get_struct_fields_name(&s.fields);\n \n     if !fields.is_empty() {\n-        if let CtorKind::Fictive = s.struct_type {\n-            sidebar.push_str(\n-                \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#fields\\\">Fields</a></h3>\\\n-                <div class=\\\"sidebar-links\\\">\",\n-            );\n-\n-            for field in fields {\n-                sidebar.push_str(&field);\n+        match s.struct_type {\n+            CtorKind::Fictive => {\n+                print_sidebar_block(&mut sidebar, \"fields\", \"Fields\", fields.iter());\n             }\n-\n-            sidebar.push_str(\"</div>\");\n-        } else if let CtorKind::Fn = s.struct_type {\n-            sidebar\n-                .push_str(\"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#fields\\\">Tuple Fields</a></h3>\");\n+            CtorKind::Fn => print_sidebar_title(&mut sidebar, \"fields\", \"Tuple Fields\"),\n+            CtorKind::Const => {}\n         }\n     }\n \n     sidebar_assoc_items(cx, &mut sidebar, it);\n \n     if !sidebar.is_empty() {\n-        write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar.into_inner());\n+        write!(buf, \"<section>{}</section>\", sidebar.into_inner());\n     }\n }\n \n@@ -2214,18 +2184,50 @@ fn extract_for_impl_name(item: &clean::Item, cx: &Context<'_>) -> Option<(String\n     }\n }\n \n+/// Don't call this function directly!!! Use `print_sidebar_title` or `print_sidebar_block` instead!\n+fn print_sidebar_title_inner(buf: &mut Buffer, id: &str, title: &str) {\n+    write!(\n+        buf,\n+        \"<h3 class=\\\"sidebar-title\\\">\\\n+             <a href=\\\"#{}\\\">{}</a>\\\n+         </h3>\",\n+        id, title\n+    );\n+}\n+\n+fn print_sidebar_title(buf: &mut Buffer, id: &str, title: &str) {\n+    buf.push_str(\"<div class=\\\"block\\\">\");\n+    print_sidebar_title_inner(buf, id, title);\n+    buf.push_str(\"</div>\");\n+}\n+\n+fn print_sidebar_block(\n+    buf: &mut Buffer,\n+    id: &str,\n+    title: &str,\n+    items: impl Iterator<Item = impl fmt::Display>,\n+) {\n+    buf.push_str(\"<div class=\\\"block\\\">\");\n+    print_sidebar_title_inner(buf, id, title);\n+    buf.push_str(\"<ul>\");\n+    for item in items {\n+        write!(buf, \"<li>{}</li>\", item);\n+    }\n+    buf.push_str(\"</ul></div>\");\n+}\n+\n fn sidebar_trait(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, t: &clean::Trait) {\n-    buf.write_str(\"<div class=\\\"block items\\\">\");\n+    buf.write_str(\"<section>\");\n \n     fn print_sidebar_section(\n         out: &mut Buffer,\n         items: &[clean::Item],\n-        before: &str,\n+        id: &str,\n+        title: &str,\n         filter: impl Fn(&clean::Item) -> bool,\n-        write: impl Fn(&mut Buffer, &str),\n-        after: &str,\n+        mapper: impl Fn(&str) -> String,\n     ) {\n-        let mut items = items\n+        let mut items: Vec<&str> = items\n             .iter()\n             .filter_map(|m| match m.name {\n                 Some(ref name) if filter(m) => Some(name.as_str()),\n@@ -2235,52 +2237,44 @@ fn sidebar_trait(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, t: &clean\n \n         if !items.is_empty() {\n             items.sort_unstable();\n-            out.push_str(before);\n-            for item in items.into_iter() {\n-                write(out, &item);\n-            }\n-            out.push_str(after);\n+            print_sidebar_block(out, id, title, items.into_iter().map(mapper));\n         }\n     }\n \n     print_sidebar_section(\n         buf,\n         &t.items,\n-        \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#associated-types\\\">\\\n-            Associated Types</a></h3><div class=\\\"sidebar-links\\\">\",\n+        \"associated-types\",\n+        \"Associated Types\",\n         |m| m.is_associated_type(),\n-        |out, sym| write!(out, \"<a href=\\\"#associatedtype.{0}\\\">{0}</a>\", sym),\n-        \"</div>\",\n+        |sym| format!(\"<a href=\\\"#associatedtype.{0}\\\">{0}</a>\", sym),\n     );\n \n     print_sidebar_section(\n         buf,\n         &t.items,\n-        \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#associated-const\\\">\\\n-            Associated Constants</a></h3><div class=\\\"sidebar-links\\\">\",\n+        \"associated-const\",\n+        \"Associated Constants\",\n         |m| m.is_associated_const(),\n-        |out, sym| write!(out, \"<a href=\\\"#associatedconstant.{0}\\\">{0}</a>\", sym),\n-        \"</div>\",\n+        |sym| format!(\"<a href=\\\"#associatedconstant.{0}\\\">{0}</a>\", sym),\n     );\n \n     print_sidebar_section(\n         buf,\n         &t.items,\n-        \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#required-methods\\\">\\\n-            Required Methods</a></h3><div class=\\\"sidebar-links\\\">\",\n+        \"required-methods\",\n+        \"Required Methods\",\n         |m| m.is_ty_method(),\n-        |out, sym| write!(out, \"<a href=\\\"#tymethod.{0}\\\">{0}</a>\", sym),\n-        \"</div>\",\n+        |sym| format!(\"<a href=\\\"#tymethod.{0}\\\">{0}</a>\", sym),\n     );\n \n     print_sidebar_section(\n         buf,\n         &t.items,\n-        \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#provided-methods\\\">\\\n-            Provided Methods</a></h3><div class=\\\"sidebar-links\\\">\",\n+        \"provided-methods\",\n+        \"Provided Methods\",\n         |m| m.is_method(),\n-        |out, sym| write!(out, \"<a href=\\\"#method.{0}\\\">{0}</a>\", sym),\n-        \"</div>\",\n+        |sym| format!(\"<a href=\\\"#method.{0}\\\">{0}</a>\", sym),\n     );\n \n     let cache = cx.cache();\n@@ -2295,37 +2289,31 @@ fn sidebar_trait(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, t: &clean\n \n         if !res.is_empty() {\n             res.sort();\n-            buf.push_str(\n-                \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#foreign-impls\\\">\\\n-                    Implementations on Foreign Types</a></h3>\\\n-                 <div class=\\\"sidebar-links\\\">\",\n+            print_sidebar_block(\n+                buf,\n+                \"foreign-impls\",\n+                \"Implementations on Foreign Types\",\n+                res.iter().map(|(name, id)| format!(\"<a href=\\\"#{}\\\">{}</a>\", id, Escape(&name))),\n             );\n-            for (name, id) in res.into_iter() {\n-                write!(buf, \"<a href=\\\"#{}\\\">{}</a>\", id, Escape(&name));\n-            }\n-            buf.push_str(\"</div>\");\n         }\n     }\n \n     sidebar_assoc_items(cx, buf, it);\n \n-    buf.push_str(\"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#implementors\\\">Implementors</a></h3>\");\n+    print_sidebar_title(buf, \"implementors\", \"Implementors\");\n     if t.is_auto {\n-        buf.push_str(\n-            \"<h3 class=\\\"sidebar-title\\\"><a \\\n-                href=\\\"#synthetic-implementors\\\">Auto Implementors</a></h3>\",\n-        );\n+        print_sidebar_title(buf, \"synthetic-implementors\", \"Auto Implementors\");\n     }\n \n-    buf.push_str(\"</div>\")\n+    buf.push_str(\"</section>\")\n }\n \n fn sidebar_primitive(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item) {\n     let mut sidebar = Buffer::new();\n     sidebar_assoc_items(cx, &mut sidebar, it);\n \n     if !sidebar.is_empty() {\n-        write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar.into_inner());\n+        write!(buf, \"<section>{}</section>\", sidebar.into_inner());\n     }\n }\n \n@@ -2334,7 +2322,7 @@ fn sidebar_typedef(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item) {\n     sidebar_assoc_items(cx, &mut sidebar, it);\n \n     if !sidebar.is_empty() {\n-        write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar.into_inner());\n+        write!(buf, \"<section>{}</section>\", sidebar.into_inner());\n     }\n }\n \n@@ -2355,22 +2343,13 @@ fn sidebar_union(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, u: &clean\n     let fields = get_struct_fields_name(&u.fields);\n \n     if !fields.is_empty() {\n-        sidebar.push_str(\n-            \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#fields\\\">Fields</a></h3>\\\n-            <div class=\\\"sidebar-links\\\">\",\n-        );\n-\n-        for field in fields {\n-            sidebar.push_str(&field);\n-        }\n-\n-        sidebar.push_str(\"</div>\");\n+        print_sidebar_block(&mut sidebar, \"fields\", \"Fields\", fields.iter());\n     }\n \n     sidebar_assoc_items(cx, &mut sidebar, it);\n \n     if !sidebar.is_empty() {\n-        write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar.into_inner());\n+        write!(buf, \"<section>{}</section>\", sidebar.into_inner());\n     }\n }\n \n@@ -2388,17 +2367,13 @@ fn sidebar_enum(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, e: &clean:\n         .collect::<Vec<_>>();\n     if !variants.is_empty() {\n         variants.sort_unstable();\n-        sidebar.push_str(&format!(\n-            \"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#variants\\\">Variants</a></h3>\\\n-             <div class=\\\"sidebar-links\\\">{}</div>\",\n-            variants.join(\"\"),\n-        ));\n+        print_sidebar_block(&mut sidebar, \"variants\", \"Variants\", variants.iter());\n     }\n \n     sidebar_assoc_items(cx, &mut sidebar, it);\n \n     if !sidebar.is_empty() {\n-        write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar.into_inner());\n+        write!(buf, \"<section>{}</section>\", sidebar.into_inner());\n     }\n }\n \n@@ -2569,7 +2544,15 @@ fn sidebar_module(buf: &mut Buffer, items: &[clean::Item]) {\n     }\n \n     if !sidebar.is_empty() {\n-        write!(buf, \"<div class=\\\"block items\\\"><ul>{}</ul></div>\", sidebar);\n+        write!(\n+            buf,\n+            \"<section>\\\n+                 <div class=\\\"block\\\">\\\n+                     <ul>{}</ul>\\\n+                 </div>\\\n+             </section>\",\n+            sidebar\n+        );\n     }\n }\n \n@@ -2578,7 +2561,7 @@ fn sidebar_foreign_type(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item) {\n     sidebar_assoc_items(cx, &mut sidebar, it);\n \n     if !sidebar.is_empty() {\n-        write!(buf, \"<div class=\\\"block items\\\">{}</div>\", sidebar.into_inner());\n+        write!(buf, \"<section>{}</section>\", sidebar.into_inner());\n     }\n }\n "}, {"sha": "f1e0a89883ab8d2915c862304aa0ed126ee2c3d5", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=6a2b612590284f2e8fc08117c976e017ddd79d81", "patch": "@@ -484,10 +484,6 @@ h2.location a {\n \toverflow: hidden;\n }\n \n-.sidebar-links a {\n-\twhite-space: nowrap;\n-}\n-\n .sidebar h2 {\n \tborder-bottom: none;\n \tfont-weight: 500;\n@@ -504,11 +500,14 @@ h2.location a {\n \tmargin: 0;\n }\n \n-.sidebar-links,\n-.block {\n+.sidebar-elems .block {\n \tmargin-bottom: 2em;\n }\n \n+.sidebar-elems .block li a {\n+\twhite-space: nowrap;\n+}\n+\n .mobile-topbar {\n \tdisplay: none;\n }"}, {"sha": "a680635ef8ae411f068db93f530ee913be1a2903", "filename": "src/test/rustdoc-gui/hash-item-expansion.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc-gui%2Fhash-item-expansion.goml", "raw_url": "https://github.com/rust-lang/rust/raw/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc-gui%2Fhash-item-expansion.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fhash-item-expansion.goml?ref=6a2b612590284f2e8fc08117c976e017ddd79d81", "patch": "@@ -5,7 +5,7 @@ assert-attribute: (\"#blanket-implementations-list > details:nth-child(2)\", {\"ope\n // We first check that the impl block is open by default.\n assert-attribute: (\"#implementations + details\", {\"open\": \"\"})\n // To ensure that we will click on the currently hidden method.\n-assert-text: (\".sidebar-links > a\", \"must_use\")\n-click: \".sidebar-links > a\"\n+assert-text: (\".sidebar-elems section .block li > a\", \"must_use\")\n+click: \".sidebar-elems section .block li > a\"\n // We check that the impl block was opened as expected so that we can see the method.\n assert-attribute: (\"#implementations + details\", {\"open\": \"\"})"}, {"sha": "79f18db8fc7cde424abeb23607bedd19a005a963", "filename": "src/test/rustdoc-gui/sidebar-mobile.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml", "raw_url": "https://github.com/rust-lang/rust/raw/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-mobile.goml?ref=6a2b612590284f2e8fc08117c976e017ddd79d81", "patch": "@@ -33,7 +33,7 @@ assert-property: (\".mobile-topbar\", {\"clientHeight\": \"45\"})\n // Check that clicking an element from the sidebar scrolls to the right place\n // so the target is not obscured by the topbar.\n click: \".sidebar-menu-toggle\"\n-click: \".sidebar-links a\"\n+click: \".sidebar-elems section .block li > a\"\n assert-position: (\"#method\\.must_use\", {\"y\": 45})\n \n // Check that the bottom-most item on the sidebar menu can be scrolled fully into view."}, {"sha": "6b79b00d3f7862589a765b0da9fca70aa12dc33c", "filename": "src/test/rustdoc-gui/sidebar.goml", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "raw_url": "https://github.com/rust-lang/rust/raw/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml?ref=6a2b612590284f2e8fc08117c976e017ddd79d81", "patch": "@@ -13,15 +13,15 @@ assert-css: (\"#all-types\", {\"color\": \"rgb(53, 109, 164)\"})\n // We check that we have the crates list and that the \"current\" on is \"test_docs\".\n assert-text: (\".sidebar-elems .crate > ul > li > a.current\", \"test_docs\")\n // And we're also supposed to have the list of items in the current module.\n-assert-text: (\".sidebar-elems .items > ul > li:nth-child(1)\", \"Modules\")\n-assert-text: (\".sidebar-elems .items > ul > li:nth-child(2)\", \"Macros\")\n-assert-text: (\".sidebar-elems .items > ul > li:nth-child(3)\", \"Structs\")\n-assert-text: (\".sidebar-elems .items > ul > li:nth-child(4)\", \"Enums\")\n-assert-text: (\".sidebar-elems .items > ul > li:nth-child(5)\", \"Traits\")\n-assert-text: (\".sidebar-elems .items > ul > li:nth-child(6)\", \"Functions\")\n-assert-text: (\".sidebar-elems .items > ul > li:nth-child(7)\", \"Type Definitions\")\n-assert-text: (\".sidebar-elems .items > ul > li:nth-child(8)\", \"Unions\")\n-assert-text: (\".sidebar-elems .items > ul > li:nth-child(9)\", \"Keywords\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(1)\", \"Modules\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(2)\", \"Macros\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(3)\", \"Structs\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(4)\", \"Enums\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(5)\", \"Traits\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(6)\", \"Functions\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(7)\", \"Type Definitions\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(8)\", \"Unions\")\n+assert-text: (\".sidebar-elems section ul > li:nth-child(9)\", \"Keywords\")\n assert-text: (\"#structs + .item-table .item-left > a\", \"Foo\")\n click: \"#structs + .item-table .item-left > a\"\n \n@@ -30,7 +30,7 @@ assert-count: (\".sidebar .location\", 2)\n // We check that there is no crate listed outside of the top level.\n assert-false: \".sidebar-elems > .crate\"\n \n-click: \".sidebar-links a\"\n+click: \".sidebar-elems section .block li > a\"\n assert-property-false: (\"html\", {\"scrollTop\": \"0\"})\n \n click: \".sidebar h2.location a\"\n@@ -47,11 +47,11 @@ assert-text: (\".sidebar > .location\", \"Crate lib2\")\n // We check that we have the crates list and that the \"current\" on is now \"lib2\".\n assert-text: (\".sidebar-elems .crate > ul > li > a.current\", \"lib2\")\n // We now go to the \"foobar\" function page.\n-assert-text: (\".sidebar-elems > .items > ul > li:nth-child(1)\", \"Modules\")\n-assert-text: (\".sidebar-elems > .items > ul > li:nth-child(2)\", \"Structs\")\n-assert-text: (\".sidebar-elems > .items > ul > li:nth-child(3)\", \"Traits\")\n-assert-text: (\".sidebar-elems > .items > ul > li:nth-child(4)\", \"Functions\")\n-assert-text: (\".sidebar-elems > .items > ul > li:nth-child(5)\", \"Type Definitions\")\n+assert-text: (\".sidebar-elems > section .block ul > li:nth-child(1)\", \"Modules\")\n+assert-text: (\".sidebar-elems > section .block ul > li:nth-child(2)\", \"Structs\")\n+assert-text: (\".sidebar-elems > section .block ul > li:nth-child(3)\", \"Traits\")\n+assert-text: (\".sidebar-elems > section .block ul > li:nth-child(4)\", \"Functions\")\n+assert-text: (\".sidebar-elems > section .block ul > li:nth-child(5)\", \"Type Definitions\")\n assert-text: (\"#functions + .item-table .item-left > a\", \"foobar\")\n click: \"#functions + .item-table .item-left > a\"\n \n@@ -72,12 +72,12 @@ goto: ./sub_module/sub_sub_module/index.html\n assert-text: (\".sidebar > .location\", \"Module sub_sub_module\")\n // We check that we don't have the crate list.\n assert-false: \".sidebar-elems .crate\"\n-assert-text: (\".sidebar-elems .items > ul > li:nth-child(1)\", \"Functions\")\n+assert-text: (\".sidebar-elems > section ul > li:nth-child(1)\", \"Functions\")\n assert-text: (\"#functions + .item-table .item-left > a\", \"foo\")\n \n // Links to trait implementations in the sidebar should not wrap even if they are long.\n goto: file://|DOC_PATH|/lib2/struct.HasALongTraitWithParams.html\n-assert-property: (\".sidebar-links a\", {\"offsetHeight\": 29})\n+assert-property: (\".sidebar-elems section .block li > a\", {\"offsetHeight\": 29})\n \n // Test that clicking on of the \"In <module>\" headings in the sidebar links to the\n // appropriate anchor in index.html."}, {"sha": "d77d1dca483e0e0cbbb03cb169d98e08f9314bc0", "filename": "src/test/rustdoc-gui/trait-sidebar-item-order.goml", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc-gui%2Ftrait-sidebar-item-order.goml", "raw_url": "https://github.com/rust-lang/rust/raw/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc-gui%2Ftrait-sidebar-item-order.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftrait-sidebar-item-order.goml?ref=6a2b612590284f2e8fc08117c976e017ddd79d81", "patch": "@@ -1,8 +1,8 @@\n // Checks that the elements in the sidebar are alphabetically sorted.\n goto: file://|DOC_PATH|/test_docs/trait.AnotherOne.html\n-assert-text: (\".sidebar-links a:nth-of-type(1)\", \"another\")\n-assert-text: (\".sidebar-links a:nth-of-type(2)\", \"func1\")\n-assert-text: (\".sidebar-links a:nth-of-type(3)\", \"func2\")\n-assert-text: (\".sidebar-links a:nth-of-type(4)\", \"func3\")\n-assert-text: (\".sidebar-links a:nth-of-type(5)\", \"hello\")\n-assert-text: (\".sidebar-links a:nth-of-type(6)\", \"why_not\")\n+assert-text: (\".sidebar-elems section .block li:nth-of-type(1) > a\", \"another\")\n+assert-text: (\".sidebar-elems section .block li:nth-of-type(2) > a\", \"func1\")\n+assert-text: (\".sidebar-elems section .block li:nth-of-type(3) > a\", \"func2\")\n+assert-text: (\".sidebar-elems section .block li:nth-of-type(4) > a\", \"func3\")\n+assert-text: (\".sidebar-elems section .block li:nth-of-type(5) > a\", \"hello\")\n+assert-text: (\".sidebar-elems section .block li:nth-of-type(6) > a\", \"why_not\")"}, {"sha": "da50fb86cd581a57bf6694df89e97a591677d2ec", "filename": "src/test/rustdoc/associated-consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc%2Fassociated-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc%2Fassociated-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fassociated-consts.rs?ref=6a2b612590284f2e8fc08117c976e017ddd79d81", "patch": "@@ -10,7 +10,7 @@ pub struct Bar;\n \n // @has 'foo/struct.Bar.html'\n // @has - '//h3[@class=\"sidebar-title\"]' 'Associated Constants'\n-// @has - '//div[@class=\"sidebar-elems\"]//div[@class=\"sidebar-links\"]/a' 'FOO'\n+// @has - '//div[@class=\"sidebar-elems\"]//a' 'FOO'\n impl Trait for Bar {\n     const FOO: u32 = 1;\n \n@@ -23,7 +23,7 @@ pub enum Foo {\n \n // @has 'foo/enum.Foo.html'\n // @has - '//h3[@class=\"sidebar-title\"]' 'Associated Constants'\n-// @has - '//div[@class=\"sidebar-elems\"]//div[@class=\"sidebar-links\"]/a' 'FOO'\n+// @has - '//div[@class=\"sidebar-elems\"]//a' 'FOO'\n impl Trait for Foo {\n     const FOO: u32 = 1;\n "}, {"sha": "fdf8434224f839b0a00453f32ae77eb2b147b3bf", "filename": "src/test/rustdoc/deref-mut-methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc%2Fderef-mut-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc%2Fderef-mut-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fderef-mut-methods.rs?ref=6a2b612590284f2e8fc08117c976e017ddd79d81", "patch": "@@ -9,7 +9,7 @@ impl Foo {\n }\n \n // @has foo/struct.Bar.html\n-// @has - '//div[@class=\"sidebar-links\"]/a[@href=\"#method.foo\"]' 'foo'\n+// @has - '//*[@class=\"sidebar-elems\"]//*[@class=\"block\"]//a[@href=\"#method.foo\"]' 'foo'\n pub struct Bar {\n     foo: Foo,\n }"}, {"sha": "746df9c804ebb37a876355449063ff06a309dcbe", "filename": "src/test/rustdoc/deref-recursive-pathbuf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc%2Fderef-recursive-pathbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc%2Fderef-recursive-pathbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fderef-recursive-pathbuf.rs?ref=6a2b612590284f2e8fc08117c976e017ddd79d81", "patch": "@@ -8,9 +8,9 @@\n // @has '-' '//*[@id=\"deref-methods-Path\"]' 'Methods from Deref<Target = Path>'\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.exists\"]' 'pub fn exists(&self)'\n // @has '-' '//*[@class=\"sidebar-title\"]/a[@href=\"#deref-methods-PathBuf\"]' 'Methods from Deref<Target=PathBuf>'\n-// @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.as_path\"]' 'as_path'\n+// @has '-' '//*[@class=\"sidebar-elems\"]//*[@class=\"block\"]//a[@href=\"#method.as_path\"]' 'as_path'\n // @has '-' '//*[@class=\"sidebar-title\"]/a[@href=\"#deref-methods-Path\"]' 'Methods from Deref<Target=Path>'\n-// @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.exists\"]' 'exists'\n+// @has '-' '//*[@class=\"sidebar-elems\"]//*[@class=\"block\"]//a[@href=\"#method.exists\"]' 'exists'\n \n #![crate_name = \"foo\"]\n "}, {"sha": "d5f8473f2842d255754d90d44bb6a16cedaafc2f", "filename": "src/test/rustdoc/deref-recursive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc%2Fderef-recursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc%2Fderef-recursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fderef-recursive.rs?ref=6a2b612590284f2e8fc08117c976e017ddd79d81", "patch": "@@ -8,9 +8,9 @@\n // @has '-' '//*[@id=\"deref-methods-Baz\"]' 'Methods from Deref<Target = Baz>'\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.baz\"]' 'pub fn baz(&self)'\n // @has '-' '//*[@class=\"sidebar-title\"]/a[@href=\"#deref-methods-Bar\"]' 'Methods from Deref<Target=Bar>'\n-// @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.bar\"]' 'bar'\n+// @has '-' '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#method.bar\"]' 'bar'\n // @has '-' '//*[@class=\"sidebar-title\"]/a[@href=\"#deref-methods-Baz\"]' 'Methods from Deref<Target=Baz>'\n-// @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.baz\"]' 'baz'\n+// @has '-' '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#method.baz\"]' 'baz'\n \n #![crate_name = \"foo\"]\n "}, {"sha": "28f977e315abf4aabe9b53f880767d09386dfdad", "filename": "src/test/rustdoc/deref-typedef.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc%2Fderef-typedef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc%2Fderef-typedef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fderef-typedef.rs?ref=6a2b612590284f2e8fc08117c976e017ddd79d81", "patch": "@@ -7,10 +7,10 @@\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.foo_c\"]' 'pub fn foo_c(&self)'\n // @has '-' '//*[@class=\"impl-items\"]//*[@id=\"method.foo_j\"]' 'pub fn foo_j(&self)'\n // @has '-' '//*[@class=\"sidebar-title\"]/a[@href=\"#deref-methods-FooJ\"]' 'Methods from Deref<Target=FooJ>'\n-// @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.foo_a\"]' 'foo_a'\n-// @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.foo_b\"]' 'foo_b'\n-// @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.foo_c\"]' 'foo_c'\n-// @has '-' '//*[@class=\"sidebar-links\"]/a[@href=\"#method.foo_j\"]' 'foo_j'\n+// @has '-' '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#method.foo_a\"]' 'foo_a'\n+// @has '-' '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#method.foo_b\"]' 'foo_b'\n+// @has '-' '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#method.foo_c\"]' 'foo_c'\n+// @has '-' '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#method.foo_j\"]' 'foo_j'\n \n pub struct FooA;\n pub type FooB = FooA;"}, {"sha": "b7bbf140cfd00309faba4d42d4c9b582010c6335", "filename": "src/test/rustdoc/double-quote-escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc%2Fdouble-quote-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc%2Fdouble-quote-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdouble-quote-escape.rs?ref=6a2b612590284f2e8fc08117c976e017ddd79d81", "patch": "@@ -8,5 +8,5 @@ pub trait Foo<T> {\n pub struct Bar;\n \n // @has foo/struct.Bar.html\n-// @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#impl-Foo%3Cunsafe%20extern%20%22C%22%20fn()%3E\"]' 'Foo<unsafe extern \"C\" fn()>'\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#impl-Foo%3Cunsafe%20extern%20%22C%22%20fn()%3E\"]' 'Foo<unsafe extern \"C\" fn()>'\n impl Foo<unsafe extern \"C\" fn()> for Bar {}"}, {"sha": "1268c9587f84724f3c0349ab6335567f4ac67347", "filename": "src/test/rustdoc/generic-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fgeneric-impl.rs?ref=6a2b612590284f2e8fc08117c976e017ddd79d81", "patch": "@@ -7,7 +7,7 @@ pub struct Bar;\n \n // @has foo/struct.Foo.html '//*[@id=\"impl-ToString\"]//h3[@class=\"code-header in-band\"]' 'impl<T> ToString for T'\n pub struct Foo;\n-// @has foo/struct.Foo.html '//div[@class=\"sidebar-links\"]/a[@href=\"#impl-ToString\"]' 'ToString'\n+// @has foo/struct.Foo.html '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#impl-ToString\"]' 'ToString'\n \n impl fmt::Display for Foo {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"}, {"sha": "50f4af3aaafef91a61c64eb786846e1486544bad", "filename": "src/test/rustdoc/method-list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc%2Fmethod-list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc%2Fmethod-list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmethod-list.rs?ref=6a2b612590284f2e8fc08117c976e017ddd79d81", "patch": "@@ -1,8 +1,8 @@\n #![crate_name = \"foo\"]\n \n // @has foo/struct.Foo.html\n-// @has - '//*[@class=\"sidebar-links\"]/a' 'super_long_name'\n-// @has - '//*[@class=\"sidebar-links\"]/a' 'Disp'\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a' 'super_long_name'\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a' 'Disp'\n pub struct Foo(usize);\n \n impl Foo {"}, {"sha": "b995fff1f9aa70633373f937aa762100917c57f0", "filename": "src/test/rustdoc/negative-impl-sidebar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc%2Fnegative-impl-sidebar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc%2Fnegative-impl-sidebar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fnegative-impl-sidebar.rs?ref=6a2b612590284f2e8fc08117c976e017ddd79d81", "patch": "@@ -5,5 +5,5 @@ pub struct Foo;\n \n // @has foo/struct.Foo.html\n // @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#trait-implementations\"]' 'Trait Implementations'\n-// @has - '//*[@class=\"sidebar-links\"]/a' '!Sync'\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a' '!Sync'\n impl !Sync for Foo {}"}, {"sha": "619f40eff8984fc6ee45fdf1f58fa233b23e60c2", "filename": "src/test/rustdoc/recursive-deref-sidebar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc%2Frecursive-deref-sidebar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc%2Frecursive-deref-sidebar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Frecursive-deref-sidebar.rs?ref=6a2b612590284f2e8fc08117c976e017ddd79d81", "patch": "@@ -9,13 +9,13 @@ impl B { pub fn foo_b(&self) {} }\n pub struct C {}\n impl C { pub fn foo_c(&self) {} }\n \n-// @has recursive_deref_sidebar/struct.A.html '//div[@class=\"sidebar-links\"]' 'foo_b'\n+// @has recursive_deref_sidebar/struct.A.html '//*[@class=\"sidebar-elems\"]//section' 'foo_b'\n impl Deref for A {\n     type Target = B;\n     fn deref(&self) -> &B { todo!() }\n }\n \n-// @has recursive_deref_sidebar/struct.A.html '//div[@class=\"sidebar-links\"]' 'foo_c'\n+// @has recursive_deref_sidebar/struct.A.html '//*[@class=\"sidebar-elems\"]//section' 'foo_c'\n impl Deref for B {\n     type Target = C;\n     fn deref(&self) -> &C { todo!() }"}, {"sha": "375cad9da7f88010070b87b326750d55e63c5dc7", "filename": "src/test/rustdoc/sidebar-items.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc%2Fsidebar-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc%2Fsidebar-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsidebar-items.rs?ref=6a2b612590284f2e8fc08117c976e017ddd79d81", "patch": "@@ -2,13 +2,13 @@\n \n // @has foo/trait.Foo.html\n // @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#required-methods\"]' 'Required Methods'\n-// @has - '//*[@class=\"sidebar-links\"]/a' 'bar'\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a' 'bar'\n // @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#provided-methods\"]' 'Provided Methods'\n-// @has - '//*[@class=\"sidebar-links\"]/a' 'foo'\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a' 'foo'\n // @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#associated-const\"]' 'Associated Constants'\n-// @has - '//*[@class=\"sidebar-links\"]/a' 'BAR'\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a' 'BAR'\n // @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#associated-types\"]' 'Associated Types'\n-// @has - '//*[@class=\"sidebar-links\"]/a' 'Output'\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a' 'Output'\n pub trait Foo {\n     const BAR: u32 = 0;\n     type Output: ?Sized;\n@@ -19,9 +19,9 @@ pub trait Foo {\n \n // @has foo/struct.Bar.html\n // @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#fields\"]' 'Fields'\n-// @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#structfield.f\"]' 'f'\n-// @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#structfield.u\"]' 'u'\n-// @!has - '//*[@class=\"sidebar-links\"]/a' 'waza'\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#structfield.f\"]' 'f'\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#structfield.u\"]' 'u'\n+// @!has - '//*[@class=\"sidebar-elems\"]//section//a' 'waza'\n pub struct Bar {\n     pub f: u32,\n     pub u: u32,\n@@ -30,18 +30,18 @@ pub struct Bar {\n \n // @has foo/enum.En.html\n // @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#variants\"]' 'Variants'\n-// @has - '//*[@class=\"sidebar-links\"]/a' 'Foo'\n-// @has - '//*[@class=\"sidebar-links\"]/a' 'Bar'\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a' 'Foo'\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a' 'Bar'\n pub enum En {\n     Foo,\n     Bar,\n }\n \n // @has foo/union.MyUnion.html\n // @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#fields\"]' 'Fields'\n-// @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#structfield.f1\"]' 'f1'\n-// @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#structfield.f2\"]' 'f2'\n-// @!has - '//*[@class=\"sidebar-links\"]/a' 'waza'\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#structfield.f1\"]' 'f1'\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#structfield.f2\"]' 'f2'\n+// @!has - '//*[@class=\"sidebar-elems\"]//section//a' 'waza'\n pub union MyUnion {\n     pub f1: u32,\n     pub f2: f32,"}, {"sha": "7858f35a2616e57c3d61802956c3900683ba08c3", "filename": "src/test/rustdoc/sidebar-link-generation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc%2Fsidebar-link-generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc%2Fsidebar-link-generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsidebar-link-generation.rs?ref=6a2b612590284f2e8fc08117c976e017ddd79d81", "patch": "@@ -1,6 +1,6 @@\n #![crate_name = \"foo\"]\n \n-// @has foo/struct.SomeStruct.html '//*[@class=\"sidebar-links\"]/a[@href=\"#method.some_fn-1\"]' \\\n+// @has foo/struct.SomeStruct.html '//*[@class=\"sidebar-elems\"]//section//li/a[@href=\"#method.some_fn-1\"]' \\\n //          \"some_fn\"\n pub struct SomeStruct<T> { _inner: T }\n "}, {"sha": "15515039659991b29fffeeb81e80ef975c974597", "filename": "src/test/rustdoc/sidebar-links-to-foreign-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2b612590284f2e8fc08117c976e017ddd79d81/src%2Ftest%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs?ref=6a2b612590284f2e8fc08117c976e017ddd79d81", "patch": "@@ -5,9 +5,9 @@\n // @has foo/trait.Foo.html\n // @has - '//*[@class=\"sidebar-title\"]/a[@href=\"#foreign-impls\"]' 'Implementations on Foreign Types'\n // @has - '//h2[@id=\"foreign-impls\"]' 'Implementations on Foreign Types'\n-// @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#impl-Foo-for-u32\"]' 'u32'\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#impl-Foo-for-u32\"]' 'u32'\n // @has - '//*[@id=\"impl-Foo-for-u32\"]//h3[@class=\"code-header in-band\"]' 'impl Foo for u32'\n-// @has - '//*[@class=\"sidebar-links\"]/a[@href=\"#impl-Foo-for-%26%27a%20str\"]' \"&'a str\"\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#impl-Foo-for-%26%27a%20str\"]' \"&'a str\"\n // @has - '//*[@id=\"impl-Foo-for-%26%27a%20str\"]//h3[@class=\"code-header in-band\"]' \"impl<'a> Foo for &'a str\"\n pub trait Foo {}\n "}]}