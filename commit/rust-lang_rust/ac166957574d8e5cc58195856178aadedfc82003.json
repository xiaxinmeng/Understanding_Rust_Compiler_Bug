{"sha": "ac166957574d8e5cc58195856178aadedfc82003", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMTY2OTU3NTc0ZDhlNWNjNTgxOTU4NTYxNzhhYWRlZGZjODIwMDM=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2016-08-17T09:33:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-17T09:33:32Z"}, "message": "Merge pull request #1143 from birkenfeld/issue-455\n\nLint print!(\"...\\n\") (closes #455)", "tree": {"sha": "84458c0bc6b0e0eefa1b9f5cc3c3b206d3a13475", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84458c0bc6b0e0eefa1b9f5cc3c3b206d3a13475"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac166957574d8e5cc58195856178aadedfc82003", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac166957574d8e5cc58195856178aadedfc82003", "html_url": "https://github.com/rust-lang/rust/commit/ac166957574d8e5cc58195856178aadedfc82003", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac166957574d8e5cc58195856178aadedfc82003/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cf82da1ead1d025c0b1fbecaedbb598c1dc8c49", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cf82da1ead1d025c0b1fbecaedbb598c1dc8c49", "html_url": "https://github.com/rust-lang/rust/commit/3cf82da1ead1d025c0b1fbecaedbb598c1dc8c49"}, {"sha": "ffad9a8c8c41964ca3f95619a9759ba650ad3703", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffad9a8c8c41964ca3f95619a9759ba650ad3703", "html_url": "https://github.com/rust-lang/rust/commit/ffad9a8c8c41964ca3f95619a9759ba650ad3703"}], "stats": {"total": 98, "additions": 84, "deletions": 14}, "files": [{"sha": "9490d695295ddcddef0311023166eef9acab4232", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac166957574d8e5cc58195856178aadedfc82003/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/ac166957574d8e5cc58195856178aadedfc82003/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=ac166957574d8e5cc58195856178aadedfc82003", "patch": "@@ -255,6 +255,7 @@ All notable changes to this project will be documented in this file.\n [`panic_params`]: https://github.com/Manishearth/rust-clippy/wiki#panic_params\n [`precedence`]: https://github.com/Manishearth/rust-clippy/wiki#precedence\n [`print_stdout`]: https://github.com/Manishearth/rust-clippy/wiki#print_stdout\n+[`print_with_newline`]: https://github.com/Manishearth/rust-clippy/wiki#print_with_newline\n [`ptr_arg`]: https://github.com/Manishearth/rust-clippy/wiki#ptr_arg\n [`range_step_by_zero`]: https://github.com/Manishearth/rust-clippy/wiki#range_step_by_zero\n [`range_zip_with_len`]: https://github.com/Manishearth/rust-clippy/wiki#range_zip_with_len"}, {"sha": "93336e0f260e13ab1a9fc9ee0d31edc7dbc270c8", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac166957574d8e5cc58195856178aadedfc82003/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/ac166957574d8e5cc58195856178aadedfc82003/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=ac166957574d8e5cc58195856178aadedfc82003", "patch": "@@ -17,7 +17,7 @@ Table of contents:\n \n ## Lints\n \n-There are 164 lints included in this crate:\n+There are 165 lints included in this crate:\n \n name                                                                                                                 | default | triggers on\n ---------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n@@ -130,6 +130,7 @@ name\n [panic_params](https://github.com/Manishearth/rust-clippy/wiki#panic_params)                                         | warn    | missing parameters in `panic!` calls\n [precedence](https://github.com/Manishearth/rust-clippy/wiki#precedence)                                             | warn    | operations where precedence may be unclear\n [print_stdout](https://github.com/Manishearth/rust-clippy/wiki#print_stdout)                                         | allow   | printing on stdout\n+[print_with_newline](https://github.com/Manishearth/rust-clippy/wiki#print_with_newline)                             | warn    | using `print!()` with a format string that ends in a newline\n [ptr_arg](https://github.com/Manishearth/rust-clippy/wiki#ptr_arg)                                                   | warn    | arguments of the type `&Vec<...>` (instead of `&[...]`) or `&String` (instead of `&str`)\n [range_step_by_zero](https://github.com/Manishearth/rust-clippy/wiki#range_step_by_zero)                             | warn    | using `Range::step_by(0)`, which produces an infinite iterator\n [range_zip_with_len](https://github.com/Manishearth/rust-clippy/wiki#range_zip_with_len)                             | warn    | zipping iterator with a range when `enumerate()` would do"}, {"sha": "349ce2cf8b819d0fde29bd7b85dea8c3e194b2be", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ac166957574d8e5cc58195856178aadedfc82003/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac166957574d8e5cc58195856178aadedfc82003/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=ac166957574d8e5cc58195856178aadedfc82003", "patch": "@@ -69,11 +69,10 @@ impl LateLintPass for Pass {\n     }\n }\n \n-/// Checks if the expressions matches\n-/// ```rust\n-/// { static __STATIC_FMTSTR: &[\"\"] = _; __STATIC_FMTSTR }\n-/// ```\n-fn check_static_str(cx: &LateContext, expr: &Expr) -> bool {\n+/// Returns the slice of format string parts in an `Arguments::new_v1` call.\n+/// Public because it's shared with a lint in print.rs.\n+pub fn get_argument_fmtstr_parts<'a, 'b>(cx: &LateContext<'a, 'b>, expr: &'a Expr)\n+                                         -> Option<Vec<&'a str>> {\n     if_let_chain! {[\n         let ExprBlock(ref block) = expr.node,\n         block.stmts.len() == 1,\n@@ -83,16 +82,31 @@ fn check_static_str(cx: &LateContext, expr: &Expr) -> bool {\n         decl.name.as_str() == \"__STATIC_FMTSTR\",\n         let ItemStatic(_, _, ref expr) = decl.node,\n         let ExprAddrOf(_, ref expr) = expr.node, // &[\"\"]\n-        let ExprVec(ref expr) = expr.node,\n-        expr.len() == 1,\n-        let ExprLit(ref lit) = expr[0].node,\n-        let LitKind::Str(ref lit, _) = lit.node,\n-        lit.is_empty()\n+        let ExprVec(ref exprs) = expr.node,\n     ], {\n-        return true;\n+        let mut result = Vec::new();\n+        for expr in exprs {\n+            if let ExprLit(ref lit) = expr.node {\n+                if let LitKind::Str(ref lit, _) = lit.node {\n+                    result.push(&**lit);\n+                }\n+            }\n+        }\n+        return Some(result);\n     }}\n+    None\n+}\n \n-    false\n+/// Checks if the expressions matches\n+/// ```rust\n+/// { static __STATIC_FMTSTR: &[\"\"] = _; __STATIC_FMTSTR }\n+/// ```\n+fn check_static_str(cx: &LateContext, expr: &Expr) -> bool {\n+    if let Some(expr) = get_argument_fmtstr_parts(cx, expr) {\n+        expr.len() == 1 && expr[0].is_empty()\n+    } else {\n+        false\n+    }\n }\n \n /// Checks if the expressions matches"}, {"sha": "fdd262a75e13e805b3e9f672a0fbc25a5352db8a", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac166957574d8e5cc58195856178aadedfc82003/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac166957574d8e5cc58195856178aadedfc82003/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=ac166957574d8e5cc58195856178aadedfc82003", "patch": "@@ -403,6 +403,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL,\n         panic::PANIC_PARAMS,\n         precedence::PRECEDENCE,\n+        print::PRINT_WITH_NEWLINE,\n         ptr_arg::PTR_ARG,\n         ranges::RANGE_STEP_BY_ZERO,\n         ranges::RANGE_ZIP_WITH_LEN,"}, {"sha": "25539ddc75291318a4a94ce58671317f7a1303cf", "filename": "clippy_lints/src/print.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ac166957574d8e5cc58195856178aadedfc82003/clippy_lints%2Fsrc%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac166957574d8e5cc58195856178aadedfc82003/clippy_lints%2Fsrc%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprint.rs?ref=ac166957574d8e5cc58195856178aadedfc82003", "patch": "@@ -3,6 +3,24 @@ use rustc::hir::map::Node::{NodeItem, NodeImplItem};\n use rustc::lint::*;\n use utils::paths;\n use utils::{is_expn_of, match_path, span_lint};\n+use format::get_argument_fmtstr_parts;\n+\n+/// **What it does:** This lint warns when you using `print!()` with a format string that\n+/// ends in a newline.\n+///\n+/// **Why is this bad?** You should use `println!()` instead, which appends the newline.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// print!(\"Hello {}!\\n\", name);\n+/// ```\n+declare_lint! {\n+    pub PRINT_WITH_NEWLINE,\n+    Warn,\n+    \"using `print!()` with a format string that ends in a newline\"\n+}\n \n /// **What it does:** Checks for printing on *stdout*. The purpose of this lint\n /// is to catch debugging remnants.\n@@ -43,7 +61,7 @@ pub struct Pass;\n \n impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(PRINT_STDOUT, USE_DEBUG)\n+        lint_array!(PRINT_WITH_NEWLINE, PRINT_STDOUT, USE_DEBUG)\n     }\n }\n \n@@ -62,6 +80,26 @@ impl LateLintPass for Pass {\n                         };\n \n                         span_lint(cx, PRINT_STDOUT, span, &format!(\"use of `{}!`\", name));\n+\n+                        // Check print! with format string ending in \"\\n\".\n+                        if_let_chain!{[\n+                            name == \"print\",\n+                            // ensure we're calling Arguments::new_v1\n+                            args.len() == 1,\n+                            let ExprCall(ref args_fun, ref args_args) = args[0].node,\n+                            let ExprPath(_, ref args_path) = args_fun.node,\n+                            match_path(args_path, &paths::FMT_ARGUMENTS_NEWV1),\n+                            args_args.len() == 2,\n+                            // collect the format string parts and check the last one\n+                            let Some(fmtstrs) = get_argument_fmtstr_parts(cx, &args_args[0]),\n+                            let Some(last_str) = fmtstrs.last(),\n+                            let Some(last_chr) = last_str.chars().last(),\n+                            last_chr == '\\n'\n+                        ], {\n+                            span_lint(cx, PRINT_WITH_NEWLINE, span,\n+                                      \"using `print!()` with a format string that ends in a \\\n+                                       newline, consider using `println!()` instead\");\n+                        }}\n                     }\n                 }\n                 // Search for something like"}, {"sha": "fc3f276feae7cc0a96efa554f34e5ec9df221001", "filename": "tests/compile-fail/print_with_newline.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ac166957574d8e5cc58195856178aadedfc82003/tests%2Fcompile-fail%2Fprint_with_newline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac166957574d8e5cc58195856178aadedfc82003/tests%2Fcompile-fail%2Fprint_with_newline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fprint_with_newline.rs?ref=ac166957574d8e5cc58195856178aadedfc82003", "patch": "@@ -0,0 +1,15 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![deny(print_with_newline)]\n+\n+fn main() {\n+    print!(\"Hello\");\n+    print!(\"Hello\\n\"); //~ERROR using `print!()` with a format string\n+    print!(\"Hello {}\\n\", \"world\"); //~ERROR using `print!()` with a format string\n+    print!(\"Hello {} {}\\n\\n\", \"world\", \"#2\"); //~ERROR using `print!()` with a format string\n+\n+    // these are all fine\n+    println!(\"Hello\");\n+    println!(\"Hello\\n\");\n+    println!(\"Hello {}\\n\", \"world\");\n+}"}]}