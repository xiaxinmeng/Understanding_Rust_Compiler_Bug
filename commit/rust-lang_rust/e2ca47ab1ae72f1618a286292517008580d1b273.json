{"sha": "e2ca47ab1ae72f1618a286292517008580d1b273", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyY2E0N2FiMWFlNzJmMTYxOGEyODYyOTI1MTcwMDg1ODBkMWIyNzM=", "commit": {"author": {"name": "oldmanmike", "email": "oldmanmike.dev@gmail.com", "date": "2016-11-07T17:42:20Z"}, "committer": {"name": "oldmanmike", "email": "oldmanmike.dev@gmail.com", "date": "2016-11-07T17:42:20Z"}, "message": "Apply changes recommended in code review\n\nSaid code review and recommendations can be found here:\nhttps://github.com/rust-lang/rust/pull/37610", "tree": {"sha": "b4cb754d5d6f61284b9f8710a75602692c248926", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4cb754d5d6f61284b9f8710a75602692c248926"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2ca47ab1ae72f1618a286292517008580d1b273", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2ca47ab1ae72f1618a286292517008580d1b273", "html_url": "https://github.com/rust-lang/rust/commit/e2ca47ab1ae72f1618a286292517008580d1b273", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2ca47ab1ae72f1618a286292517008580d1b273/comments", "author": null, "committer": null, "parents": [{"sha": "21814a5ebbef46238d76b5c4cea03a37037e1946", "url": "https://api.github.com/repos/rust-lang/rust/commits/21814a5ebbef46238d76b5c4cea03a37037e1946", "html_url": "https://github.com/rust-lang/rust/commit/21814a5ebbef46238d76b5c4cea03a37037e1946"}], "stats": {"total": 61, "additions": 40, "deletions": 21}, "files": [{"sha": "54d245e45938fc2deb06992427d6252d271f903f", "filename": "src/test/incremental/hashes/unary_and_binary_exprs.rs", "status": "modified", "additions": 40, "deletions": 21, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/e2ca47ab1ae72f1618a286292517008580d1b273/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ca47ab1ae72f1618a286292517008580d1b273/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs?ref=e2ca47ab1ae72f1618a286292517008580d1b273", "patch": "@@ -10,7 +10,7 @@\n \n \n // This test case tests the incremental compilation hash (ICH) implementation\n-// for struct definitions.\n+// for unary and binary expressions.\n \n // The general pattern followed here is: Change one thing between rev1 and rev2\n // and make sure that the hash has changed, then change nothing between rev2 and\n@@ -41,6 +41,7 @@ pub fn const_negation() -> i32 {\n }\n \n \n+\n // Change constant operand of bitwise not --------------------------------------\n #[cfg(cfail1)]\n pub fn const_bitwise_not() -> i32 {\n@@ -57,9 +58,10 @@ pub fn const_bitwise_not() -> i32 {\n }\n \n \n+\n // Change variable operand of negation -----------------------------------------\n #[cfg(cfail1)]\n-pub fn var_negation(x: i32) -> i32 {\n+pub fn var_negation(x: i32, y: i32) -> i32 {\n     -x\n }\n \n@@ -68,14 +70,15 @@ pub fn var_negation(x: i32) -> i32 {\n #[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-pub fn var_negation(y: i32) -> i32 {\n+pub fn var_negation(x: i32, y: i32) -> i32 {\n     -y\n }\n \n \n+\n // Change variable operand of bitwise not --------------------------------------\n #[cfg(cfail1)]\n-pub fn var_bitwise_not(x: i32) -> i32 {\n+pub fn var_bitwise_not(x: i32, y: i32) -> i32 {\n     !x\n }\n \n@@ -84,14 +87,15 @@ pub fn var_bitwise_not(x: i32) -> i32 {\n #[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-pub fn var_bitwise_not(y: i32) -> i32 {\n+pub fn var_bitwise_not(x: i32, y: i32) -> i32 {\n     !y\n }\n \n \n+\n // Change variable operand of deref --------------------------------------------\n #[cfg(cfail1)]\n-pub fn var_deref(x: &i32) -> i32 {\n+pub fn var_deref(x: &i32, y: &i32) -> i32 {\n     *x\n }\n \n@@ -100,11 +104,12 @@ pub fn var_deref(x: &i32) -> i32 {\n #[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-pub fn var_deref(y: &i32) -> i32 {\n+pub fn var_deref(x: &i32, y: &i32) -> i32 {\n     *y\n }\n \n \n+\n // Change first constant operand of addition -----------------------------------\n #[cfg(cfail1)]\n pub fn first_const_add() -> i32 {\n@@ -121,6 +126,7 @@ pub fn first_const_add() -> i32 {\n }\n \n \n+\n // Change second constant operand of addition -----------------------------------\n #[cfg(cfail1)]\n pub fn second_const_add() -> i32 {\n@@ -137,9 +143,10 @@ pub fn second_const_add() -> i32 {\n }\n \n \n+\n // Change first variable operand of addition -----------------------------------\n #[cfg(cfail1)]\n-pub fn first_var_add(a: i32) -> i32 {\n+pub fn first_var_add(a: i32, b: i32) -> i32 {\n     a + 2\n }\n \n@@ -148,14 +155,15 @@ pub fn first_var_add(a: i32) -> i32 {\n #[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-pub fn first_var_add(b: i32) -> i32 {\n+pub fn first_var_add(a: i32, b: i32) -> i32 {\n     b + 3\n }\n \n \n+\n // Change second variable operand of addition ----------------------------------\n #[cfg(cfail1)]\n-pub fn second_var_add(a: i32) -> i32 {\n+pub fn second_var_add(a: i32, b: i32) -> i32 {\n     1 + a\n }\n \n@@ -164,11 +172,12 @@ pub fn second_var_add(a: i32) -> i32 {\n #[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-pub fn second_var_add(b: i32) -> i32 {\n+pub fn second_var_add(a: i32, b: i32) -> i32 {\n     1 + b\n }\n \n \n+\n // Change operator from + to - -------------------------------------------------\n #[cfg(cfail1)]\n pub fn plus_to_minus(a: i32) -> i32 {\n@@ -185,6 +194,7 @@ pub fn plus_to_minus(a: i32) -> i32 {\n }\n \n \n+\n // Change operator from + to * -------------------------------------------------\n #[cfg(cfail1)]\n pub fn plus_to_mult(a: i32) -> i32 {\n@@ -201,6 +211,7 @@ pub fn plus_to_mult(a: i32) -> i32 {\n }\n \n \n+\n // Change operator from + to / -------------------------------------------------\n #[cfg(cfail1)]\n pub fn plus_to_div(a: i32) -> i32 {\n@@ -217,6 +228,7 @@ pub fn plus_to_div(a: i32) -> i32 {\n }\n \n \n+\n // Change operator from + to % -------------------------------------------------\n #[cfg(cfail1)]\n pub fn plus_to_mod(a: i32) -> i32 {\n@@ -233,6 +245,7 @@ pub fn plus_to_mod(a: i32) -> i32 {\n }\n \n \n+\n // Change operator from && to || -----------------------------------------------\n #[cfg(cfail1)]\n pub fn and_to_or(a: bool, b: bool) -> bool {\n@@ -444,7 +457,9 @@ pub fn value_cast(a: u32) -> i32 {\n // Change l-value in assignment ------------------------------------------------\n #[cfg(cfail1)]\n pub fn lvalue() -> i32 {\n-    let x = 10;\n+    let mut x = 10;\n+    let mut y = 11;\n+    x = 9;\n     x\n }\n \n@@ -454,7 +469,9 @@ pub fn lvalue() -> i32 {\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn lvalue() -> i32 {\n-    let y = 10;\n+    let mut x = 10;\n+    let mut y = 11;\n+    x = 9;\n     y\n }\n \n@@ -463,7 +480,9 @@ pub fn lvalue() -> i32 {\n // Change r-value in assignment ------------------------------------------------\n #[cfg(cfail1)]\n pub fn rvalue() -> i32 {\n-    let x = 10;\n+    let mut x = 10;\n+    let mut y = 11;\n+    x = 9;\n     x\n }\n \n@@ -473,25 +492,25 @@ pub fn rvalue() -> i32 {\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn rvalue() -> i32 {\n-    let x = 11;\n+    let mut x = 10;\n+    let mut y = 11;\n+    x = 8;\n     x\n }\n \n \n \n // Change index into slice -----------------------------------------------------\n #[cfg(cfail1)]\n-pub fn index_to_slice() -> i32 {\n-    let xs = [1,2,3,4,5];\n-    xs[1]\n+pub fn index_to_slice(s: &[u8], i: usize, j: usize) -> u8 {\n+    s[i]\n }\n \n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-pub fn index_to_slice() -> i32 {\n-    let xs = &[1,2,3,4,5];\n-    xs[1]\n+pub fn index_to_slice(s: &[u8], i: usize, j: usize) -> u8 {\n+    s[j]\n }"}]}