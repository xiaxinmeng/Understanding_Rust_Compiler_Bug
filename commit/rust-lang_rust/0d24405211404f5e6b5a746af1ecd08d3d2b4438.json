{"sha": "0d24405211404f5e6b5a746af1ecd08d3d2b4438", "node_id": "C_kwDOAAsO6NoAKDBkMjQ0MDUyMTE0MDRmNWU2YjVhNzQ2YWYxZWNkMDhkM2QyYjQ0Mzg", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-06-14T15:31:21Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-06-14T15:31:21Z"}, "message": "implement `MacroData`", "tree": {"sha": "8e459608968d582c1f8343887e8e8a493873f20f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e459608968d582c1f8343887e8e8a493873f20f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d24405211404f5e6b5a746af1ecd08d3d2b4438", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d24405211404f5e6b5a746af1ecd08d3d2b4438", "html_url": "https://github.com/rust-lang/rust/commit/0d24405211404f5e6b5a746af1ecd08d3d2b4438", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d24405211404f5e6b5a746af1ecd08d3d2b4438/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60a50d02abfa3552c825b8d7690cf73343195499", "url": "https://api.github.com/repos/rust-lang/rust/commits/60a50d02abfa3552c825b8d7690cf73343195499", "html_url": "https://github.com/rust-lang/rust/commit/60a50d02abfa3552c825b8d7690cf73343195499"}], "stats": {"total": 62, "additions": 34, "deletions": 28}, "files": [{"sha": "b0e7679af972bea31ad96a6d5b64b25de7813d34", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0d24405211404f5e6b5a746af1ecd08d3d2b4438/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d24405211404f5e6b5a746af1ecd08d3d2b4438/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=0d24405211404f5e6b5a746af1ecd08d3d2b4438", "patch": "@@ -10,7 +10,9 @@ use crate::imports::{Import, ImportKind};\n use crate::macros::{MacroRulesBinding, MacroRulesScope, MacroRulesScopeRef};\n use crate::Namespace::{self, MacroNS, TypeNS, ValueNS};\n use crate::{Determinacy, ExternPreludeEntry, Finalize, Module, ModuleKind, ModuleOrUniformRoot};\n-use crate::{NameBinding, NameBindingKind, ParentScope, PathResult, PerNS, ResolutionError};\n+use crate::{\n+    MacroData, NameBinding, NameBindingKind, ParentScope, PathResult, PerNS, ResolutionError,\n+};\n use crate::{Resolver, ResolverArenas, Segment, ToNameBinding, VisResolutionError};\n \n use rustc_ast::visit::{self, AssocCtxt, Visitor};\n@@ -20,7 +22,6 @@ use rustc_ast_lowering::ResolverAstLowering;\n use rustc_attr as attr;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{struct_span_err, Applicability};\n-use rustc_expand::base::SyntaxExtension;\n use rustc_expand::expand::AstFragment;\n use rustc_hir::def::{self, *};\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID};\n@@ -180,26 +181,32 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    pub(crate) fn get_macro(&mut self, res: Res) -> Option<Lrc<SyntaxExtension>> {\n+    pub(crate) fn get_macro(&mut self, res: Res) -> Option<MacroData> {\n         match res {\n             Res::Def(DefKind::Macro(..), def_id) => Some(self.get_macro_by_def_id(def_id)),\n-            Res::NonMacroAttr(_) => Some(self.non_macro_attr.clone()),\n+            Res::NonMacroAttr(_) => {\n+                Some(MacroData { ext: self.non_macro_attr.clone(), macro_rules: false })\n+            }\n             _ => None,\n         }\n     }\n \n-    pub(crate) fn get_macro_by_def_id(&mut self, def_id: DefId) -> Lrc<SyntaxExtension> {\n-        if let Some(ext) = self.macro_map.get(&def_id) {\n-            return ext.clone();\n+    pub(crate) fn get_macro_by_def_id(&mut self, def_id: DefId) -> MacroData {\n+        if let Some(macro_data) = self.macro_map.get(&def_id) {\n+            return macro_data.clone();\n         }\n \n-        let ext = Lrc::new(match self.cstore().load_macro_untracked(def_id, &self.session) {\n-            LoadedMacro::MacroDef(item, edition) => self.compile_macro(&item, edition).0,\n-            LoadedMacro::ProcMacro(ext) => ext,\n-        });\n+        let (ext, macro_rules) = match self.cstore().load_macro_untracked(def_id, &self.session) {\n+            LoadedMacro::MacroDef(item, edition) => (\n+                Lrc::new(self.compile_macro(&item, edition).0),\n+                matches!(item.kind, ItemKind::MacroDef(def) if def.macro_rules),\n+            ),\n+            LoadedMacro::ProcMacro(extz) => (Lrc::new(extz), false),\n+        };\n \n-        self.macro_map.insert(def_id, ext.clone());\n-        ext\n+        let macro_data = MacroData { ext, macro_rules };\n+        self.macro_map.insert(def_id, macro_data.clone());\n+        macro_data\n     }\n \n     pub(crate) fn build_reduced_graph(\n@@ -1251,7 +1258,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         };\n \n         let res = Res::Def(DefKind::Macro(ext.macro_kind()), def_id.to_def_id());\n-        self.r.macro_map.insert(def_id.to_def_id(), ext);\n+        self.r.macro_map.insert(def_id.to_def_id(), MacroData { ext, macro_rules });\n         self.r.local_macro_def_scopes.insert(def_id, parent_scope.module);\n \n         if macro_rules {"}, {"sha": "e934e189f05f33ac13faa41a5eb019ae5a346222", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d24405211404f5e6b5a746af1ecd08d3d2b4438/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d24405211404f5e6b5a746af1ecd08d3d2b4438/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=0d24405211404f5e6b5a746af1ecd08d3d2b4438", "patch": "@@ -241,7 +241,7 @@ impl<'a> Resolver<'a> {\n                 {\n                     // The macro is a proc macro derive\n                     if let Some(def_id) = module.expansion.expn_data().macro_def_id {\n-                        let ext = self.get_macro_by_def_id(def_id);\n+                        let ext = self.get_macro_by_def_id(def_id).ext;\n                         if ext.builtin_name.is_none()\n                             && ext.macro_kind() == MacroKind::Derive\n                             && parent.expansion.outer_expn_is_descendant_of(*ctxt)"}, {"sha": "c6aa57f039d4fe8ab30ddac5c3a1da72ce6824a1", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0d24405211404f5e6b5a746af1ecd08d3d2b4438/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d24405211404f5e6b5a746af1ecd08d3d2b4438/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=0d24405211404f5e6b5a746af1ecd08d3d2b4438", "patch": "@@ -925,16 +925,9 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     let mut err =\n                         struct_span_err!(self.r.session, import.span, E0364, \"{error_msg}\");\n                     match binding.kind {\n-                        NameBindingKind::Res(Res::Def(DefKind::Macro(_), _def_id), _)\n+                        NameBindingKind::Res(Res::Def(DefKind::Macro(_), def_id), _)\n                             // exclude decl_macro\n-                            if !self.r.session.features_untracked().decl_macro\n-                                || !self\n-                                    .r\n-                                    .session\n-                                    .source_map()\n-                                    .span_to_snippet(binding.span)\n-                                    .map(|snippet| snippet.starts_with(\"macro \"))\n-                                    .unwrap_or(true) =>\n+                            if self.r.get_macro_by_def_id(def_id).macro_rules =>\n                         {\n                             err.span_help(\n                                 binding.span,"}, {"sha": "ac4e23cc04db5348f70fa27eb3aa9f91d89e89ec", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0d24405211404f5e6b5a746af1ecd08d3d2b4438/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d24405211404f5e6b5a746af1ecd08d3d2b4438/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=0d24405211404f5e6b5a746af1ecd08d3d2b4438", "patch": "@@ -866,6 +866,12 @@ struct DeriveData {\n     has_derive_copy: bool,\n }\n \n+#[derive(Clone)]\n+struct MacroData {\n+    ext: Lrc<SyntaxExtension>,\n+    macro_rules: bool,\n+}\n+\n /// The main resolver class.\n ///\n /// This is the visitor that walks the whole crate.\n@@ -965,7 +971,7 @@ pub struct Resolver<'a> {\n     registered_attrs: FxHashSet<Ident>,\n     registered_tools: RegisteredTools,\n     macro_use_prelude: FxHashMap<Symbol, &'a NameBinding<'a>>,\n-    macro_map: FxHashMap<DefId, Lrc<SyntaxExtension>>,\n+    macro_map: FxHashMap<DefId, MacroData>,\n     dummy_ext_bang: Lrc<SyntaxExtension>,\n     dummy_ext_derive: Lrc<SyntaxExtension>,\n     non_macro_attr: Lrc<SyntaxExtension>,\n@@ -1522,7 +1528,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn is_builtin_macro(&mut self, res: Res) -> bool {\n-        self.get_macro(res).map_or(false, |ext| ext.builtin_name.is_some())\n+        self.get_macro(res).map_or(false, |macro_data| macro_data.ext.builtin_name.is_some())\n     }\n \n     fn macro_def(&self, mut ctxt: SyntaxContext) -> DefId {"}, {"sha": "c86c2280d1986dfa4b7c76c059d0140f7e420242", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d24405211404f5e6b5a746af1ecd08d3d2b4438/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d24405211404f5e6b5a746af1ecd08d3d2b4438/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=0d24405211404f5e6b5a746af1ecd08d3d2b4438", "patch": "@@ -658,7 +658,7 @@ impl<'a> Resolver<'a> {\n             res\n         };\n \n-        res.map(|res| (self.get_macro(res), res))\n+        res.map(|res| (self.get_macro(res).map(|macro_data| macro_data.ext), res))\n     }\n \n     pub(crate) fn finalize_macro_resolutions(&mut self) {\n@@ -853,7 +853,7 @@ impl<'a> Resolver<'a> {\n         // Reserve some names that are not quite covered by the general check\n         // performed on `Resolver::builtin_attrs`.\n         if ident.name == sym::cfg || ident.name == sym::cfg_attr {\n-            let macro_kind = self.get_macro(res).map(|ext| ext.macro_kind());\n+            let macro_kind = self.get_macro(res).map(|macro_data| macro_data.ext.macro_kind());\n             if macro_kind.is_some() && sub_namespace_match(macro_kind, Some(MacroKind::Attr)) {\n                 self.session.span_err(\n                     ident.span,"}]}