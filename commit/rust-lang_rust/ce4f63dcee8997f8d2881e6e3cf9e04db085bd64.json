{"sha": "ce4f63dcee8997f8d2881e6e3cf9e04db085bd64", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlNGY2M2RjZWU4OTk3ZjhkMjg4MWU2ZTNjZjllMDRkYjA4NWJkNjQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-08T02:39:52Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-08T16:22:23Z"}, "message": "std: add reverse vec iterators, replace vec::each*_reverse.", "tree": {"sha": "7a3bbc7439b0ea18118a8bd94a74d5709c8781ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a3bbc7439b0ea18118a8bd94a74d5709c8781ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce4f63dcee8997f8d2881e6e3cf9e04db085bd64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce4f63dcee8997f8d2881e6e3cf9e04db085bd64", "html_url": "https://github.com/rust-lang/rust/commit/ce4f63dcee8997f8d2881e6e3cf9e04db085bd64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce4f63dcee8997f8d2881e6e3cf9e04db085bd64/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2ec8e71cec0373616953f8188cf7c4953269af0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2ec8e71cec0373616953f8188cf7c4953269af0", "html_url": "https://github.com/rust-lang/rust/commit/e2ec8e71cec0373616953f8188cf7c4953269af0"}], "stats": {"total": 233, "additions": 107, "deletions": 126}, "files": [{"sha": "1411079d52f0dafdb2dd6236595594c8ef0731be", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ce4f63dcee8997f8d2881e6e3cf9e04db085bd64/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce4f63dcee8997f8d2881e6e3cf9e04db085bd64/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=ce4f63dcee8997f8d2881e6e3cf9e04db085bd64", "patch": "@@ -19,7 +19,7 @@ A BigInt is a combination of BigUint and Sign.\n #[allow(missing_doc)];\n \n use core::prelude::*;\n-\n+use core::iterator::IteratorUtil;\n use core::cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater};\n use core::int;\n use core::num::{IntConvertible, Zero, One, ToStrRadix, FromStrRadix, Orderable};\n@@ -129,12 +129,9 @@ impl TotalOrd for BigUint {\n         if s_len < o_len { return Less; }\n         if s_len > o_len { return Greater;  }\n \n-        for self.data.eachi_reverse |i, elm| {\n-            match (*elm, other.data[i]) {\n-                (l, r) if l < r => return Less,\n-                (l, r) if l > r => return Greater,\n-                _               => loop\n-            };\n+        for self.data.rev_iter().zip(other.data.rev_iter()).advance |(&self_i, &other_i)| {\n+            cond!((self_i < other_i) { return Less; }\n+                  (self_i > other_i) { return Greater; })\n         }\n         return Equal;\n     }\n@@ -421,7 +418,7 @@ impl Integer for BigUint {\n             let bn = *b.data.last();\n             let mut d = ~[];\n             let mut carry = 0;\n-            for an.each_reverse |elt| {\n+            for an.rev_iter().advance |elt| {\n                 let ai = BigDigit::to_uint(carry, *elt);\n                 let di = ai / (bn as uint);\n                 assert!(di < BigDigit::base);\n@@ -648,7 +645,7 @@ impl BigUint {\n \n         let mut borrow = 0;\n         let mut shifted = ~[];\n-        for self.data.each_reverse |elem| {\n+        for self.data.rev_iter().advance |elem| {\n             shifted = ~[(*elem >> n_bits) | borrow] + shifted;\n             borrow = *elem << (BigDigit::bits - n_bits);\n         }"}, {"sha": "f368255030bd28942244300a58023887d78624f3", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce4f63dcee8997f8d2881e6e3cf9e04db085bd64/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce4f63dcee8997f8d2881e6e3cf9e04db085bd64/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=ce4f63dcee8997f8d2881e6e3cf9e04db085bd64", "patch": "@@ -64,6 +64,7 @@ use middle::ty;\n use util::common::indenter;\n use util::ppaux::{Repr, ty_to_str};\n \n+use core::iterator::IteratorUtil;\n use core::hash;\n use core::hashmap::{HashMap, HashSet};\n use core::int;\n@@ -1275,7 +1276,7 @@ pub fn trans_block_cleanups_(bcx: block,\n         bcx.ccx().sess.opts.debugging_opts & session::no_landing_pads != 0;\n     if bcx.unreachable && !no_lpads { return bcx; }\n     let mut bcx = bcx;\n-    for cleanups.each_reverse |cu| {\n+    for cleanups.rev_iter().advance |cu| {\n         match *cu {\n             clean(cfn, cleanup_type) | clean_temp(_, cfn, cleanup_type) => {\n                 // Some types don't need to be cleaned up during"}, {"sha": "8dc546ec4f855cbbd2ad992b4a3dd7d07a385573", "filename": "src/libstd/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce4f63dcee8997f8d2881e6e3cf9e04db085bd64/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce4f63dcee8997f8d2881e6e3cf9e04db085bd64/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=ce4f63dcee8997f8d2881e6e3cf9e04db085bd64", "patch": "@@ -3964,7 +3964,7 @@ mod tests {\n         let s = ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n         let v = ~['\u0e28','\u0e44','\u0e17','\u0e22','\u4e2d','\u534e','V','i','\u1ec7','t',' ','N','a','m'];\n         let mut pos = s.len();\n-        for v.each_reverse |ch| {\n+        for v.rev_iter().advance |ch| {\n             assert!(s.char_at_reverse(pos) == *ch);\n             pos -= from_char(*ch).len();\n         }"}, {"sha": "cd3e0cf303e1dd41fbc1d1f0c246e03ee9b08948", "filename": "src/libstd/unstable/lang.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce4f63dcee8997f8d2881e6e3cf9e04db085bd64/src%2Flibstd%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce4f63dcee8997f8d2881e6e3cf9e04db085bd64/src%2Flibstd%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Flang.rs?ref=ce4f63dcee8997f8d2881e6e3cf9e04db085bd64", "patch": "@@ -10,6 +10,7 @@\n \n //! Runtime calls emitted by the compiler.\n \n+use iterator::IteratorUtil;\n use uint;\n use cast::transmute;\n use libc::{c_char, c_uchar, c_void, size_t, uintptr_t, c_int, STDERR_FILENO};\n@@ -133,7 +134,7 @@ unsafe fn fail_borrowed(box: *mut BoxRepr, file: *c_char, line: size_t) {\n         Some(borrow_list) => { // recording borrows\n             let mut msg = ~\"borrowed\";\n             let mut sep = \" at \";\n-            for borrow_list.each_reverse |entry| {\n+            for borrow_list.rev_iter().advance |entry| {\n                 if entry.box == box {\n                     str::push_str(&mut msg, sep);\n                     let filename = str::raw::from_c_str(entry.file);"}, {"sha": "f34e1a91b69a7dd9f94bc37edd32498c099e9f6c", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 96, "deletions": 114, "changes": 210, "blob_url": "https://github.com/rust-lang/rust/blob/ce4f63dcee8997f8d2881e6e3cf9e04db085bd64/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce4f63dcee8997f8d2881e6e3cf9e04db085bd64/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=ce4f63dcee8997f8d2881e6e3cf9e04db085bd64", "patch": "@@ -1598,34 +1598,6 @@ pub fn eachi<'r,T>(v: &'r [T], f: &fn(uint, v: &'r T) -> bool) -> bool {\n     return true;\n }\n \n-/**\n- * Iterates over a vector's elements in reverse\n- *\n- * Return true to continue, false to break.\n- */\n-#[inline(always)]\n-pub fn each_reverse<'r,T>(v: &'r [T], blk: &fn(v: &'r T) -> bool) -> bool {\n-    eachi_reverse(v, |_i, v| blk(v))\n-}\n-\n-/**\n- * Iterates over a vector's elements and indices in reverse\n- *\n- * Return true to continue, false to break.\n- */\n-#[inline(always)]\n-pub fn eachi_reverse<'r,T>(v: &'r [T],\n-                            blk: &fn(i: uint, v: &'r T) -> bool) -> bool {\n-    let mut i = v.len();\n-    while i > 0 {\n-        i -= 1;\n-        if !blk(i, &v[i]) {\n-            return false;\n-        }\n-    }\n-    return true;\n-}\n-\n /**\n  * Iterate over all permutations of vector `v`.\n  *\n@@ -1964,6 +1936,7 @@ impl<'self,T:Copy> CopyableVector<T> for &'self [T] {\n pub trait ImmutableVector<'self, T> {\n     fn slice(&self, start: uint, end: uint) -> &'self [T];\n     fn iter(self) -> VecIterator<'self, T>;\n+    fn rev_iter(self) -> VecRevIterator<'self, T>;\n     fn head(&self) -> &'self T;\n     fn head_opt(&self) -> Option<&'self T>;\n     fn tail(&self) -> &'self [T];\n@@ -1974,8 +1947,6 @@ pub trait ImmutableVector<'self, T> {\n     fn last_opt(&self) -> Option<&'self T>;\n     fn position(&self, f: &fn(t: &T) -> bool) -> Option<uint>;\n     fn rposition(&self, f: &fn(t: &T) -> bool) -> Option<uint>;\n-    fn each_reverse(&self, blk: &fn(&T) -> bool) -> bool;\n-    fn eachi_reverse(&self, blk: &fn(uint, &T) -> bool) -> bool;\n     fn foldr<'a, U>(&'a self, z: U, p: &fn(t: &'a T, u: U) -> U) -> U;\n     fn map<U>(&self, f: &fn(t: &T) -> U) -> ~[U];\n     fn mapi<U>(&self, f: &fn(uint, t: &T) -> U) -> ~[U];\n@@ -2002,6 +1973,15 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n                         lifetime: cast::transmute(p)}\n         }\n     }\n+    #[inline]\n+    fn rev_iter(self) -> VecRevIterator<'self, T> {\n+        unsafe {\n+            let p = vec::raw::to_ptr(self);\n+            VecRevIterator{ptr: p.offset(self.len() - 1),\n+                           end: p.offset(-1),\n+                           lifetime: cast::transmute(p)}\n+        }\n+    }\n \n     /// Returns the first element of a vector, failing if the vector is empty.\n     #[inline]\n@@ -2059,18 +2039,6 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n         rposition(*self, f)\n     }\n \n-    /// Iterates over a vector's elements in reverse.\n-    #[inline]\n-    fn each_reverse(&self, blk: &fn(&T) -> bool) -> bool {\n-        each_reverse(*self, blk)\n-    }\n-\n-    /// Iterates over a vector's elements and indices in reverse.\n-    #[inline]\n-    fn eachi_reverse(&self, blk: &fn(uint, &T) -> bool) -> bool {\n-        eachi_reverse(*self, blk)\n-    }\n-\n     /// Reduce a vector from right to left\n     #[inline]\n     fn foldr<'a, U>(&'a self, z: U, p: &fn(t: &'a T, u: U) -> U) -> U {\n@@ -2350,7 +2318,8 @@ impl<T:Eq> OwnedEqVector<T> for ~[T] {\n #[allow(missing_doc)]\n pub trait MutableVector<'self, T> {\n     fn mut_slice(self, start: uint, end: uint) -> &'self mut [T];\n-    fn mut_iter(self) -> MutVecIterator<'self, T>;\n+    fn mut_iter(self) -> VecMutIterator<'self, T>;\n+    fn mut_rev_iter(self) -> VecMutRevIterator<'self, T>;\n \n     unsafe fn unsafe_mut_ref(&self, index: uint) -> *mut T;\n     unsafe fn unsafe_set(&self, index: uint, val: T);\n@@ -2363,14 +2332,23 @@ impl<'self,T> MutableVector<'self, T> for &'self mut [T] {\n     }\n \n     #[inline]\n-    fn mut_iter(self) -> MutVecIterator<'self, T> {\n+    fn mut_iter(self) -> VecMutIterator<'self, T> {\n         unsafe {\n             let p = vec::raw::to_mut_ptr(self);\n-            MutVecIterator{ptr: p, end: p.offset(self.len()),\n+            VecMutIterator{ptr: p, end: p.offset(self.len()),\n                            lifetime: cast::transmute(p)}\n         }\n     }\n \n+    fn mut_rev_iter(self) -> VecMutRevIterator<'self, T> {\n+        unsafe {\n+            let p = vec::raw::to_mut_ptr(self);\n+            VecMutRevIterator{ptr: p.offset(self.len() - 1),\n+                              end: p.offset(-1),\n+                              lifetime: cast::transmute(p)}\n+        }\n+    }\n+\n     #[inline(always)]\n     unsafe fn unsafe_mut_ref(&self, index: uint) -> *mut T {\n         let pair_ptr: &(*mut T, uint) = transmute(self);\n@@ -2872,52 +2850,69 @@ impl<A:Clone> Clone for ~[A] {\n     }\n }\n \n-/// An external iterator for vectors (use with the std::iterator module)\n+macro_rules! iterator {\n+    /* FIXME: #4375 Cannot attach documentation/attributes to a macro generated struct.\n+    (struct $name:ident -> $ptr:ty, $elem:ty) => {\n+        pub struct $name<'self, T> {\n+            priv ptr: $ptr,\n+            priv end: $ptr,\n+            priv lifetime: $elem // FIXME: #5922\n+        }\n+    };*/\n+    (impl $name:ident -> $elem:ty, $step:expr) => {\n+        // could be implemented with &[T] with .slice(), but this avoids bounds checks\n+        impl<'self, T> Iterator<$elem> for $name<'self, T> {\n+            #[inline]\n+            fn next(&mut self) -> Option<$elem> {\n+                unsafe {\n+                    if self.ptr == self.end {\n+                        None\n+                    } else {\n+                        let old = self.ptr;\n+                        self.ptr = self.ptr.offset($step);\n+                        Some(cast::transmute(old))\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+//iterator!{struct VecIterator -> *T, &'self T}\n+/// An iterator for iterating over a vector\n pub struct VecIterator<'self, T> {\n     priv ptr: *T,\n     priv end: *T,\n     priv lifetime: &'self T // FIXME: #5922\n }\n+iterator!{impl VecIterator -> &'self T, 1}\n \n-// could be implemented with &[T] with .slice(), but this avoids bounds checks\n-impl<'self, T> Iterator<&'self T> for VecIterator<'self, T> {\n-    #[inline]\n-    fn next(&mut self) -> Option<&'self T> {\n-        unsafe {\n-            if self.ptr == self.end {\n-                None\n-            } else {\n-                let old = self.ptr;\n-                self.ptr = self.ptr.offset(1);\n-                Some(cast::transmute(old))\n-            }\n-        }\n-    }\n+//iterator!{struct VecRevIterator -> *T, &'self T}\n+/// An iterator for iterating over a vector in reverse\n+pub struct VecRevIterator<'self, T> {\n+    priv ptr: *T,\n+    priv end: *T,\n+    priv lifetime: &'self T // FIXME: #5922\n }\n+iterator!{impl VecRevIterator -> &'self T, -1}\n \n-/// An external iterator for vectors with the possibility of mutating\n-/// elements. (use with the std::iterator module)\n-pub struct MutVecIterator<'self, T> {\n+//iterator!{struct VecMutIterator -> *mut T, &'self mut T}\n+/// An iterator for mutating the elements of a vector\n+pub struct VecMutIterator<'self, T> {\n     priv ptr: *mut T,\n     priv end: *mut T,\n     priv lifetime: &'self mut T // FIXME: #5922\n }\n+iterator!{impl VecMutIterator -> &'self mut T, 1}\n \n-// could be implemented with &[T] with .slice(), but this avoids bounds checks\n-impl<'self, T> Iterator<&'self mut T> for MutVecIterator<'self, T> {\n-    #[inline]\n-    fn next(&mut self) -> Option<&'self mut T> {\n-        unsafe {\n-            if self.ptr == self.end {\n-                None\n-            } else {\n-                let old = self.ptr;\n-                self.ptr = self.ptr.offset(1);\n-                Some(cast::transmute(old))\n-            }\n-        }\n-    }\n+//iterator!{struct VecMutRevIterator -> *mut T, &'self mut T}\n+/// An iterator for mutating the elements of a vector in reverse\n+pub struct VecMutRevIterator<'self, T> {\n+    priv ptr: *mut T,\n+    priv end: *mut T,\n+    priv lifetime: &'self mut T // FIXME: #5922\n }\n+iterator!{impl VecMutRevIterator -> &'self mut T, -1}\n \n impl<T> FromIter<T> for ~[T]{\n     #[inline(always)]\n@@ -3527,43 +3522,6 @@ mod tests {\n         assert_eq!(i, 6);\n     }\n \n-    #[test]\n-    fn test_each_reverse_empty() {\n-        let v: ~[int] = ~[];\n-        for v.each_reverse |_v| {\n-            fail!(); // should never execute\n-        }\n-    }\n-\n-    #[test]\n-    fn test_each_reverse_nonempty() {\n-        let mut i = 0;\n-        for each_reverse([1, 2, 3]) |v| {\n-            if i == 0 { assert!(*v == 3); }\n-            i += *v\n-        }\n-        assert_eq!(i, 6);\n-    }\n-\n-    #[test]\n-    fn test_eachi_reverse() {\n-        let mut i = 0;\n-        for eachi_reverse([0, 1, 2]) |j, v| {\n-            if i == 0 { assert!(*v == 2); }\n-            assert_eq!(j, *v as uint);\n-            i += *v;\n-        }\n-        assert_eq!(i, 3);\n-    }\n-\n-    #[test]\n-    fn test_eachi_reverse_empty() {\n-        let v: ~[int] = ~[];\n-        for v.eachi_reverse |_i, _v| {\n-            fail!(); // should never execute\n-        }\n-    }\n-\n     #[test]\n     fn test_each_ret_len0() {\n         let mut a0 : [int, .. 0] = [];\n@@ -4642,6 +4600,30 @@ mod tests {\n         assert_eq!(xs, [2, 3, 4, 5, 6])\n     }\n \n+    #[test]\n+    fn test_rev_iterator() {\n+        use iterator::*;\n+\n+        let xs = [1, 2, 5, 10, 11];\n+        let ys = [11, 10, 5, 2, 1];\n+        let mut i = 0;\n+        for xs.rev_iter().advance |&x| {\n+            assert_eq!(x, ys[i]);\n+            i += 1;\n+        }\n+        assert_eq!(i, 5);\n+    }\n+\n+    #[test]\n+    fn test_mut_rev_iterator() {\n+        use iterator::*;\n+        let mut xs = [1, 2, 3, 4, 5];\n+        for xs.mut_rev_iter().enumerate().advance |(i,x)| {\n+            *x += i;\n+        }\n+        assert_eq!(xs, [5, 5, 5, 5, 5])\n+    }\n+\n     #[test]\n     fn test_reverse_part() {\n         let mut values = [1,2,3,4,5];"}]}