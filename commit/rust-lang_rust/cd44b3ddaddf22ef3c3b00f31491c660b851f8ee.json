{"sha": "cd44b3ddaddf22ef3c3b00f31491c660b851f8ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNDRiM2RkYWRkZjIyZWYzYzNiMDBmMzE0OTFjNjYwYjg1MWY4ZWU=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-07-10T20:32:19Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-07-10T20:32:19Z"}, "message": "Add missing dyn in liballoc", "tree": {"sha": "e81c86c3a912174e25328f00226b1cc02b95ebe3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e81c86c3a912174e25328f00226b1cc02b95ebe3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd44b3ddaddf22ef3c3b00f31491c660b851f8ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd44b3ddaddf22ef3c3b00f31491c660b851f8ee", "html_url": "https://github.com/rust-lang/rust/commit/cd44b3ddaddf22ef3c3b00f31491c660b851f8ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd44b3ddaddf22ef3c3b00f31491c660b851f8ee/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "296e72f11c4120c7b38a0cc580ef8990e7a1c36d", "url": "https://api.github.com/repos/rust-lang/rust/commits/296e72f11c4120c7b38a0cc580ef8990e7a1c36d", "html_url": "https://github.com/rust-lang/rust/commit/296e72f11c4120c7b38a0cc580ef8990e7a1c36d"}], "stats": {"total": 73, "additions": 36, "deletions": 37}, "files": [{"sha": "fb16bdf0ab43ae4d4872b87f4c44d5bb6aabb081", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cd44b3ddaddf22ef3c3b00f31491c660b851f8ee/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd44b3ddaddf22ef3c3b00f31491c660b851f8ee/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=cd44b3ddaddf22ef3c3b00f31491c660b851f8ee", "patch": "@@ -446,7 +446,7 @@ impl From<Box<str>> for Box<[u8]> {\n     }\n }\n \n-impl Box<dyn Any> {\n+impl Box<Any> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     /// Attempt to downcast the box to a concrete type.\n@@ -468,10 +468,10 @@ impl Box<dyn Any> {\n     ///     print_if_string(Box::new(0i8));\n     /// }\n     /// ```\n-    pub fn downcast<T: Any>(self) -> Result<Box<T>, Box<dyn Any>> {\n+    pub fn downcast<T: Any>(self) -> Result<Box<T>, Box<Any>> {\n         if self.is::<T>() {\n             unsafe {\n-                let raw: *mut dyn Any = Box::into_raw(self);\n+                let raw: *mut Any = Box::into_raw(self);\n                 Ok(Box::from_raw(raw as *mut T))\n             }\n         } else {\n@@ -480,7 +480,7 @@ impl Box<dyn Any> {\n     }\n }\n \n-impl Box<dyn Any + Send> {\n+impl Box<Any + Send> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     /// Attempt to downcast the box to a concrete type.\n@@ -502,10 +502,10 @@ impl Box<dyn Any + Send> {\n     ///     print_if_string(Box::new(0i8));\n     /// }\n     /// ```\n-    pub fn downcast<T: Any>(self) -> Result<Box<T>, Box<dyn Any + Send>> {\n-        <Box<dyn Any>>::downcast(self).map_err(|s| unsafe {\n+    pub fn downcast<T: Any>(self) -> Result<Box<T>, Box<Any + Send>> {\n+        <Box<Any>>::downcast(self).map_err(|s| unsafe {\n             // reapply the Send marker\n-            Box::from_raw(Box::into_raw(s) as *mut (dyn Any + Send))\n+            Box::from_raw(Box::into_raw(s) as *mut (Any + Send))\n         })\n     }\n }\n@@ -643,7 +643,7 @@ impl<A, F> FnBox<A> for F\n \n #[unstable(feature = \"fnbox\",\n            reason = \"will be deprecated if and when `Box<FnOnce>` becomes usable\", issue = \"28796\")]\n-impl<'a, A, R> FnOnce<A> for Box<dyn FnBox<A, Output = R> + 'a> {\n+impl<'a, A, R> FnOnce<A> for Box<FnBox<A, Output = R> + 'a> {\n     type Output = R;\n \n     extern \"rust-call\" fn call_once(self, args: A) -> R {\n@@ -653,7 +653,7 @@ impl<'a, A, R> FnOnce<A> for Box<dyn FnBox<A, Output = R> + 'a> {\n \n #[unstable(feature = \"fnbox\",\n            reason = \"will be deprecated if and when `Box<FnOnce>` becomes usable\", issue = \"28796\")]\n-impl<'a, A, R> FnOnce<A> for Box<dyn FnBox<A, Output = R> + Send + 'a> {\n+impl<'a, A, R> FnOnce<A> for Box<FnBox<A, Output = R> + Send + 'a> {\n     type Output = R;\n \n     extern \"rust-call\" fn call_once(self, args: A) -> R {"}, {"sha": "55995742a4a7da7bfa1ce5ec4008145190da7842", "filename": "src/liballoc/boxed_test.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cd44b3ddaddf22ef3c3b00f31491c660b851f8ee/src%2Fliballoc%2Fboxed_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd44b3ddaddf22ef3c3b00f31491c660b851f8ee/src%2Fliballoc%2Fboxed_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed_test.rs?ref=cd44b3ddaddf22ef3c3b00f31491c660b851f8ee", "patch": "@@ -31,8 +31,8 @@ struct Test;\n \n #[test]\n fn any_move() {\n-    let a = Box::new(8) as Box<Any>;\n-    let b = Box::new(Test) as Box<Any>;\n+    let a = Box::new(8) as Box<dyn Any>;\n+    let b = Box::new(Test) as Box<dyn Any>;\n \n     match a.downcast::<i32>() {\n         Ok(a) => {\n@@ -47,26 +47,26 @@ fn any_move() {\n         Err(..) => panic!(),\n     }\n \n-    let a = Box::new(8) as Box<Any>;\n-    let b = Box::new(Test) as Box<Any>;\n+    let a = Box::new(8) as Box<dyn Any>;\n+    let b = Box::new(Test) as Box<dyn Any>;\n \n     assert!(a.downcast::<Box<Test>>().is_err());\n     assert!(b.downcast::<Box<i32>>().is_err());\n }\n \n #[test]\n fn test_show() {\n-    let a = Box::new(8) as Box<Any>;\n-    let b = Box::new(Test) as Box<Any>;\n+    let a = Box::new(8) as Box<dyn Any>;\n+    let b = Box::new(Test) as Box<dyn Any>;\n     let a_str = format!(\"{:?}\", a);\n     let b_str = format!(\"{:?}\", b);\n     assert_eq!(a_str, \"Any\");\n     assert_eq!(b_str, \"Any\");\n \n     static EIGHT: usize = 8;\n     static TEST: Test = Test;\n-    let a = &EIGHT as &Any;\n-    let b = &TEST as &Any;\n+    let a = &EIGHT as &dyn Any;\n+    let b = &TEST as &dyn Any;\n     let s = format!(\"{:?}\", a);\n     assert_eq!(s, \"Any\");\n     let s = format!(\"{:?}\", b);\n@@ -110,12 +110,12 @@ fn raw_trait() {\n         }\n     }\n \n-    let x: Box<Foo> = Box::new(Bar(17));\n+    let x: Box<dyn Foo> = Box::new(Bar(17));\n     let p = Box::into_raw(x);\n     unsafe {\n         assert_eq!(17, (*p).get());\n         (*p).set(19);\n-        let y: Box<Foo> = Box::from_raw(p);\n+        let y: Box<dyn Foo> = Box::from_raw(p);\n         assert_eq!(19, y.get());\n     }\n }"}, {"sha": "ef619527e064a34d2f8f387881619570393cde5d", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cd44b3ddaddf22ef3c3b00f31491c660b851f8ee/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd44b3ddaddf22ef3c3b00f31491c660b851f8ee/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=cd44b3ddaddf22ef3c3b00f31491c660b851f8ee", "patch": "@@ -72,7 +72,6 @@\n        test(no_crate_inject, attr(allow(unused_variables), deny(warnings))))]\n #![no_std]\n #![needs_allocator]\n-#![deny(bare_trait_objects)]\n #![deny(missing_debug_implementations)]\n \n #![cfg_attr(test, allow(deprecated))] // rand"}, {"sha": "3643f78d323751c7464cc3160336b81541d202a4", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cd44b3ddaddf22ef3c3b00f31491c660b851f8ee/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd44b3ddaddf22ef3c3b00f31491c660b851f8ee/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=cd44b3ddaddf22ef3c3b00f31491c660b851f8ee", "patch": "@@ -618,7 +618,7 @@ impl<T: Clone> Rc<T> {\n     }\n }\n \n-impl Rc<dyn Any> {\n+impl Rc<Any> {\n     #[inline]\n     #[stable(feature = \"rc_downcast\", since = \"1.29.0\")]\n     /// Attempt to downcast the `Rc<Any>` to a concrete type.\n@@ -641,7 +641,7 @@ impl Rc<dyn Any> {\n     ///     print_if_string(Rc::new(0i8));\n     /// }\n     /// ```\n-    pub fn downcast<T: Any>(self) -> Result<Rc<T>, Rc<dyn Any>> {\n+    pub fn downcast<T: Any>(self) -> Result<Rc<T>, Rc<Any>> {\n         if (*self).is::<T>() {\n             let ptr = self.ptr.cast::<RcBox<T>>();\n             forget(self);\n@@ -1554,7 +1554,7 @@ mod tests {\n         assert_eq!(unsafe { &*ptr }, \"foo\");\n         assert_eq!(rc, rc2);\n \n-        let rc: Rc<Display> = Rc::new(123);\n+        let rc: Rc<dyn Display> = Rc::new(123);\n \n         let ptr = Rc::into_raw(rc.clone());\n         let rc2 = unsafe { Rc::from_raw(ptr) };\n@@ -1755,8 +1755,8 @@ mod tests {\n         use std::fmt::Display;\n         use std::string::ToString;\n \n-        let b: Box<Display> = box 123;\n-        let r: Rc<Display> = Rc::from(b);\n+        let b: Box<dyn Display> = box 123;\n+        let r: Rc<dyn Display> = Rc::from(b);\n \n         assert_eq!(r.to_string(), \"123\");\n     }\n@@ -1765,8 +1765,8 @@ mod tests {\n     fn test_from_box_trait_zero_sized() {\n         use std::fmt::Debug;\n \n-        let b: Box<Debug> = box ();\n-        let r: Rc<Debug> = Rc::from(b);\n+        let b: Box<dyn Debug> = box ();\n+        let r: Rc<dyn Debug> = Rc::from(b);\n \n         assert_eq!(format!(\"{:?}\", r), \"()\");\n     }\n@@ -1783,8 +1783,8 @@ mod tests {\n     fn test_downcast() {\n         use std::any::Any;\n \n-        let r1: Rc<Any> = Rc::new(i32::max_value());\n-        let r2: Rc<Any> = Rc::new(\"abc\");\n+        let r1: Rc<dyn Any> = Rc::new(i32::max_value());\n+        let r2: Rc<dyn Any> = Rc::new(\"abc\");\n \n         assert!(r1.clone().downcast::<u32>().is_err());\n "}, {"sha": "35aae191683d93a672f358bb71189459f764fad6", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cd44b3ddaddf22ef3c3b00f31491c660b851f8ee/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd44b3ddaddf22ef3c3b00f31491c660b851f8ee/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=cd44b3ddaddf22ef3c3b00f31491c660b851f8ee", "patch": "@@ -978,7 +978,7 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for Arc<T> {\n     }\n }\n \n-impl Arc<dyn Any + Send + Sync> {\n+impl Arc<Any + Send + Sync> {\n     #[inline]\n     #[stable(feature = \"rc_downcast\", since = \"1.29.0\")]\n     /// Attempt to downcast the `Arc<Any + Send + Sync>` to a concrete type.\n@@ -1574,7 +1574,7 @@ mod tests {\n         assert_eq!(unsafe { &*ptr }, \"foo\");\n         assert_eq!(arc, arc2);\n \n-        let arc: Arc<Display> = Arc::new(123);\n+        let arc: Arc<dyn Display> = Arc::new(123);\n \n         let ptr = Arc::into_raw(arc.clone());\n         let arc2 = unsafe { Arc::from_raw(ptr) };\n@@ -1879,8 +1879,8 @@ mod tests {\n         use std::fmt::Display;\n         use std::string::ToString;\n \n-        let b: Box<Display> = box 123;\n-        let r: Arc<Display> = Arc::from(b);\n+        let b: Box<dyn Display> = box 123;\n+        let r: Arc<dyn Display> = Arc::from(b);\n \n         assert_eq!(r.to_string(), \"123\");\n     }\n@@ -1889,8 +1889,8 @@ mod tests {\n     fn test_from_box_trait_zero_sized() {\n         use std::fmt::Debug;\n \n-        let b: Box<Debug> = box ();\n-        let r: Arc<Debug> = Arc::from(b);\n+        let b: Box<dyn Debug> = box ();\n+        let r: Arc<dyn Debug> = Arc::from(b);\n \n         assert_eq!(format!(\"{:?}\", r), \"()\");\n     }\n@@ -1907,8 +1907,8 @@ mod tests {\n     fn test_downcast() {\n         use std::any::Any;\n \n-        let r1: Arc<Any + Send + Sync> = Arc::new(i32::max_value());\n-        let r2: Arc<Any + Send + Sync> = Arc::new(\"abc\");\n+        let r1: Arc<dyn Any + Send + Sync> = Arc::new(i32::max_value());\n+        let r2: Arc<dyn Any + Send + Sync> = Arc::new(\"abc\");\n \n         assert!(r1.clone().downcast::<u32>().is_err());\n "}]}