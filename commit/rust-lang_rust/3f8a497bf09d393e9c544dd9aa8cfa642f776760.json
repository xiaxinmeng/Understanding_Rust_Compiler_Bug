{"sha": "3f8a497bf09d393e9c544dd9aa8cfa642f776760", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmOGE0OTdiZjA5ZDM5M2U5YzU0NGRkOWFhOGNmYTY0MmY3NzY3NjA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-14T06:42:18Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-25T08:30:12Z"}, "message": "we need to normalize associated types also deep in the hierarchy (89)", "tree": {"sha": "9494c9e33e9de0a59f99139c6c528eb2b0f02a72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9494c9e33e9de0a59f99139c6c528eb2b0f02a72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f8a497bf09d393e9c544dd9aa8cfa642f776760", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAll3AZQACgkQpp+NIls6\n19m8ghAAsjH2yBEk4+2c9EDh6IM6Q6D6xNMGIYiR+d4d4tpdtw/8VkDq381NdYPU\nKfME6yYB+1xTFKWCfk++s5Ued2jiMwxp8Dh6N7Wf5TWJ2aK8ctesXCbE4YbjwXGW\nX+1Fm/2iMNeO68lpVQPKOFzT0mdLpV70XKBJDJNiBfI2MQFORmpbUbjl6AZDFA8Z\n9L97Uh2rJhEz5kwQBoScweVl65CU+JkmlJV8FgT194YIFaREA4gELETDAlrQWIXx\n5y5Q6XrPQ+xu974IGi6RLF+i7mBAniToWVvwLPMa7lTeqX0aOexcrBuac+L7MS38\nZdPMDhnTI+EoXqL8lWP/i4h9+Hw1hyTQUKuvklzxthWc7hOgMsakM+f7al48dMKo\nHfIA2Mbh0JH+zQs6ybagdqSUq+/aIMkjCURwzC1Ed3THXnGjdMHZ/+SiKQE4kWfA\nF4eCCpf8xNC5C6Js2nN7TdMAmgDVAusbZl0KfePnCF+kdM94229GBq8bpztbcoa2\nEr2zG8IwhRmQ7+SxyeYegDOvU6kAG7rpvl+/h4xssIpxAIlgIg9OweJ9zdEMe/ZL\nlXyzWFJmqoY8kCS06KhJhDQG9ogF6vdzOHo+ohkdHTABgGcodG51pgPae2pS+W4K\nRrGSNBa+3T6hGljCHTS6UoTnUZpqtQ+0IuFN2NoO2/Uf8q4+EH0=\n=S+7z\n-----END PGP SIGNATURE-----", "payload": "tree 9494c9e33e9de0a59f99139c6c528eb2b0f02a72\nparent 769a2b5c813fc476e69ac21b13b42a2fa96f3dfe\nauthor Ralf Jung <post@ralfj.de> 1500014538 -0700\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1500971412 +0200\n\nwe need to normalize associated types also deep in the hierarchy (89)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f8a497bf09d393e9c544dd9aa8cfa642f776760", "html_url": "https://github.com/rust-lang/rust/commit/3f8a497bf09d393e9c544dd9aa8cfa642f776760", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f8a497bf09d393e9c544dd9aa8cfa642f776760/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "769a2b5c813fc476e69ac21b13b42a2fa96f3dfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/769a2b5c813fc476e69ac21b13b42a2fa96f3dfe", "html_url": "https://github.com/rust-lang/rust/commit/769a2b5c813fc476e69ac21b13b42a2fa96f3dfe"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "16501091240fc936003ff9455ff48b36605b0071", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3f8a497bf09d393e9c544dd9aa8cfa642f776760/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f8a497bf09d393e9c544dd9aa8cfa642f776760/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=3f8a497bf09d393e9c544dd9aa8cfa642f776760", "patch": "@@ -7,10 +7,9 @@ use rustc::hir;\n use rustc::mir::visit::{Visitor, LvalueContext};\n use rustc::mir;\n use rustc::traits::Reveal;\n-use rustc::ty::{self, TypeFoldable};\n+use rustc::ty;\n use rustc::ty::layout::Layout;\n use rustc::ty::subst::{Subst, Substs};\n-use rustc::infer::TransNormalize;\n \n use error::{EvalResult, EvalError};\n use eval_context::{EvalContext, StackPopCleanup};\n@@ -137,16 +136,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             Validate(op, ref lvalues) => {\n                 for operand in lvalues {\n                     // We need to monomorphize ty *without* erasing lifetimes\n-                    let mut ty = operand.ty.subst(self.tcx, self.substs());\n-                    // This is essentially a copy of normalize_associated_type, but without erasure\n-                    if ty.has_projection_types() {\n-                        let param_env = ty::ParamEnv::empty(Reveal::All);\n-                        ty = self.tcx.infer_ctxt().enter(move |infcx| {\n-                            ty.trans_normalize(&infcx, param_env)\n-                        })\n-                    }\n-\n-                    // Now we can do validation at this type\n+                    let ty = operand.ty.subst(self.tcx, self.substs());\n                     let lvalue = self.eval_lvalue(&operand.lval)?;\n                     self.validate(lvalue, ty, ValidationCtx::new(op))?;\n                 }"}, {"sha": "3ee6bab77e051d6d7608841e75d28f32efc4e82f", "filename": "src/librustc_mir/interpret/terminator/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f8a497bf09d393e9c544dd9aa8cfa642f776760/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f8a497bf09d393e9c544dd9aa8cfa642f776760/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs?ref=3f8a497bf09d393e9c544dd9aa8cfa642f776760", "patch": "@@ -467,7 +467,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     pub fn read_discriminant_value(&self, adt_ptr: MemoryPointer, adt_ty: Ty<'tcx>) -> EvalResult<'tcx, u128> {\n         use rustc::ty::layout::Layout::*;\n         let adt_layout = self.type_layout(adt_ty)?;\n-        trace!(\"read_discriminant_value {:#?}\", adt_layout);\n+        //trace!(\"read_discriminant_value {:#?}\", adt_layout);\n \n         let discr_val = match *adt_layout {\n             General { discr, .. } | CEnum { discr, signed: false, .. } => {"}, {"sha": "7795bd0e126c4721dcfc165dabef6066c2e65a0e", "filename": "src/librustc_mir/interpret/validation.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3f8a497bf09d393e9c544dd9aa8cfa642f776760/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f8a497bf09d393e9c544dd9aa8cfa642f776760/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs?ref=3f8a497bf09d393e9c544dd9aa8cfa642f776760", "patch": "@@ -1,6 +1,8 @@\n use rustc::hir::Mutability;\n use rustc::mir::{self, ValidationOp};\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Ty, TypeFoldable};\n+use rustc::traits::Reveal;\n+use rustc::infer::TransNormalize;\n use rustc::middle::region::CodeExtent;\n \n use error::{EvalError, EvalResult};\n@@ -55,12 +57,21 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     }\n \n     /// Validate the lvalue at the given type. If `release` is true, just do a release of all write locks\n-    pub(super) fn validate(&mut self, lvalue: Lvalue<'tcx>, ty: Ty<'tcx>, mut vctx: ValidationCtx) -> EvalResult<'tcx>\n+    pub(super) fn validate(&mut self, lvalue: Lvalue<'tcx>, mut ty: Ty<'tcx>, mut vctx: ValidationCtx) -> EvalResult<'tcx>\n     {\n         use rustc::ty::TypeVariants::*;\n         use rustc::ty::RegionKind::*;\n         use rustc::ty::AdtKind;\n         use self::Mutability::*;\n+\n+        // This is essentially a copy of normalize_associated_type, but without erasure\n+        if ty.has_projection_types() {\n+            let param_env = ty::ParamEnv::empty(Reveal::All);\n+            ty = self.tcx.infer_ctxt().enter(move |infcx| {\n+                ty.trans_normalize(&infcx, param_env)\n+            })\n+        }\n+        let ty = ty; // no more mutation\n         trace!(\"Validating {:?} at type {}, context {:?}\", lvalue, ty, vctx);\n \n         // Decide whether this type *owns* the memory it covers (like integers), or whether it"}]}